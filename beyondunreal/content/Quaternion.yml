---
parse:
  title: "Quaternion"
  text:
    text: "<p><a href=\"http://en.wikipedia.org/wiki/Quaternions\" class=\"extiw\"\
      \ title=\"wp:Quaternions\">Quaternions</a> are a mathematical construct that\
      \ could be seen as an extension of the <a href=\"http://en.wikipedia.org/wiki/complex_numbers\"\
      \ class=\"extiw\" title=\"wp:complex numbers\">complex numbers</a> with three\
      \ different imaginary units or as a combination of a scalar value and a three-dimensional\
      \ <a href=\"/Vector\" title=\"Vector\">vector</a>. A special subset of the quaternions,\
      \ the unit quaternions, can be used to represent rotations in 3D space.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Definition\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Definition</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Additive_operations\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Additive operations</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Scalar_multiplication\"><span\
      \ class=\"tocnumber\">1.2</span> <span class=\"toctext\">Scalar multiplication</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Conjugate_quaternion\"><span\
      \ class=\"tocnumber\">1.3</span> <span class=\"toctext\">Conjugate quaternion</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Hamilton_product\"><span class=\"\
      tocnumber\">1.4</span> <span class=\"toctext\">Hamilton product</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Norm\"><span class=\"tocnumber\"\
      >1.5</span> <span class=\"toctext\">Norm</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Inverse\"><span class=\"tocnumber\">1.6</span> <span\
      \ class=\"toctext\">Inverse</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-8\"><a href=\"#Quaternion_rotation\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Quaternion rotation</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-9\"><a href=\"#UnrealScript_functions\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">UnrealScript functions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#QuatProduct.28Quat.2C_Quat.29\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">QuatProduct(Quat,\
      \ Quat)</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"#QuatDot.28Quat.2C_Quat.29\"\
      ><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">QuatDot(Quat,\
      \ Quat)</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#QuatInvert.28Quat.29\"\
      ><span class=\"tocnumber\">3.3</span> <span class=\"toctext\">QuatInvert(Quat)</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#QuatRotateVector.28Quat.2C_Vector.29\"\
      ><span class=\"tocnumber\">3.4</span> <span class=\"toctext\">QuatRotateVector(Quat,\
      \ Vector)</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"\
      #QuatFindBetween.28Vector.2C_Vector.29\"><span class=\"tocnumber\">3.5</span>\
      \ <span class=\"toctext\">QuatFindBetween(Vector, Vector)</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#QuatFromAxisAndAngle.28Vector.2C_float.29\"\
      ><span class=\"tocnumber\">3.6</span> <span class=\"toctext\">QuatFromAxisAndAngle(Vector,\
      \ float)</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"\
      #QuatFromRotator.28Rotator.29\"><span class=\"tocnumber\">3.7</span> <span class=\"\
      toctext\">QuatFromRotator(Rotator)</span></a></li>\n<li class=\"toclevel-2 tocsection-17\"\
      ><a href=\"#QuatToRotator.28Quat.29\"><span class=\"tocnumber\">3.8</span> <span\
      \ class=\"toctext\">QuatToRotator(Quat)</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-18\"><a href=\"#QuatSlerp.28Quat.2C_Quat.2C_float.29\"><span class=\"\
      tocnumber\">3.9</span> <span class=\"toctext\">QuatSlerp(Quat, Quat, float)</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      Definition\">Definition</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=1\" title=\"\
      Edit section: Definition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Generally a quaternion is a four-dimensional value that is written as either\
      \ x = x<sub>0</sub>+ x<sub>1</sub><b>i</b> + x<sub>2</sub><b>j</b> + x<sub>3</sub><b>k</b>\
      \ or as x = (x<sub>0</sub>, x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>), where\
      \ x<sub>0</sub> is called the real or scalar part Re(x) and (x<sub>1</sub>,\
      \ x<sub>2</sub>, x<sub>3</sub>) is the imaginary or vector part Im(x). If the\
      \ vector part is zero, the quaternion is called real, while a quaternion with\
      \ a zero scalar part is called a pure imaginary quaternion. Real quaternions\
      \ (x<sub>0</sub>, 0, 0, 0) could also be written as x<sub>0</sub>+ 0<b>i</b>\
      \ + 0<b>j</b> + 0<b>k</b> = x<sub>0</sub>.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Additive_operations\">Additive operations</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=2\"\
      \ title=\"Edit section: Additive operations\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Addition, subtraction and negation of quaternions\
      \ is defined the same way as for vectors:</p>\n<ul>\n<li>x + y = y + x = (x<sub>0</sub>+\
      \ y<sub>0</sub>, x<sub>1</sub>+ y<sub>1</sub>, x<sub>2</sub>+ y<sub>2</sub>,\
      \ x<sub>3</sub>+ y<sub>3</sub>)</li>\n<li>x - y = -y + x = (x<sub>0</sub>- y<sub>0</sub>,\
      \ x<sub>1</sub>- y<sub>1</sub>, x<sub>2</sub>- y<sub>2</sub>, x<sub>3</sub>-\
      \ y<sub>3</sub>)</li>\n<li>-x = (-x<sub>0</sub>, -x<sub>1</sub>, -x<sub>2</sub>,\
      \ -x<sub>3</sub>)</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"Scalar_multiplication\"\
      >Scalar multiplication</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=3\" title=\"Edit section: Scalar\
      \ multiplication\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The same goes for multiplication with and division by a scalar value <i>a</i>\
      \ and \"scalar multiplication\" of two quaternions <i>x</i> and <i>y</i>:</p>\n\
      <ul>\n<li>a · x = x · a = (a · x<sub>0</sub>, a · x<sub>1</sub>, a · x<sub>2</sub>,\
      \ a · x<sub>3</sub>)</li>\n<li>x / a = x · 1/a = 1/a · x = x · a<sup>-1</sup>\
      \ = (x<sub>0</sub> / a, x<sub>1</sub> / a, x<sub>2</sub> / a, x<sub>3</sub>\
      \ / a)</li>\n<li>x · y = y · x = x<sub>0</sub>· y<sub>0</sub> + x<sub>1</sub>·\
      \ y<sub>1</sub> + x<sub>2</sub>· y<sub>2</sub> + x<sub>3</sub>· y<sub>3</sub></li>\n\
      </ul>\n<h3><span class=\"mw-headline\" id=\"Conjugate_quaternion\">Conjugate\
      \ quaternion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=4\" title=\"Edit section: Conjugate\
      \ quaternion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Quaterions are \"hypercomplex\" numbers. Like \"normal\" complex numbers\
      \ with one imaginary component, quaternions define the conjugate quaternion\
      \ <span style=\"text-decoration: overline;\">x</span> or x<sup>*</sup>:</p>\n\
      <ul>\n<li><span style=\"text-decoration: overline;\">x</span> = (x<sub>0</sub>,\
      \ -x<sub>1</sub>, -x<sub>2</sub>, -x<sub>3</sub>)</li>\n</ul>\n<h3><span class=\"\
      mw-headline\" id=\"Hamilton_product\">Hamilton product</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=5\"\
      \ title=\"Edit section: Hamilton product\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A quite unique operation of quaternions is the Hamilton\
      \ product, i.e. the multiplication of two quaternions that yields a quaternion\
      \ again. This one is special, because unlike addition or scalar product, it\
      \ is <i>not</i> commutative.</p>\n<ul>\n<li>x y = (x<sub>0</sub>· y<sub>0</sub>\
      \ - x<sub>1</sub>· y<sub>1</sub> - x<sub>2</sub>· y<sub>2</sub> - x<sub>3</sub>·\
      \ y<sub>3</sub>, x<sub>0</sub>· y<sub>1</sub> + x<sub>1</sub>· y<sub>0</sub>\
      \ + x<sub>2</sub>· y<sub>3</sub> - x<sub>3</sub>· y<sub>2</sub>, x<sub>0</sub>·\
      \ y<sub>2</sub> - x<sub>1</sub>· y<sub>3</sub> + x<sub>2</sub>· y<sub>0</sub>\
      \ + x<sub>3</sub>· y<sub>1</sub>, x<sub>0</sub>· y<sub>3</sub> + x<sub>1</sub>·\
      \ y<sub>2</sub> - x<sub>2</sub>· y<sub>1</sub> + x<sub>3</sub>· y<sub>0</sub>)</li>\n\
      </ul>\n<p>Now that looks vile. But if you express the quaternions as a combination\
      \ of a scalar and a vector part, i.e. x = (x<sub>0</sub>, x<sub>V</sub>), you\
      \ can express quaternion multiplication using the 3D vector scalar product \"\
      ·\", cross product \"⨯\" and vector multiplication by a scalar value:</p>\n\
      <ul>\n<li>x y = (x<sub>0</sub>, x<sub>V</sub>)(y<sub>0</sub>, y<sub>V</sub>)\
      \ = (x<sub>0</sub>y<sub>0</sub>- x<sub>V</sub>· y<sub>V</sub>, x<sub>0</sub>y<sub>V</sub>\
      \ + x<sub>V</sub>y<sub>0</sub>+ x<sub>V</sub>⨯ y<sub>V</sub>)</li>\n</ul>\n\
      <p>This representation also easily shows that x y ≠ y x, because x<sub>V</sub>⨯\
      \ y<sub>V</sub> = -(y<sub>V</sub>⨯ x<sub>V</sub>).</p>\n<p>Now if you recall\
      \ that a \"real quaternion\" (vector part zero) is essentially the same as a\
      \ real number, you can easily see that the quaterion scalar product is basically\
      \ a special, commutative case of the Hamilton product. In fact, even the multiplication\
      \ of real numbers could be seen a special case of the Hamilton product, which\
      \ both quaternions having zero vector parts.</p>\n<p>Another important special\
      \ case is the Hamilton product of two unit quaterions: The result of such a\
      \ multiplication is a unit quaternion again.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Norm\">Norm</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=6\" title=\"Edit section: Norm\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>A quaternion's\
      \ norm ||x||<sup>2</sup> (its \"length\") is defined similarly to a vector's\
      \ length:</p>\n<ul>\n<li>||x||<sup>2</sup> = x <span style=\"text-decoration:\
      \ overline;\">x</span> = <span style=\"text-decoration: overline;\">x</span>\
      \ x = x · x = x<sub>0</sub><sup>2</sup>+ x<sub>1</sub><sup>2</sup>+ x<sub>2</sub><sup>2</sup>+\
      \ x<sub>3</sub><sup>2</sup></li>\n</ul>\n<p>The value ||x|| is called the length\
      \ or absolute value of the quaternion. Its square is equal to the scalar product\
      \ of the quaternion with itself or the Hamilton product with its conjugate quaternion.\
      \ A quaternion with the norm 1 is called a <b>unit quaternion</b>. Multiplying\
      \ a quaternion by its conjugate results in the vector part becoming zero, which\
      \ is why the resulting quaternion in the above equation can be considered a\
      \ scalar number. (Remember that quaternions are hypercomplex numbers, not euclidean\
      \ vectors. Real numbers are valid quaternion values with the vector part being\
      \ zero.)</p>\n<h3><span class=\"mw-headline\" id=\"Inverse\">Inverse</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Quaternion?section=7\" title=\"Edit section: Inverse\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>A quaternion's multiplicative\
      \ inverse, the reciprocal, x<sup>-1</sup> is defined as the value that satisfies\
      \ the equation x x<sup>-1</sup> = 1:</p>\n<ul>\n<li>x<sup>-1</sup> = <span style=\"\
      text-decoration: overline;\">x</span> / (x <span style=\"text-decoration: overline;\"\
      >x</span>) = <span style=\"text-decoration: overline;\">x</span> / ||x||<sup>2</sup></li>\n\
      </ul>\n<p>Note that the fractional notation is avoided if the denominator is\
      \ not a real number because the notation itself is ambiguous since it does not\
      \ specify if the denominator's reciprocal must be multiplied to the left or\
      \ to the right of the numerator and quaternion multiplication is not commutative.</p>\n\
      <p>An important special case of the inverse are unit quaterions. Because their\
      \ norm is already 1, the inverse of a unit quaterion is the same as the conjugate\
      \ of that unit quaternion.</p>\n<h2><span class=\"mw-headline\" id=\"Quaternion_rotation\"\
      >Quaternion rotation</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=8\" title=\"Edit section: Quaternion\
      \ rotation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The basis for expression rotations using quaternions are unit quaternions,\
      \ i.e. quaternions with a length of 1, and pure imaginary quaternions, i.e.\
      \ quaternions of the form (0, x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>).\
      \ Pure imaginary quaternions are used to represent vectors that will be rotated\
      \ around the origin in some way, while unit quaternions define the rotation\
      \ axis and angle. To apply a rotation defined by quaternion r to a vector defined\
      \ by quaternion v, all you need to do is calculate the quaternion product r\
      \ v r<sup>-1</sup>.</p>\n<p>A property of quaternion multiplication is that\
      \ the length of the resulting quaternion is the same as the product of the lengths\
      \ of the two original quaternions. Consequently the product of two unit quaternions\
      \ will be another unit quaternions. If those two unit quaternions represent\
      \ 3D rotations, the resulting unit quaternion will represent the combination\
      \ of these two rotations in the reverse order. The product r<sub>1</sub> r<sub>2</sub>\
      \ represents a rotation achieved by first applying r<sub>2</sub>, then r<sub>1</sub>.</p>\n\
      <p>The vector to rotate can be converted to a quaternion simply by using the\
      \ vector as the quaternion's vector part and zero as the scalar part. A rotation\
      \ quaternion is calculated from a rotation axis and an angle. Given the rotation\
      \ axis as unit vector u and the rotation angle α between 0 and 2π, the rotation\
      \ quaternion r is calculated as r = (cos α/2, u sin α/2).</p>\n<h2><span class=\"\
      mw-headline\" id=\"UnrealScript_functions\">UnrealScript functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Quaternion?section=9\" title=\"Edit section: UnrealScript functions\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ <a href=\"/Object\" title=\"Object\">Object</a><sup>(<span><a href=\"/UE2:Object_(U2)\"\
      \ title=\"UE2:Object (U2)\">U2</a></span>, <span><a href=\"/UE2:Object_(U2XMP)\"\
      \ title=\"UE2:Object (U2XMP)\">U2XMP</a></span>, <span><a href=\"/UE2:Object_(UE2Runtime)\"\
      \ title=\"UE2:Object (UE2Runtime)\">UE2Runtime</a></span>, <span><a href=\"\
      /UE2:Object_(UT2003)\" title=\"UE2:Object (UT2003)\">UT2003</a></span>, <span><a\
      \ href=\"/UE2:Object_(UT2004)\" title=\"UE2:Object (UT2004)\">UT2004</a></span>,\
      \ <span><a href=\"/UE3:Object_(UDK)\" title=\"UE3:Object (UDK)\">UDK</a></span>,\
      \ <span><a href=\"/UE3:Object_(UT3)\" title=\"UE3:Object (UT3)\">UT3</a></span>)</sup>\
      \ class provides several functions and (in UE3) operators for working with quaternions.\
      \ It defines the <a href=\"/Struct\" title=\"Struct\" class=\"mw-redirect\"\
      >struct</a> <b>Quat</b> with the components W, X, Y and Z as data type for a\
      \ quaternion value. Unreal Engine 3 also defines the binary operators <code>+</code>\
      \ and <code>-</code>, and like with every struct you can compare Quat values\
      \ for equality and inequality with the <code>==</code> and <code>!=</code> operators.</p>\n\
      <p>The Quat struct type is subject to data reduction during replication. The\
      \ engine assumes that you replicate only unit quaternions and only replicates\
      \ the X, Y and Z components. The W component will be calculated on the remote\
      \ side to get a unit quaternion again.</p>\n<p>Quaternion rotation is used in\
      \ rigid body physics calculations both in Unreal Engine 2 (PHYS_Karma) and Unreal\
      \ Engine 3 (PHYS_RigidBody). The rigid body physics state of an actor is composed\
      \ of a vector for the location, a quaternion for the rotation and two vectors\
      \ for linear and angular velocity.</p>\n<h3><span class=\"mw-headline\" id=\"\
      QuatProduct.28Quat.2C_Quat.29\">QuatProduct(Quat, Quat)</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=10\"\
      \ title=\"Edit section: QuatProduct(Quat, Quat)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Calculates the Hamilton product of the two quaternions\
      \ and returns the resulting quaternion value.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"QuatDot.28Quat.2C_Quat.29\">QuatDot(Quat, Quat)</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=11\"\
      \ title=\"Edit section: QuatDot(Quat, Quat)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Calculates the scalar product of the two quaternions\
      \ and returns the resulting float value. This function is not available in Unreal\
      \ Engine 2.</p>\n<h3><span class=\"mw-headline\" id=\"QuatInvert.28Quat.29\"\
      >QuatInvert(Quat)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=12\" title=\"Edit section: QuatInvert(Quat)\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Returns\
      \ the conjugate quaternion. Note that due to x<sup>-1</sup> = <span style=\"\
      text-decoration: overline;\">x</span> / ||x||<sup>2</sup> the conjugate quaternion\
      \ of a unit quaternion also is its reciprocal.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"QuatRotateVector.28Quat.2C_Vector.29\">QuatRotateVector(Quat, Vector)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Quaternion?section=13\" title=\"Edit section: QuatRotateVector(Quat,\
      \ Vector)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Rotates the specified vector by the given rotation quaternion and returns\
      \ the resulting vector value. Note that the result will only be actually the\
      \ rotated vector if the quaternion is a unit quaternion.</p>\n<h3><span class=\"\
      mw-headline\" id=\"QuatFindBetween.28Vector.2C_Vector.29\">QuatFindBetween(Vector,\
      \ Vector)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=14\" title=\"Edit section: QuatFindBetween(Vector,\
      \ Vector)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Calculates the quaternion that will rotate the first vector onto the second.\
      \ It does so by calculating the rotation axis and angle between the vectors\
      \ using the cross product and scalar product. Note that it short-circuits if\
      \ the cross product is zero. In that case, whether the vectors point in the\
      \ same or opposite directions, it always returns the identity quaternion (1,0,0,0),\
      \ even though opposite direction vectors would require a rotation by 180° around\
      \ an arbitrary rotation axis perpendicular to the vectors.</p>\n<h3><span class=\"\
      mw-headline\" id=\"QuatFromAxisAndAngle.28Vector.2C_float.29\">QuatFromAxisAndAngle(Vector,\
      \ float)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=15\" title=\"Edit section: QuatFromAxisAndAngle(Vector,\
      \ float)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Creates a rotation quaternion from the specifies axis vector and rotation\
      \ angle in radians. The vector will be normalized for this calculation but must\
      \ not be zero.</p>\n<h3><span class=\"mw-headline\" id=\"QuatFromRotator.28Rotator.29\"\
      >QuatFromRotator(Rotator)</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Quaternion?section=16\" title=\"\
      Edit section: QuatFromRotator(Rotator)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Calculates a rotation quaternion that represents the\
      \ same rotation as the specified <a href=\"/Rotator\" title=\"Rotator\">Rotator</a>\
      \ value.</p>\n<h3><span class=\"mw-headline\" id=\"QuatToRotator.28Quat.29\"\
      >QuatToRotator(Quat)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Quaternion?section=17\" title=\"Edit section: QuatToRotator(Quat)\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Calculates\
      \ a Rotator value that represents the same rotation as the specified rotation\
      \ quaternion. This basically applies the quaternion rotation to the X, Y and\
      \ Z axis vectors and uses the OrthoRotation function on the resulting vectors\
      \ to calculate the Rotator value.</p>\n<h3><span class=\"mw-headline\" id=\"\
      QuatSlerp.28Quat.2C_Quat.2C_float.29\">QuatSlerp(Quat, Quat, float)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Quaternion?section=18\" title=\"Edit section: QuatSlerp(Quat,\
      \ Quat, float)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Performs <b>s</b>pherical <b>l</b>inear int<b>erp</b>olation on the two rotation\
      \ quaternions, using the float value as blend alpha. A value of 0.0 maps to\
      \ the first quaternion, a value of 1.0 to the second, while 0.5 is halfway between\
      \ them.</p>\n<table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n</tr>\n\
      <tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"\
      /Literals\" title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.170 seconds\nReal time usage: 0.367 seconds\nPreprocessor\
      \ visited node count: 279/1000000\nPreprocessor generated node count: 1199/1000000\n\
      Post‐expand include size: 11227/2097152 bytes\nTemplate argument size: 4225/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 1/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  201.243      1 - -total\n 70.71%  142.291      1 - Template:Classgames\n\
      \ 28.91%   58.184      1 - Template:Navbox_unrealscript\n 18.20%   36.627  \
      \    1 - Template:Navbox\n  4.68%    9.412      1 - Template:Tnavbar\n  3.49%\
      \    7.014      1 - Template:Extension_DPL\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:29484-0!*!*!*!*!*!* and timestamp 20221117233104\
      \ and revision id 46332\n -->\n"
  categories:
  - sortkey: "Quaternion"
    name: "UnrealScript_reference"
  - sortkey: ""
    name: "Programming_articles"
  links:
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 106
    exists: true
    name: "UE3:Object (UDK)"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 104
    exists: true
    name: "UE2:Object (UE2Runtime)"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 106
    exists: true
    name: "UE3:Object (UT3)"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 104
    exists: true
    name: "UE2:Object (UT2004)"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 104
    exists: true
    name: "UE2:Object (U2)"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 104
    exists: true
    name: "UE2:Object (U2XMP)"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Object"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 104
    exists: true
    name: "UE2:Object (UT2003)"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Structs"
  templates:
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Classgames"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Extension DPL"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Definition"
    number: "1"
    index: "1"
    fromtitle: "Quaternion"
    byteoffset: 395
    anchor: "Definition"
  - toclevel: 2
    level: "3"
    line: "Additive operations"
    number: "1.1"
    index: "2"
    fromtitle: "Quaternion"
    byteoffset: 1066
    anchor: "Additive_operations"
  - toclevel: 2
    level: "3"
    line: "Scalar multiplication"
    number: "1.2"
    index: "3"
    fromtitle: "Quaternion"
    byteoffset: 1534
    anchor: "Scalar_multiplication"
  - toclevel: 2
    level: "3"
    line: "Conjugate quaternion"
    number: "1.3"
    index: "4"
    fromtitle: "Quaternion"
    byteoffset: 2170
    anchor: "Conjugate_quaternion"
  - toclevel: 2
    level: "3"
    line: "Hamilton product"
    number: "1.4"
    index: "5"
    fromtitle: "Quaternion"
    byteoffset: 2527
    anchor: "Hamilton_product"
  - toclevel: 2
    level: "3"
    line: "Norm"
    number: "1.5"
    index: "6"
    fromtitle: "Quaternion"
    byteoffset: 4593
    anchor: "Norm"
  - toclevel: 2
    level: "3"
    line: "Inverse"
    number: "1.6"
    index: "7"
    fromtitle: "Quaternion"
    byteoffset: 5548
    anchor: "Inverse"
  - toclevel: 1
    level: "2"
    line: "Quaternion rotation"
    number: "2"
    index: "8"
    fromtitle: "Quaternion"
    byteoffset: 6384
    anchor: "Quaternion_rotation"
  - toclevel: 1
    level: "2"
    line: "UnrealScript functions"
    number: "3"
    index: "9"
    fromtitle: "Quaternion"
    byteoffset: 7874
    anchor: "UnrealScript_functions"
  - toclevel: 2
    level: "3"
    line: "QuatProduct(Quat, Quat)"
    number: "3.1"
    index: "10"
    fromtitle: "Quaternion"
    byteoffset: 8918
    anchor: "QuatProduct.28Quat.2C_Quat.29"
  - toclevel: 2
    level: "3"
    line: "QuatDot(Quat, Quat)"
    number: "3.2"
    index: "11"
    fromtitle: "Quaternion"
    byteoffset: 9048
    anchor: "QuatDot.28Quat.2C_Quat.29"
  - toclevel: 2
    level: "3"
    line: "QuatInvert(Quat)"
    number: "3.3"
    index: "12"
    fromtitle: "Quaternion"
    byteoffset: 9218
    anchor: "QuatInvert.28Quat.29"
  - toclevel: 2
    level: "3"
    line: "QuatRotateVector(Quat, Vector)"
    number: "3.4"
    index: "13"
    fromtitle: "Quaternion"
    byteoffset: 9450
    anchor: "QuatRotateVector.28Quat.2C_Vector.29"
  - toclevel: 2
    level: "3"
    line: "QuatFindBetween(Vector, Vector)"
    number: "3.5"
    index: "14"
    fromtitle: "Quaternion"
    byteoffset: 9692
    anchor: "QuatFindBetween.28Vector.2C_Vector.29"
  - toclevel: 2
    level: "3"
    line: "QuatFromAxisAndAngle(Vector, float)"
    number: "3.6"
    index: "15"
    fromtitle: "Quaternion"
    byteoffset: 10249
    anchor: "QuatFromAxisAndAngle.28Vector.2C_float.29"
  - toclevel: 2
    level: "3"
    line: "QuatFromRotator(Rotator)"
    number: "3.7"
    index: "16"
    fromtitle: "Quaternion"
    byteoffset: 10457
    anchor: "QuatFromRotator.28Rotator.29"
  - toclevel: 2
    level: "3"
    line: "QuatToRotator(Quat)"
    number: "3.8"
    index: "17"
    fromtitle: "Quaternion"
    byteoffset: 10592
    anchor: "QuatToRotator.28Quat.29"
  - toclevel: 2
    level: "3"
    line: "QuatSlerp(Quat, Quat, float)"
    number: "3.9"
    index: "18"
    fromtitle: "Quaternion"
    byteoffset: 10889
    anchor: "QuatSlerp.28Quat.2C_Quat.2C_float.29"
  displaytitle: "Quaternion"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/complex_numbers"
    name: "wp:complex numbers"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Quaternions"
    name: "wp:Quaternions"
  wikitext:
    text: "[[wp:Quaternions|Quaternions]] are a mathematical construct that could\
      \ be seen as an extension of the [[wp:complex numbers|complex numbers]] with\
      \ three different imaginary units or as a combination of a scalar value and\
      \ a three-dimensional [[vector]]. A special subset of the quaternions, the unit\
      \ quaternions, can be used to represent rotations in 3D space.\n\n[[Category:Programming\
      \ articles]]\n\n==Definition==\nGenerally a quaternion is a four-dimensional\
      \ value that is written as either x = x<sub>0</sub>+ x<sub>1</sub>'''i''' +\
      \ x<sub>2</sub>'''j''' + x<sub>3</sub>'''k''' or as x = (x<sub>0</sub>, x<sub>1</sub>,\
      \ x<sub>2</sub>, x<sub>3</sub>), where x<sub>0</sub> is called the real or scalar\
      \ part Re(x) and (x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>) is the imaginary\
      \ or vector part Im(x). If the vector part is zero, the quaternion is called\
      \ real, while a quaternion with a zero scalar part is called a pure imaginary\
      \ quaternion. Real quaternions (x<sub>0</sub>, 0, 0, 0) could also be written\
      \ as x<sub>0</sub>+ 0'''i''' + 0'''j''' + 0'''k''' = x<sub>0</sub>.\n\n===Additive\
      \ operations===\nAddition, subtraction and negation of quaternions is defined\
      \ the same way as for vectors:\n* x + y = y + x = (x<sub>0</sub>+ y<sub>0</sub>,\
      \ x<sub>1</sub>+ y<sub>1</sub>, x<sub>2</sub>+ y<sub>2</sub>, x<sub>3</sub>+\
      \ y<sub>3</sub>)\n* x - y = -y + x = (x<sub>0</sub>- y<sub>0</sub>, x<sub>1</sub>-\
      \ y<sub>1</sub>, x<sub>2</sub>- y<sub>2</sub>, x<sub>3</sub>- y<sub>3</sub>)\n\
      * -x = (-x<sub>0</sub>, -x<sub>1</sub>, -x<sub>2</sub>, -x<sub>3</sub>)\n\n\
      ===Scalar multiplication===\nThe same goes for multiplication with and division\
      \ by a scalar value ''a'' and \"scalar multiplication\" of two quaternions ''x''\
      \ and ''y'':\n* a &middot; x = x &middot; a = (a &middot; x<sub>0</sub>, a &middot;\
      \ x<sub>1</sub>, a &middot; x<sub>2</sub>, a &middot; x<sub>3</sub>)\n* x /\
      \ a = x &middot; 1/a = 1/a &middot; x = x &middot; a<sup>-1</sup> = (x<sub>0</sub>\
      \ / a, x<sub>1</sub> / a, x<sub>2</sub> / a, x<sub>3</sub> / a)\n* x &middot;\
      \ y = y &middot; x = x<sub>0</sub>&middot; y<sub>0</sub> + x<sub>1</sub>&middot;\
      \ y<sub>1</sub> + x<sub>2</sub>&middot; y<sub>2</sub> + x<sub>3</sub>&middot;\
      \ y<sub>3</sub>\n\n===Conjugate quaternion===\nQuaterions are \"hypercomplex\"\
      \ numbers. Like \"normal\" complex numbers with one imaginary component, quaternions\
      \ define the conjugate quaternion <span style=\"text-decoration: overline;\"\
      >x</span> or x<sup>*</sup>:\n* <span style=\"text-decoration: overline;\">x</span>\
      \ = (x<sub>0</sub>, -x<sub>1</sub>, -x<sub>2</sub>, -x<sub>3</sub>)\n\n===Hamilton\
      \ product===\nA quite unique operation of quaternions is the Hamilton product,\
      \ i.e. the multiplication of two quaternions that yields a quaternion again.\
      \ This one is special, because unlike addition or scalar product, it is ''not''\
      \ commutative.\n* x y = (x<sub>0</sub>&middot; y<sub>0</sub> - x<sub>1</sub>&middot;\
      \ y<sub>1</sub> - x<sub>2</sub>&middot; y<sub>2</sub> - x<sub>3</sub>&middot;\
      \ y<sub>3</sub>, x<sub>0</sub>&middot; y<sub>1</sub> + x<sub>1</sub>&middot;\
      \ y<sub>0</sub> + x<sub>2</sub>&middot; y<sub>3</sub> - x<sub>3</sub>&middot;\
      \ y<sub>2</sub>, x<sub>0</sub>&middot; y<sub>2</sub> - x<sub>1</sub>&middot;\
      \ y<sub>3</sub> + x<sub>2</sub>&middot; y<sub>0</sub> + x<sub>3</sub>&middot;\
      \ y<sub>1</sub>, x<sub>0</sub>&middot; y<sub>3</sub> + x<sub>1</sub>&middot;\
      \ y<sub>2</sub> - x<sub>2</sub>&middot; y<sub>1</sub> + x<sub>3</sub>&middot;\
      \ y<sub>0</sub>)\nNow that looks vile. But if you express the quaternions as\
      \ a combination of a scalar and a vector part, i.e. x = (x<sub>0</sub>, x<sub>V</sub>),\
      \ you can express quaternion multiplication using the 3D vector scalar product\
      \ \"&middot;\", cross product \"&#x2a2f;\" and vector multiplication by a scalar\
      \ value:\n* x y = (x<sub>0</sub>, x<sub>V</sub>)(y<sub>0</sub>, y<sub>V</sub>)\
      \ = (x<sub>0</sub>y<sub>0</sub>- x<sub>V</sub>&middot; y<sub>V</sub>, x<sub>0</sub>y<sub>V</sub>\
      \ + x<sub>V</sub>y<sub>0</sub>+ x<sub>V</sub>&#x2a2f; y<sub>V</sub>)\nThis representation\
      \ also easily shows that x y &ne; y x, because x<sub>V</sub>&#x2a2f; y<sub>V</sub>\
      \ = -(y<sub>V</sub>&#x2a2f; x<sub>V</sub>).\n\nNow if you recall that a \"real\
      \ quaternion\" (vector part zero) is essentially the same as a real number,\
      \ you can easily see that the quaterion scalar product is basically a special,\
      \ commutative case of the Hamilton product. In fact, even the multiplication\
      \ of real numbers could be seen a special case of the Hamilton product, which\
      \ both quaternions having zero vector parts.\n\nAnother important special case\
      \ is the Hamilton product of two unit quaterions: The result of such a multiplication\
      \ is a unit quaternion again.\n\n===Norm===\nA quaternion's norm ||x||<sup>2</sup>\
      \ (its \"length\") is defined similarly to a vector's length:\n* ||x||<sup>2</sup>\
      \ = x <span style=\"text-decoration: overline;\">x</span> = <span style=\"text-decoration:\
      \ overline;\">x</span> x = x &middot; x = x<sub>0</sub><sup>2</sup>+ x<sub>1</sub><sup>2</sup>+\
      \ x<sub>2</sub><sup>2</sup>+ x<sub>3</sub><sup>2</sup>\nThe value ||x|| is called\
      \ the length or absolute value of the quaternion. Its square is equal to the\
      \ scalar product of the quaternion with itself or the Hamilton product with\
      \ its conjugate quaternion. A quaternion with the norm 1 is called a '''unit\
      \ quaternion'''. Multiplying a quaternion by its conjugate results in the vector\
      \ part becoming zero, which is why the resulting quaternion in the above equation\
      \ can be considered a scalar number. (Remember that quaternions are hypercomplex\
      \ numbers, not euclidean vectors. Real numbers are valid quaternion values with\
      \ the vector part being zero.)\n\n===Inverse===\nA quaternion's multiplicative\
      \ inverse, the reciprocal, x<sup>-1</sup> is defined as the value that satisfies\
      \ the equation x x<sup>-1</sup> = 1:\n* x<sup>-1</sup> = <span style=\"text-decoration:\
      \ overline;\">x</span> / (x <span style=\"text-decoration: overline;\">x</span>)\
      \ = <span style=\"text-decoration: overline;\">x</span> / ||x||<sup>2</sup>\n\
      Note that the fractional notation is avoided if the denominator is not a real\
      \ number because the notation itself is ambiguous since it does not specify\
      \ if the denominator's reciprocal must be multiplied to the left or to the right\
      \ of the numerator and quaternion multiplication is not commutative.\n\nAn important\
      \ special case of the inverse are unit quaterions. Because their norm is already\
      \ 1, the inverse of a unit quaterion is the same as the conjugate of that unit\
      \ quaternion.\n\n==Quaternion rotation==\nThe basis for expression rotations\
      \ using quaternions are unit quaternions, i.e. quaternions with a length of\
      \ 1, and pure imaginary quaternions, i.e. quaternions of the form (0, x<sub>1</sub>,\
      \ x<sub>2</sub>, x<sub>3</sub>). Pure imaginary quaternions are used to represent\
      \ vectors that will be rotated around the origin in some way, while unit quaternions\
      \ define the rotation axis and angle. To apply a rotation defined by quaternion\
      \ r to a vector defined by quaternion v, all you need to do is calculate the\
      \ quaternion product r v r<sup>-1</sup>.\n\nA property of quaternion multiplication\
      \ is that the length of the resulting quaternion is the same as the product\
      \ of the lengths of the two original quaternions. Consequently the product of\
      \ two unit quaternions will be another unit quaternions. If those two unit quaternions\
      \ represent 3D rotations, the resulting unit quaternion will represent the combination\
      \ of these two rotations in the reverse order. The product r<sub>1</sub> r<sub>2</sub>\
      \ represents a rotation achieved by first applying r<sub>2</sub>, then r<sub>1</sub>.\n\
      \nThe vector to rotate can be converted to a quaternion simply by using the\
      \ vector as the quaternion's vector part and zero as the scalar part. A rotation\
      \ quaternion is calculated from a rotation axis and an angle. Given the rotation\
      \ axis as unit vector u and the rotation angle &alpha; between 0 and 2&pi;,\
      \ the rotation quaternion r is calculated as r = (cos &alpha;/2, u sin &alpha;/2).\n\
      \n==UnrealScript functions==\nThe {{classgames|Object|ne=UE1}} class provides\
      \ several functions and (in UE3) operators for working with quaternions. It\
      \ defines the [[struct]] '''Quat''' with the components W, X, Y and Z as data\
      \ type for a quaternion value. Unreal Engine 3 also defines the binary operators\
      \ <code>+</code> and <code>-</code>, and like with every struct you can compare\
      \ Quat values for equality and inequality with the <code>==</code> and <code>!=</code>\
      \ operators.\n\nThe Quat struct type is subject to data reduction during replication.\
      \ The engine assumes that you replicate only unit quaternions and only replicates\
      \ the X, Y and Z components. The W component will be calculated on the remote\
      \ side to get a unit quaternion again.\n\nQuaternion rotation is used in rigid\
      \ body physics calculations both in Unreal Engine 2 (PHYS_Karma) and Unreal\
      \ Engine 3 (PHYS_RigidBody). The rigid body physics state of an actor is composed\
      \ of a vector for the location, a quaternion for the rotation and two vectors\
      \ for linear and angular velocity.\n\n===QuatProduct(Quat, Quat)===\nCalculates\
      \ the Hamilton product of the two quaternions and returns the resulting quaternion\
      \ value.\n\n===QuatDot(Quat, Quat)===\nCalculates the scalar product of the\
      \ two quaternions and returns the resulting float value. This function is not\
      \ available in Unreal Engine 2.\n\n===QuatInvert(Quat)===\nReturns the conjugate\
      \ quaternion. Note that due to x<sup>-1</sup> = <span style=\"text-decoration:\
      \ overline;\">x</span> / ||x||<sup>2</sup> the conjugate quaternion of a unit\
      \ quaternion also is its reciprocal.\n\n===QuatRotateVector(Quat, Vector)===\n\
      Rotates the specified vector by the given rotation quaternion and returns the\
      \ resulting vector value. Note that the result will only be actually the rotated\
      \ vector if the quaternion is a unit quaternion.\n\n===QuatFindBetween(Vector,\
      \ Vector)===\nCalculates the quaternion that will rotate the first vector onto\
      \ the second. It does so by calculating the rotation axis and angle between\
      \ the vectors using the cross product and scalar product. Note that it short-circuits\
      \ if the cross product is zero. In that case, whether the vectors point in the\
      \ same or opposite directions, it always returns the identity quaternion (1,0,0,0),\
      \ even though opposite direction vectors would require a rotation by 180° around\
      \ an arbitrary rotation axis perpendicular to the vectors.\n\n===QuatFromAxisAndAngle(Vector,\
      \ float)===\nCreates a rotation quaternion from the specifies axis vector and\
      \ rotation angle in radians. The vector will be normalized for this calculation\
      \ but must not be zero.\n\n===QuatFromRotator(Rotator)===\nCalculates a rotation\
      \ quaternion that represents the same rotation as the specified [[Rotator]]\
      \ value.\n\n===QuatToRotator(Quat)===\nCalculates a Rotator value that represents\
      \ the same rotation as the specified rotation quaternion. This basically applies\
      \ the quaternion rotation to the X, Y and Z axis vectors and uses the OrthoRotation\
      \ function on the resulting vectors to calculate the Rotator value.\n\n===QuatSlerp(Quat,\
      \ Quat, float)===\nPerforms '''s'''pherical '''l'''inear int'''erp'''olation\
      \ on the two rotation quaternions, using the float value as blend alpha. A value\
      \ of 0.0 maps to the first quaternion, a value of 1.0 to the second, while 0.5\
      \ is halfway between them.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 46332
name: "Quaternion"
revision:
  revid: 46332
  parentid: 46313
  user: "SeriousBarbie"
  timestamp: 1463259276.000000000
  comment: "\"imarinary\" -> \"imaginary\""
timestamp: 1668760871.789629000
