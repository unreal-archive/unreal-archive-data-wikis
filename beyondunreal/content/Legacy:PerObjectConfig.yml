---
parse:
  title: "Legacy:PerObjectConfig"
  text:
    text: "<p>\"PerObjectConfig\" is a <a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class\
      \ Syntax\">class Syntax</a> modifier that was introduced to UnrealScript for\
      \ UT200x.</p>\n<p>The configuration for classes that are declared with the PerObjectConfig\
      \ will be saved individually for each object of that class to the specified\
      \ configuration file using the object name (and class name in UnrealEngine2,\
      \ UnrealEngine1 only uses the object name) as the section name.</p>\n<p>This\
      \ will allow you to have multiple configurations for your class in the same\
      \ configuration file. It's somewhat the same as using <a href=\"/Legacy:DataObject\"\
      \ title=\"Legacy:DataObject\">DataObjects</a>, except that this is mean for\
      \ simple configurations that also have to be edited from outside the game. <a\
      \ href=\"/Legacy:DataObject\" title=\"Legacy:DataObject\">DataObjects</a> are\
      \ more designed for saving completed class instances, not for just configuration.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Saving_information\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Saving information</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Loading_information\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Loading information</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Deleting_information\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Deleting information</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Tips_.26_tricks\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Tips &amp; tricks</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#Use_an_object_name_variable\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Use an object\
      \ name variable</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"\
      #Renaming\"><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">Renaming</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Diffirent_ini_files\"><span\
      \ class=\"tocnumber\">4.3</span> <span class=\"toctext\">Diffirent ini files</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-8\"><a href=\"#The_main_MyClass\"><span\
      \ class=\"tocnumber\">4.3.1</span> <span class=\"toctext\">The main MyClass</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-9\"><a href=\"#A_subclass\"><span class=\"\
      tocnumber\">4.3.2</span> <span class=\"toctext\">A subclass</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-10\"><a href=\"#Using_it\"><span class=\"\
      tocnumber\">4.3.3</span> <span class=\"toctext\">Using it</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"\
      mw-headline\" id=\"Saving_information\">Saving information</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:PerObjectConfig?section=1\"\
      \ title=\"Edit section: Saving information\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>For example you have the following class:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyClass\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span> PerObjectConfig;\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"kw1\">config</span> <span class=\"\
      kw5\">string</span> var1;\n<span class=\"kw1\">var</span> <span class=\"kw1\"\
      >config</span> <span class=\"kw5\">int</span> var2;</pre></div>\n</div>\n<p>When\
      \ saving the config of an instance of this object in an UnrealEngine2 game it\
      \ will be saved as:</p>\n<pre>[MyClass MyClass]\nvar1=\nvar2=0\n</pre>\n<p>Note\
      \ the section name, the first part before the space is the classes instance\
      \ name. The second part is the real class name without the package name.</p>\n\
      <p>This is ofcourse useless since it will still limited you to a single configuration\
      \ set for your class. So you have to change the name of the instance of MyClass.\
      \ Changing the name can only be done when creating the Object.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">mci <span class=\"sy0\">=</span> <span class=\"kw1\">new</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">None</span>, <span class=\"st0\"\
      >\"ThisIsMyName\"</span><span class=\"br0\">)</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'MyClass'</span>;\nmci.<span class=\"kw3\">SaveConfig</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>This will generate the following:</p>\n<pre>[ThisIsMyName MyClass]\nvar1=\n\
      var2=0\n</pre>\n<p>The name argument in new is a string, this means that the\
      \ name may contain everything you want. However, there are a couple of limitations,\
      \ as you can see the space is used as the Instance Name – Class Name delimiter.\
      \ So obviously you can't use spaces in the name. Another character that breaks\
      \ this functionallity is the <code>]</code> character.</p>\n<p>So if you allow\
      \ people to set the name of the object you have to make sure you limit the available\
      \ characters, or replace the unallowed characters in the name.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> CreateStorageClass<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> objectname<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  objectname <span class=\"sy0\">=</span> <span class=\"kw3\">repl</span><span\
      \ class=\"br0\">(</span>objectname, <span class=\"st0\">\" \"</span>, <span\
      \ class=\"kw3\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ replace \" \" for the ASCII ESC character</span>\n  mci <span class=\"sy0\"\
      >=</span> <span class=\"kw1\">new</span><span class=\"br0\">(</span><span class=\"\
      kw5\">None</span>, objectname<span class=\"br0\">)</span> <span class=\"kw1\"\
      >class</span><span class=\"st0\">'MyClass'</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Note:</b> if you do the following the configuration will be stored\
      \ in <tt>MapName.ini</tt> instead of the specified config file (in the class\
      \ declaration).</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">mci <span class=\"\
      sy0\">=</span> <span class=\"kw1\">new</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>, <span class=\"st0\">\"ThisIsMyName\"</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'MyClass'</span>;\nmci.<span class=\"kw3\">SaveConfig</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<h2><span class=\"\
      mw-headline\" id=\"Loading_information\">Loading information</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:PerObjectConfig?section=2\"\
      \ title=\"Edit section: Loading information\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The configuration of the class is automatically loaded\
      \ when it's created. It loads the variables from the section that matches the\
      \ name.</p>\n<p>If the object names arn't defined somewhere, or when you allow\
      \ users to add additional object instances you won't know what names are available.</p>\n\
      <p>For this the following function has been defined in Object:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">native</span> <span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ <span class=\"kw3\">GetPerObjectNames</span><span class=\"br0\">(</span> <span\
      \ class=\"kw5\">string</span> ININame, <span class=\"kw1\">optional</span> <span\
      \ class=\"kw5\">string</span> ObjectClass, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">int</span> MaxResults <span class=\"coMULTI\">/*1024 if\
      \ unspecified*/</span> <span class=\"br0\">)</span>; <span class=\"co1\">//no\
      \ extension</span></pre></div>\n</div>\n<dl>\n<dt>ININame</dt>\n<dd>the name\
      \ of the configuration file, as defined in the config(MyConfig) class declration.\
      \ System and User will be replaced with the correct System and User configuration\
      \ files. You don't have to include the .ini extention</dd>\n<dt>ObjectClass</dt>\n\
      <dd>the name of your per object config class. This is not the fully qualified\
      \ name only the real class name: <code>string(MyClass.name)</code>. If it's\
      \ ommited the current class name will be used.</dd>\n<dt>MaxResults</dt>\n<dd>the\
      \ maximum results you want to have.</dd>\n</dl>\n<p>This will return a string\
      \ array containing all the names of objects that have a section. Now all you\
      \ have to do is load them:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> LoadMyClasses<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ array<span class=\"sy0\">&lt;</span>MyClass<span class=\"sy0\">&gt;</span>\
      \ MyClasses;\n  <span class=\"kw1\">local</span> array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> Names;\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">int</span> i;\n \n  Names <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">GetPerObjectNames</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"System\"</span>, <span class=\"kw5\">string</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'MyClass'</span>.<span\
      \ class=\"kw5\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ Names.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    MyClasses<span\
      \ class=\"br0\">[</span>MyClasses.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">None</span>, Names<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span\
      \ class=\"kw1\">class</span><span class=\"st0\">'MyClass'</span>;\n  <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Deleting_information\">Deleting information</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PerObjectConfig?section=3\" title=\"Edit section: Deleting\
      \ information\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Deleting a object configuration from the ini file is easy. For that you only\
      \ need the instance of that object and class</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">MyClassInstance.<span class=\"kw3\">ClearConfig</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Tips_.26_tricks\">Tips &amp; tricks</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PerObjectConfig?section=4\" title=\"Edit section: Tips\
      \ &amp; tricks\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>These where just the basics on how to use PerObjectConfig. Here are a couple\
      \ of tricks.</p>\n<h3><span class=\"mw-headline\" id=\"Use_an_object_name_variable\"\
      >Use an object name variable</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:PerObjectConfig?section=5\"\
      \ title=\"Edit section: Use an object name variable\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>As said above you have to\
      \ mangle the objects real name for it to save correctly. This ofcourse isn't\
      \ user friendly when you want to list the object names. So add an addditional\
      \ object name variable to the PerObjectConfig that contains the name to show\
      \ to use user (the one that does contain spaces).</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Renaming\">Renaming</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:PerObjectConfig?section=6\"\
      \ title=\"Edit section: Renaming\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You can't rename an object. For that to work you have\
      \ to create a new object with the new name and copy the data from the old object.\
      \ then delete the old object from the configuration.</p>\n<p>Ofcourse when you\
      \ use an object name as said above you can simly change that variable.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Diffirent_ini_files\">Diffirent ini files</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PerObjectConfig?section=7\" title=\"Edit section: Diffirent\
      \ ini files\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>In the example above we save out config in the System's configuration file.\
      \ To change the configuration in a different file just use the config(MyConfig)\
      \ for the class declaration and use \"MyConfig\" for GetPerObjectNames call.</p>\n\
      <p>Keep in mind that most GISPs want to have all the per server configuration\
      \ in the system file. There's an easy way to give people some control where\
      \ the configuration is saved.</p>\n<p>Use the following approach:</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"The_main_MyClass\">The main MyClass</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PerObjectConfig?section=8\" title=\"Edit section: The\
      \ main MyClass\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>First we define our main MyClass that will contain all the logic that it\
      \ might need.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyClass <span class=\"kw1\">extends</span> <span class=\"\
      kw8\">Object</span> PerObjectConfig <span class=\"kw1\">config</span><span class=\"\
      br0\">(</span>System<span class=\"br0\">)</span>;\n \n<span class=\"kw1\">var</span>\
      \ <span class=\"kw1\">const</span> <span class=\"kw5\">string</span> ConfigFile;\n\
      \ \n<span class=\"co1\">// config variables and logic</span>\n \n<span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  ConfigFile<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"System\"</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>As you can see the config will be saved\
      \ in the System configuration. I also defined a constant string variable and\
      \ set it's value to \"System\". This variable will be used to load the configuration.\
      \ This value <i>must</i> be the same as the value for the config() class declaration\
      \ element. This variable can't be a config variable because you can't change\
      \ the value for the config() class element on the fly.</p>\n<p>Also using ParseConfig\
      \ in the class declaration won't work because the main code won't know what\
      \ config file to use.</p>\n<h4><span class=\"mw-headline\" id=\"A_subclass\"\
      >A subclass</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:PerObjectConfig?section=9\" title=\"Edit section:\
      \ A subclass\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Now we will define a subclass that uses a diffirent ini file</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyClassIni <span class=\"\
      kw1\">extends</span> MyClass <span class=\"kw1\">config</span><span class=\"\
      br0\">(</span>MyConfig<span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"br0\">{</span>\n  ConfigFile<span class=\"\
      sy0\">=</span><span class=\"st0\">\"MyConfig\"</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Using_it\">Using it</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PerObjectConfig?section=10\" title=\"Edit section: Using\
      \ it\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Now we have two classes that save the config in different locations. For\
      \ this to work you have to define a config variable in your main code (the code\
      \ that loads these objects), to define what class is used for storage.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span\
      \ class=\"kw1\">config</span> class<span class=\"sy0\">&lt;</span>MyClass<span\
      \ class=\"sy0\">&gt;</span> Storage<span class=\"re0\">Class</span>&lt; SEMI\
      \ &gt;\n \n<span class=\"kw1\">function</span> LoadMyClasses<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> array<span class=\"sy0\">&lt;</span>MyClass<span\
      \ class=\"sy0\">&gt;</span> MyClasses;\n  <span class=\"kw1\">local</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> Names;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n \n  Names <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">GetPerObjectNames</span><span class=\"\
      br0\">(</span>StorageClass.<span class=\"kw1\">default</span>.<span class=\"\
      me0\">ConfigFile</span>, <span class=\"kw5\">string</span><span class=\"br0\"\
      >(</span>StorageClass.<span class=\"kw5\">name</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span\
      \ class=\"sy0\">&lt;</span> Names.<span class=\"me0\">length</span>; i<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    MyClasses<span class=\"br0\">[</span>MyClasses.<span class=\"\
      me0\">length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw1\">new</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >None</span>, Names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span> Storage<span class=\"re0\">Class</span>&lt; SEMI &gt;\n\
      \  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  StorageClass<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'MyPackage.MyClass'</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Note that we use the value of ConfigFile from the storage class as the ini\
      \ file name to load the variables from. And use the StorageClass to create the\
      \ class.</p>\n<p>Also note that the name of the classname in the GetPerObjectNames\
      \ depends on the StorageClass. The result section in the ini file will have\
      \ this as class name, so using different StorageClasses doesn't reuse the configuration\
      \ entries.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:PerObjectConfig?section=11\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Config_Vars_And_.Ini_Files\" title=\"Legacy:Config\
      \ Vars And .Ini Files\">Config Vars And .Ini Files</a></li>\n<li><a href=\"\
      /Legacy:DataObject\" title=\"Legacy:DataObject\">DataObject</a></li>\n</ul>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.198 seconds\nReal time usage:\
      \ 0.609 seconds\nPreprocessor visited node count: 133/1000000\nPreprocessor\
      \ generated node count: 248/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2525-0!*!0!!en!*!* and timestamp\
      \ 20221118094324 and revision id 6043\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:DataObject"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Config Vars And .Ini Files"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Saving information"
    number: "1"
    index: "1"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 791
    anchor: "Saving_information"
  - toclevel: 1
    level: "2"
    line: "Loading information"
    number: "2"
    index: "2"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 2623
    anchor: "Loading_information"
  - toclevel: 1
    level: "2"
    line: "Deleting information"
    number: "3"
    index: "3"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 4118
    anchor: "Deleting_information"
  - toclevel: 1
    level: "2"
    line: "Tips & tricks"
    number: "4"
    index: "4"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 4318
    anchor: "Tips_.26_tricks"
  - toclevel: 2
    level: "3"
    line: "Use an object name variable"
    number: "4.1"
    index: "5"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 4426
    anchor: "Use_an_object_name_variable"
  - toclevel: 2
    level: "3"
    line: "Renaming"
    number: "4.2"
    index: "6"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 4762
    anchor: "Renaming"
  - toclevel: 2
    level: "3"
    line: "Diffirent ini files"
    number: "4.3"
    index: "7"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 5052
    anchor: "Diffirent_ini_files"
  - toclevel: 3
    level: "4"
    line: "The main MyClass"
    number: "4.3.1"
    index: "8"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 5514
    anchor: "The_main_MyClass"
  - toclevel: 3
    level: "4"
    line: "A subclass"
    number: "4.3.2"
    index: "9"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 6339
    anchor: "A_subclass"
  - toclevel: 3
    level: "4"
    line: "Using it"
    number: "4.3.3"
    index: "10"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 6541
    anchor: "Using_it"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "11"
    fromtitle: "Legacy:PerObjectConfig"
    byteoffset: 7612
    anchor: "Related_Topics"
  displaytitle: "Legacy:PerObjectConfig"
  iwlinks: []
  wikitext:
    text: "\"PerObjectConfig\" is a [[Legacy:Class Syntax|class Syntax]] modifier\
      \ that was introduced to UnrealScript for UT200x.\n\nThe configuration for classes\
      \ that are declared with the PerObjectConfig will be saved individually for\
      \ each object of that class to the specified configuration file using the object\
      \ name (and class name in UnrealEngine2, UnrealEngine1 only uses the object\
      \ name) as the section name. \n\nThis will allow you to have multiple configurations\
      \ for your class in the same configuration file. It's somewhat the same as using\
      \ [[Legacy:DataObject|DataObject]]s, except that this is mean for simple configurations\
      \ that also have to be edited from outside the game. [[Legacy:DataObject|DataObject]]s\
      \ are more designed for saving completed class instances, not for just configuration.\n\
      \n==Saving information==\n\nFor example you have the following class:\n\n<uscript>\n\
      class MyClass extends Object PerObjectConfig;\n\nvar config string var1;\nvar\
      \ config int var2;\n</uscript>\n\nWhen saving the config of an instance of this\
      \ object in an UnrealEngine2 game it will be saved as:\n [MyClass MyClass]\n\
      \ var1=\n var2=0\n\nNote the section name, the first part before the space is\
      \ the classes instance name. The second part is the real class name without\
      \ the package name.\n\nThis is ofcourse useless since it will still limited\
      \ you to a single configuration set for your class. So you have to change the\
      \ name of the instance of MyClass. Changing the name can only be done when creating\
      \ the Object.\n\n<uscript>\nmci = new(None, \"ThisIsMyName\") class'MyClass';\n\
      mci.SaveConfig();\n</uscript>\n\nThis will generate the following:\n [ThisIsMyName\
      \ MyClass]\n var1=\n var2=0\n\nThe name argument in new is a string, this means\
      \ that the name may contain everything you want. However, there are a couple\
      \ of limitations, as you can see the space is used as the Instance Name &ndash;\
      \ Class Name delimiter. So obviously you can't use spaces in the name. Another\
      \ character that breaks this functionallity is the <code>]</code> character.\n\
      \nSo if you allow people to set the name of the object you have to make sure\
      \ you limit the available characters, or replace the unallowed characters in\
      \ the name.\n\n<uscript>\nfunction CreateStorageClass(coerce string objectname)\n\
      {\n  objectname = repl(objectname, \" \", Chr(27)); // replace \" \" for the\
      \ ASCII ESC character\n  mci = new(None, objectname) class'MyClass';\n}\n</uscript>\n\
      \n'''Note:''' if you do the following the configuration will be stored in <tt>MapName.ini</tt>\
      \ instead of the specified config file (in the class declaration).\n\n<uscript>\n\
      mci = new(Level, \"ThisIsMyName\") class'MyClass';\nmci.SaveConfig();\n</uscript>\n\
      \n==Loading information==\n\nThe configuration of the class is automatically\
      \ loaded when it's created. It loads the variables from the section that matches\
      \ the name.\n\nIf the object names arn't defined somewhere, or when you allow\
      \ users to add additional object instances you won't know what names are available.\n\
      \nFor this the following function has been defined in Object:\n\n<uscript>\n\
      native static final function array<string> GetPerObjectNames( string ININame,\
      \ optional string ObjectClass, optional int MaxResults /*1024 if unspecified*/\
      \ ); //no extension\n</uscript>\n;ININame: the name of the configuration file,\
      \ as defined in the config(MyConfig) class declration. System and User will\
      \ be replaced with the correct System and User configuration files. You don't\
      \ have to include the .ini extention\n;ObjectClass: the name of your per object\
      \ config class. This is not the fully qualified name only the real class name:\
      \ <code> string(MyClass.name)</code>. If it's ommited the current class name\
      \ will be used.\n;MaxResults: the maximum results you want to have.\n\nThis\
      \ will return a string array containing all the names of objects that have a\
      \ section. Now all you have to do is load them:\n\n<uscript>\nfunction LoadMyClasses()\n\
      {\n  local array<MyClass> MyClasses;\n  local array<string> Names;\n  local\
      \ int i;\n\n  Names = GetPerObjectNames(\"System\", string(class'MyClass'.name));\n\
      \  for (i = 0; i < Names.length; i++)\n  {\n    MyClasses[MyClasses.length]\
      \ = new(None, Names[i]) class'MyClass';\n  }\n}\n</uscript>\n\n==Deleting information==\n\
      \nDeleting a object configuration from the ini file is easy. For that you only\
      \ need the instance of that object and class\n\n<uscript>\nMyClassInstance.ClearConfig();\n\
      </uscript>\n\n==Tips & tricks==\n\nThese where just the basics on how to use\
      \ PerObjectConfig. Here are a couple of tricks.\n\n===Use an object name variable===\n\
      \nAs said above you have to mangle the objects real name for it to save correctly.\
      \ This ofcourse isn't user friendly when you want to list the object names.\
      \ So add an addditional object name variable to the PerObjectConfig that contains\
      \ the name to show to use user (the one that does contain spaces).\n\n===Renaming===\n\
      \nYou can't rename an object. For that to work you have to create a new object\
      \ with the new name and copy the data from the old object. then delete the old\
      \ object from the configuration.\n\nOfcourse when you use an object name as\
      \ said above you can simly change that variable.\n\n===Diffirent ini files===\n\
      \nIn the example above we save out config in the System's configuration file.\
      \ To change the configuration in a different file just use the config(MyConfig)\
      \ for the class declaration and use \"MyConfig\" for GetPerObjectNames call.\n\
      \nKeep in mind that most GISPs want to have all the per server configuration\
      \ in the system file. There's an easy way to give people some control where\
      \ the configuration is saved.\n\nUse the following approach:\n\n====The main\
      \ MyClass====\n\nFirst we define our main MyClass that will contain all the\
      \ logic that it might need.\n\n<uscript>\nclass MyClass extends Object PerObjectConfig\
      \ config(System);\n\nvar const string ConfigFile;\n\n// config variables and\
      \ logic\n\ndefaultproperties\n{\n  ConfigFile=\"System\"\n}\n</uscript>\n\n\
      As you can see the config will be saved in the System configuration. I also\
      \ defined a constant string variable and set it's value to \"System\". This\
      \ variable will be used to load the configuration. This value ''must'' be the\
      \ same as the value for the config() class declaration element. This variable\
      \ can't be a config variable because you can't change the value for the config()\
      \ class element on the fly.\n\nAlso using ParseConfig in the class declaration\
      \ won't work because the main code won't know what config file to use.\n\n====A\
      \ subclass====\n\nNow we will define a subclass that uses a diffirent ini file\n\
      \n<uscript>\nclass MyClassIni extends MyClass config(MyConfig);\n\ndefaultproperties\n\
      {\n  ConfigFile=\"MyConfig\"\n}\n</uscript>\n\n====Using it====\n\nNow we have\
      \ two classes that save the config in different locations. For this to work\
      \ you have to define a config variable in your main code (the code that loads\
      \ these objects), to define what class is used for storage.\n\n<uscript>\nvar\
      \ config class<MyClass> StorageClass;\n\nfunction LoadMyClasses()\n{\n  local\
      \ array<MyClass> MyClasses;\n  local array<string> Names;\n  local int i;\n\n\
      \  Names = GetPerObjectNames(StorageClass.default.ConfigFile, string(StorageClass.name));\n\
      \  for (i = 0; i < Names.length; i++)\n  {\n    MyClasses[MyClasses.length]\
      \ = new(None, Names[i]) StorageClass;\n  }\n}\n\ndefaultproperties\n{\n  StorageClass=class'MyPackage.MyClass'\n\
      }\n</uscript>\n\nNote that we use the value of ConfigFile from the storage class\
      \ as the ini file name to load the variables from. And use the StorageClass\
      \ to create the class.\n\nAlso note that the name of the classname in the GetPerObjectNames\
      \ depends on the StorageClass. The result section in the ini file will have\
      \ this as class name, so using different StorageClasses doesn't reuse the configuration\
      \ entries.\n\n==Related Topics==\n* [[Legacy:Config Vars And .Ini Files|Config\
      \ Vars And .Ini Files]]\n* [[Legacy:DataObject|DataObject]]"
  properties: []
  revId: 6043
name: "Legacy:PerObjectConfig"
revision:
  revid: 6043
  parentid: 6044
  user: "Wormbo"
  timestamp: 1151181197.000000000
  comment: "answered"
timestamp: 1668786477.617440000
