---
parse:
  title: "Legacy:WUtils/WArray"
  text:
    text: "<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">// filename:    wArray.uc</span>\n<span class=\"co1\">//\
      \ revision:    102</span>\n<span class=\"co1\">// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)</span>\n<span class=\"co1\">//    \
      \          http://wiki.beyondunreal.com/WUtils</span>\n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      \ \n<span class=\"kw1\">class</span> wArray <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Object</span>;\n \n<span class=\"coMULTI\">/** Add the\
      \ elements of A and B to the result (string arrays) */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ AddS<span class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> A, array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> B<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ B.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    A.<span class=\"me0\">length</span>\
      \ <span class=\"sy0\">=</span> A.<span class=\"me0\">length</span><span class=\"\
      sy0\">+</span><span class=\"nu0\">1</span>;\n    A<span class=\"br0\">[</span>A.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> B<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** Add the elements of A and B to the result (int arrays)\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> array<span class=\"sy0\">&lt;</span>int<span\
      \ class=\"sy0\">&gt;</span> AddI<span class=\"br0\">(</span>array<span class=\"\
      sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> A, array<span class=\"sy0\"\
      >&lt;</span>int<span class=\"sy0\">&gt;</span> B<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> B.<span class=\"me0\">length</span>; i<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n   \
      \ A.<span class=\"me0\">length</span> <span class=\"sy0\">=</span> A.<span class=\"\
      me0\">length</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>;\n\
      \    A<span class=\"br0\">[</span>A.<span class=\"me0\">length</span><span class=\"\
      sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span\
      \ class=\"sy0\">=</span> B<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> A;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Add the elements of\
      \ A and B to the result (float arrays) */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> array<span\
      \ class=\"sy0\">&lt;</span>float<span class=\"sy0\">&gt;</span> AddF<span class=\"\
      br0\">(</span>array<span class=\"sy0\">&lt;</span>float<span class=\"sy0\">&gt;</span>\
      \ A, array<span class=\"sy0\">&lt;</span>float<span class=\"sy0\">&gt;</span>\
      \ B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw2\"\
      >for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> B.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    A.<span class=\"me0\">length</span> <span\
      \ class=\"sy0\">=</span> A.<span class=\"me0\">length</span><span class=\"sy0\"\
      >+</span><span class=\"nu0\">1</span>;\n    A<span class=\"br0\">[</span>A.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> B<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** Add the elements of A and B to the result (object arrays)\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> array<span class=\"sy0\">&lt;</span>object<span\
      \ class=\"sy0\">&gt;</span> AddO<span class=\"br0\">(</span>array<span class=\"\
      sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span> A, array<span class=\"\
      sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span> B<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n  <span class=\"kw2\">for</span> <span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\
      \ i <span class=\"sy0\">&lt;</span> B.<span class=\"me0\">length</span>; i<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    A.<span class=\"me0\">length</span> <span class=\"sy0\">=</span>\
      \ A.<span class=\"me0\">length</span><span class=\"sy0\">+</span><span class=\"\
      nu0\">1</span>;\n    A<span class=\"br0\">[</span>A.<span class=\"me0\">length</span><span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> B<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ A;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Calculate\
      \ the diffirence between A and B */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> RemoveS<span\
      \ class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> A, array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>B.<span class=\"me0\"\
      >length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> A.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n      <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">==</span> B<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n   \
      \   <span class=\"br0\">{</span>\n        A.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">break</span>;\n      <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    B.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Calculate the diffirence between A and B */</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> RemoveI<span\
      \ class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>int<span class=\"\
      sy0\">&gt;</span> A, array<span class=\"sy0\">&lt;</span>int<span class=\"sy0\"\
      >&gt;</span> B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>B.<span class=\"me0\"\
      >length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> A.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n      <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">==</span> B<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n   \
      \   <span class=\"br0\">{</span>\n        A.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">break</span>;\n      <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    B.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Calculate the diffirence between A and B */</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>float<span class=\"sy0\">&gt;</span> RemoveF<span\
      \ class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>float<span class=\"\
      sy0\">&gt;</span> A, array<span class=\"sy0\">&lt;</span>float<span class=\"\
      sy0\">&gt;</span> B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>B.<span class=\"me0\"\
      >length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> A.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n      <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">==</span> B<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n   \
      \   <span class=\"br0\">{</span>\n        A.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">break</span>;\n      <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    B.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Calculate the diffirence between A and B */</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span>\
      \ RemoveO<span class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>object<span\
      \ class=\"sy0\">&gt;</span> A, array<span class=\"sy0\">&lt;</span>object<span\
      \ class=\"sy0\">&gt;</span> B<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  <span class=\"kw2\">while</span> <span class=\"br0\">(</span>B.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ A.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">==</span> B<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n\
      \      <span class=\"br0\">{</span>\n        A.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">break</span>;\n      <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    B.<span class=\"me0\">remove</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Remove the first element of the array and return this element */</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> ShiftS<span class=\"\
      br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> ar<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span>\
      \ result;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    result <span class=\"sy0\">=</span> ar<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>;\n    ar.<span class=\"\
      me0\">remove</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">return</span> result;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"coMULTI\">/** Remove the first element of the array\
      \ and return this element */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw8\">object</span> ShiftO<span class=\"br0\">(</span><span class=\"kw1\">out</span>\
      \ array<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span>\
      \ ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw8\">object</span> result;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ar.<span class=\"me0\">length</span>\
      \ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    result <span class=\"sy0\"\
      >=</span> ar<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"\
      br0\">]</span>;\n    ar.<span class=\"me0\">remove</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"\
      br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ result;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Remove\
      \ the first element of the array and return this element */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> ShiftI<span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> array<span class=\"sy0\">&lt;</span>int<span class=\"sy0\"\
      >&gt;</span> ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> result;\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar.<span class=\"\
      me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    result <span class=\"\
      sy0\">=</span> ar<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>;\n    ar.<span class=\"me0\">remove</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> result;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      coMULTI\">/** Remove the first element of the array and return this element\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">float</span> ShiftF<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>float<span class=\"sy0\">&gt;</span> ar<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">float</span> result;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>ar.<span class=\"me0\">length</span> <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    result <span class=\"sy0\">=</span> ar<span class=\"br0\"\
      >[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;\n    ar.<span\
      \ class=\"me0\">remove</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> result;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Join the elements of\
      \ a string array to an array */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">string</span> Join<span class=\"br0\">(</span>array<span class=\"sy0\"\
      >&lt;</span> <span class=\"kw5\">string</span> <span class=\"sy0\">&gt;</span>\
      \ ar, <span class=\"kw1\">optional</span> <span class=\"kw5\">string</span>\
      \ delim, <span class=\"kw1\">optional</span> <span class=\"kw5\">bool</span>\
      \ bIgnoreEmpty<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">string</span> result;\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> ar.<span\
      \ class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>bIgnoreEmpty <span class=\"sy0\">&amp;&amp;</span>\
      \ ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\
      \ <span class=\"kw2\">continue</span>;\n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>result <span class=\"sy0\">!=</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span> result <span class=\"sy0\">=</span>\
      \ result<span class=\"sy0\">$</span>delim;\n    result <span class=\"sy0\">=</span>\
      \ result<span class=\"sy0\">$</span>ar<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ result;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** internal\
      \ function for SortS */</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ SortSArray<span class=\"br0\">(</span><span class=\"kw1\">out</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> ar, <span class=\"\
      kw5\">int</span> low, <span class=\"kw5\">int</span> high, <span class=\"kw1\"\
      >optional</span> <span class=\"kw5\">bool</span> bCaseInsenstive<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i,j;\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">string</span> x, y;\n \n  i <span class=\"sy0\">=</span> Low;\n\
      \  j <span class=\"sy0\">=</span> High;\n  x <span class=\"sy0\">=</span> ar<span\
      \ class=\"br0\">[</span><span class=\"br0\">(</span>Low<span class=\"sy0\">+</span>High<span\
      \ class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>bCaseInsenstive<span class=\"br0\">)</span> x <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Caps</span><span class=\"br0\">(</span>x<span class=\"\
      br0\">)</span>;\n \n  <span class=\"kw2\">do</span> <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>bCaseInsenstive<span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">Caps</span><span\
      \ class=\"br0\">(</span>ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> x<span class=\"br0\"\
      >)</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>; \n \
      \     <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"\
      kw3\">Caps</span><span class=\"br0\">(</span>ar<span class=\"br0\">[</span>j<span\
      \ class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>\
      \ x<span class=\"br0\">)</span> j <span class=\"sy0\">-=</span> <span class=\"\
      nu0\">1</span>;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n      <span class=\"kw2\">while</span> <span\
      \ class=\"br0\">(</span>ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">&lt;</span> x<span class=\"br0\">)</span> i <span class=\"\
      sy0\">+=</span> <span class=\"nu0\">1</span>; \n      <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span>ar<span class=\"br0\">[</span>j<span class=\"\
      br0\">]</span> <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span>\
      \ j <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span>;\n    <span class=\"\
      br0\">}</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">&lt;=</span> j<span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n      y <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n      ar<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> ar<span class=\"br0\"\
      >[</span>j<span class=\"br0\">]</span>;\n      ar<span class=\"br0\">[</span>j<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> y;\n      i <span class=\"\
      sy0\">+=</span> <span class=\"nu0\">1</span>; \n      j <span class=\"sy0\"\
      >-=</span> <span class=\"nu0\">1</span>;\n    <span class=\"br0\">}</span>\n\
      \  <span class=\"br0\">}</span> until <span class=\"br0\">(</span>i <span class=\"\
      sy0\">&gt;</span> j<span class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>low <span class=\"sy0\">&lt;</span> j<span class=\"\
      br0\">)</span> SortSArray<span class=\"br0\">(</span>ar, low, j, bCaseInsenstive<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>i <span class=\"sy0\">&lt;</span> high<span class=\"br0\">)</span>\
      \ SortSArray<span class=\"br0\">(</span>ar, i, high, bCaseInsenstive<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/**\
      \ Sort an string array */</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> SortS<span class=\"br0\"\
      >(</span><span class=\"kw1\">out</span> array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> ar, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">bool</span> bCaseInsenstive<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  SortSArray<span class=\"br0\">(</span>ar, <span class=\"nu0\"\
      >0</span>, ar.<span class=\"me0\">length</span><span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span>, bCaseInsenstive<span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** internal function for\
      \ SortI */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> SortIArray<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>int<span class=\"sy0\">&gt;</span> ar, <span class=\"kw5\">int</span>\
      \ low, <span class=\"kw5\">int</span> high<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i,j,x,y;\n \n  i <span class=\"sy0\">=</span> Low;\n  j <span\
      \ class=\"sy0\">=</span> High;\n  x <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span><span class=\"br0\">(</span>Low<span class=\"sy0\">+</span>High<span\
      \ class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span>;\n \n  <span class=\"kw2\">do</span> <span class=\"\
      br0\">{</span>    \n    <span class=\"kw2\">while</span> <span class=\"br0\"\
      >(</span>ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">&lt;</span> x<span class=\"br0\">)</span> i <span class=\"sy0\">+=</span>\
      \ <span class=\"nu0\">1</span>; \n    <span class=\"kw2\">while</span> <span\
      \ class=\"br0\">(</span>ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span> j <span class=\"\
      sy0\">-=</span> <span class=\"nu0\">1</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n      y <span class=\"sy0\"\
      >=</span> ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n   \
      \   ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span>;\n\
      \      ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> y;\n      i <span class=\"sy0\">+=</span> <span class=\"nu0\"\
      >1</span>; \n      j <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span>;\n\
      \    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span> until <span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> j<span class=\"br0\"\
      >)</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>low\
      \ <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span> SortIArray<span\
      \ class=\"br0\">(</span>ar, low, j<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>\
      \ high<span class=\"br0\">)</span> SortIArray<span class=\"br0\">(</span>ar,\
      \ i, high<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** sort an int array */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> SortI<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>int<span class=\"sy0\">&gt;</span> ar<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  SortIArray<span class=\"br0\">(</span>ar, <span\
      \ class=\"nu0\">0</span>, ar.<span class=\"me0\">length</span><span class=\"\
      sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** internal function for\
      \ SortF */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> SortFArray<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>float<span class=\"sy0\">&gt;</span> ar, <span class=\"kw5\">int</span>\
      \ low, <span class=\"kw5\">int</span> high<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i,j,x,y;\n \n  i <span class=\"sy0\">=</span> Low;\n  j <span\
      \ class=\"sy0\">=</span> High;\n  x <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span><span class=\"br0\">(</span>Low<span class=\"sy0\">+</span>High<span\
      \ class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span>;\n \n  <span class=\"kw2\">do</span> <span class=\"\
      br0\">{</span>    \n    <span class=\"kw2\">while</span> <span class=\"br0\"\
      >(</span>ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">&lt;</span> x<span class=\"br0\">)</span> i <span class=\"sy0\">+=</span>\
      \ <span class=\"nu0\">1</span>; \n    <span class=\"kw2\">while</span> <span\
      \ class=\"br0\">(</span>ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span> j <span class=\"\
      sy0\">-=</span> <span class=\"nu0\">1</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n      y <span class=\"sy0\"\
      >=</span> ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n   \
      \   ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span>;\n\
      \      ar<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> y;\n      i <span class=\"sy0\">+=</span> <span class=\"nu0\"\
      >1</span>; \n      j <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span>;\n\
      \    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span> until <span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> j<span class=\"br0\"\
      >)</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>low\
      \ <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span> SortFArray<span\
      \ class=\"br0\">(</span>ar, low, j<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>\
      \ high<span class=\"br0\">)</span> SortFArray<span class=\"br0\">(</span>ar,\
      \ i, high<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** sort an int array */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> SortF<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>float<span class=\"sy0\">&gt;</span> ar<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  SortFArray<span class=\"br0\">(</span>ar, <span\
      \ class=\"nu0\">0</span>, ar.<span class=\"me0\">length</span><span class=\"\
      sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Return the highest\
      \ value */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">int</span> MaxI<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>int<span class=\"sy0\">&gt;</span> ar<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i, tmp;\n  tmp <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;\n  <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span> ar.<span\
      \ class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>ar<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">&gt;</span> tmp<span class=\"br0\">)</span>\
      \ tmp <span class=\"sy0\">=</span> ar<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ tmp;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Return\
      \ the highest value */</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">float</span>\
      \ MaxF<span class=\"br0\">(</span><span class=\"kw1\">out</span> array<span\
      \ class=\"sy0\">&lt;</span>float<span class=\"sy0\">&gt;</span> ar<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">float</span> tmp;\n  tmp <span class=\"sy0\">=</span> ar<span\
      \ class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>\
      \ ar.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ar<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> tmp<span class=\"br0\"\
      >)</span> tmp <span class=\"sy0\">=</span> ar<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> tmp;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Return the highest value */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">string</span> MaxS<span class=\"br0\">(</span><span class=\"kw1\">out</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">string</span> tmp;\n  tmp <span class=\"sy0\"\
      >=</span> ar<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"\
      br0\">]</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i <span class=\"\
      sy0\">&lt;</span> ar.<span class=\"me0\">length</span>; i<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n   \
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>\
      \ tmp<span class=\"br0\">)</span> tmp <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> tmp;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"coMULTI\">/** Return the lowest value */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> MinI<span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> array<span class=\"sy0\">&lt;</span>int<span class=\"sy0\"\
      >&gt;</span> ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i, tmp;\n\
      \  tmp <span class=\"sy0\">=</span> ar<span class=\"br0\">[</span><span class=\"\
      nu0\">1</span><span class=\"br0\">]</span>;\n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>; i <span class=\"sy0\">&lt;</span> ar.<span class=\"me0\">length</span>;\
      \ i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ tmp<span class=\"br0\">)</span> tmp <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> tmp;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"coMULTI\">/** Return the lowest value */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">float</span> MinF<span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> array<span class=\"sy0\">&lt;</span>float<span class=\"sy0\"\
      >&gt;</span> ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">float</span> tmp;\n  tmp <span\
      \ class=\"sy0\">=</span> ar<span class=\"br0\">[</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i <span\
      \ class=\"sy0\">&lt;</span> ar.<span class=\"me0\">length</span>; i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ tmp<span class=\"br0\">)</span> tmp <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> tmp;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"coMULTI\">/** Return the lowest value */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> MinS<span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\"\
      >&gt;</span> ar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">string</span> tmp;\n  tmp <span\
      \ class=\"sy0\">=</span> ar<span class=\"br0\">[</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i <span\
      \ class=\"sy0\">&lt;</span> ar.<span class=\"me0\">length</span>; i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ tmp<span class=\"br0\">)</span> tmp <span class=\"sy0\">=</span> ar<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> tmp;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"coMULTI\">/** search a string array for an element, return it's\
      \ index or -1 if not found */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">int</span> BinarySearch<span class=\"br0\">(</span>array<span class=\"\
      sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> Myarray, <span class=\"\
      kw5\">string</span> SearchString, <span class=\"kw1\">optional</span> <span\
      \ class=\"kw5\">int</span> Low, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">int</span> High, <span class=\"kw1\">optional</span> <span class=\"kw5\"\
      >bool</span> bIgnoreCase<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> Middle;\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>High <span class=\"\
      sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> High\
      \ <span class=\"sy0\">=</span> MyArray.<span class=\"me0\">length</span><span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span>;\n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>bIgnoreCase<span class=\"br0\">)</span>\
      \ SearchString <span class=\"sy0\">=</span> <span class=\"kw3\">Caps</span><span\
      \ class=\"br0\">(</span>SearchString<span class=\"br0\">)</span>;\n \n  <span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>Low <span class=\"\
      sy0\">&lt;=</span> High<span class=\"br0\">)</span> \n  <span class=\"br0\"\
      >{</span>\n    Middle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Low\
      \ <span class=\"sy0\">+</span> High<span class=\"br0\">)</span> <span class=\"\
      sy0\">/</span> <span class=\"nu0\">2</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>bIgnoreCase<span class=\"br0\">)</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>MyArray<span class=\"\
      br0\">[</span>Middle<span class=\"br0\">]</span> ~<span class=\"sy0\">=</span>\
      \ SearchString<span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ Middle;\n      <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>MyArray<span class=\"br0\">[</span>Middle<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">==</span> SearchString<span class=\"\
      br0\">)</span> <span class=\"kw2\">return</span> Middle;\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>MyArray<span class=\"br0\">[</span>Middle<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> SearchString<span class=\"\
      br0\">)</span> High <span class=\"sy0\">=</span> Middle <span class=\"sy0\"\
      >-</span> <span class=\"nu0\">1</span>;\n      <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>MyArray<span class=\"\
      br0\">[</span>Middle<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ SearchString<span class=\"br0\">)</span> Low <span class=\"sy0\">=</span>\
      \ Middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      sy0\">-</span><span class=\"nu0\">1</span>;           \n<span class=\"br0\"\
      >}</span>\n \n<span class=\"coMULTI\">/** returns the common beginning of items\
      \ in a string array */</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">string</span>\
      \ GetCommonBegin<span class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> slist<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span> common,\
      \ tmp2;\n \n  common <span class=\"sy0\">=</span> slist<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>;\n  <span class=\"kw2\"\
      >for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span> slist.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    tmp2 <span class=\"sy0\">=</span> slist<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n    <span class=\"kw2\"\
      >while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">InStr</span><span class=\"br0\">(</span>tmp2, common<span class=\"\
      br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span>common <span class=\"sy0\">!=</span> <span class=\"st0\">\"\"\
      </span><span class=\"br0\">)</span><span class=\"br0\">)</span> common <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span class=\"br0\"\
      >(</span>common, <span class=\"kw3\">Len</span><span class=\"br0\">(</span>common<span\
      \ class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>common <span class=\"sy0\">==</span> <span class=\"st0\">\"\"\
      </span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span\
      \ class=\"st0\">\"\"</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> common;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.146 seconds\nReal time usage:\
      \ 0.498 seconds\nPreprocessor visited node count: 5/1000000\nPreprocessor generated\
      \ node count: 32/1000000\nPost‐expand include size: 13/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3774-0!*!*!*!*!*!* and timestamp 20221118120103 and revision\
      \ id 9561\n -->\n"
  categories:
  - sortkey: "WUtils/WArray"
    name: "Legacy_Custom_Class_(UT2004)"
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:WUtils/WArray"
  iwlinks: []
  wikitext:
    text: "<uscript>\n///////////////////////////////////////////////////////////////////////////////\n\
      // filename:    wArray.uc\n// revision:    102\n// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)\n//              http://wiki.beyondunreal.com/WUtils\n\
      ///////////////////////////////////////////////////////////////////////////////\n\
      \nclass wArray extends Object;\n\n/** Add the elements of A and B to the result\
      \ (string arrays) */\nstatic final function array<string> AddS(array<string>\
      \ A, array<string> B)\n{\n  local int i;\n  for (i = 0; i < B.length; i++)\n\
      \  {\n    A.length = A.length+1;\n    A[A.length-1] = B[i];\n  }\n  return A;\n\
      }\n\n/** Add the elements of A and B to the result (int arrays) */\nstatic final\
      \ function array<int> AddI(array<int> A, array<int> B)\n{\n  local int i;\n\
      \  for (i = 0; i < B.length; i++)\n  {\n    A.length = A.length+1;\n    A[A.length-1]\
      \ = B[i];\n  }\n  return A;\n}\n\n/** Add the elements of A and B to the result\
      \ (float arrays) */\nstatic final function array<float> AddF(array<float> A,\
      \ array<float> B)\n{\n  local int i;\n  for (i = 0; i < B.length; i++)\n  {\n\
      \    A.length = A.length+1;\n    A[A.length-1] = B[i];\n  }\n  return A;\n}\n\
      \n/** Add the elements of A and B to the result (object arrays) */\nstatic final\
      \ function array<object> AddO(array<object> A, array<object> B)\n{\n  local\
      \ int i;\n  for (i = 0; i < B.length; i++)\n  {\n    A.length = A.length+1;\n\
      \    A[A.length-1] = B[i];\n  }\n  return A;\n}\n\n/** Calculate the diffirence\
      \ between A and B */\nstatic final function array<string> RemoveS(array<string>\
      \ A, array<string> B)\n{\n  local int i;\n  while (B.length > 0)\n  {\n    for\
      \ (i = 0; i < A.length; i++)\n    {\n      if (A[i] == B[0])\n      {\n    \
      \    A.remove(i, 1);\n        break;\n      }\n    }\n    B.remove(0, 1);\n\
      \  }\n  return A;\n}\n\n/** Calculate the diffirence between A and B */\nstatic\
      \ final function array<int> RemoveI(array<int> A, array<int> B)\n{\n  local\
      \ int i;\n  while (B.length > 0)\n  {\n    for (i = 0; i < A.length; i++)\n\
      \    {\n      if (A[i] == B[0])\n      {\n        A.remove(i, 1);\n        break;\n\
      \      }\n    }\n    B.remove(0, 1);\n  }\n  return A;\n}\n\n/** Calculate the\
      \ diffirence between A and B */\nstatic final function array<float> RemoveF(array<float>\
      \ A, array<float> B)\n{\n  local int i;\n  while (B.length > 0)\n  {\n    for\
      \ (i = 0; i < A.length; i++)\n    {\n      if (A[i] == B[0])\n      {\n    \
      \    A.remove(i, 1);\n        break;\n      }\n    }\n    B.remove(0, 1);\n\
      \  }\n  return A;\n}\n\n/** Calculate the diffirence between A and B */\nstatic\
      \ final function array<object> RemoveO(array<object> A, array<object> B)\n{\n\
      \  local int i;\n  while (B.length > 0)\n  {\n    for (i = 0; i < A.length;\
      \ i++)\n    {\n      if (A[i] == B[0])\n      {\n        A.remove(i, 1);\n \
      \       break;\n      }\n    }\n    B.remove(0, 1);\n  }\n  return A;\n}\n\n\
      /** Remove the first element of the array and return this element */\nstatic\
      \ final function string ShiftS(out array<string> ar)\n{\n  local string result;\n\
      \  if (ar.length > 0)\n  {\n    result = ar[0];\n    ar.remove(0,1);\n  }\n\
      \  return result;\n}\n\n/** Remove the first element of the array and return\
      \ this element */\nstatic final function object ShiftO(out array<object> ar)\n\
      {\n  local object result;\n  if (ar.length > 0)\n  {\n    result = ar[0];\n\
      \    ar.remove(0,1);\n  }\n  return result;\n}\n\n/** Remove the first element\
      \ of the array and return this element */\nstatic final function int ShiftI(out\
      \ array<int> ar)\n{\n  local int result;\n  if (ar.length > 0)\n  {\n    result\
      \ = ar[0];\n    ar.remove(0,1);\n  }\n  return result;\n}\n\n/** Remove the\
      \ first element of the array and return this element */\nstatic final function\
      \ float ShiftF(out array<float> ar)\n{\n  local float result;\n  if (ar.length\
      \ > 0)\n  {\n    result = ar[0];\n    ar.remove(0,1);\n  }\n  return result;\n\
      }\n\n/** Join the elements of a string array to an array */\nstatic final function\
      \ string Join(array< string > ar, optional string delim, optional bool bIgnoreEmpty)\n\
      {\n  local string result;\n  local int i;\n  for (i = 0; i < ar.length; i++)\n\
      \  {\n    if (bIgnoreEmpty && ar[i] == \"\") continue;\n    if (result != \"\
      \") result = result$delim;\n    result = result$ar[i];\n  }\n  return result;\n\
      }\n\n/** internal function for SortS */\nstatic private final function SortSArray(out\
      \ array<string> ar, int low, int high, optional bool bCaseInsenstive)\n{\n \
      \ local int i,j;\n  local string x, y;\n\n  i = Low;\n  j = High;\n  x = ar[(Low+High)/2];\n\
      \  if (bCaseInsenstive) x = Caps(x);\n\n  do {\n    if (bCaseInsenstive)\n \
      \   {\n      while (Caps(ar[i]) < x) i += 1; \n      while (Caps(ar[j]) > x)\
      \ j -= 1;\n    }\n    else {\n      while (ar[i] < x) i += 1; \n      while\
      \ (ar[j] > x) j -= 1;\n    }\n    if (i <= j)\n    {\n      y = ar[i];\n   \
      \   ar[i] = ar[j];\n      ar[j] = y;\n      i += 1; \n      j -= 1;\n    }\n\
      \  } until (i > j);\n  if (low < j) SortSArray(ar, low, j, bCaseInsenstive);\n\
      \  if (i < high) SortSArray(ar, i, high, bCaseInsenstive);\n}\n\n/** Sort an\
      \ string array */\nstatic final function SortS(out array<string> ar, optional\
      \ bool bCaseInsenstive)\n{\n  SortSArray(ar, 0, ar.length-1, bCaseInsenstive);\n\
      }\n\n/** internal function for SortI */\nstatic private final function SortIArray(out\
      \ array<int> ar, int low, int high)\n{\n  local int i,j,x,y;\n\n  i = Low;\n\
      \  j = High;\n  x = ar[(Low+High)/2];\n\n  do {    \n    while (ar[i] < x) i\
      \ += 1; \n    while (ar[j] > x) j -= 1;\n    if (i <= j)\n    {\n      y = ar[i];\n\
      \      ar[i] = ar[j];\n      ar[j] = y;\n      i += 1; \n      j -= 1;\n   \
      \ }\n  } until (i > j);\n  if (low < j) SortIArray(ar, low, j);\n  if (i < high)\
      \ SortIArray(ar, i, high);\n}\n\n/** sort an int array */\nstatic final function\
      \ SortI(out array<int> ar)\n{\n  SortIArray(ar, 0, ar.length-1);\n}\n\n/** internal\
      \ function for SortF */\nstatic private final function SortFArray(out array<float>\
      \ ar, int low, int high)\n{\n  local int i,j,x,y;\n\n  i = Low;\n  j = High;\n\
      \  x = ar[(Low+High)/2];\n\n  do {    \n    while (ar[i] < x) i += 1; \n   \
      \ while (ar[j] > x) j -= 1;\n    if (i <= j)\n    {\n      y = ar[i];\n    \
      \  ar[i] = ar[j];\n      ar[j] = y;\n      i += 1; \n      j -= 1;\n    }\n\
      \  } until (i > j);\n  if (low < j) SortFArray(ar, low, j);\n  if (i < high)\
      \ SortFArray(ar, i, high);\n}\n\n/** sort an int array */\nstatic final function\
      \ SortF(out array<float> ar)\n{\n  SortFArray(ar, 0, ar.length-1);\n}\n\n/**\
      \ Return the highest value */\nstatic final function int MaxI(out array<int>\
      \ ar)\n{\n  local int i, tmp;\n  tmp = ar[1];\n  for (i = 1; i < ar.length;\
      \ i++)\n  {\n    if (ar[i] > tmp) tmp = ar[i];\n  }\n  return tmp;\n}\n\n/**\
      \ Return the highest value */\nstatic final function float MaxF(out array<float>\
      \ ar)\n{\n  local int i;\n  local float tmp;\n  tmp = ar[1];\n  for (i = 1;\
      \ i < ar.length; i++)\n  {\n    if (ar[i] > tmp) tmp = ar[i];\n  }\n  return\
      \ tmp;\n}\n\n/** Return the highest value */\nstatic final function string MaxS(out\
      \ array<string> ar)\n{\n  local int i;\n  local string tmp;\n  tmp = ar[1];\n\
      \  for (i = 1; i < ar.length; i++)\n  {\n    if (ar[i] > tmp) tmp = ar[i];\n\
      \  }\n  return tmp;\n}\n\n/** Return the lowest value */\nstatic final function\
      \ int MinI(out array<int> ar)\n{\n  local int i, tmp;\n  tmp = ar[1];\n  for\
      \ (i = 1; i < ar.length; i++)\n  {\n    if (ar[i] < tmp) tmp = ar[i];\n  }\n\
      \  return tmp;\n}\n\n/** Return the lowest value */\nstatic final function float\
      \ MinF(out array<float> ar)\n{\n  local int i;\n  local float tmp;\n  tmp =\
      \ ar[1];\n  for (i = 1; i < ar.length; i++)\n  {\n    if (ar[i] < tmp) tmp =\
      \ ar[i];\n  }\n  return tmp;\n}\n\n/** Return the lowest value */\nstatic final\
      \ function string MinS(out array<string> ar)\n{\n  local int i;\n  local string\
      \ tmp;\n  tmp = ar[1];\n  for (i = 1; i < ar.length; i++)\n  {\n    if (ar[i]\
      \ < tmp) tmp = ar[i];\n  }\n  return tmp;\n}\n\n/** search a string array for\
      \ an element, return it's index or -1 if not found */\nstatic final function\
      \ int BinarySearch(array<string> Myarray, string SearchString, optional int\
      \ Low, optional int High, optional bool bIgnoreCase)\n{\n  local int Middle;\n\
      \  if (High == 0) High = MyArray.length-1;\n  if (bIgnoreCase) SearchString\
      \ = Caps(SearchString);\n\n  while (Low <= High) \n  {\n    Middle = (Low +\
      \ High) / 2;\n    if (bIgnoreCase) if (MyArray[Middle] ~= SearchString) return\
      \ Middle;\n      else if (MyArray[Middle] == SearchString) return Middle;\n\
      \    if (MyArray[Middle] > SearchString) High = Middle - 1;\n      else if (MyArray[Middle]\
      \ < SearchString) Low = Middle + 1;\n  }\n  return -1;           \n}\n\n/**\
      \ returns the common beginning of items in a string array */\nstatic final function\
      \ string GetCommonBegin(array<string> slist)\n{\n  local int i;\n  local string\
      \ common, tmp2;\n\n  common = slist[0];\n  for (i = 1; i < slist.length; i++)\n\
      \  {\n    tmp2 = slist[i];\n    while ((InStr(tmp2, common) != 0) && (common\
      \ != \"\")) common = Left(common, Len(common)-1);\n    if (common == \"\") return\
      \ \"\";\n  }\n  return common;\n}\n</uscript>\n\n[[Category:Legacy Custom Class\
      \ (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 9561
name: "Legacy:WUtils/WArray"
revision:
  revid: 9561
  parentid: 9562
  user: "Sweavo"
  timestamp: 1195514239.000000000
  comment: "*"
timestamp: 1668772865.283221000
