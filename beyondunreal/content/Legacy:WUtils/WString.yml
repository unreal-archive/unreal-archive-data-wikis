---
parse:
  title: "Legacy:WUtils/WString"
  text:
    text: "<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">// filename:    wString.uc</span>\n<span class=\"co1\">//\
      \ revision:    103</span>\n<span class=\"co1\">// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)</span>\n<span class=\"co1\">//    \
      \          http://wiki.beyondunreal.com/WUtils</span>\n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      \ \n<span class=\"kw1\">class</span> wString <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Object</span>;\n \n<span class=\"coMULTI\">/** Shifts\
      \ an element off a string                              &lt;br /&gt;\n    example\
      \ (delim = ' '): 'this is a string' -&gt; 'is a string'  &lt;br /&gt;\n    if\
      \ quotechar = \" : '\"this is\" a string' -&gt; 'a string'       */</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> StrShift<span class=\"\
      br0\">(</span><span class=\"kw1\">out</span> <span class=\"kw5\">string</span>\
      \ line, <span class=\"kw5\">string</span> delim, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> quotechar<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> delimpos, quotepos;\n    <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">string</span> result;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> quotechar <span class=\"sy0\">!=</span> <span\
      \ class=\"st0\">\"\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      kw3\">Left</span><span class=\"br0\">(</span>line, <span class=\"kw3\">Len</span><span\
      \ class=\"br0\">(</span>quotechar<span class=\"br0\">)</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">==</span> quotechar <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n        <span class=\"kw2\">do</span> <span\
      \ class=\"br0\">{</span>\n            quotepos <span class=\"sy0\">=</span>\
      \ InstrFrom<span class=\"br0\">(</span>line, quotechar, quotepos <span class=\"\
      sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n \
      \       <span class=\"br0\">}</span> until <span class=\"br0\">(</span>quotepos\
      \ <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span> <span class=\"sy0\">||</span> quotepos <span class=\"sy0\">+</span>\
      \ <span class=\"kw3\">Len</span><span class=\"br0\">(</span>quotechar<span class=\"\
      br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw3\">Len</span><span\
      \ class=\"br0\">(</span>line<span class=\"br0\">)</span>\n                <span\
      \ class=\"sy0\">||</span> <span class=\"kw3\">Mid</span><span class=\"br0\"\
      >(</span>line, quotepos <span class=\"sy0\">+</span> <span class=\"kw3\">len</span><span\
      \ class=\"br0\">(</span>quotechar<span class=\"br0\">)</span>, <span class=\"\
      kw3\">len</span><span class=\"br0\">(</span>delim<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> delim<span class=\"br0\"\
      >)</span>;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> quotepos <span class=\"sy0\">!=</span> <span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n        delimpos <span class=\"sy0\">=</span>\
      \ InstrFrom<span class=\"br0\">(</span>line, delim, quotepos<span class=\"br0\"\
      >)</span>;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n        delimpos <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Instr</span><span class=\"br0\">(</span>line, delim<span\
      \ class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>delimpos <span class=\"sy0\">==</span>\
      \ <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>\n    <span class=\"br0\">{</span>\n        result <span class=\"sy0\"\
      >=</span> line;\n        line <span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"\"</span>;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n        result <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Left</span><span class=\"br0\">(</span>line,delimpos<span\
      \ class=\"br0\">)</span>;\n        line <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Mid</span><span class=\"br0\">(</span>line,delimpos<span class=\"sy0\"\
      >+</span><span class=\"kw3\">len</span><span class=\"br0\">(</span>delim<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n    <span class=\"br0\"\
      >}</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> quotechar\
      \ <span class=\"sy0\">!=</span> <span class=\"st0\">\"\"</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>result,\
      \ <span class=\"kw3\">Len</span><span class=\"br0\">(</span>quotechar<span class=\"\
      br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> quotechar\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      result <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>result,\
      \ <span class=\"kw3\">Len</span><span class=\"br0\">(</span>quotechar<span class=\"\
      br0\">)</span>, <span class=\"kw3\">Len</span><span class=\"br0\">(</span>result<span\
      \ class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Len</span><span class=\"br0\">(</span>quotechar<span class=\"\
      br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n    <span class=\"br0\"\
      >}</span>\n    <span class=\"kw2\">return</span> result;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"coMULTI\">/** StrReplace using an array with replacements.\n\
      \    will return the changed string, will replace all occurences unless bOnlyFirst\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">string</span> StrReplace<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> target, array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> replace, array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> with, <span class=\"kw1\">optional</span> <span class=\"kw5\"\
      >bool</span> bOnlyFirst<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i,j;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">string</span> Input;\n \n \
      \ <span class=\"co1\">// cycle trough replacement list</span>\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; j <span class=\"sy0\">&lt;</span> replace.<span\
      \ class=\"me0\">length</span>; j<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    Input <span class=\"sy0\"\
      >=</span> target;\n    target <span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"\"</span>;\n    i <span class=\"sy0\">=</span> <span class=\"kw3\">InStr</span><span\
      \ class=\"br0\">(</span>input, Replace<span class=\"br0\">[</span>j<span class=\"\
      br0\">]</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">while</span><span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"sy0\"\
      >-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span> \n      target <span class=\"sy0\">=</span> target\
      \ <span class=\"sy0\">$</span> <span class=\"kw3\">Left</span><span class=\"\
      br0\">(</span>Input, i<span class=\"br0\">)</span> <span class=\"sy0\">$</span>\
      \ With<span class=\"br0\">[</span>j<span class=\"br0\">]</span>;\n      Input\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"\
      br0\">(</span>Input, i <span class=\"sy0\">+</span> <span class=\"kw3\">Len</span><span\
      \ class=\"br0\">(</span>Replace<span class=\"br0\">[</span>j<span class=\"br0\"\
      >]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  \n     \
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>bOnlyFirst<span\
      \ class=\"br0\">)</span> <span class=\"kw2\">break</span>; <span class=\"co1\"\
      >// only replace first occurance</span>\n      i <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">InStr</span><span class=\"br0\">(</span>Input, Replace<span\
      \ class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n    target <span class=\"sy0\">=</span> target\
      \ <span class=\"sy0\">$</span> Input;\n  <span class=\"br0\">}</span>\n  <span\
      \ class=\"kw2\">return</span> target;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** StrSubst will replace %s in target with r# where # is\
      \ the place of %s in the string */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">string</span> StrSubst<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> target, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">string</span> r0, <span class=\"kw1\"\
      >optional</span> <span class=\"kw5\">string</span> r1, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r2, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r3, \n  <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r4, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r5, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r6, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r7, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r8, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> r9<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> array<span class=\"sy0\"\
      >&lt;</span>string<span class=\"sy0\">&gt;</span> replace, with;\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">int</span> i;\n  replace.<span class=\"\
      me0\">length</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span>;\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ replace.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span> replace<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%s\"</span>;\n\
      \  with.<span class=\"me0\">length</span><span class=\"sy0\">=</span><span class=\"\
      nu0\">10</span>;\n  with<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">=</span>r0;\n  with<span class=\"\
      br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">=</span>r1;\n  with<span class=\"br0\">[</span><span class=\"\
      nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>r2;\n\
      \  with<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"\
      br0\">]</span><span class=\"sy0\">=</span>r3;\n  with<span class=\"br0\">[</span><span\
      \ class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>r4;\n\
      \  with<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"\
      br0\">]</span><span class=\"sy0\">=</span>r5;\n  with<span class=\"br0\">[</span><span\
      \ class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>r6;\n\
      \  with<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"\
      br0\">]</span><span class=\"sy0\">=</span>r7;\n  with<span class=\"br0\">[</span><span\
      \ class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>r8;\n\
      \  with<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"\
      br0\">]</span><span class=\"sy0\">=</span>r9;\n  <span class=\"kw2\">return</span>\
      \ StrReplace<span class=\"br0\">(</span>target, replace, with, <span class=\"\
      kw6\">true</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/** Turn a string to lower case &lt;br /&gt;\n \
      \   example: 'This Is A String' -&gt; 'this is a string' */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> Lower<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> Text<span class=\"br0\"\
      >)</span> \n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> IndexChar;\n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>IndexChar <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>; IndexChar <span class=\"sy0\">&lt;</span> <span class=\"kw3\"\
      >Len</span><span class=\"br0\">(</span>Text<span class=\"br0\">)</span>; IndexChar<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw3\">Mid</span><span class=\"\
      br0\">(</span>Text, IndexChar, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;=</span> <span class=\"st0\">\"A\"</span>\
      \ <span class=\"sy0\">&amp;&amp;</span>\n        <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>Text, IndexChar, <span class=\"nu0\">1</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">\"Z\"</span><span\
      \ class=\"br0\">)</span>\n      Text <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Left</span><span class=\"br0\">(</span>Text, IndexChar<span class=\"br0\"\
      >)</span> <span class=\"sy0\">$</span> <span class=\"kw3\">Chr</span><span class=\"\
      br0\">(</span><span class=\"kw3\">Asc</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Text, IndexChar, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">+</span> <span class=\"nu0\">32</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">$</span> <span class=\"kw3\">Mid</span><span class=\"\
      br0\">(</span>Text, IndexChar <span class=\"sy0\">+</span> <span class=\"nu0\"\
      >1</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span>\
      \ Text;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Checks\
      \ if a string is all uppercase */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">bool</span> IsUpper<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> S<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw2\">return</span> S <span\
      \ class=\"sy0\">==</span> <span class=\"kw3\">Caps</span><span class=\"br0\"\
      >(</span>S<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** Checks if a string is all lowercase */</span>\n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> IsLower<span class=\"\
      br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ S<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">return</span> S <span class=\"sy0\">==</span> Lower<span class=\"br0\"\
      >(</span>S<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** Trim leading spaces */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">string</span> LTrim<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> S<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw2\">while</span> <span class=\"\
      br0\">(</span><span class=\"kw3\">Left</span><span class=\"br0\">(</span>S,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >==</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>\n  \
      \      S <span class=\"sy0\">=</span> <span class=\"kw3\">Right</span><span\
      \ class=\"br0\">(</span>S, <span class=\"kw3\">Len</span><span class=\"br0\"\
      >(</span>S<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span>\
      \ S;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Trim trailing\
      \ spaces */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">string</span> RTrim<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> S<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"\
      kw3\">Right</span><span class=\"br0\">(</span>S, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"\
      \ \"</span><span class=\"br0\">)</span>\n        S <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Left</span><span class=\"br0\">(</span>S, <span class=\"\
      kw3\">Len</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">return</span> S;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"coMULTI\">/** Trim leading and trailing spaces */</span>\n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> Trim<span class=\"br0\"\
      >(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ S<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">return</span> LTrim<span class=\"br0\">(</span>RTrim<span class=\"br0\"\
      >(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"coMULTI\">/** Internal function used for MaskedCompare\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">bool</span> _match<span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> <span class=\"kw5\">string</span> mask, <span class=\"kw1\"\
      >out</span> <span class=\"kw5\">string</span> target<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">string</span> m, mp, cp;\n  m <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Left</span><span class=\"br0\">(</span>mask, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">while</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>target <span class=\"sy0\">!=</span>\
      \ <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>m <span class=\"sy0\">!=</span>\
      \ <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\"\
      >!=</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>target,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>m\
      \ <span class=\"sy0\">!=</span> <span class=\"st0\">\"?\"</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">false</span>;\n    mask <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Mask, <span class=\"nu0\"\
      >1</span><span class=\"br0\">)</span>;\n    target <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>target, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n    m <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Left</span><span class=\"br0\">(</span>mask, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n\
      \ \n  <span class=\"kw2\">while</span> <span class=\"br0\">(</span>target <span\
      \ class=\"sy0\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\"\
      >)</span> \n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"*\"</span><span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n\
      \      mask <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>Mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>mask\
      \ <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"\
      br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\
      \ <span class=\"co1\">// only \"*\" mask -&gt; always true</span>\n      mp\
      \ <span class=\"sy0\">=</span> mask;\n      cp <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>target, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n      m <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Left</span><span class=\"br0\">(</span>mask, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\
      \ \n    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">==</span>\
      \ <span class=\"kw3\">Left</span><span class=\"br0\">(</span>target, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">||</span> <span class=\"br0\">(</span>m <span class=\"sy0\"\
      >==</span> <span class=\"st0\">\"?\"</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n      mask <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>Mask,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n      target <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>target,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n      m <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>mask,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n    <span class=\"\
      br0\">}</span> \n    <span class=\"kw2\">else</span> \n    <span class=\"br0\"\
      >{</span>\n      mask <span class=\"sy0\">=</span> mp;\n      m <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>mask,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n      target <span\
      \ class=\"sy0\">=</span> cp;\n      cp <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Mid</span><span class=\"br0\">(</span>cp, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n  <span class=\"\
      br0\">}</span>\n \n  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">Left</span><span class=\"br0\">(</span>mask, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span\
      \ class=\"st0\">\"*\"</span><span class=\"br0\">)</span> \n  <span class=\"\
      br0\">{</span>\n    mask <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>Mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"br0\">(</span>mask <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/** Compare a string with a mask              &lt;br\
      \ /&gt;\n    Wildcards: * = X chars; ? = 1 char        &lt;br /&gt;\n    Wildcards\
      \ can appear anywhere in the mask */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">bool</span> MaskedCompare<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> target, <span class=\"\
      kw5\">string</span> mask, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">bool</span> casesensitive<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"sy0\">!</span>casesensitive<span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    mask <span class=\"sy0\">=</span> <span class=\"kw3\">Caps</span><span\
      \ class=\"br0\">(</span>mask<span class=\"br0\">)</span>;\n    target <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Caps</span><span class=\"br0\"\
      >(</span>target<span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>mask <span class=\"\
      sy0\">==</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>\
      \ <span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n \n  <span\
      \ class=\"kw2\">return</span> _match<span class=\"br0\">(</span>mask, target<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** InStr starting from an offset */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">int</span> InStrFrom<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> StrText, <span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> StrPart, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">int</span> OffsetStart<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> OffsetPart;\n \n  OffsetPart <span class=\"\
      sy0\">=</span> <span class=\"kw3\">InStr</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>StrText, OffsetStart<span\
      \ class=\"br0\">)</span>, StrPart<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>OffsetPart <span class=\"sy0\">&gt;=</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n    OffsetPart <span\
      \ class=\"sy0\">+=</span> OffsetStart;\n  <span class=\"kw2\">return</span>\
      \ OffsetPart;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/**\n\
      \   Replace key=value sets: ?key=valye?otherkey=othervalue?...      &lt;br /&gt;\n\
      \   Options: the string containing these key=value sets             &lt;br /&gt;\n\
      \   Key: the key to replace/add                                     &lt;br /&gt;\n\
      \   NewValue: the new value of the Key                              &lt;br /&gt;\n\
      \   bAddIfMissing: add the key=value pair if it doesn't exist       &lt;br /&gt;\n\
      \   OldValue: this will contain the previous value                  &lt;br /&gt;\n\
      \   delim: the delimiter of the key=value pairs, by default: ?      &lt;br /&gt;\n\
      */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> ReplaceOption<span\
      \ class=\"br0\">(</span> <span class=\"kw1\">out</span> <span class=\"kw5\"\
      >string</span> Options, <span class=\"kw5\">string</span> Key, <span class=\"\
      kw5\">string</span> NewValue, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">bool</span> bAddIfMissing, <span class=\"kw1\">optional</span> <span class=\"\
      kw1\">out</span> <span class=\"kw5\">string</span> OldValue, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">string</span> delim<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ Options<span class=\"re1\">Array</span>&lt; SEMI &gt;\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">string</span> CurrentKey, CurrentValue;\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">bool</span> bReplaced;\n  bReplaced <span\
      \ class=\"sy0\">=</span> <span class=\"kw6\">false</span>;\n \n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>delim <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> delim <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"?\"</span>; <span class=\"co1\">// default\
      \ delim is ?</span>\n  Split2<span class=\"br0\">(</span> Options, delim, OptionsArray\
      \ <span class=\"br0\">)</span>;\n  <span class=\"co1\">// find the key</span>\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span> i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ OptionsArray.<span class=\"me0\">Length</span>; i<span class=\"sy0\">++</span>\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"\
      kw3\">Divide</span><span class=\"br0\">(</span> OptionsArray<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span>, <span class=\"st0\">\"=\"</span>, CurrentKey,\
      \ CurrentValue <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> CurrentKey ~<span class=\"sy0\">=</span> Key\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      OldValue\
      \ <span class=\"sy0\">=</span> CurrentValue;\n      OptionsArray<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> CurrentKey<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\"=\"</span><span class=\"sy0\"\
      >$</span>NewValue;\n      bReplaced <span class=\"sy0\">=</span> <span class=\"\
      kw6\">true</span>;\n    <span class=\"br0\">}</span>\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"co1\">// add if missing</span>\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>bReplaced\
      \ <span class=\"sy0\">&amp;&amp;</span> bAddIfMissing <span class=\"br0\">)</span>\
      \ OptionsArray<span class=\"br0\">[</span>OptionsArray.<span class=\"me0\">Length</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> Key<span class=\"sy0\"\
      >$</span><span class=\"st0\">\"=\"</span><span class=\"sy0\">$</span>NewValue;\n\
      \  <span class=\"co1\">// join the strings</span>\n  Options <span class=\"\
      sy0\">=</span> <span class=\"kw1\">class</span><span class=\"st0\">'wArray'</span>.<span\
      \ class=\"kw1\">static</span>.<span class=\"me0\">Join</span><span class=\"\
      br0\">(</span>OptionsArray, delim<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">return</span> bReplaced;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      coMULTI\">/** Capitalize a string. &lt;br /&gt;\n    example: 'this is a STRING'\
      \ -&gt; 'This Is A String' */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">string</span> Capitalize<span class=\"br0\">(</span><span class=\"kw1\"\
      >coerce</span> <span class=\"kw5\">string</span> S<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> parts;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  Split2<span\
      \ class=\"br0\">(</span>s, <span class=\"st0\">\" \"</span>, parts<span class=\"\
      br0\">)</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> parts.<span class=\"me0\">length</span>; i<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n   \
      \ parts<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Caps</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Left</span><span class=\"br0\">(</span>parts<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span>, <span class=\"nu0\">1</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">$</span>Lower<span\
      \ class=\"br0\">(</span><span class=\"kw3\">Mid</span><span class=\"br0\">(</span>parts<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">return</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'wArray'</span>.<span class=\"kw1\">static</span>.<span class=\"\
      me0\">join</span><span class=\"br0\">(</span>parts, <span class=\"st0\">\" \"\
      </span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/**\n   Fixed split method                        &lt;br\
      \ /&gt;\n   no problems when it starts with a delim   &lt;br /&gt;\n   no problems\
      \ with ending spaces            &lt;br /&gt;\n   delim can be a string     \
      \                &lt;br /&gt;\n*/</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">int</span> Split2<span class=\"br0\">(</span><span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> src, <span class=\"kw5\"\
      >string</span> delim, <span class=\"kw1\">out</span> array<span class=\"sy0\"\
      >&lt;</span>string<span class=\"sy0\">&gt;</span> parts, <span class=\"kw1\"\
      >optional</span> <span class=\"kw5\">bool</span> ignoreEmpty, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">string</span> quotechar<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">string</span> temp;\n  Parts.<span class=\"me0\">Remove</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, Parts.<span class=\"me0\"\
      >Length</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>delim <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"\"</span> <span class=\"sy0\">||</span> Src <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> <span class=\"nu0\">0</span>;\n  <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span>src <span class=\"sy0\">!=</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    temp <span class=\"sy0\">=</span> StrShift<span class=\"br0\">(</span>src,\
      \ delim, quotechar<span class=\"br0\">)</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      sy0\">!</span>ignoreEmpty<span class=\"br0\">)</span>\n      <span class=\"\
      br0\">{</span>\n        parts.<span class=\"me0\">length</span> <span class=\"\
      sy0\">=</span> parts.<span class=\"me0\">length</span><span class=\"sy0\">+</span><span\
      \ class=\"nu0\">1</span>;\n        parts<span class=\"br0\">[</span>parts.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp;\n \
      \     <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n    <span\
      \ class=\"kw2\">else</span> <span class=\"br0\">{</span>\n      parts.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">=</span> parts.<span class=\"\
      me0\">length</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>;\n\
      \      parts<span class=\"br0\">[</span>parts.<span class=\"me0\">length</span><span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> temp;\n    <span class=\"br0\">}</span>\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> parts.<span class=\"\
      me0\">length</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Replaces part of a string with a new string. &lt;br /&gt;\n    ReplaceInString(\"\
      A stupid string.\", 2, 6, \"good\") == \"A good string.\"  */</span>\n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> ReplaceInString<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> src, <span class=\"kw5\">int</span> from, <span class=\"kw5\"\
      >int</span> length, <span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ with<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>src,\
      \ from<span class=\"br0\">)</span><span class=\"sy0\">$</span>with<span class=\"\
      sy0\">$</span>Mid<span class=\"br0\">(</span>src, from<span class=\"sy0\">+</span>length<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\"\
      >/** Moves NUM lements from Source to Dest */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> Eat<span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> <span class=\"kw5\">string</span>\
      \ Dest, <span class=\"kw1\">out</span> <span class=\"kw5\">string</span> Source,\
      \ <span class=\"kw5\">int</span> Num<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  Dest <span class=\"sy0\">=</span> Dest <span class=\"sy0\"\
      >$</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span>Source,\
      \ Num<span class=\"br0\">)</span>;\n  Source <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Source, Num<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/**\
      \ Converts a float to a string representation */</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> FloatToString<span class=\"br0\">(</span><span\
      \ class=\"kw5\">float</span> Value, <span class=\"kw1\">optional</span> <span\
      \ class=\"kw5\">int</span> Precision<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ IntPart;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ FloatPart;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span>\
      \ IntString, FloatString;\n \n  Precision <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">Max</span><span class=\"br0\">(</span>Precision, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"co1\">// otherwise\
      \ a simple int cast should be used</span>\n \n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> Value <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \
      \   IntString <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span>;\n\
      \    Value <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span>;\n  <span class=\"br0\">}</span>\n  IntPart <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">int</span><span class=\"br0\">(</span>Value<span\
      \ class=\"br0\">)</span>;\n  FloatPart <span class=\"sy0\">=</span> Value <span\
      \ class=\"sy0\">-</span> IntPart;\n  IntString <span class=\"sy0\">=</span>\
      \ IntString <span class=\"sy0\">$</span> <span class=\"kw5\">string</span><span\
      \ class=\"br0\">(</span>IntPart<span class=\"br0\">)</span>;\n  FloatString\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">string</span><span class=\"\
      br0\">(</span><span class=\"kw5\">int</span><span class=\"br0\">(</span>FloatPart\
      \ <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"\
      sy0\">**</span> Precision<span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"\
      kw3\">Len</span><span class=\"br0\">(</span>FloatString<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&lt;</span> Precision<span class=\"br0\">)</span>\n  \
      \  FloatString <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>\
      \ <span class=\"sy0\">$</span> FloatString;\n \n  <span class=\"kw2\">return</span>\
      \ IntString<span class=\"sy0\">$</span><span class=\"st0\">\".\"</span><span\
      \ class=\"sy0\">$</span>FloatString;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">function</span> <span class=\"kw1\">static</span> <span class=\"\
      kw5\">string</span> AlignLeft<span class=\"br0\">(</span><span class=\"kw1\"\
      >coerce</span> <span class=\"kw5\">string</span> line, <span class=\"kw5\">int</span>\
      \ length, <span class=\"kw1\">optional</span> <span class=\"kw5\">string</span>\
      \ padchar<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>padchar <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> padchar <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\" \"</span>;\n  i <span class=\"\
      sy0\">=</span> length<span class=\"sy0\">-</span><span class=\"kw3\">Len</span><span\
      \ class=\"br0\">(</span>line<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    line <span class=\"sy0\">=</span> line<span class=\"sy0\"\
      >$</span>padchar;\n    i<span class=\"sy0\">--</span>;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>i <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span> line <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>line, length<span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">return</span> line;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >function</span> <span class=\"kw1\">static</span> <span class=\"kw5\">string</span>\
      \ AlignRight<span class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span\
      \ class=\"kw5\">string</span> line, <span class=\"kw5\">int</span> length, <span\
      \ class=\"kw1\">optional</span> <span class=\"kw5\">string</span> padchar<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>padchar <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span> padchar <span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\" \"</span>;\n  i <span class=\"sy0\">=</span> length<span\
      \ class=\"sy0\">-</span><span class=\"kw3\">Len</span><span class=\"br0\">(</span>line<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">while</span> <span class=\"\
      br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    line <span class=\"\
      sy0\">=</span> padchar<span class=\"sy0\">$</span>line;\n    i<span class=\"\
      sy0\">--</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span> line <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Right</span><span class=\"br0\">(</span>line, length<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> line;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw1\">static</span> <span class=\"kw5\">string</span> AlignCenter<span class=\"\
      br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ line, <span class=\"kw5\">int</span> length, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> padchar<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i, j;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>padchar <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span\
      \ class=\"br0\">)</span> padchar <span class=\"sy0\">=</span> <span class=\"\
      st0\">\" \"</span>;\n  i <span class=\"sy0\">=</span> <span class=\"kw3\">Len</span><span\
      \ class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\"\
      >/</span><span class=\"nu0\">2</span>;\n  j <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">Len</span><span class=\"br0\">(</span>line<span class=\"br0\"\
      >)</span><span class=\"sy0\">-</span>i;\n  <span class=\"kw2\">return</span>\
      \ AlignRight<span class=\"br0\">(</span><span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>line, i<span class=\"br0\">)</span>, length<span class=\"\
      sy0\">-</span><span class=\"br0\">(</span>length<span class=\"sy0\">/</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span>, padchar<span class=\"\
      br0\">)</span><span class=\"sy0\">$</span>AlignLeft<span class=\"br0\">(</span><span\
      \ class=\"kw3\">Right</span><span class=\"br0\">(</span>line, j<span class=\"\
      br0\">)</span>, length<span class=\"sy0\">/</span><span class=\"nu0\">2</span>,\
      \ padchar<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.151 seconds\nReal time\
      \ usage: 0.151 seconds\nPreprocessor visited node count: 5/1000000\nPreprocessor\
      \ generated node count: 32/1000000\nPost‐expand include size: 14/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:3777-0!*!*!*!*!*!* and timestamp\
      \ 20221118120058 and revision id 9567\n -->\n"
  categories:
  - sortkey: "WUtils/WString"
    name: "Legacy_Custom_Class_(UT2004)"
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:WUtils/WString"
  iwlinks: []
  wikitext:
    text: "<uscript>\n///////////////////////////////////////////////////////////////////////////////\n\
      // filename:    wString.uc\n// revision:    103\n// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)\n//              http://wiki.beyondunreal.com/WUtils\n\
      ///////////////////////////////////////////////////////////////////////////////\n\
      \nclass wString extends Object;\n\n/** Shifts an element off a string      \
      \                        <br />\n    example (delim = ' '): 'this is a string'\
      \ -> 'is a string'  <br />\n    if quotechar = \" : '\"this is\" a string' ->\
      \ 'a string'       */\nstatic final function string StrShift(out string line,\
      \ string delim, optional string quotechar)\n{\n    local int delimpos, quotepos;\n\
      \    local string result;\n    \n    if ( quotechar != \"\" && Left(line, Len(quotechar))\
      \ == quotechar ) {\n        do {\n            quotepos = InstrFrom(line, quotechar,\
      \ quotepos + 1);\n        } until (quotepos == -1 || quotepos + Len(quotechar)\
      \ == Len(line)\n                || Mid(line, quotepos + len(quotechar), len(delim))\
      \ == delim);\n    }\n    if ( quotepos != -1 ) {\n        delimpos = InstrFrom(line,\
      \ delim, quotepos);\n    }\n    else {\n        delimpos = Instr(line, delim);\n\
      \    }\n    \n    if (delimpos == -1)\n    {\n        result = line;\n     \
      \   line = \"\";\n    }\n    else {\n        result = Left(line,delimpos);\n\
      \        line = Mid(line,delimpos+len(delim));\n    }\n    if ( quotechar !=\
      \ \"\" && Left(result, Len(quotechar)) == quotechar ) {\n      result = Mid(result,\
      \ Len(quotechar), Len(result)-(Len(quotechar)*2));\n    }\n    return result;\n\
      }\n\n/** StrReplace using an array with replacements.\n    will return the changed\
      \ string, will replace all occurences unless bOnlyFirst */\nstatic final function\
      \ string StrReplace(coerce string target, array<string> replace, array<string>\
      \ with, optional bool bOnlyFirst)\n{\n  local int i,j;\n  local string Input;\n\
      \n  // cycle trough replacement list\n  for (j = 0; j < replace.length; j++)\n\
      \  {\n    Input = target;\n    target = \"\";\n    i = InStr(input, Replace[j]);\n\
      \    while(i != -1)\n    { \n      target = target $ Left(Input, i) $ With[j];\n\
      \      Input = Mid(Input, i + Len(Replace[j]));  \n      if (bOnlyFirst) break;\
      \ // only replace first occurance\n      i = InStr(Input, Replace[j]);\n   \
      \ }\n    target = target $ Input;\n  }\n  return target;\n}\n\n/** StrSubst\
      \ will replace %s in target with r# where # is the place of %s in the string\
      \ */\nstatic final function string StrSubst(coerce string target, optional string\
      \ r0, optional string r1, optional string r2, optional string r3, \n  optional\
      \ string r4, optional string r5, optional string r6, optional string r7, optional\
      \ string r8, optional string r9)\n{\n  local array<string> replace, with;\n\
      \  local int i;\n  replace.length=10;\n  for (i = 0; i < replace.length; i++)\
      \ replace[i] = \"%s\";\n  with.length=10;\n  with[0]=r0;\n  with[1]=r1;\n  with[2]=r2;\n\
      \  with[3]=r3;\n  with[4]=r4;\n  with[5]=r5;\n  with[6]=r6;\n  with[7]=r7;\n\
      \  with[8]=r8;\n  with[9]=r9;\n  return StrReplace(target, replace, with, true);\n\
      }\n\n/** Turn a string to lower case <br />\n    example: 'This Is A String'\
      \ -> 'this is a string' */\nstatic final function string Lower(coerce string\
      \ Text) \n{\n  local int IndexChar;\n  for (IndexChar = 0; IndexChar < Len(Text);\
      \ IndexChar++)\n    if (Mid(Text, IndexChar, 1) >= \"A\" &&\n        Mid(Text,\
      \ IndexChar, 1) <= \"Z\")\n      Text = Left(Text, IndexChar) $ Chr(Asc(Mid(Text,\
      \ IndexChar, 1)) + 32) $ Mid(Text, IndexChar + 1);\n  return Text;\n}\n\n/**\
      \ Checks if a string is all uppercase */\nstatic final function bool IsUpper(coerce\
      \ string S)\n{\n    return S == Caps(S);\n}\n\n/** Checks if a string is all\
      \ lowercase */\nstatic final function bool IsLower(coerce string S)\n{\n   \
      \ return S == Lower(S);\n}\n\n/** Trim leading spaces */\nstatic final function\
      \ string LTrim(coerce string S)\n{\n    while (Left(S, 1) == \" \")\n      \
      \  S = Right(S, Len(S) - 1);\n    return S;\n}\n\n/** Trim trailing spaces */\n\
      static final function string RTrim(coerce string S)\n{\n    while (Right(S,\
      \ 1) == \" \")\n        S = Left(S, Len(S) - 1);\n    return S;\n}\n\n/** Trim\
      \ leading and trailing spaces */\nstatic final function string Trim(coerce string\
      \ S)\n{\n    return LTrim(RTrim(S));\n}\n\n/** Internal function used for MaskedCompare\
      \ */\nstatic private final function bool _match(out string mask, out string\
      \ target)\n{\n  local string m, mp, cp;\n  m = Left(mask, 1);\n  while ((target\
      \ != \"\") && (m != \"*\"))\n  {\n    if ((m != Left(target, 1)) && (m != \"\
      ?\")) return false;\n    mask = Mid(Mask, 1);\n    target = Mid(target, 1);\n\
      \    m = Left(mask, 1);\n  }\n\n  while (target != \"\") \n  {\n    if (m ==\
      \ \"*\") \n    {\n      mask = Mid(Mask, 1);\n      if (mask == \"\") return\
      \ true; // only \"*\" mask -> always true\n      mp = mask;\n      cp = Mid(target,\
      \ 1);\n      m = Left(mask, 1);\n    } \n    else if ((m == Left(target, 1))\
      \ || (m == \"?\")) \n    {\n      mask = Mid(Mask, 1);\n      target = Mid(target,\
      \ 1);\n      m = Left(mask, 1);\n    } \n    else \n    {\n      mask = mp;\n\
      \      m = Left(mask, 1);\n      target = cp;\n      cp = Mid(cp, 1);\n    }\n\
      \  }\n\n  while (Left(mask, 1) == \"*\") \n  {\n    mask = Mid(Mask, 1);\n \
      \ }\n  return (mask == \"\");\n}\n\n/** Compare a string with a mask       \
      \       <br />\n    Wildcards: * = X chars; ? = 1 char        <br />\n    Wildcards\
      \ can appear anywhere in the mask */\nstatic final function bool MaskedCompare(coerce\
      \ string target, string mask, optional bool casesensitive)\n{\n  if (!casesensitive)\n\
      \  {\n    mask = Caps(mask);\n    target = Caps(target);\n  }\n  if (mask ==\
      \ \"*\") return true;\n\n  return _match(mask, target);\n}\n\n/** InStr starting\
      \ from an offset */\nstatic final function int InStrFrom(coerce string StrText,\
      \ coerce string StrPart, optional int OffsetStart)\n{\n  local int OffsetPart;\n\
      \n  OffsetPart = InStr(Mid(StrText, OffsetStart), StrPart);\n  if (OffsetPart\
      \ >= 0)\n    OffsetPart += OffsetStart;\n  return OffsetPart;\n}\n\n/**\n  \
      \ Replace key=value sets: ?key=valye?otherkey=othervalue?...      <br />\n \
      \  Options: the string containing these key=value sets             <br />\n\
      \   Key: the key to replace/add                                     <br />\n\
      \   NewValue: the new value of the Key                              <br />\n\
      \   bAddIfMissing: add the key=value pair if it doesn't exist       <br />\n\
      \   OldValue: this will contain the previous value                  <br />\n\
      \   delim: the delimiter of the key=value pairs, by default: ?      <br />\n\
      */\nstatic final function bool ReplaceOption( out string Options, string Key,\
      \ string NewValue, optional bool bAddIfMissing, optional out string OldValue,\
      \ optional string delim)\n{\n  local array<string> OptionsArray;\n  local int\
      \ i;\n  local string CurrentKey, CurrentValue;\n  local bool bReplaced;\n  bReplaced\
      \ = false;\n\n  if (delim == \"\") delim = \"?\"; // default delim is ?\n  Split2(\
      \ Options, delim, OptionsArray );\n  // find the key\n  for ( i = 0; i < OptionsArray.Length;\
      \ i++ ) {\n    Divide( OptionsArray[i], \"=\", CurrentKey, CurrentValue );\n\
      \n    if ( CurrentKey ~= Key ) {\n      OldValue = CurrentValue;\n      OptionsArray[i]\
      \ = CurrentKey$\"=\"$NewValue;\n      bReplaced = true;\n    }\n  }\n  // add\
      \ if missing\n  if ( !bReplaced && bAddIfMissing ) OptionsArray[OptionsArray.Length]\
      \ = Key$\"=\"$NewValue;\n  // join the strings\n  Options = class'wArray'.static.Join(OptionsArray,\
      \ delim);\n  return bReplaced;\n}\n\n/** Capitalize a string. <br />\n    example:\
      \ 'this is a STRING' -> 'This Is A String' */\nstatic final function string\
      \ Capitalize(coerce string S)\n{\n  local array<string> parts;\n  local int\
      \ i;\n  Split2(s, \" \", parts);\n  for (i = 0; i < parts.length; i++)\n  {\n\
      \    parts[i] = Caps(Left(parts[i], 1))$Lower(Mid(parts[i], 1));\n  }\n  return\
      \ class'wArray'.static.join(parts, \" \");\n}\n\n/**\n   Fixed split method\
      \                        <br />\n   no problems when it starts with a delim\
      \   <br />\n   no problems with ending spaces            <br />\n   delim can\
      \ be a string                     <br />\n*/\nstatic final function int Split2(coerce\
      \ string src, string delim, out array<string> parts, optional bool ignoreEmpty,\
      \ optional string quotechar)\n{\n  local string temp;\n  Parts.Remove(0, Parts.Length);\n\
      \  if (delim == \"\" || Src == \"\" ) return 0;\n  while (src != \"\")\n  {\n\
      \    temp = StrShift(src, delim, quotechar);\n    if (temp == \"\")\n    {\n\
      \      if (!ignoreEmpty)\n      {\n        parts.length = parts.length+1;\n\
      \        parts[parts.length-1] = temp;\n      }\n    }\n    else {\n      parts.length\
      \ = parts.length+1;\n      parts[parts.length-1] = temp;\n    }\n  }\n  return\
      \ parts.length;\n}\n\n/** Replaces part of a string with a new string. <br />\n\
      \    ReplaceInString(\"A stupid string.\", 2, 6, \"good\") == \"A good string.\"\
      \  */\nstatic final function string ReplaceInString(coerce string src, int from,\
      \ int length, coerce string with)\n{\n  return Left(src, from)$with$Mid(src,\
      \ from+length);\n}\n\n/** Moves NUM lements from Source to Dest */\nstatic final\
      \ function Eat(out string Dest, out string Source, int Num)\n{\n  Dest = Dest\
      \ $ Left(Source, Num);\n  Source = Mid(Source, Num);\n}\n\n/** Converts a float\
      \ to a string representation */\nstatic final function string FloatToString(float\
      \ Value, optional int Precision)\n{\n  local int IntPart;\n  local float FloatPart;\n\
      \  local string IntString, FloatString;\n  \n  Precision = Max(Precision, 1);\
      \  // otherwise a simple int cast should be used\n  \n  if ( Value < 0 ) {\n\
      \    IntString = \"-\";\n    Value *= -1;\n  }\n  IntPart = int(Value);\n  FloatPart\
      \ = Value - IntPart;\n  IntString = IntString $ string(IntPart);\n  FloatString\
      \ = string(int(FloatPart * 10 ** Precision));\n  while (Len(FloatString) < Precision)\n\
      \    FloatString = \"0\" $ FloatString;\n  \n  return IntString$\".\"$FloatString;\n\
      }\n\nfunction static string AlignLeft(coerce string line, int length, optional\
      \ string padchar)\n{\n  local int i;\n  if (padchar == \"\") padchar = \" \"\
      ;\n  i = length-Len(line);\n  while (i > 0)\n  {\n    line = line$padchar;\n\
      \    i--;\n  }\n  if (i < 0) line = Left(line, length);\n  return line;\n}\n\
      \nfunction static string AlignRight(coerce string line, int length, optional\
      \ string padchar)\n{\n  local int i;\n  if (padchar == \"\") padchar = \" \"\
      ;\n  i = length-Len(line);\n  while (i > 0)\n  {\n    line = padchar$line;\n\
      \    i--;\n  }\n  if (i < 0) line = Right(line, length);\n  return line;\n}\n\
      \nfunction static string AlignCenter(coerce string line, int length, optional\
      \ string padchar)\n{\n  local int i, j;\n  if (padchar == \"\") padchar = \"\
      \ \";\n  i = Len(line)/2;\n  j = Len(line)-i;\n  return AlignRight(Left(line,\
      \ i), length-(length/2), padchar)$AlignLeft(Right(line, j), length/2, padchar);\n\
      }\n</uscript>\n\n[[Category:Legacy Custom Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 9567
name: "Legacy:WUtils/WString"
revision:
  revid: 9567
  parentid: 9568
  user: "Xian"
  timestamp: 1204033766.000000000
  comment: "Ah...grr, you're right... deleted :)"
timestamp: 1668772859.935260000
