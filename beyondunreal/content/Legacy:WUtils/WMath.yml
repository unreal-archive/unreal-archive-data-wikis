---
parse:
  title: "Legacy:WUtils/WMath"
  text:
    text: "<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">// filename:    wMath.uc</span>\n<span class=\"co1\">//\
      \ revision:    102</span>\n<span class=\"co1\">// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)</span>\n<span class=\"co1\">//    \
      \          http://wiki.beyondunreal.com/WUtils</span>\n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      \ \n<span class=\"kw1\">class</span> wMath <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Object</span>;\n \n<span class=\"coMULTI\">/** Checks\
      \ if a string is numeric */</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> IsNumeric<span class=\"br0\">(</span><span class=\"kw1\">coerce</span>\
      \ <span class=\"kw5\">string</span> Param, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">bool</span> bPositiveOnly, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">bool</span> bNoFloat<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> p;\n \n  p<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;\n\
      \  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span class=\"\
      kw3\">Mid</span><span class=\"br0\">(</span>Param, p, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"\
      \ \"</span><span class=\"br0\">)</span> p<span class=\"sy0\">++</span>;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bPositiveOnly<span\
      \ class=\"br0\">)</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Param, p, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span\
      \ class=\"st0\">\"-\"</span><span class=\"br0\">)</span> p<span class=\"sy0\"\
      >++</span>;\n  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Param, p, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span>\
      \ <span class=\"st0\">\"0\"</span> <span class=\"sy0\">&amp;&amp;</span> <span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Param, p, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span>\
      \ <span class=\"st0\">\"9\"</span> <span class=\"sy0\">||</span> <span class=\"\
      br0\">(</span><span class=\"sy0\">!</span>bNoFloat <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>Param, p, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span> p<span class=\"sy0\">++</span>;\n  <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">Mid</span><span class=\"br0\"\
      >(</span>Param, p, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"st0\">\" \"</span><span class=\"\
      br0\">)</span> p<span class=\"sy0\">++</span>;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">Mid</span><span class=\"br0\"\
      >(</span>Param, p<span class=\"br0\">)</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> <span class=\"kw6\">false</span>;\n  <span class=\"kw2\"\
      >return</span> <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/** Check if a string is an int */</span>\n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> IsInt<span class=\"br0\"\
      >(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ Param, <span class=\"kw1\">optional</span> <span class=\"kw5\">bool</span>\
      \ bPositiveOnly<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> IsNumeric<span class=\"br0\">(</span>param,\
      \ bPositiveOnly, <span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** Check if a string\
      \ is an float (example: '3.14' -&gt; true '3' -&gt; true); */</span>\n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> IsFloat<span class=\"\
      br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ Param, <span class=\"kw1\">optional</span> <span class=\"kw5\">bool</span>\
      \ bPositiveOnly<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> IsNumeric<span class=\"br0\">(</span>param,\
      \ bPositiveOnly, <span class=\"kw6\">false</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/* Michaeel's CRC32\
      \ code\n   http//wiki.beyondunreal.com/wiki/CRC32 */</span>\n \n<span class=\"\
      coMULTI\">/** This function needs to be called the first time you want to use\
      \ CRC32 */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> CRC32Init<span class=\"br0\">(</span><span\
      \ class=\"kw1\">out</span> <span class=\"kw5\">int</span> CrcTable<span class=\"\
      br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >const</span> CrcPolynomial <span class=\"sy0\">=</span> 0xedb88320;\n \n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> CrcValue;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> IndexBit;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> IndexEntry;\n \n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>IndexEntry <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>; IndexEntry <span class=\"\
      sy0\">&lt;</span> <span class=\"nu0\">256</span>; IndexEntry<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span> \n  <span class=\"br0\">{</span>\n  \
      \  CrcValue <span class=\"sy0\">=</span> IndexEntry;\n \n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>IndexBit <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">8</span>; IndexBit <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">0</span>; IndexBit<span class=\"sy0\">--</span><span class=\"\
      br0\">)</span>\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>CrcValue <span class=\"sy0\">&amp;</span> <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n        CrcValue <span\
      \ class=\"sy0\">=</span> <span class=\"br0\">(</span>CrcValue <span class=\"\
      sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">^</span> CrcPolynomial;\n      <span class=\"kw2\">else</span>\n\
      \        CrcValue <span class=\"sy0\">=</span> CrcValue <span class=\"sy0\"\
      >&gt;&gt;&gt;</span> <span class=\"nu0\">1</span>;\n \n    CrcTable<span class=\"\
      br0\">[</span>IndexEntry<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ CrcValue;\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/** Calculate the CRC32 checksum of Text */</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">int</span> CRC32<span class=\"br0\"\
      >(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ Text, <span class=\"kw5\">int</span> CrcTable<span class=\"br0\">[</span><span\
      \ class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\
      \ \n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> CrcValue;\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> IndexChar;\n \n  CrcValue <span class=\"sy0\">=</span> 0xffffffff;\n\
      \ \n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>IndexChar <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>; IndexChar <span class=\"\
      sy0\">&lt;</span> <span class=\"kw3\">Len</span><span class=\"br0\">(</span>Text<span\
      \ class=\"br0\">)</span>; IndexChar<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n    CrcValue <span class=\"sy0\">=</span> <span class=\"br0\"\
      >(</span>CrcValue <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\"\
      >8</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> CrcTable<span\
      \ class=\"br0\">[</span><span class=\"kw3\">Asc</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Mid</span><span class=\"br0\">(</span>Text, IndexChar, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">^</span> <span class=\"br0\">(</span>CrcValue <span class=\"\
      sy0\">&amp;</span> 0xff<span class=\"br0\">)</span><span class=\"br0\">]</span>;\n\
      \ \n  <span class=\"kw2\">return</span> CrcValue;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/** Calculate: C^D mod N */</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> PowerMod<span class=\"br0\">(</span><span class=\"\
      kw5\">int</span> C, <span class=\"kw5\">int</span> D, <span class=\"kw5\">int</span>\
      \ N<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">int</span> f, g, j;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> D <span class=\"sy0\">%</span>\
      \ <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span> \n  <span class=\"br0\">{</span>\n\
      \    G <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;\n    <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">1</span>; j <span class=\"sy0\">&lt;=</span> D<span\
      \ class=\"sy0\">/</span><span class=\"nu0\">2</span>; j<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n      F <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>C<span class=\"sy0\">*</span>C<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">%</span> N;\n      G <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>F<span class=\"sy0\">*</span>G<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">%</span> N;\n    <span class=\"\
      br0\">}</span>  \n  <span class=\"br0\">}</span> \n  <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n    G <span class=\"sy0\">=</span> C;\n    <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">1</span>; j <span class=\"sy0\">&lt;=</span> D<span\
      \ class=\"sy0\">/</span><span class=\"nu0\">2</span>; j<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n      F <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>C<span class=\"sy0\">*</span>C<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">%</span> N;\n      G <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>F<span class=\"sy0\">*</span>G<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">%</span> N;\n    <span class=\"\
      br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ g;\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/* RSA Encode\\\
      Decode methods\n   Written by El Muerte\n   http//wiki.beyondunreal.com/wiki/RSA\
      \ */</span>\n \n<span class=\"coMULTI\">/** Calculate Greatest Common Divider\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">private</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">int</span> _RSAGCD<span class=\"br0\">(</span><span class=\"\
      kw5\">int</span> e, <span class=\"kw5\">int</span> PHI<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> great, a;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>e <span class=\"sy0\">&gt;</span> PHI<span class=\"br0\">)</span> \n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">while</span> <span\
      \ class=\"br0\">(</span>e<span class=\"sy0\">%</span>PHI <span class=\"sy0\"\
      >!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n    <span\
      \ class=\"br0\">{</span>\n      a <span class=\"sy0\">=</span> e<span class=\"\
      sy0\">%</span>PHI;\n      e <span class=\"sy0\">=</span> PHI;\n      PHI <span\
      \ class=\"sy0\">=</span> a;\n    <span class=\"br0\">}</span>\n    great <span\
      \ class=\"sy0\">=</span> PHI;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">else</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span>PHI<span class=\"sy0\">%</span>e <span class=\"\
      sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n\
      \    <span class=\"br0\">{</span>\n      a <span class=\"sy0\">=</span> PHI<span\
      \ class=\"sy0\">%</span>e;\n      PHI <span class=\"sy0\">=</span> e;\n    \
      \  e <span class=\"sy0\">=</span> a;\n    <span class=\"br0\">}</span>\n   \
      \ great <span class=\"sy0\">=</span> e;\n  <span class=\"br0\">}</span>\n  <span\
      \ class=\"kw2\">return</span> great;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"coMULTI\">/** Used to calculate the public key E          &lt;br /&gt;\n\
      \    P and Q are primes, P!=Q                    &lt;br /&gt;\n    You need\
      \ N=P*Q and E to encrYpt the message  */</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">int</span> RSAPublicKeygen<span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> p, <span class=\"kw5\">int</span> q<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> PHI, E, great;\n  PHI <span class=\"sy0\">=</span>\
      \ <span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"\
      br0\">(</span>q<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  great <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>;\n  E <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>;\n\
      \  <span class=\"kw2\">while</span> <span class=\"br0\">(</span>great <span\
      \ class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    E <span class=\"sy0\">=</span> E<span class=\"\
      sy0\">+</span><span class=\"nu0\">1</span>;\n    great <span class=\"sy0\">=</span>\
      \ _RSAGCD<span class=\"br0\">(</span>E, PHI<span class=\"br0\">)</span>;\n \
      \ <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> E;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/** PrivateKey is inverse\
      \ of the Public key E.\n    You need this key (and N) to decrypt the message\
      \ */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">int</span> RSAPrivateKeygen<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> E, <span class=\"kw5\"\
      >int</span> p, <span class=\"kw5\">int</span> q<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> PHI, u1, u2, u3, v1, v2, v3, t1, t2, t3, z;\n  PHI <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span\
      \ class=\"br0\">(</span>q<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  u1 <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>;\n  u2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \  u3 <span class=\"sy0\">=</span> PHI;\n  v1 <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0</span>;\n  v2 <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>;\n  v3 <span class=\"sy0\">=</span> E;\n  <span class=\"kw2\"\
      >while</span> <span class=\"br0\">(</span>v3 <span class=\"sy0\">!=</span> <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span> \n  <span class=\"br0\"\
      >{</span>\n     z <span class=\"sy0\">=</span> u3<span class=\"sy0\">/</span>v3;\n\
      \     t1 <span class=\"sy0\">=</span> u1<span class=\"sy0\">-</span>z<span class=\"\
      sy0\">*</span>v1;\n     t2 <span class=\"sy0\">=</span> u2<span class=\"sy0\"\
      >-</span>z<span class=\"sy0\">*</span>v2;\n     t3 <span class=\"sy0\">=</span>\
      \ u3<span class=\"sy0\">-</span>z<span class=\"sy0\">*</span>v3;\n     u1 <span\
      \ class=\"sy0\">=</span> v1;\n     u2 <span class=\"sy0\">=</span> v2;\n   \
      \  u3 <span class=\"sy0\">=</span> v3;\n     v1 <span class=\"sy0\">=</span>\
      \ t1;\n     v2 <span class=\"sy0\">=</span> t2;\n     v3 <span class=\"sy0\"\
      >=</span> t3;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>u2 <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span> \n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">return</span> u2 <span class=\"sy0\">+</span> PHI;\n\
      \  <span class=\"br0\">}</span> \n  <span class=\"kw2\">else</span> <span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">return</span> u2;\n  <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> RSAEncode<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> data, <span class=\"kw5\">int</span> E, <span class=\"kw5\">int</span>\
      \ N, <span class=\"kw1\">out</span> array<span class=\"sy0\">&lt;</span>int<span\
      \ class=\"sy0\">&gt;</span> data2<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i, c;\n  data2.<span class=\"me0\">length</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">len</span><span class=\"br0\">(</span>data<span class=\"\
      br0\">)</span>;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> <span class=\"kw3\">len</span><span class=\"br0\">(</span>data<span\
      \ class=\"br0\">)</span>; i<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n  <span class=\"br0\">{</span>\n    c <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Asc</span><span class=\"br0\">(</span><span class=\"kw3\"\
      >Mid</span><span class=\"br0\">(</span>data,i,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n    data2<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> PowerMod<span\
      \ class=\"br0\">(</span>c,E,N<span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">string</span> RSADecode<span class=\"br0\">(</span>array<span\
      \ class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> data, <span class=\"\
      kw5\">int</span> D, <span class=\"kw5\">int</span> N<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i, C;\n  <span class=\"kw1\">local</span> <span class=\"kw5\"\
      >string</span> result;\n  <span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span\
      \ class=\"sy0\">&lt;</span> data.<span class=\"me0\">length</span>; i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    c <span class=\"sy0\">=</span> data<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>;\n    result <span class=\"sy0\">=</span> result<span class=\"\
      sy0\">$</span>chr<span class=\"br0\">(</span>PowerMod<span class=\"br0\">(</span>c,D,N<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">return</span> result;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<hr />\n<h2><span class=\"mw-headline\" id=\"\
      Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:WUtils/WMath?section=1\" title=\"Edit section:\
      \ Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> here's a few I've used that you might want to add:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">float</span> Sgn<span class=\"br0\">(</span> <span class=\"\
      kw5\">float</span> theValue <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n<span class=\"kw2\">if</span><span class=\"br0\">(</span> theValue\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"\
      br0\">)</span>\n\t<span class=\"kw2\">return</span> <span class=\"nu0\">0</span>;\n\
      <span class=\"kw2\">return</span> theValue <span class=\"sy0\">/</span> <span\
      \ class=\"kw3\">Abs</span><span class=\"br0\">(</span>theValue<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n<span class=\"co1\">// function\
      \ modulo</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"\
      nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw5\">float</span>\
      \ mod  <span class=\"br0\">(</span> <span class=\"kw5\">float</span> A, <span\
      \ class=\"kw5\">float</span> B <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw2\">if</span><span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">%</span> B <span class=\"sy0\">&gt;=</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span>\
      \ A <span class=\"sy0\">%</span> B ;\n\t<span class=\"kw2\">else</span>\n\t\t\
      <span class=\"kw2\">return</span> <span class=\"br0\">(</span> A <span class=\"\
      sy0\">%</span> B <span class=\"br0\">)</span> <span class=\"sy0\">+</span> B\
      \ ;\n<span class=\"br0\">}</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span>\
      \ divides <span class=\"br0\">(</span> <span class=\"kw5\">float</span> A ,\
      \ <span class=\"kw5\">float</span> B <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"co1\">//local float quotient ;</span>\n\t<span\
      \ class=\"co1\">//quotient = B / A ;</span>\n\t<span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">int</span><span class=\"br0\">(</span>\
      \ B <span class=\"sy0\">/</span> A <span class=\"br0\">)</span> <span class=\"\
      sy0\">==</span> B <span class=\"sy0\">/</span> A <span class=\"br0\">)</span>\n\
      \t\t<span class=\"kw2\">return</span> <span class=\"kw6\">true</span> ;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.097 seconds\nReal time usage: 0.411 seconds\nPreprocessor\
      \ visited node count: 15/1000000\nPreprocessor generated node count: 56/1000000\n\
      Post‐expand include size: 12/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3776-0!*!*!*!*!*!*\
      \ and timestamp 20221118120111 and revision id 9565\n -->\n"
  categories:
  - sortkey: "WUtils/WMath"
    name: "Legacy_Custom_Class_(UT2004)"
  links: []
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "1"
    index: "1"
    fromtitle: "Legacy:WUtils/WMath"
    byteoffset: 4500
    anchor: "Comments"
  displaytitle: "Legacy:WUtils/WMath"
  iwlinks: []
  wikitext:
    text: "<uscript>\n///////////////////////////////////////////////////////////////////////////////\n\
      // filename:    wMath.uc\n// revision:    102\n// authors:     various UnrealWiki\
      \ members (http://wiki.beyondunreal.com)\n//              http://wiki.beyondunreal.com/WUtils\n\
      ///////////////////////////////////////////////////////////////////////////////\n\
      \nclass wMath extends Object;\n\n/** Checks if a string is numeric */\nstatic\
      \ final function bool IsNumeric(coerce string Param, optional bool bPositiveOnly,\
      \ optional bool bNoFloat)\n{\n  local int p;\n\n  p=0;\n  while (Mid(Param,\
      \ p, 1) == \" \") p++;\n  if (!bPositiveOnly) if (Mid(Param, p, 1) == \"-\"\
      ) p++;\n  while (Mid(Param, p, 1) >= \"0\" && Mid(Param, p, 1) <= \"9\" || (!bNoFloat\
      \ && Mid(Param, p, 1) == \".\")) p++;\n  while (Mid(Param, p, 1) == \" \") p++;\n\
      \  if (Mid(Param, p) != \"\") return false;\n  return true;\n}\n\n/** Check\
      \ if a string is an int */\nstatic final function bool IsInt(coerce string Param,\
      \ optional bool bPositiveOnly)\n{\n  return IsNumeric(param, bPositiveOnly,\
      \ true);\n}\n\n/** Check if a string is an float (example: '3.14' -> true '3'\
      \ -> true); */\nstatic final function bool IsFloat(coerce string Param, optional\
      \ bool bPositiveOnly)\n{\n  return IsNumeric(param, bPositiveOnly, false);\n\
      }\n\n/* Michaeel's CRC32 code\n   http//wiki.beyondunreal.com/wiki/CRC32 */\n\
      \n/** This function needs to be called the first time you want to use CRC32\
      \ */\nstatic final function CRC32Init(out int CrcTable[256]) \n{\n  const CrcPolynomial\
      \ = 0xedb88320;\n\n  local int CrcValue;\n  local int IndexBit;\n  local int\
      \ IndexEntry;\n  \n  for (IndexEntry = 0; IndexEntry < 256; IndexEntry++) \n\
      \  {\n    CrcValue = IndexEntry;\n\n    for (IndexBit = 8; IndexBit > 0; IndexBit--)\n\
      \      if ((CrcValue & 1) != 0)\n        CrcValue = (CrcValue >>> 1) ^ CrcPolynomial;\n\
      \      else\n        CrcValue = CrcValue >>> 1;\n    \n    CrcTable[IndexEntry]\
      \ = CrcValue;\n  }\n}\n\n/** Calculate the CRC32 checksum of Text */\nstatic\
      \ final function int CRC32(coerce string Text, int CrcTable[256]) \n{\n  local\
      \ int CrcValue;\n  local int IndexChar;\n  \n  CrcValue = 0xffffffff;\n  \n\
      \  for (IndexChar = 0; IndexChar < Len(Text); IndexChar++)\n    CrcValue = (CrcValue\
      \ >>> 8) ^ CrcTable[Asc(Mid(Text, IndexChar, 1)) ^ (CrcValue & 0xff)];\n\n \
      \ return CrcValue;\n}\n\n/** Calculate: C^D mod N */\nstatic final function\
      \ int PowerMod(int C, int D, int N)\n{\n  local int f, g, j;\n  if ( D % 2 ==\
      \ 0) \n  {\n    G = 1;\n    for (j = 1; j <= D/2; j++) \n    {\n      F = (C*C)\
      \ % N;\n      G = (F*G) % N;\n    }  \n  } \n  else {\n    G = C;\n    for (j\
      \ = 1; j <= D/2; j++) \n    {\n      F = (C*C) % N;\n      G = (F*G) % N;\n\
      \    }\n  }\n  return g;\n}\n\n/* RSA Encode\\Decode methods\n   Written by\
      \ El Muerte\n   http//wiki.beyondunreal.com/wiki/RSA */\n\n/** Calculate Greatest\
      \ Common Divider */\nstatic final private function int _RSAGCD(int e, int PHI)\n\
      {\n  local int great, a;\n  if (e > PHI) \n  {\n    while (e%PHI != 0) \n  \
      \  {\n      a = e%PHI;\n      e = PHI;\n      PHI = a;\n    }\n    great = PHI;\n\
      \  }\n  else {\n    while (PHI%e != 0) \n    {\n      a = PHI%e;\n      PHI\
      \ = e;\n      e = a;\n    }\n    great = e;\n  }\n  return great;\n}\n\n/**\
      \ Used to calculate the public key E          <br />\n    P and Q are primes,\
      \ P!=Q                    <br />\n    You need N=P*Q and E to encrYpt the message\
      \  */\nstatic final function int RSAPublicKeygen(int p, int q)\n{\n  local int\
      \ PHI, E, great;\n  PHI = (p-1)*(q-1);\n  great = 0;\n  E = 2;\n  while (great\
      \ != 1)\n  {\n    E = E+1;\n    great = _RSAGCD(E, PHI);\n  }\n  return E;\n\
      }\n\n/** PrivateKey is inverse of the Public key E.\n    You need this key (and\
      \ N) to decrypt the message */\nstatic final function int RSAPrivateKeygen(int\
      \ E, int p, int q)\n{\n  local int PHI, u1, u2, u3, v1, v2, v3, t1, t2, t3,\
      \ z;\n  PHI = (p-1)*(q-1);\n  u1 = 1;\n  u2 = 0;\n  u3 = PHI;\n  v1 = 0;\n \
      \ v2 = 1;\n  v3 = E;\n  while (v3 != 0) \n  {\n     z = u3/v3;\n     t1 = u1-z*v1;\n\
      \     t2 = u2-z*v2;\n     t3 = u3-z*v3;\n     u1 = v1;\n     u2 = v2;\n    \
      \ u3 = v3;\n     v1 = t1;\n     v2 = t2;\n     v3 = t3;\n  }\n  if (u2 < 0)\
      \ \n  {\n    return u2 + PHI;\n  } \n  else {\n    return u2;\n  }\n}\n\nstatic\
      \ final function RSAEncode(coerce string data, int E, int N, out array<int>\
      \ data2)\n{\n  local int i, c;\n  data2.length = len(data);\n  for (i = 0; i\
      \ < len(data); i++)\n  {\n    c = Asc(Mid(data,i,1));\n    data2[i] = PowerMod(c,E,N);\n\
      \  }\n}\n\nstatic final function string RSADecode(array<int> data, int D, int\
      \ N)\n{\n  local int i, C;\n  local string result;\n  for (i = 0; i < data.length;\
      \ i++)\n  {\n    c = data[i];\n    result = result$chr(PowerMod(c,D,N));\n \
      \ }\n  return result;\n}\n</uscript>\n\n----\n\n==Comments==\n\n'''Tarquin:'''\
      \ here's a few I've used that you might want to add:\n\n<uscript>\nfunction\
      \ float Sgn( float theValue )\n{\nif( theValue == 0 )\n\treturn 0;\nreturn theValue\
      \ / Abs(theValue);\n}\n// function modulo\nstatic final operator(18) float mod\
      \  ( float A, float B )\n{\n\tif( A % B >= 0 )\n\t\treturn A % B ;\n\telse\n\
      \t\treturn ( A % B ) + B ;\n}\nstatic final operator(24) bool divides ( float\
      \ A , float B )\n{\n\t//local float quotient ;\n\t//quotient = B / A ;\n\tif(\
      \ int( B / A ) == B / A )\n\t\treturn true ;\n}\n\n</uscript>\n[[Category:Legacy\
      \ Custom Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 9565
name: "Legacy:WUtils/WMath"
revision:
  revid: 9565
  parentid: 9566
  user: "Sweavo"
  timestamp: 1195514267.000000000
  comment: "*"
timestamp: 1668772872.203431000
