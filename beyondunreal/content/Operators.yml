---
parse:
  title: "Operators"
  text:
    text: "<p>An <a href=\"http://en.wikipedia.org/wiki/Operator_(programming)\" class=\"\
      extiw\" title=\"wp:Operator (programming)\">operator</a> in <a href=\"/UnrealScript\"\
      \ title=\"UnrealScript\">UnrealScript</a> is a special kind of <a href=\"/Function\"\
      \ title=\"Function\" class=\"mw-redirect\">function</a>. Besides these regular\
      \ operators, UnrealScript also provides a number of special operators.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Operator_declarations\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Operator declarations</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Syntax\"><span class=\"\
      tocnumber\">1.1</span> <span class=\"toctext\">Syntax</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-3\"><a href=\"#Operator_precedence\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Operator precedence</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-4\"><a href=\"#Operator_associativity\"><span\
      \ class=\"tocnumber\">1.3</span> <span class=\"toctext\">Operator associativity</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Special_operators\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Special operators</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Assignment_operator\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Assignment operator</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Struct_comparison_operators\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Struct comparison\
      \ operators</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"\
      #Conditional_operator\"><span class=\"tocnumber\">2.3</span> <span class=\"\
      toctext\">Conditional operator</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"\
      ><a href=\"#New_operator\"><span class=\"tocnumber\">2.4</span> <span class=\"\
      toctext\">New operator</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Operator_declarations\">Operator declarations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Operators?section=1\" title=\"Edit section: Operator declarations\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Most\
      \ of the operators in UnrealScript are declared in the <a href=\"/Object\" title=\"\
      Object\">Object</a> class. Only a few <a href=\"#Special_operators\">special\
      \ operators</a> are hard-coded in the compiler.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Syntax\">Syntax</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Operators?section=2\" title=\"Edit section: Syntax\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>There\
      \ are three types of regular operators in UnrealScript.</p>\n<ul>\n<li>infix\
      \ operators (<code>a + b</code>):</li>\n</ul>\n<pre><i><a href=\"/Function#Modifiers\"\
      \ title=\"Function\" class=\"mw-redirect\">[modifiers]</a></i> <b>operator(</b><i>precedence</i><b>)</b>\
      \ <i><a href=\"/Types\" title=\"Types\">[returntype]</a></i> <i>operatorname</i>\
      \ <b>(</b> <i><a href=\"/Function#Parameters\" title=\"Function\" class=\"mw-redirect\"\
      >left operand</a></i>, <i><a href=\"/Function#Parameters\" title=\"Function\"\
      \ class=\"mw-redirect\">right operand</a></i> <b>)</b> <i>body_or_semicolon</i>\n\
      </pre>\n<ul>\n<li>prefix operators (<code>-x</code>):</li>\n</ul>\n<pre><i><a\
      \ href=\"/Function#Modifiers\" title=\"Function\" class=\"mw-redirect\">[modifiers]</a></i>\
      \ <b>preoperator</b> <i><a href=\"/Types\" title=\"Types\">[returntype]</a></i>\
      \ <i>operatorname</i> <b>(</b> <i><a href=\"/Function#Parameters\" title=\"\
      Function\" class=\"mw-redirect\">operand</a></i> <b>)</b> <i>body_or_semicolon</i>\n\
      </pre>\n<ul>\n<li>postfix operators (<code>i++</code>):</li>\n</ul>\n<pre><i><a\
      \ href=\"/Function#Modifiers\" title=\"Function\" class=\"mw-redirect\">[modifiers]</a></i>\
      \ <b>postoperator</b> <i><a href=\"/Types\" title=\"Types\">[returntype]</a></i>\
      \ <i>operatorname</i> <b>(</b> <i><a href=\"/Function#Parameters\" title=\"\
      Function\" class=\"mw-redirect\">operand</a></i> <b>)</b> <i>body_or_semicolon</i>\n\
      </pre>\n<p>Infix operators always have two operands, while prefix and postfix\
      \ operators have exactly one operand. All operator declarations must include\
      \ the modifier <i>final</i>. The operator name can either be a single symbol\
      \ character (<code>^</code>, <code>!</code>, <code>$</code>, <code>%</code>,\
      \ <code>&amp;</code>, <code>/</code>, <code>?</code>, <code>*</code>, <code>+</code>,\
      \ <code>~</code>, <code>@</code>, <code>-</code>, <code>&gt;</code>, <code>&lt;</code>,\
      \ <code>|</code>), a symbol combination (<code>!=</code>, <code>$=</code>, <code>/=</code>,\
      \ <code>==</code>, <code>@=</code>, <code>+=</code>, <code>*=</code>, <code>~=</code>,\
      \ <code>-=</code>, <code>^^</code>, <code>&amp;&amp;</code>, <code>++</code>,\
      \ <code>**</code>, <code>--</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\
      \ <code>&gt;&gt;&gt;</code>, <code>||</code>) or a standard function name. (examples\
      \ in the engine are <i>dot</i>, <i>cross</i> and <i>clockwisefrom</i>)</p>\n\
      <p>Operators can be overloaded, that means multiple operators with the same\
      \ name or symbol can be defined, as long as they differ in their operand types.\
      \ Overloading with identical operand types is not allowed as the engine would\
      \ not be able to distinguish between the definitions.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Operator_precedence\">Operator precedence</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Operators?section=3\"\
      \ title=\"Edit section: Operator precedence\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Operator precedence controls, how tightly an operator\
      \ binds its operands. A precedence value can only be specified for infix operators\
      \ (pre/postfix operators bind as tightly as possible), with lower numbers binding\
      \ more tightly. For example, <code>*</code> has a precedence of 16, while <code>+</code>\
      \ has 20. That means <code>*</code> binds more tightly than <code>+</code>,\
      \ so <code>a * b + c * d</code> is evaluated as <code>(a * b) + (c * d)</code>.\
      \ It is possible to define different precedence values for overloaded operators.\
      \ For example the <code>-=</code> operator as combined subtract and assign for\
      \ numeric values has a precedence of 34, while the <code>-=</code> operator\
      \ for removing occurrences of a string in another string has a precedence of\
      \ 45.</p>\n<p>The following table lists the operator precedence for the default\
      \ operators defined across the various engine versions. Operators further up\
      \ in the table bind more tightly.</p>\n<table>\n<tr>\n<th>Precedence</th>\n\
      <th>Operators</th>\n<th>Notes</th>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n\
      <td><code>**</code></td>\n<td><a href=\"http://en.wikipedia.org/wiki/exponentiation\"\
      \ class=\"extiw\" title=\"wp:exponentiation\">exponentiation</a></td>\n</tr>\n\
      <tr>\n<td align=\"center\">16</td>\n<td><code>*</code>, <code>/</code>, <code>Dot</code>,\
      \ <code>Cross</code></td>\n<td>multiplication, division, <a href=\"http://en.wikipedia.org/wiki/dot_product\"\
      \ class=\"extiw\" title=\"wp:dot product\">dot product</a>, <a href=\"http://en.wikipedia.org/wiki/cross_product\"\
      \ class=\"extiw\" title=\"wp:cross product\">cross product</a></td>\n</tr>\n\
      <tr>\n<td align=\"center\">18</td>\n<td><code>%</code></td>\n<td><a href=\"\
      http://en.wikipedia.org/wiki/modulo_operation\" class=\"extiw\" title=\"wp:modulo\
      \ operation\">modulo operation</a></td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n\
      <td><code>+</code>, <code>-</code></td>\n<td>addition, subtraction</td>\n</tr>\n\
      <tr>\n<td align=\"center\">22</td>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\
      \ <code>&gt;&gt;&gt;</code></td>\n<td><a href=\"http://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts\"\
      \ class=\"extiw\" title=\"wp:Bitwise operation\">bit shifting</a>, <a href=\"\
      /Vector\" title=\"Vector\">vector</a> transformation</td>\n</tr>\n<tr>\n<td\
      \ align=\"center\">24</td>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>,\
      \ <code>&gt;=</code>, <code>==</code>, <code>~=</code>, <code>ClockwiseFrom</code></td>\n\
      <td>comparison</td>\n</tr>\n<tr>\n<td align=\"center\">26</td>\n<td><code>!=</code></td>\n\
      <td>inequality</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td><code>&amp;</code>,\
      \ <code>|</code>, <code>^</code></td>\n<td><a href=\"http://en.wikipedia.org/wiki/Bitwise_operation\"\
      \ class=\"extiw\" title=\"wp:Bitwise operation\">bitwise AND, OR and XOR</a></td>\n\
      </tr>\n<tr>\n<td align=\"center\">30</td>\n<td><code>&amp;&amp;</code>, <code>^^</code></td>\n\
      <td>logical <a href=\"http://en.wikipedia.org/wiki/Logical_conjunction\" class=\"\
      extiw\" title=\"wp:Logical conjunction\">AND</a> and <a href=\"http://en.wikipedia.org/wiki/XOR\"\
      \ class=\"extiw\" title=\"wp:XOR\">XOR</a></td>\n</tr>\n<tr>\n<td align=\"center\"\
      >32</td>\n<td><code>||</code></td>\n<td>logical <a href=\"http://en.wikipedia.org/wiki/Logical_disjunction\"\
      \ class=\"extiw\" title=\"wp:Logical disjunction\">OR</a></td>\n</tr>\n<tr>\n\
      <td align=\"center\">34</td>\n<td><code>+=</code>, <code>-=</code>, <code>*=</code>,\
      \ <code>/=</code></td>\n<td>combined arithmetic assignment</td>\n</tr>\n<tr>\n\
      <td align=\"center\">40</td>\n<td><code>$</code>, <code>@</code></td>\n<td><a\
      \ href=\"/String\" title=\"String\">string</a> <a href=\"http://en.wikipedia.org/wiki/concatenation\"\
      \ class=\"extiw\" title=\"wp:concatenation\">concatenation</a></td>\n</tr>\n\
      <tr>\n<td align=\"center\">44</td>\n<td><code>$=</code>, <code>@=</code></td>\n\
      <td>combined concatenation and assignment</td>\n</tr>\n<tr>\n<td align=\"center\"\
      >45</td>\n<td><code>-=</code></td>\n<td>substring removal</td>\n</tr>\n<tr>\n\
      <td align=\"center\">-</td>\n<td><code>=</code></td>\n<td><a href=\"#Assignment_operator\"\
      >assignment</a></td>\n</tr>\n</table>\n<p>Note that string operations, bitwise\
      \ integer operations and logical AND, OR and XOR bind less tightly than comparison\
      \ operators. See Object operators<sup>(<span><a href=\"/UE1:Object_operators_(RTNP)\"\
      \ title=\"UE1:Object operators (RTNP)\">RTNP</a></span>, <span><a href=\"/UE1:Object_operators_(U1)\"\
      \ title=\"UE1:Object operators (U1)\">U1</a></span>, <span><a href=\"/UE1:Object_operators_(UT)\"\
      \ title=\"UE1:Object operators (UT)\">UT</a></span>, <span><a href=\"/UE2:Object_operators_(U2)\"\
      \ title=\"UE2:Object operators (U2)\">U2</a></span>, <span><a href=\"/UE2:Object_operators_(U2XMP)\"\
      \ title=\"UE2:Object operators (U2XMP)\">U2XMP</a></span>, <span><a href=\"\
      /UE2:Object_operators_(UE2Runtime)\" title=\"UE2:Object operators (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:Object_operators_(UT2003)\" title=\"\
      UE2:Object operators (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:Object_operators_(UT2004)\"\
      \ title=\"UE2:Object operators (UT2004)\">UT2004</a></span>, <span><a href=\"\
      /UE3:Object_operators_(UDK)\" title=\"UE3:Object operators (UDK)\">UDK</a></span>,\
      \ <span><a href=\"/UE3:Object_operators_(UT3)\" title=\"UE3:Object operators\
      \ (UT3)\">UT3</a></span>)</sup> for detailed descriptions of the operators.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Operator_associativity\">Operator associativity</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Operators?section=4\" title=\"Edit section: Operator associativity\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>To\
      \ make it short, all regular infix operators of the same precedence are <a href=\"\
      http://en.wikipedia.org/wiki/Operator_associativity\" class=\"extiw\" title=\"\
      wp:Operator associativity\">left-associative</a> and there's no way to change\
      \ that. <code>a + b + c + d</code> is always evaluated as <code>((a + b) + c)\
      \ + d</code>. While this doesn't change the general evaluation order of the\
      \ operands, it may have an impact on the type of operation and the result. For\
      \ example, consider the following code:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> u,\
      \ v;\n<span class=\"kw1\">local</span> <span class=\"kw5\">float</span> f, g;\n\
      \ \nu <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> f <span class=\"\
      sy0\">*</span> g;</pre></div>\n</div>\n<p>This code evaluates as <code>(v *\
      \ f) * g</code>, that means both operators are <code>vector * float</code>.\
      \ If this was written as <code>v * (f * g)</code>, the second operator would\
      \ actually be <code>float * float</code>. It doesn't matter much for the result\
      \ in this case, but you will have to keep this effect in mind for <a href=\"\
      /Int\" title=\"Int\" class=\"mw-redirect\">int</a> operations like division\
      \ or bit shifting. For these operations it matters which order you perform the\
      \ operations. For example the expression <code>i / n * n</code> returns the\
      \ largest multiple of n that is less than or equal to i if both variables are\
      \ declared of type int, while <code>i * n / n</code> results in i again.</p>\n\
      <p>You might find the left-associativity counter-intuitive if you want to do\
      \ something like:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw5\">float</span> a, b, c;\n \na <span class=\"\
      sy0\">*=</span> b <span class=\"sy0\">*=</span> c;</pre></div>\n</div>\n<p>This\
      \ won't compile because it's equal to <code>(a *= b) *= c</code> and you cannot\
      \ pass complex expressions into <i>out</i> parameters. What you really want\
      \ is <code>a *= (b *= c);</code>, which requires the parentheses due to left-associativity\
      \ of all operators.</p>\n<h2><span class=\"mw-headline\" id=\"Special_operators\"\
      >Special operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Operators?section=5\" title=\"Edit section: Special\
      \ operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The following operators are not declared anywhere in UnrealScript, they \"\
      simply exist\" and have special behavior that cannot be put in any kind of declaration\
      \ available in the language.</p>\n<h3><span class=\"mw-headline\" id=\"Assignment_operator\"\
      >Assignment operator</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Operators?section=6\" title=\"Edit section: Assignment\
      \ operator\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The assignment operator <code>=</code> implicitly exists for all possible\
      \ data types, except <a href=\"/Static_arrays\" title=\"Static arrays\">static\
      \ arrays</a>. It could informally be described with the following declaration:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">native</span> <span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">operator</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span\
      \ class=\"kw1\">out</span> type variable, type value<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>Note that assignments in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a> do not return any value. Unlike in many other languages where\
      \ you could \"chain\" assignments together, an expression like <code>a = b =\
      \ c;</code> results in a compiler error. Also note that assignment (unlike the\
      \ combined assignment operators declared in the Object class) has the highest\
      \ possible precedence value, so you never need to \"help\" the compiler by putting\
      \ the value to assign (or the variable to assign to) in parentheses.</p>\n<p>The\
      \ assignment operator is the only valid way to alter the length property of\
      \ a <a href=\"/Dynamic_array\" title=\"Dynamic array\" class=\"mw-redirect\"\
      >dynamic array</a>. Using <i>out</i> parameters, including those of the combined\
      \ assignment operators, can cause memory leaks and <a href=\"http://en.wikipedia.org/wiki/General_protection_fault\"\
      \ class=\"extiw\" title=\"wp:General protection fault\">GPF</a> crashes.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Struct_comparison_operators\">Struct comparison\
      \ operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Operators?section=7\" title=\"Edit section: Struct\
      \ comparison operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>If the operators <code>==</code> and <code>!=</code> are not declared for\
      \ the operands' types and both operands are of the same struct type, the hard-coded\
      \ struct (in)equality operators are used. These simply compare the in-memory\
      \ data of the two struct values.</p>\n<p>Note that this type of comparison does\
      \ not work for <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">dynamic\
      \ arrays</a> as struct members, which will always look different unless both\
      \ compared arrays are empty. Also, there is a compiler bug that allows you to\
      \ compare dynamic arrays of structs, while the compiler would throw an error\
      \ if dynamic arrays of any non-struct type are compared. The compiler will apply\
      \ generic struct comparison to the two dynamic array variables, which has the\
      \ same result (equal only if empty) as if the arrays were struct members.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Conditional_operator\">Conditional operator</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Operators?section=8\" title=\"Edit section: Conditional operator\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In\
      \ <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine 3</a>\
      \ and some <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"\
      Unreal Engine 2 (page does not exist)\">Unreal Engine 2</a> games, a special\
      \ ternary operator exists that works similar to the <a href=\"/If...Else_statement\"\
      \ title=\"If...Else statement\" class=\"mw-redirect\">If...Else statement</a>,\
      \ except that it returns a value. The general syntax for this <a href=\"http://en.wikipedia.org/wiki/%3F:\"\
      \ class=\"extiw\" title=\"wp:?:\">conditional operator</a> is:</p>\n<pre><i>condition</i>\
      \ <b>?</b> <i>expression_if_true</i> <b>:</b> <i>expression_if_false</i>\n</pre>\n\
      <p>(Instead of <code>?</code>, you might need to use <code>??</code> in Unreal\
      \ Engine 2 implementations.)</p>\n<p>Like If...Else, this operators first evaluates\
      \ its condition expression and then only evaluates one of the two other expressions,\
      \ depending on the condition. The condition must return a <a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a> value, the return types of the\
      \ other two expressions must match exactly as they are used as the return type\
      \ of the conditional operator. Automatic <a href=\"/Type_conversion\" title=\"\
      Type conversion\" class=\"mw-redirect\">type conversion</a> for numeric values\
      \ does not apply here!</p>\n<h3><span class=\"mw-headline\" id=\"New_operator\"\
      >New operator</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Operators?section=9\" title=\"Edit section: New operator\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The\
      \ special operator <code>new</code> can be used to create non-<a href=\"/Actor\"\
      \ title=\"Actor\">Actor</a> objects. In its simplest form it works like a prefix\
      \ operator, but it can also take additional parameters similar to a <a href=\"\
      /Function_call\" title=\"Function call\" class=\"mw-redirect\">function call</a>.\
      \ The general syntax for using the <code>new</code> operator is as follows:</p>\n\
      <pre><b>new</b> [<b>(</b> [<i>outer</i> [<b>,</b> <i>name</i> [<b>,</b> <i>flags</i>]]]\
      \ <b>)</b>] <i>class</i> [<b>(</b> <i>template</i> <b>)</b>]\n</pre>\n<p>Arguments:</p>\n\
      <dl>\n<dt>outer&#160;</dt>\n<dd>The value for the new object's Outer variable.\
      \ The default value is <code>None</code>, which means the object is created\
      \ within the \"transient package\", a virtual package for runtime objects.<br\
      \ />\nIf the class to create an object from is declared <a href=\"/Within\"\
      \ title=\"Within\" class=\"mw-redirect\">within</a> another class, then the\
      \ <i>outer</i> argument must be an object of that class or a subclass.</dd>\n\
      <dt>name&#160;</dt>\n<dd>The name for the new object. <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a> expects a <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\">name</a>\
      \ value here, but starting with <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> this must be a <a href=\"/String\" title=\"String\">string</a> value.\
      \ Omitting the name or passing \"None\" or the empty string assigns a default\
      \ name consisting of the class name and a number, in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> separated by an underscore character.\
      \ Unreal Engine 2 might not append the number unless the engine was started\
      \ with the commandline parameter <code>-makenames</code>. Specifying the name\
      \ of an existing object of the same class within the same outer object may have\
      \ unexpected results if the existing object is still in use as it will be replaced\
      \ by the new object.</dd>\n<dt>flags&#160;</dt>\n<dd>Specifies object flags\
      \ for the new object. Only use this if you know what you're doing!</dd>\n<dt>class&#160;</dt>\n\
      <dd>The class to create an object of. The specified class must not be <a href=\"\
      /Abstract\" title=\"Abstract\" class=\"mw-redirect\">abstract</a> or extend\
      \ <a href=\"/Actor\" title=\"Actor\">Actor</a>. (Actors must be created with\
      \ the <a href=\"/Spawn()_function\" title=\"Spawn() function\" class=\"mw-redirect\"\
      >Spawn() function</a>.)</dd>\n<dt>template&#160;</dt>\n<dd><i>(only <a href=\"\
      /Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine 3</a>)</i> An object\
      \ whose properties (except those declared in the <a href=\"/Object\" title=\"\
      Object\">Object</a> class) are copied to the new object. The template must be\
      \ of the same class as the new object or of a parent class.</dd>\n</dl>\n<p>Some\
      \ examples for Unreal Engine 3:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> <span class=\"kw8\">Object</span> O;\nO <span\
      \ class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw1\"\
      >class</span><span class=\"st0\">'TestClass'</span>;\nO <span class=\"sy0\"\
      >=</span> <span class=\"kw1\">new</span><span class=\"br0\">(</span><span class=\"\
      kw6\">Self</span><span class=\"br0\">)</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'TestClass'</span>; <span class=\"co1\">// O.Outer == Self</span>\n\
      O <span class=\"sy0\">=</span> <span class=\"kw1\">new</span><span class=\"\
      br0\">(</span><span class=\"kw5\">None</span>, <span class=\"st0\">'ExampleObject'</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'TestClass'</span>; <span class=\"co1\">// O.Name == 'ExampleObject'</span>\n\
      O <span class=\"sy0\">=</span> <span class=\"kw1\">new</span><span class=\"\
      br0\">(</span><span class=\"kw5\">None</span>, <span class=\"st0\">''</span>,\
      \ RF_Transient<span class=\"br0\">)</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'TestClass'</span>; <span class=\"co1\">// makes O transient\
      \ even if TestClass isn't</span>\nO <span class=\"sy0\">=</span> <span class=\"\
      kw1\">new</span><span class=\"br0\">(</span><span class=\"kw5\">None</span>,\
      \ <span class=\"st0\">''</span>, <span class=\"nu0\">0</span><span class=\"\
      br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\">'TestClass'</span>\
      \ <span class=\"br0\">(</span>TestClass<span class=\"st0\">'TemplateObject'</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// duplicates TemplateObject</span></pre></div>\n\
      </div>\n<p>The (compile-time) return type of the <code>new</code> operator corresponds\
      \ to the (compile-time) metatype of the specified class argument:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> class<span\
      \ class=\"sy0\">&lt;</span>WebApplication<span class=\"sy0\">&gt;</span> WA<span\
      \ class=\"re0\">Class</span>&lt; SEMI &gt;\n<span class=\"kw1\">local</span>\
      \ class<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span>\
      \ O<span class=\"re0\">Class</span>&lt; SEMI &gt;\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw8\">Object</span> O;\n<span class=\"kw1\">local</span> <span\
      \ class=\"kw8\">WebApplication</span> WA;\n \nWAClass <span class=\"sy0\">=</span>\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'UTServerAdmin'</span>;\n\
      OClass <span class=\"sy0\">=</span> <span class=\"kw1\">class</span><span class=\"\
      st0\">'UTServerAdmin'</span>;\n \nWA <span class=\"sy0\">=</span> <span class=\"\
      kw1\">new</span> <span class=\"kw1\">class</span><span class=\"st0\">'UTServerAdmin'</span>;\
      \ <span class=\"co1\">// works because UTServerAdmin extends WebApplication</span>\n\
      WA <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> WA<span class=\"\
      re0\">Class</span>&lt; SEMI &gt; <span class=\"co1\">// works because the metaclass\
      \ of WAClass is WebApplication</span>\nO  <span class=\"sy0\">=</span> <span\
      \ class=\"kw1\">new</span> WA<span class=\"re0\">Class</span>&lt; SEMI &gt;\
      \ <span class=\"co1\">// works because WebApplication extends Object</span>\n\
      O  <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> O<span class=\"\
      re0\">Class</span>&lt; SEMI &gt;  <span class=\"co1\">// works because the metaclass\
      \ of OClass is Object</span>\nWA <span class=\"sy0\">=</span> <span class=\"\
      kw1\">new</span> O<span class=\"re0\">Class</span>&lt; SEMI &gt;  <span class=\"\
      co1\">// type mismatch error (Object doesn't extend WebApplication!)</span></pre></div>\n\
      </div>\n<p>Only in <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\"\
      \ title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine 2</a> the newly\
      \ created object receives a call to its <i>Created()</i> function before the\
      \ <code>new</code> operator returns. Other engine generations do not provide\
      \ any generic initialization events.</p>\n<table class=\"navbox nowraplinks\"\
      \ style=\"\">\n<tr class=\"navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\"\
      \ style=\"\">\n<div style=\"position:relative; width:100%; white-space:nowrap;\"\
      >\n<div class=\"noprint plainlinks\" style=\"background-color:transparent; padding:0;\
      \ font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <strong class=\"selflink\">Operators</strong>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.278 seconds\nReal time usage: 0.354 seconds\nPreprocessor\
      \ visited node count: 264/1000000\nPreprocessor generated node count: 1235/1000000\n\
      Post‐expand include size: 11562/2097152 bytes\nTemplate argument size: 4259/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 1/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  169.344      1 - -total\n 53.07%   89.868      1 - Template:Classgames\n\
      \ 11.12%   18.828      1 - Template:Navbox_unrealscript\n  7.87%   13.322  \
      \    1 - Template:Navbox\n  1.92%    3.256      1 - Template:Tnavbar\n  1.12%\
      \    1.899      1 - Template:Extension_DPL\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:28591-0!*!*!*!*!*!* and timestamp 20221117215519\
      \ and revision id 44325\n -->\n"
  categories:
  - sortkey: "Operators"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Abstract"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 106
    exists: true
    name: "UE3:Object operators (UT3)"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Object"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Type conversion"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 104
    exists: true
    name: "UE2:Object operators (UT2003)"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 104
    exists: true
    name: "UE2:Object operators (UT2004)"
  - ns: 102
    exists: true
    name: "UE1:Object operators (U1)"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Function call"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 102
    exists: true
    name: "UE1:Object operators (RTNP)"
  - ns: 0
    exists: true
    name: "Actor"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Spawn() function"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: true
    name: "Function"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 104
    exists: true
    name: "UE2:Object operators (U2)"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 104
    exists: true
    name: "UE2:Object operators (U2XMP)"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: false
    name: "Object operators"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "If...Else statement"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Within"
  - ns: 102
    exists: true
    name: "UE1:Object operators (UT)"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 106
    exists: true
    name: "UE3:Object operators (UDK)"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 104
    exists: true
    name: "UE2:Object operators (UE2Runtime)"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Color"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Classgames"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Extension DPL"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Operator declarations"
    number: "1"
    index: "1"
    fromtitle: "Operators"
    byteoffset: 189
    anchor: "Operator_declarations"
  - toclevel: 2
    level: "3"
    line: "Syntax"
    number: "1.1"
    index: "2"
    fromtitle: "Operators"
    byteoffset: 376
    anchor: "Syntax"
  - toclevel: 2
    level: "3"
    line: "Operator precedence"
    number: "1.2"
    index: "3"
    fromtitle: "Operators"
    byteoffset: 2338
    anchor: "Operator_precedence"
  - toclevel: 2
    level: "3"
    line: "Operator associativity"
    number: "1.3"
    index: "4"
    fromtitle: "Operators"
    byteoffset: 5187
    anchor: "Operator_associativity"
  - toclevel: 1
    level: "2"
    line: "Special operators"
    number: "2"
    index: "5"
    fromtitle: "Operators"
    byteoffset: 6769
    anchor: "Special_operators"
  - toclevel: 2
    level: "3"
    line: "Assignment operator"
    number: "2.1"
    index: "6"
    fromtitle: "Operators"
    byteoffset: 6978
    anchor: "Assignment_operator"
  - toclevel: 2
    level: "3"
    line: "Struct comparison operators"
    number: "2.2"
    index: "7"
    fromtitle: "Operators"
    byteoffset: 8000
    anchor: "Struct_comparison_operators"
  - toclevel: 2
    level: "3"
    line: "Conditional operator"
    number: "2.3"
    index: "8"
    fromtitle: "Operators"
    byteoffset: 8811
    anchor: "Conditional_operator"
  - toclevel: 2
    level: "3"
    line: "New operator"
    number: "2.4"
    index: "9"
    fromtitle: "Operators"
    byteoffset: 9662
    anchor: "New_operator"
  displaytitle: "Operators"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/concatenation"
    name: "wp:concatenation"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/exponentiation"
    name: "wp:exponentiation"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/%3F:"
    name: "wp:?:"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/cross_product"
    name: "wp:cross product"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Bitwise_operation"
    name: "wp:Bitwise operation"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/XOR"
    name: "wp:XOR"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Operator_(programming)"
    name: "wp:Operator (programming)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Logical_disjunction"
    name: "wp:Logical disjunction"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/modulo_operation"
    name: "wp:modulo operation"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/dot_product"
    name: "wp:dot product"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/General_protection_fault"
    name: "wp:General protection fault"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Operator_associativity"
    name: "wp:Operator associativity"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Logical_conjunction"
    name: "wp:Logical conjunction"
  wikitext:
    text: "An [[wp:Operator (programming)|operator]] in [[UnrealScript]] is a special\
      \ kind of [[function]]. Besides these regular operators, UnrealScript also provides\
      \ a number of special operators.\n\n==Operator declarations==\nMost of the operators\
      \ in UnrealScript are declared in the [[Object]] class. Only a few [[#Special\
      \ operators|special operators]] are hard-coded in the compiler.\n\n===Syntax===\n\
      There are three types of regular operators in UnrealScript.\n* infix operators\
      \ (<code>a + b</code>):\n ''[[Function#Modifiers|[modifiers]]]'' '''operator('''''precedence''''')'''\
      \ ''[[types|[returntype]]]'' ''operatorname'' '''(''' ''[[Function#Parameters|left\
      \ operand]]'', ''[[Function#Parameters|right operand]]'' ''')''' ''body_or_semicolon''\n\
      * prefix operators (<code>-x</code>):\n ''[[Function#Modifiers|[modifiers]]]''\
      \ '''preoperator''' ''[[types|[returntype]]]'' ''operatorname'' '''(''' ''[[Function#Parameters|operand]]''\
      \ ''')''' ''body_or_semicolon''\n* postfix operators (<code>i++</code>):\n ''[[Function#Modifiers|[modifiers]]]''\
      \ '''postoperator''' ''[[types|[returntype]]]'' ''operatorname'' '''(''' ''[[Function#Parameters|operand]]''\
      \ ''')''' ''body_or_semicolon''\nInfix operators always have two operands, while\
      \ prefix and postfix operators have exactly one operand. All operator declarations\
      \ must include the modifier ''final''. The operator name can either be a single\
      \ symbol character (<code>^</code>, <code>!</code>, <code>$</code>, <code>%</code>,\
      \ <code>&</code>, <code>/</code>, <code>?</code>, <code>*</code>, <code>+</code>,\
      \ <code>~</code>, <code>@</code>, <code>-</code>, <code>></code>, <code><</code>,\
      \ <code>|</code>), a symbol combination (<code>!=</code>, <code>$=</code>, <code>/=</code>,\
      \ <code>==</code>, <code>@=</code>, <code>+=</code>, <code>*=</code>, <code>~=</code>,\
      \ <code>-=</code>, <code>^^</code>, <code>&&</code>, <code>++</code>, <code>**</code>,\
      \ <code>--</code>, <code><<</code>, <code>>></code>, <code>>>></code>, <code>||</code>)\
      \ or a standard function name. (examples in the engine are ''dot'', ''cross''\
      \ and ''clockwisefrom'')\n\nOperators can be overloaded, that means multiple\
      \ operators with the same name or symbol can be defined, as long as they differ\
      \ in their operand types. Overloading with identical operand types is not allowed\
      \ as the engine would not be able to distinguish between the definitions.\n\n\
      ===Operator precedence===\nOperator precedence controls, how tightly an operator\
      \ binds its operands. A precedence value can only be specified for infix operators\
      \ (pre/postfix operators bind as tightly as possible), with lower numbers binding\
      \ more tightly. For example, <code>*</code> has a precedence of 16, while <code>+</code>\
      \ has 20. That means <code>*</code> binds more tightly than <code>+</code>,\
      \ so <code>a * b + c * d</code> is evaluated as <code>(a * b) + (c * d)</code>.\
      \ It is possible to define different precedence values for overloaded operators.\
      \ For example the <code>-=</code> operator as combined subtract and assign for\
      \ numeric values has a precedence of 34, while the <code>-=</code> operator\
      \ for removing occurrences of a string in another string has a precedence of\
      \ 45.\n\nThe following table lists the operator precedence for the default operators\
      \ defined across the various engine versions. Operators further up in the table\
      \ bind more tightly.\n{|\n! Precedence\n! Operators\n! Notes\n|-\n|align=\"\
      center\"| 12 || <code>**</code> || [[wp:exponentiation|exponentiation]]\n|-\n\
      |align=\"center\"| 16 || <code>*</code>, <code>/</code>, <code>Dot</code>, <code>Cross</code>\
      \ || multiplication, division, [[wp:dot product|dot product]], [[wp:cross product|cross\
      \ product]]\n|-\n|align=\"center\"| 18 || <code>%</code> || [[wp:modulo operation|modulo\
      \ operation]]\n|-\n|align=\"center\"| 20 || <code>+</code>, <code>-</code> ||\
      \ addition, subtraction\n|-\n|align=\"center\"| 22 || <code><<</code>, <code>>></code>,\
      \ <code>>>></code> || [[wp:Bitwise operation#Bit_shifts|bit shifting]], [[vector]]\
      \ transformation\n|-\n|align=\"center\"| 24 || <code><</code>, <code>></code>,\
      \ <code><=</code>, <code>>=</code>, <code>==</code>, <code>~=</code>, <code>ClockwiseFrom</code>\
      \ || comparison\n|-\n|align=\"center\"| 26 || <code>!=</code> || inequality\n\
      |-\n|align=\"center\"| 28 || <code>&</code>, <code>&#124;</code>, <code>^</code>\
      \ || [[wp:Bitwise operation|bitwise AND, OR and XOR]]\n|-\n|align=\"center\"\
      | 30 || <code>&&</code>, <code>^^</code> || logical [[wp:Logical conjunction|AND]]\
      \ and [[wp:XOR|XOR]]\n|-\n|align=\"center\"| 32 || <code>&#124;&#124;</code>\
      \ || logical [[wp:Logical disjunction|OR]]\n|-\n|align=\"center\"| 34 || <code>+=</code>,\
      \ <code>-=</code>, <code>*=</code>, <code>/=</code> || combined arithmetic assignment\n\
      |-\n|align=\"center\"| 40 || <code>$</code>, <code>@</code> || [[string]] [[wp:concatenation|concatenation]]\n\
      |-\n|align=\"center\"| 44 || <code>$=</code>, <code>@=</code> || combined concatenation\
      \ and assignment\n|-\n|align=\"center\"| 45 || <code>-=</code> || substring\
      \ removal\n|-\n|align=\"center\"| - || <code>=</code> || [[#Assignment operator|assignment]]\n\
      |}\nNote that string operations, bitwise integer operations and logical AND,\
      \ OR and XOR bind less tightly than comparison operators. See {{classgames|Object\
      \ operators}} for detailed descriptions of the operators.\n\n===Operator associativity===\n\
      To make it short, all regular infix operators of the same precedence are [[wp:Operator\
      \ associativity|left-associative]] and there's no way to change that. <code>a\
      \ + b + c + d</code> is always evaluated as <code>((a + b) + c) + d</code>.\
      \ While this doesn't change the general evaluation order of the operands, it\
      \ may have an impact on the type of operation and the result. For example, consider\
      \ the following code:\n<uscript>\nlocal vector u, v;\nlocal float f, g;\n\n\
      u = v * f * g;\n</uscript>\nThis code evaluates as <code>(v * f) * g</code>,\
      \ that means both operators are <code>vector * float</code>. If this was written\
      \ as <code>v * (f * g)</code>, the second operator would actually be <code>float\
      \ * float</code>. It doesn't matter much for the result in this case, but you\
      \ will have to keep this effect in mind for [[int]] operations like division\
      \ or bit shifting. For these operations it matters which order you perform the\
      \ operations. For example the expression <code>i / n * n</code> returns the\
      \ largest multiple of n that is less than or equal to i if both variables are\
      \ declared of type int, while <code>i * n / n</code> results in i again.\n\n\
      You might find the left-associativity counter-intuitive if you want to do something\
      \ like:\n<uscript>\nlocal float a, b, c;\n\na *= b *= c;\n</uscript>\nThis won't\
      \ compile because it's equal to <code>(a *= b) *= c</code> and you cannot pass\
      \ complex expressions into ''out'' parameters. What you really want is <code>a\
      \ *= (b *= c);</code>, which requires the parentheses due to left-associativity\
      \ of all operators.\n\n==Special operators==\nThe following operators are not\
      \ declared anywhere in UnrealScript, they \"simply exist\" and have special\
      \ behavior that cannot be put in any kind of declaration available in the language.\n\
      \n===Assignment operator===\nThe assignment operator <code>=</code> implicitly\
      \ exists for all possible data types, except [[static arrays]]. It could informally\
      \ be described with the following declaration:\n<uscript>\nnative static final\
      \ operator(255) = (out type variable, type value);\n</uscript>\nNote that assignments\
      \ in [[UnrealScript]] do not return any value. Unlike in many other languages\
      \ where you could \"chain\" assignments together, an expression like <code>a\
      \ = b = c;</code> results in a compiler error. Also note that assignment (unlike\
      \ the combined assignment operators declared in the Object class) has the highest\
      \ possible precedence value, so you never need to \"help\" the compiler by putting\
      \ the value to assign (or the variable to assign to) in parentheses.\n\nThe\
      \ assignment operator is the only valid way to alter the length property of\
      \ a [[dynamic array]]. Using ''out'' parameters, including those of the combined\
      \ assignment operators, can cause memory leaks and [[wp:General protection fault|GPF]]\
      \ crashes.\n\n===Struct comparison operators===\nIf the operators <code>==</code>\
      \ and <code>!=</code> are not declared for the operands' types and both operands\
      \ are of the same struct type, the hard-coded struct (in)equality operators\
      \ are used. These simply compare the in-memory data of the two struct values.\n\
      \nNote that this type of comparison does not work for [[dynamic arrays]] as\
      \ struct members, which will always look different unless both compared arrays\
      \ are empty. Also, there is a compiler bug that allows you to compare dynamic\
      \ arrays of structs, while the compiler would throw an error if dynamic arrays\
      \ of any non-struct type are compared. The compiler will apply generic struct\
      \ comparison to the two dynamic array variables, which has the same result (equal\
      \ only if empty) as if the arrays were struct members.\n\n===Conditional operator===\n\
      In [[Unreal Engine 3]] and some [[Unreal Engine 2]] games, a special ternary\
      \ operator exists that works similar to the [[If...Else statement]], except\
      \ that it returns a value. The general syntax for this [[wp:?:|conditional operator]]\
      \ is:\n ''condition'' '''?''' ''expression_if_true'' ''':''' ''expression_if_false''\n\
      (Instead of <code>?</code>, you might need to use <code>??</code> in Unreal\
      \ Engine 2 implementations.)\n\nLike If...Else, this operators first evaluates\
      \ its condition expression and then only evaluates one of the two other expressions,\
      \ depending on the condition. The condition must return a [[bool]] value, the\
      \ return types of the other two expressions must match exactly as they are used\
      \ as the return type of the conditional operator. Automatic [[type conversion]]\
      \ for numeric values does not apply here!\n\n===New operator===\nThe special\
      \ operator <code>new</code> can be used to create non-[[Actor]] objects. In\
      \ its simplest form it works like a prefix operator, but it can also take additional\
      \ parameters similar to a [[function call]]. The general syntax for using the\
      \ <code>new</code> operator is as follows:\n '''new''' ['''(''' [''outer'' [''','''\
      \ ''name'' [''',''' ''flags'']]] ''')'''] ''class'' ['''(''' ''template'' ''')''']\n\
      Arguments:\n; outer : The value for the new object's Outer variable. The default\
      \ value is <code>None</code>, which means the object is created within the \"\
      transient package\", a virtual package for runtime objects.<br/>If the class\
      \ to create an object from is declared [[within]] another class, then the ''outer''\
      \ argument must be an object of that class or a subclass.\n; name : The name\
      \ for the new object. [[Unreal Engine 1]] expects a [[name]] value here, but\
      \ starting with [[Unreal Engine 2]] this must be a [[string]] value. Omitting\
      \ the name or passing \"None\" or the empty string assigns a default name consisting\
      \ of the class name and a number, in [[Unreal Engine 3]] separated by an underscore\
      \ character. Unreal Engine 2 might not append the number unless the engine was\
      \ started with the commandline parameter <code>-makenames</code>. Specifying\
      \ the name of an existing object of the same class within the same outer object\
      \ may have unexpected results if the existing object is still in use as it will\
      \ be replaced by the new object.\n; flags : Specifies object flags for the new\
      \ object. Only use this if you know what you're doing!\n; class : The class\
      \ to create an object of. The specified class must not be [[abstract]] or extend\
      \ [[Actor]]. (Actors must be created with the [[Spawn() function]].)\n; template\
      \ : ''(only [[Unreal Engine 3]])'' An object whose properties (except those\
      \ declared in the [[Object]] class) are copied to the new object. The template\
      \ must be of the same class as the new object or of a parent class.\nSome examples\
      \ for Unreal Engine 3:\n<uscript>\nlocal Object O;\nO = new class'TestClass';\n\
      O = new(Self) class'TestClass'; // O.Outer == Self\nO = new(None, 'ExampleObject')\
      \ class'TestClass'; // O.Name == 'ExampleObject'\nO = new(None, '', RF_Transient)\
      \ class'TestClass'; // makes O transient even if TestClass isn't\nO = new(None,\
      \ '', 0) class'TestClass' (TestClass'TemplateObject'); // duplicates TemplateObject\n\
      </uscript>\nThe (compile-time) return type of the <code>new</code> operator\
      \ corresponds to the (compile-time) metatype of the specified class argument:\n\
      <uscript>\nlocal class<WebApplication> WAClass;\nlocal class<Object> OClass;\n\
      local Object O;\nlocal WebApplication WA;\n\nWAClass = class'UTServerAdmin';\n\
      OClass = class'UTServerAdmin';\n\nWA = new class'UTServerAdmin'; // works because\
      \ UTServerAdmin extends WebApplication\nWA = new WAClass; // works because the\
      \ metaclass of WAClass is WebApplication\nO  = new WAClass; // works because\
      \ WebApplication extends Object\nO  = new OClass;  // works because the metaclass\
      \ of OClass is Object\nWA = new OClass;  // type mismatch error (Object doesn't\
      \ extend WebApplication!)\n</uscript>\n\nOnly in [[Unreal Engine 2]] the newly\
      \ created object receives a call to its ''Created()'' function before the <code>new</code>\
      \ operator returns. Other engine generations do not provide any generic initialization\
      \ events.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 44325
name: "Operators"
revision:
  revid: 44325
  parentid: 44322
  user: "Wormbo"
  timestamp: 1299319451.000000000
  comment: "some clarifications here and there"
timestamp: 1668754727.678810000
