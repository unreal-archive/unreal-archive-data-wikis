---
parse:
  title: "Legacy:Dma/Developer Journal"
  text:
    text: "<p>During school assignments, I have been working on several projects.</p>\n\
      <ul>\n<li><a href=\"/Legacy:Dma/JetPack\" title=\"Legacy:Dma/JetPack\">dma/JetPack</a>\
      \ - This will someday be a jet pack that works flawlessly in network play.</li>\n\
      <li><a href=\"/Legacy:Dma/MutMultiJump\" title=\"Legacy:Dma/MutMultiJump\">dma/MutMultiJump</a>\
      \ - This lets the server admin set the number of multijumps to allow.</li>\n\
      <li>More to come if I get the time.</li>\n</ul>\n<p>If you want to find the\
      \ superclass of a class at runtime, you can try this:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">function</span> <span class=\"kw1\">class</span>\
      \ FindSuperClass<span class=\"br0\">(</span><span class=\"kw1\">class</span>\
      \ C<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"\
      kw1\">local</span> <span class=\"kw1\">State</span> obj;\n    <span class=\"\
      kw1\">local</span> <span class=\"kw1\">Class</span> X;\n    <span class=\"kw1\"\
      >local</span> array<span class=\"sy0\">&lt;</span> <span class=\"kw1\">class</span>\
      \ <span class=\"sy0\">&gt;</span> SuperClasses;\n    <span class=\"kw1\">local</span>\
      \ <span class=\"kw1\">Class</span> Best<span class=\"re0\">Class</span>&lt;\
      \ SEMI &gt;\n    <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n \n    <span class=\"kw2\">foreach</span> C.<span class=\"kw3\">AllObjects</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'State'</span>, obj<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \        X <span class=\"sy0\">=</span> <span class=\"kw1\">Class</span><span\
      \ class=\"br0\">(</span>obj<span class=\"br0\">)</span>;\n        <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>X <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>X\
      \ <span class=\"sy0\">!=</span> C<span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"kw3\">ClassIsChildOf</span><span class=\"\
      br0\">(</span>C, X<span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n            SuperClasses<span class=\"br0\">[</span>SuperClasses.<span\
      \ class=\"me0\">Length</span><span class=\"br0\">]</span> <span class=\"sy0\"\
      >=</span> X;\n        <span class=\"br0\">}</span>\n    <span class=\"br0\"\
      >}</span>\n    BestClass <span class=\"sy0\">=</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Object'</span>;\n \n    <span class=\"kw2\">for</span> <span\
      \ class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;\
      \ i<span class=\"sy0\">&lt;</span>SuperClasses.<span class=\"me0\">Length</span>;\
      \ i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">ClassIsChildOf</span><span class=\"br0\">(</span>SuperClasses<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>, BestClass<span class=\"\
      br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  \
      \          BestClass <span class=\"sy0\">=</span> SuperClasses<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n        <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"kw2\">return</span>\
      \ Best<span class=\"re0\">Class</span>&lt; SEMI &gt;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Foxpaw:</b> I'm curious, why does the first loop only look for\
      \ things that are subclasses of \"state?\"</p>\n<p><b>Dma:</b> Because <b>class'Class'</b>\
      \ results in a compiler error and Class is derived from State. This speeds it\
      \ up a bit. The compiler does some special junk on the second argument of AllObjects\
      \ which doesn't like class'Class' as a first argument. It does NOT use Object\
      \ like the prototype says.</p>\n<p><b>Foxpaw:</b> Hmm, that's interesting. Where\
      \ is the class file for class? Or for state? And then why does the engine report\
      \ class variables as a \"classproperty\" (a primitive) instead of an \"objectproperty,\"\
      \ (a reference/pointer) if Class is indeed a class itself? I'm interested to\
      \ learn more about this arrangement.</p>\n<p><b>Dma:</b> In Unrealed, you'll\
      \ find it in the class browser if you turn off \"actor classes only\", etc.\
      \ There is NO script source for these. You might be able to learn more by using\
      \ the EDITOBJ console command in the game or editor.</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.055 seconds\nReal time usage: 0.140 seconds\nPreprocessor\
      \ visited node count: 5/1000000\nPreprocessor generated node count: 32/1000000\n\
      Post‐expand include size: 21/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:979-0!*!0!*!*!*!*\
      \ and timestamp 20221120203236 and revision id 2645\n -->\n"
  categories:
  - sortkey: "Dma/Developer Journal"
    name: "Legacy_Journal"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Dma/MutMultiJump"
  - ns: 100
    exists: true
    name: "Legacy:Dma/JetPack"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Dma/Developer Journal"
  iwlinks: []
  wikitext:
    text: "During school assignments, I have been working on several projects.\n\n\
      * [[Legacy:Dma/JetPack|dma/JetPack]] - This will someday be a jet pack that\
      \ works flawlessly in network play.\n* [[Legacy:Dma/MutMultiJump|dma/MutMultiJump]]\
      \ - This lets the server admin set the number of multijumps to allow.\n* More\
      \ to come if I get the time.\n\nIf you want to find the superclass of a class\
      \ at runtime, you can try this:\n\n<uscript>\nstatic final function class FindSuperClass(class\
      \ C) {\n    local State obj;\n    local Class X;\n    local array< class > SuperClasses;\n\
      \    local Class BestClass;\n    local int i;\n\n    foreach C.AllObjects(class'State',\
      \ obj) {\n        X = Class(obj);\n        if ((X != None) && (X != C) && ClassIsChildOf(C,\
      \ X)) {\n            SuperClasses[SuperClasses.Length] = X;\n        }\n   \
      \ }\n    BestClass = class'Object';\n\n    for (i=0; i<SuperClasses.Length;\
      \ i++) {\n        if (ClassIsChildOf(SuperClasses[i], BestClass)) {\n      \
      \      BestClass = SuperClasses[i];\n        }\n    }\n\n    return BestClass;\n\
      }\n</uscript>\n\n'''Foxpaw:''' I'm curious, why does the first loop only look\
      \ for things that are subclasses of \"state?\"\n\n'''Dma:''' Because <b>class'Class'</b>\
      \ results in a compiler error and Class is derived from State.  This speeds\
      \ it up a bit.  The compiler does some special junk on the second argument of\
      \ AllObjects which doesn't like class'Class' as a first argument.  It does NOT\
      \ use Object like the prototype says.\n\n'''Foxpaw:''' Hmm, that's interesting.\
      \ Where is the class file for class? Or for state? And then why does the engine\
      \ report class variables as a \"classproperty\" (a primitive) instead of an\
      \ \"objectproperty,\" (a reference/pointer) if Class is indeed a class itself?\
      \ I'm interested to learn more about this arrangement.\n\n'''Dma:''' In Unrealed,\
      \ you'll find it in the class browser if you turn off \"actor classes only\"\
      , etc.  There is NO script source for these.  You might be able to learn more\
      \ by using the EDITOBJ console command in the game or editor.\n\n[[Category:Legacy\
      \ Journal|{{PAGENAME}}]]"
  properties: []
  revId: 2645
name: "Legacy:Dma/Developer Journal"
revision:
  revid: 2645
  parentid: 2646
  user: "Dma"
  timestamp: 1075046030.000000000
  comment: "*"
timestamp: 1668976096.538313000
