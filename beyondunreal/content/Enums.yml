---
parse:
  title: "Enums"
  text:
    text: "<p>An <b>enum</b> (also <b>enumerated type</b> or <b>enumeration</b>) is\
      \ a primitive data type in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a>. The possible values of an enum type are a list of identifiers,\
      \ which can be compared not only for equality, but also for order.</p>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Declaration_syntax\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Declaration syntax</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Enum_constants_and_variables\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Enum constants\
      \ and variables</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-3\"\
      ><a href=\"#Value_declarations\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Value declarations</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Implicit_enum_properties\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">Implicit enum properties</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Converting_enum_values\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Converting enum\
      \ values</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"\
      #Enum_value_to_number\"><span class=\"tocnumber\">3.1</span> <span class=\"\
      toctext\">Enum value to number</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"\
      ><a href=\"#Numbers_to_enum_values\"><span class=\"tocnumber\">3.2</span> <span\
      \ class=\"toctext\">Numbers to enum values</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Enum_value_to_name\"><span class=\"tocnumber\">3.3</span>\
      \ <span class=\"toctext\">Enum value to name</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-9\"><a href=\"#Enum_value_to_string\"><span class=\"tocnumber\"\
      >3.4</span> <span class=\"toctext\">Enum value to string</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-10\"><a href=\"#String_or_name_to_enum_value\"\
      ><span class=\"tocnumber\">3.5</span> <span class=\"toctext\">String or name\
      \ to enum value</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Declaration_syntax\">Declaration syntax</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Enums?section=1\" title=\"Edit section: Declaration syntax\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ general syntax of enum declarations is:</p>\n<pre><b>enum</b> <i>enumname</i>\
      \ <b>{</b>\n  <i>value1</i>,<i>value2</i>,...\n<b>}</b>\n</pre>\n<p>An enum\
      \ declaration may appear either as standalone declaration, in which case it\
      \ must be followed by a semicolon, or as inline declaration instead of the type\
      \ specification in variable declarations. There is no difference between a standalone\
      \ and inline declaration, in both cased the enum is a direct member of the class.</p>\n\
      <p>Remember that all members of an UnrealScript class share the same namespace.\
      \ An enum declaration may hide any member of a parent class if it has the same\
      \ name.</p>\n<p>Unlike <a href=\"/Structs\" title=\"Structs\">structs</a>, enum\
      \ types may neither have any modifiers nor contain anything else than their\
      \ value declarations. By convention, enum names start with the letter <b>E</b>\
      \ to easily recognize the type as an enum. This is only a convention, not a\
      \ requirement, though.</p>\n<h3><span class=\"mw-headline\" id=\"Enum_constants_and_variables\"\
      >Enum constants and variables</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Enums?section=2\" title=\"\
      Edit section: Enum constants and variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>After an enum has been defined, use that enumname\
      \ like a <a href=\"/Types\" title=\"Types\">data type</a>. Examples:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> EMyEnum\
      \ MyEnumVar;\n<span class=\"kw1\">const</span> EMyEnum MyEnumConst;</pre></div>\n\
      </div>\n<p>It is also possible to define an enum and variable at once using\
      \ the keyword <b><a href=\"/Variables#Declaration\" title=\"Variables\">var</a></b>\
      \ as prefix:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw1\">enum</span> enumname <span class=\"br0\"\
      >{</span>\n  value1, value2,...\n<span class=\"br0\">}</span> variablename;</pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Value_declarations\">Value declarations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Enums?section=3\" title=\"Edit section: Value declarations\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ values of an enum type are identifiers, that means they must start with a\
      \ letter or underscore character, may contain letters, digits and the underscore\
      \ character and are restricted to a maximum length of 63 characters. Values\
      \ are separated by commas and there may be an optional comma after the last\
      \ value.</p>\n<p>By convention, enum value names start with a series of capital\
      \ letters specific to the enum's name, followed by an underscore character.\
      \ For short enum names this is usually the capitalized enum name, like AXIS_X\
      \ or AXIS_Y for the <a href=\"/UE2:EAxis_(UT2004)\" title=\"UE2:EAxis (UT2004)\"\
      \ class=\"mw-redirect\">EAxis</a> enum. For longer enum names, often either\
      \ the initial letters of each enum name part are used or one of the parts, possibly\
      \ shortened, is capitalized. Examples here are the <a href=\"/UE1:EDrawType_(UT)\"\
      \ title=\"UE1:EDrawType (UT)\" class=\"mw-redirect\">EDrawType</a> enum with\
      \ values such as DT_Sprite or DT_Mesh and the <a href=\"/UE3:ENetRole_(UT3)\"\
      \ title=\"UE3:ENetRole (UT3)\" class=\"mw-redirect\">ENetRole</a> enum with\
      \ values such as ROLE_SimulatedProxy or ROLE_Authority.</p>\n<p>In <a href=\"\
      /Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine 3</a> there may be\
      \ a <a href=\"/Metadata\" title=\"Metadata\">metatag</a> right after each value\
      \ declaration to specify the value's <a href=\"/Metadata#Tags\" title=\"Metadata\"\
      >display name</a> in any of <a href=\"/UnrealEd\" title=\"UnrealEd\" class=\"\
      mw-redirect\">UnrealEd</a>'s <a href=\"/edit/Properties_lists?redlink=1\" class=\"\
      new\" title=\"Properties lists (page does not exist)\">properties lists</a>.</p>\n\
      <p>A good example for an enum declaration with custom display names for its\
      \ values is <a href=\"/UE3:EMaterialAdjustmentType_(UT3)\" title=\"UE3:EMaterialAdjustmentType\
      \ (UT3)\" class=\"mw-redirect\">UIRoot.EMaterialAdjustmentType</a> in <a href=\"\
      /UT3\" title=\"UT3\" class=\"mw-redirect\">UT3</a>:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">enum</span> EMaterialAdjustmentType\n\
      <span class=\"br0\">{</span>\n\tADJUST_None<span class=\"sy0\">&lt;</span>DisplayName<span\
      \ class=\"sy0\">=</span>Clipped<span class=\"sy0\">&gt;</span>,\n\tADJUST_Normal<span\
      \ class=\"sy0\">&lt;</span>DisplayName<span class=\"sy0\">=</span>Scaled<span\
      \ class=\"sy0\">&gt;</span>,\n\tADJUST_Justified<span class=\"sy0\">&lt;</span>DisplayName<span\
      \ class=\"sy0\">=</span>Uniformly Scaled<span class=\"sy0\">&gt;</span>,\n\t\
      ADJUST_Bound<span class=\"sy0\">&lt;</span>DisplayName<span class=\"sy0\">=</span>Bound<span\
      \ class=\"sy0\">&gt;</span>,\n\tADJUST_Stretch<span class=\"sy0\">&lt;</span>DisplayName<span\
      \ class=\"sy0\">=</span>Stretched<span class=\"sy0\">&gt;</span>,\n<span class=\"\
      br0\">}</span>;</pre></div>\n</div>\n<p>As you can see, the display name of\
      \ an enum value may be totally different from the actual value identifier.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Implicit_enum_properties\">Implicit enum\
      \ properties</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Enums?section=4\" title=\"Edit section: Implicit enum\
      \ properties\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Enum types an implicit property <b>EnumCount</b>. This property is similar\
      \ to the <b>Length</b> property of a <a href=\"/Dynamic_array\" title=\"Dynamic\
      \ array\" class=\"mw-redirect\">dynamic array</a> in that it returns the number\
      \ of values declared for that enum. In <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a> and 2 it is only available at runtime, but in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> it can also be used at compile-time\
      \ to define <a href=\"/Static_array\" title=\"Static array\" class=\"mw-redirect\"\
      >static array</a> sizes. For some reason it doesn't count as constant expression\
      \ when defining <a href=\"/Constants\" title=\"Constants\">constants</a>.</p>\n\
      <p>As a synonym for <b>EnumCount</b>, Unreal Engine 3 also provides the implicit\
      \ enum value <b><i>XYZ</i>_MAX</b>, where <i>XYZ</i> is the prefix used for\
      \ other values in the same enum. For example the <a href=\"/UE3:EPhysics_(UT3)\"\
      \ title=\"UE3:EPhysics (UT3)\" class=\"mw-redirect\">Actor.EPhysics</a> enum\
      \ has the implicit value <i>PHYS_MAX</i> representing the value 13. Note that\
      \ this additional enum value is also exported when generating C++ headers for\
      \ <a href=\"/edit/Native_classes?redlink=1\" class=\"new\" title=\"Native classes\
      \ (page does not exist)\">native classes</a> in <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> and earlier, but it's not available to UnrealScript in those engine\
      \ generations.</p>\n<h2><span class=\"mw-headline\" id=\"Converting_enum_values\"\
      >Converting enum values</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Enums?section=5\" title=\"\
      Edit section: Converting enum values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Enum_value_to_number\"\
      >Enum value to number</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Enums?section=6\" title=\"Edit section: Enum value\
      \ to number\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Each enum value also stands for a <a href=\"/Byte\" title=\"Byte\" class=\"\
      mw-redirect\">byte</a> value. Variables of an enum type or function returning\
      \ an enum value can directly be used as if they were of an integer type. The\
      \ integer representation of an enum value depends on its position in the value\
      \ list. The first value represents the integer value 0, the second represents\
      \ 1, the next 2, then next 3 and so on.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Numbers_to_enum_values\">Numbers to enum values</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Enums?section=7\"\
      \ title=\"Edit section: Numbers to enum values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Converting generic numbers to enum values is possible\
      \ (at least in UE3), by assigning to a temporary variable:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> EMaterialAdjustmentType\
      \ TheEnum;\nTheEnum <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>;\n\
      <span class=\"sy0\">`</span><span class=\"kw3\">Log</span><span class=\"br0\"\
      >(</span>TheEnum<span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>...will\
      \ return \"ADJUST_Bound\". The standard casting syntax for UE3 appears to work:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">`</span><span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span>EMaterialAdjustmentType<span class=\"\
      br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>...but this will return \"\
      3\".</p>\n<h3><span class=\"mw-headline\" id=\"Enum_value_to_name\">Enum value\
      \ to name</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Enums?section=8\" title=\"Edit section: Enum value\
      \ to name\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>To get the name of an enum value you can use the <a href=\"/Object#GetEnum\"\
      \ title=\"Object\">GetEnum</a> function. It expects an <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">object literal</a> representing the enum type and the index\
      \ of the enum value whose name to return.</p>\n<p>Take the following call, for\
      \ example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw3\"\
      >GetEnum</span><span class=\"br0\">(</span><span class=\"kw1\">Enum</span><span\
      \ class=\"st0\">'EPhysics'</span>, <span class=\"nu0\">2</span><span class=\"\
      br0\">)</span></pre></div>\n</div>\n<p>This will return the name equal to the\
      \ <a href=\"/Literals#Names\" title=\"Literals\">name literal</a> <code>'PHYS_Falling'</code>.\
      \ Note that the second parameter of the GetEnum function is actually of type\
      \ <i>int</i>. Since enum values can also be used as numbers (as described above),\
      \ you can also pass in variables or function return values of an enum type.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Enum_value_to_string\">Enum value to string</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Enums?section=9\" title=\"Edit section: Enum value to string\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>If\
      \ you <a href=\"/Typecast\" title=\"Typecast\" class=\"mw-redirect\">typecast</a>\
      \ an enum value to string, you will only get the string representation of the\
      \ numeric representation as described above in \"Enum value to number\". To\
      \ get the string representation of the enum value name, you can instead <a href=\"\
      /Typecast\" title=\"Typecast\" class=\"mw-redirect\">typecast</a> the return\
      \ value of the GetEnum function to string.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"String_or_name_to_enum_value\">String or name to enum value</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Enums?section=10\" title=\"Edit section: String or name to enum\
      \ value\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This is only really possible in <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a> and 2 and only for enum variables at the class level, because it requires\
      \ the SetPropertyText function, which was removed in Unreal Engine 3. Simply\
      \ pass the name of the enum variable as the first parameter and the desired\
      \ enum value as the second parameter to assign the value to the variable.</p>\n\
      <table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <strong class=\"selflink\">Enums</strong>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <strong class=\"\
      selflink\">Enums</strong>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.201 seconds\nReal time usage: 0.824 seconds\nPreprocessor\
      \ visited node count: 255/1000000\nPreprocessor generated node count: 1025/1000000\n\
      Post‐expand include size: 10595/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  110.720      1 - -total\n100.00%  110.720      1 - Template:Navbox_unrealscript\n\
      \ 74.53%   82.520      1 - Template:Navbox\n  9.98%   11.055      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:4849-0!*!0!!en!*!*\
      \ and timestamp 20221117232910 and revision id 46378\n -->\n"
  categories:
  - sortkey: "Enums"
    name: "UnrealScript_reference"
  links:
  - ns: 106
    exists: true
    name: "UE3:EMaterialAdjustmentType (UT3)"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 104
    exists: true
    name: "UE2:EAxis (UT2004)"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Object"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Typecast"
  - ns: 106
    exists: true
    name: "UE3:EPhysics (UT3)"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: false
    name: "Native classes"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: false
    name: "Properties lists"
  - ns: 0
    exists: true
    name: "UnrealEd"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 102
    exists: true
    name: "UE1:EDrawType (UT)"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 106
    exists: true
    name: "UE3:ENetRole (UT3)"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Static array"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "UT3"
  - ns: 0
    exists: true
    name: "States"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Declaration syntax"
    number: "1"
    index: "1"
    fromtitle: "Enums"
    byteoffset: 239
    anchor: "Declaration_syntax"
  - toclevel: 2
    level: "3"
    line: "Enum constants and variables"
    number: "1.1"
    index: "2"
    fromtitle: "Enums"
    byteoffset: 1134
    anchor: "Enum_constants_and_variables"
  - toclevel: 1
    level: "2"
    line: "Value declarations"
    number: "2"
    index: "3"
    fromtitle: "Enums"
    byteoffset: 1529
    anchor: "Value_declarations"
  - toclevel: 2
    level: "3"
    line: "Implicit enum properties"
    number: "2.1"
    index: "4"
    fromtitle: "Enums"
    byteoffset: 3201
    anchor: "Implicit_enum_properties"
  - toclevel: 1
    level: "2"
    line: "Converting enum values"
    number: "3"
    index: "5"
    fromtitle: "Enums"
    byteoffset: 4174
    anchor: "Converting_enum_values"
  - toclevel: 2
    level: "3"
    line: "Enum value to number"
    number: "3.1"
    index: "6"
    fromtitle: "Enums"
    byteoffset: 4201
    anchor: "Enum_value_to_number"
  - toclevel: 2
    level: "3"
    line: "Numbers to enum values"
    number: "3.2"
    index: "7"
    fromtitle: "Enums"
    byteoffset: 4593
    anchor: "Numbers_to_enum_values"
  - toclevel: 2
    level: "3"
    line: "Enum value to name"
    number: "3.3"
    index: "8"
    fromtitle: "Enums"
    byteoffset: 4994
    anchor: "Enum_value_to_name"
  - toclevel: 2
    level: "3"
    line: "Enum value to string"
    number: "3.4"
    index: "9"
    fromtitle: "Enums"
    byteoffset: 5648
    anchor: "Enum_value_to_string"
  - toclevel: 2
    level: "3"
    line: "String or name to enum value"
    number: "3.5"
    index: "10"
    fromtitle: "Enums"
    byteoffset: 5979
    anchor: "String_or_name_to_enum_value"
  displaytitle: "Enums"
  iwlinks: []
  wikitext:
    text: "An '''enum''' (also '''enumerated type''' or '''enumeration''') is a primitive\
      \ data type in [[UnrealScript]]. The possible values of an enum type are a list\
      \ of identifiers, which can be compared not only for equality, but also for\
      \ order.\n\n==Declaration syntax==\nThe general syntax of enum declarations\
      \ is:\n '''enum''' ''enumname'' '''{'''\n   ''value1'',''value2'',...\n '''}'''\n\
      An enum declaration may appear either as standalone declaration, in which case\
      \ it must be followed by a semicolon, or as inline declaration instead of the\
      \ type specification in variable declarations. There is no difference between\
      \ a standalone and inline declaration, in both cased the enum is a direct member\
      \ of the class.\n\nRemember that all members of an UnrealScript class share\
      \ the same namespace. An enum declaration may hide any member of a parent class\
      \ if it has the same name.\n\nUnlike [[structs]], enum types may neither have\
      \ any modifiers nor contain anything else than their value declarations. By\
      \ convention, enum names start with the letter '''E''' to easily recognize the\
      \ type as an enum. This is only a convention, not a requirement, though.\n\n\
      === Enum constants and variables ===\nAfter an enum has been defined, use that\
      \ enumname like a [[Types|data type]]. Examples:\n<uscript>var EMyEnum MyEnumVar;\n\
      const EMyEnum MyEnumConst;</uscript>\nIt is also possible to define an enum\
      \ and variable at once using the keyword '''[[Variables#Declaration|var]]'''\
      \ as prefix:\n<uscript>var enum enumname {\n  value1, value2,...\n} variablename;</uscript>\n\
      \n==Value declarations==\nThe values of an enum type are identifiers, that means\
      \ they must start with a letter or underscore character, may contain letters,\
      \ digits and the underscore character and are restricted to a maximum length\
      \ of 63 characters. Values are separated by commas and there may be an optional\
      \ comma after the last value.\n\nBy convention, enum value names start with\
      \ a series of capital letters specific to the enum's name, followed by an underscore\
      \ character. For short enum names this is usually the capitalized enum name,\
      \ like AXIS_X or AXIS_Y for the [[UE2:EAxis (UT2004)|EAxis]] enum. For longer\
      \ enum names, often either the initial letters of each enum name part are used\
      \ or one of the parts, possibly shortened, is capitalized. Examples here are\
      \ the [[UE1:EDrawType (UT)|EDrawType]] enum with values such as DT_Sprite or\
      \ DT_Mesh and the [[UE3:ENetRole (UT3)|ENetRole]] enum with values such as ROLE_SimulatedProxy\
      \ or ROLE_Authority.\n\nIn [[Unreal Engine 3]] there may be a [[metadata|metatag]]\
      \ right after each value declaration to specify the value's [[Metadata#Tags|display\
      \ name]] in any of [[UnrealEd]]'s [[properties lists]].\n\nA good example for\
      \ an enum declaration with custom display names for its values is [[UE3:EMaterialAdjustmentType\
      \ (UT3)|UIRoot.EMaterialAdjustmentType]] in [[UT3]]:\n<uscript>\nenum EMaterialAdjustmentType\n\
      {\n\tADJUST_None<DisplayName=Clipped>,\n\tADJUST_Normal<DisplayName=Scaled>,\n\
      \tADJUST_Justified<DisplayName=Uniformly Scaled>,\n\tADJUST_Bound<DisplayName=Bound>,\n\
      \tADJUST_Stretch<DisplayName=Stretched>,\n};\n</uscript>\nAs you can see, the\
      \ display name of an enum value may be totally different from the actual value\
      \ identifier.\n\n===Implicit enum properties===\nEnum types an implicit property\
      \ '''EnumCount'''. This property is similar to the '''Length''' property of\
      \ a [[dynamic array]] in that it returns the number of values declared for that\
      \ enum. In [[Unreal Engine 1]] and 2 it is only available at runtime, but in\
      \ [[Unreal Engine 3]] it can also be used at compile-time to define [[static\
      \ array]] sizes. For some reason it doesn't count as constant expression when\
      \ defining [[constants]].\n\nAs a synonym for '''EnumCount''', Unreal Engine\
      \ 3 also provides the implicit enum value '''''XYZ''_MAX''', where ''XYZ'' is\
      \ the prefix used for other values in the same enum. For example the [[UE3:EPhysics\
      \ (UT3)|Actor.EPhysics]] enum has the implicit value ''PHYS_MAX'' representing\
      \ the value 13. Note that this additional enum value is also exported when generating\
      \ C++ headers for [[native classes]] in [[Unreal Engine 2]] and earlier, but\
      \ it's not available to UnrealScript in those engine generations.\n\n==Converting\
      \ enum values==\n===Enum value to number===\nEach enum value also stands for\
      \ a [[byte]] value. Variables of an enum type or function returning an enum\
      \ value can directly be used as if they were of an integer type. The integer\
      \ representation of an enum value depends on its position in the value list.\
      \ The first value represents the integer value 0, the second represents 1, the\
      \ next 2, then next 3 and so on.\n\n===Numbers to enum values===\nConverting\
      \ generic numbers to enum values is possible (at least in UE3), by assigning\
      \ to a temporary variable:\n\n<uscript>\nlocal EMaterialAdjustmentType TheEnum;\n\
      TheEnum = 3;\n`Log(TheEnum);\n</uscript>\n\n...will return \"ADJUST_Bound\"\
      . The standard casting syntax for UE3 appears to work:\n\n<uscript>\n`Log(EMaterialAdjustmentType(3));\n\
      </uscript>\n\n...but this will return \"3\".\n\n===Enum value to name===\nTo\
      \ get the name of an enum value you can use the [[Object#GetEnum|GetEnum]] function.\
      \ It expects an [[Literals#Objects|object literal]] representing the enum type\
      \ and the index of the enum value whose name to return.\n\nTake the following\
      \ call, for example:\n<uscript>GetEnum(Enum'EPhysics', 2)</uscript>\nThis will\
      \ return the name equal to the [[Literals#Names|name literal]] <code>'PHYS_Falling'</code>.\
      \ Note that the second parameter of the GetEnum function is actually of type\
      \ ''int''. Since enum values can also be used as numbers (as described above),\
      \ you can also pass in variables or function return values of an enum type.\n\
      \n===Enum value to string===\nIf you [[typecast]] an enum value to string, you\
      \ will only get the string representation of the numeric representation as described\
      \ above in \"Enum value to number\". To get the string representation of the\
      \ enum value name, you can instead [[typecast]] the return value of the GetEnum\
      \ function to string.\n\n===String or name to enum value===\nThis is only really\
      \ possible in [[Unreal Engine 1]] and 2 and only for enum variables at the class\
      \ level, because it requires the SetPropertyText function, which was removed\
      \ in Unreal Engine 3. Simply pass the name of the enum variable as the first\
      \ parameter and the desired enum value as the second parameter to assign the\
      \ value to the variable.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 46378
name: "Enums"
revision:
  revid: 46378
  parentid: 44882
  user: "SeriousBarbie"
  timestamp: 1477594901.000000000
  comment: "added chapter \"Enum constants and variables\""
timestamp: 1668754815.130524000
