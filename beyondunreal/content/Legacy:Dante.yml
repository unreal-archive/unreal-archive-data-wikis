---
parse:
  title: "Legacy:Dante"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Content\">Content</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Dante?section=1\"\
      \ title=\"Edit section: Content\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Status:</p>\n<p>Lead coder in Defence Alliance ( <a\
      \ rel=\"nofollow\" class=\"external free\" href=\"http://www.planetunreal.com/da\"\
      >http://www.planetunreal.com/da</a> )</p>\n<p>And I've written a little tool\
      \ for html documentation creation ( undox was a bit too buggy&#160;:/ )</p>\n\
      <p>( <a rel=\"nofollow\" class=\"external free\" href=\"http://www.uni-ulm.de/~s_dwaldh\"\
      >http://www.uni-ulm.de/~s_dwaldh</a> )</p>\n<p>I like the output a bit more\
      \ than that from uncodex. But I guess uncodex's parser engine is superior to\
      \ mine. Maybe I'll try to make a real parser once, not that I already have enough\
      \ things to do.</p>\n<p>Well that statement is a few months old, I actually\
      \ wrote a parser. It parses almost everything besides defaultproperties and\
      \ code.</p>\n<h2><span class=\"mw-headline\" id=\"Rant_about_the_Unreal_engine\"\
      >Rant about the Unreal engine</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Dante?section=2\" title=\"\
      Edit section: Rant about the Unreal engine\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Although I haven't seen source of Unreal 2 or any\
      \ other newer Unreal based game besides UT2003, I'm quiet sure that they all\
      \ share a big portion of code. I'm seeing Unreal running in the wrong direction\
      \ (codewise).</p>\n<ul>\n<li>The weapons... While the idea of havin firemodes\
      \ doesn't look too bad after all, the implementation is awful. There's a lot\
      \ of native code calling the different functions on the firemodes. Also, the\
      \ number of firemodes are limited to 2. I guess only those 2 are handled native.\
      \ Then again the attachment of the weapon which produces third person effects\
      \ is also called natives (function broadcast which is a bit complicated in unrealscript).\
      \ I assert that they were in a great hurry and therefore decided not to introduce\
      \ new language features but hack it in native.</li>\n<li>The GUI... I liked\
      \ the UT menus much more&#160;;) But it's not only that, also the defaultproperties\
      \ \"inner class\" hack. Real inner classes would've been a nice addition. At\
      \ least they introduced delegates which, I think, is a inferior concept. Well\
      \ I might be biased of being java coder and not C# one. In addition to the hacked\
      \ \"inner class\" stuff they also made hacked \"object instantiation\" possible.\
      \ As I already said my hopes are that they were in a big hurry.</li>\n</ul>\n\
      <p>UT1 had a much clearer concept for its time. While it's clear to me why the\
      \ used unrealscript in Unreal 1 a switch to java in UT might have been a good\
      \ decision. The would've had the decision of using a real java vm or use a bytecode\
      \ interpreter just like with unrealscript. Of course it'd have been a brutal\
      \ switch, and a lot of work to generate a new codebase. But...</p>\n<p>There\
      \ are alot of java compilers already out there which do their job very well.\
      \ Not only compilers, all sorts of tools which makes the programers life easier.</p>\n\
      <p>I think that's also reason why there are more quake engine based games and\
      \ mods out there. Now don't get me wrong, I am still coding in unrealscript\
      \ but it's just the nature of people like me to complain lol.</p>\n<p>There\
      \ was also some \"rectangle extends square\" OOP thingy here earlier which might\
      \ be useful to know when reading the discussion below.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Dante?section=3\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>EntropicLqd:</b> A lot of the ideas within the\
      \ Unreal Engine are pretty good but they always seem to break them when they\
      \ implement them. My fave example is the Controller-Pawn mess. It could have\
      \ been a very nice, clean separation of master and puppet - but noooo they had\
      \ to duck-tape the master's fingers to the puppet strings, and tie the puppets\
      \ head to his hand.</p>\n<dl>\n<dd>Delegates in UnrealScript are very cool.\
      \ I've not had the chance to play with pointers to functions (a blast from my\
      \ C past) for a long time so it's nice to have that facility back It's a shame\
      \ they didn't make more use of them in the main stream of the code. I've always\
      \ been of the opinion that InnerClasses are just plain ugly although I understand\
      \ the rationale behind them.</dd>\n<dd>There are more Quake engine based mods\
      \ around for two reasons I think. Firstly, overall the player base is larger\
      \ - which means there are just more people around to make mods. Secondly the\
      \ mods are written in C/C++ and compiled down into DLLs (at least they were\
      \ last time I made a mod for the quake engine - Quake 2). Programming in C/C++\
      \ is perceived to be way more \"cool\" than programming in Unreal Script. Especially\
      \ as most games companies want people who know C++.</dd>\n</dl>\n<hr />\n<p><b>Mychaeel:</b>\
      \ Welcome to the Wiki, Danke. &#160;:-)</p>\n<p><b>Tarquin:</b> hi there.&#160;:D\
      \ welcome to the Wiki.</p>\n<p><b>ZxAnPhOrIaN:</b> Welcome aboard and welcome\
      \ to the wiki!&#160;:)&#160;:tup:</p>\n<p><b>Dante:</b> Oh guys, you're too\
      \ fast&#160;;)</p>\n<p><b>ZxAnPhOrIaN:</b> I look at the <a href=\"/Legacy:Recent_Changes\"\
      \ title=\"Legacy:Recent Changes\" class=\"mw-redirect\">Recent Changes</a>,\
      \ at average, every 15 minutes!&#160;;)</p>\n<p><b>EntropicLqd:</b> There is\
      \ only one true style of coding your barbarian - it's mine - Mwhahahahah&#160;;)\
      \ Once you realise how pointless arguments about coding style really are they\
      \ can be used to great effect on a Friday afternoon when basking in the afterglow\
      \ of a lunchtime visit to the pub. \"Why aren't you lot working?\" – \"We are,\
      \ we are discussing some problems with the coding standards\".&#160;:)</p>\n\
      <p><b>Tarquin:</b> Seeing as a square is a <i>special case</i> of a rectangle,\
      \ I'd say that specialization would agree with you, and have rectangle as the\
      \ parent class of square. (and Quadrilateral as the parent of rectangle&#160;;)\
      \ )</p>\n<p><b>Dante:</b> Yeap, but <i>Specialisation</i> says: A rectangle\
      \ is a just a square with one side-length differing from the other. It may not\
      \ make sense in this case, but specialisation rule tells to do so...</p>\n<p><b>EntropicLqd:</b>\
      \ What rule book on <i>Specialisation</i> are you reading Dante? I'd be interested\
      \ to see the justification that a rectangle is a special type of square rather\
      \ than the reality, which is that a square is a special type of rectangle.</p>\n\
      <p><b>Dante:</b> Those aren't my rules, and I wouldn't do it, but it's what\
      \ I learned from \"practical computer science\". Specialisation means, to add\
      \ \"information\" to an sub-class. And storing a square needs less information\
      \ ( 1 var ) than storing a rectangle. Thus a rectangle is a square with 1 additional\
      \ side. It's not the way I would do it, but that is the way to go if you follow\
      \ specialisation-specs. ( Which was what we had to do in exams ... ). I don't\
      \ mean to say that specialisation is bad, but taking square and rectangle as\
      \ example is dumb.</p>\n<p><b>Bjorn:</b> What about the \"is a\" relationship\
      \ that should exist between an instance of an object and its class and all the\
      \ superclasses of it? Like a PlayerPawn is a Pawn. Surely, you can say a Square\
      \ is a Rectangle but not that a Rectangle is a Square.</p>\n<p><b>Mychaeel:</b>\
      \ In OOP, that's a bit tricky. In fact, in OOP you'd rather subclass \"Rectangle\"\
      \ from \"Square\" since the concept \"rectangle\" extends the concept \"square\"\
      \ by the ability to have different side lengths...</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.029 seconds\nReal time usage: 0.030 seconds\nPreprocessor\
      \ visited node count: 11/1000000\nPreprocessor generated node count: 24/1000000\n\
      Post‐expand include size: 5/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:967-0!*!0!!*!*!*\
      \ and timestamp 20221118012744 and revision id 2619\n -->\n"
  categories:
  - sortkey: "Dante"
    name: "Legacy_Personal_Page"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Recent Changes"
  templates: []
  images: []
  externallinks:
  - "http://www.planetunreal.com/da"
  - "http://www.uni-ulm.de/~s_dwaldh"
  sections:
  - toclevel: 1
    level: "2"
    line: "Content"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Dante"
    byteoffset: 0
    anchor: "Content"
  - toclevel: 1
    level: "2"
    line: "Rant about the Unreal engine"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Dante"
    byteoffset: 556
    anchor: "Rant_about_the_Unreal_engine"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Dante"
    byteoffset: 2720
    anchor: "Discussion"
  displaytitle: "Legacy:Dante"
  iwlinks: []
  wikitext:
    text: "==Content ==\n\nStatus:\n\nLead coder in Defence Alliance ( http://www.planetunreal.com/da\
      \ )\n\nAnd I've written a little tool for html documentation creation ( undox\
      \ was a bit too buggy :/ )\n\n( http://www.uni-ulm.de/~s_dwaldh )\n\nI like\
      \ the output a bit more than that from uncodex. But I guess uncodex's parser\
      \ engine is superior to mine. Maybe I'll try to make a real parser once, not\
      \ that I already have enough things to do.\n\nWell that statement is a few months\
      \ old, I actually wrote a parser. It parses almost everything besides defaultproperties\
      \ and code.\n\n==Rant about the Unreal engine ==\n\nAlthough I haven't seen\
      \ source of Unreal 2 or any other newer Unreal based game besides UT2003, I'm\
      \ quiet sure that they all share a big portion of code. I'm seeing Unreal running\
      \ in the wrong direction (codewise).\n* The weapons... While the idea of havin\
      \ firemodes doesn't look too bad after all, the implementation is awful. There's\
      \ a lot of native code calling the different functions on the firemodes. Also,\
      \ the number of firemodes are limited to 2. I guess only those 2 are handled\
      \ native. Then again the attachment of the weapon which produces third person\
      \ effects is also called natives (function broadcast which is a bit complicated\
      \ in unrealscript). I assert that they were in a great hurry and therefore decided\
      \ not to introduce new language features but hack it in native.\n* The GUI...\
      \ I liked the UT menus much more ;) But it's not only that, also the defaultproperties\
      \ \"inner class\" hack. Real inner classes would've been a nice addition. At\
      \ least they introduced delegates which, I think, is a inferior concept. Well\
      \ I might be biased of being java coder and not C# one. In addition to the hacked\
      \ \"inner class\" stuff they also made hacked \"object instantiation\" possible.\
      \ As I already said my hopes are that they were in a big hurry. \n\nUT1 had\
      \ a much clearer concept for its time. While it's clear to me why the used unrealscript\
      \ in Unreal 1 a switch to java in UT might have been a good decision. The would've\
      \ had the decision of using a real java vm or use a bytecode interpreter just\
      \ like with unrealscript. Of course it'd have been a brutal switch, and a lot\
      \ of work to generate a new codebase. But...\n\nThere are alot of java compilers\
      \ already out there which do their job very well. Not only compilers, all sorts\
      \ of tools which makes the programers life easier.\n\nI think that's also reason\
      \ why there are more quake engine based games and mods out there. Now don't\
      \ get me wrong, I am still coding in unrealscript but it's just the nature of\
      \ people like me to complain lol.\n\nThere was also some \"rectangle extends\
      \ square\" OOP thingy here earlier which might be useful to know when reading\
      \ the discussion below.\n\n==Discussion ==\n\n'''EntropicLqd:''' A lot of the\
      \ ideas within the Unreal Engine are pretty good but they always seem to break\
      \ them when they implement them.  My fave example is the Controller-Pawn mess.\
      \  It could have been a very nice, clean separation of master and puppet - but\
      \ noooo they had to duck-tape the master's fingers to the puppet strings, and\
      \ tie the puppets head to his hand.\n: Delegates in UnrealScript are very cool.\
      \  I've not had the chance to play with pointers to functions (a blast from\
      \ my C past) for a long time so it's nice to have that facility back  It's a\
      \ shame they didn't make more use of them in the main stream of the code.  I've\
      \ always been of the opinion that InnerClasses are just plain ugly although\
      \ I understand the rationale behind them.\n: There are more Quake engine based\
      \ mods around for two reasons I think.  Firstly, overall the player base is\
      \ larger - which means there are just more people around to make mods.  Secondly\
      \ the mods are written in C/C++ and compiled down into DLLs (at least they were\
      \ last time I made a mod for the quake engine - Quake 2).  Programming in C/C++\
      \ is perceived to be way more \"cool\" than programming in Unreal Script.  Especially\
      \ as most games companies want people who know C++.\n\n----\n\n'''Mychaeel:'''\
      \ Welcome to the Wiki, Danke.  :-)\n\n'''Tarquin:''' hi there. :D welcome to\
      \ the Wiki.\n\n'''ZxAnPhOrIaN:''' Welcome aboard and welcome to the wiki! :)\
      \ :tup:\n\n'''Dante:''' Oh guys, you're too fast ;)\n\n'''ZxAnPhOrIaN:''' I\
      \ look at the [[Legacy:Recent Changes|Recent Changes]], at average, every 15\
      \ minutes! ;)\n\n'''EntropicLqd:''' There is only one true style of coding your\
      \ barbarian - it's mine - Mwhahahahah ;) Once you realise how pointless arguments\
      \ about coding style really are they can be used to great effect on a Friday\
      \ afternoon when basking in the afterglow of a lunchtime visit to the pub. \
      \ \"Why aren't you lot working?\" &ndash; \"We are, we are discussing some problems\
      \ with the coding standards\". :)\n\n'''Tarquin:''' Seeing as a square is a\
      \ ''special case'' of a rectangle, I'd say that specialization would agree with\
      \ you, and have rectangle as the parent class of square. (and Quadrilateral\
      \ as the parent of rectangle ;) )\n\n'''Dante:''' Yeap, but ''Specialisation''\
      \ says: A rectangle is a just a square with one side-length differing from the\
      \ other. It may not make sense in this case, but specialisation rule tells to\
      \ do so... \n\n'''EntropicLqd:''' What rule book on ''Specialisation'' are you\
      \ reading Dante?  I'd be interested to see the justification that a rectangle\
      \ is a special type of square rather than the reality, which is that a square\
      \ is a special type of rectangle.\n\n'''Dante:''' Those aren't my rules, and\
      \ I wouldn't do it, but it's what I learned from \"practical computer science\"\
      . Specialisation means, to add \"information\" to an sub-class. And storing\
      \ a square needs less information ( 1 var ) than storing a rectangle. Thus a\
      \ rectangle is a square with 1 additional side. It's not the way I would do\
      \ it, but that is the way to go if you follow specialisation-specs. ( Which\
      \ was what we had to do in exams ... ). I don't mean to say that specialisation\
      \ is bad, but taking square and rectangle as example is dumb.\n\n'''Bjorn:'''\
      \ What about the \"is a\" relationship that should exist between an instance\
      \ of an object and its class and all the superclasses of it? Like a PlayerPawn\
      \ is a Pawn. Surely, you can say a Square is a Rectangle but not that a Rectangle\
      \ is a Square.\n\n'''Mychaeel:''' In OOP, that's a bit tricky.  In fact, in\
      \ OOP you'd rather subclass \"Rectangle\" from \"Square\" since the concept\
      \ \"rectangle\" extends the concept \"square\" by the ability to have different\
      \ side lengths...\n\n[[Category:Legacy Personal Page|{{PAGENAME}}]]"
  properties: []
  revId: 2619
name: "Legacy:Dante"
revision:
  revid: 2619
  parentid: 2620
  user: "EntropicLqd"
  timestamp: 1061913538.000000000
  comment: "*"
timestamp: 1668787073.401896000
