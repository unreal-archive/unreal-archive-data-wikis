---
parse:
  title: "Legacy:UT Vertex Animations From MilkShape"
  text:
    text: "<p>This tutorial is specific to <a href=\"/Legacy:MilkShape\" title=\"\
      Legacy:MilkShape\">MilkShape</a> for making models and importing them into Unreal\
      \ Tournament.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Create_a_Kickass_Model\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Create a Kickass Model</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Export_Your_Mesh_to_Unreal_Format\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Export Your Mesh to Unreal Format</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Importing_Your_Model\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Importing Your Model</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#Class_Definition\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">Class Definition</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Mesh_Import\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">Mesh Import</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Origin_Definition\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">Origin Definition</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Animation_Sequences\"><span\
      \ class=\"tocnumber\">3.4</span> <span class=\"toctext\">Animation Sequences</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Meshmap_to_Mesh_Associations\"\
      ><span class=\"tocnumber\">3.5</span> <span class=\"toctext\">Meshmap to Mesh\
      \ Associations</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"\
      #Meshmap_Scaling\"><span class=\"tocnumber\">3.6</span> <span class=\"toctext\"\
      >Meshmap Scaling</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"><a\
      \ href=\"#Texture_and_Palette_Import\"><span class=\"tocnumber\">3.7</span>\
      \ <span class=\"toctext\">Texture and Palette Import</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-11\"><a href=\"#Meshmap_to_Texture_Associations\"><span\
      \ class=\"tocnumber\">3.8</span> <span class=\"toctext\">Meshmap to Texture\
      \ Associations</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"\
      #Default_Properties\"><span class=\"tocnumber\">3.9</span> <span class=\"toctext\"\
      >Default Properties</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-13\"\
      ><a href=\"#Adding_Code\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Adding Code</span></a></li>\n<li class=\"toclevel-1 tocsection-14\"\
      ><a href=\"#Import_It_Into_the_Game.21\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Import It Into the Game!</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Create_a_Kickass_Model\"\
      >Create a Kickass Model</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=1\"\
      \ title=\"Edit section: Create a Kickass Model\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Find a good tutorial on modeling with <a href=\"/Legacy:MilkShape\"\
      \ title=\"Legacy:MilkShape\">MilkShape</a>. Once you have successfully created\
      \ your <a href=\"/Legacy:Mesh\" title=\"Legacy:Mesh\">mesh</a>, including texturing\
      \ and animation, you're ready to go on to step 2.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Export_Your_Mesh_to_Unreal_Format\">Export Your Mesh to Unreal Format</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=2\" title=\"\
      Edit section: Export Your Mesh to Unreal Format\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>In order to get your model into unreal you must first\
      \ prepare for it. This involves creating a package which is a little complex,\
      \ but gets easier with time.</p>\n<p>First off, you need to set up your folders\
      \ so Unreal will know where to look for them when we tell it to make our package.</p>\n\
      <p>Under your UnrealTournament folder, create a new folder with the name of\
      \ your package (or what it will be, e.g. \"MyCustomGuns\"). Then, under your\
      \ package folder place new folders with the following names: Classes, Models,\
      \ Textures, which are required, and some non-required folders like Sounds(but\
      \ you have to make new sounds and import them with code).</p>\n<ul>\n<li>Also\
      \ worth noting, packages can contain more than one class in them so any other\
      \ models you make using this tutorial can be placed within the same package...\
      \ but beware of size if you plan to distribute.</li>\n</ul>\n<p>After you have\
      \ exported your model into the UT format – (that is the <tt>_a.3d</tt> and <tt>_d.3d</tt>\
      \ files from the export list of MilkShape), save them in the <tt>Models</tt>\
      \ folder you just made under your package folder.</p>\n<ul>\n<li>At this point,\
      \ you may want to use <a href=\"/Legacy:UnrealFX\" title=\"Legacy:UnrealFX\"\
      >UnrealFX</a> to spice up your model. It allows models to be set to special\
      \ face flags, one poly at a time. E.g. You could make a particular surface environment\
      \ mapped, which makes it shiny once ingame.</li>\n</ul>\n<p>Once you export\
      \ from MilkShape you'll end up with 2 files ending with .3d. (One will end with\
      \ _a.3d and the other with _d.3d). MilkShape also makes a .uc file, but it is\
      \ no where near complete. You will definitely need to edit this but it is a\
      \ good base.</p>\n<h2><span class=\"mw-headline\" id=\"Importing_Your_Model\"\
      >Importing Your Model</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=3\"\
      \ title=\"Edit section: Importing Your Model\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Now modify the .uc file for importing the mesh into\
      \ Unreal Tournament. (Or make a new one if you are able. If you want to have\
      \ a look at an .uc file that's properly set up for mesh importing, check one\
      \ that was generated by <a href=\"/Legacy:MeshMaker\" title=\"Legacy:MeshMaker\"\
      >MeshMaker</a>.)</p>\n<p>This can be created or edited in any text editor. (I\
      \ use Notepad cause it's simple, but there are many other programs you can use.)\
      \ Move or save this .uc file in your <tt>Classes</tt> folder that is under your\
      \ package's folder. This is what it should look like.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> testGun <span class=\"\
      kw1\">expands</span> <span class=\"kw9\">Actor</span>;\n \n<span class=\"co2\"\
      >#exec MESH IMPORT MESH=myGun ANIVFILE=MODELS\\gun1_a.3d DATAFILE=MODELS\\gun1_d.3d\
      \ X=0 Y=0 Z=0</span>\n<span class=\"co2\">#exec MESH ORIGIN MESH=myGun X=0 Y=0\
      \ Z=0</span>\n \n<span class=\"co2\">#exec MESH SEQUENCE MESH=myGun SEQ=All\
      \ STARTFRAME=0 NUMFRAMES=25</span>\n<span class=\"co2\">#exec MESH SEQUENCE\
      \ MESH=myGun SEQ=Still STARTFRAME=0 NUMFRAMES=1</span>\n<span class=\"co2\"\
      >#exec MESH SEQUENCE MESH=myGun SEQ=Fire STARTFRAME=1 NUMFRAMES=20</span>\n\
      <span class=\"co2\">#exec MESH SEQUENCE MESH=myGun SEQ=Reload STARTFRAME=21\
      \ NUMFRAMES=5</span>\n \n<span class=\"co2\">#exec MESHMAP NEW MESHMAP=myGun\
      \ MESH=myGun</span>\n<span class=\"co2\">#exec MESHMAP SCALE MESHMAP=myGun X=1\
      \ Y=1 Z=.5</span>\n \n<span class=\"co2\">#exec TEXTURE IMPORT NAME=myGunTex1\
      \ FILE=TEXTURES\\guntex1.pcx GROUP=Skins FLAGS=2</span>\n<span class=\"co2\"\
      >#exec TEXTURE IMPORT NAME=myGunTex1 FILE=TEXTURES\\guntex1.pcx GROUP=Skins\
      \ PALETTE=myGunTex1</span>\n \n<span class=\"co2\">#exec TEXTURE IMPORT NAME=myGunTex2\
      \ FILE=TEXTURES\\guntex2.pcx GROUP=Skins FLAGS=2</span>\n<span class=\"co2\"\
      >#exec TEXTURE IMPORT NAME=myGunTex2 FILE=TEXTURES\\guntex2.pcx GROUP=Skins\
      \ PALETTE=myGunTex1</span>\n \n<span class=\"co2\">#exec MESHMAP SETTEXTURE\
      \ MESHMAP=myGun NUM=1 TEXTURE=myGunTex1</span>\n<span class=\"co2\">#exec MESHMAP\
      \ SETTEXTURE MESHMAP=myGun NUM=2 TEXTURE=myGunTex2</span>\n \n<span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw7\">DrawType</span><span class=\"sy0\">=</span><span class=\"kw7\">DT_Mesh</span>\n\
      \  <span class=\"kw5\">Mesh</span><span class=\"sy0\">=</span>myGun\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>It may be difficult to see what's going\
      \ on here, so let's take a look at all of the types of statements you'll need\
      \ in your file.</p>\n<h3><span class=\"mw-headline\" id=\"Class_Definition\"\
      >Class Definition</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=4\"\
      \ title=\"Edit section: Class Definition\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyGun <span class=\"kw1\">expands</span> <span class=\"kw9\"\
      >Actor</span>;</pre></div>\n</div>\n<p>Ok, this is a problem. When MilkShape\
      \ made .uc file it didn't know anything about what you wanted out of your mesh,\
      \ so it just set it up to expand (or acts as) a generic <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>. This is rarely (if ever) what you'll want\
      \ when you get to the point of really using your mesh for something (like for\
      \ a weapon or character). Even if it's just a <a href=\"/Legacy:Decoration\"\
      \ title=\"Legacy:Decoration\">Decoration</a>, you'll want to change this. For\
      \ now just set this field to expand <a href=\"/Legacy:UT_Decoration\" title=\"\
      Legacy:UT Decoration\">UT_Decoration</a>, you won't be able to use it as a weapon,\
      \ but you'll know its ingame and see it in the mesh viewer.</p>\n<p>For now,\
      \ replace \"MyGun\" with what you want to call your new object. Do not include\
      \ any spaces. (This new object name must also match the name of the .uc file\
      \ or you will get an error when compiling, so save the .uc file as the same\
      \ name.)</p>\n<h3><span class=\"mw-headline\" id=\"Mesh_Import\">Mesh Import</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=5\" title=\"\
      Edit section: Mesh Import\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec MESH IMPORT\
      \ MESH=myGun ANIVFILE=MODELS\\mygun1_a.3d DATAFILE=MODELS\\mygun1_d.3d X=0 Y=0\
      \ Z=0</span></pre></div>\n</div>\n<p>This one's easy. Just replace the <tt>_a.3d</tt>\
      \ and <tt>_d.3d</tt> names with the names of your .3d files and the mesh name\
      \ to whatever you like, e.g. \"MESH=Pistol\". This tells the Unreal compiler\
      \ where to find your .3d files. In this example, the .3d files would be stored\
      \ in the Models folder under your package folder.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Origin_Definition\">Origin Definition</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=6\"\
      \ title=\"Edit section: Origin Definition\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#exec MESH ORIGIN MESH=myGun X=0 Y=0 Z=0</span></pre></div>\n</div>\n\
      <p>For most items like weapons or pickup items, you'll want to just leave this\
      \ statement as is, except for changing the mesh name. The MESH ORIGIN statement\
      \ sets up where the center of the mesh is. In other words, the point where your\
      \ mesh will rotate around and move from, as well as the center of its mass and\
      \ is used in colision detection.</p>\n<p>You can also use the MESH ORIGIN statement\
      \ to set the initial rotation values of your mesh. If you've modeled a weapon\
      \ and it ends up facing the wrong direction in the game, you can fix that here.\
      \ You do that by adding PITCH, ROLL, and/or YAW values to the statement. The\
      \ values aren't normal angles though as the unreal engine relies on a system\
      \ using of multiples of 16 units. A value of 64 means 90 degrees, a value of\
      \ 128 means 180 degrees, 256 means 360 degrees, etc. So this statement:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec MESH ORIGIN\
      \ MESH=myGun X=0 Y=0 Z=0 PITCH=32 ROLL=128 YAW=-64</span></pre></div>\n</div>\n\
      <p>...would mean a pitch of 45 degrees, a roll of 180 degrees, and a yaw of\
      \ -90 degrees. Also, when MilkShape exports the models are usually off by 90\
      \ degrees of yaw, I almost always have to set it to YAW=64 or -64.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Animation_Sequences\">Animation Sequences</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=7\" title=\"\
      Edit section: Animation Sequences\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#exec MESH SEQUENCE MESH=myGun SEQ=All STARTFRAME=0 NUMFRAMES=25</span>\n\
      <span class=\"co2\">#exec MESH SEQUENCE MESH=myGun SEQ=Still STARTFRAME=0 NUMFRAMES=1</span>\n\
      <span class=\"co2\">#exec MESH SEQUENCE MESH=myGun SEQ=Fire STARTFRAME=1 NUMFRAMES=20\
      \ RATE=24</span>\n<span class=\"co2\">#exec MESH SEQUENCE MESH=myGun SEQ=Reload\
      \ STARTFRAME=21 NUMFRAMES=5 RATE=7.5</span></pre></div>\n</div>\n<p>If your\
      \ mesh includes animation (even some <a href=\"/Legacy:Decoration\" title=\"\
      Legacy:Decoration\">Decorations</a> do), you'll need to name your animation\
      \ sequences in these statements. When MilkShape generates .uc files it is does\
      \ not know which sequences go where as it is all one line of anims to it. Usually,\
      \ the first sequence name is called \"All\" and simply includes all of your\
      \ animation frames. Create a MESH SEQUENCE statement for each of your animation\
      \ sequences and name them something descriptive. You can also add a \"RATE=\"\
      \ statement to the end of the anim seq line. This sets up how long it will take\
      \ to play the sequence, in frames per second (unless it is only 1 frame long).\
      \ MilkShape by default uses 24 fps so a RATE of 24 will set animations to the\
      \ same speed as in MilkShape.</p>\n<p>The animations should have been made in\
      \ MilkShape as one long animation of all the sequences one after another (this\
      \ gets to be a large file if making a player model). While making your model,\
      \ since all the sequences will run together, it is good to write down the sequences\
      \ as well as their starting frame number, and their length of frames.</p>\n\
      <p>If your mesh does not include any animation, you can just use something like\
      \ this (which is good for weapon pickup and third person view meshes).</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec MESH SEQUENCE\
      \ MESH=myGun SEQ=All STARTFRAME=0 NUMFRAMES=1</span>\n<span class=\"co2\">#exec\
      \ MESH SEQUENCE MESH=myGun SEQ=Still STARTFRAME=0 NUMFRAMES=1</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Meshmap_to_Mesh_Associations\"\
      >Meshmap to Mesh Associations</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=8\"\
      \ title=\"Edit section: Meshmap to Mesh Associations\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co2\">#exec MESHMAP NEW MESHMAP=myGun MESH=myGun</span></pre></div>\n\
      </div>\n<p>This must match as it tells the compiler which uv mapping coordinates\
      \ to use with your mesh, it will not compile if incorrect. I suggest leaving\
      \ this as is because it is correct this way, just swap the name here with your\
      \ class name. (...see a pattern? everything must represent the name of your\
      \ class.)</p>\n<h3><span class=\"mw-headline\" id=\"Meshmap_Scaling\">Meshmap\
      \ Scaling</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=9\"\
      \ title=\"Edit section: Meshmap Scaling\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#exec MESHMAP SCALE MESHMAP=myGun X=1 Y=1 Z=.5</span></pre></div>\n</div>\n\
      <p>Scaling is an important concept to understand. The way that MilkShape's \"\
      units\" relate to Unreal units is easy – 1:1... as in 1 MilkShape unit will\
      \ become 1 Unreal unit. That way if you treat 16 units in MilkShape as 1 foot\
      \ (as it is in UT, roughly), you should be able to set your scaling to \"X=1\
      \ Y=1 Z=.5\". The Z axis of meshes is always half of the others in UT.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Texture_and_Palette_Import\">Texture and\
      \ Palette Import</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=10\"\
      \ title=\"Edit section: Texture and Palette Import\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co2\">#exec TEXTURE IMPORT NAME=myGunTex1 FILE=TEXTURES\\\
      guntex1.pcx GROUP=Skins FLAGS=2</span>\n<span class=\"co2\">#exec TEXTURE IMPORT\
      \ NAME=myGunTex1 FILE=TEXTURES\\guntex1.pcx GROUP=Skins PALETTE=myGunTex1</span></pre></div>\n\
      </div>\n<p>For every new <a href=\"/Legacy:Texture_(UT)\" title=\"Legacy:Texture\
      \ (UT)\">Texture (UT)</a> image that your mesh uses, you'll need a line to import\
      \ it. Give it a descriptive name in place of \"myGunTex1\" and fill in the name\
      \ of your .pcx file. In this example, the .pcx files would be in the <tt>Textures</tt>\
      \ folder under your package folder. Some people put textures in the models folder\
      \ but I do not, that is what the <tt>Textures</tt> folder is for.</p>\n<dl>\n\
      <dd><i>Note:</i> The height and width of your textures need to be \"powers of\
      \ 2.\" In other words, both the height and the width need to be one of these\
      \ numbers: 1, 2, 4, 8, 16, 32, 64, 128, or 256. You can go higher (512, 1024,\
      \ etc), but that doesn't seem to be typical when using the Unreal engine (yet).\
      \ The height and width do not need to be the same, so a 64 x 32 image is fine,\
      \ even a 256 x 2 is allowed if you need it.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"Meshmap_to_Texture_Associations\">Meshmap to Texture Associations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=11\" title=\"\
      Edit section: Meshmap to Texture Associations\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These statements associate the UV mapping of your\
      \ mesh with specific textures. In MilkShape, you will get one of these for each\
      \ Group you create. Each Group will be a \"surface\" that is numbered 1, 2,\
      \ 3, etc.. The \"NUM=1\" line says to associate the first surface with the myGunTex1\
      \ texture. NUM=3 shows how you can use the same textures over again on different\
      \ groups.</p>\n<p>Since the maximum number of surfaces allowed is 8, you would\
      \ never have more than 8 of these statments per mesh.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Default_Properties\">Default Properties</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=12\"\
      \ title=\"Edit section: Default Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Setting the default properties correctly is <i>very\
      \ important</i>.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw7\">DrawType</span><span class=\"sy0\">=</span><span class=\"kw7\">DT_Mesh</span>\n\
      \  <span class=\"kw5\">Mesh</span><span class=\"sy0\">=</span>MyGun\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p><a href=\"/Legacy:Actor_(UT)/Display\"\
      \ title=\"Legacy:Actor (UT)/Display\">DrawType</a> simply tells the engine that\
      \ you want this to be a mesh. Most models will be \"DT_Mesh\". (Except for effects,\
      \ they will normally use \"DT_Particle\" but use a mesh for the vertex location\
      \ and animation).</p>\n<p>Remember to save your .uc file in the <tt>Classes</tt>\
      \ folder under your package folder and name it the same as the class. The example\
      \ here would have been named MyGun.uc.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Adding_Code\">Adding Code</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=13\"\
      \ title=\"Edit section: Adding Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you already have the code, you can add it to the\
      \ .uc file to tell UT what you want your model to actually \"do\" or \"be\"\
      \ ingame.</p>\n<p>Currently, your mesh is just a 3D object with no properties\
      \ or behaviors. You'll typically want to use your mesh as a weapon, character,\
      \ pickup item, or at least something you can interact with in some way. The\
      \ way to do that is by scripting your .uc file so that it \"expands\" on an\
      \ existing type of object, such as <a href=\"/Legacy:TournamentWeapon\" title=\"\
      Legacy:TournamentWeapon\">TournamentWeapon</a> (for weapons), <a href=\"/Legacy:Pawn_(UT)\"\
      \ title=\"Legacy:Pawn (UT)\">Pawn (UT)</a> (for players or creatures or inanimate\
      \ things that are interactive), or Decoration (for stuff like furniture). Each\
      \ type of object that you can create (there are many), has a set of properties\
      \ that you can set. One of the properties you can set is which mesh (or meshes)\
      \ to use. Some objects may have multiple meshes associated with them. For instance,\
      \ a weapon has a \"first person\" version of the mesh that includes the player's\
      \ hand and part of his arm, as well as a \"pickup\" version that is used to\
      \ show that weapon sitting on the ground (rotating?) and a \"third person\"\
      \ view which is what other players will see you carrying. (maybe with a small\
      \ set of anims of its own.) The field labeled \"Mesh\" (\"Mesh=MyGun\") is the\
      \ model that will show up in the Mesh Viewer in UnrealEd.</p>\n<p>Here's an\
      \ example. The part in quotes after LodMesh would be the reference to your mesh\
      \ (which can be imported seperately in another .uc file).</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyGun <span class=\"\
      kw1\">extends</span> Decoration;\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n  bCanBeBase<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">True</span>\n  ItemName<span class=\"sy0\">=</span><span class=\"\
      st0\">\"Colt Peacemaker\"</span>\n  <span class=\"kw5\">Mesh</span><span class=\"\
      sy0\">=</span><span class=\"kw5\">LodMesh</span><span class=\"st0\">'MyCustomGuns.MyGun'</span>\n\
      \  <span class=\"kw7\">CollisionRadius</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">18.790000</span>\n  <span class=\"kw7\">CollisionHeight</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">6.750000</span>\n  <span class=\"\
      kw7\">Mass</span><span class=\"sy0\">=</span><span class=\"nu0\">10.000000</span>\n\
      \  <span class=\"kw7\">Buoyancy</span><span class=\"sy0\">=</span><span class=\"\
      nu0\">15.000000</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Import_It_Into_the_Game.21\">Import It Into the\
      \ Game!</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT_Vertex_Animations_From_MilkShape?section=14\"\
      \ title=\"Edit section: Import It Into the Game!\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>When you have your .uc files, your .3d model files,\
      \ and your .pcx texture files in place, you're ready to actually import your\
      \ mesh into your package, so that it's ready to use in Unreal Tournament.</p>\n\
      <ol>\n<li>First, delete the .u package file with the name of this package(if\
      \ it already exists) from the \\UnrealTournament\\System folder.</li>\n<li>Next,\
      \ go in your UnrealTournament\\System folder and find the file called <a href=\"\
      /Legacy:UnrealTournament.Ini\" title=\"Legacy:UnrealTournament.Ini\">UnrealTournament.ini</a>\
      \ and scroll down or search for the line beginning with \"[Editor.EditorEngine]\"\
      \ then scroll down the lines below it untill you hit \"EditPackages\" and at\
      \ the end of that list, add a new editpackage with your package name.</li>\n\
      <li>For example, \"EditPackages=MyCustomGuns\" then save the .ini file without\
      \ changing anything else.</li>\n<li>Now in a command prompt (MS-DOS prompt)\
      \ in the \\UnrealTournament\\System directory type in \"ucc make\" (or under\
      \ your start menu, choose \"run\" and type \"C:\\UnrealTournament\\System\\\
      ucc make\" if thats the location of your UT folder).</li>\n<li>You will then\
      \ see a dos window pop up and load a list of all the packages listed in the\
      \ UnrealTournament.ini file untill it gets to your package name, then it will\
      \ proceed to load the components from the folders you made.</li>\n</ol>\n<p>If\
      \ you've done everything right, and you recieve no errors or warnings, your\
      \ mesh is ready to go. Fire up <a href=\"/Legacy:UnrealEd\" title=\"Legacy:UnrealEd\"\
      \ class=\"mw-redirect\">UnrealEd</a> and check it out in the mesh viewer.</p>\n\
      <p>For more help with using the UCC pragram, see <a href=\"/Legacy:Compiling_With_UCC\"\
      \ title=\"Legacy:Compiling With UCC\">Compiling With UCC</a>.</p>\n<p>Oh yeah,\
      \ for weapons, you may need to delete your .u package file and adjust the alignment\
      \ in your .uc file then re-compile quite a few times to get it right so don't\
      \ be discouraged, you will learn it with practice and keeping notes.</p>\n<p>(To\
      \ align your weapon's first person view, just add the line <tt>PlayerViewOffset</tt>\
      \ in default properties (either in the .uc before a re-compile or in advanced\
      \ options ingame by typing \"preferences\" in the console) and give a value\
      \ for each of the X, Y, and Z coordinates. Z being up and down in Unreal. And\
      \ remember, <tt>PlayerViewOffset</tt> manipulates <i>your perspective</i> of\
      \ the weapon, <i>not the actual weapon</i>!)</p>\n<p><a href=\"/Category:Legacy_Tutorial\"\
      \ title=\"Category:Legacy Tutorial\">Category:Legacy Tutorial</a></p>\n<hr />\n\
      <p><b>Tarquin:</b> Probably. We could perhaps clean this area up. Some questions,\
      \ which we should answer &amp; discuss on the page <a href=\"/Legacy:MilkShape\"\
      \ title=\"Legacy:MilkShape\">MilkShape</a>:</p>\n<ul>\n<li>what pages do we\
      \ have on MilkShape?</li>\n<li>how should we organize them?</li>\n<li>what should\
      \ we call them?</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.224\
      \ seconds\nReal time usage: 0.230 seconds\nPreprocessor visited node count:\
      \ 173/1000000\nPreprocessor generated node count: 328/1000000\nPost‐expand include\
      \ size: 35/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3475-0!*!0!!en!*!*\
      \ and timestamp 20221118194302 and revision id 8924\n -->\n"
  categories:
  - sortkey: "UT Vertex Animations From MilkShape"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealFX"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Decoration"
  - ns: 100
    exists: true
    name: "Legacy:Texture (UT)"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:MilkShape"
  - ns: 100
    exists: true
    name: "Legacy:Mesh"
  - ns: 100
    exists: true
    name: "Legacy:MeshMaker"
  - ns: 100
    exists: true
    name: "Legacy:UnrealTournament.Ini"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:UT Decoration"
  - ns: 100
    exists: true
    name: "Legacy:TournamentWeapon"
  - ns: 100
    exists: true
    name: "Legacy:Actor (UT)/Display"
  - ns: 14
    exists: true
    name: "Category:Legacy Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Compiling With UCC"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Create a Kickass Model"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 123
    anchor: "Create_a_Kickass_Model"
  - toclevel: 1
    level: "2"
    line: "Export Your Mesh to Unreal Format"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 354
    anchor: "Export_Your_Mesh_to_Unreal_Format"
  - toclevel: 1
    level: "2"
    line: "Importing Your Model"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 1984
    anchor: "Importing_Your_Model"
  - toclevel: 2
    level: "3"
    line: "Class Definition"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 3739
    anchor: "Class_Definition"
  - toclevel: 2
    level: "3"
    line: "Mesh Import"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 4650
    anchor: "Mesh_Import"
  - toclevel: 2
    level: "3"
    line: "Origin Definition"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 5130
    anchor: "Origin_Definition"
  - toclevel: 2
    level: "3"
    line: "Animation Sequences"
    number: "3.4"
    index: "7"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 6356
    anchor: "Animation_Sequences"
  - toclevel: 2
    level: "3"
    line: "Meshmap to Mesh Associations"
    number: "3.5"
    index: "8"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 8092
    anchor: "Meshmap_to_Mesh_Associations"
  - toclevel: 2
    level: "3"
    line: "Meshmap Scaling"
    number: "3.6"
    index: "9"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 8499
    anchor: "Meshmap_Scaling"
  - toclevel: 2
    level: "3"
    line: "Texture and Palette Import"
    number: "3.7"
    index: "10"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 8966
    anchor: "Texture_and_Palette_Import"
  - toclevel: 2
    level: "3"
    line: "Meshmap to Texture Associations"
    number: "3.8"
    index: "11"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 10029
    anchor: "Meshmap_to_Texture_Associations"
  - toclevel: 2
    level: "3"
    line: "Default Properties"
    number: "3.9"
    index: "12"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 10552
    anchor: "Default_Properties"
  - toclevel: 1
    level: "2"
    line: "Adding Code"
    number: "4"
    index: "13"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 11134
    anchor: "Adding_Code"
  - toclevel: 1
    level: "2"
    line: "Import It Into the Game!"
    number: "5"
    index: "14"
    fromtitle: "Legacy:UT_Vertex_Animations_From_MilkShape"
    byteoffset: 12867
    anchor: "Import_It_Into_the_Game.21"
  displaytitle: "Legacy:UT Vertex Animations From MilkShape"
  iwlinks: []
  wikitext:
    text: "This tutorial is specific to [[Legacy:MilkShape|MilkShape]] for making\
      \ models and importing them into Unreal Tournament. \n\n==Create a Kickass Model\
      \ ==\n\nFind a good tutorial on modeling with [[Legacy:MilkShape|MilkShape]].\
      \  Once you have successfully created your [[Legacy:Mesh|mesh]], including texturing\
      \ and animation, you're ready to go on to step 2.\n\n==Export Your Mesh to Unreal\
      \ Format ==\n\nIn order to get your model into unreal you must first prepare\
      \ for it. This involves creating a package which is a little complex, but gets\
      \ easier with time.\n\nFirst off, you need to set up your folders so Unreal\
      \ will know where to look for them when we tell it to  make our package.\n\n\
      Under your UnrealTournament folder, create a new folder with the name of your\
      \ package (or what it will be, e.g. \"MyCustomGuns\"). Then, under your package\
      \ folder place new folders with the following names: Classes, Models, Textures,\
      \ which are required, and some non-required folders like Sounds(but you have\
      \ to make new sounds and import them with code).\n\n* Also worth noting, packages\
      \ can contain more than one class in them so any other models you make using\
      \ this tutorial can be placed within the same package... but beware of size\
      \ if you plan to distribute.\n\nAfter you have exported your model into the\
      \ UT format &ndash; (that is the <tt>_a.3d</tt> and <tt>_d.3d</tt> files from\
      \ the export list of MilkShape), save them in the <tt>Models</tt> folder you\
      \ just made under your package folder.\n\n* At this point, you may want to use\
      \ [[Legacy:UnrealFX|UnrealFX]] to spice up your model. It allows models to be\
      \ set to special face flags, one poly at a time. E.g. You could make a particular\
      \ surface environment mapped, which makes it shiny once ingame.\n\nOnce you\
      \ export from MilkShape you'll end up with 2 files ending with .3d. (One will\
      \ end with _a.3d and the other with _d.3d). MilkShape also makes a .uc file,\
      \ but it is no where near complete. You will definitely need to edit this but\
      \ it is a good base.\n\n==Importing Your Model ==\n\nNow modify the .uc file\
      \ for importing the mesh into Unreal Tournament. (Or make a new one if you are\
      \ able.  If you want to have a look at an .uc file that's properly set up for\
      \ mesh importing, check one that was generated by [[Legacy:MeshMaker|MeshMaker]].)\n\
      \nThis can be created or edited in any text editor. (I use Notepad cause it's\
      \ simple, but there are many other programs you can use.) Move or save this\
      \ .uc file in your <tt>Classes</tt> folder that is under your package's folder.\
      \ This is what it should look like.\n\n<uscript>\nclass testGun expands Actor;\n\
      \n#exec MESH IMPORT MESH=myGun ANIVFILE=MODELS\\gun1_a.3d DATAFILE=MODELS\\\
      gun1_d.3d X=0 Y=0 Z=0\n#exec MESH ORIGIN MESH=myGun X=0 Y=0 Z=0\n\n#exec MESH\
      \ SEQUENCE MESH=myGun SEQ=All STARTFRAME=0 NUMFRAMES=25\n#exec MESH SEQUENCE\
      \ MESH=myGun SEQ=Still STARTFRAME=0 NUMFRAMES=1\n#exec MESH SEQUENCE MESH=myGun\
      \ SEQ=Fire STARTFRAME=1 NUMFRAMES=20\n#exec MESH SEQUENCE MESH=myGun SEQ=Reload\
      \ STARTFRAME=21 NUMFRAMES=5\n\n#exec MESHMAP NEW MESHMAP=myGun MESH=myGun\n\
      #exec MESHMAP SCALE MESHMAP=myGun X=1 Y=1 Z=.5\n\n#exec TEXTURE IMPORT NAME=myGunTex1\
      \ FILE=TEXTURES\\guntex1.pcx GROUP=Skins FLAGS=2\n#exec TEXTURE IMPORT NAME=myGunTex1\
      \ FILE=TEXTURES\\guntex1.pcx GROUP=Skins PALETTE=myGunTex1\n\n#exec TEXTURE\
      \ IMPORT NAME=myGunTex2 FILE=TEXTURES\\guntex2.pcx GROUP=Skins FLAGS=2\n#exec\
      \ TEXTURE IMPORT NAME=myGunTex2 FILE=TEXTURES\\guntex2.pcx GROUP=Skins PALETTE=myGunTex1\n\
      \n#exec MESHMAP SETTEXTURE MESHMAP=myGun NUM=1 TEXTURE=myGunTex1\n#exec MESHMAP\
      \ SETTEXTURE MESHMAP=myGun NUM=2 TEXTURE=myGunTex2\n\ndefaultproperties\n{\n\
      \  DrawType=DT_Mesh\n  Mesh=myGun\n}\n</uscript>\n\nIt may be difficult to see\
      \ what's going on here, so let's take a look at all of the types of statements\
      \ you'll need in your file.\n\n===Class Definition ===\n\n<uscript>\nclass MyGun\
      \ expands Actor;\n</uscript>\n\nOk, this is a problem. When MilkShape made .uc\
      \ file it didn't know anything about what you wanted out of your mesh, so it\
      \ just set it up to expand (or acts as) a generic [[Legacy:Actor|Actor]]. This\
      \ is rarely (if ever) what you'll want when you get to the point of really using\
      \ your mesh for something (like for a weapon or character). Even if it's just\
      \ a [[Legacy:Decoration|Decoration]], you'll want to change this. For now just\
      \ set this field to expand [[Legacy:UT_Decoration|UT_Decoration]], you won't\
      \ be able to use it as a weapon, but you'll know its ingame and see it in the\
      \ mesh viewer.\n\nFor now, replace \"MyGun\" with what you want to call your\
      \ new object. Do not include any spaces. (This new object name must also match\
      \ the name of the .uc file or you will get an error when compiling, so save\
      \ the .uc file as the same name.)\n\n===Mesh Import ===\n\n<uscript>\n#exec\
      \ MESH IMPORT MESH=myGun ANIVFILE=MODELS\\mygun1_a.3d DATAFILE=MODELS\\mygun1_d.3d\
      \ X=0 Y=0 Z=0\n</uscript>\n\nThis one's easy. Just replace the <tt>_a.3d</tt>\
      \ and <tt>_d.3d</tt> names with the names of your .3d files and the mesh name\
      \ to whatever you like, e.g. \"<nowiki>MESH=Pistol</nowiki>\". This tells the\
      \ Unreal compiler where to find your .3d files. In this example, the .3d files\
      \ would be stored in the Models folder under your package folder.\n\n===Origin\
      \ Definition ===\n\n<uscript>\n#exec MESH ORIGIN MESH=myGun X=0 Y=0 Z=0\n</uscript>\n\
      \nFor most items like weapons or pickup items, you'll want to just leave this\
      \ statement as is, except for changing the mesh name. The MESH ORIGIN statement\
      \ sets up where the center of the mesh is. In other words, the point where your\
      \ mesh will rotate around and move from, as well as the center of its mass and\
      \ is used in colision detection.\n\nYou can also use the MESH ORIGIN statement\
      \ to set the initial rotation values of your mesh. If you've modeled a weapon\
      \ and it ends up facing the wrong direction in the game, you can fix that here.\
      \ You do that by adding PITCH, ROLL, and/or YAW values to the statement. The\
      \ values aren't normal angles though as the unreal engine relies on a system\
      \ using of multiples of 16 units. A value of 64 means 90 degrees, a value of\
      \ 128 means 180 degrees, 256 means 360 degrees, etc. So this statement:\n\n\
      <uscript>\n#exec MESH ORIGIN MESH=myGun X=0 Y=0 Z=0 PITCH=32 ROLL=128 YAW=-64\n\
      </uscript>\n\n...would mean a pitch of 45 degrees, a roll of 180 degrees, and\
      \ a yaw of -90 degrees. Also, when MilkShape exports the models are usually\
      \ off by 90 degrees of yaw, I almost always have to set it to YAW=64 or -64.\n\
      \n===Animation Sequences ===\n\n<uscript>\n#exec MESH SEQUENCE MESH=myGun SEQ=All\
      \ STARTFRAME=0 NUMFRAMES=25\n#exec MESH SEQUENCE MESH=myGun SEQ=Still STARTFRAME=0\
      \ NUMFRAMES=1\n#exec MESH SEQUENCE MESH=myGun SEQ=Fire STARTFRAME=1 NUMFRAMES=20\
      \ RATE=24\n#exec MESH SEQUENCE MESH=myGun SEQ=Reload STARTFRAME=21 NUMFRAMES=5\
      \ RATE=7.5\n</uscript>\n\nIf your mesh includes animation (even some [[Legacy:Decoration|Decoration]]s\
      \ do), you'll need to name your animation sequences in these statements. When\
      \ MilkShape generates .uc files it is does not know which sequences go where\
      \ as it is all one line of anims to it. Usually, the first sequence name is\
      \ called \"All\" and simply includes all of your animation frames. Create a\
      \ MESH SEQUENCE statement for each of your animation sequences and name them\
      \ something descriptive. You can also add a \"RATE=\" statement to the end of\
      \ the anim seq line. This sets up how long it will take to play the sequence,\
      \ in frames per second (unless it is only 1 frame long). MilkShape by default\
      \ uses 24 fps so a RATE of 24 will set animations to the same speed as in MilkShape.\n\
      \nThe animations should have been made in MilkShape as one long animation of\
      \ all the sequences one after another (this gets to be a large file if making\
      \ a player model).  While making your model, since all the sequences will run\
      \ together, it is good to write down the sequences as well as their starting\
      \ frame number, and their length of frames.\n\nIf your mesh does not include\
      \ any animation, you can just use something like this (which is good for weapon\
      \ pickup and third person view meshes). \n\n<uscript>\n#exec MESH SEQUENCE MESH=myGun\
      \ SEQ=All STARTFRAME=0 NUMFRAMES=1\n#exec MESH SEQUENCE MESH=myGun SEQ=Still\
      \ STARTFRAME=0 NUMFRAMES=1\n</uscript>\n\n===Meshmap to Mesh Associations ===\n\
      \n<uscript>\n#exec MESHMAP NEW MESHMAP=myGun MESH=myGun\n</uscript>\n\nThis\
      \ must match as it tells the compiler which uv mapping coordinates to use with\
      \ your mesh, it will not compile if incorrect. I suggest leaving this as is\
      \ because it is correct this way, just swap the name here with your class name.\
      \ (...see a pattern? everything must represent the name of your class.)\n\n\
      ===Meshmap Scaling ===\n\n<uscript>\n#exec MESHMAP SCALE MESHMAP=myGun X=1 Y=1\
      \ Z=.5\n</uscript>\n\nScaling is an important concept to understand. The way\
      \ that MilkShape's \"units\" relate to Unreal units is easy &ndash; 1:1... \
      \ as in 1 MilkShape unit will become 1 Unreal unit. That way if you treat 16\
      \ units in MilkShape as 1 foot (as it is in UT, roughly), you should be able\
      \ to set your scaling to \"X=1 Y=1 Z=.5\". The Z axis of meshes is always half\
      \ of the others in UT.\n\n===Texture and Palette Import ===\n\n<uscript>\n#exec\
      \ TEXTURE IMPORT NAME=myGunTex1 FILE=TEXTURES\\guntex1.pcx GROUP=Skins FLAGS=2\n\
      #exec TEXTURE IMPORT NAME=myGunTex1 FILE=TEXTURES\\guntex1.pcx GROUP=Skins PALETTE=myGunTex1\n\
      </uscript>\n\nFor every new [[Legacy:Texture (UT)|Texture (UT)]] image that\
      \ your mesh uses, you'll need a line to import it. Give it a descriptive name\
      \ in place of \"myGunTex1\" and fill in the name of your .pcx file. In this\
      \ example, the .pcx files would be in the <tt>Textures</tt> folder under your\
      \ package folder. Some people put textures in the models folder but I do not,\
      \ that is what the <tt>Textures</tt> folder is for.\n\n:''Note:'' The height\
      \ and width of your textures need to be \"powers of 2.\" In other words, both\
      \ the height and the width need to be one of these numbers: 1, 2, 4, 8, 16,\
      \ 32, 64, 128, or 256. You can go higher (512, 1024, etc), but that doesn't\
      \ seem to be typical when using the Unreal engine (yet). The height and width\
      \ do not need to be the same, so a 64 x 32 image is fine, even a 256 x 2 is\
      \ allowed if you need it.\n\n===Meshmap to Texture Associations ===\n\nThese\
      \ statements associate the UV mapping of your mesh with specific textures. In\
      \ MilkShape, you will get one of these for each Group you create. Each Group\
      \ will be a \"surface\" that is numbered 1, 2, 3, etc.. The \"NUM=1\" line says\
      \ to associate the first surface with the myGunTex1 texture. NUM=3 shows how\
      \ you can use the same textures over again on different groups.\n\nSince the\
      \ maximum number of surfaces allowed is 8, you would never have more than 8\
      \ of these statments per mesh.\n\n===Default Properties ===\n\nSetting the default\
      \ properties correctly is ''very important''.\n\n<uscript>\ndefaultproperties\n\
      {\n  DrawType=DT_Mesh\n  Mesh=MyGun\n}\n</uscript>\n\n[[Legacy:Actor (UT)/Display|DrawType]]\
      \ simply tells the engine that you want this to be a mesh. Most models will\
      \ be \"DT_Mesh\". (Except for effects, they will normally use \"DT_Particle\"\
      \ but use a mesh for the vertex location and animation).\n\nRemember to save\
      \ your .uc file in the <tt>Classes</tt> folder under your package folder and\
      \ name it the same as the class. The example here would have been named MyGun.uc.\n\
      \n==Adding Code ==\n\nIf you already have the code, you can add it to the .uc\
      \ file to tell UT what you want your model to actually \"do\" or \"be\" ingame.\n\
      \nCurrently, your mesh is just a 3D object with no properties or behaviors.\
      \ You'll typically want to use your mesh as a weapon, character, pickup item,\
      \ or at least something you can interact with in some way. The way to do that\
      \ is by scripting your .uc file so that it \"expands\" on an existing type of\
      \ object, such as [[Legacy:TournamentWeapon|TournamentWeapon]] (for weapons),\
      \ [[Legacy:Pawn (UT)|Pawn (UT)]] (for players or creatures or inanimate things\
      \ that are interactive), or Decoration (for stuff like furniture). Each type\
      \ of object that you can create (there are many), has a set of properties that\
      \ you can set. One of the properties you can set is which mesh (or meshes) to\
      \ use. Some objects may have multiple meshes associated with them. For instance,\
      \ a weapon has a \"first person\" version of the mesh that includes the player's\
      \ hand and part of his arm, as well as a \"pickup\" version that is used to\
      \ show that weapon sitting on the ground (rotating?) and a \"third person\"\
      \ view which is what other players will see you carrying. (maybe with a small\
      \ set of anims of its own.) The field labeled \"Mesh\" (\"Mesh=MyGun\") is the\
      \ model that will show up in the Mesh Viewer in UnrealEd.\n\nHere's an example.\
      \ The part in quotes after LodMesh would be the reference to your mesh (which\
      \ can be imported seperately in another .uc file).\n\n<uscript>\nclass MyGun\
      \ extends Decoration;\n\ndefaultproperties\n{\n  bCanBeBase=True\n  ItemName=\"\
      Colt Peacemaker\"\n  Mesh=LodMesh'MyCustomGuns.MyGun'\n  CollisionRadius=18.790000\n\
      \  CollisionHeight=6.750000\n  Mass=10.000000\n  Buoyancy=15.000000\n}\n</uscript>\n\
      \n==Import It Into the Game! ==\n\nWhen you have your .uc files, your .3d model\
      \ files, and your .pcx texture files in place, you're ready to actually import\
      \ your mesh into your package, so that it's ready to use in Unreal Tournament.\n\
      \n# First, delete the .u package file with the name of this package(if it already\
      \ exists) from the \\UnrealTournament\\System folder.\n# Next, go in your UnrealTournament\\\
      System folder and find the file called [[Legacy:UnrealTournament.Ini|UnrealTournament.ini]]\
      \ and scroll down or search for the line beginning with \"[Editor.EditorEngine]\"\
      \ then scroll down the lines below it untill you hit \"EditPackages\" and at\
      \ the end of that list, add a new editpackage with your package name. \n# For\
      \ example, \"EditPackages=MyCustomGuns\" then save the .ini file without changing\
      \ anything else.\n# Now in a command prompt (MS-DOS prompt) in the \\UnrealTournament\\\
      System directory type in \"ucc make\" (or under your start menu, choose \"run\"\
      \ and type \"C:\\UnrealTournament\\System\\ucc make\" if thats the location\
      \ of your UT folder).\n# You will then see a dos window pop up and load a list\
      \ of all the packages listed in the UnrealTournament.ini file untill it gets\
      \ to your package name, then it will proceed to load the components from the\
      \ folders you made. \n\nIf you've done everything right, and you recieve no\
      \ errors or warnings, your mesh is ready to go. Fire up [[Legacy:UnrealEd|UnrealEd]]\
      \ and check it out in the mesh viewer.\n\nFor more help with using the UCC pragram,\
      \ see [[Legacy:Compiling With UCC|Compiling With UCC]].\n\nOh yeah, for weapons,\
      \ you may need to delete your .u package file and adjust the alignment in your\
      \ .uc file then re-compile quite a few times to get it right so don't be discouraged,\
      \ you will learn it with practice and keeping notes.\n\n(To align your weapon's\
      \ first person view, just add the line <tt>PlayerViewOffset</tt> in default\
      \ properties (either in the .uc before a re-compile or in advanced options ingame\
      \ by typing \"preferences\" in the console) and give a value for each of the\
      \ X, Y, and Z coordinates. Z being up and down in Unreal. And remember, <tt>PlayerViewOffset</tt>\
      \ manipulates ''your perspective'' of the weapon, ''not the actual weapon''!)\n\
      \n[[:Category:Legacy Tutorial]]\n\n----\n\n'''Tarquin:''' Probably. We could\
      \ perhaps clean this area up. Some questions, which we should answer & discuss\
      \ on the page [[Legacy:MilkShape|MilkShape]]:\n* what pages do we have on MilkShape?\n\
      * how should we organize them?\n* what should we call them?\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 8924
name: "Legacy:UT Vertex Animations From MilkShape"
revision:
  revid: 8924
  parentid: 8926
  user: "GRAF1K"
  timestamp: 1068789638.000000000
  comment: "That's not your comment, Chip"
timestamp: 1668800363.336751000
