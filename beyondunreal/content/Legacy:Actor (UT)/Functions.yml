---
parse:
  title: "Legacy:Actor (UT)/Functions"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Native_Functions\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Native Functions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#General_Functions\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">General Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Latent_Functions\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Latent Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Collision\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Collision</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-5\"><a href=\"#Movement\"><span class=\"tocnumber\"\
      >1.4</span> <span class=\"toctext\">Movement</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#Relations\"><span class=\"tocnumber\">1.5</span>\
      \ <span class=\"toctext\">Relations</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Animations\"><span class=\"tocnumber\">1.6</span>\
      \ <span class=\"toctext\">Animations</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Sounds\"><span class=\"tocnumber\">1.7</span> <span\
      \ class=\"toctext\">Sounds</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"\
      ><a href=\"#AI_Functions\"><span class=\"tocnumber\">1.8</span> <span class=\"\
      toctext\">AI Functions</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"\
      ><a href=\"#Other_Functions\"><span class=\"tocnumber\">1.9</span> <span class=\"\
      toctext\">Other Functions</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-11\"><a href=\"#Scripted_Functions_and_Engine_Notifications\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Scripted Functions and\
      \ Engine Notifications</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-12\"\
      ><a href=\"#General_Notifications\"><span class=\"tocnumber\">2.1</span> <span\
      \ class=\"toctext\">General Notifications</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-13\"><a href=\"#Initialisation\"><span class=\"tocnumber\">2.2</span>\
      \ <span class=\"toctext\">Initialisation</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-14\"><a href=\"#Triggers\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Triggers</span></a></li>\n<li class=\"toclevel-2 tocsection-15\"\
      ><a href=\"#Physics_and_World_Interaction\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">Physics and World Interaction</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-16\"><a href=\"#Damage\"><span class=\"tocnumber\"\
      >2.5</span> <span class=\"toctext\">Damage</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-17\"><a href=\"#Rendering\"><span class=\"tocnumber\">2.6</span>\
      \ <span class=\"toctext\">Rendering</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-18\"><a href=\"#Messages\"><span class=\"tocnumber\">2.7</span>\
      \ <span class=\"toctext\">Messages</span></a></li>\n<li class=\"toclevel-2 tocsection-19\"\
      ><a href=\"#Other_Functions_2\"><span class=\"tocnumber\">2.8</span> <span class=\"\
      toctext\">Other Functions</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Native_Functions\">Native Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=1\" title=\"Edit section:\
      \ Native Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"General_Functions\">General Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=2\" title=\"Edit section:\
      \ General Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>string ConsoleCommand (string Command) [native, but not final]&#160;</dt>\n\
      <dd>Execute a console command.</dd>\n<dt>Error (coerce string S)&#160;</dt>\n\
      <dd>Handle an error and kill this one actor.</dd>\n<dt><a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Spawn (class&lt;<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>&gt; SpawnClass, optional <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> SpawnOwner, optional name SpawnTag, optional\
      \ vector SpawnLocation, optional rotator SpawnRotation)&#160;</dt>\n<dd>Spawn\
      \ an actor. Returns an actor of the specified class, not of class Actor (this\
      \ is hardcoded in the compiler). Returns None if the actor could not be spawned\
      \ (either the actor wouldn't fit in the specified location, or the actor list\
      \ is full). Defaults to spawning at the spawner's location and with the spawner's\
      \ rotation.</dd>\n<dt>bool Destroy()&#160;</dt>\n<dd>Destroy this actor. Returns\
      \ true if destroyed, false if indestructable. Destruction is latent. It occurs\
      \ at the end of the tick.</dd>\n<dt>SetTimer (float NewTimerRate, bool bLoop)&#160;</dt>\n\
      <dd>If bLoop is true, causes <tt>Timer()</tt> events every NewTimerRate seconds.\
      \ Otherwise, causes <tt>Timer()</tt> to be called once in NewTimerRate seconds.\
      \ <code>SetTimer(0.0, False);</code> stops the timer.</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Latent_Functions\">Latent Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=3\" title=\"Edit section:\
      \ Latent Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><a href=\"/Legacy:Latent_Function\" title=\"Legacy:Latent Function\">Latent\
      \ Function</a> are special native functions that can only be used in <a href=\"\
      /Legacy:State\" title=\"Legacy:State\">state</a> code. (i.e. in labels outside\
      \ of functions within states. See ScriptedPawn's script for excellent examples).\
      \ They will cause script execution within the state to pause until some condition\
      \ is met. All other functions and states in other classes will continue to execute\
      \ normally.</p>\n<p>While you cannot define new latent functions, it possible\
      \ to pull a similar effect:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">While</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>SomeConditionIsMet<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"co1\">//Pause until this function returns true</span>\n  <span\
      \ class=\"kw4\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >0.0</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<dl>\n<dt>Sleep\
      \ (float Seconds)&#160;</dt>\n<dd>Waits for the specified amount of time. Note\
      \ using continual low values of sleep() (&lt;0.1) is not recommended, as this\
      \ creates signnificant dependance on frame rate. For instance, the minigun has\
      \ this problem, where different frame rates make it fire different amounts of\
      \ bullets in a second. See <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://wiki.unrealadmin.org/images/0/00/Minishots.jpg\">this graph</a>.</dd>\n\
      <dt>FinishAnim ( )&#160;</dt>\n<dd>Waits till the current animation is finished.\
      \ WARNING: If you have an AnimEnd() that plays a new animation, this will never\
      \ pass!</dd>\n<dt>FinishInterpolation ( )&#160;</dt>\n<dd>Only used mostly in\
      \ movers. Pauses until the mover has finished interpolated to the next key.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Collision\">Collision</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=4\" title=\"Edit section:\
      \ Collision\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>SetCollision (optional bool NewColActors, optional bool NewBlockActors,\
      \ optional bool NewBlockPlayers)&#160;</dt>\n<dd></dd>\n<dt>bool SetCollisionSize\
      \ (float NewRadius, float NewHeight)&#160;</dt>\n<dd></dd>\n<dt><a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Trace (out vector HitLocation, out vector\
      \ HitNormal, vector TraceEnd, optional vector TraceStart, optional bool bTraceActor,\
      \ optional vector Extent)&#160;</dt>\n<dd>Trace a line and see what it collides\
      \ with first. Takes this actor's collision properties into account. Returns\
      \ first hit actor, the <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\"\
      >LevelInfo</a> if hit level geometry, or <i>None</i> if hit nothing. bTraceActors\
      \ specifies whether Trace should check for actors at all.</dd>\n</dl>\n<p><b>Highlander:</b>\
      \ UT2003 info, Trace returns as expected the static mesh actor if it hits a\
      \ static mesh, and returns the TerrainInfo if it hits terrain.</p>\n<dl>\n<dt>bool\
      \ FastTrace (vector TraceEnd, optional vector TraceStart)&#160;</dt>\n<dd>Returns\
      \ <i>True</i> when there is no world geometry between the two points. The actor's\
      \ location is used as start if no <i>TraceStart</i> is specified.</dd>\n</dl>\n\
      <h3><span class=\"mw-headline\" id=\"Movement\">Movement</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=5\"\
      \ title=\"Edit section: Movement\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>bool Move (vector Delta)&#160;</dt>\n<dd>Moves\
      \ an actor to Location + Delta. Stops if is blocked.</dd>\n<dt>bool SetLocation\
      \ (vector NewLocation)&#160;</dt>\n<dd>Self-explanatory</dd>\n<dt>bool SetRotation\
      \ (rotator NewRotation)&#160;</dt>\n<dd>Self-explanatory. See also <a href=\"\
      /Legacy:Rotator\" title=\"Legacy:Rotator\">rotator</a>.</dd>\n<dt>bool MoveSmooth\
      \ (vector Delta)&#160;</dt>\n<dd>Moves an actor to Location + Delta. If blocked,\
      \ the actor will slide on the object it collided with (i.e. as your player does\
      \ when you walk into a wall).</dd>\n<dt>AutonomousPhysics (float DeltaSeconds)&#160;</dt>\n\
      <dd>Used in PlayerPawn in netgames. Causes Physics to be handed with a DeltaTime\
      \ of DeltaSeconds.</dd>\n<dt>SetPhysics (EPhysics newPhysics)&#160;</dt>\n<dd>Sets\
      \ the actor's movement physics.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Relations\">Relations</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=6\"\
      \ title=\"Edit section: Relations\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>SetBase (<a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a> NewBase)&#160;</dt>\n<dd></dd>\n<dt>SetOwner (<a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> NewOwner)&#160;</dt>\n<dd></dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Animations\">Animations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=7\" title=\"Edit section:\
      \ Animations\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>PlayAnim (name Sequence, optional float Rate, optional float TweenTime)</dt>\n\
      <dd>Plays an Animation (must have a mesh set for this to work!)</dd>\n</dl>\n\
      <dl>\n<dd>\n<ul>\n<li>Sequence = Anim sequence Name</li>\n<li>Rate = Animation\
      \ Rate multiplier</li>\n<li>TweenTime = Amount of Time to \"tween\" into the\
      \ first frame of this animation sequence if in a different sequence.</li>\n\
      </ul>\n</dd>\n</dl>\n<dl>\n<dt>LoopAnim (name Sequence, optional float Rate,\
      \ optional float TweenTime, optional float MinRate, optional bool bTweenFrame)</dt>\n\
      <dd>Plays an animation that loops until another animation is played. \"227j:\
      \ bTweenFrame = if true, will keep looping animation with the new sequence but\
      \ simply tween from old animation to new one while playing.\" -BK</dd>\n<dt>TweenAnim\
      \ (name Sequence, float Time)</dt>\n<dd>Tween into a new animation.</dd>\n<dt>bool\
      \ IsAnimating ( )</dt>\n<dd>Returns whether the actor's mesh currently plays\
      \ an animation.</dd>\n<dt>name GetAnimGroup (name Sequence)</dt>\n<dd>Returns\
      \ the group of the actor's current animation.</dd>\n<dt>bool HasAnim (name Sequence)</dt>\n\
      <dd>Returns whether the specified animation is present for the actor's current\
      \ mesh.</dd>\n<dt>LinkSkelAnim (Animation Anim)</dt>\n<dd>Generally never used.\
      \ Will Link a Skeletal animation to a skeletal mesh.</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Sounds\">Sounds</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=8\"\
      \ title=\"Edit section: Sounds\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>PlaySound (sound Sound, optional ESoundSlot\
      \ Slot, optional float Volume, optional bool bNoOverride, optional float Radius,\
      \ optional float Pitch)</dt>\n<dd>Plays a sound.\n<ul>\n<li>Slot: Sound slot\
      \ (allows actors to play multiple sounds at once)</li>\n<li>bNoOverride: If\
      \ true and a sound is currently playing in the specified slot, the new sound\
      \ will not play (override the current sound).</li>\n<li>Volume, Radius, Pitch:\
      \ <a href=\"/Legacy_talk:Actor_(UT)/Functions#Convert_sound_variables_to_PlaySound_parameters\"\
      \ title=\"Legacy talk:Actor (UT)/Functions\">see discussion</a></li>\n</ul>\n\
      </dd>\n</dl>\n<dl>\n<dt>PlayOwnedSound (sound Sound, optional ESoundSlot Slot,\
      \ optional float Volume, optional bool bNoOverride, optional float Radius, optional\
      \ float Pitch) [simulated]&#160;</dt>\n<dd>This plays a sound that will not\
      \ be replicated to network clients. It is generally used for first-person weapon\
      \ sound effects, HUD notifications, etcetera.</dd>\n<dt>DemoPlaySound (sound\
      \ Sound, optional ESoundSlot Slot, optional float Volume, optional bool bNoOverride,\
      \ optional float Radius, optional float Pitch) [simulated]</dt>\n<dd></dd>\n\
      <dt>float GetSoundDuration (sound Sound)&#160;</dt>\n<dd>Returns the length\
      \ of the sound in seconds.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      AI_Functions\">AI Functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=9\"\
      \ title=\"Edit section: AI Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>MakeNoise (float Loudness)&#160;</dt>\n<dd>Inform\
      \ other creatures that you've made a noise they might hear (they are sent a\
      \ HearNoise message). Senders of MakeNoise should have an Instigator if they\
      \ are not <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\">Pawn (UT)s</a>.</dd>\n\
      <dt>bool PlayerCanSeeMe ( )&#160;</dt>\n<dd>PlayerCanSeeMe returns true if some\
      \ player has a line of sight to actor's location.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"Other_Functions\">Other Functions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=10\"\
      \ title=\"Edit section: Other Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>string GetMapName (string NameEnding, string\
      \ MapName, int Dir)&#160;</dt>\n<dd>The horribly slow function that uses an\
      \ O(X^2) algorithm to find maps. When searching for maps it's useful to set\
      \ the <i>NameEnding</i> parameter to the prefix for the type of maps you are\
      \ looking for. The <i>MapName</i> parameter can be set to any map name (possibly\
      \ even maps that don't exist) and its value is used to derive the name of the\
      \ next map returned by this function. The <i>Dir</i> parameter should be set\
      \ to 1 to move forwards in the list of map names, -1 to move backwards, and\
      \ 0 to return the same map. A <i>Dir</i> of 0 is only ever used with a <i>MapName</i>\
      \ value of \"\" to obtain the first map in the list of maps for a given map\
      \ prefix. Be aware that this function will loop from the last map in a \"list\"\
      \ to the \"first\" map in the list without warning.</dd>\n<dt>GetNextSkin (string\
      \ Prefix, string CurrentSkin, int Dir, out string SkinName, out string SkinDesc)&#160;</dt>\n\
      <dd>Another slow function that finds skins.</dd>\n<dt>string GetURLMap ( )&#160;</dt>\n\
      <dd>Supposedly returns the current map's filename. (although gives false results\
      \ in save games and demos).</dd>\n<dt>string GetNextInt (string ClassName, int\
      \ Num)&#160;</dt>\n<dd>Reads through the INT files in the system directory and\
      \ returns the classname of entries with a MetaClass given by ClassName.</dd>\n\
      <dt>GetNextIntDesc (string ClassName, int Num, out string Entry, out string\
      \ Description)&#160;</dt>\n<dd>Like GetNextINT, only supports the Description\
      \ tag in INT files.</dd>\n<dt>bool GetCacheEntry (int Num, out string GUID,\
      \ out string Filename)&#160;</dt>\n<dd>Reads through the cache.ini and returns\
      \ the FileName and GUID of files within the cache directory.</dd>\n<dt>bool\
      \ MoveCacheEntry (string GUID, optional string NewFilename)&#160;</dt>\n<dd>Will\
      \ \"move\" an entry somewhere... (haven't fully tested it).</dd>\n</dl>\n<h2><span\
      \ class=\"mw-headline\" id=\"Scripted_Functions_and_Engine_Notifications\">Scripted\
      \ Functions and Engine Notifications</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=11\"\
      \ title=\"Edit section: Scripted Functions and Engine Notifications\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"\
      mw-headline\" id=\"General_Notifications\">General Notifications</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=12\" title=\"Edit section:\
      \ General Notifications\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>AnimEnd ( )&#160;</dt>\n<dd>Called when an animation has completed.</dd>\n\
      <dt>Destroyed ( )&#160;</dt>\n<dd>Called when the actor is destroyed.</dd>\n\
      <dt>Expired ( )&#160;</dt>\n<dd>Called when the actor's LifeSpan has reached\
      \ 0.</dd>\n<dt>GainedChild (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> Other)&#160;</dt>\n<dd>Called when this actor becomes the Owner of\
      \ other.</dd>\n<dt>LostChild (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> Other)&#160;</dt>\n<dd>Called when this actor is no longer the Owner\
      \ of other (including other being destroyed()).</dd>\n<dt>Tick (float DeltaTime)&#160;</dt>\n\
      <dd>Called once each frame. DeltaTime is the time that has passed since the\
      \ last frame.</dd>\n<dt>Timer ( )&#160;</dt>\n<dd>Called when the Timer has\
      \ expired (Launched by SetTimer()).</dd>\n<dt>TravelPreAccept ( )&#160;</dt>\n\
      <dd>Called when carried onto a new level, before AcceptInventory.</dd>\n<dt>TravelPostAccept\
      \ ( )&#160;</dt>\n<dd>Called when carried into a new level, after AcceptInventory.</dd>\n\
      <dt>BecomeViewTarget ( )&#160;</dt>\n<dd>Called by PlayerPawn when this actor\
      \ becomes its ViewTarget.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      Initialisation\">Initialisation</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=13\"\
      \ title=\"Edit section: Initialisation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>(also see <a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">Creating Actors and Objects</a>)</p>\n\
      <dl>\n<dt>Spawned ( )&#160;</dt>\n<dd>Called only when the actor is created\
      \ using the Spawn method.</dd>\n<dt>PreBeginPlay ( )&#160;</dt>\n<dd>Called\
      \ immediately before gameplay begins.</dd>\n<dt>BeginPlay ( )&#160;</dt>\n<dd>Called\
      \ when gameplay begins.</dd>\n<dt>PostBeginPlay ( )&#160;</dt>\n<dd>Called after\
      \ gameplay begins, before variables have been replicated to the clients.</dd>\n\
      <dt>SetInitialState ( ) [simulated]&#160;</dt>\n<dd>Called after PostBeginPlay\
      \ to set the initial state of the actor.</dd>\n<dt>PostNetBeginPlay ( ) [simulated]&#160;</dt>\n\
      <dd>Called on net clients after the data packet that spawned this actor has\
      \ been completely processed. However, replicated variables are NOT guarenteed\
      \ to have reached the client.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      Triggers\">Triggers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=14\" title=\"Edit\
      \ section: Triggers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>Trigger (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>\
      \ Other, <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\">Pawn (UT)</a>\
      \ EventInstigator)&#160;</dt>\n<dd>Handled in subclasses.</dd>\n<dt>UnTrigger\
      \ (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> Other, <a href=\"\
      /Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\">Pawn (UT)</a> EventInstigator)&#160;</dt>\n\
      <dd>Handled in subclasses.</dd>\n<dt>BeginEvent ( )&#160;</dt>\n<dd></dd>\n\
      <dt>EndEvent ( )&#160;</dt>\n<dd></dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Physics_and_World_Interaction\">Physics and World Interaction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=15\" title=\"Edit section:\
      \ Physics and World Interaction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>HitWall (vector HitNormal, <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> HitWall)&#160;</dt>\n<dd>Called when the\
      \ actor hits a fall. ( NB, defined for projectile actors only and called from\
      \ within touch() if the touching actor has blockall set. )</dd>\n<dt>Falling\
      \ ( )&#160;</dt>\n<dd>Called when Pawns begin to fall.</dd>\n<dt>Landed (vector\
      \ HitNormal)&#160;</dt>\n<dd>Called when an actor hits the ground. (What is\
      \ the angle in relation to a flat plane that the ground must be at to be considered\
      \ ground and not a wall?)</dd>\n<dt>ZoneChange (<a href=\"/Legacy:ZoneInfo\"\
      \ title=\"Legacy:ZoneInfo\">ZoneInfo</a> NewZone)&#160;</dt>\n<dd>Called when\
      \ actor is about to enter a new <a href=\"/Legacy:Zone\" title=\"Legacy:Zone\"\
      >Zone</a>.</dd>\n<dt>Touch (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> Other)&#160;</dt>\n<dd>Called when Other touches this actor (and\
      \ this actor doesn't block that actor).</dd>\n<dt>PostTouch (<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n<dd>// called for PendingTouch\
      \ actor after physics completes</dd>\n<dt>UnTouch (<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n<dd>Called when Other\
      \ is no longer touching this actor.</dd>\n<dt>Bump (<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n<dd>Called when an actor\
      \ bumps into this actor and is blocked.</dd>\n<dt>BaseChange ( )&#160;</dt>\n\
      <dd>Called when the actor's base changes.</dd>\n<dt>Attach (<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n<dd></dd>\n<dt>Detach\
      \ (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n\
      <dd></dd>\n<dt>KillCredit (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> Other)&#160;</dt>\n<dd>Not implemented in Epic's Code.</dd>\n<dt><a\
      \ href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> SpecialHandling (<a\
      \ href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\">Pawn (UT)</a> Other)&#160;</dt>\n\
      <dd>Used by the navigation system to modify results.</dd>\n<dt>bool EncroachingOn\
      \ (<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n\
      <dd>Called when this actor is trying to take up the same space as Other. (and\
      \ block each other?)</dd>\n<dt>EncroachedBy (<a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a> Other)&#160;</dt>\n<dd>Called when Other has taken\
      \ up this actor's space. (and block each other).</dd>\n<dt>InterpolateEnd (<a\
      \ href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> Other)&#160;</dt>\n\
      <dd></dd>\n<dt>EndedRotation ( )&#160;</dt>\n<dd>Called when an actor's rotation\
      \ has reached DesiredRotation?</dd>\n<dt>FellOutOfWorld ( )&#160;</dt>\n<dd>This\
      \ is called when an actor enters zone 0. Zone 0 is the region of non-subtracted\
      \ space in your level. Actors can enter this zone through BSP errors or if they\
      \ are of a type that does not collide with the world.</dd>\n<dt>bool PreTeleport\
      \ (<a href=\"/Legacy:Teleporter\" title=\"Legacy:Teleporter\">Teleporter</a>\
      \ InTeleporter)&#160;</dt>\n<dd>Called by InTeleporter when trying to Teleport\
      \ this actor. Return true to prevent Teleporter from Teleporting.</dd>\n<dt>PostTeleport\
      \ (<a href=\"/Legacy:Teleporter\" title=\"Legacy:Teleporter\">Teleporter</a>\
      \ OutTeleporter )&#160;</dt>\n<dd>Not implemented?</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"Damage\">Damage</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=16\"\
      \ title=\"Edit section: Damage\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>KilledBy (<a href=\"/Legacy:Pawn_(UT)\" title=\"\
      Legacy:Pawn (UT)\">Pawn (UT)</a> EventInstigator)&#160;</dt>\n<dd></dd>\n<dt>TakeDamage\
      \ (int Damage, <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\">Pawn\
      \ (UT)</a> EventInstigator, vector HitLocation, vector Momentum, name DamageType)&#160;</dt>\n\
      <dd>Implemented in subclasses.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Rendering\">Rendering</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=17\"\
      \ title=\"Edit section: Rendering\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>RenderOverlays (<a href=\"/Legacy:Canvas\"\
      \ title=\"Legacy:Canvas\">Canvas</a> Canvas)&#160;</dt>\n<dd>Draw on canvas\
      \ before flash and fog are applied. (used for drawing weapons). Note that only\
      \ the PlayerPawn receives this call from the engine.</dd>\n<dt>RenderTexture\
      \ (<a href=\"/Legacy:ScriptedTexture_(UT)\" title=\"Legacy:ScriptedTexture (UT)\"\
      >ScriptedTexture (UT)</a> Tex)&#160;</dt>\n<dd>Called when a scripted texture\
      \ with this Actor set as NotifyActor needs rendering.</dd>\n<dt>SetDisplayProperties\
      \ (ERenderStyle NewStyle, texture NewTexture, bool bLighting, bool bEnviroMap)&#160;</dt>\n\
      <dd>Set the display properties of an actor. By setting them through this function,\
      \ it allows the actor to modify other components (such as a <a href=\"/Legacy:Pawn_(UT)\"\
      \ title=\"Legacy:Pawn (UT)\">Pawn (UT)</a>'s <a href=\"/Legacy:Weapon_(UT)\"\
      \ title=\"Legacy:Weapon (UT)\">Weapon (UT)</a>) or to adjust the result based\
      \ on other factors (such as a <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn\
      \ (UT)\">Pawn (UT)</a>'s other <a href=\"/Legacy:Inventory_(UT)\" title=\"Legacy:Inventory\
      \ (UT)\">Inventory (UT)</a> wanting to affect the result)</dd>\n<dt>SetDefaultDisplayProperties\
      \ ( )&#160;</dt>\n<dd>Sets the default display properties similar to SetDisplayProperties.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Messages\">Messages</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Actor_(UT)/Functions?section=18\" title=\"Edit section:\
      \ Messages\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>BroadcastMessage (coerce string Msg, optional bool bBeep, optional\
      \ name Type)&#160;</dt>\n<dd>Broadcast a string message to all players. This\
      \ calls ClientMessage on all <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn\
      \ (UT)\">Pawn (UT)s</a> (see <a href=\"/Legacy:Pawn_(UT)/Events\" title=\"Legacy:Pawn\
      \ (UT)/Events\">Pawn (UT)/Events</a>). See <a href=\"/Legacy:SpecialEvent\"\
      \ title=\"Legacy:SpecialEvent\">SpecialEvent</a> for an example. Type can be\
      \ one of 'Event' (default), 'CriticalEvent', 'Say', 'TeamSay', 'DeathMessage',\
      \ 'Pickup' and maybe other types for custom HUD classes.</dd>\n<dt>BroadcastLocalizedMessage\
      \ (class&lt;<a href=\"/Legacy:LocalMessage_(UT)\" title=\"Legacy:LocalMessage\
      \ (UT)\">LocalMessage (UT)</a>&gt; Message, optional int Switch, optional <a\
      \ href=\"/Legacy:PlayerReplicationInfo\" title=\"Legacy:PlayerReplicationInfo\"\
      >PlayerReplicationInfo</a> RelatedPRI_1, optional <a href=\"/Legacy:PlayerReplicationInfo\"\
      \ title=\"Legacy:PlayerReplicationInfo\">PlayerReplicationInfo</a> RelatedPRI_2,\
      \ optional <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a> OptionalObject)&#160;</dt>\n\
      <dd>Broadcast a localized message to all players. Most message deal with 0 to\
      \ 2 related PRIs. The <a href=\"/Legacy:LocalMessage_(UT)\" title=\"Legacy:LocalMessage\
      \ (UT)\">LocalMessage (UT)</a> class defines how the PRI's and optional actor\
      \ are used.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Other_Functions_2\"\
      >Other Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Actor_(UT)/Functions?section=19\" title=\"Edit\
      \ section: Other Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>HurtRadius (float DamageAmount, float DamageRadius,\
      \ name DamageName, float Momentum, vector HitLocation) [final]&#160;</dt>\n\
      <dd>Hurt other actors within a radius of this actor. <a href=\"/Legacy:ExplosionChain\"\
      \ title=\"Legacy:ExplosionChain\">ExplosionChain</a> uses this, for example.</dd>\n\
      <dt>string GetItemName (string FullName)&#160;</dt>\n<dd>Returns the string\
      \ representation of the name of an object without the package prefixes.</dd>\n\
      <dt>string GetHumanName ( )&#160;</dt>\n<dd>Returns the human readable string\
      \ representation of an object.</dd>\n</dl>\n<hr />\n<p><b>Mychaeel:</b> I've\
      \ seen that elsewhere too – I really think that everything up to and including\
      \ the \"function\" keyword should be stripped from function prototype here on\
      \ the Wiki in order to keep the clutter at a minimum. It's much more important\
      \ to see that a function returns a string value than knowing that it's native(123).</p>\n\
      <p><b>Wormbo:</b> Ok, how about putting really important stuff (final, static,\
      \ etc.) in brackets behind the function definition?<br />\nHurtRadius (float\
      \ DamageAmount, float DamageRadius, name DamageName, float Momentum, vector\
      \ HitLocation) [final]</p>\n<p><b>Mychaeel:</b> I could live with that. &#160;:-)</p>\n\
      <p><b>Wormbo:</b> How's that?</p>\n<p><b>Mychaeel:</b> Much tidier&#160;:-)</p>\n\
      <p><b>Hugh:</b> I've just made a change to the SetTimer() description - I think\
      \ I'm right, but can someone confirm?</p>\n<p><b>Zedsquared:</b> Looks good\
      \ but has anyone experimented to see what happens if timer() takes longer than\
      \ TimerRate to execute? do you get another event fired or will it wait?</p>\n\
      <p><b>Mychaeel:</b> Since UnrealScript code doesn't execute in parallel and\
      \ lengthy execution of code in Timer blocks everything else, the engine will\
      \ simply fire the next timer event in the next tick.</p>\n<p><b>BesigedB:</b>\
      \ Tick, tock, tick, tock.</p>\n<p><b>Highlander:</b> I guess this is a Trace\
      \ related question, ive noticed that when a trace() hits terrain the HitLocation\
      \ points towards the TerrainInfo actor&#160;?? Am i correct or am i loosing\
      \ my mind?</p>\n<p><b>Claw:</b> Hmm, are you certain it's the HitLocation? I\
      \ experienced something similar in UT; when a Trace hit the Level, the HitActor\
      \ would be the LevelInfo (maybe ZoneInfo if one existed, I never checked). Maybe\
      \ your code uses HitActor.Location?</p>\n<p><b>Highlander:</b> Positive, it\
      \ doesnt matter as i found a way around the particular problem that uses less\
      \ traces. It does return the TerrainInfo as the actor however, the vsize of\
      \ the hitlocation was 3000units + in my tests. (The trace was 128 units long)\
      \ and i was approximately 3000 units from the center of the map where the terrain\
      \ info was.</p>\n<p><b>Foxpaw:</b> Hitlocation is relative to the center of\
      \ the world, as far as I know... I think that the terraininfo and center of\
      \ the map just coincided. Can someone confirm this? I've noticed that in UT2003\
      \ instantfire weapons scratch the hitlocation and replace it with the end of\
      \ the trace instead of the point where the trace actually impacted the map,\
      \ that seems silly but I expect it's done that way for a reason.</p>\n<p><b>Claw:</b>\
      \ Strange, when I just tested it again with the newest patch, the HitLocation\
      \ definitely wasn't the HitActor's Location. It wasn't the correct spot either.\
      \ But I verified the error is linked to the position where the trace starts.\
      \ From the center of the map Trace works allright.</p>\n<p><b>Foxpaw:</b> HitLocation\
      \ isn't usually the location of the actor you hit, but instead the point upon\
      \ that objects collision sphere/cylinder/whatever. I'm not sure why your traces\
      \ would not be returning the correct location for hitlocation when you hit the\
      \ world - it works fine for me.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.096 seconds\nReal time usage: 0.170 seconds\nPreprocessor visited node count:\
      \ 84/1000000\nPreprocessor generated node count: 102/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:394-0!*!0!!en!*!*\
      \ and timestamp 20221118084143 and revision id 47271\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Weapon (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)/Events"
  - ns: 100
    exists: true
    name: "Legacy:Zone"
  - ns: 100
    exists: true
    name: "Legacy:ExplosionChain"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:SpecialEvent"
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:LocalMessage (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Latent Function"
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: true
    name: "Legacy:PlayerReplicationInfo"
  - ns: 100
    exists: true
    name: "Legacy:Teleporter"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 100
    exists: true
    name: "Legacy:Canvas"
  - ns: 100
    exists: true
    name: "Legacy:ZoneInfo"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: true
    name: "Legacy:Inventory (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 101
    exists: true
    name: "Legacy talk:Actor (UT)/Functions"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTexture (UT)"
  templates: []
  images: []
  externallinks:
  - "http://wiki.unrealadmin.org/images/0/00/Minishots.jpg"
  sections:
  - toclevel: 1
    level: "2"
    line: "Native Functions"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 0
    anchor: "Native_Functions"
  - toclevel: 2
    level: "3"
    line: "General Functions"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 23
    anchor: "General_Functions"
  - toclevel: 2
    level: "3"
    line: "Latent Functions"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 1146
    anchor: "Latent_Functions"
  - toclevel: 2
    level: "3"
    line: "Collision"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 2432
    anchor: "Collision"
  - toclevel: 2
    level: "3"
    line: "Movement"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 3445
    anchor: "Movement"
  - toclevel: 2
    level: "3"
    line: "Relations"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 4106
    anchor: "Relations"
  - toclevel: 2
    level: "3"
    line: "Animations"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 4218
    anchor: "Animations"
  - toclevel: 2
    level: "3"
    line: "Sounds"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 5361
    anchor: "Sounds"
  - toclevel: 2
    level: "3"
    line: "AI Functions"
    number: "1.8"
    index: "9"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 6444
    anchor: "AI_Functions"
  - toclevel: 2
    level: "3"
    line: "Other Functions"
    number: "1.9"
    index: "10"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 6805
    anchor: "Other_Functions"
  - toclevel: 1
    level: "2"
    line: "Scripted Functions and Engine Notifications"
    number: "2"
    index: "11"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 8559
    anchor: "Scripted_Functions_and_Engine_Notifications"
  - toclevel: 2
    level: "3"
    line: "General Notifications"
    number: "2.1"
    index: "12"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 8609
    anchor: "General_Notifications"
  - toclevel: 2
    level: "3"
    line: "Initialisation"
    number: "2.2"
    index: "13"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 9491
    anchor: "Initialisation"
  - toclevel: 2
    level: "3"
    line: "Triggers"
    number: "2.3"
    index: "14"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 10204
    anchor: "Triggers"
  - toclevel: 2
    level: "3"
    line: "Physics and World Interaction"
    number: "2.4"
    index: "15"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 10489
    anchor: "Physics_and_World_Interaction"
  - toclevel: 2
    level: "3"
    line: "Damage"
    number: "2.5"
    index: "16"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 12764
    anchor: "Damage"
  - toclevel: 2
    level: "3"
    line: "Rendering"
    number: "2.6"
    index: "17"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 12999
    anchor: "Rendering"
  - toclevel: 2
    level: "3"
    line: "Messages"
    number: "2.7"
    index: "18"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 13956
    anchor: "Messages"
  - toclevel: 2
    level: "3"
    line: "Other Functions"
    number: "2.8"
    index: "19"
    fromtitle: "Legacy:Actor_(UT)/Functions"
    byteoffset: 14934
    anchor: "Other_Functions_2"
  displaytitle: "Legacy:Actor (UT)/Functions"
  iwlinks: []
  wikitext:
    text: "==Native Functions ==\n\n===General Functions ===\n; string ConsoleCommand\
      \ (string Command) [native, but not final] : Execute a console command.\n; Error\
      \ (coerce string S) : Handle an error and kill this one actor.\n; [[Legacy:Actor|Actor]]\
      \ Spawn (class<[[Legacy:Actor|Actor]]> SpawnClass, optional [[Legacy:Actor|Actor]]\
      \ SpawnOwner, optional name SpawnTag, optional vector SpawnLocation, optional\
      \ rotator SpawnRotation) : Spawn an actor. Returns an actor of the specified\
      \ class, not of class Actor (this is hardcoded in the compiler). Returns None\
      \ if the actor could not be spawned (either the actor wouldn't fit in the specified\
      \ location, or the actor list is full). Defaults to spawning at the spawner's\
      \ location and with the spawner's rotation.\n; bool Destroy() : Destroy this\
      \ actor. Returns true if destroyed, false if indestructable. Destruction is\
      \ latent. It occurs at the end of the tick.\n; SetTimer (float NewTimerRate,\
      \ bool bLoop) : If bLoop is true, causes <tt>Timer()</tt> events every NewTimerRate\
      \ seconds. Otherwise, causes <tt>Timer()</tt> to be called once in NewTimerRate\
      \ seconds. <code>SetTimer(0.0, False);</code> stops the timer.\n\n===Latent\
      \ Functions ===\n\n[[Legacy:Latent Function|Latent Function]] are special native\
      \ functions that can only be used in [[Legacy:State|state]] code. (i.e. in labels\
      \ outside of functions within states.  See ScriptedPawn's script for excellent\
      \ examples).  They will cause script execution within the state to pause until\
      \ some condition is met. All other functions and states in other classes will\
      \ continue to execute normally.\n\nWhile you cannot define new latent functions,\
      \ it possible to pull a similar effect:\n\n<uscript>\nWhile (!SomeConditionIsMet())\
      \ //Pause until this function returns true\n  Sleep(0.0);\n</uscript>\n\n; Sleep\
      \ (float Seconds) : Waits for the specified amount of time.  Note using continual\
      \ low values of sleep() (<0.1) is not recommended, as this creates signnificant\
      \ dependance on frame rate.  For instance, the minigun has this problem, where\
      \ different frame rates make it fire different amounts of bullets in a second.\
      \  See [http://wiki.unrealadmin.org/images/0/00/Minishots.jpg this graph].\n\
      ; FinishAnim ( ) : Waits till the current animation is finished.  WARNING: If\
      \ you have an AnimEnd() that plays a new animation, this will never pass!\n\
      ; FinishInterpolation ( ) : Only used mostly in movers. Pauses until the mover\
      \ has finished interpolated to the next key.\n\n===Collision ===\n; SetCollision\
      \ (optional bool NewColActors, optional bool NewBlockActors, optional bool NewBlockPlayers)\
      \ : \n; bool SetCollisionSize (float NewRadius, float NewHeight) : \n; [[Legacy:Actor|Actor]]\
      \ Trace (out vector HitLocation, out vector HitNormal, vector TraceEnd, optional\
      \ vector TraceStart, optional bool bTraceActor, optional vector Extent) : Trace\
      \ a line and see what it collides with first. Takes this actor's collision properties\
      \ into account. Returns first hit actor, the [[Legacy:LevelInfo|LevelInfo]]\
      \ if hit level geometry, or ''None'' if hit nothing. bTraceActors specifies\
      \ whether Trace should check for actors at all.\n\n'''Highlander:''' UT2003\
      \ info, Trace returns as expected the static mesh actor if it hits a static\
      \ mesh, and returns the TerrainInfo if it hits terrain.\n; bool FastTrace (vector\
      \ TraceEnd, optional vector TraceStart) : Returns ''True'' when there is no\
      \ world geometry between the two points. The actor's location is used as start\
      \ if no ''TraceStart'' is specified.\n\n===Movement ===\n; bool Move (vector\
      \ Delta) : Moves an actor to Location + Delta.  Stops if is blocked.\n; bool\
      \ SetLocation (vector NewLocation) : Self-explanatory\n; bool SetRotation (rotator\
      \ NewRotation) : Self-explanatory. See also [[Legacy:Rotator|rotator]].\n; bool\
      \ MoveSmooth (vector Delta) : Moves an actor to Location + Delta.  If blocked,\
      \ the actor will slide on the object it collided with (i.e. as your player does\
      \ when you walk into a wall).\n; AutonomousPhysics (float DeltaSeconds) : Used\
      \ in PlayerPawn in netgames.  Causes Physics to be handed with a DeltaTime of\
      \ DeltaSeconds.\n; SetPhysics (EPhysics newPhysics) : Sets the actor's movement\
      \ physics.\n\n===Relations ===\n; SetBase ([[Legacy:Actor|Actor]] NewBase) :\
      \ \n; SetOwner ([[Legacy:Actor|Actor]] NewOwner) : \n\n===Animations ===\n;\
      \ PlayAnim (name Sequence, optional float Rate, optional float TweenTime): Plays\
      \ an Animation (must have a mesh set for this to work!)\n;* Sequence = Anim\
      \ sequence Name\n;* Rate = Animation Rate multiplier\n;* TweenTime = Amount\
      \ of Time to \"tween\" into the first frame of this animation sequence if in\
      \ a different sequence.\n; LoopAnim (name Sequence, optional float Rate, optional\
      \ float TweenTime, optional float MinRate, optional bool bTweenFrame): Plays\
      \ an animation that loops until another animation is played. \"227j: bTweenFrame\
      \ = if true, will keep looping animation with the new sequence but simply tween\
      \ from old animation to new one while playing.\" -BK\n; TweenAnim (name Sequence,\
      \ float Time): Tween into a new animation.\n; bool IsAnimating ( ): Returns\
      \ whether the actor's mesh currently plays an animation.\n; name GetAnimGroup\
      \ (name Sequence): Returns the group of the actor's current animation.\n; bool\
      \ HasAnim (name Sequence): Returns whether the specified animation is present\
      \ for the actor's current mesh.\n; LinkSkelAnim (Animation Anim): Generally\
      \ never used.  Will Link a Skeletal animation to a skeletal mesh.\n\n=== Sounds\
      \ ===\n; PlaySound (sound Sound, optional ESoundSlot Slot, optional float Volume,\
      \ optional bool bNoOverride, optional float Radius, optional float Pitch): Plays\
      \ a sound.\n:* Slot: Sound slot (allows actors to play multiple sounds at once)\n\
      :* bNoOverride: If true and a sound is currently playing in the specified slot,\
      \ the new sound will not play (override the current sound).\n:* Volume, Radius,\
      \ Pitch: [[Legacy_talk:Actor_(UT)/Functions#Convert_sound_variables_to_PlaySound_parameters|see\
      \ discussion]]\n; PlayOwnedSound (sound Sound, optional ESoundSlot Slot, optional\
      \ float Volume, optional bool bNoOverride, optional float Radius, optional float\
      \ Pitch) [simulated] : This plays a sound that will not be replicated to network\
      \ clients. It is generally used for first-person weapon sound effects, HUD notifications,\
      \ etcetera.\n; DemoPlaySound (sound Sound, optional ESoundSlot Slot, optional\
      \ float Volume, optional bool bNoOverride, optional float Radius, optional float\
      \ Pitch) [simulated]: \n; float GetSoundDuration (sound Sound) : Returns the\
      \ length of the sound in seconds.\n\n===AI Functions ===\n; MakeNoise (float\
      \ Loudness) : Inform other creatures that you've made a noise they might hear\
      \ (they are sent a HearNoise message). Senders of MakeNoise should have an Instigator\
      \ if they are not [[Legacy:Pawn (UT)|Pawn (UT)]]s.\n; bool PlayerCanSeeMe (\
      \ ) : PlayerCanSeeMe returns true if some player has a line of sight to actor's\
      \ location.\n\n===Other Functions ===\n; string GetMapName (string NameEnding,\
      \ string MapName, int Dir) : The horribly slow function that uses an O(X^2)\
      \ algorithm to find maps.  When searching for maps it's useful to set the ''NameEnding''\
      \ parameter to the prefix for the type of maps you are looking for.  The ''MapName''\
      \ parameter can be set to any map name (possibly even maps that don't exist)\
      \ and its value is used to derive the name of the next map returned by this\
      \ function.  The ''Dir'' parameter should be set to 1 to move forwards in the\
      \ list of map names, -1 to move backwards, and 0 to return the same map.  A\
      \ ''Dir'' of 0 is only ever used with a ''MapName'' value of \"\" to obtain\
      \ the first map in the list of maps for a given map prefix.  Be aware that this\
      \ function will loop from the last map in a \"list\" to the \"first\" map in\
      \ the list without warning.\n; GetNextSkin (string Prefix, string CurrentSkin,\
      \ int Dir, out string SkinName, out string SkinDesc) : Another slow function\
      \ that finds skins.\n; string GetURLMap ( ) : Supposedly returns the current\
      \ map's filename. (although gives false results in save games and demos).\n\
      ; string GetNextInt (string ClassName, int Num) : Reads through the INT files\
      \ in the system directory and returns the classname of entries with a MetaClass\
      \ given by ClassName.\n; GetNextIntDesc (string ClassName, int Num, out string\
      \ Entry, out string Description) : Like GetNextINT, only supports the Description\
      \ tag in INT files.\n; bool GetCacheEntry (int Num, out string GUID, out string\
      \ Filename) : Reads through the cache.ini and returns the FileName and GUID\
      \ of files within the cache directory.\n; bool MoveCacheEntry (string GUID,\
      \ optional string NewFilename) :  Will \"move\" an entry somewhere... (haven't\
      \ fully tested it).\n\n==Scripted Functions and Engine Notifications ==\n\n\
      ===General Notifications ===\n; AnimEnd ( ) : Called when an animation has completed.\n\
      ; Destroyed ( ) : Called when the actor is destroyed.\n; Expired ( ) : Called\
      \ when the actor's LifeSpan has reached 0.\n; GainedChild ([[Legacy:Actor|Actor]]\
      \ Other) : Called when this actor becomes the Owner of other.\n; LostChild ([[Legacy:Actor|Actor]]\
      \ Other) : Called when this actor is no longer the Owner of other (including\
      \ other being destroyed()).\n; Tick (float DeltaTime) : Called once each frame.\
      \ DeltaTime is the time that has passed since the last frame.\n; Timer ( ) :\
      \ Called when the Timer has expired (Launched by SetTimer()).\n; TravelPreAccept\
      \ ( ) : Called when carried onto a new level, before AcceptInventory.\n; TravelPostAccept\
      \ ( ) : Called when carried into a new level, after AcceptInventory.\n; BecomeViewTarget\
      \ ( ) : Called by PlayerPawn when this actor becomes its ViewTarget.\n\n===Initialisation\
      \ ===\n\n(also see [[Legacy:Creating Actors And Objects|Creating Actors and\
      \ Objects]])\n; Spawned ( ) : Called only when the actor is created using the\
      \ Spawn method.\n; PreBeginPlay ( ) : Called immediately before gameplay begins.\n\
      ; BeginPlay ( ) : Called when gameplay begins.\n; PostBeginPlay ( ) : Called\
      \ after gameplay begins, before variables have been replicated to the clients.\n\
      ; SetInitialState ( ) [simulated] : Called after PostBeginPlay to set the initial\
      \ state of the actor.\n; PostNetBeginPlay ( ) [simulated] : Called on net clients\
      \ after the data packet that spawned this actor has been completely processed.\
      \  However, replicated variables are NOT guarenteed to have reached the client.\n\
      \n===Triggers ===\n; Trigger ([[Legacy:Actor|Actor]] Other, [[Legacy:Pawn (UT)|Pawn\
      \ (UT)]] EventInstigator) : Handled in subclasses.\n; UnTrigger ([[Legacy:Actor|Actor]]\
      \ Other, [[Legacy:Pawn (UT)|Pawn (UT)]] EventInstigator) : Handled in subclasses.\n\
      ; BeginEvent ( ) : \n; EndEvent ( ) : \n\n===Physics and World Interaction ===\n\
      ; HitWall (vector HitNormal, [[Legacy:Actor|Actor]] HitWall) : Called when the\
      \ actor hits a fall. ( NB, defined for projectile actors only and called from\
      \ within touch() if the touching actor has blockall set. )\n; Falling ( ) :\
      \ Called when Pawns begin to fall.\n; Landed (vector HitNormal) : Called when\
      \ an actor hits the ground.  (What is the angle in relation to a flat plane\
      \ that the ground must be at to be considered ground and not a wall?)\n; ZoneChange\
      \ ([[Legacy:ZoneInfo|ZoneInfo]] NewZone) : Called when actor is about to enter\
      \ a new [[Legacy:Zone|Zone]].\n; Touch ([[Legacy:Actor|Actor]] Other) : Called\
      \ when Other touches this actor (and this actor doesn't block that actor).\n\
      ; PostTouch ([[Legacy:Actor|Actor]] Other) :  // called for PendingTouch actor\
      \ after physics completes\n; UnTouch ([[Legacy:Actor|Actor]] Other) : Called\
      \ when Other is no longer touching this actor.\n; Bump ([[Legacy:Actor|Actor]]\
      \ Other) : Called when an actor bumps into this actor and is blocked.\n; BaseChange\
      \ ( ) : Called when the actor's base changes.\n; Attach ([[Legacy:Actor|Actor]]\
      \ Other) : \n; Detach ([[Legacy:Actor|Actor]] Other) : \n; KillCredit ([[Legacy:Actor|Actor]]\
      \ Other) : Not implemented in Epic's Code.\n; [[Legacy:Actor|Actor]] SpecialHandling\
      \ ([[Legacy:Pawn (UT)|Pawn (UT)]] Other) : Used by the navigation system to\
      \ modify results.\n; bool EncroachingOn ([[Legacy:Actor|Actor]] Other) : Called\
      \ when this actor is trying to take up the same space as Other. (and block each\
      \ other?)\n; EncroachedBy ([[Legacy:Actor|Actor]] Other) : Called when Other\
      \ has taken up this actor's space. (and block each other).\n; InterpolateEnd\
      \ ([[Legacy:Actor|Actor]] Other) : \n; EndedRotation ( ) : Called when an actor's\
      \ rotation has reached DesiredRotation?\n; FellOutOfWorld ( ) : This is called\
      \ when an actor enters zone 0. Zone 0 is the region of non-subtracted space\
      \ in your level. Actors can enter this zone through BSP errors or if they are\
      \ of a type that does not collide with the world.\n; bool PreTeleport ([[Legacy:Teleporter|Teleporter]]\
      \ InTeleporter) : Called by InTeleporter when trying to Teleport this actor.\
      \ Return true to prevent Teleporter from Teleporting.\n; PostTeleport ([[Legacy:Teleporter|Teleporter]]\
      \ OutTeleporter ) : Not implemented?\n\n===Damage ===\n; KilledBy ([[Legacy:Pawn\
      \ (UT)|Pawn (UT)]] EventInstigator) : \n; TakeDamage (int Damage, [[Legacy:Pawn\
      \ (UT)|Pawn (UT)]] EventInstigator, vector HitLocation, vector Momentum, name\
      \ DamageType) : Implemented in subclasses.\n\n===Rendering ===\n; RenderOverlays\
      \ ([[Legacy:Canvas|Canvas]] Canvas) : Draw on canvas before flash and fog are\
      \ applied. (used for drawing weapons).  Note that only the PlayerPawn receives\
      \ this call from the engine.\n; RenderTexture ([[Legacy:ScriptedTexture (UT)|ScriptedTexture\
      \ (UT)]] Tex) : Called when a scripted texture with this Actor set as NotifyActor\
      \ needs rendering.\n; SetDisplayProperties (ERenderStyle NewStyle, texture NewTexture,\
      \ bool bLighting, bool bEnviroMap) : Set the display properties of an actor.\
      \  By setting them through this function, it allows the actor to modify other\
      \ components (such as a [[Legacy:Pawn (UT)|Pawn (UT)]]'s [[Legacy:Weapon (UT)|Weapon\
      \ (UT)]]) or to adjust the result based on other factors (such as a [[Legacy:Pawn\
      \ (UT)|Pawn (UT)]]'s other [[Legacy:Inventory (UT)|Inventory (UT)]] wanting\
      \ to affect the result)\n; SetDefaultDisplayProperties ( ) : Sets the default\
      \ display properties similar to SetDisplayProperties.\n\n===Messages ===\n;\
      \ BroadcastMessage (coerce string Msg, optional bool bBeep, optional name Type)\
      \ : Broadcast a string message to all players. This calls ClientMessage on all\
      \ [[Legacy:Pawn (UT)|Pawn (UT)]]s (see [[Legacy:Pawn (UT)/Events|Pawn (UT)/Events]]).\
      \ See [[Legacy:SpecialEvent|SpecialEvent]] for an example. Type can be one of\
      \ 'Event' (default), 'CriticalEvent', 'Say', 'TeamSay', 'DeathMessage', 'Pickup'\
      \ and maybe other types for custom HUD classes.\n; BroadcastLocalizedMessage\
      \ (class<[[Legacy:LocalMessage (UT)|LocalMessage (UT)]]> Message, optional int\
      \ Switch, optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]] RelatedPRI_1,\
      \ optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]] RelatedPRI_2,\
      \ optional [[Legacy:Object|Object]] OptionalObject) : Broadcast a localized\
      \ message to all players. Most message deal with 0 to 2 related PRIs. The [[Legacy:LocalMessage\
      \ (UT)|LocalMessage (UT)]] class defines how the PRI's and optional actor are\
      \ used.\n\n===Other Functions ===\n; HurtRadius (float DamageAmount, float DamageRadius,\
      \ name DamageName, float Momentum, vector HitLocation) [final] : Hurt other\
      \ actors within a radius of this actor. [[Legacy:ExplosionChain|ExplosionChain]]\
      \ uses this, for example.\n; string GetItemName (string FullName) : Returns\
      \ the string representation of the name of an object without the package prefixes.\n\
      ; string GetHumanName ( ) : Returns the human readable string representation\
      \ of an object.\n\n----\n\n'''Mychaeel:'''  I've seen that elsewhere too &ndash;\
      \ I really think that everything up to and including the \"function\" keyword\
      \ should be stripped from function prototype here on the Wiki in order to keep\
      \ the clutter at a minimum.  It's much more important to see that a function\
      \ returns a string value than knowing that it's native(123).\n\n'''Wormbo:'''\
      \ Ok, how about putting really important stuff (final, static, etc.) in brackets\
      \ behind the function definition? <br />HurtRadius (float DamageAmount, float\
      \ DamageRadius, name DamageName, float Momentum, vector HitLocation) [final]\n\
      \n'''Mychaeel:'''  I could live with that.  :-)\n\n'''Wormbo:''' How's that?\n\
      \n'''Mychaeel:'''  Much tidier :-)\n\n'''Hugh:''' I've just made a change to\
      \ the SetTimer() description - I think I'm right, but can someone confirm?\n\
      \n'''Zedsquared:''' Looks good but has anyone experimented to see what happens\
      \ if timer() takes longer than TimerRate to execute? do you get another event\
      \ fired or will it wait?\n\n'''Mychaeel:'''  Since UnrealScript code doesn't\
      \ execute in parallel and lengthy execution of code in Timer blocks everything\
      \ else, the engine will simply fire the next timer event in the next tick.\n\
      \n'''BesigedB:'''  Tick, tock, tick, tock.\n\n'''Highlander:''' I guess this\
      \ is a Trace related question, ive noticed that when a trace() hits terrain\
      \ the HitLocation points towards the TerrainInfo actor ?? Am i correct or am\
      \ i loosing my mind?\n\n'''Claw:''' Hmm, are you certain it's the HitLocation?\
      \ I experienced something similar in UT; when a Trace hit the Level, the HitActor\
      \ would be the LevelInfo (maybe ZoneInfo if one existed, I never checked). Maybe\
      \ your code uses HitActor.Location?\n\n'''Highlander:''' Positive, it doesnt\
      \ matter as i found a way around the particular problem that uses less traces.\
      \ It does return the TerrainInfo as the actor however, the vsize of the hitlocation\
      \ was 3000units + in my tests. (The trace was 128 units long) and i was approximately\
      \ 3000 units from the center of the map where the terrain info was.\n\n'''Foxpaw:'''\
      \ Hitlocation is relative to the center of the world, as far as I know... I\
      \ think that the terraininfo and center of the map just coincided. Can someone\
      \ confirm this? I've noticed that in UT2003 instantfire weapons scratch the\
      \ hitlocation and replace it with the end of the trace instead of the point\
      \ where the trace actually impacted the map, that seems silly but I expect it's\
      \ done that way for a reason.\n\n'''Claw:''' Strange, when I just tested it\
      \ again with the newest patch, the HitLocation definitely wasn't the HitActor's\
      \ Location. It wasn't the correct spot either. But I verified the error is linked\
      \ to the position where the trace starts. From the center of the map Trace works\
      \ allright.\n\n'''Foxpaw:''' HitLocation isn't usually the location of the actor\
      \ you hit, but instead the point upon that objects collision sphere/cylinder/whatever.\
      \ I'm not sure why your traces would not be returning the correct location for\
      \ hitlocation when you hit the world - it works fine for me."
  properties: []
  revId: 47271
name: "Legacy:Actor (UT)/Functions"
revision:
  revid: 47271
  parentid: 46429
  user: "172.18.0.3"
  timestamp: 1651520983.000000000
  comment: ""
timestamp: 1668773890.239200000
