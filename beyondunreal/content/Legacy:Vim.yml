---
parse:
  title: "Legacy:Vim"
  text:
    text: "<p>Vim is a <a href=\"/Legacy:Text_Editor\" title=\"Legacy:Text Editor\"\
      >text editor</a></p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Editing_with_Vim\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Editing with Vim</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Useful_Scripts\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Useful Scripts</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"\
      ><a href=\"#Tags\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Tags</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#vimrc\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">_vimrc</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Taglist\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Taglist</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Make\"><span class=\"tocnumber\">6</span> <span\
      \ class=\"toctext\">Make</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">7</span> <span class=\"toctext\"\
      >Comments</span></a></li>\n</ul>\n</div>\n<p></p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Editing_with_Vim\">Editing with Vim</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=1\"\
      \ title=\"Edit section: Editing with Vim\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>So you want to join the legions of masochists that\
      \ edit files using the archaic VI-style keybindings? Editing using a VI clone\
      \ may have a massive learning curve, but by and large the speed gains you get\
      \ when mastering the editor outstrip any need for GUI hand-holding. Using Vim\
      \ is truly Zen and the Art of Editing Source (IMHO anyway&#160;;)).</p>\n<p>This\
      \ is all you need to know: <a rel=\"nofollow\" class=\"external free\" href=\"\
      http://www.vim.org\">http://www.vim.org</a></p>\n<p>This page isn't meant to\
      \ be a tutorial on generic editing but I will point out a few pages that are\
      \ very helpful:</p>\n<ul>\n<li>The Best of Vim Tips (<i>very</i> good stuff\
      \ here) <a rel=\"nofollow\" class=\"external free\" href=\"http://www.rayninfo.co.uk/vimtips.html\"\
      >http://www.rayninfo.co.uk/vimtips.html</a></li>\n<li>Linux Productivity Magazine\
      \ article about VI and Vim with lots of good info <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://www.troubleshooters.com/lpm/200212/200212.htm\"\
      >http://www.troubleshooters.com/lpm/200212/200212.htm</a></li>\n<li>The Vim\
      \ Cookbook with some neat stuff to do <a rel=\"nofollow\" class=\"external free\"\
      \ href=\"http://www.oualline.com/vim-cook.html\">http://www.oualline.com/vim-cook.html</a></li>\n\
      </ul>\n<p>Vim has built-in UnrealScript syntax highlighting!</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Useful_Scripts\">Useful Scripts</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=2\"\
      \ title=\"Edit section: Useful Scripts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>BufExplorer for switching between multiple\
      \ files at the same time: <a rel=\"nofollow\" class=\"external free\" href=\"\
      http://www.vim.org/scripts/script.php?script_id=42\">http://www.vim.org/scripts/script.php?script_id=42</a></li>\n\
      <li>TagList source code browser (uses Tags discussed below): <a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://www.vim.org/scripts/script.php?script_id=273\"\
      >http://www.vim.org/scripts/script.php?script_id=273</a></li>\n</ul>\n<h3><span\
      \ class=\"mw-headline\" id=\"Tags\">Tags</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=3\"\
      \ title=\"Edit section: Tags\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>One of the more useful things you can do in Vim is\
      \ the build in Tags support. Implemented correctly navigating around the UnrealScript\
      \ source is as easy as moving your cursor over a class or function name and\
      \ pressing <tt>CTRL-]</tt>. This will open the associated file in a new buffer.\
      \ Pressing <tt>CTRL-t</tt> will pop you back into the previously viewed file.</p>\n\
      <p>Getting all this to work correctly is a bit tricky, however. I suggest you\
      \ take a look at the <a href=\"/Legacy:UltraEdit\" title=\"Legacy:UltraEdit\"\
      >UltraEdit</a> page which has thorough explanation of setting up the ctags file.\
      \ Here are a couple of caveats:</p>\n<ul>\n<li>I use the default name 'tags'\
      \ for all of my tag files since I'm editing different types of source and it's\
      \ easier to use one filename than have to specify different filenames for every\
      \ source I use tags with.\n<ul>\n<li>Because of this my command for running\
      \ ctags is\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\">ctags <span class=\"\
      sy0\">--</span>options<span class=\"sy0\">=</span>ctags.<span class=\"me0\"\
      >cfg</span> <span class=\"sy0\">-</span>V <span class=\"sy0\">-</span>f <span\
      \ class=\"st0\">\"C:<span class=\"es0\">\\U</span>T2003<span class=\"es0\">\\\
      t</span>ags\"</span> <span class=\"st0\">\"C:<span class=\"es0\">\\U</span>T2003\"\
      </span></pre></div>\n</div>\n<ul>\n<li><tt>-V-</tt> is for verbose</li>\n<li><tt>--options=ctags.cfg--</tt>\
      \ sets a file that holds command-line options (next caveat)</li>\n</ul>\n</li>\n\
      </ul>\n</li>\n<li>I've updated the ctags config file from the <a href=\"/Legacy:UltraEdit\"\
      \ title=\"Legacy:UltraEdit\">UltraEdit</a> page because I was getting odd results.\
      \ This one works for UT2k3 (<b>ctags.cfg</b>):</li>\n</ul>\n<pre>--langdef=INI\n\
      --langmap=INI:.ini\n--regex-INI=/^[ \\t]*\\[(.*)\\]/\\1/b,block/\n--regex-INI=/^[\
      \ \\t]*([^\\[=]+)=(.*)/\\1/k,key/\n--langdef=unrealscript\n--langmap=unrealscript:.uc\n\
      --regex-unrealscript=/^[ \\t]*[cC]lass[ \\t]*([a-zA-Z0-9_]+)/\\1/c,class/\n\
      --regex-unrealscript=/^[ \\t]*[sS]tate[() \\t]*([a-zA-Z0-9]+)/\\1/s,state/\n\
      --regex-unrealscript=/^[ \\t]*[sS]imulated[ \\t]*(.*)[ \\t]+([a-zA-Z0-9_]+)\\\
      (/\\2/i,simulated/\n--regex-unrealscript=/^[ \\t]*[eE]vent[ \\t]*[^ \\t]*[ \\\
      t]+([a-zA-Z0-9_]+)\\(/\\1/e,event/\n--regex-unrealscript=/^[ \\t]*[fF]unction[\
      \ \\t]*(.*)[ \\t]+([a-zA-Z0-9_]+)\\(/\\2/f,function/\n--recurse\n</pre>\n<ul>\n\
      <li>\n<ul>\n<li>Basically this tells the ctags utility what regular expressions\
      \ to use to get points of interest. The one above tells ctags to take into account\
      \ class, state, simulated, event and function declarations. You can use these\
      \ five types declarations to browse the source tree after we're done.</li>\n\
      </ul>\n</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"vimrc\">_vimrc</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vim?section=4\" title=\"Edit section: vimrc\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The _vimrc file\
      \ holds a user's settings and commands Vim will run on startup. This is where\
      \ configuration commands should go get get this stuff to work. Here's is what\
      \ will need to go into this file as well as some added helpful/useful items:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"st0\">\" search for tags\
      \ file in parent directories\nset tags=tags;/\n \n\"</span> <span class=\"kw2\"\
      >For</span> Taglist\nnnoremap <span class=\"sy0\">&lt;</span>silent<span class=\"\
      sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>F8<span class=\"sy0\">&gt;</span>\
      \ :Tlist<span class=\"sy0\">&lt;</span>CR<span class=\"sy0\">&gt;</span> \n\
      nnoremap <span class=\"sy0\">&lt;</span>silent<span class=\"sy0\">&gt;</span>\
      \ <span class=\"sy0\">&lt;</span>F9<span class=\"sy0\">&gt;</span> :TlistSync<span\
      \ class=\"sy0\">&lt;</span>CR<span class=\"sy0\">&gt;</span>\nlet Tlist_Use_Right_Window\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n<span class=\"\
      st0\">\" to make Taglist work with UnrealScript\nau FileType uc let Tlist_Ctags_Cmd\
      \ = 'ctags.exe --options=\"</span>C:\\UT2003\\ctags.<span class=\"me0\">cfg</span><span\
      \ class=\"st0\">\"'\nlet tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'\n\
      \ \n\"</span> <span class=\"kw2\">For</span> File Browser\nnnoremap <span class=\"\
      sy0\">&lt;</span>silent<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>F12<span\
      \ class=\"sy0\">&gt;</span> :Exp<span class=\"sy0\">&lt;</span>CR<span class=\"\
      sy0\">&gt;</span>\n \n<span class=\"st0\">\" auto-change the directory to the\
      \ current buffer\nautocmd BufEnter * :cd %:p:h\n \n\"</span> BufExplorer\nnnoremap\
      \ <span class=\"sy0\">&lt;</span>silent<span class=\"sy0\">&gt;</span> <span\
      \ class=\"sy0\">&lt;</span>F11<span class=\"sy0\">&gt;</span> :BufExplorer<span\
      \ class=\"sy0\">&lt;</span>CR<span class=\"sy0\">&gt;</span></pre></div>\n</div>\n\
      <p>These will require some explanation. So in order:</p>\n<dl>\n<dt><code>set\
      \ tags=tags;/</code>&#160;</dt>\n<dd>This tells Vim to search for the tags file\
      \ named 'tags' starting with the directory of the open file and moving up the\
      \ directory tree until it's found.</dd>\n<dt><code>nnoremap &lt;silent&gt; &lt;F8&gt;&#160;:Tlist&lt;CR&gt;</code>&#160;</dt>\n\
      <dd>This is for opening and closing the Taglist script (<a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://www.vim.org/scripts/script.php?script_id=273\"\
      >http://www.vim.org/scripts/script.php?script_id=273</a>)</dd>\n<dt><code>nnoremap\
      \ &lt;silent&gt; &lt;F9&gt;&#160;:TlistSync&lt;CR&gt;</code>&#160;</dt>\n<dd>This\
      \ is to force immediate syncing of the Taglist window with the current cursor\
      \ position</dd>\n<dt><code>let Tlist_Use_Right_Window = 1</code>&#160;</dt>\n\
      <dd>Makes the TagList appear on the right side</dd>\n<dt><code>au FileType uc\
      \ let Tlist_Ctags_Cmd = 'ctags.exe –options=\"C:\\UT2003\\ctags.cfg\"'</code>&#160;</dt>\n\
      <dd>Specifies the ctags command the TagList should use. Since we must use a\
      \ custom config file to specify the unrealscript file type that needs to be\
      \ in the command.</dd>\n<dt><code>let tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'</code>&#160;</dt>\n\
      <dd>Specifies how the TagList should be displayed for unrealscript files.</dd>\n\
      <dt><code>nnoremap &lt;silent&gt; &lt;F12&gt;&#160;:Exp&lt;CR&gt;</code>&#160;</dt>\n\
      <dd>Opens a file explorer. Useful for opening files in the same directory as\
      \ the current file.</dd>\n<dt><code>autocmd BufEnter *&#160;:cd&#160;%:p:h</code>&#160;</dt>\n\
      <dd>This makes the Vim working directory move to the directory of the file is\
      \ currently being edited</dd>\n<dt><code>nnoremap &lt;silent&gt; &lt;F11&gt;&#160;:BufExplorer&lt;CR&gt;</code>&#160;</dt>\n\
      <dd>Opens the BufferExplorer (<a rel=\"nofollow\" class=\"external free\" href=\"\
      http://www.vim.org/scripts/script.php?script_id=42\">http://www.vim.org/scripts/script.php?script_id=42</a>)</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Taglist\">Taglist</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=5\"\
      \ title=\"Edit section: Taglist\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The Taglist script is an information window that mimics\
      \ many IDEs which show a birds-eye-view of the code. All landmarks can be seen,\
      \ function declarations and other things. The _vimrc file declared above should\
      \ be adequate to get this to work. The <code>let tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'</code>\
      \ line can be edited to change the order that the sections appear or be removed\
      \ all together. just change the order of the s:state or e:event bits.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Make\">Make</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=6\"\
      \ title=\"Edit section: Make\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Vim's Make functionality can be changed to use <a\
      \ href=\"/Legacy:Ucc\" title=\"Legacy:Ucc\">ucc</a>. On a compile-time error,\
      \ Vim will move the cursor to the buffer and line number an error occured on.</p>\n\
      <p>Here's some more additions to your <b>_vimrc</b> file:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">autocmd FileType uc set makeprg<span class=\"sy0\">=</span>C:\\\
      \\UT2003\\\\system\\\\ucc\\ make\nautocmd FileType uc set efm<span class=\"\
      sy0\">=%</span>f<span class=\"br0\">(</span><span class=\"sy0\">%</span>l<span\
      \ class=\"br0\">)</span>\\ :\\ <span class=\"sy0\">%</span>m</pre></div>\n</div>\n\
      <p>Change your pathnames as appropiate of course. This will allow the command\
      \ <code>:make</code> to use ucc and it will recognize the error format correctly.\
      \ Vim will automatically jump to the uc file and line number with the error\
      \ even if it isn't open. <code>:cn</code> will go to the next error, <code>:cp</code>\
      \ to the previous. <code>:cl</code> will list all errors.</p>\n<p>So far it\
      \ will only recognize errors within code. Any warnings or problems with default\
      \ properties it will not recognize. You will get a \"shell returned 1\" message\
      \ however. In the future I want to modify the efm line above to recognize more\
      \ errors and warnings from ucc to make it more streamlined. Omitting the line\
      \ altogether actually works, Vim seems to get the general gist of ucc's error\
      \ format.</p>\n<p>Type <code>:help quickfix</code> within Vim for more commands\
      \ and information on how to use this functionality.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vim?section=7\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>SocratesJohnson:</b> Well here's my first stab\
      \ at how to get the Vim editor to work well with UnrealScript. Any questions/comments/rants\
      \ please let me know!</p>\n<p><b>Erik:</b> vim comes with the appropriate fu,\
      \ automagic on all my unix systems and even my winderz box...&#160;:) syntax/uc.vim\
      \ notes that it was last modified \"2001 May 10\"</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.087 seconds\nReal time usage: 0.091 seconds\nPreprocessor\
      \ visited node count: 64/1000000\nPreprocessor generated node count: 120/1000000\n\
      Post‐expand include size: 3/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3602-0!*!0!!en!*!*\
      \ and timestamp 20221118024034 and revision id 42491\n -->\n"
  categories:
  - sortkey: "Vim"
    name: "Legacy_Application"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Ucc"
  - ns: 100
    exists: true
    name: "Legacy:UltraEdit"
  - ns: 100
    exists: true
    name: "Legacy:Text Editor"
  templates: []
  images: []
  externallinks:
  - "http://www.troubleshooters.com/lpm/200212/200212.htm"
  - "http://www.vim.org/scripts/script.php?script_id=42"
  - "http://www.rayninfo.co.uk/vimtips.html"
  - "http://www.oualline.com/vim-cook.html"
  - "http://www.vim.org/scripts/script.php?script_id=273"
  - "http://www.vim.org"
  sections:
  - toclevel: 1
    level: "3"
    line: "Editing with Vim"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Vim"
    byteoffset: 45
    anchor: "Editing_with_Vim"
  - toclevel: 1
    level: "3"
    line: "Useful Scripts"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Vim"
    byteoffset: 935
    anchor: "Useful_Scripts"
  - toclevel: 1
    level: "3"
    line: "Tags"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Vim"
    byteoffset: 1188
    anchor: "Tags"
  - toclevel: 1
    level: "3"
    line: "_vimrc"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Vim"
    byteoffset: 3317
    anchor: "vimrc"
  - toclevel: 1
    level: "3"
    line: "Taglist"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Vim"
    byteoffset: 5666
    anchor: "Taglist"
  - toclevel: 1
    level: "3"
    line: "Make"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Vim"
    byteoffset: 6180
    anchor: "Make"
  - toclevel: 1
    level: "3"
    line: "Comments"
    number: "7"
    index: "7"
    fromtitle: "Legacy:Vim"
    byteoffset: 7437
    anchor: "Comments"
  displaytitle: "Legacy:Vim"
  iwlinks: []
  wikitext:
    text: "Vim is a [[Legacy:Text Editor|text editor]]\n\n===Editing with Vim ===\n\
      \nSo you want to join the legions of masochists that edit files using the archaic\
      \ VI-style keybindings?  Editing using a VI clone may have a massive learning\
      \ curve, but by and large the speed gains you get when mastering the editor\
      \ outstrip any need for GUI hand-holding.  Using Vim is truly Zen and the Art\
      \ of Editing Source (IMHO anyway ;)).\n\nThis is all you need to know:  http://www.vim.org\n\
      \nThis page isn't meant to be a tutorial on generic editing but I will point\
      \ out a few pages that are very helpful:\n* The Best of Vim Tips (''very'' good\
      \ stuff here) http://www.rayninfo.co.uk/vimtips.html\n* Linux Productivity Magazine\
      \ article about VI and Vim with lots of good info http://www.troubleshooters.com/lpm/200212/200212.htm\n\
      * The Vim Cookbook with some neat stuff to do http://www.oualline.com/vim-cook.html\n\
      \nVim has built-in UnrealScript syntax highlighting!\n\n===Useful Scripts===\n\
      * BufExplorer for switching between multiple files at the same time: http://www.vim.org/scripts/script.php?script_id=42\n\
      * TagList source code browser (uses Tags discussed below): http://www.vim.org/scripts/script.php?script_id=273\n\
      \n===Tags===\n\nOne of the more useful things you can do in Vim is the build\
      \ in Tags support.  Implemented correctly navigating around the UnrealScript\
      \ source is as easy as moving your cursor over a class or function name and\
      \ pressing <tt>CTRL-]</tt>.  This will open the associated file in a new buffer.\
      \  Pressing <tt>CTRL-t</tt> will pop you back into the previously viewed file.\n\
      \nGetting all this to work correctly is a bit tricky, however.  I suggest you\
      \ take a look at the [[Legacy:UltraEdit|UltraEdit]] page which has thorough\
      \ explanation of setting up the ctags file.  Here are a couple of caveats:\n\
      * I use the default name 'tags' for all of my tag files since I'm editing different\
      \ types of source and it's easier to use one filename than have to specify different\
      \ filenames for every source I use tags with.\n** Because of this my command\
      \ for running ctags is <uscript>ctags --options=ctags.cfg -V -f \"C:\\UT2003\\\
      tags\" \"C:\\UT2003\"</uscript>\n*** <tt>-V-</tt> is for verbose\n*** <tt>--options=ctags.cfg--</tt>\
      \ sets a file that holds command-line options (next caveat)\n* I've updated\
      \ the ctags config file from the [[Legacy:UltraEdit|UltraEdit]] page because\
      \ I was getting odd results.  This one works for UT2k3 ('''ctags.cfg'''):\n\
      **\n<pre>--langdef=INI\n--langmap=INI:.ini\n--regex-INI=/^[ \\t]*\\[(.*)\\]/\\\
      1/b,block/\n--regex-INI=/^[ \\t]*([^\\[=]+)=(.*)/\\1/k,key/\n--langdef=unrealscript\n\
      --langmap=unrealscript:.uc\n--regex-unrealscript=/^[ \\t]*[cC]lass[ \\t]*([a-zA-Z0-9_]+)/\\\
      1/c,class/\n--regex-unrealscript=/^[ \\t]*[sS]tate[() \\t]*([a-zA-Z0-9]+)/\\\
      1/s,state/\n--regex-unrealscript=/^[ \\t]*[sS]imulated[ \\t]*(.*)[ \\t]+([a-zA-Z0-9_]+)\\\
      (/\\2/i,simulated/\n--regex-unrealscript=/^[ \\t]*[eE]vent[ \\t]*[^ \\t]*[ \\\
      t]+([a-zA-Z0-9_]+)\\(/\\1/e,event/\n--regex-unrealscript=/^[ \\t]*[fF]unction[\
      \ \\t]*(.*)[ \\t]+([a-zA-Z0-9_]+)\\(/\\2/f,function/\n--recurse\n</pre>\n**\
      \ Basically this tells the ctags utility what regular expressions to use to\
      \ get points of interest.  The one above tells ctags to take into account class,\
      \ state, simulated, event and function declarations.  You can use these five\
      \ types declarations to browse the source tree after we're done.\n\n===_vimrc===\n\
      \nThe _vimrc file holds a user's settings and commands Vim will run on startup.\
      \  This is where configuration commands should go get get this stuff to work.\
      \  Here's is what will need to go into this file as well as some added helpful/useful\
      \ items:\n\n<uscript>\n\" search for tags file in parent directories\nset tags=tags;/\n\
      \n\" For Taglist\nnnoremap <silent> <F8> :Tlist<CR> \nnnoremap <silent> <F9>\
      \ :TlistSync<CR>\nlet Tlist_Use_Right_Window = 1\n\n\" to make Taglist work\
      \ with UnrealScript\nau FileType uc let Tlist_Ctags_Cmd = 'ctags.exe --options=\"\
      C:\\UT2003\\ctags.cfg\"'\nlet tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'\n\
      \n\" For File Browser\nnnoremap <silent> <F12> :Exp<CR>\n\n\" auto-change the\
      \ directory to the current buffer\nautocmd BufEnter * :cd %:p:h\n\n\" BufExplorer\n\
      nnoremap <silent> <F11> :BufExplorer<CR>\n</uscript>\n\nThese will require some\
      \ explanation.  So in order:\n; <code>set tags=tags;/</code> : This tells Vim\
      \ to search for the tags file named 'tags' starting with the directory of the\
      \ open file and moving up the directory tree until it's found.\n; <code>nnoremap\
      \ <silent> <F8> :Tlist<CR></code> : This is for opening and closing the Taglist\
      \ script (http://www.vim.org/scripts/script.php?script_id=273)\n; <code>nnoremap\
      \ <silent> <F9> :TlistSync<CR></code> : This is to force immediate syncing of\
      \ the Taglist window with the current cursor position\n; <code>let Tlist_Use_Right_Window\
      \ = 1</code> : Makes the TagList appear on the right side\n; <code>au FileType\
      \ uc let Tlist_Ctags_Cmd = 'ctags.exe &ndash;options=\"C:\\UT2003\\ctags.cfg\"\
      '</code> : Specifies the ctags command the TagList should use.  Since we must\
      \ use a custom config file to specify the unrealscript file type that needs\
      \ to be in the command.\n; <code>let tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'</code>\
      \ : Specifies how the TagList should be displayed for unrealscript files.\n\
      ; <code>nnoremap <silent> <F12> :Exp<CR></code> : Opens a file explorer.  Useful\
      \ for opening files in the same directory as the current file.\n; <code>autocmd\
      \ BufEnter * :cd %:p:h</code> : This makes the Vim working directory move to\
      \ the directory of the file is currently being edited\n; <code>nnoremap <silent>\
      \ <F11> :BufExplorer<CR></code> : Opens the BufferExplorer (http://www.vim.org/scripts/script.php?script_id=42)\n\
      \n===Taglist===\n\nThe Taglist script is an information window that mimics many\
      \ IDEs which show a birds-eye-view of the code.  All landmarks can be seen,\
      \ function declarations and other things.  The _vimrc file declared above should\
      \ be adequate to get this to work.  The <code>let tlist_uc_settings = 'unrealscript;c:class;f:function;i:simulated;e:event;s:state'</code>\
      \ line can be edited to change the order that the sections appear or be removed\
      \ all together.  just change the order of the s:state or e:event bits.\n\n===Make\
      \ ===\n\nVim's Make functionality can be changed to use [[Legacy:Ucc|ucc]].\
      \  On a compile-time error, Vim will move the cursor to the buffer and line\
      \ number an error occured on.\n\nHere's some more additions to your '''_vimrc'''\
      \ file:\n\n<uscript>\nautocmd FileType uc set makeprg=C:\\\\UT2003\\\\system\\\
      \\ucc\\ make\nautocmd FileType uc set efm=%f(%l)\\ :\\ %m\n</uscript>\n\nChange\
      \ your pathnames as appropiate of course.  This will allow the command <code>:make</code>\
      \ to use ucc and it will recognize the error format correctly.  Vim will automatically\
      \ jump to the uc file and line number with the error even if it isn't open.\
      \  <code>:cn</code> will go to the next error, <code>:cp</code> to the previous.\
      \  <code>:cl</code> will list all errors.\n\nSo far it will only recognize errors\
      \ within code.  Any warnings or problems with default properties it will not\
      \ recognize.  You will get a \"shell returned 1\" message however.  In the future\
      \ I want to modify the efm line above to recognize more errors and warnings\
      \ from ucc to make it more streamlined.  Omitting the line altogether actually\
      \ works, Vim seems to get the general gist of ucc's error format.\n\nType <code>:help\
      \ quickfix</code> within Vim for more commands and information on how to use\
      \ this functionality.\n\n===Comments===\n\n'''SocratesJohnson:''' Well here's\
      \ my first stab at how to get the Vim editor to work well with UnrealScript.\
      \  Any questions/comments/rants please let me know!\n\n'''Erik:''' vim comes\
      \ with the appropriate fu, automagic on all my unix systems and even my winderz\
      \ box... :) syntax/uc.vim notes that it was last modified \"2001 May 10\"\n\n\
      [[Category:Legacy Application|{{PAGENAME}}]]"
  properties: []
  revId: 42491
name: "Legacy:Vim"
revision:
  revid: 42491
  parentid: 9205
  user: "Wormbo"
  timestamp: 1264149610.000000000
  comment: "/* Tags */ formatting fix"
timestamp: 1668772629.389171000
