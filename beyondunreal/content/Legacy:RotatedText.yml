---
parse:
  title: "Legacy:RotatedText"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Displaying_Rotated_Text_on_a_Canvas\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Displaying Rotated\
      \ Text on a Canvas</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a\
      \ href=\"#Download\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >Download</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #How_It_Works\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\"\
      >How It Works</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"\
      #First_Step\"><span class=\"tocnumber\">1.2.1</span> <span class=\"toctext\"\
      >First Step</span></a></li>\n<li class=\"toclevel-3 tocsection-5\"><a href=\"\
      #Second_Step\"><span class=\"tocnumber\">1.2.2</span> <span class=\"toctext\"\
      >Second Step</span></a></li>\n<li class=\"toclevel-3 tocsection-6\"><a href=\"\
      #Third_Step\"><span class=\"tocnumber\">1.2.3</span> <span class=\"toctext\"\
      >Third Step</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Displaying_Rotated_Text_on_a_Canvas\">Displaying\
      \ Rotated Text on a Canvas</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:RotatedText?section=1\"\
      \ title=\"Edit section: Displaying Rotated Text on a Canvas\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The <a href=\"/Legacy:Canvas\"\
      \ title=\"Legacy:Canvas\">Canvas</a> class provides methods for drawing text\
      \ and textures, but unfortunately there is no way to <i>rotate</i> this text\
      \ or those textures when they're rendered on the Canvas. Occasionally such a\
      \ feature would be handy, though → when a lot of information has to be rendered\
      \ on limited screen space, for instance.</p>\n<p>With a bit of imagination,\
      \ however, it's in fact possible to render rotated text on the Canvas:</p>\n\
      <ul>\n<li>You can draw a mesh on a Canvas in any orientation you like using\
      \ the DrawClippedActor method.</li>\n<li>Use a flat, quadratic <a href=\"/Legacy:Mesh\"\
      \ title=\"Legacy:Mesh\">mesh</a>, and skin it with a ScriptedTexture.</li>\n\
      <li>Render the text you want to display on that ScriptedTexture.</li>\n</ul>\n\
      <p>The <b>RotatedText</b> actor implements just this functionality.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Download\">Download</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:RotatedText?section=2\"\
      \ title=\"Edit section: Download\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You can download the <b>RotatedText</b> actor, its\
      \ source code and all related files here: <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://mb.link-m.de/download/RotatedText.zip\">http://mb.link-m.de/download/RotatedText.zip</a></p>\n\
      <p>Unzip this archive into a subdirectory of your Unreal Tournament <a href=\"\
      /Legacy:Base_Directory\" title=\"Legacy:Base Directory\">base directory</a>.\
      \ Then copy everything from the <i>System</i> subdirectory in that directory\
      \ into your actual <i>System</i> directory.</p>\n<p>If you want to have a sneak\
      \ preview of how it looks, start a game and select the \"RotatedText Test Mutator\"\
      \ mutator. You'll see two strings revolving around your crosshair, one of them\
      \ showing your player name, the other one the elapsed time.</p>\n<div class=\"\
      center\">\n<div class=\"floatnone\"><a href=\"/File:Legacy_rotatedtext-screenshot.jpg\"\
      \ class=\"image\"><img alt=\"Legacy rotatedtext-screenshot.jpg\" src=\"/w/images/Legacy_rotatedtext-screenshot.jpg\"\
      \ width=\"400\" height=\"300\" /></a></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"How_It_Works\">How It Works</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:RotatedText?section=3\"\
      \ title=\"Edit section: How It Works\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"First_Step\">First\
      \ Step</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:RotatedText?section=4\" title=\"Edit section:\
      \ First Step\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Create a simple, two-dimensional, quadratic <a href=\"/Legacy:Mesh\" title=\"\
      Legacy:Mesh\">mesh</a> in <a href=\"/Legacy:MilkShape\" title=\"Legacy:MilkShape\"\
      >MilkShape</a> (or another 3D modelling program), consisting of two triangular\
      \ faces, and skin it with a single 256x256 pixel texture.</p>\n<h4><span class=\"\
      mw-headline\" id=\"Second_Step\">Second Step</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:RotatedText?section=5\"\
      \ title=\"Edit section: Second Step\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>See <a href=\"/Legacy:ScriptedTexture_(UT)\" title=\"\
      Legacy:ScriptedTexture (UT)\">ScriptedTexture (UT)</a> for how to create your\
      \ own custom ScriptedTexture from a given base texture.</p>\n<h4><span class=\"\
      mw-headline\" id=\"Third_Step\">Third Step</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:RotatedText?section=6\"\
      \ title=\"Edit section: Third Step\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The <b>RotatedText</b> source code describes how the\
      \ <a href=\"/Legacy:Mesh\" title=\"Legacy:Mesh\">mesh</a> and the <a href=\"\
      /Legacy:ScriptedTexture_(UT)\" title=\"Legacy:ScriptedTexture (UT)\">ScriptedTexture\
      \ (UT)</a> are used to display rotated text on the <a href=\"/Legacy:Canvas\"\
      \ title=\"Legacy:Canvas\">Canvas</a>:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// RotatedText</span>\n<span class=\"co1\">// Copyright\
      \ (c) 2002 by Mychaeel &lt;mychaeel@planetunreal.com&gt;</span>\n<span class=\"\
      co1\">//</span>\n<span class=\"co1\">// Displays rotated text on a Canvas, using\
      \ DrawClippedActor, a simple mesh</span>\n<span class=\"co1\">// and a ScriptedTexture.</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">// Create a RotatedText actor\
      \ at some point in your script and call its</span>\n<span class=\"co1\">// DrawRotatedText\
      \ method (see below for details on its parameters) to render</span>\n<span class=\"\
      co1\">// rotated text on a Canvas.</span>\n<span class=\"co1\">//</span>\n<span\
      \ class=\"co1\">// Limitations:</span>\n<span class=\"co1\">// * Text cannot\
      \ be wider than 256 pixels, the ScriptedTexture's width.</span>\n<span class=\"\
      co1\">// * Not more than 32 different strings can be rendered within a single\
      \ frame.</span>\n<span class=\"co1\">// * Color space is limited to the palette\
      \ of the base texture of the</span>\n<span class=\"co1\">//   ScriptedTexture.\
      \ The engine uses the closest matching color.</span>\n<span class=\"co1\">//</span>\n\
      <span class=\"co1\">// Free for use, modification and distribution. Credit is\
      \ appreciated.</span>\n<span class=\"co1\">// ============================================================================</span>\n\
      \ \n \n<span class=\"kw1\">class</span> RotatedText <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Info</span>;\n \n \n<span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// Compiler Directives</span>\n<span class=\"co1\">// ============================================================================</span>\n\
      \ \n<span class=\"co1\">// Import RotatedTextTextures.utx created in UnrealEd\
      \ into the RotatedText.u</span>\n<span class=\"co1\">// package we're currently\
      \ creating. That saves us from having to bundle that</span>\n<span class=\"\
      co1\">// texture package with our release and keeps it neat and self-contained.</span>\n\
      \ \n<span class=\"co2\">#exec obj load file=Textures\\RotatedTextTextures.utx\
      \ package=RotatedText</span>\n \n<span class=\"co1\">// Import the mesh.</span>\n\
      \ \n<span class=\"co2\">#exec mesh import mesh=RotatedTextMesh anivfile=Models\\\
      RotatedTextMesh_a.3d datafile=Models\\RotatedTextMesh_d.3d mlod=0</span>\n<span\
      \ class=\"co2\">#exec meshmap new meshmap=RotatedTextMesh mesh=RotatedTextMesh</span>\n\
      <span class=\"co2\">#exec meshmap scale meshmap=RotatedTextMesh x=1.0 y=1.0\
      \ z=2.0</span>\n \n \n<span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// Variables</span>\n<span class=\"co1\">// ============================================================================</span>\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span> IndexScriptedTexture;\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">ScriptedTexture</span> ScriptedTextures<span\
      \ class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span>;\n\
      \ \n<span class=\"kw1\">var</span> Font DrawFont;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">Color</span> DrawColor;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">string</span> DrawText;\n \n \n<span class=\"co1\">//\
      \ ============================================================================</span>\n\
      <span class=\"co1\">// PostBeginPlay</span>\n<span class=\"co1\">//</span>\n\
      <span class=\"co1\">// The scripted texture uses a callback mechanism; when\
      \ it is about to be drawn</span>\n<span class=\"co1\">// on the screen, it calls\
      \ RenderTexture in the actor pointed to by its</span>\n<span class=\"co1\">//\
      \ NotifyActor property. Thus, we set NotifyActor to ourself in PostBeginPlay.</span>\n\
      <span class=\"co1\">// ============================================================================</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n \n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>IndexScriptedTexture <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; IndexScriptedTexture <span class=\"sy0\">&lt;</span>\
      \ ArrayCount<span class=\"br0\">(</span>ScriptedTextures<span class=\"br0\"\
      >)</span>; IndexScriptedTexture<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n    ScriptedTextures<span class=\"br0\">[</span>IndexScriptedTexture<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">NotifyActor</span> <span class=\"\
      sy0\">=</span> <span class=\"kw6\">Self</span>;\n  <span class=\"br0\">}</span>\n\
      \ \n \n<span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// RenderTexture</span>\n<span class=\"co1\">//</span>\n\
      <span class=\"co1\">// RenderTexture is called by the scripted texture before\
      \ it is drawn on the</span>\n<span class=\"co1\">// screen. See above.</span>\n\
      <span class=\"co1\">// ============================================================================</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">RenderTexture</span><span class=\"br0\">(</span><span class=\"\
      kw5\">ScriptedTexture</span> <span class=\"kw5\">ScriptedTexture</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>DrawColor.<span class=\"me0\">R</span>\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"\
      sy0\">&amp;&amp;</span> DrawColor.<span class=\"me0\">G</span> <span class=\"\
      sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ DrawColor.<span class=\"me0\">B</span> <span class=\"sy0\">==</span> <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n    <span class=\"kw5\"\
      >ScriptedTexture</span>.<span class=\"me0\">DrawText</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, DrawText,\
      \ DrawFont<span class=\"br0\">)</span>;\n  <span class=\"kw2\">else</span>\n\
      \    <span class=\"kw5\">ScriptedTexture</span>.<span class=\"me0\">DrawColoredText</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,\
      \ DrawText, DrawFont, DrawColor<span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n \n \n<span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// DrawRotatedText</span>\n<span class=\"co1\">//</span>\n\
      <span class=\"co1\">// This is the main function that is called by your UnrealScript\
      \ code. It</span>\n<span class=\"co1\">// takes the Canvas to draw on, a rotation\
      \ angle and the text to be drawn.</span>\n<span class=\"co1\">// Color and other\
      \ rendering properties are taken from the given Canvas.</span>\n<span class=\"\
      co1\">// ============================================================================</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ DrawRotatedText<span class=\"br0\">(</span><span class=\"kw8\">Canvas</span>\
      \ <span class=\"kw8\">Canvas</span>, <span class=\"kw5\">float</span> Angle,\
      \ <span class=\"kw5\">string</span> Text<span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n \n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ AngleRadian;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ AngleFovSave;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ SinAngle;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ CosAngle;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">rotator</span>\
      \ RotationMesh;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span>\
      \ LocationMesh;\n \n  <span class=\"co1\">// Memorize the given text for use\
      \ in RenderTexture.</span>\n \n  DrawText <span class=\"sy0\">=</span> Text;\n\
      \ \n  <span class=\"co1\">// Copy draw style and other propeties from the given\
      \ Canvas to ourself.</span>\n  <span class=\"co1\">// The render style can't\
      \ be directly copied, alas, since it's a byte</span>\n  <span class=\"co1\"\
      >// property in Canvas and an ERenderStyle property in Actor, we have to do\
      \ it</span>\n  <span class=\"co1\">// this rather cumbersome way.</span>\n \n\
      \  DrawColor <span class=\"sy0\">=</span> <span class=\"kw8\">Canvas</span>.<span\
      \ class=\"me0\">DrawColor</span>;\n  DrawFont  <span class=\"sy0\">=</span>\
      \ <span class=\"kw8\">Canvas</span>.<span class=\"me0\">Font</span>;\n \n  <span\
      \ class=\"kw2\">switch</span> <span class=\"br0\">(</span><span class=\"kw8\"\
      >Canvas</span>.<span class=\"kw7\">Style</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    <span class=\"kw2\">case</span> ERenderStyle.<span\
      \ class=\"kw7\">STY_None</span>:         <span class=\"kw7\">Style</span> <span\
      \ class=\"sy0\">=</span> ERenderStyle.<span class=\"kw7\">STY_None</span>; \
      \        <span class=\"kw2\">break</span>;\n    <span class=\"kw2\">case</span>\
      \ ERenderStyle.<span class=\"kw7\">STY_Normal</span>:       <span class=\"kw7\"\
      >Style</span> <span class=\"sy0\">=</span> ERenderStyle.<span class=\"kw7\"\
      >STY_Normal</span>;       <span class=\"kw2\">break</span>;\n    <span class=\"\
      kw2\">case</span> ERenderStyle.<span class=\"kw7\">STY_Masked</span>:      \
      \ <span class=\"kw7\">Style</span> <span class=\"sy0\">=</span> ERenderStyle.<span\
      \ class=\"kw7\">STY_Masked</span>;       <span class=\"kw2\">break</span>;\n\
      \    <span class=\"kw2\">case</span> ERenderStyle.<span class=\"kw7\">STY_Translucent</span>:\
      \  <span class=\"kw7\">Style</span> <span class=\"sy0\">=</span> ERenderStyle.<span\
      \ class=\"kw7\">STY_Translucent</span>;  <span class=\"kw2\">break</span>;\n\
      \    <span class=\"kw2\">case</span> ERenderStyle.<span class=\"kw7\">STY_Modulated</span>:\
      \    <span class=\"kw7\">Style</span> <span class=\"sy0\">=</span> ERenderStyle.<span\
      \ class=\"kw7\">STY_Normal</span>;       <span class=\"kw2\">break</span>;\n\
      \    <span class=\"br0\">}</span>\n \n  bNoSmooth <span class=\"sy0\">=</span>\
      \ <span class=\"kw8\">Canvas</span>.<span class=\"me0\">bNoSmooth</span>;\n\
      \ \n  <span class=\"co1\">// The location and rotation of the actor holding\
      \ the mesh we want to draw</span>\n  <span class=\"co1\">// determines how and\
      \ where it is drawn by DrawClippedActor, so we adjust</span>\n  <span class=\"\
      co1\">// our rotation and location to accommodate that.</span>\n \n  RotationMesh.<span\
      \ class=\"me0\">Yaw</span>   <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >16384</span>;\n  RotationMesh.<span class=\"me0\">Pitch</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">32768</span> <span class=\"sy0\">*</span>\
      \ Angle <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span>;\n  RotationMesh.<span\
      \ class=\"me0\">Roll</span>  <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0</span>;\n \n  LocationMesh.<span class=\"me0\">X</span> <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">/</span> <span\
      \ class=\"kw3\">tan</span><span class=\"br0\">(</span><span class=\"kw6\">Pi</span>\
      \ <span class=\"sy0\">/</span> <span class=\"nu0\">4.0</span><span class=\"\
      br0\">)</span>;\n  LocationMesh.<span class=\"me0\">Y</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0.0</span>;\n  LocationMesh.<span class=\"\
      me0\">Z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n\
      \ \n  <span class=\"kw4\">SetLocation</span><span class=\"br0\">(</span>LocationMesh<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw4\">SetRotation</span><span class=\"\
      br0\">(</span>RotationMesh<span class=\"br0\">)</span>;\n \n  <span class=\"\
      co1\">// Save the player's current field-of-vision angle since we're changing\
      \ it</span>\n  <span class=\"co1\">// below.</span>\n \n  AngleFovSave <span\
      \ class=\"sy0\">=</span> <span class=\"kw8\">Canvas</span>.<span class=\"me0\"\
      >Viewport</span>.<span class=\"kw9\">Actor</span>.<span class=\"me0\">FovAngle</span>;\n\
      \ \n  <span class=\"co1\">// Select the next ScriptedTexture from our array\
      \ and skin the mesh with it.</span>\n \n  MultiSkins<span class=\"br0\">[</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ ScriptedTextures<span class=\"br0\">[</span>IndexScriptedTexture<span class=\"\
      sy0\">++</span> <span class=\"sy0\">%</span> ArrayCount<span class=\"br0\">(</span>ScriptedTextures<span\
      \ class=\"br0\">)</span><span class=\"br0\">]</span>;\n \n  <span class=\"co1\"\
      >// Set the player's field-of-vision angle to a defined value, draw the mesh</span>\n\
      \  <span class=\"co1\">// on the canvas, and reset the field-of-vision angle\
      \ to its original value</span>\n  <span class=\"co1\">// that we memorized above.\
      \ For convenience, we draw the mesh so that its</span>\n  <span class=\"co1\"\
      >// upper-left corner is at the current drawing position (rather than its</span>\n\
      \  <span class=\"co1\">// center).</span>\n \n  AngleRadian <span class=\"sy0\"\
      >=</span> Angle <span class=\"sy0\">*</span> <span class=\"kw6\">Pi</span> <span\
      \ class=\"sy0\">/</span> <span class=\"nu0\">180.0</span>;\n  SinAngle <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>AngleRadian<span\
      \ class=\"br0\">)</span>;\n  CosAngle <span class=\"sy0\">=</span> <span class=\"\
      kw3\">cos</span><span class=\"br0\">(</span>AngleRadian<span class=\"br0\">)</span>;\n\
      \ \n  <span class=\"kw8\">Canvas</span>.<span class=\"me0\">Viewport</span>.<span\
      \ class=\"kw9\">Actor</span>.<span class=\"me0\">SetFovAngle</span><span class=\"\
      br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>;\n \
      \ <span class=\"kw8\">Canvas</span>.<span class=\"me0\">DrawClippedActor</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">Self</span>, <span class=\"kw6\"\
      >false</span>, <span class=\"nu0\">400</span>, <span class=\"nu0\">400</span>,\n\
      \    <span class=\"kw8\">Canvas</span>.<span class=\"me0\">CurX</span> <span\
      \ class=\"sy0\">-</span> <span class=\"nu0\">200</span> <span class=\"sy0\"\
      >+</span> <span class=\"nu0\">128</span> <span class=\"sy0\">*</span> <span\
      \ class=\"br0\">(</span>CosAngle <span class=\"sy0\">+</span> SinAngle<span\
      \ class=\"br0\">)</span>,\n    <span class=\"kw8\">Canvas</span>.<span class=\"\
      me0\">CurY</span> <span class=\"sy0\">-</span> <span class=\"nu0\">200</span>\
      \ <span class=\"sy0\">+</span> <span class=\"nu0\">128</span> <span class=\"\
      sy0\">*</span> <span class=\"br0\">(</span>CosAngle <span class=\"sy0\">-</span>\
      \ SinAngle<span class=\"br0\">)</span>, <span class=\"kw6\">true</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw8\">Canvas</span>.<span class=\"\
      me0\">Viewport</span>.<span class=\"kw9\">Actor</span>.<span class=\"me0\">SetFovAngle</span><span\
      \ class=\"br0\">(</span>AngleFovSave<span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n \n \n<span class=\"co1\">// ============================================================================</span>\n\
      <span class=\"co1\">// Default Properties</span>\n<span class=\"co1\">// ============================================================================</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span> <span class=\"br0\">{</span>\n\
      \ \n  <span class=\"co1\">// Set ourself to use the RotatedTextMesh mesh imported\
      \ above. Set a couple</span>\n  <span class=\"co1\">// of other display properties\
      \ to make the mesh show up properly.</span>\n \n  <span class=\"kw5\">Mesh</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Mesh</span> <span class=\"st0\"\
      >'RotatedTextMesh'</span>\n  <span class=\"kw7\">DrawScale</span><span class=\"\
      sy0\">=</span><span class=\"nu0\">0.004263</span>\n  <span class=\"kw7\">DrawType</span><span\
      \ class=\"sy0\">=</span><span class=\"kw7\">DT_Mesh</span>\n  AmbientGlow<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">255</span>\n  bUnlit<span class=\"\
      sy0\">=</span><span class=\"kw6\">True</span>\n \n  <span class=\"co1\">// Set\
      \ RemoteRole to keep this actor from being replicated to other clients</span>\n\
      \  <span class=\"co1\">// when it is created on a listen server.</span>\n \n\
      \  <span class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"\
      kw7\">ROLE_None</span>\n \n  <span class=\"co1\">// Make our scripted textures\
      \ available to the script. Cumbersome, but the</span>\n  <span class=\"co1\"\
      >// only way I'm aware of to work around the limitation that a given</span>\n\
      \  <span class=\"co1\">// ScriptedTexture is rendered only once per tick.</span>\n\
      \ \n  ScriptedTextures<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">ScriptedTexture</span>\
      \ <span class=\"st0\">'RotatedTextTexture1'</span>\n  ...\n  <span class=\"\
      me0\">ScriptedTextures</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >31</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"\
      kw5\">ScriptedTexture</span> <span class=\"st0\">'RotatedTextTexture32'</span>\n\
      \  <span class=\"br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.132 seconds\nReal time usage: 0.136 seconds\nPreprocessor\
      \ visited node count: 27/1000000\nPreprocessor generated node count: 64/1000000\n\
      Post‐expand include size: 22/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2593-0!*!0!!en!5!*\
      \ and timestamp 20221118020453 and revision id 6189\n -->\n"
  categories:
  - sortkey: "RotatedText"
    name: "Legacy_Tutorial"
  - sortkey: "RotatedText"
    name: "Legacy_Custom_Class_(UT)"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mesh"
  - ns: 100
    exists: true
    name: "Legacy:Canvas"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTexture (UT)"
  - ns: 100
    exists: true
    name: "Legacy:MilkShape"
  - ns: 100
    exists: true
    name: "Legacy:Base Directory"
  templates: []
  images:
  - "Legacy_rotatedtext-screenshot.jpg"
  externallinks:
  - "http://mb.link-m.de/download/RotatedText.zip"
  sections:
  - toclevel: 1
    level: "2"
    line: "Displaying Rotated Text on a Canvas"
    number: "1"
    index: "1"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 0
    anchor: "Displaying_Rotated_Text_on_a_Canvas"
  - toclevel: 2
    level: "3"
    line: "Download"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 787
    anchor: "Download"
  - toclevel: 2
    level: "3"
    line: "How It Works"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 1459
    anchor: "How_It_Works"
  - toclevel: 3
    level: "4"
    line: "First Step"
    number: "1.2.1"
    index: "4"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 1480
    anchor: "First_Step"
  - toclevel: 3
    level: "4"
    line: "Second Step"
    number: "1.2.2"
    index: "5"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 1721
    anchor: "Second_Step"
  - toclevel: 3
    level: "4"
    line: "Third Step"
    number: "1.2.3"
    index: "6"
    fromtitle: "Legacy:RotatedText"
    byteoffset: 1878
    anchor: "Third_Step"
  displaytitle: "Legacy:RotatedText"
  iwlinks: []
  wikitext:
    text: "==Displaying Rotated Text on a Canvas ==\n\nThe [[Legacy:Canvas|Canvas]]\
      \ class provides methods for drawing text and textures, but unfortunately there\
      \ is no way to ''rotate'' this text or those textures when they're rendered\
      \ on the Canvas.  Occasionally such a feature would be handy, though &rarr;\
      \ when a lot of information has to be rendered on limited screen space, for\
      \ instance.\n\nWith a bit of imagination, however, it's in fact possible to\
      \ render rotated text on the Canvas:\n\n* You can draw a mesh on a Canvas in\
      \ any orientation you like using the DrawClippedActor method.\n* Use a flat,\
      \ quadratic [[Legacy:Mesh|mesh]], and skin it with a ScriptedTexture.\n* Render\
      \ the text you want to display on that ScriptedTexture.\n\nThe '''RotatedText'''\
      \ actor implements just this functionality.\n\n===Download ===\n\nYou can download\
      \ the '''RotatedText''' actor, its source code and all related files here: \
      \ http://mb.link-m.de/download/RotatedText.zip\n\nUnzip this archive into a\
      \ subdirectory of your Unreal Tournament [[Legacy:Base Directory|base directory]].\
      \  Then copy everything from the ''System'' subdirectory in that directory into\
      \ your actual ''System'' directory.\n\nIf you want to have a sneak preview of\
      \ how it looks, start a game and select the \"RotatedText Test Mutator\" mutator.\
      \  You'll see two strings revolving around your crosshair, one of them showing\
      \ your player name, the other one the elapsed time.\n\n[[Image:Legacy_rotatedtext-screenshot.jpg|center|]]\n\
      \n===How It Works ===\n\n====First Step ====\n\nCreate a simple, two-dimensional,\
      \ quadratic [[Legacy:Mesh|mesh]] in [[Legacy:MilkShape|MilkShape]] (or another\
      \ 3D modelling program), consisting of two triangular faces, and skin it with\
      \ a single 256x256 pixel texture.\n\n====Second Step ====\n\nSee [[Legacy:ScriptedTexture\
      \ (UT)|ScriptedTexture (UT)]] for how to create your own custom ScriptedTexture\
      \ from a given base texture.\n\n====Third Step ====\n\nThe '''RotatedText'''\
      \ source code describes how the [[Legacy:Mesh|mesh]] and the [[Legacy:ScriptedTexture\
      \ (UT)|ScriptedTexture (UT)]] are used to display rotated text on the [[Legacy:Canvas|Canvas]]:\n\
      \n<uscript>\n// ============================================================================\n\
      // RotatedText\n// Copyright (c) 2002 by Mychaeel <mychaeel@planetunreal.com>\n\
      //\n// Displays rotated text on a Canvas, using DrawClippedActor, a simple mesh\n\
      // and a ScriptedTexture.\n//\n// Create a RotatedText actor at some point in\
      \ your script and call its\n// DrawRotatedText method (see below for details\
      \ on its parameters) to render\n// rotated text on a Canvas.\n//\n// Limitations:\n\
      // * Text cannot be wider than 256 pixels, the ScriptedTexture's width.\n//\
      \ * Not more than 32 different strings can be rendered within a single frame.\n\
      // * Color space is limited to the palette of the base texture of the\n//  \
      \ ScriptedTexture. The engine uses the closest matching color.\n//\n// Free\
      \ for use, modification and distribution. Credit is appreciated.\n// ============================================================================\n\
      \n\nclass RotatedText extends Info;\n\n\n// ============================================================================\n\
      // Compiler Directives\n// ============================================================================\n\
      \n// Import RotatedTextTextures.utx created in UnrealEd into the RotatedText.u\n\
      // package we're currently creating. That saves us from having to bundle that\n\
      // texture package with our release and keeps it neat and self-contained.\n\n\
      #exec obj load file=Textures\\RotatedTextTextures.utx package=RotatedText\n\n\
      // Import the mesh.\n\n#exec mesh import mesh=RotatedTextMesh anivfile=Models\\\
      RotatedTextMesh_a.3d datafile=Models\\RotatedTextMesh_d.3d mlod=0\n#exec meshmap\
      \ new meshmap=RotatedTextMesh mesh=RotatedTextMesh\n#exec meshmap scale meshmap=RotatedTextMesh\
      \ x=1.0 y=1.0 z=2.0\n\n\n// ============================================================================\n\
      // Variables\n// ============================================================================\n\
      \nvar int IndexScriptedTexture;\nvar ScriptedTexture ScriptedTextures[32];\n\
      \nvar Font DrawFont;\nvar Color DrawColor;\nvar string DrawText;\n\n\n// ============================================================================\n\
      // PostBeginPlay\n//\n// The scripted texture uses a callback mechanism; when\
      \ it is about to be drawn\n// on the screen, it calls RenderTexture in the actor\
      \ pointed to by its\n// NotifyActor property. Thus, we set NotifyActor to ourself\
      \ in PostBeginPlay.\n// ============================================================================\n\
      \nsimulated event PostBeginPlay() {\n\n  for (IndexScriptedTexture = 0; IndexScriptedTexture\
      \ < ArrayCount(ScriptedTextures); IndexScriptedTexture++)\n    ScriptedTextures[IndexScriptedTexture].NotifyActor\
      \ = Self;\n  }\n\n\n// ============================================================================\n\
      // RenderTexture\n//\n// RenderTexture is called by the scripted texture before\
      \ it is drawn on the\n// screen. See above.\n// ============================================================================\n\
      \nsimulated event RenderTexture(ScriptedTexture ScriptedTexture) {\n\n  if (DrawColor.R\
      \ == 0 && DrawColor.G == 0 && DrawColor.B == 0)\n    ScriptedTexture.DrawText(0,\
      \ 0, DrawText, DrawFont);\n  else\n    ScriptedTexture.DrawColoredText(0, 0,\
      \ DrawText, DrawFont, DrawColor);\n  }\n\n\n// ============================================================================\n\
      // DrawRotatedText\n//\n// This is the main function that is called by your\
      \ UnrealScript code. It\n// takes the Canvas to draw on, a rotation angle and\
      \ the text to be drawn.\n// Color and other rendering properties are taken from\
      \ the given Canvas.\n// ============================================================================\n\
      \nsimulated function DrawRotatedText(Canvas Canvas, float Angle, string Text)\
      \ {\n\n  local float AngleRadian;\n  local float AngleFovSave;\n  local float\
      \ SinAngle;\n  local float CosAngle;\n  local rotator RotationMesh;\n  local\
      \ vector LocationMesh;\n\n  // Memorize the given text for use in RenderTexture.\n\
      \n  DrawText = Text;\n\n  // Copy draw style and other propeties from the given\
      \ Canvas to ourself.\n  // The render style can't be directly copied, alas,\
      \ since it's a byte\n  // property in Canvas and an ERenderStyle property in\
      \ Actor, we have to do it\n  // this rather cumbersome way.\n\n  DrawColor =\
      \ Canvas.DrawColor;\n  DrawFont  = Canvas.Font;\n\n  switch (Canvas.Style) {\n\
      \    case ERenderStyle.STY_None:         Style = ERenderStyle.STY_None;    \
      \     break;\n    case ERenderStyle.STY_Normal:       Style = ERenderStyle.STY_Normal;\
      \       break;\n    case ERenderStyle.STY_Masked:       Style = ERenderStyle.STY_Masked;\
      \       break;\n    case ERenderStyle.STY_Translucent:  Style = ERenderStyle.STY_Translucent;\
      \  break;\n    case ERenderStyle.STY_Modulated:    Style = ERenderStyle.STY_Normal;\
      \       break;\n    }\n\n  bNoSmooth = Canvas.bNoSmooth;\n\n  // The location\
      \ and rotation of the actor holding the mesh we want to draw\n  // determines\
      \ how and where it is drawn by DrawClippedActor, so we adjust\n  // our rotation\
      \ and location to accommodate that.\n\n  RotationMesh.Yaw   = 16384;\n  RotationMesh.Pitch\
      \ = 32768 * Angle / 180.0;\n  RotationMesh.Roll  = 0;\n\n  LocationMesh.X =\
      \ 4.0 / tan(Pi / 4.0);\n  LocationMesh.Y = 0.0;\n  LocationMesh.Z = 0.0;\n \
      \ \n  SetLocation(LocationMesh);\n  SetRotation(RotationMesh);\n\n  // Save\
      \ the player's current field-of-vision angle since we're changing it\n  // below.\n\
      \n  AngleFovSave = Canvas.Viewport.Actor.FovAngle;\n\n  // Select the next ScriptedTexture\
      \ from our array and skin the mesh with it.\n  \n  MultiSkins[1] = ScriptedTextures[IndexScriptedTexture++\
      \ % ArrayCount(ScriptedTextures)];\n\n  // Set the player's field-of-vision\
      \ angle to a defined value, draw the mesh\n  // on the canvas, and reset the\
      \ field-of-vision angle to its original value\n  // that we memorized above.\
      \ For convenience, we draw the mesh so that its\n  // upper-left corner is at\
      \ the current drawing position (rather than its\n  // center).\n\n  AngleRadian\
      \ = Angle * Pi / 180.0;\n  SinAngle = sin(AngleRadian);\n  CosAngle = cos(AngleRadian);\n\
      \n  Canvas.Viewport.Actor.SetFovAngle(30);\n  Canvas.DrawClippedActor(Self,\
      \ false, 400, 400,\n    Canvas.CurX - 200 + 128 * (CosAngle + SinAngle),\n \
      \   Canvas.CurY - 200 + 128 * (CosAngle - SinAngle), true);\n  Canvas.Viewport.Actor.SetFovAngle(AngleFovSave);\n\
      \  }\n\n\n// ============================================================================\n\
      // Default Properties\n// ============================================================================\n\
      \ndefaultproperties {\n\n  // Set ourself to use the RotatedTextMesh mesh imported\
      \ above. Set a couple\n  // of other display properties to make the mesh show\
      \ up properly.\n  \n  Mesh=Mesh 'RotatedTextMesh'\n  DrawScale=0.004263\n  DrawType=DT_Mesh\n\
      \  AmbientGlow=255\n  bUnlit=True\n\n  // Set RemoteRole to keep this actor\
      \ from being replicated to other clients\n  // when it is created on a listen\
      \ server.\n\n  RemoteRole=ROLE_None\n\n  // Make our scripted textures available\
      \ to the script. Cumbersome, but the\n  // only way I'm aware of to work around\
      \ the limitation that a given\n  // ScriptedTexture is rendered only once per\
      \ tick.\n  \n  ScriptedTextures(0)=ScriptedTexture 'RotatedTextTexture1'\n \
      \ ...\n  ScriptedTextures(31)=ScriptedTexture 'RotatedTextTexture32'\n  }\n\
      </uscript>\n\n[[Category:Legacy Custom Class (UT)|{{PAGENAME}}]]\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 6189
name: "Legacy:RotatedText"
revision:
  revid: 6189
  parentid: 6190
  user: "Sweavo"
  timestamp: 1195497438.000000000
  comment: "*"
timestamp: 1668763368.201224000
