---
parse:
  title: "Legacy:Log Warnings"
  text:
    text: "<p>There are two groups of log warnings, native warnings and script warnings.\
      \ Script warnings can be generated manually from <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a> through the <code>Warn</code>\
      \ function.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Script_Warnings\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Script Warnings</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Descriptions\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">Descriptions</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Native_Warnings\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Native Warnings</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#Harmless_Log_Lines\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">Harmless Log Lines</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Script_Warnings\">Script\
      \ Warnings</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Log_Warnings?section=1\" title=\"Edit section:\
      \ Script Warnings\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Script warnings generally have the following structure in Unreal/<a href=\"\
      /Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>:</p>\n<pre>ScriptWarning:\
      \ <i>&lt;name&gt;</i> <i>&lt;object&gt;</i> (<i>Function/State</i> <i>&lt;function\
      \ or state name&gt;</i>:<i>&lt;adress&gt;</i>) <i>&lt;text&gt;</i>\n</pre>\n\
      <p>In <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> script warnings begin with \"Warning:\" like the native warnings\
      \ described in the next section but still contain name, object, function, etc.</p>\n\
      <dl>\n<dt>&lt;name&gt;&#160;</dt>\n<dd>The class name of the object the warning\
      \ was generated for.</dd>\n<dt>&lt;object&gt;&#160;</dt>\n<dd>The name of the\
      \ object (complete name with package) the warning was generated for.</dd>\n\
      <dt>Function/State&#160;</dt>\n<dd><i>Function</i> if the problem occured in\
      \ function code, <i>State</i> if the problem occured in state code.</dd>\n<dt>&lt;function\
      \ or state name&gt;&#160;</dt>\n<dd>The name of the function or state (with\
      \ names of the state, class and package) that caused the warning. This refers\
      \ to the actual function/state name the problem occured in. Note that this could\
      \ also point to a parent class of the actual class or the parent state of the\
      \ actual state.</dd>\n<dt>&lt;adress&gt;&#160;</dt>\n<dd>This is an internal\
      \ hexadecimal adress and isn't helpful with finding the actual line the warning\
      \ was generated for.</dd>\n<dt>&lt;text&gt;&#160;</dt>\n<dd>A description of\
      \ the problem. (see below)</dd>\n</dl>\n<p>Script warnings don't include information\
      \ about which function called the function that caused the warning. You have\
      \ to figure that out yourself.</p>\n<h3><span class=\"mw-headline\" id=\"Descriptions\"\
      >Descriptions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Log_Warnings?section=2\" title=\"Edit section:\
      \ Descriptions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>Accessed None&#160;</dt>\n<dd></dd>\n</dl>\n<p>Probably the most common\
      \ error message in the log file. This error occurs whenever lines like</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw4\">SetPhysics</span><span class=\"br0\">(</span><span class=\"\
      kw7\">PHYS_Falling</span><span class=\"br0\">)</span>;\ni <span class=\"sy0\"\
      >=</span> <span class=\"kw7\">Owner</span>.<span class=\"kw7\">LifeSpan</span>;</pre></div>\n\
      </div>\n<p>are executed and <i>Owner</i> is set to <i>None</i>.</p>\n<dl>\n\
      <dt>Attempt to assigned variable through None&#160;</dt>\n<dd></dd>\n</dl>\n\
      <p>This is less common and always shows up together with an <i>Accessed None</i>\
      \ warning. If you get this warning look for a line like</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw7\">Owner</span>.<span class=\"me0\">LightType</span>\
      \ <span class=\"sy0\">=</span> newLightType;</pre></div>\n</div>\n<p>in the\
      \ code and check <i>Owner</i>.</p>\n<p><b>Note</b>: First there's the <i>Accessed\
      \ None</i> warning (for accessing <i>None.LightType</i>)</p>\n<dl>\n<dt>Accessed\
      \ null class context&#160;</dt>\n<dd></dd>\n</dl>\n<p>This error occurs whenever\
      \ the default value of a class variable is accessed while the class reference\
      \ is <i>None</i>. If you get this kind of error look for something like</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">x <span class=\"sy0\">=</span> aClass.<span\
      \ class=\"kw1\">default</span>.<span class=\"me0\">Property</span>;</pre></div>\n\
      </div>\n<p>in your code and check why <i>aClass</i> is <i>None</i>.</p>\n<p><br\
      \ /></p>\n<dl>\n<dt>Accessed array '<i>variable name</i>' out of bounds (<i>index</i>/<i>length</i>)&#160;</dt>\n\
      <dd>This warning is generated when you try to access elements of a static or\
      \ dynamic array with an index greater or equal its length or less than zero.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Native_Warnings\">Native Warnings</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Log_Warnings?section=3\" title=\"Edit section: Native\
      \ Warnings\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Native warnings don't have a special structure except that they usually begin\
      \ with \"<code>Warning:</code>\" followed by the warning message. However, not\
      \ all lines beginning with \"<code>Warning:</code>\" actually signal problems,\
      \ some of those are just status messages. (These are described at the end of\
      \ this page.)</p>\n<dl>\n<dt>Failed to load 'NULL': Can't resolve package name<br\
      \ />\nFailed to load '<i>object class</i> None.<i>object name</i>': Can't resolve\
      \ package name&#160;</dt>\n<dd>These two lines appear together and are caused\
      \ by the <code>DynamicLoadObject</code> function when trying to load an object\
      \ from a non-existing package. <i>Object class</i> is the class specified as\
      \ second parameter of <code>DynamicLoadObject</code> and could be e.g. \"Class\"\
      , \"Texture\" or \"Sound\". <i>Object name</i> is the actual name of the object\
      \ that should be loaded. Note that the object's package name is set to \"None\"\
      \ because the package could not be loaded. (which caused the first warning)</dd>\n\
      <dt>Failed to load '<i>package name</i>': Package '<i>package name</i>' version\
      \ mismatch&#160;</dt>\n<dd>The client and server version of the package are\
      \ different, i.e. one isn't an exact copy of the other. This can be bypassed\
      \ in UT (not UT2003) by network-conforming the package, but you should first\
      \ make sure that client and server still understand each other.</dd>\n</dl>\n\
      <dl>\n<dt>SpawnActor failed because no class was specified</dt>\n<dt>SpawnActor\
      \ failed because class <i>classname</i> is abstract</dt>\n<dt>SpawnActor failed\
      \ because <i>classname</i> is not an actor class</dt>\n<dt>SpawnActor failed\
      \ because class <i>classname</i> has bStatic or bNoDelete&#160;</dt>\n<dd>An\
      \ object of the specified class could not be spawned. You can only spawn actor\
      \ classes that are <i>not</i> abstract (see <a href=\"/Legacy:Class_Syntax\"\
      \ title=\"Legacy:Class Syntax\">Class Syntax</a>) and have neither bStatic nor\
      \ bNoDelete set to True.</dd>\n</dl>\n<dl>\n<dt>RPC bunch overflow&#160;</dt>\n\
      <dd>The engine tried to send a network packet larger than 500 bytes. There are\
      \ two ways to end up with an overstuffed packet - too many replicated function\
      \ calls (or <b>R</b>emote <b>P</b>rocedure <b>C</b>all) in a single tick, or\
      \ a property that is being replicated has a value larger than 500 bytes. You\
      \ are sure you don't have any properties that are that large, you say? Here\
      \ are some caveats of <i>atomic</i> replication that you may not know:</dd>\n\
      </dl>\n<dl>\n<dd>\n<ul>\n<li>Static arrays are replicated atomically. If you\
      \ change the value of one member of your replicated static array of 10 strings,\
      \ all 10 strings will be replicated. Ergo the size of your entire static array\
      \ must be smaller than 500 bytes.</li>\n<li>Structs are replicated atomically.\
      \ When any value in a replicated struct is changed, the entire struct is replicated.</li>\n\
      <li>Parameters for replicated function calls must all be replicated in the same\
      \ packet. If you have a replicated function call that takes multiple parameters,\
      \ the cumulative size of all parameters cannot be larger than ~500 bytes.</li>\n\
      </ul>\n</dd>\n</dl>\n<dl>\n<dt>Localization: No localization: <i>property</i>\
      \ (<i>type</i>)&#160;</dt>\n<dd>This warning means, that the <code>Localize</code>\
      \ function couldn't find the specified entry in the language file of the given\
      \ package. <i>Property</i> is the name of a property with the desired package\
      \ and section name. <i>Type</i> is the requested data type, e.g. int, string,\
      \ etc.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Harmless_Log_Lines\"\
      >Harmless Log Lines</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Log_Warnings?section=4\" title=\"Edit section:\
      \ Harmless Log Lines\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Log file lines which begin with <code>Warning:</code> but aren't real warnings.</p>\n\
      <dl>\n<dt>Warning: stage 0: <i>number</i> secs<br />\nWarning: stage 1: <i>number</i>\
      \ secs<br />\nWarning: stage 2: <i>number</i> secs<br />\nWarning: stage 3:\
      \ <i>number</i> secs<br />\nWarning: Total: <i>number</i> secs&#160;</dt>\n\
      <dd>These lines just indicate that a downloaded package is being decompressed.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Log_Warnings?section=5\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Compiler_Errors\" title=\"Legacy:Compiler Errors\"\
      >Compiler Errors</a></li>\n<li><a href=\"/Legacy:Special_UnrealScript_Keywords\"\
      \ title=\"Legacy:Special UnrealScript Keywords\">Special UnrealScript Keywords</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Log_Warnings?section=6\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Mychaeel:</b>\
      \ Evolution writes:</p>\n<blockquote class=\"legacyquote\">\n<p>Static arrays\
      \ are replicated atomically. If you change the value of one member of your replicated\
      \ static array of 10 strings, all 10 strings will be replicated. Ergo the size\
      \ of your entire static array must be smaller than 500 bytes.</p>\n</blockquote>\n\
      <p>However, Tim Sweeney writes in <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://unreal.epicgames.com/Network.htm\">Networking Architecture</a>:</p>\n\
      <blockquote class=\"legacyquote\">\n<p>Arrays are replicated efficiently; if\
      \ a single element of a large array changes, only that element is sent.</p>\n\
      </blockquote>\n<p>So – what's the deal?</p>\n<p><b>Wormbo:</b> We had a discussion\
      \ about that on IRC already and we're not really sure. Evolution has this information\
      \ from Steve Polge. However, Pfhoenix also thinks it's the way Tim Sweeney described\
      \ it and I did a little testing with an array that <i>should</i> exceed the\
      \ magical 500 bytes limit (a static array with a length of 128 consisting of\
      \ structs with one string and one integer value; integers are 4 bytes, aren't\
      \ they?) and it replicated without problems or log messages.</p>\n<p><b>Evolution:</b>\
      \ Yeah but what does Tim Sweeney know? &#160;:)</p>\n<p><b>Wormbo:</b> Obviously\
      \ he knows more about array replication than Mr. Polge. Even an array with 512\
      \ elements (that's definately more than 500 bytes) replicated fine.</p>\n<p><b>El\
      \ Muerte TDS:</b> why 500 bytes?</p>\n<p><b>Evolution:</b> I'll verify all this\
      \ in a few days, at which point I'll remove these comments; most likely it was\
      \ just a brain fart on Steve's part.</p>\n<p><b>EricBlade:</b> Not sure if anyone\
      \ ever figured this one out, but I think it's dynamic arrays that are replicated\
      \ efficiently, and static arrays are not. And it is possible that newer engines\
      \ may have had some of these restrictions eased/removed.</p>\n<p><b>Wormbo:</b>\
      \ Not for UT2004 – dynamic arrays aren't replicated at all and static arrays\
      \ are considered as individual variables for replication.</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.096 seconds\nReal time usage: 0.099 seconds\n\
      Preprocessor visited node count: 209/1000000\nPreprocessor generated node count:\
      \ 479/1000000\nPost‐expand include size: 902/2097152 bytes\nTemplate argument\
      \ size: 349/2097152 bytes\nHighest expansion depth: 3/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    6.196      1 - -total\n 94.30%    5.843      2 - Template:Innerbox\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1684-0!*!0!!en!*!*\
      \ and timestamp 20221117213835 and revision id 4164\n -->\n"
  categories:
  - sortkey: "Log Warnings"
    name: "Legacy_Troubleshooting"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Special UnrealScript Keywords"
  - ns: 100
    exists: true
    name: "Legacy:Compiler Errors"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://unreal.epicgames.com/Network.htm"
  sections:
  - toclevel: 1
    level: "2"
    line: "Script Warnings"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 200
    anchor: "Script_Warnings"
  - toclevel: 2
    level: "3"
    line: "Descriptions"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 1521
    anchor: "Descriptions"
  - toclevel: 1
    level: "2"
    line: "Native Warnings"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 2673
    anchor: "Native_Warnings"
  - toclevel: 2
    level: "3"
    line: "Harmless Log Lines"
    number: "2.1"
    index: "4"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 5969
    anchor: "Harmless_Log_Lines"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 6528
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "6"
    fromtitle: "Legacy:Log_Warnings"
    byteoffset: 6666
    anchor: "Discussion"
  displaytitle: "Legacy:Log Warnings"
  iwlinks: []
  wikitext:
    text: "There are two groups of log warnings, native warnings and script warnings.\
      \ Script warnings can be generated manually from [[Legacy:UnrealScript|UnrealScript]]\
      \ through the <code>Warn</code> function.\n\n==Script Warnings==\n\nScript warnings\
      \ generally have the following structure in Unreal/[[Legacy:UT|UT]]:\n ScriptWarning:\
      \ ''<name>'' ''<object>'' (''Function/State'' ''<function or state name>'':''<adress>'')\
      \ ''<text>''\n\nIn [[Legacy:UT2003|UT2003]] script warnings begin with \"Warning:\"\
      \ like the native warnings described in the next section but still contain name,\
      \ object, function, etc.\n\n; <name> : The class name of the object the warning\
      \ was generated for.\n; <object> : The name of the object (complete name with\
      \ package) the warning was generated for.\n; Function/State : ''Function'' if\
      \ the problem occured in function code, ''State'' if the problem occured in\
      \ state code.\n; <function or state name> : The name of the function or state\
      \ (with names of the state, class and package) that caused the warning. This\
      \ refers to the actual function/state name the problem occured in. Note that\
      \ this could also point to a parent class of the actual class or the parent\
      \ state of the actual state.\n; <adress> : This is an internal hexadecimal adress\
      \ and isn't helpful with finding the actual line the warning was generated for.\n\
      ; <text> : A description of the problem. (see below)\n\nScript warnings don't\
      \ include information about which function called the function that caused the\
      \ warning. You have to figure that out yourself.\n\n===Descriptions===\n; Accessed\
      \ None : \nProbably the most common error message in the log file. This error\
      \ occurs whenever lines like\n\n<uscript>\nOwner.SetPhysics(PHYS_Falling);\n\
      i = Owner.LifeSpan;\n</uscript>\n\nare executed and ''Owner'' is set to ''None''.\n\
      \n; Attempt to assigned variable through None : \nThis is less common and always\
      \ shows up together with an ''Accessed None'' warning. If you get this warning\
      \ look for a line like\n\n<uscript>\nOwner.LightType = newLightType;\n</uscript>\n\
      \nin the code and check ''Owner''.\n\n'''Note''': First there's the ''Accessed\
      \ None'' warning (for accessing ''None.LightType'')\n\n; Accessed null class\
      \ context : \nThis error occurs whenever the default value of a class variable\
      \ is accessed while the class reference is ''None''. If you get this kind of\
      \ error look for something like<uscript>\nx = aClass.default.Property;\n</uscript>\n\
      \nin your code and check why ''aClass'' is ''None''.\n\n\n; Accessed array '<i>variable\
      \ name</i>' out of bounds (<i>index</i>/<i>length</i>) : This warning is generated\
      \ when you try to access elements of a static or dynamic array with an index\
      \ greater or equal its length or less than zero.\n\n==Native Warnings==\n\n\
      Native warnings don't have a special structure except that they usually begin\
      \ with \"<code>Warning:</code>\" followed by the warning message. However, not\
      \ all lines beginning with \"<code>Warning:</code>\" actually signal problems,\
      \ some of those are just status messages. (These are described at the end of\
      \ this page.)\n\n; Failed to load 'NULL'<nowiki>:</nowiki> Can't resolve package\
      \ name<br />Failed to load '<i>object class</i> None.<i>object name</i>'<nowiki>:</nowiki>\
      \ Can't resolve package name : These two lines appear together and are caused\
      \ by the <code>DynamicLoadObject</code> function when trying to load an object\
      \ from a non-existing package. ''Object class'' is the class specified as second\
      \ parameter of <code>DynamicLoadObject</code> and could be e.g. \"Class\", \"\
      Texture\" or \"Sound\". ''Object name'' is the actual name of the object that\
      \ should be loaded. Note that the object's package name is set to \"None\" because\
      \ the package could not be loaded. (which caused the first warning)\n; Failed\
      \ to load '<i>package name</i>'<nowiki>:</nowiki> Package '<i>package name</i>'\
      \ version mismatch : The client and server version of the package are different,\
      \ i.e. one isn't an exact copy of the other. This can be bypassed in UT (not\
      \ UT2003) by network-conforming the package, but you should first make sure\
      \ that client and server still understand each other.\n\n; SpawnActor failed\
      \ because no class was specified\n; SpawnActor failed because class <i>classname</i>\
      \ is abstract\n; SpawnActor failed because <i>classname</i> is not an actor\
      \ class\n; SpawnActor failed because class <i>classname</i> has bStatic or bNoDelete\
      \ : An object of the specified class could not be spawned. You can only spawn\
      \ actor classes that are ''not'' abstract (see [[Legacy:Class Syntax|Class Syntax]])\
      \ and have neither bStatic nor bNoDelete set to True.\n\n; RPC bunch overflow\
      \ : The engine tried to send a network packet larger than 500 bytes.   There\
      \ are two ways to end up with an overstuffed packet - too many replicated function\
      \ calls (or <b>R</b>emote <b>P</b>rocedure <b>C</b>all) in a single tick, or\
      \ a property that is being replicated has a value larger than 500 bytes.  You\
      \ are sure you don't have any properties that are that large, you say?  Here\
      \ are some caveats of <i>atomic</i> replication that you may not know:\n;* Static\
      \ arrays are replicated atomically.  If you change the value of one member of\
      \ your replicated static array of 10 strings, all 10 strings will be replicated.\
      \  Ergo the size of your entire static array must be smaller than 500 bytes.\n\
      ;* Structs are replicated atomically.  When any value in a replicated struct\
      \ is changed, the entire struct is replicated.\n;* Parameters for replicated\
      \ function calls must all be replicated in the same packet.  If you have a replicated\
      \ function call that takes multiple parameters, the cumulative size of all parameters\
      \ cannot be larger than ~500 bytes.\n\n; Localization<nowiki>:</nowiki> No localization<nowiki>:</nowiki>\
      \ <i>property</i> (<i>type</i>) : This warning means, that the <code>Localize</code>\
      \ function couldn't find the specified entry in the language file of the given\
      \ package. ''Property'' is the name of a property with the desired package and\
      \ section name. ''Type'' is the requested data type, e.g. int, string, etc.\n\
      \n===Harmless Log Lines===\n\nLog file lines which begin with <code>Warning:</code>\
      \ but aren't real warnings.\n; Warning<nowiki>:</nowiki> stage 0<nowiki>:</nowiki>\
      \ <i>number</i> secs<br />Warning<nowiki>:</nowiki> stage 1<nowiki>:</nowiki>\
      \ <i>number</i> secs<br />Warning<nowiki>:</nowiki> stage 2<nowiki>:</nowiki>\
      \ <i>number</i> secs<br />Warning<nowiki>:</nowiki> stage 3<nowiki>:</nowiki>\
      \ <i>number</i> secs<br />Warning<nowiki>:</nowiki> Total<nowiki>:</nowiki>\
      \ <i>number</i> secs : These lines just indicate that a downloaded package is\
      \ being decompressed.\n\n==Related Topics==\n* [[Legacy:Compiler Errors|Compiler\
      \ Errors]]\n* [[Legacy:Special UnrealScript Keywords|Special UnrealScript Keywords]]\n\
      \n==Discussion==\n\n'''Mychaeel:''' Evolution writes:\n\n{{innerbox| Static\
      \ arrays are replicated atomically.  If you change the value of one member of\
      \ your replicated static array of 10 strings, all 10 strings will be replicated.\
      \  Ergo the size of your entire static array must be smaller than 500 bytes.\n\
      \n}}\n\nHowever, Tim Sweeney writes in [http://unreal.epicgames.com/Network.htm\
      \ Networking Architecture]:\n\n{{innerbox| Arrays are replicated efficiently;\
      \ if a single element of a large array changes, only that element is sent.\n\
      \n}}\n\nSo &ndash; what's the deal?\n\n'''Wormbo:''' We had a discussion about\
      \ that on IRC already and we're not really sure. Evolution has this information\
      \ from Steve Polge. However, Pfhoenix also thinks it's the way Tim Sweeney described\
      \ it and I did a little testing with an array that ''should'' exceed the magical\
      \ 500 bytes limit (a static array with a length of 128 consisting of structs\
      \ with one string and one integer value; integers are 4 bytes, aren't they?)\
      \ and it replicated without problems or log messages.\n\n'''Evolution:''' Yeah\
      \ but what does Tim Sweeney know?  :)\n\n'''Wormbo:''' Obviously he knows more\
      \ about array replication than Mr. Polge. Even an array with 512 elements (that's\
      \ definately more than 500 bytes) replicated fine.\n\n'''El Muerte TDS:''' why\
      \ 500 bytes?\n\n'''Evolution:''' I'll verify all this in a few days, at which\
      \ point I'll remove these comments;  most likely it was just a brain fart on\
      \ Steve's part.\n\n'''EricBlade:''' Not sure if anyone ever figured this one\
      \ out, but I think it's dynamic arrays that are replicated efficiently, and\
      \ static arrays are not.  And it is possible that newer engines may have had\
      \ some of these restrictions eased/removed.\n\n'''Wormbo:''' Not for UT2004\
      \ &ndash; dynamic arrays aren't replicated at all and static arrays are considered\
      \ as individual variables for replication.\n\n[[Category:Legacy Troubleshooting|{{PAGENAME}}]]"
  properties: []
  revId: 4164
name: "Legacy:Log Warnings"
revision:
  revid: 4164
  parentid: 4165
  user: "Wormbo"
  timestamp: 1142321069.000000000
  comment: "*"
timestamp: 1668764133.428615000
