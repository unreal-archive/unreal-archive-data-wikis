---
parse:
  title: "Legacy:Match These Tags"
  text:
    text: "<p><i>This is a <a href=\"/Category:Legacy_Basic_Procedure\" title=\"Category:Legacy\
      \ Basic Procedure\">Category:Legacy Basic Procedure</a> tutorial page. It explains\
      \ how to perform a single procedure which is required in many different contexts.</i></p>\n\
      <ul>\n<li>For how to set the properties of an actor, see <a href=\"/Legacy:Set_The_Following_Properties\"\
      \ title=\"Legacy:Set The Following Properties\">Set The Following Properties</a></li>\n\
      <li>For more on working with actors in general, see <a href=\"/Legacy:Actor_Overview\"\
      \ title=\"Legacy:Actor Overview\">Actor Overview</a>.</li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Overview\">Overview</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Match_These_Tags?section=1\"\
      \ title=\"Edit section: Overview\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are many instances where you need to \"tie\"\
      \ two or more actors together in some way. The <a href=\"/Legacy:Unreal_Engine\"\
      \ title=\"Legacy:Unreal Engine\">Unreal Engine</a> does this by using tag properties.\
      \ These are <a href=\"/Legacy:Name\" title=\"Legacy:Name\">name</a> variables.\
      \ It doesn't matter what the actual value is, the important thing is that they\
      \ match.</p>\n<p>The classic example is the Events -&gt; Tag and Events -&gt;\
      \ Trigger pair. If we have:</p>\n<ul>\n<li>A Trigger actor with Events -&gt;\
      \ <a href=\"/Legacy:Event\" title=\"Legacy:Event\">Event</a> = foo</li>\n<li>Another\
      \ actor with Events -&gt; <a href=\"/Legacy:Tag\" title=\"Legacy:Tag\">Tag</a>\
      \ = foo</li>\n</ul>\n<p>then the two are tied together, and the Trigger will\
      \ activate the other actor. It doesn't matter that we used \"foo\", only that\
      \ they <i>both</i> have \"foo\". We could have used \"bar\". But of course,\
      \ if later on we want to match another, <i>different</i> pair, then we can't\
      \ use \"foo\", because it's already used. We can give many other actors the\
      \ \"foo\" tag, but they'll be involved with the two we already have: other Triggers,\
      \ or other actors we want to be activated by any of the triggers (database people\
      \ will recognize this as a many-to-many relationship).</p>\n<p>For example,\
      \ the Trigger actor could activate a roomfull of monsters, like this:</p>\n\
      <ul>\n<li>Trigger actor with Events -&gt; <a href=\"/Legacy:Event\" title=\"\
      Legacy:Event\">Event</a> = foo</li>\n<li>Monster1 with Events -&gt; <a href=\"\
      /Legacy:Tag\" title=\"Legacy:Tag\">Tag</a> = foo</li>\n<li>Monster2 with Events\
      \ -&gt; <a href=\"/Legacy:Tag\" title=\"Legacy:Tag\">Tag</a> = foo</li>\n<li>...\
      \ and so on.</li>\n</ul>\n<p>All the monsters will be activated by the Trigger.</p>\n\
      <p>Many other properties use this concept. For example: <a href=\"/Legacy:FortStandard\"\
      \ title=\"Legacy:FortStandard\">FortStandard</a> -&gt; NearestPathNodeTag, etc</p>\n\
      <h2><span class=\"mw-headline\" id=\"Instructions\">Instructions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Match_These_Tags?section=2\" title=\"Edit section: Instructions\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>To\
      \ match the tags of two actors:</p>\n<ol>\n<li>Decide on a name to connect the\
      \ two. It can be anything: \"MrHappyPants\" will do, though it can help if you\
      \ use something that indicates what is going on, like \"SecretDoor\" or \"BigBadMonsterThatComesToEatUnsuspectingCampingPlayer\"\
      \ (actually, don't chose that, <a href=\"/Legacy:Name\" title=\"Legacy:Name\"\
      >names</a> are limited to a max of 31 characters, but you get the drift).</li>\n\
      <li>&lt;wiki&gt;Open the <a href=\"/Legacy:Actor_Properties_Window\" title=\"\
      Legacy:Actor Properties Window\">Actor Properties Window</a> by doing one of:\n\
      <ul>\n<li><a href=\"/Legacy:Actor_Context_Menu\" title=\"Legacy:Actor Context\
      \ Menu\">Actor Context Menu</a> -&gt; &lt;classname&gt; Properties (the first\
      \ item in the menu)</li>\n<li>Press the button labeled #12 on the <a href=\"\
      /Legacy:Toolbar\" title=\"Legacy:Toolbar\">toolbar</a> image above</li>\n<li>Press\
      \ the F4 key</li>\n<li><a href=\"/Legacy:UnrealEd_Main_Menu\" title=\"Legacy:UnrealEd\
      \ Main Menu\">UnrealEd Main Menu</a> -&gt; View -&gt; Actor Properties</li>\n\
      </ul>\n</li>\n</ol>\n<div class=\"center\">\n<div class=\"floatnone\"><a href=\"\
      /File:Legacy_interface-Ed3-actorproperties.png\" class=\"image\" title=\"Actor\
      \ Properties Window&lt;/wiki&gt;\"><img alt=\"Actor Properties Window&lt;/wiki&gt;\"\
      \ src=\"/w/images/Legacy_interface-Ed3-actorproperties.png\" width=\"289\" height=\"\
      304\" /></a></div>\n</div>\n<ol>\n<li>Click the first actor. In the Actor Properties\
      \ Window find the property you need to set (in most cases, 'Event' or 'Tag'\
      \ remember). Type in the name. You can then select the text and copy it if you\
      \ like (CTRL-C).</li>\n<li>Click the second actor. The Actor Properties Window\
      \ updates itself to show the properties of the second actor. <i>Make sure you\
      \ don't now have both selected, UnrealEd sometimes likes to extend selections.</i>\
      \ Find the property you need to set. Type in the same name. If you copied the\
      \ name in the first one, you can do paste here (CTRL-V).</li>\n<li>If you lose\
      \ sleep over whether you made a typo, change the capitalization of the second\
      \ name to make sure they have matched. If UnrealEd changes the capitalization\
      \ as soon as the text box loses focus, then it has made a match. This is because\
      \ names are stored in whichever case you typed them in the first time. For example,\
      \ if you first type \"fOO\", then type \"foo\" the second time, UEd will change\
      \ it to \"fOO\".</li>\n</ol>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Match_These_Tags?section=3\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Event\" title=\"Legacy:Event\">Event</a> covers\
      \ these concepts in more depth.</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.070 seconds\nReal time usage: 0.143 seconds\nPreprocessor visited\
      \ node count: 14/1000000\nPreprocessor generated node count: 40/1000000\nPost‐\
      expand include size: 48/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2079-0!*!0!!*!5!*\
      \ and timestamp 20221118020158 and revision id 5060\n -->\n"
  categories:
  - sortkey: "Match These Tags"
    name: "Legacy_Tutorial"
  - sortkey: "Match These Tags"
    name: "Legacy_Basic_Procedure"
  - sortkey: "Match These Tags"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:FortStandard"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Main Menu"
  - ns: 100
    exists: true
    name: "Legacy:Set The Following Properties"
  - ns: 100
    exists: true
    name: "Legacy:Actor Context Menu"
  - ns: 100
    exists: true
    name: "Legacy:Name"
  - ns: 100
    exists: true
    name: "Legacy:Actor Overview"
  - ns: 14
    exists: true
    name: "Category:Legacy Basic Procedure"
  - ns: 100
    exists: true
    name: "Legacy:Event"
  - ns: 100
    exists: true
    name: "Legacy:Actor Properties Window"
  - ns: 100
    exists: true
    name: "Legacy:Tag"
  - ns: 100
    exists: true
    name: "Legacy:Toolbar"
  templates: []
  images:
  - "Legacy_interface-Ed3-actorproperties.png"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Match_These_Tags"
    byteoffset: 370
    anchor: "Overview"
  - toclevel: 1
    level: "2"
    line: "Instructions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Match_These_Tags"
    byteoffset: 1865
    anchor: "Instructions"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Match_These_Tags"
    byteoffset: 3708
    anchor: "Related_Topics"
  displaytitle: "Legacy:Match These Tags"
  iwlinks: []
  wikitext:
    text: "''This is a [[:Category:Legacy Basic Procedure]] tutorial page. It explains\
      \ how to perform a single procedure which is required in many different contexts.''\n\
      \n* For how to set the properties of an actor, see [[Legacy:Set The Following\
      \ Properties|Set The Following Properties]]\n* For more on working with actors\
      \ in general, see [[Legacy:Actor Overview|Actor Overview]].\n\n==Overview ==\n\
      \nThere are many instances where you need to \"tie\" two or more actors together\
      \ in some way. The [[Legacy:Unreal Engine|Unreal Engine]] does this by using\
      \ tag properties. These are [[Legacy:Name|name]] variables. It doesn't matter\
      \ what the actual value is, the important thing is that they match.\n\nThe classic\
      \ example is the Events -> Tag and Events -> Trigger pair. If we have:\n\n*\
      \ A Trigger actor with Events -> [[Legacy:Event|Event]] = foo\n* Another actor\
      \ with Events -> [[Legacy:Tag|Tag]] = foo\n\nthen the two are tied together,\
      \ and the Trigger will activate the other actor. It doesn't matter that we used\
      \ \"foo\", only that they ''both'' have \"foo\". We could have used \"bar\"\
      . But of course, if later on we want to match another, ''different'' pair, then\
      \ we can't use \"foo\", because it's already used. We can give many other actors\
      \ the \"foo\" tag, but they'll be involved with the two we already have: other\
      \ Triggers, or other actors we want to be activated by any of the triggers (database\
      \ people will recognize this as a many-to-many relationship).\n\nFor example,\
      \ the Trigger actor could activate a roomfull of monsters, like this:\n* Trigger\
      \ actor with Events -> [[Legacy:Event|Event]] = foo\n* Monster1 with Events\
      \ -> [[Legacy:Tag|Tag]] = foo\n* Monster2 with Events -> [[Legacy:Tag|Tag]]\
      \ = foo\n* ... and so on.\n\nAll the monsters will be activated by the Trigger.\n\
      \nMany other properties use this concept. For example: [[Legacy:FortStandard|FortStandard]]\
      \ -> NearestPathNodeTag, etc\n\n==Instructions ==\n\nTo match the tags of two\
      \ actors:\n\n# Decide on a name to connect the two. It can be anything: \"MrHappyPants\"\
      \ will do, though it can help if you use something that indicates what is going\
      \ on, like \"SecretDoor\" or \"BigBadMonsterThatComesToEatUnsuspectingCampingPlayer\"\
      \ (actually, don't chose that,  [[Legacy:Name|name]]s are limited to a max of\
      \ 31 characters, but you get the drift).\n#<wiki>Open the [[Legacy:Actor Properties\
      \ Window|Actor Properties Window]] by doing one of:\n#* [[Legacy:Actor Context\
      \ Menu|Actor Context Menu]] -> <classname> Properties (the first item in the\
      \ menu)\n#* Press the button labeled #12 on the [[Legacy:Toolbar|toolbar]] image\
      \ above\n#* Press the F4 key\n#* [[Legacy:UnrealEd Main Menu|UnrealEd Main Menu]]\
      \ -> View -> Actor Properties\n\n[[Image:Legacy_interface-Ed3-actorproperties.png|center|'''Actor\
      \ Properties Window'''</wiki>]]\n\n# Click the first actor. In the Actor Properties\
      \ Window find the property you need to set (in most cases, 'Event' or 'Tag'\
      \ remember). Type in the name. You can then select the text and copy it if you\
      \ like (CTRL-C).\n# Click the second actor. The Actor Properties Window updates\
      \ itself to show the properties of the second actor. ''Make sure you don't now\
      \ have both selected, UnrealEd sometimes likes to extend selections.'' Find\
      \ the property you need to set. Type in the same name. If you copied the name\
      \ in the first one, you can do paste here (CTRL-V).\n# If you lose sleep over\
      \ whether you made a typo, change the capitalization of the second name to make\
      \ sure they have matched. If UnrealEd changes the capitalization as soon as\
      \ the text box loses focus, then it has made a match. This is because names\
      \ are stored in whichever case you typed them in the first time. For example,\
      \ if you first type \"fOO\", then type \"foo\" the second time, UEd will change\
      \ it to \"fOO\".\n\n==Related Topics ==\n* [[Legacy:Event|Event]] covers these\
      \ concepts in more depth.\n\n[[Category:Legacy Basic Procedure|{{PAGENAME}}]]\n\
      [[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 5060
name: "Legacy:Match These Tags"
revision:
  revid: 5060
  parentid: 5061
  user: "Tarquin"
  timestamp: 1070199477.000000000
  comment: "*"
timestamp: 1668773416.185675000
