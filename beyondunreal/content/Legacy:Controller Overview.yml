---
parse:
  title: "Legacy:Controller Overview"
  text:
    text: "<p>A UT200x player is composed of a number of classes that all work together\
      \ to accept and process input from the player and handle collision with the\
      \ world. Bots use much the same system, so processing of AI also takes place\
      \ (for Bot-specific subclasses; more on that in a minute) within the same code.\
      \ What follows is an attempt to explain the different classes involved and how\
      \ they interact.</p>\n<dl>\n<dt>Controller</dt>\n<dd>The base interface to a\
      \ pawn.</dd>\n</dl>\n<dl>\n<dd>\n<ul>\n<li>Receives events from the engine that\
      \ are destined for the <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a>,</li>\n\
      <li>Handles AI,</li>\n<li>Acts as an animation interface,</li>\n<li>Controllers\
      \ are partially implemented using native code and have native replication,</li>\n\
      <li>Most of the time, each <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a> has a <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a>\
      \ attached to it,</li>\n<li>A good way to visualise the <a href=\"/Legacy:Controller\"\
      \ title=\"Legacy:Controller\">Controller</a>/<a href=\"/Legacy:Pawn\" title=\"\
      Legacy:Pawn\">Pawn</a> interface is to consider the <a href=\"/Legacy:Controller\"\
      \ title=\"Legacy:Controller\">Controller</a> the \"brain\" of a <a href=\"/Legacy:Pawn\"\
      \ title=\"Legacy:Pawn\">Pawn</a> (which is the \"body\").</li>\n</ul>\n</dd>\n\
      </dl>\n<p>The class definition of <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a> shows that it is an <i>abstract</i> class - this means that\
      \ this isn't the class actually used in <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>; human players use <a href=\"\
      /Legacy:XPlayer\" title=\"Legacy:XPlayer\">xPlayer</a> while bots use <a href=\"\
      /Legacy:XBot\" title=\"Legacy:XBot\">xBot</a>.</p>\n<p>The gametype of the current\
      \ <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">Level</a> specifies\
      \ the type of <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\">Controller</a>\
      \ for bots and players to use. As bots don't cheat in <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>, the <a href=\"/Legacy:XBot\"\
      \ title=\"Legacy:XBot\">xBot</a> class doesn't have a number of security-related\
      \ classes that the <a href=\"/Legacy:XPlayer\" title=\"Legacy:XPlayer\">xPlayer</a>\
      \ has.</p>\n<p>One of these differences is that a <a href=\"/Legacy:PlayerInput\"\
      \ title=\"Legacy:PlayerInput\">PlayerInput</a> class is attached to each (human)\
      \ player, and this processes keyboard/mouse/joystick input and (then) passes\
      \ it to the <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\">Controller</a>.</p>\n\
      <p>The other is the <a href=\"/Legacy:CheatManager\" title=\"Legacy:CheatManager\"\
      >CheatManager</a> class; this is involved with handling console commands (such\
      \ as cheats such as \"god\") and other debug functions that can only be called\
      \ in <b>Instant Action</b> (or other custom non-network gametypes).</p>\n<p>Unlike\
      \ The Matrix, <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawns</a> can exist\
      \ without <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\">Controllers</a>\
      \ and vice-versa. Indeed, the alternate firemode of the Redeemer creates a new\
      \ <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a> that the Player's\
      \ <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\">Controller</a>\
      \ possesses - this is how the Player's mouse/keyboard input is \"mapped\" onto\
      \ the Redeemer.</p>\n<h2><span class=\"mw-headline\" id=\"Some_Useful_Properties\"\
      >Some Useful Properties</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Controller_Overview?section=1\"\
      \ title=\"Edit section: Some Useful Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dt>Engine.<a href=\"/Legacy:GameInfo\" title=\"\
      Legacy:GameInfo\">GameInfo</a>.PlayerControllerClass&#160;</dt>\n<dd>This property\
      \ defines the class to use to control the player. Changing this class will allow\
      \ you to alter the view the player sees in first person, behind view, and spectator\
      \ mode. It also handles lots of stuff that only execute on the client. The default\
      \ value for this is not set although Engine.<a href=\"/Legacy:PlayerController\"\
      \ title=\"Legacy:PlayerController\">PlayerController</a> (UnrealGame.<a href=\"\
      /Legacy:DeathMatch\" title=\"Legacy:DeathMatch\">DeathMatch</a> specifies xGame.<a\
      \ href=\"/Legacy:XPlayer\" title=\"Legacy:XPlayer\">xPlayer</a>) will be instantiated\
      \ if a subclass of GameInfo fails to provide a default value by using the PlayerControllerClassName\
      \ property.</dd>\n</dl>\n<dl>\n<dt>Engine.<a href=\"/Legacy:GameInfo\" title=\"\
      Legacy:GameInfo\">GameInfo</a>.DefaultPlayerClassName&#160;</dt>\n<dd>This property\
      \ allows the default player class as displayed within the 3D world to be specified.\
      \ The class specified by this property handles all the classic player pawn stuff\
      \ (animation, physics, blah blah blah). The default value for this specified\
      \ in UnrealGame.<a href=\"/Legacy:DeathMatch\" title=\"Legacy:DeathMatch\">DeathMatch</a>\
      \ is xGame.<a href=\"/Legacy:XPawn\" title=\"Legacy:XPawn\">xPawn</a>.</dd>\n\
      </dl>\n<dl>\n<dt>Engine.<a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a>.CheatManager&#160;</dt>\n<dd>This property specifies the\
      \ class to use to handle the cheat manager. If you want to add new console commands\
      \ then this is the class you need to replace. The default value set within the\
      \ PlayerController class is Engine.<a href=\"/Legacy:CheatManager\" title=\"\
      Legacy:CheatManager\">CheatManager</a>.</dd>\n</dl>\n<dl>\n<dt>Engine.<a href=\"\
      /Legacy:PlayerController\" title=\"Legacy:PlayerController\">PlayerController</a>.PlayerInput&#160;</dt>\n\
      <dd>This property specifies the class use to capture and process player input.\
      \ So if you want to change the way double-click moving works or mouse smoothing\
      \ then this is the place to start.</dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Pages\">Related Pages</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Controller_Overview?section=2\"\
      \ title=\"Edit section: Related Pages\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a> – Base class\n<ul>\n<li><a href=\"/Legacy:AIController\" title=\"\
      Legacy:AIController\">AIController</a> – Artificially intelligent agents</li>\n\
      <li><a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\">PlayerController</a>\
      \ – A slightly more in depth look at the relationship between player controllers\
      \ and pawns.</li>\n</ul>\n</li>\n<li><a href=\"/Legacy:Engine_Concept\" title=\"\
      Legacy:Engine Concept\">Engine_Concept</a> – A list of definitions of terms\
      \ used on this page.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\"\
      >Discussion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Controller_Overview?section=3\" title=\"Edit\
      \ section: Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> Merge needed of the two intros above. Since I don't know\
      \ much about it, someone else should do it. The stuff on <a href=\"/Legacy:PlayerController\"\
      \ title=\"Legacy:PlayerController\">PlayerController</a> has been moved to,\
      \ well, <a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a>.</p>\n<p><b>DJPaul:</b> Started doing Mr. T's merge; hopefully\
      \ it's not too bad.</p>\n<p><b>scumble:</b> It's an oversimplification to say\
      \ that the <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">Level</a>\
      \ determines the <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a> used by Pawns. From what I found out recently, it's one of the\
      \ defaultproperties in <a href=\"/Legacy:XPawn\" title=\"Legacy:XPawn\">xPawn</a>\
      \ that specifies XGame.<a href=\"/Legacy:XBot\" title=\"Legacy:XBot\">xBot</a>\
      \ as the controller. The <a href=\"/Legacy:GameInfo\" title=\"Legacy:GameInfo\"\
      >GameInfo</a> only specifies the <a href=\"/edit/Legacy:Roster?redlink=1\" class=\"\
      new\" title=\"Legacy:Roster (page does not exist)\">Roster</a> class. You have\
      \ to get down to <a href=\"/edit/Legacy:XRosterEntry?redlink=1\" class=\"new\"\
      \ title=\"Legacy:XRosterEntry (page does not exist)\">xRosterEntry</a> before\
      \ you find the code that returns <a href=\"/edit/Legacy:XPawns?redlink=1\" class=\"\
      new\" title=\"Legacy:XPawns (page does not exist)\">xPawns</a> for the Enemy\
      \ team.</p>\n<p><b>Daid303:</b> It's says that the \"gametype of the current\
      \ <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">Level</a>\" not the\
      \ \"<a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">Level</a>\" determines\
      \ the controller class. And that's 100% true&#160;:) But yes, for bots it gets\
      \ it from the Roster. But that's not true for normal players.</p>\n<p><b>scumble:</b>\
      \ Yes, I meant gametype! I'm really advocating a little elaboration on the difference\
      \ between how Bots and Players are spawned. They seem to work in opposite directions.</p>\n\
      <hr />\n<p><a href=\"/Category:Legacy_To_Do\" title=\"Category:Legacy To Do\"\
      >Category:Legacy To Do</a> – Make this a more complete overview of all Controllers\
      \ with relevant links to <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a> and its subclasses.</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.044 seconds\nReal time usage: 0.046 seconds\nPreprocessor visited\
      \ node count: 12/1000000\nPreprocessor generated node count: 24/1000000\nPost‐\
      expand include size: 19/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:794-0!*!0!!*!*!*\
      \ and timestamp 20221117191158 and revision id 2248\n -->\n"
  categories:
  - sortkey: "Controller Overview"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:GameInfo"
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:XBot"
  - ns: 100
    exists: false
    name: "Legacy:XPawns"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:PlayerInput"
  - ns: 100
    exists: true
    name: "Legacy:XPawn"
  - ns: 100
    exists: true
    name: "Legacy:Engine Concept"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:AIController"
  - ns: 100
    exists: true
    name: "Legacy:DeathMatch"
  - ns: 100
    exists: true
    name: "Legacy:Controller"
  - ns: 100
    exists: true
    name: "Legacy:XPlayer"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:CheatManager"
  - ns: 100
    exists: false
    name: "Legacy:XRosterEntry"
  - ns: 100
    exists: false
    name: "Legacy:Roster"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Some Useful Properties"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Controller_Overview"
    byteoffset: 2352
    anchor: "Some_Useful_Properties"
  - toclevel: 1
    level: "2"
    line: "Related Pages"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Controller_Overview"
    byteoffset: 3988
    anchor: "Related_Pages"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Controller_Overview"
    byteoffset: 4387
    anchor: "Discussion"
  displaytitle: "Legacy:Controller Overview"
  iwlinks: []
  wikitext:
    text: "A UT200x player is composed of a number of classes that all work together\
      \ to accept and process input from the player and handle collision with the\
      \ world.  Bots use much the same system, so processing of AI also takes place\
      \ (for Bot-specific subclasses; more on that in a minute) within the same code.\
      \  What follows is an attempt to explain the different classes involved and\
      \ how they interact.\n\n; Controller: The base interface to a pawn.\n;*Receives\
      \ events from the engine that are destined for the [[Legacy:Pawn|Pawn]],\n;*Handles\
      \ AI,\n;*Acts as an animation interface,\n;*Controllers are partially implemented\
      \ using native code and have native replication,\n;*Most of the time, each [[Legacy:Controller|Controller]]\
      \ has a [[Legacy:Pawn|Pawn]] attached to it,\n;*A good way to visualise the\
      \ [[Legacy:Controller|Controller]]/[[Legacy:Pawn|Pawn]] interface is to consider\
      \ the [[Legacy:Controller|Controller]] the \"brain\" of a [[Legacy:Pawn|Pawn]]\
      \ (which is the \"body\").\n\nThe class definition of [[Legacy:Controller|Controller]]\
      \ shows that it is an ''abstract'' class - this means that this isn't the class\
      \ actually used in [[Legacy:UT2003|UT2003]]; human players use [[Legacy:XPlayer|xPlayer]]\
      \ while bots use [[Legacy:XBot|xBot]].\n\nThe gametype of the current [[Legacy:LevelInfo|Level]]\
      \ specifies the type of [[Legacy:Controller|Controller]] for bots and players\
      \ to use.  As bots don't cheat in [[Legacy:UT2003|UT2003]], the [[Legacy:XBot|xBot]]\
      \ class doesn't have a number of security-related classes that the [[Legacy:XPlayer|xPlayer]]\
      \ has.\n\nOne of these differences is that a [[Legacy:PlayerInput|PlayerInput]]\
      \ class is attached to each (human) player, and this processes keyboard/mouse/joystick\
      \ input and (then) passes it to the [[Legacy:Controller|Controller]].\n\nThe\
      \ other is the [[Legacy:CheatManager|CheatManager]] class; this is involved\
      \ with handling console commands (such as cheats such as \"god\") and other\
      \ debug functions that can only be called in '''Instant Action''' (or other\
      \ custom non-network gametypes).\n\nUnlike The Matrix, [[Legacy:Pawn|Pawn]]s\
      \ can exist without [[Legacy:Controller|Controller]]s and vice-versa.  Indeed,\
      \ the alternate firemode of the Redeemer creates a new [[Legacy:Pawn|Pawn]]\
      \ that the Player's [[Legacy:Controller|Controller]] possesses - this is how\
      \ the Player's mouse/keyboard input is \"mapped\" onto the Redeemer.\n\n==Some\
      \ Useful Properties==\n; Engine.[[Legacy:GameInfo|GameInfo]].PlayerControllerClass\
      \ : This property defines the class to use to control the player.  Changing\
      \ this class will allow you to alter the view the player sees in first person,\
      \ behind view, and spectator mode.  It also handles lots of stuff that only\
      \ execute on the client.  The default value for this is not set although Engine.[[Legacy:PlayerController|PlayerController]]\
      \ (UnrealGame.[[Legacy:DeathMatch|DeathMatch]] specifies xGame.[[Legacy:XPlayer|xPlayer]])\
      \ will be instantiated if a subclass of GameInfo fails to provide a default\
      \ value by using the PlayerControllerClassName property.\n\n; Engine.[[Legacy:GameInfo|GameInfo]].DefaultPlayerClassName\
      \ : This property allows the default player class as displayed within the 3D\
      \ world to be specified.  The class specified by this property handles all the\
      \ classic player pawn stuff (animation, physics, blah blah blah).  The default\
      \ value for this specified in UnrealGame.[[Legacy:DeathMatch|DeathMatch]] is\
      \ xGame.[[Legacy:XPawn|xPawn]].\n\n; Engine.[[Legacy:PlayerController|PlayerController]].CheatManager\
      \ : This property specifies the class to use to handle the cheat manager.  If\
      \ you want to add new console commands then this is the class you need to replace.\
      \  The default value set within the PlayerController class is Engine.[[Legacy:CheatManager|CheatManager]].\n\
      \n; Engine.[[Legacy:PlayerController|PlayerController]].PlayerInput : This property\
      \ specifies the class use to capture and process player input.  So if you want\
      \ to change the way double-click moving works or mouse smoothing then this is\
      \ the place to start.\n\n==Related Pages ==\n* [[Legacy:Controller|Controller]]\
      \ &ndash; Base class\n** [[Legacy:AIController|AIController]] &ndash; Artificially\
      \ intelligent agents\n** [[Legacy:PlayerController|PlayerController]] &ndash;\
      \ A slightly more in depth look at the relationship between player controllers\
      \ and pawns.\n* [[Legacy:Engine_Concept|Engine_Concept]] &ndash; A list of definitions\
      \ of terms used on this page.\n\n==Discussion==\n\n'''Tarquin:''' Merge needed\
      \ of the two intros above. Since I don't know much about it, someone else should\
      \ do it. The stuff on [[Legacy:PlayerController|PlayerController]] has been\
      \ moved to, well, [[Legacy:PlayerController|PlayerController]]. \n\n'''DJPaul:'''\
      \ Started doing Mr. T's merge; hopefully it's not too bad.\n\n'''scumble:'''\
      \ It's an oversimplification to say that the [[Legacy:LevelInfo|Level]] determines\
      \ the [[Legacy:Controller|Controller]] used by Pawns. From what I found out\
      \ recently, it's one of the defaultproperties in [[Legacy:XPawn|xPawn]] that\
      \ specifies XGame.[[Legacy:XBot|xBot]] as the controller. The [[Legacy:GameInfo|GameInfo]]\
      \ only specifies the [[Legacy:Roster|Roster]] class. You have to get down to\
      \ [[Legacy:XRosterEntry|xRosterEntry]] before you find the code that returns\
      \ [[Legacy:XPawns|xPawns]] for the Enemy team.\n\n'''Daid303:''' It's says that\
      \ the \"gametype of the current [[Legacy:LevelInfo|Level]]\" not the \"[[Legacy:LevelInfo|Level]]\"\
      \ determines the controller class. And that's 100% true :) But yes, for bots\
      \ it gets it from the Roster. But that's not true for normal players.\n\n'''scumble:'''\
      \ Yes, I meant gametype! I'm really advocating a little elaboration on the difference\
      \ between how Bots and Players are spawned. They seem to work in opposite directions.\n\
      \n----\n\n[[:Category:Legacy To Do]] &ndash; Make this a more complete overview\
      \ of all Controllers with relevant links to [[Legacy:Controller|Controller]]\
      \ and its subclasses.\n[[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 2248
name: "Legacy:Controller Overview"
revision:
  revid: 2248
  parentid: 2250
  user: "SuperApe"
  timestamp: 1133987384.000000000
  comment: "*"
timestamp: 1668767071.722857000
