---
parse:
  title: "Legacy:Breaking Glass UT2003"
  text:
    text: "<p>This tutorial applies to UT2003/2004.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"The_Concept\">The Concept</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Breaking_Glass_UT2003?section=1\"\
      \ title=\"Edit section: The Concept\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>To make a window that breaks in your map, you need\
      \ two things. A movable brush that represents the window in its whole state,\
      \ and an <a href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\">Emitter</a> to\
      \ spawn in for the shattering glass fragments that spill out when the window\
      \ gets \"Broken\".</p>\n<p>You will need to understand the basic use of <a href=\"\
      /Legacy:Mover\" title=\"Legacy:Mover\">Movers</a>, <a href=\"/Legacy:Trigger\"\
      \ title=\"Legacy:Trigger\">Triggers</a> and <a href=\"/Legacy:ScriptedTrigger\"\
      \ title=\"Legacy:ScriptedTrigger\">ScriptedTriggers</a></p>\n<h2><span class=\"\
      mw-headline\" id=\"The_Mover\">The Mover</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Breaking_Glass_UT2003?section=2\"\
      \ title=\"Edit section: The Mover\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you don't already have a nice glass material set\
      \ up, make one now. I suggest reading about <a href=\"/Legacy:Shader\" title=\"\
      Legacy:Shader\">Shaders</a>, using Opacity in your shader, and maybe Specularity\
      \ if you want it to look really nice.</p>\n<p>In 2003/2004 movers may only be\
      \ made with <a href=\"/Legacy:Static_Mesh\" title=\"Legacy:Static Mesh\">static\
      \ meshes</a>, so we will use <a href=\"/Legacy:BSP\" title=\"Legacy:BSP\">BSP</a>\
      \ to create our window to start with. Apply your window texture to a thin additive\
      \ brush that fits as your window. Right click on the additive brush after you\
      \ create it, and choose Convert -&gt; To Static Mesh. Enter myLevel as your\
      \ package, and give it whatever name you wish. Now if you look in the static\
      \ mesh browser, you should see your window mesh.</p>\n<p>Back in the edit, click\
      \ on the Add Mover button to add your window mesh as a movable brush. Move it\
      \ into place, and set this as the base with Mover -&gt; Key 0. Now right click\
      \ the mover and choose Mover -&gt; Key 1, then move the window somewhere out\
      \ of view, preferably completely outside the level, right click it again and\
      \ choose Mover -&gt; Key 0 (Base). The window should snap back into its base\
      \ position.</p>\n<p>We need to set up some properties in our mover to make it\
      \ dissapear from view when shot. So open the properties window for the mover.</p>\n\
      <p>We will change:</p>\n<ul>\n<li><b>Object -&gt; InitialState</b> to <b>TriggerOpenTimed</b></li>\n\
      <li><b>Mover -&gt; MoveTime</b> to <b>0</b></li>\n<li><b>Mover -&gt; StayOpenTime</b>\
      \ to however long you want your window to stay broken before respawning. This\
      \ value is in seconds.</li>\n<li><b>Mover -&gt; bDamageTriggered</b> to <b>True</b></li>\n\
      <li><b>Mover -&gt; DamageThreshold</b> to <b>1</b></li>\n<li><b>Display -&gt;\
      \ bShadowCast</b> to <b>False</b> or else the window will cast a shadow, and\
      \ look bad when it breaks.</li>\n</ul>\n<p>Now hopefully we have a pane of glass\
      \ that when shot, moves (In 0 seconds) off the map, giving the illusion that\
      \ it has been destroyed.</p>\n<p>But now we need shattering fragments of glass\
      \ to complete the illusion.</p>\n<h4><span class=\"mw-headline\" id=\"The_Special_Effects\"\
      >The Special Effects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Breaking_Glass_UT2003?section=3\" title=\"Edit\
      \ section: The Special Effects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>This section is a compilation of several different\
      \ resources on creating breaking glass. Many of them had 90% of the information\
      \ necessary but none had 100%. So everyone who made a breaking glass tut, your\
      \ stuff is used in here, thanks, you rock.</p>\n<p>The falling shards of glass\
      \ require you to set up an emitter to produce the shards, and a second custom\
      \ actor class to spawn them. First: the emitter:</p>\n<p>Select \"Emitter\"\
      \ from the actor classes (or Network Emitter\" to make it playable online),\
      \ and place it in your level. There are certain things that must be set up correctly\
      \ for the breaking glass to spawn the way you want it to:</p>\n<ul>\n<li>Advanced\
      \ -&gt; bDirectional = True. This is necessary to align the shards with the\
      \ window.</li>\n<li>Advanced -&gt; bNoDelete = <b>FALSE</b>. This is required\
      \ for the emitter to be spawned when called by the \"spawner\" actor.</li>\n\
      <li>Emitter -&gt;\n<ul>\n<li>Acceleration -&gt; Acceleration - Z = -950. This\
      \ simulates normal gravity in allowing the shards to fall.</li>\n<li>Collision\
      \ -&gt; DampingFactorRange - X Max/Min = .9 / .8 Y Max/Min = .5 Z Max/Min =\
      \ .3 / .2 (<i>It's important to note that in 2004 range properties windows,\
      \ Max is <b>first</b>, then Min.</i>, even though they are displayed as min/max\
      \ at the top of the listing.)</li>\n<li>Collision -&gt; UseCollision = True.\
      \ Else your shards will fall through the floor and keep going. o_O</li>\n<li>General\
      \ -&gt; MaxParticles = ~2000. This is variable depending on the size of your\
      \ window and of yuur shards. Once you get more than 5000 or so particles at\
      \ once, it starts to drag down your average PC, so if your level has 7 breakable\
      \ windows, don't give them 4000 particles each. If necessary, spawn a fewer\
      \ number of larger shards to save CPU cycles.</li>\n<li>Local -&gt; RespawnDeadParticles\
      \ = False. You want a broken window, not a glass fountain.</li>\n<li>Location\
      \ -&gt; StartLocationRange -&gt; Y Max/Min = +/- half the width of your window.\
      \ Example, if your window is 512UU wide, Y range is 256 / -256. Same for Z range,\
      \ Max/Min = +/- half the height of your window.</li>\n<li><b>Rotation -&gt;\
      \ UseRotationFrom = PTRS_Actor.</b> This is critical if you wish to have more\
      \ than one breaking glass in your level, from different angles.</li>\n<li>Spawning\
      \ -&gt; AutomaticInitialSpawning = False. It is going to be triggered.</li>\n\
      <li>Spawning -&gt; InitialParticlesPerSecond = 50000. This releases all particles\
      \ in a fraction of a second.</li>\n<li>Spawning -&gt; ParticlesPerSecond = 0.\
      \ Again, not a fountain.</li>\n<li>Texture -&gt; DrawStyle = PTDS_Transluscent</li>\n\
      <li>Texture -&gt; Texture - Select the shard texture from your texture browser\
      \ window, then return here and click \"Use\" to insert it into your texture\
      \ line.</li>\n<li>Texture -&gt; TextureUSubdivisions &amp; TextureVSubdivisions-&gt;\
      \ Divide your texture up by shards. For example, if your texture is two shards\
      \ wide by two shards high, your U and V subdivions are 2 each.</li>\n<li>Time\
      \ -&gt; LifetimeRange = Set this to whatever. If your window respawns, set it\
      \ to no more than the \"Open Time\" of your window mover. Else, set it to whatever\
      \ you wish, 100000 to stay forever, but remember that particles eat up resources\
      \ as long as they remain in your level.</li>\n<li>Velocity -&gt; StartVelocityRange\
      \ - X Max/Min = 200 / -200. Y Max/Min = 100 / -100</li>\n</ul>\n</li>\n</ul>\n\
      <p>At this point, the effect of the emitter should be visible in any 3d views\
      \ you have open. You can use this to tweak the settings of your emitter to get\
      \ the look you want.</p>\n<p>Once you've created your emitter, align it with\
      \ your window, and use rotation to point the directional arrow in the desired\
      \ direction, I recommend an angle somewhat downward and away from the window,\
      \ to make sure your axis rotation is set up properly.</p>\n<p>Now, its time\
      \ to set it up to be spawned when someone shoots your window. Leave your emitter\
      \ properties window open for now.</p>\n<p>Go back to your Actor browser window,\
      \ right-click on Emitter, and click New to create a new custom subclass of Emitter.<br\
      \ />\nIn the creation window, change MyPackage to MyLevel (this is a must),\
      \ set a group if you wish, and set the name however you wish. For reference,\
      \ I will use BreakingGlassEmitter.</p>\n<p>An UnrealScript window will pop open.\
      \ You can click \"Compile Changed\" now if you wish, or later when we create\
      \ the spawner. Either way, close this window.</p>\n<p>Now expand the Emitters\
      \ section and right-click on BreakingGlassEmitter. If it is not visible in your\
      \ window, simply uncheck the \"Placeable Only\" box and it will appear. Click\
      \ on Default Properties, and a properties window will appear similar to the\
      \ one for your emitter. Open up the Emitters section of your BreakingGlassEmitter,\
      \ and click the Add button. Now go to the Emitters section of the properties\
      \ window of your emitter, and copy the full name from the Emitters -&gt; 0 field,\
      \ \"SpriteEmitter'myLevel.SpriteEmitter0\" or something similar. Paste it into\
      \ the corresponding field in your BreakingGlassEmitter and hit Enter. All the\
      \ properties of your emitter will be copied into this actor subclass.</p>\n\
      <p>Now change a few settings:</p>\n<ul>\n<li>Advanced -&gt; bDirectional = True</li>\n\
      <li>Advanced -&gt; bNoDelete = FALSE</li>\n</ul>\n<p>Now close all these properties\
      \ windows and delete your template emitter, it is no longer needed.</p>\n<p>Go\
      \ back to your Actors browser window, right click on Emitter, and click New\
      \ to create your second custom subclass. Package is still myLevel, Group is\
      \ completely up to you, Name is whatever, we will use BreakingGlassSpawner for\
      \ reference.</p>\n<p>When the UnrealScript window pops up, type or copy / paste\
      \ this into the script:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> BreakingGlassSpawner <span class=\"kw1\">extends</span> <span\
      \ class=\"kw9\">Actor</span>\n     <span class=\"kw1\">placeable</span>;\n \n\
      <span class=\"kw1\">event</span> <span class=\"kw4\">Trigger</span><span class=\"\
      br0\">(</span><span class=\"kw9\">Actor</span> Other, <span class=\"kw9\">Pawn</span>\
      \ EventInstigator<span class=\"br0\">)</span>\n \n<span class=\"br0\">{</span><span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\"\
      >class</span><span class=\"st0\">'myLevel.BreakingGlassEmitter'</span>,,,<span\
      \ class=\"kw6\">Self</span>.<span class=\"kw7\">Location</span>,<span class=\"\
      kw6\">Self</span>.<span class=\"kw7\">Rotation</span><span class=\"br0\">)</span>;<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Now compile changed scripts\
      \ and close your window. In the Actor browser, you should be able to see both\
      \ your custom subclasses, BreakingGlassEmitter and BreakingGlassSpawner. Right-click\
      \ on BreakingGlassSpawner, click Default Properties, and check the following\
      \ settings:</p>\n<ul>\n<li>Advanced -&gt; bDirectional = True</li>\n<li><b>Advanced\
      \ -&gt; bNoDelete = True</b> (this is where you must do this)</li>\n</ul>\n\
      <p>Now Add your BreakingGlassSpawner actor to the level, and align it with the\
      \ window where you had placed the emitter previously. Set the Event -&gt; Event\
      \ of your window mover to something like Window1 or BreakGlass or whatever,\
      \ then set the Event -&gt; Tag of your BreakingGlassSpawner to match. Save,\
      \ rebuild, save, give it a go!</p>\n<p><i>(Note: some of the steps taken here\
      \ are very likely redundant, for example, setting the directional to True for\
      \ the Emitter AND BOTH actor subclasses, if someone can verify that this will\
      \ still function with certain steps excluded, feel free to remove them.)</i></p>\n\
      <hr />\n<p>Now the UDN page gives a very vague explanation of creating an actor\
      \ to spawn this emitter. I followed more of Robo's excellent instructions and\
      \ instead used a <a href=\"/Legacy:ScriptedTrigger\" title=\"Legacy:ScriptedTrigger\"\
      >ScriptedTrigger</a> to accomplish this.</p>\n<hr />\n<p>The UDN says to make\
      \ a spawner class but I used a ScriptedTrigger for spawning my emitters. The\
      \ advantages of using a ScriptedTrigger are that you can spawn your emitter\
      \ class at the location of ANY ScriptedTrigger without having to have location\
      \ and rotation data for the emitter class. You can also add a breaking glass\
      \ sound effect to play within the ScriptedTrigger.</p>\n<ol>\n<li>Add your glass\
      \ window mover to your map. For its key1, move it away out of the map so it\
      \ will be hidden when it's shot.</li>\n</ol>\n<ol>\n<li>Expand the \"MoverEvents\"\
      \ section and set the following values..</li>\n</ol>\n<p>OpeningEvent = breakglass1</p>\n\
      <ol>\n<li>Expand the \"Object\" section and set its InitialState to \"TriggerOpenTimed\"\
      .</li>\n</ol>\n<ol>\n<li>Add a ScriptedTrigger to your map and move it to be\
      \ in the same position as your mover. Also rotate it so it's facing the right\
      \ way for when your glass breaks.</li>\n</ol>\n<ol>\n<li>Open the ScriptedTriggers\
      \ properties, expand its Events section, and set its tag to \"breakglass1\"\
      .</li>\n</ol>\n<ol>\n<li>Now for the meat. Expand its AIScript\" section...</li>\n\
      </ol>\n<ul>\n<li>Add a new event of Action_WAITFOREVENT type, and in its ExternalEvent\
      \ = breakglass1</li>\n<li>Add a new event of Action_SpawnActor and select your\
      \ emitter class as the actor to spawn.</li>\n<li>Add a new event of type Action_PLAYSOUND.\
      \ Set its sound to be a breaking glass sound. We are using this method because\
      \ it gives you better control over the sound than the mover does.</li>\n<li>Add\
      \ a new event of type Action_GOTOACTION. Leave its setting at 0</li>\n</ul>\n\
      <p>Ok that should do it. Rebuild your map and test it out. When you shoot the\
      \ mover it should immediatly move out of view, the breaking glass emitter will\
      \ be spawned, showering broken glass from where the ScriptedTrigger is, and\
      \ play a breaking glass noise.</p>\n<p>This method should work well and it has\
      \ the added bonus that you can add more breaking glass movers and ScriptedTriggers\
      \ to have a whole glasshouse of breakable glass windows. Even better they respawn\
      \ after the time you set in your movers \"StayOpenTime' value.</p>\n<p>Hopefully\
      \ that helps you out</p>\n<hr />\n<p>It certainly helped me out, and as any\
      \ good mapper should, im adding what ive learned to the wiki&#160;:)</p>\n<p><b>LionsPhil:</b>\
      \ This is neat, but if a player is standing on the glass (e.g. because you want\
      \ other players to be able to shoot that player's footing away &gt;=)= ), it\
      \ will fling them in the direction of the mover's 'broken' position. Is there\
      \ really no generic \"breakable\" smesh-based actor (think Half-Life 1's brush-based\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://collective.valve-erc.com/index.php?ent=func_breakable\"\
      >func_breakable</a>, or <a href=\"/Legacy:DestroyableObjective_SM\" title=\"\
      Legacy:DestroyableObjective SM\">DestroyableObjective SM</a> without the objective\
      \ ties) in UT?</p>\n<p><b>Foxpaw:</b> I believe destroyable <a href=\"/Legacy:Decoration\"\
      \ title=\"Legacy:Decoration\">Decorations</a> behave in this manner. If not\
      \ you could easily code such an actor.</p>\n<p><b>Bonehed316:</b> I've got some\
      \ code for breakable objects which...I could distribute. It doesnt use the old\
      \ mover hack, but actually a StaticMeshActor which is destroyed (or possibly\
      \ hidden/collisions disabled). Maybe I'll clean it up for distribution. I used\
      \ to host a breakable glass script which worked with the mover method, but that\
      \ has long since been lost.</p>\n<p><b>Messiah:</b> It says in the script extends\
      \ Actor, but this should be Emitter. Atleast this script doesn't work this way.</p>\n\
      <p><b>VitalOverdose</b>: I cant see anything about replication does this work\
      \ online?</p>\n<p><b>Guru:</b> I have a major problem!!! The tutorial says click\
      \ on the breaking glass actor under effects, but i don't have \"breaking glass\"\
      \ or \"exploding wall\" under effects. How do i get a breaking glass actor?</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.057 seconds\nReal time usage:\
      \ 0.058 seconds\nPreprocessor visited node count: 20/1000000\nPreprocessor generated\
      \ node count: 74/1000000\nPost‐expand include size: 42/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:642-0!*!0!!*!*!* and timestamp 20221118015302 and revision\
      \ id 1906\n -->\n"
  categories:
  - sortkey: "Breaking Glass UT2003"
    name: "Legacy_Mapping"
  - sortkey: "Breaking Glass UT2003"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Shader"
  - ns: 100
    exists: true
    name: "Legacy:Decoration"
  - ns: 100
    exists: true
    name: "Legacy:DestroyableObjective SM"
  - ns: 100
    exists: true
    name: "Legacy:Trigger"
  - ns: 100
    exists: true
    name: "Legacy:Mover"
  - ns: 100
    exists: true
    name: "Legacy:BSP"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTrigger"
  - ns: 100
    exists: true
    name: "Legacy:Emitter"
  - ns: 100
    exists: true
    name: "Legacy:Static Mesh"
  templates: []
  images: []
  externallinks:
  - "http://collective.valve-erc.com/index.php?ent=func_breakable"
  sections:
  - toclevel: 1
    level: "2"
    line: "The Concept"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Breaking_Glass_UT2003"
    byteoffset: 39
    anchor: "The_Concept"
  - toclevel: 1
    level: "2"
    line: "The Mover"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Breaking_Glass_UT2003"
    byteoffset: 457
    anchor: "The_Mover"
  - toclevel: 2
    level: "4"
    line: "The Special Effects"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Breaking_Glass_UT2003"
    byteoffset: 2342
    anchor: "The_Special_Effects"
  displaytitle: "Legacy:Breaking Glass UT2003"
  iwlinks: []
  wikitext:
    text: "This tutorial applies to UT2003/2004.\n\n==The Concept==\n\nTo make a window\
      \ that breaks in your map, you need two things. A movable brush that represents\
      \ the window in its whole state, and an [[Legacy:Emitter|Emitter]] to spawn\
      \ in for the shattering glass fragments that spill out when the window gets\
      \ \"Broken\".\n\nYou will need to understand the basic use of [[Legacy:Mover|Mover]]s,\
      \ [[Legacy:Trigger|Trigger]]s and [[Legacy:ScriptedTrigger|ScriptedTrigger]]s\n\
      \n==The Mover==\n\nIf you don't already have a nice glass material set up, make\
      \ one now. I suggest reading about [[Legacy:Shader|Shader]]s, using Opacity\
      \ in your shader, and maybe Specularity if you want it to look really nice.\n\
      \nIn 2003/2004 movers may only be made with [[Legacy:Static Mesh|static mesh]]es,\
      \ so we will use [[Legacy:BSP|BSP]] to create our window to start with. Apply\
      \ your window texture to a thin additive brush that fits as your window. Right\
      \ click on the additive brush after you create it, and choose Convert -> To\
      \ Static Mesh. Enter myLevel as your package, and give it whatever name you\
      \ wish. Now if you look in the static mesh browser, you should see your window\
      \ mesh.\n\nBack in the edit, click on the Add Mover button to add your window\
      \ mesh as a movable brush. Move it into place, and set this as the base with\
      \ Mover -> Key 0.  Now right click the mover and choose Mover -> Key 1, then\
      \ move the window somewhere out of view, preferably completely outside the level,\
      \ right click it again and choose Mover -> Key 0 (Base). The window should snap\
      \ back into its base position.\n\nWe need to set up some properties in our mover\
      \ to make it dissapear from view when shot. So open the properties window for\
      \ the mover.\n\nWe will change:\n\n* '''Object -> InitialState''' to '''TriggerOpenTimed'''\n\
      * '''Mover -> MoveTime''' to '''0'''\n* '''Mover -> StayOpenTime''' to however\
      \ long you want your window to stay broken before respawning. This value is\
      \ in seconds.\n* '''Mover -> bDamageTriggered''' to '''True'''\n* '''Mover ->\
      \ DamageThreshold''' to '''1'''\n* '''Display -> bShadowCast''' to '''False'''\
      \ or else the window will cast a shadow, and look bad when it breaks.\n\nNow\
      \ hopefully we have a pane of glass that when shot, moves (In 0 seconds) off\
      \ the map, giving the illusion that it has been destroyed.\n\nBut now we need\
      \ shattering fragments of glass to complete the illusion.\n\n====The Special\
      \ Effects====\n\nThis section is a compilation of several different resources\
      \ on creating breaking glass.  Many of them had 90% of the information necessary\
      \ but none had 100%.  So everyone who made a breaking glass tut, your stuff\
      \ is used in here, thanks, you rock.\n\nThe falling shards of glass require\
      \ you to set up an emitter to produce the shards, and a second custom actor\
      \ class to spawn them.  First: the emitter:\n\nSelect \"Emitter\" from the actor\
      \ classes (or Network Emitter\" to make it playable online), and place it in\
      \ your level.  There are certain things that must be set up correctly for the\
      \ breaking glass to spawn the way you want it to:\n\n* Advanced -> bDirectional\
      \ = True.  This is necessary to align the shards with the window.\n* Advanced\
      \ -> bNoDelete = '''FALSE'''.  This is required for the emitter to be spawned\
      \ when called by the \"spawner\" actor.\n* Emitter ->\n** Acceleration -> Acceleration\
      \ - Z = -950.  This simulates normal gravity in allowing the shards to fall.\n\
      ** Collision -> DampingFactorRange - X Max/Min = .9 / .8  Y Max/Min = .5  Z\
      \ Max/Min = .3 / .2  (''It's important to note that in 2004 range properties\
      \ windows, Max is '''first''', then Min.'', even though they are displayed as\
      \ min/max at the top of the listing.)\n** Collision -> UseCollision = True.\
      \  Else your shards will fall through the floor and keep going.  o_O\n** General\
      \ -> MaxParticles = ~2000.  This is variable depending on the size of your window\
      \ and of yuur shards.  Once you get more than 5000 or so particles at once,\
      \ it starts to drag down your average PC, so if your level has 7 breakable windows,\
      \ don't give them 4000 particles each.  If necessary, spawn a fewer number of\
      \ larger shards to save CPU cycles.\n** Local -> RespawnDeadParticles = False.\
      \  You want a broken window, not a glass fountain.\n** Location -> StartLocationRange\
      \ -> Y Max/Min = +/- half the width of your window.  Example, if your window\
      \ is 512UU wide, Y range is 256 / -256.  Same for Z range, Max/Min = +/- half\
      \ the height of your window.\n** '''Rotation -> UseRotationFrom = PTRS_Actor.'''\
      \  This is critical if you wish to have more than one breaking glass in your\
      \ level, from different angles.\n** Spawning -> AutomaticInitialSpawning = False.\
      \  It is going to be triggered.\n** Spawning -> InitialParticlesPerSecond =\
      \ 50000.  This releases all particles in a fraction of a second.\n** Spawning\
      \ -> ParticlesPerSecond = 0.  Again, not a fountain.\n** Texture -> DrawStyle\
      \ = PTDS_Transluscent\n** Texture -> Texture - Select the shard texture from\
      \ your texture browser window, then return here and click \"Use\" to insert\
      \ it into your texture line.\n** Texture -> TextureUSubdivisions & TextureVSubdivisions->\
      \ Divide your texture up by shards. For example, if your texture is two shards\
      \ wide by two shards high, your U and V subdivions are 2 each.\n** Time -> LifetimeRange\
      \ = Set this to whatever.  If your window respawns, set it to no more than the\
      \ \"Open Time\" of your window mover.  Else, set it to whatever you wish, 100000\
      \ to stay forever, but remember that particles eat up resources as long as they\
      \ remain in your level.\n** Velocity -> StartVelocityRange - X Max/Min = 200\
      \ / -200.  Y Max/Min = 100 / -100\n\nAt this point, the effect of the emitter\
      \ should be visible in any 3d views you have open.  You can use this to tweak\
      \ the settings of your emitter to get the look you want.\n\nOnce you've created\
      \ your emitter, align it with your window, and use rotation to point the directional\
      \ arrow in the desired direction, I recommend an angle somewhat downward and\
      \ away from the window, to make sure your axis rotation is set up properly.\n\
      \nNow, its time to set it up to be spawned when someone shoots your window.\
      \  Leave your emitter properties window open for now.\n\nGo back to your Actor\
      \ browser window, right-click on Emitter, and click New to create a new custom\
      \ subclass of Emitter.<br />In the creation window, change MyPackage to MyLevel\
      \ (this is a must), set a group if you wish, and set the name however you wish.\
      \  For reference, I will use BreakingGlassEmitter.\n\nAn UnrealScript window\
      \ will pop open.  You can click \"Compile Changed\" now if you wish, or later\
      \ when we create the spawner.  Either way, close this window.\n\nNow expand\
      \ the Emitters section and right-click on BreakingGlassEmitter.  If it is not\
      \ visible in your window, simply uncheck the \"Placeable Only\" box and it will\
      \ appear.  Click on Default Properties, and a properties window will appear\
      \ similar to the one for your emitter.  Open up the Emitters section of your\
      \ BreakingGlassEmitter, and click the Add button.  Now go to the Emitters section\
      \ of the properties window of your emitter, and copy the full name from the\
      \ Emitters -> 0 field, \"SpriteEmitter'myLevel.SpriteEmitter0\" or something\
      \ similar.  Paste it into the corresponding field in your BreakingGlassEmitter\
      \ and hit Enter.  All the properties of your emitter will be copied into this\
      \ actor subclass.\n\nNow change a few settings:\n* Advanced -> bDirectional\
      \ = True\n* Advanced -> bNoDelete = FALSE\n\nNow close all these properties\
      \ windows and delete your template emitter, it is no longer needed.\n\nGo back\
      \ to your Actors browser window, right click on Emitter, and click New to create\
      \ your second custom subclass.  Package is still myLevel, Group is completely\
      \ up to you, Name is whatever, we will use BreakingGlassSpawner for reference.\n\
      \nWhen the UnrealScript window pops up, type or copy / paste this into the script:\n\
      \n<UScript>\n\nclass BreakingGlassSpawner extends Actor\n     placeable;\n\n\
      event Trigger(Actor Other, Pawn EventInstigator)\n\n{Spawn(class'myLevel.BreakingGlassEmitter',,,Self.Location,Self.Rotation);}\n\
      </UScript>\n\nNow compile changed scripts and close your window.  In the Actor\
      \ browser, you should be able to see both your custom subclasses, BreakingGlassEmitter\
      \ and BreakingGlassSpawner.  Right-click on BreakingGlassSpawner, click Default\
      \ Properties, and check the following settings:\n*Advanced -> bDirectional =\
      \ True\n*'''Advanced -> bNoDelete = True''' (this is where you must do this)\n\
      \nNow Add your BreakingGlassSpawner actor to the level, and align it with the\
      \ window where you had placed the emitter previously.  Set the Event -> Event\
      \ of your window mover to something like Window1 or BreakGlass or whatever,\
      \ then set the Event -> Tag of your BreakingGlassSpawner to match.  Save, rebuild,\
      \ save, give it a go!\n\n''(Note: some of the steps taken here are very likely\
      \ redundant, for example, setting the directional to True for the Emitter AND\
      \ BOTH actor subclasses, if someone can verify that this will still function\
      \ with certain steps excluded, feel free to remove them.)''\n\n----\n\nNow the\
      \ UDN page gives a very vague explanation of creating an actor to spawn this\
      \ emitter. I followed more of Robo's excellent instructions and instead used\
      \ a [[Legacy:ScriptedTrigger|ScriptedTrigger]] to accomplish this.\n\n----\n\
      \nThe UDN says to make a spawner class but I used a ScriptedTrigger for spawning\
      \ my emitters. The advantages of using a ScriptedTrigger are that you can spawn\
      \ your emitter class at the location of ANY ScriptedTrigger without having to\
      \ have location and rotation data for the emitter class. You can also add a\
      \ breaking glass sound effect to play within the ScriptedTrigger.\n\n# Add your\
      \ glass window mover to your map. For its key1, move it away out of the map\
      \ so it will be hidden when it's shot.\n\n# Expand the \"MoverEvents\" section\
      \ and set the following values..\n\nOpeningEvent = breakglass1\n\n# Expand the\
      \ \"Object\" section and set its InitialState to \"TriggerOpenTimed\".\n\n#\
      \ Add a ScriptedTrigger to your map and move it to be in the same position as\
      \ your mover. Also rotate it so it's facing the right way for when your glass\
      \ breaks.\n\n# Open the ScriptedTriggers properties, expand its Events section,\
      \ and set its tag to \"breakglass1\".\n\n# Now for the meat. Expand its AIScript\"\
      \ section...\n\n* Add a new event of Action_WAITFOREVENT type, and in its ExternalEvent\
      \ = breakglass1\n* Add a new event of Action_SpawnActor and select your emitter\
      \ class as the actor to spawn.\n* Add a new event of type Action_PLAYSOUND.\
      \ Set its sound to be a breaking glass sound. We are using this method because\
      \ it gives you better control over the sound than the mover does.\n* Add a new\
      \ event of type Action_GOTOACTION. Leave its setting at 0\n\nOk that should\
      \ do it. Rebuild your map and test it out. When you shoot the mover it should\
      \ immediatly move out of view, the breaking glass emitter will be spawned, showering\
      \ broken glass from where the ScriptedTrigger is, and play a breaking glass\
      \ noise.\n\nThis method should work well and it has the added bonus that you\
      \ can add more breaking glass movers and ScriptedTriggers to have a whole glasshouse\
      \ of breakable glass windows. Even better they respawn after the time you set\
      \ in your movers \"StayOpenTime' value.\n\nHopefully that helps you out \n\n\
      ----\n\nIt certainly helped me out, and as any good mapper should, im adding\
      \ what ive learned to the wiki :)\n\n'''LionsPhil:''' This is neat, but if a\
      \ player is standing on the glass (e.g. because you want other players to be\
      \ able to shoot that player's footing away &gt;<nowiki>=)=</nowiki> ), it will\
      \ fling them in the direction of the mover's 'broken' position. Is there really\
      \ no generic \"breakable\" smesh-based actor (think Half-Life 1's brush-based\
      \ [http://collective.valve-erc.com/index.php?ent=func_breakable func_breakable],\
      \ or [[Legacy:DestroyableObjective SM|DestroyableObjective SM]] without the\
      \ objective ties) in UT?\n\n'''Foxpaw:''' I believe destroyable [[Legacy:Decoration|Decoration]]s\
      \ behave in this manner. If not you could easily code such an actor.\n\n'''Bonehed316:'''\
      \ I've got some code for breakable objects which...I could distribute.  It doesnt\
      \ use the old mover hack, but actually a StaticMeshActor which is destroyed\
      \ (or possibly hidden/collisions disabled).  Maybe I'll clean it up for distribution.\
      \  I used to host a breakable glass script which worked with the mover method,\
      \ but that has long since been lost.\n\n'''Messiah:''' It says in the script\
      \ extends Actor, but this should be Emitter. Atleast this script doesn't work\
      \ this way. \n\n'''VitalOverdose''': I cant see anything about replication does\
      \ this work online?\n\n'''Guru:'''  I have a major problem!!! The tutorial says\
      \ click on the breaking glass actor under effects, but i don't have \"breaking\
      \ glass\" or \"exploding wall\" under effects. How do i get a breaking glass\
      \ actor?\n\n[[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 1906
name: "Legacy:Breaking Glass UT2003"
revision:
  revid: 1906
  parentid: 1908
  user: "Dinoboy"
  timestamp: 1186583234.000000000
  comment: "*"
timestamp: 1668774354.735056000
