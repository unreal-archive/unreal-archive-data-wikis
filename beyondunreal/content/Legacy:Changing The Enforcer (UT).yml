---
parse:
  title: "Legacy:Changing The Enforcer (UT)"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Preface\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Preface</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Step_1:_Starting_Out\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Step 1: Starting Out</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Step_2:_Giving_the_Weapon_to_the_Player\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Step 2: Giving the\
      \ Weapon to the Player</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#Step_3:_Those_Damn_Enforcers\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Step 3: Those Damn Enforcers</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-5\"><a href=\"#Wrapping_Up\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Wrapping Up</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#Comments\"><span class=\"tocnumber\"\
      >6</span> <span class=\"toctext\">Comments</span></a></li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Preface\">Preface</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=1\" title=\"Edit section:\
      \ Preface\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I once made a map a while back that had every player start with a bio rifle\
      \ instead of the enforcer. The guys on BuF were a great help in getting it to\
      \ work, but alas, a few formats later, the map is lost – and so, unfortunately,\
      \ is the code to change the starting weapon.</p>\n<p>Rather than asking on BuF\
      \ again (the old posts with the info I wanted seem to have been deleted), I\
      \ decided to work out a solution on my own - it's just more fun and more rewarding\
      \ that way. It took a while of poking around other mutators and various places\
      \ on the wiki, but I finally made it work. Every player starts with a bio rifle,\
      \ and does not start with the enforcer.</p>\n<p>Its been tested in multiplayer\
      \ games briefly - seems to work just fine.</p>\n<p>The only problem I can see\
      \ with it is that it destroys ALL enforcers in the entire map, not just the\
      \ ones being held by players. This was acceptable in my map, but it might not\
      \ be in yours, and feel free to alter this tut to make it better. Also I don't\
      \ have anything to prevent the mutator from being added twice, so don't put\
      \ more than one instance in your map!</p>\n<h2><span class=\"mw-headline\" id=\"\
      Step_1:_Starting_Out\">Step 1: Starting Out</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=2\"\
      \ title=\"Edit section: Step 1: Starting Out\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This is a simple <a href=\"/Legacy:Writing_And_Using_An_Embedded_Mutator\"\
      \ title=\"Legacy:Writing And Using An Embedded Mutator\">Embedded Mutator</a>,\
      \ we're going to start out by making the code to embed it into our map. Read\
      \ the Embedded Mutator tutorial for more info on this block of code.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//</span>\n<span\
      \ class=\"co1\">// BioStart.</span>\n<span class=\"co1\">//</span>\n<span class=\"\
      kw1\">class</span> BioStart <span class=\"kw1\">expands</span> <span class=\"\
      kw9\">Mutator</span>;\n \n<span class=\"kw1\">var</span> <span class=\"kw5\"\
      >bool</span> bPreBPInitialized;\n \n<span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">PreBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"sy0\">!</span>bPreBPInitialized\
      \ <span class=\"br0\">)</span> <span class=\"co1\">// older versions of UT call\
      \ this function twice but we</span>\n                                      \
      \   <span class=\"co1\">// only want to run our code once!</span>\n    <span\
      \ class=\"br0\">{</span>\n        bPreBPInitialized <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">True</span>;\n \n        <span class=\"co1\">// Add the\
      \ mutator by linking it into the Mutator List ala Beppo.</span>\n        <span\
      \ class=\"co1\">// This Embedded Mutator makes sense to be 1st after the BaseMutator</span>\n\
      \        <span class=\"co1\">// in the Mutator List...</span>\n \n        <span\
      \ class=\"kw6\">Self</span>.<span class=\"me0\">NextMutator</span> <span class=\"\
      sy0\">=</span> <span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">BaseMutator</span>.<span class=\"me0\">NextMutator</span>; <span\
      \ class=\"co1\">// Make a place in the List</span>\n \n        <span class=\"\
      kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">BaseMutator</span>.<span\
      \ class=\"me0\">NextMutator</span> <span class=\"sy0\">=</span> <span class=\"\
      kw6\">Self</span>; <span class=\"co1\">// place it 1st after BaseMutator</span>\n\
      \    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Step_2:_Giving_the_Weapon_to_the_Player\"\
      >Step 2: Giving the Weapon to the Player</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=3\"\
      \ title=\"Edit section: Step 2: Giving the Weapon to the Player\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>I used a <a href=\"\
      /Legacy:Useful_Mutator_Functions\" title=\"Legacy:Useful Mutator Functions\"\
      >Useful Mutator Function</a> here, namely GiveWeapon, to actually give the weapon\
      \ to the player.</p>\n<p>For giving the weapon (i.e. biorifle) to the player,\
      \ we are going to use the ModifyPlayer function, which gets called whenever\
      \ a player spawns, and is passed a handle to the spawning player. So we're going\
      \ to call our GiveWeapon function every time a player spawns. Simple!</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw9\">Weapon</span> GiveWeapon<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span> PlayerPawn, <span class=\"kw5\">string</span> aClassName,\
      \ <span class=\"kw1\">optional</span> <span class=\"kw5\">bool</span> bBringUp<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\"\
      >local</span> class<span class=\"sy0\">&lt;</span>Weapon<span class=\"sy0\"\
      >&gt;</span> Weapon<span class=\"re0\">Class</span>&lt; SEMI &gt;\n    <span\
      \ class=\"kw1\">local</span> <span class=\"kw9\">Weapon</span> NewWeapon;\n\
      \ \n    WeaponClass <span class=\"sy0\">=</span> class<span class=\"sy0\">&lt;</span>Weapon<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span\
      \ class=\"br0\">(</span>aClassName, <span class=\"kw1\">class</span><span class=\"\
      st0\">'Class'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \ \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> PlayerPawn.<span\
      \ class=\"me0\">FindInventoryType</span><span class=\"br0\">(</span>WeaponClass<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n        <span class=\"kw2\">return</span> <span\
      \ class=\"kw5\">None</span>;\n    newWeapon <span class=\"sy0\">=</span> <span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span>WeaponClass<span class=\"\
      br0\">)</span>;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ newWeapon <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n        newWeapon.<span\
      \ class=\"me0\">RespawnTime</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0.0</span>;\n        newWeapon.<span class=\"me0\">GiveTo</span><span\
      \ class=\"br0\">(</span>PlayerPawn<span class=\"br0\">)</span>;\n        newWeapon.<span\
      \ class=\"me0\">bHeldItem</span> <span class=\"sy0\">=</span> <span class=\"\
      kw6\">true</span>;\n        newWeapon.<span class=\"me0\">GiveAmmo</span><span\
      \ class=\"br0\">(</span>PlayerPawn<span class=\"br0\">)</span>;\n        newWeapon.<span\
      \ class=\"me0\">SetSwitchPriority</span><span class=\"br0\">(</span>PlayerPawn<span\
      \ class=\"br0\">)</span>;\n        newWeapon.<span class=\"me0\">WeaponSet</span><span\
      \ class=\"br0\">(</span>PlayerPawn<span class=\"br0\">)</span>;\n        newWeapon.<span\
      \ class=\"me0\">AmbientGlow</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>;\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ PlayerPawn.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'PlayerPawn'</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n            newWeapon.<span class=\"me0\">SetHand</span><span\
      \ class=\"br0\">(</span>PlayerPawn<span class=\"br0\">(</span>PlayerPawn<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">Handedness</span><span class=\"\
      br0\">)</span>;\n        <span class=\"kw2\">else</span>\n            newWeapon.<span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Idle'</span><span class=\"br0\">)</span>;\n        <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> bBringUp <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n            PlayerPawn.<span class=\"kw9\">Weapon</span>.<span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'DownWeapon'</span><span class=\"br0\">)</span>;\n            PlayerPawn.<span\
      \ class=\"me0\">PendingWeapon</span> <span class=\"sy0\">=</span> <span class=\"\
      kw5\">None</span>;\n            PlayerPawn.<span class=\"kw9\">Weapon</span>\
      \ <span class=\"sy0\">=</span> newWeapon;\n            PlayerPawn.<span class=\"\
      kw9\">Weapon</span>.<span class=\"me0\">BringUp</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n        <span class=\"br0\">}</span>\n    <span class=\"\
      br0\">}</span>\n    <span class=\"kw2\">return</span> newWeapon;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">function</span> ModifyPlayer <span class=\"\
      br0\">(</span><span class=\"kw9\">Pawn</span> Other<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\tGiveWeapon<span class=\"br0\">(</span>Other,\
      \ <span class=\"st0\">\"Botpack.UT_BioRifle\"</span>, <span class=\"kw6\">true</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Step_3:_Those_Damn_Enforcers\">Step 3:\
      \ Those Damn Enforcers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=4\" title=\"\
      Edit section: Step 3: Those Damn Enforcers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Great! The mutator should be working already. When\
      \ you spawn you should start with the biorifle! But then you notice that the\
      \ Enforcer is still in your inventory... Damn. Well lets get rid of those little\
      \ buggers shall we? (NOTE: This code will remove ALL enforcers in the map. If\
      \ you wish to have enforcers on the ground in your map anyway, this will have\
      \ to be modified to not remove them.)</p>\n<p>For this we are going to use the\
      \ CheckReplacement function - at some point during map startup every actor in\
      \ the map is passed through this function, so if that actor is an enforcer,\
      \ we simply refuse it to be allowed into the map. All mutators must return true\
      \ for this function for a particular object if that object is to be allowed\
      \ in. So we'll return false simply if the actor IsA() enforcer!</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw5\"\
      >bool</span> CheckReplacement <span class=\"br0\">(</span><span class=\"kw9\"\
      >Actor</span> Other, <span class=\"kw1\">out</span> <span class=\"kw5\">byte</span>\
      \ bSuperRelevant<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>Other.<span class=\"\
      kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'enforcer'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n\
      \t<span class=\"br0\">}</span>\n \n\t<span class=\"kw2\">return</span> <span\
      \ class=\"kw6\">true</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Wrapping_Up\">Wrapping Up</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=5\"\
      \ title=\"Edit section: Wrapping Up\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Well there you have it! Add this mutator into your\
      \ map, and there you go. Changing the startup weapon wasn't so hard now was\
      \ it? It certainly would have been easier for me to have a tut like this around...\
      \ Please feel free to comment in the following section.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Changing_The_Enforcer_(UT)?section=6\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Draconx:</b> Well its my second tut, and not particularly\
      \ complicated, but its a good starting point for wannabe uscript coders (like\
      \ me&#160;:)) I havent found any problems with it for what it does, aside from\
      \ those mentioned in the preface.</p>\n<p><b>Tarquin:</b> Looks good&#160;:)</p>\n\
      <p><b>Uwa:</b> If even half the code statements were explained with code comments\
      \ or in the text, this might be useful for learning.</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.093 seconds\nReal time usage: 0.094 seconds\nPreprocessor\
      \ visited node count: 49/1000000\nPreprocessor generated node count: 88/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:882-0!*!0!!en!*!*\
      \ and timestamp 20221118014948 and revision id 42868\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Writing And Using An Embedded Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Useful Mutator Functions"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Preface"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 0
    anchor: "Preface"
  - toclevel: 1
    level: "2"
    line: "Step 1:  Starting Out"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 1112
    anchor: "Step_1:_Starting_Out"
  - toclevel: 1
    level: "2"
    line: "Step 2:  Giving the Weapon to the Player"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 2069
    anchor: "Step_2:_Giving_the_Weapon_to_the_Player"
  - toclevel: 1
    level: "2"
    line: "Step 3:  Those Damn Enforcers"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 3712
    anchor: "Step_3:_Those_Damn_Enforcers"
  - toclevel: 1
    level: "2"
    line: "Wrapping Up"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 4708
    anchor: "Wrapping_Up"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Changing_The_Enforcer_(UT)"
    byteoffset: 4990
    anchor: "Comments"
  displaytitle: "Legacy:Changing The Enforcer (UT)"
  iwlinks: []
  wikitext:
    text: "==Preface==\n\nI once made a map a while back that had every player start\
      \ with a bio rifle instead of the enforcer.  The guys on BuF were a great help\
      \ in getting it to work, but alas, a few formats later, the map is lost &ndash;\
      \ and so, unfortunately, is the code to change the starting weapon.\n\nRather\
      \ than asking on BuF again (the old posts with the info I wanted seem to have\
      \ been deleted), I decided to work out a solution on my own - it's just more\
      \ fun and more rewarding that way.  It took a while of poking around other mutators\
      \ and various places on the wiki, but I finally made it work.  Every player\
      \ starts with a bio rifle, and does not start with the enforcer.\n\nIts been\
      \ tested in multiplayer games briefly - seems to work just fine.\n\nThe only\
      \ problem I can see with it is that it destroys ALL enforcers in the entire\
      \ map, not just the ones being held by players.  This was acceptable in my map,\
      \ but it might not be in yours, and feel free to alter this tut to make it better.\
      \  Also I don't have anything to prevent the mutator from being added twice,\
      \ so don't put more than one instance in your map!\n\n==Step 1:  Starting Out==\n\
      \nThis is a simple [[Legacy:Writing And Using An Embedded Mutator|Embedded Mutator]],\
      \ we're going to start out by making the code to embed it into our map.  Read\
      \ the Embedded Mutator tutorial for more info on this block of code.\n\n<uscript>//\n\
      // BioStart.\n//\nclass BioStart expands Mutator;\n\nvar bool bPreBPInitialized;\n\
      \nfunction PreBeginPlay()\n{\n\n    if ( !bPreBPInitialized ) // older versions\
      \ of UT call this function twice but we\n                                  \
      \       // only want to run our code once!\n    {\n        bPreBPInitialized\
      \ = True;\n\n        // Add the mutator by linking it into the Mutator List\
      \ ala Beppo.\n        // This Embedded Mutator makes sense to be 1st after the\
      \ BaseMutator\n        // in the Mutator List...\n\n        Self.NextMutator\
      \ = Level.Game.BaseMutator.NextMutator; // Make a place in the List\n\n    \
      \    Level.Game.BaseMutator.NextMutator = Self; // place it 1st after BaseMutator\n\
      \    }\n}</uscript>\n\n==Step 2:  Giving the Weapon to the Player==\n\nI used\
      \ a [[Legacy:Useful Mutator Functions|Useful Mutator Function]] here, namely\
      \ GiveWeapon, to actually give the weapon to the player.\n\nFor giving the weapon\
      \ (i.e. biorifle) to the player, we are going to use the ModifyPlayer function,\
      \ which gets called whenever a player spawns, and is passed a handle to the\
      \ spawning player.  So we're going to call our GiveWeapon function every time\
      \ a player spawns.  Simple!\n\n<uscript>function Weapon GiveWeapon(Pawn PlayerPawn,\
      \ string aClassName, optional bool bBringUp)\n{\n    local class<Weapon> WeaponClass;\n\
      \    local Weapon NewWeapon;\n\n    WeaponClass = class<Weapon>(DynamicLoadObject(aClassName,\
      \ class'Class'));\n\n    if ( PlayerPawn.FindInventoryType(WeaponClass) != None\
      \ )\n        return None;\n    newWeapon = Spawn(WeaponClass);\n    if ( newWeapon\
      \ != None ) {\n        newWeapon.RespawnTime = 0.0;\n        newWeapon.GiveTo(PlayerPawn);\n\
      \        newWeapon.bHeldItem = true;\n        newWeapon.GiveAmmo(PlayerPawn);\n\
      \        newWeapon.SetSwitchPriority(PlayerPawn);\n        newWeapon.WeaponSet(PlayerPawn);\n\
      \        newWeapon.AmbientGlow = 0;\n        if ( PlayerPawn.IsA('PlayerPawn')\
      \ )\n            newWeapon.SetHand(PlayerPawn(PlayerPawn).Handedness);\n   \
      \     else\n            newWeapon.GotoState('Idle');\n        if ( bBringUp\
      \ ) {\n            PlayerPawn.Weapon.GotoState('DownWeapon');\n            PlayerPawn.PendingWeapon\
      \ = None;\n            PlayerPawn.Weapon = newWeapon;\n            PlayerPawn.Weapon.BringUp();\n\
      \        }\n    }\n    return newWeapon;\n}\n\nfunction ModifyPlayer (Pawn Other)\n\
      {\n\tGiveWeapon(Other, \"Botpack.UT_BioRifle\", true);\n}</uscript>\n\n==Step\
      \ 3:  Those Damn Enforcers==\n\nGreat!  The mutator should be working already.\
      \  When you spawn you should start with the biorifle!  But then you notice that\
      \ the Enforcer is still in your inventory... Damn.  Well lets get rid of those\
      \ little buggers shall we?  (NOTE:  This code will remove ALL enforcers in the\
      \ map.  If you wish to have enforcers on the ground in your map anyway, this\
      \ will have to be modified to not remove them.)\n\nFor this we are going to\
      \ use the CheckReplacement function - at some point during map startup every\
      \ actor in the map is passed through this function, so if that actor is an enforcer,\
      \ we simply refuse it to be allowed into the map.  All mutators must return\
      \ true for this function for a particular object if that object is to be allowed\
      \ in.  So we'll return false simply if the actor IsA() enforcer!\n\n<uscript>function\
      \ bool CheckReplacement (Actor Other, out byte bSuperRelevant)\n{\n\tif (Other.IsA('enforcer'))\n\
      \t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}</uscript>\n\n==Wrapping Up==\n\
      \nWell there you have it!  Add this mutator into your map, and there you go.\
      \  Changing the startup weapon wasn't so hard now was it?  It certainly would\
      \ have been easier for me to have a tut like this around...  Please feel free\
      \ to comment in the following section.\n\n==Comments==\n\n'''Draconx:''' Well\
      \ its my second tut, and not particularly complicated, but its a good starting\
      \ point for wannabe uscript coders (like me :))  I havent found any problems\
      \ with it for what it does, aside from those mentioned in the preface.\n\n'''Tarquin:'''\
      \ Looks good :)\n\n'''Uwa:''' If even half the code statements were explained\
      \ with code comments or in the text, this might be useful for learning."
  properties: []
  revId: 42868
name: "Legacy:Changing The Enforcer (UT)"
revision:
  revid: 42868
  parentid: 2444
  user: "81.236.19.16"
  timestamp: 1270644294.000000000
  comment: "/* Comments */"
timestamp: 1668764167.698853000
