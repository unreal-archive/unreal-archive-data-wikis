---
parse:
  title: "Legacy:Creating And Using ScriptedActions"
  text:
    text: "<p><a href=\"/Legacy:ScriptedAction\" title=\"Legacy:ScriptedAction\">ScriptedActions</a>,\
      \ and their related <a href=\"/Legacy:ScriptedSequence\" title=\"Legacy:ScriptedSequence\"\
      >ScriptedSequences</a>, are the premier method for getting <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a> AI to \"do stuff\"\
      . Back in <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>,\
      \ when coders wanted to introduce new behavior into bots or <a href=\"/Legacy:ScriptedPawn\"\
      \ title=\"Legacy:ScriptedPawn\">ScriptedPawns</a>, they would subclass whatever\
      \ AI they were deriving from, and add code there.</p>\n<p>In <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>, a similar action\
      \ would be to subclass <a href=\"/Legacy:Controller\" title=\"Legacy:Controller\"\
      >Controller</a>. However, with the addition of <a href=\"/Legacy:ScriptedSequence\"\
      \ title=\"Legacy:ScriptedSequence\">ScriptedSequences</a>, there is no longer\
      \ the need to do this. Developers can just make a new <a href=\"/Legacy:ScriptedAction\"\
      \ title=\"Legacy:ScriptedAction\">ScriptedAction</a>, and tell pawns to perform\
      \ this action.</p>\n<p>There are two reasons for this article. First is a very\
      \ simple discussion about how to create subclasses of <a href=\"/Legacy:ScriptedAction\"\
      \ title=\"Legacy:ScriptedAction\">ScriptedAction</a>. The second is on how to\
      \ actually use <a href=\"/Legacy:ScriptedAction\" title=\"Legacy:ScriptedAction\"\
      >ScriptedActions</a>, from the perspective of the coder.</p>\n<p></p>\n<div\
      \ id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#How_Actions_Work\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">How Actions Work</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Creating_ScriptedActions\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Creating ScriptedActions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Anatomy_of_a_ScriptedAction\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Anatomy of a ScriptedAction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Basic_Functions\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Basic Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Flow_Control\"><span class=\"\
      tocnumber\">2.3</span> <span class=\"toctext\">Flow Control</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Latent_Functions\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">Latent Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Misc_Functions\"><span class=\"\
      tocnumber\">2.5</span> <span class=\"toctext\">Misc Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Default_Properties\"><span\
      \ class=\"tocnumber\">2.6</span> <span class=\"toctext\">Default Properties</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Summary\"><span class=\"tocnumber\"\
      >2.7</span> <span class=\"toctext\">Summary</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Using_ScriptedActions_and_ScriptedSequences\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Using ScriptedActions\
      \ and ScriptedSequences</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-11\"\
      ><a href=\"#Writing_Scripted_Sequences\"><span class=\"tocnumber\">3.1</span>\
      \ <span class=\"toctext\">Writing Scripted Sequences</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-12\"><a href=\"#Using_Scripted_Sequences\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">Using Scripted Sequences</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-13\"><a href=\"#Broken.3F\"><span class=\"\
      tocnumber\">3.2.1</span> <span class=\"toctext\">Broken?</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-14\"><a href=\"#One_last_thing_to_think_about\"\
      ><span class=\"tocnumber\">3.2.2</span> <span class=\"toctext\">One last thing\
      \ to think about</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-15\"\
      ><a href=\"#ScriptedTrigger\"><span class=\"tocnumber\">3.3</span> <span class=\"\
      toctext\">ScriptedTrigger</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-16\"><a href=\"#Conclusion\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Conclusion</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-17\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-18\"><a href=\"#Discussion\"><span class=\"tocnumber\">6</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"How_Actions_Work\">How Actions Work</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=1\" title=\"\
      Edit section: How Actions Work\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Within classes derived from <a href=\"/Legacy:ScriptedController\"\
      \ title=\"Legacy:ScriptedController\">ScriptedController</a> (This includes\
      \ <a href=\"/Legacy:Bot\" title=\"Legacy:Bot\">Bots</a>) there is a mechanism\
      \ to perform actions. Basically, it's a <a href=\"/Legacy:State\" title=\"Legacy:State\"\
      >state</a>: <code>state Scripting</code></p>\n<p>What happens is that it's given\
      \ a <a href=\"/Legacy:ScriptedSequence\" title=\"Legacy:ScriptedSequence\">ScriptedSequence</a>,\
      \ in its variable <b>SequenceScript</b>. This ScriptedSequence contains an array\
      \ of <a href=\"/Legacy:ScriptedAction\" title=\"Legacy:ScriptedAction\">ScriptedActions</a>.\
      \ Then, the controller runs through the actions one by one down the line until\
      \ the last action. After that, if this Controller was artificially created,\
      \ it destroys itself!</p>\n<p>What this means is that: you can give \"unpossessed\"\
      \ Pawns (with no controller) orders. They will temporarily don the <a href=\"\
      /Legacy:ScriptedController\" title=\"Legacy:ScriptedController\">ScriptedController</a>\
      \ hat and do the actions. Afterwards, it reverts to the original controller\
      \ or no controller.</p>\n<p>Since the <code>state Scripting</code> code is pretty\
      \ self-explanatory, I won't run through that. Suffice to know, it's there and\
      \ does your dirty work.</p>\n<h2><span class=\"mw-headline\" id=\"Creating_ScriptedActions\"\
      >Creating ScriptedActions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=2\"\
      \ title=\"Edit section: Creating ScriptedActions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Anatomy_of_a_ScriptedAction\"\
      >Anatomy of a ScriptedAction</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=3\"\
      \ title=\"Edit section: Anatomy of a ScriptedAction\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> ACTION_ChangeName <span class=\"kw1\"\
      >extends</span> <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span>Action<span class=\"br0\">)</span>\
      \ <span class=\"kw5\">string</span> NewName;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">int</span> Count;</pre></div>\n</div>\n<p>All published\
      \ variables (<i>var()</i>) will be editable by the level designer at design\
      \ time - in that nifty object properties box.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Basic_Functions\">Basic Functions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=4\"\
      \ title=\"Edit section: Basic Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> InitActionFor<span class=\"\
      br0\">(</span><span class=\"kw9\">ScriptedController</span> C<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\tC.<span class=\"me0\">PlayerReplicationInfo</span>.<span\
      \ class=\"me0\">PlayerName</span> <span class=\"sy0\">=</span> NewName;\n \n\
      \t<span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\t\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>InitActionFor is the <b>meat</b>\
      \ of the Action. This is where the action will usually happen. The passed variable\
      \ <b>C</b> is, of course, the Controller of the Pawn that you are about to manipulate.\
      \ From this, you can access its C.Pawn variable if you're interested.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> GetActionString<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >return</span> ActionString;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>GetActionString is, I believe, for logging purposes. It tells the log or\
      \ whoever wants to know, what this Pawn is doing.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Flow_Control\">Flow Control</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=5\"\
      \ title=\"Edit section: Flow Control\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> ProceedToNextAction<span class=\"br0\">(</span><span class=\"\
      kw9\">ScriptedController</span> C<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\tC.<span class=\"me0\">ActionNum</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Max</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,ActionNumber<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> ProceedToSectionEnd<span class=\"\
      br0\">(</span><span class=\"kw9\">ScriptedController</span> C<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>ProceedToNextAction is called after\
      \ your action has been executed. Therefore, if you want to (evilly) disrupt\
      \ the flow, you can change this one here. A Controller's <b>ActionNum</b> property\
      \ tells you which # in the ActionSequence it is currently performing</p>\n<p>ProceedToSectionEnd\
      \ is pre-coded. Call it, and you will be moved to the end of the section.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> StartsSection<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> EndsSection<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p>StartsSection signifies if the following\
      \ Action is actually a section start. \"Section\" Actions are such like <a href=\"\
      /edit/Legacy:ACTION_IFCONDITION?redlink=1\" class=\"new\" title=\"Legacy:ACTION\
      \ IFCONDITION (page does not exist)\">ACTION_IFCONDITION</a> - they mark off\
      \ a block of other sections.</p>\n<p>EndsSection signifies if the Action is\
      \ a section end.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> <span class=\"kw9\">ScriptedSequence</span> GetScript<span\
      \ class=\"br0\">(</span><span class=\"kw9\">ScriptedSequence</span> S<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>GetScript - This is used if a different <a href=\"/Legacy:ScriptedSequence\"\
      \ title=\"Legacy:ScriptedSequence\">ScriptedSequence</a> is desired. The passed\
      \ variable S is the current ScriptedSequence, and you return a new one if you\
      \ want the Controller to perform a different ScriptedSequence. If you return\
      \ NONE, then the Controller stops scripting.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Latent_Functions\">Latent Functions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=6\"\
      \ title=\"Edit section: Latent Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A <a href=\"/Legacy:Latent_Function\" title=\"Legacy:Latent\
      \ Function\">latent function</a> is one that doesn't happen right away. It has\
      \ <i>latency</i>. In other words, when you give the action, it doesn't (shazzam)\
      \ happen right away. For example, if I tell my dog to be in the bathroom, it\
      \ won't be there right away. If I tell it to jump, it will jump right away.\
      \ That's the long and short of it.</p>\n<p>Latent actions will subclass <a href=\"\
      /edit/Legacy:LatentScriptedAction?redlink=1\" class=\"new\" title=\"Legacy:LatentScriptedAction\
      \ (page does not exist)\">LatentScriptedAction</a>. If you are writing latent\
      \ actions, you must subclass this too!</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> MoveToGoal<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >function</span> <span class=\"kw9\">Actor</span> GetMoveTargetFor<span class=\"\
      br0\">(</span><span class=\"kw9\">ScriptedController</span> C<span class=\"\
      br0\">)</span>;\n \n<span class=\"kw1\">function</span> <span class=\"kw5\"\
      >bool</span> TurnToGoal<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">float</span> GetDistance<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >function</span> <span class=\"kw5\">bool</span> CompleteOnAnim<span class=\"\
      br0\">(</span><span class=\"kw5\">int</span> Num<span class=\"br0\">)</span>;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> CompleteWhenTriggered<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >function</span> <span class=\"kw5\">bool</span> CompleteWhenTimer<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> WaitForPlayer<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> TickedAction<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ StillTicking<span class=\"br0\">(</span><span class=\"kw9\">ScriptedController</span>\
      \ C, <span class=\"kw5\">float</span> DeltaTime<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p><b>Latent Actions</b></p>\n<p>GetMoveTargetFor is where you can pass\
      \ the MoveTarget, or \"goal\" as it is referred to. The actor you return is\
      \ the target.</p>\n<p>MoveToGoal tells the pawn to move to the goal specified\
      \ (above). Return of true means that it will move to the goal.</p>\n<p>TurnToGoal\
      \ tells the pawn to turn towards the goal if you return true. If the Pawn is\
      \ moving toward the goal, it will automatically turn.</p>\n<p><b>Latent Pauses</b></p>\n\
      <p>GetDistance tells the pawn to wait until a Player gets within this value\
      \ (you return this value) of the Controller's Pawn</p>\n<p>CompleteOnAnim -\
      \ if you return TRUE, then the sequence will complete when the animation finishes\
      \ (the Num is the animation channel). CompleteOnAnim is called in the Pawn's\
      \ \"AnimEnd\" function within its State Scripting.</p>\n<p>CompleteWhenTriggered\
      \ - TRUE means that the sequence will complete when the <b>controller</b> is\
      \ triggered</p>\n<p>CompleteWhenTimer - TRUE means that the sequence will complete\
      \ when a player's <i>Timer()</i> is called (that is, you use the <b>SetTimer</b>\
      \ command</p>\n<p>TickedAction tells the Controller whether to process the StillTicking\
      \ function.</p>\n<p>StillTicking acts like the Tick(float DeltaTime) for us.\
      \ If you return TRUE, then this function (StillTicking) will continue to be\
      \ called every Tick. A return of FALSE signifies this action is done. It stopps\
      \ recieving ticks and the action sequence moves on to the next action.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Misc_Functions\">Misc Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=7\" title=\"\
      Edit section: Misc Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> SetCurrentAnimationFor<span class=\"br0\">(</span><span\
      \ class=\"kw9\">ScriptedController</span> C<span class=\"br0\">)</span>;\n \n\
      <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> PawnPlayBaseAnim<span\
      \ class=\"br0\">(</span><span class=\"kw9\">ScriptedController</span> C, <span\
      \ class=\"kw5\">bool</span> bFirstPlay<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>These two are hard-coded into ScriptedController - they are special\
      \ functions. They allow you to modify whatever animation the Pawn is playing</p>\n\
      <h3><span class=\"mw-headline\" id=\"Default_Properties\">Default Properties</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=8\" title=\"\
      Edit section: Default Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw1\">localized</span> <span class=\"kw5\">string</span>\
      \ ActionString;\n<span class=\"kw1\">var</span> <span class=\"kw5\">bool</span>\
      \ bValidForTrigger;</pre></div>\n</div>\n<p>ActionString, as talked about above,\
      \ is a very short description of what the action does</p>\n<p>bValidForTrigger\
      \ signals whether this action is appropriate for use with a <a href=\"/Legacy:ScriptedTrigger\"\
      \ title=\"Legacy:ScriptedTrigger\">ScriptedTrigger</a> (discussed briefly below)</p>\n\
      <h3><span class=\"mw-headline\" id=\"Summary\">Summary</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=9\"\
      \ title=\"Edit section: Summary\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Hopefully, with these explanations you are well on\
      \ your way to writing new Actions and extending the capabilities of the AI.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Using_ScriptedActions_and_ScriptedSequences\"\
      >Using ScriptedActions and ScriptedSequences</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=10\"\
      \ title=\"Edit section: Using ScriptedActions and ScriptedSequences\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"\
      mw-headline\" id=\"Writing_Scripted_Sequences\">Writing Scripted Sequences</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=11\" title=\"\
      Edit section: Writing Scripted Sequences\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Typically, ScriptedActions aren't used by themselves,\
      \ but used in a chain of actions called a ScriptedSequence. Since it's just\
      \ an array, I won't go into the details of this. It'll suffice to give you an\
      \ example.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> OPNavPoint <span class=\"kw1\">extends</span> UnrealScriptedSequence\n\
      \t<span class=\"kw1\">placeable</span>;\n \n<span class=\"kw1\">function</span>\
      \ FreeScript<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw4\">Destroy</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\t\t\t\t<span class=\"co1\">// When\
      \ this sequence is completed, destroy it.</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \tEnemyAcquisitionScriptProbability<span class=\"sy0\">=+</span><span class=\"\
      nu0\">1.0</span>\n\tbRoamingScript <span class=\"sy0\">=</span> <span class=\"\
      kw6\">false</span>\n\tPriority <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >200</span>\n\tbCollideWhenPlacing<span class=\"sy0\">=</span><span class=\"\
      kw6\">false</span>\n\tbStatic<span class=\"sy0\">=</span><span class=\"kw6\"\
      >false</span>\n\tbNoDelete<span class=\"sy0\">=</span><span class=\"kw6\">false</span>\n\
      \tbFreeLance <span class=\"sy0\">=</span> <span class=\"kw6\">false</span>\n\
      \ \n\t<span class=\"kw2\">Begin</span> <span class=\"kw8\">Object</span> <span\
      \ class=\"kw1\">Class</span><span class=\"sy0\">=</span>Action_MOVETOPOINT <span\
      \ class=\"kw5\">Name</span><span class=\"sy0\">=</span>OPACTIONMoveToLocation\n\
      \    End <span class=\"kw8\">Object</span>\n\t<span class=\"kw2\">Begin</span>\
      \ <span class=\"kw8\">Object</span> <span class=\"kw1\">Class</span><span class=\"\
      sy0\">=</span>Action_CROUCH <span class=\"kw5\">Name</span><span class=\"sy0\"\
      >=</span>OPACTIONCrouch\n    End <span class=\"kw8\">Object</span>\n\t<span\
      \ class=\"kw2\">Begin</span> <span class=\"kw8\">Object</span> <span class=\"\
      kw1\">Class</span><span class=\"sy0\">=</span>Action_WAITFORTIMER <span class=\"\
      kw5\">Name</span><span class=\"sy0\">=</span>OPACTIONWaitShort\n\t\tPauseTime\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span>\n    End <span\
      \ class=\"kw8\">Object</span>\n\t<span class=\"kw2\">Begin</span> <span class=\"\
      kw8\">Object</span> <span class=\"kw1\">Class</span><span class=\"sy0\">=</span>Action_MOVETOPLAYER\
      \ <span class=\"kw5\">Name</span><span class=\"sy0\">=</span>OPACTIONMoveToPlayer\n\
      \    End <span class=\"kw8\">Object</span>\n\t<span class=\"kw2\">Begin</span>\
      \ <span class=\"kw8\">Object</span> <span class=\"kw1\">Class</span><span class=\"\
      sy0\">=</span>Action_SETALERTNESS <span class=\"kw5\">Name</span><span class=\"\
      sy0\">=</span>OPACTIONMakeAlert\n\t\tAlertness <span class=\"sy0\">=</span>\
      \ ALERTNESS_LeaveScriptForCombat\n    End <span class=\"kw8\">Object</span>\n\
      \t<span class=\"kw2\">Begin</span> <span class=\"kw8\">Object</span> <span class=\"\
      kw1\">Class</span><span class=\"sy0\">=</span>Action_RUN <span class=\"kw5\"\
      >Name</span><span class=\"sy0\">=</span>OPACTIONRun\n    End <span class=\"\
      kw8\">Object</span>\n \n\tActions<span class=\"br0\">(</span><span class=\"\
      nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"kw8\">ScriptedAction</span><span class=\"st0\">'OPACTIONRun'</span>\n\
      \tActions<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"\
      br0\">)</span><span class=\"sy0\">=</span><span class=\"kw8\">ScriptedAction</span><span\
      \ class=\"st0\">'OPACTIONMoveToLocation'</span>\n\tActions<span class=\"br0\"\
      >(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"\
      sy0\">=</span><span class=\"kw8\">ScriptedAction</span><span class=\"st0\">'OPACTIONCrouch'</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>First, you see, you have\
      \ to create the Action objects. You can set their variables if you wish. Then,\
      \ you simply add new ScriptedActions to the array. This is much like adding\
      \ buttons to a menu, if you're familiar with that. I've defined more objects\
      \ than actions, for future references in classes that are subclasses of OPNavPoint.\
      \ This way, I don't have to re-define everything.</p>\n<p><br />\nWhat this\
      \ OPNavPoint does is this. It makes the pawn start running to where the OPNavPoint\
      \ is located, and then makes it crouch. Simple, and fun!</p>\n<h3><span class=\"\
      mw-headline\" id=\"Using_Scripted_Sequences\">Using Scripted Sequences</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=12\" title=\"\
      Edit section: Using Scripted Sequences\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>To use the above script, I would have to put it in\
      \ the position I want my pawn to go. Here is an example function, called within\
      \ a subclass of <a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a>, that creats this order, and tells the pawn to execute\
      \ it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> DoMoveOut<span class=\"br0\">(</span><span class=\"kw9\">Bot</span>\
      \ b, <span class=\"kw5\">Vector</span> MyLocation<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span> OPNavPoint\
      \ opnp;\n \n\tMyLocation <span class=\"sy0\">=</span> Somewhere; <span class=\"\
      co1\">// something like this</span>\n \n\topnp <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'OPNavPoint'</span>,<span class=\"kw6\"\
      >self</span>,,MyLocation<span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ self is the commanding officer, in this case</span>\n\tOPBot<span class=\"\
      br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me0\">ReceiveDestination</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">self</span>,opnp<span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>What's ReceiveDestination?\
      \ It's a small function within OPBot, my subclass of <a href=\"/Legacy:Bot\"\
      \ title=\"Legacy:Bot\">Bot</a> that tells pawns what to do.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> RecieveDestination<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Controller</span> c, UnrealScriptedSequence\
      \ s<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">none</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"\
      co1\">// no script, no action</span>\n\t\t<span class=\"kw2\">return</span>;\n\
      \ts.<span class=\"me0\">CurrentUser</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">self</span>;\t\t<span class=\"co1\">// Me, I'm the current user\
      \ of the script.</span>\n\tStopCurrentScript<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\t\t<span class=\"co1\">// Stop doing whatever i'm\
      \ doing.</span>\n\tGoalScript <span class=\"sy0\">=</span> s;\t\t\t\t<span class=\"\
      co1\">// Assing the Script to the \"GoalScript\" property</span>\n\tSetNewScript<span\
      \ class=\"br0\">(</span>s<span class=\"br0\">)</span>;\t\t\t<span class=\"co1\"\
      >// Tell myself that I have new orders</span>\n\tSendMessage<span class=\"br0\"\
      >(</span>c.<span class=\"me0\">PlayerReplicationInfo</span>, <span class=\"\
      st0\">'ACK'</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>,\
      \ <span class=\"st0\">'TEAM'</span><span class=\"br0\">)</span>;\t<span class=\"\
      co1\">// Tell the person who sent me the order that I heard them</span>\n\t\
      <span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"\
      me0\">Broadcast</span><span class=\"br0\">(</span><span class=\"kw6\">self</span>,\
      \ <span class=\"st0\">\"Order Recieved.\"</span>, <span class=\"st0\">'TeamSay'</span><span\
      \ class=\"br0\">)</span>;\t<span class=\"co1\">// Same</span>\n\t<span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>c.<span class=\"kw3\">IsA</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'PlayerController'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>\n\t\tMyPlayerController <span class=\"\
      sy0\">=</span> <span class=\"kw9\">PlayerController</span><span class=\"br0\"\
      >(</span>c<span class=\"br0\">)</span>;\t\t<span class=\"co1\">// The person\
      \ who sent me the order is MyPlayerController (for certain Action's, and debugging)</span>\n\
      \t<span class=\"kw3\">GoToState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Scripting'</span><span class=\"br0\">)</span>;\t\t<span class=\"co1\"\
      >// Now, go script!</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>There's a bit of extra code up there, but you can get the general picture.\
      \ As you can see, it's not to hard to give the bot orders!</p>\n<h4><span class=\"\
      mw-headline\" id=\"Broken.3F\">Broken?</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=13\"\
      \ title=\"Edit section: Broken?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Finally, there's one more thing I must mention. Occasionally,\
      \ scripts \"break\". There could be many reasons for this, but basically, it\
      \ stops working. This is quite annoying for after a script is broken, Pawn behavior\
      \ is very erratic and strange. The game might crash. I leave this fragment to\
      \ you:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >// Broken scripted sequence - for debugging</span>\n<span class=\"kw1\">State</span>\
      \ Broken\n<span class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n\t\
      MyPlayerController.<span class=\"kw9\">Pawn</span>.<span class=\"kw4\">ClientMessage</span><span\
      \ class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span class=\"sy0\">$</span><span\
      \ class=\"st0\">\" Scripted Sequence BROKEN \"</span><span class=\"sy0\">$</span>SequenceScript<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\" ACTION \"</span><span class=\"\
      sy0\">$</span>CurrentAction<span class=\"br0\">)</span>;\n\tWanderOrCamp<span\
      \ class=\"br0\">(</span><span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>This will tell you if your\
      \ pawn's script broke, and make sure that the pawn doesn't actually go haywire.\
      \ It tells the pawn to wander around. Thus, you know which action is causing\
      \ the break-age, and without a VERY annoying crash.</p>\n<h4><span class=\"\
      mw-headline\" id=\"One_last_thing_to_think_about\">One last thing to think about</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=14\" title=\"\
      Edit section: One last thing to think about\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Finally, some things will compete with you when giving\
      \ orders to pawns. That would be <a href=\"/Legacy:TeamAI\" title=\"Legacy:TeamAI\"\
      >TeamAI</a> and <a href=\"/Legacy:SquadAI\" title=\"Legacy:SquadAI\">SquadAI</a>.\
      \ For example, if I told a pawn to move past a ball in a regular bombing run\
      \ game, it would go for the ball, ignore all subsequent orders of mine, and\
      \ score on the opposing team.</p>\n<p>The easy way to solve this problem would\
      \ be to subclass these two AI classes and modify their code. It's just a consideration\
      \ for you.</p>\n<h3><span class=\"mw-headline\" id=\"ScriptedTrigger\">ScriptedTrigger</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=15\" title=\"\
      Edit section: ScriptedTrigger\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Legacy:ScriptedTrigger\" title=\"Legacy:ScriptedTrigger\"\
      >ScriptedTrigger</a> and <a href=\"/Legacy:ScriptedTriggerController\" title=\"\
      Legacy:ScriptedTriggerController\">ScriptedTriggerController</a> are two more\
      \ classes that help you out. ScriptedTriggerController is able to perform scripted\
      \ events without a Pawn. In other words, if you have certain actions like <a\
      \ href=\"/edit/Legacy:ACTION_SpawnActor?redlink=1\" class=\"new\" title=\"Legacy:ACTION\
      \ SpawnActor (page does not exist)\">ACTION_SpawnActor</a> that do not need\
      \ a pawn to perform, you would use a ScriptedTrigger (which incidentally subclasses\
      \ ScriptedSequence) to perform these. You'll notice, if you examine UT's source\
      \ code that <b>actions that require a <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\"\
      >Pawn</a> to perform</b> are generally bValidForTrigger=false and cannot be\
      \ used with ScriptedTriggers.</p>\n<p>And, if you look at ScriptedTrigger, it\
      \ spawns a ScriptedTriggerController, which needs and has no Pawn attached.\
      \ The funny thing is, I think Scripted<b>Trigger</b> is a misnomer, as this\
      \ class has nothing to do with Triggers. You can of course add an action like\
      \ the <a href=\"/edit/Legacy:Action_WaitForEvent?redlink=1\" class=\"new\" title=\"\
      Legacy:Action WaitForEvent (page does not exist)\">Action_WaitForEvent</a> that\
      \ causes your ScriptedTrigger to activate upon being triggered. However, it\
      \ doesn't seem to be directly linked to triggers.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Conclusion\">Conclusion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=16\"\
      \ title=\"Edit section: Conclusion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Okay! Hopefully, with this, we are on the way to cool\
      \ new things. Some possibilities for using this code:</p>\n<ul>\n<li>New AI\
      \ abilities (like finding cover)</li>\n<li>A method for ordering bots around\
      \ (You! Go Here!)</li>\n<li>Movies - dynamic ingame movies dictated by code\
      \ and not pre-made by level designers</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=17\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Trigger_Systems\" title=\"\
      Legacy:Trigger Systems\">Trigger Systems</a></li>\n<li><a href=\"/Legacy:Artificial_Intelligence\"\
      \ title=\"Legacy:Artificial Intelligence\">Artificial Intelligence</a>\n<ul>\n\
      <li><a href=\"/Legacy:Bot_Support\" title=\"Legacy:Bot Support\">Bot Support</a></li>\n\
      <li><a href=\"/Legacy:Monster_Support\" title=\"Legacy:Monster Support\">Monster\
      \ Support</a></li>\n<li><a href=\"/Legacy:NPC_Support\" title=\"Legacy:NPC Support\"\
      >NPC Support</a></li>\n</ul>\n</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_And_Using_ScriptedActions?section=18\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Soldat:</b> todo: talk about the default properties.\
      \ I forgot to do that. also, I have example code if anyone's interested, I coded\
      \ bot orders and such.</p>\n<p><b>Soldat:</b> okay, done all that. added scripted\
      \ trigger stuff too, which i did not notice earlier.</p>\n<p><b>Tarquin:</b>\
      \ Nice article! I actually feel I understand this whole scripted stuff!</p>\n\
      <p><b>Hawkeye:</b> I strongly disagree. This is almost completely unreadable\
      \ and unintelligible for people without some programming experience.</p>\n<p>A\
      \ ScriptedSequence is a script that does stuff. The stuff it does are a bunch\
      \ of ScriptedActions. So if you want a new type of action in your ScriptedSequence\
      \ (say, for instance, move to a number of pathnodes in a certain order) that\
      \ isn't already in the game, you can write a new class for it under Object-&gt;ScriptedAction\
      \ (Untick both options in your classes browser to find it). The new ScriptedAction\
      \ will become available to be placed in new ScriptedSequences.</p>\n<p>That's\
      \ what it <i>should</i> say, but it doesn't. It's WAY too technical. Also, many\
      \ things are considered to be known to the reader by the writer, and he doesn't\
      \ elaborate most of the examples he gives. This article was clearly written\
      \ by a programmer.</p>\n<p><b>Oboyrex:</b> Hawkeyes point is well taken, my\
      \ rule of thumb is to make it useful to my grandmother, but let me just say\
      \ that the content on this page is some of the most useful to me on the whole\
      \ site, so keep in someplace.</p>\n<p><b>Solid Snake:</b> Ahh, I think all programming\
      \ articles are meant for programmers in general. We aren't writing to the general\
      \ public, we are writing for other fellow coders who haven't learnt a part of\
      \ UScript yet. It's like teaching anything to anyone, you assume basic knowledge\
      \ and while every tutorial can go over everything with a fine tooth comb, it's\
      \ completely unneccessary. Does Soldat really need to define what a variable,\
      \ object, instance and so on mean?</p>\n<p><b>SuperApe:</b> This is a tutorial,\
      \ isn't it?</p>\n<p><b>Bob_The_Beheader:</b> How exactly are the sequences activated?\
      \ Do bots have to come within a certain radius of them, like triggers? or are\
      \ they something that is activated when triggered?</p>\n<p><b>SuperApe:</b>\
      \ Technically, either. A ScriptedSequence set with the latent action ACTION_WaitForPlayer\
      \ can \"grab\" a bot. But, this is meant to be either set via AI -&gt; AIScriptTag\
      \ to control a Pawn from match start or via Trigger actor (something that will\
      \ pass the trigger Instigator to the ScriptedSequence). The script has to be\
      \ associated with a Pawn. Also, some GameObjects or GameInfo actors assign bots\
      \ to ScriptedSequences, as in CTF DefenseScripts.</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.289 seconds\nReal time usage: 0.312 seconds\nPreprocessor\
      \ visited node count: 189/1000000\nPreprocessor generated node count: 344/1000000\n\
      Post‐expand include size: 34/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:788-0!*!0!!en!*!*\
      \ and timestamp 20221118015343 and revision id 33949\n -->\n"
  categories:
  - sortkey: "Creating And Using ScriptedActions"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: false
    name: "Legacy:ACTION IFCONDITION"
  - ns: 100
    exists: false
    name: "Legacy:ACTION SpawnActor"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: false
    name: "Legacy:LatentScriptedAction"
  - ns: 100
    exists: true
    name: "Legacy:Trigger Systems"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTriggerController"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedSequence"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedPawn"
  - ns: 100
    exists: true
    name: "Legacy:Bot"
  - ns: 100
    exists: true
    name: "Legacy:Latent Function"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedController"
  - ns: 100
    exists: true
    name: "Legacy:TeamAI"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTrigger"
  - ns: 100
    exists: true
    name: "Legacy:Monster Support"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:Controller"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedAction"
  - ns: 100
    exists: false
    name: "Legacy:Action WaitForEvent"
  - ns: 100
    exists: true
    name: "Legacy:NPC Support"
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:SquadAI"
  - ns: 100
    exists: true
    name: "Legacy:Bot Support"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "How Actions Work"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 984
    anchor: "How_Actions_Work"
  - toclevel: 1
    level: "2"
    line: "Creating ScriptedActions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 2021
    anchor: "Creating_ScriptedActions"
  - toclevel: 2
    level: "3"
    line: "Anatomy of a ScriptedAction"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 2051
    anchor: "Anatomy_of_a_ScriptedAction"
  - toclevel: 2
    level: "3"
    line: "Basic Functions"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 2331
    anchor: "Basic_Functions"
  - toclevel: 2
    level: "3"
    line: "Flow Control"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 2963
    anchor: "Flow_Control"
  - toclevel: 2
    level: "3"
    line: "Latent Functions"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 4227
    anchor: "Latent_Functions"
  - toclevel: 2
    level: "3"
    line: "Misc Functions"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 6539
    anchor: "Misc_Functions"
  - toclevel: 2
    level: "3"
    line: "Default Properties"
    number: "2.6"
    index: "8"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 6854
    anchor: "Default_Properties"
  - toclevel: 2
    level: "3"
    line: "Summary"
    number: "2.7"
    index: "9"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 7199
    anchor: "Summary"
  - toclevel: 1
    level: "2"
    line: "Using ScriptedActions and ScriptedSequences"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 7340
    anchor: "Using_ScriptedActions_and_ScriptedSequences"
  - toclevel: 2
    level: "3"
    line: "Writing Scripted Sequences"
    number: "3.1"
    index: "11"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 7389
    anchor: "Writing_Scripted_Sequences"
  - toclevel: 2
    level: "3"
    line: "Using Scripted Sequences"
    number: "3.2"
    index: "12"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 9172
    anchor: "Using_Scripted_Sequences"
  - toclevel: 3
    level: "4"
    line: "Broken?"
    number: "3.2.1"
    index: "13"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 10798
    anchor: "Broken.3F"
  - toclevel: 3
    level: "4"
    line: "One last thing to think about"
    number: "3.2.2"
    index: "14"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 11571
    anchor: "One_last_thing_to_think_about"
  - toclevel: 2
    level: "3"
    line: "ScriptedTrigger"
    number: "3.3"
    index: "15"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 12067
    anchor: "ScriptedTrigger"
  - toclevel: 1
    level: "2"
    line: "Conclusion"
    number: "4"
    index: "16"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 13188
    anchor: "Conclusion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "17"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 13486
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "6"
    index: "18"
    fromtitle: "Legacy:Creating_And_Using_ScriptedActions"
    byteoffset: 13734
    anchor: "Discussion"
  displaytitle: "Legacy:Creating And Using ScriptedActions"
  iwlinks: []
  wikitext:
    text: "[[Legacy:ScriptedAction|ScriptedAction]]s, and their related [[Legacy:ScriptedSequence|ScriptedSequence]]s,\
      \ are the premier method for getting [[Legacy:UT2003|UT2003]] AI to \"do stuff\"\
      . Back in [[Legacy:UT|UT]], when coders wanted to introduce new behavior into\
      \ bots or [[Legacy:ScriptedPawn|ScriptedPawn]]s, they would subclass whatever\
      \ AI they were deriving from, and add code there.\n\nIn [[Legacy:UT2003|UT2003]],\
      \ a similar action would be to subclass [[Legacy:Controller|Controller]]. However,\
      \ with the addition of [[Legacy:ScriptedSequence|ScriptedSequence]]s, there\
      \ is no longer the need to do this. Developers can just make a new [[Legacy:ScriptedAction|ScriptedAction]],\
      \ and tell pawns to perform this action.\n\nThere are two reasons for this article.\
      \ First is a very simple discussion about how to create subclasses of [[Legacy:ScriptedAction|ScriptedAction]].\
      \ The second is on how to actually use [[Legacy:ScriptedAction|ScriptedAction]]s,\
      \ from the perspective of the coder.\n\n==How Actions Work==\n\nWithin classes\
      \ derived from [[Legacy:ScriptedController|ScriptedController]] (This includes\
      \ [[Legacy:Bot|Bot]]s) there is a mechanism to perform actions. Basically, it's\
      \ a [[Legacy:State|state]]: <code>state Scripting</code>\n\nWhat happens is\
      \ that it's given a [[Legacy:ScriptedSequence|ScriptedSequence]], in its variable\
      \ '''SequenceScript'''. This ScriptedSequence contains an array of [[Legacy:ScriptedAction|ScriptedAction]]s.\
      \ Then, the controller runs through the actions one by one down the line until\
      \ the last action. After that, if this Controller was artificially created,\
      \ it destroys itself!\n\nWhat this means is that: you can give \"unpossessed\"\
      \ Pawns (with no controller) orders. They will temporarily don the [[Legacy:ScriptedController|ScriptedController]]\
      \ hat and do the actions. Afterwards, it reverts to the original controller\
      \ or no controller. \n\nSince the <code>state Scripting</code> code is pretty\
      \ self-explanatory, I won't run through that. Suffice to know, it's there and\
      \ does your dirty work.\n\n==Creating ScriptedActions==\n\n===Anatomy of a ScriptedAction===\n\
      \n<uscript>\nclass ACTION_ChangeName extends ScriptedAction;\n\nvar(Action)\
      \ string NewName;\nvar int Count;\n</uscript>\n\nAll published variables (''var()'')\
      \ will be editable by the level designer at design time - in that nifty object\
      \ properties box. \n\n===Basic Functions===\n\n<uscript>\nfunction bool InitActionFor(ScriptedController\
      \ C)\n{\n\tC.PlayerReplicationInfo.PlayerName = NewName;\n\n\treturn true;\t\
      \n}\n</uscript>\n\nInitActionFor is the '''meat''' of the Action. This is where\
      \ the action will usually happen. The passed variable '''C''' is, of course,\
      \ the Controller of the Pawn that you are about to manipulate. From this, you\
      \ can access its C.Pawn variable if you're interested.\n\n<uscript>\nfunction\
      \ string GetActionString()\n{\n\treturn ActionString;\n}\n</uscript>\n\nGetActionString\
      \ is, I believe, for logging purposes. It tells the log or whoever wants to\
      \ know, what this Pawn is doing.\n\n===Flow Control===\n\n<uscript>\nfunction\
      \ ProceedToNextAction(ScriptedController C)\n{\n\tC.ActionNum = Max(0,ActionNumber);\n\
      }\n\nfunction ProceedToSectionEnd(ScriptedController C);\n</uscript>\n\nProceedToNextAction\
      \ is called after your action has been executed. Therefore, if you want to (evilly)\
      \ disrupt the flow, you can change this one here. A Controller's '''ActionNum'''\
      \ property tells you which # in the ActionSequence it is currently performing\n\
      \nProceedToSectionEnd is pre-coded. Call it, and you will be moved to the end\
      \ of the section. \n\n<uscript>\nfunction bool StartsSection();\n\nfunction\
      \ bool EndsSection();\n</uscript>\n\nStartsSection signifies if the following\
      \ Action is actually a section start. \"Section\" Actions are such like [[Legacy:ACTION_IFCONDITION|ACTION_IFCONDITION]]\
      \ - they mark off a block of other sections.\n\nEndsSection signifies if the\
      \ Action is a section end.\n\n<uscript>\nfunction ScriptedSequence GetScript(ScriptedSequence\
      \ S)\n{\n}\n</uscript>\n\nGetScript - This is used if a different [[Legacy:ScriptedSequence|ScriptedSequence]]\
      \ is desired. The passed variable S is the current ScriptedSequence, and you\
      \ return a new one if you want the Controller to perform a different ScriptedSequence.\
      \ If you return NONE, then the Controller stops scripting. \n\n===Latent Functions===\n\
      \nA [[Legacy:Latent Function|latent function]] is one that doesn't happen right\
      \ away. It has ''latency''. In other words, when you give the action, it doesn't\
      \ (shazzam) happen right away. For example, if I tell my dog to be in the bathroom,\
      \ it won't be there right away. If I tell it to jump, it will jump right away.\
      \ That's the long and short of it.\n\nLatent actions will subclass [[Legacy:LatentScriptedAction|LatentScriptedAction]].\
      \ If you are writing latent actions, you must subclass this too!\n\n<uscript>\n\
      function bool MoveToGoal();\n\nfunction Actor GetMoveTargetFor(ScriptedController\
      \ C);\n\nfunction bool TurnToGoal();\n\nfunction float GetDistance();\n\nfunction\
      \ bool CompleteOnAnim(int Num);\n\nfunction bool CompleteWhenTriggered();\n\n\
      function bool CompleteWhenTimer();\n\nfunction bool WaitForPlayer();\n\nfunction\
      \ bool TickedAction();\n\nfunction bool StillTicking(ScriptedController C, float\
      \ DeltaTime);\n</uscript>\n\n'''Latent Actions'''\n\nGetMoveTargetFor is where\
      \ you can pass the MoveTarget, or \"goal\" as it is referred to. The actor you\
      \ return is the target.\n\nMoveToGoal tells the pawn to move to the goal specified\
      \ (above). Return of true means that it will move to the goal.\n\nTurnToGoal\
      \ tells the pawn to turn towards the goal if you return true. If the Pawn is\
      \ moving toward the goal, it will automatically turn.\n\n'''Latent Pauses\n\n\
      GetDistance tells the pawn to wait until a Player gets within this value (you\
      \ return this value) of the Controller's Pawn\n\nCompleteOnAnim - if you return\
      \ TRUE, then the sequence will complete when the animation finishes (the Num\
      \ is the animation channel). CompleteOnAnim is called in the Pawn's \"AnimEnd\"\
      \ function within its State Scripting.\n\nCompleteWhenTriggered - TRUE means\
      \ that the sequence will complete when the '''controller''' is triggered\n\n\
      CompleteWhenTimer - TRUE means that the sequence will complete when a player's\
      \ ''Timer()'' is called (that is, you use the '''SetTimer''' command\n\nTickedAction\
      \ tells the Controller whether to process the StillTicking function.\n\nStillTicking\
      \ acts like the Tick(float DeltaTime) for us. If you return TRUE, then this\
      \ function (StillTicking) will continue to be called every Tick. A return of\
      \ FALSE signifies this action is done. It stopps recieving ticks and the action\
      \ sequence moves on to the next action.\n\n===Misc Functions===\n\n<uscript>\n\
      function SetCurrentAnimationFor(ScriptedController C);\n\nfunction bool PawnPlayBaseAnim(ScriptedController\
      \ C, bool bFirstPlay);\n</uscript>\n\nThese two are hard-coded into ScriptedController\
      \ - they are special functions. They allow you to modify whatever animation\
      \ the Pawn is playing\n\n===Default Properties===\n\n<uscript>\nvar localized\
      \ string ActionString;\nvar bool bValidForTrigger;\n</uscript>\n\nActionString,\
      \ as talked about above, is a very short description of what the action does\n\
      \nbValidForTrigger signals whether this action is appropriate for use with a\
      \ [[Legacy:ScriptedTrigger|ScriptedTrigger]] (discussed briefly below)\n\n===Summary===\n\
      \nHopefully, with these explanations you are well on your way to writing new\
      \ Actions and extending the capabilities of the AI.\n\n==Using ScriptedActions\
      \ and ScriptedSequences==\n\n===Writing Scripted Sequences===\n\nTypically,\
      \ ScriptedActions aren't used by themselves, but used in a chain of actions\
      \ called a ScriptedSequence. Since it's just an array, I won't go into the details\
      \ of this. It'll suffice to give you an example.\n\n<uscript>\nclass OPNavPoint\
      \ extends UnrealScriptedSequence\n\tplaceable;\n\nfunction FreeScript()\n{\n\
      \tDestroy();\t\t\t\t// When this sequence is completed, destroy it.\n}\n\ndefaultproperties\n\
      {\n\tEnemyAcquisitionScriptProbability=+1.0\n\tbRoamingScript = false\n\tPriority\
      \ = 200\n\tbCollideWhenPlacing=false\n\tbStatic=false\n\tbNoDelete=false\n\t\
      bFreeLance = false\n\n\tBegin Object Class=Action_MOVETOPOINT Name=OPACTIONMoveToLocation\n\
      \    End Object\n\tBegin Object Class=Action_CROUCH Name=OPACTIONCrouch\n  \
      \  End Object\n\tBegin Object Class=Action_WAITFORTIMER Name=OPACTIONWaitShort\n\
      \t\tPauseTime = 3.0\n    End Object\n\tBegin Object Class=Action_MOVETOPLAYER\
      \ Name=OPACTIONMoveToPlayer\n    End Object\n\tBegin Object Class=Action_SETALERTNESS\
      \ Name=OPACTIONMakeAlert\n\t\tAlertness = ALERTNESS_LeaveScriptForCombat\n \
      \   End Object\n\tBegin Object Class=Action_RUN Name=OPACTIONRun\n    End Object\n\
      \n\tActions(0)=ScriptedAction'OPACTIONRun'\n\tActions(1)=ScriptedAction'OPACTIONMoveToLocation'\n\
      \tActions(2)=ScriptedAction'OPACTIONCrouch'\n}\n</uscript>\n\nFirst, you see,\
      \ you have to create the Action objects. You can set their variables if you\
      \ wish. Then, you simply add new ScriptedActions to the array. This is much\
      \ like adding buttons to a menu, if you're familiar with that. I've defined\
      \ more objects than actions, for future references in classes that are subclasses\
      \ of OPNavPoint. This way, I don't have to re-define everything.\n \n\nWhat\
      \ this OPNavPoint does is this. It makes the pawn start running to where the\
      \ OPNavPoint is located, and then makes it crouch. Simple, and fun!\n\n===Using\
      \ Scripted Sequences===\n\nTo use the above script, I would have to put it in\
      \ the position I want my pawn to go. Here is an example function, called within\
      \ a subclass of [[Legacy:PlayerController|PlayerController]], that creats this\
      \ order, and tells the pawn to execute it.\n\n<uscript>\nfunction DoMoveOut(Bot\
      \ b, Vector MyLocation)\n{\n\tlocal OPNavPoint opnp;\n\n\tMyLocation = Somewhere;\
      \ // something like this\n\n\topnp = Spawn(class'OPNavPoint',self,,MyLocation);\
      \ // self is the commanding officer, in this case\n\tOPBot(b).ReceiveDestination(self,opnp);\n\
      }\n</uscript>\n\nWhat's ReceiveDestination? It's a small function within OPBot,\
      \ my subclass of [[Legacy:Bot|Bot]] that tells pawns what to do.\n\n<uscript>\n\
      function RecieveDestination(Controller c, UnrealScriptedSequence s)\n{\n\tif(s\
      \ == none)\t\t\t\t// no script, no action\n\t\treturn;\n\ts.CurrentUser = self;\t\
      \t// Me, I'm the current user of the script.\n\tStopCurrentScript();\t\t// Stop\
      \ doing whatever i'm doing.\n\tGoalScript = s;\t\t\t\t// Assing the Script to\
      \ the \"GoalScript\" property\n\tSetNewScript(s);\t\t\t// Tell myself that I\
      \ have new orders\n\tSendMessage(c.PlayerReplicationInfo, 'ACK', 0, 5, 'TEAM');\t\
      // Tell the person who sent me the order that I heard them\n\tLevel.Game.Broadcast(self,\
      \ \"Order Recieved.\", 'TeamSay');\t// Same\n\tif(c.IsA('PlayerController'))\n\
      \t\tMyPlayerController = PlayerController(c);\t\t// The person who sent me the\
      \ order is MyPlayerController (for certain Action's, and debugging)\n\tGoToState('Scripting');\t\
      \t// Now, go script!\n}\n</uscript>\n\nThere's a bit of extra code up there,\
      \ but you can get the general picture. As you can see, it's not to hard to give\
      \ the bot orders!\n\n====Broken?====\n\nFinally, there's one more thing I must\
      \ mention. Occasionally, scripts \"break\". There could be many reasons for\
      \ this, but basically, it stops working. This is quite annoying for after a\
      \ script is broken, Pawn behavior is very erratic and strange. The game might\
      \ crash. I leave this fragment to you:\n\n<uscript>\n// Broken scripted sequence\
      \ - for debugging\nState Broken\n{\nBegin:\n\tMyPlayerController.Pawn.ClientMessage(Pawn$\"\
      \ Scripted Sequence BROKEN \"$SequenceScript$\" ACTION \"$CurrentAction);\n\t\
      WanderOrCamp(true);\n}\n</uscript>\n\nThis will tell you if your pawn's script\
      \ broke, and make sure that the pawn doesn't actually go haywire. It tells the\
      \ pawn to wander around. Thus, you know which action is causing the break-age,\
      \ and without a VERY annoying crash.\n\n====One last thing to think about====\n\
      \nFinally, some things will compete with you when giving orders to pawns. That\
      \ would be [[Legacy:TeamAI|TeamAI]] and [[Legacy:SquadAI|SquadAI]]. For example,\
      \ if I told a pawn to move past a ball in a regular bombing run game, it would\
      \ go for the ball, ignore all subsequent orders of mine, and score on the opposing\
      \ team.\n\nThe easy way to solve this problem would be to subclass these two\
      \ AI classes and modify their code. It's just a consideration for you.\n\n===ScriptedTrigger===\n\
      \n[[Legacy:ScriptedTrigger|ScriptedTrigger]] and [[Legacy:ScriptedTriggerController|ScriptedTriggerController]]\
      \ are two more classes that help you out. ScriptedTriggerController is able\
      \ to perform scripted events without a Pawn. In other words, if you have certain\
      \ actions like [[Legacy:ACTION_SpawnActor|ACTION_SpawnActor]] that do not need\
      \ a pawn to perform, you would use a ScriptedTrigger (which incidentally subclasses\
      \ ScriptedSequence) to perform these. You'll notice, if you examine UT's source\
      \ code that '''actions that require a [[Legacy:Pawn|Pawn]] to perform''' are\
      \ generally bValidForTrigger=false and cannot be used with ScriptedTriggers.\
      \ \n\nAnd, if you look at ScriptedTrigger, it spawns a ScriptedTriggerController,\
      \ which needs and has no Pawn attached. The funny thing is, I think Scripted'''Trigger'''\
      \ is a misnomer, as this class has nothing to do with Triggers. You can of course\
      \ add an action like the [[Legacy:Action_WaitForEvent|Action_WaitForEvent]]\
      \ that causes your ScriptedTrigger to activate upon being triggered. However,\
      \ it doesn't seem to be directly linked to triggers.\n\n==Conclusion==\n\nOkay!\
      \ Hopefully, with this, we are on the way to cool new things. Some possibilities\
      \ for using this code:\n*New AI abilities (like finding cover)\n*A method for\
      \ ordering bots around (You! Go Here!)\n*Movies - dynamic ingame movies dictated\
      \ by code and not pre-made by level designers\n\n==Related Topics==\n* [[Legacy:Trigger\
      \ Systems|Trigger Systems]]\n* [[Legacy:Artificial Intelligence|Artificial Intelligence]]\n\
      ** [[Legacy:Bot Support|Bot Support]]\n** [[Legacy:Monster Support|Monster Support]]\n\
      ** [[Legacy:NPC Support|NPC Support]]\n\n==Discussion==\n\n'''Soldat:''' todo:\
      \ talk about the default properties. I forgot to do that. also, I have example\
      \ code if anyone's interested, I coded bot orders and such.\n\n'''Soldat:'''\
      \ okay, done all that. added scripted trigger stuff too, which i did not notice\
      \ earlier.\n\n'''Tarquin:''' Nice article! I actually feel I understand this\
      \ whole scripted stuff!\n\n'''Hawkeye:''' I strongly disagree. This is almost\
      \ completely unreadable and unintelligible for people without some programming\
      \ experience. \n\nA ScriptedSequence is a script that does stuff. The stuff\
      \ it does are a bunch of ScriptedActions. So if you want a new type of action\
      \ in your ScriptedSequence (say, for instance, move to a number of pathnodes\
      \ in a certain order) that isn't already in the game, you can write a new class\
      \ for it under Object->ScriptedAction (Untick both options in your classes browser\
      \ to find it). The new ScriptedAction will become available to be placed in\
      \ new ScriptedSequences.\n\nThat's what it ''should'' say, but it doesn't. It's\
      \ WAY too technical. Also, many things are considered to be known to the reader\
      \ by the writer, and he doesn't elaborate most of the examples he gives. This\
      \ article was clearly written by a programmer.\n\n'''Oboyrex:''' Hawkeyes point\
      \ is well taken, my rule of thumb is to make it useful to my grandmother, but\
      \ let me just say that the content on this page is some of the most useful to\
      \ me on the whole site, so keep in someplace.\n\n'''Solid Snake:''' Ahh, I think\
      \ all programming articles are meant for programmers in general. We aren't writing\
      \ to the general public, we are writing for other fellow coders who haven't\
      \ learnt a part of UScript yet. It's like teaching anything to anyone, you assume\
      \ basic knowledge and while every tutorial can go over everything with a fine\
      \ tooth comb, it's completely unneccessary. Does Soldat really need to define\
      \ what a variable, object, instance and so on mean?\n\n'''SuperApe:''' This\
      \ is a tutorial, isn't it?\n\n'''Bob_The_Beheader:''' How exactly are the sequences\
      \ activated? Do bots have to come within a certain radius of them, like triggers?\
      \ or are they something that is activated when triggered?\n\n'''SuperApe:'''\
      \ Technically, either.  A ScriptedSequence set with the latent action ACTION_WaitForPlayer\
      \ can \"grab\" a bot.  But, this is meant to be either set via AI -> AIScriptTag\
      \ to control a Pawn from match start or via Trigger actor (something that will\
      \ pass the trigger Instigator to the ScriptedSequence).  The script has to be\
      \ associated with a Pawn.  Also, some GameObjects or GameInfo actors assign\
      \ bots to ScriptedSequences, as in CTF DefenseScripts.\n\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 33949
name: "Legacy:Creating And Using ScriptedActions"
revision:
  revid: 33949
  parentid: 33948
  user: "Wormbo"
  timestamp: 1232357306.000000000
  comment: "Reverted edits by [[Special:Contributions/Codeinfosystems|Codeinfosystems]]\
    \ ([[User talk:Codeinfosystems|Talk]]); changed back to last version by [[User:Wormbo|Wormbo]]"
timestamp: 1668766771.503092000
