---
parse:
  title: "Legacy:UnrealScript Language Reference/Functions"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Functions\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Functions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Declaring_Functions\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Declaring Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Function_Parameter_Specifiers\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Function Parameter\
      \ Specifiers</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Function_Overriding\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\"\
      >Function Overriding</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Advanced_Function_Specifiers\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">Advanced Function Specifiers</span></a>\n<ul>\n<li\
      \ class=\"toclevel-3 tocsection-7\"><a href=\"#Static\"><span class=\"tocnumber\"\
      >2.4.1</span> <span class=\"toctext\">Static</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-8\"><a href=\"#Singular\"><span class=\"tocnumber\">2.4.2</span>\
      \ <span class=\"toctext\">Singular</span></a></li>\n<li class=\"toclevel-3 tocsection-9\"\
      ><a href=\"#Native\"><span class=\"tocnumber\">2.4.3</span> <span class=\"toctext\"\
      >Native</span></a></li>\n<li class=\"toclevel-3 tocsection-10\"><a href=\"#Latent\"\
      ><span class=\"tocnumber\">2.4.4</span> <span class=\"toctext\">Latent</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-11\"><a href=\"#Iterator\"><span class=\"\
      tocnumber\">2.4.5</span> <span class=\"toctext\">Iterator</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-12\"><a href=\"#Simulated\"><span class=\"\
      tocnumber\">2.4.6</span> <span class=\"toctext\">Simulated</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-13\"><a href=\"#Operator.2C_PreOperator.2C_PostOperator\"\
      ><span class=\"tocnumber\">2.4.7</span> <span class=\"toctext\">Operator, PreOperator,\
      \ PostOperator</span></a></li>\n<li class=\"toclevel-3 tocsection-14\"><a href=\"\
      #Event\"><span class=\"tocnumber\">2.4.8</span> <span class=\"toctext\">Event</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-15\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_Language_Reference\"\
      >UnrealScript Language Reference</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Functions\">Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=2\"\
      \ title=\"Edit section: Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Declaring_Functions\"\
      >Declaring Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=3\"\
      \ title=\"Edit section: Declaring Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In UnrealScript, you can declare new functions and\
      \ write new versions of existing functions. Functions can take one or more parameters\
      \ (of any variable type UnrealScript supports), and can optionally return a\
      \ value. Though most functions are written directly in UnrealScript, you can\
      \ also declare functions that can be called from UnrealScript, but which are\
      \ implemented in C++ and reside in a DLL. The Unreal technology supports all\
      \ possible combinations of function calling: The C++ engine can call script\
      \ functions; script can call C++ functions; and script can call script.</p>\n\
      <p>Here is a simple function declaration. This function takes a vector as a\
      \ parameter, and returns a floating point number:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// Function to compute the size of a\
      \ vector.</span>\n<span class=\"kw1\">function</span> <span class=\"kw5\">float</span>\
      \ VectorSize<span class=\"br0\">(</span> <span class=\"kw5\">vector</span> V\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span\
      \ class=\"kw2\">return</span> <span class=\"kw3\">sqrt</span><span class=\"\
      br0\">(</span> V.<span class=\"me0\">X</span> <span class=\"sy0\">*</span> V.<span\
      \ class=\"me0\">X</span> <span class=\"sy0\">+</span> V.<span class=\"me0\"\
      >Y</span> <span class=\"sy0\">*</span> V.<span class=\"me0\">Y</span> <span\
      \ class=\"sy0\">+</span> V.<span class=\"me0\">Z</span> <span class=\"sy0\"\
      >*</span> V.<span class=\"me0\">Z</span> <span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>The word \"function\" always\
      \ precedes a function declaration. It is followed by the optional return type\
      \ of the function (in this case, \"float\"), then the function name, and then\
      \ the list of function parameters enclosed in parenthesis.</p>\n<p>When a function\
      \ is called, the code within the brackets is executed. Inside the function,\
      \ you can declare local variables (using the \"local\" keyword\"), and execute\
      \ any UnrealScript code. The optional \"return\" keyword causes the function\
      \ to immediately return a value.</p>\n<p>You can pass any UnrealScript types\
      \ to a function (including arrays), and a function can return any type.</p>\n\
      <p>By default, any local variables you declare in a function are initialized\
      \ to zero.</p>\n<p>Function calls can be recursive. For example, the following\
      \ function computes the factorial of a number:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// Function to compute the factorial\
      \ of a number.</span>\n<span class=\"kw1\">function</span> <span class=\"kw5\"\
      >int</span> Factorial<span class=\"br0\">(</span> <span class=\"kw5\">int</span>\
      \ Number <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n      \
      \ <span class=\"kw2\">if</span><span class=\"br0\">(</span> Number <span class=\"\
      sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n\
      \               <span class=\"kw2\">return</span> <span class=\"nu0\">1</span>;\n\
      \       <span class=\"kw2\">else</span>\n               <span class=\"kw2\"\
      >return</span> Number <span class=\"sy0\">*</span> Factorial<span class=\"br0\"\
      >(</span> Number <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Some UnrealScript functions are called by the engine whenever certain events\
      \ occur. For example, when an actor is touched by another actor, the engine\
      \ calls its \"Touch\" function to tell it who is touching it. By writing a custom\
      \ \"Touch\" function, you can take special actions as a result of the touch\
      \ occuring:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// Called when something touches this actor.</span>\n<span class=\"kw1\"\
      >function</span> <span class=\"kw4\">Touch</span><span class=\"br0\">(</span>\
      \ <span class=\"kw9\">actor</span> Other <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n       <span class=\"kw3\">Log</span><span class=\"\
      br0\">(</span> <span class=\"st0\">\"I was touched!\"</span><span class=\"br0\"\
      >)</span>\n       Other.<span class=\"me0\">Message</span><span class=\"br0\"\
      >(</span> <span class=\"st0\">\"You touched me!\"</span> <span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>The above function\
      \ illustrates several things. First of all, the function writes a message to\
      \ the log file using the \"Log\" command (which is the equivalent of Basic's\
      \ \"print\" command and C's \"printf\"). Second, it calls the \"Message\" function\
      \ residing in the actor Other. Calling functions in other actors is a common\
      \ action in UnrealScript, and in object-oriented languages like Java in general,\
      \ because it provides a simple means for actors to communicate with each other.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Function_Parameter_Specifiers\">Function\
      \ Parameter Specifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=4\"\
      \ title=\"Edit section: Function Parameter Specifiers\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>When you normally call a function,\
      \ UnrealScript makes a local copy of the parameters you pass the function. If\
      \ the function modifies some of the parameters, those don't have any effect\
      \ on the variables you passed in. For example, the following program:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> DoSomething<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">int</span> x <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n       x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">2</span>;\n       <span class=\"kw2\">return</span> x;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">int</span> DoSomethingElse<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n       <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> a, b;\n       a <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">2</span>;\n       <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"The value of a is \"</span> <span\
      \ class=\"sy0\">$</span> a <span class=\"br0\">)</span>;\n \n       b <span\
      \ class=\"sy0\">=</span> DoSomething<span class=\"br0\">(</span> a <span class=\"\
      br0\">)</span>;\n       <span class=\"kw3\">log</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">\"The value of a is \"</span> <span class=\"sy0\">$</span>\
      \ a <span class=\"br0\">)</span>;\n       <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"The value of b is \"</span> <span\
      \ class=\"sy0\">$</span> b <span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Produces the following output when DoSomethingElse\
      \ is called:</p>\n<pre> The value of a is 2\n The value of a is 2\n The value\
      \ of b is 4\n</pre>\n<p>In other words, the function DoSomething was working\
      \ with a local copy of the variable \"a\" which was passed to it, and it was\
      \ not affecting the real variable \"a\".</p>\n<p>The \"out\" specified lets\
      \ you tell a function that it should actually modify the variable that is passed\
      \ to it, rather than making a local copy. This is useful, for example, if you\
      \ have a function that needs to return several values to the caller. You can\
      \ just have the caller pass several variables to the function which are \"out\"\
      \ values. For example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// Compute the minimum and maximum components of a vector.</span>\n<span\
      \ class=\"kw1\">function</span> VectorRange<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">vector</span> V, <span class=\"kw1\">out</span> <span class=\"\
      kw5\">float</span> <span class=\"kw3\">Min</span>, <span class=\"kw1\">out</span>\
      \ <span class=\"kw5\">float</span> <span class=\"kw3\">Max</span> <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n       <span class=\"co1\">//\
      \ Compute the minimum value.</span>\n       <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> V.<span class=\"me0\">X</span><span class=\"sy0\">&lt;</span>V.<span\
      \ class=\"me0\">Y</span> <span class=\"sy0\">&amp;&amp;</span> V.<span class=\"\
      me0\">X</span><span class=\"sy0\">&lt;</span>V.<span class=\"me0\">Z</span>\
      \ <span class=\"br0\">)</span> <span class=\"kw3\">Min</span> <span class=\"\
      sy0\">=</span> V.<span class=\"me0\">X</span>;\n       <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span><span class=\"br0\">(</span> V.<span class=\"\
      me0\">Y</span><span class=\"sy0\">&lt;</span>V.<span class=\"me0\">Z</span>\
      \ <span class=\"br0\">)</span> <span class=\"kw3\">Min</span> <span class=\"\
      sy0\">=</span> V.<span class=\"me0\">Y</span>;\n       <span class=\"kw2\">else</span>\
      \ <span class=\"kw3\">Min</span> <span class=\"sy0\">=</span> V.<span class=\"\
      me0\">Z</span>;\n \n       <span class=\"co1\">// Compute the maximum value.</span>\n\
      \       <span class=\"kw2\">if</span> <span class=\"br0\">(</span> V.<span class=\"\
      me0\">X</span><span class=\"sy0\">&gt;</span>V.<span class=\"me0\">Y</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> V.<span class=\"me0\">X</span><span\
      \ class=\"sy0\">&gt;</span>V.<span class=\"me0\">Z</span> <span class=\"br0\"\
      >)</span> <span class=\"kw3\">Max</span> <span class=\"sy0\">=</span> V.<span\
      \ class=\"me0\">X</span>;\n       <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> V.<span class=\"me0\">Y</span><span\
      \ class=\"sy0\">&gt;</span>V.<span class=\"me0\">Z</span> <span class=\"br0\"\
      >)</span> <span class=\"kw3\">Max</span> <span class=\"sy0\">=</span> V.<span\
      \ class=\"me0\">Y</span>;\n       <span class=\"kw2\">else</span> <span class=\"\
      kw3\">Max</span> <span class=\"sy0\">=</span> V.<span class=\"me0\">Z</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Without the \"out\" keyword,\
      \ it would be painful to try to write functions that had to return more than\
      \ one value.</p>\n<p>With the \"optional\" keyword, you can make certain function\
      \ parameters optional, as a convenience to the caller. For UnrealScript functions,\
      \ optional parameters which the caller doesn't specify are set to zero. For\
      \ native functions, the default values of optional parameters depends on the\
      \ function. For example, the Spawn function takes an optional location and rotation,\
      \ which default to the spawning actor's location and rotation.</p>\n<p>The \"\
      coerce\" keyword forces the caller's parameters to be converted to the specified\
      \ type (even if UnrealScript normally would not perform the conversion automatically).\
      \ This is useful for functions that deal with strings, so that the parameters\
      \ are automatically converted to strings for you.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Function_Overriding\">Function Overriding</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=5\"\
      \ title=\"Edit section: Function Overriding\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>\"Function overriding\" refers to writing a new version\
      \ of a function in a subclass. For example, say you're writing a script for\
      \ a new kind of monster called a Demon. The Demon class, which you just created,\
      \ extends the Pawn class. Now, when a pawn sees a player for the first time,\
      \ the pawn's \"SeePlayer\" function is called, so that the pawn can start attacking\
      \ the player. This is a nice concept, but say you wanted to handle \"SeePlayer\"\
      \ differently in your new Demon class. How do you do this? Function overriding\
      \ is the answer.</p>\n<p>To override a function, just cut and paste the function\
      \ definition from the parent class into your new class. For example, for SeePlayer,\
      \ you could add this to your Demon class.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">// New Demon class version of the Touch function.</span>\n\
      <span class=\"kw1\">function</span> SeePlayer<span class=\"br0\">(</span> <span\
      \ class=\"kw9\">actor</span> SeenPlayer <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n       <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span> <span class=\"st0\">\"The demon saw a player\"</span> <span class=\"\
      br0\">)</span>;\n       <span class=\"co1\">// Add new custom functionality\
      \ here?</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Function\
      \ overriding is the key to creating new UnrealScript classes efficiently. You\
      \ can create a new class that extends on an existing class. Then, all you need\
      \ to do is override the functions which you want to be handled differently.\
      \ This enables you to create new kinds of objects without writing gigantic amounts\
      \ of code.</p>\n<p>Several functions in UnrealScript are declared as \"final\"\
      . The \"final\" keyword (which appears immediately before the word \"function\"\
      ) says \"this function cannot be overridden by child classes\". This should\
      \ be used in functions which you know nobody would want to override, because\
      \ it results in faster script code. For example, say you have a \"VectorSize\"\
      \ function that computes the size of a vector. There's absolutely no reason\
      \ anyone would ever override that, so declare it as \"final\". On the other\
      \ hand, a function like \"Touch\" is very context-dependent and should not be\
      \ final.</p>\n<h3><span class=\"mw-headline\" id=\"Advanced_Function_Specifiers\"\
      >Advanced Function Specifiers</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=6\"\
      \ title=\"Edit section: Advanced Function Specifiers\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<h4><span class=\"mw-headline\"\
      \ id=\"Static\">Static</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=7\"\
      \ title=\"Edit section: Static\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>A static function acts like a C global function, in\
      \ that it can be called without having a reference to an object of the class.&#160;\
      \ Static functions can call other static functions, and can access the default\
      \ values of variables.&#160; Static functions cannot call non-static functions\
      \ and they cannot access instance variables (since they are not executed with\
      \ respect to an instance of an object).&#160; Unlike languages like C++, static\
      \ functions are virtual and can be overridden in child classes. &#160; This\
      \ is useful in cases where you wish to call a static function in a variable\
      \ class (a class not known at compile time, but referred to by a variable or\
      \ an expression).</p>\n<h4><span class=\"mw-headline\" id=\"Singular\">Singular</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=8\"\
      \ title=\"Edit section: Singular\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The \"singular\" keyword, which appears immediately\
      \ before a function declaration, prevents a function from calling itself recursively.\
      \ The rule is this: If a certain actor is already in the middle of a singular\
      \ function, any subsequent calls to singular functions will be skipped over.\
      \ This is useful in avoiding infinite-recursive bugs in some cases. For example,\
      \ if you try to move an actor inside of your \"Bump\" function, there is a good\
      \ chance that the actor will bump into another actor during its move, resulting\
      \ in another call to the \"Bump\" function, and so on. You should be very careful\
      \ in avoiding such behaviour, but if you can't write code with complete confidence\
      \ that you're avoiding such potential recursive situations, use the \"singular\"\
      \ keyword.</p>\n<h4><span class=\"mw-headline\" id=\"Native\">Native</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=9\"\
      \ title=\"Edit section: Native\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>You can declare UnrealScript functions as \"native\"\
      , which means that the function is callable from UnrealScript, but is actually\
      \ written (elsewhere) in C++. For example, the Actor class contains a lot of\
      \ native function definitions, such as:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">native</span><span class=\"br0\">(</span><span class=\"\
      nu0\">266</span><span class=\"br0\">)</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> <span\
      \ class=\"kw4\">Move</span><span class=\"br0\">(</span> <span class=\"kw5\"\
      >vector</span> Delta <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>The\
      \ number inside the parenthesis after the \"native\" keyword corresponds to\
      \ the number of the function as it was declared in C++ (using the AUTOREGISTER_NATIVE\
      \ macro). The native function is expected to reside in the DLL named identically\
      \ to the package of the class containing the UnrealScript definition.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Latent\">Latent</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=10\"\
      \ title=\"Edit section: Latent\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Declares that a native function is latent, meaning\
      \ that it can only be called from state code, and it may return after some game-time\
      \ has passed.</p>\n<h4><span class=\"mw-headline\" id=\"Iterator\">Iterator</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=11\"\
      \ title=\"Edit section: Iterator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Declares that a native function is an iterator, which\
      \ can be used to loop through a list of actors using the \"foreach\" command.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Simulated\">Simulated</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=12\"\
      \ title=\"Edit section: Simulated\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Declares that a function may execute on the client-side\
      \ when an actor is either a simulated proxy or an autonomous proxy. All functions\
      \ that are both native and final are automatically simulated as well.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Operator.2C_PreOperator.2C_PostOperator\"\
      >Operator, PreOperator, PostOperator</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=13\"\
      \ title=\"Edit section: Operator, PreOperator, PostOperator\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>These keywords are\
      \ for declaring a special kind of function called an operator (equivalent to\
      \ C++ operators). This is how UnrealScript knows about all of the built-in operators\
      \ like \"+\", \"-\", \"==\", and \"||\". I'm not going into detail on how operators\
      \ work in this document, but the concept of operators is similar to C++, and\
      \ you can declare new operator functions and keywords as UnrealScript functions\
      \ or native functions.</p>\n<h4><span class=\"mw-headline\" id=\"Event\">Event</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=14\"\
      \ title=\"Edit section: Event\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The \"event\" keyword has the same meaning to UnrealScript\
      \ as \"function\". However, when you export a C++ header file from Unreal using\
      \ \"unreal -make -h\", UnrealEd automatically generates a C++ -&gt; UnrealScript\
      \ calling stub for each \"event\".&#160; This is a much cleaner replacement\
      \ for the old \"PMessageParms\" struct, because it automatically keeps C++ code\
      \ synched up with UnrealScript functions and eliminates the possibility of passing\
      \ invalid parameters to an UnrealScript function. For example, this bit of UnrealScript\
      \ code:</p>\n<pre> event Touch( Actor Other )\n { ... }\n</pre>\n<p>Generates\
      \ this piece of code in EngineClasses.h:</p>\n<pre> void Touch(class AActor*\
      \ Other)\n {\n     FName N(\"Touch\",FNAME_Intrinsic);\n     struct {class AActor*\
      \ Other; } Parms;\n     Parms.Other=Other;\n     ProcessEvent(N,&amp;Parms);\n\
      \ }\n</pre>\n<p>Thus enabling you to call the UnrealScript function from C++\
      \ like this:</p>\n<pre> AActor *SomeActor, *OtherActor;\n Actor-&gt;Touch(OtherActor);\n\
      </pre>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Functions?section=15\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Arelius:</b> Event, Why for instance is Landed(vector\
      \ Hitnormal) defined as a event in some places, and a function in others? Do\
      \ they refer to the same routines, does the function override the event? Would\
      \ an event override a function?</p>\n<p><b>MythOpus:</b> They are basically\
      \ the same thing, only event's can be called by native code. I think that's\
      \ the only difference.</p>\n<p><b>Arelius:</b> As it turns out, an Event will\
      \ generate a wrapper in the native header, the function will then often be defined\
      \ as a function in subclasses, as the parents event wrapper will call that.</p>\n\
      <p><b>El Muerte:</b> <i>event</i> only has meaning for native classes and functions.\
      \ In any other case it's equal to <i>function</i>. The only thing different\
      \ from <i>event</i> and <i>function</i> is that the native declaration of even\
      \ is \"nicer\" to be called from native code. Like Arelius says, a special wrapper\
      \ is created. You could also call a function from the native code, but it's\
      \ not as easy to call as an event. So it's almost safe to say that only events\
      \ will be called from native code. For this reason a lot of people will also\
      \ declare an overridden event as event, even though it's safe to simply use\
      \ function.</p>\n<hr />\n<p>Prev Page: <a href=\"/Legacy:UnrealScript_Language_Reference/Expressions\"\
      \ title=\"Legacy:UnrealScript Language Reference/Expressions\">Legacy:UnrealScript\
      \ Language Reference/Expressions</a> – <b>Section 4 of 9</b> – Next Page: <a\
      \ href=\"/Legacy:UnrealScript_Language_Reference/Program_Structure\" title=\"\
      Legacy:UnrealScript Language Reference/Program Structure\">Legacy:UnrealScript\
      \ Language Reference/Program Structure</a></p>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.145 seconds\nReal time usage: 0.149 seconds\nPreprocessor\
      \ visited node count: 139/1000000\nPreprocessor generated node count: 295/1000000\n\
      Post‐expand include size: 362/2097152 bytes\nTemplate argument size: 96/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    4.876      1 - -total\n100.00%    4.876      1 - Template:Innerbox\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3284-0!*!0!!en!*!*\
      \ and timestamp 20221117212422 and revision id 8504\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Program Structure"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Expressions"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Functions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 591
    anchor: "Functions"
  - toclevel: 2
    level: "3"
    line: "Declaring Functions"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 607
    anchor: "Declaring_Functions"
  - toclevel: 2
    level: "3"
    line: "Function Parameter Specifiers"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 3496
    anchor: "Function_Parameter_Specifiers"
  - toclevel: 2
    level: "3"
    line: "Function Overriding"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 6027
    anchor: "Function_Overriding"
  - toclevel: 2
    level: "3"
    line: "Advanced Function Specifiers"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 7877
    anchor: "Advanced_Function_Specifiers"
  - toclevel: 3
    level: "4"
    line: "Static"
    number: "2.4.1"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 7914
    anchor: "Static"
  - toclevel: 3
    level: "4"
    line: "Singular"
    number: "2.4.2"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 8613
    anchor: "Singular"
  - toclevel: 3
    level: "4"
    line: "Native"
    number: "2.4.3"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 9396
    anchor: "Native"
  - toclevel: 3
    level: "4"
    line: "Latent"
    number: "2.4.4"
    index: "10"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 10040
    anchor: "Latent"
  - toclevel: 3
    level: "4"
    line: "Iterator"
    number: "2.4.5"
    index: "11"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 10204
    anchor: "Iterator"
  - toclevel: 3
    level: "4"
    line: "Simulated"
    number: "2.4.6"
    index: "12"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 10352
    anchor: "Simulated"
  - toclevel: 3
    level: "4"
    line: "Operator, PreOperator, PostOperator"
    number: "2.4.7"
    index: "13"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 10577
    anchor: "Operator.2C_PreOperator.2C_PostOperator"
  - toclevel: 3
    level: "4"
    line: "Event"
    number: "2.4.8"
    index: "14"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 11049
    anchor: "Event"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "15"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Functions"
    byteoffset: 12006
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript Language Reference/Functions"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Functions ==\n\n===Declaring Functions\
      \ ===\n\nIn UnrealScript, you can declare new functions and write new versions\
      \ of existing functions. Functions can take one or more parameters (of any variable\
      \ type UnrealScript supports), and can optionally return a value. Though most\
      \ functions are written directly in UnrealScript, you can also declare functions\
      \ that can be called from UnrealScript, but which are implemented in C++ and\
      \ reside in a DLL. The Unreal technology supports all possible combinations\
      \ of function calling: The C++ engine can call script functions; script can\
      \ call C++ functions; and script can call script.\n\nHere is a simple function\
      \ declaration. This function takes a vector as a parameter, and returns a floating\
      \ point number:\n\n<uscript>\n// Function to compute the size of a vector.\n\
      function float VectorSize( vector V )\n{\n        return sqrt( V.X * V.X + V.Y\
      \ * V.Y + V.Z * V.Z );\n}\n</uscript>\n\nThe word \"function\" always precedes\
      \ a function declaration. It is followed by the optional return type of the\
      \ function (in this case, \"float\"), then the function name, and then the list\
      \ of function parameters enclosed in parenthesis.\n\nWhen a function is called,\
      \ the code within the brackets is executed. Inside the function, you can declare\
      \ local variables (using the \"local\" keyword\"), and execute any UnrealScript\
      \ code. The optional \"return\" keyword causes the function to immediately return\
      \ a value.\n\nYou can pass any UnrealScript types to a function (including arrays),\
      \ and a function can return any type.\n\nBy default, any local variables you\
      \ declare in a function are initialized to zero.\n\nFunction calls can be recursive.\
      \ For example, the following function computes the factorial of a number:\n\n\
      <uscript>\n// Function to compute the factorial of a number.\nfunction int Factorial(\
      \ int Number )\n{\n       if( Number <= 0 )\n               return 1;\n    \
      \   else\n               return Number * Factorial( Number - 1 );\n}\n</uscript>\n\
      \nSome UnrealScript functions are called by the engine whenever certain events\
      \ occur. For example, when an actor is touched by another actor, the engine\
      \ calls its \"Touch\" function to tell it who is touching it. By writing a custom\
      \ \"Touch\" function, you can take special actions as a result of the touch\
      \ occuring:\n\n<uscript>\n// Called when something touches this actor.\nfunction\
      \ Touch( actor Other )\n{\n       Log( \"I was touched!\")\n       Other.Message(\
      \ \"You touched me!\" );\n}\n</uscript>\n\nThe above function illustrates several\
      \ things. First of all, the function writes a message to the log file using\
      \ the \"Log\" command (which is the equivalent of Basic's \"print\" command\
      \ and C's \"printf\"). Second, it calls the \"Message\" function residing in\
      \ the actor Other. Calling functions in other actors is a common action in UnrealScript,\
      \ and in object-oriented languages like Java in general, because it provides\
      \ a simple means for actors to communicate with each other.\n\n===Function Parameter\
      \ Specifiers ===\n\nWhen you normally call a function, UnrealScript makes a\
      \ local copy of the parameters you pass the function. If the function modifies\
      \ some of the parameters, those don't have any effect on the variables you passed\
      \ in. For example, the following program:\n\n<uscript>\nfunction int DoSomething(\
      \ int x )\n{\n       x = x * 2;\n       return x;\n}\n\nfunction int DoSomethingElse()\n\
      {\n       local int a, b;\n       a = 2;\n       log( \"The value of a is \"\
      \ $ a );\n\n       b = DoSomething( a );\n       log( \"The value of a is \"\
      \ $ a );\n       log( \"The value of b is \" $ b );\n}\n</uscript>\n\nProduces\
      \ the following output when DoSomethingElse is called:\n\n  The value of a is\
      \ 2\n  The value of a is 2\n  The value of b is 4\n\nIn other words, the function\
      \ DoSomething was working with a local copy of the variable \"a\" which was\
      \ passed to it, and it was not affecting the real variable \"a\".\n\nThe \"\
      out\" specified lets you tell a function that it should actually modify the\
      \ variable that is passed to it, rather than making a local copy. This is useful,\
      \ for example, if you have a function that needs to return several values to\
      \ the caller. You can just have the caller pass several variables to the function\
      \ which are \"out\" values. For example:\n\n<uscript>\n// Compute the minimum\
      \ and maximum components of a vector.\nfunction VectorRange( vector V, out float\
      \ Min, out float Max )\n{\n       // Compute the minimum value.\n       if (\
      \ V.X<V.Y && V.X<V.Z ) Min = V.X;\n       else if( V.Y<V.Z ) Min = V.Y;\n  \
      \     else Min = V.Z;\n\n       // Compute the maximum value.\n       if ( V.X>V.Y\
      \ && V.X>V.Z ) Max = V.X;\n       else if( V.Y>V.Z ) Max = V.Y;\n       else\
      \ Max = V.Z;\n}\n</uscript>\n\nWithout the \"out\" keyword, it would be painful\
      \ to try to write functions that had to return more than one value.\n\nWith\
      \ the \"optional\" keyword, you can make certain function parameters optional,\
      \ as a convenience to the caller. For UnrealScript functions, optional parameters\
      \ which the caller doesn't specify are set to zero. For native functions, the\
      \ default values of optional parameters depends on the function. For example,\
      \ the Spawn function takes an optional location and rotation, which default\
      \ to the spawning actor's location and rotation.\n\nThe \"coerce\" keyword forces\
      \ the caller's parameters to be converted to the specified type (even if UnrealScript\
      \ normally would not perform the conversion automatically). This is useful for\
      \ functions that deal with strings, so that the parameters are automatically\
      \ converted to strings for you.\n\n===Function Overriding ===\n\n\"Function\
      \ overriding\" refers to writing a new version of a function in a subclass.\
      \ For example, say you're writing a script for a new kind of monster called\
      \ a Demon. The Demon class, which you just created, extends the Pawn class.\
      \ Now, when a pawn sees a player for the first time, the pawn's \"SeePlayer\"\
      \ function is called, so that the pawn can start attacking the player. This\
      \ is a nice concept, but say you wanted to handle \"SeePlayer\" differently\
      \ in your new Demon class. How do you do this? Function overriding is the answer.\n\
      \nTo override a function, just cut and paste the function definition from the\
      \ parent class into your new class. For example, for SeePlayer, you could add\
      \ this to your Demon class.\n\n<uscript>\n// New Demon class version of the\
      \ Touch function.\nfunction SeePlayer( actor SeenPlayer )\n{\n       log( \"\
      The demon saw a player\" );\n       // Add new custom functionality here?\n\
      }\n</uscript>\n\nFunction overriding is the key to creating new UnrealScript\
      \ classes efficiently. You can create a new class that extends on an existing\
      \ class. Then, all you need to do is override the functions which you want to\
      \ be handled differently. This enables you to create new kinds of objects without\
      \ writing gigantic amounts of code.\n\nSeveral functions in UnrealScript are\
      \ declared as \"final\". The \"final\" keyword (which appears immediately before\
      \ the word \"function\") says \"this function cannot be overridden by child\
      \ classes\". This should be used in functions which you know nobody would want\
      \ to override, because it results in faster script code. For example, say you\
      \ have a \"VectorSize\" function that computes the size of a vector. There's\
      \ absolutely no reason anyone would ever override that, so declare it as \"\
      final\". On the other hand, a function like \"Touch\" is very context-dependent\
      \ and should not be final.\n\n===Advanced Function Specifiers ===\n\n====Static\
      \ ====\n\nA static function acts like a C global function, in that it can be\
      \ called without having a reference to an object of the class.&nbsp; Static\
      \ functions can call other static functions, and can access the default values\
      \ of variables.&nbsp; Static functions cannot call non-static functions and\
      \ they cannot access instance variables (since they are not executed with respect\
      \ to an instance of an object).&nbsp; Unlike languages like C++, static functions\
      \ are virtual and can be overridden in child classes. &nbsp; This is useful\
      \ in cases where you wish to call a static function in a variable class (a class\
      \ not known at compile time, but referred to by a variable or an expression).\n\
      \n====Singular ====\n\nThe \"singular\" keyword, which appears immediately before\
      \ a function declaration, prevents a function from calling itself recursively.\
      \ The rule is this: If a certain actor is already in the middle of a singular\
      \ function, any subsequent calls to singular functions will be skipped over.\
      \ This is useful in avoiding infinite-recursive bugs in some cases. For example,\
      \ if you try to move an actor inside of your \"Bump\" function, there is a good\
      \ chance that the actor will bump into another actor during its move, resulting\
      \ in another call to the \"Bump\" function, and so on. You should be very careful\
      \ in avoiding such behaviour, but if you can't write code with complete confidence\
      \ that you're avoiding such potential recursive situations, use the \"singular\"\
      \ keyword.\n\n====Native ====\n\nYou can declare UnrealScript functions as \"\
      native\", which means that the function is callable from UnrealScript, but is\
      \ actually written (elsewhere) in C++. For example, the Actor class contains\
      \ a lot of native function definitions, such as:\n\n<uscript>\nnative(266) final\
      \ function bool Move( vector Delta );\n</uscript>\n\nThe number inside the parenthesis\
      \ after the \"native\" keyword corresponds to the number of the function as\
      \ it was declared in C++ (using the AUTOREGISTER_NATIVE macro). The native function\
      \ is expected to reside in the DLL named identically to the package of the class\
      \ containing the UnrealScript definition.\n\n====Latent ====\n\nDeclares that\
      \ a native function is latent, meaning that it can only be called from state\
      \ code, and it may return after some game-time has passed.\n\n====Iterator ====\n\
      \nDeclares that a native function is an iterator, which can be used to loop\
      \ through a list of actors using the \"foreach\" command.\n\n====Simulated ====\n\
      \nDeclares that a function may execute on the client-side when an actor is either\
      \ a simulated proxy or an autonomous proxy. All functions that are both native\
      \ and final are automatically simulated as well.\n\n====Operator, PreOperator,\
      \ PostOperator ====\n\nThese keywords are for declaring a special kind of function\
      \ called an operator (equivalent to C++ operators). This is how UnrealScript\
      \ knows about all of the built-in operators like \"+\", \"-\", \"==\", and \"\
      ||\". I'm not going into detail on how operators work in this document, but\
      \ the concept of operators is similar to C++, and you can declare new operator\
      \ functions and keywords as UnrealScript functions or native functions.\n\n\
      ====Event ====\n\nThe \"event\" keyword has the same meaning to UnrealScript\
      \ as \"function\". However, when you export a C++ header file from Unreal using\
      \ \"unreal -make -h\", UnrealEd automatically generates a C++ -> UnrealScript\
      \ calling stub for each \"event\".&nbsp; This is a much cleaner replacement\
      \ for the old \"PMessageParms\" struct, because it automatically keeps C++ code\
      \ synched up with UnrealScript functions and eliminates the possibility of passing\
      \ invalid parameters to an UnrealScript function. For example, this bit of UnrealScript\
      \ code:\n\n  event Touch( Actor Other )\n  { ... }\n\nGenerates this piece of\
      \ code in EngineClasses.h:\n\n  void Touch(class AActor* Other)\n  {\n     \
      \ FName N(\"Touch\",FNAME_Intrinsic);\n      struct {class AActor* Other; }\
      \ Parms;\n      Parms.Other=Other;\n      ProcessEvent(N,&amp;Parms);\n  }\n\
      \nThus enabling you to call the UnrealScript function from C++ like this:\n\n\
      \  AActor *SomeActor, *OtherActor;\n  Actor->Touch(OtherActor);\n\n==Discussion==\n\
      \n'''Arelius:''' Event, Why for instance is Landed(vector Hitnormal) defined\
      \ as a event in some places, and a function in others? Do they refer to the\
      \ same routines, does the function override the event? Would an event override\
      \ a function?\n\n'''MythOpus:''' They are basically the same thing, only event's\
      \ can be called by native code.  I think that's the only difference.\n\n'''Arelius:'''\
      \ As it turns out, an Event will generate a wrapper in the native header, the\
      \ function will then often be defined as a function in subclasses, as the parents\
      \ event wrapper will call that. \n\n'''El Muerte:''' ''event'' only has meaning\
      \ for native classes and functions. In any other case it's equal to ''function''.\
      \ The only thing different from ''event'' and ''function'' is that the native\
      \ declaration of even is \"nicer\" to be called from native code. Like Arelius\
      \ says, a special wrapper is created. You could also call a function from the\
      \ native code, but it's not as easy to call as an event. So it's almost safe\
      \ to say that only events will be called from native code. For this reason a\
      \ lot of people will also declare an overridden event as event, even though\
      \ it's safe to simply use function.\n\n----\n\nPrev Page:  [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Expressions]]\
      \ &ndash; '''Section 4 of 9''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Program\
      \ Structure]]"
  properties: []
  revId: 8504
name: "Legacy:UnrealScript Language Reference/Functions"
revision:
  revid: 8504
  parentid: 8506
  user: "82-35-182-42.cable.ubr08.croy.blueyonder.co.uk"
  timestamp: 1173659474.000000000
  comment: "*"
timestamp: 1668786569.829306000
