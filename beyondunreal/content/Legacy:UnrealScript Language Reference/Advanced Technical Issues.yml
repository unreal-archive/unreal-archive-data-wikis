---
parse:
  title: "Legacy:UnrealScript Language Reference/Advanced Technical Issues"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Advanced_Technical_Issues\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Advanced Technical Issues</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-3\"><a href=\"#UnrealScript_Binary_Compatibility_Issues\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">UnrealScript Binary\
      \ Compatibility Issues</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Technical_Notes\"><span class=\"tocnumber\">2.2</span> <span class=\"\
      toctext\">Technical Notes</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-5\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">2.2.1</span> <span class=\"\
      toctext\">Comments</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#UnrealScript_Programming_Strategy\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">UnrealScript Programming Strategy</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      UnrealScript_Language_Reference\">UnrealScript Language Reference</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Advanced_Technical_Issues\"\
      >Advanced Technical Issues</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=2\"\
      \ title=\"Edit section: Advanced Technical Issues\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"UnrealScript_Binary_Compatibility_Issues\"\
      >UnrealScript Binary Compatibility Issues</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=3\"\
      \ title=\"Edit section: UnrealScript Binary Compatibility Issues\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript is\
      \ designed so that classes in package files may evolve over time without breaking\
      \ binary compatibility.&#160; Here, binary compatibility means \"dependent binary\
      \ files may be loaded and linked without error\"; whether your modified code\
      \ functions as designed is a separate issue.</p>\n<p>Specifically, the kinds\
      \ of modifications when may be made safely are as follows:</p>\n<ul>\n<li>The\
      \ .uc script files in a package may be recompiled without breaking binary compatibility.</li>\n\
      <li>Adding new classes to a package.</li>\n<li>Adding new functions to a class.</li>\n\
      <li>Adding new states to a class.</li>\n<li>Adding new variables to a class.</li>\n\
      <li>Removing private variables from a class.</li>\n</ul>\n<p>Other transformations\
      \ are generally unsafe, including (but not limited to):</p>\n<ul>\n<li>Adding\
      \ new members to a struct.</li>\n<li>Removing a class from a package.</li>\n\
      <li>Changing the type of any variable, function parameter, or return value.</li>\n\
      <li>Changing the number of parameters in a function.</li>\n</ul>\n<h3><span\
      \ class=\"mw-headline\" id=\"Technical_Notes\">Technical Notes</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=4\"\
      \ title=\"Edit section: Technical Notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>Garbage collection&#160;</dt>\n<dd>All objects\
      \ and actors in Unreal are garbage-collected using a tree-following garbage\
      \ collector similar to that of the Java VM. The Unreal garbage collector uses\
      \ the UObject class’s serialization functionality to recursively figure out\
      \ which other objects are referenced by each active object. As a result, object\
      \ need not be explicitly deleted, because the garbage collector will eventually\
      \ hunt them down when they become unreferenced. This approach has the side-effect\
      \ of latent deletion of unreferenced objects; however it is far more efficient\
      \ than reference counting in the case of infrequent deletion.</dd>\n</dl>\n\
      <dl>\n<dt>Unreal COM integration&#160;</dt>\n<dd>Unreal's base UObject class\
      \ derives from IUnknown in anticipation of making Unreal interoperable with\
      \ the Component Object Model without requiring binary changes to objects. However,\
      \ Unreal is not COM-aware at the moment and the benefits of integrating Unreal\
      \ with COM are not yet clear, so this project is on indefinite hold.</dd>\n\
      </dl>\n<dl>\n<dt>UnrealScript is bytecode based&#160;</dt>\n<dd>UnrealScript\
      \ code is compiled into a series of bytecodes similar to p-code or the Java\
      \ bytecodes. This makes UnrealScript platform-neutral; thus porting the client\
      \ and server components of Unreal to other platforms, i.e. the Macintosh or\
      \ Unix, is straightforward, and all versions can interoperate easily by executing\
      \ the same scripts.</dd>\n</dl>\n<dl>\n<dt>Unreal as a Virtual Machine&#160;</dt>\n\
      <dd>The Unreal engine can be regarded as a virtual machine for 3D gaming in\
      \ the same way that the Java language and the built-in Java class hierarchy\
      \ define a virtual machine for Web page scripting. The Unreal virtual machine\
      \ is inherently portable (due to splitting out all platform-dependent code in\
      \ separate modules) and expandable (due to the expandable class hierarchy).\
      \ However, at this time, there are no plans to document the Unreal VM to the\
      \ extent necessary for others to create independent but compatible implementations.</dd>\n\
      </dl>\n<dl>\n<dt>The UnrealScript compiler is two-pass&#160;</dt>\n<dd>Unlike\
      \ C++, UnrealScript is compiled in two distinct passes. In the first pass, variable,\
      \ state and function definitions are parsed and remembered. In the second pass,\
      \ the script code is compiled to byte codes. This enables complex script hierarchies\
      \ with circular dependencies to be completely compiled and linked in two passes,\
      \ without a separate link phase.</dd>\n</dl>\n<dl>\n<dt>Persistent actor state&#160;</dt>\n\
      <dd>It is important to note that in Unreal, because the user can save the game\
      \ at any time, the state of all actors, including their script execution state,\
      \ can be saved at any time where all actors are at their lowest possible stack\
      \ level. This persistence requirement is the reason behind the limitation that\
      \ latent functions may only be called from state code: state code executes at\
      \ the lowest possible stack level, and thus can be serialized easily. Function\
      \ code may exist at any stack level, and could have (for example) C++ native\
      \ functions below it on the stack, which is clearly not a situation which one\
      \ could save on disk and later restore.</dd>\n</dl>\n<dl>\n<dt>Unrealfiles&#160;</dt>\n\
      <dd>Unrealfiles are Unreal's native binary file format. Unrealfiles contain\
      \ an index, serialized dump of the objects in a particular Unreal package. Unrealfiles\
      \ are similar to DLL’s, in that they can contain references to other objects\
      \ stored in other Unrealfiles. This approach makes it possible to distribute\
      \ Unreal content in predefined \"packages\" on the Internet, in order to reduce\
      \ download time (by never downloading a particular package more than once).</dd>\n\
      </dl>\n<dl>\n<dt>Why UnrealScript does not support static variables&#160;</dt>\n\
      <dd>While C++ supports static (per class-process) variables for good reasons\
      \ true to the language's low-level roots, and Java support static variables\
      \ for reasons that appear to be not well thought out, such variables do not\
      \ have a place in UnrealScript because of ambiguities over their scope with\
      \ respect to serialization, derivation, and multiple levels: should static variables\
      \ have \"global\" semantics, meaning that all static variables in all active\
      \ Unreal levels have the same value? Should they be per package? Should they\
      \ be per level? If so, how are they serialized – with the class in its .u file,\
      \ or with the level in its .unr file? Are they unique per base class, or do\
      \ derived versions of classes have their own values of static variables? In\
      \ UnrealScript, we sidestep the problem by not defining static variables as\
      \ a language feature, and leaving it up to programmers to manage static-like\
      \ and global-like variables by creating classes to contain them and exposing\
      \ them in actual objects. If you want to have variables that are accessible\
      \ per-level, you can create a new class to contain those variables and assure\
      \ they are serialized with the level. This way, there is no ambiguity. For examples\
      \ of classes that serve this kind of purpose, see LevelInfo and GameInfo.</dd>\n\
      </dl>\n<table>\n<tr>\n<td>\n<h4><span class=\"mw-headline\" id=\"Comments\"\
      >Comments</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=5\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>MythOpus:</b> Tim says that varibles can't be declared\
      \ as static... Is this true now in the newer versions of the engine (I swear\
      \ I saw a static variable somewhere through my source wanderings). I don't think\
      \ I understand exactly what 'static' entails, but what about variables that\
      \ are declared in static functions?</p>\n<p><b>Dante:</b> Static pretty much\
      \ says that you can access a variable/call a mehod without having an instance\
      \ of the class. Variables declared in a static method are not accessible from\
      \ outside the method.</p>\n<p><br /></p>\n</td>\n</tr>\n</table>\n<h3><span\
      \ class=\"mw-headline\" id=\"UnrealScript_Programming_Strategy\">UnrealScript\
      \ Programming Strategy</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues?section=6\"\
      \ title=\"Edit section: UnrealScript Programming Strategy\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Here I want to cover a few\
      \ topics on how to write UnrealScript code effectively, and take advantage of\
      \ UnrealScript's strengths while avoiding the pitfalls.</p>\n<ul>\n<li>UnrealScript\
      \ is a slow language compared to C/C++. A typical C++ program runs at about\
      \ 50 million base language instructions per second, while UnrealScript runs\
      \ at about 2.5 million - a 20X performance hit. The programming philosophy behind\
      \ all of our own script writing is this: Write scripts that are almost always\
      \ idle. In other words, use UnrealScript only to handle the \"interesting\"\
      \ events that you want to customize, not the root tasks, like basic movement,\
      \ which Unreal's physics code can handle for you. For example, when writing\
      \ a projectile script, you typically write a HitWall(), Bounce(), and Touch()\
      \ function describing what to do when key events happen. Thus 95% of the time,\
      \ your projectile script isn’t executing any code, and is just waiting for the\
      \ physics code to notify it of an event. This is inherently very efficient.\
      \ In our typical level, even though UnrealScript is comparably much slower than\
      \ C++, UnrealScript execution time averages 5-10% of CPU time.</li>\n</ul>\n\
      <ul>\n<li>Exploit latent functions (like FinishAnim and Sleep) as much as possible.\
      \ By basing the flow of your script execution on them, you are creating animation-driven\
      \ or time-driven code, which is fairy efficient in UnrealScript.</li>\n</ul>\n\
      <ul>\n<li>Keep an eye on the Unreal log while you're testing your scripts. The\
      \ UnrealScript runtime often generates useful warnings in the log that notify\
      \ you of nonfatal problems that are occuring.</li>\n</ul>\n<ul>\n<li>Be wary\
      \ of code that can cause infinite recursion. For example, the \"Move\" command\
      \ moves the actor and calls your Bump() function if you hit something. Therefore,\
      \ if you use a Move command within a Bump function, you run the risk of recursing\
      \ forever. Be careful. Infinite recursion and infinite looping are the two error\
      \ conditions which UnrealScript doesn’t handle gracefully.</li>\n</ul>\n<ul>\n\
      <li>Spawning and destroying actors are fairly expensive operations on the server\
      \ side, and are even more expensive in network games, because spawns and destroys\
      \ take up network bandwidth. Use them reasonably, and regard actors as \"heavy\
      \ weight\" objects. For example, do not try to create a particle system by spawning\
      \ 100 unique actors and sending them off on different trajectories using the\
      \ physics code. That will be sloooow.</li>\n</ul>\n<ul>\n<li>Exploit UnrealScript's\
      \ object-oriented capabilities as much as possible. Creating new functionality\
      \ by overriding existing functions and states leads to clean code that is easy\
      \ to modify and easy to integrate with other peoples' work. Avoid using traditional\
      \ C techniques, like doing a switch() statement based on the class of an actor\
      \ or the state, because code like this tends to break as you add new classes\
      \ and modify things.</li>\n</ul>\n<hr />\n<p>Prev Page: <a href=\"/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features\"\
      \ title=\"Legacy:UnrealScript Language Reference/Advanced Language Features\"\
      >Legacy:UnrealScript Language Reference/Advanced Language Features</a> – <b>Section\
      \ 9 of 9</b> – End of Document</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.045 seconds\nReal time usage: 0.047 seconds\nPreprocessor visited node count:\
      \ 38/1000000\nPreprocessor generated node count: 103/1000000\nPost‐expand include\
      \ size: 325/2097152 bytes\nTemplate argument size: 96/2097152 bytes\nHighest\
      \ expansion depth: 3/40\nExpensive parser function count: 0/100\n-->\n\n<!--\
      \ \nTransclusion expansion time report (%,ms,calls,template)\n100.00%    5.287\
      \      1 - -total\n100.00%    5.287      1 - Template:Innerbox\n-->\n\n<!--\
      \ Saved in parser cache with key wiki:pcache:idhash:3282-0!*!0!!en!*!* and timestamp\
      \ 20221118160431 and revision id 8499\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Advanced Language Features"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Advanced Technical Issues"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 591
    anchor: "Advanced_Technical_Issues"
  - toclevel: 2
    level: "3"
    line: "UnrealScript Binary Compatibility Issues"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 623
    anchor: "UnrealScript_Binary_Compatibility_Issues"
  - toclevel: 2
    level: "3"
    line: "Technical Notes"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 1587
    anchor: "Technical_Notes"
  - toclevel: 3
    level: "4"
    line: "Comments"
    number: "2.2.1"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 6439
    anchor: "Comments"
  - toclevel: 2
    level: "3"
    line: "UnrealScript Programming Strategy"
    number: "2.3"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues"
    byteoffset: 6988
    anchor: "UnrealScript_Programming_Strategy"
  displaytitle: "Legacy:UnrealScript Language Reference/Advanced Technical Issues"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Advanced Technical Issues ==\n\n\
      ===UnrealScript Binary Compatibility Issues ===\n\nUnrealScript is designed\
      \ so that classes in package files may evolve over time without breaking binary\
      \ compatibility.&nbsp; Here, binary compatibility means \"dependent binary files\
      \ may be loaded and linked without error\"; whether your modified code functions\
      \ as designed is a separate issue.\n\nSpecifically, the kinds of modifications\
      \ when may be made safely are as follows: \n\n*The .uc script files in a package\
      \ may be recompiled without breaking binary compatibility.\n*Adding new classes\
      \ to a package.\n*Adding new functions to a class.\n*Adding new states to a\
      \ class.\n*Adding new variables to a class.\n*Removing private variables from\
      \ a class.\n\nOther transformations are generally unsafe, including (but not\
      \ limited to): \n*Adding new members to a struct. \n*Removing a class from a\
      \ package. \n*Changing the type of any variable, function parameter, or return\
      \ value. \n*Changing the number of parameters in a function.\n\n===Technical\
      \ Notes ===\n\n; Garbage collection : All objects and actors in Unreal are garbage-collected\
      \ using a tree-following garbage collector similar to that of the Java VM. The\
      \ Unreal garbage collector uses the UObject class’s serialization functionality\
      \ to recursively figure out which other objects are referenced by each active\
      \ object. As a result, object need not be explicitly deleted, because the garbage\
      \ collector will eventually hunt them down when they become unreferenced. This\
      \ approach has the side-effect of latent deletion of unreferenced objects; however\
      \ it is far more efficient than reference counting in the case of infrequent\
      \ deletion.\n\n; Unreal COM integration : Unreal's base UObject class derives\
      \ from IUnknown in anticipation of making Unreal interoperable with the Component\
      \ Object Model without requiring binary changes to objects. However, Unreal\
      \ is not COM-aware at the moment and the benefits of integrating Unreal with\
      \ COM are not yet clear, so this project is on indefinite hold.\n\n; UnrealScript\
      \ is bytecode based : UnrealScript code is compiled into a series of bytecodes\
      \ similar to p-code or the Java bytecodes. This makes UnrealScript platform-neutral;\
      \ thus porting the client and server components of Unreal to other platforms,\
      \ i.e. the Macintosh or Unix, is straightforward, and all versions can interoperate\
      \ easily by executing the same scripts.\n\n; Unreal as a Virtual Machine : The\
      \ Unreal engine can be regarded as a virtual machine for 3D gaming in the same\
      \ way that the Java language and the built-in Java class hierarchy define a\
      \ virtual machine for Web page scripting. The Unreal virtual machine is inherently\
      \ portable (due to splitting out all platform-dependent code in separate modules)\
      \ and expandable (due to the expandable class hierarchy). However, at this time,\
      \ there are no plans to document the Unreal VM to the extent necessary for others\
      \ to create independent but compatible implementations.\n\n; The UnrealScript\
      \ compiler is two-pass : Unlike C++, UnrealScript is compiled in two distinct\
      \ passes. In the first pass, variable, state and function definitions are parsed\
      \ and remembered. In the second pass, the script code is compiled to byte codes.\
      \ This enables complex script hierarchies with circular dependencies to be completely\
      \ compiled and linked in two passes, without a separate link phase.\n\n; Persistent\
      \ actor state : It is important to note that in Unreal, because the user can\
      \ save the game at any time, the state of all actors, including their script\
      \ execution state, can be saved at any time where all actors are at their lowest\
      \ possible stack level. This persistence requirement is the reason behind the\
      \ limitation that latent functions may only be called from state code: state\
      \ code executes at the lowest possible stack level, and thus can be serialized\
      \ easily. Function code may exist at any stack level, and could have (for example)\
      \ C++ native functions below it on the stack, which is clearly not a situation\
      \ which one could save on disk and later restore.\n\n; Unrealfiles : Unrealfiles\
      \ are Unreal's native binary file format. Unrealfiles contain an index, serialized\
      \ dump of the objects in a particular Unreal package. Unrealfiles are similar\
      \ to DLL’s, in that they can contain references to other objects stored in other\
      \ Unrealfiles. This approach makes it possible to distribute Unreal content\
      \ in predefined \"packages\" on the Internet, in order to reduce download time\
      \ (by never downloading a particular package more than once).\n\n; Why UnrealScript\
      \ does not support static variables : While C++ supports static (per class-process)\
      \ variables for good reasons true to the language's low-level roots, and Java\
      \ support static variables for reasons that appear to be not well thought out,\
      \ such variables do not have a place in UnrealScript because of ambiguities\
      \ over their scope with respect to serialization, derivation, and multiple levels:\
      \ should static variables have \"global\" semantics, meaning that all static\
      \ variables in all active Unreal levels have the same value? Should they be\
      \ per package? Should they be per level? If so, how are they serialized &ndash;\
      \ with the class in its .u file, or with the level in its .unr file? Are they\
      \ unique per base class, or do derived versions of classes have their own values\
      \ of static variables? In UnrealScript, we sidestep the problem by not defining\
      \ static variables as a language feature, and leaving it up to programmers to\
      \ manage static-like and global-like variables by creating classes to contain\
      \ them and exposing them in actual objects. If you want to have variables that\
      \ are accessible per-level, you can create a new class to contain those variables\
      \ and assure they are serialized with the level. This way, there is no ambiguity.\
      \ For examples of classes that serve this kind of purpose, see LevelInfo and\
      \ GameInfo.\n\n{|\n\n|-\n|\n====Comments====\n\n'''MythOpus:''' Tim says that\
      \ varibles can't be declared as static... Is this true now in the newer versions\
      \ of the engine (I swear I saw a static variable somewhere through my source\
      \ wanderings).  I don't think I understand exactly what 'static' entails, but\
      \ what about variables that are declared in static functions?\n\n'''Dante:'''\
      \ Static pretty much says that you can access a variable/call a mehod without\
      \ having an instance of the class. Variables declared in a static method are\
      \ not accessible from outside the method.\n\n\n|}\n\n===UnrealScript Programming\
      \ Strategy ===\n\nHere I want to cover a few topics on how to write UnrealScript\
      \ code effectively, and take advantage of UnrealScript's strengths while avoiding\
      \ the pitfalls.\n\n* UnrealScript is a slow language compared to C/C++. A typical\
      \ C++ program runs at about 50 million base language instructions per second,\
      \ while UnrealScript runs at about 2.5 million - a 20X performance hit. The\
      \ programming philosophy behind all of our own script writing is this: Write\
      \ scripts that are almost always idle. In other words, use UnrealScript only\
      \ to handle the \"interesting\" events that you want to customize, not the root\
      \ tasks, like basic movement, which Unreal's physics code can handle for you.\
      \ For example, when writing a projectile script, you typically write a HitWall(),\
      \ Bounce(), and Touch() function describing what to do when key events happen.\
      \ Thus 95% of the time, your projectile script isn’t executing any code, and\
      \ is just waiting for the physics code to notify it of an event. This is inherently\
      \ very efficient. In our typical level, even though UnrealScript is comparably\
      \ much slower than C++, UnrealScript execution time averages 5-10% of CPU time.\n\
      \n* Exploit latent functions (like FinishAnim and Sleep) as much as possible.\
      \ By basing the flow of your script execution on them, you are creating animation-driven\
      \ or time-driven code, which is fairy efficient in UnrealScript. \n\n* Keep\
      \ an eye on the Unreal log while you're testing your scripts. The UnrealScript\
      \ runtime often generates useful warnings in the log that notify you of nonfatal\
      \ problems that are occuring.\n\n* Be wary of code that can cause infinite recursion.\
      \ For example, the \"Move\" command moves the actor and calls your Bump() function\
      \ if you hit something. Therefore, if you use a Move command within a Bump function,\
      \ you run the risk of recursing forever. Be careful. Infinite recursion and\
      \ infinite looping are the two error conditions which UnrealScript doesn’t handle\
      \ gracefully.\n\n* Spawning and destroying actors are fairly expensive operations\
      \ on the server side, and are even more expensive in network games, because\
      \ spawns and destroys take up network bandwidth. Use them reasonably, and regard\
      \ actors as \"heavy weight\" objects. For example, do not try to create a particle\
      \ system by spawning 100 unique actors and sending them off on different trajectories\
      \ using the physics code. That will be sloooow.\n\n* Exploit UnrealScript's\
      \ object-oriented capabilities as much as possible. Creating new functionality\
      \ by overriding existing functions and states leads to clean code that is easy\
      \ to modify and easy to integrate with other peoples' work. Avoid using traditional\
      \ C techniques, like doing a switch() statement based on the class of an actor\
      \ or the state, because code like this tends to break as you add new classes\
      \ and modify things.\n\n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Advanced\
      \ Language Features]] &ndash; '''Section 9 of 9''' &ndash; End of Document"
  properties: []
  revId: 8499
name: "Legacy:UnrealScript Language Reference/Advanced Technical Issues"
revision:
  revid: 8499
  parentid: 8500
  user: "Wormbo"
  timestamp: 1150840052.000000000
  comment: "added the legal stuff about the origin of the document"
timestamp: 1668787319.423891000
