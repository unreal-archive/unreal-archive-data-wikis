---
parse:
  title: "Legacy:UnrealScript Language Reference/Advanced Language Features"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Advanced_Language_Features\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Advanced Language Features</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-3\"><a href=\"#ForEach_And_Iterator_Functions\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">ForEach And Iterator Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Function_Calling_Specifiers\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Function Calling\
      \ Specifiers</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Default_Values_of_Variables\"><span class=\"tocnumber\">2.3</span> <span class=\"\
      toctext\">Default Values of Variables</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-6\"><a href=\"#Accessing_Default_Values_of_Variables\"><span class=\"\
      tocnumber\">2.3.1</span> <span class=\"toctext\">Accessing Default Values of\
      \ Variables</span></a></li>\n<li class=\"toclevel-3 tocsection-7\"><a href=\"\
      #Accessing_Default_Values_of_Variables_in_a_Variable_Class\"><span class=\"\
      tocnumber\">2.3.2</span> <span class=\"toctext\">Accessing Default Values of\
      \ Variables in a Variable Class</span></a></li>\n<li class=\"toclevel-3 tocsection-8\"\
      ><a href=\"#Accessing_Static_Functions_in_a_Variable_Class\"><span class=\"\
      tocnumber\">2.3.3</span> <span class=\"toctext\">Accessing Static Functions\
      \ in a Variable Class</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2\
      \ tocsection-9\"><a href=\"#Dynamic_Arrays\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">Dynamic Arrays</span></a></li>\n</ul>\n</li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_Language_Reference\"\
      >UnrealScript Language Reference</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Advanced_Language_Features\"\
      >Advanced Language Features</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=2\"\
      \ title=\"Edit section: Advanced Language Features\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"mw-headline\"\
      \ id=\"ForEach_And_Iterator_Functions\">ForEach And Iterator Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=3\"\
      \ title=\"Edit section: ForEach And Iterator Functions\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript's \"foreach\"\
      \ command makes it easy to deal with large groups of actors, for example all\
      \ of the actors in a level, or all of the actors within a certain distance of\
      \ another actor. \"foreach\" works in conjunction with a special kind of function\
      \ called an \"iterator\" function whose purpose is to iterate through a list\
      \ of actors.</p>\n<p>Here is a simple example of foreach:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Display a list of all lights in\
      \ the level.</span>\n<span class=\"kw1\">function</span> Something<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw1\">local</span> <span class=\"kw9\">Actor</span> A;\n \n\t\
      <span class=\"co1\">// Go through all actors in the level.</span>\n\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span> <span class=\"st0\">\"Lights:\"\
      </span> <span class=\"br0\">)</span>;\n\t<span class=\"kw2\">foreach</span>\
      \ <span class=\"kw2\">AllActors</span><span class=\"br0\">(</span> <span class=\"\
      kw1\">class</span> <span class=\"st0\">'Actor'</span>, A <span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> A.<span class=\"me0\">LightType</span> <span class=\"\
      sy0\">!=</span> LT_None <span class=\"br0\">)</span>\n\t\t\t<span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span> A <span class=\"br0\">)</span>;\n\t\
      <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>The first parameter in all \"foreach\" commands is a constant class, which\
      \ specifies what kinds of actors to search. You can use this to limit the search\
      \ to, for example, all Pawns only.</p>\n<p>The second parameter in all \"foreach\"\
      \ commands is a variable which is assigned an actor on each iteration through\
      \ the \"foreach\" loop.</p>\n<p>Here are all of the iterator functions which\
      \ work with \"foreach\".</p>\n<dl>\n<dt>AllActors ( class BaseClass, out actor\
      \ Actor, optional name MatchTag )</dt>\n<dd>Iterates through all actors in the\
      \ level. If you specify an optional MatchTag, only includes actors which have\
      \ a \"Tag\" variable matching the tag you specified.</dd>\n</dl>\n<dl>\n<dt>ChildActors(\
      \ class BaseClass, out actor Actor )</dt>\n<dd>Iterates through all actors owned\
      \ by this actor.</dd>\n</dl>\n<dl>\n<dt>BasedActors( class BaseClass, out actor\
      \ Actor )</dt>\n<dd>Iterates throgh all actors which are standing on this actor.</dd>\n\
      </dl>\n<dl>\n<dt>TouchingActors( class BaseClass, out actor Actor )</dt>\n<dd>Iterates\
      \ through all actors which are touching (interpenetrating) this actor.</dd>\n\
      </dl>\n<dl>\n<dt>TraceActors( class BaseClass, out actor Actor, out vector HitLoc,\
      \ out vector HitNorm, vector End, optional vector Start, optional vector Extent\
      \ )</dt>\n<dd>Iterates through all actors which touch a line traced from the\
      \ Start point to the End point, using a box of collision extent Extent. On each\
      \ iteration, HitLoc is set to the hit location, and HitNorm is set to an outward-pointing\
      \ hit normal.</dd>\n</dl>\n<dl>\n<dt>RadiusActors( class BaseClass, out actor\
      \ Actor, float Radius, optional vector Loc )</dt>\n<dd>Iterates through all\
      \ actors within a specified radius of the specified location (or if none is\
      \ specified, this actor?s location).</dd>\n</dl>\n<dl>\n<dt>VisibleActors( class\
      \ BaseClass, out actor Actor, optional float Radius, optional vector Loc )</dt>\n\
      <dd>Iterates through a list of all actors who are visible to the specified location\
      \ (or if no location is specified, this actor?s location).</dd>\n</dl>\n<table>\n\
      <tr>\n<td><i>more on this topic in the Wiki: <a href=\"/Legacy:Iterator\" title=\"\
      Legacy:Iterator\">Iterator</a></i></td>\n</tr>\n</table>\n<h3><span class=\"\
      mw-headline\" id=\"Function_Calling_Specifiers\">Function Calling Specifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=4\"\
      \ title=\"Edit section: Function Calling Specifiers\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>In complex programming situations,\
      \ you will often need to call a specific version of a function, rather than\
      \ the one that?s in the current scope. To deal with these cases, UnrealScript\
      \ provides the following keywords:</p>\n<dl>\n<dt>Global</dt>\n<dd>Calls the\
      \ most-derived global (non-state) version of the function.</dd>\n</dl>\n<dl>\n\
      <dt>Super</dt>\n<dd>Calls the corresponding version of the function in the parent\
      \ class. The function called may either be a state or non-state function depending\
      \ on context.</dd>\n</dl>\n<dl>\n<dt>Super(classname)</dt>\n<dd>Calls the corresponding\
      \ version of the function residing in (or above) the specified class. The function\
      \ called may either be a state or non-state function depending on context.</dd>\n\
      </dl>\n<p>It is not valid to combine multiple calling specifiers (i.e. Super(Actor).Global.Touch).</p>\n\
      <p>Here are some examples of calling specifiers:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> MyClass <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">Pawn</span>;\n \n<span class=\"kw1\">function</span>\
      \ MyExample<span class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw6\">Super</span><span class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">)</span>.<span class=\"kw4\">Touch</span><span class=\"br0\"\
      >(</span> Other <span class=\"br0\">)</span>;\n\tGlobal.<span class=\"kw4\"\
      >Touch</span><span class=\"br0\">(</span> Other <span class=\"br0\">)</span>;\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">Touch</span><span class=\"\
      br0\">(</span> Other <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>As an additional example, the BeginPlay() function is called when\
      \ an actor is about to enter into gameplay. The BeginPlay() function is implemented\
      \ in the Actor class and it contains some important functionality that needs\
      \ to be executed. Now, say you want to override BeginPlay() in your new class\
      \ MyClass, to add some new functionality. To do that safely, you need to call\
      \ the version of BeginPlay() in the parent class:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> MyClass <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">Pawn</span>;\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">BeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"co1\">// Call\
      \ the version of BeginPlay in the parent class (important).</span>\n\t<span\
      \ class=\"kw6\">Super</span>.<span class=\"kw4\">BeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\">// Now\
      \ do custom BeginPlay stuff.</span>\n\t<span class=\"co1\">//...</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<table>\n<tr>\n<td><i>more on\
      \ this topic in the Wiki: <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">Function Syntax</a> and <a href=\"/Legacy:Special_UnrealScript_Keywords\"\
      \ title=\"Legacy:Special UnrealScript Keywords\">Special UnrealScript Keywords</a></i></td>\n\
      </tr>\n</table>\n<h3><span class=\"mw-headline\" id=\"Default_Values_of_Variables\"\
      >Default Values of Variables</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=5\"\
      \ title=\"Edit section: Default Values of Variables\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<h4><span class=\"mw-headline\"\
      \ id=\"Accessing_Default_Values_of_Variables\">Accessing Default Values of Variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=6\"\
      \ title=\"Edit section: Accessing Default Values of Variables\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>UnrealEd enables\
      \ level designers to edit the \"default\" variables of an object's class. When\
      \ a new actor is spawned of the class, all of its variables are initialized\
      \ to those defaults. Sometimes, it?s useful to manually reset a variable to\
      \ its default value. For example, when the player drops an inventory item, the\
      \ inventory code needs to reset some of the actor?s values to its defaults.\
      \ In UnrealScript, you can access the default variables of a class with the\
      \ \"Default.\" keyword. For example:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"kw5\">float</span> Health, Stamina;\n<span class=\"\
      co1\">//...</span>\n \n<span class=\"co1\">// Reset some variables to their\
      \ defaults.</span>\n<span class=\"kw1\">function</span> ResetToDefaults<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"co1\">// Reset health, and stamina.</span>\n\tHealth <span class=\"\
      sy0\">=</span> <span class=\"kw1\">Default</span>.<span class=\"me0\">Health</span>;\n\
      \tStamina <span class=\"sy0\">=</span> <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">Stamina</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Accessing_Default_Values_of_Variables_in_a_Variable_Class\"\
      >Accessing Default Values of Variables in a Variable Class</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=7\"\
      \ title=\"Edit section: Accessing Default Values of Variables in a Variable\
      \ Class\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>If you have a class reference (a variable of \"class\" or \"class&lt;classlimiter&gt;\"\
      \ type), you can access the default properties of the class it references, without\
      \ having an object of that class. This syntax works with any expression that\
      \ evaluates to class type.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw1\">class</span> C;\n<span class=\"kw1\">var</span>\
      \ class<span class=\"sy0\">&lt;</span>Pawn<span class=\"sy0\">&gt;</span> PC;\n\
      Health <span class=\"sy0\">=</span> <span class=\"kw1\">class</span><span class=\"\
      st0\">'Spotlight'</span>.<span class=\"kw1\">default</span>.<span class=\"me0\"\
      >LightBrightness</span>; <span class=\"co1\">// Access the default value of\
      \ LightBrightness in the Spotlight class. </span>\nHealth <span class=\"sy0\"\
      >=</span> PC.<span class=\"kw1\">default</span>.<span class=\"me0\">Health</span>;\
      \ <span class=\"co1\">// Access the default value of Health in a variable class\
      \ identified by PC.</span>\nHealth <span class=\"sy0\">=</span> class<span class=\"\
      sy0\">&lt;</span>Pawn<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>C<span\
      \ class=\"br0\">)</span>.<span class=\"kw1\">default</span>.<span class=\"me0\"\
      >Health</span>; <span class=\"co1\">// Access the default value of Health in\
      \ a casted class expression.</span></pre></div>\n</div>\n<h4><span class=\"\
      mw-headline\" id=\"Accessing_Static_Functions_in_a_Variable_Class\">Accessing\
      \ Static Functions in a Variable Class</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=8\"\
      \ title=\"Edit section: Accessing Static Functions in a Variable Class\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Static functions\
      \ in a variable class may be called using the following syntax.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw1\">class</span>\
      \ C;\n<span class=\"kw1\">var</span> class<span class=\"sy0\">&lt;</span>Pawn<span\
      \ class=\"sy0\">&gt;</span> PC;\n<span class=\"kw1\">class</span><span class=\"\
      st0\">'SkaarjTrooper'</span>.<span class=\"kw1\">static</span>.<span class=\"\
      me0\">SomeFunction</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// Call a static function in a specific class.</span>\n\
      PC.<span class=\"kw1\">static</span>.<span class=\"me0\">SomeFunction</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ Call a static function in a variable class.</span>\nclass<span class=\"sy0\"\
      >&lt;</span>Pawn<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>C<span\
      \ class=\"br0\">)</span>.<span class=\"kw1\">static</span>.<span class=\"me0\"\
      >SomeFunction</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// Call a static function in a casted class expression.</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Dynamic_Arrays\">Dynamic Arrays</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features?section=9\"\
      \ title=\"Edit section: Dynamic Arrays\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Previously, we covered Arrays, which were static.\
      \ What that means is that the size (how many elements are in the array) is set\
      \ at compile time and cannot be changed. Dynamic Arrays and Static Arrays share\
      \ the following common characteristics:</p>\n<dl>\n<dt>Constant seek time&#160;</dt>\n\
      <dd>The time code spends accessing any given element of the array is the same,\
      \ regardless of how many elements are in the array</dd>\n<dt>Unrestricted element\
      \ type&#160;</dt>\n<dd>You can have an array of anything (other than bools)\
      \ – ints, vectors, Actors, etc.</dd>\n<dt>Access behavior&#160;</dt>\n<dd>You\
      \ can access any element with an index into the array, and conversely, attempting\
      \ to access an element at an index that is outside the bounds of the array will\
      \ throw an accessed none.</dd>\n</dl>\n<p>Dynamic Arrays provide a way of having\
      \ Static Array functionality with the ability to change the number of elements\
      \ during run-time, in order to accommodate changing needs. In order use Dynamic\
      \ Arrays, we need to know a few things.</p>\n<p>The first is variable declaration.\
      \ In order to declare a dynamic array, the syntax is <code>array&lt;VARIABLE_TYPE&gt;\
      \ VARIABLE_NAME</code> which is preceded by the appropriate identifiers (var\
      \ or local, for example). An example would be <code>var array&lt;int&gt; IntList</code>.\
      \ When script starts, IntList will start with 0 elements. There are methods\
      \ supported by Dynamic Arrays that allow us to add elements to the array, take\
      \ elements out, and increase or decrease the length of the array arbitrarily.\
      \ The syntax for calling these methods is (using our IntList example) <code>IntList.MethodName()</code>.\
      \ The following is a breakdown of the supported methods and a brief explanation\
      \ of their parameters:</p>\n<dl>\n<dt>Insert(int index_to_insert_at, int how_many_elements_to_insert)&#160;</dt>\n\
      <dd>This allows us to tell the array to create more elements and create them\
      \ starting at a specific location in the array. Inserting 5 elements at index\
      \ 3 will shift up (in index value) all elements in the array starting at index\
      \ 3 and up (shifting them up by the number of elements to insert).</dd>\n<dt>Remove(int\
      \ index_to_begin_removing_at, int how_many_elements_to_remove)&#160;</dt>\n\
      <dd>This allows us to remove a group of elements from the array starting at\
      \ any valid index within the array. Note that any indexes that are higher than\
      \ the range to be removed will have their index values changed, keep this in\
      \ mind if you store index values into dynamic arrays.</dd>\n</dl>\n<p>Dynamic\
      \ Arrays also have a variable called \"Length\", which is the current length\
      \ (number of elements) of the dynamic array. To access Length, using our example\
      \ array, we would say <code>IntList.Length</code>. We can not only read the\
      \ Length variable, but we can also directly set it, allowing us to modify the\
      \ number of elements in the array. When you modify the Length variable directly,\
      \ all changes in array length happen at the 'end' of the array. For example,\
      \ if we set <code>IntList.Length = 5</code>, and then we set <code>IntList.Length\
      \ = 10</code>, the extra 5 elements we just added were added to the end of the\
      \ array, maintaining our original 5 elements and their values. If we decreased\
      \ the Length, the elements would be taken off the end as well. Note that when\
      \ you add elements to the array, either by Insert() or by increasing Length,\
      \ the elements are initialized to the variable type's default value (0 for ints,\
      \ None for class references, etc). It is also noteworthy to know that you can\
      \ increase the length of a dynamic array by setting an element index that is\
      \ greater than the array's current Length value. This will extend the array\
      \ just as if you had set Length to the larger value.</p>\n<p>A word of caution\
      \ – the Length member of a dynamic array should never be incremented/decremented\
      \ by '++', '–', '+=', or '-=', nor should you pass Length to a function as an\
      \ out parameter (where the function can change the value of it). Doing these\
      \ things will result in memory leaks and crashes due to Length not being accurate\
      \ any more; only setting the Length via the '=' operator (and setting an element\
      \ at an index larger than Length) modifies the actual length of the dynamic\
      \ array properly.</p>\n<p>A final note – dynamic arrays are not replicated.\
      \ You could get around this by having a function that replicates and has two\
      \ arguments, an index into the dynamic array and the value to store there. However,\
      \ you would also have to consider consequences of elements not being the same\
      \ within a space of a tick on client and server.</p>\n<table>\n<tr>\n<td><i>more\
      \ on this topic in the Wiki: <a href=\"/Legacy:Dynamic_Array\" title=\"Legacy:Dynamic\
      \ Array\">dynamic array</a></i></td>\n</tr>\n</table>\n<hr />\n<p>Prev Page:\
      \ <a href=\"/Legacy:UnrealScript_Language_Reference/Language_Functionality\"\
      \ title=\"Legacy:UnrealScript Language Reference/Language Functionality\">Legacy:UnrealScript\
      \ Language Reference/Language Functionality</a> – <b>Section 8 of 9</b> – Next\
      \ Page: <a href=\"/Legacy:UnrealScript_Language_Reference/Advanced_Technical_Issues\"\
      \ title=\"Legacy:UnrealScript Language Reference/Advanced Technical Issues\"\
      >Legacy:UnrealScript Language Reference/Advanced Technical Issues</a></p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.128 seconds\nReal time usage: 0.215\
      \ seconds\nPreprocessor visited node count: 106/1000000\nPreprocessor generated\
      \ node count: 251/1000000\nPost‐expand include size: 362/2097152 bytes\nTemplate\
      \ argument size: 96/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    5.754      1 - -total\n100.00%    5.754\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3281-0!*!0!!en!*!*\
      \ and timestamp 20221118154844 and revision id 44840\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Advanced Technical Issues"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Language Functionality"
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Array"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Special UnrealScript Keywords"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Advanced Language Features"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 591
    anchor: "Advanced_Language_Features"
  - toclevel: 2
    level: "3"
    line: "ForEach And Iterator Functions"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 624
    anchor: "ForEach_And_Iterator_Functions"
  - toclevel: 2
    level: "3"
    line: "Function Calling Specifiers"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 3184
    anchor: "Function_Calling_Specifiers"
  - toclevel: 2
    level: "3"
    line: "Default Values of Variables"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 4977
    anchor: "Default_Values_of_Variables"
  - toclevel: 3
    level: "4"
    line: "Accessing Default Values of Variables"
    number: "2.3.1"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 5013
    anchor: "Accessing_Default_Values_of_Variables"
  - toclevel: 3
    level: "4"
    line: "Accessing Default Values of Variables in a Variable Class"
    number: "2.3.2"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 5777
    anchor: "Accessing_Default_Values_of_Variables_in_a_Variable_Class"
  - toclevel: 3
    level: "4"
    line: "Accessing Static Functions in a Variable Class"
    number: "2.3.3"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 6495
    anchor: "Accessing_Static_Functions_in_a_Variable_Class"
  - toclevel: 2
    level: "3"
    line: "Dynamic Arrays"
    number: "2.4"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Advanced_Language_Features"
    byteoffset: 6945
    anchor: "Dynamic_Arrays"
  displaytitle: "Legacy:UnrealScript Language Reference/Advanced Language Features"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Advanced Language Features ==\n\n\
      ===ForEach And Iterator Functions ===\n\nUnrealScript's \"foreach\" command\
      \ makes it easy to deal with large groups of actors, for example all of the\
      \ actors in a level, or all of the actors within a certain distance of another\
      \ actor. \"foreach\" works in conjunction with a special kind of function called\
      \ an \"iterator\" function whose purpose is to iterate through a list of actors.\n\
      \nHere is a simple example of foreach:\n\n<uscript>\n// Display a list of all\
      \ lights in the level.\nfunction Something()\n{\n\tlocal Actor A;\n\n\t// Go\
      \ through all actors in the level.\n\tlog( \"Lights:\" );\n\tforeach AllActors(\
      \ class 'Actor', A )\n\t{\n\t\tif( A.LightType != LT_None )\n\t\t\tlog( A );\n\
      \t}\n}\n</uscript>\n\nThe first parameter in all \"foreach\" commands is a constant\
      \ class, which specifies what kinds of actors to search. You can use this to\
      \ limit the search to, for example, all Pawns only.\n\nThe second parameter\
      \ in all \"foreach\" commands is a variable which is assigned an actor on each\
      \ iteration through the \"foreach\" loop.\n\nHere are all of the iterator functions\
      \ which work with \"foreach\". \n\n;AllActors ( class BaseClass, out actor Actor,\
      \ optional name MatchTag ): Iterates through all actors in the level. If you\
      \ specify an optional MatchTag, only includes actors which have a \"Tag\" variable\
      \ matching the tag you specified.\n\n;ChildActors( class BaseClass, out actor\
      \ Actor ): Iterates through all actors owned by this actor.\n\n;BasedActors(\
      \ class BaseClass, out actor Actor ): Iterates throgh all actors which are standing\
      \ on this actor.\n\n;TouchingActors( class BaseClass, out actor Actor ): Iterates\
      \ through all actors which are touching (interpenetrating) this actor.\n\n;TraceActors(\
      \ class BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector\
      \ End, optional vector Start, optional vector Extent ): Iterates through all\
      \ actors which touch a line traced from the Start point to the End point, using\
      \ a box of collision extent Extent. On each iteration, HitLoc is set to the\
      \ hit location, and HitNorm is set to an outward-pointing hit normal.\n\n;RadiusActors(\
      \ class BaseClass, out actor Actor, float Radius, optional vector Loc ): Iterates\
      \ through all actors within a specified radius of the specified location (or\
      \ if none is specified, this actor?s location).\n\n;VisibleActors( class BaseClass,\
      \ out actor Actor, optional float Radius, optional vector Loc ): Iterates through\
      \ a list of all actors who are visible to the specified location (or if no location\
      \ is specified, this actor?s location).\n\n{|\n\n|-\n|''more on this topic in\
      \ the Wiki: [[Legacy:Iterator|Iterator]]'' \n|}\n\n===Function Calling Specifiers\
      \ ===\n\nIn complex programming situations, you will often need to call a specific\
      \ version of a function, rather than the one that?s in the current scope. To\
      \ deal with these cases, UnrealScript provides the following keywords:\n\n;Global:\
      \ Calls the most-derived global (non-state) version of the function.\n\n;Super:\
      \ Calls the corresponding version of the function in the parent class. The function\
      \ called may either be a state or non-state function depending on context.\n\
      \n;Super(classname): Calls the corresponding version of the function residing\
      \ in (or above) the specified class. The function called may either be a state\
      \ or non-state function depending on context.\n\nIt is not valid to combine\
      \ multiple calling specifiers (i.e. Super(Actor).Global.Touch).\n\nHere are\
      \ some examples of calling specifiers:\n\n<uscript>\nclass MyClass extends Pawn;\n\
      \nfunction MyExample( actor Other )\n{\n\tSuper(Pawn).Touch( Other );\n\tGlobal.Touch(\
      \ Other );\n\tSuper.Touch( Other );\n}\n</uscript>\n\nAs an additional example,\
      \ the BeginPlay() function is called when an actor is about to enter into gameplay.\
      \ The BeginPlay() function is implemented in the Actor class and it contains\
      \ some important functionality that needs to be executed. Now, say you want\
      \ to override BeginPlay() in your new class MyClass, to add some new functionality.\
      \ To do that safely, you need to call the version of BeginPlay() in the parent\
      \ class:\n\n<uscript>\nclass MyClass extends Pawn;\n\nfunction BeginPlay()\n\
      {\n\t// Call the version of BeginPlay in the parent class (important).\n\tSuper.BeginPlay();\n\
      \n\t// Now do custom BeginPlay stuff.\n\t//...\n}\n</uscript>\n\n{|\n\n|-\n\
      |''more on this topic in the Wiki: [[Legacy:Function Syntax|Function Syntax]]\
      \ and [[Legacy:Special UnrealScript Keywords|Special UnrealScript Keywords]]''\
      \ \n|}\n\n===Default Values of Variables ===\n\n====Accessing Default Values\
      \ of Variables ====\n\nUnrealEd enables level designers to edit the \"default\"\
      \ variables of an object's class. When a new actor is spawned of the class,\
      \ all of its variables are initialized to those defaults. Sometimes, it?s useful\
      \ to manually reset a variable to its default value. For example, when the player\
      \ drops an inventory item, the inventory code needs to reset some of the actor?s\
      \ values to its defaults. In UnrealScript, you can access the default variables\
      \ of a class with the \"Default.\" keyword. For example:\n\n<uscript>\nvar()\
      \ float Health, Stamina;\n//...\n\n// Reset some variables to their defaults.\n\
      function ResetToDefaults()\n{\n\t// Reset health, and stamina.\n\tHealth = Default.Health;\n\
      \tStamina = Default.Stamina;\n}\n</uscript>\n\n====Accessing Default Values\
      \ of Variables in a Variable Class ====\n\nIf you have a class reference (a\
      \ variable of \"class\" or \"class<classlimiter>\" type), you can access the\
      \ default properties of the class it references, without having an object of\
      \ that class. This syntax works with any expression that evaluates to class\
      \ type.\n\n<uscript>\nvar class C;\nvar class<Pawn> PC;\nHealth = class'Spotlight'.default.LightBrightness;\
      \ // Access the default value of LightBrightness in the Spotlight class. \n\
      Health = PC.default.Health; // Access the default value of Health in a variable\
      \ class identified by PC.\nHealth = class<Pawn>(C).default.Health; // Access\
      \ the default value of Health in a casted class expression.\n</uscript>\n\n\
      ====Accessing Static Functions in a Variable Class ====\n\nStatic functions\
      \ in a variable class may be called using the following syntax.\n\n<uscript>\n\
      var class C;\nvar class<Pawn> PC;\nclass'SkaarjTrooper'.static.SomeFunction();\
      \ // Call a static function in a specific class.\nPC.static.SomeFunction();\
      \ // Call a static function in a variable class.\nclass<Pawn>(C).static.SomeFunction();\
      \ // Call a static function in a casted class expression.\n</uscript>\n\n===Dynamic\
      \ Arrays===\n\nPreviously, we covered Arrays, which were static. What that means\
      \ is that the size (how many elements are in the array) is set at compile time\
      \ and cannot be changed. Dynamic Arrays and Static Arrays share the following\
      \ common characteristics:\n\n; Constant seek time : The time code spends accessing\
      \ any given element of the array is the same, regardless of how many elements\
      \ are in the array\n; Unrestricted element type : You can have an array of anything\
      \ (other than bools) &ndash; ints, vectors, Actors, etc.\n; Access behavior\
      \ : You can access any element with an index into the array, and conversely,\
      \ attempting to access an element at an index that is outside the bounds of\
      \ the array will throw an accessed none.\n\nDynamic Arrays provide a way of\
      \ having Static Array functionality with the ability to change the number of\
      \ elements during run-time, in order to accommodate changing needs. In order\
      \ use Dynamic Arrays, we need to know a few things.\n\nThe first is variable\
      \ declaration. In order to declare a dynamic array, the syntax is <code>array<VARIABLE_TYPE>\
      \ VARIABLE_NAME</code> which is preceded by the appropriate identifiers (var\
      \ or local, for example). An example would be <code>var array<int> IntList</code>.\
      \ When script starts, IntList will start with 0 elements. There are methods\
      \ supported by Dynamic Arrays that allow us to add elements to the array, take\
      \ elements out, and increase or decrease the length of the array arbitrarily.\
      \ The syntax for calling these methods is (using our IntList example) <code>IntList.MethodName()</code>.\
      \ The following is a breakdown of the supported methods and a brief explanation\
      \ of their parameters:\n\n; Insert(int index_to_insert_at, int how_many_elements_to_insert)\
      \ : This allows us to tell the array to create more elements and create them\
      \ starting at a specific location in the array. Inserting 5 elements at index\
      \ 3 will shift up (in index value) all elements in the array starting at index\
      \ 3 and up (shifting them up by the number of elements to insert).\n; Remove(int\
      \ index_to_begin_removing_at, int how_many_elements_to_remove) : This allows\
      \ us to remove a group of elements from the array starting at any valid index\
      \ within the array. Note that any indexes that are higher than the range to\
      \ be removed will have their index values changed, keep this in mind if you\
      \ store index values into dynamic arrays.\n\nDynamic Arrays also have a variable\
      \ called \"Length\", which is the current length (number of elements) of the\
      \ dynamic array. To access Length, using our example array, we would say <code>IntList.Length</code>.\
      \ We can not only read the Length variable, but we can also directly set it,\
      \ allowing us to modify the number of elements in the array. When you modify\
      \ the Length variable directly, all changes in array length happen at the 'end'\
      \ of the array. For example, if we set <code>IntList.Length = 5</code>, and\
      \ then we set <code>IntList.Length = 10</code>, the extra 5 elements we just\
      \ added were added to the end of the array, maintaining our original 5 elements\
      \ and their values. If we decreased the Length, the elements would be taken\
      \ off the end as well. Note that when you add elements to the array, either\
      \ by Insert() or by increasing Length, the elements are initialized to the variable\
      \ type's default value (0 for ints, None for class references, etc). It is also\
      \ noteworthy to know that you can increase the length of a dynamic array by\
      \ setting an element index that is greater than the array's current Length value.\
      \ This will extend the array just as if you had set Length to the larger value.\n\
      \nA word of caution &ndash; the Length member of a dynamic array should never\
      \ be incremented/decremented by '++', '&ndash;', '+=', or '-=', nor should you\
      \ pass Length to a function as an out parameter (where the function can change\
      \ the value of it). Doing these things will result in memory leaks and crashes\
      \ due to Length not being accurate any more; only setting the Length via the\
      \ '=' operator (and setting an element at an index larger than Length) modifies\
      \ the actual length of the dynamic array properly.\n\nA final note &ndash; dynamic\
      \ arrays are not replicated. You could get around this by having a function\
      \ that replicates and has two arguments, an index into the dynamic array and\
      \ the value to store there. However, you would also have to consider consequences\
      \ of elements not being the same within a space of a tick on client and server.\n\
      \n{|\n\n|-\n|''more on this topic in the Wiki: [[Legacy:Dynamic Array|dynamic\
      \ array]]'' \n|}\n\n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Language\
      \ Functionality]] &ndash; '''Section 8 of 9''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Advanced\
      \ Technical Issues]]"
  properties: []
  revId: 44840
name: "Legacy:UnrealScript Language Reference/Advanced Language Features"
revision:
  revid: 44840
  parentid: 8497
  user: "WGH"
  timestamp: 1326305838.000000000
  comment: "/* Dynamic Arrays */"
timestamp: 1668786447.984386000
