---
parse:
  title: "Legacy:UnrealScript Language Reference/Introduction"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Introduction\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Introduction</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Design_Goals_of_UnrealScript\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Design Goals of\
      \ UnrealScript</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Example_Program_Structure\"><span class=\"tocnumber\">2.2</span> <span class=\"\
      toctext\">Example Program Structure</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#The_Unreal_Virtual_Machine\"><span class=\"tocnumber\"\
      >2.3</span> <span class=\"toctext\">The Unreal Virtual Machine</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Class_Overview\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">Class Overview</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#The_Class_Declaration\"><span\
      \ class=\"tocnumber\">2.5</span> <span class=\"toctext\">The Class Declaration</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      UnrealScript_Language_Reference\">UnrealScript Language Reference</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=2\"\
      \ title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Design_Goals_of_UnrealScript\"\
      >Design Goals of UnrealScript</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=3\"\
      \ title=\"Edit section: Design Goals of UnrealScript\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript was created to\
      \ provide the development team and the third-party Unreal developers with a\
      \ powerful, built-in programming language that maps naturally onto the needs\
      \ and nuances of game programming.</p>\n<p>The major design goals of UnrealScript\
      \ are:</p>\n<ul>\n<li>To support the major concepts of time, state, properties,\
      \ and networking which traditional programming languages don't address. This\
      \ greatly simplifies UnrealScript code. The major complication in C/C++ based\
      \ AI and game logic programming lies in dealing with events that take a certain\
      \ amount of game time to complete, and with events which are dependent on aspects\
      \ of the object's state. In C/C++, this results in spaghetti-code that is hard\
      \ to write, comprehend, maintain, and debug. UnrealScript includes native support\
      \ for time, state, and network replication which greatly simplify game programming.</li>\n\
      </ul>\n<ul>\n<li>To provide Java-style programming simplicity, object-orientation,\
      \ and compile-time error checking. Much as Java brings a clean programming platform\
      \ to Web programmers, UnrealScript provides an equally clean, simple, and robust\
      \ programming language to 3D gaming. The major programming concepts which UnrealScript\
      \ derives from Java are:\n<ul>\n<li>a pointerless environment with automatic\
      \ garbage collection;</li>\n<li>a simple single-inheritance class graph;</li>\n\
      <li>strong compile-time type checking;</li>\n<li>a safe client-side execution\
      \ \"sandbox\";</li>\n<li>and the familiar look and feel of C/C++/Java code.</li>\n\
      </ul>\n</li>\n</ul>\n<ul>\n<li>To enable rich, high level programming in terms\
      \ of game objects and interactions rather than bits and pixels. Where design\
      \ tradeoffs had to be made in UnrealScript, I sacrificed execution speed for\
      \ development simplicity and power. After all, the low-level, performance-critical\
      \ code in Unreal is written in C/C++ where the performance gain outweighs the\
      \ added complexity. UnrealScript operates at a level above that, at the object\
      \ and interaction level, rather than the bits and pixels level.</li>\n</ul>\n\
      <p>During the early development of UnrealScript, several major different programming\
      \ paradigms were explored and discarded before arriving at the current incarnation.\
      \ First, I researched using the Sun and Microsoft Java VM's for Windows as the\
      \ basis of Unreal's scripting language. It turned out that Java offered no programming\
      \ benefits over C/C++ in the Unreal context, added frustrating restrictions\
      \ due to the lack of needed language features (such as operator overloading),\
      \ and turned out to be unfathomably slow due to both the overhead of the VM\
      \ task switch and the inefficiencies of the Java garbage collector in the case\
      \ of a large object graph. Second, I based an early implementation of UnrealScript\
      \ on a Visual Basic variant, which worked fine, but was less friendly to programmers\
      \ accustomed to C/C++. The final decision to base UnrealScript on a C++/Java\
      \ variant was based on the desire to map game-specific concepts onto the language\
      \ definition itself, and the need for speed and familiarity. This turned out\
      \ to be a good decision, as it has greatly simplified many aspects of the Unreal\
      \ codebase.</p>\n<h3><span class=\"mw-headline\" id=\"Example_Program_Structure\"\
      >Example Program Structure</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=4\"\
      \ title=\"Edit section: Example Program Structure\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This example illustrates a typical, simple UnrealScript\
      \ class, and highlights the syntax and features of UnrealScript. Note that this\
      \ code may differ from that which appears in the current Unreal source, as this\
      \ documentation is not synched with the code.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// TriggerLight.</span>\n<span class=\"co1\">// A lightsource\
      \ which can be triggered on or off.</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      \ \n<span class=\"kw1\">class</span> <span class=\"kw9\">TriggerLight</span>\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Light</span>;\n \n\
      <span class=\"co1\">//----------------------------------------------------------------------------</span>\n\
      <span class=\"co1\">// Variables.</span>\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw5\">float</span>\
      \ ChangeTime; <span class=\"co1\">// Time light takes to change from on to off.</span>\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">bool</span> bInitiallyOn; <span class=\"co1\"\
      >// Whether it's initially on.</span>\n<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span> bDelayFullOn;\
      \ <span class=\"co1\">// Delay then go full-on.</span>\n \n<span class=\"kw1\"\
      >var</span> ELightType InitialType; <span class=\"co1\">// Initial type of light.</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> InitialBrightness;\
      \ <span class=\"co1\">// Initial brightness.</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> Alpha, Direction;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw9\">actor</span> <span class=\"kw4\">Trigger</span>;\n \n\
      <span class=\"co1\">//----------------------------------------------------------------------------</span>\n\
      <span class=\"co1\">// Engine functions.</span>\n \n<span class=\"co1\">// Called\
      \ at start of gameplay.</span>\n<span class=\"kw1\">function</span> <span class=\"\
      kw4\">BeginPlay</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n       <span class=\"co1\">// Remember initial\
      \ light type and set new one.</span>\n       <span class=\"kw3\">Disable</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">'Tick'</span> <span class=\"br0\"\
      >)</span>;\n       InitialType <span class=\"sy0\">=</span> LightType;\n   \
      \    InitialBrightness <span class=\"sy0\">=</span> LightBrightness;\n     \
      \  <span class=\"kw2\">if</span><span class=\"br0\">(</span> bInitiallyOn <span\
      \ class=\"br0\">)</span>\n       <span class=\"br0\">{</span>\n            \
      \   Alpha <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n   \
      \            Direction <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n\
      \       <span class=\"br0\">}</span>\n       <span class=\"kw2\">else</span>\n\
      \       <span class=\"br0\">{</span>\n               LightType <span class=\"\
      sy0\">=</span> LT_None;\n               Alpha <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0.0</span>;\n               Direction <span class=\"sy0\">=</span>\
      \ <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>;\n       <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// Called whenever time passes.</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">Tick</span><span class=\"br0\">(</span> <span class=\"\
      kw5\">float</span> DeltaTime <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n       LightType <span class=\"sy0\">=</span> InitialType;\n    \
      \   Alpha <span class=\"sy0\">+=</span> Direction <span class=\"sy0\">*</span>\
      \ DeltaTime <span class=\"sy0\">/</span> ChangeTime;\n       <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> Alpha <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">1.0</span> <span class=\"br0\">)</span>\n       <span\
      \ class=\"br0\">{</span>\n               Alpha <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">1.0</span>;\n               <span class=\"kw3\">Disable</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">'Tick'</span> <span class=\"br0\"\
      >)</span>;\n               <span class=\"kw2\">if</span><span class=\"br0\"\
      >(</span> <span class=\"kw4\">Trigger</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span>\n                 \
      \      <span class=\"kw4\">Trigger</span>.<span class=\"me0\">ResetTrigger</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n       <span class=\"\
      br0\">}</span>\n       <span class=\"kw2\">else</span> <span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> Alpha <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">0.0</span> <span class=\"br0\">)</span>\n       <span class=\"br0\">{</span>\n\
      \               Alpha <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n\
      \               <span class=\"kw3\">Disable</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Tick'</span> <span class=\"br0\">)</span>;\n        \
      \       LightType <span class=\"sy0\">=</span> LT_None;\n               <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> <span class=\"kw4\">Trigger</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n                       <span class=\"kw4\">Trigger</span>.<span\
      \ class=\"me0\">ResetTrigger</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n       <span class=\"br0\">}</span>\n       <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span>bDelayFullOn\
      \ <span class=\"br0\">)</span>\n               LightBrightness <span class=\"\
      sy0\">=</span> Alpha <span class=\"sy0\">*</span> InitialBrightness;\n     \
      \  <span class=\"kw2\">else</span> <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span> <span class=\"br0\">(</span>Direction<span class=\"sy0\">&gt;</span><span\
      \ class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> Alpha<span class=\"\
      sy0\">!=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">||</span> Alpha<span class=\"sy0\">==</span><span class=\"nu0\"\
      >0</span> <span class=\"br0\">)</span>\n               LightBrightness <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n       <span class=\"\
      kw2\">else</span>\n               LightBrightness <span class=\"sy0\">=</span>\
      \ InitialBrightness;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">//----------------------------------------------------------------------------</span>\n\
      <span class=\"co1\">// Public states.</span>\n \n<span class=\"co1\">// Trigger\
      \ turns the light on.</span>\n<span class=\"kw1\">state</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> TriggerTurnsOn\n<span class=\"br0\"\
      >{</span>\n       <span class=\"kw1\">function</span> <span class=\"kw4\">Trigger</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other, <span class=\"\
      kw9\">pawn</span> EventInstigator <span class=\"br0\">)</span>\n       <span\
      \ class=\"br0\">{</span>\n               <span class=\"kw4\">Trigger</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n          \
      \     Direction <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n\
      \               <span class=\"kw3\">Enable</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Tick'</span> <span class=\"br0\">)</span>;\n       <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// Trigger turns the light off.</span>\n<span class=\"kw1\">state</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> TriggerTurnsOff\n<span\
      \ class=\"br0\">{</span>\n       <span class=\"kw1\">function</span> <span class=\"\
      kw4\">Trigger</span><span class=\"br0\">(</span> <span class=\"kw9\">actor</span>\
      \ Other, <span class=\"kw9\">pawn</span> EventInstigator <span class=\"br0\"\
      >)</span>\n       <span class=\"br0\">{</span>\n               <span class=\"\
      kw4\">Trigger</span> <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\
      \               Direction <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1.0</span>;\n               <span class=\"kw3\">Enable</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">'Tick'</span> <span class=\"br0\"\
      >)</span>;\n       <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Trigger toggles the light.</span>\n<span class=\"\
      kw1\">state</span><span class=\"br0\">(</span><span class=\"br0\">)</span> TriggerToggle\n\
      <span class=\"br0\">{</span>\n       <span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">Trigger</span><span class=\"br0\">(</span> <span class=\"kw9\"\
      >actor</span> Other, <span class=\"kw9\">pawn</span> EventInstigator <span class=\"\
      br0\">)</span>\n       <span class=\"br0\">{</span>\n               <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Toggle\"</span><span\
      \ class=\"br0\">)</span>;\n               <span class=\"kw4\">Trigger</span>\
      \ <span class=\"sy0\">=</span> Other;\n               Direction <span class=\"\
      sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;\n\
      \               <span class=\"kw3\">Enable</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Tick'</span> <span class=\"br0\">)</span>;\n       <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// Trigger controls the light.</span>\n<span class=\"kw1\">state</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> TriggerControl\n<span class=\"\
      br0\">{</span>\n       <span class=\"kw1\">function</span> <span class=\"kw4\"\
      >Trigger</span><span class=\"br0\">(</span> <span class=\"kw9\">actor</span>\
      \ Other, <span class=\"kw9\">pawn</span> EventInstigator <span class=\"br0\"\
      >)</span>\n       <span class=\"br0\">{</span>\n               <span class=\"\
      kw4\">Trigger</span> <span class=\"sy0\">=</span> Other;\n               <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> bInitiallyOn <span class=\"\
      br0\">)</span> Direction <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1.0</span>;\n               <span class=\"kw2\">else</span>\
      \ Direction <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n \
      \              <span class=\"kw3\">Enable</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Tick'</span> <span class=\"br0\">)</span>;\n       <span\
      \ class=\"br0\">}</span>\n       <span class=\"kw1\">function</span> <span class=\"\
      kw4\">UnTrigger</span><span class=\"br0\">(</span> <span class=\"kw9\">actor</span>\
      \ Other, <span class=\"kw9\">pawn</span> EventInstigator <span class=\"br0\"\
      >)</span>\n       <span class=\"br0\">{</span>\n               <span class=\"\
      kw4\">Trigger</span> <span class=\"sy0\">=</span> Other;\n               <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> bInitiallyOn <span class=\"\
      br0\">)</span> Direction <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n\
      \               <span class=\"kw2\">else</span> Direction <span class=\"sy0\"\
      >=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>;\n    \
      \           <span class=\"kw3\">Enable</span><span class=\"br0\">(</span> <span\
      \ class=\"st0\">'Tick'</span> <span class=\"br0\">)</span>;\n       <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>The key\
      \ elements to look at in this script are:</p>\n<dl>\n<dt>The class declaration&#160;</dt>\n\
      <dd>Each class \"extends\" (derives from) one parent class, and each class belongs\
      \ to a \"package,\" a collection of objects that are distributed together. All\
      \ functions and variables belong to a class, and are only accessible through\
      \ an actor that belongs to that class. There are no system-wide global functions\
      \ or variables.</dd>\n</dl>\n<dl>\n<dt>The variable declarations&#160;</dt>\n\
      <dd>UnrealScript supports a very diverse set of variable types including most\
      \ base C/Java types, object references, structs, and arrays. In addition, variables\
      \ can be made into editable properties which designers can access in UnrealEd\
      \ without any programming.</dd>\n</dl>\n<dl>\n<dt>The functions&#160;</dt>\n\
      <dd>Functions can take a list of parameters, and they optionally return a value.\
      \ Functions can have local variables. Some functions are called by the Unreal\
      \ engine itself (such as BeginPlay), and some functions are called from other\
      \ script code elsewhere (such as Trigger).</dd>\n</dl>\n<dl>\n<dt>The code&#160;</dt>\n\
      <dd>All of the standard C and Java keywords are supported, like <b>for</b>,\
      \ <b>while</b>, <b>break</b>, <b>switch</b>, <b>if</b>, and so on. Braces and\
      \ semicolons are used in UnrealScript as in C, C++, and Java.</dd>\n</dl>\n\
      <dl>\n<dt>Actor and object references&#160;</dt>\n<dd>Here you see several cases\
      \ where a function is called within another object, using an object reference.</dd>\n\
      </dl>\n<dl>\n<dt>The <b>state</b> keyword&#160;</dt>\n<dd>This script defines\
      \ several \"states\", which are groupings of functions, variables, and code\
      \ which are executed only when the actor is in that state.</dd>\n</dl>\n<p>Note\
      \ that all keywords, variable names, functions, and object names in UnrealScript\
      \ are case-insensitive. To UnrealScript, \"Demon\", \"demON\", and \"demon\"\
      \ are the same thing.</p>\n<h3><span class=\"mw-headline\" id=\"The_Unreal_Virtual_Machine\"\
      >The Unreal Virtual Machine</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=5\"\
      \ title=\"Edit section: The Unreal Virtual Machine\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>The Unreal Virtual Machine\
      \ consists of several components: the server, the client, the rendering engine,\
      \ and the engine support code.</p>\n<p>The Unreal server controls all gameplay\
      \ and interaction between players and actors. In a single-player game, both\
      \ the Unreal client and the Unreal server are run on the same machine; in an\
      \ Internet game, there is a dedicated server running on one machine; all players\
      \ connect to this machine and are clients.</p>\n<p>All gameplay takes place\
      \ inside a \"level\", a self-contained environment containing geometry and actors.\
      \ Though UnrealServer may be capable of running more than one level simultaneously,\
      \ each level operates independently, and levels are shielded from each other:\
      \ actors cannot travel between levels, and actors on one level cannot communicate\
      \ with actors on another level.</p>\n<p>Each actor in a map can either be under\
      \ player control (there can be many players in a network game) or under script\
      \ control. When an actor is under script control, its script completely defines\
      \ how the actor moves and interacts with other actors.</p>\n<p>With all of those\
      \ actors running around, scripts executing, and events occuring in the world,\
      \ you're probably asking how one can understand the flow of execution in an\
      \ UnrealScript. The answer is as follows:</p>\n<p>To manage time, Unreal divides\
      \ each second of gameplay into \"ticks.\" A tick is the smallest unit of time\
      \ in which all actors in a level are updated. A tick typically takes between\
      \ 1/100th to 1/10th of a second. The tick time is limited only by CPU power;\
      \ the faster machine, the lower the tick duration.</p>\n<p>Some commands in\
      \ UnrealScript take zero ticks to execute (i.e. they execute without any game-time\
      \ passing), and others take many ticks. Functions which require game-time to\
      \ pass are called \"latent functions\". Some examples of latent functions include\
      \ \"Sleep\", \"FinishAnim\", and \"MoveTo.\" Latent functions in UnrealScript\
      \ may only be called from code within a state, not from code within a function.</p>\n\
      <p>While an actor is executing a latent function, that actor's state execution\
      \ doesn't continue until the latent function completes. However, other actors,\
      \ or the VM, may call functions within the actor. The net result is that all\
      \ UnrealScript functions can be called at any time, even while latent functions\
      \ are pending.</p>\n<p>In traditional programming terms, UnrealScript acts as\
      \ if each actor in a level has its own \"thread\" of execution. Internally,\
      \ Unreal does not use Windows threads, because that would be very inefficient\
      \ (Windows 95 and Windows NT do not handle thousands of simultaneous threads\
      \ efficiently). Instead, UnrealScript simulates threads. This fact is transparent\
      \ to UnrealScript code, but becomes very apparent when you write C++ code which\
      \ interacts with UnrealScript.</p>\n<p>All UnrealScripts execute in parallel.\
      \ If there are 100 monsters walking around in a level, all 100 of those monsters'\
      \ scripts are executing simultaneously and independently.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Class_Overview\">Class Overview</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=6\"\
      \ title=\"Edit section: Class Overview\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Before beginning work with UnrealScript, it's important\
      \ to understand the high-level relationships of objects within Unreal. The architecture\
      \ of Unreal is a major departure from that of most other games: Unreal is purely\
      \ object-oriented (much like COM/ActiveX), in that it has a well-defined object\
      \ model with support for high-level object oriented concepts such as the object\
      \ graph, serialization, object lifetime, and polymorphism. Historically, most\
      \ games have been designed monolithically, with their major functionality hardcoded\
      \ and unexpandable at the object level, though many games, such as Doom and\
      \ Quake, have proven to be very expandable at the content level. There is a\
      \ major benefit to Unreal's form of object-orientation: major new functionality\
      \ and object types can be added to Unreal at runtime, and this expansion can\
      \ take the form of subclassing, rather than (for example) by modifying a bunch\
      \ of existing code. This form of extensibility is extremely powerful, as it\
      \ encourages the Unreal community to create Unreal enhancements that all interoperate.</p>\n\
      <ul>\n<li><a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a> is the\
      \ parent class of all objects in Unreal. All of the functions in the Object\
      \ class are accessible everywhere, because everything derives from Object. Object\
      \ is an abstract base class, in that it doesn't do anything useful. All functionality\
      \ is provided by subclasses, such as Texture (a texture map), TextBuffer (a\
      \ chunk of text), and Class (which describes the class of other objects).</li>\n\
      </ul>\n<ul>\n<li><a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>\
      \ (extends <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>) is\
      \ the parent class of all standalone game objects in Unreal. The Actor class\
      \ contains all of the functionality needed for an actor to move around, interact\
      \ with other actors, affect the environment, and do other useful game-related\
      \ things.</li>\n</ul>\n<ul>\n<li><a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn\
      \ (UT)\">Pawn (UT)</a> (expands <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a>) is the parent class of all creatures and players in Unreal which\
      \ are capable of high-level AI and player controls.</li>\n</ul>\n<ul>\n<li>Class\
      \ (expands <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>) is\
      \ a special kind of object which describes a class of object. This may seem\
      \ confusing at first: a class is an object, and a class describes certain objects.\
      \ But, the concept is sound, and there are many cases where you will deal with\
      \ Class objects. For example, when you spawn a new actor in UnrealScript, you\
      \ can specify the new actor's class with a Class object.</li>\n</ul>\n<p>With\
      \ UnrealScript, you can write code for any Object class, but 99% of the time,\
      \ you will be writing code for a class derived from Actor. Most of the useful\
      \ UnrealScript functionality is game-related and deals with actors.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"The_Class_Declaration\">The Class Declaration</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Introduction?section=7\"\
      \ title=\"Edit section: The Class Declaration\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Each script corresponds to exactly one class, and\
      \ the script begins by declaring the class, the class's parent, and any additional\
      \ information that is relevant to the class. The simplest form is:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyClass\
      \ <span class=\"kw1\">extends</span> MyParent<span class=\"re0\">Class</span>&lt;\
      \ SEMI &gt;</pre></div>\n</div>\n<p>Here I am declaring a new class named \"\
      MyClass\", which inherets the functionality of \"MyParentClass\". Additionally,\
      \ the class resides in the package named \"MyPackage\".</p>\n<p>Each class inherets\
      \ all of the variables, functions, and states from its parent class. It can\
      \ then add new variable declarations, add new functions (or override the existing\
      \ functions), add new states (or add functionality to the existing states).</p>\n\
      <p>The typical approach to class design in UnrealScript is to make a new class\
      \ (for example a Minotaur monster) which expands an existing class that has\
      \ most of the functionality you need (for example the Pawn class, the base class\
      \ of all monsters). With this approach, you never need to reinvent the wheel.\
      \ You can simply add the new functionality you want to customize, while keeping\
      \ all of the existing functionality you don't need to customize. This approach\
      \ is especially powerful for implementing AI in Unreal, where the built-in AI\
      \ system provides a tremendous amount of base functionality which you can use\
      \ as building blocks for your custom creatures.</p>\n<p>The class declaration\
      \ can take several optional specifiers that affect the class:</p>\n<dl>\n<dt>native&#160;</dt>\n\
      <dd>Says \"this class uses behind-the-scenes C++ support\". Unreal expects native\
      \ classes to contain a C++ implementation in the DLL corresponding to the class's\
      \ package. For example, if your package is named \"Robots\", Unreal looks in\
      \ the \"Robots.dll\" for the C++ implementation of the native class, which is\
      \ generated by the C++ IMPLEMENT_CLASS macro.</dd>\n</dl>\n<dl>\n<dt>abstract&#160;</dt>\n\
      <dd>Declares the class as an \"abstract base class\". This prevents the user\
      \ from adding actors of this class to the world in UnrealEd, because the class\
      \ isn't meaningful on its own. For example, the \"Pawn\" base class is abstract,\
      \ while the \"Brute\" subclass is not abstract&#160;? you can place a Brute\
      \ in the world, but you can't place a Pawn in the world.</dd>\n</dl>\n<dl>\n\
      <dt>guid(a,b,c,d)&#160;</dt>\n<dd>Associates a globally unique identifier (a\
      \ 128-bit number) with the class. This Guid is currently unused, but will be\
      \ relevant when native COM support is later added to Unreal.</dd>\n</dl>\n<dl>\n\
      <dt>transient&#160;</dt>\n<dd>Says \"objects belonging to this class should\
      \ never be saved on disk\". Only useful in conjunction with certain kinds of\
      \ native classes which are non-persistent by nature, such as players or windows.</dd>\n\
      </dl>\n<dl>\n<dt>config(section_name)&#160;</dt>\n<dd>If there are any configurable\
      \ variables in the class (declared with \"config\" or \"globalconfig\"), causes\
      \ those variables to be stored in a particular configuration file:</dd>\n<dt>*\
      \ config(system) – Uses the system configuration file, Unreal.ini for Unreal.</dt>\n\
      <dt>* config(user) – Uses the user configuration file, currently User.ini.</dt>\n\
      <dt>* config(whatever) – Uses the specified configuration file, for example\
      \ \"whatever.ini\".</dt>\n</dl>\n<hr />\n<p><b>Section 1 of 9</b> – Next Page:\
      \ <a href=\"/Legacy:UnrealScript_Language_Reference/Variables\" title=\"Legacy:UnrealScript\
      \ Language Reference/Variables\">Legacy:UnrealScript Language Reference/Variables</a></p>\n\
      <p>See also: <a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\"\
      >Class Syntax</a></p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.126 seconds\n\
      Real time usage: 0.155 seconds\nPreprocessor visited node count: 54/1000000\n\
      Preprocessor generated node count: 147/1000000\nPost‐expand include size: 325/2097152\
      \ bytes\nTemplate argument size: 96/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    4.791      1 - -total\n100.00%\
      \    4.791      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:3285-0!*!0!!en!*!* and timestamp 20221118004616 and\
      \ revision id 8507\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 591
    anchor: "Introduction"
  - toclevel: 2
    level: "3"
    line: "Design Goals of UnrealScript"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 610
    anchor: "Design_Goals_of_UnrealScript"
  - toclevel: 2
    level: "3"
    line: "Example Program Structure"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 3704
    anchor: "Example_Program_Structure"
  - toclevel: 2
    level: "3"
    line: "The Unreal Virtual Machine"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 9108
    anchor: "The_Unreal_Virtual_Machine"
  - toclevel: 2
    level: "3"
    line: "Class Overview"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 12086
    anchor: "Class_Overview"
  - toclevel: 2
    level: "3"
    line: "The Class Declaration"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Introduction"
    byteoffset: 14719
    anchor: "The_Class_Declaration"
  displaytitle: "Legacy:UnrealScript Language Reference/Introduction"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Introduction ==\n\n===Design Goals\
      \ of UnrealScript ===\n\nUnrealScript was created to provide the development\
      \ team and the third-party Unreal developers with a powerful, built-in programming\
      \ language that maps naturally onto the needs and nuances of game programming.\n\
      \nThe major design goals of UnrealScript are: \n\n* To support the major concepts\
      \ of time, state, properties, and networking which traditional programming languages\
      \ don't address. This greatly simplifies UnrealScript code. The major complication\
      \ in C/C++ based AI and game logic programming lies in dealing with events that\
      \ take a certain amount of game time to complete, and with events which are\
      \ dependent on aspects of the object's state. In C/C++, this results in spaghetti-code\
      \ that is hard to write, comprehend, maintain, and debug. UnrealScript includes\
      \ native support for time, state, and network replication which greatly simplify\
      \ game programming. \n\n* To provide Java-style programming simplicity, object-orientation,\
      \ and compile-time error checking. Much as Java brings a clean programming platform\
      \ to Web programmers, UnrealScript provides an equally clean, simple, and robust\
      \ programming language to 3D gaming. The major programming concepts which UnrealScript\
      \ derives from Java are:\n** a pointerless environment with automatic garbage\
      \ collection;\n** a simple single-inheritance class graph;\n** strong compile-time\
      \ type checking;\n** a safe client-side execution \"sandbox\";\n** and the familiar\
      \ look and feel of C/C++/Java code. \n\n* To enable rich, high level programming\
      \ in terms of game objects and interactions rather than bits and pixels. Where\
      \ design tradeoffs had to be made in UnrealScript, I sacrificed execution speed\
      \ for development simplicity and power. After all, the low-level, performance-critical\
      \ code in Unreal is written in C/C++ where the performance gain outweighs the\
      \ added complexity. UnrealScript operates at a level above that, at the object\
      \ and interaction level, rather than the bits and pixels level.\n\nDuring the\
      \ early development of UnrealScript, several major different programming paradigms\
      \ were explored and discarded before arriving at the current incarnation. First,\
      \ I researched using the Sun and Microsoft Java VM's for Windows as the basis\
      \ of Unreal's scripting language. It turned out that Java offered no programming\
      \ benefits over C/C++ in the Unreal context, added frustrating restrictions\
      \ due to the lack of needed language features (such as operator overloading),\
      \ and turned out to be unfathomably slow due to both the overhead of the VM\
      \ task switch and the inefficiencies of the Java garbage collector in the case\
      \ of a large object graph. Second, I based an early implementation of UnrealScript\
      \ on a Visual Basic variant, which worked fine, but was less friendly to programmers\
      \ accustomed to C/C++. The final decision to base UnrealScript on a C++/Java\
      \ variant was based on the desire to map game-specific concepts onto the language\
      \ definition itself, and the need for speed and familiarity. This turned out\
      \ to be a good decision, as it has greatly simplified many aspects of the Unreal\
      \ codebase.\n\n===Example Program Structure ===\n\nThis example illustrates\
      \ a typical, simple UnrealScript class, and highlights the syntax and features\
      \ of UnrealScript. Note that this code may differ from that which appears in\
      \ the current Unreal source, as this documentation is not synched with the code.\n\
      \n<uscript>\n//=============================================================================\n\
      // TriggerLight.\n// A lightsource which can be triggered on or off.\n//=============================================================================\n\
      \nclass TriggerLight extends Light;\n\n//----------------------------------------------------------------------------\n\
      // Variables.\n\nvar() float ChangeTime; // Time light takes to change from\
      \ on to off.\nvar() bool bInitiallyOn; // Whether it's initially on.\nvar()\
      \ bool bDelayFullOn; // Delay then go full-on.\n\nvar ELightType InitialType;\
      \ // Initial type of light.\nvar float InitialBrightness; // Initial brightness.\n\
      var float Alpha, Direction;\nvar actor Trigger;\n\n//----------------------------------------------------------------------------\n\
      // Engine functions.\n\n// Called at start of gameplay.\nfunction BeginPlay()\n\
      {\n       // Remember initial light type and set new one.\n       Disable( 'Tick'\
      \ );\n       InitialType = LightType;\n       InitialBrightness = LightBrightness;\n\
      \       if( bInitiallyOn )\n       {\n               Alpha = 1.0;\n        \
      \       Direction = 1.0;\n       }\n       else\n       {\n               LightType\
      \ = LT_None;\n               Alpha = 0.0;\n               Direction = -1.0;\n\
      \       }\n}\n\n// Called whenever time passes.\nfunction Tick( float DeltaTime\
      \ )\n{\n       LightType = InitialType;\n       Alpha += Direction * DeltaTime\
      \ / ChangeTime;\n       if( Alpha > 1.0 )\n       {\n               Alpha =\
      \ 1.0;\n               Disable( 'Tick' );\n               if( Trigger != None\
      \ )\n                       Trigger.ResetTrigger();\n       }\n       else if(\
      \ Alpha < 0.0 )\n       {\n               Alpha = 0.0;\n               Disable(\
      \ 'Tick' );\n               LightType = LT_None;\n               if( Trigger\
      \ != None )\n                       Trigger.ResetTrigger();\n       }\n    \
      \   if( !bDelayFullOn )\n               LightBrightness = Alpha * InitialBrightness;\n\
      \       else if( (Direction>0 && Alpha!=1) || Alpha==0 )\n               LightBrightness\
      \ = 0;\n       else\n               LightBrightness = InitialBrightness;\n}\n\
      \n//----------------------------------------------------------------------------\n\
      // Public states.\n\n// Trigger turns the light on.\nstate() TriggerTurnsOn\n\
      {\n       function Trigger( actor Other, pawn EventInstigator )\n       {\n\
      \               Trigger = None;\n               Direction = 1.0;\n         \
      \      Enable( 'Tick' );\n       }\n}\n\n// Trigger turns the light off.\nstate()\
      \ TriggerTurnsOff\n{\n       function Trigger( actor Other, pawn EventInstigator\
      \ )\n       {\n               Trigger = None;\n               Direction = -1.0;\n\
      \               Enable( 'Tick' );\n       }\n}\n\n// Trigger toggles the light.\n\
      state() TriggerToggle\n{\n       function Trigger( actor Other, pawn EventInstigator\
      \ )\n       {\n               log(\"Toggle\");\n               Trigger = Other;\n\
      \               Direction *= -1;\n               Enable( 'Tick' );\n       }\n\
      }\n\n// Trigger controls the light.\nstate() TriggerControl\n{\n       function\
      \ Trigger( actor Other, pawn EventInstigator )\n       {\n               Trigger\
      \ = Other;\n               if( bInitiallyOn ) Direction = -1.0;\n          \
      \     else Direction = 1.0;\n               Enable( 'Tick' );\n       }\n  \
      \     function UnTrigger( actor Other, pawn EventInstigator )\n       {\n  \
      \             Trigger = Other;\n               if( bInitiallyOn ) Direction\
      \ = 1.0;\n               else Direction = -1.0;\n               Enable( 'Tick'\
      \ );\n       }\n}\n</uscript>\n\nThe key elements to look at in this script\
      \ are: \n\n; The class declaration : Each class \"extends\" (derives from) one\
      \ parent class, and each class belongs to a \"package,\" a collection of objects\
      \ that are distributed together. All functions and variables belong to a class,\
      \ and are only accessible through an actor that belongs to that class. There\
      \ are no system-wide global functions or variables.\n\n; The variable declarations\
      \ : UnrealScript supports a very diverse set of variable types including most\
      \ base C/Java types, object references, structs, and arrays. In addition, variables\
      \ can be made into editable properties which designers can access in UnrealEd\
      \ without any programming.\n\n; The functions : Functions can take a list of\
      \ parameters, and they optionally return a value. Functions can have local variables.\
      \ Some functions are called by the Unreal engine itself (such as BeginPlay),\
      \ and some functions are called from other script code elsewhere (such as Trigger).\n\
      \n; The code : All of the standard C and Java keywords are supported, like '''for''',\
      \ '''while''', '''break''', '''switch''', '''if''', and so on. Braces and semicolons\
      \ are used in UnrealScript as in C, C++, and Java. \n\n; Actor and object references\
      \ : Here you see several cases where a function is called within another object,\
      \ using an object reference.\n\n; The '''state''' keyword : This script defines\
      \ several \"states\", which are groupings of functions, variables, and code\
      \ which are executed only when the actor is in that state.\n\nNote that all\
      \ keywords, variable names, functions, and object names in UnrealScript are\
      \ case-insensitive. To UnrealScript, \"Demon\", \"demON\", and \"demon\" are\
      \ the same thing.\n\n===The Unreal Virtual Machine ===\n\nThe Unreal Virtual\
      \ Machine consists of several components: the server, the client, the rendering\
      \ engine, and the engine support code.\n\nThe Unreal server controls all gameplay\
      \ and interaction between players and actors. In a single-player game, both\
      \ the Unreal client and the Unreal server are run on the same machine; in an\
      \ Internet game, there is a dedicated server running on one machine; all players\
      \ connect to this machine and are clients.\n\nAll gameplay takes place inside\
      \ a \"level\", a self-contained environment containing geometry and actors.\
      \ Though UnrealServer may be capable of running more than one level simultaneously,\
      \ each level operates independently, and levels are shielded from each other:\
      \ actors cannot travel between levels, and actors on one level cannot communicate\
      \ with actors on another level.\n\nEach actor in a map can either be under player\
      \ control (there can be many players in a network game) or under script control.\
      \ When an actor is under script control, its script completely defines how the\
      \ actor moves and interacts with other actors.\n\nWith all of those actors running\
      \ around, scripts executing, and events occuring in the world, you're probably\
      \ asking how one can understand the flow of execution in an UnrealScript. The\
      \ answer is as follows:\n\nTo manage time, Unreal divides each second of gameplay\
      \ into \"ticks.\" A tick is the smallest unit of time in which all actors in\
      \ a level are updated. A tick typically takes between 1/100th to 1/10th of a\
      \ second. The tick time is limited only by CPU power; the faster machine, the\
      \ lower the tick duration.\n\nSome commands in UnrealScript take zero ticks\
      \ to execute (i.e. they execute without any game-time passing), and others take\
      \ many ticks. Functions which require game-time to pass are called \"latent\
      \ functions\". Some examples of latent functions include \"Sleep\", \"FinishAnim\"\
      , and \"MoveTo.\" Latent functions in UnrealScript may only be called from code\
      \ within a state, not from code within a function.\n\nWhile an actor is executing\
      \ a latent function, that actor's state execution doesn't continue until the\
      \ latent function completes. However, other actors, or the VM, may call functions\
      \ within the actor. The net result is that all UnrealScript functions can be\
      \ called at any time, even while latent functions are pending.\n\nIn traditional\
      \ programming terms, UnrealScript acts as if each actor in a level has its own\
      \ \"thread\" of execution. Internally, Unreal does not use Windows threads,\
      \ because that would be very inefficient (Windows 95 and Windows NT do not handle\
      \ thousands of simultaneous threads efficiently). Instead, UnrealScript simulates\
      \ threads. This fact is transparent to UnrealScript code, but becomes very apparent\
      \ when you write C++ code which interacts with UnrealScript.\n\nAll UnrealScripts\
      \ execute in parallel. If there are 100 monsters walking around in a level,\
      \ all 100 of those monsters' scripts are executing simultaneously and independently.\n\
      \n===Class Overview ===\n\nBefore beginning work with UnrealScript, it's important\
      \ to understand the high-level relationships of objects within Unreal. The architecture\
      \ of Unreal is a major departure from that of most other games: Unreal is purely\
      \ object-oriented (much like COM/ActiveX), in that it has a well-defined object\
      \ model with support for high-level object oriented concepts such as the object\
      \ graph, serialization, object lifetime, and polymorphism. Historically, most\
      \ games have been designed monolithically, with their major functionality hardcoded\
      \ and unexpandable at the object level, though many games, such as Doom and\
      \ Quake, have proven to be very expandable at the content level. There is a\
      \ major benefit to Unreal's form of object-orientation: major new functionality\
      \ and object types can be added to Unreal at runtime, and this expansion can\
      \ take the form of subclassing, rather than (for example) by modifying a bunch\
      \ of existing code. This form of extensibility is extremely powerful, as it\
      \ encourages the Unreal community to create Unreal enhancements that all interoperate.\n\
      \n* [[Legacy:Object|Object]] is the parent class of all objects in Unreal. All\
      \ of the functions in the Object class are accessible everywhere, because everything\
      \ derives from Object. Object is an abstract base class, in that it doesn't\
      \ do anything useful. All functionality is provided by subclasses, such as Texture\
      \ (a texture map), TextBuffer (a chunk of text), and Class (which describes\
      \ the class of other objects).\n\n* [[Legacy:Actor|Actor]] (extends [[Legacy:Object|Object]])\
      \ is the parent class of all standalone game objects in Unreal. The Actor class\
      \ contains all of the functionality needed for an actor to move around, interact\
      \ with other actors, affect the environment, and do other useful game-related\
      \ things.\n\n* [[Legacy:Pawn (UT)|Pawn (UT)]] (expands [[Legacy:Actor|Actor]])\
      \ is the parent class of all creatures and players in Unreal which are capable\
      \ of high-level AI and player controls.\n\n* Class (expands [[Legacy:Object|Object]])\
      \ is a special kind of object which describes a class of object. This may seem\
      \ confusing at first: a class is an object, and a class describes certain objects.\
      \ But, the concept is sound, and there are many cases where you will deal with\
      \ Class objects. For example, when you spawn a new actor in UnrealScript, you\
      \ can specify the new actor's class with a Class object.\n\nWith UnrealScript,\
      \ you can write code for any Object class, but 99% of the time, you will be\
      \ writing code for a class derived from Actor. Most of the useful UnrealScript\
      \ functionality is game-related and deals with actors.\n\n===The Class Declaration\
      \ ===\n\nEach script corresponds to exactly one class, and the script begins\
      \ by declaring the class, the class's parent, and any additional information\
      \ that is relevant to the class. The simplest form is:\n\n<uscript>\nclass MyClass\
      \ extends MyParentClass;\n</uscript>\n\nHere I am declaring a new class named\
      \ \"MyClass\", which inherets the functionality of \"MyParentClass\". Additionally,\
      \ the class resides in the package named \"MyPackage\".\n\nEach class inherets\
      \ all of the variables, functions, and states from its parent class. It can\
      \ then add new variable declarations, add new functions (or override the existing\
      \ functions), add new states (or add functionality to the existing states).\n\
      \nThe typical approach to class design in UnrealScript is to make a new class\
      \ (for example a Minotaur monster) which expands an existing class that has\
      \ most of the functionality you need (for example the Pawn class, the base class\
      \ of all monsters). With this approach, you never need to reinvent the wheel.\
      \ You can simply add the new functionality you want to customize, while keeping\
      \ all of the existing functionality you don't need to customize. This approach\
      \ is especially powerful for implementing AI in Unreal, where the built-in AI\
      \ system provides a tremendous amount of base functionality which you can use\
      \ as building blocks for your custom creatures.\n\nThe class declaration can\
      \ take several optional specifiers that affect the class: \n\n; native : Says\
      \ \"this class uses behind-the-scenes C++ support\". Unreal expects native classes\
      \ to contain a C++ implementation in the DLL corresponding to the class's package.\
      \ For example, if your package is named \"Robots\", Unreal looks in the \"Robots.dll\"\
      \ for the C++ implementation of the native class, which is generated by the\
      \ C++ IMPLEMENT_CLASS macro. \n\n; abstract : Declares the class as an \"abstract\
      \ base class\". This prevents the user from adding actors of this class to the\
      \ world in UnrealEd, because the class isn't meaningful on its own. For example,\
      \ the \"Pawn\" base class is abstract, while the \"Brute\" subclass is not abstract\
      \ ? you can place a Brute in the world, but you can't place a Pawn in the world.\n\
      \n; guid(a,b,c,d) : Associates a globally unique identifier (a 128-bit number)\
      \ with the class. This Guid is currently unused, but will be relevant when native\
      \ COM support is later added to Unreal.\n\n; transient : Says \"objects belonging\
      \ to this class should never be saved on disk\". Only useful in conjunction\
      \ with certain kinds of native classes which are non-persistent by nature, such\
      \ as players or windows. \n\n; config(section_name) : If there are any configurable\
      \ variables in the class (declared with \"config\" or \"globalconfig\"), causes\
      \ those variables to be stored in a particular configuration file:\n; * config(system)\
      \ &ndash; Uses the system configuration file, Unreal.ini for Unreal.\n; * config(user)\
      \ &ndash; Uses the user configuration file, currently User.ini. \n; * config(whatever)\
      \ &ndash; Uses the specified configuration file, for example \"whatever.ini\"\
      .\n\n----\n\n'''Section 1 of 9''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Variables]]\n\
      \nSee also: [[Legacy:Class Syntax|Class Syntax]]"
  properties: []
  revId: 8507
name: "Legacy:UnrealScript Language Reference/Introduction"
revision:
  revid: 8507
  parentid: 8509
  user: "AC9793A0.ipt.aol.com"
  timestamp: 1154298023.000000000
  comment: "*spelling, grammatical errors"
timestamp: 1668787213.694784000
