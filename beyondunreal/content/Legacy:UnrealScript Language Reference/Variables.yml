---
parse:
  title: "Legacy:UnrealScript Language Reference/Variables"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Variables\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Variables</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Simple_Variables\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Simple Variables</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Arrays\"><span class=\"tocnumber\"\
      >2.2</span> <span class=\"toctext\">Arrays</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Editability\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Editability</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#Object_and_actor_reference_variables\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">Object and actor reference variables</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Class_Reference_Variables\"\
      ><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">Class Reference\
      \ Variables</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"\
      #Enumerations\"><span class=\"tocnumber\">2.6</span> <span class=\"toctext\"\
      >Enumerations</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"\
      #Structs\"><span class=\"tocnumber\">2.7</span> <span class=\"toctext\">Structs</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      UnrealScript_Language_Reference\">UnrealScript Language Reference</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Variables\">Variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=2\"\
      \ title=\"Edit section: Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Simple_Variables\"\
      >Simple Variables</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=3\"\
      \ title=\"Edit section: Simple Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Here are some examples of instance variable declarations\
      \ in UnrealScript:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw5\">int</span> a; <span class=\"co1\">// Declare\
      \ an integer variable named \"A\".</span>\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">byte</span> Table<span class=\"br0\">[</span><span class=\"\
      nu0\">64</span><span class=\"br0\">]</span>; <span class=\"co1\">// Declare\
      \ an array of 64 bytes named \"Table\".</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">string</span><span class=\"br0\">[</span><span class=\"\
      nu0\">32</span><span class=\"br0\">]</span> PlayerName; <span class=\"co1\"\
      >// Declare a max 32-character string.</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw9\">actor</span> Other; <span class=\"co1\">// Declare a variable\
      \ referencing an actor.</span></pre></div>\n</div>\n<p>Variables can appear\
      \ in two kinds of places in UnrealScript: Instance variables, which apply to\
      \ an entire object, appear immediately after the class declarations. Local variables\
      \ appear within a function, and are only active while that function executes.\
      \ Instance variables are declared with the \"var\" keyword. Local variables\
      \ are declared with the \"local\" keyword.</p>\n<p>Here are the basic variable\
      \ types supported in UnrealScript:</p>\n<dl>\n<dt>byte&#160;</dt>\n<dd>A single-byte\
      \ value ranging from 0 to 255.</dd>\n<dt>int&#160;</dt>\n<dd>A 32-bit integer\
      \ value.</dd>\n<dt>bool&#160;</dt>\n<dd>A boolean value: either \"true\" or\
      \ \"false\".</dd>\n<dt>float&#160;</dt>\n<dd>A 32-bit floating point number.</dd>\n\
      <dt>string&#160;</dt>\n<dd>A string of characters.</dd>\n</dl>\n<dl>\n<dt>name&#160;</dt>\n\
      <dd>The name of an item in Unreal (such as the name of a function, state, class,\
      \ etc). Names are stored as a 16-bit index into the global name table. Names\
      \ correspond to simple strings of 1-31 characters. Names are not like strings:\
      \ strings can be modified dynamically, but names can only take on predefined\
      \ name values.</dd>\n</dl>\n<dl>\n<dt>enum&#160;</dt>\n<dd>A variable that can\
      \ take on one of several predefined name values. For example, the ELightType\
      \ enumeration defined in the Actor script describes a dynamic light and takes\
      \ on a value like LT_None, LT_Pulse, LT_Strobe, and so on.</dd>\n</dl>\n<dl>\n\
      <dt>struct&#160;</dt>\n<dd>Similar to C structures, UnrealScript structs let\
      \ you create new variable types that contain sub-variables. For example, two\
      \ commonly-used structs are \"vector\", which consists of an X, Y, and Z component;\
      \ and \"rotator\", which consists of a pitch, yaw, and roll component. Note\
      \ that structs are passed by value.</dd>\n</dl>\n<dl>\n<dt>object and actor\
      \ references&#160;</dt>\n<dd>A variable that refers to another object or actor\
      \ in the world. For example, the Pawn class has an \"Enemy\" actor reference\
      \ that specifies which actor the pawn should be trying to attack. Object and\
      \ actor references are very powerful tools, because they enable you to access\
      \ the variables and functions of another actor. For example, in the Pawn script,\
      \ you can write \"Enemy.Damage(123)\" to call your enemy's Damage function –\
      \ resulting in the enemy taking damage. Object references may also contain a\
      \ special value called \"None\", which is the equivalent of the C \"NULL\" pointer:\
      \ it says \"this variable doesn't refer to any object\".</dd>\n</dl>\n<p>Variables\
      \ may also contain additional specifiers such as \"const\" that further describe\
      \ the variable. Actually, there are quite a lot of specifiers which you wouldn't\
      \ expect to see in a general-purpose programming language, mainly as a result\
      \ of wanting UnrealScript to natively support many game- and environment-specific\
      \ concepts:</p>\n<dl>\n<dt>const&#160;</dt>\n<dd>Advanced. Treats the contents\
      \ of the variable as a constant. In UnrealScript, you can read the value of\
      \ const variables, but you can't write to them. \"Const\" is only used for variables\
      \ which the engine is responsible for updating, and which can't be safely updated\
      \ from UnrealScript, such as an actor's Location (which can only be set by calling\
      \ the SetLocation or MoveActor functions).</dd>\n<dt>editconst&#160;</dt>\n\
      <dd>Advanced. The variable can be seen in UnrealEd but not edited. A variable\
      \ that is editconst is not implictly \"const\".</dd>\n<dt>input&#160;</dt>\n\
      <dd>Advanced. Makes the variable accessible to Unreal's input system, so that\
      \ input (such as button presses and joystick movements) can be directly mapped\
      \ onto it. Only relevant with variables of type \"byte\" and \"float\".</dd>\n\
      <dt>transient&#160;</dt>\n<dd>Advanced. Declares that the variable is for temporary\
      \ use, and isn't part of the object's persistent state. Transient variables\
      \ are not saved to disk. Transient variables are initialized to zero when an\
      \ actor is loaded.</dd>\n<dt>native&#160;</dt>\n<dd>Advanced. Declares that\
      \ the variable is loaded and saved by C++ code, rather than by UnrealScript.</dd>\n\
      <dt>private&#160;</dt>\n<dd>The variable is private, and may only be accessed\
      \ by the class's script; no other classes (including subclasses) may access\
      \ it.</dd>\n<dt>travel&#160;</dt>\n<dd>Advanced. \"Travel\" is supported only\
      \ for the player's <a href=\"/Legacy:PlayerPawn\" title=\"Legacy:PlayerPawn\"\
      >PlayerPawn</a> derived class and Inventory-derived classes in his linked Inventory\
      \ list. It means \"this variable should be saved and restored when switching\
      \ levels, so that it isn't forgotten\". This is the mechanism that keeps your\
      \ health and ammo counts intact when switching levels. The combination of \"\
      transient\" and \"travel\" isn't sensible (and isn't used in Unreal), since\
      \ transient objects are non persistent between savegames, and \"travel\" implies\
      \ the thing should persist between levels.</dd>\n<dt>skip&#160;</dt>\n<dd>Advanced.\
      \ Only used for logical operators like &amp;&amp; and ||. (More details only\
      \ available for Unreal licensees.)</dd>\n<dt>export&#160;</dt>\n<dd>Advanced.\
      \ Only meaningful for the <a href=\"/Legacy:Brush\" title=\"Legacy:Brush\">Brush</a>\
      \ variable in <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> classes.\
      \ (More details only available for Unreal licensees.)</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Arrays\">Arrays</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=4\"\
      \ title=\"Edit section: Arrays\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Arrays are declared using the following syntax:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">int</span> MyArray<span class=\"br0\">[</span><span class=\"\
      nu0\">20</span><span class=\"br0\">]</span>; <span class=\"co1\">// Declares\
      \ an array of 20 ints.</span></pre></div>\n</div>\n<p>UnrealScript supports\
      \ only single-dimensional arrays, though you can simulate multidimensional arrays\
      \ by carrying out the row/column math yourself. For information on Dynamic Arrays,\
      \ see below in the <a href=\"/Legacy:UnrealScript_Language_Reference/Advanced_Language_Features\"\
      \ title=\"Legacy:UnrealScript Language Reference/Advanced Language Features\"\
      >Legacy:UnrealScript Language Reference/Advanced Language Features</a> section.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Editability\">Editability</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=5\"\
      \ title=\"Edit section: Editability\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In UnrealScript, you can make an instance variable\
      \ \"editable\", so that users can edit the variable's value in UnrealEd. This\
      \ mechanism is responsible for the entire contents of the \"Actor Properties\"\
      \ dialog in UnrealEd: everything you see there is simply an UnrealScript variable,\
      \ which has been declared editable.</p>\n<p>The syntax for declaring an editable\
      \ variable is as follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">int</span> MyInteger; <span class=\"co1\">// Declare an editable\
      \ integer in the default</span>\n                     <span class=\"co1\">//\
      \ category.</span>\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span>MyCategory<span\
      \ class=\"br0\">)</span> <span class=\"kw5\">bool</span> MyBool; <span class=\"\
      co1\">// Declare an editable bool in</span>\n                             <span\
      \ class=\"co1\">// \"MyCategory\".</span></pre></div>\n</div>\n<p>You can also\
      \ declare a variable as \"editconst\", which means that the variable should\
      \ be visible but not editable UnrealEd. Note that this only prevents the variable\
      \ from being changed in the editor, not in script. If you want a variable that\
      \ is truly \"const\" but still visible in the editor, you must declare it \"\
      const editconst\":</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// MyBool is visible but not editable in UnrealEd</span>\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span>MyCategory<span class=\"br0\">)</span>\
      \ editconst <span class=\"kw5\">bool</span> MyBool;\n \n<span class=\"co1\"\
      >// MyBool is visible but not editable in UnrealEd and</span>\n<span class=\"\
      co1\">// not changeable in script</span>\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span>MyCategory<span class=\"br0\">)</span> <span class=\"\
      kw1\">const</span> editconst <span class=\"kw5\">bool</span> MyBool;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Object_and_actor_reference_variables\"\
      >Object and actor reference variables</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=6\"\
      \ title=\"Edit section: Object and actor reference variables\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>You can declare\
      \ a variable that refers to an actor or object like this:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw9\">actor</span>\
      \ A; <span class=\"co1\">// An actor reference.</span>\n<span class=\"kw1\"\
      >var</span> <span class=\"kw9\">pawn</span> P; <span class=\"co1\">// A reference\
      \ to an actor in the Pawn class.</span>\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">texture</span> T; <span class=\"co1\">// A reference to a texture\
      \ object.</span></pre></div>\n</div>\n<p>The variable \"P\" above is a reference\
      \ to an actor in the Pawn class. Such a variable can refer to any actor that\
      \ belongs to a subclass of Pawn. For example, P might refer to a Brute, or a\
      \ Skaarj, or a Manta. It can be any kind of Pawn. However, P can never refer\
      \ to a Trigger actor (because Trigger is not a subclass of Pawn).</p>\n<p>One\
      \ example of where it's handy to have a variable referring to an actor is the\
      \ Enemy variable in the Pawn class, which refers to the actor that the Pawn\
      \ is trying to attack.</p>\n<p>When you have a variable that refers to an actor,\
      \ you can access that actor's variables, and call its functions. For example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Declare two variables\
      \ that refer to a pawns.</span>\n<span class=\"kw1\">var</span> <span class=\"\
      kw9\">pawn</span> P, Q;\n \n<span class=\"co1\">// Here is a function that makes\
      \ use of P.</span>\n<span class=\"co1\">// It displays some information about\
      \ P.</span>\n<span class=\"kw1\">function</span> MyFunction<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span\
      \ class=\"co1\">// Set P's enemy to Q.</span>\n   P.<span class=\"me0\">Enemy</span>\
      \ <span class=\"sy0\">=</span> Q;\n \n   <span class=\"co1\">// Tell P to play\
      \ his running animation.</span>\n   P.<span class=\"me0\">PlayRunning</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Variables that refer to actors always either refer to a valid actor\
      \ (any actor that actually exists in the level), or they contain the value \"\
      None\". None is equivalent to the C/C++ \"NULL\" pointer. However, in UnrealScript,\
      \ it is safe to access variables and call functions with a \"None\" reference;\
      \ the result is always zero.</p>\n<p>Note that an object or actor reference\
      \ \"points to\" another actor or object, it doesn't \"contain\" an actor or\
      \ object. The C equivalent of an actor reference is a pointer to an object in\
      \ the AActor class (in C, you'd say an AActor*). For example, you could have\
      \ two monsters in the world, Bob and Fred, who are fighting each other. Bob's\
      \ \"Enemy\" variable would \"point to\" Fred, and Fred's \"Enemy\" variable\
      \ would \"point to\" Bob.</p>\n<p>Unlike C pointers, UnrealScript object references\
      \ are always safe and infallible. It is impossible for an object reference to\
      \ refer to an object that doesn't exist or is invalid (other than the special-case\
      \ \"None\" value). In UnrealScript, when an actor or object is destroyed, all\
      \ references to it are automatically set to \"None\".</p>\n<h3><span class=\"\
      mw-headline\" id=\"Class_Reference_Variables\">Class Reference Variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=7\"\
      \ title=\"Edit section: Class Reference Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In Unreal, classes are objects just like actors, textures,\
      \ and sounds are objects. Class objects belong to the class named \"class\"\
      . Now, there will often be cases where you'll want to store a reference to a\
      \ class object, so that you can spawn an actor belonging to that class (without\
      \ knowing what the class is at compile-time). For example:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span> C;\n<span class=\"\
      kw1\">var</span> <span class=\"kw9\">actor</span> A;\nA <span class=\"sy0\"\
      >=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span> C <span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// Spawn an actor belonging to\
      \ some arbitrary class C.</span></pre></div>\n</div>\n<p>Now, be sure not to\
      \ confuse the roles of a class C, and an object O belonging to class C. To give\
      \ a really shaky analogy, a class is like a pepper grinder, and an object is\
      \ like pepper. You can use the pepper grinder (the class) to create pepper (objects\
      \ of that class) by turning the crank (calling the Spawn function)... <b>but,</b>\
      \ a pepper grinder (a class) is not pepper (an object belonging to the class),\
      \ so you <b>must not try to eat it!</b></p>\n<p>When declaring variables that\
      \ reference class objects, you can optionally use the special class&lt;classlimiter&gt;\
      \ syntax to limit the variable to only containing references to classes which\
      \ extend a given superclass. For example, in the declaration:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> class<span class=\"sy0\"\
      >&lt;</span>actor<span class=\"sy0\">&gt;</span> Actor<span class=\"re0\">Class</span>&lt;\
      \ SEMI &gt;</pre></div>\n</div>\n<p>The variable ActorClass may only reference\
      \ a class that extends the \"actor\" class. This is useful for improving compile-time\
      \ type checking. For example, the Spawn function takes a class as a parameter,\
      \ but only makes sense when the given class is a subclass of Actor, and the\
      \ class&lt;classlimiter&gt; syntax causes the compiler to enforce that requirement.</p>\n\
      <p>As with dynamic object casting, you can dynamically cast classes like this:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">class<span class=\"sy0\">&lt;</span>actor<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span> SomeFunctionCall<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Enumerations\">Enumerations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=8\"\
      \ title=\"Edit section: Enumerations\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Enumerations exist in UnrealScript as a convenient\
      \ way to declare variables that can contain \"one of\" a bunch of keywords.\
      \ For example, the actor class contains the enumeration EPhysics which describes\
      \ the physics which Unreal should apply to the actor. This can be set to one\
      \ of the predefined values like PHYS_None, PHYS_Walking, PHYS_Falling, and so\
      \ on.</p>\n<p>Internally, enumerations are stored as byte variables. In designing\
      \ UnrealScript, enumerations were not seen as a necessity, but it makes code\
      \ so much easier to read to see that an actor's physics mode is being set to\
      \ \"PHYS_Swimming\" than (for example) \"3\".</p>\n<p>Here is sample code that\
      \ declares enumerations.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// Declare the EColor enumeration, with three values.</span>\n<span class=\"\
      kw1\">enum</span> EColor\n<span class=\"br0\">{</span>\n       CO_Red,\n   \
      \    CO_Green,\n       CO_Blue\n<span class=\"br0\">}</span>;\n \n<span class=\"\
      co1\">// Now, declare two variables of type EColor.</span>\n<span class=\"kw1\"\
      >var</span> EColor ShirtColor, HatColor;\n \n<span class=\"co1\">// Alternatively,\
      \ you can declare variables and</span>\n<span class=\"co1\">// enumerations\
      \ together like this:</span>\n<span class=\"kw1\">var</span> <span class=\"\
      kw1\">enum</span> EFruit\n<span class=\"br0\">{</span>\n       FRUIT_Apple,\n\
      \       FRUIT_Orange,\n       FRUIT_Bannana\n<span class=\"br0\">}</span> FirstFruit,\
      \ SecondFruit;</pre></div>\n</div>\n<p>In the Unreal source, we always declare\
      \ enumeration values like LT_Steady, PHYS_Falling, and so on, rather than as\
      \ simply \"Steady\" or \"Falling\". This is just a matter of programming style,\
      \ and is not a requirement of the language.</p>\n<p>UnrealScript only recognizes\
      \ unqualified enum tags (like FRUIT_Apple) in classes where the enumeration\
      \ was defined, and in its subclasses. If you need to refer to an enumeration\
      \ tag defined somewhere else in the class hierarchy, you must \"qualify it\"\
      :</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\">FRUIT_Apple <span class=\"co1\"\
      >// If Unreal can't find this enum tag...</span>\nEFruit.<span class=\"me0\"\
      >FRUIT_Apple</span> <span class=\"co1\">// Then qualify it like this.</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Structs\">Structs</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Variables?section=9\"\
      \ title=\"Edit section: Structs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>An UnrealScript struct is a way of cramming a bunch\
      \ of variables together into a new kind of super-variable called a struct. UnrealScript\
      \ structs are just like C structs, in that they can contain any simple variables\
      \ or arrays.</p>\n<p>You can declare a struct as follows:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// A point or direction vector in\
      \ 3D space.</span>\n \n<span class=\"kw1\">struct</span> <span class=\"kw5\"\
      >Vector</span>\n<span class=\"br0\">{</span>\n       <span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> X;\n       <span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> Y;\n       <span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> Z\n<span class=\"br0\">}</span>;</pre></div>\n\
      </div>\n<p>Once you declare a struct, and only after you have declared it, you\
      \ are ready to start declaring specific variables of that struct type:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Declare a bunch\
      \ of variables of type Vector.</span>\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">Vector</span> Position;\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">Vector</span> Destination;</pre></div>\n</div>\n<p>To access\
      \ a component of a struct, use code like the following.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> MyFunction<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \      <span class=\"kw1\">Local</span> <span class=\"kw5\">Vector</span> A,\
      \ B, C;\n \n       <span class=\"co1\">// Add some vectors.</span>\n       C\
      \ <span class=\"sy0\">=</span> A <span class=\"sy0\">+</span> B;\n \n      \
      \ <span class=\"co1\">// Add just the x components of the vectors.</span>\n\
      \       C.<span class=\"me0\">X</span> <span class=\"sy0\">=</span> A.<span\
      \ class=\"me0\">X</span> <span class=\"sy0\">+</span> B.<span class=\"me0\"\
      >X</span>;\n \n       <span class=\"co1\">// Pass vector C to a function.</span>\n\
      \       SomeFunction<span class=\"br0\">(</span> C <span class=\"br0\">)</span>;\n\
      \ \n       <span class=\"co1\">// Pass certain vector components to a function.</span>\n\
      \       OtherFunction<span class=\"br0\">(</span> A.<span class=\"me0\">X</span>,\
      \ C.<span class=\"me0\">Z</span> <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>You can do anything with Struct variables\
      \ that you can do with other variables: you can assign variables to them, you\
      \ can pass them to functions, and you can access their components.</p>\n<p>There\
      \ are several Structs defined in the Object class which are used throughout\
      \ Unreal. You should become familiar with their operation, as they are fundamental\
      \ building blocks of scripts:</p>\n<dl>\n<dt>Vector&#160;</dt>\n<dd>A unique\
      \ 3D point or vector in space, with an X, Y, and Z component.</dd>\n<dt>Plane&#160;</dt>\n\
      <dd>Defines a unique plane in 3D space. A plane is defined by its X, Y, and\
      \ Z components (which are assumed to be normalized) plus its W component, which\
      \ represents the distance of the plane from the origin, along the plane's normal\
      \ (which is the shortest line from the plane to the origin).</dd>\n<dt>Rotator&#160;</dt>\n\
      <dd>A rotation defining a unique orthogonal coordinate system. A rotator contains\
      \ Pitch, Yaw, and Roll components.</dd>\n<dt>Coords&#160;</dt>\n<dd>An arbitrary\
      \ coordinate system in 3D space.</dd>\n<dt>Color&#160;</dt>\n<dd>An RGB color\
      \ value.</dd>\n<dt>Region&#160;</dt>\n<dd>Defines a unique convex region within\
      \ a level.</dd>\n</dl>\n<hr />\n<p>Prev Page: <a href=\"/Legacy:UnrealScript_Language_Reference/Introduction\"\
      \ title=\"Legacy:UnrealScript Language Reference/Introduction\">Legacy:UnrealScript\
      \ Language Reference/Introduction</a> – <b>Section 2 of 9</b> – Next Page: <a\
      \ href=\"/Legacy:UnrealScript_Language_Reference/Expressions\" title=\"Legacy:UnrealScript\
      \ Language Reference/Expressions\">Legacy:UnrealScript Language Reference/Expressions</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.278 seconds\nReal time usage:\
      \ 0.638 seconds\nPreprocessor visited node count: 166/1000000\nPreprocessor\
      \ generated node count: 427/1000000\nPost‐expand include size: 399/2097152 bytes\n\
      Template argument size: 96/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%   12.220      1 - -total\n100.00%   12.220\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3289-0!*!0!!en!*!*\
      \ and timestamp 20221118092329 and revision id 8517\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:PlayerPawn"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Introduction"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Advanced Language Features"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Brush"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Expressions"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Variables"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 591
    anchor: "Variables"
  - toclevel: 2
    level: "3"
    line: "Simple Variables"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 607
    anchor: "Simple_Variables"
  - toclevel: 2
    level: "3"
    line: "Arrays"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 5621
    anchor: "Arrays"
  - toclevel: 2
    level: "3"
    line: "Editability"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 6036
    anchor: "Editability"
  - toclevel: 2
    level: "3"
    line: "Object and actor reference variables"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 7234
    anchor: "Object_and_actor_reference_variables"
  - toclevel: 2
    level: "3"
    line: "Class Reference Variables"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 9537
    anchor: "Class_Reference_Variables"
  - toclevel: 2
    level: "3"
    line: "Enumerations"
    number: "2.6"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 11277
    anchor: "Enumerations"
  - toclevel: 2
    level: "3"
    line: "Structs"
    number: "2.7"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Variables"
    byteoffset: 12987
    anchor: "Structs"
  displaytitle: "Legacy:UnrealScript Language Reference/Variables"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Variables ==\n\n===Simple Variables\
      \ ===\n\nHere are some examples of instance variable declarations in UnrealScript:\n\
      \n<uscript>\nvar int a; // Declare an integer variable named \"A\".\nvar byte\
      \ Table[64]; // Declare an array of 64 bytes named \"Table\".\nvar string[32]\
      \ PlayerName; // Declare a max 32-character string.\nvar actor Other; // Declare\
      \ a variable referencing an actor.\n</uscript>\n\nVariables can appear in two\
      \ kinds of places in UnrealScript: Instance variables, which apply to an entire\
      \ object, appear immediately after the class declarations. Local variables appear\
      \ within a function, and are only active while that function executes. Instance\
      \ variables are declared with the \"var\" keyword. Local variables are declared\
      \ with the \"local\" keyword.\n\nHere are the basic variable types supported\
      \ in UnrealScript:\n\n; byte : A single-byte value ranging from 0 to 255. \n\
      ; int : A 32-bit integer value. \n; bool : A boolean value: either \"true\"\
      \ or \"false\". \n; float : A 32-bit floating point number. \n; string : A string\
      \ of characters. \n\n; name : The name of an item in Unreal (such as the name\
      \ of a function, state, class, etc). Names are stored as a 16-bit index into\
      \ the global name table. Names correspond to simple strings of 1-31 characters.\
      \ Names are not like strings: strings can be modified dynamically, but names\
      \ can only take on predefined name values.\n\n; enum : A variable that can take\
      \ on one of several predefined name values. For example, the ELightType enumeration\
      \ defined in the Actor script describes a dynamic light and takes on a value\
      \ like LT_None, LT_Pulse, LT_Strobe, and so on.\n\n; struct : Similar to C structures,\
      \ UnrealScript structs let you create new variable types that contain sub-variables.\
      \ For example, two commonly-used structs are \"vector\", which consists of an\
      \ X, Y, and Z component; and \"rotator\", which consists of a pitch, yaw, and\
      \ roll component. Note that structs are passed by value.\n\n; object and actor\
      \ references : A variable that refers to another object or actor in the world.\
      \ For example, the Pawn class has an \"Enemy\" actor reference that specifies\
      \ which actor the pawn should be trying to attack. Object and actor references\
      \ are very powerful tools, because they enable you to access the variables and\
      \ functions of another actor. For example, in the Pawn script, you can write\
      \ \"Enemy.Damage(123)\" to call your enemy's Damage function &ndash; resulting\
      \ in the enemy taking damage. Object references may also contain a special value\
      \ called \"None\", which is the equivalent of the C \"NULL\" pointer: it says\
      \ \"this variable doesn't refer to any object\".\n\nVariables may also contain\
      \ additional specifiers such as \"const\" that further describe the variable.\
      \ Actually, there are quite a lot of specifiers which you wouldn't expect to\
      \ see in a general-purpose programming language, mainly as a result of wanting\
      \ UnrealScript to natively support many game- and environment-specific concepts:\n\
      \n; const : Advanced. Treats the contents of the variable as a constant. In\
      \ UnrealScript, you can read the value of const variables, but you can't write\
      \ to them. \"Const\" is only used for variables which the engine is responsible\
      \ for updating, and which can't be safely updated from UnrealScript, such as\
      \ an actor's Location (which can only be set by calling the SetLocation or MoveActor\
      \ functions). \n; editconst : Advanced. The variable can be seen in UnrealEd\
      \ but not edited. A variable that is editconst is not implictly \"const\".\n\
      ; input : Advanced. Makes the variable accessible to Unreal's input system,\
      \ so that input (such as button presses and joystick movements) can be directly\
      \ mapped onto it. Only relevant with variables of type \"byte\" and \"float\"\
      . \n; transient : Advanced. Declares that the variable is for temporary use,\
      \ and isn't part of the object's persistent state. Transient variables are not\
      \ saved to disk. Transient variables are initialized to zero when an actor is\
      \ loaded. \n; native : Advanced. Declares that the variable is loaded and saved\
      \ by C++ code, rather than by UnrealScript.\n; private : The variable is private,\
      \ and may only be accessed by the class's script; no other classes (including\
      \ subclasses) may access it.\n; travel : Advanced. \"Travel\" is supported only\
      \ for the player's [[Legacy:PlayerPawn|PlayerPawn]] derived class and Inventory-derived\
      \ classes in his linked Inventory list. It means \"this variable should be saved\
      \ and restored when switching levels, so that it isn't forgotten\". This is\
      \ the mechanism that keeps your health and ammo counts intact when switching\
      \ levels. The combination of \"transient\" and \"travel\" isn't sensible (and\
      \ isn't used in Unreal), since transient objects are non persistent between\
      \ savegames, and \"travel\" implies the thing should persist between levels.\n\
      ; skip : Advanced. Only used for logical operators like && and ||. (More details\
      \ only available for Unreal licensees.)\n; export : Advanced. Only meaningful\
      \ for the [[Legacy:Brush|Brush]] variable in [[Legacy:Actor|Actor]] classes.\
      \ (More details only available for Unreal licensees.)\n\n===Arrays===\n\nArrays\
      \ are declared using the following syntax:\n\n<uscript>\nvar int MyArray[20];\
      \ // Declares an array of 20 ints.\n</uscript>\n\nUnrealScript supports only\
      \ single-dimensional arrays, though you can simulate multidimensional arrays\
      \ by carrying out the row/column math yourself. For information on Dynamic Arrays,\
      \ see below in the [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Advanced Language Features]]\
      \ section.\n\n===Editability===\n\nIn UnrealScript, you can make an instance\
      \ variable \"editable\", so that users can edit the variable's value in UnrealEd.\
      \ This mechanism is responsible for the entire contents of the \"Actor Properties\"\
      \ dialog in UnrealEd: everything you see there is simply an UnrealScript variable,\
      \ which has been declared editable.\n\nThe syntax for declaring an editable\
      \ variable is as follows:\n\n<uscript>\nvar() int MyInteger; // Declare an editable\
      \ integer in the default\n                     // category.\n\nvar(MyCategory)\
      \ bool MyBool; // Declare an editable bool in\n                            \
      \ // \"MyCategory\".\n</uscript>\n\nYou can also declare a variable as \"editconst\"\
      , which means that the variable should be visible but not editable UnrealEd.\
      \ Note that this only prevents the variable from being changed in the editor,\
      \ not in script. If you want a variable that is truly \"const\" but still visible\
      \ in the editor, you must declare it \"const editconst\":\n\n<uscript>\n// MyBool\
      \ is visible but not editable in UnrealEd\nvar(MyCategory) editconst bool MyBool;\n\
      \n// MyBool is visible but not editable in UnrealEd and\n// not changeable in\
      \ script\nvar(MyCategory) const editconst bool MyBool;\n</uscript>\n\n===Object\
      \ and actor reference variables===\n\nYou can declare a variable that refers\
      \ to an actor or object like this:\n\n<uscript>\nvar actor A; // An actor reference.\n\
      var pawn P; // A reference to an actor in the Pawn class.\nvar texture T; //\
      \ A reference to a texture object.\n</uscript>\n\nThe variable \"P\" above is\
      \ a reference to an actor in the Pawn class. Such a variable can refer to any\
      \ actor that belongs to a subclass of Pawn. For example, P might refer to a\
      \ Brute, or a Skaarj, or a Manta. It can be any kind of Pawn. However, P can\
      \ never refer to a Trigger actor (because Trigger is not a subclass of Pawn).\n\
      \nOne example of where it's handy to have a variable referring to an actor is\
      \ the Enemy variable in the Pawn class, which refers to the actor that the Pawn\
      \ is trying to attack.\n\nWhen you have a variable that refers to an actor,\
      \ you can access that actor's variables, and call its functions. For example:\n\
      \n<uscript>\n// Declare two variables that refer to a pawns.\nvar pawn P, Q;\n\
      \n// Here is a function that makes use of P.\n// It displays some information\
      \ about P.\nfunction MyFunction()\n{\n   // Set P's enemy to Q.\n   P.Enemy\
      \ = Q;\n\n   // Tell P to play his running animation.\n   P.PlayRunning();\n\
      }\n</uscript>\n\nVariables that refer to actors always either refer to a valid\
      \ actor (any actor that actually exists in the level), or they contain the value\
      \ \"None\". None is equivalent to the C/C++ \"NULL\" pointer. However, in UnrealScript,\
      \ it is safe to access variables and call functions with a \"None\" reference;\
      \ the result is always zero.\n\nNote that an object or actor reference \"points\
      \ to\" another actor or object, it doesn't \"contain\" an actor or object. The\
      \ C equivalent of an actor reference is a pointer to an object in the AActor\
      \ class (in C, you'd say an AActor*). For example, you could have two monsters\
      \ in the world, Bob and Fred, who are fighting each other. Bob's \"Enemy\" variable\
      \ would \"point to\" Fred, and Fred's \"Enemy\" variable would \"point to\"\
      \ Bob.\n\nUnlike C pointers, UnrealScript object references are always safe\
      \ and infallible. It is impossible for an object reference to refer to an object\
      \ that doesn't exist or is invalid (other than the special-case \"None\" value).\
      \ In UnrealScript, when an actor or object is destroyed, all references to it\
      \ are automatically set to \"None\".\n\n===Class Reference Variables===\n\n\
      In Unreal, classes are objects just like actors, textures, and sounds are objects.\
      \  Class objects belong to the class named \"class\".  Now, there will often\
      \ be cases where you'll want to store a reference to a class object, so that\
      \ you can spawn an actor belonging to that class (without knowing what the class\
      \ is at compile-time).  For example:\n\n<uscript>\nvar() class C;\nvar actor\
      \ A;\nA = Spawn( C ); // Spawn an actor belonging to some arbitrary class C.\n\
      </uscript>\n\nNow, be sure not to confuse the roles of a class C, and an object\
      \ O belonging to class C.  To give a really shaky analogy, a class is like a\
      \ pepper grinder, and an object is like pepper.  You can use the pepper grinder\
      \ (the class) to create pepper (objects of that class) by turning the crank\
      \ (calling the Spawn function)... '''but,''' a pepper grinder (a class) is not\
      \ pepper (an object belonging to the class), so you '''must not try to eat it!'''\n\
      \nWhen declaring variables that reference class objects, you can optionally\
      \ use the special class<classlimiter> syntax to limit the variable to only containing\
      \ references to classes which extend a given superclass.  For example, in the\
      \ declaration:\n\n<uscript>\nvar class<actor> ActorClass;\n</uscript>\n\nThe\
      \ variable ActorClass may only reference a class that extends the \"actor\"\
      \ class.  This is useful for improving compile-time type checking.   For example,\
      \ the Spawn function takes a class as a parameter, but only makes sense when\
      \ the given class is a subclass of Actor, and the class<classlimiter> syntax\
      \ causes the compiler to enforce that requirement.\n\nAs with dynamic object\
      \ casting, you can dynamically cast classes like this:\n\n<uscript>\nclass<actor>(\
      \ SomeFunctionCall() )\n</uscript>\n\n===Enumerations ===\n\nEnumerations exist\
      \ in UnrealScript as a convenient way to declare variables that can contain\
      \ \"one of\" a bunch of keywords. For example, the actor class contains the\
      \ enumeration EPhysics which describes the physics which Unreal should apply\
      \ to the actor. This can be set to one of the predefined values like PHYS_None,\
      \ PHYS_Walking, PHYS_Falling, and so on.\n\nInternally, enumerations are stored\
      \ as byte variables. In designing UnrealScript, enumerations were not seen as\
      \ a necessity, but it makes code so much easier to read to see that an actor's\
      \ physics mode is being set to \"PHYS_Swimming\" than (for example) \"3\".\n\
      \nHere is sample code that declares enumerations.\n\n<uscript>\n// Declare the\
      \ EColor enumeration, with three values.\nenum EColor\n{\n       CO_Red,\n \
      \      CO_Green,\n       CO_Blue\n};\n \n// Now, declare two variables of type\
      \ EColor.\nvar EColor ShirtColor, HatColor;\n\n// Alternatively, you can declare\
      \ variables and\n// enumerations together like this:\nvar enum EFruit\n{\n \
      \      FRUIT_Apple,\n       FRUIT_Orange,\n       FRUIT_Bannana\n} FirstFruit,\
      \ SecondFruit;\n</uscript>\n\nIn the Unreal source, we always declare enumeration\
      \ values like LT_Steady, PHYS_Falling, and so on, rather than as simply \"Steady\"\
      \ or \"Falling\". This is just a matter of programming style, and is not a requirement\
      \ of the language.\n\nUnrealScript only recognizes unqualified enum tags (like\
      \ FRUIT_Apple) in classes where the enumeration was defined, and in its subclasses.\
      \  If you need to refer to an enumeration tag defined somewhere else in the\
      \ class hierarchy, you must \"qualify it\":\n\n<uscript>\nFRUIT_Apple // If\
      \ Unreal can't find this enum tag...\nEFruit.FRUIT_Apple // Then qualify it\
      \ like this.\n</uscript>\n\n===Structs ===\n\nAn UnrealScript struct is a way\
      \ of cramming a bunch of variables together into a new kind of super-variable\
      \ called a struct. UnrealScript structs are just like C structs, in that they\
      \ can contain any simple variables or arrays.\n\nYou can declare a struct as\
      \ follows:\n\n<uscript>\n// A point or direction vector in 3D space.\n\nstruct\
      \ Vector\n{\n       var float X;\n       var float Y;\n       var float Z\n\
      };\n</uscript>\n\nOnce you declare a struct, and only after you have declared\
      \ it, you are ready to start declaring specific variables of that struct type:\n\
      \n<uscript>\n// Declare a bunch of variables of type Vector.\nvar Vector Position;\n\
      var Vector Destination;\n</uscript>\n\nTo access a component of a struct, use\
      \ code like the following.\n\n<uscript>\nfunction MyFunction()\n{\n       Local\
      \ Vector A, B, C;\n       \n       // Add some vectors.\n       C = A + B;\n\
      \n       // Add just the x components of the vectors.\n       C.X = A.X + B.X;\n\
      \n       // Pass vector C to a function.\n       SomeFunction( C );\n\n    \
      \   // Pass certain vector components to a function.\n       OtherFunction(\
      \ A.X, C.Z );\n}\n</uscript>\n\nYou can do anything with Struct variables that\
      \ you can do with other variables: you can assign variables to them, you can\
      \ pass them to functions, and you can access their components.\n\nThere are\
      \ several Structs defined in the Object class which are used throughout Unreal.\
      \ You should become familiar with their operation, as they are fundamental building\
      \ blocks of scripts: \n; Vector : A unique 3D point or vector in space, with\
      \ an X, Y, and Z component. \n; Plane : Defines a unique plane in 3D space.\
      \ A plane is defined by its X, Y, and Z components (which are assumed to be\
      \ normalized) plus its W component, which represents the distance of the plane\
      \ from the origin, along the plane's normal (which is the shortest line from\
      \ the plane to the origin). \n; Rotator : A rotation defining a unique orthogonal\
      \ coordinate system. A rotator contains Pitch, Yaw, and Roll components. \n\
      ; Coords : An arbitrary coordinate system in 3D space. \n; Color : An RGB color\
      \ value. \n; Region : Defines a unique convex region within a level.\n\n----\n\
      \nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Introduction]] &ndash; '''Section\
      \ 2 of 9''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Expressions]]"
  properties: []
  revId: 8517
name: "Legacy:UnrealScript Language Reference/Variables"
revision:
  revid: 8517
  parentid: 8518
  user: "Wormbo"
  timestamp: 1150839607.000000000
  comment: "added the legal stuff about the origin of the document"
timestamp: 1668786483.720862000
