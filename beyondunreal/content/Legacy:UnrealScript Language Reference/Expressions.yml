---
parse:
  title: "Legacy:UnrealScript Language Reference/Expressions"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Expressions\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Expressions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Constants\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Constants</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-4\"><a href=\"#Expressions_2\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Expressions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Converting_Object_References_Among_Classes\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Converting Object\
      \ References Among Classes</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"UnrealScript_Language_Reference\">UnrealScript\
      \ Language Reference</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Expressions?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Expressions\">Expressions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Expressions?section=2\"\
      \ title=\"Edit section: Expressions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Constants\">Constants</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Language_Reference/Expressions?section=3\"\
      \ title=\"Edit section: Constants\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In UnrealScript, you can specify constant values of\
      \ nearly all data types:</p>\n<ul>\n<li>Integer and byte constants are specified\
      \ with simple numbers, for example: 123</li>\n<li>If you must specify an integer\
      \ or byte constant in hexidecimal format, use i.e.: 0x123</li>\n<li>Floating\
      \ point constants are specified with decimal numbers like: 456.789</li>\n<li>String\
      \ constants must be enclosed in double quotes, for example: \"MyString\"</li>\n\
      <li>Name constants must be enclosed in single quotes, for example 'MyName'</li>\n\
      <li>Vector constants contain X, Y, and Z values like this: Vect(1.0,2.0,4.0)</li>\n\
      <li>Rotator constants contain Pitch, Yaw, and Roll values like this: Rot(0x8000,0x4000,0)</li>\n\
      <li>The \"None\" constant refers to \"no object\" (or equivalantly, \"no actor\"\
      ).</li>\n<li>The \"Self\" constant refers to \"this object\" (or equivalantly,\
      \ \"this actor\"), i.e. the object whose script is executing.</li>\n<li>General\
      \ object constants are specified by the object type followed by the object name\
      \ in single quotes, for example: texture ‘Default’</li>\n<li>EnumCount gives\
      \ you the number of elements in an enumeration, for example: EnumCount(ELightType)</li>\n\
      <li>ArrayCount gives you the number of elements in an array, for example: ArrayCount(Touching)</li>\n\
      </ul>\n<p>You can use the \"const\" keyword to declare constants which you can\
      \ later refer to by name.&#160; For example:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">const</span> LargeNumber<span class=\"\
      sy0\">=</span><span class=\"nu0\">123456</span>;\n<span class=\"kw1\">const</span>\
      \ <span class=\"kw6\">PI</span><span class=\"sy0\">=</span><span class=\"nu0\"\
      >3.14159</span>;\n<span class=\"kw1\">const</span> MyName<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Tim\"</span>;\n<span class=\"kw1\">const</span>\
      \ Northeast<span class=\"sy0\">=</span><span class=\"kw3\">Vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1.0</span>,<span class=\"nu0\">1.0</span>,<span\
      \ class=\"nu0\">0.0</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>Constants can be defined within classes or within structs.</p>\n<p>To access\
      \ a constant which was declared in another class, use the \"classname.constname\"\
      \ syntax, for example: Pawn.LargeNumber</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Expressions_2\">Expressions</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Expressions?section=4\"\
      \ title=\"Edit section: Expressions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>To assign a value to a variable, use \"=\" like this:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ Test<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n       <span class=\"kw1\">local</span> <span class=\"kw5\"\
      >int</span> i;\n       <span class=\"kw1\">local</span> <span class=\"kw5\"\
      >string</span><span class=\"br0\">[</span><span class=\"nu0\">80</span><span\
      \ class=\"br0\">]</span> s;\n       <span class=\"kw1\">local</span> <span class=\"\
      kw5\">vector</span> v, q;\n \n       i <span class=\"sy0\">=</span> <span class=\"\
      nu0\">10</span>; <span class=\"co1\">// Assign a value to integer variable i.</span>\n\
      \       s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello!\"</span>;\
      \ <span class=\"co1\">// Assign a value to string variable s.</span>\n     \
      \  v <span class=\"sy0\">=</span> q; <span class=\"co1\">// Copy value of vector\
      \ q to v.</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>In UnrealScript,\
      \ whenever a function or other expression requires a certain type of data (for\
      \ example, an \"float\"), and you specify a different type of data (for example,\
      \ an \"int), the compiler will try to convert the value you give to the proper\
      \ type. Conversions among all the numerical data types (byte, int, and float)\
      \ happen automatically, without any work on your part.</p>\n<p>UnrealScript\
      \ is also able to many other built-in data types to other types, if you explicitly\
      \ convert them in code. The syntax for this is:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> Test<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n      \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n     \
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span><span class=\"\
      br0\">[</span><span class=\"nu0\">80</span><span class=\"br0\">]</span> s;\n\
      \       <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> v,\
      \ q;\n       <span class=\"kw1\">local</span> <span class=\"kw5\">rotator</span>\
      \ r;\n \n       s <span class=\"sy0\">=</span> <span class=\"kw5\">string</span><span\
      \ class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ Convert integer i to a string, and assign it to s.</span>\n       s <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">string</span><span class=\"br0\"\
      >(</span>v<span class=\"br0\">)</span>; <span class=\"co1\">// Convert vector\
      \ v to a string, and assign it to s.</span>\n       v <span class=\"sy0\">=</span>\
      \ q <span class=\"sy0\">+</span> <span class=\"kw5\">vector</span><span class=\"\
      br0\">(</span>r<span class=\"br0\">)</span>; <span class=\"co1\">// Convert\
      \ rotation r to a vector, and add q.</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Here is the complete set of non-automatic conversions you can use\
      \ in UnrealScript:</p>\n<dl>\n<dt>String to Byte, Int, Float&#160;</dt>\n<dd>Tries\
      \ to convert a string like \"123\" to a value like 123. If the string doesn’\
      t represent a value, the result is 0.</dd>\n<dt>Byte, Int, Float, Vector, Rotation\
      \ to String&#160;</dt>\n<dd>Converts the number to its textual representation.</dd>\n\
      <dt>String to Vector, Rotation&#160;</dt>\n<dd>Tries to parse the vector or\
      \ rotation’s textual representation.</dd>\n<dt>String to Bool&#160;</dt>\n<dd>Converts\
      \ the case-insensitive words \"True\" or \"False\" to True and False; converts\
      \ any non-zero value to True; everything else is False.</dd>\n<dt>Bool to String&#160;</dt>\n\
      <dd>Result is either \"True\" or \"False\".</dd>\n<dt>Byte, Int, Float, Vector,\
      \ Rotation to Bool&#160;</dt>\n<dd>Converts nonzero values to True; zero values\
      \ to False.</dd>\n<dt>Bool to Byte, Int, Float&#160;</dt>\n<dd>Converts True\
      \ to 1; False to 0.</dd>\n<dt>Name to String&#160;</dt>\n<dd>Converts the name\
      \ to the text equivalant.</dd>\n<dt>Rotator to Vector&#160;</dt>\n<dd>Returns\
      \ a vector facing \"forward\" according to the rotation.</dd>\n<dt>Vector to\
      \ Rotator&#160;</dt>\n<dd>Returns a rotator pitching and yawing in the direction\
      \ of the vector; roll is zero.</dd>\n<dt>Object (or Actor) to Int&#160;</dt>\n\
      <dd>Returns an integer that is guaranteed unique for that object.</dd>\n<dt>Object\
      \ (or Actor) to Bool&#160;</dt>\n<dd>Returns False if the object is None; True\
      \ otherwise.</dd>\n<dt>Object (or Actor) to String&#160;</dt>\n<dd>Returns a\
      \ textual representation of the object.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Converting_Object_References_Among_Classes\">Converting Object References\
      \ Among Classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Expressions?section=5\"\
      \ title=\"Edit section: Converting Object References Among Classes\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Just like the conversion\
      \ functions above, which convert among simple datatypes, in UnrealScript you\
      \ can convert actor and object references among various types. For example,\
      \ all actors have a variable named \"Target\", which is a reference to another\
      \ actor. Say you are writing a script where you need to check and see if your\
      \ Target belongs to the \"Pawn\" actor class, and you need to do something special\
      \ with your target that only makes sense when it’s a pawn – for example, you\
      \ need to call one of the Pawn functions. The actor cast operators let you do\
      \ this. Here’s an example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw9\">actor</span> Target;\n<span class=\"co1\"\
      >//...</span>\n \n<span class=\"kw1\">function</span> TestActorConversions<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \       <span class=\"kw1\">local</span> <span class=\"kw9\">Pawn</span> P;\n\
      \ \n       <span class=\"co1\">// See if my target is a Pawn.</span>\n     \
      \  P <span class=\"sy0\">=</span> <span class=\"kw9\">Pawn</span><span class=\"\
      br0\">(</span>Target<span class=\"br0\">)</span>;\n       <span class=\"kw2\"\
      >if</span><span class=\"br0\">(</span> P <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span>\n       <span class=\"\
      br0\">{</span>\n               <span class=\"co1\">// Target is a pawn, so set\
      \ its Enemy to Self.</span>\n               P.<span class=\"me0\">Enemy</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">Self</span>;\n       <span\
      \ class=\"br0\">}</span>\n       <span class=\"kw2\">else</span>\n       <span\
      \ class=\"br0\">{</span>\n              <span class=\"co1\">// Target is not\
      \ a pawn.</span>\n       <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>To perform an actor conversion, type the class name followed by the\
      \ actor expression you wish to convert, in parenthesis. Such a conversion will\
      \ either succeed or fail based on whether the conversion is sensible. In the\
      \ above example, if your Target is referencing a Trigger object rather than\
      \ a pawn, the expression Pawn(Target) will return \"None\", since a Trigger\
      \ can’t be converted to a Pawn. However, if your Target is referencing a Brute\
      \ object, the conversion will successfully return the Brute, because Brute is\
      \ a subclass of Pawn.</p>\n<p>Thus, actor conversions have two purposes: First,\
      \ you can use them to see if a certain actor reference belongs to a certain\
      \ class. Second, you can use them to convert an actor reference from one class\
      \ to a more specific class. Note that these conversions don’t affect the actor\
      \ you’re converting at all – they just enable UnrealScript to treat the actor\
      \ reference as if it were a more specific type.</p>\n<p>Another example of conversions\
      \ lies in the Inventory script. Each Inventory actor is owned by a Pawn, even\
      \ though its Owner variable can refer to any Actor. So a common theme in the\
      \ Inventory code is to cast Owner to a Pawn, for example:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Called by engine when destroyed.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">Destroyed</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \       <span class=\"co1\">// Remove from owner's inventory.</span>\n     \
      \  <span class=\"kw2\">if</span><span class=\"br0\">(</span> <span class=\"\
      kw9\">Pawn</span><span class=\"br0\">(</span><span class=\"kw7\">Owner</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n               <span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Owner</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">DeleteInventory</span><span class=\"br0\">(</span>\
      \ <span class=\"kw6\">Self</span> <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>;</pre></div>\n</div>\n<table>\n<tr>\n<td><i>see also <a href=\"\
      /Legacy:Typecasting\" title=\"Legacy:Typecasting\">Typecasting</a> on the Wiki</i></td>\n\
      </tr>\n</table>\n<hr />\n<p>Prev Page: <a href=\"/Legacy:UnrealScript_Language_Reference/Variables\"\
      \ title=\"Legacy:UnrealScript Language Reference/Variables\">Legacy:UnrealScript\
      \ Language Reference/Variables</a> – <b>Section 3 of 9</b> – Next Page: <a href=\"\
      /Legacy:UnrealScript_Language_Reference/Functions\" title=\"Legacy:UnrealScript\
      \ Language Reference/Functions\">Legacy:UnrealScript Language Reference/Functions</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.135 seconds\nReal time usage:\
      \ 0.425 seconds\nPreprocessor visited node count: 69/1000000\nPreprocessor generated\
      \ node count: 215/1000000\nPost‐expand include size: 362/2097152 bytes\nTemplate\
      \ argument size: 96/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%   14.466      1 - -total\n100.00%   14.466\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3283-0!*!0!!en!*!*\
      \ and timestamp 20221118160423 and revision id 8501\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Functions"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Expressions"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Expressions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Expressions"
    byteoffset: 591
    anchor: "Expressions"
  - toclevel: 2
    level: "3"
    line: "Constants"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Expressions"
    byteoffset: 609
    anchor: "Constants"
  - toclevel: 2
    level: "3"
    line: "Expressions"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Expressions"
    byteoffset: 2208
    anchor: "Expressions_2"
  - toclevel: 2
    level: "3"
    line: "Converting Object References Among Classes"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Expressions"
    byteoffset: 4748
    anchor: "Converting_Object_References_Among_Classes"
  displaytitle: "Legacy:UnrealScript Language Reference/Expressions"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Expressions ==\n\n===Constants ===\n\
      \nIn UnrealScript, you can specify constant values of nearly all data types:\n\
      * Integer and byte constants are specified with simple numbers, for example:\
      \ 123\n* If you must specify an integer or byte constant in hexidecimal format,\
      \ use i.e.: 0x123\n* Floating point constants are specified with decimal numbers\
      \ like: 456.789\n* String constants must be enclosed in double quotes, for example:\
      \ \"MyString\"\n* Name constants must be enclosed in single quotes, for example\
      \ 'MyName'\n* Vector constants contain X, Y, and Z values like this: Vect(1.0,2.0,4.0)\n\
      * Rotator constants contain Pitch, Yaw, and Roll values like this: Rot(0x8000,0x4000,0)\n\
      * The \"None\" constant refers to \"no object\" (or equivalantly, \"no actor\"\
      ).\n* The \"Self\" constant refers to \"this object\" (or equivalantly, \"this\
      \ actor\"), i.e. the object whose script is executing.\n* General object constants\
      \ are specified by the object type followed by the object name in single quotes,\
      \ for example: texture ‘Default’\n* EnumCount gives you the number of elements\
      \ in an enumeration, for example: EnumCount(ELightType)\n* ArrayCount gives\
      \ you the number of elements in an array, for example: ArrayCount(Touching)\n\
      \nYou can use the \"const\" keyword to declare constants which you can later\
      \ refer to by name.&nbsp; For example:\n\n<uscript>\nconst LargeNumber=123456;\n\
      const PI=3.14159;\nconst MyName=\"Tim\";\nconst Northeast=Vect(1.0,1.0,0.0);\n\
      </uscript>\n\nConstants can be defined within classes or within structs.\n\n\
      To access a constant which was declared in another class, use the \"classname.constname\"\
      \ syntax, for example: Pawn.LargeNumber\n\n===Expressions ===\n\nTo assign a\
      \ value to a variable, use \"=\" like this:\n\n<uscript>\nfunction Test()\n\
      {\n       local int i;\n       local string[80] s;\n       local vector v, q;\n\
      \n       i = 10; // Assign a value to integer variable i.\n       s = \"Hello!\"\
      ; // Assign a value to string variable s.\n       v = q; // Copy value of vector\
      \ q to v.\n}\n</uscript>\n\nIn UnrealScript, whenever a function or other expression\
      \ requires a certain type of data (for example, an \"float\"), and you specify\
      \ a different type of data (for example, an \"int), the compiler will try to\
      \ convert the value you give to the proper type. Conversions among all the numerical\
      \ data types (byte, int, and float) happen automatically, without any work on\
      \ your part.\n\nUnrealScript is also able to many other built-in data types\
      \ to other types, if you explicitly convert them in code. The syntax for this\
      \ is:\n\n<uscript>\nfunction Test()\n{\n       local int i;\n       local string[80]\
      \ s;\n       local vector v, q;\n       local rotator r;\n \n       s = string(i);\
      \ // Convert integer i to a string, and assign it to s.\n       s = string(v);\
      \ // Convert vector v to a string, and assign it to s.\n       v = q + vector(r);\
      \ // Convert rotation r to a vector, and add q.\n}\n</uscript>\n\nHere is the\
      \ complete set of non-automatic conversions you can use in UnrealScript: \n\
      ; String to Byte, Int, Float : Tries to convert a string like \"123\" to a value\
      \ like 123. If the string doesn’t represent a value, the result is 0.\n; Byte,\
      \ Int, Float, Vector, Rotation to String : Converts the number to its textual\
      \ representation.\n; String to Vector, Rotation : Tries to parse the vector\
      \ or rotation’s textual representation. \n; String to Bool : Converts the case-insensitive\
      \ words \"True\" or \"False\" to True and False; converts any non-zero value\
      \ to True; everything else is False.\n; Bool to String : Result is either \"\
      True\" or \"False\".\n; Byte, Int, Float, Vector, Rotation to Bool : Converts\
      \ nonzero values to True; zero values to False.\n; Bool to Byte, Int, Float\
      \ : Converts True to 1; False to 0. \n; Name to String : Converts the name to\
      \ the text equivalant.\n; Rotator to Vector : Returns a vector facing \"forward\"\
      \ according to the rotation.\n; Vector to Rotator : Returns a rotator pitching\
      \ and yawing in the direction of the vector; roll is zero.\n; Object (or Actor)\
      \ to Int : Returns an integer that is guaranteed unique for that object.\n;\
      \ Object (or Actor) to Bool : Returns False if the object is None; True otherwise.\n\
      ; Object (or Actor) to String : Returns a textual representation of the object.\n\
      \n===Converting Object References Among Classes ===\n\nJust like the conversion\
      \ functions above, which convert among simple datatypes, in UnrealScript you\
      \ can convert actor and object references among various types. For example,\
      \ all actors have a variable named \"Target\", which is a reference to another\
      \ actor. Say you are writing a script where you need to check and see if your\
      \ Target belongs to the \"Pawn\" actor class, and you need to do something special\
      \ with your target that only makes sense when it’s a pawn &ndash; for example,\
      \ you need to call one of the Pawn functions. The actor cast operators let you\
      \ do this. Here’s an example:\n\n<uscript>\nvar actor Target;\n//...\n\nfunction\
      \ TestActorConversions()\n{\n       local Pawn P;\n\n       // See if my target\
      \ is a Pawn.\n       P = Pawn(Target);\n       if( P != None )\n       {\n \
      \              // Target is a pawn, so set its Enemy to Self.\n            \
      \   P.Enemy = Self;\n       }\n       else\n       {\n              // Target\
      \ is not a pawn.\n       }\n}\n</uscript>\n\nTo perform an actor conversion,\
      \ type the class name followed by the actor expression you wish to convert,\
      \ in parenthesis. Such a conversion will either succeed or fail based on whether\
      \ the conversion is sensible. In the above example, if your Target is referencing\
      \ a Trigger object rather than a pawn, the expression Pawn(Target) will return\
      \ \"None\", since a Trigger can’t be converted to a Pawn. However, if your Target\
      \ is referencing a Brute object, the conversion will successfully return the\
      \ Brute, because Brute is a subclass of Pawn.\n\nThus, actor conversions have\
      \ two purposes: First, you can use them to see if a certain actor reference\
      \ belongs to a certain class. Second, you can use them to convert an actor reference\
      \ from one class to a more specific class. Note that these conversions don’\
      t affect the actor you’re converting at all &ndash; they just enable UnrealScript\
      \ to treat the actor reference as if it were a more specific type.\n\nAnother\
      \ example of conversions lies in the Inventory script. Each Inventory actor\
      \ is owned by a Pawn, even though its Owner variable can refer to any Actor.\
      \ So a common theme in the Inventory code is to cast Owner to a Pawn, for example:\n\
      \n<uscript>\n// Called by engine when destroyed.\nfunction Destroyed()\n{\n\
      \       // Remove from owner's inventory.\n       if( Pawn(Owner)!=None )\n\
      \               Pawn(Owner).DeleteInventory( Self );\n};\n</uscript>\n\n{|\n\
      \n|-\n|''see also [[Legacy:Typecasting|Typecasting]] on the Wiki'' \n|}\n\n\
      ----\n\nPrev Page:  [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Variables]] &ndash;\
      \ '''Section 3 of 9''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Functions]]"
  properties: []
  revId: 8501
name: "Legacy:UnrealScript Language Reference/Expressions"
revision:
  revid: 8501
  parentid: 8503
  user: "Wormbo"
  timestamp: 1150839623.000000000
  comment: "added the legal stuff about the origin of the document"
timestamp: 1668787312.268637000
