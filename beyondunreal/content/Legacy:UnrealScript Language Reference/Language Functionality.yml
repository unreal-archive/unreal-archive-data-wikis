---
parse:
  title: "Legacy:UnrealScript Language Reference/Language Functionality"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript_Language_Reference\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript Language\
      \ Reference</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Language_Functionality\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Language Functionality</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-3\"\
      ><a href=\"#Built-In_Operators_And_Their_Precedence\"><span class=\"tocnumber\"\
      >2.1</span> <span class=\"toctext\">Built-In Operators And Their Precedence</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#General-Purpose_Functions\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">General-Purpose\
      \ Functions</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"UnrealScript_Language_Reference\">UnrealScript\
      \ Language Reference</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Language_Functionality?section=1\"\
      \ title=\"Edit section: UnrealScript Language Reference\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p><i>This subpage is part of\
      \ a document by Tim Sweeney. The Unreal Wiki has been granted permission to\
      \ host it. Please don't make any edits to these pages other than basic formatting\
      \ of the text. If you have more to say on a topic here, please start a new Wiki\
      \ page on it, for example from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> or <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal\
      \ Engine\">Unreal Engine</a>, and then add a \"related topics\" section to the\
      \ very end of a page here.</i></p>\n<blockquote class=\"legacyquote\">\n<p>Tim\
      \ Sweeney<br />\nEpic MegaGames, Inc.<br />\ntim@epicgames.com<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.epicgames.com\">http://www.epicgames.com</a></p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Language_Functionality\"\
      >Language Functionality</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Language_Functionality?section=2\"\
      \ title=\"Edit section: Language Functionality\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Built-In_Operators_And_Their_Precedence\"\
      >Built-In Operators And Their Precedence</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Language_Functionality?section=3\"\
      \ title=\"Edit section: Built-In Operators And Their Precedence\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript provides\
      \ a wide variety of C/C++/Java-style operators for such operations as adding\
      \ numbers together, comaring values, and incrementing variables. The complete\
      \ set of operators is defined in Object.u, but here is a recap. Here are the\
      \ standard operators, in order of precedence.&#160; Note that all of the C style\
      \ operators have the same precedence as they do in C.</p>\n<table class=\"wikitable\"\
      >\n<tr>\n<td style=\"text-align: center\"><b>Operator</b></td>\n<td><b>Types\
      \ it applies to</b></td>\n<td><b>Meaning</b></td>\n</tr>\n<tr>\n<td style=\"\
      text-align: center\"><code>$</code></td>\n<td>string</td>\n<td>String concatenation</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>*=</code></td>\n<td>byte,\
      \ int, float, vector, rotation</td>\n<td>Multiply and assign</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: center\"><code>/=</code></td>\n<td>byte, int, float,\
      \ vector, rotation</td>\n<td>Divide and assign</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: center\"><code>+=</code></td>\n<td>byte, int, float, vector</td>\n\
      <td>Add and assign</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>-=</code></td>\n\
      <td>byte, int, float, vector</td>\n<td>Subtract and assign</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: center\"><code>||</code></td>\n<td>bool</td>\n<td>Logical\
      \ or</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>&amp;&amp;</code></td>\n\
      <td>bool</td>\n<td>Logical and</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"\
      ><code>&amp;</code></td>\n<td>int</td>\n<td>Bitwise and</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: center\"><code>|</code></td>\n<td>int</td>\n<td>Bitwise\
      \ or</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>^</code></td>\n\
      <td>int</td>\n<td>Bitwise exlusive or</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ center\"><code>!=</code></td>\n<td><i>all</i></td>\n<td>Compare for inequality</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>==</code></td>\n<td><i>all</i></td>\n\
      <td>Compare for equality</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"\
      ><code>&lt;</code></td>\n<td>byte, int, float, string</td>\n<td>Less than</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>&gt;</code></td>\n<td>byte,\
      \ int, float, string</td>\n<td>Greater than</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: center\"><code>&lt;=</code></td>\n<td>byte, int, float, string</td>\n\
      <td>Less than or equal to</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"\
      ><code>&gt;=</code></td>\n<td>byte, int, float, string</td>\n<td>Greater than\
      \ or equal to</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>~=</code></td>\n\
      <td>float, string</td>\n<td>Approximate equality (within 0.0001), case-insensitive\
      \ equality</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>&lt;&lt;</code></td>\n\
      <td>int, vector</td>\n<td>Left shift (int), Forward vector transformation (vector)</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>&gt;&gt;</code></td>\n<td>int,\
      \ vector</td>\n<td>Right shift (int), Reverse vector transformation (vector)</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>+</code></td>\n<td>byte,\
      \ int, float, vector</td>\n<td>Add</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ center\"><code>-</code></td>\n<td>byte, int, float, vector</td>\n<td>Subtract</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>%</code></td>\n<td>float</td>\n\
      <td>Modulo (remainder after division)</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ center\"><code>*</code></td>\n<td>byte, int, float, vector, rotation</td>\n\
      <td>Multiply</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>/</code></td>\n\
      <td>byte, int, float, vector, rotation</td>\n<td>Divide</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: center\"><code>dot</code></td>\n<td>vector</td>\n<td>Vector\
      \ dot product</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>cross</code></td>\n\
      <td>vector</td>\n<td>Vector cross product</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ center\"><code>**</code></td>\n<td>float</td>\n<td>Exponentiation</td>\n</tr>\n\
      </table>\n<p>The above table lists the operators in order of precedence (with\
      \ operators of the same precedence grouped together). When you type in a complex\
      \ expression like \"1*2+3*4\", UnrealScript automatically groups the operators\
      \ by precedence. Since multiplication has a higher precedence than addition,\
      \ the expression is evaluated as \"(1*2)+(3*4)\".</p>\n<p>The \"&amp;&amp;\"\
      \ (logical and) and \"||\" (logical or) operators are short-circuited: if the\
      \ result of the expression can be determined solely from the first expression\
      \ (for example, if the first argument of &amp;&amp; is false), the second expression\
      \ is not evaluated.</p>\n<p>In addition, UnrealScript supports the following\
      \ unary operators:</p>\n<table class=\"wikitable\">\n<tr>\n<td style=\"text-align:\
      \ center\"><b>Operator</b></td>\n<td><b>Types it applies to</b></td>\n<td><b>Meaning</b></td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\"><code>!</code></td>\n<td>bool</td>\n\
      <td>Logical not</td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><code>-</code></td>\n\
      <td>int, float</td>\n<td>negation</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ center\"><code>~</code></td>\n<td>int</td>\n<td>bitwise negation</td>\n</tr>\n\
      <tr>\n<td style=\"text-align: center\"><code>++, --</code></td>\n<td>int, float</td>\n\
      <td>Increment or Decrement (either before or after a variable)</td>\n</tr>\n\
      </table>\n<dl>\n<dd></dd>\n</dl>\n<table>\n<tr>\n<td><i>more on this topic in\
      \ the Wiki: <a href=\"/Legacy:Operators\" title=\"Legacy:Operators\">Operators</a></i></td>\n\
      </tr>\n</table>\n<h3><span class=\"mw-headline\" id=\"General-Purpose_Functions\"\
      >General-Purpose Functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Language_Reference/Language_Functionality?section=4\"\
      \ title=\"Edit section: General-Purpose Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Integer functions:</p>\n<dl>\n<dt>int Rand( int Max\
      \ )&#160;</dt>\n<dd>Returns a random number from 0 to Max-1.</dd>\n<dt>int Min(\
      \ int A, int B )&#160;</dt>\n<dd>Returns the minimum of the two numbers.</dd>\n\
      <dt>int Max( int A, int B )&#160;</dt>\n<dd>Returns the maximum of the two numbers.</dd>\n\
      <dt>int Clamp( int V, int A, int B )&#160;</dt>\n<dd>Returns the first number\
      \ clamped to the interval from A to B.</dd>\n</dl>\n<p>Floating point functions:</p>\n\
      <dl>\n<dt>float Abs( float A )</dt>\n<dd>Returns the absolute value of the number.</dd>\n\
      <dt>float Sin( float A )</dt>\n<dd>Returns the sine of the number expressed\
      \ in radius.</dd>\n<dt>float Cos( float A )</dt>\n<dd>Returns the cosine of\
      \ the number expressed in radians.</dd>\n<dt>float Tan( float A )</dt>\n<dd>Returns\
      \ the tangent of the number expressed in radians.</dd>\n<dt>float Atan( float\
      \ A )</dt>\n<dd>Returns the inverse tangent of the number expressed in radians.</dd>\n\
      <dt>float Exp( float A )</dt>\n<dd>Returns the constant \"e\" raised to the\
      \ power of A.</dd>\n<dt>float Loge( float A )</dt>\n<dd>Returns the log (to\
      \ the base \"e\") of A.</dd>\n<dt>float Sqrt( float A )</dt>\n<dd>Returns the\
      \ square root of A.</dd>\n<dt>float Square( float A )</dt>\n<dd>Returns the\
      \ square of A = A*A.</dd>\n<dt>float FRand()</dt>\n<dd>Returns a random number\
      \ from 0.0 to 1.0.</dd>\n<dt>float FMin( float A, float B )</dt>\n<dd>Returns\
      \ the minimum of two numbers.</dd>\n<dt>float FMax( float A, float B )</dt>\n\
      <dd>Returns the maximum of two numbers.</dd>\n<dt>float FClamp( float V, float\
      \ A, float B )</dt>\n<dd>Returns the first number clamped to the interval from\
      \ A to B.</dd>\n<dt>float Lerp( float Alpha, float A, float B )</dt>\n<dd>Returns\
      \ the linear interpolation between A and B.</dd>\n<dt>float Smerp( float Alpha,\
      \ float A, float B )</dt>\n<dd>Returns an Alpha-smooth nonlinear interpolation\
      \ between A and B.</dd>\n</dl>\n<p>Unreal’s string functions have a distinct\
      \ Basic look and feel:</p>\n<dl>\n<dt>int Len( coerce string[255] S )</dt>\n\
      <dd>Returns the length of a string.</dd>\n<dt>int InStr( coerce string[255]\
      \ S, coerce string[255] t)</dt>\n<dd>Returns the offset into the first string\
      \ of the second string if it exists, or -1 if not.</dd>\n<dt>string[255] Mid\
      \ ( coerce string[255] S, int i, optional int j )</dt>\n<dd>Returns the middle\
      \ part of the string S, starting and character i and including j characters\
      \ (or all of them if j is not specified).</dd>\n<dt>string[255] Left ( coerce\
      \ string[255] S, int i )</dt>\n<dd>Returns the i leftmost characters of s.</dd>\n\
      <dt>string[255] Right ( coerce string[255] S, int i )</dt>\n<dd>Returns the\
      \ i rightmost characters of s.</dd>\n<dt>string[255] Caps ( coerce string[255]\
      \ S )</dt>\n<dd>Returns S converted to uppercase.</dd>\n</dl>\n<p>Vector functions:</p>\n\
      <dl>\n<dt>float Size( vector A )</dt>\n<dd>Returns the euclidean size of the\
      \ vector (the square root of the sum of the components squared).</dd>\n<dt>vector\
      \ Normal( vector A )</dt>\n<dd>Returns a vector of size 1.0, facing in the direction\
      \ of the specified vector.</dd>\n<dt>Invert ( out vector X, out vector Y, out\
      \ vector Z )</dt>\n<dd>Inverts a coordinate system specified by three axis vectors.</dd>\n\
      <dt>vector VRand ( )</dt>\n<dd>Returns a uniformly distributed random vector.</dd>\n\
      <dt>float Dist ( vector A, vector B )</dt>\n<dd>Returns the euclidean distance\
      \ between two points.</dd>\n<dt>vector MirrorVectorByNormal( vector Vect, vector\
      \ Normal )</dt>\n<dd>Mirrors a vector about a specified normal vector.</dd>\n\
      </dl>\n<table>\n<tr>\n<td><i>more on this topic in the Wiki: <a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">Global Function</a></i></td>\n</tr>\n</table>\n\
      <hr />\n<p>Prev Page: <a href=\"/Legacy:UnrealScript_Language_Reference/States\"\
      \ title=\"Legacy:UnrealScript Language Reference/States\">Legacy:UnrealScript\
      \ Language Reference/States</a> – <b>Section 7 of 9</b> – Next Page: <a href=\"\
      /Legacy:UnrealScript_Language_Reference/Advanced_Language_Features\" title=\"\
      Legacy:UnrealScript Language Reference/Advanced Language Features\">Legacy:UnrealScript\
      \ Language Reference/Advanced Language Features</a></p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.074 seconds\nReal time usage: 0.256 seconds\nPreprocessor\
      \ visited node count: 59/1000000\nPreprocessor generated node count: 171/1000000\n\
      Post‐expand include size: 362/2097152 bytes\nTemplate argument size: 96/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   23.119      1 - -total\n100.00%   23.119      1 - Template:Innerbox\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3286-0!*!0!!en!*!*\
      \ and timestamp 20221118160415 and revision id 44967\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Advanced Language Features"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/States"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.epicgames.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Language Reference"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Language_Functionality"
    byteoffset: 0
    anchor: "UnrealScript_Language_Reference"
  - toclevel: 1
    level: "2"
    line: "Language Functionality"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Language_Functionality"
    byteoffset: 591
    anchor: "Language_Functionality"
  - toclevel: 2
    level: "3"
    line: "Built-In Operators And Their Precedence"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Language_Functionality"
    byteoffset: 620
    anchor: "Built-In_Operators_And_Their_Precedence"
  - toclevel: 2
    level: "3"
    line: "General-Purpose Functions"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Language_Reference/Language_Functionality"
    byteoffset: 4800
    anchor: "General-Purpose_Functions"
  displaytitle: "Legacy:UnrealScript Language Reference/Language Functionality"
  iwlinks: []
  wikitext:
    text: "==UnrealScript Language Reference ==\n\n''This subpage is part of a document\
      \ by Tim Sweeney. The Unreal Wiki has been granted permission to host it. Please\
      \ don't make any edits to these pages other than basic formatting of the text.\
      \ If you have more to say on a topic here, please start a new Wiki page on it,\
      \ for example from [[Legacy:UnrealScript|UnrealScript]] or [[Legacy:Unreal Engine|Unreal\
      \ Engine]], and then add a \"related topics\" section to the very end of a page\
      \ here.''\n\n{{innerbox| Tim Sweeney <br />Epic MegaGames, Inc. <br />tim@epicgames.com\
      \ <br />http://www.epicgames.com\n\n}}\n\n==Language Functionality ==\n\n===Built-In\
      \ Operators And Their Precedence ===\n\nUnrealScript provides a wide variety\
      \ of C/C++/Java-style operators for such operations as adding numbers together,\
      \ comaring values, and incrementing variables. The complete set of operators\
      \ is defined in Object.u, but here is a recap. Here are the standard operators,\
      \ in order of precedence.&nbsp; Note that all of the C style operators have\
      \ the same precedence as they do in C.\n\n{| class=\"wikitable\"\n\n|-\n| style=\"\
      text-align: center\" |'''Operator'''\n|'''Types it applies to'''\n|'''Meaning'''\
      \ \n|-\n| style=\"text-align: center\" |<code>$</code>\n|string\n|String concatenation\n\
      |-\n| style=\"text-align: center\" |<code>*=</code>\n|byte, int, float, vector,\
      \ rotation\n|Multiply and assign\n|-\n| style=\"text-align: center\" |<code>/=</code>\n\
      |byte, int, float, vector, rotation\n|Divide and assign\n|-\n| style=\"text-align:\
      \ center\" |<code>+=</code>\n|byte, int, float, vector\n|Add and assign\n|-\n\
      | style=\"text-align: center\" |<code>-=</code>\n|byte, int, float, vector\n\
      |Subtract and assign\n|-\n| style=\"text-align: center\" |<code><nowiki>||</nowiki></code>\n\
      |bool\n|Logical or\n|-\n| style=\"text-align: center\" |<code>&&</code>\n|bool\n\
      |Logical and\n|-\n| style=\"text-align: center\" |<code>&</code>\n|int\n|Bitwise\
      \ and\n|-\n| style=\"text-align: center\" |<code><nowiki>|</nowiki></code>\n\
      |int\n|Bitwise or\n|-\n| style=\"text-align: center\" |<code>^</code>\n|int\n\
      |Bitwise exlusive or\n|-\n| style=\"text-align: center\" |<code>!=</code>\n\
      |''all''\n|Compare for inequality\n|-\n| style=\"text-align: center\" |<code><nowiki>==</nowiki></code>\n\
      |''all''\n|Compare for equality\n|-\n| style=\"text-align: center\" |<code><</code>\n\
      |byte, int, float, string\n|Less than\n|-\n| style=\"text-align: center\" |<code>></code>\n\
      |byte, int, float, string\n|Greater than\n|-\n| style=\"text-align: center\"\
      \ |<code><=</code>\n|byte, int, float, string\n|Less than or equal to\n|-\n\
      | style=\"text-align: center\" |<code>>=</code>\n|byte, int, float, string\n\
      |Greater than or equal to\n|-\n| style=\"text-align: center\" |<code>~=</code>\n\
      |float, string\n|Approximate equality (within 0.0001), case-insensitive equality\n\
      |-\n| style=\"text-align: center\" |<code><<</code>\n|int, vector\n|Left shift\
      \ (int), Forward vector transformation (vector)\n|-\n| style=\"text-align: center\"\
      \ |<code>>></code>\n|int, vector\n|Right shift (int), Reverse vector transformation\
      \ (vector)\n|-\n| style=\"text-align: center\" |<code>+</code>\n|byte, int,\
      \ float, vector\n|Add\n|-\n| style=\"text-align: center\" |<code>-</code>\n\
      |byte, int, float, vector\n|Subtract\n|-\n| style=\"text-align: center\" |<code>%</code>\n\
      |float\n|Modulo (remainder after division)\n|-\n| style=\"text-align: center\"\
      \ |<code>*</code>\n|byte, int, float, vector, rotation\n|Multiply\n|-\n| style=\"\
      text-align: center\" |<code>/</code>\n|byte, int, float, vector, rotation\n\
      |Divide\n|-\n| style=\"text-align: center\" |<code>dot</code>\n|vector\n|Vector\
      \ dot product\n|-\n| style=\"text-align: center\" |<code>cross</code>\n|vector\n\
      |Vector cross product\n|-\n| style=\"text-align: center\" |<code>**</code>\n\
      |float\n|Exponentiation\n|}\n\nThe above table lists the operators in order\
      \ of precedence (with operators of the same precedence grouped together). When\
      \ you type in a complex expression like \"1*2+3*4\", UnrealScript automatically\
      \ groups the operators by precedence. Since multiplication has a higher precedence\
      \ than addition, the expression is evaluated as \"(1*2)+(3*4)\".\n\nThe \"&&\"\
      \ (logical and) and \"||\" (logical or) operators are short-circuited: if the\
      \ result of the expression can be determined solely from the first expression\
      \ (for example, if the first argument of && is false), the second expression\
      \ is not evaluated.\n\nIn addition, UnrealScript supports the following unary\
      \ operators: \n\n{| class=\"wikitable\"\n\n|-\n| style=\"text-align: center\"\
      \ |'''Operator'''\n|'''Types it applies to'''\n|'''Meaning''' \n|-\n| style=\"\
      text-align: center\" |<code>!</code>\n|bool\n|Logical not\n|-\n| style=\"text-align:\
      \ center\" |<code>-</code>\n|int, float\n|negation\n|-\n| style=\"text-align:\
      \ center\" |<code>~</code>\n|int\n|bitwise negation\n|-\n| style=\"text-align:\
      \ center\" |<code>++, --</code>\n|int, float\n|Increment or Decrement (either\
      \ before or after a variable)\n|}\n:\n\n{|\n\n|-\n|''more on this topic in the\
      \ Wiki: [[Legacy:Operators|Operators]]'' \n|}\n\n===General-Purpose Functions\
      \ ===\n\nInteger functions:\n;int Rand( int Max ) : Returns a random number\
      \ from 0 to Max-1.\n;int Min( int A, int B ) : Returns the minimum of the two\
      \ numbers.\n;int Max( int A, int B ) : Returns the maximum of the two numbers.\n\
      ;int Clamp( int V, int A, int B ) : Returns the first number clamped to the\
      \ interval from A to B.\n\nFloating point functions:\n;float Abs( float A ):\
      \ Returns the absolute value of the number.\n;float Sin( float A ): Returns\
      \ the sine of the number expressed in radius.\n;float Cos( float A ): Returns\
      \ the cosine of the number expressed in radians.\n;float Tan( float A ): Returns\
      \ the tangent of the number expressed in radians.\n;float Atan( float A ): Returns\
      \ the inverse tangent of the number expressed in radians.\n;float Exp( float\
      \ A ): Returns the constant \"e\" raised to the power of A.\n;float Loge( float\
      \ A ): Returns the log (to the base \"e\") of A.\n;float Sqrt( float A ): Returns\
      \ the square root of A.\n;float Square( float A ): Returns the square of A =\
      \ A*A.\n;float FRand(): Returns a random number from 0.0 to 1.0.\n;float FMin(\
      \ float A, float B ): Returns the minimum of two numbers.\n;float FMax( float\
      \ A, float B ): Returns the maximum of two numbers.\n;float FClamp( float V,\
      \ float A, float B ): Returns the first number clamped to the interval from\
      \ A to B.\n;float Lerp( float Alpha, float A, float B ): Returns the linear\
      \ interpolation between A and B.\n;float Smerp( float Alpha, float A, float\
      \ B ): Returns an Alpha-smooth nonlinear interpolation between A and B.\n\n\
      Unreal’s string functions have a distinct Basic look and feel:\n;int Len( coerce\
      \ string[255] S ): Returns the length of a string.\n;int InStr( coerce string[255]\
      \ S, coerce string[255] t): Returns the offset into the first string of the\
      \ second string if it exists, or -1 if not.\n;string[255] Mid ( coerce string[255]\
      \ S, int i, optional int j ): Returns the middle part of the string S, starting\
      \ and character i and including j characters (or all of them if j is not specified).\n\
      ;string[255] Left ( coerce string[255] S, int i ): Returns the i leftmost characters\
      \ of s.\n;string[255] Right ( coerce string[255] S, int i ): Returns the i rightmost\
      \ characters of s.\n;string[255] Caps ( coerce string[255] S ): Returns S converted\
      \ to uppercase.\n\nVector functions: \n;float Size( vector A ): Returns the\
      \ euclidean size of the vector (the square root of the sum of the components\
      \ squared).\n;vector Normal( vector A ): Returns a vector of size 1.0, facing\
      \ in the direction of the specified vector.\n;Invert ( out vector X, out vector\
      \ Y, out vector Z ): Inverts a coordinate system specified by three axis vectors.\n\
      ;vector VRand ( ): Returns a uniformly distributed random vector.\n;float Dist\
      \ ( vector A, vector B ): Returns the euclidean distance between two points.\n\
      ;vector MirrorVectorByNormal( vector Vect, vector Normal ): Mirrors a vector\
      \ about a specified normal vector.\n\n{|\n\n|-\n|''more on this topic in the\
      \ Wiki: [[Legacy:Global Function|Global Function]] \n|}\n\n----\n\nPrev Page:\
      \ [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/States]] &ndash; '''Section 7 of 9'''\
      \ &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Advanced Language\
      \ Features]]"
  properties: []
  revId: 44967
name: "Legacy:UnrealScript Language Reference/Language Functionality"
revision:
  revid: 44967
  parentid: 8510
  user: "61.152.183.56"
  timestamp: 1329098290.000000000
  comment: "/* Built-In Operators And Their Precedence */ fix corrupted table"
timestamp: 1668787304.583336000
