---
parse:
  title: "Delegates"
  text:
    text: "<p>A <b>delegate</b> is a special kind of variable/function combination.\
      \ Delegates were introduced in <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"\
      new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine 2</a> and\
      \ are declared similar to regular <a href=\"/Functions\" title=\"Functions\"\
      >functions</a>. The difference is, that instead of the keyword <i>function</i>\
      \ or <i>event</i>, delegate functions are declared with the keyword <i>delegate</i>.\
      \ In <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine 3</a>,\
      \ delegate functions were accompanied by a delegate variable type, so delegates\
      \ can now also be stored in structs or arrays and can be passed into or returned\
      \ by a function.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Delegate_functions\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Delegate functions</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Delegate_variable_type\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Delegate variable type</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Delegates_in_Default_Properties\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Delegates in Default Properties</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#Assigning_delegates_in_Subobjects\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Assigning delegates\
      \ in Subobjects</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"\
      ><a href=\"#Delegates_and_garbage_collection\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Delegates and garbage collection</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Delegate_functions\"\
      >Delegate functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Delegates?section=1\" title=\"Edit section: Delegate\
      \ functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>A delegate function declaration consists of the following parts:</p>\n<pre><i><a\
      \ href=\"/Function#Modifiers\" title=\"Function\" class=\"mw-redirect\">[modifiers]</a></i>\
      \ <b>delegate</b> <i><a href=\"/Types\" title=\"Types\">[returntype]</a></i>\
      \ <i>delegatename</i> <b>(</b> <i><a href=\"/Function#Parameters\" title=\"\
      Function\" class=\"mw-redirect\">[parameter declarations]</a></i> <b>)</b> <i>body_or_semicolon</i>\n\
      </pre>\n<p>Like regular functions, delegates can have a function body, which\
      \ will be the default function associated with the delegate. If no body is defined,\
      \ the delegate declaration must be terminated with a semicolon.</p>\n<p>Like\
      \ for regular function declarations, the return type is optional. Similarly,\
      \ parameter declarations are the same as for regular functions. When assigning\
      \ a function to the delegate, the function's parameter and return types must\
      \ match the delegate's. The compiler will make sure this is the case and otherwise\
      \ throw an error. Parameter names must always be specified, even if the delegate\
      \ does not have a body definition.</p>\n<p>Most function modifiers can be used\
      \ for delegate functions, but some of them don't make much sense. For example,\
      \ delegates can't be <b>static</b> and do not support the Unreal Engine 3 replication\
      \ modifiers <b>client</b>, <b>server</b> and <b>reliable</b>. Note that most\
      \ modifiers, like <b>simulated</b>, only apply to the delegate body and will\
      \ not have any effect while other functions are assigned to the delegate.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Delegate_variable_type\">Delegate variable\
      \ type</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Delegates?section=2\" title=\"Edit section: Delegate\
      \ variable type\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The delegate type for variables, parameters and function return types in\
      \ Unreal Engine 3 looks very similar to a class limiter:</p>\n<pre><b>delegate\
      \ &lt;</b> <i>delegatename</i> <b>&gt;</b>\n</pre>\n<p>Here, <i>delegatename</i>\
      \ is the name of a delegate function, whose prototype (i.e. parameters and return\
      \ type) will be used for the delegate variable. Only functions with the same\
      \ parameter and return types as the referenced delegate function may be assigned\
      \ to the variable.</p>\n<p>While it is possible to declare arrays of delegates,\
      \ the compiler only allows calling referenced functions through non-array variables.\
      \ The element of a delegate array first needs to be assigned to a non-array\
      \ variable of the same delegate type, but can then be called like a normal function.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ callRandomDelegate<span class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>delegate<span\
      \ class=\"sy0\">&lt;</span>X<span class=\"sy0\">&gt;</span> <span class=\"sy0\"\
      >&gt;</span> delegateList<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> delegate<span class=\"sy0\">&lt;</span>X<span\
      \ class=\"sy0\">&gt;</span> selectedDelegate;\n \n  <span class=\"co1\">// select\
      \ a random delegate from the list</span>\n  selectedDelegate <span class=\"\
      sy0\">=</span> delegateList<span class=\"br0\">[</span><span class=\"kw3\">Rand</span><span\
      \ class=\"br0\">(</span>delegateList.<span class=\"me0\">Length</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">]</span>;\n  <span class=\"co1\"\
      >// call that delegate</span>\n  selectedDelegate<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >delegate</span> X<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>This example also demonstrates, that the closing angle brackets in\
      \ arrays of delegates need to be separated by whitespace, just like with class\
      \ limiters.</p>\n<h2><span class=\"mw-headline\" id=\"Delegates_in_Default_Properties\"\
      >Delegates in Default Properties</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Delegates?section=3\"\
      \ title=\"Edit section: Delegates in Default Properties\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>While the compiler won't complain\
      \ about any assignment of functions to delegates in the default properties and\
      \ this is also done in some of Epic's own code, it doesn't seem to work well\
      \ for normal users. Calling a delegate that got assigned per default properties\
      \ may lead to a crash of the whole engine with an access violation error.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Assigning_delegates_in_Subobjects\">Assigning\
      \ delegates in Subobjects</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Delegates?section=4\" title=\"\
      Edit section: Assigning delegates in Subobjects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The following issue exists only in the Unreal Engine\
      \ 3 after the change of DefaultProperties linking.</p>\n<p>When assigning delegates\
      \ of <a href=\"/Subobject\" title=\"Subobject\" class=\"mw-redirect\">subobjects</a>,\
      \ be aware that the call will be executed within the context of <code>DEFAULT__OBJECTNAME</code>.\
      \ One can tell that by verifying its instance name output such as <code>DEFAULT__OBJECTNAME</code>.</p>\n\
      <p>To avoid this: Either assign the delegate at run-time or pass the actual\
      \ object reference via the delegate's parameters.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Delegates_and_garbage_collection\">Delegates and garbage collection</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Delegates?section=5\" title=\"Edit section: Delegates and garbage\
      \ collection\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>When class method is assigned to a delegate, a strong reference is created\
      \ to the class instance containing that method. It may prevent that instance\
      \ from garbage collection.</p>\n<p>For example, it's absolutely erroneous to\
      \ assign method of class referencing (directly or indirectly) current level\
      \ to a delegate within UI. User interface persists across level changes, and\
      \ this delegate reference will prevent old level from garbage collection, leading\
      \ to a crash.</p>\n<p>Basically, in order to gain access to current world in\
      \ UI delegates, you must use <code>GetPlayerOwner()</code> function.</p>\n<p>Note\
      \ that just declaring function static is not enough to prevent it from creating\
      \ reference. You must actually reference it as static one. Example:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">function</span> MyStaticFunction<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> MyFunction<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    SomeOtherObject.<span\
      \ class=\"me0\">SomeDelegate</span> <span class=\"sy0\">=</span> MyStaticFunction;\
      \ <span class=\"co1\">// reference will be created, you don't want this</span>\n\
      \    SomeOtherObject.<span class=\"me0\">SomeDelegate</span> <span class=\"\
      sy0\">=</span> <span class=\"kw1\">class</span>.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">MyStaticFunction</span>; <span class=\"co1\">// you want this\
      \ instead</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<table class=\"\
      navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\">\n<th colspan=\"\
      2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative; width:100%;\
      \ white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"background-color:transparent;\
      \ padding:0; font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <strong class=\"selflink\">Delegates</strong>&#160;• <a href=\"/Functions\"\
      \ title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"States\"\
      >States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <strong\
      \ class=\"selflink\">Delegates</strong>&#160;• <a href=\"/Typecasting\" title=\"\
      Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body odd\">\n\
      <th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"Literals\"\
      >Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Literals#Boolean_values\"\
      \ title=\"Literals\">Boolean</a>&#160;• <a href=\"/Literals#Float_numbers\"\
      \ title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.121 seconds\nReal time usage: 0.409 seconds\nPreprocessor\
      \ visited node count: 193/1000000\nPreprocessor generated node count: 925/1000000\n\
      Post‐expand include size: 10615/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   89.138      1 - -total\n100.00%   89.138      1 - Template:Navbox_unrealscript\n\
      \ 85.54%   76.253      1 - Template:Navbox\n 16.53%   14.736      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:5102-0!*!0!!en!*!*\
      \ and timestamp 20221118010338 and revision id 45298\n -->\n"
  categories:
  - sortkey: "Delegates"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Function"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Subobject"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: false
    name: "Native coding"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Delegate functions"
    number: "1"
    index: "1"
    fromtitle: "Delegates"
    byteoffset: 503
    anchor: "Delegate_functions"
  - toclevel: 1
    level: "2"
    line: "Delegate variable type"
    number: "2"
    index: "2"
    fromtitle: "Delegates"
    byteoffset: 1833
    anchor: "Delegate_variable_type"
  - toclevel: 1
    level: "2"
    line: "Delegates in Default Properties"
    number: "3"
    index: "3"
    fromtitle: "Delegates"
    byteoffset: 3047
    anchor: "Delegates_in_Default_Properties"
  - toclevel: 2
    level: "3"
    line: "Assigning delegates in Subobjects"
    number: "3.1"
    index: "4"
    fromtitle: "Delegates"
    byteoffset: 3421
    anchor: "Assigning_delegates_in_Subobjects"
  - toclevel: 1
    level: "2"
    line: "Delegates and garbage collection"
    number: "4"
    index: "5"
    fromtitle: "Delegates"
    byteoffset: 3926
    anchor: "Delegates_and_garbage_collection"
  displaytitle: "Delegates"
  iwlinks: []
  wikitext:
    text: "A '''delegate''' is a special kind of variable/function combination. Delegates\
      \ were introduced in [[Unreal Engine 2]] and are declared similar to regular\
      \ [[functions]]. The difference is, that instead of the keyword ''function''\
      \ or ''event'', delegate functions are declared with the keyword ''delegate''.\
      \ In [[Unreal Engine 3]], delegate functions were accompanied by a delegate\
      \ variable type, so delegates can now also be stored in structs or arrays and\
      \ can be passed into or returned by a function.\n\n==Delegate functions==\n\
      A delegate function declaration consists of the following parts:\n ''[[Function#Modifiers|[modifiers]]]''\
      \ '''delegate''' ''[[types|[returntype]]]'' ''delegatename'' '''(''' ''[[Function#Parameters|[parameter\
      \ declarations]]]'' ''')''' ''body_or_semicolon''\nLike regular functions, delegates\
      \ can have a function body, which will be the default function associated with\
      \ the delegate. If no body is defined, the delegate declaration must be terminated\
      \ with a semicolon.\n\nLike for regular function declarations, the return type\
      \ is optional. Similarly, parameter declarations are the same as for regular\
      \ functions. When assigning a function to the delegate, the function's parameter\
      \ and return types must match the delegate's. The compiler will make sure this\
      \ is the case and otherwise throw an error. Parameter names must always be specified,\
      \ even if the delegate does not have a body definition.\n\nMost function modifiers\
      \ can be used for delegate functions, but some of them don't make much sense.\
      \ For example, delegates can't be '''static''' and do not support the Unreal\
      \ Engine 3 replication modifiers '''client''', '''server''' and '''reliable'''.\
      \ Note that most modifiers, like '''simulated''', only apply to the delegate\
      \ body and will not have any effect while other functions are assigned to the\
      \ delegate.\n\n==Delegate variable type==\nThe delegate type for variables,\
      \ parameters and function return types in Unreal Engine 3 looks very similar\
      \ to a class limiter:\n '''delegate <''' ''delegatename'' '''>'''\nHere, ''delegatename''\
      \ is the name of a delegate function, whose prototype (i.e. parameters and return\
      \ type) will be used for the delegate variable. Only functions with the same\
      \ parameter and return types as the referenced delegate function may be assigned\
      \ to the variable.\n\nWhile it is possible to declare arrays of delegates, the\
      \ compiler only allows calling referenced functions through non-array variables.\
      \ The element of a delegate array first needs to be assigned to a non-array\
      \ variable of the same delegate type, but can then be called like a normal function.\n\
      <uscript>\nfunction callRandomDelegate(array<delegate<X> > delegateList)\n{\n\
      \  local delegate<X> selectedDelegate;\n\n  // select a random delegate from\
      \ the list\n  selectedDelegate = delegateList[Rand(delegateList.Length)];\n\
      \  // call that delegate\n  selectedDelegate();\n}\n\ndelegate X();\n</uscript>\n\
      This example also demonstrates, that the closing angle brackets in arrays of\
      \ delegates need to be separated by whitespace, just like with class limiters.\n\
      \n==Delegates in Default Properties==\nWhile the compiler won't complain about\
      \ any assignment of functions to delegates in the default properties and this\
      \ is also done in some of Epic's own code, it doesn't seem to work well for\
      \ normal users. Calling a delegate that got assigned per default properties\
      \ may lead to a crash of the whole engine with an access violation error. \n\
      \n===Assigning delegates in Subobjects===\nThe following issue exists only in\
      \ the Unreal Engine 3 after the change of DefaultProperties linking.\n\nWhen\
      \ assigning delegates of [[subobject]]s, be aware that the call will be executed\
      \ within the context of <code>DEFAULT__OBJECTNAME</code>. One can tell that\
      \ by verifying its instance name output such as <code>DEFAULT__OBJECTNAME</code>.\n\
      \nTo avoid this: Either assign the delegate at run-time or pass the actual object\
      \ reference via the delegate's parameters. \n\n== Delegates and garbage collection\
      \ ==\nWhen class method is assigned to a delegate, a strong reference is created\
      \ to the class instance containing that method.\nIt may prevent that instance\
      \ from garbage collection. \n\nFor example, it's absolutely erroneous to assign\
      \ method of class referencing (directly or indirectly) current level to a delegate\
      \ within UI. User interface persists across level changes, and this delegate\
      \ reference will prevent old level from garbage collection, leading to a crash.\n\
      \nBasically, in order to gain access to current world in UI delegates, you must\
      \ use <code>GetPlayerOwner()</code> function.\n\nNote that just declaring function\
      \ static is not enough to prevent it from creating reference. You must actually\
      \ reference it as static one. Example:\n<uscript>\nstatic function MyStaticFunction()\
      \ {\n\n}\n\nfunction MyFunction() {\n    SomeOtherObject.SomeDelegate = MyStaticFunction;\
      \ // reference will be created, you don't want this\n    SomeOtherObject.SomeDelegate\
      \ = class.static.MyStaticFunction; // you want this instead\n}\n</uscript>\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 45298
name: "Delegates"
revision:
  revid: 45298
  parentid: 45297
  user: "WGH"
  timestamp: 1356179113.000000000
  comment: "/* Delegates and garbage collection */"
timestamp: 1668754952.280500000
