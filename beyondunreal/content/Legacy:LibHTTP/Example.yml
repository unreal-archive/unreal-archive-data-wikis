---
parse:
  title: "Legacy:LibHTTP/Example"
  text:
    text: "<p>First make sure you set up the environment correctly. Make sure LibHTTP4\
      \ is in the EditPackages list and above your package.</p>\n<p>This example will\
      \ explain the most basic usage of <a href=\"/Legacy:LibHTTP\" title=\"Legacy:LibHTTP\"\
      >LibHTTP</a>. The example class will simply request a document from the internet\
      \ and save it to a file.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<ol>\n<li class=\"li1\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> MyLibHTTPExample <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">Info</span>;</pre></li>\n<li class=\"li1\"\
      >\n<pre class=\"de1\"> </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span\
      \ class=\"kw1\">event</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span></pre></li>\n<li class=\"li1\">\n\
      <pre class=\"de1\"><span class=\"br0\">{</span></pre></li>\n<li class=\"li2\"\
      >\n<pre class=\"de2\">  <span class=\"kw1\">local</span> HttpSock socket;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">  socket <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">spawn</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'HttpSock'</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">  socket.<span class=\"me0\">OnComplete</span>\
      \ <span class=\"sy0\">=</span> MyOnComplete;</pre></li>\n<li class=\"li1\">\n\
      <pre class=\"de1\">  socket.<span class=\"me0\">ClearRequestData</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\">  <span class=\"co1\">// The URL has to be complete\
      \ for example: you must specify the http:// part.</span></pre></li>\n<li class=\"\
      li2\">\n<pre class=\"de2\">  socket.<span class=\"me0\">get</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"http://wiki.beyondunreal.com/wiki/LibHTTP\"\
      </span><span class=\"br0\">)</span>;</pre></li>\n<li class=\"li1\">\n<pre class=\"\
      de1\"><span class=\"br0\">}</span></pre></li>\n<li class=\"li1\">\n<pre class=\"\
      de1\"> </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> MyOnComplete<span class=\"br0\">(</span>HttpSock Sender<span\
      \ class=\"br0\">)</span></pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      ><span class=\"br0\">{</span></pre></li>\n<li class=\"li2\">\n<pre class=\"\
      de2\">  <span class=\"kw1\">local</span> FileLog flog;</pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\">  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i;</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\">  flog\
      \ <span class=\"sy0\">=</span> <span class=\"kw4\">spawn</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'FileLog'</span><span\
      \ class=\"br0\">)</span>;</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      >  flog.<span class=\"me0\">OpenLog</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"MyLibHTTPExample\"</span>, <span class=\"st0\">\"html\"</span>,\
      \ <span class=\"kw6\">true</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">  <span class=\"co1\">// Log each retrieved\
      \ line.</span></pre></li>\n<li class=\"li2\">\n<pre class=\"de2\">  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> Sender.<span\
      \ class=\"me0\">ReturnData</span>.<span class=\"me0\">length</span>; i<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span></pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\">    flog.<span class=\"me0\">Logf</span><span class=\"\
      br0\">(</span>Sender.<span class=\"me0\">ReturnData</span><span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">  flog.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"br0\">}</span></pre></li>\n</ol>\n\
      </div>\n</div>\n<p>On line #6 we create the main class. The <a href=\"/Legacy:LibHTTP/HttpSock\"\
      \ title=\"Legacy:LibHTTP/HttpSock\">Legacy:LibHTTP/HttpSock</a> class is the\
      \ main class of LibHTTP and in most cases the only class you will need to address.\
      \ On line #7 we set the <tt>OnComplete</tt> delegate. This delegate is called\
      \ when the HTTP request was completed. This doesn't mean the HTTP request was\
      \ successful (e.g. returned a HTTP response code 200), it just means that LibHTTP\
      \ was able to perform a successful request and retrieve data from the request\
      \ location. Next we call the function <tt>ClearRequestData()</tt> (line #8).\
      \ Although there is actually no need to call this function in this example,\
      \ it is quite important in the future. <tt>ClearRequestData()</tt> will clean\
      \ up all the data from the previous request. So in case of subsequent requests\
      \ using the same HttpSock class you should call this function before doing a\
      \ request, otherwise you might send data to the server you don't want (for example\
      \ a username and password).</p>\n<p>The last function called in the <tt>PostBeginPlay()</tt>\
      \ is <tt>get(...)</tt>. Calling this function will start the HTTP request (using\
      \ a GET request, which is the most common). The <tt>get(...)</tt> function accepts\
      \ the complete URL to the document you want to retrieve. The URL <b>must</b>\
      \ be properly encoded or else the request might fail. The URL is used AS IS,\
      \ so if it's not properly encoded the webserver might not respond correctly.\
      \ If you don't know if the URL is properly encoded you can also enter that URL\
      \ is your webbrowser, most webbrowsers will automatically convert the URL to\
      \ be properly encoded.</p>\n<p>After the <tt>get(...)</tt> it might take a while\
      \ before the request is done. However, a lot of things can go wrong. If something\
      \ goes wrong in the preparation of the request the <tt>get(...)</tt> will return\
      \ false (also the <tt>OnError</tt> delegate is called). It could also happen\
      \ that the webserver isn't reachable (either a connection timeout or the hostname\
      \ won't resolve), check the <a href=\"/Legacy:LibHTTP/HttpSock\" title=\"Legacy:LibHTTP/HttpSock\"\
      >Legacy:LibHTTP/HttpSock</a> for more information about this. In this example\
      \ we assume everything works out.</p>\n<p>When the HTTP request is complete,\
      \ and the whole document has been downloaded, the <tt>OnComplete</tt> delegate\
      \ is called. In this case it will call our <tt>MyOnComplete</tt> function (line\
      \ #12). The HttpSock class contains a lot of variables you can access, most\
      \ important are <tt>ReturnData</tt> and <tt>LastStatus</tt>. The <tt>LastStatus</tt>\
      \ variable will contain the HTTP response code send by the server. This should\
      \ have the value 200, if it doesn't have the value 200 it means that there was\
      \ something wrong with the requested data (for example a value of 404 means\
      \ the file wasn't found, and 500 means the webserver is broken in some way).\
      \ The <tt>ReturnData</tt> variable contains the complete body of the requested\
      \ document, this is usually what you are interested in. In our example we simply\
      \ save all the data in the <tt>ReturnData</tt> to a log file. Every entry in\
      \ the <tt>ReturnData</tt> array is a single line without the newline characters.</p>\n\
      <p>LibHTTP contains a lot of features and functionality, be sure to check out\
      \ the documentation of <a href=\"/Legacy:LibHTTP/HttpSock\" title=\"Legacy:LibHTTP/HttpSock\"\
      >Legacy:LibHTTP/HttpSock</a> to check how other things can be done.</p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.048 seconds\nReal time usage: 0.265\
      \ seconds\nPreprocessor visited node count: 10/1000000\nPreprocessor generated\
      \ node count: 72/1000000\nPost‐expand include size: 39/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1718-0!*!0!*!*!*!* and timestamp 20221118160121 and revision\
      \ id 45078\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpSock"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:LibHTTP/Example"
  iwlinks: []
  wikitext:
    text: "First make sure you set up the environment correctly. Make sure LibHTTP4\
      \ is in the EditPackages list and above your package.\n\nThis example will explain\
      \ the most basic usage of [[Legacy:LibHTTP|LibHTTP]]. The example class will\
      \ simply request a document from the internet and save it to a file.\n\n<uscript\
      \ line>\nclass MyLibHTTPExample extends Info;\n\nevent PostBeginPlay()\n{\n\
      \  local HttpSock socket;\n  socket = spawn(class'HttpSock');\n  socket.OnComplete\
      \ = MyOnComplete;\n  socket.ClearRequestData();\n  // The URL has to be complete\
      \ for example: you must specify the http:// part.\n  socket.get(\"http://wiki.beyondunreal.com/wiki/LibHTTP\"\
      );\n}\n\nfunction MyOnComplete(HttpSock Sender)\n{\n  local FileLog flog;\n\
      \  local int i;\n  flog = spawn(class'FileLog');\n  flog.OpenLog(\"MyLibHTTPExample\"\
      , \"html\", true);\n  // Log each retrieved line.\n  for (i = 0; i < Sender.ReturnData.length;\
      \ i++)\n    flog.Logf(Sender.ReturnData[i]);\n  flog.Destroy();\n}\n</uscript>\n\
      \nOn line #6 we create the main class. The [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpSock]]\
      \ class is the main class of LibHTTP and in most cases the only class you will\
      \ need to address. On line #7 we set the <tt>OnComplete</tt> delegate. This\
      \ delegate is called when the HTTP request was completed. This doesn't mean\
      \ the HTTP request was successful (e.g. returned a HTTP response code 200),\
      \ it just means that LibHTTP was able to perform a successful request and retrieve\
      \ data from the request location. Next we call the function <tt>ClearRequestData()</tt>\
      \ (line #8). Although there is actually no need to call this function in this\
      \ example, it is quite important in the future. <tt>ClearRequestData()</tt>\
      \ will clean up all the data from the previous request. So in case of subsequent\
      \ requests using the same HttpSock class you should call this function before\
      \ doing a request, otherwise you might send data to the server you don't want\
      \ (for example a username and password).\n\nThe last function called in the\
      \ <tt>PostBeginPlay()</tt> is <tt>get(...)</tt>. Calling this function will\
      \ start the HTTP request (using a GET request, which is the most common). The\
      \ <tt>get(...)</tt> function accepts the complete URL to the document you want\
      \ to retrieve. The URL '''must''' be properly encoded or else the request might\
      \ fail. The URL is used AS IS, so if it's not properly encoded the webserver\
      \ might not respond correctly. If you don't know if the URL is properly encoded\
      \ you can also enter that URL is your webbrowser, most webbrowsers will automatically\
      \ convert the URL to be properly encoded.\n\nAfter the <tt>get(...)</tt> it\
      \ might take a while before the request is done. However, a lot of things can\
      \ go wrong. If something goes wrong in the preparation of the request the <tt>get(...)</tt>\
      \ will return false (also the <tt>OnError</tt> delegate is called). It could\
      \ also happen that the webserver isn't reachable (either a connection timeout\
      \ or the hostname won't resolve), check the [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpSock]]\
      \ for more information about this. In this example we assume everything works\
      \ out.\n\nWhen the HTTP request is complete, and the whole document has been\
      \ downloaded, the <tt>OnComplete</tt> delegate is called. In this case it will\
      \ call our <tt>MyOnComplete</tt> function (line #12). The HttpSock class contains\
      \ a lot of variables you can access, most important are <tt>ReturnData</tt>\
      \ and <tt>LastStatus</tt>. The <tt>LastStatus</tt> variable will contain the\
      \ HTTP response code send by the server. This should have the value 200, if\
      \ it doesn't have the value 200 it means that there was something wrong with\
      \ the requested data (for example a value of 404 means the file wasn't found,\
      \ and 500 means the webserver is broken in some way). The <tt>ReturnData</tt>\
      \ variable contains the complete body of the requested document, this is usually\
      \ what you are interested in. In our example we simply save all the data in\
      \ the <tt>ReturnData</tt> to a log file. Every entry in the <tt>ReturnData</tt>\
      \ array is a single line without the newline characters.\n\nLibHTTP contains\
      \ a lot of features and functionality, be sure to check out the documentation\
      \ of [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpSock]] to check how other things\
      \ can be done."
  properties: []
  revId: 45078
name: "Legacy:LibHTTP/Example"
revision:
  revid: 45078
  parentid: 4235
  user: "Eliot"
  timestamp: 1332681383.000000000
  comment: ""
timestamp: 1668787130.407222000
