---
parse:
  title: "Legacy:UnrealScript For Non-Programmers/OOP For Nonprogrammers"
  text:
    text: "<p>This page is part of the <a href=\"/Legacy:UnrealScript_For_Non-Programmers\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers\">UnrealScript For Non-Programmers</a>\
      \ tutorial which is broken down into a series of pages. It may not make sense\
      \ if you haven't been following this series, then again, you never know, you\
      \ might gain something from it.</p>\n<hr />\n<p></p>\n<div id=\"toc\" class=\"\
      toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"\
      toclevel-1 tocsection-1\"><a href=\"#What_an_OOP_Program_is_and_What_it_Does\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">What an OOP Program\
      \ is and What it Does</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Where_should_I_go_from_here.3F\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Where should I go from here?</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"What_an_OOP_Program_is_and_What_it_Does\"\
      >What an OOP Program is and What it Does</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers?section=1\"\
      \ title=\"Edit section: What an OOP Program is and What it Does\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><i><b>First of all\
      \ a program is a file (data) that changes other data</b></i>. Your operating\
      \ system (perhaps DOS) is a program. An example of the data that it might change\
      \ would be the data that the computer is sending to your monitor. Your program\
      \ might change that data from being no data sent to the monitor (resulting in\
      \ blank screen) to data being sent to the monitor telling it to light up certain\
      \ pixels on the screen in a pattern resembling letters that spell out \"Hello\
      \ World\". An image file is data but it is not a program. While its data is\
      \ a pattern of pixels to light up on the monitor, which will resemble a picture\
      \ of something, that data alone changes nothing, therefore the image file is\
      \ not a program. <i>A program would change the data</i> sent to the monitor\
      \ to be the data that the image file contains. In an OOP program, <i>subclasses</i>\
      \ of <i>class objects</i> change (override) data in their parent class and act\
      \ as <i>extensions</i> of the program itself. This will become clearer as you\
      \ read on.</p>\n<p><i><b>Programs execute one line of code at a time in a linear\
      \ fashion.</b></i> Starting from the first line of code the program will continue\
      \ to the second line of code and then the third, unless one of those lines of\
      \ code instruct the program to jump to another line and execute it. If perhaps\
      \ the fourth line of code instructs the program to execute the 27th line of\
      \ code the program will do so and then resume execution of its code from line\
      \ five. Line 27 of the program's code may be the beginning of a block of code\
      \ that consists of 5 or 6 lines of code. All 5 or 6 lines would be executed\
      \ before the program returns to line 5 to continue from there. One of those\
      \ 5 or 6 lines of code may instruct the program to jump back up to line 14.\
      \ The program will then execute line 14 and all lines that follow within the\
      \ block that begins at line 14 and then return to the next line of the block\
      \ that began at 27 and finish that block before returning to line 5.</p>\n<p>Rather\
      \ than bounce around up and down a list of instructions an Object Oriented Program\
      \ will jump a lot of the time to code within a separate modular piece of the\
      \ program. This modular piece of the program, perhaps a class file, is compiled\
      \ and embedded into the program and becomes kind of a file inside of a file.\
      \ An Exe file that appears to be one file that is the program may actually be\
      \ made up of individual modules and compiled into one file. Just as the program\
      \ would jump to line 27 of its code, a line of code in an OOP program may <i>call</i>\
      \ (tell the program to jump to) code within another module. That module is kind\
      \ of like one of the blocks of code mentioned earlier. Now when you look at\
      \ the code you can see the core of the program in one module, and specialized\
      \ sections of code contained in separate modules that might be <i>extended</i>\
      \ even further other modules that hold even more specific code related to the\
      \ module that they are <i>extending</i>.</p>\n<p><i><b>Use your imagination.</b></i>\
      \ Depending on the type of program you are writing, you might imagine the modules\
      \ representing different \"real life\" objects. For example, if you are writing\
      \ a business program you may imagine different modules being different departments\
      \ within the same office, each having specific duties where all departments\
      \ work on modulated aspects of the office's one project. If you were writing\
      \ a game some of the modules would be items and some would be players. Still\
      \ yet some other modules in a game would be physics of world the game takes\
      \ place in and some would be smaller components of one module that is an item\
      \ in the game (like a bullets for a gun or guns for a player). If all of the\
      \ code in the program was one long list of code to be executed in linear fashion\
      \ it would be very hard to keep track of while you were writing it and almost\
      \ impossible to fix or change the code later. That's how it used to be done,\
      \ but we know better now. Another reason for programs being OOP is that you\
      \ can actually use these modules in other programs that you write and save a\
      \ whole lot of time for yourself.</p>\n<p>An OOP program might have an <i>object</i>\
      \ named \"DoDraw\" built into it that specifies pixels to light up which creates\
      \ an image with a black border and an effect applied to the image. That <i>object</i>\
      \ may have another <i>object</i> named \"DrawDogs\" linked to it that <i>extends</i>\
      \ \"DoDraw\" and specifies an alternate border color or alternate image or alternate\
      \ or alternate effect. <i><b>This OOP \"</b>Program<b>\" is \"</b>Oriented<b>\"\
      \ to evaluate a hierarchy of \"</b>Objects<b>\"</b></i>. When it is time for\
      \ this program to \"DrawDogs\" it will see that \"DrawDogs\" <i>extends</i>\
      \ (is a branch of) \"DoDraw\" and will execute all the commands in \"DoDraw\"\
      \ with the data in \"DrawDogs\" overriding some of the data in \"DoDraw\". You\
      \ see here that \"DrawDogs\" has <i>extended</i> \"DoDraw\" to do a more specific\
      \ task.</p>\n<p><i><b>Who Begat Who?</b></i> Further down, the branch of the\
      \ hierarchy that starts with \"DoDraw\" and branches off to \"DrawDogs\" may\
      \ be even further <i>extended</i> by an <i>object</i> named \"DogsPoodle\" which\
      \ overrides data in \"DrawDogs\" to draw a specific <i>class</i> of dog like\
      \ a poodle, thus <i>extending</i> \"DrawDog to do a more specific task. There\
      \ may even be <i>subclasses</i> extending \"DogsPoodle\" such as \"PoodleFrench\"\
      . In effect, when it is time for the program to draw a french poodle, \"PoodleFrench\"\
      \ will <i>inherit</i> all the code from \"DogsPoodle\" which <i>inherits</i>\
      \ all the code from \"DrawDogs\" which <i>inherits</i> all the code from \"\
      DoDraw\" therefore allowing \"PoodleFrench\" to draw a specific picture with\
      \ specific borders and effects. In OOP when an <i>object</i> is a <i>subclass</i>\
      \ of another <i>object</i> and therefor has access to all of its parents code,\
      \ this is called <i>inheritance</i>.</p>\n<p><i><b>So, What's In It For Me?</b></i>\
      \ If you were to write a mod for this program it might be to add a new <i>class</i>\
      \ of dog, perhaps \"DogsBull\" or maybe you want to add a new <i>class</i> of\
      \ animal to \"DoDraw\", perhaps \"DrawCats\". Can you imagine a <i>subclass</i>\
      \ that would <i>extend</i> \"DrawCats\"? How about a <i>subclass</i> that <i>extends</i>\
      \ \"DogsBull\"? For that matter, can you imagine another <i>subclass</i> <i>extending</i>\
      \ \"DoDraw\"?</p>\n<p>Consider how the hierarchy of this program would look.</p>\n\
      <pre>Object\n   +-SomeSubClass\n   +-AnotherSubClass\n   |     +-SubClass of\
      \ AnotherSubClass\n   |\n   +-DoDraw\n   |     +-DrawCats\n   |     +-DrawDogs\n\
      \   |     |     +-DogsBull\n   |     |     +-DogsPoodle\n   |     |        \
      \ +-PoodleFrench\n</pre>\n<p>If you can imagine these modifications then you\
      \ can imagine a new <i>subclass</i> to <i>extend</i> \"Weapon\" which <i>extends</i>\
      \ \"Inventory\" which <i>extends</i> \"Actor\". It would be a specific type\
      \ of weapon that the actor has available to add to its inventory.</p>\n<p>One\
      \ such <i>subclass</i> is \"FlakCannon\". What <i>subclass</i> does \"FlakCannon\"\
      \ <i>extend</i>? See if you can answer that question before reading on. If you\
      \ said Weapon, you are correct. So the first line of code that makes the FlakCannon\
      \ exist in UT is simply:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> FlakCannon <span class=\"kw1\">extends</span> <span class=\"\
      kw9\">Weapon</span>;</pre></div>\n</div>\n<p>Just as a poodle has <i>inherited</i>\
      \ characteristics from its parent that make the poodle what it is, part of an\
      \ OOP program can <i>inherit</i> characteristics from its parent <i>class</i>.\
      \ Just as the poodle may have a different personality than its parent, a part\
      \ of an OOP program may override some of the characteristics that it has <i>inherited</i>.\
      \ Just as a poodle is a <i>class</i> of dog, a dog is a <i>class</i> of animal,\
      \ an animal is a <i>class</i> of life form, a life form is a <i>class</i> of\
      \ \"thing\", makes a poodle a specific \"thing\", a <i>class object</i> in an\
      \ OOP program is a <i>subclass</i> of an <i>object</i> higher in the hierarchy\
      \ of <i>objects</i> within the OOP program.</p>\n<hr />\n<h2><span class=\"\
      mw-headline\" id=\"Where_should_I_go_from_here.3F\">Where should I go from here?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers?section=2\"\
      \ title=\"Edit section: Where should I go from here?\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>If this cleared anything up\
      \ for you then you probalby have more questions to go with your new insight.\
      \ Well if you go back to <a href=\"/Legacy:UnrealScript_Lessons\" title=\"Legacy:UnrealScript\
      \ Lessons\">UnrealScript Lessons</a> in the same section you found this tutorial,\
      \ \"Introductions\", there are a few more on OOP there that might make more\
      \ sense to you now. If they don't, don't sweat it, it'll come as you get more\
      \ involved in this and you can always look at them again from time to time as\
      \ you go.</p>\n<p>If you've had all you want of OOP for now, click back to <a\
      \ href=\"/Legacy:UnrealScript_For_Non-Programmers\" title=\"Legacy:UnrealScript\
      \ For Non-Programmers\">UnrealScript For Non-Programmers</a> and read \"What\
      \ does it mean to 'Modify' a game?\"</p>\n<p><b>Note:</b>Using this Wiki, you\
      \ should notice and get used to a section that is on most pages like the following\
      \ section, \"Related Topics\", it's what you'll find rather than this \"Where\
      \ should I go from here?\" section you just read. For more tips on <a href=\"\
      /Legacy:UnrealScript_For_Non-Programmers/Using_UnrealWiki\" title=\"Legacy:UnrealScript\
      \ For Non-Programmers/Using UnrealWiki\">Legacy:UnrealScript For Non-Programmers/Using\
      \ UnrealWiki</a>, ummm nuf said. There is also a link on that page to a similar\
      \ page for more tips.</p>\n<hr />\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_For_Non-Programmers/Applied_OOP\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers/Applied OOP\">Legacy:UnrealScript\
      \ For Non-Programmers/Applied OOP</a> – The next page of this tutorial.</li>\n\
      <li><a href=\"/Legacy:UnrealScript_For_Non-Programmers\" title=\"Legacy:UnrealScript\
      \ For Non-Programmers\">UnrealScript For Non-Programmers</a> – The page this\
      \ page is part of.</li>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a> – all the UnrealScript\
      \ tutorials</li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> – all the reference pages</li>\n<li><a href=\"/Legacy:Mutator_Topics\"\
      \ title=\"Legacy:Mutator Topics\">Mutator Topics</a> – more on mutators</li>\n\
      <li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making Mods</a>\
      \ – more on the organizational and social aspects</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers?section=4\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This tut is going nowhere. I (the author) will not\
      \ be contributing to it anymore, and it needs much much more. No one else is\
      \ contributing to it, so it's a waste of space and an eye-sore.[DeleteME]</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.064 seconds\nReal time usage:\
      \ 0.066 seconds\nPreprocessor visited node count: 36/1000000\nPreprocessor generated\
      \ node count: 72/1000000\nPost‐expand include size: 76/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3522-0!*!0!!en!*!* and timestamp 20221118160240 and revision\
      \ id 9017\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers/Using UnrealWiki"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers/Applied OOP"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "What an OOP Program is and What it Does"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers"
    byteoffset: 290
    anchor: "What_an_OOP_Program_is_and_What_it_Does"
  - toclevel: 1
    level: "2"
    line: "Where should I go from here?"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers"
    byteoffset: 8032
    anchor: "Where_should_I_go_from_here.3F"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers"
    byteoffset: 9105
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "4"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/OOP_For_Nonprogrammers"
    byteoffset: 9661
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript For Non-Programmers/OOP For Nonprogrammers"
  iwlinks: []
  wikitext:
    text: "This page is part of the [[Legacy:UnrealScript For Non-Programmers|UnrealScript\
      \ For Non-Programmers]] tutorial which is broken down into a series of pages.\
      \ It may not make sense if you haven't been following this series, then again,\
      \ you never know, you might gain something from it.\n\n----\n\n==What an OOP\
      \ Program is and What it Does ==\n\n'''''First of all a program is a file (data)\
      \ that changes other data'''''. Your operating system (perhaps DOS) is a program.\
      \ An example of the data that it might change would be the data that the computer\
      \ is sending to your monitor. Your program might change that data from being\
      \ no data sent to the monitor (resulting in blank screen) to data being sent\
      \ to the monitor telling it to light up certain pixels on the screen in a pattern\
      \ resembling letters that spell out \"Hello World\". An image file is data but\
      \ it is not a program. While its data is a pattern of pixels to light up on\
      \ the monitor, which will resemble a picture of something, that data alone changes\
      \ nothing, therefore the image file is not a program. ''A program would change\
      \ the data'' sent to the monitor to be the data that the image file contains.\
      \ In an OOP program, ''subclasses'' of ''class objects'' change (override) data\
      \ in their parent class and act as ''extensions'' of the program itself. This\
      \ will become clearer as you read on. \n\n'''''Programs execute one line of\
      \ code at a time in a linear fashion.''''' Starting from the first line of code\
      \ the program will continue to the second line of code and then the third, unless\
      \ one of those lines of code instruct the program to jump to another line and\
      \ execute it. If perhaps the fourth line of code instructs the program to execute\
      \ the 27th line of code the program will do so and then resume execution of\
      \ its code from line five. Line 27 of the program's code may be the beginning\
      \ of a block of code that consists of 5 or 6 lines of code. All 5 or 6 lines\
      \ would be executed before the program returns to line 5 to continue from there.\
      \ One of those 5 or 6 lines of code may instruct the program to jump back up\
      \ to line 14. The program will then execute line 14 and all lines that follow\
      \ within the block that begins at line 14 and then return to the next line of\
      \ the block that began at 27 and finish that block before returning to line\
      \ 5.\n\nRather than bounce around up and down a list of instructions an Object\
      \ Oriented Program will jump a lot of the time to code within a separate modular\
      \ piece of the program. This modular piece of the program, perhaps a class file,\
      \ is compiled and embedded into the program and becomes kind of a file inside\
      \ of a file. An Exe file that appears to be one file that is the program may\
      \ actually be made up of individual modules and compiled into one file. Just\
      \ as the program would jump to line 27 of its code, a line of code in an OOP\
      \ program may ''call'' (tell the program to jump to) code within another module.\
      \ That module is kind of like one of the blocks of code mentioned earlier. Now\
      \ when you look at the code you can see the core of the program in one module,\
      \ and specialized sections of code contained in separate modules that might\
      \ be ''extended'' even further other modules that hold even more specific code\
      \ related to the module that they are ''extending''. \n\n'''''Use your imagination.'''''\
      \ Depending on the type of program you are writing, you might imagine the modules\
      \ representing different \"real life\" objects. For example, if you are writing\
      \ a business program you may imagine different modules being different departments\
      \ within the same office, each having specific duties where all departments\
      \ work on modulated aspects of the office's one project. If you were writing\
      \ a game some of the modules would be items and some would be players. Still\
      \ yet some other modules in a game would be physics of world the game takes\
      \ place in and some would be smaller components of one module that is an item\
      \ in the game (like a bullets for a gun or guns for a player). If all of the\
      \ code in the program was one long list of code to be executed in linear fashion\
      \ it would be very hard to keep track of while you were writing it and almost\
      \ impossible to fix or change the code later. That's how it used to be done,\
      \ but we know better now. Another reason for programs being OOP is that you\
      \ can actually use these modules in other programs that you write and save a\
      \ whole lot of time for yourself.   \n\nAn OOP program might have an ''object''\
      \ named \"DoDraw\" built into it that specifies pixels to light up which creates\
      \ an image with a black border and an effect applied to the image. That ''object''\
      \ may have another ''object'' named \"DrawDogs\" linked to it that ''extends''\
      \ \"DoDraw\" and specifies an alternate border color or alternate image or alternate\
      \ or alternate effect. '''''This OOP \"'''Program'''\" is \"'''Oriented'''\"\
      \ to evaluate a hierarchy of \"'''Objects'''\"'''''. When it is time for this\
      \ program to \"DrawDogs\" it will see that \"DrawDogs\" ''extends'' (is a branch\
      \ of) \"DoDraw\" and will execute all the commands in \"DoDraw\" with the data\
      \ in \"DrawDogs\" overriding some of the data in \"DoDraw\". You see here that\
      \ \"DrawDogs\" has ''extended'' \"DoDraw\" to do a more specific task.\n\n'''''Who\
      \ Begat Who?'''''  Further down, the branch of the hierarchy that starts with\
      \ \"DoDraw\" and branches off to \"DrawDogs\" may be even further ''extended''\
      \ by an ''object'' named \"DogsPoodle\" which overrides data in \"DrawDogs\"\
      \ to draw a specific ''class'' of dog like a poodle, thus ''extending'' \"DrawDog\
      \ to do a more specific task. There may even be ''subclasses'' extending \"\
      DogsPoodle\" such as \"PoodleFrench\". In effect, when it is time for the program\
      \ to draw a french poodle, \"PoodleFrench\" will ''inherit'' all the code from\
      \ \"DogsPoodle\" which ''inherits'' all the code from \"DrawDogs\" which ''inherits''\
      \ all the code from \"DoDraw\" therefore allowing \"PoodleFrench\" to draw a\
      \ specific picture with specific borders and effects. In OOP when an ''object''\
      \ is a ''subclass'' of another ''object'' and therefor has access to all of\
      \ its parents code, this is called ''inheritance''.\n\n'''''So, What's In It\
      \ For Me?'''''  If you were to write a mod for this program it might be to add\
      \ a new ''class'' of dog, perhaps \"DogsBull\" or maybe you want to add a new\
      \ ''class'' of animal to \"DoDraw\", perhaps \"DrawCats\". Can you imagine a\
      \ ''subclass'' that would ''extend'' \"DrawCats\"? How about a ''subclass''\
      \ that ''extends'' \"DogsBull\"? For that matter, can you imagine another ''subclass''\
      \ ''extending'' \"DoDraw\"?\n\nConsider how the hierarchy of this program would\
      \ look.\n\n Object\n    +-SomeSubClass\n    +-AnotherSubClass\n    |     +-SubClass\
      \ of AnotherSubClass\n    |\n    +-DoDraw\n    |     +-DrawCats\n    |     +-DrawDogs\n\
      \    |     |     +-DogsBull\n    |     |     +-DogsPoodle\n    |     |     \
      \    +-PoodleFrench\n\nIf you can imagine these modifications then you can imagine\
      \ a new ''subclass'' to ''extend'' \"Weapon\" which ''extends'' \"Inventory\"\
      \ which ''extends'' \"Actor\". It would be a specific type of weapon that the\
      \ actor has available to add to its inventory.\n\nOne such ''subclass'' is \"\
      FlakCannon\". What ''subclass'' does \"FlakCannon\" ''extend''? See if you can\
      \ answer that question before reading on. If you said Weapon, you are correct.\
      \ So the first line of code that makes the FlakCannon exist in UT is simply:\n\
      \n<uscript>\nclass FlakCannon extends Weapon;\n</uscript>\n\nJust as a poodle\
      \ has ''inherited'' characteristics from its parent that make the poodle what\
      \ it is, part of an OOP program can ''inherit'' characteristics from its parent\
      \ ''class''. Just as the poodle may have a different personality than its parent,\
      \ a part of an OOP program may override some of the characteristics that it\
      \ has ''inherited''. Just as a poodle is a ''class'' of dog, a dog is a ''class''\
      \ of animal, an animal is a ''class'' of life form, a life form is a ''class''\
      \ of \"thing\", makes a poodle a specific \"thing\", a ''class object'' in an\
      \ OOP program is a ''subclass'' of an ''object'' higher in the hierarchy of\
      \ ''objects'' within the OOP program.\n\n----\n\n==Where should I go from here?\
      \ ==\n\nIf this cleared anything up for you then you probalby have more questions\
      \ to go with your new insight. Well if you go back to [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]] in the same section you found this tutorial,\
      \ \"Introductions\", there are a few more on OOP there that might make more\
      \ sense to you now. If they don't, don't sweat it, it'll come as you get more\
      \ involved in this and you can always look at them again from time to time as\
      \ you go. \n\nIf you've had all you want of OOP for now, click back to [[Legacy:UnrealScript\
      \ For Non-Programmers|UnrealScript For Non-Programmers]] and read \"What does\
      \ it mean to 'Modify' a game?\"\n\n'''Note:'''Using this Wiki, you should notice\
      \ and get used to a section that is on most pages like the following section,\
      \ \"Related Topics\", it's what you'll find rather than this \"Where should\
      \ I go from here?\" section you just read. For more tips on [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Using\
      \ UnrealWiki]], ummm nuf said. There is also a link on that page to a similar\
      \ page for more tips.\n\n----\n\n==Related Topics==\n\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Applied\
      \ OOP]] &ndash; The next page of this tutorial.\n* [[Legacy:UnrealScript For\
      \ Non-Programmers|UnrealScript For Non-Programmers]] &ndash; The page this page\
      \ is part of.\n* [[Legacy:UnrealScript Lessons|UnrealScript Lessons]] &ndash;\
      \ all the UnrealScript tutorials\n* [[Legacy:UnrealScript|UnrealScript]] &ndash;\
      \ all the reference pages\n* [[Legacy:Mutator Topics|Mutator Topics]] &ndash;\
      \ more on mutators\n* [[Legacy:Making Mods|Making Mods]] &ndash; more on the\
      \ organizational and social aspects\n\n==Discussion==\n\nThis tut is going nowhere.\
      \ I (the author) will not be contributing to it anymore, and it needs much much\
      \ more. No one else is contributing to it, so it's a waste of space and an eye-sore.[DeleteME]"
  properties: []
  revId: 9017
name: "Legacy:UnrealScript For Non-Programmers/OOP For Nonprogrammers"
revision:
  revid: 9017
  parentid: 9019
  user: "161.38.223.224"
  timestamp: 1187394098.000000000
  comment: "Spelling correction of the word 'insite' to insight"
timestamp: 1668787208.375401000
