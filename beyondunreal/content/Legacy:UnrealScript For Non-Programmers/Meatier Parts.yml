---
parse:
  title: "Legacy:UnrealScript For Non-Programmers/Meatier Parts"
  text:
    text: "<p>This page is part of the <a href=\"/Legacy:UnrealScript_For_Non-Programmers\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers\">UnrealScript For Non-Programmers</a>\
      \ tutorial which is broken down into a series of pages. It may not make sense\
      \ if you haven't been following this series, then again, you never know, you\
      \ might gain something from it.</p>\n<hr />\n<p>After this next section, a look\
      \ back at <a href=\"/Legacy:Object_Oriented_Programming_Overview\" title=\"\
      Legacy:Object Oriented Programming Overview\">Object Oriented Programming Overview</a>\
      \ will show you how much you are learning by your being able to follow the code\
      \ samples offered there.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#A_Deeper_Look_Into_Program_Construction\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">A Deeper Look Into Program\
      \ Construction</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #Tests\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Tests</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Loops\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Loops</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-4\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"A_Deeper_Look_Into_Program_Construction\"\
      >A Deeper Look Into Program Construction</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts?section=1\"\
      \ title=\"Edit section: A Deeper Look Into Program Construction\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Here we will examine\
      \ other parts of the code that makes up a program such as Tests and Loops. This\
      \ section intends to prepare you to further understand these concepts by examining\
      \ the <a href=\"/Legacy:UnrealScript_Language_Reference/Program_Structure\"\
      \ title=\"Legacy:UnrealScript Language Reference/Program Structure\">UnrealScript\
      \ Language Reference/Program Structure</a> and then I think you have earned\
      \ your white-belt and can consider yourself a no0b. =)</p>\n<h3><span class=\"\
      mw-headline\" id=\"Tests\">Tests</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts?section=2\"\
      \ title=\"Edit section: Tests\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><i><b>Conditional Statements</b></i> such as the tests\
      \ we will discuss here are how your program is directed as to what it should\
      \ do next. Keep in mind that if you are writing a program, it only does what\
      \ you tell it to. Even if it does something that is not what you intended to\
      \ be the outcome. It is still doing what you told it to do, and the error therefore\
      \ is yours.</p>\n<p><i><b>Your program is no smarter than you are.</b></i> If\
      \ this program can only do what you tell it do when you write it then you are\
      \ going to have to give it a way to do more than simply going down a linear\
      \ list of commands. Try to consider what a program could possibly accomplish\
      \ with that kind of structure. It could maybe stuff a few variables with numeric\
      \ values and perform some math functions on them dumping the result into another\
      \ variable and print that variable's value to the screen. Weeeeeee! But can\
      \ it check to see if the answer is correct?</p>\n<p><i><b>You have to help your\
      \ program act non-linearly.</b></i> If you know how to make your program perform\
      \ tests and take particular action(s) depending on the results of those tests\
      \ then it becomes much more dimensional and capable of much more. For instance,\
      \ Picture an egg on a fence. It's going to fall one way or the other way. On\
      \ one side of the fence is a cement sidewalk, hard and unforgiving. On the other\
      \ side of fence is a water trough full of soft, impact-absorbing water. We can\
      \ use a conditional statement for our to program to perform specified tasks\
      \ depending on the outcome.</p>\n<p>We know what the outcome of the egg falling\
      \ one way would be over it falling the other. Let's assume that there is already\
      \ a function written in our class to assign a random number to our variable\
      \ we have created to represent the state of the egg. With that variable's value\
      \ set to be a random number from one to two, we want our program to draw a broken\
      \ egg at the point that it lands on the sidewalk if our program finds the current\
      \ value of that variable to be \"1\". And we want to run an animation of water\
      \ splashing if it falls into the trough because the variable intEggState has\
      \ a value of \"2\".</p>\n<p>With intEggState already declared elsewhere and\
      \ a function that keeps it set to a value that indicates the current state of\
      \ the egg, how do we tell the program to execute one task depending on one outcome?\
      \ Here is where a test of intEggState's value will let our program know what\
      \ it should do next. Our program is an OOP program and we are writing code in\
      \ a subclass that inherits code from its parent (i.e. a function named \"Draw()\"\
      \ ). So all we have to do here is call on the functions that already exist.\
      \ We will tell our program to do what we want it to do in the case of intEggState\
      \ by writing an <i>if</i> statement.</p>\n<p><i><b>\"if\", \"else\", and \"\
      else if\"</b></i>:</p>\n<p>(Two forward slashes (//) tells the program that\
      \ anything else on the rest of this line is only a comment to future readers\
      \ of the code and to skip everything on this line after the slashes.)</p>\n\
      <p><i><b>if</b></i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// If the egg lands on the sidewalk, it breaks.</span>\n<span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> intEggState <span class=\"sy0\"\
      >==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>\n    Draw<span\
      \ class=\"br0\">(</span> BrokenEgg <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>What was that all about? When the program sees the keyword \"if\"\
      , it will test the condition set within the following parenthesis. Upon finding\
      \ that the condition is true, it will execute the code that follows on the next\
      \ line. When finding that the condition is not true the program will exit the\
      \ whole if statement doing nothing and proceed linearly to the next piece of\
      \ code. But what if the egg didn't land on the sidewalk but instead in the trough?\
      \ The test above does not account for that. It would do nothing, but we wanted\
      \ it to draw a splash animation if it landed in the water. How about this code:</p>\n\
      <p><i><b>else</b></i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// If the egg lands on the sidewalk, it breaks</span>\n<span class=\"\
      co1\">// but if the egg lands in the trough, it splashes.</span>\n<span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> intEggState <span class=\"sy0\"\
      >==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>\n    Draw<span\
      \ class=\"br0\">(</span> BrokenEgg <span class=\"br0\">)</span>;\n<span class=\"\
      kw2\">else</span>\n    Draw<span class=\"br0\">(</span> SplashAnimation <span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>When the program finds the\
      \ condition following the keyword \"if\" to be true, it will execute the code\
      \ that follows and then exit the if statement ignoring the \"else\" keyword\
      \ as well as the code following. We are satisfied with this because there was\
      \ only one outcome and therefore we only wanted one thing to happen.</p>\n<p>When\
      \ the program finds the condition of if to be false, it will skip the next code\
      \ and begin to work from the keyword \"else\" and will execute the code following\
      \ and the egg will splash into the trough. Again we would be satisfied with\
      \ the single action performed in reaction to the single outcome. But what if\
      \ the egg hadn't fallen yet?</p>\n<p>We will have to assume here that when the\
      \ variable intEggState was declared that it was also initialized to have a value\
      \ of \"0\".</p>\n<p>(like this)</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">var</span> <span class=\"kw5\">int</span> intEggState;\
      \ <span class=\"co1\">//Declared the variable</span>\nintEggState<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>; <span class=\"co1\">//Initialized\
      \ the variable to a value other than 1 or 2</span></pre></div>\n</div>\n<p>Now,\
      \ until the egg falls one way or the other, it remains on the fence and therefore\
      \ intEggState's value remains \"0\".</p>\n<p><i><b>else if</b></i></p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// If the egg lands\
      \ on the sidewalk, it breaks</span>\n<span class=\"co1\">// but if the egg lands\
      \ in the trough, it splashes.</span>\n<span class=\"co1\">// If it hasn't fallen\
      \ yet, it does nothing.</span>\n<span class=\"kw2\">if</span><span class=\"\
      br0\">(</span> intEggState <span class=\"sy0\">==</span> <span class=\"nu0\"\
      >1</span> <span class=\"br0\">)</span>\n    Draw<span class=\"br0\">(</span>\
      \ BrokenEgg <span class=\"br0\">)</span>;\n<span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> intEggState <span class=\"\
      sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>\n\
      \    Draw<span class=\"br0\">(</span> SplashAnimation <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>When the program finds the condition of if to be false, it will skip\
      \ the next code and begin to work from the keyword \"else\". Here it finds another\
      \ if keyword. When it finds the condition of \"else if\" to be true it will\
      \ execute the code following the condition and the egg will splash into the\
      \ trough. But we already know the egg hasn't fallen yet so in this case, the\
      \ program would find the condition of if to be false and test the condition\
      \ of else if, finding it false, and exit the whole if statement doing nothing.\
      \ This would satisfy us, as we don't want anything to happen until the egg falls.</p>\n\
      <p><br /></p>\n<dl>\n<dt>Case Tests&#160;</dt>\n<dd>(In Progress... Might use\
      \ Case to evaluate the eggs \"State\".)</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Loops\">Loops</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts?section=3\"\
      \ title=\"Edit section: Loops\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>The For Loop&#160;</dt>\n<dd>(In Progress)</dd>\n\
      <dt>The Do Loops&#160;</dt>\n<dd>(In Progress)</dd>\n</dl>\n<hr />\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts?section=4\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_For_Non-Programmers\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers\">UnrealScript For Non-Programmers</a>\
      \ – The page this page is part of.</li>\n<li><a href=\"/Legacy:UnrealScript_Lessons\"\
      \ title=\"Legacy:UnrealScript Lessons\">UnrealScript Lessons</a> – all the UnrealScript\
      \ tutorials</li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> – all the reference pages</li>\n<li><a href=\"/Legacy:Mutator_Topics\"\
      \ title=\"Legacy:Mutator Topics\">Mutator Topics</a> – more on mutators</li>\n\
      <li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making Mods</a>\
      \ – more on the organizational and social aspects</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts?section=5\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This tut is going nowhere. I (the author) will not\
      \ be contributing to it anymore, and it needs much much more. No one else is\
      \ contributing to it, so it's a waste of space and an eye-sore.[DeleteME]</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.100 seconds\nReal time usage:\
      \ 0.102 seconds\nPreprocessor visited node count: 55/1000000\nPreprocessor generated\
      \ node count: 104/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3525-0!*!0!!en!*!* and timestamp 20221118160235 and revision\
      \ id 9024\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Program Structure"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "A Deeper Look Into Program Construction"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts"
    byteoffset: 517
    anchor: "A_Deeper_Look_Into_Program_Construction"
  - toclevel: 2
    level: "3"
    line: "Tests"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts"
    byteoffset: 946
    anchor: "Tests"
  - toclevel: 2
    level: "3"
    line: "Loops"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts"
    byteoffset: 6914
    anchor: "Loops"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts"
    byteoffset: 6995
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "5"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts"
    byteoffset: 7458
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript For Non-Programmers/Meatier Parts"
  iwlinks: []
  wikitext:
    text: "This page is part of the [[Legacy:UnrealScript For Non-Programmers|UnrealScript\
      \ For Non-Programmers]] tutorial which is broken down into a series of pages.\
      \ It may not make sense if you haven't been following this series, then again,\
      \ you never know, you might gain something from it.\n\n----\n\nAfter this next\
      \ section, a look back at [[Legacy:Object Oriented Programming Overview|Object\
      \ Oriented Programming Overview]] will show you how much you are learning by\
      \ your being able to follow the code samples offered there.\n\n==A Deeper Look\
      \ Into Program Construction ==\n\nHere we will examine other parts of the code\
      \ that makes up a program such as Tests and Loops. This section intends to prepare\
      \ you to further understand these concepts by examining the [[Legacy:UnrealScript\
      \ Language Reference/Program Structure|UnrealScript Language Reference/Program\
      \ Structure]] and then I think you have earned your white-belt and can consider\
      \ yourself a no0b. =) \n\n===Tests===\n\n'''''Conditional Statements''''' such\
      \ as the tests we will discuss here are how your program is directed as to what\
      \ it should do next. Keep in mind that if you are writing a program, it only\
      \ does what you tell it to. Even if it does something that is not what you intended\
      \ to be the outcome. It is still doing what you told it to do, and the error\
      \ therefore is yours. \n\n'''''Your program is no smarter than you are.'''''\
      \ If this program can only do what you tell it do when you write it then you\
      \ are going to have to give it a way to do more than simply going down a linear\
      \ list of commands. Try to consider what a program could possibly accomplish\
      \ with that kind of structure. It could maybe stuff a few variables with numeric\
      \ values and perform some math functions on them dumping the result into another\
      \ variable and print that variable's value to the screen. Weeeeeee! But can\
      \ it check to see if the answer is correct?\n\n'''''You have to help your program\
      \ act non-linearly.''''' If you know how to make your program perform tests\
      \ and take particular action(s) depending on the results of those tests then\
      \ it becomes much more dimensional and capable of much more. For instance, Picture\
      \ an egg on a fence. It's going to fall one way or the other way. On one side\
      \ of the fence is a cement sidewalk, hard and unforgiving. On the other side\
      \ of fence is a water trough full of soft, impact-absorbing water. We can use\
      \ a conditional statement for our to program to perform specified tasks depending\
      \ on the outcome.\n\nWe know what the outcome of the egg falling one way would\
      \ be over it falling the other. Let's assume that there is already a function\
      \ written in our class to assign a random number to our variable we have created\
      \ to represent the state of the egg. With that variable's value set to be a\
      \ random number from one to two, we want our program to draw a broken egg at\
      \ the point that it lands on the sidewalk if our program finds the current value\
      \ of that variable to be \"1\". And we want to run an animation of water splashing\
      \ if it falls into the trough because the variable intEggState has a value of\
      \ \"2\".\n\nWith intEggState already declared elsewhere and a function that\
      \ keeps it set to a value that indicates the current state of the egg, how do\
      \ we tell the program to execute one task depending on one outcome? Here is\
      \ where a test of intEggState's value will let our program know what it should\
      \ do next. Our program is an OOP program and we are writing code in a subclass\
      \ that inherits code from its parent (i.e. a function named \"Draw()\" ). So\
      \ all we have to do here is call on the functions that already exist. We will\
      \ tell our program to do what we want it to do in the case of intEggState by\
      \ writing an ''if'' statement.\n\n'''''\"if\", \"else\", and \"else if\"''''':\n\
      \n(Two forward slashes (//) tells the program that anything else on the rest\
      \ of this line is only a comment to future readers of the code and to skip everything\
      \ on this line after the slashes.)\n\n'''''if'''''\n\n<uscript>\n// If the egg\
      \ lands on the sidewalk, it breaks.\nif( intEggState == 1 )\n    Draw( BrokenEgg\
      \ );\n</uscript> \n\nWhat was that all about? When the program sees the keyword\
      \ \"if\", it will test the condition set within the following parenthesis. Upon\
      \ finding that the condition is true, it will execute the code that follows\
      \ on the next line. When finding that the condition is not true the program\
      \ will exit the whole if statement doing nothing and proceed linearly to the\
      \ next piece of code. But what if the egg didn't land on the sidewalk but instead\
      \ in the trough? The test above does not account for that. It would do nothing,\
      \ but we wanted it to draw a splash animation if it landed in the water. How\
      \ about this code:\n\n'''''else'''''\n\n<uscript>\n// If the egg lands on the\
      \ sidewalk, it breaks\n// but if the egg lands in the trough, it splashes.\n\
      if( intEggState == 1 )\n    Draw( BrokenEgg );\nelse\n    Draw( SplashAnimation\
      \ );\n</uscript> \n\nWhen the program finds the condition following the keyword\
      \ \"if\" to be true, it will execute the code that follows and then exit the\
      \ if statement ignoring the \"else\" keyword as well as the code following.\
      \ We are satisfied with this because there was only one outcome and therefore\
      \ we only wanted one thing to happen. \n\nWhen the program finds the condition\
      \ of if to be false, it will skip the next code and begin to work from the keyword\
      \ \"else\" and will execute the code following and the egg will splash into\
      \ the trough. Again we would be satisfied with the single action performed in\
      \ reaction to the single outcome. But what if the egg hadn't fallen yet?\n\n\
      We will have to assume here that when the variable intEggState was declared\
      \ that it was also initialized to have a value of \"0\".\n\n(like this)\n\n\
      <uscript>\nvar int intEggState; //Declared the variable\nintEggState=0; //Initialized\
      \ the variable to a value other than 1 or 2\n</uscript>\n\nNow, until the egg\
      \ falls one way or the other, it remains on the fence and therefore intEggState's\
      \ value remains \"0\".\n\n'''''else if'''''\n\n<uscript>\n// If the egg lands\
      \ on the sidewalk, it breaks\n// but if the egg lands in the trough, it splashes.\n\
      // If it hasn't fallen yet, it does nothing.\nif( intEggState == 1 )\n    Draw(\
      \ BrokenEgg );\nelse if( intEggState == 2 )\n    Draw( SplashAnimation );\n\
      </uscript> \n\nWhen the program finds the condition of if to be false, it will\
      \ skip the next code and begin to work from the keyword \"else\". Here it finds\
      \ another if keyword. When it finds the condition of \"else if\" to be true\
      \ it will execute the code following the condition and the egg will splash into\
      \ the trough. But we already know the egg hasn't fallen yet so in this case,\
      \ the program would find the condition of if to be false and test the condition\
      \ of else if, finding it false, and exit the whole if statement doing nothing.\
      \ This would satisfy us, as we don't want anything to happen until the egg falls.\n\
      \  \n\n; Case Tests : (In Progress... Might use Case to evaluate the eggs \"\
      State\".)\n\n===Loops===\n; The For Loop : (In Progress)\n; The Do Loops : (In\
      \ Progress)\n\n----\n\n==Related Topics==\n\n* [[Legacy:UnrealScript For Non-Programmers|UnrealScript\
      \ For Non-Programmers]] &ndash; The page this page is part of.\n* [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]] &ndash; all the UnrealScript tutorials\n* [[Legacy:UnrealScript|UnrealScript]]\
      \ &ndash; all the reference pages\n* [[Legacy:Mutator Topics|Mutator Topics]]\
      \ &ndash; more on mutators\n* [[Legacy:Making Mods|Making Mods]] &ndash; more\
      \ on the organizational and social aspects\n\n==Discussion==\n\nThis tut is\
      \ going nowhere. I (the author) will not be contributing to it anymore, and\
      \ it needs much much more. No one else is contributing to it, so it's a waste\
      \ of space and an eye-sore.[DeleteME]"
  properties: []
  revId: 9024
name: "Legacy:UnrealScript For Non-Programmers/Meatier Parts"
revision:
  revid: 9024
  parentid: 9025
  user: "Bbb72-0-173-98.bendbroadband.com"
  timestamp: 1136902096.000000000
  comment: "DeleteME request, per author."
timestamp: 1668787203.569139000
