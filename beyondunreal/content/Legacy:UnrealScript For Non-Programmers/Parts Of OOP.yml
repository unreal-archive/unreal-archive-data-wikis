---
parse:
  title: "Legacy:UnrealScript For Non-Programmers/Parts Of OOP"
  text:
    text: "<p>This page is part of the <a href=\"/Legacy:UnrealScript_For_Non-Programmers\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers\">UnrealScript For Non-Programmers</a>\
      \ tutorial which is broken down into a series of pages. It may not make sense\
      \ if you haven't been following this series, then again, you never know, you\
      \ might gain something from it.</p>\n<hr />\n<h3><span class=\"mw-headline\"\
      \ id=\"What_an_OOP_Program_Consists_of_.3D\">What an OOP Program Consists of\
      \ =</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP?section=1\"\
      \ title=\"Edit section: What an OOP Program Consists of =\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt><a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Objects</a>&#160;</dt>\n<dd>defined on <a href=\"\
      /Legacy:Terminology\" title=\"Legacy:Terminology\">Terminology</a> as: \"abstraction\
      \ that typically is assigned clearly specified characteristics; in other words,\
      \ a chunk of data with a certain class associated to it; the class describes\
      \ the data structure and contains the code that deals with objects of that class\"\
      .</dd>\n</dl>\n<dl>\n<dt><a href=\"/Legacy:Class\" title=\"Legacy:Class\" class=\"\
      mw-redirect\">Classes</a>&#160;</dt>\n<dd>defined on <a href=\"/Legacy:Terminology\"\
      \ title=\"Legacy:Terminology\">Terminology</a> as: \"type of an object, an object's\
      \ class defines how an object is implemented; derived from or instantiated by\
      \ an object, from which it inherits clearly defined attributes. A class can\
      \ contain: static data members, objects of another class, pointers and references\
      \ to types and objects of the same or another class, declarations of another\
      \ class, member functions, and friend classes. All Classes are listed in the\
      \ Actor browser\".</dd>\n</dl>\n<dl>\n<dt><a href=\"/Legacy:Function_Syntax\"\
      \ title=\"Legacy:Function Syntax\">Functions</a>&#160;</dt>\n<dd>defined on\
      \ <a href=\"/Legacy:Terminology\" title=\"Legacy:Terminology\">Terminology</a>\
      \ as: \"piece of code with a defined entry point and one or more exit points\"\
      .</dd>\n</dl>\n<p>Basically, a section of code within an object that is declared\
      \ (created and defined) and does nothing until it is called from somewhere else.\
      \ I assume that the \"defined entry point\" would be the point at which another\
      \ function calls that function. At that point the program will begin to execute\
      \ the code in that function in the order that the function dictates. Within\
      \ the function will be at least one \"exit point\" which tells the program that\
      \ there is no more code to execute from that function.</p>\n<p>That exit point\
      \ may be reached upon completion of every line of code in the function or as\
      \ the result of a test within that function that indicates in the event of a\
      \ negative result the program should skip all the rest of the code in the function\
      \ and exit.</p>\n<p>When the program exits that function it resumes executing\
      \ code in the function that called it, and continues this until reaching an\
      \ exit point in that function.</p>\n<dl>\n<dt><a href=\"/Legacy:Variable_Syntax\"\
      \ title=\"Legacy:Variable Syntax\">Variables</a>&#160;</dt>\n<dd>defined on\
      \ <a href=\"/Legacy:Terminology\" title=\"Legacy:Terminology\">Terminology</a>\
      \ as: \"memory location with a symbolic name where a program can store information\
      \ for future retrieval\".</dd>\n</dl>\n<p>When a variable is declared (created\
      \ and defined) in a program it becomes the symbolic name of a location in memory\
      \ and your program can save data to that location. The data in that variable\
      \ (its \"value\") can be read and can be changed by the program. You can declare\
      \ variables in your program and name them whatever you want to name them as\
      \ long as the name is not recognized anywhere else in the program as something\
      \ other than a variable or as another variable (still yet, that depends on the\
      \ \"scope\" in which that variable exists – more on scope shortly).</p>\n<p>A\
      \ <i>variable</i> is created as soon as it is declared, and it is <i>initialized</i>\
      \ (set to a specific value) with its data type's empty value. I would suggest\
      \ that you initialize your variables as soon as you have declared them to keep\
      \ a more organized frame of mind about them. Otherwise, if you try to retrieve\
      \ the value of your variable later you may get a value like \"Null\" or something\
      \ instead of the value you could have initialized it to such as \"0\" or \"\"\
      \ (a text value with no text yet) or anything else that might make more sense\
      \ to you than whatever UnrealScript might put there depending on the data type\
      \ you declared the variable as. An example of initializing a variable will follow\
      \ later in this tutorial and you will see how that initial value can make more\
      \ sense.</p>\n<p>Scope has to do with depths of a program and at what depths\
      \ a variable exists. For example if you declared a variable as \"local\" then\
      \ its scope is only within that function or class that is created in unless\
      \ it is passed to another function or class as a parameter. Therefore, if a\
      \ function outside of that variable's scope was to try to look at that variable\
      \ to change it or retrieve the value of it, your program would error because\
      \ the variable doesn't exist to that function. If you declared the variable\
      \ as \"public\" then you had better make sure that its name is quite unique\
      \ and keep track of where all it is being changed from because it can be called\
      \ from anywhere in the program, from any function in any class. If you loose\
      \ track of that then your program is out of control and functions might be working\
      \ on corrupted data that doesn't add up later on because the variable's value\
      \ gets changed by one function while another function is working with its previous\
      \ value, unaware of the change.</p>\n<p>Just take the general idea for now.\
      \ You will understand more when you start to use variables. They will become\
      \ clearer also as you start to see them in the examples you will be studying\
      \ here.</p>\n<hr />\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP?section=2\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_For_Non-Programmers/Meatier_Parts\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers/Meatier Parts\">Legacy:UnrealScript\
      \ For Non-Programmers/Meatier Parts</a> – The next page of this tutorial.</li>\n\
      <li><a href=\"/Legacy:UnrealScript_For_Non-Programmers\" title=\"Legacy:UnrealScript\
      \ For Non-Programmers\">UnrealScript For Non-Programmers</a> – The page this\
      \ page is part of.</li>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a> – all the UnrealScript\
      \ tutorials</li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> – all the reference pages</li>\n<li><a href=\"/Legacy:Mutator_Topics\"\
      \ title=\"Legacy:Mutator Topics\">Mutator Topics</a> – more on mutators</li>\n\
      <li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making Mods</a>\
      \ – more on the organizational and social aspects</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP?section=3\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This tut is going nowhere. I (the author) will not\
      \ be contributing to it anymore, and it needs much much more. No one else is\
      \ contributing to it, so it's a waste of space and an eye-sore.[DeleteME]</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.037 seconds\nReal time usage:\
      \ 0.072 seconds\nPreprocessor visited node count: 17/1000000\nPreprocessor generated\
      \ node count: 32/1000000\nPost‐expand include size: 38/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3524-0!*!0!!*!*!* and timestamp 20221118160218 and revision\
      \ id 9022\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Terminology"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers/Meatier Parts"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Class"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "3"
    line: "What an OOP Program Consists of ="
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP"
    byteoffset: 290
    anchor: "What_an_OOP_Program_Consists_of_.3D"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP"
    byteoffset: 4988
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_Non-Programmers/Parts_Of_OOP"
    byteoffset: 5546
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript For Non-Programmers/Parts Of OOP"
  iwlinks: []
  wikitext:
    text: "This page is part of the [[Legacy:UnrealScript For Non-Programmers|UnrealScript\
      \ For Non-Programmers]] tutorial which is broken down into a series of pages.\
      \ It may not make sense if you haven't been following this series, then again,\
      \ you never know, you might gain something from it.\n\n----\n\n=== What an OOP\
      \ Program Consists of ====\n; [[Legacy:Object|Object]]s : defined on [[Legacy:Terminology|Terminology]]\
      \ as: \"abstraction that typically is assigned clearly specified characteristics;\
      \ in other words, a chunk of data with a certain class associated to it; the\
      \ class describes the data structure and contains the code that deals with objects\
      \ of that class\".\n\n; [[Legacy:Class|Class]]es : defined on [[Legacy:Terminology|Terminology]]\
      \ as: \"type of an object, an object's class defines how an object is implemented;\
      \ derived from or instantiated by an object, from which it inherits clearly\
      \ defined attributes. A class can contain: static data members, objects of another\
      \ class, pointers and references to types and objects of the same or another\
      \ class, declarations of another class, member functions, and friend classes.\
      \ All Classes are listed in the Actor browser\".\n\n; [[Legacy:Function Syntax|Function]]s\
      \ : defined on [[Legacy:Terminology|Terminology]] as: \"piece of code with a\
      \ defined entry point and one or more exit points\".\n\nBasically, a section\
      \ of code within an object that is declared (created and defined) and does nothing\
      \ until it is called from somewhere else. I assume that the \"defined entry\
      \ point\" would be the point at which another function calls that function.\
      \ At that point the program will begin to execute the code in that function\
      \ in the order that the function dictates. Within the function will be at least\
      \ one \"exit point\" which tells the program that there is no more code to execute\
      \ from that function.\n\nThat exit point may be reached upon completion of every\
      \ line of code in the function or as the result of a test within that function\
      \ that indicates in the event of a negative result the program should skip all\
      \ the rest of the code in the function and exit.\n\nWhen the program exits that\
      \ function it resumes executing code in the function that called it, and continues\
      \ this until reaching an exit point in that function.\n\n; [[Legacy:Variable\
      \ Syntax|Variable]]s : defined on [[Legacy:Terminology|Terminology]] as: \"\
      memory location with a symbolic name where a program can store information for\
      \ future retrieval\".\n\nWhen a variable is declared (created and defined) in\
      \ a program it becomes the symbolic name of a location in memory and your program\
      \ can save data to that location. The data in that variable (its \"value\")\
      \ can be read and can be changed by the program. You can declare variables in\
      \ your program and name them whatever you want to name them as long as the name\
      \ is not recognized anywhere else in the program as something other than a variable\
      \ or as another variable (still yet, that depends on the \"scope\" in which\
      \ that variable exists &ndash; more on scope shortly).\n\nA ''variable'' is\
      \ created as soon as it is declared, and it is ''initialized'' (set to a specific\
      \ value) with its data type's empty value. I would suggest that you initialize\
      \ your variables as soon as you have declared them to keep a more organized\
      \ frame of mind about them. Otherwise, if you try to retrieve the value of your\
      \ variable later you may get a value like \"Null\" or something instead of the\
      \ value you could have initialized it to such as \"0\" or \"\" (a text value\
      \ with no text yet) or anything else that might make more sense to you than\
      \ whatever UnrealScript might put there depending on the data type you declared\
      \ the variable as. An example of initializing a variable will follow later in\
      \ this tutorial and you will see how that initial value can make more sense.\n\
      \nScope has to do with depths of a program and at what depths a variable exists.\
      \ For example if you declared a variable as \"local\" then its scope is only\
      \ within that function or class that is created in unless it is passed to another\
      \ function or class as a parameter. Therefore, if a function outside of that\
      \ variable's scope was to try to look at that variable to change it or retrieve\
      \ the value of it, your program would error because the variable doesn't exist\
      \ to that function. If you declared the variable as \"public\" then you had\
      \ better make sure that its name is quite unique and keep track of where all\
      \ it is being changed from because it can be called from anywhere in the program,\
      \ from any function in any class. If you loose track of that then your program\
      \ is out of control and functions might be working on corrupted data that doesn't\
      \ add up later on because the variable's value gets changed by one function\
      \ while another function is working with its previous value, unaware of the\
      \ change.\n\nJust take the general idea for now. You will understand more when\
      \ you start to use variables. They will become clearer also as you start to\
      \ see them in the examples you will be studying here.\n\n----\n\n==Related Topics==\n\
      \n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Meatier Parts]] &ndash; The next page\
      \ of this tutorial.\n* [[Legacy:UnrealScript For Non-Programmers|UnrealScript\
      \ For Non-Programmers]] &ndash; The page this page is part of.\n* [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]] &ndash; all the UnrealScript tutorials\n* [[Legacy:UnrealScript|UnrealScript]]\
      \ &ndash; all the reference pages\n* [[Legacy:Mutator Topics|Mutator Topics]]\
      \ &ndash; more on mutators\n* [[Legacy:Making Mods|Making Mods]] &ndash; more\
      \ on the organizational and social aspects\n\n==Discussion==\n\nThis tut is\
      \ going nowhere. I (the author) will not be contributing to it anymore, and\
      \ it needs much much more. No one else is contributing to it, so it's a waste\
      \ of space and an eye-sore.[DeleteME]"
  properties: []
  revId: 9022
name: "Legacy:UnrealScript For Non-Programmers/Parts Of OOP"
revision:
  revid: 9022
  parentid: 9023
  user: "Bbb72-0-173-98.bendbroadband.com"
  timestamp: 1136902052.000000000
  comment: "DeleteME request, per author."
timestamp: 1668787186.554356000
