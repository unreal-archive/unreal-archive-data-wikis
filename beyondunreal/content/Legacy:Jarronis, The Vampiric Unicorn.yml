---
parse:
  title: "Legacy:Jarronis, The Vampiric Unicorn"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#About_Me\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">About Me</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Bloom\"><span class=\"\
      tocnumber\">1.1</span> <span class=\"toctext\">Bloom</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Current_Coding_Projects_.28wiki-related.29\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Current Coding Projects\
      \ (wiki-related)</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"><a\
      \ href=\"#Progress\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\"\
      >Progress</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Comments</span></a></li>\n</ul>\n</div>\n<p></p>\n<h3><span class=\"mw-headline\"\
      \ id=\"About_Me\">About Me</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Jarronis,_The_Vampiric_Unicorn?section=1\"\
      \ title=\"Edit section: About Me\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Hobby UScript-Coder, Oldsk00l-UT-Combat-Monster &amp;\
      \ UT2003-N00b...</p>\n<h4><span class=\"mw-headline\" id=\"Bloom\">Bloom</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Jarronis,_The_Vampiric_Unicorn?section=2\" title=\"Edit\
      \ section: Bloom\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Well, after playing some game-demos, i wondered if it is possible to implement\
      \ a Bloom-Effect in UT. I thought on using a scripted texture with drawportal,\
      \ then filtering the bright parts of the rendered frame.</p>\n<p>Unfortunately,\
      \ i discovered that the Canvas - Class is not capable to render a ScriptedTexture\
      \ directly, so i had to use DrawActor with a rectangle mesh instead.</p>\n<p>My\
      \ Results are quite good, but still needs some tweaks.</p>\n<p>Because of the\
      \ restrictions of the Drawportal - Routine of a scripted Texture, this Bloom-Effect\
      \ is best used with Third-Person-View Gametypes(namely Chaos Duel).</p>\n<p>See\
      \ <a href=\"/Legacy:Bloom\" title=\"Legacy:Bloom\">Bloom</a></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Current_Coding_Projects_.28wiki-related.29\">Current\
      \ Coding Projects (wiki-related)</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Jarronis,_The_Vampiric_Unicorn?section=3\"\
      \ title=\"Edit section: Current Coding Projects (wiki-related)\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>See <a href=\"/Legacy:Mod_Ideas/Chameleon\"\
      \ title=\"Legacy:Mod Ideas/Chameleon\">Mod_Ideas/Chameleon</a></p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Progress\">Progress</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Jarronis,_The_Vampiric_Unicorn?section=4\"\
      \ title=\"Edit section: Progress\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>I just figured out that it is much easier get texture\
      \ names form the level than i thought. If you look in the definition of the\
      \ trace function, you'll see one interresting thing:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">native</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">277</span><span class=\"br0\">)</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw9\">Actor</span> <span\
      \ class=\"kw4\">Trace</span>\n<span class=\"br0\">(</span>\n\t<span class=\"\
      kw1\">out</span> <span class=\"kw5\">vector</span>      HitLocation,\n\t<span\
      \ class=\"kw1\">out</span> <span class=\"kw5\">vector</span>      HitNormal,\n\
      \t<span class=\"kw5\">vector</span>          TraceEnd,\n\t<span class=\"kw1\"\
      >optional</span> <span class=\"kw5\">vector</span> TraceStart,\n\t<span class=\"\
      kw1\">optional</span> <span class=\"kw5\">bool</span>   bTraceActors,\n\t<span\
      \ class=\"kw1\">optional</span> <span class=\"kw5\">vector</span> Extent,\n\t\
      <span class=\"kw1\">optional</span> <span class=\"kw1\">out</span> <span class=\"\
      kw5\">material</span> <span class=\"kw5\">Material</span>\n<span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p>The very last parameter allows to store the\
      \ material from the actor, hit by the trace. This is pretty cool for the Chameleon-Mod.\
      \ I've experimented with it, and it works great.</p>\n<p>This, of course, is\
      \ not all, because this has to be a kind of client-side effect to determine\
      \ what wall we should trace. I think i could hack this into an interaction.</p>\n\
      <p>So here is a Screenshot, showing an similiar effect like the one that is\
      \ planned. In fact it is actually the chameleon effect, but still picking the\
      \ texture from the ground.</p>\n<p>&lt;img/ src=\"<a rel=\"nofollow\" class=\"\
      external free\" href=\"http://home.arcor.de/jarronis/ch1.jpg\">http://home.arcor.de/jarronis/ch1.jpg</a>\"\
      &gt;</p>\n<p>He's to shy to show his face because this isn't camouflaged&#160;:P</p>\n\
      <p>Technically spoken: I still replaced only the first entry in the Skins-Array.</p>\n\
      <p>Here is the code of the Mini-Mutator (seen in Action in the screenshot).</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//==================================================</span>\n\
      <span class=\"co1\">// ChameleonFX &lt;-J-VU</span>\n<span class=\"co1\">//\
      \ This class changes skin of the assigned pawn, </span>\n<span class=\"co1\"\
      >// according to the material of the ground</span>\n<span class=\"co1\">//==================================================</span>\n\
      \ \n<span class=\"kw1\">class</span> ChameleonFX <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Actor</span>;\n<span class=\"kw1\">var</span> <span class=\"\
      kw9\">pawn</span> AttachedTo;\n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">vector</span> loc, norm, target;\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">material</span> Tmat;\n \n<span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">postbeginplay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">Settimer</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0.2</span>,<span class=\"kw6\">true</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >event</span> <span class=\"kw4\">timer</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>AttachedTo <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n\t\tAttachedTo.<span class=\"kw4\">Trace</span><span class=\"\
      br0\">(</span>loc,norm,<span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span\
      \ class=\"nu0\">256</span><span class=\"sy0\">+</span>attachedTo.<span class=\"\
      kw7\">location</span>,attachedTo.<span class=\"kw7\">location</span>,<span class=\"\
      kw6\">true</span>,,tmat<span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>TMat<span class=\"sy0\">!=</span><span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span> AttachedTo.<span class=\"\
      kw7\">Skins</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">=</span>Tmat;\n\t<span class=\"\
      br0\">}</span>\n\t<span class=\"kw2\">else</span> <span class=\"kw4\">destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>This class dynamically changes the pawn's skin. As you see, the trace\
      \ is still constant, and \"scans\" the ground for his material. I'm going to\
      \ code this into an (hopefully) complete client side Interaction-Class, so every\
      \ player determines the direction for the trace for himself.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">//=============================================================</span>\n\
      <span class=\"co1\">// MutCham &lt; J-VU</span>\n<span class=\"co1\">// This\
      \ mutator is responsible for spawning a ChameleonFX-Actor</span>\n<span class=\"\
      co1\">// for each pawn that logs in.</span>\n<span class=\"co1\">//=============================================================</span>\n\
      \ \n<span class=\"kw1\">class</span> MutCham <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Mutator</span>;\n \n<span class=\"kw1\">function</span>\
      \ ModifyPlayer<span class=\"br0\">(</span><span class=\"kw9\">Pawn</span> Other<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span> ChameleonFX cfx;\n\tcfx <span class=\"sy0\">=</span> <span class=\"\
      kw4\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Chameleon.ChameleonFX'</span>,<span class=\"kw6\">self</span><span\
      \ class=\"br0\">)</span>;\n\tcfx.<span class=\"me0\">AttachedTo</span><span\
      \ class=\"sy0\">=</span>Other;\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> NextMutator <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span> <span class=\"br0\">)</span>\n\t\tNextMutator.<span class=\"me0\"\
      >ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n\tFriendlyName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Chameleon Arena\"</span>\n\tDescription<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Chameleon\"</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Well, that is the Mutator...</p>\n<p>This one was pretty easy, as\
      \ you see.</p>\n<p>After a long time of inactivity, i continued coding on this\
      \ issue.</p>\n<p>So here's the Code of the Interaction-Class Version:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//===========================================================</span>\n\
      <span class=\"co1\">// ChamInter &lt;- J-VU</span>\n<span class=\"co1\">// This\
      \ (hopefully) client-sided class is responsible for </span>\n<span class=\"\
      co1\">// detecting the proper texture for the Chameleon effect</span>\n<span\
      \ class=\"co1\">// from the view of the player.</span>\n<span class=\"co1\"\
      >// A lot stuff is taken from the UnrealWiki - Documentations</span>\n<span\
      \ class=\"co1\">// so do not wonder if there're 'common' things</span>\n<span\
      \ class=\"co1\">//===========================================================</span>\n\
      \ \n<span class=\"kw1\">class</span> ChamInter <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Interaction</span>;\n \n<span class=\"kw1\">var</span>\
      \ GameReplicationInfo GRI;\n<span class=\"kw1\">var</span> Font UsedFont;\n\
      \ \n<span class=\"kw1\">event</span> Initialized<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span><span class=\"st0\">\"Chameleon Interaction\
      \ Initialized\"</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\"\
      >foreach</span> ViewportOwner.<span class=\"kw9\">Actor</span>.<span class=\"\
      kw2\">DynamicActors</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'GameReplicationInfo'</span>, GRI<span class=\"br0\">)</span>\n\
      \        <span class=\"kw2\">If</span> <span class=\"br0\">(</span>GRI <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n            <span class=\"kw2\">Break</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">event</span> <span class=\"kw4\">tick</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">float</span> DeltaTime<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Pawn</span> ChP, Selfpawn;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> loc, norm, target;\n\t<span class=\"kw1\"\
      >local</span> <span class=\"kw5\">material</span> Tmat;\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>ViewportOwner.<span class=\"kw9\">Actor</span>.<span\
      \ class=\"kw9\">Pawn</span> <span class=\"sy0\">==</span> <span class=\"kw5\"\
      >None</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span>;\n\
      \tSelfpawn <span class=\"sy0\">=</span> ViewportOwner.<span class=\"kw9\">Actor</span>.<span\
      \ class=\"kw9\">Pawn</span>;\n\t<span class=\"kw2\">foreach</span> ViewportOwner.<span\
      \ class=\"kw9\">Actor</span>.<span class=\"kw2\">DynamicActors</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'Pawn'</span>,\
      \ ChP<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tViewportOwner.<span\
      \ class=\"kw9\">Actor</span>.<span class=\"kw4\">Trace</span><span class=\"\
      br0\">(</span>loc, norm, <span class=\"br0\">(</span><span class=\"kw3\">normal</span><span\
      \ class=\"br0\">(</span>ChP.<span class=\"me0\">location</span><span class=\"\
      sy0\">-</span>Selfpawn.<span class=\"kw7\">location</span><span class=\"br0\"\
      >)</span><span class=\"sy0\">*</span><span class=\"nu0\">8192</span><span class=\"\
      br0\">)</span><span class=\"sy0\">+</span>ChP.<span class=\"kw7\">location</span>,ChP.<span\
      \ class=\"kw7\">location</span>,<span class=\"kw6\">true</span>,,tmat<span class=\"\
      br0\">)</span>;\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>TMat<span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span> ChP.<span class=\"kw7\">Skins</span><span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>Tmat;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>TMat<span class=\"\
      sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\">)</span> ChP.<span\
      \ class=\"kw7\">Skins</span><span class=\"br0\">[</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>Tmat;\n \n\t\
      <span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> PostRender<span class=\"\
      br0\">(</span> <span class=\"kw8\">canvas</span> <span class=\"kw8\">Canvas</span>\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw2\">If</span> <span class=\"br0\">(</span>UsedFont <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span> UsedFont <span\
      \ class=\"sy0\">=</span> Font<span class=\"br0\">(</span><span class=\"kw3\"\
      >DynamicLoadObject</span><span class=\"br0\">(</span><span class=\"st0\">\"\
      UT2003Fonts.FontEurostile12\"</span>, <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Font'</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">Font</span>\
      \ <span class=\"sy0\">=</span> UsedFont;\n\t<span class=\"kw8\">Canvas</span>.<span\
      \ class=\"me0\">FontScaleX</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>;\n\t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">FontScaleY</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;\n\t<span class=\"\
      kw8\">Canvas</span>.<span class=\"me0\">SetPos</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">10</span>,<span class=\"nu0\">200</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">drawcolor</span>.<span\
      \ class=\"me0\">r</span><span class=\"sy0\">=</span><span class=\"nu0\">200</span>;\n\
      \t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">drawcolor</span>.<span\
      \ class=\"me0\">g</span><span class=\"sy0\">=</span><span class=\"nu0\">200</span>;\n\
      \t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">drawcolor</span>.<span\
      \ class=\"me0\">b</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span>;\n\
      \t<span class=\"kw8\">Canvas</span>.<span class=\"me0\">DrawText</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Chameleon Activ\"</span><span\
      \ class=\"br0\">)</span>;<span class=\"co1\">//debugging...</span>\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"\
      br0\">{</span>\n\tbActive<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      \tbRequiresTick<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      \tbvisible<span class=\"sy0\">=</span><span class=\"kw6\">true</span>;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>You'll still need a mutator\
      \ to spawn these interactions. This of course is a very basic version, so it\
      \ hasn't any gameplay tweaks.</p>\n<hr />\n<h2><span class=\"mw-headline\" id=\"\
      Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Jarronis,_The_Vampiric_Unicorn?section=5\" title=\"\
      Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>CH3Z:</b> Wow! I'm excited! This is for UT Classic then?</p>\n<p><b>Jarronis,\
      \ The Vampiric Unicorn</b> I'm sorry, but this is still for UT2003. I haven't\
      \ coded for UT Classic for awhile. But if picked up my UT Classic Installation\
      \ form my HDD, i can go for it&#160;:)</p>\n<p><b>Mosquito:</b> I'm interested\
      \ to know what you're going to do with the code once you finished. It adds a\
      \ whole new type of gameplay. As I mentioned before, I wanted to do this in\
      \ my HL mod and my UT2003 mod. I'm a beginning scripter.</p>\n<p><b>CH3Z:</b>\
      \ I just took a look at UT code and the very param that you mentioned, \"optional\
      \ out material Material\" turns out to be the only line that is different in\
      \ UT&gt;&gt;Actor/native(277) final function Actor Trace. The diff is that it's\
      \ just not there in the UT engine like it is in UT2003. =( oh well.</p>\n<p><b>Mr.Mitchell:</b>\
      \ For the old UT you can use a Decal to get a texture. Just spawn one and use\
      \ the AttachDecal function to attach it to a surface. The attachDecal function\
      \ returns the texture of the surface it is attached to.</p>\n<p><b>Jarronis,\
      \ The Vampiric Unicorn</b> Cool! Thanks for this advice.</p>\n<p><b>Ch3z:</b>\
      \ Looks like your having all kinds of fun Jarronis. =) I wanted to let you know\
      \ that I added a page to the Wiki that you might find usefull. The <a href=\"\
      /Legacy:Testing_Lab\" title=\"Legacy:Testing Lab\">Testing Lab</a> might have\
      \ been nice when you wanted to have someone test the Chameleon Mutator online.</p>\n\
      <p>I would love to see new models you make or any work you do. But remember\
      \ I'm still only running UT. And yes, I still still wear army jackets around\
      \ town from the surplus stores heheh I'm not dated, I'm just seasoned =P Keep\
      \ havin' fun with the engine.</p>\n<p><b>Jarronis, The Vampiric Unicorn</b>\
      \ Oldsk00l-UT, hm? Well... i think there's a whole UT-Weapon-Arsenal haunting\
      \ around on my HDD. If i dig it out, you probably have something to frag around\
      \ with, but be prepared: As you might guess i have \"slight\" tendence to overkill\
      \ weaponery (more BOOOOM for ya' money). There's even a complete War-Suite,\
      \ including adaptiv Armor, Invisibility, LifeSens-Wallhack... ehm, okay... so\
      \ much 'bout my Definition of \"Overkill\"&#160;:eek:</p>\n<p><b>Foxpaw:</b>\
      \ A bloom effect, eh? What exact is a \"bloom effect.\" I did a search and found\
      \ some pictures of something called a bloom effect but I'm not confident that\
      \ what I found is the same thing that you have implemented.</p>\n<p><b>Jarronis,\
      \ The Vampiric Unicorn:</b> Well, theoretical, bloom means halos around bright\
      \ reflections. A similar effects is used Tron 2.0 for producing the glows. It\
      \ also should blur bright surfaces in general. Well, admit, i'm still experimenting,\
      \ and it is not quite easy to implement effects like this in UT. In the current\
      \ state, the effect is quite subtil, and the screenshot isn't very good as demonstration.\
      \ I'll put up some more.</p>\n<p><b>SuperApe:</b> I was intrigued by the Bloom\
      \ page, which led me here. It looks like the latest generation lighting effects\
      \ seen in all the XBox360 launch titles. (Call of Duty2, Killzone, etc.) The\
      \ Bloom download link is broken unfortunately. I came here in an attempt to\
      \ find out more about what the BloomMesh was, and I see it says above it's a\
      \ rectangular (plane?) mesh and what does the DreamTex look like? It would be\
      \ nice to see the latest version as a download. I like the Cameleon-FX too.&#160;:)\
      \ Neat stuff. It appears you have the Replication working, but I may be able\
      \ to help.</p>\n<p><b>A Lamer:</b> I know this is a miserable and selfish thing\
      \ to ask, but how hard would it be to make changes for it so it could fit the\
      \ Unreal 2 runtime architecture. You know, that you can download from the actual\
      \ site? I wouldn't be inquiring, honestly, but my father has a death-grip on\
      \ my money and refuses to let me buy things. Hence no UT2003, etc. If it's too\
      \ hard or complicated, you really don't need to bother, btw. I'd just like to\
      \ know.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.109 seconds\nReal\
      \ time usage: 0.247 seconds\nPreprocessor visited node count: 55/1000000\nPreprocessor\
      \ generated node count: 112/1000000\nPost‐expand include size: 30/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:1549-0!*!0!!en!*!* and timestamp\
      \ 20221118154658 and revision id 3858\n -->\n"
  categories:
  - sortkey: "Jarronis, The Vampiric Unicorn"
    name: "Legacy_Personal_Page"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Bloom"
  - ns: 100
    exists: true
    name: "Legacy:Testing Lab"
  - ns: 100
    exists: true
    name: "Legacy:Mod Ideas/Chameleon"
  templates: []
  images: []
  externallinks:
  - "http://home.arcor.de/jarronis/ch1.jpg"
  sections:
  - toclevel: 1
    level: "3"
    line: "About Me"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Jarronis,_The_Vampiric_Unicorn"
    byteoffset: 0
    anchor: "About_Me"
  - toclevel: 2
    level: "4"
    line: "Bloom"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Jarronis,_The_Vampiric_Unicorn"
    byteoffset: 82
    anchor: "Bloom"
  - toclevel: 1
    level: "3"
    line: "Current Coding Projects (wiki-related)"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Jarronis,_The_Vampiric_Unicorn"
    byteoffset: 724
    anchor: "Current_Coding_Projects_.28wiki-related.29"
  - toclevel: 2
    level: "4"
    line: "Progress"
    number: "2.1"
    index: "4"
    fromtitle: "Legacy:Jarronis,_The_Vampiric_Unicorn"
    byteoffset: 826
    anchor: "Progress"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Jarronis,_The_Vampiric_Unicorn"
    byteoffset: 5501
    anchor: "Comments"
  displaytitle: "Legacy:Jarronis, The Vampiric Unicorn"
  iwlinks: []
  wikitext:
    text: "===About Me===\n\nHobby UScript-Coder, Oldsk00l-UT-Combat-Monster & UT2003-N00b...\n\
      \n====Bloom====\n\nWell, after playing some game-demos, i wondered if it is\
      \ possible to implement a Bloom-Effect in UT. I thought  on using a scripted\
      \ texture with drawportal, then filtering the bright parts of the rendered frame.\
      \ \n\nUnfortunately, i discovered that the Canvas - Class is not capable to\
      \ render a ScriptedTexture directly, so i had to use DrawActor with a rectangle\
      \ mesh instead. \n\nMy Results are quite good, but still needs some tweaks.\n\
      \nBecause of the restrictions of the Drawportal - Routine of a scripted Texture,\
      \ this Bloom-Effect is best used with Third-Person-View Gametypes(namely Chaos\
      \ Duel).\n\nSee [[Legacy:Bloom|Bloom]]\n\n===Current Coding Projects (wiki-related)===\n\
      \nSee [[Legacy:Mod_Ideas/Chameleon|Mod_Ideas/Chameleon]]\n\n====Progress====\n\
      \nI just figured out that it is much easier get texture names form the level\
      \ than i thought. If you look in the definition of the trace function, you'll\
      \ see one interresting thing:\n\n<uscript>\nnative(277) final function Actor\
      \ Trace\n(\n\tout vector      HitLocation,\n\tout vector      HitNormal,\n\t\
      vector          TraceEnd,\n\toptional vector TraceStart,\n\toptional bool  \
      \ bTraceActors,\n\toptional vector Extent,\n\toptional out material Material\n\
      );\n</uscript>\n\nThe very last parameter allows to store the material from\
      \ the actor, hit by the trace. This is pretty cool for the Chameleon-Mod. I've\
      \ experimented with it, and it works great.\n\nThis, of course, is not all,\
      \ because this has to be a kind of client-side effect to determine what wall\
      \ we should trace. I think i could hack this into an interaction.  \n\nSo here\
      \ is a Screenshot, showing an similiar effect like the one that is planned.\
      \ In fact it is actually the chameleon effect, but still picking the texture\
      \ from the ground.\n\n<img/ src=\"http://home.arcor.de/jarronis/ch1.jpg\">\n\
      \nHe's to shy to show his face because this isn't camouflaged :P\n\nTechnically\
      \ spoken: I still replaced only the first entry in the Skins-Array. \n\nHere\
      \ is the code of the Mini-Mutator (seen in Action in the screenshot).\n\n<uscript>\n\
      //==================================================\n// ChameleonFX <-J-VU\n\
      // This class changes skin of the assigned pawn, \n// according to the material\
      \ of the ground\n//==================================================\n\nclass\
      \ ChameleonFX extends Actor;\nvar pawn AttachedTo;\nvar vector loc, norm, target;\n\
      var material Tmat;\n\nevent postbeginplay()\n{\n\tSettimer(0.2,true);\n}\n\n\
      event timer()\n{\n\tif (AttachedTo != None)\n\t{\n\t\tAttachedTo.Trace(loc,norm,vect(0,0,-1)*256+attachedTo.location,attachedTo.location,true,,tmat);\n\
      \t\tif (TMat!=None) AttachedTo.Skins[0]=Tmat;\n\t}\n\telse destroy();\n}\n</uscript>\n\
      \nThis class dynamically changes the pawn's skin. As you see, the trace is still\
      \ constant, and \"scans\" the ground for his material. I'm going to code this\
      \ into an (hopefully) complete client side Interaction-Class, so every player\
      \ determines the direction for the trace for himself.\n\n<uscript>\n//=============================================================\n\
      // MutCham < J-VU\n// This mutator is responsible for spawning a ChameleonFX-Actor\n\
      // for each pawn that logs in.\n//=============================================================\n\
      \nclass MutCham extends Mutator;\n\nfunction ModifyPlayer(Pawn Other)\n{\n\t\
      local ChameleonFX cfx;\n\tcfx = spawn(class'Chameleon.ChameleonFX',self);\n\t\
      cfx.AttachedTo=Other;\n\tif ( NextMutator != None )\n\t\tNextMutator.ModifyPlayer(Other);\n\
      }\n\ndefaultproperties\n{\n\tFriendlyName=\"Chameleon Arena\"\n\tDescription=\"\
      Chameleon\"\n}\n</uscript>\n\nWell, that is the Mutator...\n\nThis one was pretty\
      \ easy, as you see.\n\nAfter a long time of inactivity, i continued coding on\
      \ this issue.\n\nSo here's the Code of the Interaction-Class Version:\n\n<uscript>\n\
      //===========================================================\n// ChamInter\
      \ <- J-VU\n// This (hopefully) client-sided class is responsible for \n// detecting\
      \ the proper texture for the Chameleon effect\n// from the view of the player.\n\
      // A lot stuff is taken from the UnrealWiki - Documentations\n// so do not wonder\
      \ if there're 'common' things\n//===========================================================\n\
      \nclass ChamInter extends Interaction;\n\nvar GameReplicationInfo GRI;\nvar\
      \ Font UsedFont;\n\nevent Initialized()\n{\n    log(\"Chameleon Interaction\
      \ Initialized\");\n    foreach ViewportOwner.Actor.DynamicActors(class'GameReplicationInfo',\
      \ GRI)\n        If (GRI != None)\n            Break;\n}\n\nevent tick(float\
      \ DeltaTime)\n{\n\tlocal Pawn ChP, Selfpawn;\n\tlocal vector loc, norm, target;\n\
      \tlocal material Tmat;\n\tif (ViewportOwner.Actor.Pawn == None) return;\n\t\
      Selfpawn = ViewportOwner.Actor.Pawn;\n\tforeach ViewportOwner.Actor.DynamicActors(class'Pawn',\
      \ ChP)\n\t{\n\t\tViewportOwner.Actor.Trace(loc, norm, (normal(ChP.location-Selfpawn.location)*8192)+ChP.location,ChP.location,true,,tmat);\n\
      \t\tif (TMat!=None) ChP.Skins[0]=Tmat;\n\t\tif (TMat!=None) ChP.Skins[1]=Tmat;\n\
      \t\t\n\t}\n\t\t\n}\n\nsimulated function PostRender( canvas Canvas )\n{\n\t\
      If (UsedFont == None) UsedFont = Font(DynamicLoadObject(\"UT2003Fonts.FontEurostile12\"\
      , class'Font'));\n\tCanvas.Font = UsedFont;\n\tCanvas.FontScaleX = 1;\n\tCanvas.FontScaleY\
      \ = 1;\n\tCanvas.SetPos(10,200);\n\tCanvas.drawcolor.r=200;\n\tCanvas.drawcolor.g=200;\n\
      \tCanvas.drawcolor.b=255;\n\tCanvas.DrawText(\"Chameleon Activ\");//debugging...\n\
      }\n\ndefaultproperties\n{\n\tbActive=true\n\tbRequiresTick=true\n\tbvisible=true;\n\
      }\n</uscript>\n\nYou'll still need a mutator to spawn these interactions. This\
      \ of course is a very basic version, so it hasn't any gameplay tweaks.\n\n----\n\
      \n==Comments ==\n\n'''CH3Z:''' Wow! I'm excited! This is for UT Classic then?\n\
      \n'''Jarronis, The Vampiric Unicorn''' I'm sorry, but this is still for UT2003.\
      \ I haven't coded for UT Classic for awhile. But if picked up my UT Classic\
      \ Installation form my HDD, i can go for it :)\n\n'''Mosquito:''' I'm interested\
      \ to know what you're going to do with the code once you finished.  It adds\
      \ a whole new type of gameplay.  As I mentioned before, I wanted to do this\
      \ in my HL mod and my UT2003 mod.  I'm a beginning scripter.\n\n'''CH3Z:'''\
      \ I just took a look at UT code and the very param that you mentioned, \"optional\
      \ out material Material\" turns out to be the only line that is different in\
      \ UT>>Actor/native(277) final function Actor Trace. The diff is that it's just\
      \ not there in the UT engine like it is in UT2003. =( oh well.\n\n'''Mr.Mitchell:'''\
      \ For the old UT you can use a Decal to get a texture. Just spawn one and use\
      \ the AttachDecal function to attach it to a surface. The attachDecal function\
      \ returns the texture of the surface it is attached to.\n\n'''Jarronis, The\
      \ Vampiric Unicorn''' Cool! Thanks for this advice.\n\n'''Ch3z:''' Looks like\
      \ your having all kinds of fun Jarronis. =) I wanted to let you know that I\
      \ added a page to the Wiki that you might find usefull. The [[Legacy:Testing\
      \ Lab|Testing Lab]] might have been nice when you wanted to have someone test\
      \ the Chameleon Mutator online.\n\nI would love to see new models you make or\
      \ any work you do. But remember I'm still only running UT. And yes, I still\
      \ still wear army jackets around town from the surplus stores heheh I'm not\
      \ dated, I'm just seasoned =P Keep havin' fun with the engine. \n\n'''Jarronis,\
      \ The Vampiric Unicorn''' Oldsk00l-UT, hm? Well... i think there's a whole UT-Weapon-Arsenal\
      \ haunting around on my HDD. If i dig it out, you probably have something to\
      \ frag around with, but be prepared: As you might guess i have \"slight\" tendence\
      \ to overkill weaponery (more BOOOOM for ya' money). There's even a complete\
      \ War-Suite, including adaptiv Armor, Invisibility, LifeSens-Wallhack... ehm,\
      \ okay... so much 'bout my Definition of \"Overkill\" :eek:\n\n'''Foxpaw:'''\
      \ A bloom effect, eh? What exact is a \"bloom effect.\" I did a search and found\
      \ some pictures of something called a bloom effect but I'm not confident that\
      \ what I found is the same thing that you have implemented.\n\n'''Jarronis,\
      \ The Vampiric Unicorn:''' Well, theoretical, bloom means halos around bright\
      \ reflections. A similar effects is used Tron 2.0 for producing the glows. It\
      \ also should blur bright surfaces in general. Well, admit, i'm still experimenting,\
      \ and it is not quite easy to implement effects like this in UT. In the current\
      \ state, the effect is quite subtil, and the screenshot isn't very good as demonstration.\
      \ I'll put up some more.\n\n'''SuperApe:''' I was intrigued by the Bloom page,\
      \ which led me here.  It looks like the latest generation lighting effects seen\
      \ in all the XBox360 launch titles. (Call of Duty2, Killzone, etc.)  The Bloom\
      \ download link is broken unfortunately.  I came here in an attempt to find\
      \ out more about what the BloomMesh was, and I see it says above it's a rectangular\
      \ (plane?) mesh and what does the DreamTex look like?  It would be nice to see\
      \ the latest version as a download.  I like the Cameleon-FX too. :)  Neat stuff.\
      \  It appears you have the Replication working, but I may be able to help.\n\
      \n'''A Lamer:''' I know this is a miserable and selfish thing to ask, but how\
      \ hard would it be to make changes for it so it could fit the Unreal 2 runtime\
      \ architecture. You know, that you can download from the actual site? I wouldn't\
      \ be inquiring, honestly, but my father has a death-grip on my money and refuses\
      \ to let me buy things. Hence no UT2003, etc. If it's too hard or complicated,\
      \ you really don't need to bother, btw. I'd just like to know.\n\n[[Category:Legacy\
      \ Personal Page|{{PAGENAME}}]]"
  properties: []
  revId: 3858
name: "Legacy:Jarronis, The Vampiric Unicorn"
revision:
  revid: 3858
  parentid: 3859
  user: "P54BD4ECF.dip.t-dialin.net"
  timestamp: 1188328567.000000000
  comment: "*"
timestamp: 1668786341.840017000
