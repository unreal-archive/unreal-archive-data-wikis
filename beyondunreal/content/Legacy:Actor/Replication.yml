---
parse:
  title: "Legacy:Actor/Replication"
  text:
    text: "<p>This page describes the properties of <a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a> that have bearing on the behavior of <a href=\"/Legacy:Replication\"\
      \ title=\"Legacy:Replication\">Replication</a></p>\n<dl>\n<dt>NetPriority&#160;</dt>\n\
      <dd>This floating-point value is used to determine how much network bandwidth\
      \ is allocated for keeping the actor up-to-date across the network. The ratio\
      \ of an actor's NetPriority and another actor's NetPriority is the same ratio\
      \ as the bandwidth that will be allocated to each. The default value for actors\
      \ is 1.00 (Checked in UT99 and in UT2004).</dd>\n</dl>\n<dl>\n<dt>NetUpdateFrequency&#160;</dt>\n\
      <dd></dd>\n</dl>\n<p>NetUpdateFrequency allows you to throttle back the amount\
      \ of network traffic generated to keep an actor up-to-date. This is useful when\
      \ the data changes frequently but you only want periodic updates. For example,\
      \ PlayerReplicationInfo contains a lot of data about the client. Stuff like\
      \ the various players' pings may change quite frequently, and having the client\
      \ keep track of such information would be quite a network hog. But since PlayerReplicationInfo\
      \ has a NetUpdateFrequency of 2, it is only updated twice a second, which is\
      \ much better for that player's, and of course the server's, bandwidth.</p>\n\
      <p>Here are some example NetUpdateFrequencies for some UT2004 classes:</p>\n\
      <table class=\"wikitable\">\n<tr>\n<td style=\"text-align: center\"><b>Class</b></td>\n\
      <td style=\"text-align: center\"><b>NetUpdateFrequency</b></td>\n</tr>\n<tr>\n\
      <td style=\"text-align: center\">Actor</td>\n<td style=\"text-align: center\"\
      >100 Hz</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">Pawn</td>\n<td style=\"\
      text-align: center\">100 Hz when possessed, or 5 Hz when unpossessed</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: center\">Mover</td>\n<td style=\"text-align:\
      \ center\">1 Hz</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">Pickup</td>\n\
      <td style=\"text-align: center\">0.1 Hz, or 8 Hz when just dropped</td>\n</tr>\n\
      <tr>\n<td style=\"text-align: center\">PlayerReplicationInfo</td>\n<td style=\"\
      text-align: center\">1 Hz</td>\n</tr>\n</table>\n<p>As you can see from the\
      \ table, it's perfectly fine to alter the actor's NetUpdateFrequency to reflect\
      \ periods of increased or decreased activity.</p>\n<p><br /></p>\n<dl>\n<dt>bNoRepMesh&#160;</dt>\n\
      <dd>don't replicate mesh</dd>\n</dl>\n<dl>\n<dt>bNotOnDedServer&#160;</dt>\n\
      <dd>destroy if on dedicated server and RemoteRole == ROLE_None (emitters, etc.)</dd>\n\
      </dl>\n<p>The following <b>const bool</b> flags are maintained by the engine\
      \ and are only relevant <a href=\"/Legacy:Replication_Block\" title=\"Legacy:Replication\
      \ Block\">during replication</a>:</p>\n<dl>\n<dt>bNetInitial&#160;</dt>\n<dd>It\
      \ is true if this is the first time this actor has been replicated to the client.\
      \ It is false otherwise. This is useful for things like projectiles that only\
      \ need to have their location and velocity replicated once and their movement\
      \ can then be predicted reliably.</dd>\n</dl>\n<dl>\n<dt>bNetOwner&#160;</dt>\n\
      <dd>Indicates whether the client we are considering replicating to is the owner\
      \ of the actor we are replicating.</dd>\n</dl>\n<dl>\n<dt>bNetRelevant&#160;</dt>\n\
      <dd>Only valid server side, indicates that the server considers the actor <a\
      \ href=\"/Legacy:Relevance\" title=\"Legacy:Relevance\">relevant</a> to the\
      \ client.</dd>\n</dl>\n<dl>\n<dt>bDemoRecording&#160;</dt>\n<dd>Are we currently\
      \ demo recording?</dd>\n</dl>\n<dl>\n<dt>bClientDemoRecording&#160;</dt>\n<dd>True\
      \ if we are currently recording a client-side demo</dd>\n<dt>bRepClientDemo&#160;</dt>\n\
      <dd>True if remote client is recording demo</dd>\n<dt>bClientDemoNetFunc&#160;</dt>\n\
      <dd>True if we're client-side demo recording and this call originated from the\
      \ remote.</dd>\n<dt>bDemoOwner&#160;</dt>\n<dd>Demo recording driver owns this\
      \ actor.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Actor/Replication?section=1\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> class,\
      \ which contains the properties governing replication behaviour</li>\n<li><a\
      \ href=\"/Legacy:Introduction_To_Replication\" title=\"Legacy:Introduction To\
      \ Replication\">Introduction to Replication</a></li>\n<li><a href=\"/Legacy:Replication_Block\"\
      \ title=\"Legacy:Replication Block\">Replication Block</a></li>\n<li><a href=\"\
      /Legacy:Role\" title=\"Legacy:Role\">Role</a> and RemoteRole, and <a href=\"\
      /Legacy:NetMode\" title=\"Legacy:NetMode\">NetMode</a>.</li>\n<li><a href=\"\
      /Legacy:Netcode_Idioms\" title=\"Legacy:Netcode Idioms\">Netcode Idioms</a></li>\n\
      <li><a href=\"/Legacy:Simulated_Function\" title=\"Legacy:Simulated Function\"\
      >Simulated Function</a></li>\n<li><a href=\"/Legacy:Replicated_Function\" title=\"\
      Legacy:Replicated Function\">Replicated Function</a></li>\n<li><a href=\"/Legacy:Animation_Replication\"\
      \ title=\"Legacy:Animation Replication\">Animation Replication</a></li>\n<li><a\
      \ href=\"/Legacy:Another_Look_At_Replication\" title=\"Legacy:Another Look At\
      \ Replication\">Another Look At Replication</a></li>\n<li><a href=\"/Legacy:Replication_Examples\"\
      \ title=\"Legacy:Replication Examples\">Replication examples</a>\n<ul>\n<li><a\
      \ href=\"/Legacy:Replication_Examples/Battle_City\" title=\"Legacy:Replication\
      \ Examples/Battle City\">Replication Examples/Battle City</a></li>\n<li><a href=\"\
      /Legacy:Replication_Examples/Giant_Spider_Execution\" title=\"Legacy:Replication\
      \ Examples/Giant Spider Execution\">Replication Examples/Giant Spider Execution</a></li>\n\
      </ul>\n</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.037 seconds\n\
      Real time usage: 0.038 seconds\nPreprocessor visited node count: 5/1000000\n\
      Preprocessor generated node count: 24/1000000\nPost‐expand include size: 34/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:333-0!*!0!*!*!*!* and\
      \ timestamp 20221118121608 and revision id 1172\n -->\n"
  categories:
  - sortkey: "Actor/Replication"
    name: "Legacy_Class_(UT2004)"
  - sortkey: "Actor/Replication"
    name: "Legacy_Class_(UT2003)"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Replication Examples/Battle City"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:Netcode Idioms"
  - ns: 100
    exists: true
    name: "Legacy:Replication Block"
  - ns: 100
    exists: true
    name: "Legacy:Role"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Replication"
  - ns: 100
    exists: true
    name: "Legacy:Another Look At Replication"
  - ns: 100
    exists: true
    name: "Legacy:Replicated Function"
  - ns: 100
    exists: true
    name: "Legacy:Relevance"
  - ns: 100
    exists: true
    name: "Legacy:Animation Replication"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:NetMode"
  - ns: 100
    exists: true
    name: "Legacy:Replication Examples/Giant Spider Execution"
  - ns: 100
    exists: true
    name: "Legacy:Replication Examples"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Actor/Replication"
    byteoffset: 3108
    anchor: "Related_Topics"
  displaytitle: "Legacy:Actor/Replication"
  iwlinks: []
  wikitext:
    text: "This page describes the properties of [[Legacy:Actor|Actor]] that have\
      \ bearing on the behavior of [[Legacy:Replication|Replication]]\n\n; NetPriority\
      \ : This floating-point value is used to determine how much network bandwidth\
      \ is allocated for keeping the actor up-to-date across the network.  The ratio\
      \ of an actor's NetPriority and another actor's NetPriority is the same ratio\
      \ as the bandwidth that will be allocated to each.  The default value for actors\
      \ is 1.00 (Checked in UT99 and in UT2004).\n\n; NetUpdateFrequency : \nNetUpdateFrequency\
      \ allows you to throttle back the amount of network traffic generated to keep\
      \ an actor up-to-date.  This is useful when the data changes frequently but\
      \ you only want periodic updates.  For example, PlayerReplicationInfo contains\
      \ a lot of data about the client.  Stuff like the various players' pings may\
      \ change quite frequently, and having the client keep track of such information\
      \ would be quite a network hog.  But since PlayerReplicationInfo has a NetUpdateFrequency\
      \ of 2, it is only updated twice a second, which is much better for that player's,\
      \ and of course the server's, bandwidth. \n\nHere are some example NetUpdateFrequencies\
      \ for some UT2004 classes:\n\n{| class=\"wikitable\"\n\n|-\n| style=\"text-align:\
      \ center\" |'''Class'''\n| style=\"text-align: center\" |'''NetUpdateFrequency'''\
      \ \n|-\n| style=\"text-align: center\" |Actor\n| style=\"text-align: center\"\
      \ |100 Hz \n|-\n| style=\"text-align: center\" |Pawn\n| style=\"text-align:\
      \ center\" |100 Hz when possessed, or 5 Hz when unpossessed \n|-\n| style=\"\
      text-align: center\" |Mover\n| style=\"text-align: center\" |1 Hz \n|-\n| style=\"\
      text-align: center\" |Pickup\n| style=\"text-align: center\" |0.1 Hz, or 8 Hz\
      \ when just dropped \n|-\n| style=\"text-align: center\" |PlayerReplicationInfo\n\
      | style=\"text-align: center\" |1 Hz \n|}\n\nAs you can see from the table,\
      \ it's perfectly fine to alter the actor's NetUpdateFrequency to reflect periods\
      \ of increased or decreased activity.\n\n\n; bNoRepMesh : don't replicate mesh\n\
      \n; bNotOnDedServer : destroy if on dedicated server and RemoteRole == ROLE_None\
      \ (emitters, etc.)\n\nThe following '''const bool''' flags are maintained by\
      \ the engine and are only relevant [[Legacy:Replication Block|during replication]]:\n\
      \n; bNetInitial : It is true if this is the first time this actor has been replicated\
      \ to the client.  It is false otherwise.  This is useful for things like projectiles\
      \ that only need to have their location and velocity replicated once and their\
      \ movement can then be predicted reliably.\n\n; bNetOwner : Indicates whether\
      \ the client we are considering replicating to is the owner of the actor we\
      \ are replicating. \n\n; bNetRelevant : Only valid server side, indicates that\
      \ the server considers the actor [[Legacy:Relevance|relevant]] to the client.\n\
      \n; bDemoRecording : Are we currently demo recording?\n\n; bClientDemoRecording\
      \ : True if we are currently recording a client-side demo\n; bRepClientDemo\
      \ : True if remote client is recording demo\n; bClientDemoNetFunc : True if\
      \ we're client-side demo recording and this call originated from the remote.\n\
      ; bDemoOwner : Demo recording driver owns this actor.\n\n==Related Topics==\n\
      * [[Legacy:Actor|Actor]] class, which contains the properties governing replication\
      \ behaviour\n* [[Legacy:Introduction To Replication|Introduction to Replication]]\n\
      * [[Legacy:Replication Block|Replication Block]]\n* [[Legacy:Role|Role]] and\
      \ RemoteRole, and [[Legacy:NetMode|NetMode]].\n* [[Legacy:Netcode Idioms|Netcode\
      \ Idioms]]\n* [[Legacy:Simulated Function|Simulated Function]]\n* [[Legacy:Replicated\
      \ Function|Replicated Function]]\n* [[Legacy:Animation Replication|Animation\
      \ Replication]]\n* [[Legacy:Another Look At Replication|Another Look At Replication]]\n\
      * [[Legacy:Replication Examples|Replication examples]]\n** [[Legacy:Replication\
      \ Examples/Battle City|Replication Examples/Battle City]]\n** [[Legacy:Replication\
      \ Examples/Giant Spider Execution|Replication Examples/Giant Spider Execution]]\n\
      \n[[Category:Legacy Class (UT2003)|{{PAGENAME}}]]\n[[Category:Legacy Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 1172
name: "Legacy:Actor/Replication"
revision:
  revid: 1172
  parentid: 1174
  user: "CH3Z"
  timestamp: 1137646581.000000000
  comment: "Added Related Topics Section"
timestamp: 1668773769.629645000
