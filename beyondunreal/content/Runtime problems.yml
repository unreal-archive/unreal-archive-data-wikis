---
parse:
  title: "Runtime problems"
  text:
    text: "<p>When writing <a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a>\
      \ code, not all problems are caught by the compiler. Certain constructs are\
      \ syntactically correct, but contain logical errors that only manifest at runtime.\
      \ This article will try to list a few of the problems you may encounter.</p>\n\
      <dl>\n<dd><b>Rule of thumb: The compiler does not execute your code.</b></dd>\n\
      </dl>\n<p>And because it doesn't execute your code, it cannot know whether it\
      \ actually makes sense. For example, it is perfectly valid to write the following\
      \ two lines:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">while</span> <span class=\"br0\">(</span>A <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">100</span><span class=\"br0\">)</span>;\n  A <span class=\"\
      sy0\">+=</span> <span class=\"nu0\">10</span>;</pre></div>\n</div>\n<p>But when\
      \ you execute that code, the engine will quickly panic out and tell you something\
      \ about a \"runaway loop\". How come? Well, the compiler knows it is sometimes\
      \ not required to put any statements into the loop body and also allows a single\
      \ semicolon after the <a href=\"/While\" title=\"While\" class=\"mw-redirect\"\
      >while</a> condition. That, however, means the <code>A += 10;</code> statement\
      \ is actually <i>after</i> the loop, not inside it. Code execution will either\
      \ not enter the loop at all (because A is already &gt;= 100) or never leave\
      \ it because A never changes.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n\
      <div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Crashes\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Crashes</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Runaway_loops\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">Runaway loops</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"\
      ><a href=\"#Infinite_recursion\"><span class=\"tocnumber\">1.2</span> <span\
      \ class=\"toctext\">Infinite recursion</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-4\"><a href=\"#Non-crash_problems\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Non-crash problems</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-5\"><a href=\"#Accessing_None\"><span class=\"tocnumber\"\
      >2.1</span> <span class=\"toctext\">Accessing None</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-6\"><a href=\"#Accessing_null_class_context\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Accessing null class context</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Attempt_to_assign_variable_through_None\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Attempt to assign\
      \ variable through None</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Accessing_array_index_out_of_bounds\"><span class=\"tocnumber\"\
      >2.4</span> <span class=\"toctext\">Accessing array index out of bounds</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      Crashes\">Crashes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Runtime_problems?section=1\" title=\"Edit section:\
      \ Crashes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Runaway_loops\">Runaway loops</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Runtime_problems?section=2\" title=\"Edit section: Runaway loops\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>As\
      \ mentioned above, the engine may crash on \"runaway\" or infinite loops. Internally\
      \ all loops are deconstructed into conditional and unconditional jumps, similar\
      \ to <a href=\"/If\" title=\"If\" class=\"mw-redirect\">If</a> and <a href=\"\
      /GoTo\" title=\"GoTo\" class=\"mw-redirect\">GoTo</a>. Each of these jumps increments\
      \ an internal \"loop counter\" that deliberately triggers the crash when it\
      \ exceeds a certain, quite large value. That is a safety measure to prevent\
      \ the engine from completely locking up in case of infinite loop in bad code.\
      \ There is only one shared loop counter in the engine for all objects and it\
      \ is reset between ticks.</p>\n<h3><span class=\"mw-headline\" id=\"Infinite_recursion\"\
      >Infinite recursion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Runtime_problems?section=3\" title=\"Edit section:\
      \ Infinite recursion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Another reason for an intentional crash is infinite recursion, i.e. functions\
      \ calling themselves directly or indirectly, again and again without returning\
      \ at some point. Like for loops, the engine maintains a counter for recursion\
      \ depth. Any time one UnrealScript function calls another (or itself), the counter\
      \ is incremented. When the called function returns control to the calling function,\
      \ the counter is decremented again. If a function call causes the recursion\
      \ depth to reach 250, the engine exits with the \"infinite recursion error\"\
      .</p>\n<p>250 is quite a lot for normal operations but can easily be reached\
      \ when something goes wrong with spawning/replacing Actors in Mutator.CheckReplacement().\
      \ Also certain algorithms like QuickSort rely on recursion and can potentially\
      \ exceed the recursion limit. In such cases try converting your algorithm into\
      \ an iterative form, possibly with some kind of stack structure if the algorithm\
      \ does not use end recursion.</p>\n<h2><span class=\"mw-headline\" id=\"Non-crash_problems\"\
      >Non-crash problems</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Runtime_problems?section=4\" title=\"Edit section:\
      \ Non-crash problems\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Accessing_None\">Accessing None</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Runtime_problems?section=5\" title=\"Edit section: Accessing\
      \ None\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This is probably the most frequent problem you'll have to deal with. It can\
      \ happen whenever you access object properties or functions through variables,\
      \ for example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> DoSomethingWith<span class=\"br0\">(</span>SomeActor A<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  A.<span class=\"me0\"\
      >DoSomething</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \  A.<span class=\"me0\">DidSomething</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">True</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>That looks unsuspicious at first, but will throw Accessed None warnings at\
      \ you if you pass in <code>None</code> as parameter. There are two possible\
      \ solutions for this problem:</p>\n<ol>\n<li>Passing in None is an expected\
      \ behavior. In that case you need to catch the None case using something like:\
      \ <code>if (A&#160;!= None) A.DoSomething();</code></li>\n<li>Passing in None\
      \ is not n expected behavior and should not really happen. Here you will need\
      \ to figure out <i>why</i> none was passed in. Something must be wrong in the\
      \ code that calls your function. Maybe the problem is even further away and\
      \ only becomes obvious when you try to call your function.</li>\n</ol>\n<p>Note\
      \ that because there are good reasons for not crashing out or immediately leaving\
      \ the affected functions, accessing None may still return a value:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> SomeActor\
      \ A;\n<span class=\"kw1\">local</span> <span class=\"kw5\">name</span> ActorName;\n\
      \ \nActorName <span class=\"sy0\">=</span> A.<span class=\"kw5\">Name</span>;</pre></div>\n\
      </div>\n<p><i>ActorName</i> will be <code>'None'</code> after this example because\
      \ A was not initialized and thus empty when A.Name was evaluated. Any access\
      \ through a None variable will result in the corresponding null value of the\
      \ variable <a href=\"/Type\" title=\"Type\" class=\"mw-redirect\">type</a> you\
      \ tried to access. Similarly, trying to call a function by accessing None will\
      \ have no effect. Note that function parameters are still evaluated as usual,\
      \ even though the function itself cannot be called. If that function was to\
      \ return a value, it will be the null value for the function's return type.\
      \ Null values are 0 (zero), \"\" (empty string), 'None' (empty name value),\
      \ None (no object), etc.</p>\n<h3><span class=\"mw-headline\" id=\"Accessing_null_class_context\"\
      >Accessing null class context</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Runtime_problems?section=6\"\
      \ title=\"Edit section: Accessing null class context\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Basically this is the same\
      \ problem as the Accessed None above. The difference is: accessing None applies\
      \ to object variables, while accessing null class context applies to class variables:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ DoSomethingWithclass<span class=\"br0\">(</span>class<span class=\"sy0\">&lt;</span>SomeActor<span\
      \ class=\"sy0\">&gt;</span> aClass<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  aClass.<span class=\"kw1\">static</span>.<span class=\"me0\"\
      >DoSomething</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"co1\">// or:</span>\n  aClass.<span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">DidSomething</span> <span class=\"sy0\">=</span> <span class=\"\
      kw6\">True</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Passing\
      \ in None will cause the \"Accessed null class context\" warning for both lines.\
      \ The same solutions apply as for the Accessed None warning, including return\
      \ values and (non-)effect of function calls.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Attempt_to_assign_variable_through_None\">Attempt to assign variable\
      \ through None</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Runtime_problems?section=7\" title=\"Edit section:\
      \ Attempt to assign variable through None\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Another problem related to variables being None. This\
      \ warning will only happen after either an \"Accessed None\" or \"Accessed null\
      \ class context\" and is always related to variable assignment via the <code>=</code>\
      \ operator. The two examples above both contain such an assignment line:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">A.<span class=\"me0\">DidSomething</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\naClass.<span\
      \ class=\"kw1\">default</span>.<span class=\"me0\">DidSomething</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw6\">True</span>;</pre></div>\n</div>\n\
      <p>Such an assignment will not have any effect as obviously there is no place\
      \ to store the value. However, the right side of the assignment is evaluated\
      \ as usual.</p>\n<h3><span class=\"mw-headline\" id=\"Accessing_array_index_out_of_bounds\"\
      >Accessing array index out of bounds</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Runtime_problems?section=8\"\
      \ title=\"Edit section: Accessing array index out of bounds\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>This can happen\
      \ both on <a href=\"/Static_arrays\" title=\"Static arrays\">static arrays</a>\
      \ and <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">dynamic arrays</a>\
      \ if the array index is either negative or greater than or equal to the array\
      \ length. The behavior differs depending on the situation, but generally has\
      \ similar results as accessing None: functions are not called and the access\
      \ result is a null value.</p>\n<p>There is one exception, though: Assigning\
      \ to a dynamic array index greater than or equal to the current array length\
      \ will resize the array to make the assignment valid. Not that this only applies\
      \ to direct assignments to the array element, not to assignments <i>through</i>\
      \ the array element:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> array<span class=\"sy0\">&lt;</span>vector<span class=\"\
      sy0\">&gt;</span> v<span class=\"re1\">Array</span>&lt; SEMI &gt;\n \nvArray<span\
      \ class=\"br0\">[</span>vArray.<span class=\"me0\">Length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ direct assignment, valid</span>\nvArray<span class=\"br0\">[</span>vArray.<span\
      \ class=\"me0\">Length</span><span class=\"br0\">]</span>.<span class=\"me0\"\
      >X</span> <span class=\"sy0\">=</span> <span class=\"nu0\">13.37</span>;   \
      \  <span class=\"co1\">// not assigning to the element itself, invalid access\
      \ out of bounds</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.104 seconds\nReal time usage: 0.209 seconds\nPreprocessor visited\
      \ node count: 79/1000000\nPreprocessor generated node count: 156/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:29267-0!*!0!!en!*!*\
      \ and timestamp 20221118150033 and revision id 44428\n -->\n"
  categories:
  - sortkey: ""
    name: "Programming_articles"
  links:
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "If"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "GoTo"
  - ns: 0
    exists: true
    name: "While"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Type"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Crashes"
    number: "1"
    index: "1"
    fromtitle: "Runtime_problems"
    byteoffset: 1042
    anchor: "Crashes"
  - toclevel: 2
    level: "3"
    line: "Runaway loops"
    number: "1.1"
    index: "2"
    fromtitle: "Runtime_problems"
    byteoffset: 1054
    anchor: "Runaway_loops"
  - toclevel: 2
    level: "3"
    line: "Infinite recursion"
    number: "1.2"
    index: "3"
    fromtitle: "Runtime_problems"
    byteoffset: 1613
    anchor: "Infinite_recursion"
  - toclevel: 1
    level: "2"
    line: "Non-crash problems"
    number: "2"
    index: "4"
    fromtitle: "Runtime_problems"
    byteoffset: 2598
    anchor: "Non-crash_problems"
  - toclevel: 2
    level: "3"
    line: "Accessing None"
    number: "2.1"
    index: "5"
    fromtitle: "Runtime_problems"
    byteoffset: 2621
    anchor: "Accessing_None"
  - toclevel: 2
    level: "3"
    line: "Accessing null class context"
    number: "2.2"
    index: "6"
    fromtitle: "Runtime_problems"
    byteoffset: 4415
    anchor: "Accessing_null_class_context"
  - toclevel: 2
    level: "3"
    line: "Attempt to assign variable through None"
    number: "2.3"
    index: "7"
    fromtitle: "Runtime_problems"
    byteoffset: 5002
    anchor: "Attempt_to_assign_variable_through_None"
  - toclevel: 2
    level: "3"
    line: "Accessing array index out of bounds"
    number: "2.4"
    index: "8"
    fromtitle: "Runtime_problems"
    byteoffset: 5572
    anchor: "Accessing_array_index_out_of_bounds"
  displaytitle: "Runtime problems"
  iwlinks: []
  wikitext:
    text: "When writing [[UnrealScript]] code, not all problems are caught by the\
      \ compiler. Certain constructs are syntactically correct, but contain logical\
      \ errors that only manifest at runtime. This article will try to list a few\
      \ of the problems you may encounter.\n:'''Rule of thumb: The compiler does not\
      \ execute your code.'''\nAnd because it doesn't execute your code, it cannot\
      \ know whether it actually makes sense. For example, it is perfectly valid to\
      \ write the following two lines:\n<uscript>\nwhile (A < 100);\n  A += 10;\n\
      </uscript>\nBut when you execute that code, the engine will quickly panic out\
      \ and tell you something about a \"runaway loop\". How come? Well, the compiler\
      \ knows it is sometimes not required to put any statements into the loop body\
      \ and also allows a single semicolon after the [[while]] condition. That, however,\
      \ means the <code>A += 10;</code> statement is actually ''after'' the loop,\
      \ not inside it. Code execution will either not enter the loop at all (because\
      \ A is already >= 100) or never leave it because A never changes.\n\n==Crashes==\n\
      ===Runaway loops===\nAs mentioned above, the engine may crash on \"runaway\"\
      \ or infinite loops. Internally all loops are deconstructed into conditional\
      \ and unconditional jumps, similar to [[If]] and [[GoTo]]. Each of these jumps\
      \ increments an internal \"loop counter\" that deliberately triggers the crash\
      \ when it exceeds a certain, quite large value. That is a safety measure to\
      \ prevent the engine from completely locking up in case of infinite loop in\
      \ bad code. There is only one shared loop counter in the engine for all objects\
      \ and it is reset between ticks.\n\n===Infinite recursion===\nAnother reason\
      \ for an intentional crash is infinite recursion, i.e. functions calling themselves\
      \ directly or indirectly, again and again without returning at some point. Like\
      \ for loops, the engine maintains a counter for recursion depth. Any time one\
      \ UnrealScript function calls another (or itself), the counter is incremented.\
      \ When the called function returns control to the calling function, the counter\
      \ is decremented again. If a function call causes the recursion depth to reach\
      \ 250, the engine exits with the \"infinite recursion error\".\n\n250 is quite\
      \ a lot for normal operations but can easily be reached when something goes\
      \ wrong with spawning/replacing Actors in Mutator.CheckReplacement(). Also certain\
      \ algorithms like QuickSort rely on recursion and can potentially exceed the\
      \ recursion limit. In such cases try converting your algorithm into an iterative\
      \ form, possibly with some kind of stack structure if the algorithm does not\
      \ use end recursion.\n\n==Non-crash problems==\n===Accessing None===\nThis is\
      \ probably the most frequent problem you'll have to deal with. It can happen\
      \ whenever you access object properties or functions through variables, for\
      \ example:\n<uscript>\nfunction DoSomethingWith(SomeActor A)\n{\n  A.DoSomething();\n\
      \  A.DidSomething = True;\n}\n</uscript>\nThat looks unsuspicious at first,\
      \ but will throw Accessed None warnings at you if you pass in <code>None</code>\
      \ as parameter. There are two possible solutions for this problem:\n#Passing\
      \ in None is an expected behavior. In that case you need to catch the None case\
      \ using something like: <code>if (A != None) A.DoSomething();</code>\n#Passing\
      \ in None is not n expected behavior and should not really happen. Here you\
      \ will need to figure out ''why'' none was passed in. Something must be wrong\
      \ in the code that calls your function. Maybe the problem is even further away\
      \ and only becomes obvious when you try to call your function.\n\nNote that\
      \ because there are good reasons for not crashing out or immediately leaving\
      \ the affected functions, accessing None may still return a value:\n<uscript>\n\
      local SomeActor A;\nlocal name ActorName;\n\nActorName = A.Name;\n</uscript>\n\
      ''ActorName'' will be <code>'None'</code> after this example because A was not\
      \ initialized and thus empty when A.Name was evaluated. Any access through a\
      \ None variable will result in the corresponding null value of the variable\
      \ [[type]] you tried to access. Similarly, trying to call a function by accessing\
      \ None will have no effect. Note that function parameters are still evaluated\
      \ as usual, even though the function itself cannot be called. If that function\
      \ was to return a value, it will be the null value for the function's return\
      \ type. Null values are 0 (zero), \"\" (empty string), 'None' (empty name value),\
      \ None (no object), etc.\n\n===Accessing null class context===\nBasically this\
      \ is the same problem as the Accessed None above. The difference is: accessing\
      \ None applies to object variables, while accessing null class context applies\
      \ to class variables:\n<uscript>\nfunction DoSomethingWithclass(class<SomeActor>\
      \ aClass)\n{\n  aClass.static.DoSomething();\n  // or:\n  aClass.default.DidSomething\
      \ = True;\n}\n</uscript>\nPassing in None will cause the \"Accessed null class\
      \ context\" warning for both lines. The same solutions apply as for the Accessed\
      \ None warning, including return values and (non-)effect of function calls.\n\
      \n===Attempt to assign variable through None===\nAnother problem related to\
      \ variables being None. This warning will only happen after either an \"Accessed\
      \ None\" or \"Accessed null class context\" and is always related to variable\
      \ assignment via the <code>=</code> operator. The two examples above both contain\
      \ such an assignment line:\n<uscript>\nA.DidSomething = True;\naClass.default.DidSomething\
      \ = True;\n</uscript>\nSuch an assignment will not have any effect as obviously\
      \ there is no place to store the value. However, the right side of the assignment\
      \ is evaluated as usual.\n\n===Accessing array index out of bounds===\nThis\
      \ can happen both on [[static arrays]] and [[dynamic arrays]] if the array index\
      \ is either negative or greater than or equal to the array length. The behavior\
      \ differs depending on the situation, but generally has similar results as accessing\
      \ None: functions are not called and the access result is a null value.\n\n\
      There is one exception, though: Assigning to a dynamic array index greater than\
      \ or equal to the current array length will resize the array to make the assignment\
      \ valid. Not that this only applies to direct assignments to the array element,\
      \ not to assignments ''through'' the array element:\n<uscript>\nlocal array<vector>\
      \ vArray;\n\nvArray[vArray.Length] = vect(1,2,3); // direct assignment, valid\n\
      vArray[vArray.Length].X = 13.37;     // not assigning to the element itself,\
      \ invalid access out of bounds\n</uscript>\n\n[[Category:Programming articles]]"
  properties: []
  revId: 44428
name: "Runtime problems"
revision:
  revid: 44428
  parentid: 0
  user: "Wormbo"
  timestamp: 1305473081.000000000
  comment: "good enough for now, feel free to extend and improve"
timestamp: 1668783634.722957000
