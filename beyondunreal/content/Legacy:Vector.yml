---
parse:
  title: "Legacy:Vector"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Foundations\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Foundations</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Vector_vs._Scalar\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Vector vs. Scalar</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Components\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Components</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Coordinate_Representation\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Coordinate Representation</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#UnrealScript_vectors\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">UnrealScript vectors</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Units\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Units</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-7\"><a href=\"#Recipes\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Recipes</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Vector_Length_.28magnitude.29\"><span class=\"tocnumber\">4.1</span>\
      \ <span class=\"toctext\">Vector Length (magnitude)</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-9\"><a href=\"#Dot_Product\"><span class=\"tocnumber\"\
      >4.2</span> <span class=\"toctext\">Dot Product</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-10\"><a href=\"#Adding_Vectors\"><span class=\"tocnumber\"\
      >4.3</span> <span class=\"toctext\">Adding Vectors</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"#Vector_operators_and_functions\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">Vector operators\
      \ and functions</span></a></li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"\
      #Cross_Product\"><span class=\"tocnumber\">6</span> <span class=\"toctext\"\
      >Cross Product</span></a></li>\n<li class=\"toclevel-1 tocsection-13\"><a href=\"\
      #Mathematical_Properties_of_Vectors\"><span class=\"tocnumber\">7</span> <span\
      \ class=\"toctext\">Mathematical Properties of Vectors</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-14\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">8</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-15\"><a href=\"#Further_Reading\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">Further Reading</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-16\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Foundations\">Foundations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vector?section=1\" title=\"Edit section: Foundations\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span\
      \ class=\"mw-headline\" id=\"Vector_vs._Scalar\">Vector vs. Scalar</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vector?section=2\" title=\"Edit section: Vector vs. Scalar\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Many\
      \ things like temperature, mass, etc. can be measured with only a number and\
      \ some units, for example a kettle might contain water at 100 degrees Celsius.\
      \ These are known as scalar quantities. They have no notion of direction.</p>\n\
      <p>Vectors, however have an idea of direction. In physics, Forces and Velocities\
      \ are vector quantities. Taking velocity as an example. If we say that a car\
      \ is going 70 km/hour, this does not tell us where it will be in one hour's\
      \ time because we have not specified the direction that it is going. However,\
      \ we could describe:</p>\n<ul>\n<li>the magnitude of the velocity (70km/hour)</li>\n\
      <li>a compass heading to specify the direction (say 30 degrees from North)</li>\n\
      <li>a number giving the vertical angle with respect to the Earth's surface (say\
      \ 0 degrees)</li>\n</ul>\n<p>The combination of these quantities define a vector\
      \ for the car.</p>\n<h3><span class=\"mw-headline\" id=\"Components\">Components</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vector?section=3\" title=\"Edit section: Components\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>A useful\
      \ way to view a vector is as a sum of components. After our car has driven for\
      \ an hour, it is 70Km away at a bearing of 30 degrees. Alternatively, we can\
      \ say that it is 60.6km north and 35km east of its point of origin. We call\
      \ these two numbers <i>components</i> of the vector. By representing vectors\
      \ as components like this, it becomes much easier to perform operations like\
      \ adding vectors together.</p>\n<h3><span class=\"mw-headline\" id=\"Coordinate_Representation\"\
      >Coordinate Representation</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=4\" title=\"\
      Edit section: Coordinate Representation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>On a two-dimensional plane, any point (x,y) can be\
      \ represented as a vector. Graphically, we often represent such a vector by\
      \ drawing an arrow from the origin to the point, with the tip of the arrow resting\
      \ at the point.</p>\n<p>The situation for three-dimensional vectors is similar,\
      \ with an ordered triplet (x,y,z) being represented by an arrow from the origin\
      \ to the corresponding point in three-dimensional space. In vector language,\
      \ this is described as (u<sub>x</sub> , u<sub>y</sub> , u<sub>z</sub>) to make\
      \ it clear that the three numbers belong to the vector <b>u</b>. This looks\
      \ exactly the same as the coordinates for a point. The only difference is the\
      \ way we think about them.</p>\n<div class=\"floatright\"><a href=\"/File:Legacy_vector2d.gif\"\
      \ class=\"image\" title=\"The 2d vector u with its components ux and uy\"><img\
      \ alt=\"The 2d vector u with its components ux and uy\" src=\"/w/images/Legacy_vector2d.gif\"\
      \ width=\"104\" height=\"125\" /></a></div>\n<p>You may also see vectors expressed\
      \ in the form a<b>i</b> + b<b>j</b> + c<b>k</b>. <b>i</b>, <b>j</b>, and <b>k</b>\
      \ are <i>unit vectors</i>: vectors of length 1 that point along the x,y,z coordinates\
      \ axes respectively. In maths, { <b>i</b>, <b>j</b>, <b>k</b> } is a <i>basis</i>\
      \ for the space because any vector can be written as a combination of them.\
      \ They represent the unit vectors along three perpendicular axes, and a, b,\
      \ and c are the \"lengths\" of the vector along the respective axis.</p>\n<p>Vectors\
      \ are extremely powerful. they can represent:</p>\n<dl>\n<dt>displacement</dt>\n\
      <dd>You could say \"the pawn has moved 64 units\", or you could say \"the pawn\
      \ has moved 64 units to the north-east\", or you could use a vector of length\
      \ 64 that points in that direction. A displacement is different from a <i>length</i>\
      \ in that it has a direction as well as a magnitude. See <i>length of a vector</i>\
      \ below.</dd>\n<dt>points&#160;</dt>\n<dd>A point and a vector together describe\
      \ a second point. In the illustration above, If O is a point in space, <u>OP</u>\
      \ is the vector from O, the origin, to P, which is another point in space, completely\
      \ specified by O and <u>OP</u>.</dd>\n<dt>velocities and accelerations&#160;</dt>\n\
      <dd>like displacements, these have a direction. The magnitude of the vector\
      \ now represents \"how much\" velocity there is; in other words, the speed.\
      \ To return to the earlier car example, if you say \"the car has a speed of\
      \ 10 m/s\", then you're giving the magnitude of the velocity, but not the direction.</dd>\n\
      <dt>forces&#160;</dt>\n<dd>When specifying an impulse on a <a href=\"/Legacy:Karma\"\
      \ title=\"Legacy:Karma\">Karma</a> simulated actor, you can use a vector to\
      \ represent the direction and magnitude of the force to be applied to that actor.</dd>\n\
      </dl>\n<p><a href=\"/File:Legacy_Vector1.gif\" class=\"image\" title=\"Legacy_Vector1.gif\"\
      ><img alt=\"Legacy_Vector1.gif\" src=\"/w/images/Legacy_Vector1.gif\" width=\"\
      237\" height=\"226\" /></a></p>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_vectors\"\
      >UnrealScript vectors</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Vector?section=5\" title=\"Edit section: UnrealScript\
      \ vectors\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Vectors in <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> always consist of three components, as they are usually used\
      \ for working in the 3-d game world. For clarity, this page uses two-dimensional\
      \ vectors, but the principles are exactly the same for three dimensions.</p>\n\
      <p>Unrealscript does not distinguish between a velocity vector, or a position\
      \ vector, or any other type of vector. To the Engine, a vector is simply a collection\
      \ of three float values that can be handed around as a single data item and\
      \ can be operated on with vector operators (see below).</p>\n<p><b>Note:</b>\
      \ Be careful when replicating vectors because the vector struct is compressed\
      \ before it gets replicated. The vector components are converted to 16bit signed\
      \ integers in UT (6 bytes per vector) and 21bit signed integers in UT2003/4\
      \ (8 bytes per vecctor with one bit unused). Fractional values are truncated\
      \ during float-&gt;int conversion and values exceeding the limited bit range\
      \ wrap around, so e.g. 1703954.25 may become -393198.00 in UT2004. However,\
      \ these values already come close to the precision limit of the float data type\
      \ (1703954.25 actually only has 2 bits left for the part behind the decimal\
      \ dot!), so you probably won't be using them. Still keep this in mind when replicating\
      \ vectors.</p>\n<h2><span class=\"mw-headline\" id=\"Units\">Units</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vector?section=6\" title=\"Edit section: Units\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>When working with\
      \ vectors, as with scalars, it's important to match units. Just as you can't\
      \ add 5 degrees celsius to 30 degrees fahrenheit and end up with 35 degrees\
      \ fahrsius, you can't add a vector expressed in meters per second to one expressed\
      \ in km per hour and expect a sensible result. Unreal has its own units of distance,\
      \ <a href=\"/edit/Legacy:UnrealUnits?redlink=1\" class=\"new\" title=\"Legacy:UnrealUnits\
      \ (page does not exist)\">UnrealUnits</a> (UU), and from this we derive Velocities\
      \ are in UU/sec and Accelerations are in UU/sec<sup>2</sup>.</p>\n<dl>\n<dd>Position\
      \ += Velocity * time is the same as m += m / sec * sec</dd>\n</dl>\n<p>which\
      \ evaluates to:</p>\n<dl>\n<dd>m += m</dd>\n</dl>\n<p>Thus, this makes sense.\
      \ Here is what <b>doesn't</b> make sense:</p>\n<p>Position += Velocity is the\
      \ same as m += m / sec which evaluates to:</p>\n<dl>\n<dd>m += m /sec</dd>\n\
      </dl>\n<p>Units don't match, so it <b>doesn't</b> make sense.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Recipes\">Recipes</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=7\"\
      \ title=\"Edit section: Recipes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Vector_Length_.28magnitude.29\"\
      >Vector Length (magnitude)</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=8\" title=\"\
      Edit section: Vector Length (magnitude)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The magnitude of a vector can be calculated using\
      \ an extension of Euclid's rule for a right-angled triangle: Square each component\
      \ of the vector (however many you have) and add them together, then take the\
      \ square root of the result.</p>\n<p>e.g. If I have a 2 dimensional vector 3<b>i</b>\
      \ + 4<b>j</b>, the length of that vector can be calculated as</p>\n<dl>\n<dd>√\
      ( 3<sup>2</sup> + 4<sup>2</sup> ) = 5</dd>\n</dl>\n<p>The magnitude of a vector\
      \ is written {| |- | |} <b>u</b>{| |- | |} . The corresponding UnrealScript\
      \ function is <code>VSize(u)</code> (vector size).</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Dot_Product\">Dot Product</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=9\"\
      \ title=\"Edit section: Dot Product\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dd>UnrealScript: <code>u dot v</code></dd>\n<dd>Maths:\
      \ <b>u</b> <tt>·</tt> <b>v</b></dd>\n</dl>\n<p>The dot product of two vectors\
      \ is a scalar, ie a number. This is given by one of the following formulae:</p>\n\
      <ul>\n<li>(u<sub>x</sub> * v<sub>x</sub>) + (u<sub>y</sub> * v<sub>y</sub>)\
      \ + (u<sub>z</sub> * v<sub>z</sub>)</li>\n<li>{| |- | |} <b>u</b>{| |- | |}\
      \ * {| |- | |} <b>v</b>{| |- | |} * cos(theta) – where theta is the angle between\
      \ the vectors (In UnrealScript this would be VSize(u) * VSize(v) * Cos(theta))</li>\n\
      </ul>\n<p>If the dot product is zero, then the vectors are perpendicular (or\
      \ at least one of them has zero length).</p>\n<p>Further reading: <a href=\"\
      http://en.wikipedia.org/wiki/Dot_product\" class=\"extiw\" title=\"wikipedia:Dot\
      \ product\">Wikipedia:Dot product</a></p>\n<h3><span class=\"mw-headline\" id=\"\
      Adding_Vectors\">Adding Vectors</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=10\"\
      \ title=\"Edit section: Adding Vectors\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dd>UnrealScript: <code>u + v</code></dd>\n<dd>Maths:\
      \ <b>u</b> + <b>v</b></dd>\n</dl>\n<p>The sum of two vectors is easiest in component\
      \ form. The sum of <b>u</b> and <b>v</b> is the vector (u<sub>x</sub>+v<sub>x</sub>,\
      \ u<sub>y</sub>+v<sub>y</sub>, u<sub>z</sub>+v<sub>z</sub>). It can be visualized\
      \ as drawing one vector then drawing the second vector starting at the head\
      \ of the first vector.</p>\n<p>→Still to cover:→</p>\n<ul>\n<li>multiplying\
      \ a vector by a number/inverting vectors</li>\n<li>normalized vectors</li>\n\
      <li>What can cross product and dot product be used for?</li>\n<li>How can vectors\
      \ be used in UnrealScript? (maybe just a link)</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Vector_operators_and_functions\">Vector operators and functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Vector?section=11\" title=\"Edit section: Vector operators\
      \ and functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The <a href=\"/Legacy:Operators\" title=\"Legacy:Operators\">Operators</a>\
      \ page details the operators than can be used with a Vector. It should also\
      \ be noted that some <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\">Rotator</a>\
      \ operators (namely &lt;&lt; and &gt;&gt;) can be used to rotate a vector.</p>\n\
      <p>The following vector related <a href=\"/Legacy:Global_Function\" title=\"\
      Legacy:Global Function\">Global Functions</a> are defined in the <a href=\"\
      /Legacy:Object\" title=\"Legacy:Object\">Object</a> class:</p>\n<dl>\n<dt>float\
      \ VSize (vector A) [static]&#160;</dt>\n<dd>Returns the length of the vector,\
      \ ||A||.</dd>\n<dt>vector Normal (vector A) [static]&#160;</dt>\n<dd>Returns\
      \ a vector with the same direction and a length of 1.</dd>\n<dt>Invert (out\
      \ vector X, out vector Y, out vector Z)&#160;</dt>\n<dd></dd>\n<dt>vector VRand\
      \ ( ) [static]&#160;</dt>\n<dd>Returns a vector with random direction and a\
      \ length of 1.</dd>\n<dt>vector MirrorVectorByNormal (vector Vect, vector Normal)\
      \ [static]&#160;</dt>\n<dd>Mirrors a vector about a specified normal vector.<br\
      \ />\nThink of a projectile <tt>p</tt> with a certain speed vector that hits\
      \ a wall with a certain normal vector <tt>HitNormal</tt> and gets reflected\
      \ without any damping. The projectile's new speed is what you get from <tt>MirrorVectorByNormal(p.Velocity,\
      \ HitNormal)</tt>. This can also be calculated through:<br />\n<tt>Vect - (Vect\
      \ dot Normal(HitNormal)) * Normal(HitNormal)</tt> (this is used e.g. by the\
      \ Ripper blades)</dd>\n</dl>\n<p>See <a href=\"/Legacy:UnrealScript_Vector_Maths\"\
      \ title=\"Legacy:UnrealScript Vector Maths\">UnrealScript Vector Maths</a> for\
      \ how to use these.</p>\n<p>Example on usage:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">event</span> SeePlayer<span class=\"\
      br0\">(</span><span class=\"kw9\">Pawn</span> Seen<span class=\"br0\">)</span>\n\
      \ \n<span class=\"br0\">{</span><span class=\"co1\">//Seeplayer seems to do\
      \ wierd with FOV, always sees 180 DEG.</span>\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>Seen.<span class=\"kw7\">Location</span> <span class=\"sy0\">-</span>\
      \ <span class=\"kw9\">Pawn</span>.<span class=\"kw7\">Location</span><span class=\"\
      br0\">)</span> DOT <span class=\"kw3\">Normal</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Vector</span><span class=\"br0\">(</span><span class=\"kw9\"\
      >Pawn</span>.<span class=\"kw7\">Rotation</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.7</span> <span class=\"br0\">)</span>\n \n\t<span class=\"br0\">{</span>\n\
      \ \n\t\tSeenPlayer<span class=\"br0\">(</span>Seen<span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">function</span> SeenPlayer<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span> Seen<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>I created this in a Controller, because the normal SeePlayer had\
      \ a to width FOV for some reason, the 0.7 is calculated by cos(45) 45 in degrees\
      \ (or cos(PI/4) in radians)</p>\n<p>It's the only use of dot product that I\
      \ have at the moment.</p>\n<p><b>Foxpaw:</b> The dot product can be used (and\
      \ I think that is its primary use) to find the angle between them. When we learned\
      \ above vectors in school we didn't use any symbols like the ones shown above...\
      \ it might be helpful to relate this to more common mathematical expressions.</p>\n\
      <p><b>Mychaeel:</b> More important than for determining an angle between two\
      \ vectors is translating a given vector (location, direction, or whatever) to\
      \ any given rotated coordinate system by simply multiplying the input vector\
      \ with each of the normals pointing along the rotated axes to get the respective\
      \ rotated coordinate values. That means if you have a rotated system (like an\
      \ <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s local coordinate\
      \ system) and a whole batch of vectors to translate, you only have to perform\
      \ the expensive coordinate rotation once on the normals and rotate any given\
      \ vector into that system by evaluating three simple dot products.</p>\n<p><b>Daid303:</b>\
      \ I finaly found a Dot product in some of the origional code. It's use in the\
      \ <a href=\"/Legacy:PlayerPawn\" title=\"Legacy:PlayerPawn\">PlayerPawn</a>\
      \ code. In ServerMove().</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">LocDiff <span\
      \ class=\"sy0\">=</span> <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">-</span> ClientLoc;\n \nClientErr <span class=\"sy0\">=</span> LocDiff\
      \ Dot LocDiff;</pre></div>\n</div>\n<p>But i'm kinda clueless what value the\
      \ ClientErr will have....</p>\n<p><b>Wormbo:</b> Uhm, isn't (LocDiff Dot LocDiff)\
      \ == Square(VSize(LocDiff))&#160;?</p>\n<p><b>Daid303:</b> So basicly they could\
      \ have used VSize(LocDiff).... because they only compair it with a value afterwarts.\
      \ To see if the new server location wouldn't be to far away from the previeus\
      \ location. (if they are the server send a update to the client)</p>\n<p><b>ThePoker:</b>\
      \ The reason they use a dot product there is that (X Dot X) is less expensive\
      \ than Square(VSize(X)). While (X dot X) just squares and sums the components\
      \ of X, Square(VSize(X)) does that first but then also takes the square root\
      \ of the sum (in the VSize function) and then re-squares it.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Cross_Product\">Cross Product</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=12\"\
      \ title=\"Edit section: Cross Product\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dd>UnrealScript: <code>u cross v</code></dd>\n\
      <dd>Maths: <b>u</b> × <b>v</b></dd>\n</dl>\n<p>The cross product of two vectors\
      \ is another vector given by</p>\n<dl>\n<dd>{| |- | |} <b>u</b>{| |- | |} *\
      \ {| |- | |} <b>v</b>{| |- | |} * <b>e</b> * sin(theta) – where theta is the\
      \ angle between the vectors</dd>\n</dl>\n<p>where e is a unit vector that is\
      \ perpendicular to both u and v. In mathematics, ( u , v, e ) are taken to form\
      \ a right-hand set. Because the <a href=\"/Legacy:Unreal_World\" title=\"Legacy:Unreal\
      \ World\">Unreal world</a> uses left-handed co-ordinates (see <a href=\"http://en.wikipedia.org/wiki/Handedness\"\
      \ class=\"extiw\" title=\"wikipedia:Handedness\">Wikipedia:Handedness</a> for\
      \ definition and pictures), ( u , v, e ) is a left-handed set. This means that</p>\n\
      <pre>[1,0,0] cross [0,1,0] = [0,0,1]\n\n</pre>\n<p>The cross product is <i>not</i>\
      \ commutative:</p>\n<pre> u cross v !=   v cross u\n u cross v == -(v cross\
      \ u)\n</pre>\n<p>Further/better reading: <a href=\"http://en.wikipedia.org/wiki/Cross_product\"\
      \ class=\"extiw\" title=\"wikipedia:Cross product\">Wikipedia:Cross product</a></p>\n\
      <p><a href=\"/File:Legacy_Vector3.gif\" class=\"image\" title=\"Legacy_Vector3.gif\"\
      ><img alt=\"Legacy_Vector3.gif\" src=\"/w/images/Legacy_Vector3.gif\" width=\"\
      241\" height=\"231\" /></a></p>\n<p><b>Foxpaw:</b> The short and the long of\
      \ this is that the cross product of a pair of vectors is a vector perpindicular\
      \ to both source vectors.. but not necessarily the <b>only</b> vector perpindicular\
      \ to those two vectors. I think the above description is kind of confusing.</p>\n\
      <p><b>Mychaeel:</b> Save for its length (positive or negative, and clearly defined\
      \ for the cross product), there <i>is</i> only one single vector that's perpendicular\
      \ to any two non-parallel vectors.</p>\n<p><b>Daid303:</b> I finaly start to\
      \ understand the cross product, I think it's something like this:</p>\n<p>The\
      \ u and v make togethere 1 plane, on that place you can 'place' a vector, that's\
      \ the cross product. The <a href=\"http://en.wikipedia.org/wiki/Cross_product\"\
      \ class=\"extiw\" title=\"wikipedia:Cross product\">Wikipedia:Cross product</a>\
      \ explains it quite well.</p>\n<h2><span class=\"mw-headline\" id=\"Mathematical_Properties_of_Vectors\"\
      >Mathematical Properties of Vectors</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=13\"\
      \ title=\"Edit section: Mathematical Properties of Vectors\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>The following is for the mathematically\
      \ inclined. Many of the following statements might seem obvious to the casual\
      \ reader, but keep in mind that just the fact that you <i>know</i> something\
      \ holds true for regular numbers (scalars) doesn't imply that it's also true\
      \ for vectors.</p>\n<ul>\n<li>they can be added to each other to give another\
      \ vector:</li>\n</ul>\n<pre><b>u</b> + <b>v</b> \n</pre>\n<ul>\n<li>addition\
      \ of vectors is <i>commutative</i> and <i>associative</i>:</li>\n</ul>\n<pre><b>u</b>\
      \ + <b>v</b> = <b>u</b> + <b>v</b>\n<b>u</b> + (<b>v</b> + <b>w</b>) = (<b>u</b>\
      \ + <b>v</b>) + <b>w</b> \n</pre>\n<ul>\n<li>there is an additive identity,\
      \ the zero vector:</li>\n</ul>\n<pre><b>u</b> + <b>0</b> = <b>u</b>\n</pre>\n\
      <ul>\n<li>every vector has an inverse vector written -<b>u</b> such that</li>\n\
      </ul>\n<pre><b>u</b> + ( -<b>u</b> ) = <b>0</b> – or, for short:\n<b>u</b> -\
      \ <b>u</b> = <b>0</b>\n</pre>\n<ul>\n<li>they can be multiplied by a scalar\
      \ to give a new vector:</li>\n</ul>\n<pre>α * <b>u</b>\n</pre>\n<ul>\n<li>scalar\
      \ multiplication is associative and doubly distributive.</li>\n<li>the usual\
      \ scalar 1 leaves vectors unchanged:</li>\n</ul>\n<pre>1 * <b>u</b> = <b>u</b>\n\
      </pre>\n<p>In abstract maths, many more sets of objects satisfy these properties\
      \ (for example, real numbers are a vector space over themselves, the complexes\
      \ are a vector space over the reals, real functions are a vector space over\
      \ the reals, and so on).</p>\n<hr />\n<h2><span class=\"mw-headline\" id=\"\
      Related_Topics\">Related Topics</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=14\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Variables_With_Vectors\"\
      \ title=\"Legacy:Variables With Vectors\">Variables with Vectors</a></li>\n\
      <li><a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\">Rotator</a></li>\n\
      <li><a href=\"/Legacy:Quaternion\" title=\"Legacy:Quaternion\">Quaternion</a></li>\n\
      <li><a href=\"/Legacy:UnrealScript_Vector_Maths\" title=\"Legacy:UnrealScript\
      \ Vector Maths\">UnrealScript Vector Maths</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Vector\"\
      \ class=\"extiw\" title=\"wikipedia:Vector\">Wikipedia:Vector</a></li>\n<li><a\
      \ href=\"/edit/Chimeric:vectors.php?redlink=1\" class=\"new\" title=\"Chimeric:vectors.php\
      \ (page does not exist)\">Chimeric's Vector Primer</a></li>\n<li><a rel=\"nofollow\"\
      \ class=\"external text\" href=\"http://www.planetdeusex.com/tack\">Vect's Vectors\
      \ in UT</a></li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Further_Reading\"\
      >Further Reading</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Vector?section=15\" title=\"Edit section: Further\
      \ Reading\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"http://flipcode.com/geometry\"\
      >Flipcode Vector Tutorial</a></li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"\
      Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Vector?section=16\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Sweavo:</b> It's a mistake to try to teach the\
      \ theory of vectors here, we can only do a worse job than mathworld or wikipedia\
      \ or high school math books. The more explaining that goes on these pages, the\
      \ harder it is to understand what the page is driving at. If more explanation\
      \ is felt needed, I suggest linking to sites in Further Reading that give the\
      \ info. What I do think belongs here is what you can do with them with unrealscript\
      \ (like the nice ability to rotate a vector) and maybe a few recipes of what\
      \ you can do with them in the game, like adding momentum to things in Karma.</p>\n\
      <p><b>shadoxx:</b> I disagree. This page has been very useful for helping me\
      \ understand vectors. I am a high school student, and I've learned more here\
      \ than I have through the stupid textbooks they give us.</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.127 seconds\nReal time usage: 0.144 seconds\n\
      Preprocessor visited node count: 172/1000000\nPreprocessor generated node count:\
      \ 312/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3600-0!*!0!!en!5!* and timestamp 20221118015150 and revision\
      \ id 45068\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Unreal World"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 0
    exists: false
    name: "Chimeric:vectors.php"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:PlayerPawn"
  - ns: 100
    exists: true
    name: "Legacy:Karma"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Quaternion"
  - ns: 100
    exists: false
    name: "Legacy:UnrealUnits"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Vector Maths"
  - ns: 100
    exists: true
    name: "Legacy:Variables With Vectors"
  templates: []
  images:
  - "Legacy_Vector3.gif"
  - "Legacy_vector2d.gif"
  - "Legacy_Vector1.gif"
  externallinks:
  - "http://www.planetdeusex.com/tack"
  - "http://flipcode.com/geometry"
  sections:
  - toclevel: 1
    level: "2"
    line: "Foundations"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Vector"
    byteoffset: 0
    anchor: "Foundations"
  - toclevel: 2
    level: "3"
    line: "Vector vs. Scalar"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Vector"
    byteoffset: 17
    anchor: "Vector_vs._Scalar"
  - toclevel: 2
    level: "3"
    line: "Components"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Vector"
    byteoffset: 873
    anchor: "Components"
  - toclevel: 2
    level: "3"
    line: "Coordinate Representation"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Vector"
    byteoffset: 1303
    anchor: "Coordinate_Representation"
  - toclevel: 1
    level: "2"
    line: "UnrealScript vectors"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Vector"
    byteoffset: 3829
    anchor: "UnrealScript_vectors"
  - toclevel: 1
    level: "2"
    line: "Units"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Vector"
    byteoffset: 5114
    anchor: "Units"
  - toclevel: 1
    level: "2"
    line: "Recipes"
    number: "4"
    index: "7"
    fromtitle: "Legacy:Vector"
    byteoffset: 5889
    anchor: "Recipes"
  - toclevel: 2
    level: "3"
    line: "Vector Length (magnitude)"
    number: "4.1"
    index: "8"
    fromtitle: "Legacy:Vector"
    byteoffset: 5902
    anchor: "Vector_Length_.28magnitude.29"
  - toclevel: 2
    level: "3"
    line: "Dot Product"
    number: "4.2"
    index: "9"
    fromtitle: "Legacy:Vector"
    byteoffset: 6513
    anchor: "Dot_Product"
  - toclevel: 2
    level: "3"
    line: "Adding Vectors"
    number: "4.3"
    index: "10"
    fromtitle: "Legacy:Vector"
    byteoffset: 7240
    anchor: "Adding_Vectors"
  - toclevel: 1
    level: "2"
    line: "Vector operators and functions"
    number: "5"
    index: "11"
    fromtitle: "Legacy:Vector"
    byteoffset: 7848
    anchor: "Vector_operators_and_functions"
  - toclevel: 1
    level: "2"
    line: "Cross Product"
    number: "6"
    index: "12"
    fromtitle: "Legacy:Vector"
    byteoffset: 11546
    anchor: "Cross_Product"
  - toclevel: 1
    level: "2"
    line: "Mathematical Properties of Vectors"
    number: "7"
    index: "13"
    fromtitle: "Legacy:Vector"
    byteoffset: 13196
    anchor: "Mathematical_Properties_of_Vectors"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "8"
    index: "14"
    fromtitle: "Legacy:Vector"
    byteoffset: 14477
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Further Reading"
    number: "9"
    index: "15"
    fromtitle: "Legacy:Vector"
    byteoffset: 14818
    anchor: "Further_Reading"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "10"
    index: "16"
    fromtitle: "Legacy:Vector"
    byteoffset: 14897
    anchor: "Discussion"
  displaytitle: "Legacy:Vector"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Handedness"
    name: "wikipedia:Handedness"
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Vector"
    name: "wikipedia:Vector"
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Dot_product"
    name: "wikipedia:Dot product"
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Cross_product"
    name: "wikipedia:Cross product"
  wikitext:
    text: "==Foundations==\n\n===Vector vs. Scalar===\n\nMany things like temperature,\
      \ mass, etc. can be measured with only a number and some units, for example\
      \ a kettle might contain water at 100 degrees Celsius.  These are known as scalar\
      \ quantities.  They have no notion of direction.\n\nVectors, however have an\
      \ idea of direction.  In physics, Forces and Velocities are vector quantities.\
      \  Taking velocity as an example.  If we say that a car is going 70 km/hour,\
      \ this does not tell us where it will be in one hour's time because we have\
      \ not specified the direction that it is going.  However, we could describe:\n\
      * the magnitude of the velocity (70km/hour)\n* a compass heading to specify\
      \ the direction (say 30 degrees from North)\n* a number giving the vertical\
      \ angle with respect to the Earth's surface (say 0 degrees)\n\nThe combination\
      \ of these quantities define a vector for the car.\n\n===Components===\n\nA\
      \ useful way to view a vector is as a sum of components.  After our car has\
      \ driven for an hour, it is 70Km away at a bearing of 30 degrees.  Alternatively,\
      \ we can say that it is 60.6km north and 35km east of its point of origin. \
      \ We call these two numbers ''components'' of the vector.  By representing vectors\
      \ as components like this, it becomes much easier to perform operations like\
      \ adding vectors together.\n\n===Coordinate Representation===\n\nOn a two-dimensional\
      \ plane, any point (x,y) can be represented as a vector.  Graphically, we often\
      \ represent such a vector by drawing an arrow from the origin to the point,\
      \ with the tip of the arrow resting at the point. \n\nThe situation for three-dimensional\
      \ vectors is similar, with an ordered triplet (x,y,z) being represented by an\
      \ arrow from the origin to the corresponding point in three-dimensional space.\
      \  In vector language, this is described as  (u<sub>x</sub> , u<sub>y</sub>\
      \ , u<sub>z</sub>) to make it clear that the three numbers belong to the vector\
      \ <b>u</b>. This looks exactly the same as the coordinates for a point. The\
      \ only difference is the way we think about them.\n\n[[Image:Legacy_vector2d.gif|right|The\
      \ 2d vector '''u''' with its components '''u<sub>x</sub>''' and '''u<sub>y</sub>''']]\n\
      \nYou may also see vectors expressed in the form a<b>i</b> + b<b>j</b> + c<b>k</b>.\
      \ <b>i</b>, <b>j</b>, and <b>k</b> are ''unit vectors'': vectors of length 1\
      \ that point along the x,y,z coordinates axes respectively. In maths, { <b>i</b>,\
      \ <b>j</b>, <b>k</b> } is a ''basis'' for the space because any vector can be\
      \ written as a combination of them. They represent the unit vectors along three\
      \ perpendicular axes, and a, b, and c are the \"lengths\" of the vector along\
      \ the respective axis.\n\nVectors are extremely powerful. they can represent:\n\
      \n; displacement: You could say \"the pawn has moved 64 units\", or you could\
      \ say \"the pawn has moved 64 units to the north-east\", or you could use a\
      \ vector of length 64 that points in that direction. A displacement is different\
      \ from a ''length'' in that it has a direction as well as a magnitude.  See\
      \ ''length of a vector'' below.\n; points : A point and a vector together describe\
      \ a second point.  In the illustration above,  If O is a point in space, <u>OP</u>\
      \ is the vector from O, the origin, to P, which is another point in space, completely\
      \ specified by O and <u>OP</u>.\n; velocities and accelerations : like displacements,\
      \ these have a direction. The magnitude of the vector now represents \"how much\"\
      \ velocity there is; in other words, the speed. To return to the earlier car\
      \ example, if you say \"the car has a speed of 10 m/s\", then you're giving\
      \ the magnitude of the velocity, but not the direction.\n; forces : When specifying\
      \ an impulse on a [[Legacy:Karma|Karma]] simulated actor, you can use a vector\
      \ to represent the direction and magnitude of the force to be applied to that\
      \ actor.\n\n[[Image:Legacy_Vector1.gif|Legacy_Vector1.gif]]\n\n==UnrealScript\
      \ vectors==\n\nVectors in [[Legacy:UnrealScript|UnrealScript]] always consist\
      \ of three components, as they are usually used for working in the 3-d game\
      \ world.  For clarity, this page uses two-dimensional vectors, but the principles\
      \ are exactly the same for three dimensions.\n\nUnrealscript does not distinguish\
      \ between a velocity vector, or a position vector, or any other type of vector.\
      \  To the Engine, a vector is simply a collection of three float values that\
      \ can be handed around as a single data item and can be operated on with vector\
      \ operators (see below).\n\n'''Note:''' Be careful when replicating vectors\
      \ because the vector struct is compressed before it gets replicated. The vector\
      \ components are converted to 16bit signed integers in UT (6 bytes per vector)\
      \ and 21bit signed integers in UT2003/4 (8 bytes per vecctor with one bit unused).\
      \ Fractional values are truncated during float->int conversion and values exceeding\
      \ the limited bit range wrap around, so e.g. 1703954.25 may become -393198.00\
      \ in UT2004. However, these values already come close to the precision limit\
      \ of the float data type (1703954.25 actually only has 2 bits left for the part\
      \ behind the decimal dot!), so you probably won't be using them. Still keep\
      \ this in mind when replicating vectors.\n\n==Units==\n\nWhen working with vectors,\
      \ as with scalars, it's important to match units.  Just as you can't add 5 degrees\
      \ celsius to 30 degrees fahrenheit and end up with 35 degrees fahrsius, you\
      \ can't add a vector expressed in meters per second to one expressed in km per\
      \ hour and expect a sensible result.  Unreal has its own units of distance,\
      \ [[Legacy:UnrealUnits|UnrealUnits]] (UU), and from this we derive Velocities\
      \ are in UU/sec and Accelerations are in UU/sec<Sup>2</sup>.\n\n: Position +=\
      \ Velocity * time is the same as m += m / sec * sec\n\nwhich evaluates to:\n\
      : m += m\n\nThus, this makes sense. Here is what '''doesn't''' make sense:\n\
      \nPosition += Velocity is the same as m += m / sec which evaluates to:\n: m\
      \ += m /sec\n\nUnits don't match, so it '''doesn't''' make sense.\n\n==Recipes==\n\
      \n===Vector Length (magnitude)===\n\nThe magnitude of a vector can be calculated\
      \ using an extension of Euclid's rule for a right-angled triangle:  Square each\
      \ component of the vector (however many you have) and add them together, then\
      \ take the square root of the result.  \n\ne.g. If I have a 2 dimensional vector\
      \ 3<b>i</b> + 4<b>j</b>, the length of that vector can be calculated as\n: &radic;(\
      \ 3<sup>2</sup> + 4<sup>2</sup> ) = 5\n\nThe magnitude of a vector is written\
      \ <nowiki>{|\n\n|-\n|\n|}\n</nowiki>'''u'''<nowiki>{|\n\n|-\n|\n|}\n</nowiki>.\
      \ The corresponding UnrealScript function is <code>VSize(u)</code> (vector size).\n\
      \n===Dot Product===\n: UnrealScript: <code>u dot v</code>\n: Maths:  '''u'''\
      \ <tt>&middot;</tt> '''v'''\n\nThe dot product of two vectors is a scalar, ie\
      \ a number. This is given by one of the following formulae:\n\n* (u<sub>x</sub>\
      \ * v<sub>x</sub>) + (u<sub>y</sub> * v<sub>y</sub>) + (u<sub>z</sub> * v<sub>z</sub>)\n\
      * <nowiki>{|\n\n|-\n|\n|}\n</nowiki>'''u'''<nowiki>{|\n\n|-\n|\n|}\n</nowiki>\
      \ * <nowiki>{|\n\n|-\n|\n|}\n</nowiki>'''v'''<nowiki>{|\n\n|-\n|\n|}\n</nowiki>\
      \ * cos(theta) &ndash; where theta is the angle between the vectors (In UnrealScript\
      \ this would be VSize(u) * VSize(v) * Cos(theta))\n\nIf the dot product is zero,\
      \ then the vectors are perpendicular (or at least one of them has zero length).\n\
      \nFurther reading: [[Wikipedia:Dot product]]\n\n===Adding Vectors===\n: UnrealScript:\
      \ <code> u + v </code>\n: Maths: '''u''' + '''v'''\n\nThe sum of two vectors\
      \ is easiest in component form.  The sum of '''u''' and '''v''' is the vector\
      \ (u<sub>x</sub>+v<sub>x</sub>, u<sub>y</sub>+v<sub>y</sub>, u<sub>z</sub>+v<sub>z</sub>).\
      \  It can be visualized as drawing one vector then drawing the second vector\
      \ starting at the head of the first vector.\n\n&rarr;Still to cover:&rarr;\n\
      *multiplying a vector by a number/inverting vectors\n*normalized vectors\n*What\
      \ can cross product and dot product be used for?\n*How can vectors be used in\
      \ UnrealScript? (maybe just a link)\n\n==Vector operators and functions==\n\n\
      The [[Legacy:Operators|Operators]] page details the operators than can be used\
      \ with a Vector.  It should also be noted that some [[Legacy:Rotator|Rotator]]\
      \ operators (namely << and >>) can be used to rotate a vector.\n\nThe following\
      \ vector related [[Legacy:Global Function|Global Function]]s are defined in\
      \ the [[Legacy:Object|Object]] class:\n\n; float  VSize (vector A) [static]\
      \ : Returns the length of the vector, ||A||.\n; vector Normal (vector A) [static]\
      \ : Returns a vector with the same direction and a length of 1.\n; Invert (out\
      \ vector X, out vector Y, out vector Z) :\n; vector VRand ( ) [static] : Returns\
      \ a vector with random direction and a length of 1.\n; vector MirrorVectorByNormal\
      \ (vector Vect, vector Normal) [static] : Mirrors a vector about a specified\
      \ normal vector.<br />Think of a projectile <tt>p</tt> with a certain speed\
      \ vector that hits a wall with a certain normal vector <tt>HitNormal</tt> and\
      \ gets reflected without any damping. The projectile's new speed is what you\
      \ get from <tt>MirrorVectorByNormal(p.Velocity, HitNormal)</tt>. This can also\
      \ be calculated through:<br /><tt>Vect - (Vect dot Normal(HitNormal)) * Normal(HitNormal)</tt>\
      \ (this is used e.g. by the Ripper blades)\n\nSee [[Legacy:UnrealScript Vector\
      \ Maths|UnrealScript Vector Maths]] for how to use these.\n\nExample on usage:\n\
      \n<USCRIPT>event SeePlayer(Pawn Seen)\n\n{//Seeplayer seems to do wierd with\
      \ FOV, always sees 180 DEG.\n\n\tif (Normal(Seen.Location - Pawn.Location) DOT\
      \ Normal(Vector(Pawn.Rotation)) > 0.7 )\n\n\t{\n\n\t\tSeenPlayer(Seen);\n\n\t\
      }\n\n}\n\nfunction SeenPlayer(Pawn Seen);</USCRIPT>\n\nI created this in a Controller,\
      \ because the normal SeePlayer had a to width FOV for some reason, the 0.7 is\
      \ calculated by cos(45) 45 in degrees (or cos(PI/4) in radians)\n\nIt's the\
      \ only use of dot product that I have at the moment.\n\n'''Foxpaw:''' The dot\
      \ product can be used (and I think that is its primary use) to find the angle\
      \ between them. When we learned above vectors in school we didn't use any symbols\
      \ like the ones shown above... it might be helpful to relate this to more common\
      \ mathematical expressions.\n\n'''Mychaeel:''' More important than for determining\
      \ an angle between two vectors is translating a given vector (location, direction,\
      \ or whatever) to any given rotated coordinate system by simply multiplying\
      \ the input vector with each of the normals pointing along the rotated axes\
      \ to get the respective rotated coordinate values.  That means if you have a\
      \ rotated system (like an [[Legacy:Actor|Actor]]'s local coordinate system)\
      \ and a whole batch of vectors to translate, you only have to perform the expensive\
      \ coordinate rotation once on the normals and rotate any given vector into that\
      \ system by evaluating three simple dot products.\n\n'''Daid303:''' I finaly\
      \ found a Dot product in some of the origional code. It's use in the [[Legacy:PlayerPawn|PlayerPawn]]\
      \ code. In ServerMove().\n\n<USCRIPT>LocDiff = Location - ClientLoc;\n\nClientErr\
      \ = LocDiff Dot LocDiff;</USCRIPT>But i'm kinda clueless what value the ClientErr\
      \ will have....\n\n'''Wormbo:''' Uhm, isn't (LocDiff Dot LocDiff) == Square(VSize(LocDiff))\
      \ ?\n\n'''Daid303:''' So basicly they could have used VSize(LocDiff).... because\
      \ they only compair it with a value afterwarts. To see if the new server location\
      \ wouldn't be to far away from the previeus location. (if they are the server\
      \ send a update to the client)\n\n'''ThePoker:''' The reason they use a dot\
      \ product there is that (X Dot X) is less expensive than Square(VSize(X)). While\
      \ (X dot X) just squares and sums the components of X, Square(VSize(X)) does\
      \ that first but then also takes the square root of the sum (in the VSize function)\
      \ and then re-squares it.\n\n==Cross Product ==\n: UnrealScript: <code>u cross\
      \ v</code>\n: Maths:  '''u''' &times; '''v'''\n\nThe cross product of two vectors\
      \ is another vector given by\n\n: <nowiki>{|\n\n|-\n|\n|}\n</nowiki>'''u'''<nowiki>{|\n\
      \n|-\n|\n|}\n</nowiki> * <nowiki>{|\n\n|-\n|\n|}\n</nowiki>'''v'''<nowiki>{|\n\
      \n|-\n|\n|}\n</nowiki> * '''e''' * sin(theta) &ndash; where theta is the angle\
      \ between the vectors\n\nwhere e is a unit vector that is perpendicular to both\
      \ u and v. In mathematics, ( u , v, e ) are taken to form a right-hand set.\
      \ Because the [[Legacy:Unreal World|Unreal world]] uses left-handed co-ordinates\
      \ (see [[Wikipedia:Handedness]] for definition and pictures), ( u , v, e ) is\
      \ a left-handed set. This means that\n\n [1,0,0] cross [0,1,0] = [0,0,1]\n \n\
      \nThe cross product is ''not'' commutative:\n\n  u cross v !=   v cross u\n\
      \  u cross v == -(v cross u)\n\nFurther/better reading: [[Wikipedia:Cross product]]\n\
      \n[[Image:Legacy_Vector3.gif|Legacy_Vector3.gif]]\n\n'''Foxpaw:''' The short\
      \ and the long of this is that the cross product of a pair of vectors is a vector\
      \ perpindicular to both source vectors.. but not necessarily the '''only'''\
      \ vector perpindicular to those two vectors. I think the above description is\
      \ kind of confusing. \n\n'''Mychaeel:''' Save for its length (positive or negative,\
      \ and clearly defined for the cross product), there ''is'' only one single vector\
      \ that's perpendicular to any two non-parallel vectors.\n\n'''Daid303:''' I\
      \ finaly start to understand the cross product, I think it's something like\
      \ this:\n\nThe u and v make togethere 1 plane, on that place you can 'place'\
      \ a vector, that's the cross product. The [[Wikipedia:Cross product]] explains\
      \ it quite well.\n\n==Mathematical Properties of Vectors ==\n\nThe following\
      \ is for the mathematically inclined.  Many of the following statements might\
      \ seem obvious to the casual reader, but keep in mind that just the fact that\
      \ you ''know'' something holds true for regular numbers (scalars) doesn't imply\
      \ that it's also true for vectors.\n\n* they can be added to each other to give\
      \ another vector:\n <b>u</b> + <b>v</b> \n* addition of vectors is ''commutative''\
      \ and ''associative'':\n <b>u</b> + <b>v</b> = <b>u</b> + <b>v</b>\n <b>u</b>\
      \ + (<b>v</b> + <b>w</b>) = (<b>u</b> + <b>v</b>) + <b>w</b> \n* there is an\
      \ additive identity, the zero vector:\n <b>u</b> + <b>0</b> = <b>u</b>\n* every\
      \ vector has an inverse vector written -<b>u</b> such that\n <b>u</b> + ( -<b>u</b>\
      \ ) = <b>0</b> &ndash; or, for short:\n <b>u</b> - <b>u</b> = <b>0</b>\n* they\
      \ can be multiplied by a scalar to give a new vector:\n\n &alpha; * <b>u</b>\n\
      * scalar multiplication is associative and doubly distributive.\n* the usual\
      \ scalar 1 leaves vectors unchanged:\n 1 * <b>u</b> = <b>u</b>\n\nIn abstract\
      \ maths, many more sets of objects satisfy these properties (for example, real\
      \ numbers are a vector space over themselves, the complexes are a vector space\
      \ over the reals, real functions are a vector space over the reals, and so on).\n\
      \n----\n\n==Related Topics==\n* [[Legacy:Variables With Vectors|Variables with\
      \ Vectors]]\n* [[Legacy:Rotator|Rotator]]\n* [[Legacy:Quaternion|Quaternion]]\n\
      * [[Legacy:UnrealScript Vector Maths|UnrealScript Vector Maths]]\n* [[Wikipedia:Vector]]\n\
      * [[Chimeric:vectors.php|Chimeric's Vector Primer]]\n* [http://www.planetdeusex.com/tack\
      \ Vect's Vectors in UT]\n\n==Further Reading==\n* [http://flipcode.com/geometry\
      \ Flipcode Vector Tutorial]\n\n==Discussion==\n\n'''Sweavo:''' It's a mistake\
      \ to try to teach the theory of vectors here, we can only do a worse job than\
      \ mathworld or wikipedia or high school math books.  The more explaining that\
      \ goes on these pages, the harder it is to understand what the page is driving\
      \ at.  If more explanation is felt needed, I suggest linking to sites in Further\
      \ Reading that give the info.  What I do think belongs here is what you can\
      \ do with them with unrealscript (like the nice ability to rotate a vector)\
      \ and maybe a few recipes of what you can do with them in the game, like adding\
      \ momentum to things in Karma.\n\n'''shadoxx:''' I disagree. This page has been\
      \ very useful for helping me understand vectors. I am a high school student,\
      \ and I've learned more here than I have through the stupid textbooks they give\
      \ us."
  properties: []
  revId: 45068
name: "Legacy:Vector"
revision:
  revid: 45068
  parentid: 33980
  user: "81.37.1.250"
  timestamp: 1331542621.000000000
  comment: "/* Vector operators and functions */"
timestamp: 1668763593.376229000
