---
parse:
  title: "Legacy:Node Count"
  text:
    text: "<p>Common confusions about what the term \"Node Count\" means:</p>\n<ul>\n\
      <li>it's not the number of <a href=\"/Legacy:PathNode\" title=\"Legacy:PathNode\"\
      >PathNodes</a></li>\n<li>it's not the number of <a href=\"/Legacy:Brush\" title=\"\
      Legacy:Brush\">brush</a> vertices</li>\n<li>it's not the number of BSP regions</li>\n\
      <li>it's in fact the number of <a href=\"/Legacy:BSP\" title=\"Legacy:BSP\"\
      >BSP</a> leaf nodes</li>\n</ul>\n<p>In other words, a Node is one of the coloured\
      \ polygons in UnrealEd's Zone / Portal view.</p>\n<p>The term is used in two\
      \ ways:</p>\n<ul>\n<li>the total number of nodes in the map (this is given in\
      \ the <a href=\"/Legacy:Build\" title=\"Legacy:Build\">Build</a> window's Stats\
      \ tab.</li>\n<li>the number of currently visible nodes in game</li>\n</ul>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Example:_single_cube\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Example: single\
      \ cube</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Reducing_Node_Count\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Reducing Node Count</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Quick_Experiment\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Quick Experiment</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Another_experiment\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Another experiment</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#A_look_at_the_motivation_for_Node_Count_and_Node:Poly_ratios_.28SuicideMissions.7BCLR.7D.27s_Theory.29\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">A look at the\
      \ motivation for Node Count and Node:Poly ratios (SuicideMissions{CLR}'s Theory)</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h3><span class=\"mw-headline\" id=\"\
      Example:_single_cube\">Example: single cube</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Node_Count?section=1\"\
      \ title=\"Edit section: Example: single cube\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A map consisting of a single subtracted cube will\
      \ have:</p>\n<ul>\n<li>a total poly count of 6 (6 surfaces)</li>\n<li>a total\
      \ node count of 6 (no surfaces are split)</li>\n<li>and therefore a node:poly\
      \ ratio of 1.00:1</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Reducing_Node_Count\"\
      >Reducing Node Count</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Node_Count?section=2\" title=\"Edit section:\
      \ Reducing Node Count\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>High node counts require more processing power (to render them all at once)\
      \ and so can cause your map to play slowly on your machine, and could make it\
      \ next to unplayable on a lower powered PC, especially if you have any special\
      \ effects in there like snow or fog.</p>\n<p><a href=\"/Legacy:Semisolid\" title=\"\
      Legacy:Semisolid\">Semisolid</a> brushes help drastically reduce the node count\
      \ of a level – but overuse is also a bad idea. The node count in any one area\
      \ can also be reduced by proper <a href=\"/Legacy:Zoning\" title=\"Legacy:Zoning\"\
      >Zoning</a> of your map.</p>\n<p>UnrealEd apparently cannot handle more than\
      \ 65536 BSP nodes. Even if it takes 30 minutes alone to apply all structural\
      \ brushes to the world, it will crash while handling lights.</p>\n<hr />\n<p><b>refactoring\
      \ in progress...</b></p>\n<p>But the plot thickens. At least one person in the\
      \ world of Unreal editing, a certain <a href=\"/Legacy:Tarquin\" title=\"Legacy:Tarquin\"\
      >Tarquin</a>, was for a long time under the mistaken impression that a BSP node\
      \ was a region of space. It's not. That's a region, probably.</p>\n<p>Experiments\
      \ support the hypothesis (see below) that a BSP node is a poly belonging to\
      \ a region: in other words, one of the ares of colour that is seen in UnrealEd's\
      \ Zone / Portal view.</p>\n<hr />\n<p>Current theory is that it's none of the\
      \ above. See experiment below.</p>\n<p>High node counts require more processing\
      \ power (to render them all at once) and so can cause your map to play slowly\
      \ on your machine, and could make it next to unplayable on a lower powered PC,\
      \ especially if you have any special effects in there like snow or fog.</p>\n\
      <p><a href=\"/Legacy:Semisolid\" title=\"Legacy:Semisolid\">Semisolid</a> brushes\
      \ help drastically reduce the node count of a level – but overuse is also a\
      \ bad idea. The node count in any one area can also be reduced by proper <a\
      \ href=\"/Legacy:Zoning\" title=\"Legacy:Zoning\">Zoning</a> of your map.</p>\n\
      <dl>\n<dd><i>Egad, I was about to create a page on Node Count too...&#160;:-)\
      \ I am, however, fairly sure that node count is the number of BSP nodes, not\
      \ the number of vertices. Tarquin</i></dd>\n</dl>\n<p>It would appear everyone\
      \ was wrong: evidence shows that Node Count is the number of currently visible\
      \ BSP polys. The Poly/Node ratio is then a measure of how much surfaces are\
      \ split up by BSP cuts across the map.</p>\n<p>(evidence is this: a single cube\
      \ should be a single BSP region. NodeCount when looking at this is exactly the\
      \ number of visible polys.)</p>\n<p>Question: are the final leaves of the BSP\
      \ tree regions which own polys, or polys themselves?</p>\n<dl>\n<dd><i>If the\
      \ node count is the number of visible polys in your cube then it would seem\
      \ that the leaves of the BSP tree reate to the polys themselves rather than\
      \ the region that relates to the the polys in a single BSP cut.</i>\n<dl>\n\
      <dd>Yup – <i>Tarquin</i></dd>\n</dl>\n</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Quick_Experiment\">Quick Experiment</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Node_Count?section=3\"\
      \ title=\"Edit section: Quick Experiment\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Build two subtractive boxes:</p>\n<ul>\n<li>128 x\
      \ 128 x 256</li>\n<li>256 x 512 x 256</li>\n</ul>\n<p>Put them side by side,\
      \ so the small box is halfway up the side of the large box.</p>\n<p>Look at\
      \ the Build window's Stats tab, &amp; note the following:</p>\n<ul>\n<li>We\
      \ have 11 surfaces (entities that are selected in 3D view), since the small\
      \ box loses one surface entirely</li>\n<li>One surface is a rectangle with a\
      \ square hole in it. In Zone view this is split into 4 BSP polys.</li>\n<li>Total\
      \ Nodes is 14. This is not the number of vertices (16) in the map.</li>\n</ul>\n\
      <p>Wandering around UEd with \"stat FPS\" enabled (type into the <a href=\"\
      /Legacy:UnrealEd_Console\" title=\"Legacy:UnrealEd Console\">UnrealEd console</a>)\
      \ you can see the following:</p>\n<ul>\n<li>Poly count is 11, hence this is\
      \ simply the number of surfaces. This already surprises me, I'd always figured\
      \ poly count was the number of BSP polys, not surfaces, and node count was the\
      \ BSP leafs... arg!</li>\n<li>Node count appears to be the number of BSP polys\
      \ visible. Try looking at the small box from the big box. The high node count\
      \ is due to the hollow surface being split.</li>\n</ul>\n<dl>\n<dt>Question&#160;</dt>\n\
      <dd>Is the node count the total number of BSP nodes used to render the scene?\
      \ Or is it the total number of leaf nodes used to render the scene? - it sounds\
      \ like it's the total number of BSP nodes used as you would only expect faces\
      \ to exist at the tree leafs.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      Another_experiment\">Another experiment</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Node_Count?section=4\"\
      \ title=\"Edit section: Another experiment\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Create an 8 pointed start in the 2D shape editor and\
      \ extrude it. Place two of them in a reasonably large room such that the flat\
      \ face lies in the vertical plane (so you can look at it straight on). Now subtract\
      \ (or clip) the front off of one of the stars you created to create a single\
      \ polygon on the front face. Then merge all of the faces on the other star.</p>\n\
      <p>When you look at the level within the game you will see that the the star\
      \ with the clipped or subtracted brush has both a reduced node count and a reduced\
      \ poly count. When you look at the star with the mreged faces you will see that\
      \ only the poly count has decreased.</p>\n<p>This would seem to prove the BSP\
      \ poly theory as the clip/subtract approach actually alters the wireframe of\
      \ the star brush rather than simply \"pretending\" to alter the wireframe. The\
      \ real question then is - why didn't the BSP merge any of the co-planar faces\
      \ of the star brush? <i>because it only merges to convex pieces</i></p>\n<p><i>Tarquin</i>:\
      \ I haven't tried this in UnrealEd yet, but as far as I know:</p>\n<ul>\n<li>Clipping\
      \ / Intersecting / BSP code splits concave polys by travelling round and making\
      \ a cut for each face. For the star, I imagine this could make some cuts that\
      \ fall midway across a side of the star face. Depends on how the star is made.</li>\n\
      <li>Poly-merging code already has convex pieces to work with. It therefore only\
      \ has to stick them together in an optimal way to make the smallest number of\
      \ convex pieces.</li>\n</ul>\n<p>A star shape isn't much suited to merging –\
      \ again, much depends on the shape of the star, and possibly the order in which\
      \ it was drawn in 2D (I think the way the shape is made out of triangles initially\
      \ depends on side split order). Clipping/Intersecting may manage more merging\
      \ in this case.</p>\n<p><i>I tried clipping the star shape I built. Rather than\
      \ having the wireframe change shape, the wireframe simply got thinner when I\
      \ performed the clip. Ofcourse, this might have been a problem with the way\
      \ I clipped it - I tend not to use the clipping tool much as on my old system\
      \ it would tend to cause the editor to crash. Seems fine on the new one though\
      \ so I might use it more.</i></p>\n<h3><span class=\"mw-headline\" id=\"A_look_at_the_motivation_for_Node_Count_and_Node:Poly_ratios_.28SuicideMissions.7BCLR.7D.27s_Theory.29\"\
      >A look at the motivation for Node Count and Node:Poly ratios (SuicideMissions{CLR}'s\
      \ Theory)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Node_Count?section=5\" title=\"Edit section:\
      \ A look at the motivation for Node Count and Node:Poly ratios (SuicideMissions{CLR}'s\
      \ Theory)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The idea is to minimize the number of nodes traversed in the BSP tree. Due\
      \ to the Binary/Logarithmic nature of BSP trees, the more balanced the tree\
      \ is, the fewer node traversals will be required to reach the leaf nodes (BSP\
      \ polys actually rendered). The leaf nodes represent (more or less) the actual\
      \ BSP polys rendered at runtime. In this pic below, the <i>visible</i> BSP polys\
      \ to a player are circled in red. In addition, the nodes which must be traversed\
      \ are red. Notice that as trees become more unwieldy and less balanced, the\
      \ traversed nodes goes up in proportion to leaf nodes (actual polys rendered).\
      \ Count them! Imagine how much worse a large tree would be with many more of\
      \ these unsightly unbalances!</p>\n<p>And that number 2 (as in 2:1) sounds suspiciously\
      \ related to the BINARY/Logarithmic nature of BSP trees. A well balanced tree\
      \ will have approximately a 2:1 ratio of traversal vs. leaves. Try it! Count\
      \ nodes and leaves in those trees below! A 2:1 ratio gives you the most leaves\
      \ for the fewest traversals possible for any non-trival tree. It happens when\
      \ the tree is balanced.</p>\n<div class=\"center\">\n<div class=\"floatnone\"\
      ><a href=\"/File:Legacy_BSPTreeNodes.jpeg\" class=\"image\" title=\"Doggone\
      \ near PROOF that &quot;Node Count&quot; refers to the number of nodes TRAVERSED\
      \ in the BSP tree!.\"><img alt=\"Doggone near PROOF that &quot;Node Count&quot;\
      \ refers to the number of nodes TRAVERSED in the BSP tree!.\" src=\"/w/images/Legacy_BSPTreeNodes.jpeg\"\
      \ width=\"600\" height=\"800\" /></a></div>\n</div>\n<p>How do we do this? By\
      \ making sure that in any given space of our level, there are not a bunch of\
      \ BSP polys bunched up in one area. The more evenly spread out the BSP polys\
      \ (shown in BSP cut view of the perspective window), the more balanced the tree,\
      \ and the closer to 2:1 node:poly ratio, and the more effecient the map.</p>\n\
      <p>When you need more detail in a paritcular spot of your map, like a torch\
      \ on the wall, then you use Semisolid brushes since they are not BSP based and\
      \ will therefore not cause BSP cuts and clumps of leaves on the tree. (They\
      \ do not even effect the tree structure).</p>\n<p><b>Damn:</b> That poly/node\
      \ ratio seems to have little impact on map's performance. In my maps changing\
      \ the bsp cuts slider to get a ratio of 2:1 / 1,99:1 / 2,01:1 would cause my\
      \ maps to run 1 - 7 fps slower. On the other way around, aggressive bsp cuts\
      \ setting would cause a strange boost of (laughts) 5fps or so. A map can become\
      \ unaplayable if it's huge, even with low poly counts. I've found that by playing\
      \ in various servers, maps that need a lot of memory and are huge cause the\
      \ server to be on full load and prone to crash when there is too much action\
      \ going on. Not only that but I've seen a map run twice as fast after the server\
      \ admin complained about cpu overuse, forcing the map author to split the map\
      \ in two.</p>\n<p>I did a quick search in google and found that 65536 is the\
      \ same node limit in quake / hl engine, sounds like BSP trees are limited to\
      \ 16 bits something somewhere.</p>\n<p>Ops... ISn't it 65535? If i'm not mistaken\
      \ computers start counting from 0.</p>\n<p>You are correct in that they start\
      \ from 0, but you are misunderstanding: The index of the first node would be\
      \ 0, and the index of the last node would be 65535, but the actual number of\
      \ nodes doesn't change when 0-indexing, it's still 65536.</p>\n<p><b>ProjectX:</b>\
      \ Ayone know the recommended poly/node count for maps to be playable on most\
      \ machines?</p>\n<dl>\n<dd><b>Ironblayde:</b> Check the <a href=\"/Legacy:Polycount\"\
      \ title=\"Legacy:Polycount\">Polycount</a> page for some good figures to shoot\
      \ for. As to the node:poly ratio, I've heard that 2:1 is a good figure to keep\
      \ in mind. It won't be the end of the world if you go over this a bit, though.\
      \ Many of the retail UT maps are closer to 2.5 or 2.6. Not sure about UT2003.</dd>\n\
      </dl>\n<p><b>Aphex</b> I believe the node count isn't just the leaf nodes, but\
      \ all the nodes in the tree. At each node is a 3-d plane eqn that subdivides\
      \ 3d space, its two children representing the space either side of that plane.</p>\n\
      <p>Just to make things a bit more complicated, your node count may change just\
      \ by rebuilding the map with no changes to anything, suggesting it isn't a simple\
      \ mapping to polygons, but an adaptive process with feedback (i.e. it uses the\
      \ current bsp as input to the build process!) that probably arbitrarily chooses\
      \ the first spatial subdivision.</p>\n<p>I remember some epic person saying\
      \ some time ago that it's best to have all your large brushes at the beginning\
      \ of the CSG list, with detail brushes nearer the end for optimal BSP building...</p>\n\
      <p><b>T-1</b> I have a question: Wouldn't fog speed up rendering rather than\
      \ slow it down? IIRC stuff behind fog is occluded.</p>\n<p><b>GTD-Carthage:</b>\
      \ Though this is not really part of the debate, I thought maybe I could add\
      \ the fact that converting high-poly brushes into movers will vastly (and cleverly)\
      \ reduce the node count?</p>\n<p><b>WhirlWindWabbit:</b> As far as I know, GTD-Carthage\
      \ is correct. But, as you are all aware, Unreal engine 1 has some difficulties\
      \ rendering a lot of movers in a small area or just rendering complex movers.\
      \ Moreover, if you use too much movers, even simple ones, your map is prone\
      \ to \"losing\" the movers when you play the game. They are simply not rendered.\
      \ So, in my opinion, movers act sort of like static meshes do in the new Unreal\
      \ engines as they do not effect the BSP tree, but due to the buggy nature of\
      \ movers - including incorrect display of lighting on its surface - using movers\
      \ to replace geometry should be used sparingly.</p>\n<ul>\n<li><a href=\"/Legacy:Node_Count/MergingDebate\"\
      \ title=\"Legacy:Node Count/MergingDebate\">Legacy:Node Count/MergingDebate</a>.</li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.087 seconds\nReal time\
      \ usage: 0.090 seconds\nPreprocessor visited node count: 23/1000000\nPreprocessor\
      \ generated node count: 56/1000000\nPost‐expand include size: 36/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2252-0!*!0!!en!5!* and timestamp\
      \ 20221118015135 and revision id 44351\n -->\n"
  categories:
  - sortkey: "Node Count"
    name: "Legacy_Refactor_Me"
  - sortkey: "Node Count"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Tarquin"
  - ns: 100
    exists: true
    name: "Legacy:Brush"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Console"
  - ns: 100
    exists: true
    name: "Legacy:BSP"
  - ns: 100
    exists: true
    name: "Legacy:Build"
  - ns: 100
    exists: true
    name: "Legacy:PathNode"
  - ns: 100
    exists: true
    name: "Legacy:Polycount"
  - ns: 100
    exists: true
    name: "Legacy:Semisolid"
  - ns: 100
    exists: true
    name: "Legacy:Zoning"
  - ns: 100
    exists: true
    name: "Legacy:Node Count/MergingDebate"
  templates: []
  images:
  - "Legacy_BSPTreeNodes.jpeg"
  externallinks: []
  sections:
  - toclevel: 1
    level: "3"
    line: "Example: single cube"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Node_Count"
    byteoffset: 542
    anchor: "Example:_single_cube"
  - toclevel: 1
    level: "2"
    line: "Reducing Node Count"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Node_Count"
    byteoffset: 761
    anchor: "Reducing_Node_Count"
  - toclevel: 2
    level: "3"
    line: "Quick Experiment"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Node_Count"
    byteoffset: 3378
    anchor: "Quick_Experiment"
  - toclevel: 2
    level: "3"
    line: "Another experiment"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Node_Count"
    byteoffset: 4676
    anchor: "Another_experiment"
  - toclevel: 2
    level: "3"
    line: "A look at the motivation for Node Count and Node:Poly ratios (SuicideMissions{CLR}'s\
      \ Theory)"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Node_Count"
    byteoffset: 6839
    anchor: "A_look_at_the_motivation_for_Node_Count_and_Node:Poly_ratios_.28SuicideMissions.7BCLR.7D.27s_Theory.29"
  displaytitle: "Legacy:Node Count"
  iwlinks: []
  wikitext:
    text: "Common confusions about what the term \"Node Count\" means:\n* it's not\
      \ the number of [[Legacy:PathNode|PathNode]]s\n* it's not the number of [[Legacy:Brush|brush]]\
      \ vertices\n* it's not the number of BSP regions\n* it's in fact the number\
      \ of [[Legacy:BSP|BSP]] leaf nodes \n\nIn other words, a Node is one of the\
      \ coloured polygons in UnrealEd's Zone / Portal view.\n\nThe term is used in\
      \ two ways: \n* the total number of nodes in the map (this is given in the [[Legacy:Build|Build]]\
      \ window's Stats tab.\n* the number of currently visible nodes in game\n\n===Example:\
      \ single cube ===\n\nA map consisting of a single subtracted cube will have:\n\
      * a total poly count of 6 (6 surfaces)\n* a total node count of 6 (no surfaces\
      \ are split)\n* and therefore a node:poly ratio of 1.00:1\n\n==Reducing Node\
      \ Count ==\n\nHigh node counts require more processing power (to render them\
      \ all at once) and so can cause your map to play slowly on your machine, and\
      \ could make it next to unplayable on a lower powered PC, especially if you\
      \ have any special effects in there like snow or fog.\n\n[[Legacy:Semisolid|Semisolid]]\
      \ brushes help drastically reduce the node count of a level &ndash; but overuse\
      \ is also a bad idea. The node count in any one area can also be reduced by\
      \ proper [[Legacy:Zoning|Zoning]] of your map.\n\nUnrealEd apparently cannot\
      \ handle more than 65536 BSP nodes. Even if it takes 30 minutes alone to apply\
      \ all structural brushes to the world, it will crash while handling lights.\n\
      \n----\n\n'''refactoring in progress...'''\n\nBut the plot thickens. At least\
      \ one person in the world of Unreal editing, a certain [[Legacy:Tarquin|Tarquin]],\
      \ was for a long time under the mistaken impression that a BSP node was a region\
      \ of space. It's not. That's a region, probably.\n\nExperiments support the\
      \ hypothesis (see below) that a BSP node is a poly belonging to a region: in\
      \ other words, one of the ares of colour that is seen in UnrealEd's Zone / Portal\
      \ view.\n\n----\n\nCurrent theory is that it's none of the above. See experiment\
      \ below.\n\nHigh node counts require more processing power (to render them all\
      \ at once) and so can cause your map to play slowly on your machine, and could\
      \ make it next to unplayable on a lower powered PC, especially if you have any\
      \ special effects in there like snow or fog.\n\n[[Legacy:Semisolid|Semisolid]]\
      \ brushes help drastically reduce the node count of a level &ndash; but overuse\
      \ is also a bad idea. The node count in any one area can also be reduced by\
      \ proper [[Legacy:Zoning|Zoning]] of your map.\n\n:<i>Egad, I was about to create\
      \ a page on Node Count too... :-) I am, however, fairly sure that node count\
      \ is the number of BSP nodes, not the number of vertices.  ''Tarquin'' </i>\n\
      \nIt would appear everyone was wrong: evidence shows that Node Count is the\
      \ number of currently visible BSP polys. The Poly/Node ratio is then a measure\
      \ of how much surfaces are split up by BSP cuts across the map. \n\n(evidence\
      \ is this: a single cube should be a single BSP region. NodeCount when looking\
      \ at this is exactly the number of visible polys.)\n\nQuestion: are the final\
      \ leaves of the BSP tree regions which own polys, or polys themselves?\n: <i>If\
      \ the node count is the number of visible polys in your cube then it would seem\
      \ that the leaves of the BSP tree reate to the polys themselves rather than\
      \ the region that relates to the the polys in a single BSP cut.</i>\n::Yup \
      \ &ndash; ''Tarquin'' \n\n===Quick Experiment ===\n\nBuild two subtractive boxes:\n\
      * 128 x 128 x 256\n* 256 x 512 x 256\n\nPut them side by side, so the small\
      \ box is halfway up the side of the large box.\n\nLook at the Build window's\
      \ Stats tab, & note the following:\n* We have 11 surfaces (entities that are\
      \ selected in 3D view), since the small box loses one surface entirely\n* One\
      \ surface is a rectangle with a square hole in it. In Zone view this is split\
      \ into 4 BSP polys. \n* Total Nodes is 14. This is not the number of vertices\
      \ (16) in the map.\n\nWandering around UEd with \"stat FPS\" enabled (type into\
      \ the [[Legacy:UnrealEd Console|UnrealEd console]]) you can see the following:\n\
      * Poly count is 11, hence this is simply the number of surfaces. This already\
      \ surprises me, I'd always figured poly count was the number of BSP polys, not\
      \ surfaces, and node count was the BSP leafs... arg! \n* Node count appears\
      \ to be the number of BSP polys visible. Try looking at the small box from the\
      \ big box. The high node count is due to the hollow surface being split.\n\n\
      ;Question : Is the node count the total number of BSP nodes used to render the\
      \ scene?  Or is it the total number of leaf nodes used to render the scene?\
      \ - it sounds like it's the total number of BSP nodes used as you would only\
      \ expect faces to exist at the tree leafs.\n\n===Another experiment ===\n\n\
      Create an 8 pointed start in the 2D shape editor and extrude it.  Place two\
      \ of them in a reasonably large room such that the flat face lies in the vertical\
      \ plane (so you can look at it straight on).  Now subtract (or clip) the front\
      \ off of one of the stars you created to create a single polygon on the front\
      \ face.  Then merge all of the faces on the other star.\n\nWhen you look at\
      \ the level within the game you will see that the the star with the clipped\
      \ or subtracted brush has both a reduced node count and a reduced poly count.\
      \  When you look at the star with the mreged faces you will see that only the\
      \ poly count has decreased.\n\nThis would seem to prove the BSP poly theory\
      \ as the clip/subtract approach actually alters the wireframe of the star brush\
      \ rather than simply \"pretending\" to alter the wireframe.  The real question\
      \ then is - why didn't the BSP merge any of the co-planar faces of the star\
      \ brush? <i>because it only merges to convex pieces</i>\n\n''Tarquin'': I haven't\
      \ tried this in UnrealEd yet, but as far as I know:\n* Clipping / Intersecting\
      \ / BSP code splits concave polys by travelling round and making a cut for each\
      \ face. For the star, I imagine this could make some cuts that fall midway across\
      \ a side of the star face. Depends on how the star is made.\n* Poly-merging\
      \ code already has convex pieces to work with. It therefore only has to stick\
      \ them together in an optimal way to make the smallest number of convex pieces.\n\
      \nA star shape isn't much suited to merging &ndash; again, much depends on the\
      \ shape of the star, and possibly the order in which it was drawn in 2D (I think\
      \ the way the shape is made out of triangles initially depends on side split\
      \ order). Clipping/Intersecting may manage more merging in this case.\n\n<i>I\
      \ tried clipping the star shape I built.  Rather than having the wireframe change\
      \ shape, the wireframe simply got thinner when I performed the clip.  Ofcourse,\
      \ this might have been a problem with the way I clipped it - I tend not to use\
      \ the clipping tool much as on my old system it would tend to cause the editor\
      \ to crash.  Seems fine on the new one though so I might use it more.</i>\n\n\
      ===A look at the motivation for Node Count and Node:Poly ratios (SuicideMissions{CLR}'s\
      \ Theory) ===\n\nThe idea is to minimize the number of nodes traversed in the\
      \ BSP tree. Due to the Binary/Logarithmic nature of BSP trees, the more balanced\
      \ the tree is, the fewer node traversals will be required to reach the leaf\
      \ nodes (BSP polys actually rendered). The leaf nodes represent (more or less)\
      \ the actual BSP polys rendered at runtime. In this pic below, the ''visible''\
      \ BSP polys to a player are circled in red. In addition, the nodes which must\
      \ be traversed are red. Notice that as trees become more unwieldy and less balanced,\
      \ the traversed nodes goes up in proportion to leaf nodes (actual polys rendered).\
      \ Count them! Imagine how much worse a large tree would be with many more of\
      \ these unsightly unbalances!\n\nAnd that number 2 (as in 2:1) sounds suspiciously\
      \ related to the BINARY/Logarithmic nature of BSP trees. A well balanced tree\
      \ will have approximately a 2:1 ratio of traversal vs. leaves. Try it! Count\
      \ nodes and leaves in those trees below! A 2:1 ratio gives you the most leaves\
      \ for the fewest traversals possible for any non-trival tree. It happens when\
      \ the tree is balanced.\n\n[[Image:Legacy_BSPTreeNodes.jpeg|center|Doggone near\
      \ PROOF that \"Node Count\" refers to the number of nodes TRAVERSED in the BSP\
      \ tree!.]]\n\nHow do we do this? By making sure that in any given space of our\
      \ level, there are not a bunch of BSP polys bunched up in one area. The more\
      \ evenly spread out the BSP polys (shown in BSP cut view of the perspective\
      \ window), the more balanced the tree, and the closer to 2:1 node:poly ratio,\
      \ and the more effecient the map.\n\nWhen you need more detail in a paritcular\
      \ spot of your map, like a torch on the wall, then you use Semisolid brushes\
      \ since they are not BSP based and will therefore not cause BSP cuts and clumps\
      \ of leaves on the tree. (They do not even effect the tree structure).\n\n'''Damn:'''\
      \ That poly/node ratio seems to have little impact on map's performance. In\
      \ my maps changing the bsp cuts slider to get a ratio of 2:1 / 1,99:1 / 2,01:1\
      \ would cause my maps to run 1 - 7 fps slower. On the other way around, aggressive\
      \ bsp cuts setting would cause a strange boost of (laughts) 5fps or so. A map\
      \ can become unaplayable if it's huge, even with low poly counts. I've found\
      \ that by playing in various servers, maps that need a lot of memory and are\
      \ huge cause the server to be on full load and prone to crash when there is\
      \ too much action going on. Not only that but I've seen a map run twice as fast\
      \ after the server admin complained about cpu overuse, forcing the map author\
      \ to split the map in two.\n\nI did a quick search in google and found that\
      \ 65536 is the same node limit in quake / hl engine, sounds like BSP trees are\
      \ limited to 16 bits something somewhere.\n\nOps... ISn't it 65535? If i'm not\
      \ mistaken computers start counting from 0.\n\nYou are correct in that they\
      \ start from 0, but you are misunderstanding: The index of the first node would\
      \ be 0, and the index of the last node would be 65535, but the actual number\
      \ of nodes doesn't change when 0-indexing, it's still 65536.\n\n'''ProjectX:'''\
      \ Ayone know the recommended poly/node count for maps to be playable on most\
      \ machines?\n:'''Ironblayde:''' Check the [[Legacy:Polycount|Polycount]] page\
      \ for some good figures to shoot for. As to the node:poly ratio, I've heard\
      \ that 2:1 is a good figure to keep in mind. It won't be the end of the world\
      \ if you go over this a bit, though. Many of the retail UT maps are closer to\
      \ 2.5 or 2.6. Not sure about UT2003. \n\n'''Aphex'''  I believe the node count\
      \ isn't just the leaf nodes, but all the nodes in the tree.  At each node is\
      \ a 3-d plane eqn that subdivides 3d space, its two children representing the\
      \ space either side of that plane.\n\nJust to make things a bit more complicated,\
      \ your node count may change just by rebuilding the map with no changes to anything,\
      \ suggesting it isn't a simple mapping to polygons, but an adaptive process\
      \ with feedback (i.e. it uses the current bsp as input to the build process!)\
      \ that probably arbitrarily chooses the first spatial subdivision.\n\nI remember\
      \ some epic person saying some time ago that it's best to have all your large\
      \ brushes at the beginning of the CSG list, with detail brushes nearer the end\
      \ for optimal BSP building...\n\n'''T-1''' I have a question: Wouldn't fog speed\
      \ up rendering rather than slow it down? IIRC stuff behind fog is occluded.\n\
      \n'''GTD-Carthage:''' Though this is not really part of the debate, I thought\
      \ maybe I could add the fact that converting high-poly brushes into movers will\
      \ vastly (and cleverly) reduce the node count?\n\n'''WhirlWindWabbit:''' As\
      \ far as I know, GTD-Carthage is correct. But, as you are all aware, Unreal\
      \ engine 1 has some difficulties rendering a lot of movers in a small area or\
      \ just rendering complex movers. Moreover, if you use too much movers, even\
      \ simple ones, your map is prone to \"losing\" the movers when you play the\
      \ game. They are simply not rendered. So, in my opinion, movers act sort of\
      \ like static meshes do in the new Unreal engines as they do not effect the\
      \ BSP tree, but due to the buggy nature of movers - including incorrect display\
      \ of lighting on its surface - using movers to replace geometry should be used\
      \ sparingly.\n\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/MergingDebate]]. \n\n\
      [[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 44351
name: "Legacy:Node Count"
revision:
  revid: 44351
  parentid: 44350
  user: "92.40.20.152"
  timestamp: 1302006450.000000000
  comment: ""
timestamp: 1668762997.428766000
