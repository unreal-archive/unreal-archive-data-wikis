---
parse:
  title: "Legacy:Debugging Techniques"
  text:
    text: "<p>Put all your <b>Hints for Debugging</b> here.</p>\n<p>As a programmer,\
      \ I can only think on UnrealScript stuff, but you should add anything that would\
      \ help someone to get extra info about the environment, actor behaviour and\
      \ errors on the fly.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"\
      toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"\
      ><a href=\"#UnrealScript_Techniques\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">UnrealScript Techniques</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-2\"><a href=\"#Use_the_Log.21\"><span class=\"tocnumber\">1.1</span>\
      \ <span class=\"toctext\">Use the Log!</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-3\"><a href=\"#Using_DisplayDebug_.28UT2003.29\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Using DisplayDebug (UT2003)</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Using_the_Graph_.28UT2003.29\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Using the Graph\
      \ (UT2003)</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #The_Debug_Line_.28UT2003.29\"><span class=\"tocnumber\">1.4</span> <span class=\"\
      toctext\">The Debug Line (UT2003)</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-6\"\
      ><a href=\"#Staying_Debug_Line\"><span class=\"tocnumber\">1.4.1</span> <span\
      \ class=\"toctext\">Staying Debug Line</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-7\"><a href=\"#Using_TextToSpeech_.28UT2004.2FUT2003.3F.29\"\
      ><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">Using TextToSpeech\
      \ (UT2004/UT2003?)</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a\
      \ href=\"#Slowing_things_down\"><span class=\"tocnumber\">1.6</span> <span class=\"\
      toctext\">Slowing things down</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-9\"><a href=\"#Network_Debugging\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Network Debugging</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-10\"><a href=\"#Testing_in_a_Client.2FServer_Environment\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Testing in a Client/Server\
      \ Environment</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"\
      #ServerPackages\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\"\
      >ServerPackages</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"\
      #Simulating_Lag_and_Packet_Loss\"><span class=\"tocnumber\">2.3</span> <span\
      \ class=\"toctext\">Simulating Lag and Packet Loss</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-13\"><a href=\"#Console_Commands\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Console Commands</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-14\"><a href=\"#A_Note_about_Debugging\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">A Note about Debugging</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-15\"><a href=\"#Optimizing\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Optimizing</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-16\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-17\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_Techniques\"\
      >UnrealScript Techniques</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=1\"\
      \ title=\"Edit section: UnrealScript Techniques\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Use_the_Log.21\"\
      >Use the Log!</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=2\" title=\"Edit\
      \ section: Use the Log!\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The log is generally the first thing to try when debugging.</p>\n<p>It lets\
      \ you append text to the game's log file. The stuff it writes can be viewed\
      \ while the game is running, type \"showlog\" in console to open the log window.\
      \ To start the game with log window already displayed and in windowed mode start\
      \ UT2004.exe with \" -WINDOWED -LOG\" parameters.</p>\n<p>It is a native function\
      \ declared in <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>,\
      \ so it is, in effect, a global function. Its declaration is as follows:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">native</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">231</span><span class=\"br0\">)</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"\
      kw1\">function</span> <span class=\"kw3\">Log</span><span class=\"br0\">(</span>\
      \ <span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span> S, <span\
      \ class=\"kw1\">optional</span> <span class=\"kw5\">name</span> <span class=\"\
      kw7\">Tag</span> <span class=\"br0\">)</span>;\n<span class=\"co1\">//'S' is\
      \ your message that you want to appear in the log.</span></pre></div>\n</div>\n\
      <p>The 'Tag' parameter gives the beginning of your message a more meaningful\
      \ name (useful for mod developers to differentiate their warning messages).</p>\n\
      <p>Log output gives you something like this: \"Tag: S\", where of course 'Tag'\
      \ and 'S' are replaced. If 'Tag' is not supplied, \"ScriptLog\" is used.</p>\n\
      <p>Log is saved by default to \"/GameName/System/GameName.log\" file, ie \"\
      UT2004/System/UT2004.log\". Attempting to view the log file with external application\
      \ while the game is still running is not recommended, as sometimes information\
      \ is not actually saved into the log at the moment that it happens – the order\
      \ and variables are still preserved, but I believe that the Unreal Engine maintains\
      \ an internal log in memory and only writes it to disk periodically.</p>\n<p>The\
      \ warn function is essentially the same as log, but there is no \"tag\" argument.\
      \ The \"tag\" of the warn function is always \"Warning.\"</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">native</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">232</span><span class=\"br0\">)</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">static</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw3\">Warn</span><span class=\"br0\">(</span> <span class=\"kw1\"\
      >coerce</span> <span class=\"kw5\">string</span> S <span class=\"br0\">)</span>;\n\
      <span class=\"co1\">//'S' is your message that you want to appear in the log.</span></pre></div>\n\
      </div>\n<p>The warn function's output is similar to UT's and UT2003's <a href=\"\
      /Legacy:Log_Warnings\" title=\"Legacy:Log Warnings\">log warnings</a>.</p>\n\
      <p>You can also use the \"say\" functionality to make your actor \"talk\" within\
      \ the level and read the output. This allows for a realtime \"log\" that you\
      \ can view in-game, though things written using this will not actually be written\
      \ to the log file:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">Broadcast</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">self</span>, <span class=\"st0\"\
      >\"blah blah blah\"</span>, <span class=\"st0\">'Say'</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p><b>OverloadUT:</b> Unfortunately, this method\
      \ has limited reliability, because the messages broadcasted will be spam filtered\
      \ just like normal chat. Meaning that if you send too many messages too fast,\
      \ some of them simply won't be displayed. The limit is quite low too... So be\
      \ sure you're only sending one message at a time, and only at key times. I like\
      \ to instead use the <i><b>ClientMessage()</b></i> function inside <i><b>PlayerController</b></i>\
      \ - but unfortunately it's a more annoying because you need a specific PlayerController\
      \ to send it to.</p>\n<p><b>Kirk:</b> Also note that if you suddenly see messages\
      \ coming up you didn't instigate... it's probably form the bots doing the same\
      \ thing as you.</p>\n<h3><span class=\"mw-headline\" id=\"Using_DisplayDebug_.28UT2003.29\"\
      >Using DisplayDebug (UT2003)</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=3\"\
      \ title=\"Edit section: Using DisplayDebug (UT2003)\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>The DisplayDebug function\
      \ in class <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> shows\
      \ a lot of info about the player/zone/weapon. It is shown when you use the <tt>ShowDebug</tt>\
      \ console command and it can be used to draw pertinent information on the HUD\
      \ in realtime. If you want to make it compatible with other DisplayDebug functions\
      \ from other actors, you must insert a carriage return at the end of whatever\
      \ you are writing, to prevent other actors from appending text directly to whatever\
      \ you have written.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> DisplayDebug<span\
      \ class=\"br0\">(</span><span class=\"kw8\">Canvas</span> <span class=\"kw8\"\
      >Canvas</span>, <span class=\"kw1\">out</span> <span class=\"kw5\">float</span>\
      \ YL, <span class=\"kw1\">out</span> <span class=\"kw5\">float</span> YPos<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">string</span> T;\n \n  <span class=\"kw6\"\
      >super</span>.<span class=\"me0\">DisplayDebug</span><span class=\"br0\">(</span><span\
      \ class=\"kw8\">Canvas</span>, YL, YPos<span class=\"br0\">)</span>;\n \n  T\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">\"DOT: \"</span><span class=\"\
      sy0\">$</span>vect<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ Dot <span class=\"kw3\">Normal</span><span class=\"br0\">(</span><span class=\"\
      kw5\">vector</span><span class=\"br0\">(</span><span class=\"kw7\">rotation</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n  <span class=\"kw8\"\
      >Canvas</span>.<span class=\"me0\">DrawText</span><span class=\"br0\">(</span>T,<span\
      \ class=\"kw6\">false</span><span class=\"br0\">)</span>;\n  YPos <span class=\"\
      sy0\">+=</span> YL;\n  <span class=\"kw8\">Canvas</span>.<span class=\"me0\"\
      >SetPos</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>,YPos<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>You can also use DisplayDebug to draw anything you normally could to the\
      \ Canvas. Here is an example of drawing the position of a vector onto the screen\
      \ visually. The example draws a cross at the on-screen location where the vector\
      \ would be percieved to be - note that this assumes that the vector is a \"\
      location\" vector, as it will be drawn relative to the world origin:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> DisplayDebug<span class=\"br0\">(</span><span\
      \ class=\"kw8\">Canvas</span> <span class=\"kw8\">Canvas</span>, <span class=\"\
      kw1\">out</span> <span class=\"kw5\">float</span> YL, <span class=\"kw1\">out</span>\
      \ <span class=\"kw5\">float</span> YPos<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw6\">Super</span>.<span class=\"me0\">DisplayDebug</span><span\
      \ class=\"br0\">(</span><span class=\"kw8\">Canvas</span>, YL, YPos<span class=\"\
      br0\">)</span>;\n \n  <span class=\"kw8\">Canvas</span>.<span class=\"me0\"\
      >SetDrawColor</span><span class=\"br0\">(</span><span class=\"nu0\">255</span>,<span\
      \ class=\"nu0\">255</span>,<span class=\"nu0\">255</span><span class=\"br0\"\
      >)</span>;\n  <span class=\"kw8\">Canvas</span>.<span class=\"me0\">SetPos</span><span\
      \ class=\"br0\">(</span><span class=\"kw8\">Canvas</span>.<span class=\"me0\"\
      >WorldToScreen</span><span class=\"br0\">(</span>YOURVECTORHERE<span class=\"\
      br0\">)</span>.<span class=\"me0\">X</span>,<span class=\"kw8\">Canvas</span>.<span\
      \ class=\"me0\">WorldToScreen</span><span class=\"br0\">(</span>YOURVECTORHERE<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">Y</span><span class=\"br0\">)</span>;\n\
      \  DrawCross<span class=\"br0\">(</span><span class=\"kw8\">Canvas</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw8\">Canvas</span>.<span class=\"\
      me0\">DrawText</span><span class=\"br0\">(</span><span class=\"st0\">\"A SHORT\
      \ DESCRIPTION WHICH WILL GET DRAWN NEXT TO THE CROSS GOES HERE\"</span>,<span\
      \ class=\"kw6\">false</span><span class=\"br0\">)</span>;\n  <span class=\"\
      kw8\">Canvas</span>.<span class=\"me0\">SetPos</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">4</span>,YPos<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> DrawCross<span class=\"br0\"\
      >(</span><span class=\"kw8\">canvas</span> c<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  c.<span class=\"me0\">DrawLine</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">18</span><span\
      \ class=\"br0\">)</span>;\n  c.<span class=\"me0\">DrawLine</span><span class=\"\
      br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">18</span><span\
      \ class=\"br0\">)</span>;\n  c.<span class=\"me0\">DrawLine</span><span class=\"\
      br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">18</span><span\
      \ class=\"br0\">)</span>;\n  c.<span class=\"me0\">DrawLine</span><span class=\"\
      br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">18</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Using_the_Graph_.28UT2003.29\">Using the\
      \ Graph (UT2003)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=4\" title=\"Edit\
      \ section: Using the Graph (UT2003)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The graph is a debugging method only availible from\
      \ KVehicle and its subclasses. It is defined in KVehicle. It can be displayed\
      \ with the <code>Graph Show</code> console command. To plot a value on the graph,\
      \ call the GraphData function, as follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">GraphData<span class=\"br0\">(</span><span class=\"st0\">\"description\"\
      </span>, <span class=\"kw1\">var</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>Where <i>var</i> (float or int) is your variable and <i>description</i>\
      \ is any string. The graph automatically adjusts the vertical scale to fit all\
      \ of the values that have been fed into it. The graph will update whenever a\
      \ new point is plotted, regardless of what actor plots it. The graph is color\
      \ coded, and points are joined together based on their <i>descriptions</i>.\
      \ There is a legend with the graph that will indicate which color is associated\
      \ with which <i>description</i> and the maximum value that has been plotted\
      \ for that <i>description.</i></p>\n<h3><span class=\"mw-headline\" id=\"The_Debug_Line_.28UT2003.29\"\
      >The Debug Line (UT2003)</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=5\"\
      \ title=\"Edit section: The Debug Line (UT2003)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">  DrawDebugLine<span\
      \ class=\"br0\">(</span> Location1, Location2, R, G, B<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>This is a great way of showing vectors. It draws a line between the\
      \ two vectors specified in Location1 and Location2. Technically one is the start\
      \ and the other is the end, but it doesn't make any visual difference. R, G,\
      \ and B, are the elements of the color of the line, red, green and blue, respectively.\
      \ They must each be between 0 and 255. This is superior to just drawing something\
      \ on the canvas, as it will go \"through\" objects instead of being drawn on\
      \ top of them. This makes it much easier to see the actual vector that is being\
      \ expressed. It is, however, relatively slow. It is not slow in the sense that\
      \ it will drag down your framerate while you debug, but it is too slow to be\
      \ reasonably used for in-game effects like a laser. This function can be called\
      \ at any time and will be \"stored up\" by the engine until the next frame is\
      \ drawn. You can draw as many debug lines as you like and they will all be \"\
      saved up\" in this manner. This can be very useful for, for instance, making\
      \ a line drawing of the path a bot intends to follow, etcetera.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Staying_Debug_Line\">Staying Debug Line</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Debugging_Techniques?section=6\" title=\"Edit section:\
      \ Staying Debug Line\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Another debug line command similar to the one above creates a permanent line,\
      \ which can be used for easily creating non-dynamic lines in 3D space. This\
      \ can be handy for displaying the path that a wandering or searching character\
      \ has taken over time. -ymalaika</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  DrawStayingDebugLine<span class=\"br0\">(</span> Location1, Location2, R,\
      \ G, B<span class=\"br0\">)</span>;\n  ClearStayingDebugLines<span class=\"\
      br0\">(</span><span class=\"br0\">)</span></pre></div>\n</div>\n<h3><span class=\"\
      mw-headline\" id=\"Using_TextToSpeech_.28UT2004.2FUT2003.3F.29\">Using TextToSpeech\
      \ (UT2004/UT2003?)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=7\" title=\"Edit\
      \ section: Using TextToSpeech (UT2004/UT2003?)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">native</span> <span class=\"kw1\">function</span> <span class=\"kw4\"\
      >TextToSpeech</span><span class=\"br0\">(</span> <span class=\"kw5\">string</span>\
      \ Text, <span class=\"kw5\">float</span> <span class=\"kw9\">Volume</span> <span\
      \ class=\"br0\">)</span>;\n<span class=\"co1\">//Text: Text you want to be turned\
      \ into speech</span></pre></div>\n</div>\n<p>This function is declared in Actor\
      \ so any actor can use it. An example of how to use it would be to find out\
      \ if a function was fired or not. It's very useful for those who don't want\
      \ to go into the log all the time and would like voice confirmation.</p>\n<p><b>Seabreeze:</b>\
      \ what does the 'Volume' variable represent?</p>\n<p><b>Wormbo:</b> The same\
      \ thing it represents in any audio function – how loud you want the output to\
      \ be.</p>\n<p><b>Seabreeze:</b> ahhh.. newbie here! for some reason I was only\
      \ thinking of volume of objects and not volume of sound, thanks!</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Slowing_things_down\">Slowing things down</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Debugging_Techniques?section=8\" title=\"Edit section:\
      \ Slowing things down\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>If you need time to set a particular situation up, use one of these <a href=\"\
      /edit/Legacy:Console_Command?redlink=1\" class=\"new\" title=\"Legacy:Console\
      \ Command (page does not exist)\">console commands</a>:</p>\n<ul>\n<li>playersonly&#160;:\
      \ freezes all movement except you</li>\n<li>slomo #, or set engine.gameinfo\
      \ gamespeed &lt;value here&gt;</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Network_Debugging\">Network Debugging</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=9\"\
      \ title=\"Edit section: Network Debugging\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Testing_in_a_Client.2FServer_Environment\"\
      >Testing in a Client/Server Environment</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=10\"\
      \ title=\"Edit section: Testing in a Client/Server Environment\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>It is crucial that\
      \ you test your code under client/server conditions. Just running a \"listen\
      \ server\" (a network server started from within the game) won't help there;\
      \ for concerns like <a href=\"/Legacy:Replication\" title=\"Legacy:Replication\"\
      >replication</a> the listen server behaves just like a standalone game as far\
      \ as the local player is concerned.</p>\n<p>You don't need a LAN or an Internet\
      \ connection to test your code under networking conditions though: you can <a\
      \ href=\"/Legacy:Launch_A_Local_Netgame\" title=\"Legacy:Launch A Local Netgame\"\
      >Launch A Local Netgame</a>.</p>\n<h3><span class=\"mw-headline\" id=\"ServerPackages\"\
      >ServerPackages</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=11\" title=\"Edit\
      \ section: ServerPackages\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>None of your client-side actors will show up or execute client-side code\
      \ <b>unless your package is loaded client-side</b>; unless that happens to happen\
      \ anyway (because you're coding a game type, for example), you'll have to add\
      \ your code package to the server .ini file's <code>ServerPackages</code> list.</p>\n\
      <p>Open the server's .ini file (usually server.ini or, on a local dedicated\
      \ server, frequently just the <a href=\"/Legacy:Game_Ini_File\" title=\"Legacy:Game\
      \ Ini File\">game ini file</a>), look for the <code>[Engine.GameEngine]</code>\
      \ section and add a line for your package:</p>\n<pre> ServerPackages=MyPackage\n\
      </pre>\n<h3><span class=\"mw-headline\" id=\"Simulating_Lag_and_Packet_Loss\"\
      >Simulating Lag and Packet Loss</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=12\"\
      \ title=\"Edit section: Simulating Lag and Packet Loss\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>You can tell the engine to\
      \ simulate network lag, packet loss, packets out of order and packet duplicating\
      \ when testing on a local server as described above.</p>\n<p>Add one or several\
      \ of the following parameters to the server's command line:</p>\n<dl>\n<dt>pktlag=<i>&lt;milliseconds&gt;</i>&#160;</dt>\n\
      <dd>Simulates lag.</dd>\n</dl>\n<dl>\n<dt>pktloss=<i>&lt;percentage&gt;</i>&#160;</dt>\n\
      <dd>Simulates packet loss. The given percentage specifies how many packets are\
      \ lost; it can be between 0 (no packet loss) and 100 (all packets will be lost).</dd>\n\
      </dl>\n<dl>\n<dt>pktdup=<i>&lt;percentage&gt;</i>&#160;</dt>\n<dd>Simulates\
      \ packet duplication. The given percentage specifies how many packets are duplicated;\
      \ it can be between 0 (no packet duplication) and 100 (all packets duplicated).</dd>\n\
      </dl>\n<dl>\n<dt>pktorder=<i>&lt;0 or 1&gt;</i>&#160;</dt>\n<dd>Simulates packets\
      \ that are received out of order.</dd>\n</dl>\n<p>A server for a test game with\
      \ 150 milliseconds lag, 10 percent packet loss and packets out of order would\
      \ look like this:</p>\n<pre> ucc server DM-Gael pktlag=150 pktloss=10 pktorder=1\n\
      </pre>\n<h2><span class=\"mw-headline\" id=\"Console_Commands\">Console Commands</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Debugging_Techniques?section=13\" title=\"Edit section:\
      \ Console Commands\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>See <a href=\"/Legacy:Console_Commands/Debugging_Console_Commands\" title=\"\
      Legacy:Console Commands/Debugging Console Commands\">Console Commands/Debugging\
      \ Console Commands</a></p>\n<h2><span class=\"mw-headline\" id=\"A_Note_about_Debugging\"\
      >A Note about Debugging</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=14\"\
      \ title=\"Edit section: A Note about Debugging\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>It's important to remember that not only can software\
      \ develop bugs, but your debugging tools themselves can have bugs too. Log and\
      \ other native debugging commands seem quite stable, but things in DisplayDebug\
      \ and similar functions are prone to error like any other program. If your debugging\
      \ tools show that your code is acting in an absolutely bizarre fashion, check\
      \ your debugging code to see if it is in fact the debugger that is faulty.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Optimizing\">Optimizing</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=15\"\
      \ title=\"Edit section: Optimizing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If your mod runs slowly or causes hitches on some\
      \ computers, see <a href=\"/Legacy:Code_Optimization\" title=\"Legacy:Code Optimization\"\
      >Code Optimization</a>.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=16\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Log_Warnings\" title=\"Legacy:Log Warnings\">Log\
      \ Warnings</a></li>\n<li><a href=\"/Legacy:A_Bug%27S_Life\" title=\"Legacy:A\
      \ Bug'S Life\" class=\"mw-redirect\">A Bug's Life</a></li>\n<li><a href=\"/Legacy:Spectate_Bots\"\
      \ title=\"Legacy:Spectate Bots\">Spectate Bots</a></li>\n<li><a href=\"/Legacy:Testing_Botplay\"\
      \ title=\"Legacy:Testing Botplay\">Testing Botplay</a></li>\n<li><a href=\"\
      /Legacy:UDebugger\" title=\"Legacy:UDebugger\">UDebugger</a></li>\n<li><a href=\"\
      /Legacy:Running_A_Dedicated_Server_With_UCC\" title=\"Legacy:Running A Dedicated\
      \ Server With UCC\">Running A Dedicated Server With UCC</a></li>\n<li><a href=\"\
      /Legacy:Testing_Lab\" title=\"Legacy:Testing Lab\">Testing Lab</a></li>\n</ul>\n\
      <h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Debugging_Techniques?section=17\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Ch3z</b> I actually run a copy of the 436 server\
      \ only disto from a seperate folder and connect to it with my reg UT installation.\
      \ That way I know I'm actually connecting via the internet, and with all the\
      \ hops to get back to my own machine I get plenty of non-simulated lag. I just\
      \ feel like its a better test. I also make sure none of the files i need to\
      \ join the server are in my UT dir and it makes me download them all from the\
      \ server before connecting. Seems more like a valid test to me. I'm wondering\
      \ if this would be a good idea or not. Not sure if this is where the page should\
      \ be created from or not but... check out the <a href=\"/Legacy:Testing_Lab\"\
      \ title=\"Legacy:Testing Lab\">Testing Lab</a>.</p>\n<p>Shouldn't this page,\
      \ Debugging Techniques be Category Tutorial?</p>\n<p><b>Tarquin:</b> Not really.</p>\n\
      <p><b>Vitaloverdose</b> is none of this relevant to 2004?</p>\n<p><b>Wormbo:</b>\
      \ There's a section about <i>additional</i> techniques in UT2004, and of course\
      \ they apply to UT2004 as well.</p>\n<p><b>OlympusMons:</b> Found the clear\
      \ debug staying lines thing on the udn just thought I would add it here, not\
      \ sure if its in the right spot.</p>\n<p><b>Shambler:</b> A class I made to\
      \ spew debug logs onto the HUD instead of into the log file: <a href=\"/Legacy:Log_Interaction\"\
      \ title=\"Legacy:Log Interaction\">Log Interaction</a></p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.188 seconds\nReal time usage: 0.195 seconds\nPreprocessor\
      \ visited node count: 148/1000000\nPreprocessor generated node count: 252/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:995-0!*!0!!en!*!*\
      \ and timestamp 20221118022010 and revision id 2682\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Game Ini File"
  - ns: 100
    exists: true
    name: "Legacy:Log Warnings"
  - ns: 100
    exists: true
    name: "Legacy:A Bug'S Life"
  - ns: 100
    exists: true
    name: "Legacy:Code Optimization"
  - ns: 100
    exists: true
    name: "Legacy:Log Interaction"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Running A Dedicated Server With UCC"
  - ns: 100
    exists: true
    name: "Legacy:Launch A Local Netgame"
  - ns: 100
    exists: false
    name: "Legacy:Console Command"
  - ns: 100
    exists: true
    name: "Legacy:Testing Botplay"
  - ns: 100
    exists: true
    name: "Legacy:Spectate Bots"
  - ns: 100
    exists: true
    name: "Legacy:Console Commands/Debugging Console Commands"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UDebugger"
  - ns: 100
    exists: true
    name: "Legacy:Testing Lab"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript Techniques"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 237
    anchor: "UnrealScript_Techniques"
  - toclevel: 2
    level: "3"
    line: "Use the Log!"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 266
    anchor: "Use_the_Log.21"
  - toclevel: 2
    level: "3"
    line: "Using DisplayDebug (UT2003)"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 3070
    anchor: "Using_DisplayDebug_.28UT2003.29"
  - toclevel: 2
    level: "3"
    line: "Using the Graph (UT2003)"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 4790
    anchor: "Using_the_Graph_.28UT2003.29"
  - toclevel: 2
    level: "3"
    line: "The Debug Line (UT2003)"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 5666
    anchor: "The_Debug_Line_.28UT2003.29"
  - toclevel: 3
    level: "4"
    line: "Staying Debug Line"
    number: "1.4.1"
    index: "6"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 6823
    anchor: "Staying_Debug_Line"
  - toclevel: 2
    level: "3"
    line: "Using TextToSpeech (UT2004/UT2003?)"
    number: "1.5"
    index: "7"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 7217
    anchor: "Using_TextToSpeech_.28UT2004.2FUT2003.3F.29"
  - toclevel: 2
    level: "3"
    line: "Slowing things down"
    number: "1.6"
    index: "8"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 7940
    anchor: "Slowing_things_down"
  - toclevel: 1
    level: "2"
    line: "Network Debugging"
    number: "2"
    index: "9"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 8187
    anchor: "Network_Debugging"
  - toclevel: 2
    level: "3"
    line: "Testing in a Client/Server Environment"
    number: "2.1"
    index: "10"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 8210
    anchor: "Testing_in_a_Client.2FServer_Environment"
  - toclevel: 2
    level: "3"
    line: "ServerPackages"
    number: "2.2"
    index: "11"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 8741
    anchor: "ServerPackages"
  - toclevel: 2
    level: "3"
    line: "Simulating Lag and Packet Loss"
    number: "2.3"
    index: "12"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 9328
    anchor: "Simulating_Lag_and_Packet_Loss"
  - toclevel: 1
    level: "2"
    line: "Console Commands"
    number: "3"
    index: "13"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 10302
    anchor: "Console_Commands"
  - toclevel: 1
    level: "2"
    line: "A Note about Debugging"
    number: "4"
    index: "14"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 10428
    anchor: "A_Note_about_Debugging"
  - toclevel: 1
    level: "2"
    line: "Optimizing"
    number: "5"
    index: "15"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 10899
    anchor: "Optimizing"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "16"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 11029
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "7"
    index: "17"
    fromtitle: "Legacy:Debugging_Techniques"
    byteoffset: 11368
    anchor: "Discussion"
  displaytitle: "Legacy:Debugging Techniques"
  iwlinks: []
  wikitext:
    text: "Put all your '''Hints for Debugging''' here. \n\nAs a programmer, I can\
      \ only think on UnrealScript stuff, but you should add anything that would help\
      \ someone to get extra info about the environment, actor behaviour and errors\
      \ on the fly.\n\n==UnrealScript Techniques==\n\n===Use the Log!===\n\nThe log\
      \ is generally the first thing to try when debugging. \n\nIt lets you append\
      \ text to the game's log file. The stuff it writes can be viewed while the game\
      \ is running, type \"showlog\" in console to open the log window. To start the\
      \ game with log window already displayed and in windowed mode start UT2004.exe\
      \ with \" -WINDOWED -LOG\" parameters.\n\nIt is a native function declared in\
      \ [[Legacy:Object|Object]], so it is, in effect, a global function. Its declaration\
      \ is as follows:\n\n<uscript>\nnative(231) final static function Log( coerce\
      \ string S, optional name Tag );\n//'S' is your message that you want to appear\
      \ in the log.\n</uscript>\n\nThe 'Tag' parameter gives the beginning of your\
      \ message a more meaningful name (useful for mod developers to differentiate\
      \ their warning messages).\n\nLog output gives you something like this:  \"\
      Tag: S\", where of course 'Tag' and 'S' are replaced.  If 'Tag' is not supplied,\
      \ \"ScriptLog\" is used.\n\nLog is saved by default to \"/GameName/System/GameName.log\"\
      \ file, ie \"UT2004/System/UT2004.log\". Attempting to view the log file with\
      \ external application while the game is still running is not recommended, as\
      \ sometimes information is not actually saved into the log at the moment that\
      \ it happens &ndash; the order and variables are still preserved, but I believe\
      \ that the Unreal Engine maintains an internal log in memory and only writes\
      \ it to disk periodically.\n\nThe warn function is essentially the same as log,\
      \ but there is no \"tag\" argument. The \"tag\" of the warn function is always\
      \ \"Warning.\"\n\n<uscript>\nnative(232) final static function Warn( coerce\
      \ string S );\n//'S' is your message that you want to appear in the log.\n</uscript>\n\
      \nThe warn function's output is similar to UT's and UT2003's [[Legacy:Log Warnings|log\
      \ warnings]].\n\nYou can also use the \"say\" functionality to make your actor\
      \ \"talk\" within the level and read the output. This allows for a realtime\
      \ \"log\" that you can view in-game, though things written using this will not\
      \ actually be written to the log file:\n\n<uscript>\nLevel.Game.Broadcast(self,\
      \ \"blah blah blah\", 'Say');\n</uscript>\n\n'''OverloadUT:''' Unfortunately,\
      \ this method has limited reliability, because the messages broadcasted will\
      \ be spam filtered just like normal chat.  Meaning that if you send too many\
      \ messages too fast, some of them simply won't be displayed.  The limit is quite\
      \ low too... So be sure you're only sending one message at a time, and only\
      \ at key times. I like to instead use the '''''ClientMessage()''''' function\
      \ inside '''''PlayerController''''' - but unfortunately it's a more annoying\
      \ because you need a specific PlayerController to send it to.\n\n'''Kirk:'''\
      \ Also note that if you suddenly see messages coming up you didn't instigate...\
      \ it's probably form the bots doing the same thing as you.\n\n===Using DisplayDebug\
      \ (UT2003)===\n\nThe DisplayDebug function in class [[Legacy:Actor|Actor]] shows\
      \ a lot of info about the player/zone/weapon. It is shown when you use the <tt>ShowDebug</tt>\
      \ console command and it can be used to draw pertinent information on the HUD\
      \ in realtime. If you want to make it compatible with other DisplayDebug functions\
      \ from other actors, you must insert a carriage return at the end of whatever\
      \ you are writing, to prevent other actors from appending text directly to whatever\
      \ you have written.\n\n<uscript>\nsimulated function DisplayDebug(Canvas Canvas,\
      \ out float YL, out float YPos)\n{\n  local string T;\n\n  super.DisplayDebug(Canvas,\
      \ YL, YPos);\n\n  T = \"DOT: \"$vect(0,0,1) Dot Normal(vector(rotation));\n\
      \  Canvas.DrawText(T,false);\n  YPos += YL;\n  Canvas.SetPos(4,YPos);\n}\n</uscript>\n\
      \nYou can also use DisplayDebug to draw anything you normally could to the Canvas.\
      \ Here is an example of drawing the position of a vector onto the screen visually.\
      \ The example draws a cross at the on-screen location where the vector would\
      \ be percieved to be - note that this assumes that the vector is a \"location\"\
      \ vector, as it will be drawn relative to the world origin:\n\n<uscript>\nsimulated\
      \ function DisplayDebug(Canvas Canvas, out float YL, out float YPos)\n{\n  Super.DisplayDebug(Canvas,\
      \ YL, YPos);\n\n  Canvas.SetDrawColor(255,255,255);\n  Canvas.SetPos(Canvas.WorldToScreen(YOURVECTORHERE).X,Canvas.WorldToScreen(YOURVECTORHERE).Y);\n\
      \  DrawCross(Canvas);\n  Canvas.DrawText(\"A SHORT DESCRIPTION WHICH WILL GET\
      \ DRAWN NEXT TO THE CROSS GOES HERE\",false);\n  Canvas.SetPos(4,YPos);\n}\n\
      \nfunction DrawCross(canvas c)\n{\n  c.DrawLine(0, 18);\n  c.DrawLine(1, 18);\n\
      \  c.DrawLine(2, 18);\n  c.DrawLine(3, 18);\n}\n</uscript>\n\n===Using the Graph\
      \ (UT2003)===\n\nThe graph is a debugging method only availible from KVehicle\
      \ and its subclasses. It is defined in KVehicle. It can be displayed with the\
      \ <code>Graph Show</code> console command. To plot a value on the graph, call\
      \ the GraphData function, as follows:\n\n<uscript>\nGraphData(\"description\"\
      , var);\n</uscript>\n\nWhere ''var'' (float or int) is your variable and ''description''\
      \ is any string. The graph automatically adjusts the vertical scale to fit all\
      \ of the values that have been fed into it. The graph will update whenever a\
      \ new point is plotted, regardless of what actor plots it. The graph is color\
      \ coded, and points are joined together based on their ''descriptions''. There\
      \ is a legend with the graph that will indicate which color is associated with\
      \ which ''description'' and the maximum value that has been plotted for that\
      \ ''description.''\n\n===The Debug Line (UT2003)===\n\n<uscript>\n  DrawDebugLine(\
      \ Location1, Location2, R, G, B);\n</uscript>\n\nThis is a great way of showing\
      \ vectors. It draws a line between the two vectors specified in Location1 and\
      \ Location2. Technically one is the start and the other is the end, but it doesn't\
      \ make any visual difference. R, G, and B, are the elements of the color of\
      \ the line, red, green and blue, respectively. They must each be between 0 and\
      \ 255. This is superior to just drawing something on the canvas, as it will\
      \ go \"through\" objects instead of being drawn on top of them. This makes it\
      \ much easier to see the actual vector that is being expressed. It is, however,\
      \ relatively slow. It is not slow in the sense that it will drag down your framerate\
      \ while you debug, but it is too slow to be reasonably used for in-game effects\
      \ like a laser. This function can be called at any time and will be \"stored\
      \ up\" by the engine until the next frame is drawn. You can draw as many debug\
      \ lines as you like and they will all be \"saved up\" in this manner. This can\
      \ be very useful for, for instance, making a line drawing of the path a bot\
      \ intends to follow, etcetera.\n\n====Staying Debug Line====\n\nAnother debug\
      \ line command similar to the one above creates a permanent line, which can\
      \ be used for easily creating non-dynamic lines in 3D space. This can be handy\
      \ for displaying the path that a wandering or searching character has taken\
      \ over time. -ymalaika\n\n<uscript>\n  DrawStayingDebugLine( Location1, Location2,\
      \ R, G, B);\n  ClearStayingDebugLines()\n</uscript>\n\n===Using TextToSpeech\
      \ (UT2004/UT2003?)===\n\n<uscript>\nnative function TextToSpeech( string Text,\
      \ float Volume );\n//Text: Text you want to be turned into speech\n</uscript>\n\
      \nThis function is declared in Actor so any actor can use it.  An example of\
      \ how to use it would be to find out if a function was fired or not.  It's very\
      \ useful for those who don't want to go into the log all the time and would\
      \ like voice confirmation.\n\n'''Seabreeze:''' what does the 'Volume' variable\
      \ represent?\n\n'''Wormbo:''' The same thing it represents in any audio function\
      \ &ndash; how loud you want the output to be.\n\n'''Seabreeze:''' ahhh.. newbie\
      \ here! for some reason I was only thinking of volume of objects and not volume\
      \ of sound, thanks!\n\n===Slowing things down===\n\nIf you need time to set\
      \ a particular situation up, use one of these [[Legacy:Console Command|console\
      \ command]]s:\n\n* playersonly : freezes all movement except you\n* slomo #,\
      \ or set engine.gameinfo gamespeed <value here>\n\n==Network Debugging==\n\n\
      ===Testing in a Client/Server Environment===\n\nIt is crucial that you test\
      \ your code under client/server conditions. Just running a \"listen server\"\
      \ (a network server started from within the game) won't help there; for concerns\
      \ like [[Legacy:Replication|replication]] the listen server behaves just like\
      \ a standalone game as far as the local player is concerned. \n\nYou don't need\
      \ a LAN or an Internet connection to test your code under networking conditions\
      \ though: you can [[Legacy:Launch A Local Netgame|Launch A Local Netgame]].\n\
      \n===ServerPackages===\n\nNone of your client-side actors will show up or execute\
      \ client-side code '''unless your package is loaded client-side'''; unless that\
      \ happens to happen anyway (because you're coding a game type, for example),\
      \ you'll have to add your code package to the server .ini file's <code>ServerPackages</code>\
      \ list.\n\nOpen the server's .ini file (usually server.ini or, on a local dedicated\
      \ server, frequently just the [[Legacy:Game Ini File|game ini file]]), look\
      \ for the <code>[Engine.GameEngine]</code> section and add a line for your package:\n\
      \n  ServerPackages=MyPackage\n\n===Simulating Lag and Packet Loss===\n\nYou\
      \ can tell the engine to simulate network lag, packet loss, packets out of order\
      \ and packet duplicating when testing on a local server as described above.\n\
      \nAdd one or several of the following parameters to the server's command line:\n\
      \n; pktlag=<i><milliseconds></i> : Simulates lag.\n\n; pktloss=<i><percentage></i>\
      \ : Simulates packet loss.  The given percentage specifies how many packets\
      \ are lost; it can be between 0 (no packet loss) and 100 (all packets will be\
      \ lost).\n\n; pktdup=<i><percentage></i> : Simulates packet duplication.  The\
      \ given percentage specifies how many packets are duplicated; it can be between\
      \ 0 (no packet duplication) and 100 (all packets duplicated).\n\n; pktorder=<i><0\
      \ or 1></i> : Simulates packets that are received out of order.\n\nA server\
      \ for a test game with 150 milliseconds lag, 10 percent packet loss and packets\
      \ out of order would look like this:\n\n  ucc server DM-Gael pktlag=150 pktloss=10\
      \ pktorder=1\n\n==Console Commands==\n\nSee [[Legacy:Console Commands/Debugging\
      \ Console Commands|Console Commands/Debugging Console Commands]]\n\n==A Note\
      \ about Debugging==\n\nIt's important to remember that not only can software\
      \ develop bugs, but your debugging tools themselves can have bugs too. Log and\
      \ other native debugging commands seem quite stable, but things in DisplayDebug\
      \ and similar functions are prone to error like any other program.  If your\
      \ debugging tools show that your code is acting in an absolutely bizarre fashion,\
      \ check your debugging code to see if it is in fact the debugger that is faulty.\n\
      \n==Optimizing==\n\nIf your mod runs slowly or causes hitches on some computers,\
      \ see [[Legacy:Code Optimization|Code Optimization]].\n\n==Related Topics==\n\
      * [[Legacy:Log Warnings|Log Warnings]]\n* [[Legacy:A Bug'S Life|A Bug's Life]]\n\
      * [[Legacy:Spectate Bots|Spectate Bots]]\n* [[Legacy:Testing Botplay|Testing\
      \ Botplay]]\n* [[Legacy:UDebugger|UDebugger]]\n* [[Legacy:Running A Dedicated\
      \ Server With UCC|Running A Dedicated Server With UCC]]\n* [[Legacy:Testing\
      \ Lab|Testing Lab]]\n\n==Discussion==\n\n'''Ch3z''' I actually run a copy of\
      \ the 436 server only disto from a seperate folder and connect to it with my\
      \ reg UT installation. That way I know I'm actually connecting via the internet,\
      \ and with all the hops to get back to my own machine I get plenty of non-simulated\
      \ lag. I just feel like its a better test. I also make sure none of the files\
      \ i need to join the server are in my UT dir and it makes me download them all\
      \ from the server before connecting. Seems more like a valid test to me. I'm\
      \ wondering if this would be a good idea or not. Not sure if this is where the\
      \ page should be created from or not but... check out the [[Legacy:Testing Lab|Testing\
      \ Lab]].\n\nShouldn't this page, Debugging Techniques be Category Tutorial?\n\
      \n'''Tarquin:''' Not really.\n\n'''Vitaloverdose''' is none of this relevant\
      \ to 2004? \n\n'''Wormbo:''' There's a section about ''additional'' techniques\
      \ in UT2004, and of course they apply to UT2004 as well.\n\n'''OlympusMons:'''\
      \ Found the clear debug staying lines thing on the udn just thought I would\
      \ add it here, not sure if its in the right spot.\n\n'''Shambler:''' A class\
      \ I made to spew debug logs onto the HUD instead of into the log file: [[Legacy:Log\
      \ Interaction|Log Interaction]]"
  properties: []
  revId: 2682
name: "Legacy:Debugging Techniques"
revision:
  revid: 2682
  parentid: 2684
  user: "Wormbo"
  timestamp: 1162827571.000000000
  comment: "[[wiki link]]"
timestamp: 1668763477.008125000
