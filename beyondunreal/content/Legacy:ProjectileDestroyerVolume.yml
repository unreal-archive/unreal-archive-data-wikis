---
parse:
  title: "Legacy:ProjectileDestroyerVolume"
  text:
    text: "<p>This tutorial covers the creation of a custom class that involves some\
      \ simple <a href=\"/Legacy:Replication\" title=\"Legacy:Replication\">Replication</a>.\
      \ It forms part of a series of <a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a>, and follows on from\
      \ the <a href=\"/Legacy:Introduction_To_Replication\" title=\"Legacy:Introduction\
      \ To Replication\">Introduction To Replication</a>.</p>\n<p><b>Tarquin:</b>\
      \ Note – this tutorial is being written by a complete n00b when it comes to\
      \ netcode – me. I would be very grateful if some experts could check this for\
      \ acccuracy.</p>\n<p>Before we begin, let's run down the behaviour we want from\
      \ this class:</p>\n<ul>\n<li>it's going to be a subclass of <a href=\"/Legacy:Volume\"\
      \ title=\"Legacy:Volume\">Volume</a> (hence the name)</li>\n<li>any projectile\
      \ that enters the volume is destroyed</li>\n<li>some sort of visual effect is\
      \ created, such as a small explosion in the projectile's last spot</li>\n</ul>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#The_obvious_approach\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">The obvious approach</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Simulation\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Simulation</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Function_Split\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Function Split</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Further_development\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Further development</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"The_obvious_approach\"\
      >The obvious approach</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:ProjectileDestroyerVolume?section=1\" title=\"\
      Edit section: The obvious approach\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A vital maxim when dealing with replication is:</p>\n\
      <blockquote class=\"legacyquote\">\n<p>Network-compatible code isn't \"code\
      \ plus netcode\"</p>\n</blockquote>\n<p>However, we're newbies, we don't know\
      \ a thing, so let's begin with something basic that will work in a standalone\
      \ game:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> ProjectileDestroyerVolume <span class=\"kw1\">extends</span> <span\
      \ class=\"kw9\">Volume</span>;\n \n<span class=\"kw1\">event</span> <span class=\"\
      kw4\">Touch</span><span class=\"br0\">(</span> <span class=\"kw9\">Actor</span>\
      \ Other <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw9\">xEmitter</span> MyDestroyEffect;\n\
      \ \n  <span class=\"kw2\">if</span><span class=\"br0\">(</span> <span class=\"\
      kw9\">Projectile</span><span class=\"br0\">(</span>Other<span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    MyDestroyEffect <span\
      \ class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'XEffects.SmallExplosion'</span>,<span\
      \ class=\"kw6\">self</span>,,Other.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span>;\n    Other.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>To use this\
      \ script,</p>\n<ol>\n<li><a href=\"/Legacy:Create_A_Subclass\" title=\"Legacy:Create\
      \ A Subclass\">Create A Subclass</a> (you'll need to uncheck \"show visible\
      \ classes only\" to expose the Brush &gt;&gt; Volume part of the hierarchy)</li>\n\
      <li>Paste in the code</li>\n<li>Compile</li>\n<li><a href=\"/Legacy:Create_A_Room\"\
      \ title=\"Legacy:Create A Room\">Create a room</a></li>\n<li><a href=\"/Legacy:Add_A_Volume\"\
      \ title=\"Legacy:Add A Volume\">Add a volume</a> of the new class – it should\
      \ display in the right-click menu of the Add Volume in the <a href=\"/Legacy:Toolbox\"\
      \ title=\"Legacy:Toolbox\">toolbox</a></li>\n<li><a href=\"/Legacy:Playtest\"\
      \ title=\"Legacy:Playtest\">Playtest</a>!</li>\n</ol>\n<p>What's this script\
      \ doing? Well, we're using the Touch event, that is called whenever something\
      \ touches the actor, in this case the brush shape of the volume. This event\
      \ does the following:</p>\n<ol>\n<li>tries <a href=\"/Legacy:Typecasting\" title=\"\
      Legacy:Typecasting\">typecasting</a> the touching actor to the class <a href=\"\
      /Legacy:Projectile\" title=\"Legacy:Projectile\">Projectile</a>. If we don't\
      \ get a 'None', then the cast has succeeded, and the actor is a Projectile or\
      \ a child class</li>\n<li>In this case, we spawn a visual effect at the location\
      \ of that actor. We're using a standard subclass of <a href=\"/Legacy:XEmitter\"\
      \ title=\"Legacy:XEmitter\">xEmitter</a>. See <a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">creating actors and objects</a></li>\n\
      <li>The incoming actor is destroyed.</li>\n</ol>\n<p>Now you can try this script\
      \ if you like. In a standalone botmatch game, it will work fine. But if you\
      \ <a href=\"/Legacy:Launch_A_Local_Netgame\" title=\"Legacy:Launch A Local Netgame\"\
      >launch a local netgame</a>, it won't – the puck disappears alright, but the\
      \ puff of smoke simply won't show up.</p>\n<p>Why? Well, it's the First Myth\
      \ of Replication. The fact is that clients do mostly nothing. On the client\
      \ side, the puck reaches the volume, but the volume's Touch() event isn't called.\
      \ The volume actor just sits there, which is not very good. You see the puck\
      \ being destroyed because it's destroyed on the server, and the server informs\
      \ the clients of the destruction of actor and objects. You don't see the smoke\
      \ because the server is not sending information about its creation – its <code>RemoteRole</code>\
      \ is set to <code>ROLE_None</code>, which for the server means \"don't replicate.\"\
      </p>\n<h2><span class=\"mw-headline\" id=\"Simulation\">Simulation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:ProjectileDestroyerVolume?section=2\" title=\"Edit section:\
      \ Simulation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>We're now going to make a small change:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">simulated</span> <span class=\"kw1\">event</span>\
      \ <span class=\"kw4\">Touch</span><span class=\"br0\">(</span> <span class=\"\
      kw9\">Actor</span> Other <span class=\"br0\">)</span></pre></div>\n</div>\n\
      <p>It's important to be careful of Replication Myth Number 3: it doesn't mean\
      \ that a function that runs on the server will be made to run on the client.\
      \ In other words, this is <b>NOT</b> what happens: <i>the server gets the Touch()\
      \ event, and thinks \"hey, I'd better tell the client to run this too!\"</i></p>\n\
      <p>What the 'simulated' <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">function syntax</a> does is <i>allow</i> the event to run on a client,\
      \ if the client finds the right conditions. <a href=\"/Legacy:Simulated_Function\"\
      \ title=\"Legacy:Simulated Function\">Simulated functions</a> can run in several\
      \ places, but they might <i>not be running at exactly the same time</i>. Here's\
      \ why:</p>\n<ol>\n<li>The player presses the fire button.</li>\n<li>Thanks to\
      \ some other replication mojo, the client sends that information to the server.</li>\n\
      <li><i>On the server</i>, the translocator is fired.</li>\n<li>Still on the\
      \ server, the translocator puck is spawned. That information is replicated to\
      \ all clients which create a local \"copy\" of the puck for the players to see.</li>\n\
      <li>There is now a translocator puck actor on the server <i>and</i> on the client.\
      \ They are being moved independently, with the server keeping the client updated\
      \ with location information from time to time (depending on bandwidth)</li>\n\
      <li>Because of this, these two actors might not hit the volume at the same time!</li>\n\
      </ol>\n<p>This will work. However, there are two potential problems with is:</p>\n\
      <ul>\n<li>The explosion is being spawned in all cases. That includes a dedicated\
      \ server – which is pointless.</li>\n<li>The puck is destroyed in all cases.\
      \ Destroying it on clients is redundant and possibly harmful. Redundant because\
      \ when an actor is destroyed on a server, existing replication code ensures\
      \ the clients destroy it too.</li>\n</ul>\n<p><b>Wormbo:</b> It's not really\
      \ harmful. Only the authorative version of an actor can be destroyed. An exception\
      \ are bNetTemporary actors, which actually <i>have to</i> be destroyed clientsidely\
      \ as well.</p>\n<h2><span class=\"mw-headline\" id=\"Function_Split\">Function\
      \ Split</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:ProjectileDestroyerVolume?section=3\" title=\"\
      Edit section: Function Split\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The answer to this problem is to test certain conditions\
      \ about the machine we're running on in the Touch() event. The <a href=\"/Legacy:Netcode_Idioms\"\
      \ title=\"Legacy:Netcode Idioms\">Netcode idioms</a> page contains some hints\
      \ of how to proceed.</p>\n<p>This is what we want to happen:</p>\n<table>\n\
      <tr>\n<td>Server</td>\n<td>Client</td>\n</tr>\n<tr>\n<td>Destroy the puck</td>\n\
      <td>Spawn a visual effect</td>\n</tr>\n<tr>\n<td>The destruction of the actor\
      \ is replicated to the client</td>\n</tr>\n</table>\n<h2><span class=\"mw-headline\"\
      \ id=\"Further_development\">Further development</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:ProjectileDestroyerVolume?section=4\"\
      \ title=\"Edit section: Further development\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are more things you can do with this script.\
      \ For example, you might want to try</p>\n<ul>\n<li>adding sound</li>\n<li>having\
      \ it use the right kind of explosion for the projectile.</li>\n</ul>\n<p><b>Recondite:</b>\
      \ maybe i'm missing something, but i would think that you would want the client\
      \ to always destroy the puck locally at the same time that you spawn the explosion\
      \ effect. otherwise, there could be lag issues with the puck destruction vs\
      \ explosion. You _could_ put an if (Netmode&#160;!= NM_DEDICATEDSERVER) then\
      \ do the explosion. However, the projectile itself should be handling the destruction/effect–\
      i.e. when u destroy an avril warhead, it spawns an explosion in the simulated\
      \ destroy function. Otherwise, if u have some sort of fly-zapper volume with\
      \ a custom effect, i would think u would want to force the destruction on the\
      \ client at the same time as the explosion.</p>\n<p><b>dataangel:</b> The tutorial\
      \ should probably start from getting it working and move up to working well,\
      \ i.e. efficiently with no lag trouble&#160;;) Although right now it has niether&#160;:P</p>\n\
      <p><b>Foxpaw:</b> Recondite is right: the projectile should be destroyed locally\
      \ and the explosion should be drawn normally as well. That is normal behaviour\
      \ for projectiles (clients decide when it's destroyed and where to draw the\
      \ effects, (otherwise it would look wierd if the explosion was somewhere other\
      \ than where the projectile appeared to hit) and the server dishes out damage.</p>\n\
      <p>Most projectiles are bTearOff=true so the issue of the client destroying\
      \ a projectile while it's still there on the server is somewhat moot. Only in\
      \ cases of projectiles that are not predictable could this be a problem. Even\
      \ then it likely wouldn't be a problem because the clients are BEHIND the server\
      \ somewhat, so the projectile would be destroyed client side AFTER it had already\
      \ been destroyed server-side. In fact, the server may have already destroyed\
      \ the projectile by that point: put probrably not.</p>\n<p>Also it might be\
      \ better to call a \"hitwall\" event on the projectile instead of destroy, as\
      \ that should cause the normal behaviour of the projectile when it hit a wall.\
      \ (usually destruction and spawning of an explosion) You could check after the\
      \ function returned to see if the projectile was not destroyed by the impact\
      \ (ripper razors for instance) and then destroy it manually like the volume\
      \ already does.</p>\n<p><b>SuperApe</b>: See also <a href=\"/Legacy:LimitationVolume\"\
      \ title=\"Legacy:LimitationVolume\">LimitationVolume</a>.</p>\n<p><b>Foxpaw:</b>\
      \ LimitationVolume would do the same thing, but this is a tutorial to show people\
      \ how to create this for themself. I would think to code this like so, but it\
      \ should be tested to see if I've slipped up:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> ProjectileDestroyerVolume\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Volume</span>;\n \n\
      <span class=\"kw1\">simulated</span> <span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">Touch</span><span class=\"br0\">(</span><span class=\"kw9\"\
      >Actor</span> Other<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw9\">xEmitter</span> MyDestroyEffect;\n\
      \ \n  <span class=\"kw2\">if</span><span class=\"br0\">(</span><span class=\"\
      kw9\">Projectile</span><span class=\"br0\">(</span>Other<span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>Other.<span class=\"\
      me0\">bDeleteMe</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      kw7\">Level</span>.<span class=\"me0\">Netmode</span> <span class=\"sy0\">!=</span>\
      \ NM_DEDICATEDSERVER<span class=\"br0\">)</span>\n      MyDestroyEffect <span\
      \ class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'XEffects.SmallExplosion'</span>,<span\
      \ class=\"kw6\">self</span>,,Other.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span>;\n \n    Other.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>I added the\
      \ bDeleteMe part because Touch will get called both on the volume and on the\
      \ projectile, and it's possible (unlikely in this case) that the projectile\
      \ destroyed itself in IT's touch event and hence might already be destroyed\
      \ when we get here.</p>\n<p><b>SuperApe:</b> If this page is done, the Help\
      \ Needed link to it should be removed from the Recent Changes page and any others\
      \ out there.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.097 seconds\n\
      Real time usage: 0.196 seconds\nPreprocessor visited node count: 47/1000000\n\
      Preprocessor generated node count: 133/1000000\nPost‐expand include size: 200/2097152\
      \ bytes\nTemplate argument size: 52/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    9.007      1 - -total\n100.00%\
      \    9.007      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:2508-0!*!0!!en!*!* and timestamp 20221118014923 and\
      \ revision id 6013\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:LimitationVolume"
  - ns: 100
    exists: true
    name: "Legacy:Toolbox"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:XEmitter"
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: true
    name: "Legacy:Create A Room"
  - ns: 100
    exists: true
    name: "Legacy:Volume"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:Playtest"
  - ns: 100
    exists: true
    name: "Legacy:Launch A Local Netgame"
  - ns: 100
    exists: true
    name: "Legacy:Create A Subclass"
  - ns: 100
    exists: true
    name: "Legacy:Projectile"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Replication"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:Add A Volume"
  - ns: 100
    exists: true
    name: "Legacy:Netcode Idioms"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "The obvious approach"
    number: "1"
    index: "1"
    fromtitle: "Legacy:ProjectileDestroyerVolume"
    byteoffset: 776
    anchor: "The_obvious_approach"
  - toclevel: 1
    level: "2"
    line: "Simulation"
    number: "2"
    index: "2"
    fromtitle: "Legacy:ProjectileDestroyerVolume"
    byteoffset: 3249
    anchor: "Simulation"
  - toclevel: 1
    level: "2"
    line: "Function Split"
    number: "3"
    index: "3"
    fromtitle: "Legacy:ProjectileDestroyerVolume"
    byteoffset: 5214
    anchor: "Function_Split"
  - toclevel: 1
    level: "2"
    line: "Further development"
    number: "4"
    index: "4"
    fromtitle: "Legacy:ProjectileDestroyerVolume"
    byteoffset: 5606
    anchor: "Further_development"
  displaytitle: "Legacy:ProjectileDestroyerVolume"
  iwlinks: []
  wikitext:
    text: "This tutorial covers the creation of a custom class that involves some\
      \ simple [[Legacy:Replication|Replication]]. It forms part of a series of [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]], and follows on from the [[Legacy:Introduction\
      \ To Replication|Introduction To Replication]].\n\n'''Tarquin:''' Note &ndash;\
      \ this tutorial is being written by a complete n00b when it comes to netcode\
      \ &ndash; me. I would be very grateful if some experts could check this for\
      \ acccuracy.\n\nBefore we begin, let's run down the behaviour we want from this\
      \ class:\n* it's going to be a subclass of [[Legacy:Volume|Volume]] (hence the\
      \ name)\n* any projectile that enters the volume is destroyed\n* some sort of\
      \ visual effect is created, such as a small explosion in the projectile's last\
      \ spot\n\n==The obvious approach==\n\nA vital maxim when dealing with replication\
      \ is:\n\n{{innerbox| Network-compatible code isn't \"code plus netcode\"\n\n\
      }}\n\nHowever, we're newbies, we don't know a thing, so let's begin with something\
      \ basic that will work in a standalone game:\n\n<uscript>\nclass ProjectileDestroyerVolume\
      \ extends Volume;\n\nevent Touch( Actor Other )\n{\n  local xEmitter MyDestroyEffect;\n\
      \  \n  if( Projectile(Other) != None ) {\n    MyDestroyEffect = Spawn(class'XEffects.SmallExplosion',self,,Other.Location);\n\
      \    Other.Destroy();\n  }\n}\n</uscript>\n\nTo use this script,\n# [[Legacy:Create\
      \ A Subclass|Create A Subclass]] (you'll need to uncheck \"show visible classes\
      \ only\" to expose the Brush >> Volume part of the hierarchy)\n# Paste in the\
      \ code\n# Compile\n# [[Legacy:Create A Room|Create a room]]\n# [[Legacy:Add\
      \ A Volume|Add a volume]] of the new class &ndash; it should display in the\
      \ right-click menu of the Add Volume in the [[Legacy:Toolbox|toolbox]]\n# [[Legacy:Playtest|Playtest]]!\n\
      \nWhat's this script doing? Well, we're using the Touch event, that is called\
      \ whenever something touches the actor, in this case the brush shape of the\
      \ volume. This event does the following:\n# tries [[Legacy:Typecasting|typecasting]]\
      \ the touching actor to the class [[Legacy:Projectile|Projectile]]. If we don't\
      \ get a 'None', then the cast has succeeded, and the actor is a Projectile or\
      \ a child class\n# In this case, we spawn a visual effect at the location of\
      \ that actor. We're using a standard subclass of [[Legacy:XEmitter|xEmitter]].\
      \ See [[Legacy:Creating Actors And Objects|creating actors and objects]]\n#\
      \  The incoming actor is destroyed.\n\nNow you can try this script if you like.\
      \ In a standalone botmatch game, it will work fine. But if you [[Legacy:Launch\
      \ A Local Netgame|launch a local netgame]], it won't &ndash; the puck disappears\
      \ alright, but the puff of smoke simply won't show up.\n\nWhy? Well, it's the\
      \ First Myth of Replication. The fact is that clients do mostly nothing. On\
      \ the client side, the puck reaches the volume, but the volume's Touch() event\
      \ isn't called. The volume actor just sits there, which is not very good. You\
      \ see the puck being destroyed because it's destroyed on the server, and the\
      \ server informs the clients of the destruction of actor and objects. You don't\
      \ see the smoke because the server is not sending information about its creation\
      \ &ndash; its <code>RemoteRole</code> is set to <code>ROLE_None</code>, which\
      \ for the server means \"don't replicate.\"\n\n==Simulation==\n\nWe're now going\
      \ to make a small change:\n\n<uscript>\nsimulated event Touch( Actor Other )\n\
      </uscript>\n\nIt's important to be careful of Replication Myth Number 3: it\
      \ doesn't mean that a function that runs on the server will be made to run on\
      \ the client. In other words, this is '''NOT''' what happens: ''the server gets\
      \ the Touch() event, and thinks \"hey, I'd better tell the client to run this\
      \ too!\"''\n\nWhat the 'simulated' [[Legacy:Function Syntax|function syntax]]\
      \ does is ''allow'' the event to run on a client, if the client finds the right\
      \ conditions. [[Legacy:Simulated Function|Simulated function]]s can run in several\
      \ places, but they might ''not be running at exactly the same time''. Here's\
      \ why:\n\n# The player presses the fire button.\n# Thanks to some other replication\
      \ mojo, the client sends that information to the server.\n# ''On the server'',\
      \ the translocator is fired.\n# Still on the server, the translocator puck is\
      \ spawned.  That information is replicated to all clients which create a local\
      \ \"copy\" of the puck for the players to see.\n# There is now a translocator\
      \ puck actor on the server ''and'' on the client. They are being moved independently,\
      \ with the server keeping the client updated with location information from\
      \ time to time (depending on bandwidth)\n# Because of this, these two actors\
      \ might not hit the volume at the same time!\n\nThis will work. However, there\
      \ are two potential problems with is:\n\n* The explosion is being spawned in\
      \ all cases. That includes a dedicated server &ndash; which is pointless.\n\
      * The puck is destroyed in all cases. Destroying it on clients is redundant\
      \ and possibly harmful. Redundant because when an actor is destroyed on a server,\
      \ existing replication code ensures the clients destroy it too.\n\n'''Wormbo:'''\
      \ It's not really harmful. Only the authorative version of an actor can be destroyed.\
      \ An exception are bNetTemporary actors, which actually ''have to'' be destroyed\
      \ clientsidely as well.\n\n==Function Split==\n\nThe answer to this problem\
      \ is to test certain conditions about the machine we're running on in the Touch()\
      \ event. The [[Legacy:Netcode Idioms|Netcode idioms]] page contains some hints\
      \ of how to proceed.\n\nThis is what we want to happen:\n\n{|\n\n|-\n|Server\n\
      |Client \n|-\n|Destroy the puck\n|Spawn a visual effect \n|-\n|The destruction\
      \ of the actor is replicated to the client \n|}\n\n==Further development==\n\
      \nThere are more things you can do with this script. For example, you might\
      \ want to try\n* adding sound\n* having it use the right kind of explosion for\
      \ the projectile.\n\n'''Recondite:''' maybe i'm missing something, but i would\
      \ think that you would want the client to always destroy the puck locally at\
      \ the same time that you spawn the explosion effect. otherwise, there could\
      \ be lag issues with the puck destruction vs explosion.  You _could_ put an\
      \ if (Netmode != NM_DEDICATEDSERVER) then do the explosion. However, the projectile\
      \ itself should be handling the destruction/effect&ndash;i.e. when u destroy\
      \ an avril warhead, it spawns an explosion in the simulated destroy function.\
      \ Otherwise, if u have some sort of fly-zapper volume with a custom effect,\
      \ i would think u would want to force the destruction on the client at the same\
      \ time as the explosion.\n\n'''dataangel:''' The tutorial should probably start\
      \ from getting it working and move up to working well, i.e. efficiently with\
      \ no lag trouble ;) Although right now it has niether :P\n\n'''Foxpaw:''' Recondite\
      \ is right: the projectile should be destroyed locally and the explosion should\
      \ be drawn normally as well. That is normal behaviour for projectiles (clients\
      \ decide when it's destroyed and where to draw the effects, (otherwise it would\
      \ look wierd if the explosion was somewhere other than where the projectile\
      \ appeared to hit) and the server dishes out damage.\n\nMost projectiles are\
      \ bTearOff=true so the issue of the client destroying a projectile while it's\
      \ still there on the server is somewhat moot. Only in cases of projectiles that\
      \ are not predictable could this be a problem. Even then it likely wouldn't\
      \ be a problem because the clients are BEHIND the server somewhat, so the projectile\
      \ would be destroyed client side AFTER it had already been destroyed server-side.\
      \ In fact, the server may have already destroyed the projectile by that point:\
      \ put probrably not.\n\nAlso it might be better to call a \"hitwall\" event\
      \ on the projectile instead of destroy, as that should cause the normal behaviour\
      \ of the projectile when it hit a wall. (usually destruction and spawning of\
      \ an explosion) You could check after the function returned to see if the projectile\
      \ was not destroyed by the impact (ripper razors for instance) and then destroy\
      \ it manually like the volume already does.\n\n'''SuperApe''': See also [[Legacy:LimitationVolume|LimitationVolume]].\n\
      \n'''Foxpaw:''' LimitationVolume would do the same thing, but this is a tutorial\
      \ to show people how to create this for themself. I would think to code this\
      \ like so, but it should be tested to see if I've slipped up:\n\n<uscript>\n\
      class ProjectileDestroyerVolume extends Volume;\n\nsimulated event Touch(Actor\
      \ Other)\n{\n  local xEmitter MyDestroyEffect;\n  \n  if(Projectile(Other) !=\
      \ None && !Other.bDeleteMe)\n  {\n    if (Level.Netmode != NM_DEDICATEDSERVER)\n\
      \      MyDestroyEffect = Spawn(class'XEffects.SmallExplosion',self,,Other.Location);\n\
      \n    Other.Destroy();\n  }\n}\n</uscript>\n\nI added the bDeleteMe part because\
      \ Touch will get called both on the volume and on the projectile, and it's possible\
      \ (unlikely in this case) that the projectile destroyed itself in IT's touch\
      \ event and hence might already be destroyed when we get here.\n\n'''SuperApe:'''\
      \ If this page is done, the Help Needed link to it should be removed from the\
      \ Recent Changes page and any others out there."
  properties: []
  revId: 6013
name: "Legacy:ProjectileDestroyerVolume"
revision:
  revid: 6013
  parentid: 6014
  user: "SuperApe"
  timestamp: 1122423571.000000000
  comment: "Help no longer needed?"
timestamp: 1668764147.050001000
