---
parse:
  title: "Legacy:Karma Functions And Events"
  text:
    text: "<p>Below is a listing of the <a href=\"/Legacy:Karma\" title=\"Legacy:Karma\"\
      >Karma</a> related functions and events. There is a great number of them but\
      \ most are not particularly useful except in rare circumstances. It is worth\
      \ noting that these functions often distinguish between \"rigid body\" Karma\
      \ objects and Karma ragdolls. A \"rigid body\" Karma object is essentially and\
      \ Karma simulated actor that is set to PHYS_Karma, as opposed to PHYS_KarmaRagdoll.</p>\n\
      <dl>\n<dt>native final function quat KGetRBQuaternion();&#160;</dt>\n<dd>Returns\
      \ a <a href=\"/Legacy:Quaternion\" title=\"Legacy:Quaternion\">quaternion</a>\
      \ describing the rotation of a rigid body Karma simulated object.</dd>\n</dl>\n\
      <dl>\n<dt>native final function KGetRigidBodyState(out KRigidBodyState RBstate);&#160;</dt>\n\
      <dd>Gets the \"state\" of a Karma rigid body. This is used primarily for replication.\
      \ The state includes such things as rotation, velocity, etc. and is used primarily\
      \ for replication.</dd>\n</dl>\n<dl>\n<dt>native final function KDrawRigidBodyState(KRigidBodyState\
      \ RBState, bool AltColour);&#160;</dt>\n<dd>A slow function. Draws stuff on\
      \ the screen for debugging Karma rigid bodies. I would not recommend this even\
      \ for debugging.</dd>\n</dl>\n<dl>\n<dt>native final function vector KRBVecToVector(KRBVec\
      \ RBvec);&#160;</dt>\n<dd>Converts an RBVec to a regular vector. RBVects are\
      \ more precise than regular vectors and are used primarily for replication.</dd>\n\
      <dt>native final function KRBVec KRBVecFromVector(vector v);&#160;</dt>\n<dd>Converts\
      \ a vector to an RBVec. This is used primarily for replication.</dd>\n</dl>\n\
      <dl>\n<dt>native final function KSetMass( float mass );&#160;</dt>\n<dd>Sets\
      \ the mass of a Karma simulated object. This sets the \"KMass\" of that object.\
      \ The regular mass is unaffected.</dd>\n<dt>native final function float KGetMass();&#160;</dt>\n\
      <dd>Returns the KMass of a Karma simulated object, in Karma units.</dd>\n</dl>\n\
      <dl>\n<dt>native final function KSetInertiaTensor( vector it1, vector it2 );&#160;</dt>\n\
      <dd>Sets the inertia tensor. Unfortunately I don't know what that is.&#160;:P</dd>\n\
      <dt>native final function KGetInertiaTensor( out vector it1, out vector it2\
      \ );&#160;</dt>\n<dd>Reads the inertia tensor and returns it in the two \"out\"\
      \ arguments.</dd>\n</dl>\n<dl>\n<dt>native final function KSetDampingProps(\
      \ float lindamp, float angdamp );&#160;</dt>\n<dd>Sets the linear and angular\
      \ damping properties of a Karma simulated actor.</dd>\n<dt>native final function\
      \ KGetDampingProps( out float lindamp, out float angdamp );&#160;</dt>\n<dd>Puts\
      \ the current Linear and Angular damping properties into the two out arguments\
      \ passed to this function.</dd>\n</dl>\n<dl>\n<dt>native final function KSetFriction(\
      \ float friction );&#160;</dt>\n<dd>Sets the friction of a Karma simulated object.\
      \ This applies only to surface to surface contact, and has no effect on the\
      \ air resistance.</dd>\n<dt>native final function float KGetFriction();&#160;</dt>\n\
      <dd>Returns the friction, in Karma units.</dd>\n</dl>\n<dl>\n<dt>native final\
      \ function KSetRestitution( float rest );&#160;</dt>\n<dd>Sets the elasticity\
      \ of this object for collisions. 1 is perfectly elastic, 0 is perfectly solid.</dd>\n\
      <dt>native final function float KGetRestitution();&#160;</dt>\n<dd>Returns the\
      \ elasticity of this object.</dd>\n</dl>\n<dl>\n<dt>native final function KSetCOMOffset(\
      \ vector offset );&#160;</dt>\n<dd>Sets the center of mass of this object, relative\
      \ to it's center.</dd>\n<dt>native final function KGetCOMOffset( out vector\
      \ offset );&#160;</dt>\n<dd>Puts the center of mass of this object, relative\
      \ to it's center, into the out argument supplied.</dd>\n<dt>native final function\
      \ KGetCOMPosition( out vector pos );&#160;</dt>\n<dd>Similar to KGetCOMPosition,\
      \ this sets the argument to the absolute location of the Center of mass, relative\
      \ to the center of the world.</dd>\n</dl>\n<dl>\n<dt>native final function KSetImpactThreshold(\
      \ float thresh );&#160;</dt>\n<dd>Sets the amount of momentum that must be imparted\
      \ to this object in a single collision in order to trigger it's KImpact event.</dd>\n\
      <dt>native final function float KGetImpactThreshold();&#160;</dt>\n<dd>Returns\
      \ the amount of momentum that must be imparted to this object in a single collision\
      \ in order to trigger it's KImpact event.</dd>\n</dl>\n<dl>\n<dt>native final\
      \ function KWake();&#160;</dt>\n<dd>\"Wakes up\" the actor. This causes the\
      \ Karma physics to begin simulating after the object has been deemed to be \"\
      at rest.\"</dd>\n<dt>native final function bool KIsAwake();&#160;</dt>\n<dd>Returns\
      \ a boolean value stating whether this Karma simulated actor is simulating or\
      \ not. It returns true if the object is currently simulating, and false if it\
      \ is \"at rest\" and has stopped simulating.</dd>\n<dt>native final function\
      \ KAddImpulse( vector Impulse, vector Position, optional name BoneName );&#160;</dt>\n\
      <dd>Imparts an impulse to the Karma actor. Impulse is the amount of force to\
      \ apply in Karma units. Position is the location that the impulse should be\
      \ applied, relative to the center of the world. This does not need to actually\
      \ be in contact with the Karma object. BoneName, if supplied, is the name of\
      \ the bone that the impulse should be applied to. This only applies to objects\
      \ with skeletal information.</dd>\n</dl>\n<dl>\n<dt>native final function KSetStayUpright(\
      \ bool stayUpright, bool allowRotate );&#160;</dt>\n<dd>Sets the \"stability\"\
      \ of the object. If StayUpright is set to true, the object will not roll or\
      \ pitch, it will only yaw. If the second argument, AllowRotate, is set to false,\
      \ the object will not be able to yaw. If it is set to true the object will yaw\
      \ as normal. If StayUpright is false, AllowRotate will have no effect.</dd>\n\
      </dl>\n<dl>\n<dt>native final function KSetBlockKarma( bool newBlock );&#160;</dt>\n\
      <dd>Sets the bBlockKarma value of an actor.</dd>\n</dl>\n<dl>\n<dt>native final\
      \ function KSetActorGravScale( float ActorGravScale );&#160;</dt>\n<dd>Sets\
      \ the amount that gravity will be scaled by for this actor.</dd>\n<dt>native\
      \ final function float KGetActorGravScale();&#160;</dt>\n<dd>Returns the amount\
      \ that gravity will be scaled by for this actors simulation.</dd>\n</dl>\n<dl>\n\
      <dt>native final function KDisableCollision( actor Other );&#160;</dt>\n<dd>This\
      \ will selectively disable collision between this Karma object and another given\
      \ Karma object. Regular collision is not negated, and collision with objects\
      \ other than those specified is not altered. This function can be called repeatedly\
      \ to disable collision with an arbitrary number of Karma objects. By default,\
      \ collision is enabled with all Karma objects.</dd>\n<dt>native final function\
      \ KEnableCollision( actor Other ); &#160;</dt>\n<dd>This will selectively enable\
      \ collision between this Karma object and another given Karma object. Regular\
      \ collision is not affected, and collision with objects other than those specified\
      \ is not altered. This function can be called repeatedly to enable collision\
      \ with an arbitrary number of Karma objects. By default, collision is enabled\
      \ with all Karma objects.</dd>\n</dl>\n<dl>\n<dt>native final function KSetSkelVel(\
      \ vector Velocity, optional vector AngVelocity, optional bool AddToCurrent );&#160;</dt>\n\
      <dd>Sets the linear, and optionally also an angular velocity for a Karma object\
      \ with skeletal information attached. If AddToCurrent is true the velocity is\
      \ added to the current velocity. If AddToCurrent is false, the current velocity\
      \ is replaced with the one specified to this function.</dd>\n<dt>native final\
      \ function float KGetSkelMass();&#160;</dt>\n<dd>Returns the mass, in Karma\
      \ units, of a Karma object with skeletal information.</dd>\n<dt>native final\
      \ function KFreezeRagdoll();&#160;</dt>\n<dd>Freezes a Karma ragdoll. This stops\
      \ it from simulating immediately when this function is called. Note, however,\
      \ that KIsAwake may not respond to this until the next tick.</dd>\n</dl>\n<dl>\n\
      <dt>native final function KAddBoneLifter( name BoneName, InterpCurve LiftVel,\
      \ float LateralFriction, InterpCurve Softness );&#160;</dt>\n<dd>Adds a \"bone\
      \ lifter.\" This is used on Karma ragdolls to make it look like a bone is being\
      \ lifted. This is used on the de-res effect. The bone lifter acts independant\
      \ of any other forces or velocities acting on the ragdoll. Note that if you\
      \ do not set bBlockKarma to false before adding bone lifters, you may have erratic\
      \ results.</dd>\n<dt>native final function KRemoveLifterFromBone( name BoneName\
      \ );&#160;</dt>\n<dd>Removes a bone lifter from whatever bone you specify.</dd>\n\
      <dt>native final function KRemoveAllBoneLifters();&#160;</dt>\n<dd>Removes all\
      \ bone lifters on the actor which calls this function.</dd>\n</dl>\n<dl>\n<dt>native\
      \ final function KMakeRagdollAvailable();&#160;</dt>\n<dd>Allocates a ragdoll.\
      \ This is used just before creating a ragdoll and will purge the oldest ragdoll\
      \ if there is not enough room in the ragdoll queue to create another one.</dd>\n\
      <dt>native final function bool KIsRagdollAvailable();&#160;</dt>\n<dd>This function\
      \ checks to see if the ragdoll queue is full. If it is not full, true is returned.\
      \ If it is full, false is returned. Attempting to create a ragdoll when one\
      \ is not availible can have unpredictable results. (SimError or simply failure\
      \ to simulate.)</dd>\n</dl>\n<dl>\n<dt>event KImpact(actor other, vector pos,\
      \ vector impactVel, vector impactNorm);&#160;</dt>\n<dd>This event is called\
      \ when the momentum imparted to this object from a single collision exceeds\
      \ the preset impact threshold, KImpactThreshold. This value is in the KarmaParams\
      \ of the actor. Note that if you destroy an actor within KImpact, it will crash\
      \ the engine. This appears to be due to the situation where KImpact is called\
      \ after the list of potentially colliding actors is generated, and destroying\
      \ something in that list leaves null pointers in said list.</dd>\n</dl>\n<p><b>Haral:</b>\
      \ I've found that if you destroy an actor within KImpact, it will cause the\
      \ game to crash. I hear this is a known bug (usually referred to as KPerContactCB)\
      \ but I figured I'd post the obvious hack: Copy the relevant info of what you're\
      \ going to do into class variables and then just check for the change in Tick()\
      \ and destroy it there. I think that Epic knows about this and it will probably\
      \ be fixed when 2k4 comes out.</p>\n<p><b>Foxpaw:</b> Indeed it does. I had\
      \ the same problem a while ago, but apparently I only squirrelled it away on\
      \ my developer journal and didn't post it here.</p>\n<dl>\n<dt>event KVelDropBelow();&#160;</dt>\n\
      <dd>This event is called whenever the velocity of the ragdoll drops below a\
      \ certain threshold which you can set, KVelDropBelowThreshold. This value is\
      \ in the KarmaParams of the actor.</dd>\n<dt>event KSkelConvulse();&#160;</dt>\n\
      <dd>This event is called whenever a KarmaRagdoll Convulses. It is used to draw\
      \ the lightning effect on the ragdoll but can be used for anything a regular\
      \ event can be used for.</dd>\n<dt>event KApplyForce(out vector Force, out vector\
      \ Torque);&#160;</dt>\n<dd>This is not an \"event\" so much, it is called every\
      \ tick, right before the Karma physics are simulated on this object. It has\
      \ two \"out\" variables which allow you to directly apply force and torque to\
      \ the actor. These values are absolute and will set the value of the force and\
      \ torque on that actor. Despite the name, the amounts specified are not applied\
      \ in addition to the existing force and torque, they will overwrite those numbers.</dd>\n\
      <dt>event bool KUpdateState(out KRigidBodyState newState);&#160;</dt>\n<dd>This\
      \ event allows you to manually update the Rigid Body State for a Rigid Body\
      \ Karma object. I wouldn't particularly recommend using this to set things on\
      \ a Karma object - KApplyForce, KAddImpulse, etc. are capable of doing the same\
      \ job with less complication. Regardless of what you set in the newState variable,\
      \ no changes will take effect if you return false from this function. If you\
      \ return true, the Karma objects \"state\" will be replaced with whatever you\
      \ supplied for the newState argument.</dd>\n</dl>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.031 seconds\nReal time usage: 0.032 seconds\nPreprocessor\
      \ visited node count: 1/1000000\nPreprocessor generated node count: 4/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 1/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1601-0!*!0!*!*!*!*\
      \ and timestamp 20221118024606 and revision id 3978\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Quaternion"
  - ns: 100
    exists: true
    name: "Legacy:Karma"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Karma Functions And Events"
  iwlinks: []
  wikitext:
    text: "Below is a listing of the [[Legacy:Karma|Karma]] related functions and\
      \ events. There is a great number of them but most are not particularly useful\
      \ except in rare circumstances. It is worth noting that these functions often\
      \ distinguish between \"rigid body\" Karma objects and Karma ragdolls. A \"\
      rigid body\" Karma object is essentially and Karma simulated actor that is set\
      \ to PHYS_Karma, as opposed to PHYS_KarmaRagdoll.\n\n; native final function\
      \ quat KGetRBQuaternion(); : Returns a [[Legacy:Quaternion|quaternion]] describing\
      \ the rotation of a rigid body Karma simulated object.\n\n; native final function\
      \ KGetRigidBodyState(out KRigidBodyState RBstate); : Gets the \"state\" of a\
      \ Karma rigid body. This is used primarily for replication. The state includes\
      \ such things as rotation, velocity, etc. and is used primarily for replication.\n\
      \n; native final function KDrawRigidBodyState(KRigidBodyState RBState, bool\
      \ AltColour); : A slow function. Draws stuff on the screen for debugging Karma\
      \ rigid bodies. I would not recommend this even for debugging.\n\n; native final\
      \ function vector KRBVecToVector(KRBVec RBvec); : Converts an RBVec to a regular\
      \ vector. RBVects are more precise than regular vectors and are used primarily\
      \ for replication.\n; native final function KRBVec KRBVecFromVector(vector v);\
      \ : Converts a vector to an RBVec. This is used primarily for replication.\n\
      \n; native final function KSetMass( float mass ); : Sets the mass of a Karma\
      \ simulated object. This sets the \"KMass\" of that object. The regular mass\
      \ is unaffected.\n; native final function float KGetMass(); : Returns the KMass\
      \ of a Karma simulated object, in Karma units.\n\n; native final function KSetInertiaTensor(\
      \ vector it1, vector it2 ); : Sets the inertia tensor. Unfortunately I don't\
      \ know what that is. :P\n; native final function KGetInertiaTensor( out vector\
      \ it1, out vector it2 ); : Reads the inertia tensor and returns it in the two\
      \ \"out\" arguments.\n\n; native final function KSetDampingProps( float lindamp,\
      \ float angdamp ); : Sets the linear and angular damping properties of a Karma\
      \ simulated actor.\n; native final function KGetDampingProps( out float lindamp,\
      \ out float angdamp ); : Puts the current Linear and Angular damping properties\
      \ into the two out arguments passed to this function.\n\n; native final function\
      \ KSetFriction( float friction ); : Sets the friction of a Karma simulated object.\
      \ This applies only to surface to surface contact, and has no effect on the\
      \ air resistance.\n; native final function float KGetFriction(); : Returns the\
      \ friction, in Karma units.\n\n; native final function KSetRestitution( float\
      \ rest ); : Sets the elasticity of this object for collisions. 1 is perfectly\
      \ elastic, 0 is perfectly solid.\n; native final function float KGetRestitution();\
      \ : Returns the elasticity of this object.\n\n; native final function KSetCOMOffset(\
      \ vector offset ); : Sets the center of mass of this object, relative to it's\
      \ center.\n; native final function KGetCOMOffset( out vector offset ); : Puts\
      \ the center of mass of this object, relative to it's center, into the out argument\
      \ supplied.\n; native final function KGetCOMPosition( out vector pos ); : Similar\
      \ to KGetCOMPosition, this sets the argument to the absolute location of the\
      \ Center of mass, relative to the center of the world.\n\n; native final function\
      \ KSetImpactThreshold( float thresh ); : Sets the amount of momentum that must\
      \ be imparted to this object in a single collision in order to trigger it's\
      \ KImpact event.\n; native final function float KGetImpactThreshold(); : Returns\
      \ the amount of momentum that must be imparted to this object in a single collision\
      \ in order to trigger it's KImpact event.\n\n; native final function KWake();\
      \ : \"Wakes up\" the actor. This causes the Karma physics to begin simulating\
      \ after the object has been deemed to be \"at rest.\"\n; native final function\
      \ bool KIsAwake(); : Returns a boolean value stating whether this Karma simulated\
      \ actor is simulating or not. It returns true if the object is currently simulating,\
      \ and false if it is \"at rest\" and has stopped simulating.\n; native final\
      \ function KAddImpulse( vector Impulse, vector Position, optional name BoneName\
      \ ); : Imparts an impulse to the Karma actor. Impulse is the amount of force\
      \ to apply in Karma units. Position is the location that the impulse should\
      \ be applied, relative to the center of the world. This does not need to actually\
      \ be in contact with the Karma object. BoneName, if supplied, is the name of\
      \ the bone that the impulse should be applied to. This only applies to objects\
      \ with skeletal information.\n\n; native final function KSetStayUpright( bool\
      \ stayUpright, bool allowRotate ); : Sets the \"stability\" of the object. If\
      \ StayUpright is set to true, the object will not roll or pitch, it will only\
      \ yaw. If the second argument, AllowRotate, is set to false, the object will\
      \ not be able to yaw. If it is set to true the object will yaw as normal. If\
      \ StayUpright is false, AllowRotate will have no effect.\n\n; native final function\
      \ KSetBlockKarma( bool newBlock ); : Sets the bBlockKarma value of an actor.\n\
      \n; native final function KSetActorGravScale( float ActorGravScale ); : Sets\
      \ the amount that gravity will be scaled by for this actor.\n; native final\
      \ function float KGetActorGravScale(); : Returns the amount that gravity will\
      \ be scaled by for this actors simulation.\n\n; native final function KDisableCollision(\
      \ actor Other ); : This will selectively disable collision between this Karma\
      \ object and another given Karma object. Regular collision is not negated, and\
      \ collision with objects other than those specified is not altered. This function\
      \ can be called repeatedly to disable collision with an arbitrary number of\
      \ Karma objects. By default, collision is enabled with all Karma objects.\n\
      ; native final function KEnableCollision( actor Other );  : This will selectively\
      \ enable collision between this Karma object and another given Karma object.\
      \ Regular collision is not affected, and collision with objects other than those\
      \ specified is not altered. This function can be called repeatedly to enable\
      \ collision with an arbitrary number of Karma objects. By default, collision\
      \ is enabled with all Karma objects.\n\n; native final function KSetSkelVel(\
      \ vector Velocity, optional vector AngVelocity, optional bool AddToCurrent );\
      \ : Sets the linear, and optionally also an angular velocity for a Karma object\
      \ with skeletal information attached. If AddToCurrent is true the velocity is\
      \ added to the current velocity. If AddToCurrent is false, the current velocity\
      \ is replaced with the one specified to this function.\n; native final function\
      \ float KGetSkelMass(); : Returns the mass, in Karma units, of a Karma object\
      \ with skeletal information.\n; native final function KFreezeRagdoll(); : Freezes\
      \ a Karma ragdoll. This stops it from simulating immediately when this function\
      \ is called. Note, however, that KIsAwake may not respond to this until the\
      \ next tick.\n\n; native final function KAddBoneLifter( name BoneName, InterpCurve\
      \ LiftVel, float LateralFriction, InterpCurve Softness ); : Adds a \"bone lifter.\"\
      \ This is used on Karma ragdolls to make it look like a bone is being lifted.\
      \ This is used on the de-res effect. The bone lifter acts independant of any\
      \ other forces or velocities acting on the ragdoll. Note that if you do not\
      \ set bBlockKarma to false before adding bone lifters, you may have erratic\
      \ results.\n; native final function KRemoveLifterFromBone( name BoneName );\
      \ : Removes a bone lifter from whatever bone you specify.\n; native final function\
      \ KRemoveAllBoneLifters(); : Removes all bone lifters on the actor which calls\
      \ this function.\n\n; native final function KMakeRagdollAvailable(); : Allocates\
      \ a ragdoll. This is used just before creating a ragdoll and will purge the\
      \ oldest ragdoll if there is not enough room in the ragdoll queue to create\
      \ another one.\n; native final function bool KIsRagdollAvailable(); : This function\
      \ checks to see if the ragdoll queue is full. If it is not full, true is returned.\
      \ If it is full, false is returned. Attempting to create a ragdoll when one\
      \ is not availible can have unpredictable results. (SimError or simply failure\
      \ to simulate.)\n\n; event KImpact(actor other, vector pos, vector impactVel,\
      \ vector impactNorm); : This event is called when the momentum imparted to this\
      \ object from a single collision exceeds the preset impact threshold, KImpactThreshold.\
      \ This value is in the KarmaParams of the actor. Note that if you destroy an\
      \ actor within KImpact, it will crash the engine. This appears to be due to\
      \ the situation where KImpact is called after the list of potentially colliding\
      \ actors is generated, and destroying something in that list leaves null pointers\
      \ in said list.\n\n'''Haral:''' I've found that if you destroy an actor within\
      \ KImpact, it will cause the game to crash.  I hear this is a known bug (usually\
      \ referred to as KPerContactCB) but I figured I'd post the obvious hack:  Copy\
      \ the relevant info of what you're going to do into class variables and then\
      \ just check for the change in Tick() and destroy it there.  I think that Epic\
      \ knows about this and it will probably be fixed when 2k4 comes out.\n\n'''Foxpaw:'''\
      \ Indeed it does. I had the same problem a while ago, but apparently I only\
      \ squirrelled it away on my developer journal and didn't post it here.\n\n;\
      \ event KVelDropBelow(); : This event is called whenever the velocity of the\
      \ ragdoll drops below a certain threshold which you can set, KVelDropBelowThreshold.\
      \ This value is in the KarmaParams of the actor.\n; event KSkelConvulse(); :\
      \ This event is called whenever a KarmaRagdoll Convulses. It is used to draw\
      \ the lightning effect on the ragdoll but can be used for anything a regular\
      \ event can be used for.\n; event KApplyForce(out vector Force, out vector Torque);\
      \ : This is not an \"event\" so much, it is called every tick, right before\
      \ the Karma physics are simulated on this object. It has two \"out\" variables\
      \ which allow you to directly apply force and torque to the actor. These values\
      \ are absolute and will set the value of the force and torque on that actor.\
      \ Despite the name, the amounts specified are not applied in addition to the\
      \ existing force and torque, they will overwrite those numbers.\n; event bool\
      \ KUpdateState(out KRigidBodyState newState); : This event allows you to manually\
      \ update the Rigid Body State for a Rigid Body Karma object. I wouldn't particularly\
      \ recommend using this to set things on a Karma object - KApplyForce, KAddImpulse,\
      \ etc. are capable of doing the same job with less complication. Regardless\
      \ of what you set in the newState variable, no changes will take effect if you\
      \ return false from this function. If you return true, the Karma objects \"\
      state\" will be replaced with whatever you supplied for the newState argument."
  properties: []
  revId: 3978
name: "Legacy:Karma Functions And Events"
revision:
  revid: 3978
  parentid: 3979
  user: "Tarquin"
  timestamp: 1104089107.000000000
  comment: "*"
timestamp: 1668764645.831508000
