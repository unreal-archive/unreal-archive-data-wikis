---
parse:
  title: "Legacy:Evolution"
  text:
    text: "<p>My path to editing UScript began with a custom skin called Big Bird.\
      \ I have no other coding experience or knowledge (other than HTML, JavaScript)\
      \ so I had alot to learn when it came to UScript, which is a conglomeration\
      \ of Java, JavaScript, and C++, among others.</p>\n<p>The way that the custom\
      \ skin came into play was that it would not work in the game. Simply would not\
      \ work no matter what we did. It was actually a problem with the model itself,\
      \ I realized much later, but at the time, I had no idea, and I was tired of\
      \ asking other people what the problem could be based on the error messages\
      \ we were receiving. I have always been a fix-it myself kind of guy, so I began\
      \ performing <a rel=\"nofollow\" class=\"external text\" href=\"http://www.Google.com\"\
      >Google</a> searches for mapping, editing, and skinning tutorials.</p>\n<p>Although\
      \ coding tutorials were very very hard to find, as I got a little more experience\
      \ with the lingo involved, I began to become more productive in my searches\
      \ and finally found <a rel=\"nofollow\" class=\"external text\" href=\"http://www.unrealscript.com/\"\
      >Chimeric's site</a>. Now I had finally found other people that were in the\
      \ same position as myself – wanting to learn more, but no resources to do so.</p>\n\
      <p>Around that time, I began my first project on my own - ColorInstaGib.</p>\n\
      <hr />\n<p>Hi &amp; welcome to the Unreal Wiki&#160;:-) →<a href=\"/Legacy:Tarquin\"\
      \ title=\"Legacy:Tarquin\">Tarquin</a></p>\n<hr />\n<p>Thanks&#160;:)</p>\n\
      <p>My latest work is SuperInstaGib, a mutator which enhances InstaGib combat\
      \ in UnrealTournament. It is now on version 3, and since I haven't yet completed\
      \ the updates to the website to include version 3, instead, you can see what\
      \ it's about in the ModSquad forums at <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://forums.beyondunreal.com/showthread.php?threadid=125019\"\
      >125019</a>.</p>\n<p>I haven't done many projects, but I try to challenge myself\
      \ constantly to improve my abilities. Although I haven't been coding long, I\
      \ managed to spend some time with DarkByte, before UT2K3 went into final development,\
      \ which increased my learning curve in leaps and bounds, no doubt. I'm presently\
      \ working on a compendium of those lessons to post as a sort of journal in the\
      \ style of a new scripter asking questions of a more experienced one. Hopefully,\
      \ this interface will help some who still have questions about the intracacies\
      \ of Uscript understand things a little more, as an alternate method of delivery\
      \ than the standard FAQ or tutorial.</p>\n<hr />\n<p><b>Tarquin:</b> what happened\
      \ to the stuff on replication that was on this page? that looked interesting\
      \ (I know <i>nothing</i> about the subject. It looked <i>simple</i> and understandable&#160;:D\
      \ )</p>\n<p><b>DJPaul:</b> Moved to <a href=\"/Legacy:Replication\" title=\"\
      Legacy:Replication\">Replication</a>, I believe.</p>\n<hr />\n<p>Tidbit #2:</p>\n\
      <p>This one is about using SpawnNotify. It is interesting to note exactly what\
      \ is happening in a SpawnNotify. You must keep in mind that everything that\
      \ you do inside of a SpawnNotify class is happening BEFORE the actor is returned\
      \ to the calling Spawn() function for that actor. What this means is that anything\
      \ that is set on that actor that is also set immediately after the Spawn call\
      \ will be overridden. A perfect example was with FlagBase.</p>\n<p>FlagBase\
      \ spawns a CTFFlag using the following code:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ Team <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tSkin<span class=\"sy0\"\
      >=</span><span class=\"kw5\">texture</span><span class=\"st0\">'JpflagR'</span>;\t\
      \n\t\tmyFlag <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'RedFlag'</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Team <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>\
      \ <span class=\"br0\">)</span>\n\t\tmyFlag <span class=\"sy0\">=</span> <span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\"\
      >class</span><span class=\"st0\">'CTFFlag'</span><span class=\"br0\">)</span>;\n\
      \ \n\tmyFlag.<span class=\"me0\">HomeBase</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">self</span>;\n\tmyFlag.<span class=\"me0\">Team</span>\
      \ <span class=\"sy0\">=</span> Team;</pre></div>\n</div>\n<p>Now, if I were\
      \ to set myFlag.HomeBase inside of a SpawnNotify function, that would be overridden\
      \ by the 'myFlag.HomeBase=self;' line following the Spawn() function. In execution,\
      \ it would look like this:</p>\n<p>Spawn(class'CTFFlag') calls SpawnNotify -</p>\n\
      <pre>**** inside SpawnNotify *****\n</pre>\n<p>NOTE: this happens BEFORE the\
      \ actor is actually spawned</p>\n<p>CTFFlag(A).HomeBase = ThisOtherBase; &lt;→\
      \ myFlag.HomeBase value is now 'ThisOtherBase'</p>\n<p>return A; &lt;---- When\
      \ we return to the spawn function, THEN the actor is finally added to the level</p>\n\
      <pre>***** back inside FlagBase *****\n</pre>\n<p>myFlag.HomeBase = self; &lt;----\
      \ Now the value of HomeBase is overridden by this line anyway</p>\n<p><b>EntropicLqd:</b>\
      \ Nice titbit. I've used spawn notify to create objects that reference the one\
      \ being created - but altering attributes of the object being created always\
      \ struck me as being a bit mad. As you so ably demonstrate above. Nice.&#160;:)</p>\n\
      <hr />\n<p>I've been tackling replication lately. I am determined to master\
      \ every aspect of it, and whenever faced with a problematic replication issue,\
      \ I've been tackling it head-on. This has led me to many discoveries about the\
      \ Spawn() function, as well as the way the game travels through all of the different\
      \ classes from start to finish. SuperInstaGib has been put on hold, for the\
      \ time being (waiting for Silencer&#160;;) ) so I've split off one of the features\
      \ – the alternate team colors, into its own mutator - AllTeams. This mutator\
      \ will allow you to play team games with all 4 team colors. Future versions\
      \ will allow you to play with additional team colors (grey, purple, orange,\
      \ brown)</p>\n<hr />\n<p>Tidbit #3:</p>\n<p>If you spawn an actor, be aware\
      \ that the actor's PreBeginPlay, BeginPlay, and PostBeginPlay functions will\
      \ ALL execute before the code continues in the class you are calling the Spawn()\
      \ function from. Why is this important? Many reasons...actually, this is about\
      \ the most important thing I've learned so far. ( Close tie with the nature\
      \ of PostNetBeginPlay() )</p>\n<p>Here is the evidence:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> ATControl <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Mutator</span> <span class=\"kw1\"\
      >config</span><span class=\"br0\">(</span>AllTeams<span class=\"br0\">)</span>;\n\
      \ \n<span class=\"co1\">// Below code has been edited for space.  However, THE\
      \ ORDER in which the code is executing has not been changed</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw4\">PreBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>debug<span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">Class</span><span class=\"sy0\">@</span><span class=\"st0\"\
      >\"********** Beginning PreBeginPlay **********\"</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"\
      me0\">bTeamGame</span><span class=\"br0\">)</span>\n\t\tTeamGamePlus<span class=\"\
      br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">RegisterMessageMutator</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">Self</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>debug<span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">Class</span><span class=\"sy0\"\
      >@</span><span class=\"st0\">\"********** Beginning PostBeginPlay **********\"\
      </span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>debug<span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"kw1\">Class</span><span\
      \ class=\"sy0\">@</span><span class=\"st0\">\"Spawning ATRInfo\"</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw1\">class</span><span class=\"\
      st0\">'ATRInfo'</span>.<span class=\"kw1\">default</span>.<span class=\"me0\"\
      >debug</span> <span class=\"sy0\">=</span> debug;\n\t<span class=\"kw1\">class</span><span\
      \ class=\"st0\">'ATRInfo'</span>.<span class=\"kw1\">static</span>.<span class=\"\
      kw3\">StaticSaveConfig</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n \n\tATRI <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'ATRInfo'</span>, <span class=\"kw6\">Self</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>debug<span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">Class</span><span class=\"sy0\">@</span><span class=\"st0\"\
      >\"Establishing HUDTypes &amp; ScoreboardTypes\"</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"co1\">// lots of other misc code</span>\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>debug<span class=\"br0\">)</span>\n\
      \t\t<span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"sy0\">@</span><span class=\"st0\">\"**********\
      \ Finished PostBeginPlay **********\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> ATRInfo <span class=\"kw1\"\
      >extends</span> ReplicationInfo <span class=\"kw1\">config</span><span class=\"\
      br0\">(</span>AllTeams<span class=\"br0\">)</span>;\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>debug<span class=\"br0\">)</span>\n\t\
      <span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"sy0\">@</span><span\
      \ class=\"st0\">\"********** Beginning PostBeginPlay **********\"</span><span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"sy0\">@</span><span\
      \ class=\"st0\">\"TeamIndex[0]=\"</span><span class=\"sy0\">@</span>TeamIndex<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"sy0\">@</span><span\
      \ class=\"st0\">\"TeamIndex[1]=\"</span><span class=\"sy0\">@</span>TeamIndex<span\
      \ class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\t<span class=\"\
      kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>debug<span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"sy0\">@</span><span class=\"st0\">\"********** Finished PostBeginPlay\
      \ **********\"</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>And here is what that code logged (again, edited for space, but the\
      \ order of the log statements has not been changed):</p>\n<pre>ScriptLog: AllTeams.ATControl\
      \ ********** Beginning PreBeginPlay **********\nScriptLog: AllTeams.ATControl\
      \ ********** Beginning PostBeginPlay **********\nScriptLog: AllTeams.ATControl\
      \ Spawning ATRInfo\nScriptLog: AllTeams.ATRInfo ********** Beginning PostBeginPlay\
      \ **********\nScriptLog: AllTeams.ATRInfo TeamIndex[0]= 2\nScriptLog: AllTeams.ATRInfo\
      \ TeamIndex[1]= 3\n</pre>\n<pre>NOTE: There was ALOT!!! of code in between the\
      \ beginning of PostBeginPlay and the end of PostBeginPlay\n</pre>\n<pre>ScriptLog:\
      \ AllTeams.ATRInfo ********** Finished PostBeginPlay **********\nScriptLog:\
      \ AllTeams.ATControl Establishing HUDTypes &amp; ScoreboardTypes\nScriptLog:\
      \ AllTeams.ATControl ********** Finished PostBeginPlay **********\n</pre>\n\
      <p>Incidentally, I've been thinking about writing a set of commandlet mutator\
      \ that will write out a log file that will essentially demonstrate the program\
      \ flow of UScript (might even bundle it with a small java file to throw some\
      \ XML around it hehe)</p>\n<p>Oh, almost forgot. I've created a TextPad \"SnackPack\"\
      \ for UT.</p>\n<p><a rel=\"nofollow\" class=\"external autonumber\" href=\"\
      http://www.organized-evolution.com/files/UT-TextPadSnackPack.zip\">[1]</a></p>\n\
      <p>The syntax file can be used on all versions. However, the rest of the snackpack\
      \ is contained in a .reg file. I have Windows2000, and although I *believe*\
      \ this part of the registry is the same across OS's, you may want to open the\
      \ brownies.reg in a text editor and make sure all the paths line up.</p>\n<p>Includes</p>\n\
      <p>updated syntax definitions:</p>\n<p>These are based on Ob1's original UC\
      \ syntax definition file for TextPad. I've added hundreds of class names, members,\
      \ and variables, as well as two seperate color schemes - one for editing, and\
      \ one for printing. I've</p>\n<p>included</p>\n<ul>\n<li>tools\n<ul>\n<li>run\
      \ the compiler, capture output, exception hyperlinks (to line number)</li>\n\
      <li>after placing cursor on class reference, opens a new window with a hyperlink\
      \ to the class name (about as close as I could get to hyperlinked classnames)</li>\n\
      </ul>\n</li>\n<li>preset workspace\n<ul>\n<li>for viewing</li>\n<li>for printing</li>\n\
      </ul>\n</li>\n</ul>\n<p>coming soon</p>\n<ul>\n<li>uc script clip library</li>\n\
      </ul>\n<p><b>Kuhal:</b> Are you the Evolution that recently worked on DarkByte's\
      \ SemiAdmin? I've been trying to get hold of you&#160;:) Can you ICQ me please\
      \ - 105626576</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.090 seconds\n\
      Real time usage: 0.091 seconds\nPreprocessor visited node count: 11/1000000\n\
      Preprocessor generated node count: 72/1000000\nPost‐expand include size: 9/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1130-0!*!0!*!*!*!*\
      \ and timestamp 20221118013122 and revision id 2970\n -->\n"
  categories:
  - sortkey: "Evolution"
    name: "Legacy_Personal_Page"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Tarquin"
  templates: []
  images: []
  externallinks:
  - "http://forums.beyondunreal.com/showthread.php?threadid=125019"
  - "http://www.unrealscript.com/"
  - "http://www.Google.com"
  - "http://www.organized-evolution.com/files/UT-TextPadSnackPack.zip"
  sections: []
  displaytitle: "Legacy:Evolution"
  iwlinks: []
  wikitext:
    text: "My path to editing UScript began with a custom skin called Big Bird.  I\
      \ have no other coding experience or knowledge (other than HTML, JavaScript)\
      \ so I had alot to learn when it came to UScript, which is a conglomeration\
      \ of Java, JavaScript, and C++, among others.\n\nThe way that the custom skin\
      \ came into play was that it would not work in the game. Simply would not work\
      \ no matter what we did.  It was actually a problem with the model itself, I\
      \ realized much later, but at the time, I had no idea, and I was tired of asking\
      \ other people what the problem could be based on the error messages we were\
      \ receiving.  I have always been a fix-it myself kind of guy, so I began performing\
      \ [http://www.Google.com Google] searches for mapping, editing, and skinning\
      \ tutorials.\n\nAlthough coding tutorials were very very hard to find, as I\
      \ got a little more experience with the lingo involved, I began to become more\
      \ productive in my searches and finally found [http://www.unrealscript.com/\
      \ Chimeric's site].  Now I had finally found other people that were in the same\
      \ position as myself &ndash; wanting to learn more, but no resources to do so.\n\
      \nAround that time, I began my first project on my own - ColorInstaGib.\n\n\
      ----\n\nHi & welcome to the Unreal Wiki :-)  &rarr;[[Legacy:Tarquin|Tarquin]]\
      \ \n\n----\n\nThanks :)\n\nMy latest work is SuperInstaGib, a mutator which\
      \ enhances InstaGib combat in UnrealTournament.  It is now on version 3, and\
      \ since I haven't yet completed the updates to the website to include version\
      \ 3, instead, you can see what it's about in the ModSquad forums at [http://forums.beyondunreal.com/showthread.php?threadid=125019\
      \ 125019].\n\nI haven't done many projects, but I try to challenge myself constantly\
      \ to improve my abilities.  Although I haven't been coding long, I managed to\
      \ spend some time with DarkByte, before UT2K3 went into final development, which\
      \ increased my learning curve in leaps and bounds, no doubt.  I'm presently\
      \ working on a compendium of those lessons to post as a sort of journal in the\
      \ style of a new scripter asking questions of a more experienced one.  Hopefully,\
      \ this interface will help some who still have questions about the intracacies\
      \ of Uscript understand things a little more, as an alternate method of delivery\
      \ than the standard FAQ or tutorial.\n\n----\n\n'''Tarquin:''' what happened\
      \ to the stuff on replication that was on this page? that looked interesting\
      \ (I know ''nothing'' about the subject. It looked ''simple'' and understandable\
      \ :D )\n\n'''DJPaul:''' Moved to [[Legacy:Replication|Replication]], I believe.\n\
      \n----\n\nTidbit #2:\n\nThis one is about using SpawnNotify.  It is interesting\
      \ to note exactly what is happening in a SpawnNotify.  You must keep in mind\
      \ that everything that you do inside of a SpawnNotify class is happening BEFORE\
      \ the actor is returned to the calling Spawn() function for that actor.  What\
      \ this means is that anything that is set on that actor that is also set immediately\
      \ after the Spawn call will be overridden.  A perfect example was with FlagBase.\n\
      \nFlagBase spawns a CTFFlag using the following code:\n\n<uscript>\n\tif ( Team\
      \ == 0 )\n\t{\n\t\tSkin=texture'JpflagR';\t\n\t\tmyFlag = Spawn(class'RedFlag');\n\
      \t}\n\telse if ( Team == 1 )\n\t\tmyFlag = Spawn(class'CTFFlag');\n\n\tmyFlag.HomeBase\
      \ = self;\n\tmyFlag.Team = Team;\n</uscript>\n\nNow, if I were to set myFlag.HomeBase\
      \ inside of a SpawnNotify function, that would be overridden by the 'myFlag.HomeBase=self;'\
      \ line following the Spawn() function.  In execution, it would look like this:\n\
      \nSpawn(class'CTFFlag') calls SpawnNotify -\n\n **** inside SpawnNotify *****\n\
      \nNOTE: this happens BEFORE the actor is actually spawned\n\nCTFFlag(A).HomeBase\
      \ = ThisOtherBase;  <&rarr; myFlag.HomeBase value is now 'ThisOtherBase'\n\n\
      return A;                             <---- When we return to the spawn function,\
      \ THEN the actor is finally added to the level\n ***** back inside FlagBase\
      \ *****\n\nmyFlag.HomeBase = self;               <---- Now the value of HomeBase\
      \ is overridden by this line anyway\n\n'''EntropicLqd:''' Nice titbit.  I've\
      \ used spawn notify to create objects that reference the one being created -\
      \ but altering attributes of the object being created always struck me as being\
      \ a bit mad.  As you so ably demonstrate above.  Nice. :)\n\n----\n\nI've been\
      \ tackling replication lately.  I am determined to master every aspect of it,\
      \ and whenever faced with a problematic replication issue, I've been tackling\
      \ it head-on.  This has led me to many discoveries about the Spawn() function,\
      \ as well as the way the game travels through all of the different classes from\
      \ start to finish.  SuperInstaGib has been put on hold, for the time being (waiting\
      \ for Silencer ;) ) so I've split off one of the features &ndash; the alternate\
      \ team colors, into its own mutator - AllTeams.  This mutator will allow you\
      \ to play team games with all 4 team colors.  Future versions will allow you\
      \ to play with additional team colors (grey, purple, orange, brown)\n\n----\n\
      \nTidbit #3:\n\nIf you spawn an actor, be aware that the actor's PreBeginPlay,\
      \ BeginPlay, and PostBeginPlay functions will ALL execute before the code continues\
      \ in the class you are calling the Spawn() function from.  Why is this important?\
      \  Many reasons...actually, this is about the most important thing I've learned\
      \ so far.  ( Close tie with the nature of PostNetBeginPlay() )\n\nHere is the\
      \ evidence:\n\n<uscript>\nclass ATControl extends Mutator config(AllTeams);\n\
      \n// Below code has been edited for space.  However, THE ORDER in which the\
      \ code is executing has not been changed\nfunction PreBeginPlay()\n{\n\tif (debug)\n\
      \t\tlog(Class@\"********** Beginning PreBeginPlay **********\");\n\tif (Level.Game.bTeamGame)\n\
      \t\tTeamGamePlus(Level.Game).RegisterMessageMutator(Self);\n}\n\nfunction PostBeginPlay()\n\
      {\n\tlocal int i;\n\t\n\tif (debug)\n\t\tlog(Class@\"********** Beginning PostBeginPlay\
      \ **********\");\n\tif (debug)\n\t\tlog(Class@\"Spawning ATRInfo\");\n\t\n\t\
      class'ATRInfo'.default.debug = debug;\n\tclass'ATRInfo'.static.StaticSaveConfig();\n\
      \t\n\tATRI = Spawn(class'ATRInfo', Self);\n\tif (debug)\n\t\tlog(Class@\"Establishing\
      \ HUDTypes & ScoreboardTypes\");\n\t\n\t// lots of other misc code\n\tif (debug)\n\
      \t\tlog(class@\"********** Finished PostBeginPlay **********\");\n}\n</uscript>\n\
      \n<uscript>\nclass ATRInfo extends ReplicationInfo config(AllTeams);\nfunction\
      \ PostBeginPlay()\n{\n\tif (debug)\n\t{\n\t\tlog(class@\"********** Beginning\
      \ PostBeginPlay **********\");\n\t\tlog(class@\"TeamIndex[0]=\"@TeamIndex[0]);\n\
      \t\tlog(class@\"TeamIndex[1]=\"@TeamIndex[1]);\n\t}\n\tSuper.PostBeginPlay();\n\
      \tif (debug)\n\t\tlog(class@\"********** Finished PostBeginPlay **********\"\
      );\n}\n</uscript>\n\nAnd here is what that code logged (again, edited for space,\
      \ but the order of the log statements has not been changed):\n\n ScriptLog:\
      \ AllTeams.ATControl ********** Beginning PreBeginPlay **********\n ScriptLog:\
      \ AllTeams.ATControl ********** Beginning PostBeginPlay **********\n ScriptLog:\
      \ AllTeams.ATControl Spawning ATRInfo\n ScriptLog: AllTeams.ATRInfo **********\
      \ Beginning PostBeginPlay **********\n ScriptLog: AllTeams.ATRInfo TeamIndex[0]=\
      \ 2\n ScriptLog: AllTeams.ATRInfo TeamIndex[1]= 3\n\n NOTE: There was ALOT!!!\
      \ of code in between the beginning of PostBeginPlay and the end of PostBeginPlay\n\
      \n ScriptLog: AllTeams.ATRInfo ********** Finished PostBeginPlay **********\n\
      \ ScriptLog: AllTeams.ATControl Establishing HUDTypes & ScoreboardTypes\n ScriptLog:\
      \ AllTeams.ATControl ********** Finished PostBeginPlay **********\n\nIncidentally,\
      \ I've been thinking about writing a set of commandlet mutator that will write\
      \ out a log file that will essentially demonstrate the program flow of UScript\
      \ (might even bundle it with a small java file to throw some XML around it \
      \ hehe)\n\nOh, almost forgot.  I've created a TextPad \"SnackPack\" for UT.\n\
      \n[http://www.organized-evolution.com/files/UT-TextPadSnackPack.zip]\n\nThe\
      \ syntax file can be used on all versions.  However, the rest of the snackpack\
      \ is contained in a .reg file.  I have Windows2000, and although I *believe*\
      \ this part of the registry is the same across OS's, you may want to open the\
      \ brownies.reg in a text editor and make sure all the paths line up.\n\nIncludes\
      \ \n\nupdated syntax definitions: \n\nThese are based on Ob1's original UC syntax\
      \ definition file for TextPad.  I've added hundreds of class names, members,\
      \ and variables, as well as two seperate color schemes - one for editing, and\
      \ one for printing.  I've \n\nincluded\n*tools\n**run the compiler, capture\
      \ output, exception hyperlinks (to line number)\n**after placing cursor on class\
      \ reference, opens a new window with a hyperlink to the class name (about as\
      \ close as I could get to hyperlinked classnames)\n*preset workspace\n** for\
      \ viewing \n** for printing\n\ncoming soon\n*uc script clip library\n\n'''Kuhal:'''\
      \ Are you the Evolution that recently worked on DarkByte's SemiAdmin?  I've\
      \ been trying to get hold of you :)  Can you ICQ me please - 105626576\n[[Category:Legacy\
      \ Personal Page|{{PAGENAME}}]]"
  properties: []
  revId: 2970
name: "Legacy:Evolution"
revision:
  revid: 2970
  parentid: 2972
  user: "Kuhal"
  timestamp: 1063066685.000000000
  comment: "Enquiry for Evolution"
timestamp: 1668775043.670975000
