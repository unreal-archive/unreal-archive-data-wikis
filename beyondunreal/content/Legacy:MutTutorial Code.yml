---
parse:
  title: "Legacy:MutTutorial Code"
  text:
    text: "<p>THIS PAGE HAS MOVED TO <a href=\"/Legacy:MutTutorial\" title=\"Legacy:MutTutorial\"\
      >MutTutorial</a>!</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MutNeedBetterName <span class=\"kw1\">extends</span> <span\
      \ class=\"kw9\">Mutator</span>;\n \n<span class=\"co1\">//creates a new class\
      \ for your mutator and makes it an extension of the mutator class.</span>\n\
      \ \n<span class=\"co1\">//This makes it so it follows all the rules a mutator\
      \ does.</span>\n \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ MultiJumpCount, MultiJumpBoost, StartingHealth, MaximumHealth; <span class=\"\
      co1\">// The number of multi-jumps allowed</span>\n \n<span class=\"co1\">//The\
      \ boost the player gets from a multi-jump and the player's starting health</span>\n\
      \ \n<span class=\"co1\">// The var keyword prefixes a variable declaration.</span>\n\
      \ \n<span class=\"co1\">// A variable declaration tells the engine what information\
      \ this</span>\n \n<span class=\"co1\">// object needs to store and what kind\
      \ of information it is.</span>\n \n<span class=\"co1\">// The type of information\
      \ in this declaration is int, short</span>\n \n<span class=\"co1\">// for integer.\
      \ An integer is a whole number, either positive</span>\n \n<span class=\"co1\"\
      >// or negative.</span>\n \n<span class=\"co1\">// The () puts these variables\
      \ in a group and makes them</span>\n \n<span class=\"co1\">// visible in UnrealEds\
      \ property browser. Since this is a</span>\n \n<span class=\"co1\">// mutator\
      \ and likely won't be placed in a map, the () is</span>\n \n<span class=\"co1\"\
      >// probrably unnecessary.</span>\n \n<span class=\"kw1\">Function</span> Modifyplayer<span\
      \ class=\"br0\">(</span><span class=\"kw9\">pawn</span> other<span class=\"\
      br0\">)</span>\n \n<span class=\"co1\">//A function (set of actions, in the\
      \ case of Uscript often predefined) that will modify the avatars/bots (pawns).</span>\n\
      \ \n<span class=\"co1\">// Other is a variable that stores a reference to the\
      \ player</span>\n \n<span class=\"co1\">// that we are modifying. The function\
      \ uses this information</span>\n \n<span class=\"co1\">// to find the player\
      \ amidst all the other things in the game</span>\n \n<span class=\"co1\">//\
      \ world.</span>\n \n<span class=\"co1\">//I am using modify player because I\
      \ want to change the properties of a player, in this case the MultiJumping power.</span>\n\
      \ \n<span class=\"br0\">{</span>\n   <span class=\"co1\">// Local is just like\
      \ the Var keyword - it tells the engine</span>\n   <span class=\"co1\">// that\
      \ we need to store some information, and what type of</span>\n   <span class=\"\
      co1\">// information to store. However, Local declarations go away</span>\n\
      \   <span class=\"co1\">// at the end of the function, while Var ones stay around</span>\n\
      \   <span class=\"co1\">// until this object is destroyed. (Since it's a mutator,</span>\n\
      \   <span class=\"co1\">// it will be destroyed when the level changes.)</span>\n\
      \   <span class=\"kw1\">Local</span> <span class=\"kw9\">Xpawn</span> x; <span\
      \ class=\"co1\">//Xpawn = changeable guy</span>\n \n   <span class=\"co1\">//\
      \ This stores the information we had in Other, in X as well.</span>\n   <span\
      \ class=\"co1\">// We cast Other to an xPawn (which is what X is) because an</span>\n\
      \   <span class=\"co1\">// xPawn is a type of Pawn. (which is what Other is)\
      \ Since</span>\n   <span class=\"co1\">// every xPawn is a Pawn, but not all\
      \ Pawns are xPawns, we</span>\n   <span class=\"co1\">// have to tell the engine\
      \ that the Pawn in Other is actually</span>\n   <span class=\"co1\">// an xPawn.</span>\n\
      \   X <span class=\"sy0\">=</span> <span class=\"kw9\">xPawn</span><span class=\"\
      br0\">(</span>other<span class=\"br0\">)</span>;\n \n   <span class=\"co1\"\
      >// Now we check to see if X holds valid information or not.</span>\n   <span\
      \ class=\"co1\">// If it was a reference to a player that didn't actually</span>\n\
      \   <span class=\"co1\">// exist, or if the statement before this one (where\
      \ we told</span>\n   <span class=\"co1\">// the engine that our Pawn (Other)\
      \ was an xPawn turned out</span>\n   <span class=\"co1\">// to be untrue, then\
      \ X might not hold valid information.</span>\n   <span class=\"co1\">// Most\
      \ of the time it will hold valid information, but this</span>\n   <span class=\"\
      co1\">// line checks just to be sure.</span>\n   <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>X <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span>\n   <span class=\"br0\">{</span>\n\
      \      <span class=\"co1\">// Make X's MaxMultiJump equal to XMultiJump etc.</span>\n\
      \    x.<span class=\"me0\">MaxMultiJump</span> <span class=\"sy0\">=</span>\
      \ MultiJumpCount;\n    x.<span class=\"me0\">MultiJumpBoost</span> <span class=\"\
      sy0\">=</span> MultiJumpBoost;\n    x.<span class=\"me0\">Health</span> <span\
      \ class=\"sy0\">=</span> StartingHealth;\n    x.<span class=\"me0\">HealthMax</span>\
      \ <span class=\"sy0\">=</span> MaximumHealth;\n \n   <span class=\"br0\">}</span>\n\
      \ \n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      \ \n<span class=\"br0\">{</span>\n  MultiJumpCount<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">10</span>\n  MultiJumpBoost<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">50</span>\n  StartingHealth<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">250</span>\n  MaximumHealth<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">250</span>\n  GroupName<span class=\"sy0\">=</span><span class=\"\
      st0\">\"MutNeedBetterName\"</span>\n  FriendlyName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"What ever you want the Mutator to be called\"</span> <span\
      \ class=\"co1\">//This is the name of the Mutator that will display in game</span>\n\
      \  Description<span class=\"sy0\">=</span><span class=\"st0\">\"Changes your\
      \ initial health and Multi-Jumping ability\"</span>\n \n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">//Next add this code to the file UT2004.ini:\
      \ \"EditPackages=MutTutorial\"</span>\n \n<span class=\"co1\">//Move the folder\
      \ MutTutorial into C:\\UT2004 (or where ever you installed UT2004)</span>\n\
      \ \n<span class=\"co1\">//Move the file MutTutorial.int into UT2004\\system</span>\n\
      \ \n<span class=\"co1\">//Open Command line (a quick way to do this is to open\
      \ \"run\" and type cmd)</span>\n \n<span class=\"co1\">//type in \"C:\\UT2004\\\
      System\\ucc make\" press enter and wait.</span>\n \n<span class=\"co1\">//Ucc\
      \ will go through all the folders and if you edited your UT2004[or 3 i think].ini\
      \ right it should go through your folder.</span>\n \n<span class=\"co1\">//Hopefully\
      \ it will say success, there were no errors. If it does run Unreal Tourney and\
      \ you will see under muators Mutation Tutorial</span></pre></div>\n</div>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.052 seconds\nReal time usage: 0.103\
      \ seconds\nPreprocessor visited node count: 4/1000000\nPreprocessor generated\
      \ node count: 24/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2172-0!*!0!*!*!*!* and timestamp 20221118160616 and revision\
      \ id 5279\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:MutTutorial"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:MutTutorial Code"
  iwlinks: []
  wikitext:
    text: "THIS PAGE HAS MOVED TO [[Legacy:MutTutorial|MutTutorial]]!\n\n<Uscript>\n\
      \nclass MutNeedBetterName extends Mutator;\n\n//creates a new class for your\
      \ mutator and makes it an extension of the mutator class.\n\n//This makes it\
      \ so it follows all the rules a mutator does.\n\nvar int MultiJumpCount, MultiJumpBoost,\
      \ StartingHealth, MaximumHealth; // The number of multi-jumps allowed\n\n//The\
      \ boost the player gets from a multi-jump and the player's starting health\n\
      \n// The var keyword prefixes a variable declaration.\n\n// A variable declaration\
      \ tells the engine what information this\n\n// object needs to store and what\
      \ kind of information it is.\n\n// The type of information in this declaration\
      \ is int, short\n\n// for integer. An integer is a whole number, either positive\n\
      \n// or negative.\n\n// The () puts these variables in a group and makes them\n\
      \n// visible in UnrealEds property browser. Since this is a\n\n// mutator and\
      \ likely won't be placed in a map, the () is\n\n// probrably unnecessary.\n\n\
      Function Modifyplayer(pawn other)\n\n//A function (set of actions, in the case\
      \ of Uscript often predefined) that will modify the avatars/bots (pawns).\n\n\
      // Other is a variable that stores a reference to the player\n\n// that we are\
      \ modifying. The function uses this information\n\n// to find the player amidst\
      \ all the other things in the game\n\n// world.\n\n//I am using modify player\
      \ because I want to change the properties of a player, in this case the MultiJumping\
      \ power.\n\n{\n   // Local is just like the Var keyword - it tells the engine\n\
      \   // that we need to store some information, and what type of\n   // information\
      \ to store. However, Local declarations go away\n   // at the end of the function,\
      \ while Var ones stay around\n   // until this object is destroyed. (Since it's\
      \ a mutator,\n   // it will be destroyed when the level changes.)\n   Local\
      \ Xpawn x; //Xpawn = changeable guy\n\n   // This stores the information we\
      \ had in Other, in X as well.\n   // We cast Other to an xPawn (which is what\
      \ X is) because an\n   // xPawn is a type of Pawn. (which is what Other is)\
      \ Since\n   // every xPawn is a Pawn, but not all Pawns are xPawns, we\n   //\
      \ have to tell the engine that the Pawn in Other is actually\n   // an xPawn.\n\
      \   X = xPawn(other);\n   \n   // Now we check to see if X holds valid information\
      \ or not.\n   // If it was a reference to a player that didn't actually\n  \
      \ // exist, or if the statement before this one (where we told\n   // the engine\
      \ that our Pawn (Other) was an xPawn turned out\n   // to be untrue, then X\
      \ might not hold valid information.\n   // Most of the time it will hold valid\
      \ information, but this\n   // line checks just to be sure.\n   if (X != None)\n\
      \   {\n      // Make X's MaxMultiJump equal to XMultiJump etc.\n    x.MaxMultiJump\
      \ = MultiJumpCount;\n    x.MultiJumpBoost = MultiJumpBoost;\n    x.Health =\
      \ StartingHealth;\n    x.HealthMax = MaximumHealth;\n\n   }\n\n}\n\ndefaultproperties\n\
      \n{\n  MultiJumpCount=10\n  MultiJumpBoost=50\n  StartingHealth=250\n  MaximumHealth=250\n\
      \  GroupName=\"MutNeedBetterName\"\n  FriendlyName=\"What ever you want the\
      \ Mutator to be called\" //This is the name of the Mutator that will display\
      \ in game\n  Description=\"Changes your initial health and Multi-Jumping ability\"\
      \n\n}\n\n//Next add this code to the file UT2004.ini: \"EditPackages=MutTutorial\"\
      \n\n//Move the folder MutTutorial into C:\\UT2004 (or where ever you installed\
      \ UT2004)\n\n//Move the file MutTutorial.int into UT2004\\system\n\n//Open Command\
      \ line (a quick way to do this is to open \"run\" and type cmd)\n\n//type in\
      \ \"C:\\UT2004\\System\\ucc make\" press enter and wait.\n\n//Ucc will go through\
      \ all the folders and if you edited your UT2004[or 3 i think].ini right it should\
      \ go through your folder.\n\n//Hopefully it will say success, there were no\
      \ errors. If it does run Unreal Tourney and you will see under muators Mutation\
      \ Tutorial\n</Uscript>"
  properties: []
  revId: 5279
name: "Legacy:MutTutorial Code"
revision:
  revid: 5279
  parentid: 5280
  user: "Ip-139-77.station.sony.com"
  timestamp: 1146757910.000000000
  comment: "*the script wouldn't compile because of missing ; in line 62"
timestamp: 1668787425.295555000
