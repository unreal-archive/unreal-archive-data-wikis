---
parse:
  title: "Legacy:Lag Compensation"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#General\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">General</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Hit_Prediction\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Hit Prediction</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Introduction\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Introduction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Clientside_Hit_Detection\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Clientside Hit\
      \ Detection</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Introducing_Serverside_Hit_Prediction\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Introducing Serverside Hit Prediction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Implementation\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">Implementation</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Disadvantages\"><span class=\"\
      tocnumber\">2.5</span> <span class=\"toctext\">Disadvantages</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#See_Also\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">See Also</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"General\">General</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Lag_Compensation?section=1\" title=\"Edit section: General\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>With\
      \ the term \"lag compensation\", I refer to everything that is in the code to\
      \ make players suffer less from the effects of lag. For example every modern\
      \ first person shooter has some kind of movement prediction build in. Without\
      \ movement prediction, we couldn't move instantly but every move would be delayed\
      \ by a few milliseconds which would change the gameplay a lot (and not to the\
      \ better).</p>\n<p>Even though our movement still lags behind on the server\
      \ for a small amount, at least we don't feel affected by the lag when moving.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Hit_Prediction\">Hit Prediction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Lag_Compensation?section=2\" title=\"Edit section: Hit\
      \ Prediction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Lag_Compensation?section=3\" title=\"Edit section: Introduction\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>One\
      \ important area in which we still feel the lag is aiming. When shooting projectile\
      \ weapons, our projectile starts a bit delayed (and not instantly like our movement)\
      \ and when shooting hitscan weapons, we have to predict the movement of our\
      \ target and aim a bit ahead of it, praying that it doesn't change direction\
      \ before the shot registers. The problem simply is, that it takes a while for\
      \ the shot to travel to the server and then it will compare your shot information\
      \ (do the trace) to the new timeframe and not the timeframe you actually did\
      \ the shot in. This has a pretty heavy impact on gameplay and is the number\
      \ one reason why a low latency is so important for games like Unreal Tournament.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Clientside_Hit_Detection\">Clientside Hit\
      \ Detection</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Lag_Compensation?section=4\" title=\"Edit section:\
      \ Clientside Hit Detection\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>One attempt to solve this is the well known ZeroPing\
      \ (can't find the real link right now, anyone?). In a nutshell, ZeroPing simply\
      \ does all the hitscan hit detection on the client side and then tells the server\
      \ what it hit. Obviously this completely breaks the paradigm of not giving any\
      \ deciding power to the client. Even if you take away the threats of cheating,\
      \ the question remains weither the client can be trusted, considering that the\
      \ client's representation of other actors in the game does NOT have to match\
      \ their actual positions. The client will simulate the movement of the other\
      \ actor until it got a new update about their position and movement, so at the\
      \ client, the target actor will actually move in a straight line, until it is\
      \ \"warped\" to it's new and correct position with the next update. Without\
      \ ZeroPing, there would hardly be any chance to hit those targets, if you don't\
      \ even know where they really are at the moment. With ZeroPing, it doesn't matter\
      \ if the prediction is completely wrong, you can still hit what you see, not\
      \ what is real on the server. But this actively limits the maneuvering possibilities\
      \ of the target. To summarize, while I believe that ZeroPing works great to\
      \ allow people on very high latencies to play and have some fun with each other,\
      \ I don't think that it's the right thing to do in general. Please correct me\
      \ if I'm wrong with anything about ZeroPing or client side hit detection in\
      \ general.</p>\n<h3><span class=\"mw-headline\" id=\"Introducing_Serverside_Hit_Prediction\"\
      >Introducing Serverside Hit Prediction</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Lag_Compensation?section=5\"\
      \ title=\"Edit section: Introducing Serverside Hit Prediction\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Besides of ZeroPing,\
      \ there is another approach and this one is actually tried and tested by large\
      \ mainstream games like Counter-Strike. To make it short, the server simply\
      \ stores a trail of timeframes (including the position of each actor) for a\
      \ short time. Whenever a client shoots, the server will move all actors back\
      \ to the timeframe of the client when it actually fired the shot. This allows\
      \ a client to practically shoot at what it sees IF (and this is the important\
      \ point) the client shows all actors at a position matching the positions on\
      \ the server of the same timeframe.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Implementation\">Implementation</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Lag_Compensation?section=6\"\
      \ title=\"Edit section: Implementation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In detail, the implementation will work like this:</p>\n\
      <ul>\n<li>The server needs to store a trail for each moving and shootable actor.\
      \ Each trail has to contain a timestamp, a location and a rotation of this actor.\
      \ This is the simple part.</li>\n<li>When a client shoots, the server needs\
      \ to know when exactly the client fired this shot (servertime). Currently I\
      \ do it like this: The server replicated ServerTimeStamp (a float) to the client.\
      \ To make this more accurate, the client increases this TimeStamp every tick\
      \ by the time that has passed. Obviously the ServerTimeStamp always lags behind\
      \ on the client, just as much as ever other information from the server lags\
      \ behind (like actor positions).</li>\n</ul>\n<p><b>Question</b>: Is there a\
      \ way to get the same result without replicating a float value each time? Or\
      \ do you think this is acceptable for the case?</p>\n<p>To send the timestamp\
      \ to the server, I simply use a modified fire function which includes the current\
      \ ServerTimeStamp as a parameter.</p>\n<ul>\n<li>When the server does the actual\
      \ hitscan, it moves all actors to a timestamp which most closely matches the\
      \ timestamp at which the shot was actually fired. Because clients usually run\
      \ at higher FPS than the server, interpolation can be used to get even more\
      \ precision.</li>\n<li>Finally, it is important to render beam and impact effects\
      \ immediately on the client and not spawn them on the server first, otherwise\
      \ it would still \"feel\" as if you would have to lead, even though you don't.</li>\n\
      </ul>\n<p>There is one problem with machineguns in UT2003. Unlike UT, those\
      \ guns don't call the replicated fire function with each bullet anymore, but\
      \ only for startfire and stopfire. This is obviously a good thing because it\
      \ doesn't limit the firerate to FPS or lag anymore, but a bad thing for us,\
      \ as we don't know the exact time of each shot (as latency can fluctuate a lot).\
      \ One possibility would be to simply ignore the inaccuracies, another possibility\
      \ would be to replicate the ServerTimeStamp from the client to the server constantly,\
      \ at least while a gun is fired. This might be the most accurate way and even\
      \ usefull for other things, but I'm not sure how much of a hit this would be\
      \ for bandwidth usage. Comments?</p>\n<h3><span class=\"mw-headline\" id=\"\
      Disadvantages\">Disadvantages</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Lag_Compensation?section=7\"\
      \ title=\"Edit section: Disadvantages\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Obviously you can't simply make lag disappear, so\
      \ every kind of lag compensation is a tradeoff. The drawbacks of movement prediction\
      \ for example are, that a lagging player might seem to \"warp\" for other players\
      \ when the prediction was wrong and has to be corrected. If the server was wrong\
      \ with prediction, it will even allow a certain amount of error and correct\
      \ the position on the server instead of correcting the client, so it can seem\
      \ that other players are warping a bit for you, even if your connection is perfectly\
      \ fast. This is a drawback that is commonly accepted because the alternative\
      \ would be horrible and a tiny bit of warping really isn't significant anymore,\
      \ especially when playing against other people with decent pings.</p>\n<p>The\
      \ major disadvantage of hit prediction is, that you can be shot, even though\
      \ you think you are safe. For example if you take cover behind a wall and a\
      \ split second later the server tells you that you are hit. This can be quite\
      \ irritating, but it happens rarely if at all and even less when playing against\
      \ other people with good pings.</p>\n<p>Additionally, just like movement prediction\
      \ only allows a certain amount of error, hit prediction could only compensate\
      \ for a certain amount of time. This amount could be reduced if high ping bastards\
      \ are too much of an annoyance. A value of 200ms should still be fine for most\
      \ players and shouldn't feel too bad.</p>\n<h2><span class=\"mw-headline\" id=\"\
      See_Also\">See Also</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Lag_Compensation?section=8\" title=\"Edit section:\
      \ See Also\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><a href=\"/Legacy:Hit_Prediction\" title=\"Legacy:Hit Prediction\">Hit Prediction</a>\
      \ (<a href=\"/Legacy:Open_Source\" title=\"Legacy:Open Source\">Open Source</a>\
      \ example implementation for <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a>)</p>\n<h2><span class=\"mw-headline\" id=\"\
      Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Lag_Compensation?section=9\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Spark:</b> Phew... Well, this is my first contribution\
      \ to the Wiki, hopefully it's interesting to anyone. I'm really really tired\
      \ now so I can only hope that I didn't make too much mistakes at the end.&#160;:)\
      \ If I made anything wrong with the layout, formating or names, please tell\
      \ (and excuse) me. I'm thinking of splitting this into several pages, at least\
      \ one dedicated page to hit prediction, but I wanted to do my \"Hello Wiki World\"\
      \ on one page at first.</p>\n<p>I also have a working implementation (an Instagib\
      \ gametype) here that I would like to wikify so it can be looked at, learned\
      \ from and hopefully be improved (tests went really well though). But I will\
      \ think about how to do that after some sleep.&#160;:)</p>\n<p>As a final note,\
      \ I know that hit prediction is a very controversial topic and to be honest,\
      \ I'm a bit tired of pointless arguments about weither it should be included\
      \ in a game or not. I will leave it up to other people to create a mutator for\
      \ UT2003 from this (or not) and then convince people to actually use it (or\
      \ not). So this is mainly targeted to mod developers looking to \"unlag\" their\
      \ mod, especially those which feature mostly hitscan weapons (like most realistic\
      \ mods and Instagib).</p>\n<p><b>Dante:</b> Sounds interesting. But you're increasing\
      \ server load very much. Take 3 guys firing with mguns, and for every trace\
      \ you take all pawns and move them to the correct location for a given timestamp.\
      \ You could decrease from all pawns to pawns within a given angular difference\
      \ ( aiming from shooter to angle of ( enemy.location - location ) ).</p>\n<p><b>Spark:</b>\
      \ That's a good idea, but even if the pawn is out of this radius it might not\
      \ be out of the radius after timeshifting. Just allowing a large radius wouldn't\
      \ be enough because an actor could also be \"rocketed\" behind the instigator\
      \ (in close combat) or something like that. So an algorithm would need to be\
      \ found that covers all eventualities and still is faster then doing the actual\
      \ timeshifting.&#160;:) Maybe the \"relevent actors\" functionality can be used\
      \ for this? I.e. only timeshift those actors which are relevant to the instigator.\
      \ This would at least cover those actors which are completely out of reach and\
      \ sight.</p>\n<p>The Quake 3 \"unlagged\" implementation does also do the timeshifting\
      \ for each and every player though and I'm not aware of any performance problems\
      \ (that does not mean that it shouldn't be improved if possible of course).</p>\n\
      <p><b>Dirk Fist:</b> I'm on dial up in a rural area the lowest ping I've ever\
      \ had was 300(400 is avg). Your tracking idea sounds like a great idea you should\
      \ realise however that most of the people that NEED lag compensation are going\
      \ to have pings in excess of 200 (assuming 10 samples per second with 10 samples\
      \ per actor would give a max lag of 1000), Also you will need to track everything\
      \ that moves which could stop a projectile. If it was'nt for ZP on (UT) I would\
      \ not be able to play. Its important to note in the above discussion that ALL\
      \ PLAYERS AIM BASED ON CLIENT SIDE information.</p>\n<p><a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://zeroping.home.att.net/\">http://zeroping.home.att.net/</a></p>\n\
      <p><b>xX)(Xx:</b> Zeroping weapons cannot hit the fortstandards in Assault maps,\
      \ meaning, AS maps must be played with non ZP weapons, or ZP Assault players\
      \ can only play maps that set it so you walk into the fortstandard rather than\
      \ shoot it</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.045 seconds\n\
      Real time usage: 0.046 seconds\nPreprocessor visited node count: 34/1000000\n\
      Preprocessor generated node count: 40/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1687-0!*!0!!en!*!*\
      \ and timestamp 20221118155722 and revision id 4170\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Hit Prediction"
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  templates: []
  images: []
  externallinks:
  - "http://zeroping.home.att.net/"
  sections:
  - toclevel: 1
    level: "2"
    line: "General"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 0
    anchor: "General"
  - toclevel: 1
    level: "2"
    line: "Hit Prediction"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 544
    anchor: "Hit_Prediction"
  - toclevel: 2
    level: "3"
    line: "Introduction"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 565
    anchor: "Introduction"
  - toclevel: 2
    level: "3"
    line: "Clientside Hit Detection"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 1290
    anchor: "Clientside_Hit_Detection"
  - toclevel: 2
    level: "3"
    line: "Introducing Serverside Hit Prediction"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 2769
    anchor: "Introducing_Serverside_Hit_Prediction"
  - toclevel: 2
    level: "3"
    line: "Implementation"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 3399
    anchor: "Implementation"
  - toclevel: 2
    level: "3"
    line: "Disadvantages"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 5589
    anchor: "Disadvantages"
  - toclevel: 1
    level: "2"
    line: "See Also"
    number: "3"
    index: "8"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 7006
    anchor: "See_Also"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "9"
    fromtitle: "Legacy:Lag_Compensation"
    byteoffset: 7152
    anchor: "Discussion"
  displaytitle: "Legacy:Lag Compensation"
  iwlinks: []
  wikitext:
    text: "==General ==\n\nWith the term \"lag compensation\", I refer to everything\
      \ that is in the code to make players suffer less from the effects of lag. For\
      \ example every modern first person shooter has some kind of movement prediction\
      \ build in. Without movement prediction, we couldn't move instantly but every\
      \ move would be delayed by a few milliseconds which would change the gameplay\
      \ a lot (and not to the better).\n\nEven though our movement still lags behind\
      \ on the server for a small amount, at least we don't feel affected by the lag\
      \ when moving.\n\n==Hit Prediction ==\n\n===Introduction ===\n\nOne important\
      \ area in which we still feel the lag is aiming. When shooting projectile weapons,\
      \ our projectile starts a bit delayed (and not instantly like our movement)\
      \ and when shooting hitscan weapons, we have to predict the movement of our\
      \ target and aim a bit ahead of it, praying that it doesn't change direction\
      \ before the shot registers. The problem simply is, that it takes a while for\
      \ the shot to travel to the server and then it will compare your shot information\
      \ (do the trace) to the new timeframe and not the timeframe you actually did\
      \ the shot in. This has a pretty heavy impact on gameplay and is the number\
      \ one reason why a low latency is so important for games like Unreal Tournament.\
      \ \n\n===Clientside Hit Detection ===\n\nOne attempt to solve this is the well\
      \ known ZeroPing (can't find the real link right now, anyone?). In a nutshell,\
      \ ZeroPing simply does all the hitscan hit detection on the client side and\
      \ then tells the server what it hit. Obviously this completely breaks the paradigm\
      \ of not giving any deciding power to the client. Even if you take away the\
      \ threats of cheating, the question remains weither the client can be trusted,\
      \ considering that the client's representation of other actors in the game does\
      \ NOT have to match their actual positions. The client will simulate the movement\
      \ of the other actor until it got a new update about their position and movement,\
      \ so at the client, the target actor will actually move in a straight line,\
      \ until it is \"warped\" to it's new and correct position with the next update.\
      \ Without ZeroPing, there would hardly be any chance to hit those targets, if\
      \ you don't even know where they really are at the moment. With ZeroPing, it\
      \ doesn't matter if the prediction is completely wrong, you can still hit what\
      \ you see, not what is real on the server. But this actively limits the maneuvering\
      \ possibilities of the target. To summarize, while I believe that ZeroPing works\
      \ great to allow people on very high latencies to play and have some fun with\
      \ each other, I don't think that it's the right thing to do in general. Please\
      \ correct me if I'm wrong with anything about ZeroPing or client side hit detection\
      \ in general.\n\n===Introducing Serverside Hit Prediction ===\n\nBesides of\
      \ ZeroPing, there is another approach and this one is actually tried and tested\
      \ by large mainstream games like Counter-Strike. To make it short, the server\
      \ simply stores a trail of timeframes (including the position of each actor)\
      \ for a short time. Whenever a client shoots, the server will move all actors\
      \ back to the timeframe of the client when it actually fired the shot. This\
      \ allows a client to practically shoot at what it sees IF (and this is the important\
      \ point) the client shows all actors at a position matching the positions on\
      \ the server of the same timeframe. \n\n===Implementation ===\n\nIn detail,\
      \ the implementation will work like this: \n* The server needs to store a trail\
      \ for each moving and shootable actor. Each trail has to contain a timestamp,\
      \ a location and a rotation of this actor. This is the simple part.\n* When\
      \ a client shoots, the server needs to know when exactly the client fired this\
      \ shot (servertime). Currently I do it like this: The server replicated ServerTimeStamp\
      \ (a float) to the client. To make this more accurate, the client increases\
      \ this TimeStamp every tick by the time that has passed. Obviously the ServerTimeStamp\
      \ always lags behind on the client, just as much as ever other information from\
      \ the server lags behind (like actor positions).\n\n'''Question''': Is there\
      \ a way to get the same result without replicating a float value each time?\
      \ Or do you think this is acceptable for the case?\n\nTo send the timestamp\
      \ to the server, I simply use a modified fire function which includes the current\
      \ ServerTimeStamp as a parameter.\n* When the server does the actual hitscan,\
      \ it moves all actors to a timestamp which most closely matches the timestamp\
      \ at which the shot was actually fired. Because clients usually run at higher\
      \ FPS than the server, interpolation can be used to get even more precision.\n\
      * Finally, it is important to render beam and impact effects immediately on\
      \ the client and not spawn them on the server first, otherwise it would still\
      \ \"feel\" as if you would have to lead, even though you don't.\n\nThere is\
      \ one problem with machineguns in UT2003. Unlike UT, those guns don't call the\
      \ replicated fire function with each bullet anymore, but only for startfire\
      \ and stopfire. This is obviously a good thing because it doesn't limit the\
      \ firerate to FPS or lag anymore, but a bad thing for us, as we don't know the\
      \ exact time of each shot (as latency can fluctuate a lot). One possibility\
      \ would be to simply ignore the inaccuracies, another possibility would be to\
      \ replicate the ServerTimeStamp from the client to the server constantly, at\
      \ least while a gun is fired. This might be the most accurate way and even usefull\
      \ for other things, but I'm not sure how much of a hit this would be for bandwidth\
      \ usage. Comments?\n\n===Disadvantages ===\n\nObviously you can't simply make\
      \ lag disappear, so every kind of lag compensation is a tradeoff. The drawbacks\
      \ of movement prediction for example are, that a lagging player might seem to\
      \ \"warp\" for other players when the prediction was wrong and has to be corrected.\
      \ If the server was wrong with prediction, it will even allow a certain amount\
      \ of error and correct the position on the server instead of correcting the\
      \ client, so it can seem that other players are warping a bit for you, even\
      \ if your connection is perfectly fast. This is a drawback that is commonly\
      \ accepted because the alternative would be horrible and a tiny bit of warping\
      \ really isn't significant anymore, especially when playing against other people\
      \ with decent pings.\n\nThe major disadvantage of hit prediction is, that you\
      \ can be shot, even though you think you are safe. For example if you take cover\
      \ behind a wall and a split second later the server tells you that you are hit.\
      \ This can be quite irritating, but it happens rarely if at all and even less\
      \ when playing against other people with good pings.\n\nAdditionally, just like\
      \ movement prediction only allows a certain amount of error, hit prediction\
      \ could only compensate for a certain amount of time. This amount could be reduced\
      \ if high ping bastards are too much of an annoyance. A value of 200ms should\
      \ still be fine for most players and shouldn't feel too bad.\n\n==See Also ==\n\
      \n[[Legacy:Hit Prediction|Hit Prediction]] ([[Legacy:Open Source|Open Source]]\
      \ example implementation for [[Legacy:UT2003|UT2003]])\n\n==Discussion ==\n\n\
      '''Spark:''' Phew... Well, this is my first contribution to the Wiki, hopefully\
      \ it's interesting to anyone. I'm really really tired now so I can only hope\
      \ that I didn't make too much mistakes at the end. :) If I made anything wrong\
      \ with the layout, formating or names, please tell (and excuse) me. I'm thinking\
      \ of splitting this into several pages, at least one dedicated page to hit prediction,\
      \ but I wanted to do my \"Hello Wiki World\" on one page at first.\n\nI also\
      \ have a working implementation (an Instagib gametype) here that I would like\
      \ to wikify so it can be looked at, learned from and hopefully be improved (tests\
      \ went really well though). But I will think about how to do that after some\
      \ sleep. :)\n\nAs a final note, I know that hit prediction is a very controversial\
      \ topic and to be honest, I'm a bit tired of pointless arguments about weither\
      \ it should be included in a game or not. I will leave it up to other people\
      \ to create a mutator for UT2003 from this (or not) and then convince people\
      \ to actually use it (or not). So this is mainly targeted to mod developers\
      \ looking to \"unlag\" their mod, especially those which feature mostly hitscan\
      \ weapons (like most realistic mods and Instagib).\n\n'''Dante:''' Sounds interesting.\
      \ But you're increasing server load very much. Take 3 guys firing with mguns,\
      \ and for every trace you take all pawns and move them to the correct location\
      \ for a given timestamp. You could decrease from all pawns to pawns within a\
      \ given angular difference ( aiming from shooter to angle of ( enemy.location\
      \ - location ) ).\n\n'''Spark:''' That's a good idea, but even if the pawn is\
      \ out of this radius it might not be out of the radius after timeshifting. Just\
      \ allowing a large radius wouldn't be enough because an actor could also be\
      \ \"rocketed\" behind the instigator (in close combat) or something like that.\
      \ So an algorithm would need to be found that covers all eventualities and still\
      \ is faster then doing the actual timeshifting. :) Maybe the \"relevent actors\"\
      \ functionality can be used for this? I.e. only timeshift those actors which\
      \ are relevant to the instigator. This would at least cover those actors which\
      \ are completely out of reach and sight.\n\nThe Quake 3 \"unlagged\" implementation\
      \ does also do the timeshifting for each and every player though and I'm not\
      \ aware of any performance problems (that does not mean that it shouldn't be\
      \ improved if possible of course).\n\n'''Dirk Fist:''' I'm on dial up in a rural\
      \ area the lowest ping I've ever had was 300(400 is avg). Your tracking idea\
      \ sounds like a great idea you should realise however that most of the people\
      \ that NEED lag compensation are going to have pings in excess of 200 (assuming\
      \ 10 samples per second with 10 samples per actor would give a max lag of 1000),\
      \ Also you will need to track everything that moves which could stop a projectile.\
      \ If it was'nt for ZP on (UT) I would not be able to play.  Its important to\
      \ note in the above discussion that ALL PLAYERS AIM BASED ON CLIENT SIDE information.\
      \ \n\nhttp://zeroping.home.att.net/\n\n'''xX)(Xx:''' Zeroping weapons cannot\
      \ hit the fortstandards in Assault maps, meaning, AS maps must be played with\
      \ non ZP weapons, or ZP Assault players can only play maps that set it so you\
      \ walk into the fortstandard rather than shoot it"
  properties: []
  revId: 4170
name: "Legacy:Lag Compensation"
revision:
  revid: 4170
  parentid: 4171
  user: "ACBAAF3C.ipt.aol.com"
  timestamp: 1091535677.000000000
  comment: "*"
timestamp: 1668786966.186280000
