---
parse:
  title: "Legacy:Using Binary Trees And Linked Lists To Represent Group Hierarchy"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Disclaimer\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Disclaimer</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Introduction\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Introduction</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Linked_Lists\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Linked Lists</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Binary_Trees\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Binary Trees</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Unreal_Examples\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Unreal Examples</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#The_Linked_List_Example\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">The Linked List\
      \ Example</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"\
      #The_Binary_Tree_Example\"><span class=\"tocnumber\">3.2</span> <span class=\"\
      toctext\">The Binary Tree Example</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-8\"><a href=\"#Conclusion\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Conclusion</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-9\"><a href=\"#Some_thoughts\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Some thoughts</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Disclaimer\">Disclaimer</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=1\"\
      \ title=\"Edit section: Disclaimer\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Note:</b> This page represents an idea for a proposed\
      \ way of coding some particular functionality/behavior in UnrealScript. It does\
      \ not represent the way that <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"\
      mw-redirect\">UT</a>/<a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"\
      mw-redirect\">UT2003</a>/<a href=\"/Legacy:UT2004\" title=\"Legacy:UT2004\"\
      \ class=\"mw-redirect\">UT2004</a> actually do things in the normal game engine.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=2\"\
      \ title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>I was thinking of way to construct classes that could\
      \ behave with other classes in a group fasion. I came across the idea of using\
      \ the C++ ideas of binary trees and linked lists to get the job done. It may\
      \ be put to good use in forming a hierarchy among classes. It allows us to form\
      \ \"groups\" of classes with parents,children, heads, and tails, which can later\
      \ be used to construct \"group\" behaviour. Now, linked lists and binary trees\
      \ can be used, but I feel it depends on the complexity of ones groups. For those\
      \ of you who don't know of linked lists or binary trees, below is an overview\
      \ of the linked list and the binary tree idea.</p>\n<h4><span class=\"mw-headline\"\
      \ id=\"Linked_Lists\">Linked Lists</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=3\"\
      \ title=\"Edit section: Linked Lists\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>A linked list is basically a list of chunks of data\
      \ linked together. Each \"chunk\" of data is known as a node. Each node contains\
      \ some data and some form of \"linking\" itself to another node. In C++, usually\
      \ each node has some data, and a pointer to another node. This form is knows\
      \ as a singly-linked list. Some linked lists have nodes with pointers to the\
      \ the next node, and the previous node in the list. These types of lists are\
      \ known as doubly-linked lists. Each list has a head, and a tail. The head being\
      \ the first node in the list, and the tail being the last node in the lists.\
      \ Linked lists are an effective way of storing complex datatypes in an array-like\
      \ structure.</p>\n<p>Generally, a linked list is used when an array-type structure\
      \ is needed but the final size of the array is not known, or, elements within\
      \ the array are often moved, added, and removed. Linked lists are generally\
      \ un-ordered although elements can be efficiently sorted into position as they\
      \ are added to the list.</p>\n<h4><span class=\"mw-headline\" id=\"Binary_Trees\"\
      >Binary Trees</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=4\"\
      \ title=\"Edit section: Binary Trees\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Binary trees are ways of storing data in hierarchial\
      \ structure composed of nodes (elements of the structure that have children)\
      \ and leaves (elements of the structure that have no children). A binary tree\
      \ has a parent node, and two child nodes.</p>\n<p>Large trees can be constructed\
      \ by having contain more <i>node</i> elements than <i>leaf</i> elements – imagine\
      \ having several layers of nodes with child nodes. This provides a good foundation\
      \ for searching and finding positional status (if the nodes and leaves are ordered).</p>\n\
      <h2><span class=\"mw-headline\" id=\"Unreal_Examples\">Unreal Examples</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=5\"\
      \ title=\"Edit section: Unreal Examples\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h4><span class=\"mw-headline\" id=\"The_Linked_List_Example\"\
      >The Linked List Example</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=6\"\
      \ title=\"Edit section: The Linked List Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Say I wanted to create a group of skaarj that had\
      \ a hierarchy with a leader and a general. I would need two classes, List, and\
      \ ListNode. List could contain a ListNode head, a ListNode tail, and a name\
      \ listName. ListNode could contain an instance of a scripted pawn called _skaarj,\
      \ lowerSkaarj, and higherSkaarj.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">class</span> List <span class=\"kw1\">extends</span> ScriptedPawn;\n\
      \ \n<span class=\"co1\">//global variables</span>\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> ListNode head;\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> ListNode\
      \ tail;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"kw5\">string</span>   listName;</pre></div>\n</div>\n\
      <p>The head could be the leader of the pack, and the tail could be the last\
      \ person in the pack, it is irrelevant, but for this example, that will be true.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> ListNode\
      \ <span class=\"kw1\">extends</span> List;\n \n<span class=\"co1\">//global\
      \ variables</span>\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> Skaarj _skaarj;  <span class=\"co1\">//the data</span>\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> Skaarj lowerSkaarj; <span class=\"co1\">//the previous monster</span>\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> Skaarj higherSkaarj; <span class=\"co1\">//the next monster</span></pre></div>\n\
      </div>\n<p>This node forms a doubly linked list. We will have to modify the\
      \ skaarj class a little to include a list if in a group. So lets do that:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> Skaarj\
      \ <span class=\"kw1\">extends</span> ScriptedPawn;\n \n<span class=\"co1\">//added\
      \ variable</span>\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> List group;</pre></div>\n</div>\n<p>Now we could form\
      \ a hierarchy by creating a List of Skaarj. Say I created a map and in it I\
      \ have six skaarj: Larry, George, Matt, Jack, Tarquin, and Mychaeel. All six\
      \ skaarj have a group since we just added it above. I will now create a list.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> SkaarjGroup\
      \ <span class=\"kw1\">extends</span> List;\n \nlistName <span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"SkaarjGroup1\"</span>;</pre></div>\n</div>\n\
      <p>Now that the list is created we can add the six skaarj to it.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> ListNode LN_Larry;\n<span\
      \ class=\"kw1\">var</span> ListNode LN_George;\n<span class=\"kw1\">var</span>\
      \ ListNode LN_Jack;\n<span class=\"kw1\">var</span> ListNode LN_Tarquin;\n<span\
      \ class=\"kw1\">var</span> ListNode LN_Mychaeel;\n<span class=\"kw1\">var</span>\
      \ ListNode LN_Matt;\n \nLarry.<span class=\"me0\">group</span> <span class=\"\
      sy0\">=</span> SkaarjGroup;\nGeorge.<span class=\"me0\">group</span> <span class=\"\
      sy0\">=</span> SkaarjGroup;\nJack.<span class=\"me0\">group</span> <span class=\"\
      sy0\">=</span> SkaarjGroup;\nTarquin.<span class=\"me0\">group</span> <span\
      \ class=\"sy0\">=</span> SkaarjGroup;\nMychaeel.<span class=\"me0\">group</span>\
      \ <span class=\"sy0\">=</span> SkaarjGroup;\nMatt.<span class=\"me0\">group</span>\
      \ <span class=\"sy0\">=</span> SkaarjGroup;\n \nLN_Larry._skaarj <span class=\"\
      sy0\">=</span> Larry;\nLN_George._skaarj<span class=\"sy0\">=</span> George;\n\
      LN_Jack._skaarj <span class=\"sy0\">=</span> Jack;\nLN_Tarquin._skaarj <span\
      \ class=\"sy0\">=</span> Tarquin;\nLN_Mychaeel._skaarj <span class=\"sy0\">=</span>\
      \ Mychaeel;\nLN_Matt._skaarj <span class=\"sy0\">=</span> Matt;\n \nSkaarjGroup.<span\
      \ class=\"me0\">head</span> <span class=\"sy0\">=</span> LN_Larry;\nSkaarjGroup.<span\
      \ class=\"me0\">tail</span> <span class=\"sy0\">=</span> LN_Matt;\n \nLN_Larry.<span\
      \ class=\"me0\">lowerSkaarj</span> <span class=\"sy0\">=</span> LN_George;\n\
      LN_Larry.<span class=\"me0\">higherSkaarj</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">NULL</span>;\n \nLN_George.<span class=\"me0\">higherSkaarj</span>\
      \ <span class=\"sy0\">=</span> LN_Larry;\nLN_George.<span class=\"me0\">lowerSkaarj</span>\
      \ <span class=\"sy0\">=</span> LN_Jack;\n \nLN_Jack.<span class=\"me0\">higherSkaarj</span>\
      \ <span class=\"sy0\">=</span> LN_George;\nLN_Jack.<span class=\"me0\">lowerSkaarj</span>\
      \ <span class=\"sy0\">=</span> LN_Tarquin;\n \nLN_Tarquin.<span class=\"me0\"\
      >higherSkaarj</span> <span class=\"sy0\">=</span> LN_Jack;\nLN_Tarquin.<span\
      \ class=\"me0\">lowerSkaarj</span> <span class=\"sy0\">=</span> LN_Mychaeel;\n\
      \ \nLN_Mychaeel.<span class=\"me0\">higherSkaarj</span> <span class=\"sy0\"\
      >=</span> LN_Tarquin;\nLN_Mychaeel.<span class=\"me0\">lowerSkaarj</span> <span\
      \ class=\"sy0\">=</span> LN_Matt;\n \nLN_Matt.<span class=\"me0\">higherSkaarj</span>\
      \ <span class=\"sy0\">=</span> LN_Mychaeel;\nLN_Matt.<span class=\"me0\">lowerSkaarj</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">NULL</span>;</pre></div>\n\
      </div>\n<p>Fairly pseudo assuming all this would be done in the map editor by\
      \ the mapper, but that is what would be happening in code.</p>\n<p>As you can\
      \ see this sets up a hierarchy with Larry at the top, Matt at the bottom, and\
      \ George, Jack, Tarquin, and Mychaeel down the list. With this you can setup\
      \ different responsibilities and behaviour:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw2\">if</span><span class=\"br0\">(</span><span class=\"\
      kw6\">self</span> <span class=\"sy0\">=</span> SkaarjGroup.<span class=\"me0\"\
      >head</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n<span\
      \ class=\"co1\">//do stuff</span>\n \n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"The_Binary_Tree_Example\">The Binary\
      \ Tree Example</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=7\"\
      \ title=\"Edit section: The Binary Tree Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Using the same group in the Linked List example, lets\
      \ set it up using a binary tree structure. Lets first start out by creating\
      \ a BinaryTree class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> BinaryTree <span class=\"kw1\">extends</span> ScriptedPawn;\n\
      \ \n<span class=\"kw1\">var</span><span class=\"br0\">(</span>Tree<span class=\"\
      br0\">)</span> Skaarj parent;    <span class=\"co1\">// the parent</span>\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span>Tree<span class=\"\
      br0\">)</span> Skaarj childOne;  <span class=\"co1\">// the first child</span>\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span>Tree<span class=\"\
      br0\">)</span> Skaarj childTwo;  <span class=\"co1\">// the second child</span>\n\
      \ \n \n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Each instance of\
      \ Binary tree will have parent skaarj, a 1st child skaarj, and a 2nd child skaarj.</p>\n\
      <p>Now, as if we were in the editor again, and had the six skaarj, we could\
      \ set this up as so:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> BinaryTree Piece1;\n<span class=\"kw1\">var</span> BinaryTree\
      \ Piece2;\n<span class=\"kw1\">var</span> BinaryTree Piece3;\n \nPiece1.<span\
      \ class=\"me0\">parent</span> <span class=\"sy0\">=</span> Larry;\nPiece1.<span\
      \ class=\"me0\">childOne</span> <span class=\"sy0\">=</span> George;\nPiece1.<span\
      \ class=\"me0\">childTwo</span> <span class=\"sy0\">=</span> Jack;\n \nPiece2.<span\
      \ class=\"me0\">parent</span> <span class=\"sy0\">=</span> Jack;\nPiece2.<span\
      \ class=\"me0\">childOne</span> <span class=\"sy0\">=</span> Tarquin;\nPiece2.<span\
      \ class=\"me0\">childTwo</span> <span class=\"sy0\">=</span> Mychaeel;\n \n\
      Piece3.<span class=\"me0\">parent</span> <span class=\"sy0\">=</span> Mychaeel;\n\
      Piece3.<span class=\"me0\">childOne</span> <span class=\"sy0\">=</span> Matt;\n\
      Piece3.<span class=\"me0\">childTwo</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">NULL</span>;</pre></div>\n</div>\n<p>Of course there are ways\
      \ to get around the Piece idea, it's just much eaisier to understand when it's\
      \ set up like this. We create 3 binary trees and construct a hierarchy from\
      \ it.</p>\n<h2><span class=\"mw-headline\" id=\"Conclusion\">Conclusion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=8\"\
      \ title=\"Edit section: Conclusion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Try it. It will only further your experiece.</p>\n\
      <p><a href=\"/Legacy:C0ry\" title=\"Legacy:C0ry\">C0ry</a></p>\n<p>Questions?</p>\n\
      <p>email me.</p>\n<p>fusion815@cox.net</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Some_thoughts\">Some thoughts</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy?section=9\"\
      \ title=\"Edit section: Some thoughts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>I didn't want to break your lovely example above with\
      \ some unweildy hackings and slashings so I thought I'd comment here.</p>\n\
      <p>As far as I can tell you are attempting to construct a structre that will\
      \ allow groups of objects (in this case enemies) to be handled with some sort\
      \ of priority (superiority) order. Also, that the numbers of objects within\
      \ these groups can change, or are not known. What is shown below is merely a\
      \ suggested class definition. The benefit of abstracting the data elements from\
      \ the actual list element (ListElement) class is that the code can then be re-used\
      \ every other time you need similar functionality.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// I don't know if you can actually subclass\
      \ from object - but this class needs to be as light as you can make it.</span>\n\
      <span class=\"kw1\">class</span> ListElement <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Object</span>;\n \n<span class=\"kw1\">var</span> ListElement\
      \ parent; <span class=\"co1\">// A pointer to the parent element of this object\
      \ -- null if there isn't one.</span>\n<span class=\"kw1\">var</span> ListElement\
      \ child; <span class=\"co1\">// A pointer to the _first_ child element of this\
      \ object -- null if there isn't one.</span>\n<span class=\"kw1\">var</span>\
      \ ListElement next; <span class=\"co1\">// A pointer to the next sibling element\
      \ of this object -- null if there isn't one.</span>\n<span class=\"kw1\">var</span>\
      \ ListElement prev; <span class=\"co1\">// A pointer to the previous element\
      \ of this object -- null if there isn't one.</span>\n \n<span class=\"kw1\"\
      >var</span> <span class=\"kw8\">Object</span> data; <span class=\"co1\">// A\
      \ pointer to the object containing the data to be held in the list -- null if\
      \ there is no data.</span>\n \n<span class=\"co1\">// Functions to add, remove,\
      \ and search for elements go here (see below for more info).</span></pre></div>\n\
      </div>\n<p>Probably the most vital functions needed within this class are the\
      \ <i>AddChild()</i> and <i>AddSibling()</i>. These functions must set the <b>parent</b>\
      \ attribute of the object correctly at the point it is inserted into the list.\
      \ Personally, I'd have functions to handle just about every operation you can\
      \ think of on the class simply because it allows the pointer manipulation to\
      \ be hidden and held all in one place. It also means you can change the way\
      \ in which the data is stored should you need to.</p>\n<p>One thing I would\
      \ note though. If you know you are going to have very few elements in a list\
      \ (say less than 10) then consider using an array and handling the null pointers\
      \ (assuming sparse population). It will be quicker – particularly if the data\
      \ needs to be replicated to the client.</p>\n<p>I think that's all from me.</p>\n\
      <hr />\n<p><b>Foogod:</b> I added the disclaimer at the top, because the way\
      \ these pages are linked from <a href=\"/Legacy:Artificial_Intelligence\" title=\"\
      Legacy:Artificial Intelligence\">Artificial Intelligence</a> could confuse some\
      \ people into thinking this is an explanation of the way that the UT-based games\
      \ actually do things.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.183\
      \ seconds\nReal time usage: 0.610 seconds\nPreprocessor visited node count:\
      \ 109/1000000\nPreprocessor generated node count: 220/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3355-0!*!0!!en!*!*\
      \ and timestamp 20221118024706 and revision id 8660\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:C0ry"
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Disclaimer"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 0
    anchor: "Disclaimer"
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 293
    anchor: "Introduction"
  - toclevel: 2
    level: "4"
    line: "Linked Lists"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 953
    anchor: "Linked_Lists"
  - toclevel: 2
    level: "4"
    line: "Binary Trees"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 1975
    anchor: "Binary_Trees"
  - toclevel: 1
    level: "2"
    line: "Unreal Examples"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 2520
    anchor: "Unreal_Examples"
  - toclevel: 2
    level: "4"
    line: "The Linked List Example"
    number: "3.1"
    index: "6"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 2541
    anchor: "The_Linked_List_Example"
  - toclevel: 2
    level: "4"
    line: "The Binary Tree Example"
    number: "3.2"
    index: "7"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 5392
    anchor: "The_Binary_Tree_Example"
  - toclevel: 1
    level: "2"
    line: "Conclusion"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 6474
    anchor: "Conclusion"
  - toclevel: 1
    level: "2"
    line: "Some thoughts"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Using_Binary_Trees_And_Linked_Lists_To_Represent_Group_Hierarchy"
    byteoffset: 6601
    anchor: "Some_thoughts"
  displaytitle: "Legacy:Using Binary Trees And Linked Lists To Represent Group Hierarchy"
  iwlinks: []
  wikitext:
    text: "==Disclaimer ==\n\n'''Note:''' This page represents an idea for a proposed\
      \ way of coding some particular functionality/behavior in UnrealScript.  It\
      \ does not represent the way that [[Legacy:UT|UT]]/[[Legacy:UT2003|UT2003]]/[[Legacy:UT2004|UT2004]]\
      \ actually do things in the normal game engine.\n\n==Introduction==\n\nI was\
      \ thinking of way to construct classes that could behave with other classes\
      \ in a group fasion.  I came across the idea of using the C++ ideas of binary\
      \ trees and linked lists to get the job done.  It may be put to good use in\
      \ forming a hierarchy among classes.  It allows us to form \"groups\" of classes\
      \ with parents,children, heads, and tails, which can later be used to construct\
      \ \"group\" behaviour.  Now, linked lists and binary trees can be used, but\
      \ I feel it depends on the complexity of ones groups.  For those of you who\
      \ don't know of linked lists or binary trees, below is an overview of the linked\
      \ list and the binary tree idea.\n\n====Linked Lists====\n\nA linked list is\
      \ basically a list of chunks of data linked together.  Each \"chunk\" of data\
      \ is known as a node.  Each node contains some data and some form of \"linking\"\
      \ itself to another node.  In C++, usually each node has some data, and a pointer\
      \ to another node.  This form is knows as a singly-linked list.  Some linked\
      \ lists have nodes with pointers to the the next node, and the previous node\
      \ in the list.  These types of lists are known as doubly-linked lists.  Each\
      \ list has a head, and a tail.  The head being the first node in the list, and\
      \ the tail being the last node in the lists.  Linked lists are an effective\
      \ way of storing complex datatypes in an array-like structure.\n\nGenerally,\
      \ a linked list is used when an array-type structure is needed but the final\
      \ size of the array is not known, or, elements within the array are often moved,\
      \ added, and removed.  Linked lists are generally un-ordered although elements\
      \ can be efficiently sorted into position as they are added to the list.\n\n\
      ====Binary Trees====\n\nBinary trees are ways of storing data in hierarchial\
      \ structure composed of nodes (elements of the structure that have children)\
      \ and leaves (elements of the structure that have no children).  A binary tree\
      \ has a parent node, and two child nodes.\n\nLarge trees can be constructed\
      \ by having contain more ''node'' elements than ''leaf'' elements &ndash; imagine\
      \ having several layers of nodes with child nodes.  This provides a good foundation\
      \ for searching and finding positional status (if the nodes and leaves are ordered).\n\
      \n==Unreal Examples==\n\n====The Linked List Example====\n\nSay I wanted to\
      \ create a group of skaarj that had a hierarchy with a leader and a general.\
      \ I would need two classes, List, and ListNode.  List could contain a ListNode\
      \ head, a ListNode tail, and a name listName.  ListNode could contain an instance\
      \ of a scripted pawn called _skaarj, lowerSkaarj, and higherSkaarj.\n\n<uscript>\n\
      \nclass List extends ScriptedPawn;\n\n//global variables\n\nvar() ListNode head;\n\
      var() ListNode tail;\nvar() string   listName;\n\n</uscript>\n\nThe head could\
      \ be the leader of the pack, and the tail could be the last person in the pack,\
      \ it is irrelevant, but for this example, that will be true.\n\n<uscript>\n\n\
      class ListNode extends List;\n\n//global variables\n\nvar() Skaarj _skaarj;\
      \  //the data\nvar() Skaarj lowerSkaarj; //the previous monster\nvar() Skaarj\
      \ higherSkaarj; //the next monster\n\n</uscript>\n\nThis node forms a doubly\
      \ linked list.  We will have to modify the skaarj class a little to include\
      \ a list if in a group.  So lets do that:\n\n<uscript>\n\nclass Skaarj extends\
      \ ScriptedPawn;\n\n//added variable\nvar() List group;\n\n</uscript>\n\nNow\
      \ we could form a hierarchy by creating a List of Skaarj.  Say I created a map\
      \ and in it I have six skaarj: Larry, George, Matt, Jack, Tarquin, and Mychaeel.\
      \  All six skaarj have a group since we just added it above.  I will now create\
      \ a list.\n\n<uscript>\n\nclass SkaarjGroup extends List;\n\nlistName = \"SkaarjGroup1\"\
      ; \n\n</uscript>\n\nNow that the list is created we can add the six skaarj to\
      \ it.\n\n<uscript>\n\nvar ListNode LN_Larry;\nvar ListNode LN_George;\nvar ListNode\
      \ LN_Jack;\nvar ListNode LN_Tarquin;\nvar ListNode LN_Mychaeel;\nvar ListNode\
      \ LN_Matt;\n\nLarry.group = SkaarjGroup;\nGeorge.group = SkaarjGroup;\nJack.group\
      \ = SkaarjGroup;\nTarquin.group = SkaarjGroup;\nMychaeel.group = SkaarjGroup;\n\
      Matt.group = SkaarjGroup;\n\nLN_Larry._skaarj = Larry;\nLN_George._skaarj= George;\n\
      LN_Jack._skaarj = Jack;\nLN_Tarquin._skaarj = Tarquin;\nLN_Mychaeel._skaarj\
      \ = Mychaeel;\nLN_Matt._skaarj = Matt;\n\nSkaarjGroup.head = LN_Larry;\nSkaarjGroup.tail\
      \ = LN_Matt;\n\nLN_Larry.lowerSkaarj = LN_George;\nLN_Larry.higherSkaarj = NULL;\n\
      \nLN_George.higherSkaarj = LN_Larry;\nLN_George.lowerSkaarj = LN_Jack;\n\nLN_Jack.higherSkaarj\
      \ = LN_George;\nLN_Jack.lowerSkaarj = LN_Tarquin;\n\nLN_Tarquin.higherSkaarj\
      \ = LN_Jack;\nLN_Tarquin.lowerSkaarj = LN_Mychaeel;\n\nLN_Mychaeel.higherSkaarj\
      \ = LN_Tarquin;\nLN_Mychaeel.lowerSkaarj = LN_Matt;\n\nLN_Matt.higherSkaarj\
      \ = LN_Mychaeel;\nLN_Matt.lowerSkaarj = NULL;\n\n</uscript>\n\nFairly pseudo\
      \ assuming all this would be done in the map editor by the mapper, but that\
      \ is what would be happening in code.\n\nAs you can see this sets up a hierarchy\
      \ with Larry at the top, Matt at the bottom, and George, Jack, Tarquin, and\
      \ Mychaeel down the list.  With this you can setup different responsibilities\
      \ and behaviour:\n\n<uscript>\n\nif(self = SkaarjGroup.head) {\n\n//do stuff\n\
      \n}\n\n</uscript>\n\n====The Binary Tree Example====\n\nUsing the same group\
      \ in the Linked List example, lets set it up using a binary tree structure.\
      \  Lets first start out by creating a BinaryTree class:\n\n<uscript>\n\nclass\
      \ BinaryTree extends ScriptedPawn;\n\nvar(Tree) Skaarj parent;    // the parent\n\
      var(Tree) Skaarj childOne;  // the first child\nvar(Tree) Skaarj childTwo; \
      \ // the second child\n\n\n}\n\n</uscript>\n\nEach instance of Binary tree will\
      \ have parent skaarj, a 1st child skaarj, and a 2nd child skaarj.\n\nNow, as\
      \ if we were in the editor again, and had the six skaarj, we could set this\
      \ up as so:\n\n<uscript>\n\nvar BinaryTree Piece1;\nvar BinaryTree Piece2;\n\
      var BinaryTree Piece3;\n\nPiece1.parent = Larry;\nPiece1.childOne = George;\n\
      Piece1.childTwo = Jack;\n\nPiece2.parent = Jack;\nPiece2.childOne = Tarquin;\n\
      Piece2.childTwo = Mychaeel;\n\nPiece3.parent = Mychaeel;\nPiece3.childOne =\
      \ Matt;\nPiece3.childTwo = NULL;\n\n</uscript>\n\nOf course there are ways to\
      \ get around the Piece idea, it's just much eaisier to understand when it's\
      \ set up like this.  We create 3 binary trees and construct a hierarchy from\
      \ it.\n\n==Conclusion==\n\nTry it. It will only further your experiece.\n\n\
      [[Legacy:C0ry|C0ry]]\n\nQuestions?\n\nemail me. \n\nfusion815@cox.net\n\n==Some\
      \ thoughts ==\n\nI didn't want to break your lovely example above with some\
      \ unweildy hackings and slashings so I thought I'd comment here.\n\nAs far as\
      \ I can tell you are attempting to construct a structre that will allow groups\
      \ of objects (in this case enemies) to be handled with some sort of priority\
      \ (superiority) order.  Also, that the numbers of objects within these groups\
      \ can change, or are not known.  What is shown below is merely a suggested class\
      \ definition.  The benefit of abstracting the data elements from the actual\
      \ list element (ListElement) class is that the code can then be re-used every\
      \ other time you need similar functionality.\n\n<uscript>\n// I don't know if\
      \ you can actually subclass from object - but this class needs to be as light\
      \ as you can make it.\nclass ListElement extends Object;\n\nvar ListElement\
      \ parent; // A pointer to the parent element of this object -- null if there\
      \ isn't one.\nvar ListElement child; // A pointer to the _first_ child element\
      \ of this object -- null if there isn't one.\nvar ListElement next; // A pointer\
      \ to the next sibling element of this object -- null if there isn't one.\nvar\
      \ ListElement prev; // A pointer to the previous element of this object -- null\
      \ if there isn't one.\n\nvar Object data; // A pointer to the object containing\
      \ the data to be held in the list -- null if there is no data.\n\n// Functions\
      \ to add, remove, and search for elements go here (see below for more info).\n\
      </uscript>\n\nProbably the most vital functions needed within this class are\
      \ the ''AddChild()'' and ''AddSibling()''.  These functions must set the '''parent'''\
      \ attribute of the object correctly at the point it is inserted into the list.\
      \  Personally, I'd have functions to handle just about every operation you can\
      \ think of on the class simply because it allows the pointer manipulation to\
      \ be hidden and held all in one place.  It also means you can change the way\
      \ in which the data is stored should you need to.\n\nOne thing I would note\
      \ though.  If you know you are going to have very few elements in a list (say\
      \ less than 10) then consider using an array and handling the null pointers\
      \ (assuming sparse population).  It will be quicker &ndash; particularly if\
      \ the data needs to be replicated to the client.\n\nI think that's all from\
      \ me.\n\n----\n\n'''Foogod:''' I added the disclaimer at the top, because the\
      \ way these pages are linked from [[Legacy:Artificial Intelligence|Artificial\
      \ Intelligence]] could confuse some people into thinking this is an explanation\
      \ of the way that the UT-based games actually do things."
  properties: []
  revId: 8660
name: "Legacy:Using Binary Trees And Linked Lists To Represent Group Hierarchy"
revision:
  revid: 8660
  parentid: 8662
  user: "SuperApe"
  timestamp: 1132193162.000000000
  comment: "*"
timestamp: 1668766799.252912000
