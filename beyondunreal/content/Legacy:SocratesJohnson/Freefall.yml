---
parse:
  title: "Legacy:SocratesJohnson/Freefall"
  text:
    text: "<p>--Freefall –</p>\n<p>Freefall is a <a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">mutator</a> that turns off the gravity. I've given the players\
      \ the ability to bounce off walls, or really any available surface that's near\
      \ enough. Just face away from a wall and press space to push off.</p>\n<p>I\
      \ don't reccommend using this on a large open-air map, it would be quite deadly\
      \ to be caught drifting slowly through the sky so anyone can get a potshot at\
      \ you.</p>\n<p>The idea is basically from the book Ender's Game by Orson Scott\
      \ Card in which children train in a battle school in Earth's orbit fighting\
      \ within student-headed armies with Lasertag-esque guns in zero gravity.</p>\n\
      <p>The concept gives first person shooter combat an extra spice. It can be tricky\
      \ to get used to it, especially since I've removed any ability to move other\
      \ then bouncing or rotating, but I've found with practice I could move around\
      \ quite well.</p>\n<p>There are a few things I want to play around with more.\
      \ It would be nice to be able to play against AI controlled bots; they have\
      \ no clue what to do and just sit there letting you shoot them. That's quite\
      \ a challenge. It would also be great to be able to unlimit the player's yaw\
      \ movement. I find it annoying in a zero-G environment that a player view can't\
      \ push beyond a fully \"up\" or \"down\" position as in normal FPS play although\
      \ solving that problem will be tricky. I imagine getting rid of that might not\
      \ be popular with players so used to the concept of up and down. I might try\
      \ to tweak how the bounce angle works to make it easier on the player to judge\
      \ the way he goes; currently the acceleration is just using vector addition.\
      \ I'm thinking of angling it a bit more away from the current direction of movement\
      \ as some sort of correction scheme. Also it would be cool to have different\
      \ weapons kick you back different rates when they're fired. Currently explosions\
      \ will toss you around as will the shield glove if you use it against a wall.</p>\n\
      <p>I've probably done a no-no by subclassing <a href=\"/Legacy:PlayerController\"\
      \ title=\"Legacy:PlayerController\">PlayerController</a> like it says NOT to\
      \ do on the<a href=\"/Legacy:Maintaining_Compatibility\" title=\"Legacy:Maintaining\
      \ Compatibility\">Maintaining Compatibility</a> but I couldn't find a good way\
      \ to get the massive changes in movement to work. I would appreciate any advice\
      \ on the subject since I'm sure I'm probably going about some things in the\
      \ wrong way. I almost wish I choose an easier mutator to implement for my first\
      \ go because this was a real bear.</p>\n<p>Please download the <i>latest version</i>\
      \ (Version 101, 3/11/03) of the UMOD file here: <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://www.lloydslounge.org/freefall/Freefall.umod\"\
      >http://www.lloydslounge.org/freefall/Freefall.umod</a></p>\n<p>Just for fun's\
      \ sake I'll include the source (old):</p>\n<h3><span class=\"mw-headline\" id=\"\
      MutZeroG.uc\">MutZeroG.uc</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SocratesJohnson/Freefall?section=1\"\
      \ title=\"Edit section: MutZeroG.uc\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MutZeroG <span class=\"kw1\">extends</span> <span class=\"\
      kw9\">Mutator</span>;\n \n<span class=\"kw1\">var</span> <span class=\"kw5\"\
      >name</span> FreefallState;\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> MutatorIsAllowed<span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n\t<span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw4\">PreBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> class<span class=\"sy0\">&lt;</span>Pawn<span class=\"\
      sy0\">&gt;</span> GamePawn<span class=\"re0\">Class</span>&lt; SEMI &gt;\n \n\
      \  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"MutZeroG:PreBeginPlay()\"</span>, <span class=\"st0\">'FF'</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span><span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    <span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"kw1\">default</span>.<span class=\"\
      me0\">PlayerControllerClassName</span> <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"Freefall.ZeroGxPlayer\"</span>;\n    <span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"me0\">PlayerControllerClass</span>\
      \ <span class=\"sy0\">=</span> class<span class=\"sy0\">&lt;</span>PlayerController<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Freefall.ZeroGxPlayer\"</span>,\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'Class'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n    GamePawnClass <span class=\"\
      sy0\">=</span> class<span class=\"sy0\">&lt;</span>Pawn<span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">DynamicLoadObject</span><span class=\"\
      br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">DefaultPlayerClassName</span>, <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Class'</span> <span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>;\n    GamePawnClass.<span class=\"kw1\">default</span>.<span class=\"\
      me0\">LandMovementState</span> <span class=\"sy0\">=</span> FreefallState;\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"MutZeroG:PreBeginPlay() done\"</span>, <span\
      \ class=\"st0\">'FF'</span><span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"MutZeroG:PostBeginPlay()\"</span>, <span class=\"st0\">'FF'</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw6\">Super</span>.<span class=\"\
      kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"kw7\">Level</span>.<span class=\"me0\">DefaultGravity</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n  <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"MutZeroG:PostBeginPlay()\
      \ done\"</span>, <span class=\"st0\">'FF'</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> CheckReplacement<span class=\"br0\">(</span><span class=\"\
      kw9\">Actor</span> other, <span class=\"kw1\">out</span> <span class=\"kw5\"\
      >byte</span> bSuperRelevant<span class=\"br0\">)</span> <span class=\"br0\"\
      >{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw9\">PhysicsVolume</span>\
      \ PV;\n \n  PV <span class=\"sy0\">=</span> <span class=\"kw9\">PhysicsVolume</span><span\
      \ class=\"br0\">(</span>other<span class=\"br0\">)</span>;\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> PV <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n    PV.<span class=\"me0\">Gravity</span>.<span class=\"me0\"\
      >Z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n  <span\
      \ class=\"br0\">}</span>\n \n\t<span class=\"kw2\">return</span> <span class=\"\
      kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n  IconMaterialName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"MutatorArt.nosym\"</span>\n  ConfigMenuClassName<span class=\"\
      sy0\">=</span><span class=\"st0\">\"\"</span>\n  GroupName<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Gravity\"</span>\n  FriendlyName<span class=\"\
      sy0\">=</span><span class=\"st0\">\"ZeroG\"</span>\n  Description<span class=\"\
      sy0\">=</span><span class=\"st0\">\"No Gravity.\"</span>\n  <span class=\"kw7\"\
      >RemoteRole</span><span class=\"sy0\">=</span><span class=\"kw7\">ROLE_SimulatedProxy</span>\n\
      \  bAlwaysRelevant<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      \  FreefallState<span class=\"sy0\">=</span>PlayerFreefall; \n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"ZeroGxPlayer.uc\"\
      >ZeroGxPlayer.uc</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SocratesJohnson/Freefall?section=2\" title=\"\
      Edit section: ZeroGxPlayer.uc\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> ZeroGxPlayer <span class=\"kw1\">extends</span> <span class=\"\
      kw9\">xPlayer</span>;\n \n<span class=\"kw1\">var</span> <span class=\"kw5\"\
      >float</span> fBounceAcceleration;\n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">float</span> fBounceDistance;\n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">float</span> fBounceAntiDrag;\n \n<span class=\"kw1\">function</span>\
      \ EnterStartState<span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">name</span> NewState;\n  <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"ZeroGxPlayer:EnterStartState()\"</span>,\
      \ <span class=\"st0\">'FF'</span><span class=\"br0\">)</span>;\n \n  NewState\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">'PlayerFreefall'</span>;\n\
      \ \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      kw3\">IsInState</span><span class=\"br0\">(</span>NewState<span class=\"br0\"\
      >)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span\
      \ class=\"kw3\">BeginState</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n    <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span>NewState<span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"ZeroGxPlayer:EnterStartState() done\"</span>, <span class=\"\
      st0\">'FF'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">state</span> PlayerFreefall <span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">ignores</span> SeePlayer, HearNoise, <span class=\"kw4\"\
      >Bump</span>;\n \n  <span class=\"kw1\">function</span> PlayerMove<span class=\"\
      br0\">(</span><span class=\"kw5\">float</span> DeltaTime<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> view, endPoint, acc;\n    <span class=\"\
      co1\">//log(\"ZeroGxPlayer:PlayerMove()\", 'FF');</span>\n \n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>bPressedJump<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n      bPressedJump <span class=\"sy0\"\
      >=</span> <span class=\"kw6\">false</span>;\n      view <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">Vector</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span>.<span class=\"me0\">GetViewRotation</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \      endPoint <span class=\"sy0\">=</span> <span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">-</span> <span class=\"\
      br0\">(</span>view <span class=\"sy0\">*</span> fBounceDistance<span class=\"\
      br0\">)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"sy0\">!</span><span class=\"kw9\">Pawn</span>.<span class=\"kw4\"\
      >FastTrace</span><span class=\"br0\">(</span>endPoint<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n        acc <span class=\"\
      sy0\">=</span> fBounceAcceleration <span class=\"sy0\">*</span> view;\n    \
      \  <span class=\"br0\">}</span>\n      <span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw7\">Acceleration</span> <span class=\"sy0\">=</span> acc;\n    <span\
      \ class=\"br0\">}</span>\n    <span class=\"kw2\">else</span> <span class=\"\
      br0\">{</span>\n      <span class=\"kw9\">Pawn</span>.<span class=\"kw7\">Acceleration</span>\
      \ <span class=\"sy0\">*=</span> <span class=\"nu0\">0.9</span>;\n      <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span><span class=\"kw9\">Pawn</span>.<span class=\"kw7\"\
      >Acceleration</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>\
      \ <span class=\"kw3\">VSize</span><span class=\"br0\">(</span><span class=\"\
      kw9\">Pawn</span>.<span class=\"kw7\">Velocity</span> <span class=\"sy0\">*</span>\
      \ fBounceAntiDrag<span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n        <span class=\"kw9\">Pawn</span>.<span class=\"\
      kw7\">Acceleration</span> <span class=\"sy0\">=</span> <span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw7\">Velocity</span> <span class=\"sy0\">*</span> fBounceAntiDrag;\n\
      \      <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n \
      \   <span class=\"co1\">// Update rotation.</span>\n    UpdateRotation<span\
      \ class=\"br0\">(</span>DeltaTime, <span class=\"nu0\">2</span><span class=\"\
      br0\">)</span>;\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Role</span> <span class=\"sy0\">&lt;</span> <span class=\"\
      kw7\">ROLE_Authority</span> <span class=\"br0\">)</span> <span class=\"br0\"\
      >{</span> <span class=\"co1\">// then save this move and replicate it</span>\n\
      \      <span class=\"co1\">//log(\"ZeroGxPlayer:PlayMove ReplicateMove\", 'FF');</span>\n\
      \      ReplicateMove<span class=\"br0\">(</span>DeltaTime, <span class=\"kw9\"\
      >Pawn</span>.<span class=\"kw7\">Acceleration</span>, DCLICK_None, <span class=\"\
      kw3\">rot</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n    <span class=\"\
      kw2\">else</span> <span class=\"br0\">{</span>\n      <span class=\"co1\">//log(\"\
      ZeroGxPlayer:PlayMove ProcessMove\", 'FF');</span>\n      ProcessMove<span class=\"\
      br0\">(</span>DeltaTime, <span class=\"kw9\">Pawn</span>.<span class=\"kw7\"\
      >Acceleration</span>, DCLICK_None, <span class=\"kw3\">rot</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"co1\">//log(\"ZeroGxPlayer:PlayMove\
      \ done\", 'FF');</span>\n  <span class=\"br0\">}</span>\n \n  <span class=\"\
      kw1\">function</span> <span class=\"kw3\">BeginState</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span\
      \ class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"\
      ZeroGxPlayer:beginning Freefall state\"</span>, <span class=\"st0\">'FF'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"co1\">//Pawn.Velocity.Z = 1.0;</span>\n\
      \    <span class=\"kw9\">Pawn</span>.<span class=\"kw4\">SetPhysics</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">PHYS_Flying</span><span class=\"\
      br0\">)</span>;\n    <span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"ZeroGxPlayer:beginning Freefall state done\"</span>, <span\
      \ class=\"st0\">'FF'</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n \n<span class=\"br0\">}</span>\n \n \n<span class=\"kw1\">defaultproperties</span>\
      \ <span class=\"br0\">{</span>\n  fBounceAcceleration <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">1500.0</span>;\n  fBounceDistance <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">150.0</span>;\n  fBounceAntiDrag <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0.15</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>–Code Notes –</p>\n<p>I was originally using PHYS_Falling for the\
      \ player state. Seemed to make since for a Free<i>FALL</i> mutator. It was a\
      \ bit tough since the physics engine wanted to set the player in PHYS_Walking\
      \ whenever he touched the floor. Getting around that wasn't too difficult since\
      \ I just could override the landed() method (I think that's the name) as well\
      \ as change the physics back to PHYS_Falling if it was in anything else. One\
      \ interesting thing to note about PHYS_Falling is that it completely ignores\
      \ any acceleration in the Z direction. I imagine it only takes into account\
      \ the effects of the gravity in the particular zone the pawn is in. After trying\
      \ many different ways of getting around that limitation with little to no effect\
      \ I decided to go with PHYS_Flying. The problem with that physics mode is that\
      \ is automatically reduces the pawn's velocity over time kind of like you'd\
      \ see with some manner of friction. The effect was very noticible and unacceptable.\
      \ I believe the cheat-Flying mode that allows the user to stop on a dime has\
      \ something to do with this effect. The code above that deals with fBounceAntiDrag\
      \ eliminates this problem by keeping an acceleration vector on the pawn in the\
      \ same direction as the pawn was traveling to counteract the drag. I came at\
      \ using 0.15 for a multiplier just by trial and error.</p>\n<p>→Comments →</p>\n\
      <p><b>Mecha:</b> It's a good start. It really seems like it needs custom maps;\
      \ I can do a bit of free-fall follies in DM-Oceanic, but static meshes tend\
      \ to trip you up when you catch on them. It'd also be interesting to have a\
      \ grapple or jetpack to boost yourself around with, since x-loc'ing doesn't\
      \ change your momentum.</p>\n<p>I sympathise with maintaining compatibility.\
      \ I smashed my head against getting the pawns to register hitwalls(without changing\
      \ the pawn/playercontroller) for a solid month before giving up.</p>\n<dl>\n\
      <dt>Code notes</dt>\n<dd></dd>\n</dl>\n<ul>\n<li>All you need to do to change\
      \ the playercontroller is in PostBeginPlay. There's not much reason to use Pre,\
      \ and could potentially cause problems on a network.</li>\n<li>Replacing only\
      \ the actual PlayerController does weird things to the bots. I've managed to\
      \ shock them out of the standstill(which is probably because they're trying\
      \ to move regularly), and if they touch the floor, they will get set to PHYS_Walking,\
      \ and run around like normal–until they try to jump, where they stop again since\
      \ PHYS_Falling is probably getting confused.</li>\n<li>You shouldn't be replacing\
      \ the <b>default</b> player controller or movement state–once the mutator is\
      \ used, players(not bots!) will be unable to move until they quit and restart\
      \ the game itself, even if switching gametypes and removing the mutator.</li>\n\
      </ul>\n<p>So get rid of the PreBeginPlay function, and your PostBeginPlay function\
      \ should look something like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"MutZeroG:PostBeginPlay()\"</span>, <span class=\"st0\">'FF'</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw7\">Level</span>.<span class=\"\
      kw7\">Game</span>.<span class=\"me0\">PlayerControllerClassName</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Freefall.ZeroGxPlayer\"</span>;\n\
      \  <span class=\"kw7\">Level</span>.<span class=\"me0\">DefaultGravity</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n  <span class=\"\
      kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n  <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MutZeroG:PostBeginPlay() done\"\
      </span>, <span class=\"st0\">'FF'</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>and that will take care of\
      \ any lingering effects.</p>\n<p><b>Piglet:</b> Really pretty cool, it's just\
      \ ashame the bots dont like it much, oh well. By lasertag style guns do you\
      \ mean simmilar to my <a href=\"/Legacy:Piglet/LaserTag\" title=\"Legacy:Piglet/LaserTag\"\
      >Piglet/LaserTag</a> mutator, i've tested them together and the work fairly\
      \ well together (except I of course couldn't play with bots and we've only one\
      \ computer fast enough for UT2003 so i couldnt play networked either&#160;:(\
      \ ). Anyway a very nice idea, though it would probably be even cooler with some\
      \ form of jetpacky thing (maybe replacement for shieldguns crappy secondary\
      \ fire) and new maps.</p>\n<p><b>SocratesJohnson:</b> Hey thanks for the feedback!\
      \ Mecha, I haven't had a chance to implement that code change, I have seen that\
      \ problem requiring a restart like you said, that change should do the trick.\
      \ I agree with the custom maps, although I don't really have any experience\
      \ mapping. Please be my guest if anyone is interested! &#160;:D I'm going to\
      \ have to try and do something to get the bots to understand what's going on\
      \ but I imagine it will be a bit tricky. Piglet, the guns in the novel would\
      \ freze portions of the suit everyone was wearing, so a hit to the arm would\
      \ disable that arm (BTW it's a fantastic book!). I'll have to try it with your\
      \ mutator as well, I'm glad to hear they played nice! I think jetpacks might\
      \ be a bit much but I like the idea of a grappling hook. Does a mutator exist\
      \ for grappling hooks yet? If not I'd love to try and implement one, maybe replace\
      \ the shieldgun's crappy secondary fire like you said.&#160;:) I think I have\
      \ some time to work on this stuff tonight. Once again, thanks for the input!</p>\n\
      <p><b>Mecha:</b> Captain Kewl has notes on building a grapple in his <a href=\"\
      /edit/Legacy:Developer_Journals/Captain_Kewl?redlink=1\" class=\"new\" title=\"\
      Legacy:Developer Journals/Captain Kewl (page does not exist)\">journal</a>.\
      \ It's not a terribly hard concept, but might take some practice. He also has\
      \ some notes on correctly replicating client acceleration, which may answer\
      \ the questions you posed to dma.</p>\n<p>For teaching the bots what to do,\
      \ you will probably need to change how they react to physics and hitwalls before\
      \ actually changing their Orders function. Botpathing may also be a big factor\
      \ in trying to get them to go places. I know that the author of Greed complained\
      \ that invalid results for FindPathToward() in a bot will slow down the engine\
      \ considerably; Epic is supposedly fixing this in the next patch.</p>\n<p><b>SocratesJohnson:</b>\
      \ Implemented your suggested change and it works like a charm! Thanks! I'll\
      \ create a new UMOD file tonight hopefully. I also started work on a grapple\
      \ mutator, just laid some preliminary framework based on the <a href=\"/Legacy:TransLauncher\"\
      \ title=\"Legacy:TransLauncher\">TransLauncher</a> and related code. Thanks\
      \ for the pointers!</p>\n<p><b>SocratesJohnson:</b> Updated the UMOD file with\
      \ version 101 a week ago but forgot to mention it here.&#160;:D The source on\
      \ this page is still old, I'll update it when I get a chance.</p>\n<p><b>Mysterial:</b>FindPathToward()\
      \ appears to be fixed since the 2217 beta patch.</p>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.125 seconds\nReal time usage: 0.126 seconds\nPreprocessor\
      \ visited node count: 22/1000000\nPreprocessor generated node count: 72/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2834-0!*!0!!*!*!*\
      \ and timestamp 20221118161726 and revision id 7581\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:TransLauncher"
  - ns: 100
    exists: false
    name: "Legacy:Developer Journals/Captain Kewl"
  - ns: 100
    exists: true
    name: "Legacy:Piglet/LaserTag"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:Maintaining Compatibility"
  templates: []
  images: []
  externallinks:
  - "http://www.lloydslounge.org/freefall/Freefall.umod"
  sections:
  - toclevel: 1
    level: "3"
    line: "MutZeroG.uc"
    number: "1"
    index: "1"
    fromtitle: "Legacy:SocratesJohnson/Freefall"
    byteoffset: 2588
    anchor: "MutZeroG.uc"
  - toclevel: 1
    level: "3"
    line: "ZeroGxPlayer.uc"
    number: "2"
    index: "2"
    fromtitle: "Legacy:SocratesJohnson/Freefall"
    byteoffset: 3903
    anchor: "ZeroGxPlayer.uc"
  displaytitle: "Legacy:SocratesJohnson/Freefall"
  iwlinks: []
  wikitext:
    text: "--Freefall &ndash;\n\nFreefall is a [[Legacy:Mutator|mutator]] that turns\
      \ off the gravity.  I've given the players the ability to bounce off walls,\
      \ or really any available surface that's near enough. Just face away from a\
      \ wall and press space to push off.\n\nI don't reccommend using this on a large\
      \ open-air map, it would be quite deadly to be caught drifting slowly through\
      \ the sky so anyone can get a potshot at you.\n\nThe idea is basically from\
      \ the book Ender's Game by Orson Scott Card in which children train in a battle\
      \ school in Earth's orbit fighting within student-headed armies with Lasertag-esque\
      \ guns in zero gravity.\n\nThe concept gives first person shooter combat an\
      \ extra spice. It can be tricky to get used to it, especially since I've removed\
      \ any ability to move other then bouncing or rotating, but I've found with practice\
      \ I could move around quite well.\n\nThere are a few things I want to play around\
      \ with more. It would be nice to be able to play against AI controlled bots;\
      \ they have no clue what to do and just sit there letting you shoot them. That's\
      \ quite a challenge. It would also be great to be able to unlimit the player's\
      \ yaw movement. I find it annoying in a zero-G environment that a player view\
      \ can't push beyond a fully \"up\" or \"down\" position as in normal FPS play\
      \ although solving that problem will be tricky. I imagine getting rid of that\
      \ might not be popular with players so used to the concept of up and down. I\
      \ might try to tweak how the bounce angle works to make it easier on the player\
      \ to judge the way he goes; currently the acceleration is just using vector\
      \ addition. I'm thinking of angling it a bit more away from the current direction\
      \ of movement as some sort of correction scheme.  Also it would be cool to have\
      \ different weapons kick you back different rates when they're fired.  Currently\
      \ explosions will toss you around as will the shield glove if you use it against\
      \ a wall.\n\nI've probably done a no-no by subclassing [[Legacy:PlayerController|PlayerController]]\
      \ like it says NOT to do on the[[Legacy:Maintaining Compatibility|Maintaining\
      \ Compatibility]] but I couldn't find a good way to get the massive changes\
      \ in movement to work.  I would appreciate any advice on the subject since I'm\
      \ sure I'm probably going about some things in the wrong way.  I almost wish\
      \ I choose an easier mutator to implement for my first go because this was a\
      \ real bear.\n\nPlease download the ''latest version'' (Version 101, 3/11/03)\
      \ of the UMOD file here:  http://www.lloydslounge.org/freefall/Freefall.umod\n\
      \nJust for fun's sake I'll include the source (old):\n\n===MutZeroG.uc===\n\n\
      <uscript>\nclass MutZeroG extends Mutator;\n\nvar name FreefallState;\n\nfunction\
      \ bool MutatorIsAllowed() {\n\treturn true;\n}\n\nfunction PreBeginPlay() {\n\
      \  local class<Pawn> GamePawnClass;\n\n  log(\"MutZeroG:PreBeginPlay()\", 'FF');\n\
      \  if (Level.Game!=None) {\n    Level.Game.default.PlayerControllerClassName\
      \ = \"Freefall.ZeroGxPlayer\";\n    Level.Game.PlayerControllerClass = class<PlayerController>(DynamicLoadObject(\"\
      Freefall.ZeroGxPlayer\", class'Class'));\n    GamePawnClass = class<Pawn>( DynamicLoadObject(\
      \ Level.Game.DefaultPlayerClassName, class'Class' ) );\n    GamePawnClass.default.LandMovementState\
      \ = FreefallState;\n  }\n  log(\"MutZeroG:PreBeginPlay() done\", 'FF');\n}\n\
      \nfunction PostBeginPlay() {\n  log(\"MutZeroG:PostBeginPlay()\", 'FF');\n\t\
      Super.PostBeginPlay();\n\tLevel.DefaultGravity = 0.0;\n  log(\"MutZeroG:PostBeginPlay()\
      \ done\", 'FF');\n}\n\nfunction bool CheckReplacement(Actor other, out byte\
      \ bSuperRelevant) {\n  local PhysicsVolume PV;\n    \n  PV = PhysicsVolume(other);\n\
      \    \n\tif ( PV != None ) {\n    PV.Gravity.Z = 0.0;\n  }\n\n\treturn true;\n\
      }\n\ndefaultproperties\n{\n  IconMaterialName=\"MutatorArt.nosym\"\n  ConfigMenuClassName=\"\
      \"\n  GroupName=\"Gravity\"\n  FriendlyName=\"ZeroG\"\n  Description=\"No Gravity.\"\
      \n  RemoteRole=ROLE_SimulatedProxy\n  bAlwaysRelevant=True\n  FreefallState=PlayerFreefall;\
      \ \n}\n</uscript>\n\n===ZeroGxPlayer.uc===\n\n<uscript>\nclass ZeroGxPlayer\
      \ extends xPlayer;\n\nvar float fBounceAcceleration;\nvar float fBounceDistance;\n\
      var float fBounceAntiDrag;\n\nfunction EnterStartState() {\n  local name NewState;\n\
      \  log(\"ZeroGxPlayer:EnterStartState()\", 'FF');\n\n  NewState = 'PlayerFreefall';\n\
      \n  if (IsInState(NewState)) {\n    BeginState();\n  }\n  else {\n    GotoState(NewState);\n\
      \  }\n  log(\"ZeroGxPlayer:EnterStartState() done\", 'FF');\n}\n\nstate PlayerFreefall\
      \ {\n  ignores SeePlayer, HearNoise, Bump;\n\n  function PlayerMove(float DeltaTime)\
      \ {\n    local vector view, endPoint, acc;\n    //log(\"ZeroGxPlayer:PlayerMove()\"\
      , 'FF');\n\n    if (bPressedJump) {\n      bPressedJump = false;\n      view\
      \ = Vector(Pawn.GetViewRotation());\n      endPoint = Pawn.Location - (view\
      \ * fBounceDistance);\n      if (!Pawn.FastTrace(endPoint)) {\n        acc =\
      \ fBounceAcceleration * view;\n      }\n      Pawn.Acceleration = acc;\n   \
      \ }\n    else {\n      Pawn.Acceleration *= 0.9;\n      if (VSize(Pawn.Acceleration)\
      \ < VSize(Pawn.Velocity * fBounceAntiDrag)) {\n        Pawn.Acceleration = Pawn.Velocity\
      \ * fBounceAntiDrag;\n      }\n    }\n\n    // Update rotation.\n    UpdateRotation(DeltaTime,\
      \ 2);\n\n    if ( Role < ROLE_Authority ) { // then save this move and replicate\
      \ it\n      //log(\"ZeroGxPlayer:PlayMove ReplicateMove\", 'FF');\n      ReplicateMove(DeltaTime,\
      \ Pawn.Acceleration, DCLICK_None, rot(0,0,0));\n    }\n    else {\n      //log(\"\
      ZeroGxPlayer:PlayMove ProcessMove\", 'FF');\n      ProcessMove(DeltaTime, Pawn.Acceleration,\
      \ DCLICK_None, rot(0,0,0));\n    }\n\n    //log(\"ZeroGxPlayer:PlayMove done\"\
      , 'FF');\n  }\n\n  function BeginState() {\n    log(\"ZeroGxPlayer:beginning\
      \ Freefall state\", 'FF');\n    //Pawn.Velocity.Z = 1.0;\n    Pawn.SetPhysics(PHYS_Flying);\n\
      \    log(\"ZeroGxPlayer:beginning Freefall state done\", 'FF');\n  }\n\n}\n\n\
      \ndefaultproperties {\n  fBounceAcceleration = 1500.0;\n  fBounceDistance =\
      \ 150.0;\n  fBounceAntiDrag = 0.15;\n}\n</uscript>\n\n&ndash;Code Notes &ndash;\n\
      \nI was originally using PHYS_Falling for the player state.  Seemed to make\
      \ since for a Free''FALL'' mutator.  It was a bit tough since the physics engine\
      \ wanted to set the player in PHYS_Walking whenever he touched the floor.  Getting\
      \ around that wasn't too difficult since I just could override the landed()\
      \ method (I think that's the name) as well as change the physics back to PHYS_Falling\
      \ if it was in anything else.  One interesting thing to note about PHYS_Falling\
      \ is that it completely ignores any acceleration in the Z direction.  I imagine\
      \ it only takes into account the effects of the gravity in the particular zone\
      \ the pawn is in.  After trying many different ways of getting around that limitation\
      \ with little to no effect I decided to go with PHYS_Flying.  The problem with\
      \ that physics mode is that is automatically reduces the pawn's velocity over\
      \ time kind of like you'd see with some manner of friction.  The effect was\
      \ very noticible and unacceptable.  I believe the cheat-Flying mode that allows\
      \ the user to stop on a dime has something to do with this effect.  The code\
      \ above that deals with fBounceAntiDrag eliminates this problem by keeping an\
      \ acceleration vector on the pawn in the same direction as the pawn was traveling\
      \ to counteract the drag.  I came at using 0.15 for a multiplier just by trial\
      \ and error.\n\n&rarr;Comments &rarr;\n\n'''Mecha:''' It's a good start. It\
      \ really seems like it needs custom maps; I can do a bit of free-fall follies\
      \ in DM-Oceanic, but static meshes tend to trip you up when you catch on them.\
      \ It'd also be interesting to have a grapple or jetpack to boost yourself around\
      \ with, since x-loc'ing doesn't change your momentum.\n\nI sympathise with maintaining\
      \ compatibility. I smashed my head against getting the pawns to register hitwalls(without\
      \ changing the pawn/playercontroller) for a solid month before giving up.\n\
      ;Code notes:\n*All you need to do to change the playercontroller is in PostBeginPlay.\
      \ There's not much reason to use Pre, and could potentially cause problems on\
      \ a network.\n*Replacing only the actual PlayerController does weird things\
      \ to the bots. I've managed to shock them out of the standstill(which is probably\
      \ because they're trying to move regularly), and if they touch the floor, they\
      \ will get set to PHYS_Walking, and run around like normal&ndash;until they\
      \ try to jump, where they stop again since PHYS_Falling is probably getting\
      \ confused.\n*You shouldn't be replacing the '''default''' player controller\
      \ or movement state&ndash;once the mutator is used, players(not bots!) will\
      \ be unable to move until they quit and restart the game itself, even if switching\
      \ gametypes and removing the mutator.\n\nSo get rid of the PreBeginPlay function,\
      \ and your PostBeginPlay function should look something like this:\n\n<uscript>\n\
      function PostBeginPlay() {\n  log(\"MutZeroG:PostBeginPlay()\", 'FF');\n  Level.Game.PlayerControllerClassName=\"\
      Freefall.ZeroGxPlayer\";\n  Level.DefaultGravity = 0.0;\n  Super.PostBeginPlay();\n\
      \  log(\"MutZeroG:PostBeginPlay() done\", 'FF');\n}\n</uscript>\n\nand that\
      \ will take care of any lingering effects.\n\n'''Piglet:''' Really pretty cool,\
      \ it's just ashame the bots dont like it much, oh well.  By lasertag style guns\
      \ do you mean simmilar to my [[Legacy:Piglet/LaserTag|Piglet/LaserTag]] mutator,\
      \ i've tested them together and the work fairly well together (except I of course\
      \ couldn't play with bots and we've only one computer fast enough for UT2003\
      \ so i couldnt play networked either :( ).  Anyway a very nice idea, though\
      \ it would probably be even cooler with some form of jetpacky thing (maybe replacement\
      \ for shieldguns crappy secondary fire) and new maps.\n\n'''SocratesJohnson:'''\
      \ Hey thanks for the feedback!  Mecha, I haven't had a chance to implement that\
      \ code change, I have seen that problem requiring a restart like you said, that\
      \ change should do the trick.  I agree with the custom maps, although I don't\
      \ really have any experience mapping.  Please be my guest if anyone is interested!\
      \  :D  I'm going to have to try and do something to get the bots to understand\
      \ what's going on but I imagine it will be a bit tricky.  Piglet, the guns in\
      \ the novel would freze portions of the suit everyone was wearing, so a hit\
      \ to the arm would disable that arm (BTW it's a fantastic book!).  I'll have\
      \ to try it with your mutator as well, I'm glad to hear they played nice!  I\
      \ think jetpacks might be a bit much but I like the idea of a grappling hook.\
      \  Does a mutator exist for grappling hooks yet?  If not I'd love to try and\
      \ implement one, maybe replace the shieldgun's crappy secondary fire like you\
      \ said. :) I think I have some time to work on this stuff tonight.  Once again,\
      \ thanks for the input!\n\n'''Mecha:''' Captain Kewl has notes on building a\
      \ grapple in his [[Legacy:Developer Journals/Captain Kewl|journal]]. It's not\
      \ a terribly hard concept, but might take some practice. He also has some notes\
      \ on correctly replicating client acceleration, which may answer the questions\
      \ you posed to dma.\n\nFor teaching the bots what to do, you will probably need\
      \ to change how they react to physics and hitwalls before actually changing\
      \ their Orders function. Botpathing may also be a big factor in trying to get\
      \ them to go places. I know that the author of Greed complained that invalid\
      \ results for FindPathToward() in a bot will slow down the engine considerably;\
      \ Epic is supposedly fixing this in the next patch.\n\n'''SocratesJohnson:'''\
      \ Implemented your suggested change and it works like a charm!  Thanks!  I'll\
      \ create a new UMOD file tonight hopefully.  I also started work on a grapple\
      \ mutator, just laid some preliminary framework based on the [[Legacy:TransLauncher|TransLauncher]]\
      \ and related code.  Thanks for the pointers!\n\n'''SocratesJohnson:''' Updated\
      \ the UMOD file with version 101 a week ago but forgot to mention it here. :D\
      \  The source on this page is still old, I'll update it when I get a chance.\n\
      \n'''Mysterial:'''FindPathToward() appears to be fixed since the 2217 beta patch."
  properties: []
  revId: 7581
name: "Legacy:SocratesJohnson/Freefall"
revision:
  revid: 7581
  parentid: 7583
  user: "El Muerte"
  timestamp: 1144361067.000000000
  comment: "*revert"
timestamp: 1668788095.531463000
