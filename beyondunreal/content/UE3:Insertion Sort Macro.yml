---
parse:
  title: "UE3:Insertion Sort Macro"
  text:
    text: "<p>Below is a macro that allows you to quickly implement the sorting of\
      \ a dynamic array. The sorting is performed within the scope of the function\
      \ where it is used. This reduces overhead created by function calling.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"coMULTI\">/**\n * Inline\
      \ sorting algorithm, based on the Insertion Sort on the UnrealWiki\n * http://wiki.beyondunreal.com/Legacy:Insertion_Sort\n\
      \ * \n * Usage: include this include file in a class where you want to use it\n\
      \ * using `include(sorter.uci)\n * When in a function where you want to perform\
      \ sorting add `sort_decl();\n * right after the function declaration. Then at\
      \ the place where you want\n * to sort a dynamic array use `sort(MyArray);\n\
      \ * \n * For example:\n * function test(array&lt;int&gt; myArray)\n * {\n *\
      \  `sort_decl();\n *  local int foo;\n *  `sort(myArray);   \n * }\n * \n *\
      \ Alternatively you can use the sorting with an different compare \n * operator\
      \ using: `sort_op(Myarray, &lt;)\n * The second argument is the operator to\
      \ use.   \n *   \n * This sorting mechanism works for all types for which there\
      \ is a &gt; \n * operator. This is the case for most primitive types in the\n\
      \ * UnrealEngine. For other types you need to declare the &gt; operator \n *\
      \ yourself.\n * \n * You are free to use this software as you like, as long\
      \ as you don't\n * claim owner or authorship.\n * \n * Last update: 2009-09-17\
      \ 20:34:29              \n */</span> \n \n<span class=\"sy0\">`</span>define\
      \ sort_decl_m<span class=\"br0\">(</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">)</span> \\\n    <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> __InsertIndex<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span>, __RemovedIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span>, __High<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span>, __Closest<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span>;\n \n<span class=\"sy0\">`</span>define sort_m_op<span\
      \ class=\"br0\">(</span>array,<span class=\"kw7\">tag</span>,<span class=\"\
      kw1\">operator</span><span class=\"br0\">)</span> \\\n    <span class=\"kw2\"\
      >for</span> <span class=\"br0\">(</span>__RemovedIndex<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; __RemovedIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span>array<span class=\"br0\">}</span>.<span\
      \ class=\"me0\">length</span>; <span class=\"sy0\">++</span>__RemovedIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\
      \ \\\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span>array<span class=\"br0\"\
      >}</span><span class=\"br0\">[</span>__RemovedIndex<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span>\
      \ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\"\
      >]</span> <span class=\"sy0\">`</span><span class=\"kw1\">operator</span> <span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span>array<span class=\"br0\"\
      >}</span><span class=\"br0\">[</span>__RemovedIndex<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span><span\
      \ class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\
      \ \\\n            __InsertIndex<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>;\\\n            __High<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">=</span> __RemovedIndex<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;\
      \ \\\n            <span class=\"kw2\">while</span> <span class=\"br0\">(</span>__InsertIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> __High<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\
      \ \\\n                __Closest<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>__InsertIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span> <span class=\"sy0\">+</span> __High<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>;\
      \ \\\n                <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"sy0\">`</span><span class=\"br0\">{</span>array<span class=\"\
      br0\">}</span><span class=\"br0\">[</span>__Closest<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">`</span><span class=\"kw1\">operator</span>\
      \ <span class=\"sy0\">`</span><span class=\"br0\">{</span>array<span class=\"\
      br0\">}</span><span class=\"br0\">[</span>__RemovedIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span> \\\n                    __High<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span>\
      \ <span class=\"sy0\">=</span> __Closest<span class=\"sy0\">`</span><span class=\"\
      br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span\
      \ class=\"sy0\">-</span> <span class=\"nu0\">1</span>; \\\n                <span\
      \ class=\"br0\">}</span> \\\n                <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      sy0\">`</span><span class=\"br0\">{</span>array<span class=\"br0\">}</span><span\
      \ class=\"br0\">[</span>__RemovedIndex<span class=\"sy0\">`</span><span class=\"\
      br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">`</span><span class=\"kw1\">operator</span>\
      \ <span class=\"sy0\">`</span><span class=\"br0\">{</span>array<span class=\"\
      br0\">}</span><span class=\"br0\">[</span>__Closest<span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span><span\
      \ class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\
      \ \\\n                    __InsertIndex<span class=\"sy0\">`</span><span class=\"\
      br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span\
      \ class=\"sy0\">=</span> __Closest<span class=\"sy0\">`</span><span class=\"\
      br0\">{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span\
      \ class=\"sy0\">+</span> <span class=\"nu0\">1</span>; \\\n                <span\
      \ class=\"br0\">}</span> \\\n                <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span> \\\n                    __InsertIndex<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">=</span> __Closest<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span>; \\\n                    <span class=\"kw2\">break</span>;\
      \ \\\n                <span class=\"br0\">}</span> \\\n            <span class=\"\
      br0\">}</span> \\\n            <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> __InsertIndex<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span class=\"\
      sy0\">&lt;</span> __RemovedIndex<span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span><span class=\"kw7\">tag</span><span class=\"br0\">}</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"sy0\">`</span><span class=\"br0\">{</span>array<span\
      \ class=\"br0\">}</span><span class=\"br0\">[</span>__RemovedIndex<span class=\"\
      sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"sy0\">`</span><span\
      \ class=\"kw1\">operator</span> <span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span>array<span class=\"br0\">}</span><span class=\"br0\">[</span>__InsertIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span> \\\n                <span class=\"sy0\">++</span>__InsertIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span>; \\\n            <span class=\"br0\">}</span> \\\n\
      \        <span class=\"br0\">}</span> \\\n        <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span> \\\n            __InsertIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span> <span class=\"sy0\">=</span> __RemovedIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span>; \\\n        <span class=\"br0\">}</span> \\\n        <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> __RemovedIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span> <span class=\"sy0\">!=</span> __InsertIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> \\\n\
      \            <span class=\"sy0\">`</span><span class=\"br0\">{</span>array<span\
      \ class=\"br0\">}</span>.<span class=\"me0\">Insert</span><span class=\"br0\"\
      >(</span>__InsertIndex<span class=\"sy0\">`</span><span class=\"br0\">{</span><span\
      \ class=\"kw7\">tag</span><span class=\"br0\">}</span>, <span class=\"nu0\"\
      >1</span><span class=\"br0\">)</span>; \\\n            <span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span>array<span class=\"br0\">}</span><span class=\"br0\"\
      >[</span>__InsertIndex<span class=\"sy0\">`</span><span class=\"br0\">{</span><span\
      \ class=\"kw7\">tag</span><span class=\"br0\">}</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"sy0\">`</span><span class=\"br0\"\
      >{</span>array<span class=\"br0\">}</span><span class=\"br0\">[</span>__RemovedIndex<span\
      \ class=\"sy0\">`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span\
      \ class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>; \\\n            <span class=\"sy0\">`</span><span\
      \ class=\"br0\">{</span>array<span class=\"br0\">}</span>.<span class=\"me0\"\
      >Remove</span><span class=\"br0\">(</span>__RemovedIndex<span class=\"sy0\"\
      >`</span><span class=\"br0\">{</span><span class=\"kw7\">tag</span><span class=\"\
      br0\">}</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>; \\\n        <span class=\"\
      br0\">}</span> \\\n    <span class=\"br0\">}</span>\n \n<span class=\"sy0\"\
      >`</span>define sort_m<span class=\"br0\">(</span>array,<span class=\"kw7\"\
      >tag</span><span class=\"br0\">)</span> <span class=\"sy0\">`</span>sort_m_op<span\
      \ class=\"br0\">(</span><span class=\"sy0\">`</span>array, <span class=\"sy0\"\
      >`</span><span class=\"kw7\">tag</span>, <span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">)</span>\n \n<span class=\"co1\">// These are the standard macros\
      \ you would use, only use the \"_m\" macros</span>\n<span class=\"co1\">// in\
      \ case of naming conflicts with the variables</span>\n \n<span class=\"co1\"\
      >// Declare the variables used for the sorting</span>\n<span class=\"sy0\">`</span>define\
      \ sort_decl <span class=\"sy0\">`</span>sort_decl_m<span class=\"br0\">(</span>_<span\
      \ class=\"br0\">)</span>\n \n<span class=\"co1\">// Sort the given array</span>\n\
      <span class=\"sy0\">`</span>define sort<span class=\"br0\">(</span>array<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">`</span>sort_m_op<span class=\"\
      br0\">(</span><span class=\"sy0\">`</span>array, _, <span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">)</span>\n \n<span class=\"co1\">// Sort using an alternative\
      \ operator, for example use `sort_op(array,&gt;)</span>\n<span class=\"co1\"\
      >// to perform reverse order sorting.</span>\n<span class=\"sy0\">`</span>define\
      \ sort_op<span class=\"br0\">(</span>array,op<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">`</span>sort_m_op<span class=\"br0\">(</span><span class=\"\
      sy0\">`</span>array, _, <span class=\"sy0\">`</span>op<span class=\"br0\">)</span></pre></div>\n\
      </div>\n<p>Save the above code as <code>sorter.uci</code>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Example\">Example</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE3:Insertion_Sort_Macro?section=1\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">`</span>include<span class=\"br0\">(</span>sorter.<span class=\"me0\"\
      >uci</span><span class=\"br0\">)</span>\n \n<span class=\"kw1\">function</span>\
      \ intSorter<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"sy0\">`</span>sort_decl<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n    <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n    <span class=\"kw1\">local</span> array<span\
      \ class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> data;\n    data.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >10</span>;\n    data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>;\
      \ data<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span>; data<span\
      \ class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>; data<span class=\"\
      br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">3</span>; data<span class=\"br0\"\
      >[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">5</span>; data<span class=\"br0\">[</span><span\
      \ class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">9</span>; data<span class=\"br0\">[</span><span class=\"\
      nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">2</span>; data<span class=\"br0\">[</span><span class=\"nu0\"\
      >7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">8</span>; data<span class=\"br0\">[</span><span class=\"nu0\">8</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;\
      \ data<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>;\n\
      \ \n    <span class=\"sy0\">`</span><span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Before:\"</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ data.<span class=\"me0\">length</span>; <span class=\"sy0\">++</span>i<span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"\
      sy0\">`</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>data<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"sy0\">`</span>sort<span\
      \ class=\"br0\">(</span>data<span class=\"br0\">)</span>;\n \n    <span class=\"\
      sy0\">`</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"After:\"</span><span class=\"br0\">)</span>;\n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> data.<span\
      \ class=\"me0\">length</span>; <span class=\"sy0\">++</span>i<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"sy0\"\
      >`</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>data<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"sy0\">`</span>sort_op<span\
      \ class=\"br0\">(</span>data, <span class=\"sy0\">&lt;</span><span class=\"\
      br0\">)</span>;\n \n    <span class=\"sy0\">`</span><span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Reversed:\"</span><span class=\"\
      br0\">)</span>;\n    <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> data.<span class=\"me0\">length</span>; <span class=\"sy0\"\
      >++</span>i<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"sy0\">`</span><span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Custom_type_notice\"\
      >Custom type notice</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE3:Insertion_Sort_Macro?section=2\" title=\"Edit section:\
      \ Custom type notice\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>You can sort any array with this macro, as long as the greater than (<code>&gt;</code>)\
      \ operator have been defined for that type. Or when you use the <code>sort_op(Array,Operator)</code>\
      \ macro, the specified operator.</p>\n<p>You can use the following template\
      \ for implementing the operator for the type you want to sort:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span>\
      \ <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span> MyCustomType\
      \ A, MyCustomType B <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"co1\">// TODO: implement</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>It's best to define the operator as static and final, this improves\
      \ the execution speed.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE3:Insertion_Sort_Macro?section=3\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Insertion_Sort\" title=\"Legacy:Insertion Sort\"\
      >Legacy:Insertion_Sort</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.069 seconds\nReal time usage: 0.070 seconds\nPreprocessor visited\
      \ node count: 38/1000000\nPreprocessor generated node count: 76/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:24401-0!*!0!!*!*!*\
      \ and timestamp 20221206155942 and revision id 35428\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Insertion Sort"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Example"
    number: "1"
    index: "1"
    fromtitle: "UE3:Insertion_Sort_Macro"
    byteoffset: 3553
    anchor: "Example"
  - toclevel: 1
    level: "2"
    line: "Custom type notice"
    number: "2"
    index: "2"
    fromtitle: "UE3:Insertion_Sort_Macro"
    byteoffset: 4200
    anchor: "Custom_type_notice"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "UE3:Insertion_Sort_Macro"
    byteoffset: 4747
    anchor: "Related_Topics"
  displaytitle: "UE3:Insertion Sort Macro"
  iwlinks: []
  wikitext:
    text: "Below is a macro that allows you to quickly implement the sorting of a\
      \ dynamic array. The sorting is performed within the scope of the function where\
      \ it is used. This reduces overhead created by function calling.\n\n<uscript>\n\
      /**\n * Inline sorting algorithm, based on the Insertion Sort on the UnrealWiki\n\
      \ * http://wiki.beyondunreal.com/Legacy:Insertion_Sort\n * \n * Usage: include\
      \ this include file in a class where you want to use it\n * using `include(sorter.uci)\n\
      \ * When in a function where you want to perform sorting add `sort_decl();\n\
      \ * right after the function declaration. Then at the place where you want\n\
      \ * to sort a dynamic array use `sort(MyArray);\n * \n * For example:\n * function\
      \ test(array<int> myArray)\n * {\n *  `sort_decl();\n *  local int foo;\n *\
      \  `sort(myArray);   \n * }\n * \n * Alternatively you can use the sorting with\
      \ an different compare \n * operator using: `sort_op(Myarray, <)\n * The second\
      \ argument is the operator to use.   \n *   \n * This sorting mechanism works\
      \ for all types for which there is a > \n * operator. This is the case for most\
      \ primitive types in the\n * UnrealEngine. For other types you need to declare\
      \ the > operator \n * yourself.\n * \n * You are free to use this software as\
      \ you like, as long as you don't\n * claim owner or authorship.\n * \n * Last\
      \ update: 2009-09-17 20:34:29              \n */ \n\n`define sort_decl_m(tag)\
      \ \\\n    local int __InsertIndex`{tag}, __RemovedIndex`{tag}, __High`{tag},\
      \ __Closest`{tag};\n\n`define sort_m_op(array,tag,operator) \\\n    for (__RemovedIndex`{tag}\
      \ = 1; __RemovedIndex`{tag} < `{array}.length; ++__RemovedIndex`{tag}) { \\\n\
      \        if ( `{array}[__RemovedIndex`{tag} - 1] `operator `{array}[__RemovedIndex`{tag}]\
      \ ) { \\\n            __InsertIndex`{tag} = 0;\\\n            __High`{tag} =\
      \ __RemovedIndex`{tag} - 1; \\\n            while (__InsertIndex`{tag} <= __High`{tag})\
      \ { \\\n                __Closest`{tag} = (__InsertIndex`{tag} + __High`{tag})\
      \ / 2; \\\n                if ( `{array}[__Closest`{tag}] `operator `{array}[__RemovedIndex`{tag}]\
      \ ) { \\\n                    __High`{tag} = __Closest`{tag} - 1; \\\n     \
      \           } \\\n                else if ( `{array}[__RemovedIndex`{tag}] `operator\
      \ `{array}[__Closest`{tag}] ) { \\\n                    __InsertIndex`{tag}\
      \ = __Closest`{tag} + 1; \\\n                } \\\n                else { \\\
      \n                    __InsertIndex`{tag} = __Closest`{tag}; \\\n          \
      \          break; \\\n                } \\\n            } \\\n            if\
      \ ( __InsertIndex`{tag} < __RemovedIndex`{tag} && `{array}[__RemovedIndex`{tag}]\
      \ `operator `{array}[__InsertIndex`{tag}] ) { \\\n                ++__InsertIndex`{tag};\
      \ \\\n            } \\\n        } \\\n        else { \\\n            __InsertIndex`{tag}\
      \ = __RemovedIndex`{tag}; \\\n        } \\\n        if ( __RemovedIndex`{tag}\
      \ != __InsertIndex`{tag} ) { \\\n            `{array}.Insert(__InsertIndex`{tag},\
      \ 1); \\\n            `{array}[__InsertIndex`{tag}] = `{array}[__RemovedIndex`{tag}\
      \ + 1]; \\\n            `{array}.Remove(__RemovedIndex`{tag} + 1, 1); \\\n \
      \       } \\\n    }\n\n`define sort_m(array,tag) `sort_m_op(`array, `tag, >)\n\
      \n// These are the standard macros you would use, only use the \"_m\" macros\n\
      // in case of naming conflicts with the variables\n\n// Declare the variables\
      \ used for the sorting\n`define sort_decl `sort_decl_m(_)\n\n// Sort the given\
      \ array\n`define sort(array) `sort_m_op(`array, _, >)\n\n// Sort using an alternative\
      \ operator, for example use `sort_op(array,>)\n// to perform reverse order sorting.\n\
      `define sort_op(array,op) `sort_m_op(`array, _, `op)\n</uscript>\n\nSave the\
      \ above code as <code>sorter.uci</code>.\n\n== Example ==\n\n<uscript>\n`include(sorter.uci)\n\
      \nfunction intSorter()\n{\n    `sort_decl();\n    local int i;\n    local array<int>\
      \ data;\n    data.length = 10;\n    data[0] = 4; data[1] = 7; data[2] = 10;\
      \ data[3] = 3; data[4] = 5; data[5] = 9; data[6] = 2; data[7] = 8; data[8] =\
      \ 1; data[9] = 6;\n    \n    `log(\"Before:\");\n    for (i = 0; i < data.length;\
      \ ++i)\n    {\n        `log(data[i]);\n    }\n    \n    `sort(data);\n    \n\
      \    `log(\"After:\");\n    for (i = 0; i < data.length; ++i)\n    {\n     \
      \   `log(data[i]);\n    }\n\n    `sort_op(data, <);\n    \n    `log(\"Reversed:\"\
      );\n    for (i = 0; i < data.length; ++i)\n    {\n        `log(data[i]);\n \
      \   }\n}\n</uscript>\n\n== Custom type notice ==\n\nYou can sort any array with\
      \ this macro, as long as the greater than (<code>&gt;</code>) operator have\
      \ been defined for that type. Or when you use the <code>sort_op(Array,Operator)</code>\
      \ macro, the specified operator.\n\nYou can use the following template for implementing\
      \ the operator for the type you want to sort:\n<uscript>\nstatic final operator(24)\
      \ bool > ( MyCustomType A, MyCustomType B )\n{\n    // TODO: implement\n}\n\
      </uscript>\nIt's best to define the operator as static and final, this improves\
      \ the execution speed.\n\n== Related Topics ==\n* [[Legacy:Insertion_Sort]]"
  properties: []
  revId: 35428
name: "UE3:Insertion Sort Macro"
revision:
  revid: 35428
  parentid: 35424
  user: "Elmuerte"
  timestamp: 1253212715.000000000
  comment: "improved algorithm... now only needs 1 operator"
timestamp: 1670405852.767459000
