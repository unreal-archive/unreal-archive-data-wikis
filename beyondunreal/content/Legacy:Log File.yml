---
parse:
  title: "Legacy:Log File"
  text:
    text: "<p>To open a log window, launch UT200x with the command line option \"\
      -log\".</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n\
      <h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"\
      #Writing_to_the_log_file\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Writing to the log file</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Log\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >Log</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Warn\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Warn</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Examples_of_Log_and_Warn\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Examples of Log\
      \ and Warn</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Writing_to_the_log_file\">Writing to the log file</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Log_File?section=1\" title=\"Edit section: Writing to\
      \ the log file\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The log file is generally the easiest and most straightforward of the writing\
      \ functions. The log file is shared among all classes, and will be overwritten\
      \ every time the game is started. In addition, no facility exists to read the\
      \ log file from within Unrealscript, though it is easily readable with any text\
      \ editor.</p>\n<p>Note that writing to the log file actually writes to a buffer\
      \ which is periodically written to the log file, so if the engine crashes with\
      \ a GPF or similar error shortly after the log statement, it may not have made\
      \ it into the actual log file. The engine will automatically write out anything\
      \ left in the log buffer during a normal shutdown. To write to the log file,\
      \ you can use one of two functions:</p>\n<h3><span class=\"mw-headline\" id=\"\
      Log\">Log</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Log_File?section=2\" title=\"Edit section: Log\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw3\">Log</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">''</span>Text<span class=\"st0\">''</span>, <span class=\"\
      st0\">''</span>Prefix<span class=\"st0\">''</span> <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The log function takes two arguments, though the second argument\
      \ is optional. The first argument is a string and is the text that will be written\
      \ into the log. You can put any variable type in here, and the function will\
      \ automatically cast it into a string for you. The second argument is the prefix\
      \ you would like to have for your log message. The prefix is a <b>name</b> variable,\
      \ not a string, so it should be enclosed in single quotes and cannot contain\
      \ spaces. If you omit a prefix, the prefix will default to 'ScriptLog'.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Warn\">Warn</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Log_File?section=3\"\
      \ title=\"Edit section: Warn\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw3\">Warn</span><span class=\"br0\">(</span> <span class=\"st0\">''</span>Text<span\
      \ class=\"st0\">''</span> <span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>The Warn function is similar to log, but cannot take a prefix and also automatically\
      \ provides a bit of information about itself. It will list the name of the thing\
      \ that called it as well as the function and line it was called from. It will\
      \ even tell you which class it was that the warning was set in, so if you make\
      \ a call to a superclasses function and that function generates a warning, it\
      \ will include the name of the superclass instead of the subclass.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Examples_of_Log_and_Warn\">Examples of Log and\
      \ Warn</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Log_File?section=4\" title=\"Edit section: Examples\
      \ of Log and Warn\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The usage of Log and Warn is fairly straightforward, but some examples are\
      \ provided here to help illustrate the description.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> SomeClass <span class=\"\
      kw1\">extends</span> <span class=\"kw8\">Interaction</span>;\n \n<span class=\"\
      kw1\">function</span> LogSample<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">string</span> Example;\n \n  <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"First Message\"</span> <span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw3\">log</span><span class=\"br0\"\
      >(</span> <span class=\"st0\">\"Second Message\"</span>, <span class=\"st0\"\
      >'ExampleMsg'</span> <span class=\"br0\">)</span>;\n  <span class=\"kw3\">warn</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"Third Message\"</span> <span\
      \ class=\"br0\">)</span>;\n \n  Example <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"Iterating Message\"</span>;\n \n  <span class=\"kw2\">for</span> <span\
      \ class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span\
      \ class=\"sy0\">&lt;</span><span class=\"nu0\">5</span>;i<span class=\"sy0\"\
      >++</span> <span class=\"br0\">)</span>\n    <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span> Example<span class=\"sy0\">$</span><span class=\"st0\"\
      >\" Number \"</span><span class=\"sy0\">$</span>I <span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>The example function above\
      \ would produce the following output in the log file:</p>\n<pre>ScriptLog: First\
      \ Message\nExampleMsg: Second Message\nWarning: Someclass Package.InteractionMaster.SomeClass\
      \ (Function SomeClass.LogSample:0048) Third Message\nScriptLog: Iterating Message\
      \ Number 0\nScriptLog: Iterating Message Number 1\nScriptLog: Iterating Message\
      \ Number 2\nScriptLog: Iterating Message Number 3\nScriptLog: Iterating Message\
      \ Number 4\n</pre>\n<p>If you want to write to the log file, but do not want\
      \ to write into the same log file as everything else, you can use a <a href=\"\
      /Legacy:FileLog\" title=\"Legacy:FileLog\">FileLog</a> instead, which allows\
      \ you to specify a filename but requires a bit more work to use.</p>\n\n<!--\
      \ \nNewPP limit report\nCPU time usage: 0.075 seconds\nReal time usage: 0.077\
      \ seconds\nPreprocessor visited node count: 45/1000000\nPreprocessor generated\
      \ node count: 100/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1738-0!*!0!!en!*!* and timestamp 20221118044733 and revision\
      \ id 4275\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:FileLog"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Writing to the log file"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Log_File"
    byteoffset: 74
    anchor: "Writing_to_the_log_file"
  - toclevel: 2
    level: "3"
    line: "Log"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Log_File"
    byteoffset: 825
    anchor: "Log"
  - toclevel: 2
    level: "3"
    line: "Warn"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Log_File"
    byteoffset: 1431
    anchor: "Warn"
  - toclevel: 2
    level: "3"
    line: "Examples of Log and Warn"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Log_File"
    byteoffset: 1941
    anchor: "Examples_of_Log_and_Warn"
  displaytitle: "Legacy:Log File"
  iwlinks: []
  wikitext:
    text: "To open a log window, launch UT200x with the command line option \"-log\"\
      .\n\n==Writing to the log file==\n\nThe log file is generally the easiest and\
      \ most straightforward of the writing functions. The log file is shared among\
      \ all classes, and will be overwritten every time the game is started. In addition,\
      \ no facility exists to read the log file from within Unrealscript, though it\
      \ is easily readable with any text editor.\n\nNote that writing to the log file\
      \ actually writes to a buffer which is periodically written to the log file,\
      \ so if the engine crashes with a GPF or similar error shortly after the log\
      \ statement, it may not have made it into the actual log file. The engine will\
      \ automatically write out anything left in the log buffer during a normal shutdown.\
      \ To write to the log file, you can use one of two functions:\n\n===Log===\n\
      \n<uscript>Log( ''Text'', ''Prefix'' );\n</uscript>\n\nThe log function takes\
      \ two arguments, though the second argument is optional. The first argument\
      \ is a string and is the text that will be written into the log. You can put\
      \ any variable type in here, and the function will automatically cast it into\
      \ a string for you. The second argument is the prefix you would like to have\
      \ for your log message. The prefix is a '''name''' variable, not a string, so\
      \ it should be enclosed in single quotes and cannot contain spaces. If you omit\
      \ a prefix, the prefix will default to <nowiki>'ScriptLog'</nowiki>.\n\n===Warn===\n\
      \n<uscript>Warn( ''Text'' );\n</uscript>\n\nThe Warn function is similar to\
      \ log, but cannot take a prefix and also automatically provides a bit of information\
      \ about itself. It will list the name of the thing that called it as well as\
      \ the function and line it was called from. It will even tell you which class\
      \ it was that the warning was set in, so if you make a call to a superclasses\
      \ function and that function generates a warning, it will include the name of\
      \ the superclass instead of the subclass.\n\n===Examples of Log and Warn===\n\
      \nThe usage of Log and Warn is fairly straightforward, but some examples are\
      \ provided here to help illustrate the description.\n\n<uscript>\nclass SomeClass\
      \ extends Interaction;\n\nfunction LogSample()\n{\n  local int i;\n  local string\
      \ Example;\n\n  log( \"First Message\" );\n  log( \"Second Message\", 'ExampleMsg'\
      \ );\n  warn( \"Third Message\" );\n\n  Example = \"Iterating Message\";\n\n\
      \  for ( i=0;i<5;i++ )\n    log( Example$\" Number \"$I );\n}\n</uscript>\n\n\
      The example function above would produce the following output in the log file:\n\
      \n ScriptLog: First Message\n ExampleMsg: Second Message\n Warning: Someclass\
      \ Package.InteractionMaster.SomeClass (Function SomeClass.LogSample:0048) Third\
      \ Message\n ScriptLog: Iterating Message Number 0\n ScriptLog: Iterating Message\
      \ Number 1\n ScriptLog: Iterating Message Number 2\n ScriptLog: Iterating Message\
      \ Number 3\n ScriptLog: Iterating Message Number 4\n\nIf you want to write to\
      \ the log file, but do not want to write into the same log file as everything\
      \ else, you can use a [[Legacy:FileLog|FileLog]] instead, which allows you to\
      \ specify a filename but requires a bit more work to use."
  properties: []
  revId: 4275
name: "Legacy:Log File"
revision:
  revid: 4275
  parentid: 0
  user: "Tarquin"
  timestamp: 1094477601.000000000
  comment: "*"
timestamp: 1668776858.455979000
