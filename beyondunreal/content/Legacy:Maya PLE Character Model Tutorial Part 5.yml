---
parse:
  title: "Legacy:Maya PLE Character Model Tutorial Part 5"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Getting_Into_the_Game\">Getting Into\
      \ the Game</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Maya_PLE_Character_Model_Tutorial_Part_5?section=1\"\
      \ title=\"Edit section: Getting Into the Game\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Modeling done, IK rigging complete, animation sequences\
      \ finalized, and a spot of texturing applied – TinCanMan is ready for prime-time.\
      \ This chapter of the tutorial will re-iterate the model export instructions\
      \ from Epic, but it's part of the process and doesn't suffer from repetition.</p>\n\
      <p>IMPORTANT NOTE: This part of the tutorial assumes you have edited the system\
      \ environment variable according to the instructions on CD#3 of the UT2003 release,\
      \ and that the <a href=\"/Legacy:UnEditor.Mll\" title=\"Legacy:UnEditor.Mll\"\
      >unEditor.mll</a> plug-in loads successfully.</p>\n<p>First save the TinCanMan\
      \ file and use <b>File&gt;New</b> to clear the workspace. Use <b>Window&gt;Settings/Preferences&gt;Plug-in\
      \ Manager</b> to open the Plug-in Manager. Check the box next to <b>unEditor.mll</b>.\
      \ UnrealEd should open as the plug-in loads. (The reason for the File&gt;New\
      \ before loading the plug-in is that I've repeatedly had Maya PLE &amp; UEd\
      \ crash if a scene of any complexity is open when loading unEditor.mll, but\
      \ it always works OK if I do File&gt;New first.)</p>\n<p>Switch back to Maya\
      \ PLE, close the Plug-in Manager dialog, and open the TinCanMan file.</p>\n\
      <p>90. Switch to the Modeling editor. Select <i>SkinMesh</i>. Use <b>Polygons&gt;Triangulate</b>\
      \ to explicitly insure all the SkinMesh polys are triangulated – unEditor.mll\
      \ does not automatically triangulate on export. Save the file.</p>\n<p>91. In\
      \ Outliner, select <i>RootBone</i>. In the main menu use <b>Create&gt;Sets&gt;Set&gt;OPTIONS</b>\
      \ to open the Create Set dialog. In the Name field enter <i>TinCanMan</i> and\
      \ click Apply and Close.</p>\n<p>92. In Outliner, select <i>TinCanMan</i>. Be\
      \ sure it is the only object selected in Outliner, then open the Attribute Editor\
      \ by 2-clicking the <i>TinCanMan</i> set icon.</p>\n<p>93. Expand the <b>Extra\
      \ Attributes</b> section (it will be empty). In the Attribute Editor menu, use\
      \ <b>Attributes&gt;Add Attributes</b> to open the Add Attribute dialog.</p>\n\
      <p>94. In the Add Attribute dialog, enable the String radio button in the Data\
      \ Type section, type in <i>package</i> for the Attribute Name, then click Add.</p>\n\
      <p>Type <i>animargs</i> in the Attribute Name field and click Add.</p>\n<p>Change\
      \ the Data Type to Float and type <i>scale</i> in the Attribute Name field.\
      \ Click Add. Close the Add Attribute dialog.</p>\n<p>95. The Attribute Editor\
      \ Extra Attributes section should now contain the three newly-added attributes.\
      \ In the package field of Additional Attributes, enter <i>T_C_Man</i>. In the\
      \ Scale field enter 2.0. In the animargs field type</p>\n<dl>\n<dd>WalkF 10\
      \ 41 Idle_Rifle 50 97</dd>\n</dl>\n<p>Note that the frame-range for the two\
      \ animation sequences is one frame short of the full sequence length that was\
      \ keyframed. That's because the start &amp; end frames of the animation cycles\
      \ are identical, and only one of them is needed in the cycle when played back.\
      \ The slight pause caused by having two identical frames in the loop can sometimes\
      \ be quite apparent, so it's best to leave one out.</p>\n<p>If you checked out\
      \ the xPawn.uc file, or looked carefully at the animation sequences list in\
      \ the UEd Animations browser, you'll recognize that the names chosen for TinCanMan's\
      \ anims match those used for UT2003's \"stock\" characters. This isn't an absolute\
      \ necessity, but it greatly simplifies the steps needed to get the model into\
      \ the game. More info about this in a future tutorial.</p>\n<p>96. In the Command\
      \ Line type</p>\n<dl>\n<dd>unEditor anim TinCanMan</dd>\n</dl>\n<p>and hit Enter.\
      \ The viewport should show the model animations playing through once at fast\
      \ speed while the model exports. The Command Feedback should report <i>Result:\
      \ [1] animating meshes(s) exported</i></p>\n<p>97. Switch to UEd and open the\
      \ Textures browser. Import the texture file that was applied in Maya PLE, using\
      \ package name <i>TinCanMan_TX</i> and group name <i>Skins</i>. Save the package\
      \ in the UT2003/Textures directory. Select the newly-imported texture in the\
      \ Texture browser.</p>\n<p>98. Open the Animations browser and use the package-select\
      \ drop-down to select <i>T_C_Man</i> from the list. The other fields at the\
      \ top of the browser should read <i>TinCanMan</i>, and the animation sequence\
      \ list should show <i>WalkF[32]</i> and <i>Idle_Rifle[48]</i>. The model will\
      \ have the Engine.Default texture. Select an animation sequence, enable looping\
      \ in the playback controls, and play the animation. Cool.</p>\n<p>99. In the\
      \ <b>Mesh</b> tab at the right of the browser, expand <b>Skin</b> fully, click\
      \ <b>Add</b>, then <b>Use</b>, to apply the newly-imported TinCanMan texture\
      \ to the model in the Skin(0) slot. Save the file in the UT2003/Animations directory\
      \ as <i>T_C_Man.ukx</i>.</p>\n<div class=\"center\">\n<div class=\"floatnone\"\
      ><a href=\"/File:Legacy_MCMT-26-TCManInUed.gif\" class=\"image\" title=\"FIG\
      \ 26. TinCanMan in the UEd Animations browser\"><img alt=\"FIG 26. TinCanMan\
      \ in the UEd Animations browser\" src=\"/w/images/Legacy_MCMT-26-TCManInUed.gif\"\
      \ width=\"832\" height=\"659\" /></a></div>\n</div>\n<p>TinCanMan is now available\
      \ for use by UT2003, but a another step is needed to insure he can be easily\
      \ selected for use by the engine or a player. Return to Maya PLE, save the file\
      \ and quit. UEd will close also since it was opened as a plug-in.</p>\n<p>100.\
      \ A .upl file must be created for TinCanMan. This text file contains references\
      \ to character specifications, and is necessary if the character is to appear\
      \ in the Instant Action menu Player roster.</p>\n<p>The entries highlighted\
      \ in FIG 27 are the minimum necessary to identify TinCanMan to the game. Make\
      \ sure you enter the filenames you chose for the .ukx and .utx packages in the\
      \ Mesh and Skins parameters, respectively. The file can be created in Notepad\
      \ and saved to the UT2003/System directory. Name it <i>TinCanMan.upl</i>.</p>\n\
      <div class=\"center\">\n<div class=\"floatnone\"><a href=\"/File:Legacy_MCMT-27-TCManUPL.gif\"\
      \ class=\"image\" title=\"FIG. 27 Example text for TinCanMan.upl\"><img alt=\"\
      FIG. 27 Example text for TinCanMan.upl\" src=\"/w/images/Legacy_MCMT-27-TCManUPL.gif\"\
      \ width=\"699\" height=\"172\" /></a></div>\n</div>\n<p>A \"fully-fleshed\"\
      \ .upl file will also reference a <b>Portrait</b> image file (256w x 512d) to\
      \ fill the new slot in the Player tab character lineup (rather than the big\
      \ question mark that will show otherwise), and a short <b>Text</b> description\
      \ entered in xPlayers.int (in the DecoText section) that appears as the character's\
      \ Bio. Check xPlayersL1.upl for clues to syntax, etc. for these specifications.</p>\n\
      <p>Now it's time to try out TinCanMan.</p>\n<p>101. Launch UT2003, go to the\
      \ Player tab, and scroll through the roster lineup – you should see a big question\
      \ mark among the character portraits (unless you were industrious enough to\
      \ make a portrait for TinCanMan and specify it in the .upl file). Select this\
      \ image and click on the Bio/3D View button at the right of the interface. TinCanMan\
      \ should appear here. If not, don't worry, it's not a killer problem.</p>\n\
      <p>Select your favorite map, set the bot count to 0 (TinCanMan is easy prey\
      \ – give 'im a chance!), and Play the map.</p>\n<p>When the character spawns,\
      \ it should display the Idle_Rifle animation. Press the Shift key and your forward\
      \ motion key (e.g., W), and TinCanMan will walk forward, displaying the walk\
      \ cycle he was given. However, any other movement keys won't produce new animations,\
      \ because TinCanMan has only two sequences identified in his .ukx file – <i>WalkF</i>\
      \ and <i>Idle_Rifle</i>. This is all the engine knows to play for this character.\
      \ If you showlog and try walking to the left, the engine logs a warning that\
      \ a certain anim sequence it expects can't be found. The remedy is to provide\
      \ the character with a complete set of animation sequences, with names that\
      \ match those the engine expects for xPawn.</p>\n<p>So that's it – 101 steps\
      \ and you have a Maya PLE character model in the game. TinCanMan isn't much\
      \ use for fighting a deathmatch (though it's possible, if you can contain the\
      \ snickers), but the steps required to manufacture and import a fully-animated\
      \ mega-death-dealing model of your own creation are the same, just more complex\
      \ in detail.</p>\n<h3><span class=\"mw-headline\" id=\"More_Customization\"\
      >More Customization</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Maya_PLE_Character_Model_Tutorial_Part_5?section=2\"\
      \ title=\"Edit section: More Customization\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Beyond the 101 steps lies a vast territory wherein\
      \ all varieties of creatures are possible. But those require more a elaborate\
      \ process to make them fully useable in-game. The modeling and animation steps\
      \ in Maya PLE are the same (if more sophisticated), but for advanced custom\
      \ characters (i.e., those whose actions/animations don't match up with the given\
      \ defaults for xPawn), substantially more effort is required to get them to\
      \ function properly in the Unreal universe. This is the approach a total conversion\
      \ mod might take for its characters. A tutorial covering this process is in\
      \ the R&amp;D stage.</p>\n<p>Also in the works is information about using the\
      \ Animations browser to fine-tune an imported model, including how to attach\
      \ weapons and game effects to designated bones. For now, check the UDN tutorials,\
      \ they're a prime source:</p>\n<p><a href=\"http://udn.epicgames.com/Two/AnimBrowserTutorial\"\
      \ class=\"extiw\" title=\"udn2:AnimBrowserTutorial\">udn2:AnimBrowserTutorial</a></p>\n\
      <hr />\n<p><a href=\"/Legacy:Maya_PLE_Character_Model_Tutorial\" title=\"Legacy:Maya\
      \ PLE Character Model Tutorial\">Maya PLE Character Model Tutorial</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.087 seconds\nReal time usage:\
      \ 0.089 seconds\nPreprocessor visited node count: 6/1000000\nPreprocessor generated\
      \ node count: 12/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2132-0!*!0!!*!5!* and timestamp 20221118155647 and revision\
      \ id 5190\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Maya PLE Character Model Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:UnEditor.Mll"
  templates: []
  images:
  - "Legacy_MCMT-27-TCManUPL.gif"
  - "Legacy_MCMT-26-TCManInUed.gif"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Getting Into the Game"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Maya_PLE_Character_Model_Tutorial_Part_5"
    byteoffset: 0
    anchor: "Getting_Into_the_Game"
  - toclevel: 2
    level: "3"
    line: "More Customization"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Maya_PLE_Character_Model_Tutorial_Part_5"
    byteoffset: 7426
    anchor: "More_Customization"
  displaytitle: "Legacy:Maya PLE Character Model Tutorial Part 5"
  iwlinks:
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/AnimBrowserTutorial"
    name: "udn2:AnimBrowserTutorial"
  wikitext:
    text: "==Getting Into the Game ==\n\nModeling done, IK rigging complete, animation\
      \ sequences finalized, and a spot of texturing applied &ndash; TinCanMan is\
      \ ready for prime-time. This chapter of the tutorial will re-iterate the model\
      \ export instructions from Epic, but it's part of the process and doesn't suffer\
      \ from repetition.\n\nIMPORTANT NOTE: This part of the tutorial assumes you\
      \ have edited the system environment variable according to the instructions\
      \ on CD#3 of the UT2003 release, and that the [[Legacy:UnEditor.Mll|unEditor.mll]]\
      \ plug-in loads successfully.\n\nFirst save the TinCanMan file and use '''File>New'''\
      \ to clear the workspace. Use '''Window>Settings/Preferences>Plug-in Manager'''\
      \ to open the Plug-in Manager. Check the box next to '''unEditor.mll'''. UnrealEd\
      \ should open as the plug-in loads. (The reason for the File>New before loading\
      \ the plug-in is that I've repeatedly had Maya PLE & UEd crash if a scene of\
      \ any complexity is open when loading unEditor.mll, but it always works OK if\
      \ I do File>New first.)\n\nSwitch back to Maya PLE, close the Plug-in Manager\
      \ dialog, and open the TinCanMan file.\n\n90. Switch to the Modeling editor.\
      \ Select ''SkinMesh''. Use '''Polygons>Triangulate''' to explicitly insure all\
      \ the SkinMesh polys are triangulated &ndash; unEditor.mll does not automatically\
      \ triangulate on export. Save the file.\n\n91. In Outliner, select ''RootBone''.\
      \ In the main menu use '''Create>Sets>Set>OPTIONS''' to open the Create Set\
      \ dialog. In the Name field enter ''TinCanMan'' and click Apply and Close.\n\
      \n92. In Outliner, select ''TinCanMan''. Be sure it is the only object selected\
      \ in Outliner, then open the Attribute Editor by 2-clicking the ''TinCanMan''\
      \ set icon.\n\n93. Expand the '''Extra Attributes''' section (it will be empty).\
      \ In the Attribute Editor menu, use '''Attributes>Add Attributes''' to open\
      \ the Add Attribute dialog. \n\n94. In the Add Attribute dialog, enable the\
      \ String radio button in the Data Type section, type in ''package'' for the\
      \ Attribute Name, then click Add. \n\nType ''animargs'' in the Attribute Name\
      \ field and click Add. \n\nChange the Data Type to Float and type ''scale''\
      \ in the Attribute Name field. Click Add. Close the Add Attribute dialog.\n\n\
      95. The Attribute Editor Extra Attributes section should now contain the three\
      \ newly-added attributes. In the package field of Additional Attributes, enter\
      \ ''T_C_Man''. In the Scale field enter 2.0. In the animargs field type \n\n\
      :WalkF 10 41 Idle_Rifle 50 97\n\nNote that the frame-range for the two animation\
      \ sequences is one frame short of the full sequence length that was keyframed.\
      \ That's because the start & end frames of the animation cycles are identical,\
      \ and only one of them is needed in the cycle when played back. The slight pause\
      \ caused by having two identical frames in the loop can sometimes be quite apparent,\
      \ so it's best to leave one out.\n\nIf you checked out the xPawn.uc file, or\
      \ looked carefully at the animation sequences list in the UEd Animations browser,\
      \ you'll recognize that the names chosen for TinCanMan's anims match those used\
      \ for UT2003's \"stock\" characters. This isn't an absolute necessity, but it\
      \ greatly simplifies the steps needed to get the model into the game. More info\
      \ about this in a future tutorial.\n\n96. In the Command Line type \n\n:unEditor\
      \ anim TinCanMan \n\nand hit Enter. The viewport should show the model animations\
      \ playing through once at fast speed while the model exports. The Command Feedback\
      \ should report ''Result:  [1] animating meshes(s) exported''\n\n97. Switch\
      \ to UEd and open the Textures browser. Import the texture file that was applied\
      \ in Maya PLE, using package name ''TinCanMan_TX'' and group name ''Skins''.\
      \ Save the package in the UT2003/Textures directory. Select the newly-imported\
      \ texture in the Texture browser.\n\n98. Open the Animations browser and use\
      \ the package-select drop-down to select ''T_C_Man'' from the list. The other\
      \ fields at the top of the browser should read ''TinCanMan'', and the animation\
      \ sequence list should show ''WalkF[32]'' and ''Idle_Rifle[48]''. The model\
      \ will have the Engine.Default texture. Select an animation sequence, enable\
      \ looping in the playback controls, and play the animation. Cool.\n\n99. In\
      \ the '''Mesh''' tab at the right of the browser, expand '''Skin''' fully, click\
      \ '''Add''', then '''Use''', to apply the newly-imported TinCanMan texture to\
      \ the model in the Skin(0) slot. Save the file in the UT2003/Animations directory\
      \ as ''T_C_Man.ukx''.\n\n[[Image:Legacy_MCMT-26-TCManInUed.gif|center|FIG 26.\
      \ TinCanMan in the UEd Animations browser]]\n\nTinCanMan is now available for\
      \ use by UT2003, but a another step is needed to insure he can be easily selected\
      \ for use by the engine or a player. Return to Maya PLE, save the file and quit.\
      \ UEd will close also since it was opened as a plug-in.\n\n100. A .upl file\
      \ must be created for TinCanMan. This text file contains references to character\
      \ specifications, and is necessary if the character is to appear in the Instant\
      \ Action menu Player roster. \n\nThe entries highlighted in FIG 27 are the minimum\
      \ necessary to identify TinCanMan to the game. Make sure you enter the filenames\
      \ you chose for the .ukx and .utx packages in the Mesh and Skins parameters,\
      \ respectively. The file can be created in Notepad and saved to the UT2003/System\
      \ directory. Name it ''TinCanMan.upl''.\n\n[[Image:Legacy_MCMT-27-TCManUPL.gif|center|FIG.\
      \ 27 Example text for TinCanMan.upl]]\n\nA \"fully-fleshed\" .upl file will\
      \ also reference a '''Portrait''' image file (256w x 512d) to fill the new slot\
      \ in the Player tab character lineup (rather than the big question mark that\
      \ will show otherwise), and a short '''Text''' description entered in xPlayers.int\
      \ (in the DecoText section) that appears as the character's Bio. Check xPlayersL1.upl\
      \ for clues to syntax, etc. for these specifications.\n\nNow it's time to try\
      \ out TinCanMan. \n\n101. Launch UT2003, go to the Player tab, and scroll through\
      \ the roster lineup &ndash; you should see a big question mark among the character\
      \ portraits (unless you were industrious enough to make a portrait for TinCanMan\
      \ and specify it in the .upl file). Select this image and click on the Bio/3D\
      \ View button at the right of the interface. TinCanMan should appear here. If\
      \ not, don't worry, it's not a killer problem.\n\nSelect your favorite map,\
      \ set the bot count to 0 (TinCanMan is easy prey &ndash; give 'im a chance!),\
      \ and Play the map.\n\nWhen the character spawns, it should display the Idle_Rifle\
      \ animation. Press the Shift key and your forward motion key (e.g., W), and\
      \ TinCanMan will walk forward, displaying the walk cycle he was given. However,\
      \ any other movement keys won't produce new animations, because TinCanMan has\
      \ only two sequences identified in his .ukx file &ndash; ''WalkF'' and ''Idle_Rifle''.\
      \ This is all the engine knows to play for this character. If you showlog and\
      \ try walking to the left, the engine logs a warning that a certain anim sequence\
      \ it expects can't be found. The remedy is to provide the character with a complete\
      \ set of animation sequences, with names that match those the engine expects\
      \ for xPawn.\n\nSo that's it &ndash; 101 steps and you have a Maya PLE character\
      \ model in the game. TinCanMan isn't much use for fighting a deathmatch (though\
      \ it's possible, if you can contain the snickers), but the steps required to\
      \ manufacture and import a fully-animated mega-death-dealing model of your own\
      \ creation are the same, just more complex in detail.\n\n===More Customization\
      \ ===\n\nBeyond the 101 steps lies a vast territory wherein all varieties of\
      \ creatures are possible. But those require more a elaborate process to make\
      \ them fully useable in-game. The modeling and animation steps in Maya PLE are\
      \ the same (if more sophisticated), but for advanced custom characters (i.e.,\
      \ those whose actions/animations don't match up with the given defaults for\
      \ xPawn), substantially more effort is required to get them to function properly\
      \ in the Unreal universe. This is the approach a total conversion mod might\
      \ take for its characters. A tutorial covering this process is in the R&D stage.\n\
      \nAlso in the works is information about using the Animations browser to fine-tune\
      \ an imported model, including how to attach weapons and game effects to designated\
      \ bones. For now, check the UDN tutorials, they're a prime source:\n\n[[udn2:AnimBrowserTutorial]]\n\
      \n----\n\n[[Legacy:Maya PLE Character Model Tutorial|Maya PLE Character Model\
      \ Tutorial]]"
  properties: []
  revId: 5190
name: "Legacy:Maya PLE Character Model Tutorial Part 5"
revision:
  revid: 5190
  parentid: 5192
  user: "SuperApe"
  timestamp: 1133405390.000000000
  comment: "*"
timestamp: 1668786930.925099000
