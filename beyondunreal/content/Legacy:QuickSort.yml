---
parse:
  title: "Legacy:QuickSort"
  text:
    text: "<p>QuickSort is a useful, very fast, algorithm that is used for sorting\
      \ arrays. For more information, see <a href=\"http://en.wikipedia.org/wiki/Quicksort\"\
      \ class=\"extiw\" title=\"wikipedia:Quicksort\">Wikipedia:Quicksort</a>.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#For_this_to_work\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">For this to work</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Algorithm\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Algorithm</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Code\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Code</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#Tips\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Tips</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"\
      ><a href=\"#Related_Topics\"><span class=\"tocnumber\">5</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"For_this_to_work\">For this to work</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:QuickSort?section=1\" title=\"Edit section: For this to\
      \ work\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>The array to be sorted is called MyArray.</li>\n<li>The values High\
      \ and Low represent the range that is to be sorted.</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Algorithm\">Algorithm</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:QuickSort?section=2\"\
      \ title=\"Edit section: Algorithm\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ol>\n<li>Split the array in half, set x to be the value\
      \ of the partition element.</li>\n<li>Starting from the bottom, increment the\
      \ Low (i) value until you reach a value that is equal to or higher than the\
      \ partition element (x).</li>\n<li>Starting from the top, decrement the High\
      \ (j) value until you reach a value that is lower than or equal to the partition\
      \ element (x).</li>\n<li>If the element at array index i is less than or equal\
      \ to the element at array index j, swap them.</li>\n<li>Goto 2, until i is larger\
      \ than j, where you proceed.</li>\n<li>QuickSort calls itself twice recursivly\
      \ to sort the upper/lower parts of the array.</li>\n</ol>\n<h2><span class=\"\
      mw-headline\" id=\"Code\">Code</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:QuickSort?section=3\"\
      \ title=\"Edit section: Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Function</span> SortArray<span class=\"br0\">(</span><span class=\"kw5\"\
      >Int</span> Low, <span class=\"kw5\">Int</span> High<span class=\"br0\">)</span>\
      \ <span class=\"co1\">//Sortage</span>\n<span class=\"br0\">{</span>\n<span\
      \ class=\"co1\">//  low is the lower index, high is the upper index</span>\n\
      <span class=\"co1\">//  of the region of array a that is to be sorted</span>\n\
      \ \n    <span class=\"kw1\">local</span> <span class=\"kw5\">Int</span> i,j;\n\
      \    <span class=\"kw1\">local</span> <span class=\"kw5\">String</span> x;\n\
      \ \n    i <span class=\"sy0\">=</span> Low;\n    j <span class=\"sy0\">=</span>\
      \ High;\n    x <span class=\"sy0\">=</span> MyArray<span class=\"br0\">[</span><span\
      \ class=\"br0\">(</span>Low<span class=\"sy0\">+</span>High<span class=\"br0\"\
      >)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"\
      br0\">]</span>;\n \n    <span class=\"co1\">//  partition</span>\n    <span\
      \ class=\"kw2\">do</span>\n        <span class=\"br0\">{</span>    \n      \
      \  <span class=\"kw2\">while</span> <span class=\"br0\">(</span>MyArray<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ x<span class=\"br0\">)</span>\n            i <span class=\"sy0\">+=</span>\
      \ <span class=\"nu0\">1</span>; \n        <span class=\"kw2\">while</span> <span\
      \ class=\"br0\">(</span>MyArray<span class=\"br0\">[</span>j<span class=\"br0\"\
      >]</span> <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span>\n  \
      \          j <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span>;\n \
      \       <span class=\"kw2\">if</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">&lt;=</span> j<span class=\"br0\">)</span>\n            <span class=\"\
      br0\">{</span>\n            SwapArray<span class=\"br0\">(</span>i,j<span class=\"\
      br0\">)</span>;\n            i <span class=\"sy0\">+=</span> <span class=\"\
      nu0\">1</span>; \n            j <span class=\"sy0\">-=</span> <span class=\"\
      nu0\">1</span>;\n            <span class=\"br0\">}</span>\n        <span class=\"\
      br0\">}</span> until <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span>\
      \ j<span class=\"br0\">)</span>;\n \n    <span class=\"co1\">//  recursion</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>low <span class=\"\
      sy0\">&lt;</span> j<span class=\"br0\">)</span>\n        SortArray<span class=\"\
      br0\">(</span>low, j<span class=\"br0\">)</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> high<span class=\"\
      br0\">)</span>\n        SortArray<span class=\"br0\">(</span>i, high<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">Function</span>\
      \ SwapArray<span class=\"br0\">(</span><span class=\"kw5\">Int</span> EL1, <span\
      \ class=\"kw5\">Int</span> EL2<span class=\"br0\">)</span> <span class=\"co1\"\
      >//Function to swap two elements in an array</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw1\">Local</span> <span class=\"kw5\">String</span> Temp;\n\
      \ \n    Temp <span class=\"sy0\">=</span> MyArray<span class=\"br0\">[</span>EL1<span\
      \ class=\"br0\">]</span>;\n    MyArray<span class=\"br0\">[</span>EL1<span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> MyArray<span class=\"br0\">[</span>EL2<span\
      \ class=\"br0\">]</span>;\n    MyArray<span class=\"br0\">[</span>EL2<span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> Temp;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Wormbo:</b> Function calls are slow, so it might be a good idea\
      \ to include the code for swapping the array elements in the main function.</p>\n\
      <p><b>Foxpaw:</b> I've done that in my implementations, but perhaps it's easier\
      \ to understand when it's modular in this fashion.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Tips\">Tips</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:QuickSort?section=4\" title=\"Edit section:\
      \ Tips\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The above functions assume you are sorting a string array, but you can easily\
      \ adapt it for any type of values. When sorting struct or object arrays you\
      \ will probably want to overload the <b>&lt;</b> and <b>&gt;</b> operators.</p>\n\
      <p>Here's an example that could be used e.g. for arrays of weapons:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// operator &gt;</span>\n<span class=\"co1\">// operator\
      \ &lt;</span>\n<span class=\"co1\">//</span>\n<span class=\"co1\">// Greater\
      \ than and less then operators for Inventory objects.</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      \ \n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >24</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw9\"\
      >Inventory</span> A, <span class=\"kw9\">Inventory</span> B<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> A <span class=\"sy0\">==</span> <span class=\"kw5\"\
      >None</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   \
      \ <span class=\"kw2\">return</span> B <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> B <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n      <span class=\"kw2\">return</span> <span\
      \ class=\"kw6\">false</span>;\n    <span class=\"kw2\">else</span> <span class=\"\
      br0\">{</span>\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ A.<span class=\"me0\">InventoryGroup</span> <span class=\"sy0\">!=</span>\
      \ B.<span class=\"me0\">InventoryGroup</span> <span class=\"br0\">)</span>\n\
      \        <span class=\"kw2\">return</span> A.<span class=\"me0\">InventoryGroup</span>\
      \ <span class=\"sy0\">&gt;</span> B.<span class=\"me0\">InventoryGroup</span>;\n\
      \      <span class=\"kw2\">else</span>\n        <span class=\"kw2\">return</span>\
      \ A.<span class=\"me0\">GroupOffset</span> <span class=\"sy0\">&gt;</span> B.<span\
      \ class=\"me0\">GroupOffset</span>;\n    <span class=\"br0\">}</span>\n  <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span>\
      \ <span class=\"kw5\">bool</span> <span class=\"sy0\">&lt;</span> <span class=\"\
      br0\">(</span><span class=\"kw9\">Inventory</span> A, <span class=\"kw9\">Inventory</span>\
      \ B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> B <span class=\"sy0\">&gt;</span> A;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:QuickSort?section=5\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Open_Source\" title=\"Legacy:Open Source\">Open\
      \ Source</a></li>\n<li><a href=\"/Legacy:Insertion_Sort\" title=\"Legacy:Insertion\
      \ Sort\">Insertion Sort</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.070 seconds\nReal time usage: 0.071 seconds\nPreprocessor visited\
      \ node count: 38/1000000\nPreprocessor generated node count: 72/1000000\nPost‐\
      expand include size: 9/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2567-0!*!0!!en!*!*\
      \ and timestamp 20221118025112 and revision id 6130\n -->\n"
  categories:
  - sortkey: "QuickSort"
    name: "Legacy_Algorithm"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Insertion Sort"
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "For this to work"
    number: "1"
    index: "1"
    fromtitle: "Legacy:QuickSort"
    byteoffset: 129
    anchor: "For_this_to_work"
  - toclevel: 1
    level: "2"
    line: "Algorithm"
    number: "2"
    index: "2"
    fromtitle: "Legacy:QuickSort"
    byteoffset: 262
    anchor: "Algorithm"
  - toclevel: 1
    level: "2"
    line: "Code"
    number: "3"
    index: "3"
    fromtitle: "Legacy:QuickSort"
    byteoffset: 871
    anchor: "Code"
  - toclevel: 1
    level: "2"
    line: "Tips"
    number: "4"
    index: "4"
    fromtitle: "Legacy:QuickSort"
    byteoffset: 2010
    anchor: "Tips"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "5"
    fromtitle: "Legacy:QuickSort"
    byteoffset: 3010
    anchor: "Related_Topics"
  displaytitle: "Legacy:QuickSort"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Quicksort"
    name: "wikipedia:Quicksort"
  wikitext:
    text: "QuickSort is a useful, very fast, algorithm that is used for sorting arrays.\
      \ For more information, see [[Wikipedia:Quicksort]].\n\n==For this to work==\n\
      *The array to be sorted is called MyArray.\n*The values High and Low represent\
      \ the range that is to be sorted. \n\n==Algorithm==\n\n# Split the array in\
      \ half, set x to be the value of the partition element.\n# Starting from the\
      \ bottom, increment the Low (i) value until you reach a value that is equal\
      \ to or higher than the partition element (x).\n# Starting from the top, decrement\
      \ the High (j) value until you reach a value that is lower than or equal to\
      \ the partition element (x).\n# If the element at array index i is less than\
      \ or equal to the element at array index j, swap them.\n# Goto 2, until i is\
      \ larger than j, where you proceed.\n# QuickSort calls itself twice recursivly\
      \ to sort the upper/lower parts of the array.  \n\n==Code==\n\n<uscript>\nFunction\
      \ SortArray(Int Low, Int High) //Sortage\n{\n//  low is the lower index, high\
      \ is the upper index\n//  of the region of array a that is to be sorted\n\n\
      \    local Int i,j;\n    local String x;\n\n    i = Low;\n    j = High;\n  \
      \  x = MyArray[(Low+High)/2];\n\n    //  partition\n    do\n        {    \n\
      \        while (MyArray[i] < x)\n            i += 1; \n        while (MyArray[j]\
      \ > x)\n            j -= 1;\n        if (i <= j)\n            {\n          \
      \  SwapArray(i,j);\n            i += 1; \n            j -= 1;\n            }\n\
      \        } until (i > j);\n\n    //  recursion\n    if (low < j)\n        SortArray(low,\
      \ j);\n    if (i < high)\n        SortArray(i, high);\n}\n\nFunction SwapArray(Int\
      \ EL1, Int EL2) //Function to swap two elements in an array\n{\n    Local String\
      \ Temp;\n\n    Temp = MyArray[EL1];\n    MyArray[EL1] = MyArray[EL2];\n    MyArray[EL2]\
      \ = Temp;\n}\n</uscript>\n\n'''Wormbo:''' Function calls are slow, so it might\
      \ be a good idea to include the code for swapping the array elements in the\
      \ main function.\n\n'''Foxpaw:''' I've done that in my implementations, but\
      \ perhaps it's easier to understand when it's modular in this fashion.\n\n==Tips==\n\
      \nThe above functions assume you are sorting a string array, but you can easily\
      \ adapt it for any type of values. When sorting struct or object arrays you\
      \ will probably want to overload the '''&lt;''' and '''&gt;''' operators.\n\n\
      Here's an example that could be used e.g. for arrays of weapons:\n\n<uscript>\n\
      //=============================================================================\n\
      // operator >\n// operator <\n//\n// Greater than and less then operators for\
      \ Inventory objects.\n//=============================================================================\n\
      \nstatic final operator(24) bool > (Inventory A, Inventory B)\n{\n  if ( A ==\
      \ None ) {\n    return B != None;\n  }\n  else {\n    if ( B == None )\n   \
      \   return false;\n    else {\n      if ( A.InventoryGroup != B.InventoryGroup\
      \ )\n        return A.InventoryGroup > B.InventoryGroup;\n      else\n     \
      \   return A.GroupOffset > B.GroupOffset;\n    }\n  }\n}\n\nstatic final operator(24)\
      \ bool < (Inventory A, Inventory B)\n{\n  return B > A;\n}\n</uscript>\n\n==Related\
      \ Topics==\n* [[Legacy:Open Source|Open Source]]\n* [[Legacy:Insertion Sort|Insertion\
      \ Sort]]\n\n[[Category:Legacy Algorithm|{{PAGENAME}}]]"
  properties: []
  revId: 6130
name: "Legacy:QuickSort"
revision:
  revid: 6130
  parentid: 6131
  user: "Foxpaw"
  timestamp: 1119154306.000000000
  comment: "*"
timestamp: 1668764793.799475000
