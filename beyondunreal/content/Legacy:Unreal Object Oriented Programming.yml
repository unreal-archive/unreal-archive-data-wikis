---
parse:
  title: "Legacy:Unreal Object Oriented Programming"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Overview\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Overview</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#History_of_Game_Mods\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">History of Game\
      \ Mods</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Current_State_of_Game_Mods\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Current State\
      \ of Game Mods</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #The_Unreal_Way\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\"\
      >The Unreal Way</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Object_Oriented_Essence\"><span class=\"tocnumber\">1.4</span> <span class=\"\
      toctext\">Object Oriented Essence</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#The_Challenge_to_Know_It_All\"><span class=\"tocnumber\">1.5</span>\
      \ <span class=\"toctext\">The Challenge to Know It All</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Related_Topics\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#Comments\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Comments</span></a></li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Overview\">Overview</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=1\" title=\"\
      Edit section: Overview\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"History_of_Game_Mods\">History of Game\
      \ Mods</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=2\"\
      \ title=\"Edit section: History of Game Mods\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>It didn't use to be this easy. Modding games used\
      \ to be left up to those daring enough to know how to really hack into somebody\
      \ else's binaries and change them all around. In reality, game modification\
      \ probably has a lot to owe to piracy and old school code demos as those were\
      \ the early 8-bit hobbies of doing something with somebody else's technology.\
      \ Course, that's also why I didn't do it back then, it was just too damn hard.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Current_State_of_Game_Mods\">Current State\
      \ of Game Mods</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=3\"\
      \ title=\"Edit section: Current State of Game Mods\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Now, the developers of the\
      \ game give you acces to their code, tools to edit it and programs to recompile\
      \ it (well, some of them - others require you to hunt down a copy of Visual\
      \ C++ or the like). This might give some unsuspecting people the idea that creating\
      \ mods and mutators for a game like Unreal to be relatively easy. Well, that's\
      \ pretty dependant on what you are relating it to. It's all still programming,\
      \ and some of it advanced at that.</p>\n<h3><span class=\"mw-headline\" id=\"\
      The_Unreal_Way\">The Unreal Way</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=4\"\
      \ title=\"Edit section: The Unreal Way\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>With the Unreal engine, the hardest thing new modders\
      \ need to grasp is how object oriented (OO) it is. Unreal's OO design is what\
      \ makes it possible to create a whole new game without having to actually touch\
      \ any of the original code. It's what allows for mutators to alter an entire\
      \ game with only a few lines of code. It makes the engine remarkably versatile\
      \ to play with, but also somewhat easy to break.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Object_Oriented_Essence\">Object Oriented Essence</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=5\"\
      \ title=\"Edit section: Object Oriented Essence\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>OO design assumes you are not going to write one massive\
      \ piece of code to run everything in the game. Instead, discrete parts will\
      \ work with each other to form the greater whole. The nice thing about this\
      \ is that if you want to make discrete changes to the codebase, you only talk\
      \ to the relevant parts and can (usually) ignore the rest. Unreal Tournament\
      \ 2003 is even more object oriented than Unreal Tournament was, putting smaller\
      \ pieces of code into more classes and having a great of use of interfaces to\
      \ get and set variables and properties.</p>\n<p>A basic principle of OO is that\
      \ two classes shouldn't be doing the same thing. For instance, both the Ion\
      \ Painter and the Sniper Rifle in UT2003 do very similar things - consume ammo,\
      \ fire an instant shot, do damage to a target, etc. There are so many similarities\
      \ that much of the basic functionality can be done with the same lines of code.\
      \ Instead of duplicating this between the two classes, they share a parent class\
      \ which handles most of the basics. They then extend that class, assume all\
      \ of it's properties and functions, and then only add or edit what they need.</p>\n\
      <p>This has many advantages. It makes it much easier to maintain the basic functions\
      \ for all three classes, since they share code. In my UT mod, Freehold, I ended\
      \ up creating one class that handled all of the round respawn code. Any gametype\
      \ requiring rounds/lives just extended that class. Since custom round code in\
      \ UT was somewhat tricky, it was much more efficient to work with one class\
      \ and let it fix all of it's children. It also makes the subclasses more manageable,\
      \ since the only things you see in those classes is the relevant code.</p>\n\
      <h3><span class=\"mw-headline\" id=\"The_Challenge_to_Know_It_All\">The Challenge\
      \ to Know It All</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=6\"\
      \ title=\"Edit section: The Challenge to Know It All\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>The main problem most people\
      \ have with OO is unexpected behavior. Since you are usually not staring at\
      \ all the relevant code at once, it can be easy to misjudge the end result.\
      \ For instance, the XPakII had a mutator which added a SlipSuit instead of a\
      \ Translocator. When activated, it would increase the player's jumping and running.\
      \ Unless, of course, you use the Sprint mutator from XPak. This mutator changes\
      \ your speed based on the player's adrenaline. The way Sprint works overrides\
      \ the way the SlipSuit works - making the running code in it useless while Sprint\
      \ is running. There's no way to realize this without looking at the code for\
      \ both mutators, or of course - in testing.</p>\n<p>That is what Unreal modders\
      \ are in store for. The UT2003 codebase has a lot of fun technology to it, but\
      \ expect to spend a lot of time learning this hierarchy that you are to be expanding\
      \ from drifting through the code and the inevitable unexpected behavior. If\
      \ this hasn't scared you off, then the rest of the <a href=\"/Legacy:UnrealScript_Lessons\"\
      \ title=\"Legacy:UnrealScript Lessons\">UnrealScript Lessons</a> might be for\
      \ you.</p>\n<p><i>This tutorial was originally part of <a href=\"/Legacy:RegularX\"\
      \ title=\"Legacy:RegularX\">RegularX</a>'s <a href=\"/edit/Legacy:UTutes?redlink=1\"\
      \ class=\"new\" title=\"Legacy:UTutes (page does not exist)\">UTutes</a> series.</i></p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=7\" title=\"\
      Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Setting_Up_UnrealScript\"\
      \ title=\"Legacy:Setting Up UnrealScript\">Setting Up UnrealScript</a> – your\
      \ recommended next step</li>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a> – all the UnrealScript\
      \ tutorials</li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> – all the reference pages</li>\n<li><a href=\"/Legacy:Mutator_Topics\"\
      \ title=\"Legacy:Mutator Topics\">Mutator Topics</a> – more on mutators</li>\n\
      <li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making Mods</a>\
      \ – more on the organizational and social aspects</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Unreal_Object_Oriented_Programming?section=8\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Tarquin:</b> this is a fab page, and I'd like to\
      \ give it more prominence. Any ideas for a more descriptive name?</p>\n<p><b>EntropicLqd:</b>\
      \ A Preface to Writing UnrealScript</p>\n<p><b>Jeeptrash:</b> Beans, Beans,\
      \ The Magical Fruit0: The More You Eat The More UTut0</p>\n<p><b>CH3Z:</b> Hehe.\
      \ Nice, Jeeptrash&#160;;) Well, this is sure a nice read. A very good introduction\
      \ to what OOP is as it applies to Uscript. I would say it is \"<u>How UnrealScript\
      \ OOPs</u>\".</p>\n<p><b>CH3Z:</b> If it should be more of a \"procedural\"\
      \ name that follows the nameing convention for tutorials then maybe \"<u>Understanding\
      \ UnrealSript as OOP</u>\"? Gets long though. Maybe we can get Britney Spears\
      \ to sing us a song about it. \"OOPs UScript It Again\" =P</p>\n<p><b>Tarquin:</b>\
      \ Possibly rename <a href=\"/Legacy:OOP\" title=\"Legacy:OOP\" class=\"mw-redirect\"\
      >OOP</a> to \"abstract OOP\" and this page \"Unreal OOP\" ... though on that\
      \ page Wormbo points out we shouldn't use abbrevs. Hmm...</p>\n<p><b>CH3Z:</b>\
      \ Its a tricky one, it is important that the names make sense. Looks to me like\
      \ there's no getting around the abbreviation of term as long as \"Object Oriented\
      \ Programming\". I'm think that \"OOP Page1\", \"OOP Page2\" is better than\
      \ the way it is. I'll ponder it more... better to do it right.<br />\nI have\
      \ to wonder about having <i>What All This Is:</i> as the first line of this\
      \ page... not very imaginative or discriptive for this being its own page. Suggestion:\
      \ <i>OOP As It Applies To UnrealScript</i>, or anything more than <i>What All\
      \ This Is:</i></p>\n<p><b>Mychaeel:</b> Those pages are intended for people\
      \ <i>new</i> to OOP. It's little use naming them in a way that those people\
      \ won't even realize that's what they're looking for. It's not like they have\
      \ to type the page name every time they wish to access it.</p>\n<p>We could\
      \ possibly rename <a href=\"/Legacy:OOP\" title=\"Legacy:OOP\" class=\"mw-redirect\"\
      >OOP</a> to \"Object Oriented Programming/Concept\" and <strong class=\"selflink\"\
      >Unreal Object Oriented Programming</strong> to \"Object Oriented Programming/Introduction\"\
      ; and maybe a tutorial that very straightforwardly takes some UT2003 classes\
      \ apart (from an OOP point of view) \"Object Oriented Programming/Examples\"\
      . The main page \"Object Oriented Programming\" would explain and link to those\
      \ subpages, and \"OOP\" would redirect to it.</p>\n<p><b>Sobiwan:</b> Being\
      \ the proverbial OOP n00b, I agree \"Utut\" is a vague name. If I had just landed\
      \ from outer space and wanted to know how to program Unreal, then \"Utut\" would\
      \ not mean anything because its not words I am already familiar with. I think\
      \ it should read \"Unreal Object Oriented Programming\".</p>\n<p><b>Tarquin:</b>\
      \ Done</p>\n<p><b>Tychon:</b> While I'm not going to bother reverting it, since\
      \ either way is correct, orientated is a word. <a rel=\"nofollow\" class=\"\
      external text\" href=\"http://dictionary.reference.com/search?q=orientated&amp;r=67\"\
      >Dictionary - Orientated</a> Scroll down.</p>\n<p><b>Ironblayde:</b> Well I'll\
      \ be damned. I didn't think it was a word at all, but my dictionary does list\
      \ 'orientated,' though only as a verb, the past tense of 'orientate.' It's not\
      \ listed as an adjective (as an alternative to 'oriented') like it is on dictionary.com.\
      \ I guess it's time to get a new dictionary. Thanks for the usage lesson.&#160;;)</p>\n\
      <p><b>Tarquin:</b> It's a Brit / US thing, actually&#160;:)</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.039 seconds\nReal time usage: 0.083 seconds\n\
      Preprocessor visited node count: 31/1000000\nPreprocessor generated node count:\
      \ 38/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size:\
      \ 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3471-0!*!0!!en!*!* and timestamp 20221118014711 and revision\
      \ id 8915\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:RegularX"
  - ns: 100
    exists: true
    name: "Legacy:Setting Up UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:OOP"
  - ns: 100
    exists: false
    name: "Legacy:UTutes"
  templates: []
  images: []
  externallinks:
  - "http://dictionary.reference.com/search?q=orientated&r=67"
  sections:
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 0
    anchor: "Overview"
  - toclevel: 2
    level: "3"
    line: "History of Game Mods"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 14
    anchor: "History_of_Game_Mods"
  - toclevel: 2
    level: "3"
    line: "Current State of Game Mods"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 475
    anchor: "Current_State_of_Game_Mods"
  - toclevel: 2
    level: "3"
    line: "The Unreal Way"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 959
    anchor: "The_Unreal_Way"
  - toclevel: 2
    level: "3"
    line: "Object Oriented Essence"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 1390
    anchor: "Object_Oriented_Essence"
  - toclevel: 2
    level: "3"
    line: "The Challenge to Know It All"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 3088
    anchor: "The_Challenge_to_Know_It_All"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "7"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 4301
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "3"
    index: "8"
    fromtitle: "Legacy:Unreal_Object_Oriented_Programming"
    byteoffset: 4741
    anchor: "Comments"
  displaytitle: "Legacy:Unreal Object Oriented Programming"
  iwlinks: []
  wikitext:
    text: "==Overview==\n\n===History of Game Mods===\n\nIt didn't use to be this\
      \ easy. Modding games used to be left up to those daring enough to know how\
      \ to really hack into somebody else's binaries and change them all around. In\
      \ reality, game modification probably has a lot to owe to piracy and old school\
      \ code demos as those were the early 8-bit hobbies of doing something with somebody\
      \ else's technology. Course, that's also why I didn't do it back then, it was\
      \ just too damn hard. \n\n===Current State of Game Mods===\n\nNow, the developers\
      \ of the game give you acces to their code, tools to edit it and programs to\
      \ recompile it (well, some of them - others require you to hunt down a copy\
      \ of Visual C++ or the like). This might give some unsuspecting people the idea\
      \ that creating mods and mutators for a game like Unreal to be relatively easy.\
      \ Well, that's pretty dependant on what you are relating it to. It's all still\
      \ programming, and some of it advanced at that. \n\n===The Unreal Way===\n\n\
      With the Unreal engine, the hardest thing new modders need to grasp is how object\
      \ oriented (OO) it is. Unreal's OO design is what makes it possible to create\
      \ a whole new game without having to actually touch any of the original code.\
      \ It's what allows for mutators to alter an entire game with only a few lines\
      \ of code. It makes the engine remarkably versatile to play with, but also somewhat\
      \ easy to break. \n\n===Object Oriented Essence===\n\nOO design assumes you\
      \ are not going to write one massive piece of code to run everything in the\
      \ game. Instead, discrete parts will work with each other to form the greater\
      \ whole. The nice thing about this is that if you want to make discrete changes\
      \ to the codebase, you only talk to the relevant parts and can (usually) ignore\
      \ the rest. Unreal Tournament 2003 is even more object oriented than Unreal\
      \ Tournament was, putting smaller pieces of code into more classes and having\
      \ a great of use of interfaces to get and set variables and properties. \n\n\
      A basic principle of OO is that two classes shouldn't be doing the same thing.\
      \ For instance, both the Ion Painter and the Sniper Rifle in UT2003 do very\
      \ similar things - consume ammo, fire an instant shot, do damage to a target,\
      \ etc. There are so many similarities that much of the basic functionality can\
      \ be done with the same lines of code. Instead of duplicating this between the\
      \ two classes, they share a parent class which handles most of the basics. They\
      \ then extend that class, assume all of it's properties and functions, and then\
      \ only add or edit what they need. \n\nThis has many advantages. It makes it\
      \ much easier to maintain the basic functions for all three classes, since they\
      \ share code. In my UT mod, Freehold, I ended up creating one class that handled\
      \ all of the round respawn code. Any gametype requiring rounds/lives just extended\
      \ that class. Since custom round code in UT was somewhat tricky, it was much\
      \ more efficient to work with one class and let it fix all of it's children.\
      \ It also makes the subclasses more manageable, since the only things you see\
      \ in those classes is the relevant code. \n\n===The Challenge to Know It All===\n\
      \nThe main problem most people have with OO is unexpected behavior. Since you\
      \ are usually not staring at all the relevant code at once, it can be easy to\
      \ misjudge the end result. For instance, the XPakII had a mutator which added\
      \ a SlipSuit instead of a Translocator. When activated, it would increase the\
      \ player's jumping and running. Unless, of course, you use the Sprint mutator\
      \ from XPak. This mutator changes your speed based on the player's adrenaline.\
      \ The way Sprint works overrides the way the SlipSuit works - making the running\
      \ code in it useless while Sprint is running. There's no way to realize this\
      \ without looking at the code for both mutators, or of course - in testing.\
      \ \n\nThat is what Unreal modders are in store for. The UT2003 codebase has\
      \ a lot of fun technology to it, but expect to spend a lot of time learning\
      \ this hierarchy that you are to be expanding from drifting through the code\
      \ and the inevitable unexpected behavior. If this hasn't scared you off, then\
      \ the rest of the [[Legacy:UnrealScript Lessons|UnrealScript Lessons]] might\
      \ be for you. \n\n''This tutorial was originally part of [[Legacy:RegularX|RegularX]]'s\
      \ [[Legacy:UTutes|UTutes]] series.''\n\n==Related Topics==\n* [[Legacy:Setting\
      \ Up UnrealScript|Setting Up UnrealScript]] &ndash; your recommended next step\n\
      * [[Legacy:UnrealScript Lessons|UnrealScript Lessons]] &ndash; all the UnrealScript\
      \ tutorials\n* [[Legacy:UnrealScript|UnrealScript]] &ndash; all the reference\
      \ pages\n* [[Legacy:Mutator Topics|Mutator Topics]] &ndash; more on mutators\n\
      * [[Legacy:Making Mods|Making Mods]] &ndash; more on the organizational and\
      \ social aspects\n\n==Comments==\n\n'''Tarquin:''' this is a fab page, and I'd\
      \ like to give it more prominence. Any ideas for a more descriptive name?\n\n\
      '''EntropicLqd:''' A Preface to Writing UnrealScript\n\n'''Jeeptrash:''' Beans,\
      \ Beans, The Magical Fruit0: The More You Eat The More UTut0\n\n'''CH3Z:'''\
      \ Hehe. Nice, Jeeptrash ;) Well, this is sure a nice read. A very good introduction\
      \ to what OOP is as it applies to Uscript. I would say it is \"<u>How UnrealScript\
      \ OOPs</u>\".\n\n'''CH3Z:''' If it should be more of a \"procedural\" name that\
      \ follows the nameing convention for tutorials then maybe \"<u>Understanding\
      \ UnrealSript as OOP</u>\"? Gets long though. Maybe we can get Britney Spears\
      \ to sing us a song about it. \"OOPs UScript It Again\" =P\n\n'''Tarquin:'''\
      \ Possibly rename [[Legacy:OOP|OOP]] to \"abstract OOP\" and this page \"Unreal\
      \ OOP\" ... though on that page Wormbo points out we shouldn't use abbrevs.\
      \ Hmm... \n\n'''CH3Z:''' Its a tricky one, it is important that the names make\
      \ sense.  Looks to me like there's no getting around the abbreviation of term\
      \ as long as \"Object Oriented Programming\". I'm think that \"OOP Page1\",\
      \ \"OOP Page2\" is better than the way it is. I'll ponder it more... better\
      \ to do it right.<br />I have to wonder about having ''What All This Is:'' as\
      \ the first line of this page... not very imaginative or discriptive for this\
      \ being its own page. Suggestion: ''OOP As It Applies To UnrealScript'', or\
      \ anything more than ''What All This Is:''\n\n'''Mychaeel:''' Those pages are\
      \ intended for people ''new'' to OOP.  It's little use naming them in a way\
      \ that those people won't even realize that's what they're looking for.  It's\
      \ not like they have to type the page name every time they wish to access it.\n\
      \nWe could possibly rename [[Legacy:OOP|OOP]] to \"Object Oriented Programming/Concept\"\
      \ and [[Legacy:Unreal Object Oriented Programming|Unreal Object Oriented Programming]]\
      \ to \"Object Oriented Programming/Introduction\"; and maybe a tutorial that\
      \ very straightforwardly takes some UT2003 classes apart (from an OOP point\
      \ of view) \"Object Oriented Programming/Examples\".  The main page \"Object\
      \ Oriented Programming\" would explain and link to those subpages, and \"OOP\"\
      \ would redirect to it.\n\n'''Sobiwan:''' Being the proverbial OOP n00b, I agree\
      \ \"Utut\" is a vague name.  If I had just landed from outer space and wanted\
      \ to know how to program Unreal, then \"Utut\" would not mean anything because\
      \ its not words I am already familiar with.  I think it should read \"Unreal\
      \ Object Oriented Programming\".  \n\n'''Tarquin:''' Done\n\n'''Tychon:''' While\
      \ I'm not going to bother reverting it, since either way is correct, orientated\
      \ is a word. [http://dictionary.reference.com/search?q=orientated&r=67 Dictionary\
      \ - Orientated] Scroll down.\n\n'''Ironblayde:''' Well I'll be damned. I didn't\
      \ think it was a word at all, but my dictionary does list 'orientated,' though\
      \ only as a verb, the past tense of 'orientate.' It's not listed as an adjective\
      \ (as an alternative to 'oriented') like it is on dictionary.com. I guess it's\
      \ time to get a new dictionary. Thanks for the usage lesson. ;)\n\n'''Tarquin:'''\
      \ It's a Brit / US thing, actually :)"
  properties: []
  revId: 8915
name: "Legacy:Unreal Object Oriented Programming"
revision:
  revid: 8915
  parentid: 8916
  user: "Tarquin"
  timestamp: 1085136193.000000000
  comment: "*"
timestamp: 1668764125.656775000
