---
parse:
  title: "Legacy:UsUnit"
  text:
    text: "<p><b>UsUnit</b> is an UnrealScript Unit Testing Framework, much like <a\
      \ rel=\"nofollow\" class=\"external text\" href=\"http://www.junit.org\">JUnit</a>\
      \ and <a rel=\"nofollow\" class=\"external text\" href=\"http://dunit.sf.net\"\
      >DUnit</a> being developed by <a href=\"/Legacy:El_Muerte\" title=\"Legacy:El\
      \ Muerte\" class=\"mw-redirect\">El Muerte</a>.</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Unit_test\"\
      \ class=\"extiw\" title=\"wikipedia:Unit test\">Wikipedia:Unit testing</a> makes\
      \ it easier to validate correct behavior of the program during development.\
      \ Tests can be seperated from the base code and can easily be rerun in order\
      \ to validate if the changes made didn't break functionality.</p>\n<p>Unit testing\
      \ might seem like a lot of work, but there's a huge gain in the end.</p>\n<p>The\
      \ UsUnit Testing Framework is released under the <a href=\"/Legacy:LesserOpenUnrealModLicense\"\
      \ title=\"Legacy:LesserOpenUnrealModLicense\">LesserOpenUnrealModLicense</a>,\
      \ this means you can use it without limitations (even for commercial products).</p>\n\
      <p><b>Note:</b> never include the UsUnit package and related tests with your\
      \ game\\mod. It should not belong in there, so make sure you don't create dependencies\
      \ on UsUnit in your base code.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n\
      <div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Usage\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Usage</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#TestRunner\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">TestRunner</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-3\"\
      ><a href=\"#Configuration\"><span class=\"tocnumber\">1.1.1</span> <span class=\"\
      toctext\">Configuration</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#TestReporter\"><span class=\"tocnumber\">1.2</span>\
      \ <span class=\"toctext\">TestReporter</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-5\"><a href=\"#Configuration_2\"><span class=\"tocnumber\">1.2.1</span>\
      \ <span class=\"toctext\">Configuration</span></a></li>\n</ul>\n</li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Creating_a_test_case\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Creating a test\
      \ case</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Properties\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Properties</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Events\"><span class=\"tocnumber\"\
      >2.2</span> <span class=\"toctext\">Events</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-9\"><a href=\"#Functions\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Functions</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-10\"><a href=\"#UCPP_Notice\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">UCPP Notice</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Example_Test_Case\"><span class=\"tocnumber\">2.5</span>\
      \ <span class=\"toctext\">Example Test Case</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-12\"><a href=\"#Creating_a_Test_Suite\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Creating a Test Suite</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"#Example_Test_Suite\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Example Test Suite</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-14\"><a href=\"#Downloads\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Downloads</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-15\"><a href=\"#Development_releases\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Development releases</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-16\"><a href=\"#CVS_Access\"><span class=\"\
      tocnumber\">4.2</span> <span class=\"toctext\">CVS Access</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-17\"><a href=\"#Additional_Information\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">Additional Information</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Usage\">Usage</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UsUnit?section=1\" title=\"Edit section: Usage\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>All UsUnit classes\
      \ use the same external configuration file: <code>UsUnit.ini</code></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"TestRunner\">TestRunner</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=2\"\
      \ title=\"Edit section: TestRunner\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is the main class that will run all given test\
      \ cases and suites. There are a few ways to execute the TestRunner.</p>\n<dl>\n\
      <dt>ServerActor</dt>\n<dd>Simply add <code>UsUnit.TestRunner</code> to the ServerActors\
      \ list and start a server. The tests will be started depending on the <tt>fDelayedStart</tt>\
      \ value of the TestRunner.</dd>\n<dt>WebAdmin</dt>\n<dd>Upon installation of\
      \ UsUnit via the ut4mod the webadmin module will automatically be registered.\
      \ All you have to do is to enable the webadmin, start a server and visit the\
      \ WebAdmin page.</dd>\n<dt>Mutator</dt>\n<dd>A mutator is included that can\
      \ also start the test runner. The mutator name is <code>UsUnit.UsUnitMutator</code>.\
      \ The mutator is current in the beta stage. You can start the test runner and\
      \ view some results. But that is pretty much it.</dd>\n</dl>\n<h4><span class=\"\
      mw-headline\" id=\"Configuration\">Configuration</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=3\"\
      \ title=\"Edit section: Configuration\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>By default TestRunner doesn't do much. You will have\
      \ to define which tests to run. This can be done directly in the main configuration\
      \ file <code>UsUnit.ini</code> or via the WebAdmin.</p>\n<pre>[UsUnit.TestRunner]\n\
      Tests=MyTests.CASE_StartupTest\nTests=MyTests.SUITE_Algorithms\nfDelayedStart=0\n\
      </pre>\n<dl>\n<dt>Tests</dt>\n<dd>this is a dynamic string array containing\
      \ the fully qualified names of the test cases and suites to execute. They will\
      \ be executed in that order. By default this list is empty.</dd>\n<dt>fDelayedStart</dt>\n\
      <dd>this defines the number of seconds to wait before automatically starting\
      \ the tests. When it's set to 0 it will start the tests as soon as the TestRunner\
      \ has been spawned. If the value is negative it will not start the tests automatically,\
      \ it will wait until the run command is explicitly called. fDelayedStart is\
      \ only used when it's started as a ServerActor.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"TestReporter\">TestReporter</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=4\"\
      \ title=\"Edit section: TestReporter\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The TestReporter is resposible for reporting the test\
      \ progress and results. The TestReporter can have multiple output modules. The\
      \ following come standard with the UsUnit package:</p>\n<dl>\n<dt><code>Output_HTML</code></dt>\n\
      <dd>This will produce a HTML file in the UserLogs directory containing the results\
      \ of the tests.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Configuration_2\"\
      >Configuration</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UsUnit?section=5\" title=\"Edit section: Configuration\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<pre>[UsUnit.TestReporter]\n\
      bGenerateLogErrors=true\nOutputClasses=UsUnit.Output_HTML\n</pre>\n<dl>\n<dt>bGenerateLogErrors</dt>\n\
      <dd>This will generate \"error\" log entries in the main log file. These can\
      \ be parsed by a program to find the exact location of the check that failed.\
      \ For this to work best you should use <a href=\"/Legacy:UCPP\" title=\"Legacy:UCPP\"\
      >UCPP</a> and the correct macros (that come with the UsUnit package).</dd>\n\
      <dt>OutputClasses</dt>\n<dd>A dynamic string list containing all output modules\
      \ to use.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Creating_a_test_case\"\
      >Creating a test case</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UsUnit?section=6\" title=\"Edit section: Creating\
      \ a test case\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>A test case extends the actor <tt>TestCase</tt>. This class will contain\
      \ the code that performs the actual tests can checks. A normal test run will\
      \ be like this:</p>\n<ol>\n<li><i>TestCase.setUp()</i></li>\n<li><i>TestCase.run()</i>\n\
      <ol>\n<li>perform tests</li>\n<li>call <i>done()</i></li>\n</ol>\n</li>\n<li><i>TestCase.tearDown()</i></li>\n\
      </ol>\n<p><b>Note:</b> test cases are spawned only once and never destroyed\
      \ (not until a level restart). If your tests needs to initialize some data before\
      \ the test is actually executed implement the <i>setUp</i> function, do not\
      \ use any of the <i>BeginPlay</i> events.</p>\n<p>The most important thing you\
      \ need to do for a test case is implement the <i>run()</i> function. After you\
      \ performed all tests in this test case you should call the function <i>done()</i>,\
      \ if you do not do this the test cycle will never be completed.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Properties\">Properties</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=7\"\
      \ title=\"Edit section: Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>TestName</dt>\n<dd>a human readable name for\
      \ the test</dd>\n<dt>TestDescription</dt>\n<dd>a short description of the test</dd>\n\
      </dl>\n<h4><span class=\"mw-headline\" id=\"Events\">Events</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=8\"\
      \ title=\"Edit section: Events\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>run()</dt>\n<dd>will be called to run the test.\
      \ You need to implement this.</dd>\n<dt>setUp()</dt>\n<dd>will be called right\
      \ before run() is called, but outside the timed section. Use it to initialize\
      \ data.</dd>\n<dt>tearDown()</dt>\n<dd>will be called after the test case was\
      \ completed, but outside the timed section. Use it to clean up data.</dd>\n\
      </dl>\n<h4><span class=\"mw-headline\" id=\"Functions\">Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UsUnit?section=9\" title=\"Edit section: Functions\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<dl>\n<dt>Check(bool\
      \ expression, coerce string message)</dt>\n<dd>the actual check if a given condition\
      \ results in true. If the condition given by <tt>expression</tt> is false this\
      \ check failed. <tt>message</tt> contains a description of the current test.</dd>\n\
      <dt>Done()</dt>\n<dd>this function <b>must</b> be called after all checks have\
      \ been performed, otherwise the test cycle will not continue.</dd>\n</dl>\n\
      <h3><span class=\"mw-headline\" id=\"UCPP_Notice\">UCPP Notice</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=10\"\
      \ title=\"Edit section: UCPP Notice\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UsUnit comes with a macro file (<tt>UsUnit/macros.inc</tt>)\
      \ that can be used with <a href=\"/Legacy:UCPP\" title=\"Legacy:UCPP\">UCPP</a>.\
      \ This will add some extra magic to the Check functions. The following macros\
      \ are defined:</p>\n<dl>\n<dt>CHECK(expr,msg)</dt>\n<dd>this behaves much like\
      \ the normal Check function, except that it will append the current filename\
      \ and line where this function was called. This can be useful to find the check\
      \ that failed.</dd>\n<dt>CHECK(expr)</dt>\n<dd>this will be translated to CHECK(expr,\"\
      expr\"). In other words, the expression content will be converted to the description.\
      \ This makes it easier in some cases like: <tt>CHECK(1+1 == 2)</tt>.</dd>\n\
      </dl>\n<p>To use the macro file simply add the following line before you call\
      \ any CHECK:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#pragma ucpp include ../../UsUnit/macros.inc</span></pre></div>\n</div>\n\
      <p><i>Note:</i> make sure you read the <a href=\"/Legacy:UCPP\" title=\"Legacy:UCPP\"\
      >UCPP</a> instructions on how to use it.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Example_Test_Case\">Example Test Case</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=11\"\
      \ title=\"Edit section: Example Test Case\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><i>More examples can be found in the UsUnitExamples\
      \ package.</i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#pragma ucpp notice - precompile this unit with UCPP</span>\n<span class=\"\
      co2\">#pragma ucpp version</span>\n<span class=\"co1\">// include the CHECK()\
      \ macros to add filenames and location</span>\n<span class=\"co2\">#pragma ucpp\
      \ include ../../UsUnit/macros.inc</span>\n \n<span class=\"kw1\">class</span>\
      \ TEST_SimpleTests <span class=\"kw1\">extends</span> TestCase;\n \n<span class=\"\
      kw1\">function</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> dummy;\n  \
      \  CHECK<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"\
      sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span>;\n    CHECK<span class=\"\
      br0\">(</span><span class=\"st0\">\"CaseInsensitive\"</span> ~<span class=\"\
      sy0\">=</span> <span class=\"st0\">\"caseinsensitive\"</span><span class=\"\
      br0\">)</span>;\n    CHECK<span class=\"br0\">(</span><span class=\"kw6\">false</span>,\
      \ <span class=\"st0\">\"false; will always fail\"</span><span class=\"br0\"\
      >)</span>;\n    CHECK<span class=\"br0\">(</span><span class=\"kw3\">split</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"one two three four five\"</span>,\
      \ <span class=\"st0\">\" \"</span>, dummy<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">==</span> <span class=\"nu0\">5</span>, <span class=\"st0\"\
      >\"<span class=\"es0\">\\\"</span>one two three four five<span class=\"es0\"\
      >\\\"</span> has 5 words\"</span><span class=\"br0\">)</span>;\n    CHECK<span\
      \ class=\"br0\">(</span><span class=\"kw3\">split</span><span class=\"br0\"\
      >(</span><span class=\"st0\">\"one\"</span>, <span class=\"st0\">\" \"</span>,\
      \ dummy<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"\
      nu0\">1</span>, <span class=\"st0\">\"<span class=\"es0\">\\\"</span>one<span\
      \ class=\"es0\">\\\"</span> is 1 word\"</span><span class=\"br0\">)</span>;\n\
      \    CHECK<span class=\"br0\">(</span><span class=\"kw3\">round</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\"\
      >)</span>;\n    CHECK<span class=\"br0\">(</span><span class=\"kw5\">int</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n    done<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n    TestName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Simple Tests\"</span>\n    TestDescription<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Example test case, performs some simple tests\
      \ basic math testing.\"</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Creating_a_Test_Suite\">Creating a Test\
      \ Suite</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UsUnit?section=12\" title=\"Edit section: Creating\
      \ a Test Suite\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>A test suite is nothing more than a collection of test cases and\\or test\
      \ suites to be executed sequentially. A test suite extends the class <tt>TestSuite</tt>.\
      \ It usually doesn't contain any code, just values in the defaultproperties\
      \ section.</p>\n<p>The following class properties are of interest:</p>\n<dl>\n\
      <dt><tt>TestName</tt></dt>\n<dd>the name of the suite</dd>\n<dt><tt>TestDescription</tt></dt>\n\
      <dd>a short description of the test suite (optional)</dd>\n<dt><tt>TestClasses</tt></dt>\n\
      <dd>a dynamic array with class references to test cases and test suites that\
      \ are part of this suite.</dd>\n<dt><tt>bBreakOnFail</tt></dt>\n<dd>if set to\
      \ true it will it will not continue with the next test class when the current\
      \ class failed a single check. Default: <tt>true</tt></dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Example_Test_Suite\">Example Test Suite</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UsUnit?section=13\" title=\"Edit section: Example Test\
      \ Suite\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> SUITE_ExampleSuite\
      \ <span class=\"kw1\">extends</span> TestSuite;\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n    TestName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Example Test Suite\"</span>\n    TestDescription<span class=\"\
      sy0\">=</span><span class=\"st0\">\"Bundles all example tests from the UsUnitExamples\
      \ package\"</span>\n \n    TestClasses<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'TEST_SimpleTests'</span>\n\
      \    TestClasses<span class=\"br0\">[</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'TEST_TimedTest'</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Downloads\">Downloads</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UsUnit?section=14\" title=\"Edit section: Downloads\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<ul>\n\
      <li><b><a rel=\"nofollow\" class=\"external text\" href=\"http://ut2004.elmuerte.com/files/UsUnit_v101_ut4mod.zip\"\
      >Version 1.1.14</a></b></li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://ut2004.elmuerte.com/files/UsUnit_v100_ut4mod.zip\">Version 1.0.11</a></li>\n\
      </ul>\n<h3><span class=\"mw-headline\" id=\"Development_releases\">Development\
      \ releases</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UsUnit?section=15\" title=\"Edit section: Development\
      \ releases\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Not really releases but just the lastest updates of the UsUnit packages straight\
      \ from the CVS</p>\n<ul>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnit/UsUnit.zip?tarball=1\"\
      >Main UsUnit package</a></li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnitExamples/UsUnitExamples.zip?tarball=1\"\
      >UsUnitExamples package</a></li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"\
      CVS_Access\">CVS Access</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UsUnit?section=16\"\
      \ title=\"Edit section: CVS Access\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>Anonymous access</dt>\n<dd>:pserver:anonymous@el-muerte.student.utwente.nl:/usr/local/cvsroot/UT2004</dd>\n\
      </dl>\n<dl>\n<dt>Module names</dt>\n<dd>UsUnit<br />\nUsUnitExamples</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Additional_Information\">Additional\
      \ Information</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UsUnit?section=17\" title=\"Edit section: Additional\
      \ Information\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UsUnit/ChangeLog\" title=\"Legacy:UsUnit/ChangeLog\"\
      >Legacy:UsUnit/ChangeLog</a> – changes for the various releases</li>\n<li><a\
      \ href=\"/Legacy:UsUnit/Discussion\" title=\"Legacy:UsUnit/Discussion\">Legacy:UsUnit/Discussion</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.120 seconds\nReal time\
      \ usage: 0.265 seconds\nPreprocessor visited node count: 108/1000000\nPreprocessor\
      \ generated node count: 186/1000000\nPost‐expand include size: 24/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:3516-0!*!0!!en!*!* and timestamp\
      \ 20221118014202 and revision id 42670\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:El Muerte"
  - ns: 100
    exists: true
    name: "Legacy:UsUnit/ChangeLog"
  - ns: 100
    exists: true
    name: "Legacy:UsUnit/Discussion"
  - ns: 100
    exists: true
    name: "Legacy:UCPP"
  - ns: 100
    exists: true
    name: "Legacy:LesserOpenUnrealModLicense"
  templates: []
  images: []
  externallinks:
  - "http://dunit.sf.net"
  - "http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnitExamples/UsUnitExamples.zip?tarball=1"
  - "http://www.junit.org"
  - "http://ut2004.elmuerte.com/files/UsUnit_v101_ut4mod.zip"
  - "http://ut2004.elmuerte.com/files/UsUnit_v100_ut4mod.zip"
  - "http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnit/UsUnit.zip?tarball=1"
  sections:
  - toclevel: 1
    level: "2"
    line: "Usage"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 886
    anchor: "Usage"
  - toclevel: 2
    level: "3"
    line: "TestRunner"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 983
    anchor: "TestRunner"
  - toclevel: 3
    level: "4"
    line: "Configuration"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 1758
    anchor: "Configuration"
  - toclevel: 2
    level: "3"
    line: "TestReporter"
    number: "1.2"
    index: "4"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 2629
    anchor: "TestReporter"
  - toclevel: 3
    level: "4"
    line: "Configuration"
    number: "1.2.1"
    index: "5"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 2950
    anchor: "Configuration_2"
  - toclevel: 1
    level: "2"
    line: "Creating a test case"
    number: "2"
    index: "6"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 3418
    anchor: "Creating_a_test_case"
  - toclevel: 2
    level: "4"
    line: "Properties"
    number: "2.1"
    index: "7"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 4213
    anchor: "Properties"
  - toclevel: 2
    level: "4"
    line: "Events"
    number: "2.2"
    index: "8"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 4329
    anchor: "Events"
  - toclevel: 2
    level: "4"
    line: "Functions"
    number: "2.3"
    index: "9"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 4645
    anchor: "Functions"
  - toclevel: 2
    level: "3"
    line: "UCPP Notice"
    number: "2.4"
    index: "10"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 5028
    anchor: "UCPP_Notice"
  - toclevel: 2
    level: "3"
    line: "Example Test Case"
    number: "2.5"
    index: "11"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 5887
    anchor: "Example_Test_Case"
  - toclevel: 1
    level: "2"
    line: "Creating a Test Suite"
    number: "3"
    index: "12"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 6759
    anchor: "Creating_a_Test_Suite"
  - toclevel: 2
    level: "3"
    line: "Example Test Suite"
    number: "3.1"
    index: "13"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 7479
    anchor: "Example_Test_Suite"
  - toclevel: 1
    level: "2"
    line: "Downloads"
    number: "4"
    index: "14"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 7793
    anchor: "Downloads"
  - toclevel: 2
    level: "3"
    line: "Development releases"
    number: "4.1"
    index: "15"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 7964
    anchor: "Development_releases"
  - toclevel: 2
    level: "3"
    line: "CVS Access"
    number: "4.2"
    index: "16"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 8305
    anchor: "CVS_Access"
  - toclevel: 1
    level: "2"
    line: "Additional Information"
    number: "5"
    index: "17"
    fromtitle: "Legacy:UsUnit"
    byteoffset: 8474
    anchor: "Additional_Information"
  displaytitle: "Legacy:UsUnit"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Unit_test"
    name: "wikipedia:Unit test"
  wikitext:
    text: "'''UsUnit''' is an UnrealScript Unit Testing Framework, much like [http://www.junit.org\
      \ JUnit] and [http://dunit.sf.net DUnit] being developed by [[Legacy:El Muerte|El\
      \ Muerte]].\n\n[[Wikipedia:Unit test]]ing makes it easier to validate correct\
      \ behavior of the program during development. Tests can be seperated from the\
      \ base code and can easily be rerun in order to validate if the changes made\
      \ didn't break functionality.\n\nUnit testing might seem like a lot of work,\
      \ but there's a huge gain in the end.\n\nThe UsUnit Testing Framework is released\
      \ under the [[Legacy:LesserOpenUnrealModLicense|LesserOpenUnrealModLicense]],\
      \ this means you can use it without limitations (even for commercial products).\n\
      \n'''Note:''' never include the UsUnit package and related tests with your game\\\
      mod. It should not belong in there, so make sure you don't create dependencies\
      \ on UsUnit in your base code.\n\n==Usage==\n\nAll UsUnit classes use the same\
      \ external configuration file: <code>UsUnit.ini</code>\n\n===TestRunner===\n\
      \nThis is the main class that will run all given test cases and suites. There\
      \ are a few ways to execute the TestRunner.\n\n;ServerActor: Simply add <code>UsUnit.TestRunner</code>\
      \ to the ServerActors list and start a server. The tests will be started depending\
      \ on the <tt>fDelayedStart</tt> value of the TestRunner.\n;WebAdmin: Upon installation\
      \ of UsUnit via the ut4mod the webadmin module will automatically be registered.\
      \ All you have to do is to enable the webadmin, start a server and visit the\
      \ WebAdmin page.\n;Mutator: A mutator is included that can also start the test\
      \ runner. The mutator name is <code>UsUnit.UsUnitMutator</code>. The mutator\
      \ is current in the beta stage. You can start the test runner and view some\
      \ results. But that is pretty much it.\n\n====Configuration====\n\nBy default\
      \ TestRunner doesn't do much. You will have to define which tests to run. This\
      \ can be done directly in the main configuration file <code>UsUnit.ini</code>\
      \ or via the WebAdmin.\n\n [UsUnit.TestRunner]\n Tests=MyTests.CASE_StartupTest\n\
      \ Tests=MyTests.SUITE_Algorithms\n fDelayedStart=0\n\n;Tests:this is a dynamic\
      \ string array containing the fully qualified names of the test cases and suites\
      \ to execute. They will be executed in that order. By default this list is empty.\n\
      ;fDelayedStart:this defines the number of seconds to wait before automatically\
      \ starting the tests. When it's set to 0 it will start the tests as soon as\
      \ the TestRunner has been spawned. If the value is negative it will not start\
      \ the tests automatically, it will wait until the run command is explicitly\
      \ called. fDelayedStart is only used when it's started as a ServerActor.\n\n\
      ===TestReporter===\n\nThe TestReporter is resposible for reporting the test\
      \ progress and results. The TestReporter can have multiple output modules. The\
      \ following come standard with the UsUnit package:\n\n;<code>Output_HTML</code>:This\
      \ will produce a HTML file in the UserLogs directory containing the results\
      \ of the tests.\n\n====Configuration ====\n\n [UsUnit.TestReporter]\n bGenerateLogErrors=true\n\
      \ OutputClasses=UsUnit.Output_HTML\n\n;bGenerateLogErrors:This will generate\
      \ \"error\" log entries in the main log file. These can be parsed by a program\
      \ to find the exact location of the check that failed. For this to work best\
      \ you should use [[Legacy:UCPP|UCPP]] and the correct macros (that come with\
      \ the UsUnit package).\n;OutputClasses:A dynamic string list containing all\
      \ output modules to use.\n\n==Creating a test case==\n\nA test case extends\
      \ the actor <tt>TestCase</tt>. This class will contain the code that performs\
      \ the actual tests can checks. A normal test run will be like this:\n\n# ''TestCase.setUp()''\n\
      # ''TestCase.run()''\n## perform tests\n## call ''done()''\n# ''TestCase.tearDown()''\n\
      \n'''Note:''' test cases are spawned only once and never destroyed (not until\
      \ a level restart). If your tests needs to initialize some data before the test\
      \ is actually executed implement the ''setUp'' function, do not use any of the\
      \ ''BeginPlay'' events.\n\nThe most important thing you need to do for a test\
      \ case is implement the ''run()'' function. After you performed all tests in\
      \ this test case you should call the function ''done()'', if you do not do this\
      \ the test cycle will never be completed.\n\n====Properties====\n;TestName:\
      \ a human readable name for the test\n;TestDescription: a short description\
      \ of the test\n\n====Events====\n;run(): will be called to run the test. You\
      \ need to implement this.\n;setUp(): will be called right before run() is called,\
      \ but outside the timed section. Use it to initialize data.\n;tearDown(): will\
      \ be called after the test case was completed, but outside the timed section.\
      \ Use it to clean up data.\n\n====Functions====\n;Check(bool expression, coerce\
      \ string message): the actual check if a given condition results in true. If\
      \ the condition given by <tt>expression</tt> is false this check failed. <tt>message</tt>\
      \ contains a description of the current test.\n;Done(): this function '''must'''\
      \ be called after all checks have been performed, otherwise the test cycle will\
      \ not continue.\n\n===UCPP Notice===\n\nUsUnit comes with a macro file (<tt>UsUnit/macros.inc</tt>)\
      \ that can be used with [[Legacy:UCPP|UCPP]]. This will add some extra magic\
      \ to the Check functions. The following macros are defined:\n\n;CHECK(expr,msg):\
      \ this behaves much like the normal Check function, except that it will append\
      \ the current filename and line where this function was called. This can be\
      \ useful to find the check that failed.\n;CHECK(expr): this will be translated\
      \ to CHECK(expr,\"expr\"). In other words, the expression content will be converted\
      \ to the description. This makes it easier in some cases like: <tt>CHECK(1+1\
      \ == 2)</tt>.\n\nTo use the macro file simply add the following line before\
      \ you call any CHECK:\n\n<uscript>\n#pragma ucpp include ../../UsUnit/macros.inc\n\
      </uscript>\n\n''Note:'' make sure you read the [[Legacy:UCPP|UCPP]] instructions\
      \ on how to use it.\n\n===Example Test Case===\n\n''More examples can be found\
      \ in the UsUnitExamples package.''\n\n<uscript>\n#pragma ucpp notice - precompile\
      \ this unit with UCPP\n#pragma ucpp version\n// include the CHECK() macros to\
      \ add filenames and location\n#pragma ucpp include ../../UsUnit/macros.inc\n\
      \nclass TEST_SimpleTests extends TestCase;\n\nfunction run()\n{\n    local array<string>\
      \ dummy;\n    CHECK(1+1 == 2);\n    CHECK(\"CaseInsensitive\" ~= \"caseinsensitive\"\
      );\n    CHECK(false, \"false; will always fail\");\n    CHECK(split(\"one two\
      \ three four five\", \" \", dummy) == 5, \"\\\"one two three four five\\\" has\
      \ 5 words\");\n    CHECK(split(\"one\", \" \", dummy) == 1, \"\\\"one\\\" is\
      \ 1 word\");\n    CHECK(round(1.5) == 2);\n    CHECK(int(1.5) == 1);\n    done();\n\
      }\n\ndefaultproperties\n{\n    TestName=\"Simple Tests\"\n    TestDescription=\"\
      Example test case, performs some simple tests basic math testing.\"\n}\n</uscript>\n\
      \n==Creating a Test Suite==\n\nA test suite is nothing more than a collection\
      \ of test cases and\\or test suites to be executed sequentially. A test suite\
      \ extends the class <tt>TestSuite</tt>. It usually doesn't contain any code,\
      \ just values in the defaultproperties section.\n\nThe following class properties\
      \ are of interest:\n;<tt>TestName</tt>: the name of the suite\n;<tt>TestDescription</tt>:\
      \ a short description of the test suite (optional)\n;<tt>TestClasses</tt>: a\
      \ dynamic array with class references to test cases and test suites that are\
      \ part of this suite.\n;<tt>bBreakOnFail</tt>: if set to true it will it will\
      \ not continue with the next test class when the current class failed a single\
      \ check. Default: <tt>true</tt>\n\n===Example Test Suite===\n\n<uscript>\nclass\
      \ SUITE_ExampleSuite extends TestSuite;\n\ndefaultproperties\n{\n    TestName=\"\
      Example Test Suite\"\n    TestDescription=\"Bundles all example tests from the\
      \ UsUnitExamples package\"\n\n    TestClasses[0]=class'TEST_SimpleTests'\n \
      \   TestClasses[1]=class'TEST_TimedTest'\n}\n</uscript>\n\n==Downloads==\n*\
      \ '''[http://ut2004.elmuerte.com/files/UsUnit_v101_ut4mod.zip Version 1.1.14]'''\n\
      * [http://ut2004.elmuerte.com/files/UsUnit_v100_ut4mod.zip Version 1.0.11]\n\
      \n===Development releases===\n\nNot really releases but just the lastest updates\
      \ of the UsUnit packages straight from the CVS\n\n* [http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnit/UsUnit.zip?tarball=1\
      \ Main UsUnit package]\n* [http://home.elmuerte.com/cgi-bin/cvsweb/UT2004/UsUnitExamples/UsUnitExamples.zip?tarball=1\
      \ UsUnitExamples package]\n\n===CVS Access===\n;Anonymous access:<nowiki>:pserver:anonymous@el-muerte.student.utwente.nl:/usr/local/cvsroot/UT2004</nowiki>\n\
      \n;Module names:UsUnit<br />UsUnitExamples\n\n==Additional Information==\n\n\
      * [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/ChangeLog]] &ndash; changes for the various\
      \ releases\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Discussion]]"
  properties: []
  revId: 42670
name: "Legacy:UsUnit"
revision:
  revid: 42670
  parentid: 9007
  user: "82.171.5.5"
  timestamp: 1268944073.000000000
  comment: "/* Development releases */"
timestamp: 1668763882.474834000
