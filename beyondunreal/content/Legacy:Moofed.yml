---
parse:
  title: "Legacy:Moofed"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Moofed\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Moofed</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-2\"><a href=\"#Carjack\"><span class=\"tocnumber\"\
      >1.1</span> <span class=\"toctext\">Carjack</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-3\"><a href=\"#Civilians\"><span class=\"tocnumber\">1.1.1</span>\
      \ <span class=\"toctext\">Civilians</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Moofed\">Moofed</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Moofed?section=1\" title=\"Edit section: Moofed\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>I'm a newer member\
      \ of the Unreal modding community. I've been a long time fan of the Unreal games\
      \ (I had an Unreal hat at one time, but it has long since been lost), but only\
      \ recently have had the time and skills to look at any unrealscript.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Carjack\">Carjack</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moofed?section=2\"\
      \ title=\"Edit section: Carjack\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Released!</b> The results of the Carjack project,\
      \ including a download of the mod, are available from <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://spock.informatics.indiana.edu/~carjack\">http://spock.informatics.indiana.edu/~carjack</a></p>\n\
      <p>The performance in general is not that great because of the large amount\
      \ of physics calculations and AI driver code from about 40 vehicles. Not recommended\
      \ for Internet play. It would have been unplayable FPS-wise had we used an over-the-shoulder\
      \ camera due to rendering an entire city's worth of static meshes. The top-down\
      \ viewpoint avoided that problem nicely. But, it is fun with a couple friends\
      \ on a LAN. Enjoy!</p>\n<hr />\n<p>Carjack is a mod I am working on to complete\
      \ the capstone project for my Informatics degree from Indiana University. It\
      \ is an attempt to clone the multiplayer gameplay from Grand Theft Auto 2, while\
      \ making use of the modern amenities found in UnrealEngine2. My reason for this\
      \ project is GTA2 has always been a blast to play at LAN parties, but it has\
      \ certain limitations (such as using DirectPlay 6.1 for its netcode and being\
      \ limited to 6 players) that make having fun playing it more difficult.</p>\n\
      <p>A video showcasing the progress of the project as of mid-Feburary 2006 is\
      \ available:</p>\n<p><a rel=\"nofollow\" class=\"external free\" href=\"https://www.slashtmp.iu.edu/public/download.php?FILE=dlpierce/94788r7kgDF\"\
      >https://www.slashtmp.iu.edu/public/download.php?FILE=dlpierce/94788r7kgDF</a></p>\n\
      <p>Yes, I do know that <a href=\"/Legacy:Mod_Ideas/CarJack\" title=\"Legacy:Mod\
      \ Ideas/CarJack\">Mod_Ideas/CarJack</a> has the same name, but I didn't see\
      \ that page until we had already started work. Plus \"Carjack\" is only a working\
      \ title for now, it may change.</p>\n<h4><span class=\"mw-headline\" id=\"Civilians\"\
      >Civilians</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Moofed?section=3\" title=\"Edit section: Civilians\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Part\
      \ of what makes GTA2 so neat is there are hordes of civilians wondering the\
      \ streets that pose no threat to the player. I anticipate this feature to be\
      \ one of the more difficult in developing the mod, and is why I am writing about\
      \ it here. What I want to make happen is</p>\n<ul>\n<li>Have civilian vehicles\
      \ driving on city streets\n<ul>\n<li>These drivers should stop when something\
      \ is in front of them, and when they come to a (red) traffic light.</li>\n<li>They\
      \ must drive on the streets, but will become spooked by gunshots and then drive\
      \ erratically/aggressively or get out of the vehicle and run for their lives\
      \ (effectively becoming a spooked pedestrian, see below).</li>\n<li>A predetermined\
      \ number of civilian vehicles will exist in the game at any one time. When one\
      \ is destroyed, another is spawned at a random VehicleFactory location. Ideally,\
      \ this will not be visible to the players. I am imagining a garage with doors\
      \ that open up and the new civilian drives out. Only spawned civilians would\
      \ be allowed out, no one allowed in.</li>\n</ul>\n</li>\n<li>Have civilian pedestrians\
      \ wandering the sidewalks.\n<ul>\n<li>Pedestrians stay on the sidewalks unless\
      \ spooked, at which point they run away from the player.</li>\n<li>There is\
      \ a chance the pedestrian will not be a total pushover and will whip out a pistol\
      \ and start shooting back.</li>\n<li>Killed pedestrians have a chance of dropping\
      \ an item (weapon, health, whatever).</li>\n</ul>\n</li>\n</ul>\n<p>To do all\
      \ this I think I will need three seperate bot paths, two for vehicles (one for\
      \ each side of the road) and one for pedestrians, plus some extra pathnodes\
      \ only available to bots (if I got that far) and spooked NPCs. Spooked NPCs\
      \ would also have the vehicle pathnodes at their disposal. Functioning stop\
      \ lights are also necessary to make a believable traffic simulation, but obviously\
      \ add much more complexity to the problem.</p>\n<p><b>Update:</b> After much\
      \ experimentation, I have decided that the NavigationPoint system is not suitable\
      \ for what I want to do. The autoconnecting behavior ruins any attempt to make\
      \ seperate paths from nodes in close proximity (such as the two lanes of a road).</p>\n\
      <p>Instead I have made a custom network of Actor nodes that each have an array\
      \ of nodes that the vehicle can go to next (randomly selected). This has the\
      \ advantage of allowing the mapper to precisely define the map's traffic behavior,\
      \ and the disadvantages of not being automated like NavigationPoints are, and\
      \ not having any lines displayed in UnrealEd. I can display the network inside\
      \ the game using HUD.Draw3DLine, but UnrealEd has no HUDs as far as I can tell\
      \ (or any way to change anything actually). I am thinking of making using a\
      \ similar node network for civilian pedestrians, leaving the NavigationPoint\
      \ network free to be dedicated to bots.</p>\n<p>At first I was using MoveToward\
      \ to make my vehicles move, but this again was insufficient. MoveToward dis\
      \ not control the steering acurately enough to stay on the correct side of the\
      \ road, instead the drivers would drunkenly drift over the centerline or onto\
      \ the sidewalks. MoveToward also has no interface to control the vehicle's throttle,\
      \ giving the all civilians a severe case of lead foot. This is my current driver\
      \ controller:</p>\n<div class=\"hidden-block\">\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"hint\"><span class=\"sy0\">&lt;/</span>span<span class=\"\
      sy0\">&gt;&lt;</span>div <span class=\"kw1\">class</span><span class=\"sy0\"\
      >=</span><span class=\"st0\">\"hidden\"</span><span class=\"sy0\">&gt;</span><span\
      \ class=\"kw1\">class</span> CarjackDriver <span class=\"kw1\">extends</span>\
      \ CarjackNPC;\n \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ NumRandomJumps;\n<span class=\"kw1\">var</span> <span class=\"kw9\">Actor</span>\
      \ RandDest;\n<span class=\"kw1\">var</span> <span class=\"kw9\">Actor</span>\
      \ TempPoint;\n<span class=\"kw1\">var</span> CarjackRoadNode DestRoadNode;\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> DriverThrottle,\
      \ DriverSteering; <span class=\"co1\">//Sets respective vehicle variables via\
      \ Tick in the vehicle's code</span>\n \n<span class=\"kw1\">function</span>\
      \ CarjackRoadNode FindRandomRoadNode<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ array<span class=\"sy0\">&lt;</span>CarjackRoadNode<span class=\"sy0\">&gt;</span>\
      \ NodeList;\n\t<span class=\"kw1\">local</span> CarjackRoadNode Node;\n\t<span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n \n\t<span class=\"\
      kw2\">foreach</span> <span class=\"kw2\">AllActors</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'CarjackRoadNode'</span>,\
      \ Node<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tNodeList<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ Node;\n\t\ti<span class=\"sy0\">++</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw2\">return</span> NodeList<span class=\"br0\">[</span><span\
      \ class=\"kw3\">Rand</span><span class=\"br0\">(</span>NodeList.<span class=\"\
      me0\">Length</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CarjackRoadNode\
      \ FindNearestRoadNode<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span> CarjackRoadNode\
      \ Node, ClosestNode;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\"\
      >float</span> Dist, ClosestDist;\n \n\tClosestDist <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">100000.0</span>;\n \n\t<span class=\"kw2\">foreach</span>\
      \ <span class=\"kw2\">AllActors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'CarjackRoadNode'</span>, Node<span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tDist <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">VSize</span><span class=\"br0\">(</span>Node.<span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">-</span> <span class=\"\
      kw9\">Pawn</span>.<span class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>Dist <span class=\"\
      sy0\">&lt;</span> ClosestDist<span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\tClosestNode <span class=\"sy0\">=</span> Node;\n\t\t\t\
      ClosestDist <span class=\"sy0\">=</span> Dist;\n\t\t<span class=\"br0\">}</span>\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">return</span> ClosestNode;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CarjackRoadNode\
      \ FindNextRoadNode<span class=\"br0\">(</span>CarjackRoadNode CurrentNode<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >return</span> CurrentNode.<span class=\"me0\">GetNextNode</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">//Check for Pawns in the way.</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> CheckObstruction<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> HitLocation,\
      \ HitNormal, ExtentSize;\n \n\tExtentSize.<span class=\"me0\">X</span> <span\
      \ class=\"sy0\">=</span> CarjackVehicle<span class=\"br0\">(</span><span class=\"\
      kw9\">Pawn</span><span class=\"br0\">)</span>.<span class=\"me0\">VehicleWidth</span>;\n\
      \tExtentSize.<span class=\"me0\">Y</span> <span class=\"sy0\">=</span> CarjackVehicle<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span class=\"br0\">)</span>.<span\
      \ class=\"me0\">VehicleWidth</span>;\n \n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw4\">Trace</span><span class=\"br0\">(</span>HitLocation, HitNormal,\
      \ <span class=\"br0\">(</span><span class=\"kw5\">vector</span><span class=\"\
      br0\">(</span><span class=\"kw9\">Pawn</span>.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">250</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw7\">Location</span>, <span class=\"kw9\">Pawn</span>.<span class=\"\
      kw7\">Location</span>, <span class=\"kw6\">true</span>, ExtentSize<span class=\"\
      br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">return</span> <span class=\"\
      kw6\">false</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">auto</span>\
      \ <span class=\"kw1\">state</span> Driving\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw1\">function</span> SetThrottle<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw1\">local</span> <span class=\"kw9\">Vehicle</span> V;\n \n\t\tV <span class=\"\
      sy0\">=</span> <span class=\"kw9\">Vehicle</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span><span class=\"br0\">)</span>;\n \n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span>V.<span class=\"kw7\">Velocity</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&gt;</span> DestRoadNode.<span class=\"me0\"\
      >SpeedLimit</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\tDriverThrottle <span class=\"sy0\">=</span> <span class=\"nu0\">0.25</span>;\n\
      \t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\t\t\
      <span class=\"br0\">{</span>\n\t\t\tDriverThrottle <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0.90</span>;\n\t\t<span class=\"br0\">}</span>\n\t<span\
      \ class=\"br0\">}</span>\n \n\t<span class=\"kw1\">function</span> SetSteering<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ RadiansDelta, RightOrLeft, ForwardOrBackward;\n\t\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Vehicle</span> V;\n \n\t\tV <span class=\"sy0\">=</span>\
      \ <span class=\"kw9\">Vehicle</span><span class=\"br0\">(</span><span class=\"\
      kw9\">Pawn</span><span class=\"br0\">)</span>;\n \n\t\tRadiansDelta <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Acos</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Normal</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >vector</span><span class=\"br0\">(</span>V.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> dot <span class=\"kw3\"\
      >Normal</span><span class=\"br0\">(</span>DestRoadNode.<span class=\"kw7\">Location</span>\
      \ <span class=\"sy0\">-</span> V.<span class=\"kw7\">Location</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n\t\tRightOrLeft <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">vector</span><span class=\"br0\">(</span>V.<span class=\"kw7\"\
      >Rotation</span><span class=\"br0\">)</span><span class=\"br0\">)</span> cross\
      \ <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> dot <span class=\"kw3\"\
      >Normal</span><span class=\"br0\">(</span>DestRoadNode.<span class=\"kw7\">Location</span>\
      \ <span class=\"sy0\">-</span> V.<span class=\"kw7\">Location</span><span class=\"\
      br0\">)</span>;\n\t\tForwardOrBackward <span class=\"sy0\">=</span> <span class=\"\
      kw5\">vector</span><span class=\"br0\">(</span>V.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span> dot <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>DestRoadNode.<span class=\"kw7\">Location</span> <span class=\"\
      sy0\">-</span> V.<span class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\
      \ \n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>RightOrLeft\
      \ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"\
      br0\">)</span> <span class=\"co1\">// Turn Left</span>\n\t\t<span class=\"br0\"\
      >{</span>\n\t\t\tDriverSteering <span class=\"sy0\">=</span> <span class=\"\
      kw3\">FClamp</span><span class=\"br0\">(</span>RadiansDelta, <span class=\"\
      nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>RightOrLeft <span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\"\
      >)</span> <span class=\"co1\">// Turn Right</span>\n\t\t<span class=\"br0\"\
      >{</span>\n\t\t\tDriverSteering <span class=\"sy0\">=</span> <span class=\"\
      kw3\">FClamp</span><span class=\"br0\">(</span>RadiansDelta, <span class=\"\
      nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\t\t\
      <span class=\"br0\">{</span>\n\t\t\tDriverSteering <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0.0</span>;\n\t\t<span class=\"br0\">}</span>\n\t<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw2\">Begin</span>:\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>DestRoadNode <span class=\"sy0\"\
      >==</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n\t\tDestRoadNode <span class=\"sy0\">=</span> FindNearestRoadNode<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>CheckObstruction<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">GoToState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Obstructed'</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"br0\">}</span>\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span>DestRoadNode.<span class=\"kw7\">Location</span> <span class=\"\
      sy0\">-</span> <span class=\"kw9\">Pawn</span>.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\"\
      >200</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>DestRoadNode.<span\
      \ class=\"me0\">bStopTraffic</span><span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\t<span class=\"kw3\">GotoState</span><span class=\"br0\"\
      >(</span><span class=\"st0\">'Stopped'</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\t\t\
      <span class=\"br0\">{</span>\n\t\t\tDestRoadNode <span class=\"sy0\">=</span>\
      \ FindNextRoadNode<span class=\"br0\">(</span>DestRoadNode<span class=\"br0\"\
      >)</span>;\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\
      \ \n\tSetThrottle<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \tSetSteering<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t\
      <span class=\"kw4\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >0.2</span><span class=\"br0\">)</span>;\n\tGoto<span class=\"br0\">(</span><span\
      \ class=\"st0\">'Begin'</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">state</span> Stopped\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">function</span> SetThrottle<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\tDriverThrottle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \t<span class=\"br0\">}</span>\n \n<span class=\"kw2\">Begin</span>:\n\tSetThrottle<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>DestRoadNode.<span\
      \ class=\"me0\">bStopTraffic</span><span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n\t\t<span class=\"kw3\">GotoState</span><span class=\"br0\"\
      >(</span><span class=\"st0\">'Driving'</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw4\">Sleep</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>;\n\t\
      Goto<span class=\"br0\">(</span><span class=\"st0\">'Begin'</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span>\
      \ Obstructed\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">function</span>\
      \ SetThrottle<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n\t\tDriverThrottle <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0</span>;\n\t<span class=\"br0\">}</span>\n \n<span class=\"\
      kw2\">Begin</span>:\n\tSetThrottle<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"sy0\">!</span>CheckObstruction<span class=\"br0\">(</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Driving'</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw4\">Sleep</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0.5</span><span class=\"br0\">)</span>;\n\tGoto<span class=\"br0\">(</span><span\
      \ class=\"st0\">'Begin'</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></span></pre></div>\n</div>\n</div>\n<p>Thoughts please.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moofed?section=4\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Wormbo:</b> Hi and welcome to the Wiki.&#160;:)</p>\n\
      <p><b>Jimboh:</b> Hmm...civilians are surprisingly easy. All you have to do\
      \ is create a pawn...then create an AIController without the monster states\
      \ - add the model, and PRESTO! Instant Civilian! Of course then you'd have to\
      \ create some botpaths for your civvies. I remember in Tanus' Syndicate 2003\
      \ MOD he had a tutorial on NPC's...the site is down, so if anyone has the tutorial\
      \ saved, it would be most helpful...</p>\n<p><b>Sweavo:</b> Hi there, I posted\
      \ that <a href=\"/Legacy:Mod_Ideas/Civilians\" title=\"Legacy:Mod Ideas/Civilians\"\
      >Mod Ideas/Civilians</a> page. I'm interested in following progress and assisting\
      \ in this mod. I'm thinking off-map factories too. See DM-Autoroute2 for a map\
      \ that would really benefit from civilians. I anticipate the <b>hardest</b>\
      \ part of this is realistic AI, combining the \"milling about\" behaviour with\
      \ the \"spooked\" to make the civilians look like they have a back-story, .\
      \ Once that bit's done, the <b>most work</b> would likely be coming up with\
      \ meshes and textures for the pawns and vehicles. I have no clue when it comes\
      \ to modelling. Maybe the unwheel project has spare vehicles that can be adapted.</p>\n\
      <p><b>SuperApe:</b> Hi, Moofed. (Welcome&#160;:)) What Jimboh is saying is true.\
      \ It can be easy, but I agree with Sweavo too, in that you'd probably want a\
      \ different kind of AI. And I think different models, animations and skins are\
      \ a good idea too. (animations without weapon-holding for example) I suggest,\
      \ because most of what makes up a Bot and xPawn are geared for combat, borrow\
      \ what you can from them (perhaps use them for testing purposes too) and then\
      \ begin to implement your own custom stuff. You and Sweavo should take a look\
      \ at the <a href=\"/Legacy:Maya_PLE_Character_Model_Tutorial\" title=\"Legacy:Maya\
      \ PLE Character Model Tutorial\">Maya PLE Character Model Tutorial</a>, it should\
      \ not be too hard to implement a custom civilian model and animation. And, check\
      \ out <a href=\"/Legacy:NPC_Support\" title=\"Legacy:NPC Support\">NPC Support</a>\
      \ for ideas. Can't wait to see what you guys come up with. It sounds neat.&#160;:)</p>\n\
      <p><b>Moofed:</b> Thanks for the warm welcome everyone!&#160;:cheesy: I should\
      \ mention that there are two other people working on the mod, one who is concentrating\
      \ on building a cityscape map, the other is a modeler and is making a first\
      \ set of real world vehicles to play with, not to mention some staticmeshes\
      \ for the map. I'm already using some of the skidmark code from UnWheel (with\
      \ permission of course), so I might see about including some of their vehicles\
      \ as well. They've been a great help for resolving scaling issues already. I'll\
      \ try to get a basic pedestrian working tonight.</p>\n<p><b>Tarquin:</b> Hi,\
      \ welcome. Interesting project!</p>\n<p><b>Moofed:</b> I thought this would\
      \ be a simple task, but the FindRandomDest() function insists upon returning\
      \ nothing but None. If I extend from MonsterController the function works, but\
      \ as already stated. we want to extend from Controller. Help?</p>\n<p><b>SuperApe:</b>\
      \ Sorry, FindRandomDest() is an EMPTY function. It's actually used in a few\
      \ places, but it's completely useless in stock Controller classes. It must have\
      \ been defined for subclass use. But, no big deal. Finding a <i>random</i> destination\
      \ isn't much harder than picking a NavigationPoint that isn't <tt>taken</tt>.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw9\">NavigationPoint</span> FindRandomDest<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n     <span\
      \ class=\"kw1\">local</span> <span class=\"kw9\">NavigationPoint</span> N;\n\
      \     <span class=\"kw1\">local</span> array<span class=\"sy0\">&lt;</span>NavigationPoint<span\
      \ class=\"sy0\">&gt;</span> NP;\n     <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">int</span> i;\n \n     NP.<span class=\"me0\">Insert</span><span\
      \ class=\"br0\">(</span>i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \     <span class=\"kw2\">forEach</span> <span class=\"kw2\">AllActors</span><span\
      \ class=\"br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'NavigationPoint'</span>, N <span class=\"br0\">)</span>\n          <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>N.<span\
      \ class=\"me0\">taken</span> <span class=\"br0\">)</span>\n          <span class=\"\
      br0\">{</span>\n               NP<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> N;\n               i<span class=\"\
      sy0\">++</span>;\n               NP.<span class=\"me0\">Insert</span><span class=\"\
      br0\">(</span>i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \          <span class=\"br0\">}</span>\n     <span class=\"kw2\">return</span>\
      \ NP<span class=\"br0\">[</span> <span class=\"kw3\">FRand</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> i <span\
      \ class=\"br0\">]</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Re-define as necessary.&#160;:) <b>Moofed:</b> Thanks! I saw</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">native</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">525</span><span class=\"br0\">)</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw9\">NavigationPoint</span>\
      \ FindRandomDest<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>so I thought it couldn't be overridden and the source would not be\
      \ available. Maybe it is overridden in yet more native code...</p>\n<p><b>SuperApe:</b>\
      \ Well, whether there is some code to it now or not, I suppose you might as\
      \ well try to override it for your custom purposes in the Pedestrian/Civilian\
      \ controller. If you can't override it, perhaps you can use this code anyway\
      \ in a similar function.</p>\n<p><b>Draconx:</b> This is what I use in my mod\
      \ for original UT... assuming it still works (Why wouldn't it...) it is much\
      \ more efficient than the above foreach AllActors method.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">for</span> <span class=\"br0\">(</span>N\
      \ <span class=\"sy0\">=</span> <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">NavigationPointList</span>; N <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span>; N <span class=\"sy0\">=</span> N.<span class=\"me0\">NextNavigationPoint</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p><b>SuperApe:</b> That's great!&#160;:)\
      \ I can use that too. Thanks.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.098 seconds\nReal time usage: 0.231 seconds\nPreprocessor visited node count:\
      \ 35/1000000\nPreprocessor generated node count: 112/1000000\nPost‐expand include\
      \ size: 6/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2227-0!*!0!!en!*!*\
      \ and timestamp 20221118160920 and revision id 5390\n -->\n"
  categories:
  - sortkey: "Moofed"
    name: "Legacy_Personal_Page"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mod Ideas/Civilians"
  - ns: 100
    exists: true
    name: "Legacy:Maya PLE Character Model Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Mod Ideas/CarJack"
  - ns: 100
    exists: true
    name: "Legacy:NPC Support"
  templates: []
  images: []
  externallinks:
  - "https://www.slashtmp.iu.edu/public/download.php?FILE=dlpierce/94788r7kgDF"
  - "http://spock.informatics.indiana.edu/~carjack"
  sections:
  - toclevel: 1
    level: "2"
    line: "Moofed"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Moofed"
    byteoffset: 0
    anchor: "Moofed"
  - toclevel: 2
    level: "3"
    line: "Carjack"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Moofed"
    byteoffset: 256
    anchor: "Carjack"
  - toclevel: 3
    level: "4"
    line: "Civilians"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:Moofed"
    byteoffset: 1727
    anchor: "Civilians"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "2"
    index: "4"
    fromtitle: "Legacy:Moofed"
    byteoffset: 8078
    anchor: "Discussion"
  displaytitle: "Legacy:Moofed"
  iwlinks: []
  wikitext:
    text: "==Moofed==\n\nI'm a newer member of the Unreal modding community.  I've\
      \ been a long time fan of the Unreal games (I had an Unreal hat at one time,\
      \ but it has long since been lost), but only recently have had the time and\
      \ skills to look at any unrealscript.\n\n===Carjack===\n\n'''Released!''' The\
      \ results of the Carjack project, including a download of the mod, are available\
      \ from http://spock.informatics.indiana.edu/~carjack\n\nThe performance in general\
      \ is not that great because of the large amount of physics calculations and\
      \ AI driver code from about 40 vehicles.  Not recommended for Internet play.\
      \  It would have been unplayable FPS-wise had we used an over-the-shoulder camera\
      \ due to rendering an entire city's worth of static meshes.  The top-down viewpoint\
      \ avoided that problem nicely.  But, it is fun with a couple friends on a LAN.\
      \  Enjoy!\n\n----\n\nCarjack is a mod I am working on to complete the capstone\
      \ project for my Informatics degree from Indiana University.  It is an attempt\
      \ to clone the multiplayer gameplay from Grand Theft Auto 2, while making use\
      \ of the modern amenities found in UnrealEngine2.  My reason for this project\
      \ is GTA2 has always been a blast to play at LAN parties, but it has certain\
      \ limitations (such as using DirectPlay 6.1 for its netcode and being limited\
      \ to 6 players) that make having fun playing it more difficult.\n\nA video showcasing\
      \ the progress of the project as of mid-Feburary 2006 is available:\n\nhttps://www.slashtmp.iu.edu/public/download.php?FILE=dlpierce/94788r7kgDF\n\
      \nYes, I do know that [[Legacy:Mod_Ideas/CarJack|Mod_Ideas/CarJack]] has the\
      \ same name, but I didn't see that page until we had already started work. \
      \ Plus \"Carjack\" is only a working title for now, it may change.\n\n====Civilians====\n\
      \nPart of what makes GTA2 so neat is there are hordes of civilians wondering\
      \ the streets that pose no threat to the player.  I anticipate this feature\
      \ to be one of the more difficult in developing the mod, and is why I am writing\
      \ about it here.  What I want to make happen is\n* Have civilian vehicles driving\
      \ on city streets\n** These drivers should stop when something is in front of\
      \ them, and when they come to a (red) traffic light.\n** They must drive on\
      \ the streets, but will become spooked by gunshots and then drive erratically/aggressively\
      \ or get out of the vehicle and run for their lives (effectively becoming a\
      \ spooked pedestrian, see below).\n** A predetermined number of civilian vehicles\
      \ will exist in the game at any one time.  When one is destroyed, another is\
      \ spawned at a random VehicleFactory location. Ideally, this will not be visible\
      \ to the players.  I am imagining a garage with doors that open up and the new\
      \ civilian drives out.  Only spawned civilians would be allowed out, no one\
      \ allowed in.\n* Have civilian pedestrians wandering the sidewalks.\n** Pedestrians\
      \ stay on the sidewalks unless spooked, at which point they run away from the\
      \ player.\n** There is a chance the pedestrian will not be a total pushover\
      \ and will whip out a pistol and start shooting back.\n** Killed pedestrians\
      \ have a chance of dropping an item (weapon, health, whatever).\n\nTo do all\
      \ this I think I will need three seperate bot paths, two for vehicles (one for\
      \ each side of the road) and one for pedestrians, plus some extra pathnodes\
      \ only available to bots (if I got that far) and spooked NPCs.  Spooked NPCs\
      \ would also have the vehicle pathnodes at their disposal.  Functioning stop\
      \ lights are also necessary to make a believable traffic simulation, but obviously\
      \ add much more complexity to the problem.\n\n'''Update:''' After much experimentation,\
      \ I have decided that the NavigationPoint system is not suitable for what I\
      \ want to do.  The autoconnecting behavior ruins any attempt to make  seperate\
      \ paths from nodes in close proximity (such as the two lanes of a road).  \n\
      \nInstead I have made a custom network of Actor nodes that each have an array\
      \ of nodes that the vehicle can go to next (randomly selected).  This has the\
      \ advantage of allowing the mapper to precisely define the map's traffic behavior,\
      \ and the disadvantages of not being automated like NavigationPoints are, and\
      \ not having any lines displayed in UnrealEd.  I can display the network inside\
      \ the game using HUD.Draw3DLine, but UnrealEd has no HUDs as far as I can tell\
      \ (or any way to change anything actually).  I am thinking of making using a\
      \ similar node network for civilian pedestrians, leaving the NavigationPoint\
      \ network free to be dedicated to bots.\n\nAt first I was using MoveToward to\
      \ make my vehicles move, but this again was insufficient.  MoveToward dis not\
      \ control the steering acurately enough to stay on the correct side of the road,\
      \ instead the drivers would drunkenly drift over the centerline or onto the\
      \ sidewalks.  MoveToward also has no interface to control the vehicle's throttle,\
      \ giving the all civilians a severe case of lead foot.  This is my current driver\
      \ controller:\n\n<div class=\"hidden-block\"><span class=\"hint\"><uscript></span><div\
      \ class=\"hidden\">class CarjackDriver extends CarjackNPC;\n\nvar int NumRandomJumps;\n\
      var Actor RandDest;\nvar Actor TempPoint;\nvar CarjackRoadNode DestRoadNode;\n\
      var float DriverThrottle, DriverSteering; //Sets respective vehicle variables\
      \ via Tick in the vehicle's code\n\nfunction CarjackRoadNode FindRandomRoadNode()\n\
      {\n\tlocal array<CarjackRoadNode> NodeList;\n\tlocal CarjackRoadNode Node;\n\
      \tlocal int i;\n\t\n\tforeach AllActors(class'CarjackRoadNode', Node)\n\t{\n\
      \t\tNodeList[i] = Node;\n\t\ti++;\n\t}\n\treturn NodeList[Rand(NodeList.Length)];\n\
      }\n\nfunction CarjackRoadNode FindNearestRoadNode()\n{\n\tlocal CarjackRoadNode\
      \ Node, ClosestNode;\n\tlocal float Dist, ClosestDist;\n\t\n\tClosestDist =\
      \ 100000.0;\n\t\n\tforeach AllActors(class'CarjackRoadNode', Node)\n\t{\n\t\t\
      Dist = VSize(Node.Location - Pawn.Location);\n\t\tif (Dist < ClosestDist)\n\t\
      \t{\n\t\t\tClosestNode = Node;\n\t\t\tClosestDist = Dist;\n\t\t}\n\t}\n\treturn\
      \ ClosestNode;\n}\n\nfunction CarjackRoadNode FindNextRoadNode(CarjackRoadNode\
      \ CurrentNode)\n{\n\treturn CurrentNode.GetNextNode();\n}\n\n//Check for Pawns\
      \ in the way.\nfunction bool CheckObstruction()\n{\n\tlocal vector HitLocation,\
      \ HitNormal, ExtentSize;\n\t\n\tExtentSize.X = CarjackVehicle(Pawn).VehicleWidth;\n\
      \tExtentSize.Y = CarjackVehicle(Pawn).VehicleWidth;\n\t\n\tif (Pawn(Trace(HitLocation,\
      \ HitNormal, (vector(Pawn.Rotation) * 250) + Pawn.Location, Pawn.Location, true,\
      \ ExtentSize)) != None)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\
      auto state Driving\n{\n\tfunction SetThrottle()\n\t{\n\t\tlocal Vehicle V;\n\
      \t\t\n\t\tV = Vehicle(Pawn);\n\t\t\n\t\tif (VSize(V.Velocity) > DestRoadNode.SpeedLimit)\n\
      \t\t{\n\t\t\tDriverThrottle = 0.25;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDriverThrottle\
      \ = 0.90;\n\t\t}\n\t}\n\t\n\tfunction SetSteering()\n\t{\n\t\tlocal float RadiansDelta,\
      \ RightOrLeft, ForwardOrBackward;\n\t\tlocal Vehicle V;\n\t\t\n\t\tV = Vehicle(Pawn);\n\
      \t\t\n\t\tRadiansDelta = Acos(Normal(vector(V.Rotation)) dot Normal(DestRoadNode.Location\
      \ - V.Location));\n\t\tRightOrLeft = ((vector(V.Rotation)) cross vect(0,0,1))\
      \ dot Normal(DestRoadNode.Location - V.Location);\n\t\tForwardOrBackward = vector(V.Rotation)\
      \ dot Normal(DestRoadNode.Location - V.Location);\n\t\t\n\t\tif (RightOrLeft\
      \ < 0.0) // Turn Left\n\t\t{\n\t\t\tDriverSteering = FClamp(RadiansDelta, 0.0,\
      \ 1.0) * -1;\n\t\t}\n\t\telse if (RightOrLeft > 0.0) // Turn Right\n\t\t{\n\t\
      \t\tDriverSteering = FClamp(RadiansDelta, 0.0, 1.0);\n\t\t}\n\t\telse\n\t\t\
      {\n\t\t\tDriverSteering = 0.0;\n\t\t}\n\t}\n\t\nBegin:\n\tif (DestRoadNode ==\
      \ None)\n\t{\n\t\tDestRoadNode = FindNearestRoadNode();\n\t}\n\t\n\tif (CheckObstruction())\n\
      \t{\n\t\tGoToState('Obstructed');\n\t}\n\t\n\tif (VSize(DestRoadNode.Location\
      \ - Pawn.Location) < 200)\n\t{\n\t\tif (DestRoadNode.bStopTraffic)\n\t\t{\n\t\
      \t\tGotoState('Stopped');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDestRoadNode = FindNextRoadNode(DestRoadNode);\n\
      \t\t}\n\t}\n\t\n\tSetThrottle();\n\tSetSteering();\n\t\n\tSleep(0.2);\n\tGoto('Begin');\n\
      }\n\nstate Stopped\n{\n\tfunction SetThrottle()\n\t{\n\t\tDriverThrottle = 0;\n\
      \t}\n\t\nBegin:\n\tSetThrottle();\n\tif (!DestRoadNode.bStopTraffic)\n\t{\n\t\
      \tGotoState('Driving');\n\t}\n\tSleep(0.5);\n\tGoto('Begin');\n}\n\nstate Obstructed\n\
      {\n\tfunction SetThrottle()\n\t{\n\t\tDriverThrottle = 0;\n\t}\n\t\nBegin:\n\
      \tSetThrottle();\n\tif (!CheckObstruction())\n\t{\n\t\tGotoState('Driving');\n\
      \t}\n\tSleep(0.5);\n\tGoto('Begin');\n}\n</uscript></div></div>\n\nThoughts\
      \ please.\n\n==Discussion==\n\n'''Wormbo:''' Hi and welcome to the Wiki. :)\n\
      \n'''Jimboh:''' Hmm...civilians are surprisingly easy. All you have to do is\
      \ create a pawn...then create an AIController without the monster states - add\
      \ the model, and PRESTO! Instant Civilian! Of course then you'd have to create\
      \ some botpaths for your civvies. I remember in Tanus' Syndicate 2003 MOD he\
      \ had a tutorial on NPC's...the site is down, so if anyone has the tutorial\
      \ saved, it would be most helpful...\n\n'''Sweavo:''' Hi there, I posted that\
      \ [[Legacy:Mod Ideas/Civilians|Mod Ideas/Civilians]] page.  I'm interested in\
      \ following progress and assisting in this mod.  I'm thinking off-map factories\
      \ too.  See DM-Autoroute2 for a map that would really benefit from civilians.\
      \  I anticipate the '''hardest''' part of this is realistic AI, combining the\
      \ \"milling about\" behaviour with the \"spooked\" to make the civilians look\
      \ like they have a back-story, .  Once that bit's done, the '''most work'''\
      \ would likely be coming up with meshes and textures for the pawns and vehicles.\
      \  I have no clue when it comes to modelling.  Maybe the unwheel project has\
      \ spare vehicles that can be adapted.\n\n'''SuperApe:''' Hi, Moofed. (Welcome\
      \ :))  What Jimboh is saying is true.  It can be easy, but I agree with Sweavo\
      \ too, in that you'd probably want a different kind of AI.  And I think different\
      \ models, animations and skins are a good idea too. (animations without weapon-holding\
      \ for example)  I suggest, because most of what makes up a Bot and xPawn are\
      \ geared for combat, borrow what you can from them (perhaps use them for testing\
      \ purposes too) and then begin to implement your own custom stuff.  You and\
      \ Sweavo should take a look at the [[Legacy:Maya PLE Character Model Tutorial|Maya\
      \ PLE Character Model Tutorial]], it should not be too hard to implement a custom\
      \ civilian model and animation.  And, check out [[Legacy:NPC Support|NPC Support]]\
      \ for ideas.  Can't wait to see what you guys come up with.  It sounds neat.\
      \ :)\n\n'''Moofed:''' Thanks for the warm welcome everyone! :cheesy:  I should\
      \ mention that there are two other people working on the mod, one who is concentrating\
      \ on building a cityscape map, the other is a modeler and is making a first\
      \ set of real world vehicles to play with, not to mention some staticmeshes\
      \ for the map.  I'm already using some of the skidmark code from UnWheel (with\
      \ permission of course), so I might see about including some of their vehicles\
      \ as well.  They've been a great help for resolving scaling issues already.\
      \  I'll try to get a basic pedestrian working tonight.\n\n'''Tarquin:''' Hi,\
      \ welcome. Interesting project!\n\n'''Moofed:''' I thought this would be a simple\
      \ task, but the FindRandomDest() function insists upon returning nothing but\
      \ None.  If I extend from MonsterController the function works, but as already\
      \ stated. we want to extend from Controller.  Help?\n\n'''SuperApe:''' Sorry,\
      \ FindRandomDest() is an EMPTY function.  It's actually used in a few places,\
      \ but it's completely useless in stock Controller classes.  It must have been\
      \ defined for subclass use.  But, no big deal.  Finding a ''random'' destination\
      \ isn't much harder than picking a NavigationPoint that isn't <tt>taken</tt>.\
      \  <uscript>function NavigationPoint FindRandomDest()\n{\n     local NavigationPoint\
      \ N;\n     local array<NavigationPoint> NP;\n     local int i;\n\n     NP.Insert(i,1);\n\
      \     forEach AllActors( class'NavigationPoint', N )\n          if ( !N.taken\
      \ )\n          {\n               NP[i] = N;\n               i++;\n         \
      \      NP.Insert(i,1);\n          }\n     return NP[ FRand() * i ];\n}</uscript>Re-define\
      \ as necessary. :)\n\n'''Moofed:''' Thanks!  I saw <uscript>native(525) final\
      \ function NavigationPoint FindRandomDest();</uscript> so I thought it couldn't\
      \ be overridden and the source would not be available. Maybe it is overridden\
      \ in yet more native code...\n\n'''SuperApe:''' Well, whether there is some\
      \ code to it now or not, I suppose you might as well try to override it for\
      \ your custom purposes in the Pedestrian/Civilian controller.  If you can't\
      \ override it, perhaps you can use this code anyway in a similar function.\n\
      \n'''Draconx:''' This is what I use in my mod for original UT... assuming it\
      \ still works (Why wouldn't it...) it is much more efficient than the above\
      \ foreach AllActors method.<uscript>for (N = Level.NavigationPointList; N !=\
      \ None; N = N.NextNavigationPoint)</uscript>\n\n'''SuperApe:''' That's great!\
      \ :)  I can use that too.  Thanks.\n\n[[Category:Legacy Personal Page|{{PAGENAME}}]]"
  properties: []
  revId: 5390
name: "Legacy:Moofed"
revision:
  revid: 5390
  parentid: 5392
  user: "Moofed"
  timestamp: 1159460910.000000000
  comment: "Followup"
timestamp: 1668787609.852106000
