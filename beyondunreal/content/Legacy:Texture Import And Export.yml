---
parse:
  title: "Legacy:Texture Import And Export"
  text:
    text: "<p><i>For brain-free instructions, see the <a href=\"/Category:Legacy_Basic_Procedure\"\
      \ title=\"Category:Legacy Basic Procedure\">Category:Legacy Basic Procedure</a>\
      \ tutorial <a href=\"/Legacy:Import_The_Texture\" title=\"Legacy:Import The\
      \ Texture\">Import The Texture</a>. This page covers in more detail.</i></p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Import_from_Graphics_File\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Import from Graphics\
      \ File</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Further_Techniques\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Further Techniques</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Troubleshooting\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Troubleshooting</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Exporting\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Exporting</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Import_from_Graphics_File\"\
      >Import from Graphics File</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Texture_Import_And_Export?section=1\"\
      \ title=\"Edit section: Import from Graphics File\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>First, make sure the image you are trying to import\
      \ is:</p>\n<ul>\n<li>A power-of-two number of pixels across (e.g. 1x1, 16x4,\
      \ 64x128, 256x256, ...) up to 1024x1024.</li>\n<li>Using 8-bit color (256 color\
      \ indexed) BMP or PCX for UT; 8-bit indexed BMP or PCX, 24 bit or 32 bit TGA\
      \ or DDS for <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a>.</li>\n<li>Saved in .pcx or .bmp for UT; saved in .pcx, .bmp, targa,\
      \ DXT or <a href=\"/Legacy:UPaint\" title=\"Legacy:UPaint\">UPaint</a> for <a\
      \ href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>.</li>\n\
      </ul>\n<p>Then, in the <a href=\"/Legacy:Texture_Browser\" title=\"Legacy:Texture\
      \ Browser\">Texture Browser</a>, do <a href=\"/Legacy:Texture_Browser_Menu\"\
      \ title=\"Legacy:Texture Browser Menu\">Texture Browser Menu</a> -&gt; File\
      \ -&gt; Import. Find the directory containg your .pcx or .bmp file, then select\
      \ it and click <i>Open</i>. A window will appear asking for specifics on how\
      \ to import the file:</p>\n<dl>\n<dt>Package&#160;</dt>\n<dd>If you want to\
      \ save the image in an external package, just enter the package name. If it\
      \ does not exist, UnrealEd will make a new package for it. It is a really really\
      \ bad idea to import into a package file you downloaded or that came with the\
      \ game: <a href=\"/Legacy:Do_Not_Alter_Default_Packages\" title=\"Legacy:Do\
      \ Not Alter Default Packages\">Do Not Alter Default Packages</a>. If you want\
      \ to use a few textures from a downloaded pack just export them and re-import\
      \ them into your own package, and remember to credit the author. To embed textures\
      \ into a map, use \"<a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\">MyLevel</a>\"\
      \ as the package name and don't save it.</dd>\n</dl>\n<dl>\n<dt>Group&#160;</dt>\n\
      <dd>This is pretty simple, it's just what group the texture will be displayed\
      \ under in the Texture Browser. This is for package organization only, and if\
      \ you only have a few textures in your package just type in \"None\" or leave\
      \ this field blank to not assign a group to your new texture.</dd>\n</dl>\n\
      <dl>\n<dt>Name&#160;</dt>\n<dd>This is just the name your texture will have\
      \ inside UnrealEd. Some types of texture need a specific name (for example the\
      \ map <a href=\"/Legacy:Level_Screenshot\" title=\"Legacy:Level Screenshot\"\
      >Level Screenshot</a> in <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"\
      mw-redirect\">UT</a>). But generally, just give the texture a unique name that\
      \ you will remember.</dd>\n</dl>\n<dl>\n<dt>Masked&#160;</dt>\n<dd>If your texture\
      \ has <a href=\"/Legacy:Texture_Effects\" title=\"Legacy:Texture Effects\">Texture\
      \ Effects</a> (grate effect) then check this box otherwise you'd need to set\
      \ each surface using the texture to Masked (under <a href=\"/Legacy:Surface_Properties\"\
      \ title=\"Legacy:Surface Properties\" class=\"mw-redirect\">surface properties</a>)\
      \ in order to achieve the same effect.</dd>\n</dl>\n<dl>\n<dt>Generate MipMaps&#160;</dt>\n\
      <dd><a href=\"/Legacy:MipMap\" title=\"Legacy:MipMap\">MipMaps</a> are smoothly\
      \ downsized versions of your texture that will be displayed when your texture\
      \ is rendered smaller than its original size (i.e. at a distance). The goal\
      \ of mipmaps is to make the downscaled textures look smoother than it would\
      \ if the renderer simply skipped pixels of the original-size texture. Any texture\
      \ (including those displayed on the <a href=\"/Legacy:HUD\" title=\"Legacy:HUD\"\
      >HUD</a> or as the level <a href=\"/Legacy:Level_Screenshot\" title=\"Legacy:Level\
      \ Screenshot\">Level Screenshot</a>) can benefit from mipmaps, but you have\
      \ to weigh the slight improvement in visual quality against doubling the texture's\
      \ memory consumption.</dd>\n</dl>\n<p>When you're all done, just click import\
      \ and start using the new texture(s) in your level.</p>\n<p>Once you've imported\
      \ your textures into your new package don't forget to click on the <i>Save</i>\
      \ button to save the new package in the texture folder or else your level will\
      \ play with the generic bubble texture instead of your new texture. You can\
      \ edit old texture packs but it is best to only do this with packages that have\
      \ not yet been publically released (to avoid missing textures and version mismatch\
      \ errors for your users caused by multiple versions of the package in circulation)\
      \ and you should <b>never modify the original Epic texture packages bundled\
      \ with Unreal Tournament</b>!</p>\n<h3><span class=\"mw-headline\" id=\"Further_Techniques\"\
      >Further Techniques</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Texture_Import_And_Export?section=2\" title=\"\
      Edit section: Further Techniques\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>Level screenshots displayed in <a href=\"/Legacy:UT\"\
      \ title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>'s map browser are imported\
      \ into MyLevel as 256x256 texture with no mipmaps under the name \"Screenshot\"\
      . See <a href=\"/Legacy:Screenshot_(UT)\" title=\"Legacy:Screenshot (UT)\">Screenshot\
      \ (UT)</a> for full instructions.</li>\n<li>See <a href=\"/Legacy:Exec_Directive\"\
      \ title=\"Legacy:Exec Directive\">exec directive</a> for importing textures\
      \ into a class on compilation.</li>\n<li>To import textures from an existing\
      \ (non-loaded) package into <a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\"\
      >MyLevel</a>, see <a href=\"/Legacy:Embedding_Code\" title=\"Legacy:Embedding\
      \ Code\">Embedding Code</a>.</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"\
      Troubleshooting\">Troubleshooting</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Texture_Import_And_Export?section=3\"\
      \ title=\"Edit section: Troubleshooting\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If UnrealEd refuses to import a texture, the most\
      \ likely problem is that the texture file isn't conform with the rules of the\
      \ engine. Check off the list of points below. If you know of any other problems,\
      \ please add them.</p>\n<dl>\n<dt>Texture size&#160;</dt>\n<dd>The width and\
      \ height must each be powers of two. So the only acceptable numbers are: 2,\
      \ 4, 8, 16, 32, 64, 128, 256, 512, 1024. Images larger than 1024x1024 aren't\
      \ supported (see <a rel=\"nofollow\" class=\"external text\" href=\"http://unreal.epicgames.com/Texture.htm\"\
      >Unreal Textures</a>) and anything larger than 256x256 will crash UT if you\
      \ don't allow mipmaps.</dd>\n</dl>\n<dl>\n<dt>Image format&#160;</dt>\n<dd>The\
      \ file must be in 256 color mode when importing from BMP or PCX. If using Photoshop,\
      \ that's <i>Mode</i> -&gt; <i>Indexed Color</i>. The <i>Exact</i> palette option\
      \ is fine.</dd>\n</dl>\n<dl>\n<dt>Image Editors&#160;</dt>\n<dd>Make sure that\
      \ your resize your texture <i>before</i> you reduce the color depth when editing.\
      \ Some image editors such as <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://www.irfanview.com\">Irfanview</a> kick the depth back up to 24-bit when\
      \ resized. From the point of view of image quality it also makes sense to give\
      \ your image app the largest colourspace to work with when resizing.</dd>\n\
      </dl>\n<dl>\n<dt>File Location&#160;</dt>\n<dd>If it still doesn't import then\
      \ you need to check how deep the texture file is located in your directory structure.\
      \ Basically when you import a texture in UnrealEd, the pathname and filename\
      \ will be stored in a string of some kind with a fixed length. So if your directory\
      \ is too long, the whole thing won't be able to fit in the string and UnrealEd\
      \ can't find the texture. The solution is simple: Move the texture(s) you want\
      \ to import to <tt>C:\\</tt> for example. Also note, that UnrealEd doesn't like\
      \ spaces in the pathname.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"\
      Exporting\">Exporting</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Texture_Import_And_Export?section=4\" title=\"\
      Edit section: Exporting\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>To export a texture from UnrealEd, go to the texture browser and select the\
      \ texture you want to export. Do <a href=\"/Legacy:Texture_Browser_Menu\" title=\"\
      Legacy:Texture Browser Menu\">Texture Browser Menu</a> -&gt; File -&gt; Export.\
      \ Then simply select the directory to save the .TGA file to and export the file.\
      \ You can then view or edit the file in any image editing program.</p>\n<p>Some\
      \ <a href=\"/Legacy:Texture_Format\" title=\"Legacy:Texture Format\">texture\
      \ formats</a> won't open properly in standard graphics applications:</p>\n<ul>\n\
      <li>When exporting TGA files with alpha channels, UnrealEd does write the alpha\
      \ information to the file correctly, but writes a TGA file header at the beginning\
      \ which says that there isn't any alpha information there, so many programs\
      \ will ignore the alpha data in the file when loading it. To fix this, you can\
      \ use the <a href=\"/Legacy:Texture_Toolkit_For_UnrealEd\" title=\"Legacy:Texture\
      \ Toolkit For UnrealEd\">Texture Toolkit for UnrealEd</a> to fix the TGA file\
      \ headers before opening them in other programs.</li>\n<li>All <a href=\"/Legacy:DXT\"\
      \ title=\"Legacy:DXT\">DXT</a> compressed textures are exported to DDS. RGB8\
      \ and RGBA8 textures can be exported to 32-bit TGA, 32-bit UPT, 24-bit BMP or\
      \ 24-bit PCX and P8 textures can be exported to 8-bit palettized BMP or PCX.\
      \ You can either open DXT compressed textures using the NVIDIA <a rel=\"nofollow\"\
      \ class=\"external text\" href=\"http://developer.nvidia.com/object/nv_texture_tools.html\"\
      >DDS Photoshop Plug-in</a>, or you can decompress them to TGA for other software\
      \ using the <a href=\"/Legacy:Texture_Toolkit_For_UnrealEd\" title=\"Legacy:Texture\
      \ Toolkit For UnrealEd\">Texture Toolkit for UnrealEd</a>.</li>\n<li>UnrealEd\
      \ will only export G16 textures (used for <a href=\"/Legacy:Terrain\" title=\"\
      Legacy:Terrain\">Terrain</a> heightmaps) as 16-bit grayscale BMP files. The\
      \ problem is that there's no such thing as a 16-bit grayscale BMP file (the\
      \ BMP format doesn't support it). UnrealEd actually writes a broken file format\
      \ which isn't readable by any standard graphics application (and couldn't be\
      \ even if they wanted to). To use these \"broken BMP\" files, you will either\
      \ need to use a program specifically designed for it such as <a href=\"/Legacy:G16ed\"\
      \ title=\"Legacy:G16ed\">G16ed</a>, or you will need to convert them to a more\
      \ standard format using something like the <a href=\"/Legacy:Texture_Toolkit_For_UnrealEd\"\
      \ title=\"Legacy:Texture Toolkit For UnrealEd\">Texture Toolkit for UnrealEd</a>.</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Texture_Import_And_Export?section=5\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Level_Screenshot\" title=\"Legacy:Level Screenshot\"\
      >Level Screenshot</a>: quick instructions</li>\n<li><a href=\"/Legacy:MyLevel\"\
      \ title=\"Legacy:MyLevel\">MyLevel</a></li>\n<li><a href=\"/Legacy:Texture_Topics\"\
      \ title=\"Legacy:Texture Topics\">Texture Topics</a></li>\n<li><a href=\"/Legacy:Animated_Texture\"\
      \ title=\"Legacy:Animated Texture\">Animated Texture</a></li>\n</ul>\n<p><b>Foxpaw:</b>\
      \ I have a texture that I want to import into UnrealEd. This texture is very\
      \ high resolution - roughly 8000x4000. I mostly want to try importing this texture\
      \ simply to see what the UnrealEngine2 can accomplish given very high-polygon,\
      \ high-detailed art assets.</p>\n<p>Now, the problem that I'm having is, UnrealEd\
      \ crashes on import if I uncheck \"generate mipmaps\" on texture import. If\
      \ I generate the mipmaps, however, I just get a mipmap, which, though theoretically\
      \ it should be indistringuisable, is actually quite noticeably degraded from\
      \ what the texture looks like in the texture browser.</p>\n<p>So my question\
      \ is, is there any way to import a giant texture without mipmaps, or any way\
      \ to \"weight\" the mipmaps differently? The mipmaps that I'm seeing are clearly\
      \ lower detail maps than should be displayed at that distance and resolution.</p>\n\
      <p><b>Graphik:</b> I realize that you're just trying to push the engine to it's\
      \ limits, but I don't think that an 8000x4000 texture will really yeild much,\
      \ if any, improvement.</p>\n<p><b>Foogod:</b> A couple of things in response\
      \ to this: First, as far as I know, texture dimensions must always be a power\
      \ of two, so if you've actually got an 8000x4000 image, that might be part of\
      \ the problem. Try making it, say, 8192x4096 instead. Second, even assuming\
      \ that the engine can handle a texture like this, it's quite likely that most\
      \ 3D hardware rendering won't, and it's possible that the reason you're seeing\
      \ a degraded texture is because the engine had to use a lesser mipmap when passing\
      \ it to the video card to make it something that the hardware could actually\
      \ display. In this case, there's probably not a lot you can do until new video\
      \ cards come out which can handle this kind of insanity.</p>\n<p><b>EricBlade:</b>\
      \ From what I understand, UEd can handle up to 2048x2048, though I haven't heard\
      \ of anyone actually using that. I imagine much like if you try to import a\
      \ static mesh that's greater than around 20,000 polys, it will simply stop importing\
      \ somewhere around 20,000 and leave you with a pile of garbage, it probably\
      \ does about the same thing with insane texture sizes.</p>\n<p><b>Ben:</b> Is\
      \ there a way to load DYNAMICALLY a texture, or a package including a texture\
      \ during the execution of unreal?</p>\n<p>The goal is to not have to stop and\
      \ restart unreal.</p>\n<p>I've got the idea (didn't tested yet) to make a class\
      \ that has the statement #exec TEXTURE IMPORT NAME=SomeTex1 FILE=Textures\\\
      SomeTexture.pcx GROUP=Skins FLAGS=2</p>\n<p>and when I need it inside unreal\
      \ to \"summon\" this class.</p>\n<p>Do not seams really the best, so any other\
      \ idea?</p>\n<p><b>Wormbo:</b> UnrealScript code can use the DynamicLoadObject()\
      \ function to load objects like Textures from Unreal packages. Importing textures\
      \ from disk at runtime is not possible, though. The #<a href=\"/Legacy:Exec_Directive\"\
      \ title=\"Legacy:Exec Directive\">exec directives</a> are only executed at compile\
      \ time.</p>\n<p><b>Switch`:</b> In theory it's possible with 3rd party application\
      \ running in the background. The app could receive file import details from\
      \ unrealscript via TCP, import a texture into package (ie using one of the ucc\
      \ commandlets) with unique name, then send the filename back to unrealscript,\
      \ where the texture would be loaded at runtime with DynamicLoadObject().</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.054 seconds\nReal time usage:\
      \ 0.238 seconds\nPreprocessor visited node count: 21/1000000\nPreprocessor generated\
      \ node count: 40/1000000\nPost‐expand include size: 50/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3070-0!*!0!!en!*!* and timestamp 20221118003841 and revision\
      \ id 8066\n -->\n"
  categories:
  - sortkey: "Texture Import And Export"
    name: "Legacy_Mapping"
  - sortkey: "Texture Import And Export"
    name: "Legacy_Troubleshooting"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Do Not Alter Default Packages"
  - ns: 100
    exists: true
    name: "Legacy:G16ed"
  - ns: 100
    exists: true
    name: "Legacy:MyLevel"
  - ns: 100
    exists: true
    name: "Legacy:Texture Topics"
  - ns: 100
    exists: true
    name: "Legacy:Terrain"
  - ns: 100
    exists: true
    name: "Legacy:Animated Texture"
  - ns: 100
    exists: true
    name: "Legacy:DXT"
  - ns: 100
    exists: true
    name: "Legacy:Screenshot (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Surface Properties"
  - ns: 100
    exists: true
    name: "Legacy:Texture Format"
  - ns: 14
    exists: true
    name: "Category:Legacy Basic Procedure"
  - ns: 100
    exists: true
    name: "Legacy:Level Screenshot"
  - ns: 100
    exists: true
    name: "Legacy:Texture Browser Menu"
  - ns: 100
    exists: true
    name: "Legacy:Texture Toolkit For UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:Exec Directive"
  - ns: 100
    exists: true
    name: "Legacy:Embedding Code"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Texture Browser"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:MipMap"
  - ns: 100
    exists: true
    name: "Legacy:Import The Texture"
  - ns: 100
    exists: true
    name: "Legacy:Texture Effects"
  - ns: 100
    exists: true
    name: "Legacy:HUD"
  - ns: 100
    exists: true
    name: "Legacy:UPaint"
  templates: []
  images: []
  externallinks:
  - "http://developer.nvidia.com/object/nv_texture_tools.html"
  - "http://unreal.epicgames.com/Texture.htm"
  - "http://www.irfanview.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "Import from Graphics File"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Texture_Import_And_Export"
    byteoffset: 171
    anchor: "Import_from_Graphics_File"
  - toclevel: 2
    level: "3"
    line: "Further Techniques"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Texture_Import_And_Export"
    byteoffset: 3649
    anchor: "Further_Techniques"
  - toclevel: 2
    level: "3"
    line: "Troubleshooting"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Texture_Import_And_Export"
    byteoffset: 4137
    anchor: "Troubleshooting"
  - toclevel: 1
    level: "2"
    line: "Exporting"
    number: "2"
    index: "4"
    fromtitle: "Legacy:Texture_Import_And_Export"
    byteoffset: 5800
    anchor: "Exporting"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Texture_Import_And_Export"
    byteoffset: 7862
    anchor: "Related_Topics"
  displaytitle: "Legacy:Texture Import And Export"
  iwlinks: []
  wikitext:
    text: "''For brain-free instructions, see the [[:Category:Legacy Basic Procedure]]\
      \ tutorial [[Legacy:Import The Texture|Import The Texture]]. This page covers\
      \ in more detail.''\n\n==Import from Graphics File ==\n\nFirst, make sure the\
      \ image you are trying to import is:\n* A power-of-two number of pixels across\
      \ (e.g. 1x1, 16x4, 64x128, 256x256, ...) up to 1024x1024.\n* Using 8-bit color\
      \ (256 color indexed) BMP or PCX for UT; 8-bit indexed BMP or PCX, 24 bit or\
      \ 32 bit TGA or DDS for [[Legacy:UT2003|UT2003]].\n* Saved in .pcx or .bmp for\
      \ UT; saved in .pcx, .bmp, targa, DXT or [[Legacy:UPaint|UPaint]] for [[Legacy:UT2003|UT2003]].\n\
      \nThen, in the [[Legacy:Texture Browser|Texture Browser]], do [[Legacy:Texture\
      \ Browser Menu|Texture Browser Menu]] -> File -> Import. Find the directory\
      \ containg your .pcx or .bmp file, then select it and click ''Open''. A window\
      \ will appear asking for specifics on how to import the file: \n\n; Package\
      \ : If you want to save the image in an external package, just enter the package\
      \ name. If it does not exist, UnrealEd will make a new package for it. It is\
      \ a really really bad idea to import into a package file you downloaded or that\
      \ came with the game: [[Legacy:Do Not Alter Default Packages|Do Not Alter Default\
      \ Packages]]. If you want to use a few textures from a downloaded pack just\
      \ export them and re-import them into your own package, and remember to credit\
      \ the author. To embed textures into a map, use \"[[Legacy:MyLevel|MyLevel]]\"\
      \ as the package name and don't save it.\n\n; Group : This is pretty simple,\
      \ it's just what group the texture will be displayed under in the Texture Browser.\
      \ This is for package organization only, and if you only have a few textures\
      \ in your package just type in \"None\" or leave this field blank to not assign\
      \ a group to your new texture.\n\n; Name : This is just the name your texture\
      \ will have inside UnrealEd. Some types of texture need a specific name (for\
      \ example the map [[Legacy:Level Screenshot|Level Screenshot]] in [[Legacy:UT|UT]]).\
      \ But generally, just give the texture a unique name that you will remember.\n\
      \n; Masked : If your texture has [[Legacy:Texture Effects|Texture Effects]]\
      \ (grate effect) then check this box otherwise you'd need to set each surface\
      \ using the texture to Masked (under [[Legacy:Surface Properties|surface properties]])\
      \ in order to achieve the same effect. \n\n; Generate MipMaps : [[Legacy:MipMap|MipMap]]s\
      \ are smoothly downsized versions of your texture that will be displayed when\
      \ your texture is rendered smaller than its original size (i.e. at a distance).\
      \  The goal of mipmaps is to make the downscaled textures look smoother than\
      \ it would if the renderer simply skipped pixels of the original-size texture.\
      \  Any texture (including those displayed on the [[Legacy:HUD|HUD]] or as the\
      \ level [[Legacy:Level Screenshot|Level Screenshot]]) can benefit from mipmaps,\
      \ but you have to weigh the slight improvement in visual quality against doubling\
      \ the texture's memory consumption.\n\nWhen you're all done, just click import\
      \ and start using the new texture(s) in your level.\n\nOnce you've imported\
      \ your textures into your new package don't forget to click on the ''Save''\
      \ button to save the new package in the texture folder or else your level will\
      \ play with the generic bubble texture instead of your new texture. You can\
      \ edit old texture packs  but it is best to only do this with packages that\
      \ have not yet been publically released (to avoid missing textures and version\
      \ mismatch errors for your users caused by multiple versions of the package\
      \ in circulation) and you should '''never modify the original Epic texture packages\
      \ bundled with Unreal Tournament'''!\n\n===Further Techniques ===\n* Level screenshots\
      \ displayed in [[Legacy:UT|UT]]'s map browser are imported into MyLevel as 256x256\
      \ texture with no mipmaps under the name \"Screenshot\". See [[Legacy:Screenshot\
      \ (UT)|Screenshot (UT)]] for full instructions.\n* See [[Legacy:Exec Directive|exec\
      \ directive]] for importing textures into a class on compilation.\n* To import\
      \ textures from an existing (non-loaded) package into [[Legacy:MyLevel|MyLevel]],\
      \ see [[Legacy:Embedding Code|Embedding Code]].\n\n===Troubleshooting ===\n\n\
      If UnrealEd refuses to import a texture, the most likely problem is that the\
      \ texture file isn't conform with the rules of the engine. Check off the list\
      \ of points below. If you know of any other problems, please add them.\n\n;\
      \ Texture size : The width and height must each be powers of two. So the only\
      \ acceptable numbers are: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024.  Images\
      \ larger than 1024x1024 aren't supported (see [http://unreal.epicgames.com/Texture.htm\
      \ Unreal Textures]) and anything larger than 256x256 will crash UT if you don't\
      \ allow mipmaps.\n\n; Image format : The file must be in 256 color mode when\
      \ importing from BMP or PCX. If using Photoshop, that's ''Mode'' -> ''Indexed\
      \ Color''. The ''Exact'' palette option is fine.\n\n; Image Editors : Make sure\
      \ that your resize your texture ''before'' you reduce the color depth when editing.\
      \ Some image editors such as [http://www.irfanview.com Irfanview] kick the depth\
      \ back up to 24-bit when resized. From the point of view of image quality it\
      \ also makes sense to give your image app the largest colourspace to work with\
      \ when resizing.\n\n; File Location : If it still doesn't import then you need\
      \ to check how deep the texture file is located in your directory structure.\
      \ Basically when you import a texture in UnrealEd, the pathname and filename\
      \ will be stored in a string of some kind with a fixed length. So if your directory\
      \ is too long, the whole thing won't be able to fit in the string and UnrealEd\
      \ can't find the texture. The solution is simple: Move the texture(s) you want\
      \ to import to <tt>C:\\</tt> for example. Also note, that UnrealEd doesn't like\
      \ spaces in the pathname.\n\n==Exporting ==\n\nTo export a texture from UnrealEd,\
      \ go to the texture browser and select the texture you want to export. Do [[Legacy:Texture\
      \ Browser Menu|Texture Browser Menu]] -> File -> Export. Then simply select\
      \ the directory to save the .TGA file to and export the file. You can then view\
      \ or edit the file in any image editing program.\n\nSome [[Legacy:Texture Format|texture\
      \ format]]s won't open properly in standard graphics applications:\n* When exporting\
      \ TGA files with alpha channels, UnrealEd does write the alpha information to\
      \ the file correctly, but writes a TGA file header at the beginning which says\
      \ that there isn't any alpha information there, so many programs will ignore\
      \ the alpha data in the file when loading it.  To fix this, you can use the\
      \ [[Legacy:Texture Toolkit For UnrealEd|Texture Toolkit for UnrealEd]] to fix\
      \ the TGA file headers before opening them in other programs.\n* All [[Legacy:DXT|DXT]]\
      \ compressed textures are exported to DDS. RGB8 and RGBA8 textures can be exported\
      \ to 32-bit TGA, 32-bit UPT, 24-bit BMP or 24-bit PCX and P8 textures can be\
      \ exported to 8-bit palettized BMP or PCX. You can either open DXT compressed\
      \ textures using the NVIDIA [http://developer.nvidia.com/object/nv_texture_tools.html\
      \ DDS Photoshop Plug-in], or you can decompress them to TGA for other software\
      \ using the [[Legacy:Texture Toolkit For UnrealEd|Texture Toolkit for UnrealEd]].\n\
      * UnrealEd will only export G16 textures (used for [[Legacy:Terrain|Terrain]]\
      \ heightmaps) as 16-bit grayscale BMP files.  The problem is that there's no\
      \ such thing as a 16-bit grayscale BMP file (the BMP format doesn't support\
      \ it).  UnrealEd actually writes a broken file format which isn't readable by\
      \ any standard graphics application (and couldn't be even if they wanted to).\
      \  To use these \"broken BMP\" files, you will either need to use a program\
      \ specifically designed for it such as [[Legacy:G16ed|G16ed]], or you will need\
      \ to convert them to a more standard format using something like the [[Legacy:Texture\
      \ Toolkit For UnrealEd|Texture Toolkit for UnrealEd]].\n\n==Related Topics ==\n\
      * [[Legacy:Level Screenshot|Level Screenshot]]: quick instructions\n* [[Legacy:MyLevel|MyLevel]]\n\
      * [[Legacy:Texture Topics|Texture Topics]]\n* [[Legacy:Animated Texture|Animated\
      \ Texture]]\n\n'''Foxpaw:''' I have a texture that I want to import into UnrealEd.\
      \ This texture is very high resolution - roughly 8000x4000. I mostly want to\
      \ try importing this texture simply to see what the UnrealEngine2 can accomplish\
      \ given very high-polygon, high-detailed art assets.\n\nNow, the problem that\
      \ I'm having is, UnrealEd crashes on import if I uncheck \"generate mipmaps\"\
      \ on texture import. If I generate the mipmaps, however, I just get a mipmap,\
      \ which, though theoretically it should be indistringuisable, is actually quite\
      \ noticeably degraded from what the texture looks like in the texture browser.\n\
      \nSo my question is, is there any way to import a giant texture without mipmaps,\
      \ or any way to \"weight\" the mipmaps differently? The mipmaps that I'm seeing\
      \ are clearly lower detail maps than should be displayed at that distance and\
      \ resolution.\n\n'''Graphik:''' I realize that you're just trying to push the\
      \ engine to it's limits, but I don't think that an 8000x4000 texture will really\
      \ yeild much, if any, improvement.\n\n'''Foogod:''' A couple of things in response\
      \ to this:  First, as far as I know, texture dimensions must always be a power\
      \ of two, so if you've actually got an 8000x4000 image, that might be part of\
      \ the problem.  Try making it, say, 8192x4096 instead.  Second, even assuming\
      \ that the engine can handle a texture like this, it's quite likely that most\
      \ 3D hardware rendering won't, and it's possible that the reason you're seeing\
      \ a degraded texture is because the engine had to use a lesser mipmap when passing\
      \ it to the video card to make it something that the hardware could actually\
      \ display.  In this case, there's probably not a lot you can do until new video\
      \ cards come out which can handle this kind of insanity.\n\n'''EricBlade:'''\
      \ From what I understand, UEd can handle up to 2048x2048, though I haven't heard\
      \ of anyone actually using that.  I imagine much like if you try to import a\
      \ static mesh that's greater than around 20,000 polys, it will simply stop importing\
      \ somewhere around 20,000 and leave you with a pile of garbage, it probably\
      \ does about the same thing with insane texture sizes.\n\n'''Ben:''' Is there\
      \ a way to load DYNAMICALLY a texture, or a package including a texture during\
      \ the execution of unreal? \n\nThe goal is to not have to stop and restart unreal.\n\
      \nI've got the idea (didn't tested yet) to make a class that has the statement\
      \ #exec TEXTURE IMPORT NAME=SomeTex1 FILE=Textures\\SomeTexture.pcx GROUP=Skins\
      \ FLAGS=2\n\nand when I need it inside unreal to \"summon\" this class.\n\n\
      Do not seams really the best, so any other idea?\n\n'''Wormbo:''' UnrealScript\
      \ code can use the DynamicLoadObject() function to load objects like Textures\
      \ from Unreal packages. Importing textures from disk at runtime is not possible,\
      \ though. The #[[Legacy:Exec Directive|exec directive]]s are only executed at\
      \ compile time.\n\n'''Switch`:''' In theory it's possible with 3rd party application\
      \ running in the background. The app could receive file import details from\
      \ unrealscript via TCP, import a texture into package (ie using one of the ucc\
      \ commandlets) with unique name, then send the filename back to unrealscript,\
      \ where the texture would be loaded at runtime with DynamicLoadObject().\n\n\
      [[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy Troubleshooting|{{PAGENAME}}]]"
  properties: []
  revId: 8066
name: "Legacy:Texture Import And Export"
revision:
  revid: 8066
  parentid: 8067
  user: "Dial-1084.wroclaw.dialog.net.pl"
  timestamp: 1158329216.000000000
  comment: "In theory it's possible"
timestamp: 1668762523.391927000
