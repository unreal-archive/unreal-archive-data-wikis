---
parse:
  title: "Legacy:UT2003/Suggestions"
  text:
    text: "<p>Engine suggestions for UT2003. See also <a href=\"/Legacy:UnrealEd_Suggestion_List\"\
      \ title=\"Legacy:UnrealEd Suggestion List\">UnrealEd suggestion list</a>.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UnrealScript\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UnrealScript</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Comment_blocks\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Comment blocks</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#States_in_non-Actor_classes\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">States in non-Actor\
      \ classes</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Typecast_from_byte_to_enum\"><span class=\"tocnumber\">1.3</span> <span class=\"\
      toctext\">Typecast from byte to enum</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#InStr_function\"><span class=\"tocnumber\">1.4</span>\
      \ <span class=\"toctext\">InStr function</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#Boolean_operators_could_coerce_their_arguments_to_bool\"\
      ><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">Boolean operators\
      \ could coerce their arguments to bool</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Global_constants\"><span class=\"tocnumber\">1.6</span>\
      \ <span class=\"toctext\">Global constants</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Tags_other_than_Tag_and_Event\"><span class=\"tocnumber\"\
      >1.7</span> <span class=\"toctext\">Tags other than Tag and Event</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#In-Scope_Declaration\"><span\
      \ class=\"tocnumber\">1.8</span> <span class=\"toctext\">In-Scope Declaration</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Debugging_Timer.._thing.\"\
      ><span class=\"tocnumber\">1.9</span> <span class=\"toctext\">Debugging Timer..\
      \ thing.</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-11\"\
      ><a href=\"#UnrealScript_Development_Environment\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">UnrealScript Development Environment</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#Incremental_search\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Incremental search</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#Tabs_and_blanks_for_indentation\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Tabs and blanks\
      \ for indentation</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a\
      \ href=\"#Block_indention.2Funindention\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Block indention/unindention</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-15\"><a href=\"#Classes\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Classes</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-16\"><a href=\"#ControlPoint.2C_FlagBase_deletable\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">ControlPoint, FlagBase\
      \ deletable</span></a></li>\n<li class=\"toclevel-2 tocsection-17\"><a href=\"\
      #Associating_custom_data_with_players\"><span class=\"tocnumber\">3.2</span>\
      \ <span class=\"toctext\">Associating custom data with players</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-18\"><a href=\"#Per-mod_keybindings\"><span\
      \ class=\"tocnumber\">3.3</span> <span class=\"toctext\">Per-mod keybindings</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-19\"><a href=\"#GetItemName_function\"><span\
      \ class=\"tocnumber\">3.4</span> <span class=\"toctext\">GetItemName function</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-20\"><a href=\"#Miscellaneous\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Miscellaneous</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-21\"><a href=\"#UWindows_vs._simple_menu_system\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">UWindows vs. simple\
      \ menu system</span></a></li>\n<li class=\"toclevel-2 tocsection-22\"><a href=\"\
      #Menu_accessible_in-game\"><span class=\"tocnumber\">4.2</span> <span class=\"\
      toctext\">Menu accessible in-game</span></a></li>\n<li class=\"toclevel-2 tocsection-23\"\
      ><a href=\"#Custom_model.2Fvoicepack_support_client-side_only\"><span class=\"\
      tocnumber\">4.3</span> <span class=\"toctext\">Custom model/voicepack support\
      \ client-side only</span></a></li>\n<li class=\"toclevel-2 tocsection-24\"><a\
      \ href=\"#Enhanced_demo_driver\"><span class=\"tocnumber\">4.4</span> <span\
      \ class=\"toctext\">Enhanced demo driver</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-25\"><a href=\"#Demo_browser\"><span class=\"tocnumber\">4.5</span>\
      \ <span class=\"toctext\">Demo browser</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-26\"><a href=\"#Package_handling_in_multiplayer\"><span class=\"\
      tocnumber\">4.6</span> <span class=\"toctext\">Package handling in multiplayer</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-27\"><a href=\"#dup.28.29_like_functionality_for_objects\"\
      ><span class=\"tocnumber\">4.7</span> <span class=\"toctext\">dup() like functionality\
      \ for objects</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-28\"\
      ><a href=\"#Discussion\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"UnrealScript\">UnrealScript</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=1\"\
      \ title=\"Edit section: UnrealScript\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Comment_blocks\"\
      >Comment blocks</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=2\" title=\"Edit\
      \ section: Comment blocks\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>EntropicLqd:</b> Make multi-line comment blocks at the top of class files\
      \ behave correctly. The code snippet below will not compile because it thinks\
      \ the class name is <i>was</i>. Look for the class keyword on line two.</p>\n\
      <p><b>ZxAnPhOrIaN:</b> The only, I mean ONLY, way to include \"class\" in comments\
      \ is to put it into a single line comment.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"coMULTI\">/*\n   This trigger allows mappers to change some\
      \ of the zone properties using a trigger.\n   The specific case this class was\
      \ written for was to enable a switchable \"escalator\"\n   zone to be created,\
      \ where the escalator could move in two directions at once.\n \n   Version By\
      \  Description\n   ------- --- -------------------------------------------------------------------------\n\
      \   1.00    DML Created for Pitboy from the UT Editing fourm.\n*/</span>\n<span\
      \ class=\"co1\">//   The class keyword will work in in single-line comments:</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">//</span>\n<span class=\"\
      co1\">//   This trigger allows mappers to change some of the zone properties\
      \ using a trigger.</span>\n<span class=\"co1\">//   The specific case this class\
      \ was written for was to enable a switchable \"escalator\"</span>\n<span class=\"\
      co1\">//   zone to be created, where the escalator could move in two directions\
      \ at once.</span>\n<span class=\"co1\">//</span>\n<span class=\"co1\">//   Version\
      \ By  Description</span>\n<span class=\"co1\">//   ------- --- -------------------------------------------------------------------------</span>\n\
      <span class=\"co1\">//   1.00    DML Created for Pitboy from the UT Editing\
      \ fourm.</span>\n \n \n \n \n<span class=\"kw1\">class</span> TriggeredZonePropertyChanger\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Actor</span>;\n...</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"States_in_non-Actor_classes\">States\
      \ in non-Actor classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=3\" title=\"Edit\
      \ section: States in non-Actor classes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Mychaeel:</b> Do states still only work in classes\
      \ derived from Actor? It'd occasionally be very handy to be able to use states\
      \ in other classes as well – I remember coding <a href=\"/Legacy:Useful_UWindow_Extensions/Scrolling_Credits\"\
      \ title=\"Legacy:Useful UWindow Extensions/Scrolling Credits\">some UWindow\
      \ widget</a> with a couple of states and being a bit disappointed when (after\
      \ compiling alright) it just didn't work because the object wouldn't change\
      \ states.</p>\n<dl>\n<dd><b>Mongo:</b> This is possible to do with native code.\
      \ Just call InitExecution() on your new object. Unfortunately, you don't get\
      \ latent code with this, because you need to be ticked in order to have state\
      \ code, and objects aren't ticked.</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> States\
      \ are what I'm striving for here, not latent code; and native code is certainly\
      \ a poor choice for a mod developer, especially when it's used just for the\
      \ developer's convenience instead of the user's.</dd>\n</dl>\n<dl>\n<dd><b>Dma:</b>\
      \ Look at Console.uc. It uses states. It is not a subclass of Actor. Go forth\
      \ and code.</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> As UsAaR33 points out in\
      \ the \"Comments\" section below, <a href=\"/Legacy:Console\" title=\"Legacy:Console\"\
      >Console</a> is the <i>only</i> other class besides <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> subclasses that supports states. I'd like\
      \ to have it in <i>all</i> classes though.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Typecast_from_byte_to_enum\">Typecast from byte to enum</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=4\"\
      \ title=\"Edit section: Typecast from byte to enum\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><b>Mychaeel:</b> Being able\
      \ to typecast from byte to enum would be great – or just being able to assign\
      \ byte values to enum variables. Especially with UnrealScript's arcane enum\
      \ scoping rules that'd be very useful at times.</p>\n<dl>\n<dd><b>Mongo:</b>\
      \ It'd be useful, yes. But it'd also make code more hairy to deal with. You\
      \ can copy and paste your enum between classes if you like. At least that should\
      \ help code clarity.</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> Copying and pasting\
      \ enums (apart from being a slightly ugly thing to do in its own right) doesn't\
      \ make them compatible though. I can't copy Canvas.Style to Actor.Style, for\
      \ instance, even though both are used with the ERenderType enum throughout the\
      \ code (but Canvas.Style is a byte variable).</dd>\n</dl>\n<dl>\n<dd><b>Xian:</b>\
      \ It is already possible. Just look at the Canvas thing in UT99: Canvas.Style\
      \ = ERenderType.STY_Normal. You can do the same with every enum and the syntax\
      \ is: &lt;byte_var&gt; = &lt;enum_name&gt;.&lt;enum_element&gt;; As for the\
      \ reverse thing:</dd>\n</dl>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw1\">enum</span> ETest\n<span class=\"br0\"\
      >{</span>\n   Test1,\n   Test2\n<span class=\"br0\">}</span> Testing;\n \n<span\
      \ class=\"kw1\">function</span> Blah <span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    Testing <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">1</span>;  <span class=\"co1\">// Testing = Test2</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Simple and clean&#160;:)</p>\n\
      <p><b>Foxpaw:</b> You can do this now with dependsOn, though dependsOn is sometimes\
      \ a bit flaky. Optionally I think you might be able to do this with setpropertytext\
      \ as well.</p>\n<h3><span class=\"mw-headline\" id=\"InStr_function\">InStr\
      \ function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=5\" title=\"Edit\
      \ section: InStr function\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>Mychaeel:</b> Just a minor improvement: The <b>InStr function</b> could\
      \ use an optional third \"offset\" parameter specifying where in the string\
      \ the substring search starts. There's always the following UnrealScript idiom\
      \ to achieve the same, but it would be so much more efficient natively...</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> InStrFrom<span class=\"br0\">(</span><span\
      \ class=\"kw1\">coerce</span> <span class=\"kw5\">string</span> StrText, <span\
      \ class=\"kw1\">coerce</span> <span class=\"kw5\">string</span> StrPart, <span\
      \ class=\"kw1\">optional</span> <span class=\"kw5\">int</span> OffsetStart<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> OffsetPart;\n \n  OffsetPart <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">InStr</span><span class=\"br0\"\
      >(</span><span class=\"kw3\">Mid</span><span class=\"br0\">(</span>StrText,\
      \ OffsetStart<span class=\"br0\">)</span>, StrPart<span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>OffsetPart <span\
      \ class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>\n    OffsetPart <span class=\"sy0\">+=</span> OffsetStart;\n  <span\
      \ class=\"kw2\">return</span> OffsetPart;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>UsAaR33:</b> And why not add a 4th optional boolean parameter\
      \ for Case Insensitivity?</p>\n<dl>\n<dd><b>Mongo:</b> Well, you just defined\
      \ the function. I guess there's no point to implementing it natively. And speed\
      \ is not a valid argument, considering the number of things that are done in\
      \ unrealscript.&#160;:)</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> If that was\
      \ the case, there wouldn't be an InStr function in the first place – InStr could\
      \ be just as well done by iterating over the string in a <code>for</code> loop.\
      \ I've been using InStr for parsing HTML (nothing you'd <i>usually</i> do in\
      \ UnrealScript, without doubt, but even Epic did that themselves) and any bit\
      \ of generic acceleration would have been a big plus there.</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Boolean_operators_could_coerce_their_arguments_to_bool\"\
      >Boolean operators could coerce their arguments to bool</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=6\"\
      \ title=\"Edit section: Boolean operators could coerce their arguments to bool\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Boolean\
      \ operators could coerce their arguments to bool (and the same for <code>if</code>,\
      \ <code>while</code>, <code>until</code>). That'd make many expressions more\
      \ concise and thus more readable. (Of course it also has the potential to make\
      \ code <i>less</i> readable and more obfuscated, but which powerful syntax construct\
      \ doesn't? At the end of the day the quality of code is up to the coder anyway.)\
      \ →<a href=\"/Legacy:Mychaeel\" title=\"Legacy:Mychaeel\">Mychaeel</a></p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>ThisPawn <span class=\"sy0\">&amp;&amp;</span> ThisPawn.<span\
      \ class=\"kw9\">Weapon</span><span class=\"br0\">)</span>\n  ThisPawn.<span\
      \ class=\"kw9\">Weapon</span>.<span class=\"me0\">Fire</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p><b>Foxpaw:</b> I agree, although I wouldn't use this personally,\
      \ it seems like the way it should be.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Global_constants\">Global constants</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=7\"\
      \ title=\"Edit section: Global constants\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>EntropicLqd:</b> Support for global constants than\
      \ can be used across classes, within object default properties, and within array\
      \ declarations.</p>\n<dl>\n<dd><b>Mychaeel:</b> Well... how, across classes?\
      \ Where would a constant whose scope goes beyond this class and its subclasses\
      \ be defined?</dd>\n</dl>\n<dl>\n<dd><b>EntropicLqd:</b> How about if you simply\
      \ defined a constant outside of a class definition (before the initial <i>class</i>\
      \ declaration) it had global scope? I realise it could lead to somewhat untidy\
      \ code if people littered their constants across their class files, but that's\
      \ their problem. I guess I could always dig out a pre-processor and <i>tweak</i>\
      \ the code a little&#160;:)</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      Tags_other_than_Tag_and_Event\">Tags other than Tag and Event</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=8\"\
      \ title=\"Edit section: Tags other than Tag and Event\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Actors such as the <a href=\"\
      /Legacy:Dispatcher\" title=\"Legacy:Dispatcher\">Dispatcher</a> and <a href=\"\
      /Legacy:RoundRobin\" title=\"Legacy:RoundRobin\">RoundRobin</a> don't show ties\
      \ as read lines in UEd – presumably UEd is hard-coded to draw the lines when\
      \ \"Event\" and \"Tag\" properties match.</p>\n<p>It would be handy to have\
      \ syntax like this:</p>\n<dl>\n<dd>var() pseudoevent name AnotherEventProperty;</dd>\n\
      </dl>\n<p>This would notify UEd that the property should be inspected &amp;\
      \ red lines drawn if a match found. (note that the actual keyword \"pseudoevent\"\
      \ is lousy. Something better would be needed. Mych is always good with naming&#160;;)\
      \ )</p>\n<h3><span class=\"mw-headline\" id=\"In-Scope_Declaration\">In-Scope\
      \ Declaration</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=9\" title=\"Edit\
      \ section: In-Scope Declaration\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>[BWF]GrimReaper</b> Wouldn't it be nice to be able\
      \ to do things like the following. 'See int declaration' Don't know if it is\
      \ implementable into ucc.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"\
      sy0\">&lt;</span><span class=\"nu0\">10</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"kw3\">Log</span><span class=\"br0\"\
      >(</span>i<span class=\"sy0\">@</span><span class=\"st0\">\"Blah\"</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p><b>Foxpaw:</b> I don't like\
      \ that format. It's kind of neat, but it makes the language less flexible. With\
      \ that kind of format you can't do the following:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">  <span class=\"kw1\">var</span> MovementType MovementType;\n\
      \  <span class=\"co1\">// or...</span>\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">string</span> <span class=\"kw5\">String</span>;</pre></div>\n\
      </div>\n<p>Which may seem like poor style to some, but I'd like to see some\
      \ solid experimental evidence to back up the suggestion that my so called \"\
      bad\" style is worse than so called \"good\" style.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Debugging_Timer.._thing.\">Debugging Timer.. thing.</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=10\" title=\"Edit section:\
      \ Debugging Timer.. thing.\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Foxpaw:</b> I think it would be very useful if\
      \ there was a somewhat detailed breakdown of where the Engine was spending its\
      \ time. This would help optimizing of code greatly I think. I would think it\
      \ could be invoked via command line or maybe a special option during package\
      \ compilation, and could display statistics like:</p>\n<ul>\n<li>Percent of\
      \ Time spent in Unrealscript loops</li>\n<li>Percent of Time spent in iterator\
      \ loops</li>\n<li>Percent of Time spent tracing</li>\n<li>etc.. for all the\
      \ heavyweight functions</li>\n<li>Perhaps the ability to log a list of all functions\
      \ that got called in order of how frequently they are called.</li>\n</ul>\n\
      <p>You could of course test many things like this by using the existing script\
      \ timers, but it would take a very long time for me to go through ALL my classes\
      \ and add timers before each trace I do, etc.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"UnrealScript_Development_Environment\">UnrealScript Development Environment</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=11\" title=\"Edit section:\
      \ UnrealScript Development Environment\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Incremental_search\"\
      >Incremental search</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=12\" title=\"Edit\
      \ section: Incremental search\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Mychaeel:</b> Incremental search, one of my favorite\
      \ navigational features in any text editor: Pressing a certain keyboard shortcut\
      \ (<code>Ctrl+E</code>) puts the input focus to an edit field in either the\
      \ status bar or a toolbar. The search within the active window is performed\
      \ as the user enters and modifies the search string, starting from the current\
      \ cursor position. (Pressing <code>Home</code> resets the search start point\
      \ to the beginning of the text, pressing <code>F3</code> searches for the next\
      \ occurrence.)</p>\n<p>It's the most efficient way of searching a text document,\
      \ from the user's point of view, because he/she never has to enter more text\
      \ than necessary to find what he/she's looking for.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Tabs_and_blanks_for_indentation\">Tabs and blanks for indentation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=13\" title=\"Edit section:\
      \ Tabs and blanks for indentation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Mychaeel:</b> As an option, use the <code>Tab</code>\
      \ key to enter spaces up to the next tabstop. Many coders prefer indenting their\
      \ code with blanks instead of tabs, but still find it convenient to use the\
      \ <code>Tab</code> key to enter as many blanks as necessary to jump to the next\
      \ tab position. (For that matter, the tab width should be configurable.)</p>\n\
      <p>(I'm implying the presence of auto-indent here, by the way...)</p>\n<p><b>[BWF]GrimReaper</b>\
      \ Most programming language styles prefer blanks due to the fact that any editor/viewer\
      \ will give the same indentation result. Tabs however is easier and less strainful\
      \ than 4 spaces or something. The editor or IDE should directly convert a tab\
      \ to 4 spaces if it where up to me.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Block_indention.2Funindention\">Block indention/unindention</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=14\"\
      \ title=\"Edit section: Block indention/unindention\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><b>Mychaeel:</b> Block indention/unindention,\
      \ using the configured tab width (and tab-vs-blank setting). Suggestion for\
      \ a shortcut: <code>Tab</code> and <code>Shift+Tab</code> when text is selected.</p>\n\
      <dl>\n<dd><b>Hugh:</b> Personally, I like the way Textpad handles this. For\
      \ a start, you can specify how many spaces you want each tab to take up (x).\
      \ You can also tell it to a) always put x spaces in when you hit the tab key,\
      \ or b) convert all tabs to x spaces.</dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Classes\">Classes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=15\"\
      \ title=\"Edit section: Classes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"ControlPoint.2C_FlagBase_deletable\"\
      >ControlPoint, FlagBase deletable</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=16\"\
      \ title=\"Edit section: ControlPoint, FlagBase deletable\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><b>EntropicLqd:</b> It would\
      \ be great if the <a href=\"/Legacy:ControlPoint\" title=\"Legacy:ControlPoint\"\
      >ControlPoint</a> and <a href=\"/Legacy:FlagBase\" title=\"Legacy:FlagBase\"\
      >FlagBase</a> actors were deletable by game type and mutator mods. It was one\
      \ of the more painful things to have to code around when writing my CTF+ mod.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Associating_custom_data_with_players\"\
      >Associating custom data with players</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=17\"\
      \ title=\"Edit section: Associating custom data with players\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><b>Mychaeel:</b>\
      \ A very common problems mods and mutators used to have was <b>associating custom\
      \ data with players.</b> Game type mods might indeed create their own PlayerReplicationInfo\
      \ subclass and use it, but that's something mutators definitely shouldn't do\
      \ unless their author intends to scratch any compatibility the mutator might\
      \ have to custom game types and other mutators. Usual idioms to work around\
      \ that problem were</p>\n<ul>\n<li>Using PlayerID as an index into an array\
      \ (breaks if more than 32 players/bots enter and leave a game in total).</li>\n\
      </ul>\n<ul>\n<li>Using a ReplicationInfo subclass owned by the player's PlayerReplicationInfo\
      \ and retrieved with a ChildActors call (inefficient if it has to be done frequently).</li>\n\
      </ul>\n<p>A <code>ReplicationInfo NextCustomInfo</code> reference in ReplicationInfo\
      \ would make associating and efficiently retrieving ReplicationInfo actors with\
      \ a given player very easy and convenient. For good measure, the following method\
      \ (in ReplicationInfo) would make it even easier.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// in ReplicationInfo</span>\n \n<span\
      \ class=\"kw1\">var</span> ReplicationInfo NextCustomInfo;\n \n \n<span class=\"\
      kw1\">function</span> ReplicationInfo GetCustomInfo<span class=\"br0\">(</span>class<span\
      \ class=\"sy0\">&lt;</span>ReplicationInfo<span class=\"sy0\">&gt;</span> CustomInfoClass,\
      \ <span class=\"kw1\">optional</span> <span class=\"kw5\">bool</span> bNew<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n  <span class=\"kw1\"\
      >local</span> ReplicationInfo ThisCustomInfo;\n \n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>ThisCustomInfo <span class=\"sy0\">=</span> NextCustomInfo;\
      \ ThisCustomInfo <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>;\
      \ ThisCustomInfo <span class=\"sy0\">=</span> ThisCustomInfo.<span class=\"\
      me0\">NextCustomInfo</span><span class=\"br0\">)</span>\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ThisCustomInfo.<span class=\"kw1\"\
      >Class</span> <span class=\"sy0\">==</span> CustomInfoClass<span class=\"br0\"\
      >)</span>\n      <span class=\"kw2\">return</span> ThisCustomInfo;\n \n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>bNew<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    ThisCustomInfo <span class=\"sy0\"\
      >=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span>CustomInfoClass,\
      \ <span class=\"kw7\">Owner</span><span class=\"br0\">)</span>;\n    ThisCustomInfo.<span\
      \ class=\"me0\">NextCustomInfo</span> <span class=\"sy0\">=</span> NextCustomInfo;\n\
      \    NextCustomInfo <span class=\"sy0\">=</span> ThisCustomInfo;\n  <span class=\"\
      br0\">}</span>\n \n  <span class=\"kw2\">return</span> ThisCustomInfo;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Thinking about it, it might\
      \ be a good idea to make that a doubly-linked list and automatically remove\
      \ a ReplicationInfo object from it when it is destroyed.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Per-mod_keybindings\">Per-mod keybindings</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=18\"\
      \ title=\"Edit section: Per-mod keybindings\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>UsAaR33:</b> This may be asking a lot, but to help\
      \ mod support, additional keybind classes would be great. These could be made\
      \ into some sort of linked list and a mod would have a subclass of it to support\
      \ the system. When a key is pressed the Input would look through the classes\
      \ until it finds a binding for a key or reaches the end of the list. Thus, different\
      \ mod's keybinds would not conflict with each other (unless they are run simultaneously.\
      \ For instance, many UT mods have a reload binding. Wouldn't it be great if\
      \ reload could just be bound to the same key for all the mods without going\
      \ into complex manual keybindings?</p>\n<p><b>Foxpaw:</b> The problem with this\
      \ is the same as the problem with it now: how do you decide if two things are\
      \ the same? Mod A may have an exec function for reloading, and Mod B may use\
      \ an input variable. How would the Unreal Engine discern that they were both\
      \ intended for reloading? You could add a tag to each keybind to say what it\
      \ was supposed to do, but there still there's no standardization.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"GetItemName_function\">GetItemName function</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=19\" title=\"Edit section:\
      \ GetItemName function\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>UsAaR33:</b> Actor.GetItemName() should 1) Be in the Object class and\
      \ 2) Be static.</p>\n<h2><span class=\"mw-headline\" id=\"Miscellaneous\">Miscellaneous</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=20\" title=\"Edit section:\
      \ Miscellaneous\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"UWindows_vs._simple_menu_system\">UWindows\
      \ vs. simple menu system</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=21\"\
      \ title=\"Edit section: UWindows vs. simple menu system\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><b>UsAaR33:</b> Oh and please\
      \ dump the existing menu system. UWindows are superior to any form of \"single-menu-window-showing-at-a-time\"\
      \ menu system.</p>\n<dl>\n<dd><b>Mychaeel:</b> That's within Digital Extremes'\
      \ responsibility, not Epic's. I understand Epic themselves mourn the removal\
      \ of the UWindow system just as we do.</dd>\n</dl>\n<dl>\n<dd><b>UsAaR33:</b>\
      \ Well, in that case I'll just add that to the Oldskool 2k3 (or whatever TNSe's\
      \ mod will be called) fix list. In that case, maybe I can just request continued\
      \ support for uwindows? (so that mod authors can still use them and even *cough*\
      \ redo the entire menu system.</dd>\n</dl>\n<p><b>Foxpaw:</b> It's entirely\
      \ possible with custom script to replace the GUI system. Having said that, UT2004\
      \ promises a new GUI so this is more or less already resolved.</p>\n<p><b>MythOpus:</b>\
      \ I wonder where that 'new' menu system is. I feel that all the new games have\
      \ turned to U2/UT2004's style of menus. I miss UT + UWindows..</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Menu_accessible_in-game\">Menu accessible in-game</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=22\" title=\"Edit section:\
      \ Menu accessible in-game\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>UsAaR33:</b> Be sure the mod menu is accessable in-game, in addition to\
      \ globally.</p>\n<h3><span class=\"mw-headline\" id=\"Custom_model.2Fvoicepack_support_client-side_only\"\
      >Custom model/voicepack support client-side only</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=23\"\
      \ title=\"Edit section: Custom model/voicepack support client-side only\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><b>UsAaR33:</b>\
      \ Having models, skins, and possibly voicepacks being treated in a similar manner\
      \ as Quake, Half-Life (I believe), and Valhalla Avatar (UT mod). In which the\
      \ client loads such media itself, as opposed to UT's system of the server loading\
      \ it and then sending the export index to clients. This allows for usage of\
      \ models/skins/vp's even if the server doesn't have them installed. Clients\
      \ with the given model/skin/vp installed will use them; if not, the default.\
      \ With the Controller/Animation handling split, I wouldn't imagine this being\
      \ too hard to code at the last minute. Perhaps support for peer-to-peer transfering?\
      \ (Altough peer-to-peer transfering can create cheating issues with cheat skins\
      \ and the like...)</p>\n<dl>\n<dd><b>Mongo:</b> That sucks. UT2003 will give\
      \ more functionality to the model creator for support with footstep sounds,\
      \ blended animations, particle effects, etc. As such, given that you're executing\
      \ custom code, it's not feasible to implement this without opening up a can\
      \ of worms (see: cheating.)</dd>\n</dl>\n<dl>\n<dd><b>UsAaR33:</b> Any default\
      \ property can be read. It is only non-static functions (or static functions\
      \ with actor pointers) that can cause security concerns. It is a known fact\
      \ that most model authors do not want to touch code. I think the only custom\
      \ UT models that ever had custom scripts were the U4E ones and Spawn. (or ones\
      \ Psychic_313 or myself did coding for). And I am willing to bet that the majority\
      \ of model creators would be willing to sacrifice uscript functionality in exchange\
      \ for a broader audience (that is online). Why do you think the Quake model\
      \ scene is so much larger than UT's? IMO, it is the lack of such a system that\
      \ hurts UT. (What is the point of making a model that you can only use on bots\
      \ and can't show off to a bunch of random people on the Internet?)</dd>\n</dl>\n\
      <dl>\n<dd><b>Birelli:</b> Maybe I'm missing something about adding support this\
      \ kind of thing ala Valhalla Avatar. As far as I can see, there is no security\
      \ loophole opened by allowing people to use content that some people don't have.\
      \ The one thing that comes to mind here in terms of cheating is invisible skins/skins\
      \ with flags/skins of the wrong team color, etc. With the system in Valhalla\
      \ Avatar, and presumably what would be added here, the only people that would\
      \ be affected by this cheating content would be people who <i>had this content\
      \ themselves</i>. Ironic that only cheaters can be cheated upon with this system\
      \ isn't it?&#160;;-)</dd>\n</dl>\n<dl>\n<dd><b>Hugh:</b> I seem to remember\
      \ that the problem with Quake in this aspect was that people could get it to\
      \ give the other players on their client a different skin. So somehow get their\
      \ client to tell the server that yes, they did have this custom model/skin,\
      \ and yes, it would display it, but when it wasn't actually the one that that\
      \ player had chosen to use...</dd>\n</dl>\n<dl>\n<dd><b>UsAaR33:</b> Well, Hugh,\
      \ peer-to-peer transfering doesn't have to be implemented. Just the basic clients-load\
      \ media system is what is important.... And I suppose \"override\" models (i.e.\
      \ a default one) would be a sweet addition (I was going to add that to VA..\
      \ never got around to it though&#160;:/)</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Enhanced_demo_driver\">Enhanced demo driver</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=24\"\
      \ title=\"Edit section: Enhanced demo driver\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>UsAaR33:</b> A Demo Driver that supports pausing\
      \ and speed controlling. Preferibly time jumping as well, although the existing\
      \ Demo code (i.e. really just network packets) makes that quite difficult.</p>\n\
      <dl>\n<dd><b>Hugh:</b> I don't know what the demo format itself is like at the\
      \ moment, but some kind of demo format that is easily editable - so someone\
      \ can make a tool for re-camming matches, etc. (Like KeyGrip 2 for Quake 2)</dd>\n\
      </dl>\n<dl>\n<dd><b>UsAaR33:</b> Hugh, as I said, it is pure UT network packets.\
      \ Demos are generated by analyzing the replication statements, but instead of\
      \ sending the packets over a network, they are written to disk. Hence, editing/recamming\
      \ is extremely difficult. (in other words, the demo system can best be described\
      \ as a \"hack\".</dd>\n</dl>\n<dl>\n<dd><b>Hugh:</b> What <b>would</b> be nice\
      \ would be an additional system which would record things block by block - like\
      \ the way Quake and Quake 2 do it. They would take a snapshot every 1/10 seconds\
      \ - then the game would interpolate between them when playing it back. There\
      \ were little problems with this, but if anyone was going to try to implement\
      \ it, then I'd be happy to run through it with them and iron out all the problems\
      \ that Q2 had...</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Demo_browser\"\
      >Demo browser</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=25\" title=\"Edit\
      \ section: Demo browser\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>UsAaR33:</b> Some form of a Demo Browser? Not unlike Demo Manager 2.0\
      \ for UT. It seems foolish to take so much time to have programmed support for\
      \ demos and then only have them accessable via console commands, leaving most\
      \ users unaware of their existance.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Package_handling_in_multiplayer\">Package handling in multiplayer</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=26\" title=\"Edit section:\
      \ Package handling in multiplayer\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>UsAaR33:</b> The current UT package loading methods\
      \ in multiplayer are flawed.</p>\n<ul>\n<li>I believe it acts like:\n<ol>\n\
      <li>Search for a required package by order of Paths list.</li>\n<li>If not found,\
      \ search in cache for GUID.uxx</li>\n<li>If still not found, request download.</li>\n\
      <li>If a file was loaded from the paths list, but does not match GUID, version\
      \ mistmatch error.</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>I'd like this order:\n\
      <ol>\n<li>Search for a required package in the cached directory (GUID.uxx)</li>\n\
      <li>If not found, search the paths list. If the filename is found, verify that\
      \ its GUID is correct before loading the entire thing.</li>\n<li>If still not\
      \ found, request download.</li>\n</ol>\n</li>\n</ul>\n<p>This will prevent the\
      \ version mismatch errors once and for all, making updates much easier on the\
      \ end-user.</p>\n<dl>\n<dd><b>Mychaeel:</b> I heard they've been thinking about\
      \ something like that. It has been mentioned in the discussion, anyway. (Related:\
      \ The ability to conform packages has been removed without substitution.)</dd>\n\
      </dl>\n<dl>\n<dd><b>UsAaR33:</b> Um.. why did they strip conforming? It is very\
      \ useful.. especially patching on their end. (I've used it for my own mods as\
      \ well.)</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> For security reasons, or so\
      \ I recall Dr.Sin saying. (Or maybe I'm not remembering it correctly. He did\
      \ say something about that, anyway.)</dd>\n</dl>\n<dl>\n<dd><b>UsAaR33:</b>\
      \ Heh.. I'm on the CSHP/UTPure team. I do recall him mentioning that he didn't\
      \ like package conforming and would like it stripped (though I disagreed). Well,\
      \ that makes life harder on mod authors and UT users. I hope they at least have\
      \ more friendly \"different version\" handling, which would make up for the\
      \ conforming loss.</dd>\n</dl>\n<dl>\n<dd><b>[BWF]GrimReaper:</b> I asked Dr.Sin\
      \ to remove it since it's THE holy grail for UT hacking. Until today it still\
      \ remains a part of UT. His reply was that people would build one if it was\
      \ removed. Personally i'd bottle out at that point. Question? Who needs conforming\
      \ except for Epic patches that need to be inter-version comapatible? Answer:\
      \ Nobody, and if you would, you could go and ask Epic to do it for you 5mins\
      \ job in the name of security.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"dup.28.29_like_functionality_for_objects\">dup() like functionality for\
      \ objects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UT2003/Suggestions?section=27\" title=\"Edit\
      \ section: dup() like functionality for objects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Foxpaw:</b> It's come to my attention that the\
      \ ability to make a bitwise copy of an object would be very useful in UnrealScript.\
      \ Sometimes I have an object that I need to make a copy of, and it's rather\
      \ tedious and error-prone to have to write a special function to copy all of\
      \ the variables, plus it wouldn't perform as well as a native object copying\
      \ function.</p>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT2003/Suggestions?section=28\" title=\"Edit section:\
      \ Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> Are these suggestions that were made at the conference, or\
      \ a list that people can add to now? In either case, will Epic be reading this\
      \ page?</p>\n<p><b>Mychaeel:</b> Suggestions I <i>should</i> have made at the\
      \ conference, but forgot to. I guess Epic won't read this page unless I point\
      \ them to it, but I plan to... &#160;:)</p>\n<p><b>Hugh:</b> I've just pointed\
      \ this page out to the devs – At this stage, they wouldn't be able to make any\
      \ changes to the engine for UT2003, as it's so close to release (we hope!),\
      \ but anything that they feel is a good idea may make it into future incarnations\
      \ of the engine (which is evolving all the time) for other games (U2, etc).\
      \ That said, there are some things on here that are so small, while they may\
      \ be useful, they'd probably cause more havoc by breaking people's maps.</p>\n\
      <p><b>Mychaeel:</b> Thanks, Hugh. I still hope that some of the things suggested\
      \ on this page will make it into the first UT2003 release, for instance the\
      \ UDE items and things with good backwards compatibility like that InStr suggestion\
      \ and the defaultproperties one...</p>\n<p><b>Tarquin:</b> ... and the Lift\
      \ thing is just a class script tweak&#160;:)</p>\n<p><b>Hugh:</b> How did you\
      \ know that was the one I was thinking of? That was actually the only one I've\
      \ read..</p>\n<p><b>Tarquin:</b> property groups are just a cosmetic feature\
      \ for mappers. Variables are just stored by name (\"LiftTag=arf\"), so my hunch\
      \ is the engine wouldn't care or even know it was opening older maps.</p>\n\
      <p><b>Mychaeel:</b> Tarquin, only properties declared in the selected actors'\
      \ common superclasses are displayed in the property sheet. LiftTag is defined\
      \ once in both LiftCenter and LiftExit, so your suggestion would require LiftTag\
      \ either to be moved into NavigationPoint or LiftCenter and LiftExit to be derived\
      \ from the same intermediate class (holding LiftTag).</p>\n<p><b>Tarquin:</b>\
      \ I don't think so. Subclasses of ScriptedPawn add extra properties to the ScriptedPawn\
      \ group, so I think it would be possible for both Lift navpoints to have var(LiftTag)\
      \ LiftTag</p>\n<p><b>Mychaeel:</b> It's possible for both subclasses to do that,\
      \ but the property won't show up when both actors are selected anyway. (I tested\
      \ it before I wrote it. &#160;:) And it makes sense – only imagine what would\
      \ happen if both subclass properties of the same name in the same group had\
      \ different types.)</p>\n<p><b>Tarquin:</b> i was just testing it too... doesn't\
      \ work&#160;:( urg. another one bites the dust</p>\n<p><b>UsAaR33:</b> Just\
      \ for the record, state support also exists in console and its subclasses. But\
      \ no other objects. (well, in UT build 436 that is). Oh and personally I would\
      \ not the C style auto 0=false, none=false, etc. casting ability. It really\
      \ just makes code harder to read. Well, as long as Epic continues using&#160;!=\
      \ none and == 0 in their code, I can't complain if support is added.</p>\n<p><b>Mychaeel:</b>\
      \ The casting ability is in already, it's just not automatically done in <code>if</code>\
      \ and the likes... As I said, whether it makes code harder to read or not is\
      \ largely the responsibility of the coder. I personally believe it'd have the\
      \ potential to make some code much <i>more</i> readable (<code>!bleh</code>\
      \ instead of <code>bleh&#160;!= None</code> – the latter requires you to focus\
      \ on the middle of the expression).</p>\n<p><b>Dma:</b> I personally think that\
      \ \"if (Enemy&#160;!= None)\" is MUCH more readable than \"if (!Enemy)\" or\
      \ something. Lets the reader know that Enemy is an <b>Object</b> and not a <b>bool</b>.\
      \ (Well, duh...)</p>\n<p><b>UsAaR33:</b> Dma, my point exactly. When I first\
      \ started working with the Unreal C++ API, I spat out some nice vulgarities.\
      \ It was rediculous having to look constantly at superclasses to know what type\
      \ a given variable was.</p>\n<p><b>Mychaeel:</b> As I said, clarity of code\
      \ is the coder's responsibility. You can hardly enforce good coding style on\
      \ a language level. I personally prefer a <b>consistent set of variable naming\
      \ conventions</b> a lot over needless code. I don't want to have to rely on\
      \ a variable's context to be able to figure out what it means, is and contains\
      \ – exactly your point, UsAaR33.</p>\n<p><b>EntropicLqd:</b> I use (my own form\
      \ of) hungarian notation to distinguish between data types. It works well, and\
      \ allows the flexibility of handling object references as bools without the\
      \ possibility of confusion.</p>\n<p><b>UsAaR33:</b> Mychaeel, I agree 100%.\
      \ But if I was Epic, I wouldn't start renaming every variable in the last minutes\
      \ of development. They do have nice nice conventions b* is a boolean and the\
      \ enum thing.. but after that, basically nothing. (and the fact that input bytes\
      \ start with b* is really confusing to newcomers..). Maybe a page could be started\
      \ on wiki covering conventions (But with my \"wonderful\" programming style,\
      \ I don't think I should be the one to start it&#160;:p).</p>\n<p><b>Tarquin:</b>\
      \ There's <a href=\"/Legacy:Coding_Guidelines\" title=\"Legacy:Coding Guidelines\"\
      >Coding Guidelines</a>. (also known as CodeIndentationPissingMatch...&#160;;)\
      \ )</p>\n<p><b>[BWF]GrimReaper:</b> Case sensitive variables would force the\
      \ code to be much more stylish. I'm a JAVA person and a style whore&#160;:].</p>\n\
      <p><b>Foxpaw:</b> Well, making the lanes on the roads smaller would force people\
      \ to drive straighter, but doesn't the increased restriction outweigh the benefit?\
      \ (which, at least in my case, is approximately 0) Down with case sensitive\
      \ languages!</p>\n<p><b>RDGDanClark:</b> I'm of a mixed mind when it comes to\
      \ case-sensitivity, on the one hand, I like the way it keeps everything looking\
      \ good and (possibly) more organized, on the other hand, I'm a lazy bastard\
      \ sometimes and don't always feel like checking my seplling &#160;;)</p>\n<p><b>Foxpaw:</b>\
      \ Well, if people want their code to be organized like that then they'll use\
      \ the same case all the time anyway. If they don't want to do that, why force\
      \ them? It doesn't benefit anybody, (unless you look at someone elses source,\
      \ and then you can plame them for writing messy code) and it would limit people\
      \ who wanted to use different cases for some things.</p>\n<p><b>[BWF]GrimReaper:</b>\
      \ How can your code be organized when the very source you work with doesn't\
      \ use 1 style. IMO your lazy when you prefer case-insensitivity. Riding your\
      \ bike is hard but once you get used to it, it has benefits.</p>\n<p><b>Foxpaw:</b>\
      \ Well, my source DOES use 1 style - but it's not the same style Epic uses,\
      \ and I don't much care from their choice in capitalization. If the language\
      \ was made case sensitive you would have no choice but to conform to Epic's\
      \ standards. Like I said, if you think using the same case consistently is important,\
      \ that's all fine and good and you are welcome to do that, but why should it\
      \ be enforced at a language level? If a person writes messy code the only person\
      \ they're hurting is themselves - why make more work for them when they occasionally\
      \ use a different capitalization?</p>\n<p>The only advantage I can see in case\
      \ sensitivity is being able to have numerous variables with the same name but\
      \ different capitalizations - and even the value of that is highly questionable.</p>\n\
      <p><b>RDGDanClark:</b> I question the whole puritan work ethic that says that\
      \ being lazy is always a bad thing. In this case, it seems to me that if it\
      \ takes me 1 hour to write some code with \"proper\" capitalization (and the\
      \ error checking that goes into it), then it might take me only 45 minutes or\
      \ less to do the same code if I don't have to worry about spell checking. When\
      \ I was in school at Full Sail, they tried to enforce a certain code style,\
      \ and I can't tell you how much time I wasted chasing down errors that were\
      \ generated because the variable was called <tt>thisIsMyVariable</tt> and I\
      \ referenced <tt>thisisMyVariable</tt> in a different file. Yeah, fun.</p>\n\
      <p><b>[BWF]GrimReaper:</b> Well if you have capitalization problems and have\
      \ trouble tracking them down you should choose to do something else than coding\
      \ (not to piss you off or anything&#160;:)). There are so much benefits with\
      \ forcefully styling code at language level. Easier error checking. Other peoples\
      \ code is readable/understandable. I was hammered at skool to code in explicit\
      \ styling and even the difference between a tab instead of 4 spaces was frowned\
      \ upon. But hey i pulled through and now i see why it's a good thing. I write\
      \ code consting of a 100 classes with 10 other people and they all look similar\
      \ and are instantly understandable because of explicit styling. Can't say the\
      \ same when i pull open a C++ include file&#160;:/. According to you and my\
      \ courses in logics and programming language fundamentals you are leaning towards\
      \ obscure languages that make sentences like 'I kick you in the nuts an cry'\
      \ this has two totally differenct interpretations. The only right meaning is\
      \ the one the compiler happens to accept first. The more style in a language\
      \ the easier it is to learn, understand and work with. This is my opinion and\
      \ if you don't like it .....&#160;:p</p>\n<p><b>El Muerte TDS:</b> using tabs\
      \ instead of spaces is very important. I prefer to have 2 spaces wide tabs,\
      \ and if people use spaces instead of tabs code will often be screwed up.</p>\n\
      <p><b>[BWF]GrimReaper:</b> I do tabs due to RSI prevention, however official\
      \ JAVA specification stipulates 4 spaces so all viewers will give the same result.\
      \ IMO tabs go awry not spaces (combos are worse). IMO the editor of choice should\
      \ help you out on that.. What i forgot to mention in the above is that 80% of\
      \ coding is fixing problems and a fast first draft of styleless working code\
      \ often is a bad choice for the person trying to read your code. Or if you look\
      \ at your code after a year it seems auwful. Coderot is the word.</p>\n<p><b>Mychaeel:</b>\
      \ Tabs, by principle, break any visual structure code can have with the sole\
      \ exception of indentation. I prefer the benefit of being able to vertically\
      \ align common structures in subsequent lines over the potential advantage of\
      \ being able to reconfigure the indentation width after having written the code.\
      \ For stuff like that there are code beautifier tools which can do a far better\
      \ job.</p>\n<p>Note that these arguments are for an <i>ideal</i> environment\
      \ where tabs are used with consideration and only for indentation. In fact,\
      \ though, people happily intermix tab-indented and space-indented code lines\
      \ (because they \"look alike\" in their editor configuration), thus breaking\
      \ even the advantage of being able to configure one's preferred indentation\
      \ width (just look at Epic's UT2003 UnrealScript code; it's unreadable in parts\
      \ unless you configure a tab width of no more or less than 4 characters). That\
      \ is why I have set up my editor to insert blanks when I press the Tab key.</p>\n\
      <p><b>Foxpaw:</b> \"official JAVA specification stipulates 4 spaces\" - no offense,\
      \ but I don't see the relevance of this. At any rate, I use two spaces, even\
      \ when I'm forced to program in Java at University.</p>\n<p><b>Tarquin:</b>\
      \ Ynurg&#160;:( Can we keep this ForestFire debate on tabs v spaces to one place\
      \ please! Once you have a texteditor like <a href=\"/Legacy:TextPad\" title=\"\
      Legacy:TextPad\">TextPad</a> that inserts spaces for the TAB key, and removes\
      \ all of them for the DELETE key, why do you need tabs?</p>\n<hr />\n<p><b>Tarquin:</b>\
      \ Should we consider promoting this page to top-level so it can be split into\
      \ subpages itself?</p>\n<p><b>HSDanClark:</b> I guess... but wasn't this page\
      \ created before UT2003 was released, and envisioned as a way to get the devs\
      \ to see what the community would like? If that's the case, and given that there\
      \ will be no more patches for UT2003, is this page even still relevant?</p>\n\
      <p><b>Tarquin:</b> Rename to \"Engine suggestions\"?</p>\n<p><b>GRAF1K:</b>\
      \ Most of the stuff here isn't engine but Uscript suggestions, unless I'm wrong.\
      \ It's kind of a limiting title anyway.</p>\n<p><b>Foxpaw:</b> I vote in favor\
      \ of renaming this page. It was rather hard for me to find with it's given title.\
      \ I was only able to find it using the search because I remembered some of the\
      \ text on it.</p>\n<hr />\n<p>Link: <a rel=\"nofollow\" class=\"external free\"\
      \ href=\"http://www.planetunreal.com/feba/wishlist.htm\">http://www.planetunreal.com/feba/wishlist.htm</a></p>\n\
      <p><b>Mychaeel:</b> Some things that are in there are a bit strange. Others\
      \ will be in, in any case.</p>\n<ul>\n<li>\"Support for multiple attachment\
      \ points,\" \"manipulation function hooks for skeletal animations\" – Is in.</li>\n\
      <li>\"Support for PHYS_Driving\" – Care to elaborate?</li>\n<li>\"Support for\
      \ virtual classes\" – <i>All</i> UnrealScript classes are virtual, by principle.</li>\n\
      <li>\"Add the ability for map makers to add comments to a map (using a special\
      \ actor)\" – Is in.</li>\n<li>\"The ability to add new physics to the engine\
      \ within script\" – Depends what that's supposed to mean. You can, of course,\
      \ do <i>anything</i> in UnrealScript, including simulating new physics types.</li>\n\
      </ul>\n<p><b>Foxpaw:</b> Basically everything on the page at that link is availible\
      \ in UT2003.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.197 seconds\n\
      Real time usage: 0.496 seconds\nPreprocessor visited node count: 175/1000000\n\
      Preprocessor generated node count: 264/1000000\nPost‐expand include size: 18/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3359-0!*!0!!en!*!*\
      \ and timestamp 20221118161542 and revision id 8671\n -->\n"
  categories:
  - sortkey: "UT2003/Suggestions"
    name: "Legacy_Feedback"
  links:
  - ns: 100
    exists: true
    name: "Legacy:FlagBase"
  - ns: 100
    exists: true
    name: "Legacy:ControlPoint"
  - ns: 100
    exists: true
    name: "Legacy:Dispatcher"
  - ns: 100
    exists: true
    name: "Legacy:Useful UWindow Extensions/Scrolling Credits"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Suggestion List"
  - ns: 100
    exists: true
    name: "Legacy:Mychaeel"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Console"
  - ns: 100
    exists: true
    name: "Legacy:RoundRobin"
  - ns: 100
    exists: true
    name: "Legacy:Coding Guidelines"
  - ns: 100
    exists: true
    name: "Legacy:TextPad"
  templates: []
  images: []
  externallinks:
  - "http://www.planetunreal.com/feba/wishlist.htm"
  sections:
  - toclevel: 1
    level: "2"
    line: "UnrealScript"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 103
    anchor: "UnrealScript"
  - toclevel: 2
    level: "3"
    line: "Comment blocks"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 122
    anchor: "Comment_blocks"
  - toclevel: 2
    level: "3"
    line: "States in non-Actor classes"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 1518
    anchor: "States_in_non-Actor_classes"
  - toclevel: 2
    level: "3"
    line: "Typecast from byte to enum"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 2773
    anchor: "Typecast_from_byte_to_enum"
  - toclevel: 2
    level: "3"
    line: "InStr function"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 4102
    anchor: "InStr_function"
  - toclevel: 2
    level: "3"
    line: "Boolean operators could coerce their arguments to bool"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 5404
    anchor: "Boolean_operators_could_coerce_their_arguments_to_bool"
  - toclevel: 2
    level: "3"
    line: "Global constants"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 6092
    anchor: "Global_constants"
  - toclevel: 2
    level: "3"
    line: "Tags other than Tag and Event"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 6783
    anchor: "Tags_other_than_Tag_and_Event"
  - toclevel: 2
    level: "3"
    line: "In-Scope Declaration"
    number: "1.8"
    index: "9"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 7358
    anchor: "In-Scope_Declaration"
  - toclevel: 2
    level: "3"
    line: "Debugging Timer.. thing."
    number: "1.9"
    index: "10"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 8037
    anchor: "Debugging_Timer.._thing."
  - toclevel: 1
    level: "2"
    line: "UnrealScript Development Environment"
    number: "2"
    index: "11"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 8870
    anchor: "UnrealScript_Development_Environment"
  - toclevel: 2
    level: "3"
    line: "Incremental search"
    number: "2.1"
    index: "12"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 8913
    anchor: "Incremental_search"
  - toclevel: 2
    level: "3"
    line: "Tabs and blanks for indentation"
    number: "2.2"
    index: "13"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 9653
    anchor: "Tabs_and_blanks_for_indentation"
  - toclevel: 2
    level: "3"
    line: "Block indention/unindention"
    number: "2.3"
    index: "14"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 10418
    anchor: "Block_indention.2Funindention"
  - toclevel: 1
    level: "2"
    line: "Classes"
    number: "3"
    index: "15"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 10911
    anchor: "Classes"
  - toclevel: 2
    level: "3"
    line: "ControlPoint, FlagBase deletable"
    number: "3.1"
    index: "16"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 10925
    anchor: "ControlPoint.2C_FlagBase_deletable"
  - toclevel: 2
    level: "3"
    line: "Associating custom data with players"
    number: "3.2"
    index: "17"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 11223
    anchor: "Associating_custom_data_with_players"
  - toclevel: 2
    level: "3"
    line: "Per-mod keybindings"
    number: "3.3"
    index: "18"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 13028
    anchor: "Per-mod_keybindings"
  - toclevel: 2
    level: "3"
    line: "GetItemName function"
    number: "3.4"
    index: "19"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 14099
    anchor: "GetItemName_function"
  - toclevel: 1
    level: "2"
    line: "Miscellaneous"
    number: "4"
    index: "20"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 14216
    anchor: "Miscellaneous"
  - toclevel: 2
    level: "3"
    line: "UWindows vs. simple menu system"
    number: "4.1"
    index: "21"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 14236
    anchor: "UWindows_vs._simple_menu_system"
  - toclevel: 2
    level: "3"
    line: "Menu accessible in-game"
    number: "4.2"
    index: "22"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 15203
    anchor: "Menu_accessible_in-game"
  - toclevel: 2
    level: "3"
    line: "Custom model/voicepack support client-side only"
    number: "4.3"
    index: "23"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 15321
    anchor: "Custom_model.2Fvoicepack_support_client-side_only"
  - toclevel: 2
    level: "3"
    line: "Enhanced demo driver"
    number: "4.4"
    index: "24"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 18501
    anchor: "Enhanced_demo_driver"
  - toclevel: 2
    level: "3"
    line: "Demo browser"
    number: "4.5"
    index: "25"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 19719
    anchor: "Demo_browser"
  - toclevel: 2
    level: "3"
    line: "Package handling in multiplayer"
    number: "4.6"
    index: "26"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 20001
    anchor: "Package_handling_in_multiplayer"
  - toclevel: 2
    level: "3"
    line: "dup() like functionality for objects"
    number: "4.7"
    index: "27"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 22076
    anchor: "dup.28.29_like_functionality_for_objects"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "28"
    fromtitle: "Legacy:UT2003/Suggestions"
    byteoffset: 22486
    anchor: "Discussion"
  displaytitle: "Legacy:UT2003/Suggestions"
  iwlinks: []
  wikitext:
    text: "Engine suggestions for UT2003. See also [[Legacy:UnrealEd Suggestion List|UnrealEd\
      \ suggestion list]].\n\n==UnrealScript ==\n\n===Comment blocks ===\n\n'''EntropicLqd:'''\
      \  Make multi-line comment blocks at the top of class files behave correctly.\
      \  The code snippet below will not compile because it thinks the class name\
      \ is ''was''.  Look for the class keyword on line two.\n\n'''ZxAnPhOrIaN:'''\
      \ The only, I mean ONLY, way to include \"class\" in comments is to put it into\
      \ a single line comment.\n\n<uscript>\n/*\n   This trigger allows mappers to\
      \ change some of the zone properties using a trigger.\n   The specific case\
      \ this class was written for was to enable a switchable \"escalator\"\n   zone\
      \ to be created, where the escalator could move in two directions at once.\n\
      \n   Version By  Description\n   ------- --- -------------------------------------------------------------------------\n\
      \   1.00    DML Created for Pitboy from the UT Editing fourm.\n*/\n//   The\
      \ class keyword will work in in single-line comments:\n//\n//\n//   This trigger\
      \ allows mappers to change some of the zone properties using a trigger.\n//\
      \   The specific case this class was written for was to enable a switchable\
      \ \"escalator\"\n//   zone to be created, where the escalator could move in\
      \ two directions at once.\n//\n//   Version By  Description\n//   ------- ---\
      \ -------------------------------------------------------------------------\n\
      //   1.00    DML Created for Pitboy from the UT Editing fourm.\n\n\n\n\nclass\
      \ TriggeredZonePropertyChanger extends Actor;\n...\n</uscript>\n\n===States\
      \ in non-Actor classes ===\n\n'''Mychaeel:'''  Do states still only work in\
      \ classes derived from Actor?  It'd occasionally be very handy to be able to\
      \ use states in other classes as well &ndash; I remember coding [[Legacy:Useful\
      \ UWindow Extensions/Scrolling Credits|some UWindow widget]] with a couple of\
      \ states and being a bit disappointed when (after compiling alright) it just\
      \ didn't work because the object wouldn't change states.\n\n: '''Mongo:''' This\
      \ is possible to do with native code. Just call InitExecution() on your new\
      \ object. Unfortunately, you don't get latent code with this, because you need\
      \ to be ticked in order to have state code, and objects aren't ticked.\n\n:\
      \ '''Mychaeel:'''  States are what I'm striving for here, not latent code; and\
      \ native code is certainly a poor choice for a mod developer, especially when\
      \ it's used just for the developer's convenience instead of the user's.\n\n\
      : '''Dma:'''  Look at Console.uc.  It uses states.  It is not a subclass of\
      \ Actor.  Go forth and code.\n\n: '''Mychaeel:'''  As UsAaR33 points out in\
      \ the \"Comments\" section below, [[Legacy:Console|Console]] is the ''only''\
      \ other class besides [[Legacy:Actor|Actor]] subclasses that supports states.\
      \  I'd like to have it in ''all'' classes though.\n\n===Typecast from byte to\
      \ enum ===\n\n'''Mychaeel:'''  Being able to typecast from byte to enum would\
      \ be great &ndash; or just being able to assign byte values to enum variables.\
      \  Especially with UnrealScript's arcane enum scoping rules that'd be very useful\
      \ at times.\n\n: '''Mongo:''' It'd be useful, yes. But it'd also make code more\
      \ hairy to deal with. You can copy and paste your enum between classes if you\
      \ like. At least that should help code clarity.\n\n: '''Mychaeel:'''  Copying\
      \ and pasting enums (apart from being a slightly ugly thing to do in its own\
      \ right) doesn't make them compatible though.  I can't copy Canvas.Style to\
      \ Actor.Style, for instance, even though both are used with the ERenderType\
      \ enum throughout the code (but Canvas.Style is a byte variable).\n\n: '''Xian:'''\
      \ It is already possible. Just look at the Canvas thing in UT99: Canvas.Style\
      \ = ERenderType.STY_Normal. You can do the same with every enum and the syntax\
      \ is: <byte_var> = <enum_name>.<enum_element>; As for the reverse thing:\n\n\
      <uscript>var enum ETest\n{\n   Test1,\n   Test2\n} Testing;\n\nfunction Blah\
      \ ()\n{\n    Testing = 1;  // Testing = Test2\n}</uscript> \n\nSimple and clean\
      \ :)\n\n'''Foxpaw:''' You can do this now with dependsOn, though dependsOn is\
      \ sometimes a bit flaky. Optionally I think you might be able to do this with\
      \ setpropertytext as well.\n\n===InStr function ===\n\n'''Mychaeel:'''  Just\
      \ a minor improvement:  The '''InStr function''' could use an optional third\
      \ \"offset\" parameter specifying where in the string the substring search starts.\
      \  There's always the following UnrealScript idiom to achieve the same, but\
      \ it would be so much more efficient natively...\n\n<uscript>\nfunction int\
      \ InStrFrom(coerce string StrText, coerce string StrPart, optional int OffsetStart)\
      \ {\n\n  local int OffsetPart;\n\n  OffsetPart = InStr(Mid(StrText, OffsetStart),\
      \ StrPart);\n  if (OffsetPart >= 0)\n    OffsetPart += OffsetStart;\n  return\
      \ OffsetPart;\n}\n</uscript>\n\n'''UsAaR33:'''  And why not add a 4th optional\
      \ boolean parameter for Case Insensitivity?\n\n: '''Mongo:''' Well, you just\
      \ defined the function. I guess there's no point to implementing it natively.\
      \ And speed is not a valid argument, considering the number of things that are\
      \ done in unrealscript. :)\n\n: '''Mychaeel:'''  If that was the case, there\
      \ wouldn't be an InStr function in the first place &ndash; InStr could be just\
      \ as well done by iterating over the string in a <code>for</code> loop.  I've\
      \ been using InStr for parsing HTML (nothing you'd ''usually'' do in UnrealScript,\
      \ without doubt, but even Epic did that themselves) and any bit of generic acceleration\
      \ would have been a big plus there.\n\n===Boolean operators could coerce their\
      \ arguments to bool ===\n\nBoolean operators could coerce their arguments to\
      \ bool (and the same for <code>if</code>, <code>while</code>, <code>until</code>).\
      \  That'd make many expressions more concise and thus more readable.  (Of course\
      \ it also has the potential to make code ''less'' readable and more obfuscated,\
      \ but which powerful syntax construct doesn't?  At the end of the day the quality\
      \ of code is up to the coder anyway.) &rarr;[[Legacy:Mychaeel|Mychaeel]]\n\n\
      <uscript>\nif (ThisPawn && ThisPawn.Weapon)\n  ThisPawn.Weapon.Fire(0.0);\n\
      </uscript>\n\n'''Foxpaw:''' I agree, although I wouldn't use this personally,\
      \ it seems like the way it should be.\n\n===Global constants ===\n\n'''EntropicLqd:'''\
      \  Support for global constants than can be used across classes, within object\
      \ default properties, and within array declarations.\n\n: '''Mychaeel:'''  Well...\
      \ how, across classes?  Where would a constant whose scope goes beyond this\
      \ class and its subclasses be defined?\n\n: '''EntropicLqd:'''  How about if\
      \ you simply defined a constant outside of a class definition (before the initial\
      \ ''class'' declaration) it had global scope?  I realise it could lead to somewhat\
      \ untidy code if people littered their constants across their class files, but\
      \ that's their problem.  I guess I could always dig out a pre-processor and\
      \ ''tweak'' the code a little :)\n\n===Tags other than Tag and Event ===\n\n\
      Actors such as the [[Legacy:Dispatcher|Dispatcher]] and [[Legacy:RoundRobin|RoundRobin]]\
      \ don't show ties as read lines in UEd &ndash; presumably UEd is hard-coded\
      \ to draw the lines when \"Event\" and \"Tag\" properties match.\n\nIt would\
      \ be handy to have syntax like this:\n: var() pseudoevent name AnotherEventProperty;\n\
      \nThis would notify UEd that the property should be inspected & red lines drawn\
      \ if a match found. (note that the actual keyword \"pseudoevent\" is lousy.\
      \ Something better would be needed. Mych is always good with naming ;) )\n\n\
      ===In-Scope Declaration ===\n\n'''[BWF]GrimReaper''' Wouldn't it be nice to\
      \ be able to do things like the following. 'See int declaration' Don't know\
      \ if it is implementable into ucc.\n\n<uscript>\nfor (int i=0; i<10; i++)\n\
      \    Log(i@\"Blah\");\n</uscript>\n\n'''Foxpaw:''' I don't like that format.\
      \ It's kind of neat, but it makes the language less flexible. With that kind\
      \ of format you can't do the following:\n\n<uscript>\n  var MovementType MovementType;\n\
      \  // or...\n  local string String;\n</uscript>\n\nWhich may seem like poor\
      \ style to some, but I'd like to see some solid experimental evidence to back\
      \ up the suggestion that my so called \"bad\" style is worse than so called\
      \ \"good\" style.\n\n===Debugging Timer.. thing.===\n\n'''Foxpaw:''' I think\
      \ it would be very useful if there was a somewhat detailed breakdown of where\
      \ the Engine was spending its time. This would help optimizing of code greatly\
      \ I think. I would think it could be invoked via command line or maybe a special\
      \ option during package compilation, and could display statistics like:\n\n\
      * Percent of Time spent in Unrealscript loops\n* Percent of Time spent in iterator\
      \ loops\n* Percent of Time spent tracing\n* etc.. for all the heavyweight functions\n\
      * Perhaps the ability to log a list of all functions that got called in order\
      \ of how frequently they are called.\n\nYou could of course test many things\
      \ like this by using the existing script timers, but it would take a very long\
      \ time for me to go through ALL my classes and add timers before each trace\
      \ I do, etc.\n\n==UnrealScript Development Environment ==\n\n===Incremental\
      \ search ===\n\n'''Mychaeel:'''  Incremental search, one of my favorite navigational\
      \ features in any text editor:  Pressing a certain keyboard shortcut (<code>Ctrl+E</code>)\
      \ puts the input focus to an edit field in either the status bar or a toolbar.\
      \  The search within the active window is performed as the user enters and modifies\
      \ the search string, starting from the current cursor position.  (Pressing <code>Home</code>\
      \ resets the search start point to the beginning of the text, pressing <code>F3</code>\
      \ searches for the next occurrence.)\n\nIt's the most efficient way of searching\
      \ a text document, from the user's point of view, because he/she never has to\
      \ enter more text than necessary to find what he/she's looking for.\n\n===Tabs\
      \ and blanks for indentation ===\n\n'''Mychaeel:'''  As an option, use the <code>Tab</code>\
      \ key to enter spaces up to the next tabstop. Many coders prefer indenting their\
      \ code with blanks instead of tabs, but still find it convenient to use the\
      \ <code>Tab</code> key to enter as many blanks as necessary to jump to the next\
      \ tab position.  (For that matter, the tab width should be configurable.)\n\n\
      (I'm implying the presence of auto-indent here, by the way...)\n\n'''[BWF]GrimReaper'''\
      \  Most programming language styles prefer blanks due to the fact that any editor/viewer\
      \ will give the same indentation result. Tabs however is easier and less strainful\
      \ than 4 spaces or something. The editor or IDE should directly convert a tab\
      \ to 4 spaces if it where up to me.\n\n===Block indention/unindention ===\n\n\
      '''Mychaeel:'''  Block indention/unindention, using the configured tab width\
      \ (and tab-vs-blank setting).  Suggestion for a shortcut:  <code>Tab</code>\
      \ and <code>Shift+Tab</code> when text is selected.\n\n: '''Hugh:''' Personally,\
      \ I like the way Textpad handles this. For a start, you can specify how many\
      \ spaces you want each tab to take up (x). You can also tell it to a) always\
      \ put x spaces in when you hit the tab key, or b) convert all tabs to x spaces.\n\
      \n==Classes ==\n\n===ControlPoint, FlagBase deletable ===\n\n'''EntropicLqd:'''\
      \  It would be great if the [[Legacy:ControlPoint|ControlPoint]] and [[Legacy:FlagBase|FlagBase]]\
      \ actors were deletable by game type and mutator mods.  It was one of the more\
      \ painful things to have to code around when writing my CTF+ mod.\n\n===Associating\
      \ custom data with players ===\n\n'''Mychaeel:'''  A very common problems mods\
      \ and mutators used to have was '''associating custom data with players.'''\
      \  Game type mods might indeed create their own PlayerReplicationInfo subclass\
      \ and use it, but that's something mutators definitely shouldn't do unless their\
      \ author intends to scratch any compatibility the mutator might have to custom\
      \ game types and other mutators.  Usual idioms to work around that problem were\n\
      \n* Using PlayerID as an index into an array (breaks if more than 32 players/bots\
      \ enter and leave a game in total).\n\n* Using a ReplicationInfo subclass owned\
      \ by the player's PlayerReplicationInfo and retrieved with a ChildActors call\
      \ (inefficient if it has to be done frequently).\n\nA <code>ReplicationInfo\
      \ NextCustomInfo</code> reference in ReplicationInfo would make associating\
      \ and efficiently retrieving ReplicationInfo actors with a given player very\
      \ easy and convenient.  For good measure, the following method (in ReplicationInfo)\
      \ would make it even easier.\n\n<uscript>\n// in ReplicationInfo\n\nvar ReplicationInfo\
      \ NextCustomInfo;\n\n\nfunction ReplicationInfo GetCustomInfo(class<ReplicationInfo>\
      \ CustomInfoClass, optional bool bNew) {\n\n  local ReplicationInfo ThisCustomInfo;\n\
      \  \n  for (ThisCustomInfo = NextCustomInfo; ThisCustomInfo != None; ThisCustomInfo\
      \ = ThisCustomInfo.NextCustomInfo)\n    if (ThisCustomInfo.Class == CustomInfoClass)\n\
      \      return ThisCustomInfo;\n  \n  if (bNew) {\n    ThisCustomInfo = Spawn(CustomInfoClass,\
      \ Owner);\n    ThisCustomInfo.NextCustomInfo = NextCustomInfo;\n    NextCustomInfo\
      \ = ThisCustomInfo;\n  }\n\n  return ThisCustomInfo;\n}\n</uscript>\n\nThinking\
      \ about it, it might be a good idea to make that a doubly-linked list and automatically\
      \ remove a ReplicationInfo object from it when it is destroyed.\n\n===Per-mod\
      \ keybindings ===\n\n'''UsAaR33:'''  This may be asking a lot, but to help mod\
      \ support, additional keybind classes would be great.  These could be made into\
      \ some sort of linked list and a mod would have a subclass of it to support\
      \ the system.  When a key is pressed the Input would look through the classes\
      \ until it finds a binding for a key or reaches the end of the list.  Thus,\
      \ different mod's keybinds would not conflict with each other (unless they are\
      \ run simultaneously.  For instance, many UT mods have a reload binding.  Wouldn't\
      \ it be great if reload could just be bound to the same key for all the mods\
      \ without going into complex manual keybindings?\n\n'''Foxpaw:''' The problem\
      \ with this is the same as the problem with it now: how do you decide if two\
      \ things are the same? Mod A may have an exec function for reloading, and Mod\
      \ B may use an input variable. How would the Unreal Engine discern that they\
      \ were both intended for reloading? You could add a tag to each keybind to say\
      \ what it was supposed to do, but there still there's no standardization.\n\n\
      ===GetItemName function ===\n\n'''UsAaR33:'''  Actor.GetItemName() should 1)\
      \ Be in the Object class and 2) Be static.\n\n==Miscellaneous ==\n\n===UWindows\
      \ vs. simple menu system ===\n\n'''UsAaR33:''' Oh and please dump the existing\
      \ menu system.  UWindows are superior to any form of \"single-menu-window-showing-at-a-time\"\
      \ menu system.\n\n: '''Mychaeel:'''  That's within Digital Extremes' responsibility,\
      \ not Epic's.  I understand Epic themselves mourn the removal of the UWindow\
      \ system just as we do.\n\n: '''UsAaR33:''' Well, in that case I'll just add\
      \ that to the Oldskool 2k3 (or whatever TNSe's mod will be called) fix list.\
      \  In that case, maybe I can just request continued support for uwindows? (so\
      \ that mod authors can still use them and even *cough* redo the entire menu\
      \ system.\n\n'''Foxpaw:''' It's entirely possible with custom script to replace\
      \ the GUI system. Having said that, UT2004 promises a new GUI so this is more\
      \ or less already resolved.\n\n'''MythOpus:''' I wonder where that 'new' menu\
      \ system is.  I feel that all the new games have turned to U2/UT2004's style\
      \ of menus.  I miss UT + UWindows..\n\n===Menu accessible in-game ===\n\n'''UsAaR33:'''\
      \  Be sure the mod menu is accessable in-game, in addition to globally.\n\n\
      ===Custom model/voicepack support client-side only ===\n\n'''UsAaR33:''' Having\
      \ models, skins, and possibly voicepacks being treated in a similar manner as\
      \ Quake, Half-Life (I believe), and Valhalla Avatar (UT mod).  In which the\
      \ client loads such media itself, as opposed to UT's system of the server loading\
      \ it and then sending the export index to clients.  This allows for usage of\
      \ models/skins/vp's even if the server doesn't have them installed.  Clients\
      \ with the given model/skin/vp installed will use them; if not, the default.\
      \  With the Controller/Animation handling split, I wouldn't imagine this being\
      \ too hard to code at the last minute.  Perhaps support for peer-to-peer transfering?\
      \ (Altough peer-to-peer transfering can create cheating issues with cheat skins\
      \ and the like...)\n\n: '''Mongo:'''  That sucks. UT2003 will give more functionality\
      \ to the model creator for support with footstep sounds, blended animations,\
      \ particle effects, etc. As such, given that you're executing custom code, it's\
      \ not feasible to implement this without opening up a can of worms (see: cheating.)\n\
      \n: '''UsAaR33:'''  Any default property can be read.  It is only non-static\
      \ functions (or static functions with actor pointers) that can cause security\
      \ concerns.  It is a known fact that most model authors do not want to touch\
      \ code.  I think the only custom UT models that ever had custom scripts were\
      \ the U4E ones and Spawn. (or ones Psychic_313 or myself did coding for).  And\
      \ I am willing to bet that the majority of model creators would be willing to\
      \ sacrifice uscript functionality in exchange for a broader audience (that is\
      \ online).  Why do you think the Quake model scene is so much larger than UT's?\
      \  IMO, it is the lack of such a system that hurts UT.  (What is the point of\
      \ making a model that you can only use on bots and can't show off to a bunch\
      \ of random people on the Internet?)\n\n: '''Birelli:''' Maybe I'm missing something\
      \ about adding support this kind of thing ala Valhalla Avatar. As far as I can\
      \ see, there is no security loophole opened by allowing people to use content\
      \ that some people don't have. The one thing that comes to mind here in terms\
      \ of cheating is invisible skins/skins with flags/skins of the wrong team color,\
      \ etc. With the system in Valhalla Avatar, and presumably what would be added\
      \ here, the only people that would be affected by this cheating content would\
      \ be people who ''had this content themselves''. Ironic that only cheaters can\
      \ be cheated upon with this system isn't it? ;-)\n\n: '''Hugh:''' I seem to\
      \ remember that the problem with Quake in this aspect was that people could\
      \ get it to give the other players on their client a different skin. So somehow\
      \ get their client to tell the server that yes, they did have this custom model/skin,\
      \ and yes, it would display it, but when it wasn't actually the one that that\
      \ player had chosen to use...\n\n: '''UsAaR33:''' Well, Hugh, peer-to-peer transfering\
      \ doesn't have to be implemented.  Just the basic clients-load media system\
      \ is what is important.... And I suppose \"override\" models (i.e. a default\
      \ one) would be a sweet addition (I was going to add that to VA.. never got\
      \ around to it though :/)\n\n===Enhanced demo driver ===\n\n'''UsAaR33:''' A\
      \ Demo Driver that supports pausing and speed controlling.  Preferibly time\
      \ jumping as well, although the existing Demo code (i.e. really just network\
      \ packets) makes that quite difficult.\n\n: '''Hugh:''' I don't know what the\
      \ demo format itself is like at the moment, but some kind of demo format that\
      \ is easily editable - so someone can make a tool for re-camming matches, etc.\
      \ (Like KeyGrip 2 for Quake 2)\n\n: '''UsAaR33:''' Hugh, as I said, it is pure\
      \ UT network packets.  Demos are generated by analyzing the replication statements,\
      \ but instead of sending the packets over a network, they are written to disk.\
      \ Hence, editing/recamming is extremely difficult.  (in other words, the demo\
      \ system can best be described as a \"hack\".\n\n: '''Hugh:''' What '''would'''\
      \ be nice would be an additional system which would record things block by block\
      \ - like the way Quake and Quake 2 do it. They would take a snapshot every 1/10\
      \ seconds - then the game would interpolate between them when playing it back.\
      \ There were little problems with this, but if anyone was going to try to implement\
      \ it, then I'd be happy to run through it with them and iron out all the problems\
      \ that Q2 had...\n\n===Demo browser ===\n\n'''UsAaR33:''' Some form of a Demo\
      \ Browser? Not unlike Demo Manager 2.0 for UT.  It seems foolish to take so\
      \ much time to have programmed support for demos and then only have them accessable\
      \ via console commands, leaving most users unaware of their existance.\n\n===Package\
      \ handling in multiplayer ===\n\n'''UsAaR33:'''  The current UT package loading\
      \ methods in multiplayer are flawed.\n* I believe it acts like:\n*# Search for\
      \ a required package by order of Paths list.\n*# If not found, search in cache\
      \ for GUID.uxx\n*# If still not found, request download.\n*# If a file was loaded\
      \ from the paths list, but does not match GUID, version mistmatch error.\n\n\
      * I'd like this order:\n*# Search for a required package in the cached directory\
      \ (GUID.uxx)\n*# If not found, search the paths list.  If the filename is found,\
      \ verify that its GUID is correct before loading the entire thing.\n*# If still\
      \ not found, request download.\n\nThis will prevent the version mismatch errors\
      \ once and for all, making updates much easier on the end-user.\n\n: '''Mychaeel:'''\
      \  I heard they've been thinking about something like that.  It has been mentioned\
      \ in the discussion, anyway.  (Related:  The ability to conform packages has\
      \ been removed without substitution.)\n\n: '''UsAaR33:'''  Um.. why did they\
      \ strip conforming? It is very useful.. especially patching on their end. (I've\
      \ used it for my own mods as well.)\n\n:'''Mychaeel:'''  For security reasons,\
      \ or so I recall Dr.Sin saying.  (Or maybe I'm not remembering it correctly.\
      \  He did say something about that, anyway.)\n\n:'''UsAaR33:'''  Heh.. I'm on\
      \ the CSHP/UTPure team. I do recall him mentioning that he didn't like package\
      \ conforming and would like it stripped (though I disagreed).  Well, that makes\
      \ life harder on mod authors and UT users.  I hope they at least have more friendly\
      \ \"different version\" handling, which would make up for the conforming loss.\n\
      \n:'''[BWF]GrimReaper:'''  I asked Dr.Sin to remove it since it's THE holy grail\
      \ for UT hacking. Until today it still remains a part of UT. His reply was that\
      \ people would build one if it was removed. Personally i'd bottle out at that\
      \ point. Question? Who needs conforming except for Epic patches that need to\
      \ be inter-version comapatible? Answer: Nobody, and if you would, you could\
      \ go and ask Epic to do it for you 5mins job in the name of security.\n\n===dup()\
      \ like functionality for objects===\n\n'''Foxpaw:''' It's come to my attention\
      \ that the ability to make a bitwise copy of an object would be very useful\
      \ in UnrealScript. Sometimes I have an object that I need to make a copy of,\
      \ and it's rather tedious and error-prone to have to write a special function\
      \ to copy all of the variables, plus it wouldn't perform as well as a native\
      \ object copying function.\n\n==Discussion==\n\n'''Tarquin:'''  Are these suggestions\
      \ that were made at the conference, or a list that people can add to now? In\
      \ either case, will Epic be reading this page?\n\n'''Mychaeel:'''  Suggestions\
      \ I ''should'' have made at the conference, but forgot to.  I guess Epic won't\
      \ read this page unless I point them to it, but I plan to...  :)\n\n'''Hugh:'''\
      \ I've just pointed this page out to the devs &ndash; At this stage, they wouldn't\
      \ be able to make any changes to the engine for UT2003, as it's so close to\
      \ release (we hope!), but anything that they feel is a good idea may make it\
      \ into future incarnations of the engine (which is evolving all the time) for\
      \ other games (U2, etc). That said, there are some things on here that are so\
      \ small, while they may be useful, they'd probably cause more havoc by breaking\
      \ people's maps.\n\n'''Mychaeel:'''  Thanks, Hugh.  I still hope that some of\
      \ the things suggested on this page will make it into the first UT2003 release,\
      \ for instance the UDE items and things with good backwards compatibility like\
      \ that InStr suggestion and the defaultproperties one...\n\n'''Tarquin:''' \
      \ ... and the Lift thing is just a class script tweak :) \n\n'''Hugh:''' How\
      \ did you know that was the one I was thinking of? That was actually the only\
      \ one I've read..\n\n'''Tarquin:'''  property groups are just a cosmetic feature\
      \ for mappers. Variables are just stored by name (\"LiftTag=arf\"), so my hunch\
      \ is the engine wouldn't care or even know it was opening older maps.\n\n'''Mychaeel:'''\
      \  Tarquin, only properties declared in the selected actors' common superclasses\
      \ are displayed in the property sheet.  LiftTag is defined once in both LiftCenter\
      \ and LiftExit, so your suggestion would require LiftTag either to be moved\
      \ into NavigationPoint or LiftCenter and LiftExit to be derived from the same\
      \ intermediate class (holding LiftTag).\n\n'''Tarquin:'''  I don't think so.\
      \ Subclasses of ScriptedPawn add extra properties to the ScriptedPawn group,\
      \ so I think it would be possible for both Lift navpoints to have var(LiftTag)\
      \ LiftTag\n\n'''Mychaeel:'''  It's possible for both subclasses to do that,\
      \ but the property won't show up when both actors are selected anyway.  (I tested\
      \ it before I wrote it.  :)  And it makes sense &ndash; only imagine what would\
      \ happen if both subclass properties of the same name in the same group had\
      \ different types.)\n\n'''Tarquin:''' i was just testing it too... doesn't work\
      \ :( urg. another one bites the dust\n\n'''UsAaR33:''' Just for the record,\
      \ state support also exists in console and its subclasses.  But no other objects.\
      \ (well, in UT build 436 that is).  Oh and personally I would not the C style\
      \ auto 0=false, none=false, etc. casting ability.  It really just makes code\
      \ harder to read.  Well, as long as Epic continues using != none and == 0 in\
      \ their code, I can't complain if support is added.\n\n'''Mychaeel:'''  The\
      \ casting ability is in already, it's just not automatically done in <code>if</code>\
      \ and the likes...  As I said, whether it makes code harder to read or not is\
      \ largely the responsibility of the coder.  I personally believe it'd have the\
      \ potential to make some code much ''more'' readable (<code>!bleh</code> instead\
      \ of <code>bleh != None</code> &ndash; the latter requires you to focus on the\
      \ middle of the expression).\n\n'''Dma:'''  I personally think that \"if (Enemy\
      \ != None)\" is MUCH more readable than \"if (!Enemy)\" or something.  Lets\
      \ the reader know that Enemy is an '''Object''' and not a '''bool'''.  (Well,\
      \ duh...)\n\n'''UsAaR33:'''  Dma, my point exactly. When I first started working\
      \ with the Unreal C++ API, I spat out some nice vulgarities.  It was rediculous\
      \ having to look constantly at superclasses to know what type a given variable\
      \ was.\n\n'''Mychaeel:'''  As I said, clarity of code is the coder's responsibility.\
      \  You can hardly enforce good coding style on a language level.  I personally\
      \ prefer a '''consistent set of variable naming conventions''' a lot over needless\
      \ code.  I don't want to have to rely on a variable's context to be able to\
      \ figure out what it means, is and contains &ndash; exactly your point, UsAaR33.\n\
      \n'''EntropicLqd:'''  I use (my own form of) hungarian notation to distinguish\
      \ between data types.  It works well, and allows the flexibility of handling\
      \ object references as bools without the possibility of confusion.\n\n'''UsAaR33:'''\
      \ Mychaeel, I agree 100%.  But if I was Epic, I wouldn't start renaming every\
      \ variable in the last minutes of development.  They do have nice nice conventions\
      \ b* is a boolean and the enum thing.. but after that, basically nothing. (and\
      \ the fact that input bytes start with b* is really confusing to newcomers..).\
      \  Maybe a page could be started on wiki covering conventions (But with my \"\
      wonderful\" programming style, I don't think I should be the one to start it\
      \ :p).\n\n'''Tarquin:'''  There's [[Legacy:Coding Guidelines|Coding Guidelines]].\
      \ (also known as CodeIndentationPissingMatch... ;) )\n\n'''[BWF]GrimReaper:'''\
      \  Case sensitive variables would force the code to be much more stylish. I'm\
      \ a JAVA person and a style whore :].\n\n'''Foxpaw:''' Well, making the lanes\
      \ on the roads smaller would force people to drive straighter, but doesn't the\
      \ increased restriction outweigh the benefit? (which, at least in my case, is\
      \ approximately 0) Down with case sensitive languages!\n\n'''RDGDanClark:'''\
      \ I'm of a mixed mind when it comes to case-sensitivity, on the one hand, I\
      \ like the way it keeps everything looking good and (possibly) more organized,\
      \ on the other hand, I'm a lazy bastard sometimes and don't always feel like\
      \ checking my seplling  ;)  \n\n'''Foxpaw:''' Well, if people want their code\
      \ to be organized like that then they'll use the same case all the time anyway.\
      \ If they don't want to do that, why force them? It doesn't benefit anybody,\
      \ (unless you look at someone elses source, and then you can plame them for\
      \ writing messy code) and it would limit people who wanted to use different\
      \ cases for some things.\n\n'''[BWF]GrimReaper:''' How can your code be organized\
      \ when the very source you work with doesn't use 1 style. IMO your lazy when\
      \ you prefer case-insensitivity. Riding your bike is hard but once you get used\
      \ to it, it has benefits.\n\n'''Foxpaw:''' Well, my source DOES use 1 style\
      \ - but it's not the same style Epic uses, and I don't much care from their\
      \ choice in capitalization. If the language was made case sensitive you would\
      \ have no choice but to conform to Epic's standards. Like I said, if you think\
      \ using the same case consistently is important, that's all fine and good and\
      \ you are welcome to do that, but why should it be enforced at a language level?\
      \ If a person writes messy code the only person they're hurting is themselves\
      \ - why make more work for them when they occasionally use a different capitalization?\n\
      \nThe only advantage I can see in case sensitivity is being able to have numerous\
      \ variables with the same name but different capitalizations - and even the\
      \ value of that is highly questionable.\n\n'''RDGDanClark:''' I question the\
      \ whole puritan work ethic that says that being lazy is always a bad thing.\
      \ In this case, it seems to me that if it takes me 1 hour to write some code\
      \ with \"proper\" capitalization (and the error checking that goes into it),\
      \ then it might take me only 45 minutes or less to do the same code if I don't\
      \ have to worry about spell checking. When I was in school at Full Sail, they\
      \ tried to enforce a certain code style, and I can't tell you how much time\
      \ I wasted chasing down errors that were generated because the variable was\
      \ called <tt>thisIsMyVariable</tt> and I referenced <tt>thisisMyVariable</tt>\
      \ in a different file. Yeah, fun. \n\n'''[BWF]GrimReaper:''' Well if you have\
      \ capitalization problems and have trouble tracking them down you should choose\
      \ to do something else than coding (not to piss you off or anything :)). There\
      \ are so much benefits with forcefully styling  code at language level. Easier\
      \ error checking. Other peoples code is readable/understandable. I was hammered\
      \ at skool to code in explicit styling and even the difference between a tab\
      \ instead of 4 spaces was frowned upon. But hey i pulled through and now i see\
      \ why it's a good thing. I write code consting of a 100 classes with 10 other\
      \ people and they all look similar and are instantly understandable because\
      \ of explicit styling. Can't say the same when i pull open a C++ include file\
      \ :/. According to you and my courses in logics and programming language fundamentals\
      \ you are leaning towards obscure languages that make sentences like 'I kick\
      \ you in the nuts an cry' this has two totally differenct interpretations. The\
      \ only right meaning is the one the compiler happens to accept first. The more\
      \ style in a language the easier it is to learn, understand and work with. This\
      \ is my opinion and if you don't like it ..... :p\n\n'''El Muerte TDS:''' using\
      \ tabs instead of spaces is very important. I prefer to have 2 spaces wide tabs,\
      \ and if people use spaces instead of tabs code will often be screwed up.\n\n\
      '''[BWF]GrimReaper:''' I do tabs due to RSI prevention, however official JAVA\
      \ specification stipulates 4 spaces so all viewers will give the same result.\
      \ IMO tabs go awry not spaces (combos are worse). IMO the editor of choice should\
      \ help you out on that.. What i forgot to mention in the above is that 80% of\
      \ coding is fixing problems and a fast first draft of styleless working code\
      \ often is a bad choice for the person trying to read your code. Or if you look\
      \ at your code after a year it seems auwful. Coderot is the word.\n\n'''Mychaeel:'''\
      \ Tabs, by principle, break any visual structure code can have with the sole\
      \ exception of indentation.  I prefer the benefit of being able to vertically\
      \ align common structures in subsequent lines over the potential advantage of\
      \ being able to reconfigure the indentation width after having written the code.\
      \  For stuff like that there are code beautifier tools which can do a far better\
      \ job.\n\nNote that these arguments are for an ''ideal'' environment where tabs\
      \ are used with consideration and only for indentation.  In fact, though, people\
      \ happily intermix tab-indented and space-indented code lines (because they\
      \ \"look alike\" in their editor configuration), thus breaking even the advantage\
      \ of being able to configure one's preferred indentation width (just look at\
      \ Epic's UT2003 UnrealScript code; it's unreadable in parts unless you configure\
      \ a tab width of no more or less than 4 characters).  That is why I have set\
      \ up my editor to insert blanks when I press the Tab key.\n\n'''Foxpaw:''' \"\
      official JAVA specification stipulates 4 spaces\" - no offense, but I don't\
      \ see the relevance of this. At any rate, I use two spaces, even when I'm forced\
      \ to program in Java at University. \n\n'''Tarquin:''' Ynurg :( Can we keep\
      \ this ForestFire debate on tabs v spaces to one place please! Once you have\
      \ a texteditor like [[Legacy:TextPad|TextPad]] that inserts spaces for the TAB\
      \ key, and removes all of them for the DELETE key, why do you need tabs?\n\n\
      ----\n\n'''Tarquin:'''  Should we consider promoting this page to top-level\
      \ so it can be split into subpages itself?\n\n'''HSDanClark:''' I guess... but\
      \ wasn't this page created before UT2003 was released, and envisioned as a way\
      \ to get the devs to see what the community would like? If that's the case,\
      \ and given that there will be no more patches for UT2003, is this page even\
      \ still relevant?\n\n'''Tarquin:''' Rename to \"Engine suggestions\"?\n\n'''GRAF1K:'''\
      \ Most of the stuff here isn't engine but Uscript suggestions, unless I'm wrong.\
      \ It's kind of a limiting title anyway.\n\n'''Foxpaw:''' I vote in favor of\
      \ renaming this page. It was rather hard for me to find with it's given title.\
      \ I was only able to find it using the search because I remembered some of the\
      \ text on it.\n\n----\n\nLink: http://www.planetunreal.com/feba/wishlist.htm\n\
      \n'''Mychaeel:'''  Some things that are in there are a bit strange.  Others\
      \ will be in, in any case.\n\n* \"Support for multiple attachment points,\"\
      \ \"manipulation function hooks for skeletal animations\" &ndash; Is in.\n*\
      \ \"Support for PHYS_Driving\" &ndash; Care to elaborate?\n* \"Support for virtual\
      \ classes\" &ndash; ''All'' UnrealScript classes are virtual, by principle.\n\
      * \"Add the ability for map makers to add comments to a map (using a special\
      \ actor)\" &ndash; Is in.\n* \"The ability to add new physics to the engine\
      \ within script\" &ndash; Depends what that's supposed to mean.  You can, of\
      \ course, do ''anything'' in UnrealScript, including simulating new physics\
      \ types.\n\n'''Foxpaw:''' Basically everything on the page at that link is availible\
      \ in UT2003.\n\n[[Category:Legacy Feedback|{{PAGENAME}}]]"
  properties: []
  revId: 8671
name: "Legacy:UT2003/Suggestions"
revision:
  revid: 8671
  parentid: 8672
  user: "64-110-208-134.regn.hsdb.sasknet.sk.ca"
  timestamp: 1156922911.000000000
  comment: "*"
timestamp: 1668787992.317098000
