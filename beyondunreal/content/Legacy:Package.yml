---
parse:
  title: "Legacy:Package"
  text:
    text: "<blockquote class=\"legacyquote\">\n<p>A package is a package is a package.\
      \ It just differs in what you put into it.</p>\n</blockquote>\n<p>Updated to\
      \ reflect UT2003 paradigm.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#The_Basics\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">The Basics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Classes_vs._Packages\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Classes vs. Packages</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-3\"><a href=\"#What_Are_Packages.3F\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">What Are Packages?</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#What_Are_Classes.3F\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">What Are Classes?</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Components_of_.U_Files\"><span\
      \ class=\"tocnumber\">2.3</span> <span class=\"toctext\">Components of .U Files</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#ClassName.2FPackageName_Notation\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">ClassName/PackageName\
      \ Notation</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"\
      #How_Unreal_Engine_Maps_Package_Names_To_Class_Names\"><span class=\"tocnumber\"\
      >3.1</span> <span class=\"toctext\">How Unreal Engine Maps Package Names To\
      \ Class Names</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"\
      ><a href=\"#Package_Flags\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Package Flags</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-9\"\
      ><a href=\"#Setting_package_flags_for_an_existing_package\"><span class=\"tocnumber\"\
      >4.1</span> <span class=\"toctext\">Setting package flags for an existing package</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Setting_package_flags_during_compilation\"\
      ><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">Setting package\
      \ flags during compilation</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-11\"><a href=\"#UT_Package_Tree\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">UT Package Tree</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-12\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">6</span>\
      \ <span class=\"toctext\">Related Topics</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-13\"><a href=\"#Tools_for_working_with_packages\"><span class=\"\
      tocnumber\">6.1</span> <span class=\"toctext\">Tools for working with packages</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-14\"><a href=\"#Discussion\"\
      ><span class=\"tocnumber\">7</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"The_Basics\">The\
      \ Basics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package?section=1\" title=\"Edit section: The\
      \ Basics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>When I first began getting into editing for Unreal Tournament, there were\
      \ many things that confused me. When reading tutorials, I found that there were\
      \ a lot of ideas that weren't explained, as they were so obviously basic knowledge,\
      \ that most tutorial authors assumed that you would already know them. But to\
      \ someone like me, with no previous programming experience, those were the very\
      \ ideas I needed to learn the most to get started.</p>\n<p>This document attempts\
      \ to address some of those basic concepts. There are 4 basic areas to creating\
      \ content for Unreal Tournament:</p>\n<ul>\n<li>Scripting - writing the code\
      \ to describe how objects in UT behave</li>\n<li>Mapping - creating the maps\
      \ and applying textures to those maps</li>\n<li>Modelling - creating new object\
      \ models to be used in UT</li>\n<li>Texturing - creating the textures and meshes\
      \ that will be used in maps and models</li>\n</ul>\n<p>This tutorial only focuses\
      \ on the first of those four.</p>\n<h2><span class=\"mw-headline\" id=\"Classes_vs._Packages\"\
      >Classes vs. Packages</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package?section=2\" title=\"Edit section: Classes\
      \ vs. Packages\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The first hurdle for me was to understand the difference and relationship\
      \ between the UT Classes and the UT files. I think what made this the most difficult,\
      \ was that sometimes, when referencing a class, the name of the file is used,\
      \ and sometimes, it isn't. Also, a class representation, such as \"Pawn.PlayerReplicationInfo\"\
      \ looks exactly like a variable reference, such as \"PlayerReplicationInfo.PlayerName\"\
      . In addition, classes have an entirely different heirarchy than the files,\
      \ and it's for the most part, completely unrelated. Hey, while we're at it,\
      \ what exactly is a class file anyway, and where do I find it? Add that all\
      \ together, and you have a potentially very confusing situation for a wet-behind-the-ears\
      \ scripter like myself.</p>\n<p>Confused? Don't worry, I'll explain it all right\
      \ here &#160;:)</p>\n<h3><span class=\"mw-headline\" id=\"What_Are_Packages.3F\"\
      >What Are Packages?</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package?section=3\" title=\"Edit section: What\
      \ Are Packages?\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Many times you will see references to something called a package. Well, what\
      \ exactly IS a package? A <b>package</b> refers to ANY of the Unreal file formats\
      \ - such as: .u, .ut2, .utx, .uax, .umx, .uz2, .uxx, .usx (can also be a combination\
      \ of any of these files! ). Each of these extensions represents a file containing\
      \ a different type of Unreal content. .u files contain unrealscript classes,\
      \ .utx packages contain textures, .uax packages contain sounds, .ut2 packages\
      \ contain maps, and so on.</p>\n<p>The engine does not actually care about the\
      \ extensions at all - the engine sees all packages equally, but it suuure makes\
      \ life easier for us humans&#160;:). It would be perfectly valid to create a\
      \ .utx file which contains nothing but classes (though it *would* be pretty\
      \ tricky to coax the compiler into doing this). I mention this only for completeness\
      \ (and to satisfy the header that is not a header&#160;:P), as that is more\
      \ of an advanced topic. At this point, it is best to think of each extension\
      \ as representing a container file which holds a different type of content.\
      \ Let's now begin to focus on the type of package we're interested in - a .u\
      \ package!</p>\n<p>Unreal .u files are essentially containers for the <b>class</b>\
      \ scripts. It's much like a zip file, in fact, since you can put any type of\
      \ class, regardless of what it does, into a package....but what's a class?</p>\n\
      <h3><span class=\"mw-headline\" id=\"What_Are_Classes.3F\">What Are Classes?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Package?section=4\" title=\"Edit section: What Are Classes?\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>TODO\
      \ Insert links to pages that</p>\n<ul>\n<li>have more comprehensive introductions\
      \ to class objects</li>\n<li>outline the difference between classes and objects</li>\n\
      </ul>\n<p>The whole idea behind UnrealScript is a programming concept called\
      \ Object Oriented Programming. Basically, this means that we're going to create\
      \ the entire program using individual little pieces, called objects, which define\
      \ their own behaviors and parameters. Those objects interact with each other\
      \ inside the realm of the Unreal engine, with scripting to tell them how to\
      \ interact with each other. It's important to remember, here, that there is\
      \ no external influence telling these objects how to behave (for the most part).\
      \ They are fully self-contained objects which control their own behavior and\
      \ how they'll react when another object comes into their sphere of influence.\
      \ That's your basic (<i>extremely</i> basic) overview of OOP (Object Oriented\
      \ Programming)...let's move on to UnrealScript's implementation of this.</p>\n\
      <p>A .u package file may contain many classes. A few examples: GameInfo, Mutator,\
      \ UTServerAdmin, Inventory. Each of these classes tells the Unreal Engine about\
      \ an object in the Unreal universe. In UnrealScript, each class that we create\
      \ becomes an object in the Unreal engine. This means that for every \"piece\"\
      \ of a mutator, mod, or whatever, we must write a seperate class file for it.\
      \ For instance, in the case of writing a new weapon, you must write one class\
      \ (class = object) for the weapon, and another class for the ammo that goes\
      \ into the weapon. You must write yet another class for the projectiles that\
      \ the weapon fires, and yet another class for the shell casing (for example)\
      \ that are produced when you fire a weapon. Another class must be written for\
      \ the muzzle flash, yet another for the explosion your weapon causes when it\
      \ hits something, etc. etc. So, you will write several classes for a simple\
      \ weapon, each class describing a different object that the engine must know\
      \ about in order for your weapon to be successfully loaded and used in the game.\
      \ The number of \"pieces\", or classes you use is, for the most part, entirely\
      \ up to you, subject only to the laws of practicality.</p>\n<p>For now, remember\
      \ that .u files contain classes, which each define a single object in the Unreal\
      \ engine. These classes tell the engine all about how that object interacts\
      \ with the rest of the objects in the engine, and together, they create a mutator,\
      \ mod, or what-have-you.</p>\n<h3><span class=\"mw-headline\" id=\"Components_of_.U_Files\"\
      >Components of .U Files</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=5\"\
      \ title=\"Edit section: Components of .U Files\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Now a little about how an Unreal .u is put together.</p>\n\
      <p>If you are unsure of exactly how to create a class script, how to setup the\
      \ folders, and how to compile those .uc files into a .u file, you should first\
      \ read over the following pages:</p>\n<p><a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://unreal.epicgames.com/UTMods.html\">http://unreal.epicgames.com/UTMods.html</a></p>\n\
      <p><a href=\"/Legacy:Setting_Up_UnrealScript\" title=\"Legacy:Setting Up UnrealScript\"\
      >Setting Up UnrealScript</a></p>\n<p>When you write a script, you use text,\
      \ such as</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> <span class=\"kw9\">Mutator</span> <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Info</span>;\n \n<span class=\"kw1\">var</span> PlayerPawn\
      \ P;\n \n<span class=\"kw1\">function</span> ModifyPlayer<span class=\"br0\"\
      >(</span><span class=\"kw9\">Pawn</span> Other<span class=\"br0\">)</span>;\n\
      \ \n<span class=\"kw1\">defaultproperties</span> <span class=\"br0\">{</span>\
      \ <span class=\"br0\">}</span></pre></div>\n</div>\n<p>It would take an extremely\
      \ long time, however, for the computer to parse these text statements during\
      \ the game, so you must first compile the script. Compiling is the process of\
      \ converting all of the text you've written into computer optimized code, commonly\
      \ referred to as 'binary'. After the compilation process has completed, you\
      \ should see a new .u package in your System directory, with the same name as\
      \ the directory you created. If you look at compiled script (a .u package) in\
      \ a text editor, it will look like gibberish:</p>\n<pre>\n ×£&lt;]$)\\²=Pe6\n\
      \ õJ¯'ÁžP×²!À°\n L¢bBƒ€mcìkÁ€\n mcì[Á€mcìKÁ€\n ½Ë¹'Aümcî;Á¤\n mcî3Á¥mcî3Á¦\n\
      \ mcî3Á§hcxBƒ€\n mcî3Á¬$×£&lt;]&lt;\n [×£$$)\\£%&lt;[=\n</pre>\n<p>Once the\
      \ script has been compiled into a package this way, you can no longer modify\
      \ the package. In order to make changes, you must delete the compiled package\
      \ (compiling refuses to overwrite existing packages), make the changes to the\
      \ original script text, and recompile it. If you don't have the original script\
      \ text, ucc also has the ability to export the script from a package.</p>\n\
      <p>For further information on the process of creating and compiling your scripts,\
      \ check out <a href=\"/Legacy:Compiling_With_UCC\" title=\"Legacy:Compiling\
      \ With UCC\">Compiling with UCC</a>.</p>\n<h2><span class=\"mw-headline\" id=\"\
      ClassName.2FPackageName_Notation\">ClassName/PackageName Notation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Package?section=6\" title=\"Edit section: ClassName/PackageName\
      \ Notation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Suppose you had written a class called 'MyWeaponClass', and named the folder\
      \ for all your script 'MyWeaponMod'. Your compiled package name would be 'MyWeaponMod.u'.\
      \ There are two distinct heirarchies, or \"trees\", which can be used to refer\
      \ to the MyWeaponClass class which now resides inside the MyWeaponMod.u package.\
      \ These two trees are commonly referred to the as the Package Tree, and the\
      \ Class Tree. The Unreal engine uses a dotted notation system to access different\
      \ branches of these trees, and the notation used for both systems is exactly\
      \ the same, so this can be a little confusing at first.</p>\n<p>Which tree you\
      \ should use in order to reference a class depends on the situation.</p>\n<p>The\
      \ Package Tree looks very much like the directory structure of your Unreal directory.\
      \ Within each folder, there are a number of .uc files. Each .uc file contains\
      \ the script for one class. Each .u package contains one class for each .uc\
      \ file that was in the respective folder. To reference a class using the package\
      \ tree, the syntax is</p>\n<pre>PackageName.ClassName</pre>\n<p>Note that the\
      \ extension is omitted. Why? As I said above, the extensions are only to help\
      \ humans keep everything straight - the engine saves and loads all packages\
      \ exactly the same.</p>\n<p>The Class Tree works quite differently. As you probably\
      \ know by now, the <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>\
      \ class is the base class for all of the Unreal classes. If you take a look\
      \ at Object.uc, inside the Core\\Classes\\ folder, you'll see that it is the\
      \ only class that does not 'extend' or 'expand' another class. In the class\
      \ tree, this is similar to the root directory of the game. All classes which\
      \ directly subclass <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>\
      \ would be like the first level of folders in your Unreal installation, with\
      \ the classes that subclass those classes being like the second level of subfolders,\
      \ and so on. Referencing a class in the class tree is done directly - no package\
      \ name is necessary.</p>\n<p><a href=\"/edit/Legacy:InstaGibDM?redlink=1\" class=\"\
      new\" title=\"Legacy:InstaGibDM (page does not exist)\">InstaGibDM</a> (UT2003/4:\
      \ <a href=\"/Legacy:MutInstaGib\" title=\"Legacy:MutInstaGib\">MutInstaGib</a>)\
      \ is the name of the class that defines the <a href=\"/edit/Legacy:InstaGib?redlink=1\"\
      \ class=\"new\" title=\"Legacy:InstaGib (page does not exist)\">InstaGib</a>\
      \ mutator, and this class file is located in the \"container\" <a href=\"/edit/Legacy:BotPack?redlink=1\"\
      \ class=\"new\" title=\"Legacy:BotPack (page does not exist)\">BotPack</a>.u\
      \ (UT2003/4: <a href=\"/edit/Legacy:XGame?redlink=1\" class=\"new\" title=\"\
      Legacy:XGame (page does not exist)\">XGame</a>.u) <b>package</b>, which is in\
      \ the System directory. The .u packages also contains many other classes which\
      \ work together to define a number of behaviors for the game. In some cases,\
      \ such as Engine.u, the classes contained by the package do not necessarily\
      \ relate to each, while in other cases, such as IpDrv.u, all of the classes\
      \ contained in the package are focused on a particular area of the game. To\
      \ reference a class using the class tree, you do not specify the package at\
      \ all.</p>\n<pre> class'ClassName' </pre>\n<p>That's it!</p>\n<p>TODO: Just\
      \ as a packages contain classes, so do classes contain variables and functions.\
      \ To access variables and function within a class, you must sometimes use a\
      \ combination of package notation and class notation.</p>\n<p>Here is an example\
      \ of starting a dedicated server from the command line. Notice that the <b>class</b>\
      \ names (CTFGame, XMapsControl, SuperInstaGib) are preceeded by <b>package</b>\
      \ names using a dotted notation system:</p>\n<pre>\n  ucc server CTF-Face.unr?game=Botpack.CTFGame?mutator=XMaps.XMapsControl,SuperInstaGib3.SuperInstaGib\n\
      \n  or, for UT2003/4\n\n  ucc server CTF-Gaul.ut2?Game=XGame.xCTFGame?Mutator=XGame.MutInstaGib\n\
      </pre>\n<p>Look at the part that begins with</p>\n<pre>?game=Botpack.CTFGame</pre>\n\
      <p>The first of Botpack.CTFGame is Botpack. This tells the computer which package\
      \ file we're using. If you look in your System directory, sure enough, you'll\
      \ see a file called Botpack.u. Inside of the Botpack.u <b>package</b>, there\
      \ is a <b>class</b> called CTFGame. This class tells the engine all about a\
      \ particular object that exists in the game, and in this case, the object represents\
      \ a gametype called CaptureTheFlag.</p>\n<p>On to the next part:&#160;?mutator=XMaps.XMapsControl.\
      \ This says that we're using a package called XMaps, and that the mutator class\
      \ that should be spawned by the engine upon starting up is a class named XMapsControl.\
      \ The next parameter reads exactly the same: in a <b>package</b> named SuperInstaGib3,\
      \ spawn a mutator <b>class</b> named SuperInstaGib (which is responsible for\
      \ controlling the spawning and initialization of the rest of the classes in\
      \ the package). So in essence, the UnrealTournament heirarchy is much like any\
      \ other dotted notation system. If you are familiar with OOP concepts, then\
      \ this is nothing new.</p>\n<p>If you aren't, then not to worry. If you understand\
      \ how website addresses work, you'll have no problem learning how to interpret\
      \ the dotted notation to correctly map <b>class names</b> to <b>package files</b>.</p>\n\
      <h3><span class=\"mw-headline\" id=\"How_Unreal_Engine_Maps_Package_Names_To_Class_Names\"\
      >How Unreal Engine Maps Package Names To Class Names</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=7\"\
      \ title=\"Edit section: How Unreal Engine Maps Package Names To Class Names\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Here\
      \ I'll explain a little more in depth the role of the package as opposed to\
      \ the role of the class to the Unreal engine. The way it works is very similar\
      \ to the way a webserver works. Let's say I'm hosting a website on my computer\
      \ - www.scriptnewbie.com. On my computer, I have designated a particular folder,\
      \ \"C:\\WebServer\\\", as the default directory that will contain all my webpages,\
      \ such as home.htm, links.htm, etc...</p>\n<p>Let's say I have some pictures\
      \ I on my website, and these pictures are located on my harddrive in the</p>\n\
      <p>C:\\Pictures</p>\n<p>directory. However, when I set up my webserver, I set\
      \ up a \"virtual\" directory that points to that C:\\Pictures directory. The\
      \ details of this are unimportant, but here's my point:</p>\n<p>When you access\
      \ my website, you will do so by typing <code><a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://www.scriptnewbie.com\">http://www.scriptnewbie.com</a></code>\
      \ into your browser. You will then actually be accessing my \"C:\\WebServer\"\
      \ directory, but to you, it appears as though you are accessing the root directory\
      \ of www.scriptnewbie.com . If you want to access my pictures, you would then\
      \ type into your browser <code><a rel=\"nofollow\" class=\"external free\" href=\"\
      http://www.scriptnewbie.com/pics/\">http://www.scriptnewbie.com/pics/</a></code>\
      \ to access my C:\\Pictures directory, but again, to you, it appears as though\
      \ you're accessing the \"pics\" subdirectory of the website.</p>\n<p>In similar\
      \ fashion, the <b>packages</b> of the engine are like the actual directories\
      \ on my harddrive: C:\\WebServer, and C:\\Pictures, whereas the <b>classes</b>\
      \ are like the virtual folders you type into your browser. You could not type\
      \ into your browser:</p>\n<p>C:\\www.scriptnewbie.com\\Pics</p>\n<p>and expect\
      \ to arrive at my website nor would you type:</p>\n<p>C:\\Website\\</p>\n<p>on\
      \ your computer and expect to arrive at that directory on my computer.</p>\n\
      <p>My content's physical location is C:\\WebServer, but my WebServer software\
      \ mediates between you (the user) and the physical location. Same thing goes\
      \ for UT. In both cases, content may be in any arbitrary physical location.\
      \ It does not matter to the web visitor, because the server software handles\
      \ the mapping.</p>\n<p>When you are writing the script text, importing textures,\
      \ referencing sounds, etc., you will be working with the file heirarchy in detail.\
      \ It's important to know which classes reside in which .u files, which textures\
      \ reside in which .utx file, which sounds reside in which .uax file, etc. This\
      \ is like looking at my webserver from my computer. It's important <b>I</b>\
      \ know which actual directory my pictures are located in, so that I can place\
      \ the resources in the correct place, and configure my webserver to pull the\
      \ resources from the correct location when you attempt to access the /pics/\
      \ directory.</p>\n<p>In Unreal, as the script is being executed, it's unimportant\
      \ (for the most part**) which particular .u file a class is in, because we're\
      \ now working with a completely different heirarchy. We are now inside the \"\
      Engine\" of Unreanl, and will be accessing those textures, classes, sounds,\
      \ etc. from the standpoint of an object (every aspect of Unreal is an object)\
      \ inside the engine, much like the visitor to my website accesses my pictures\
      \ using the \"/pics/\" directory. The actual .u file an object belongs to doesn't\
      \ really matter inside the game, because I'm using the Unreal server to access\
      \ the information I need. The actual folder that the content resides in on my\
      \ computer doesn't really matter to my website visitor, because he is using\
      \ my webserver to access that information.</p>\n<p>** Protocol and intention\
      \ is that no two objects can have the same name, such as Botpack.BlueFlag and\
      \ MyMod.BlueFlag. However, there is nothing to prevent you from doing this,\
      \ as it is syntactically correct. UnrealScript is designed to be much more pliant\
      \ than other programming languages with regards to duplicate files and null\
      \ references (this is intentional). As a result, you must be very careful if\
      \ you choose to give a class the same name as a class in another package. It\
      \ will be allowed by the compiler (unless it is in the same package) but you\
      \ may get very unreliable results while playing.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Package_Flags\">Package Flags</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=8\"\
      \ title=\"Edit section: Package Flags\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Normally clients connecting to a game server will\
      \ download all packages that are currently in use by the server. If you don't\
      \ want that because it's unnecessary, you can set certain <b>package flags</b>\
      \ to specify how the server should handle this package.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Setting_package_flags_for_an_existing_package\">Setting package\
      \ flags for an existing package</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=9\"\
      \ title=\"Edit section: Setting package flags for an existing package\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Use the <code>ucc\
      \ packageflag</code> commandlet to set flags for existing packages.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Setting_package_flags_during_compilation\">Setting\
      \ package flags during compilation</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=10\"\
      \ title=\"Edit section: Setting package flags during compilation\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>If you are compiling\
      \ your own .u packages, you can set up a small text file called <code>MyPackage.upkg</code>\
      \ (where \"MyPackage\" is the name of your package) in your package's <code>Classes</code>\
      \ directory. It can contain the following settings:</p>\n<pre> [Flags]\n AllowDownload=False\n\
      \ ClientOptional=False\n ServerSideOnly=False\n</pre>\n<h2><span class=\"mw-headline\"\
      \ id=\"UT_Package_Tree\">UT Package Tree</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=11\"\
      \ title=\"Edit section: UT Package Tree\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>These are the package file extentions</p>\n<p>See\
      \ also <a href=\"/Legacy:Package_Extension_Catalog\" title=\"Legacy:Package\
      \ Extension Catalog\">Package Extension Catalog</a>.</p>\n<ul>\n<li>.U\n<ul>\n\
      <li>Classes\n<ul>\n<li>Functions</li>\n<li>Variables</li>\n</ul>\n</li>\n<li>Textures</li>\n\
      <li>Sounds</li>\n<li>Meshes</li>\n</ul>\n</li>\n<li>.UTX\n<ul>\n<li>Textures</li>\n\
      </ul>\n</li>\n<li>.UAX\n<ul>\n<li>Sounds</li>\n</ul>\n</li>\n<li>.UMX\n<ul>\n\
      <li>Music</li>\n</ul>\n</li>\n<li>.UNR\n<ul>\n<li>Maps</li>\n<li>Scripts</li>\n\
      <li>Textures</li>\n<li>Brushes</li>\n</ul>\n</li>\n<li>.UZ - Compressed For\
      \ Download\n<ul>\n<li>U</li>\n<li>UMX</li>\n<li>UNR</li>\n<li>UAX</li>\n<li>UTX</li>\n\
      </ul>\n</li>\n<li>UXX - Cached for Decompression after Download\n<ul>\n<li>Cache</li>\n\
      </ul>\n</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package?section=12\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:File_Format\" title=\"Legacy:File Format\">File\
      \ Format</a>\n<ul>\n<li><a href=\"/Legacy:Package_File_Format\" title=\"Legacy:Package\
      \ File Format\">Package File Format</a></li>\n</ul>\n</li>\n<li><a href=\"/Legacy:Package_Extension_Catalog\"\
      \ title=\"Legacy:Package Extension Catalog\">Package Extension Catalog</a></li>\n\
      <li><a href=\"/Legacy:Traversing_Classes\" title=\"Legacy:Traversing Classes\"\
      >Traversing Classes</a></li>\n<li><a href=\"/Legacy:Package_Naming\" title=\"\
      Legacy:Package Naming\">Package Naming</a></li>\n</ul>\n<h3><span class=\"mw-headline\"\
      \ id=\"Tools_for_working_with_packages\">Tools for working with packages</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Package?section=13\" title=\"Edit section: Tools for working\
      \ with packages\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <ul>\n<li><a href=\"/Legacy:UT_Package_Tool\" title=\"Legacy:UT Package Tool\"\
      \ class=\"mw-redirect\">UT Package Tool</a></li>\n<li><a href=\"/Legacy:Unrilities\"\
      \ title=\"Legacy:Unrilities\">Unrilities</a></li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package?section=14\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>RDGDanClark:</b> Does all of this info translate\
      \ to UT2003? If not (and it probably doesn't exactly), could someone who's knowledgable\
      \ about Packages flag the differences between UT and UT2003?</p>\n<p><b>Evolution:</b>\
      \ Yes, this information is applicable for all Unreal engine games.</p>\n<p><b>Evolution:</b>\
      \ BTW, I liked my original title better.&#160;:) Sure it was a little long,\
      \ but IMO, it was a very clear indication of the type of information the page\
      \ contains.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.096 seconds\n\
      Real time usage: 0.098 seconds\nPreprocessor visited node count: 128/1000000\n\
      Preprocessor generated node count: 253/1000000\nPost‐expand include size: 258/2097152\
      \ bytes\nTemplate argument size: 81/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    5.048      1 - -total\n100.00%\
      \    5.048      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:2400-0!*!0!!en!*!* and timestamp 20221118001215 and\
      \ revision id 5759\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Unrilities"
  - ns: 100
    exists: true
    name: "Legacy:Package Extension Catalog"
  - ns: 100
    exists: true
    name: "Legacy:Compiling With UCC"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Package Naming"
  - ns: 100
    exists: true
    name: "Legacy:File Format"
  - ns: 100
    exists: true
    name: "Legacy:UT Package Tool"
  - ns: 100
    exists: false
    name: "Legacy:InstaGib"
  - ns: 100
    exists: true
    name: "Legacy:Traversing Classes"
  - ns: 100
    exists: true
    name: "Legacy:Setting Up UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Package File Format"
  - ns: 100
    exists: false
    name: "Legacy:XGame"
  - ns: 100
    exists: false
    name: "Legacy:BotPack"
  - ns: 100
    exists: false
    name: "Legacy:InstaGibDM"
  - ns: 100
    exists: true
    name: "Legacy:MutInstaGib"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://unreal.epicgames.com/UTMods.html"
  - "http://www.scriptnewbie.com"
  - "http://www.scriptnewbie.com/pics/"
  sections:
  - toclevel: 1
    level: "2"
    line: "The Basics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Package"
    byteoffset: 133
    anchor: "The_Basics"
  - toclevel: 1
    level: "2"
    line: "Classes vs. Packages"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Package"
    byteoffset: 1055
    anchor: "Classes_vs._Packages"
  - toclevel: 2
    level: "3"
    line: "What Are Packages?"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Package"
    byteoffset: 1892
    anchor: "What_Are_Packages.3F"
  - toclevel: 2
    level: "3"
    line: "What Are Classes?"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Package"
    byteoffset: 3289
    anchor: "What_Are_Classes.3F"
  - toclevel: 2
    level: "3"
    line: "Components of .U Files"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Package"
    byteoffset: 5753
    anchor: "Components_of_.U_Files"
  - toclevel: 1
    level: "2"
    line: "ClassName/PackageName Notation"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Package"
    byteoffset: 7497
    anchor: "ClassName.2FPackageName_Notation"
  - toclevel: 2
    level: "3"
    line: "How Unreal Engine Maps Package Names To Class Names"
    number: "3.1"
    index: "7"
    fromtitle: "Legacy:Package"
    byteoffset: 12261
    anchor: "How_Unreal_Engine_Maps_Package_Names_To_Class_Names"
  - toclevel: 1
    level: "2"
    line: "Package Flags"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Package"
    byteoffset: 16346
    anchor: "Package_Flags"
  - toclevel: 2
    level: "3"
    line: "Setting package flags for an existing package"
    number: "4.1"
    index: "9"
    fromtitle: "Legacy:Package"
    byteoffset: 16623
    anchor: "Setting_package_flags_for_an_existing_package"
  - toclevel: 2
    level: "3"
    line: "Setting package flags during compilation"
    number: "4.2"
    index: "10"
    fromtitle: "Legacy:Package"
    byteoffset: 16761
    anchor: "Setting_package_flags_during_compilation"
  - toclevel: 1
    level: "2"
    line: "UT Package Tree"
    number: "5"
    index: "11"
    fromtitle: "Legacy:Package"
    byteoffset: 17138
    anchor: "UT_Package_Tree"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "12"
    fromtitle: "Legacy:Package"
    byteoffset: 17572
    anchor: "Related_Topics"
  - toclevel: 2
    level: "3"
    line: "Tools for working with packages"
    number: "6.1"
    index: "13"
    fromtitle: "Legacy:Package"
    byteoffset: 17842
    anchor: "Tools_for_working_with_packages"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "7"
    index: "14"
    fromtitle: "Legacy:Package"
    byteoffset: 17961
    anchor: "Discussion"
  displaytitle: "Legacy:Package"
  iwlinks: []
  wikitext:
    text: "{{innerbox| A package is a package is a package.  It just differs in what\
      \ you put into it.\n\n}}\n\nUpdated to reflect UT2003 paradigm.\n\n==The Basics==\n\
      \nWhen I first began getting into editing for Unreal Tournament, there were\
      \ many things that confused me.  When reading tutorials, I found that there\
      \ were a lot of ideas that weren't explained, as they were so obviously basic\
      \ knowledge, that most tutorial authors assumed that you would already know\
      \ them.  But to someone like me, with no previous programming experience, those\
      \ were the very ideas I needed to learn the most to get started.\n\nThis document\
      \ attempts to address some of those basic concepts.  There are 4 basic areas\
      \ to creating content for Unreal Tournament:\n\n* Scripting - writing the code\
      \ to describe how objects in UT behave\n* Mapping - creating the maps and applying\
      \ textures to those maps\n* Modelling - creating new object models to be used\
      \ in UT\n* Texturing - creating the textures and meshes that will be used in\
      \ maps and models\n\nThis tutorial only focuses on the first of those four.\n\
      \n==Classes vs. Packages==\n\nThe first hurdle for me was to understand the\
      \ difference and relationship between the UT Classes and the UT files.  I think\
      \ what made this the most difficult, was that sometimes, when referencing a\
      \ class, the name of the file is used, and sometimes, it isn't.  Also, a class\
      \ representation, such as \"Pawn.PlayerReplicationInfo\" looks exactly like\
      \ a variable reference, such as \"PlayerReplicationInfo.PlayerName\".  In addition,\
      \ classes have an entirely different heirarchy than the files, and it's for\
      \ the most part, completely unrelated.  Hey, while we're at it, what exactly\
      \ is a class file anyway, and where do I find it?  Add that all together, and\
      \ you have a potentially very confusing situation for a wet-behind-the-ears\
      \ scripter like myself.  \n\nConfused?  Don't worry, I'll explain it all right\
      \ here  :)\n\n===What Are Packages?===\n\nMany times you will see references\
      \ to something called a package.  Well, what exactly IS a package?  A <b>package</b>\
      \ refers to ANY of the Unreal file formats - such as: .u, .ut2, .utx, .uax,\
      \ .umx, .uz2, .uxx, .usx (can also be a combination of any of these files! ).\
      \  Each of these extensions represents a file containing a different type of\
      \ Unreal content.  .u files contain unrealscript classes, .utx packages contain\
      \ textures, .uax packages contain sounds, .ut2 packages contain maps, and so\
      \ on.\n\nThe engine does not actually care about the extensions at all - the\
      \ engine sees all packages equally, but it suuure makes life easier for us humans\
      \ :).  It would be perfectly valid to create a .utx file which contains nothing\
      \ but classes (though it *would* be pretty tricky to coax the compiler into\
      \ doing this).  I mention this only for completeness (and to satisfy the header\
      \ that is not a header :P), as that is more of an advanced topic.  At this point,\
      \ it is best to think of each extension as representing a container file which\
      \ holds a different type of content.  Let's now begin to focus on the type of\
      \ package we're interested in - a .u package!\n\nUnreal .u files are essentially\
      \ containers for the <b>class</b> scripts.  It's much like a zip file, in fact,\
      \ since you can put any type of class, regardless of what it does, into a package....but\
      \ what's a class?\n\n===What Are Classes?===\n\nTODO Insert links to pages that\n\
      *have more comprehensive introductions to class objects\n*outline the difference\
      \ between classes and objects\n\nThe whole idea behind UnrealScript is a programming\
      \ concept called Object Oriented Programming.  Basically, this means that we're\
      \ going to create the entire program using individual little pieces, called\
      \ objects, which define their own behaviors and parameters.  Those objects interact\
      \ with each other inside the realm of the Unreal engine, with scripting to tell\
      \ them how to interact with each other.  It's important to remember, here, that\
      \ there is no external influence telling these objects how to behave (for the\
      \ most part). They are fully self-contained objects which control their own\
      \ behavior and how they'll react when another object comes into their sphere\
      \ of influence. That's your basic (''extremely'' basic) overview of OOP (Object\
      \ Oriented Programming)...let's move on to UnrealScript's implementation of\
      \ this.\n\nA .u package file may contain many classes. A few examples: GameInfo,\
      \ Mutator, UTServerAdmin, Inventory. Each of these classes tells the Unreal\
      \ Engine about an object in the Unreal universe.  In UnrealScript, each class\
      \ that we create becomes an object in the Unreal engine.  This means that for\
      \ every \"piece\" of a mutator, mod, or whatever, we must write a seperate class\
      \ file for it. For instance, in the case of writing a new weapon, you must write\
      \ one class (class = object) for the weapon, and another class for the ammo\
      \ that goes into the weapon. You must write yet another class for the projectiles\
      \ that the weapon fires, and yet another class for the shell casing (for example)\
      \ that are produced when you fire a weapon. Another class must be written for\
      \ the muzzle flash, yet another for the explosion your weapon causes when it\
      \ hits something, etc. etc. So, you will write several classes for a simple\
      \ weapon, each class describing a different object that the engine must know\
      \ about in order for your weapon to be successfully loaded and used in the game.\
      \  The number of \"pieces\", or classes you use is, for the most part, entirely\
      \ up to you, subject only to the laws of practicality.\n\nFor now, remember\
      \ that .u files contain classes, which each define a single object in the Unreal\
      \ engine. These classes tell the engine all about how that object interacts\
      \ with the rest of the objects in the engine, and together, they create a mutator,\
      \ mod, or what-have-you. \n\n===Components of .U Files===\n\nNow a little about\
      \ how an Unreal .u is put together.  \n\nIf you are unsure of exactly how to\
      \ create a class script, how to setup the folders, and how to compile those\
      \ .uc files into a .u file, you should first read over the following pages:\n\
      \nhttp://unreal.epicgames.com/UTMods.html\n\n[[Legacy:Setting Up UnrealScript|Setting\
      \ Up UnrealScript]]\n\nWhen you write a script, you use text, such as\n\n<uscript>\n\
      class Mutator extends Info;\n\nvar PlayerPawn P;\n\nfunction ModifyPlayer(Pawn\
      \ Other);\n\ndefaultproperties { }\n</uscript>\n\nIt would take an extremely\
      \ long time, however, for the computer to parse these text statements during\
      \ the game, so you must first compile the script.  Compiling is the process\
      \ of converting all of the text you've written into computer optimized code,\
      \ commonly referred to as 'binary'. After the compilation process has completed,\
      \ you should see a new .u package in your System directory, with the same name\
      \ as the directory you created.  If you look at compiled script (a .u package)\
      \ in a text editor, it will look like gibberish:\n\n<pre>\n ×£<]$)\\²=Pe6\n\
      \ õJ¯'ÁžP×²!À°\n L¢bBƒ€mcìkÁ€\n mcì[Á€mcìKÁ€\n ½Ë¹'Aümcî;Á¤\n mcî3Á¥mcî3Á¦\n\
      \ mcî3Á§hcxBƒ€\n mcî3Á¬$×£<]<\n [×£$$)\\£%<[=\n</pre>\n\nOnce the script has\
      \ been compiled into a package this way, you can no longer modify the package.\
      \  In order to make changes, you must delete the compiled package (compiling\
      \ refuses to overwrite existing packages), make the changes to the original\
      \ script text, and recompile it. If you don't have the original script text,\
      \ ucc also has the ability to export the script from a package.\n\nFor further\
      \ information on the process of creating and compiling your scripts, check out\
      \ [[Legacy:Compiling With UCC|Compiling with UCC]].\n\n==ClassName/PackageName\
      \ Notation==\n\nSuppose you had written a class called 'MyWeaponClass', and\
      \ named the folder for all your script 'MyWeaponMod'.  Your compiled package\
      \ name would be 'MyWeaponMod.u'.  There are two distinct heirarchies, or \"\
      trees\", which can be used to refer to the MyWeaponClass class which now resides\
      \ inside the MyWeaponMod.u package.  These two trees are commonly referred to\
      \ the as the Package Tree, and the Class Tree.  The Unreal engine uses a dotted\
      \ notation system to access different branches of these trees, and the notation\
      \ used for both systems is exactly the same, so this can be a little confusing\
      \ at first.\n\nWhich tree you should use in order to reference a class depends\
      \ on the situation.\n\nThe Package Tree looks very much like the directory structure\
      \ of your Unreal directory.  Within each folder, there are a number of .uc files.\
      \  Each .uc file contains the script for one class.  Each .u package contains\
      \ one class for each .uc file that was in the respective folder.  To reference\
      \ a class using the package tree, the syntax is\n\n<pre>PackageName.ClassName</pre>\n\
      \nNote that the extension is omitted.  Why?  As I said above, the extensions\
      \ are only to help humans keep everything straight - the engine saves and loads\
      \ all packages exactly the same.\n\nThe Class Tree works quite differently.\
      \  As you probably know by now, the [[Legacy:Object|Object]] class is the base\
      \ class for all of the Unreal classes.  If you take a look at Object.uc, inside\
      \ the Core\\Classes\\ folder, you'll see that it is the only class that does\
      \ not 'extend' or 'expand' another class.  In the class tree, this is similar\
      \ to the root directory of the game.  All classes which directly subclass [[Legacy:Object|Object]]\
      \ would be like the first level of folders in your Unreal installation, with\
      \ the classes that subclass those classes being like the second level of subfolders,\
      \ and so on.  Referencing a class in the class tree is done directly - no package\
      \ name is necessary.\n\n[[Legacy:InstaGibDM|InstaGibDM]] (UT2003/4: [[Legacy:MutInstaGib|MutInstaGib]])\
      \ is the name of the class that defines the [[Legacy:InstaGib|InstaGib]] mutator,\
      \ and this class file is located in the \"container\" [[Legacy:BotPack|BotPack]].u\
      \ (UT2003/4: [[Legacy:XGame|XGame]].u) <b>package</b>, which is in the System\
      \ directory.  The .u packages also contains many other classes which work together\
      \ to define a number of behaviors for the game.  In some cases, such as Engine.u,\
      \ the classes contained by the package do not necessarily relate to each, while\
      \ in other cases, such as IpDrv.u, all of the classes contained in the package\
      \ are focused on a particular area of the game.  To reference a class using\
      \ the class tree, you do not specify the package at all.\n\n<pre> class'ClassName'\
      \ </pre>\n\nThat's it!\n\nTODO: Just as a packages contain classes, so do classes\
      \ contain variables and functions.  To access variables and function within\
      \ a class, you must sometimes use a combination of package notation and class\
      \ notation.\n\nHere is an example of starting a dedicated server from the command\
      \ line.  Notice that the <b>class</b> names (CTFGame, XMapsControl, SuperInstaGib)\
      \ are preceeded by <b>package</b> names using a dotted notation system:\n\n\
      <pre>\n  ucc server CTF-Face.unr?game=Botpack.CTFGame?mutator=XMaps.XMapsControl,SuperInstaGib3.SuperInstaGib\n\
      \n  or, for UT2003/4\n\n  ucc server CTF-Gaul.ut2?Game=XGame.xCTFGame?Mutator=XGame.MutInstaGib\n\
      </pre>\n\nLook at the part that begins with <pre>?game=Botpack.CTFGame</pre>\n\
      \nThe first of Botpack.CTFGame is Botpack. This tells the computer which package\
      \ file we're using.  If you look in your System directory, sure enough, you'll\
      \ see a file called Botpack.u. Inside of the Botpack.u <b>package</b>, there\
      \ is a <b>class</b> called CTFGame. This class tells the engine all about a\
      \ particular object that exists in the game, and in this case, the object represents\
      \ a gametype called CaptureTheFlag. \n\nOn to the next part: ?mutator=XMaps.XMapsControl.\
      \ This says that we're using a package called XMaps, and that the mutator class\
      \ that should be spawned by the engine upon starting up is a class named XMapsControl.\
      \ The next parameter reads exactly the same: in a <b>package</b> named SuperInstaGib3,\
      \ spawn a mutator <b>class</b> named SuperInstaGib (which is responsible for\
      \ controlling the spawning and initialization of the rest of the classes in\
      \ the package).  So in essence, the UnrealTournament heirarchy is much like\
      \ any other dotted notation system.  If you are familiar with OOP concepts,\
      \ then this is nothing new.  \n\nIf you aren't, then not to worry.  If you understand\
      \ how website addresses work, you'll have no problem learning how to interpret\
      \ the dotted notation to correctly map <b>class names</b> to <b>package files</b>.\n\
      \n===How Unreal Engine Maps Package Names To Class Names===\n\nHere I'll explain\
      \ a little more in depth the role of the package as opposed to the role of the\
      \ class to the Unreal engine.  The way it works is very similar to the way a\
      \ webserver works.  Let's say I'm hosting a website on my computer - www.scriptnewbie.com.\
      \  On my computer, I have designated a particular folder, \"C:\\WebServer\\\"\
      , as the default directory that will contain all my webpages, such as home.htm,\
      \ links.htm, etc...\n\nLet's say I have some pictures I on my website, and these\
      \ pictures are located on my harddrive in the \n\nC:\\Pictures\n\ndirectory.\
      \  However, when I set up my webserver, I set up a \"virtual\" directory that\
      \ points to that C:\\Pictures directory.  The details of this are unimportant,\
      \ but here's my point:\n\nWhen you access my website, you will do so by typing\
      \  <code>http://www.scriptnewbie.com</code> into your browser.  You will then\
      \ actually be accessing my \"C:\\WebServer\" directory, but to you, it appears\
      \ as though you are accessing the root directory of www.scriptnewbie.com . \
      \ If you want to access my pictures, you would then type into your browser <code>http://www.scriptnewbie.com/pics/</code>\
      \ to access my C:\\Pictures directory, but again, to you, it appears as though\
      \ you're accessing the \"pics\" subdirectory of the website.\n\nIn similar fashion,\
      \ the <b>packages</b> of the engine are like the actual directories on my harddrive:\
      \ C:\\WebServer, and C:\\Pictures, whereas the <b>classes</b> are like the virtual\
      \ folders you type into your browser.  You could not type into your browser:\n\
      \nC:\\www.scriptnewbie.com\\Pics\n\nand expect to arrive at my website nor would\
      \ you type:\n\nC:\\Website\\\n\non your computer and expect to arrive at that\
      \ directory on my computer.\n\nMy content's physical location is C:\\WebServer,\
      \ but my WebServer software mediates between you (the user) and the physical\
      \ location.  Same thing goes for UT.  In both cases, content may be in any arbitrary\
      \ physical location.  It does not matter to the web visitor, because the server\
      \ software handles the mapping.\n\nWhen you are writing the script text, importing\
      \ textures, referencing sounds, etc., you will be working with the file heirarchy\
      \ in detail.  It's important to know which classes reside in which .u files,\
      \ which textures reside in which .utx file, which sounds reside in which .uax\
      \ file, etc.  This is like looking at my webserver from my computer.  It's important\
      \ <b>I</b> know which actual directory my pictures are located in, so that I\
      \ can place the resources in the correct place, and configure my webserver to\
      \ pull the resources from the correct location when you attempt to access the\
      \ /pics/ directory.\n\nIn Unreal, as the script is being executed, it's unimportant\
      \ (for the most part**) which particular .u file a class is in, because we're\
      \ now working with a completely different heirarchy.  We are now inside the\
      \ \"Engine\" of Unreanl, and will be accessing those textures, classes, sounds,\
      \ etc. from the standpoint of an object (every aspect of Unreal is an object)\
      \ inside the engine, much like the visitor to my website accesses my pictures\
      \ using the \"/pics/\" directory.  The actual .u file an object belongs to doesn't\
      \ really matter inside the game, because I'm using the Unreal server to access\
      \ the information I need.  The actual folder that the content resides in on\
      \ my computer doesn't really matter to my website visitor, because he is using\
      \ my webserver to access that information.\n\n<nowiki> ** </nowiki>Protocol\
      \ and intention is that no two objects can have the same name, such as Botpack.BlueFlag\
      \ and MyMod.BlueFlag.  However, there is nothing to prevent you from doing this,\
      \ as it is syntactically correct.  UnrealScript is designed to be much more\
      \ pliant than other programming languages with regards to duplicate files and\
      \ null references (this is intentional).  As a result, you must be very careful\
      \ if you choose to give a class the same name as a class in another package.\
      \  It will be allowed by the compiler (unless it is in the same package) but\
      \ you may get very unreliable results while playing.\n\n==Package Flags==\n\n\
      Normally clients connecting to a game server will download all packages that\
      \ are currently in use by the server.  If you don't want that because it's unnecessary,\
      \ you can set certain '''package flags''' to specify how the server should handle\
      \ this package.\n\n===Setting package flags for an existing package===\n\nUse\
      \ the <code>ucc packageflag</code> commandlet to set flags for existing packages.\n\
      \n===Setting package flags during compilation===\n\nIf you are compiling your\
      \ own .u packages, you can set up a small text file called <code>MyPackage.upkg</code>\
      \ (where \"MyPackage\" is the name of your package) in your package's <code>Classes</code>\
      \ directory.  It can contain the following settings:\n\n  [Flags]\n  AllowDownload=False\n\
      \  ClientOptional=False\n  ServerSideOnly=False\n\n==UT Package Tree==\n\nThese\
      \ are the package file extentions\n\nSee also [[Legacy:Package Extension Catalog|Package\
      \ Extension Catalog]].\n\n* .U\n** Classes\n*** Functions\n*** Variables\n**\
      \ Textures\n** Sounds\n** Meshes\n* .UTX\n** Textures\n* .UAX\n** Sounds\n*\
      \ .UMX\n** Music\n* .UNR\n** Maps\n** Scripts\n** Textures\n** Brushes\n* .UZ\
      \ - Compressed For Download\n** U\n** UMX\n** UNR\n** UAX\n** UTX\n* UXX - Cached\
      \ for Decompression after Download\n** Cache\n\n==Related Topics==\n* [[Legacy:File\
      \ Format|File Format]]\n** [[Legacy:Package File Format|Package File Format]]\n\
      * [[Legacy:Package Extension Catalog|Package Extension Catalog]]\n* [[Legacy:Traversing\
      \ Classes|Traversing Classes]]\n* [[Legacy:Package Naming|Package Naming]]\n\
      \n===Tools for working with packages===\n* [[Legacy:UT Package Tool|UT Package\
      \ Tool]]\n* [[Legacy:Unrilities|Unrilities]]\n\n==Discussion==\n\n'''RDGDanClark:'''\
      \ Does all of this info translate to UT2003? If not (and it probably doesn't\
      \ exactly), could someone who's knowledgable about Packages flag the differences\
      \ between UT and UT2003?\n\n'''Evolution:''' Yes, this information is applicable\
      \ for all Unreal engine games.\n\n'''Evolution:''' BTW, I liked my original\
      \ title better. :)  Sure it was a little long, but IMO, it was a very clear\
      \ indication of the type of information the page contains."
  properties: []
  revId: 5759
name: "Legacy:Package"
revision:
  revid: 5759
  parentid: 5760
  user: "SuperApe"
  timestamp: 1136528135.000000000
  comment: "*"
timestamp: 1668752957.386816000
