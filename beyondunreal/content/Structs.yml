---
parse:
  title: "Structs"
  text:
    text: "<p>A <b>struct</b> (or <b>structure</b>) is a composite data type in <a\
      \ href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a>, that can contain\
      \ multiple member variables of (almost) any type, including another struct type.\
      \ Structs are <i>not</i> reference types, that means a variable of a struct\
      \ type actually contains the struct data itself, not a reference to the struct\
      \ data. This imposes an important restriction on struct types: a struct may\
      \ not directly or indirectly contain a variable of that same struct type.</p>\n\
      <p><b>Note:</b> The compiler will probably not complain about a struct violating\
      \ this restriction. However, if the struct type is used to declare any class\
      \ or local variables or function parameters or return types, the compiler will\
      \ likely crash as it attempts to allocate an infinite amount of memory!</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Declaration_syntax\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Declaration syntax</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Modifiers\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Modifiers</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-3\"><a href=\"#Modifiers_affecting_UnrealEd\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Modifiers affecting\
      \ UnrealEd</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Modifiers_affecting_values\"><span class=\"tocnumber\">2.2</span> <span class=\"\
      toctext\">Modifiers affecting values</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Other_modifiers\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Other modifiers</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#Member_declarations\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Member declarations</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Default_member_values\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Default member\
      \ values</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"\
      ><a href=\"#Native_struct_code\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Native struct code</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#Accessing_structs\"><span class=\"tocnumber\">5</span> <span class=\"\
      toctext\">Accessing structs</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-10\"\
      ><a href=\"#Accessing_structs_in_arrays\"><span class=\"tocnumber\">5.1</span>\
      \ <span class=\"toctext\">Accessing structs in arrays</span></a></li>\n</ul>\n\
      </li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Declaration_syntax\"\
      >Declaration syntax</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Structs?section=1\" title=\"Edit section: Declaration\
      \ syntax\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The general syntax of a struct declaration is:</p>\n<pre><b>struct</b> <a\
      \ href=\"#Modifiers\"><i>[modifiers]</i></a> <i>structname</i> [<b><a href=\"\
      /Extends\" title=\"Extends\" class=\"mw-redirect\">extends</a></b> <i>parentstruct</i>]\
      \ <b>{</b>\n  ...\n<b>};</b>\n</pre>\n<p>Like <a href=\"/Enums\" title=\"Enums\"\
      >enums</a>, struct declarations may appear either as standalone declaration,\
      \ in which case they must be followed by a semicolon, or as inline declaration\
      \ instead of the type specification in variable declarations. Struct declarations\
      \ may be contained in other struct declarations, both standalone or in variable\
      \ declarations. There is no difference between declaring a struct at the class\
      \ level and within another struct or between a standalone and inline declaration,\
      \ in all cases the struct is a direct member of the class.</p>\n<p>Remember\
      \ that all members of an UnrealScript class share the same namespace. A struct\
      \ declaration may hide any member of a parent class if it has the same name.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Modifiers\">Modifiers</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Structs?section=2\"\
      \ title=\"Edit section: Modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Struct modifiers are not available in <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a>. Most struct modifiers are related to native code.</p>\n<ul>\n<li><sup>2</sup>\
      \ – The modifier is available in <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a>.</li>\n<li><sup>3</sup> – The modifier is available in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a>.</li>\n<li><sup>3+</sup> – The\
      \ modifier is available in later <a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a> versions, such as the <a href=\"/UDK\" title=\"\
      UDK\" class=\"mw-redirect\">UDK</a>.</li>\n</ul>\n<h3><span class=\"mw-headline\"\
      \ id=\"Modifiers_affecting_UnrealEd\">Modifiers affecting UnrealEd</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Structs?section=3\" title=\"Edit section: Modifiers affecting\
      \ UnrealEd\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>Long<sup>2</sup><sup><i><a href=\"/Template:Confirm\" title=\"Template:Confirm\"\
      >[confirm]</a></i></sup></dt>\n<dd>Specifies that the struct contains many members\
      \ and should not be examined when generating a value string for struct variables\
      \ in <a href=\"/UnrealEd\" title=\"UnrealEd\" class=\"mw-redirect\">UnrealEd</a>'s\
      \ <a href=\"/edit/Actor_properties_window?redlink=1\" class=\"new\" title=\"\
      Actor properties window (page does not exist)\">Actor properties window</a>.\
      \ Usually structs like <a href=\"/Vector\" title=\"Vector\">Vector</a> are displayed\
      \ as \"(X=1.2,Y=3.4,Z=5.6)\", but with the <i>long</i> modifier only \"(...)\"\
      \ is displayed.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Modifiers_affecting_values\"\
      >Modifiers affecting values</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Structs?section=4\" title=\"\
      Edit section: Modifiers affecting values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>Immutable<sup>3</sup>, ImmutableWhenCooked<sup>3</sup>&#160;</dt>\n\
      <dd>The struct uses <a href=\"http://en.wikipedia.org/wiki/Serialization\" class=\"\
      extiw\" title=\"wp:Serialization\">binary serialization</a>(in previous engine\
      \ versions some structs used hardcoded binary serialization in c++ e.g. <a href=\"\
      /Vector\" title=\"Vector\">Vector</a>, <a href=\"/Rotator\" title=\"Rotator\"\
      >Rotator</a> and <a href=\"/Color\" title=\"Color\">Color</a> etc). Without\
      \ this flag, each struct member will be saved with a <i>nameindex</i> followed\
      \ by a <i>packedbyte</i>, <i>size</i> and <i>arrayindex</i>, then the value\
      \ of the specific member, thus increases file size and slows down the serialization\
      \ process.</dd>\n<dt>Atomic<sup>3</sup>, AtomicWhenCooked<sup>3</sup>&#160;</dt>\n\
      <dd>Indicates that this struct should always be serialized as a single unit;\
      \ if any property in the struct differs from its defaults, then all elements\
      \ of the struct will be serialized.</dd>\n<dt>StrictConfig<sup>3</sup>&#160;</dt>\n\
      <dd>When the struct variable is flagged with <i><a href=\"/Config\" title=\"\
      Config\">config</a>/<a href=\"/GlobalConfig\" title=\"GlobalConfig\" class=\"\
      mw-redirect\">globalconfig</a></i> then only members with the flag <i>config/globalconfig</i>\
      \ will be readable from the .ini, instead of all members.</dd>\n<dt>Transient<sup>2,3</sup>&#160;</dt>\n\
      <dd>See <a href=\"/Variables#Modifiers_affecting_values\" title=\"Variables\"\
      >Transient</a> but instead it applies to all the members of the struct.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Other_modifiers\">Other modifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Structs?section=5\" title=\"Edit section: Other modifiers\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>Export<sup>2,3</sup>&#160;</dt>\n\
      <dd>The struct is supposed to be exported to native headers.</dd>\n<dt>Init<sup>2,3</sup>&#160;</dt>\n\
      <dd><b>???</b></dd>\n<dt>Native<sup>2,3</sup>&#160;</dt>\n<dd>The struct includes\
      \ native logic.</dd>\n<dt>{<i>native type name</i>}<sup>3</sup>&#160;</dt>\n\
      <dd>The type to use in <a href=\"/Native\" title=\"Native\">native</a> code\
      \ instead of this struct type. This is mainly a hack in Unreal Engine 3 to declare\
      \ variables in UnrealScript with types the UnrealScript language does not provide.\
      \ There are only three instances of this syntax in <a href=\"/UT3\" title=\"\
      UT3\" class=\"mw-redirect\">UT3</a>. The structs <a href=\"/UE3:Object_(UT3)#qword\"\
      \ title=\"UE3:Object (UT3)\">Object.qword</a> and <a href=\"/UE3:Object_(UT3)#double\"\
      \ title=\"UE3:Object (UT3)\">Object.double</a> represent the native types <a\
      \ href=\"http://en.wikipedia.org/wiki/Qword#Dword_and_Qword\" class=\"extiw\"\
      \ title=\"wp:Qword\">QWORD</a> and <a href=\"http://en.wikipedia.org/wiki/Double_precision_floating-point_format\"\
      \ class=\"extiw\" title=\"wp:Double precision floating-point format\">DOUBLE</a>\
      \ respectively, and the struct <a href=\"/UE3:UIEditorOptions_(UT3)#ViewportDimension\"\
      \ title=\"UE3:UIEditorOptions (UT3)\">UIEditorOptions.ViewportDimension</a>\
      \ represents the native type <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://docs.wxwidgets.org/trunk/classwx_rect.html\">WxRect</a>.</dd>\n</dl>\n\
      <h2><span class=\"mw-headline\" id=\"Member_declarations\">Member declarations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Structs?section=6\" title=\"Edit section: Member declarations\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Struct\
      \ members are declared like class <a href=\"/Variables\" title=\"Variables\"\
      >variables</a>. A variable group name or certain <a href=\"/Variables#Modifiers\"\
      \ title=\"Variables\">variable modifiers</a> don't make sense for struct members,\
      \ though.</p>\n<p>Note that in order to refer to structs declared in other classes,\
      \ you may need to use <a href=\"/DependsOn\" title=\"DependsOn\" class=\"mw-redirect\"\
      ><code>dependson</code> modifier</a>.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Default_member_values\">Default member values</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Structs?section=7\"\
      \ title=\"Edit section: Default member values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>By default all struct member variables are initialized\
      \ with the <a href=\"/edit/Null_value?redlink=1\" class=\"new\" title=\"Null\
      \ value (page does not exist)\">null value</a> of the corresponding type.</p>\n\
      <p>Starting with <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal\
      \ Engine 3</a>, struct members can also have a default value other than the\
      \ corresponding null value. This can be defined in a <a href=\"/Structdefaultproperties\"\
      \ title=\"Structdefaultproperties\" class=\"mw-redirect\">structdefaultproperties</a>\
      \ block inside the struct declaration. See <a href=\"/Defaultproperties#Default_struct_properties\"\
      \ title=\"Defaultproperties\">structdefaultproperties</a> for more details.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Native_struct_code\">Native struct code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Structs?section=8\" title=\"Edit section: Native struct code\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Like\
      \ native <a href=\"/Class#Native_class_code\" title=\"Class\" class=\"mw-redirect\"\
      >classes</a>, some structs in <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"\
      new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine 2</a> and\
      \ 3 games may contain native code snippets(<a href=\"/Cpptext\" title=\"Cpptext\"\
      >cpptext</a>) in UnrealScript. These declarations do not affect UnrealScript\
      \ directly, but they are exported when auto-generating native headers while\
      \ compiling UnrealScript classes. In <a href=\"/Unreal_Tournament_2004\" title=\"\
      Unreal Tournament 2004\">UT2004</a> there are only two struct like this, <a\
      \ href=\"/UE2:GUI_(UT2004)#GUITreeNode\" title=\"UE2:GUI (UT2004)\">GUI.GUITreeNode</a>\
      \ and <a href=\"/UE2:GUIMultiColumnList_(UT2004)#MultiColumnSortData\" title=\"\
      UE2:GUIMultiColumnList (UT2004)\">GUIMultiColumnList.MultiColumnSortData</a>.\
      \ In Unreal Engine 3 games this is a much more common sight, especially in UI-related\
      \ classes.</p>\n<p>In Unreal Engine 2 native struct code is enclosed in a <b>cppstruct</b>\
      \ block. Unreal Engine 3 uses a <b>structcpptext</b> block instead.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Accessing_structs\">Accessing structs</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Structs?section=9\" title=\"Edit section: Accessing structs\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Accessing\
      \ a struct is as easily as accessing a <a href=\"/Class\" title=\"Class\" class=\"\
      mw-redirect\">class</a>, here's an example.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> A <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Actor</span>;\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> LinearColor RedColor;\n\
      \ \n<span class=\"co1\">// Modify RedColor at Runtime rather than on defaultproperties.</span>\n\
      <span class=\"kw1\">event</span> <span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw6\">super</span>.<span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;  <span class=\"co1\">//\
      \ Call the parent(i.e. Actor) PreBeginPlay() event</span>\n    RedColor.<span\
      \ class=\"me0\">R</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\
      \ <span class=\"co1\">// Make RedColor really red, assuming A is 1.0 and G and\
      \ B are 0.0.</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"Accessing_structs_in_arrays\">Accessing structs\
      \ in arrays</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Structs?section=10\" title=\"Edit section: Accessing\
      \ structs in arrays\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>When working with structs in arrays you need to be aware of the difference\
      \ between an <a href=\"/ForEach_loop\" title=\"ForEach loop\">iterator</a> and\
      \ a regular <a href=\"/For_loop\" title=\"For loop\">loop</a>.</p>\n<p>An iterator\
      \ will create a copy of the actual struct while a loop will use references to\
      \ the existing structs. That means that you can not change values of the original\
      \ struct when using iterators.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">class</span> A <span class=\"kw1\">extends</span> <span\
      \ class=\"kw9\">Actor</span>;\n \n<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> array<span class=\"sy0\">&lt;</span>LinearColor<span\
      \ class=\"sy0\">&gt;</span> Colors;\n \n<span class=\"co1\">// Modify Colors\
      \ at Runtime rather than on defaultproperties.</span>\n<span class=\"kw1\">event</span>\
      \ <span class=\"kw4\">PreBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n    <span class=\"kw1\">local</span> LinearColor\
      \ <span class=\"kw5\">Iterator</span>;\n \n    <span class=\"kw6\">super</span>.<span\
      \ class=\"kw4\">PreBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;  <span class=\"co1\">// Call the parent(i.e. Actor) PreBeginPlay()\
      \ event</span>\n \n    <span class=\"kw2\">foreach</span> Colors<span class=\"\
      br0\">(</span><span class=\"kw5\">Iterator</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n        <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"kw5\">Iterator</span>.<span class=\"me0\"\
      >G</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"kw5\">Iterator</span>.<span\
      \ class=\"me0\">B</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span\
      \ class=\"br0\">)</span>\n            <span class=\"kw5\">Iterator</span>.<span\
      \ class=\"me0\">R</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\
      \ <span class=\"co1\">// This won't have any effect on the struct values in\
      \ the array.</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> Colors.<span\
      \ class=\"me0\">Length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>Colors<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">G</span> <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">0.0</span> <span class=\"sy0\">&amp;&amp;</span> Colors<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">B</span>\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"\
      br0\">)</span>\n            Colors<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">R</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">1.0</span>; <span class=\"co1\">// This effects the real struct\
      \ values in the array.</span>\n    <span class=\"br0\">}</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<table class=\"navbox nowraplinks\" style=\"\
      \">\n<tr class=\"navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\"\
      \ style=\"\">\n<div style=\"position:relative; width:100%; white-space:nowrap;\"\
      >\n<div class=\"noprint plainlinks\" style=\"background-color:transparent; padding:0;\
      \ font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <strong class=\"selflink\">Structs</strong>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <strong class=\"selflink\">Structs</strong>&#160;(<a href=\"\
      /Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"Rotator\"\
      >Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅\
      \ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"/Static_arrays\"\
      \ title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"/Dynamic_arrays\"\
      \ title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"/Delegates\"\
      \ title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\" title=\"\
      Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body odd\">\n\
      <th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"Literals\"\
      >Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Literals#Boolean_values\"\
      \ title=\"Literals\">Boolean</a>&#160;• <a href=\"/Literals#Float_numbers\"\
      \ title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.148 seconds\nReal time usage: 0.153 seconds\nPreprocessor\
      \ visited node count: 218/1000000\nPreprocessor generated node count: 965/1000000\n\
      Post‐expand include size: 10705/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   63.083      1 - -total\n 40.18%   25.347      1 - Template:Navbox_unrealscript\n\
      \ 29.82%   18.810      1 - Template:Navbox\n  7.14%    4.502      1 - Template:Confirm\n\
      \  5.55%    3.504      1 - Template:Tnavbar\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:4848-0!*!0!!en!*!* and timestamp 20221117071343\
      \ and revision id 44546\n -->\n"
  categories:
  - sortkey: "Structs"
    name: "UnrealScript_reference"
  - sortkey: "Structs"
    name: "Pages_needing_verification"
  links:
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "UT3"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 104
    exists: true
    name: "UE2:GUI (UT2004)"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "UDK"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "GlobalConfig"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "DependsOn"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 104
    exists: true
    name: "UE2:GUIMultiColumnList (UT2004)"
  - ns: 106
    exists: true
    name: "UE3:UIEditorOptions (UT3)"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "UnrealEd"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Native"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: false
    name: "Actor properties window"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Structdefaultproperties"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Class"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Config"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: false
    name: "Null value"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 106
    exists: true
    name: "UE3:Object (UT3)"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Extends"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Unreal Tournament 2004"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Int"
  templates:
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  images: []
  externallinks:
  - "http://docs.wxwidgets.org/trunk/classwx_rect.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "Declaration syntax"
    number: "1"
    index: "1"
    fromtitle: "Structs"
    byteoffset: 773
    anchor: "Declaration_syntax"
  - toclevel: 1
    level: "2"
    line: "Modifiers"
    number: "2"
    index: "2"
    fromtitle: "Structs"
    byteoffset: 1658
    anchor: "Modifiers"
  - toclevel: 2
    level: "3"
    line: "Modifiers affecting UnrealEd"
    number: "2.1"
    index: "3"
    fromtitle: "Structs"
    byteoffset: 2039
    anchor: "Modifiers_affecting_UnrealEd"
  - toclevel: 2
    level: "3"
    line: "Modifiers affecting values"
    number: "2.2"
    index: "4"
    fromtitle: "Structs"
    byteoffset: 2411
    anchor: "Modifiers_affecting_values"
  - toclevel: 2
    level: "3"
    line: "Other modifiers"
    number: "2.3"
    index: "5"
    fromtitle: "Structs"
    byteoffset: 3535
    anchor: "Other_modifiers"
  - toclevel: 1
    level: "2"
    line: "Member declarations"
    number: "3"
    index: "6"
    fromtitle: "Structs"
    byteoffset: 4441
    anchor: "Member_declarations"
  - toclevel: 2
    level: "3"
    line: "Default member values"
    number: "3.1"
    index: "7"
    fromtitle: "Structs"
    byteoffset: 4775
    anchor: "Default_member_values"
  - toclevel: 1
    level: "2"
    line: "Native struct code"
    number: "4"
    index: "8"
    fromtitle: "Structs"
    byteoffset: 5216
    anchor: "Native_struct_code"
  - toclevel: 1
    level: "2"
    line: "Accessing structs"
    number: "5"
    index: "9"
    fromtitle: "Structs"
    byteoffset: 6005
    anchor: "Accessing_structs"
  - toclevel: 2
    level: "3"
    line: "Accessing structs in arrays"
    number: "5.1"
    index: "10"
    fromtitle: "Structs"
    byteoffset: 6437
    anchor: "Accessing_structs_in_arrays"
  displaytitle: "Structs"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Double_precision_floating-point_format"
    name: "wp:Double precision floating-point format"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Qword"
    name: "wp:Qword"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Serialization"
    name: "wp:Serialization"
  wikitext:
    text: "A '''struct''' (or '''structure''') is a composite data type in [[UnrealScript]],\
      \ that can contain multiple member variables of (almost) any type, including\
      \ another struct type. Structs are ''not'' reference types, that means a variable\
      \ of a struct type actually contains the struct data itself, not a reference\
      \ to the struct data. This imposes an important restriction on struct types:\
      \ a struct may not directly or indirectly contain a variable of that same struct\
      \ type.\n\n'''Note:''' The compiler will probably not complain about a struct\
      \ violating this restriction. However, if the struct type is used to declare\
      \ any class or local variables or function parameters or return types, the compiler\
      \ will likely crash as it attempts to allocate an infinite amount of memory!\n\
      \n==Declaration syntax==\nThe general syntax of a struct declaration is:\n '''struct'''\
      \ [[#Modifiers|''[modifiers]'']] ''structname'' ['''[[extends]]''' ''parentstruct'']\
      \ '''{'''\n   ...\n '''};'''\nLike [[enums]], struct declarations may appear\
      \ either as standalone declaration, in which case they must be followed by a\
      \ semicolon, or as inline declaration instead of the type specification in variable\
      \ declarations. Struct declarations may be contained in other struct declarations,\
      \ both standalone or in variable declarations. There is no difference between\
      \ declaring a struct at the class level and within another struct or between\
      \ a standalone and inline declaration, in all cases the struct is a direct member\
      \ of the class.\n\nRemember that all members of an UnrealScript class share\
      \ the same namespace. A struct declaration may hide any member of a parent class\
      \ if it has the same name.\n\n==Modifiers==\nStruct modifiers are not available\
      \ in [[Unreal Engine 1]]. Most struct modifiers are related to native code.\
      \ \n* <sup>2</sup> &ndash; The modifier is available in [[Unreal Engine 2]].\n\
      * <sup>3</sup> &ndash; The modifier is available in [[Unreal Engine 3]].\n*\
      \ <sup>3+</sup> &ndash; The modifier is available in later [[Unreal Engine 3]]\
      \ versions, such as the [[UDK]].\n\n===Modifiers affecting UnrealEd=== \n; Long<sup>2</sup>{{confirm}}:\
      \ Specifies that the struct contains many members and should not be examined\
      \ when generating a value string for struct variables in [[UnrealEd]]'s [[Actor\
      \ properties window]]. Usually structs like [[Vector]] are displayed as \"(X=1.2,Y=3.4,Z=5.6)\"\
      , but with the ''long'' modifier only \"(...)\" is displayed.\n\n===Modifiers\
      \ affecting values===\n; Immutable<sup>3</sup>, ImmutableWhenCooked<sup>3</sup>\
      \ : The struct uses [[wp:Serialization|binary serialization]](in previous engine\
      \ versions some structs used hardcoded binary serialization in c++ e.g. [[Vector]],\
      \ [[Rotator]] and [[Color]] etc). Without this flag, each struct member will\
      \ be saved with a ''nameindex'' followed by a ''packedbyte'', ''size'' and ''arrayindex'',\
      \ then the value of the specific member, thus increases file size and slows\
      \ down the serialization process.\n; Atomic<sup>3</sup>, AtomicWhenCooked<sup>3</sup>\
      \ : Indicates that this struct should always be serialized as a single unit;\
      \ if any property in the struct differs from its defaults, then all elements\
      \ of the struct will be serialized.\n; StrictConfig<sup>3</sup> : When the struct\
      \ variable is flagged with ''[[config]]/[[GlobalConfig|globalconfig]]'' then\
      \ only members with the flag ''config/globalconfig'' will be readable from the\
      \ .ini, instead of all members.\n; Transient<sup>2,3</sup> : See [[Variables#Modifiers_affecting_values|Transient]]\
      \ but instead it applies to all the members of the struct.\n\n===Other modifiers===\n\
      ; Export<sup>2,3</sup> : The struct is supposed to be exported to native headers.\n\
      ; Init<sup>2,3</sup> : '''???'''\n; Native<sup>2,3</sup> : The struct includes\
      \ native logic.\n; {''native type name''}<sup>3</sup> : The type to use in [[native]]\
      \ code instead of this struct type. This is mainly a hack in Unreal Engine 3\
      \ to declare variables in UnrealScript with types the UnrealScript language\
      \ does not provide. There are only three instances of this syntax in [[UT3]].\
      \ The structs [[UE3:Object (UT3)#qword|Object.qword]] and [[UE3:Object (UT3)#double|Object.double]]\
      \ represent the native types [[wp:Qword#Dword_and_Qword|QWORD]] and [[wp:Double_precision_floating-point_format|DOUBLE]]\
      \ respectively, and the struct [[UE3:UIEditorOptions (UT3)#ViewportDimension|UIEditorOptions.ViewportDimension]]\
      \ represents the native type [http://docs.wxwidgets.org/trunk/classwx_rect.html\
      \ WxRect].\n\n==Member declarations==\nStruct members are declared like class\
      \ [[variables]]. A variable group name or certain [[Variables#Modifiers|variable\
      \ modifiers]] don't make sense for struct members, though.\n\nNote that in order\
      \ to refer to structs declared in other classes, you may need to use\n[[DependsOn|<code>dependson</code>\
      \ modifier]].\n\n===Default member values===\nBy default all struct member variables\
      \ are initialized with the [[null value]] of the corresponding type.\n\nStarting\
      \ with [[Unreal Engine 3]], struct members can also have a default value other\
      \ than the corresponding null value. This can be defined in a [[structdefaultproperties]]\
      \ block inside the struct declaration. See [[Defaultproperties#Default_struct_properties|structdefaultproperties]]\
      \ for more details.\n\n==Native struct code==\nLike native [[class#Native class\
      \ code|class]]es, some structs in [[Unreal Engine 2]] and 3 games may contain\
      \ native code snippets([[cpptext]]) in UnrealScript. These declarations do not\
      \ affect UnrealScript directly, but they are exported when auto-generating native\
      \ headers while compiling UnrealScript classes. In [[Unreal Tournament 2004|UT2004]]\
      \ there are only two struct like this, [[UE2:GUI (UT2004)#GUITreeNode|GUI.GUITreeNode]]\
      \ and [[UE2:GUIMultiColumnList (UT2004)#MultiColumnSortData|GUIMultiColumnList.MultiColumnSortData]].\
      \ In Unreal Engine 3 games this is a much more common sight, especially in UI-related\
      \ classes.\n\nIn Unreal Engine 2 native struct code is enclosed in a '''cppstruct'''\
      \ block. Unreal Engine 3 uses a '''structcpptext''' block instead.\n\n==Accessing\
      \ structs==\nAccessing a struct is as easily as accessing a [[class]], here's\
      \ an example.\n<uscript>\nclass A extends Actor;\n\nvar() LinearColor RedColor;\n\
      \n// Modify RedColor at Runtime rather than on defaultproperties.\nevent PreBeginPlay()\n\
      {\n    super.PreBeginPlay();  // Call the parent(i.e. Actor) PreBeginPlay()\
      \ event\n    RedColor.R = 1.0; // Make RedColor really red, assuming A is 1.0\
      \ and G and B are 0.0.\n}\n</uscript>\n\n===Accessing structs in arrays===\n\
      When working with structs in arrays you need to be aware of the difference between\
      \ an [[ForEach loop|iterator]] and a regular [[For loop|loop]].\n\nAn iterator\
      \ will create a copy of the actual struct while a loop will use references to\
      \ the existing structs. That means that you can not change values of the original\
      \ struct when using iterators.\n<uscript>\nclass A extends Actor;\n\nvar() array<LinearColor>\
      \ Colors;\n\n// Modify Colors at Runtime rather than on defaultproperties.\n\
      event PreBeginPlay()\n{\n    local int i;\n    local LinearColor Iterator;\n\
      \n    super.PreBeginPlay();  // Call the parent(i.e. Actor) PreBeginPlay() event\n\
      \n    foreach Colors(Iterator)\n    {\n        if (Iterator.G == 0.0 && Iterator.B\
      \ == 0.0)\n            Iterator.R = 1.0; // This won't have any effect on the\
      \ struct values in the array.\n    }\n\n    for (i = 0; i < Colors.Length; i++)\n\
      \    {\n        if (Colors[i].G == 0.0 && Colors[i].B == 0.0)\n            Colors[i].R\
      \ = 1.0; // This effects the real struct values in the array.\n    }\n}\n</uscript>\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 44546
name: "Structs"
revision:
  revid: 44546
  parentid: 44545
  user: "Wormbo"
  timestamp: 1313589028.000000000
  comment: "/* Accessing structs in arrays */ fixed the new example code"
timestamp: 1668754663.740536000
