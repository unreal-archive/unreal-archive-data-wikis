---
parse:
  title: "Legacy:Object Oriented Programming Overview"
  text:
    text: "<p>This tutorial assumes you know a little bit about programming already.\
      \ Maybe you've written a bit of javascript or some perl, or some BASIC programs.\
      \ Here we explain the additional concepts you need to program in an Object Oriented\
      \ style.</p>\n<p>Writing UnrealScript is not possible without writing <b>classes</b>\
      \ and using <b>objects</b>. Every player, vehicle, weapon, pickup, and light\
      \ is an object. Even abstract things like the game rules and the scoreboard\
      \ are objects. Every object belongs to a Class, which describes what data and\
      \ functions are applicable to that object. For example, each player has an <a\
      \ href=\"/Legacy:AssaultRifle\" title=\"Legacy:AssaultRifle\">AssaultRifle</a>.\
      \ These are all of the same Class: every AssaultRifle has primary and secondary\
      \ fire, and has a number of bullets and a number of grenades; but they are separate\
      \ Objects (because each AssaultRifle in a game has a different number of bullets\
      \ and grenades remaining).</p>\n<dl>\n<dt>class</dt>\n<dd>the 'blueprint' for\
      \ objects</dd>\n<dt>object</dt>\n<dd>an actual thing in the world</dd>\n</dl>\n\
      <p>There are many ways to think of classes and objects: you can imagine a class\
      \ as a \"recipe\" or a \"blueprint\" for making things. It defines <b>properties</b>\
      \ that every object of this class will have (even if the values may differ),\
      \ and <b>functions</b> (or <b>methods</b>) that every object of this class can\
      \ perform.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Creating_a_Class\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Creating a Class</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Where.27s_My_Pizza.3F\"><span class=\"tocnumber\">1.1</span> <span\
      \ class=\"toctext\">Where's My Pizza?</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-3\"><a href=\"#Subclassing\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Subclassing</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-4\"><a href=\"#What_next\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">What next</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-5\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Discussion\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Creating_a_Class\">Creating a Class</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=1\" title=\"\
      Edit section: Creating a Class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Say you want to create a Pizza. A Pizza is a meal,\
      \ so:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> Pizza <span class=\"kw1\">extends</span> Meal;</pre></div>\n</div>\n\
      <p>A Pizza is generally divided into smaller parts:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ NumberOfParts<span class=\"sy0\">=</span><span class=\"nu0\">1</span>;</pre></div>\n\
      </div>\n<p>Also, a pizza remembers whether it has tomato sauce or cheese on\
      \ it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >var</span> <span class=\"kw5\">bool</span> bHasSauce;\n<span class=\"kw1\"\
      >var</span> <span class=\"kw5\">bool</span> bHasCheese;</pre></div>\n</div>\n\
      <p>Those are all properties that exist on any pizza you may create.</p>\n<p>Now\
      \ for some methods:</p>\n<p>You can slice the pizza:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> Slice<span class=\"br0\"\
      >(</span>pieces<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  NumberOfParts<span class=\"sy0\">=</span>pieces\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>You can add sauce, or eat the sauce, you can add cheese, or eat the\
      \ cheese:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> AddSauce<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  bHasSauce <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n \n<span class=\"\
      kw1\">function</span> EatSauce<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  bHasSauce  <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">function</span> AddCheese<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  bHasCheese <span class=\"sy0\"\
      >=</span> <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n\
      <span class=\"kw1\">function</span> EatCheese<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  bHasCheese <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>You can eat parts of the pizza:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> EatParts<span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> number<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  NumberOfParts <span class=\"sy0\">-=</span> number;\n \n \
      \ <span class=\"kw2\">if</span><span class=\"br0\">(</span>NumberOfParts <span\
      \ class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>\n    <span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Notice that if the pizza object has 0 parts left, it no longer exists and\
      \ must be <a href=\"/Legacy:Destroying_Objects\" title=\"Legacy:Destroying Objects\"\
      >destroyed</a>. If you really wanted to be polite, you might want the EatParts\
      \ function to return a value to tell the person trying to eat it if they have\
      \ been successful or not, for instance trying to eat four parts when there are\
      \ only three left.</p>\n<h3><span class=\"mw-headline\" id=\"Where.27s_My_Pizza.3F\"\
      >Where's My Pizza?</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=2\"\
      \ title=\"Edit section: Where's My Pizza?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Mind you, what we've been doing up to here is just\
      \ describing what a pizza looks like and how to create (and eat) it. It's like\
      \ you're writing a recipe (that's your UnrealScript class).</p>\n<p>You still\
      \ don't <i>have</i> a pizza to eat right now, even though you perfectly know\
      \ <i>how</i> to eat it and what it would look like. In real life, you'd have\
      \ to gather kitchen utensils and pizza ingredients and bake one; in <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>, you can\
      \ just wave your magic wand and <a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">spawn</a> one:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Now that I know what a pizza looks\
      \ like, I'm hungry and want to eat one.</span>\n \n<span class=\"kw1\">local</span>\
      \ Pizza MyPizza;             <span class=\"co1\">// That's where I'm going to\
      \ hold the pizza.  Like a dish.</span>\n \nMyPizza <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span> <span class=\"st0\">'Pizza'</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// Hooray!  Pizza's ready!</span>\nMyPizza.<span class=\"\
      me0\">Slice</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span\
      \ class=\"br0\">)</span>;                <span class=\"co1\">// Cut into 8 parts</span>\n\
      MyPizza.<span class=\"me0\">EatParts</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span>;             <span class=\"\
      co1\">// Now I'm eating two parts of my pizza.</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Subclassing\">Subclassing</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=3\"\
      \ title=\"Edit section: Subclassing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Now, you want a better Pizza, with mushrooms and bacon\
      \ and egg. This is an enhanced pizza, so:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> BetterPizza <span class=\"kw1\">extends</span>\
      \ Pizza;</pre></div>\n</div>\n<p>This subclass <i>inherits</i> all the variables\
      \ (<i>NumberOfParts</i>, <i>bHasCheese</i>, etc) from the Pizza class. So it\
      \ already has cheese and it has sauce, but this sauce doesn't include egg and\
      \ mushrooms, so we have to change this:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">bool</span> bHasMushrooms;\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">bool</span> bHasEgg;\n \n\
      <span class=\"kw1\">function</span> AddSauce<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  bHasEgg <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n  bHasMushrooms <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n  <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">AddSauce</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Hold it! What's\
      \ this \"Super\" thing?</p>\n<p>It is a way to call the original Pizza's AddSauce\
      \ function. This way, we don't have to re-code the Sauce Management&#160;:D\
      \ Same goes for EatSauce:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> EatSauce<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  bHasEgg <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n  bHasMushrooms <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n  <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">EatSauce</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>The BetterPizza\
      \ also inherited the functions to handle the parts. It is a <i>complete</i>,\
      \ functional Pizza&#160;:)</p>\n<p>Now that you've mastered the use of a single\
      \ object, you can begin to work with multiple objects that interact with each\
      \ other. This is covered in the next part of this this tutorial.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"What_next\">What next</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=4\"\
      \ title=\"Edit section: What next\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Using_Objects\" title=\"\
      Legacy:Using Objects\">Using objects</a> – part two of this tutorial</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=5\" title=\"\
      Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference\"\
      \ title=\"Legacy:UnrealScript Language Reference\">UnrealScript Language Reference</a>\
      \ – Tim Sweeney's introduction to UnrealScript</li>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference/States\"\
      \ title=\"Legacy:UnrealScript Language Reference/States\">Object states</a>\
      \ in UnrealScript</li>\n<li><a href=\"/Legacy:Unreal_Object_Oriented_Programming\"\
      \ title=\"Legacy:Unreal Object Oriented Programming\">Unreal Object Oriented\
      \ Programming</a> – Introduction to object orientation and modding Unreal in\
      \ general</li>\n<li><a href=\"/Legacy:Peppers_And_Pepper_Grinders\" title=\"\
      Legacy:Peppers And Pepper Grinders\">Peppers And Pepper Grinders</a> – Another\
      \ analogy to help more easily understand object oriented programming</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Object_Oriented_Programming_Overview?section=6\" title=\"\
      Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Sweavo:</b> I'd like to see the example replaced by one you can actually\
      \ try in-game.</p>\n<p><b>MythOpus:</b> I think this page is more for the theory\
      \ of Object Oriented Programming, rather than seeing how it works, if that makes\
      \ sense. I think an actual working example that one would be able to try would\
      \ be pointless at this stage as it would require someone to go through the steps\
      \ of setting up a package, which many may not know how to do at this point.</p>\n\
      <p><b>Sweavo:</b> true enough. But a crash course in OO programming is a bit\
      \ off-topic for an unreal wiki, no? I take your point about the package though.</p>\n\
      <p><b>MythOpus:</b> I guess it is slightly off-topic, but not entirely as UnrealScript\
      \ is an Object Oriented language.</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.132 seconds\nReal time usage: 0.134 seconds\nPreprocessor visited\
      \ node count: 114/1000000\nPreprocessor generated node count: 236/1000000\n\
      Post‐expand include size: 36/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2349-0!*!0!!en!*!*\
      \ and timestamp 20221118014708 and revision id 5655\n -->\n"
  categories:
  - sortkey: "Object Oriented Programming Overview"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Peppers And Pepper Grinders"
  - ns: 100
    exists: true
    name: "Legacy:Destroying Objects"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/States"
  - ns: 100
    exists: true
    name: "Legacy:AssaultRifle"
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: true
    name: "Legacy:Using Objects"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Object Oriented Programming"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Creating a Class"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 1307
    anchor: "Creating_a_Class"
  - toclevel: 2
    level: "3"
    line: "Where's My Pizza?"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 2652
    anchor: "Where.27s_My_Pizza.3F"
  - toclevel: 1
    level: "2"
    line: "Subclassing"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 3593
    anchor: "Subclassing"
  - toclevel: 1
    level: "2"
    line: "What next"
    number: "3"
    index: "4"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 4727
    anchor: "What_next"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "5"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 4818
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "6"
    fromtitle: "Legacy:Object_Oriented_Programming_Overview"
    byteoffset: 5356
    anchor: "Discussion"
  displaytitle: "Legacy:Object Oriented Programming Overview"
  iwlinks: []
  wikitext:
    text: "This tutorial assumes you know a little bit about programming already.\
      \  Maybe you've written a bit of javascript or some perl, or some BASIC programs.\
      \  Here we explain the additional concepts you need to program in an Object\
      \ Oriented style.\n\nWriting UnrealScript is not possible without writing '''classes'''\
      \ and using '''objects'''.  Every player, vehicle, weapon, pickup, and light\
      \ is an object.  Even abstract things like the game rules and the scoreboard\
      \ are objects.  Every object belongs to a Class, which describes what data and\
      \ functions are applicable to that object.  For example, each player has an\
      \ [[Legacy:AssaultRifle|AssaultRifle]].  These are all of the same Class: every\
      \ AssaultRifle has primary and secondary fire, and has a number of bullets and\
      \ a number of grenades; but they are separate Objects (because each AssaultRifle\
      \ in a game has a different number of bullets and grenades remaining).\n\n;\
      \ class: the 'blueprint' for objects\n; object: an actual thing in the world\n\
      \nThere are many ways to think of classes and objects: you can imagine a class\
      \ as a \"recipe\" or a \"blueprint\" for making things.  It defines '''properties'''\
      \ that every object of this class will have (even if the values may differ),\
      \ and '''functions''' (or '''methods''') that every object of this class can\
      \ perform.\n\n==Creating a Class ==\n\nSay you want to create a Pizza. A Pizza\
      \ is a meal, so:\n\n<uscript>\nclass Pizza extends Meal;\n</uscript>\n\nA Pizza\
      \ is generally divided into smaller parts:\n\n<uscript>\nvar int NumberOfParts=1;\n\
      </uscript>\n\nAlso, a pizza remembers whether it has tomato sauce or cheese\
      \ on it:\n\n<uscript>\nvar bool bHasSauce;\nvar bool bHasCheese;\n</uscript>\n\
      \nThose are all properties that exist on any pizza you may create.\n\nNow for\
      \ some methods:\n\nYou can slice the pizza:\n\n<uscript>\nfunction Slice(pieces)\n\
      {\n  NumberOfParts=pieces\n}\n</uscript>\n\nYou can add sauce, or eat the sauce,\
      \ you can add cheese, or eat the cheese:\n\n<uscript>\nfunction AddSauce()\n\
      {\n  bHasSauce = true;\n}\n\n\nfunction EatSauce()\n{\n  bHasSauce  = false;\n\
      }\n\nfunction AddCheese()\n{\n  bHasCheese = true;\n}\n\nfunction EatCheese()\n\
      {\n  bHasCheese = false;\n}\n</uscript>\n\nYou can eat parts of the pizza:\n\
      \n<uscript>\nfunction EatParts(int number)\n{\n  NumberOfParts -= number;\n\n\
      \  if(NumberOfParts <= 0)\n    Destroy();\n\n}\n</uscript>\n\nNotice that if\
      \ the pizza object has 0 parts left, it no longer exists and must be [[Legacy:Destroying\
      \ Objects|destroyed]]. If you really wanted to be polite, you might want the\
      \ EatParts function to return a value to tell the person trying to eat it if\
      \ they have been successful or not, for instance trying to eat four parts when\
      \ there are only three left.\n\n===Where's My Pizza? ===\n\nMind you, what we've\
      \ been doing up to here is just describing what a pizza looks like and how to\
      \ create (and eat) it.  It's like you're writing a recipe (that's your UnrealScript\
      \ class).\n\nYou still don't ''have'' a pizza to eat right now, even though\
      \ you perfectly know ''how'' to eat it and what it would look like.  In real\
      \ life, you'd have to gather kitchen utensils and pizza ingredients and bake\
      \ one; in [[Legacy:UnrealScript|UnrealScript]], you can just wave your magic\
      \ wand and [[Legacy:Creating Actors And Objects|spawn]] one:\n\n<uscript>\n\
      // Now that I know what a pizza looks like, I'm hungry and want to eat one.\n\
      \nlocal Pizza MyPizza;             // That's where I'm going to hold the pizza.\
      \  Like a dish.\n\nMyPizza = Spawn(class 'Pizza');  // Hooray!  Pizza's ready!\n\
      MyPizza.Slice(8);                // Cut into 8 parts\nMyPizza.EatParts(2); \
      \            // Now I'm eating two parts of my pizza.\n</uscript>\n\n==Subclassing\
      \ ==\n\nNow, you want a better Pizza, with mushrooms and bacon and egg. This\
      \ is an enhanced pizza, so:\n\n<uscript>\nclass BetterPizza extends Pizza;\n\
      </uscript>\n\nThis subclass ''inherits'' all the variables (''NumberOfParts'',\
      \ ''bHasCheese'', etc) from the Pizza class. So it already has cheese and it\
      \ has sauce, but this sauce doesn't include egg and mushrooms, so we have to\
      \ change this:\n\n<uscript>\nvar bool bHasMushrooms;\nvar bool bHasEgg;\n\n\
      function AddSauce()\n{\n  bHasEgg = true;\n  bHasMushrooms = true;\n  Super.AddSauce();\n\
      }\n</uscript>\n\nHold it! What's this \"Super\" thing?\n\nIt is a way to call\
      \ the original Pizza's AddSauce function. This way, we don't have to re-code\
      \ the Sauce Management :D Same goes for EatSauce:\n\n<uscript>\nfunction EatSauce()\n\
      {\n  bHasEgg = false;\n  bHasMushrooms = false;\n  Super.EatSauce();\n}\n</uscript>\n\
      \nThe BetterPizza also inherited the functions to handle the parts. It is a\
      \ ''complete'', functional Pizza :)\n\nNow that you've mastered the use of a\
      \ single object, you can begin to work with multiple objects that interact with\
      \ each other. This is covered in the next part of this this tutorial.\n\n==What\
      \ next ==\n* [[Legacy:Using Objects|Using objects]] &ndash; part two of this\
      \ tutorial\n\n==Related Topics==\n* [[Legacy:UnrealScript Language Reference|UnrealScript\
      \ Language Reference]] &ndash; Tim Sweeney's introduction to UnrealScript\n\
      * [[Legacy:UnrealScript Language Reference/States|Object states]] in UnrealScript\n\
      * [[Legacy:Unreal Object Oriented Programming|Unreal Object Oriented Programming]]\
      \ &ndash; Introduction to object orientation and modding Unreal in general\n\
      * [[Legacy:Peppers And Pepper Grinders|Peppers And Pepper Grinders]] &ndash;\
      \ Another analogy to help more easily understand object oriented programming\n\
      \n==Discussion==\n\n'''Sweavo:''' I'd like to see the example replaced by one\
      \ you can actually try in-game.\n\n'''MythOpus:''' I think this page is more\
      \ for the theory of Object Oriented Programming, rather than seeing how it works,\
      \ if that makes sense.  I think an actual working example that one would be\
      \ able to try would be pointless at this stage as it would require someone to\
      \ go through the steps of setting up a package, which many may not know how\
      \ to do at this point.\n\n'''Sweavo:''' true enough.  But a crash course in\
      \ OO programming is a bit off-topic for an unreal wiki, no?  I take your point\
      \ about the package though.\n\n'''MythOpus:''' I guess it is slightly off-topic,\
      \ but not entirely as UnrealScript is an Object Oriented language.\n\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 5655
name: "Legacy:Object Oriented Programming Overview"
revision:
  revid: 5655
  parentid: 5656
  user: "MythOpus"
  timestamp: 1196048278.000000000
  comment: "response"
timestamp: 1668764179.009004000
