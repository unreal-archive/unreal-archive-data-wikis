---
parse:
  title: "Legacy:Static Function"
  text:
    text: "<p>Static functions are functions which may be called without an object\
      \ or actor. Instead, they are called on the class itself. They carry certain\
      \ restrictions. See also <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">Function syntax</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Syntax\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Syntax</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Calling_A_Static_Function\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Calling A Static Function</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-3\"><a href=\"#Restrictions_Of_Static_Functions\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Restrictions Of Static\
      \ Functions</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"\
      #Uses_and_Implentation\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Uses and Implentation</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"\
      mw-headline\" id=\"Syntax\">Syntax</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Static_Function?section=1\"\
      \ title=\"Edit section: Syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><tt><b>static</b> <i>&lt;other function modifiers&gt;</i>\
      \ <b>function</b>/<b>operator</b> <i>&lt;type&gt;</i> <i>&lt;function name&gt;</i>\
      \ <b>(</b> <i>&lt;parameters&gt;</i> <b>)</b><br />\n<b>{</b><br />\n&#160;\
      \ ...<br />\n<b>}</b></tt></p>\n<p>Static functions which are declared as <code>final</code>\
      \ are automatically simulated as well. The question of \"simulated\" or not\
      \ doesn't apply to static functions, since, technically, a static function is\
      \ called in context of a class, not an Actor, and a class is a non-Actor object.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Calling_A_Static_Function\">Calling A Static\
      \ Function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Static_Function?section=2\" title=\"Edit section:\
      \ Calling A Static Function\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Static functions can be called like any other function\
      \ or using this special syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">class</span><span class=\"st0\">'ClassName'</span>.<span\
      \ class=\"kw1\">static</span>.<span class=\"me0\">FunctionName</span><span class=\"\
      br0\">(</span>...<span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>In other\
      \ words, they can be called without an object of that class available. You can\
      \ also substitute a class variable, like so:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">RunTimeClass.<span class=\"kw1\">static</span>.<span class=\"\
      me0\">FunctionName</span><span class=\"br0\">(</span>...<span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p>(RunTimeClass is a variable of type \"class\"\
      : see <a href=\"/Legacy:Peppers_And_Pepper_Grinders\" title=\"Legacy:Peppers\
      \ And Pepper Grinders\">Peppers And Pepper Grinders</a>.)</p>\n<h2><span class=\"\
      mw-headline\" id=\"Restrictions_Of_Static_Functions\">Restrictions Of Static\
      \ Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Static_Function?section=3\" title=\"Edit section:\
      \ Restrictions Of Static Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Static functions can only access variables passed\
      \ to them as parameters or the default values of variables (logical, since there\
      \ might not exist any actors of that class).</p>\n<p>The only function calls\
      \ that can be made from a static function are other static functions. However,\
      \ if you have a valid reference to an object instance, that object is still\
      \ capable of calling functions, like so:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">static</span> <span class=\"kw1\">function</span>\
      \ CallNonStaticFunctions<span class=\"br0\">(</span> <span class=\"kw9\">actor</span>\
      \ Other <span class=\"br0\">)</span>\n \n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw9\">Projectile</span> P;\n \n \
      \ <span class=\"kw2\">if</span><span class=\"br0\">(</span> Other <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    Other.<span class=\"me0\">BroadcastMessage</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"You have to let it all go Neo,\
      \ fear, doubt, and disbelief.\"</span><span class=\"br0\">)</span>;\n \n   \
      \ <span class=\"co1\">//You can access any variable belonging to the actor as\
      \ well.</span>\n    Other.<span class=\"kw3\">Log</span><span class=\"br0\"\
      >(</span><span class=\"st0\">\"Level =\"</span><span class=\"sy0\">@</span>Other.<span\
      \ class=\"kw7\">Level</span><span class=\"br0\">)</span>;\n \n    <span class=\"\
      co1\">//You can also call iterators:</span>\n    <span class=\"kw2\">foreach</span>\
      \ Other.<span class=\"kw2\">AllActors</span><span class=\"br0\">(</span> <span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Projectile'</span>, P <span\
      \ class=\"br0\">)</span>\n      P.<span class=\"kw4\">Destroy</span>;\n  <span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Uses_and_Implentation\">Uses and Implentation</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Static_Function?section=4\"\
      \ title=\"Edit section: Uses and Implentation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Static functions have few uses, but they do exist\
      \ - they can be used for a couple of things in my experience:</p>\n<ol>\n<li>A\
      \ class that contains \"global\" functions - for instance math functions that\
      \ you may want to be used by various classes that are not derived from a single\
      \ parent class that can be readily modified. By that I mean something like a\
      \ pawn and a projectile that both require the same function - although you can\
      \ subclass actor and put the functions there, pawn and projectile both provide\
      \ native code that would be lost if you subclassed actor then made your own\
      \ pawn/projectile class. So this can be used to access those functions.</li>\n\
      <li>A highly flexible predefined variable. This is how I use static functions\
      \ - meshes are bundled with their animations so that the actual animation name\
      \ is not used. A \"meshcontroller\" static object has static functions which\
      \ return the appropriate animation and mesh for that meshcontroller. Then, instead\
      \ of setting a mesh for an actor, you give your classes a class&lt;meshcontroller&gt;\
      \ and then use the static function to return animation names within the PlayAnim\
      \ call and the mesh can be returned and set in postbeginplay. You can even use\
      \ this to have random animations on meshes that have multiple animations and\
      \ not on others that have only one - it's all modular and transparent to the\
      \ class that's actually calling the playanim.</li>\n</ol>\n<p>Here is an example\
      \ of the above:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">  <span class=\"\
      kw4\">LoopAnim</span><span class=\"br0\">(</span> MyMesh.<span class=\"kw1\"\
      >static</span>.<span class=\"me0\">GetAttackAnim</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>, MyMesh.<span class=\"kw1\">static</span>.<span class=\"\
      me0\">GetAttackAnimRate</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>And in the meshcontroller\
      \ class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\">  <span class=\"\
      kw1\">const</span> numAttackAnims<span class=\"sy0\">=</span><span class=\"\
      nu0\">3</span>;\n \n  <span class=\"co1\">// Didn't use an array to make this\
      \ easier to expand by subclasses.</span>\n  <span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">name</span> AttackAnim1, AttackAnim2, AttackAnim3;\n  <span\
      \ class=\"kw1\">var</span> <span class=\"kw5\">float</span> AttackAnimRate1,\
      \ AttackAnimRate2, AttackAnimRate3;\n \n  <span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">name</span>  GetAttackAnim<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ Temp;\n \n    Temp <span class=\"sy0\">=</span> <span class=\"kw5\">INT</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> numAttackAnims\
      \ <span class=\"br0\">)</span>;\n    <span class=\"kw2\">switch</span><span\
      \ class=\"br0\">(</span> Temp <span class=\"br0\">)</span>\n    <span class=\"\
      br0\">{</span>\n      <span class=\"kw2\">case</span> <span class=\"nu0\">0</span>:\
      \ <span class=\"kw2\">return</span>  <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnim1</span>; <span class=\"kw2\">break</span>;\n    \
      \  <span class=\"kw2\">case</span> <span class=\"nu0\">1</span>: <span class=\"\
      kw2\">return</span>  <span class=\"kw1\">Default</span>.<span class=\"me0\"\
      >AttackAnim2</span>; <span class=\"kw2\">break</span>;\n      <span class=\"\
      kw2\">case</span> <span class=\"nu0\">2</span>: <span class=\"kw2\">return</span>\
      \  <span class=\"kw1\">Default</span>.<span class=\"me0\">AttackAnim3</span>;\
      \ <span class=\"kw2\">break</span>;\n      <span class=\"kw1\">default</span>:\
      \ <span class=\"kw2\">return</span> <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnim1</span>; <span class=\"kw2\">break</span>;\n    <span\
      \ class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n \n  etc...</pre></div>\n\
      </div>\n<p>The problem with that is that if you have multiple attack animations\
      \ that are random you might not get the matching animrate and attackanim, so\
      \ you could remedy that as follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  Temp <span class=\"sy0\">=</span> MyMesh.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">RandomizeAttack</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n  <span class=\"kw4\">LoopAnim</span><span class=\"br0\">(</span>\
      \ MyMesh.<span class=\"kw1\">static</span>.<span class=\"me0\">GetAttackAnim</span><span\
      \ class=\"br0\">(</span> Temp <span class=\"br0\">)</span>, MyMesh.<span class=\"\
      kw1\">static</span>.<span class=\"me0\">GetAttackAnimRate</span><span class=\"\
      br0\">(</span> Temp <span class=\"br0\">)</span> <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>And in the meshcontroller class:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">  <span class=\"kw1\">const</span> numAttackAnims<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">3</span>;\n \n  <span class=\"co1\">// Didn't use an array to\
      \ make this easier to expand by subclasses.</span>\n  <span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">name</span> AttackAnim1, AttackAnim2, AttackAnim3;\n \
      \ <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> AttackAnimRate1,\
      \ AttackAnimRate2, AttackAnimRate3;\n \n  <span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">int</span>   RandomizeAttack<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span>\
      \ <span class=\"kw2\">return</span> <span class=\"kw5\">INT</span><span class=\"\
      br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> numAttackAnims; <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw1\">static</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">name</span>  GetAttackAnim<span class=\"\
      br0\">(</span> <span class=\"kw5\">int</span> AnimNum <span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">switch</span><span\
      \ class=\"br0\">(</span> AnimNum <span class=\"br0\">)</span>\n    <span class=\"\
      br0\">{</span>\n      <span class=\"kw2\">case</span> <span class=\"nu0\">0</span>:\
      \ <span class=\"kw2\">return</span>  <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnim1</span>; <span class=\"kw2\">break</span>;\n    \
      \  <span class=\"kw2\">case</span> <span class=\"nu0\">1</span>: <span class=\"\
      kw2\">return</span>  <span class=\"kw1\">Default</span>.<span class=\"me0\"\
      >AttackAnim2</span>; <span class=\"kw2\">break</span>;\n      <span class=\"\
      kw2\">case</span> <span class=\"nu0\">2</span>: <span class=\"kw2\">return</span>\
      \  <span class=\"kw1\">Default</span>.<span class=\"me0\">AttackAnim3</span>;\
      \ <span class=\"kw2\">break</span>;\n      <span class=\"kw1\">default</span>:\
      \ <span class=\"kw2\">return</span> <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnim1</span>; <span class=\"kw2\">break</span>;\n    <span\
      \ class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n \n \n  etc...</pre></div>\n\
      </div>\n<p>That, however would be slightly hack-ish. Here's an even better way.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">  MyMesh.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">PlayAttackAnim</span><span class=\"br0\">(</span> <span class=\"\
      kw6\">self</span> <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>And\
      \ in the meshcontroller class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  <span class=\"kw1\">const</span> numAttackAnims<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">3</span>;\n \n  <span class=\"co1\">// Didn't use an array to\
      \ make this easier to expand by subclasses.</span>\n  <span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">name</span> AttackAnim1, AttackAnim2, AttackAnim3;\n \
      \ <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> AttackAnimRate1,\
      \ AttackAnimRate2, AttackAnimRate3;\n \n  <span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">function</span> PlayAttackAnim<span class=\"br0\">(</span>\
      \ <span class=\"kw9\">actor</span> HaplessVictim <span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">int</span> Temp;\n \n    Temp <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">INT</span><span class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ numAttackAnims <span class=\"br0\">)</span>;\n    <span class=\"kw2\">switch</span><span\
      \ class=\"br0\">(</span> Temp <span class=\"br0\">)</span>\n    <span class=\"\
      br0\">{</span>\n      <span class=\"kw2\">case</span> <span class=\"nu0\">0</span>:\
      \  HaplessVictim.<span class=\"kw4\">PlayAnim</span><span class=\"br0\">(</span>\
      \ <span class=\"kw1\">Default</span>.<span class=\"me0\">AttackAnim1</span>,\
      \ <span class=\"kw1\">Default</span>.<span class=\"me0\">AttackAnimRate1</span>\
      \ <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n      <span\
      \ class=\"kw2\">case</span> <span class=\"nu0\">1</span>:  HaplessVictim.<span\
      \ class=\"kw4\">PlayAnim</span><span class=\"br0\">(</span> <span class=\"kw1\"\
      >Default</span>.<span class=\"me0\">AttackAnim2</span>, <span class=\"kw1\"\
      >Default</span>.<span class=\"me0\">AttackAnimRate2</span> <span class=\"br0\"\
      >)</span>; <span class=\"kw2\">break</span>;\n      <span class=\"kw2\">case</span>\
      \ <span class=\"nu0\">2</span>:  HaplessVictim.<span class=\"kw4\">PlayAnim</span><span\
      \ class=\"br0\">(</span> <span class=\"kw1\">Default</span>.<span class=\"me0\"\
      >AttackAnim3</span>, <span class=\"kw1\">Default</span>.<span class=\"me0\"\
      >AttackAnimRate3</span> <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n\
      \      <span class=\"kw1\">default</span>: HaplessVictim.<span class=\"kw4\"\
      >PlayAnim</span><span class=\"br0\">(</span> <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnim1</span>, <span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">AttackAnimRate1</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n    <span class=\"br0\">}</span>\n  <span class=\"br0\"\
      >}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.183 seconds\nReal time usage: 0.443 seconds\nPreprocessor visited node count:\
      \ 63/1000000\nPreprocessor generated node count: 206/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2784-0!*!0!!en!*!*\
      \ and timestamp 20221118015700 and revision id 7463\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Peppers And Pepper Grinders"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Syntax"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Static_Function"
    byteoffset: 212
    anchor: "Syntax"
  - toclevel: 1
    level: "2"
    line: "Calling A Static Function"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Static_Function"
    byteoffset: 702
    anchor: "Calling_A_Static_Function"
  - toclevel: 1
    level: "2"
    line: "Restrictions Of Static Functions"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Static_Function"
    byteoffset: 1191
    anchor: "Restrictions_Of_Static_Functions"
  - toclevel: 1
    level: "2"
    line: "Uses and Implentation"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Static_Function"
    byteoffset: 2052
    anchor: "Uses_and_Implentation"
  displaytitle: "Legacy:Static Function"
  iwlinks: []
  wikitext:
    text: "Static functions are functions which may be called without an object or\
      \ actor. Instead, they are called on the class itself. They carry certain restrictions.\
      \ See also [[Legacy:Function Syntax|Function syntax]].\n\n==Syntax ==\n\n<tt>'''static'''\
      \ ''<other function modifiers>'' '''function'''/'''operator''' ''<type>'' ''<function\
      \ name>'' '''(''' ''<parameters>'' ''')'''<br />'''{'''<br /> &nbsp; ...<br\
      \ />'''}'''</tt>\n\nStatic functions which are declared as <code>final</code>\
      \ are automatically simulated as well. The question of \"simulated\" or not\
      \ doesn't apply to static functions, since, technically, a static function is\
      \ called in context of a class, not an Actor, and a class is a non-Actor object.\n\
      \n==Calling A Static Function ==\n\nStatic functions can be called like any\
      \ other function or using this special syntax:\n\n<uscript>class'ClassName'.static.FunctionName(...);</uscript>\n\
      \nIn other words, they can be called without an object of that class available.\
      \ You can also substitute a class variable, like so:\n\n<uscript>RunTimeClass.static.FunctionName(...);</uscript>\n\
      \n(RunTimeClass is a variable of type \"class\": see [[Legacy:Peppers And Pepper\
      \ Grinders|Peppers And Pepper Grinders]].)\n\n==Restrictions Of Static Functions\
      \ ==\n\nStatic functions can only access variables passed to them as parameters\
      \ or the default values of variables (logical, since there might not exist any\
      \ actors of that class).\n\nThe only function calls that can be made from a\
      \ static function are other static functions. However, if you have a valid reference\
      \ to an object instance, that object is still capable of calling functions,\
      \ like so:\n\n<UScript>\n\nstatic function CallNonStaticFunctions( actor Other\
      \ )\n\n{\n  local Projectile P;\n\n  if( Other != None )\n  {\n    Other.BroadcastMessage(\"\
      You have to let it all go Neo, fear, doubt, and disbelief.\");\n\n    //You\
      \ can access any variable belonging to the actor as well.\n    Other.Log(\"\
      Level =\"@Other.Level);\n\n    //You can also call iterators:\n    foreach Other.AllActors(\
      \ class'Projectile', P )\n      P.Destroy;\n  }\n\n</uscript>\n\n==Uses and\
      \ Implentation ==\n\nStatic functions have few uses, but they do exist - they\
      \ can be used for a couple of things in my experience:\n# A class that contains\
      \ \"global\" functions - for instance math functions that you may want to be\
      \ used by various classes that are not derived from a single parent class that\
      \ can be readily modified. By that I mean something like a pawn and a projectile\
      \ that both require the same function - although you can subclass actor and\
      \ put the functions there, pawn and projectile both provide native code that\
      \ would be lost if you subclassed actor then made your own pawn/projectile class.\
      \ So this can be used to access those functions.\n# A highly flexible predefined\
      \ variable. This is how I use static functions - meshes are bundled with their\
      \ animations so that the actual animation name is not used. A \"meshcontroller\"\
      \ static object has static functions which return the appropriate animation\
      \ and mesh for that meshcontroller. Then, instead of setting a mesh for an actor,\
      \ you give your classes a class<meshcontroller> and then use the static function\
      \ to return animation names within the PlayAnim call and the mesh can be returned\
      \ and set in postbeginplay. You can even use this to have random animations\
      \ on meshes that have multiple animations and not on others that have only one\
      \ - it's all modular and transparent to the class that's actually calling the\
      \ playanim.\n\nHere is an example of the above:\n\n<UScript>\n  LoopAnim( MyMesh.static.GetAttackAnim(),\
      \ MyMesh.static.GetAttackAnimRate() );\n\n</uscript>\n\nAnd in the meshcontroller\
      \ class:\n\n<uscript>\n  const numAttackAnims=3;\n\n  // Didn't use an array\
      \ to make this easier to expand by subclasses.\n  var name AttackAnim1, AttackAnim2,\
      \ AttackAnim3;\n  var float AttackAnimRate1, AttackAnimRate2, AttackAnimRate3;\n\
      \n  static function name  GetAttackAnim()\n  {\n    local int Temp;\n\n    Temp\
      \ = INT( FRand() * numAttackAnims );\n    switch( Temp )\n    {\n      case\
      \ 0: return  Default.AttackAnim1; break;\n      case 1: return  Default.AttackAnim2;\
      \ break;\n      case 2: return  Default.AttackAnim3; break;\n      default:\
      \ return Default.AttackAnim1; break;\n    }\n  }\n\n  etc...\n</UScript>\n\n\
      The problem with that is that if you have multiple attack animations that are\
      \ random you might not get the matching animrate and attackanim, so you could\
      \ remedy that as follows:\n\n<UScript>\n  Temp = MyMesh.static.RandomizeAttack();\n\
      \  LoopAnim( MyMesh.static.GetAttackAnim( Temp ), MyMesh.static.GetAttackAnimRate(\
      \ Temp ) );\n</uscript>\n\nAnd in the meshcontroller class:\n\n<uscript>\n \
      \ const numAttackAnims=3;\n\n  // Didn't use an array to make this easier to\
      \ expand by subclasses.\n  var name AttackAnim1, AttackAnim2, AttackAnim3;\n\
      \  var float AttackAnimRate1, AttackAnimRate2, AttackAnimRate3;\n\n  static\
      \ function int   RandomizeAttack()  { return INT( FRand() * numAttackAnims;\
      \ }\n  static function name  GetAttackAnim( int AnimNum )\n  {\n    switch(\
      \ AnimNum )\n    {\n      case 0: return  Default.AttackAnim1; break;\n    \
      \  case 1: return  Default.AttackAnim2; break;\n      case 2: return  Default.AttackAnim3;\
      \ break;\n      default: return Default.AttackAnim1; break;\n    }\n  }\n\n\n\
      \  etc...\n</UScript>\n\nThat, however would be slightly hack-ish. Here's an\
      \ even better way.\n\n<UScript>\n  MyMesh.static.PlayAttackAnim( self );\n</uscript>\n\
      \nAnd in the meshcontroller class:\n\n<uscript>\n  const numAttackAnims=3;\n\
      \n  // Didn't use an array to make this easier to expand by subclasses.\n  var\
      \ name AttackAnim1, AttackAnim2, AttackAnim3;\n  var float AttackAnimRate1,\
      \ AttackAnimRate2, AttackAnimRate3;\n\n  static function PlayAttackAnim( actor\
      \ HaplessVictim )\n  {\n    local int Temp;\n\n    Temp = INT( FRand() * numAttackAnims\
      \ );\n    switch( Temp )\n    {\n      case 0:  HaplessVictim.PlayAnim( Default.AttackAnim1,\
      \ Default.AttackAnimRate1 ); break;\n      case 1:  HaplessVictim.PlayAnim(\
      \ Default.AttackAnim2, Default.AttackAnimRate2 ); break;\n      case 2:  HaplessVictim.PlayAnim(\
      \ Default.AttackAnim3, Default.AttackAnimRate3 ); break;\n      default: HaplessVictim.PlayAnim(\
      \ Default.AttackAnim1, Default.AttackAnimRate1 ); break;\n    }\n  }\n\n</UScript>"
  properties: []
  revId: 7463
name: "Legacy:Static Function"
revision:
  revid: 7463
  parentid: 7465
  user: "Wormbo"
  timestamp: 1103972993.000000000
  comment: "reverted"
timestamp: 1668763459.779497000
