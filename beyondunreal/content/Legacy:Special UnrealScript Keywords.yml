---
parse:
  title: "Legacy:Special UnrealScript Keywords"
  text:
    text: "<p>Special keywords in <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"\
      toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"\
      ><a href=\"#Self\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Self</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#None\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">None</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Default\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Default</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#Static\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Static</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"\
      ><a href=\"#Super\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Super</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Global\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Global</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Stop\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">Stop</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-8\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">8</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Self\">Self</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=1\"\
      \ title=\"Edit section: Self\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <i>Self</i> keyword represents the object it is\
      \ used it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw6\"\
      >Self</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>has the same meaning like</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p><i>Self</i> isn't really useful here, but the next (silly&#160;:rolleyes:)\
      \ example will not work without it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"\
      me0\">RegisterDamageMutator</span><span class=\"br0\">(</span><span class=\"\
      kw6\">Self</span><span class=\"br0\">)</span>;\n<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"\
      kw7\">Game</span>.<span class=\"me0\">BaseMutator</span> <span class=\"sy0\"\
      >==</span> <span class=\"kw6\">Self</span> <span class=\"br0\">)</span>;\n \
      \   <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"I'm the boss\"</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"None\">None</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=2\"\
      \ title=\"Edit section: None\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>None</i> is an empty object reference. Every object\
      \ variable (classes, <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actors</a>,\
      \ <a href=\"/Legacy:UWindowBase\" title=\"Legacy:UWindowBase\">UWindow</a> stuff)\
      \ can take this value.</p>\n<p>Note: You cannot access the properties of object\
      \ references set to <i>None</i>. Trying to do so causes so-called Accessed None\
      \ <a href=\"/Legacy:Log_Warnings\" title=\"Legacy:Log Warnings\">log warnings</a>.\
      \ <i>Accessed None</i>s can lead to unexpected results and should be avoided\
      \ by using something like:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> MyActor <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Default\">Default</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=3\"\
      \ title=\"Edit section: Default\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <i>Default</i> keyword is used to access <a href=\"\
      /Legacy:Default_Properties\" title=\"Legacy:Default Properties\">default properties</a>\
      \ of variables in a class.</p>\n<p>Note that the two following lines will always\
      \ log the same values:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"kw1\">Class</span>.<span\
      \ class=\"kw1\">Default</span>.<span class=\"me0\">ItemName</span><span class=\"\
      br0\">)</span>;\n<span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">Default</span>.<span class=\"me0\">ItemName</span><span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>Note that you can also change the default\
      \ variable value by using the same syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">MyObject.<span class=\"kw1\">Default</span>.<span class=\"me0\">SomeVar</span>\
      \ <span class=\"sy0\">=</span> SomeNewDefaultValue;</pre></div>\n</div>\n<p>Of\
      \ course you'll lose the old default value if you do this, so if you want it\
      \ back you'll have to save it yourself, or restart the level.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Static\">Static</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=4\"\
      \ title=\"Edit section: Static\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <i>Static</i> keyword is used to call <a href=\"\
      /Legacy:Static_Function\" title=\"Legacy:Static Function\">static functions</a>\
      \ of a class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span><span class=\"st0\">'DeathMatchPlus'</span>.<span class=\"\
      kw1\">Static</span>.<span class=\"kw3\">StaticSaveConfig</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<h2><span class=\"\
      mw-headline\" id=\"Super\">Super</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=5\"\
      \ title=\"Edit section: Super\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>With the <i>Super</i> keyword you can call functions\
      \ in the same state of a superclass of this object.</p>\n<p>Let's take the BugEyedMonster\
      \ class from <a href=\"/Legacy:Extending_States\" title=\"Legacy:Extending States\"\
      >Extending States</a>. Its superclass Monster is a subclass of <a href=\"/Legacy:Pawn\"\
      \ title=\"Legacy:Pawn\">Pawn</a>: Pawn &gt;&gt; Monster &gt;&gt; BugEyedMonster.</p>\n\
      <p>Let's suppose you have overridden the Monster's <i>PostBeginPlay</i> function\
      \ in BugEyedMonster, but it should still execute the stuff in the Monster class's\
      \ <i>PostBeginPlay</i> function. It would be a bad idea to copy all of the code\
      \ from <i>Monster.PostBeginPlay</i> to <i>BugEyedMonster.PostBeginPlay</i>.</p>\n\
      <p>The better way would be this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"co1\">// our own code here </span>\n    <span class=\"kw6\"\
      >Super</span>.<span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// do the stuff from Monster</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>It might seem obvious,\
      \ but these functions <b>do not</b> share their local variables. They are completely\
      \ different functions. If PostBeginPlay() got some variables passed to it, you\
      \ will have to pass them along in the Super.PostBeginPlay() statement if you\
      \ want Monster's version of the function to have them too.</p>\n<p>Now let's\
      \ say you have another function <i>WhatToDoNext</i> in your BugEyedMonster class.\
      \ You need to execute the stuff from the <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\"\
      >Pawn</a> class's <i>WhatToDoNext</i> function, but <b>not</b> the code from\
      \ the Monster class. Again copying code isn't the solution. <a href=\"/Legacy:Pawn\"\
      \ title=\"Legacy:Pawn\">Pawn</a> is a superclass of our BugEyedMonster, so you\
      \ can use the <i>Super</i> keyword again, this time with a slightly different\
      \ syntax (note that if you've ever wanted to do something like <tt>Super.Super</tt>,\
      \ this is how to do it):</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> WhatToDoNext<span class=\"br0\">(</span><span class=\"\
      kw5\">name</span> LikelyState, <span class=\"kw5\">name</span> LikelyLabel<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw6\"\
      >Super</span><span class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">WhatToDoNext</span><span class=\"\
      br0\">(</span>LikelyState, LikelyLabel<span class=\"br0\">)</span>;\n    ...\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Again: If the BugEyedMonster\
      \ is in a certain state then WhatToDoNext function of the same state in the\
      \ Pawn class will be called. If Pawn doesn't have that state or the function\
      \ isn't declared in that state of the Pawn class or any of its superclasses,\
      \ then the non-state WhatToDoNext function of the Pawn class will be executed.\
      \ If Pawn also doesn't have a global WhatToDoNext function then the global WhatToDoNext\
      \ function of the most-derived superclass will be used. In any other case (i.e.\
      \ there's no WhatToDoNext function in Pawn or any superclass) the compiler will\
      \ tell you about that.</p>\n<p>Note that the simple Super.FunctionName() call\
      \ will not call the super class version of a function if the state containing\
      \ the function does not exist in the super class. You have to distiguish between\
      \ two cases here:</p>\n<dl>\n<dt>The state extends another state in the same\
      \ class&#160;</dt>\n<dd>Super.FunctionName() will call the function in the state's\
      \ parent state. (also see <a href=\"/Legacy:Extending_States\" title=\"Legacy:Extending\
      \ States\">Extending States</a>)</dd>\n<dt>The state doesn't extend another\
      \ state&#160;</dt>\n<dd>Super.FunctionName() will call the non-state version\
      \ of the function in the same class or any of its super classes.</dd>\n</dl>\n\
      <p><b>Tarquin:</b> Would a tree diagram help (assuming I've got it right)</p>\n\
      <div style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >The state exists in the super class:<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_2__The function\
      \ exists in the super class's state -&gt; call it<br /></div>\n<div style=\"\
      font-family: monospace; white-space: preserve; line-height: 1em;\">__TREETAG_2__The\
      \ function does not exist in the super class's state -&gt; call the non-state\
      \ function<br /></div>\n<div style=\"font-family: monospace; white-space: preserve;\
      \ line-height: 1em;\">The state doesn't exist in the super class, but extends\
      \ a state there<br /></div>\n<div style=\"font-family: monospace; white-space:\
      \ preserve; line-height: 1em;\">__TREETAG_2__The function exists in the super\
      \ class's parent state -&gt; call it<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_2__The function\
      \ does not exist in the super class's state -&gt; call the non-state function<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">The state doesn't exist in the super class, and does not extend a state\
      \ there -&gt; call the non-state function<br /></div>\n<p><b>Wormbo:</b> This\
      \ stuff can become quite complex, so maybe I'll start up a page about state\
      \ hierarchies or something. This works quite similar to class hierarchies and\
      \ actually is as simply, but you first have to get a grip at the concept.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Global\">Global</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=6\"\
      \ title=\"Edit section: Global\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <i>Global</i> keyword calls the most-derived global\
      \ (non-state) version of a function, i.e. if there's a non-state version of\
      \ the function in this class it will be executed, if not the non-state version\
      \ of the function will be searched for in the superclasses.</p>\n<p>In other\
      \ words, Global.DoStuff looks for a version of DoStuff that is non-state. If\
      \ there isn't a non-state DoStuff in the current class, it climbs the tree until\
      \ it finds one.</p>\n<p>The BugEyedMonster again:&#160;:-)</p>\n<p>Let's say\
      \ you have a <i>SitDown</i> function in the BugEyedMonster's Idle state and\
      \ a non-state <i>SitDown</i> function in the Monster class, but no non-state\
      \ <i>SitDown</i> function in the BugEyedMonster class.</p>\n<p>Now if you are\
      \ in the BugEyedMonster's Idle state and execute</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">Global.<span class=\"me0\">SitDown</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>the most-derived\
      \ global version of the <i>SitDown</i> function is the non-state one in the\
      \ Monster class.</p>\n<p>It's more obvious than for the Super keyword, but it's\
      \ still worth mentioning that the two functions don't share their local variables.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Stop\">Stop</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=7\"\
      \ title=\"Edit section: Stop\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>Stop</i> is a keyword relevant only in latent runtime,\
      \ so for short, States. <i>Stop</i> is used to end execution of state code (<b>not\
      \ functions</b>). Think of it as an equivalent of the <i>return</i> keyword\
      \ for states, if it is easier, not by the fact it returns a value but because\
      \ it stops the execution of the code that follows. This is best used when labeling\
      \ States as making multiple labels will not mean each label is executed at a\
      \ specific time, but all sequentially (starting with the label you specified\
      \ by using either the <i>goto</i> keyword or <i>GoToState(&lt;state name&gt;,&lt;label&gt;)</i>,\
      \ or Begin if no label is specified). Please note that as <i>stop</i>, <i>goto</i>\
      \ can only be called from State code to use that certain State label; in special\
      \ circumstances, there are situations when labels can be used within functions\
      \ as well, but a <i>goto</i> call from a function within a State will not call\
      \ that State's label. If you want to reach a certain label from a function,\
      \ use GoToState(). Here is a nice example on how to take advantage of the <i>Stop</i>\
      \ keyword from the Engine.Mover.TriggerToggle state:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">state</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> TriggerToggle\n<span class=\"br0\">{</span>\n     \
      \   <span class=\"br0\">[</span>...<span class=\"br0\">]</span>\n \nOpen:\n\t\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> DelayTime <span class=\"\
      sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\tbDelaying <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">true</span>;\n\t\t<span class=\"kw4\">Sleep</span><span class=\"\
      br0\">(</span>DelayTime<span class=\"br0\">)</span>;\n\t<span class=\"br0\"\
      >}</span>\n\tDoOpen<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \tFinishInterpolation<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \tFinishedOpening<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> SavedTrigger <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\"\
      >)</span>\n\t\tSavedTrigger.<span class=\"kw4\">EndEvent</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n\tStop;\nClose:\t\t\n\tDoClose<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\tFinishInterpolation<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\tFinishedClosing<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>For additional information on <i>goto</i> and <i>Stop</i>, see <a\
      \ href=\"/Legacy:Flow_Syntax\" title=\"Legacy:Flow Syntax\">Flow_Syntax</a>,\
      \ for more information regarding <i>Global</i> and states, in general, see also\
      \ <a href=\"/Legacy:State\" title=\"Legacy:State\">State</a>.</p>\n<p><b>Tarquin:</b>\
      \ \"Think of it as an equivalent of the <i>return</i> keyword for states if\
      \ it is easier\" – how is it like a return? Where do you return when you reach\
      \ a Stop?</p>\n<p><b>Mychaeel:</b> I suppose that the analogy is that you return\
      \ <i>from</i> the code you're currently executing, skipping the remaining statements\
      \ (in the function body or the state), not that you return <i>to</i> somewhere.</p>\n\
      <p><b>Xian:</b> Exactly&#160;:) Perhaps I should have been a bit more precise\
      \ but Mychaeel read between the lines. Return has 2 purposes, one to return\
      \ a value and one to stop the remainder of the code.</p>\n<p>Oh and coincidentally\
      \ by opening <a href=\"/Legacy:Flow_Syntax\" title=\"Legacy:Flow Syntax\">Flow_Syntax</a>\
      \ I found this:</p>\n<blockquote class=\"legacyquote\">\n<p><b>Stop</b></p>\n\
      <p>Imediately stops execution of State code. This is like the return command\
      \ for states.</p>\n</blockquote>\n<p>So I guess another author thought it like\
      \ me&#160;:) I always believe it is better to give analogies when it comes to\
      \ code (basically the \"you know one, you know them all\" theory). But yeah\
      \ I'll make it a bit clearer.</p>\n<p><b>Derrick:</b> As a somewhat noob to\
      \ UnrealScript (and even Unreal for that matter) it's hard for me to understand\
      \ what the following code really is doing without having knowledge of what a\
      \ BaseMutator or DamageMutator is. Perhaps you could think of a more universal\
      \ example. But, then again I don't think this is really meant as a tutorial.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"me0\">RegisterDamageMutator</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">Self</span><span class=\"br0\">)</span>;\n\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\"\
      >Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">BaseMutator</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw6\">Self</span> <span class=\"\
      br0\">)</span>;\n    <span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"I'm the boss\"</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>I'm assuming that RegisterDamageMutator is accessed publicly, here\
      \ adding the object to the list of the game's registered damage mutators? (whatever\
      \ that means) and it assigns itself as the value of the game's sole base mutator?\
      \ (whatever that means) and only then can it display messages to the log page?</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Special_UnrealScript_Keywords?section=8\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.225 seconds\nReal time\
      \ usage: 0.343 seconds\nPreprocessor visited node count: 150/1000000\nPreprocessor\
      \ generated node count: 329/1000000\nPost‐expand include size: 294/2097152 bytes\n\
      Template argument size: 99/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%   10.501      1 - -total\n100.00%   10.501\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2853-0!*!0!!en!*!*\
      \ and timestamp 20221118021854 and revision id 46284\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UWindowBase"
  - ns: 100
    exists: true
    name: "Legacy:Static Function"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Log Warnings"
  - ns: 100
    exists: true
    name: "Legacy:Extending States"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: true
    name: "Legacy:Flow Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Self"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 59
    anchor: "Self"
  - toclevel: 1
    level: "2"
    line: "None"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 455
    anchor: "None"
  - toclevel: 1
    level: "2"
    line: "Default"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 939
    anchor: "Default"
  - toclevel: 1
    level: "2"
    line: "Static"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 1505
    anchor: "Static"
  - toclevel: 1
    level: "2"
    line: "Super"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 1683
    anchor: "Super"
  - toclevel: 1
    level: "2"
    line: "Global"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 5426
    anchor: "Global"
  - toclevel: 1
    level: "2"
    line: "Stop"
    number: "7"
    index: "7"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 6459
    anchor: "Stop"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "8"
    index: "8"
    fromtitle: "Legacy:Special_UnrealScript_Keywords"
    byteoffset: 9863
    anchor: "Related_Topics"
  displaytitle: "Legacy:Special UnrealScript Keywords"
  iwlinks: []
  wikitext:
    text: "Special keywords in [[Legacy:UnrealScript|UnrealScript]].\n\n==Self ==\n\
      \nThe ''Self'' keyword represents the object it is used it.\n\n<uscript>\nSelf.Destroy();\n\
      </uscript>\n\nhas the same meaning like\n\n<uscript>\nDestroy();\n</uscript>\n\
      \n''Self'' isn't really useful here, but the next (silly :rolleyes:) example\
      \ will not work without it:\n\n<uscript>\nLevel.Game.RegisterDamageMutator(Self);\n\
      if ( Level.Game.BaseMutator == Self );\n    log(\"I'm the boss\");\n</uscript>\n\
      \n==None ==\n\n''None'' is an empty object reference. Every object variable\
      \ (classes, [[Legacy:Actor|Actor]]s, [[Legacy:UWindowBase|UWindow]] stuff) can\
      \ take this value.\n\nNote: You cannot access the properties of object references\
      \ set to ''None''. Trying to do so causes so-called Accessed None [[Legacy:Log\
      \ Warnings|log warnings]]. ''Accessed None''s can lead to unexpected results\
      \ and should be avoided by using something like:\n\n<uscript>\nif ( MyActor\
      \ != None ) {\n    ...\n}\n</uscript>\n\n==Default ==\n\nThe ''Default'' keyword\
      \ is used to access [[Legacy:Default Properties|default properties]] of variables\
      \ in a class.\n\nNote that the two following lines will always log the same\
      \ values:\n\n<uscript>\nlog(Class.Default.ItemName);\nlog(Default.ItemName);\n\
      </uscript>\n\nNote that you can also change the default variable value by using\
      \ the same syntax:\n\n<uscript>\nMyObject.Default.SomeVar = SomeNewDefaultValue;\n\
      </uscript>\n\nOf course you'll lose the old default value if you do this, so\
      \ if you want it back you'll have to save it yourself, or restart the level.\n\
      \n==Static ==\n\nThe ''Static'' keyword is used to call [[Legacy:Static Function|static\
      \ function]]s of a class:\n\n<uscript>class'DeathMatchPlus'.Static.StaticSaveConfig();</uscript>\n\
      \n==Super ==\n\nWith the ''Super'' keyword you can call functions in the same\
      \ state of a superclass of this object.\n\nLet's take the BugEyedMonster class\
      \ from [[Legacy:Extending States|Extending States]]. Its superclass Monster\
      \ is a subclass of [[Legacy:Pawn|Pawn]]: Pawn >> Monster >> BugEyedMonster.\n\
      \nLet's suppose you have overridden the Monster's ''PostBeginPlay'' function\
      \ in BugEyedMonster, but it should still execute the stuff in the Monster class's\
      \ ''PostBeginPlay'' function. It would be a bad idea to copy all of the code\
      \ from ''Monster.PostBeginPlay'' to ''BugEyedMonster.PostBeginPlay''.\n\nThe\
      \ better way would be this:\n\n<uscript>\nfunction PostBeginPlay()\n{\n    //\
      \ our own code here \n    Super.PostBeginPlay(); // do the stuff from Monster\n\
      }\n</uscript>\n\nIt might seem obvious, but these functions '''do not''' share\
      \ their local variables. They are completely different functions. If PostBeginPlay()\
      \ got some variables passed to it, you will have to pass them along in the Super.PostBeginPlay()\
      \ statement if you want Monster's version of the function to have them too.\n\
      \nNow let's say you have another function ''WhatToDoNext'' in your BugEyedMonster\
      \ class. You need to execute the stuff from the [[Legacy:Pawn|Pawn]] class's\
      \ ''WhatToDoNext'' function, but '''not''' the code from the Monster class.\
      \ Again copying code isn't the solution. [[Legacy:Pawn|Pawn]] is a superclass\
      \ of our BugEyedMonster, so you can use the ''Super'' keyword again, this time\
      \ with a slightly different syntax (note that if you've ever wanted to do something\
      \ like <tt>Super.Super</tt>, this is how to do it):\n\n<uscript>\nfunction WhatToDoNext(name\
      \ LikelyState, name LikelyLabel)\n{\n    Super(Pawn).WhatToDoNext(LikelyState,\
      \ LikelyLabel);\n    ...\n}\n</uscript>\n\nAgain: If the BugEyedMonster is in\
      \ a certain state then WhatToDoNext function of the same state in the Pawn class\
      \ will be called. If Pawn doesn't have that state or the function isn't declared\
      \ in that state of the Pawn class or any of its superclasses, then the non-state\
      \ WhatToDoNext function of the Pawn class will be executed. If Pawn also doesn't\
      \ have a global WhatToDoNext function then the global WhatToDoNext function\
      \ of the most-derived superclass will be used. In any other case (i.e. there's\
      \ no WhatToDoNext function in Pawn or any superclass) the compiler will tell\
      \ you about that.\n\nNote that the simple Super.FunctionName() call will not\
      \ call the super class version of a function if the state containing the function\
      \ does not exist in the super class. You have to distiguish between two cases\
      \ here:\n; The state extends another state in the same class : Super.FunctionName()\
      \ will call the function in the state's parent state. (also see [[Legacy:Extending\
      \ States|Extending States]])\n; The state doesn't extend another state : Super.FunctionName()\
      \ will call the non-state version of the function in the same class or any of\
      \ its super classes.\n\n'''Tarquin:''' Would a tree diagram help (assuming I've\
      \ got it right)\n\n+ The state exists in the super class:\n\n++ The function\
      \ exists in the super class's state -> call it\n\n++ The function does not exist\
      \ in the super class's state -> call the non-state function\n\n+ The state doesn't\
      \ exist in the super class, but extends a state there\n\n++ The function exists\
      \ in the super class's parent state -> call it\n\n++ The function does not exist\
      \ in the super class's state -> call the non-state function\n\n+ The state doesn't\
      \ exist in the super class, and does not extend a state there -> call the non-state\
      \ function\n\n'''Wormbo:''' This stuff can become quite complex, so maybe I'll\
      \ start up a page about state hierarchies or something. This works quite similar\
      \ to class hierarchies and actually is as simply, but you first have to get\
      \ a grip at the concept.\n\n==Global ==\n\nThe ''Global'' keyword calls the\
      \ most-derived global (non-state) version of a function, i.e. if there's a non-state\
      \ version of the function in this class it will be executed, if not the non-state\
      \ version of the function will be searched for in the superclasses.\n\nIn other\
      \ words, Global.DoStuff looks for a version of DoStuff that is non-state. If\
      \ there isn't a non-state DoStuff in the current class, it climbs the tree until\
      \ it finds one.\n\nThe BugEyedMonster again: :-)\n\nLet's say you have a ''SitDown''\
      \ function in the BugEyedMonster's Idle state and a non-state ''SitDown'' function\
      \ in the Monster class, but no non-state ''SitDown'' function in the BugEyedMonster\
      \ class.\n\nNow if you are in the BugEyedMonster's Idle state and execute\n\n\
      <uscript>\nGlobal.SitDown();\n</uscript>\n\nthe most-derived global version\
      \ of the ''SitDown'' function is the non-state one in the Monster class.\n\n\
      It's more obvious than for the Super keyword, but it's still worth mentioning\
      \ that the two functions don't share their local variables.\n\n==Stop ==\n\n\
      ''Stop'' is a keyword relevant only in latent runtime, so for short, States.\
      \ ''Stop'' is used to end execution of state code ('''not functions'''). Think\
      \ of it as an equivalent of the ''return'' keyword for states, if it is easier,\
      \ not by the fact it returns a value but because it stops the execution of the\
      \ code that follows. This is best used when labeling States as making multiple\
      \ labels will not mean each label is executed at a specific time, but all sequentially\
      \ (starting with the label you specified by using either the ''goto'' keyword\
      \ or ''GoToState(<state name>,<label>)'', or Begin if no label is specified).\
      \ Please note that as ''stop'', ''goto'' can only be called from State code\
      \ to use that certain State label; in special circumstances, there are situations\
      \ when labels can be used within functions as well, but a ''goto'' call from\
      \ a function within a State will not call that State's label. If you want to\
      \ reach a certain label from a function, use GoToState(). Here is a nice example\
      \ on how to take advantage of the ''Stop'' keyword from the Engine.Mover.TriggerToggle\
      \ state:\n\n<uscript>\nstate () TriggerToggle\n{\n        [...]\n\nOpen:\n\t\
      if ( DelayTime > 0 )\n\t{\n\t\tbDelaying = true;\n\t\tSleep(DelayTime);\n\t\
      }\n\tDoOpen();\n\tFinishInterpolation();\n\tFinishedOpening();\n\tif ( SavedTrigger\
      \ != None )\n\t\tSavedTrigger.EndEvent();\n\tStop;\nClose:\t\t\n\tDoClose();\n\
      \tFinishInterpolation();\n\tFinishedClosing();\n}\n</uscript> \n\nFor additional\
      \ information on ''goto'' and ''Stop'', see [[Legacy:Flow_Syntax|Flow_Syntax]],\
      \ for more information regarding ''Global'' and states, in general, see also\
      \ [[Legacy:State|State]].\n\n'''Tarquin:'''  \"Think of it as an equivalent\
      \ of the ''return'' keyword for states if it is easier\" &ndash; how is it like\
      \ a return? Where do you return when you reach a Stop?\n\n'''Mychaeel:''' I\
      \ suppose that the analogy is that you return ''from'' the code you're currently\
      \ executing, skipping the remaining statements (in the function body or the\
      \ state), not that you return ''to'' somewhere.\n\n'''Xian:''' Exactly :) Perhaps\
      \ I should have been a bit more precise but Mychaeel read between the lines.\
      \ Return has 2 purposes, one to return a value and one to stop the remainder\
      \ of the code.\n\nOh and coincidentally by opening [[Legacy:Flow_Syntax|Flow_Syntax]]\
      \ I found this:\n\n{{innerbox|'''Stop'''\n\nImediately stops execution of State\
      \ code. This is like the return command for states.\n\n}}\n\nSo I guess another\
      \ author thought it like me :) I always believe it is better to give analogies\
      \ when it comes to code (basically the \"you know one, you know them all\" theory).\
      \ But yeah I'll make it a bit clearer.\n\n'''Derrick:''' As a somewhat noob\
      \ to UnrealScript (and even Unreal for that matter) it's hard for me to understand\
      \ what the following code really is doing without having knowledge of what a\
      \ BaseMutator or DamageMutator is.  Perhaps you could think of a more universal\
      \ example.  But, then again I don't think this is really meant as a tutorial.\n\
      \n<uscript>\nLevel.Game.RegisterDamageMutator(Self);\nif ( Level.Game.BaseMutator\
      \ == Self );\n    log(\"I'm the boss\");\n</uscript>\n\nI'm assuming that RegisterDamageMutator\
      \ is accessed publicly, here adding the object to the list of the game's registered\
      \ damage mutators? (whatever that means) and it assigns itself as the value\
      \ of the game's sole base mutator? (whatever that means) and only then can it\
      \ display messages to the log page?\n\n==Related Topics ==\n* [[Legacy:UnrealScript|UnrealScript]]"
  properties: []
  revId: 46284
name: "Legacy:Special UnrealScript Keywords"
revision:
  revid: 46284
  parentid: 7617
  user: "SeriousBarbie"
  timestamp: 1453057253.000000000
  comment: "+Wiki syntax"
timestamp: 1668763406.931459000
