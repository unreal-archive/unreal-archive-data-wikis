---
parse:
  title: "Legacy:Scripting Operators"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Using_Operators\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Using Operators</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Operators_vs._Functions\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Operators vs.\
      \ Functions</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #Binary_operators\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\"\
      >Binary operators</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a\
      \ href=\"#Unary_operators\"><span class=\"tocnumber\">1.3</span> <span class=\"\
      toctext\">Unary operators</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-5\"><a href=\"#Examples_of_Operators\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Examples of Operators</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-6\"><a href=\"#Using_the_Out_Keyword\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Using the Out Keyword</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#String_Multiplication\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">String Multiplication</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Actor_Destruction\"><span class=\"\
      tocnumber\">2.3</span> <span class=\"toctext\">Actor Destruction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Implementing_a_crude_Logf\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">Implementing a\
      \ crude Logf</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#Related_topics\"><span class=\"tocnumber\">3</span> <span class=\"\
      toctext\">Related topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Using_Operators\">Using Operators</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=1\"\
      \ title=\"Edit section: Using Operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Operators_vs._Functions\"\
      >Operators vs. Functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=2\"\
      \ title=\"Edit section: Operators vs. Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In maths, the difference is simply one of notation.\
      \ The following mean the same, but the first is written as an operator, the\
      \ second and third as functions:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      > <span class=\"nu0\">4</span> <span class=\"sy0\">+</span> <span class=\"nu0\"\
      >5</span>\n <span class=\"sy0\">+</span><span class=\"br0\">(</span> <span class=\"\
      nu0\">4</span> , <span class=\"nu0\">5</span> <span class=\"br0\">)</span>\n\
      \ plus<span class=\"br0\">(</span> <span class=\"nu0\">4</span> , <span class=\"\
      nu0\">5</span> <span class=\"br0\">)</span></pre></div>\n</div>\n<p>In <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a> there\
      \ is a similar distinction. Both functions and operators are represented by\
      \ some sort of symbol or group of symbols, but operator's parameters are either\
      \ side of the name instead of enclosed in brackets:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"nu0\">4</span> <span class=\"sy0\">+</span>\
      \ <span class=\"nu0\">5</span> ;\n<span class=\"nu0\">4</span> plus <span class=\"\
      nu0\">5</span> ;\nplus<span class=\"br0\">(</span> <span class=\"nu0\">4</span>\
      \ , <span class=\"nu0\">5</span> <span class=\"br0\">)</span> ;</pre></div>\n\
      </div>\n<p>In UnrealScript, operators are limited to having one or two parameters.\
      \ UnrealScript's built-in operators are defined in the <a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Object</a> class.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Binary_operators\">Binary operators</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=3\"\
      \ title=\"Edit section: Binary operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Most operators are <i>binary</i> – they take two parameters,\
      \ one on each side. Defining an operator is very similar to defining a function:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"sy0\">&lt;</span>priority<span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>type<span class=\"sy0\"\
      >&gt;</span> <span class=\"sy0\">&lt;</span>opname<span class=\"sy0\">&gt;</span>\
      \ <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>param1<span class=\"\
      sy0\">&gt;</span>, <span class=\"sy0\">&lt;</span>param2<span class=\"sy0\"\
      >&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Note that a return value is required\
      \ for operators, even if they have <a href=\"/Legacy:Function_Syntax\" title=\"\
      Legacy:Function Syntax\">'out' parameters</a>.</p>\n<p>Operators need to be\
      \ declared as <i>final</i> (or the compiler will start bitching), but not necessarily\
      \ as <i>static</i> – if you don't declare an operator as <i>static</i>, you\
      \ can access object variables in its code. (Unlike non-<i>static</i> functions\
      \ you can use a non-<i>static</i> operator in a <i>static</i> function; any\
      \ object variables you access there yield their default properties in that case.)\
      \ A function declared as static may execute faster, however note that although\
      \ it may be static it cannot be referenced from outside of the class it was\
      \ defined in and its subclasses. The following, for instance, is not valid:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">ValueA <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'MathFunctions'</span>.<span class=\"kw1\">static</span>.<span\
      \ class=\"sy0\">+</span> ValueB</pre></div>\n</div>\n<p>The number in parenthesis\
      \ after the keyword \"operator\" gives the evaluation priority; the lower this\
      \ value, the earlier a term with this operator will be evaluated when a complete\
      \ expression is executed. For example, the exponentiation operator's precedence\
      \ is 12, multiplication is 16, and addition is 20. Consider the expression:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">A <span class=\"sy0\">=</span> B <span\
      \ class=\"sy0\">/</span> <span class=\"nu0\">2</span> MyOperator <span class=\"\
      nu0\">5</span>;</pre></div>\n</div>\n<p>If MyOperator has a precedence of 10,\
      \ it'll bind tighter than division (16), so the expression will be evaluated\
      \ as:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\">A <span class=\"sy0\"\
      >=</span> B <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"\
      nu0\">2</span> MyOperator <span class=\"nu0\">5</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>On the other hand, if MyOperator has a precedence of 20, it would\
      \ evaluate as:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">A <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>B <span class=\"sy0\">/</span> <span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span> MyOperator <span class=\"\
      nu0\">5</span>;</pre></div>\n</div>\n<p>The valid range for precedence values\
      \ is 0-255. Here's a list of the existing values used in the built in operators:</p>\n\
      <table>\n<tr>\n<td><b>Precedence</b></td>\n<td><b>Operator</b></td>\n<td><b>Operation</b></td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">12</td>\n<td style=\"text-align:\
      \ center\"><code>**</code></td>\n<td>Exponentiation</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: right\">16</td>\n<td style=\"text-align: center\"><code>*</code></td>\n\
      <td>Multiplication</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">16</td>\n\
      <td style=\"text-align: center\"><code>/</code></td>\n<td>Division</td>\n</tr>\n\
      <tr>\n<td style=\"text-align: right\">16</td>\n<td style=\"text-align: center\"\
      ><code>Dot</code></td>\n<td>Dot Product</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ right\">16</td>\n<td style=\"text-align: center\"><code>Cross</code></td>\n\
      <td>Cross Product</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">18</td>\n\
      <td style=\"text-align: center\"><code>%</code></td>\n<td>Modulus</td>\n</tr>\n\
      <tr>\n<td style=\"text-align: right\">20</td>\n<td style=\"text-align: center\"\
      ><code>+</code></td>\n<td>Addition</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ right\">20</td>\n<td style=\"text-align: center\"><code>-</code></td>\n<td>Subtraction</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">22</td>\n<td style=\"text-align:\
      \ center\"><code>&lt;&lt;</code></td>\n<td>Left Shift</td>\n</tr>\n<tr>\n<td\
      \ style=\"text-align: right\">22</td>\n<td style=\"text-align: center\"><code>&gt;&gt;</code></td>\n\
      <td>Right Shift</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">22</td>\n\
      <td style=\"text-align: center\"><code>&gt;&gt;&gt;</code></td>\n<td>Unsigned\
      \ Right Shift</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">24</td>\n<td\
      \ style=\"text-align: center\"><code>&lt;</code></td>\n<td>Less Than</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">24</td>\n<td style=\"text-align:\
      \ center\"><code>&gt;</code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: right\">24</td>\n<td style=\"text-align: center\"><code>&lt;=</code></td>\n\
      <td>Less or Equal</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">24</td>\n\
      <td style=\"text-align: center\"><code>&gt;=</code></td>\n<td>Greater or Equal</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">24</td>\n<td style=\"text-align:\
      \ center\"><code>----</code></td>\n<td>Equality</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: right\">24</td>\n<td style=\"text-align: center\"><code>~=</code></td>\n\
      <td>Approximate Equality</td>\n</tr>\n<tr>\n<td style=\"text-align: right\"\
      >26</td>\n<td style=\"text-align: center\"><code>!=</code></td>\n<td>Not Equal</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">28</td>\n<td style=\"text-align:\
      \ center\"><code>&amp;</code></td>\n<td>Bitwise And</td>\n</tr>\n<tr>\n<td style=\"\
      text-align: right\">28</td>\n<td style=\"text-align: center\"><code>{|</code></td>\n\
      </tr>\n</table>\n<p>|Bitwise Or |- | style=\"text-align: right\" |28 | style=\"\
      text-align: center\" |<code>^</code> |Bitwise Xor |- | style=\"text-align: right\"\
      \ |30 | style=\"text-align: center\" |<code>&amp;&amp;</code> |And |- | style=\"\
      text-align: right\" |30 | style=\"text-align: center\" |<code>{|</code></p>\n\
      <p><code>|- | |}</code> |Or |- | style=\"text-align: right\" |32 | style=\"\
      text-align: center\" |<code>^^</code> |Xor |}</p>\n<p>(Also see <a href=\"/Legacy:Operators\"\
      \ title=\"Legacy:Operators\">Operators</a>.)</p>\n<p>Type is what type the operator\
      \ will return, if any. This also works the same as a function.</p>\n<p>Opname\
      \ is the name of the operator, similar to the name of a function. However, the\
      \ name of an operator is more flexible. You can use any of the following as\
      \ an operator name:</p>\n<p>The name/identifier of the operator. This can be:</p>\n\
      <ul>\n<li>A string identifier, like a normal function.</li>\n<li>A symbol, like\
      \ +,-,*,/,#,:,etc.</li>\n<li>A group of two symbols. The compiler limits you\
      \ to the symbol groups already recognized by the parser: &lt;&lt;, &gt;&gt;,&#160;!=,\
      \ &lt;=, &gt;=, ++, –, +=, -=, *=, /=, &amp;&amp;, ||, ^^, ==, **, ~=, @=</li>\n\
      <li>The compiler also allows a special three-symbol operator, &gt;&gt;&gt;.</li>\n\
      </ul>\n<p>The parameters of the operator work the same way as a function, but\
      \ you must have two and only two parameters for a binary function. The first\
      \ parameter is the value on the left side of the operator when it is used. The\
      \ second parameter is the value on the right side of the operator when it is\
      \ used. Like a function, you can use the out keyword if you want an operator\
      \ to change the value of one of the values inputted to it.</p>\n<p>The code\
      \ for your operator goes between the curly braces, the same way as a function.\
      \ An operator is largely a function that is merely called using a different\
      \ syntax, as as such can do most things that a function can. Use return as you\
      \ would in a function to return the result of the operator, if any.</p>\n<p>The\
      \ following example is an alternative to&#160;%, the built-in modulo operator.\
      \ This is an extremely handy one to have, as the built-in&#160;% operator disagrees\
      \ with the mathematical modulo function for negative numbers.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw5\">float</span>\
      \ mod <span class=\"br0\">(</span><span class=\"kw5\">float</span> A, <span\
      \ class=\"kw5\">float</span> B<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n    <span class=\"kw2\">if</span><span class=\"br0\">(</span> A <span\
      \ class=\"sy0\">%</span> B <span class=\"sy0\">&gt;=</span> <span class=\"nu0\"\
      >0</span> <span class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>\
      \ A <span class=\"sy0\">%</span> B ;\n    <span class=\"kw2\">else</span>\n\
      \        <span class=\"kw2\">return</span> <span class=\"br0\">(</span> A <span\
      \ class=\"sy0\">%</span> B <span class=\"br0\">)</span> <span class=\"sy0\"\
      >+</span> B ;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Note that\
      \ the operator does not need to be represented by a single special character;\
      \ it can also be a valid symbol name. With the above example, the new syntax\
      \ would be:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw5\">float</span> a, b, c;\nc <span class=\"\
      sy0\">=</span> a mod b;</pre></div>\n</div>\n<p>Here's another sample operator\
      \ that will calculate the average of the left and right side:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span>\
      \ <span class=\"kw5\">int</span> : <span class=\"br0\">(</span> <span class=\"\
      kw5\">int</span> A, <span class=\"kw5\">int</span> B <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      br0\">(</span>A <span class=\"sy0\">+</span> B<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">/</span> <span class=\"nu0\">2</span>;\n<span class=\"br0\"\
      >}</span>\nMiddle <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\
      \ : <span class=\"nu0\">2</span>; <span class=\"co1\">// Middle = 6</span>\n\
      \ \nMiddle <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span\
      \ class=\"sy0\">+</span> <span class=\"nu0\">2</span> : <span class=\"nu0\"\
      >4</span>; <span class=\"co1\">// Middle = (10 + 2) : 4 = 8</span></pre></div>\n\
      </div>\n<p><br />\nI made the priority for this operator 18, so the addition\
      \ will be evaluated before the&#160;: operator in this case.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Unary_operators\">Unary operators</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=4\"\
      \ title=\"Edit section: Unary operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Unary operators are similar, just use \"preoperator\"\
      \ or \"postoperator\" as the keyword. A preoperator and a postoperator has only\
      \ one parameter, and is prepended or appended to the value to be processed,\
      \ respectively. An example of a postoperator is <i>++</i> or <i>–</i>. In addition,\
      \ there is no priority for unary operators, they will always be evaluated first.\
      \ I am not certain what the result is if a preoperator and a postoperator are\
      \ called on the same value simultaneously. An example of a unary operator, boolean\
      \ negation is defined by this line in the <a href=\"/Legacy:Object\" title=\"\
      Legacy:Object\">Object</a> script:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">native</span><span class=\"br0\">(</span><span class=\"\
      nu0\">129</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">preoperator</span> <span\
      \ class=\"kw5\">bool</span> <span class=\"sy0\">!</span> <span class=\"br0\"\
      >(</span><span class=\"kw5\">bool</span> A<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Examples_of_Operators\">Examples\
      \ of Operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Operators?section=5\" title=\"Edit\
      \ section: Examples of Operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are many useful examples on the following pages:</p>\n\
      <ul>\n<li><a href=\"/Legacy:Useful_Maths_Functions\" title=\"Legacy:Useful Maths\
      \ Functions\">Useful Maths functions</a> – number functions, trig functions\
      \ and vector operators</li>\n<li><a href=\"/Legacy:Color_Operators\" title=\"\
      Legacy:Color Operators\">Color Operators</a></li>\n<li><a href=\"/Legacy:Dynamic_Array\"\
      \ title=\"Legacy:Dynamic Array\">Dynamic Array</a> implementation (hack for\
      \ <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>)</li>\n\
      <li><a href=\"/Legacy:AssociativeArray\" title=\"Legacy:AssociativeArray\">AssociativeArray</a></li>\n\
      </ul>\n<p>More Examples of Operators are provided below.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Using_the_Out_Keyword\">Using the Out Keyword</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Operators?section=6\" title=\"Edit section:\
      \ Using the Out Keyword\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">final</span> postoperator\
      \ <span class=\"kw5\">int</span> <span class=\"co2\"># ( out int A );</span>\n\
      <span class=\"br0\">{</span>   <span class=\"kw2\">return</span> A <span class=\"\
      sy0\">/=</span> <span class=\"nu0\">10</span>; <span class=\"co1\">// Notice\
      \ how A is modified here</span>\n<span class=\"br0\">}</span>\n \ni <span class=\"\
      sy0\">=</span> <span class=\"nu0\">100</span>;\n \nb <span class=\"sy0\">=</span>\
      \ i<span class=\"co2\">#; // b = 10, i = 10 (i IS affected, because of the out\
      \ keyword)</span>\n \ni<span class=\"co2\">#; // i = 1</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"String_Multiplication\">String\
      \ Multiplication</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Operators?section=7\" title=\"Edit\
      \ section: String Multiplication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Here's a simple operator that will take a string,\
      \ and 'multiply' it by an integer, returning the string repeated that many times:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">string</span> <span class=\"sy0\">*</span> <span class=\"br0\"\
      >(</span> <span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ <span class=\"kw5\">String</span>, <span class=\"kw5\">int</span> nRepetitions\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">string</span> Result;\n \n  <span class=\"\
      kw2\">while</span><span class=\"br0\">(</span>nRepetitions <span class=\"sy0\"\
      >&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"br0\">(</span>nRepetitions <span class=\"sy0\">&amp;</span>\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n      Result\
      \ <span class=\"sy0\">=</span> Result <span class=\"sy0\">$</span> <span class=\"\
      kw5\">String</span>;\n    <span class=\"kw5\">String</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">String</span> <span class=\"sy0\">$</span> <span\
      \ class=\"kw5\">String</span>;\n    nRepetitions <span class=\"sy0\">=</span>\
      \ nRepetitions <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span>;\n\
      \  <span class=\"br0\">}</span>\n \n  <span class=\"kw2\">return</span> Result;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Actor_Destruction\">Actor Destruction</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=8\"\
      \ title=\"Edit section: Actor Destruction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> postoperator <span class=\"\
      kw9\">Actor</span> DIEDIEDIE <span class=\"br0\">(</span> <span class=\"kw1\"\
      >out</span> <span class=\"kw9\">Actor</span> NearlyDead <span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  NearlyDead.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\"\
      >return</span> NearlyDead;\n<span class=\"br0\">}</span>\nSomeActor DIEDIEDIE;\
      \ <span class=\"co1\">// It is now dead.</span></pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"Implementing_a_crude_Logf\">Implementing a crude\
      \ Logf</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Operators?section=9\" title=\"Edit\
      \ section: Implementing a crude Logf\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is a simple formatted function that writes to\
      \ the log file. You use the&#160;: operator to group together a bunch of strings\
      \ and floats (or integers), and then pass the resulting struct into a function\
      \ that willll parse the format and grab the needed strings/numbers out of the\
      \ struct.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> TestLogf <span class=\"kw1\">extends</span> <span class=\"kw8\"\
      >CommandLet</span>;\n \n<span class=\"co1\">// This will hold all of our parameters</span>\n\
      <span class=\"kw1\">struct</span> AnythingGlob\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">string</span> StringGlob<span\
      \ class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span>;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">int</span> StringNum;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> NumberGlob<span\
      \ class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span>;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">int</span> NumberNum;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">int</span> num;\n<span\
      \ class=\"br0\">}</span>;\n \n<span class=\"co1\">// Add a string to a glob</span>\n\
      <span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">98</span><span class=\"br0\">)</span> AnythingGlob\
      \ : <span class=\"br0\">(</span> anythingglob B, <span class=\"kw5\">string</span>\
      \ A <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  B.<span class=\"\
      me0\">StringGlob</span><span class=\"br0\">[</span>B.<span class=\"me0\">StringNum</span><span\
      \ class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ A;\n  <span class=\"kw2\">return</span> B;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Add a float to a glob</span>\n<span class=\"kw1\"\
      >final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">98</span><span class=\"br0\">)</span> AnythingGlob : <span class=\"\
      br0\">(</span> anythingglob B, <span class=\"kw5\">float</span> A <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  B.<span class=\"me0\">NumberGlob</span><span\
      \ class=\"br0\">[</span>B.<span class=\"me0\">NumberNum</span><span class=\"\
      sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A;\n\
      \  <span class=\"kw2\">return</span> B;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"co1\">// Create the glob out of 2 strings</span>\n<span class=\"kw1\"\
      >final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">99</span><span class=\"br0\">)</span> AnythingGlob : <span class=\"\
      br0\">(</span> <span class=\"kw5\">string</span> A, <span class=\"kw5\">string</span>\
      \ B <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> AnythingGlob C;\n  C.<span class=\"me0\">StringGlob</span><span\
      \ class=\"br0\">[</span>C.<span class=\"me0\">StringNum</span><span class=\"\
      sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A;\n\
      \  C.<span class=\"me0\">StringGlob</span><span class=\"br0\">[</span>C.<span\
      \ class=\"me0\">StringNum</span><span class=\"sy0\">++</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> B;\n  <span class=\"kw2\">return</span>\
      \ C;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Create the glob\
      \ out of 2 floats</span>\n<span class=\"kw1\">final</span> <span class=\"kw1\"\
      >operator</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span\
      \ class=\"br0\">)</span> AnythingGlob : <span class=\"br0\">(</span> <span class=\"\
      kw5\">float</span> A, <span class=\"kw5\">float</span> B <span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ AnythingGlob C;\n  C.<span class=\"me0\">NumberGlob</span><span class=\"br0\"\
      >[</span>C.<span class=\"me0\">NumberNum</span><span class=\"sy0\">++</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> A;\n  C.<span class=\"\
      me0\">NumberGlob</span><span class=\"br0\">[</span>C.<span class=\"me0\">NumberNum</span><span\
      \ class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ B;\n  <span class=\"kw2\">return</span> C;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Create the glob out of a string and a float</span>\n\
      <span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> AnythingGlob\
      \ : <span class=\"br0\">(</span> <span class=\"kw5\">string</span> A, <span\
      \ class=\"kw5\">float</span> B <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> AnythingGlob C;\n \n  C.<span\
      \ class=\"me0\">StringGlob</span><span class=\"br0\">[</span>C.<span class=\"\
      me0\">StringNum</span><span class=\"sy0\">++</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> A;\n  C.<span class=\"me0\">NumberGlob</span><span\
      \ class=\"br0\">[</span>C.<span class=\"me0\">NumberNum</span><span class=\"\
      sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> B;\n\
      \  <span class=\"kw2\">return</span> C;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"co1\">// Create the glob out of a float and a string</span>\n<span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> AnythingGlob\
      \ : <span class=\"br0\">(</span> <span class=\"kw5\">float</span> B, <span class=\"\
      kw5\">string</span> A <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> AnythingGlob C;\n  C.<span class=\"me0\"\
      >StringGlob</span><span class=\"br0\">[</span>C.<span class=\"me0\">StringNum</span><span\
      \ class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ A;\n  C.<span class=\"me0\">NumberGlob</span><span class=\"br0\">[</span>C.<span\
      \ class=\"me0\">NumberNum</span><span class=\"sy0\">++</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> B;\n  <span class=\"kw2\">return</span>\
      \ C;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">int</span> main<span class=\"br0\">(</span> <span class=\"kw5\"\
      >string</span> parm <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> AnythingGlob Test;\n  Logf<span class=\"\
      br0\">(</span> <span class=\"st0\">\"Testing... with a string '%s', an int '%i',\
      \ and a float %f\"</span>: <span class=\"st0\">\"Test\"</span>: <span class=\"\
      nu0\">6</span>: <span class=\"nu0\">6.4</span> <span class=\"br0\">)</span>;\n\
      \  Logf<span class=\"br0\">(</span> <span class=\"st0\">\"This commandlet was\
      \ passed '%s'\"</span>: parm <span class=\"br0\">)</span>;\n  Test <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Using prebuilt\
      \ glob: %s %f %i %s\"</span>: <span class=\"st0\">\"Hello\"</span>: <span class=\"\
      nu0\">3.1415926</span>: <span class=\"nu0\">4</span>: <span class=\"st0\">\"\
      Bye\"</span> <span class=\"br0\">)</span>;\n  Logf<span class=\"br0\">(</span>\
      \ Test <span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> <span\
      \ class=\"nu0\">1</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// The actual Logf... an anythingglob of parameters</span>\n<span class=\"\
      kw1\">function</span> Logf<span class=\"br0\">(</span> AnythingGlob params <span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">string</span> Format,FinalS, Flag;\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> sglbnum;\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> fglbnum;\n \n  Format <span class=\"\
      sy0\">=</span> params.<span class=\"me0\">StringGlob</span><span class=\"br0\"\
      >[</span>sglbnum<span class=\"sy0\">++</span><span class=\"br0\">]</span>;\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;=</span><span\
      \ class=\"kw3\">Len</span><span class=\"br0\">(</span>format<span class=\"br0\"\
      >)</span>;i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"kw3\">Mid</span><span class=\"br0\">(</span>format, i,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >==</span> <span class=\"st0\">\"%\"</span><span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n      i<span class=\"sy0\">++</span>;\n      Flag\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"\
      br0\">(</span>format,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Flag <span\
      \ class=\"sy0\">==</span> <span class=\"st0\">\"s\"</span> <span class=\"br0\"\
      >)</span>\n        FinalS <span class=\"sy0\">=</span> FinalS <span class=\"\
      sy0\">$</span> params.<span class=\"me0\">StringGlob</span><span class=\"br0\"\
      >[</span>sglbnum<span class=\"sy0\">++</span><span class=\"br0\">]</span>;\n\
      \      <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Flag <span class=\"sy0\">==</span> <span class=\"st0\">\"i\"\
      </span> <span class=\"br0\">)</span>\n        FinalS <span class=\"sy0\">=</span>\
      \ FinalS <span class=\"sy0\">$</span> <span class=\"kw5\">string</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span><span class=\"br0\">(</span>params.<span\
      \ class=\"me0\">NumberGlob</span><span class=\"br0\">[</span>fglbnum<span class=\"\
      sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n      <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> Flag <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">\"f\"</span> <span class=\"br0\">)</span>\n        FinalS\
      \ <span class=\"sy0\">=</span> FinalS <span class=\"sy0\">$</span> <span class=\"\
      kw5\">string</span><span class=\"br0\">(</span>params.<span class=\"me0\">NumberGlob</span><span\
      \ class=\"br0\">[</span>fglbnum<span class=\"sy0\">++</span><span class=\"br0\"\
      >]</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">else</span>\n\
      \      <span class=\"br0\">{</span>\n        FinalS <span class=\"sy0\">=</span>\
      \ FinalS <span class=\"sy0\">$</span> <span class=\"st0\">\"%\"</span>;\n  \
      \      i<span class=\"sy0\">--</span>;\n      <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span> FinalS\
      \ <span class=\"sy0\">=</span> FinalS <span class=\"sy0\">$</span> <span class=\"\
      kw3\">Mid</span><span class=\"br0\">(</span>format, i, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span>FinalS<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_topics\">Related topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Operators?section=10\"\
      \ title=\"Edit section: Related topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li>Main <a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a> topic page</li>\n<li><a href=\"/Legacy:Operators\"\
      \ title=\"Legacy:Operators\">Operators</a></li>\n</ul>\n<hr />\n<p><b>Mychaeel:</b>\
      \ Very nice. &#160;:tup: But please use third- (or fourth-) level headings where\
      \ they're due...</p>\n<p><b>Tarquin:</b> cool.&#160;:D Maybe split this into\
      \ several pages of ready-made operators, to sit alongside <a href=\"/Legacy:Useful_Maths_Functions\"\
      \ title=\"Legacy:Useful Maths Functions\">Useful Maths functions</a></p>\n<p><b>Foxpaw:</b>\
      \ This page had two separate explanations that were both complete so I merged\
      \ them into one – I've tried to ensure no content was lost, but if anything\
      \ was lost in the merger feel free to put it back. The original author was not\
      \ credited on the original page, the second explanation was made by Yoda.</p>\n\
      <p><b>Foxpaw:</b> It seems logical to assume that operators are \"simulated\"\
      \ due to their nature - is this an accurate assumption?</p>\n<p><b>Mychaeel:</b>\
      \ Usually operators are <i>static</i>, so the concept of <i>simulated</i> doesn't\
      \ apply; however, if you make a non-<i>static</i> operator, it's your choice\
      \ whether it is <i>simulated</i> (usable on clients) or not.</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.291 seconds\nReal time usage: 0.515 seconds\n\
      Preprocessor visited node count: 173/1000000\nPreprocessor generated node count:\
      \ 344/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2728-0!*!0!!en!*!* and timestamp 20221118021916 and revision\
      \ id 7322\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Color Operators"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Array"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Useful Maths Functions"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:AssociativeArray"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Using Operators"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 0
    anchor: "Using_Operators"
  - toclevel: 2
    level: "3"
    line: "Operators vs. Functions"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 22
    anchor: "Operators_vs._Functions"
  - toclevel: 2
    level: "3"
    line: "Binary operators"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 733
    anchor: "Binary_operators"
  - toclevel: 2
    level: "3"
    line: "Unary operators"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 7340
    anchor: "Unary_operators"
  - toclevel: 1
    level: "2"
    line: "Examples of Operators"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 8034
    anchor: "Examples_of_Operators"
  - toclevel: 2
    level: "3"
    line: "Using the Out Keyword"
    number: "2.1"
    index: "6"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 8464
    anchor: "Using_the_Out_Keyword"
  - toclevel: 2
    level: "3"
    line: "String Multiplication"
    number: "2.2"
    index: "7"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 8705
    anchor: "String_Multiplication"
  - toclevel: 2
    level: "3"
    line: "Actor Destruction"
    number: "2.3"
    index: "8"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 9178
    anchor: "Actor_Destruction"
  - toclevel: 2
    level: "3"
    line: "Implementing a crude Logf"
    number: "2.4"
    index: "9"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 9382
    anchor: "Implementing_a_crude_Logf"
  - toclevel: 1
    level: "2"
    line: "Related topics"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Scripting_Operators"
    byteoffset: 12123
    anchor: "Related_topics"
  displaytitle: "Legacy:Scripting Operators"
  iwlinks: []
  wikitext:
    text: "==Using Operators ==\n\n===Operators vs. Functions ===\n\nIn maths, the\
      \ difference is simply one of notation. The following mean the same, but the\
      \ first is written as an operator, the second and third as functions: \n\n<uscript>\n\
      \ 4 + 5\n +( 4 , 5 )\n plus( 4 , 5 )\n</uscript>\n\nIn [[Legacy:UnrealScript|UnrealScript]]\
      \ there is a similar distinction. Both functions and operators are represented\
      \ by some sort of symbol or group of symbols, but operator's parameters are\
      \ either side of the name instead of enclosed in brackets:\n\n<uscript>\n4 +\
      \ 5 ;\n4 plus 5 ;\nplus( 4 , 5 ) ;\n</uscript>\n\nIn UnrealScript, operators\
      \ are limited to having one or two parameters. UnrealScript's built-in operators\
      \ are defined in the [[Legacy:Object|Object]] class.\n\n===Binary operators\
      \ ===\n\nMost operators are ''binary'' &ndash; they take two parameters, one\
      \ on each side. Defining an operator is very similar to defining a function:\n\
      \n<uscript>\nstatic final operator(<priority>) <type> <opname> (<param1>, <param2>)\
      \ {}\n</uscript>\n\nNote that a return value is required for operators, even\
      \ if they have [[Legacy:Function Syntax|'out' parameters]].\n\nOperators need\
      \ to be declared as ''final'' (or the compiler will start bitching), but not\
      \ necessarily as ''static'' &ndash; if you don't declare an operator as ''static'',\
      \ you can access object variables in its code.  (Unlike non-''static'' functions\
      \ you can use a non-''static'' operator in a ''static'' function; any object\
      \ variables you access there yield their default properties in that case.) A\
      \ function declared as static may execute faster, however note that although\
      \ it may be static it cannot be referenced from outside of the class it was\
      \ defined in and its subclasses. The following, for instance, is not valid:\n\
      \n<UScript>ValueA class'MathFunctions'.static.+ ValueB</UScript>\n\nThe number\
      \ in parenthesis after the keyword \"operator\" gives the evaluation priority;\
      \ the lower this value, the earlier a term with this operator will be evaluated\
      \ when a complete expression is executed. For example, the exponentiation operator's\
      \ precedence is 12, multiplication is 16, and addition is 20. Consider the expression:\n\
      \n<uscript>A = B / 2 MyOperator 5; </uscript>\n\nIf MyOperator has a precedence\
      \ of 10, it'll bind tighter than division (16), so the expression will be evaluated\
      \ as:\n\n<uscript>A = B / (2 MyOperator 5);  </uscript>\n\nOn the other hand,\
      \ if MyOperator has a precedence of 20, it would evaluate as:\n\n<uscript>A\
      \ = (B / 2) MyOperator 5;  </uscript>\n\nThe valid range for precedence values\
      \ is 0-255. Here's a list of the existing values used in the built in operators:\
      \ \n\n{|\n\n|-\n|'''Precedence'''\n|'''Operator'''\n|'''Operation''' \n|-\n\
      | style=\"text-align: right\" |12\n| style=\"text-align: center\" |<code>**</code>\n\
      |Exponentiation\n|-\n| style=\"text-align: right\" |16\n| style=\"text-align:\
      \ center\" |<code>*</code>\n|Multiplication\n|-\n| style=\"text-align: right\"\
      \ |16\n| style=\"text-align: center\" |<code>/</code>\n|Division\n|-\n| style=\"\
      text-align: right\" |16\n| style=\"text-align: center\" |<code>Dot</code>\n\
      |Dot Product\n|-\n| style=\"text-align: right\" |16\n| style=\"text-align: center\"\
      \ |<code>Cross</code>\n|Cross Product\n|-\n| style=\"text-align: right\" |18\n\
      | style=\"text-align: center\" |<code>%</code>\n|Modulus\n|-\n| style=\"text-align:\
      \ right\" |20\n| style=\"text-align: center\" |<code>+</code>\n|Addition \n\
      |-\n| style=\"text-align: right\" |20\n| style=\"text-align: center\" |<code>-</code>\n\
      |Subtraction\n|-\n| style=\"text-align: right\" |22\n| style=\"text-align: center\"\
      \ |<code><<</code>\n|Left Shift\n|-\n| style=\"text-align: right\" |22\n| style=\"\
      text-align: center\" |<code>>></code>\n|Right Shift\n|-\n| style=\"text-align:\
      \ right\" |22\n| style=\"text-align: center\" |<code>>>></code>\n|Unsigned Right\
      \ Shift\n|-\n| style=\"text-align: right\" |24\n| style=\"text-align: center\"\
      \ |<code><</code>\n|Less Than\n|-\n| style=\"text-align: right\" |24\n| style=\"\
      text-align: center\" |<code>></code>\n|Greater Than\n|-\n| style=\"text-align:\
      \ right\" |24\n| style=\"text-align: center\" |<code><=</code>\n|Less or Equal\n\
      |-\n| style=\"text-align: right\" |24\n| style=\"text-align: center\" |<code>>=</code>\n\
      |Greater or Equal\n|-\n| style=\"text-align: right\" |24\n| style=\"text-align:\
      \ center\" |<code>----</code>\n|Equality \n|-\n| style=\"text-align: right\"\
      \ |24\n| style=\"text-align: center\" |<code>~=</code>\n|Approximate Equality\
      \ \n|-\n| style=\"text-align: right\" |26\n| style=\"text-align: center\" |<code>!=</code>\n\
      |Not Equal \n|-\n| style=\"text-align: right\" |28\n| style=\"text-align: center\"\
      \ |<code>&</code>\n|Bitwise And \n|-\n| style=\"text-align: right\" |28\n| style=\"\
      text-align: center\" |<code>{|\n\n|}\n</code>\n|Bitwise Or \n|-\n| style=\"\
      text-align: right\" |28\n| style=\"text-align: center\" |<code>^</code>\n|Bitwise\
      \ Xor \n|-\n| style=\"text-align: right\" |30\n| style=\"text-align: center\"\
      \ |<code>&&</code>\n|And \n|-\n| style=\"text-align: right\" |30\n| style=\"\
      text-align: center\" |<code>{|\n\n|-\n|\n|}\n</code>\n|Or \n|-\n| style=\"text-align:\
      \ right\" |32\n| style=\"text-align: center\" |<code>^^</code>\n|Xor \n|}\n\n\
      (Also see [[Legacy:Operators|Operators]].)\n\nType is what type the operator\
      \ will return, if any. This also works the same as a function.\n\nOpname is\
      \ the name of the operator, similar to the name of a function. However, the\
      \ name of an operator is more flexible. You can use any of the following as\
      \ an operator name:\n\nThe name/identifier of the operator. This can be: \n\
      * A string identifier, like a normal function. \n* A symbol, like +,-,*,/,#,:,etc.\
      \ \n* A group of two symbols. The compiler limits you to the symbol groups already\
      \ recognized by the parser: <<, >>, !=, <=, >=, ++, &ndash;, +=, -=, *=, /=,\
      \ &&, ||, ^^, ==, **, ~=, @= \n* The compiler also allows a special three-symbol\
      \ operator, >>>. \n\nThe parameters of the operator work the same way as a function,\
      \ but you must have two and only two parameters for a binary function. The first\
      \ parameter is the value on the left side of the operator when it is used. The\
      \ second parameter is the value on the right side of the operator when it is\
      \ used. Like a function, you can use the out keyword if you want an operator\
      \ to change the value of one of the values inputted to it.\n\nThe code for your\
      \ operator goes between the curly braces, the same way as a function. An operator\
      \ is largely a function that is merely called using a different syntax, as as\
      \ such can do most things that a function can. Use return as you would in a\
      \ function to return the result of the operator, if any.\n\nThe following example\
      \ is an alternative to %, the built-in modulo operator. This is an extremely\
      \ handy one to have, as the built-in % operator disagrees with the mathematical\
      \ modulo function for negative numbers.\n\n<uscript>\nstatic final operator(18)\
      \ float mod (float A, float B)\n{\n    if( A % B >= 0 )\n        return A %\
      \ B ;\n    else\n        return ( A % B ) + B ;\n}</uscript>\n\nNote that the\
      \ operator does not need to be represented by a single special character; it\
      \ can also be a valid symbol name. With the above example, the new syntax would\
      \ be:\n\n<uscript>\nlocal float a, b, c;\nc = a mod b;\n</uscript>\n\nHere's\
      \ another sample operator that will calculate the average of the left and right\
      \ side:\n\n<uscript>final operator(18) int : ( int A, int B )\n{\n  return (A\
      \ + B) / 2;\n}\nMiddle = 10 : 2; // Middle = 6\n\nMiddle = 10 + 2 : 4; // Middle\
      \ = (10 + 2) : 4 = 8\n</uscript>\n \n\nI made the priority for this operator\
      \ 18, so the addition will be evaluated before the : operator in this case.\
      \ \n\n===Unary operators ===\n\nUnary operators are similar, just use \"preoperator\"\
      \ or \"postoperator\" as the keyword. A preoperator and a postoperator has only\
      \ one parameter, and is prepended or appended to the value to be processed,\
      \ respectively. An example of a postoperator is ''++'' or ''&ndash;''. In addition,\
      \ there is no priority for unary operators, they will always be evaluated first.\
      \ I am not certain what the result is if a preoperator and a postoperator are\
      \ called on the same value simultaneously. An example of a unary operator, boolean\
      \ negation is defined by this line in the [[Legacy:Object|Object]] script:\n\
      \n<uscript>\nnative(129) static final preoperator bool ! (bool A);\n</uscript>\n\
      \n==Examples of Operators ==\n\nThere are many useful examples on the following\
      \ pages:\n* [[Legacy:Useful Maths Functions|Useful Maths functions]] &ndash;\
      \ number functions, trig functions and vector operators\n* [[Legacy:Color Operators|Color\
      \ Operators]]\n* [[Legacy:Dynamic Array|Dynamic Array]] implementation (hack\
      \ for [[Legacy:UT|UT]])\n* [[Legacy:AssociativeArray|AssociativeArray]] \n\n\
      More Examples of Operators are provided below.\n\n===Using the Out Keyword===\n\
      \n<uscript>\nfinal postoperator int # ( out int A );\n{   return A /= 10; //\
      \ Notice how A is modified here\n}\n\ni = 100;\n\nb = i#; // b = 10, i = 10\
      \ (i IS affected, because of the out keyword)\n\ni#; // i = 1\n</uscript>\n\n\
      ===String Multiplication===\n\nHere's a simple operator that will take a string,\
      \ and 'multiply' it by an integer, returning the string repeated that many times:\n\
      \n<uscript>\nstatic final operator(28) string * ( coerce string String, int\
      \ nRepetitions )\n{\n  local string Result;\n\n  while(nRepetitions > 0)\n \
      \ {\n    if ((nRepetitions & 1) == 1)\n      Result = Result $ String;\n   \
      \ String = String $ String;\n    nRepetitions = nRepetitions >> 1;\n  }\n\n\
      \  return Result;\n}\n</uscript>\n\n===Actor Destruction===\n\n<uscript>\nstatic\
      \ final postoperator Actor DIEDIEDIE ( out Actor NearlyDead )\n{\n  NearlyDead.Destroy();\n\
      \  return NearlyDead;\n}\nSomeActor DIEDIEDIE; // It is now dead.\n</uscript>\
      \ \n\n===Implementing a crude Logf===\n\nThis is a simple formatted function\
      \ that writes to the log file. You use the : operator to group together a bunch\
      \ of strings and floats (or integers), and then pass the resulting struct into\
      \ a function that willll parse the format and grab the needed strings/numbers\
      \ out of the struct.\n\n<uscript>\nclass TestLogf extends CommandLet;\n\n//\
      \ This will hold all of our parameters\nstruct AnythingGlob\n{\n  var string\
      \ StringGlob[20];\n  var int StringNum;\n  var float NumberGlob[20];\n  var\
      \ int NumberNum;\n  var int num;\n};\n\n// Add a string to a glob\nfinal operator(98)\
      \ AnythingGlob : ( anythingglob B, string A )\n{\n  B.StringGlob[B.StringNum++]\
      \ = A;\n  return B;\n}\n\n// Add a float to a glob\nfinal operator(98) AnythingGlob\
      \ : ( anythingglob B, float A )\n{\n  B.NumberGlob[B.NumberNum++] = A;\n  return\
      \ B;\n}\n\n// Create the glob out of 2 strings\nfinal operator(99) AnythingGlob\
      \ : ( string A, string B )\n{\n  local AnythingGlob C;\n  C.StringGlob[C.StringNum++]\
      \ = A;\n  C.StringGlob[C.StringNum++] = B;\n  return C;\n}\n\n// Create the\
      \ glob out of 2 floats\nfinal operator(99) AnythingGlob : ( float A, float B\
      \ )\n{\n  local AnythingGlob C;\n  C.NumberGlob[C.NumberNum++] = A;\n  C.NumberGlob[C.NumberNum++]\
      \ = B;\n  return C;\n}\n\n// Create the glob out of a string and a float\nfinal\
      \ operator(99) AnythingGlob : ( string A, float B )\n{\n  local AnythingGlob\
      \ C;\n\n  C.StringGlob[C.StringNum++] = A;\n  C.NumberGlob[C.NumberNum++] =\
      \ B;\n  return C;\n}\n\n// Create the glob out of a float and a string\nfinal\
      \ operator(99) AnythingGlob : ( float B, string A )\n{\n  local AnythingGlob\
      \ C;\n  C.StringGlob[C.StringNum++] = A;\n  C.NumberGlob[C.NumberNum++] = B;\n\
      \  return C;\n}\n\nfunction int main( string parm )\n{\n  local AnythingGlob\
      \ Test;\n  Logf( \"Testing... with a string '%s', an int '%i', and a float %f\"\
      : \"Test\": 6: 6.4 );\n  Logf( \"This commandlet was passed '%s'\": parm );\n\
      \  Test = ( \"Using prebuilt glob: %s %f %i %s\": \"Hello\": 3.1415926: 4: \"\
      Bye\" );\n  Logf( Test );\n  return 1;\n}\n\n// The actual Logf... an anythingglob\
      \ of parameters\nfunction Logf( AnythingGlob params )\n{\n  local int i;\n \
      \ local string Format,FinalS, Flag;\n  local int sglbnum;\n  local int fglbnum;\n\
      \n  Format = params.StringGlob[sglbnum++];\n  for (i=0;i<=Len(format);i++)\n\
      \  {\n    if (Mid(format, i, 1) == \"%\")\n  {\n      i++;\n      Flag = Mid(format,i,1);\n\
      \      if ( Flag == \"s\" )\n        FinalS = FinalS $ params.StringGlob[sglbnum++];\n\
      \      else if ( Flag == \"i\" )\n        FinalS = FinalS $ string(int(params.NumberGlob[fglbnum++]));\n\
      \      else if ( Flag == \"f\" )\n        FinalS = FinalS $ string(params.NumberGlob[fglbnum++]);\n\
      \      else\n      {\n        FinalS = FinalS $ \"%\";\n        i--;\n     \
      \ }\n    }\n    else FinalS = FinalS $ Mid(format, i, 1);\n  }\n  Log(FinalS);\n\
      }\n</uscript>\n\n==Related topics ==\n* Main [[Legacy:UnrealScript|UnrealScript]]\
      \ topic page\n* [[Legacy:Operators|Operators]]\n\n----\n\n'''Mychaeel:'''  Very\
      \ nice.  :tup:  But please use third- (or fourth-) level headings where they're\
      \ due...\n\n'''Tarquin:'''  cool. :D Maybe split this into several pages of\
      \ ready-made operators, to sit alongside [[Legacy:Useful Maths Functions|Useful\
      \ Maths functions]]\n\n'''Foxpaw:''' This page had two separate explanations\
      \ that were both complete so I merged them into one &ndash; I've tried to ensure\
      \ no content was lost, but if anything was lost in the merger feel free to put\
      \ it back. The original author was not credited on the original page, the second\
      \ explanation was made by Yoda.\n\n'''Foxpaw:''' It seems logical to assume\
      \ that operators are \"simulated\" due to their nature - is this an accurate\
      \ assumption?\n\n'''Mychaeel:''' Usually operators are ''static'', so the concept\
      \ of ''simulated'' doesn't apply; however, if you make a non-''static'' operator,\
      \ it's your choice whether it is ''simulated'' (usable on clients) or not."
  properties: []
  revId: 7322
name: "Legacy:Scripting Operators"
revision:
  revid: 7322
  parentid: 7323
  user: "Wormbo"
  timestamp: 1094638521.000000000
  comment: "*"
timestamp: 1668763290.539218000
