---
parse:
  title: "Defaultproperties"
  text:
    text: "<p>The <b>defaultproperties</b> block is a special section in an <a href=\"\
      /UnrealScript\" title=\"UnrealScript\">UnrealScript</a> class source file. It\
      \ can define or redefine default values for all properties declared in the class\
      \ or inherited from a parent class. If a property is not mentioned in the defaultproperties\
      \ block, its default value is inherited from the parent class. If a property\
      \ is not mentioned in any parent class defaultproperties either, its default\
      \ value is corresponding the <a href=\"/edit/Initial_value?redlink=1\" class=\"\
      new\" title=\"Initial value (page does not exist)\">initial value</a> of the\
      \ property's <a href=\"/Type\" title=\"Type\" class=\"mw-redirect\">type</a>.</p>\n\
      <p>Like <a href=\"/Cpptext\" title=\"Cpptext\">cpptext</a> blocks, the defaultproperties\
      \ block is stripped from the source when the class source is imported by the\
      \ UnrealScript compiler. This means you can neither see nor specify it in the\
      \ <a href=\"/edit/Source_code_editor?redlink=1\" class=\"new\" title=\"Source\
      \ code editor (page does not exist)\">Source code editor</a> of <a href=\"/UnrealEd\"\
      \ title=\"UnrealEd\" class=\"mw-redirect\">UnrealEd</a> versions coming with\
      \ <a href=\"/Unreal_Engine\" title=\"Unreal Engine\" class=\"mw-redirect\">Unreal\
      \ Engine</a> generations 1 and 2. When exporting source scripts from UnrealEd's\
      \ <a href=\"/edit/Actor_Classes_browser?redlink=1\" class=\"new\" title=\"Actor\
      \ Classes browser (page does not exist)\">Actor Classes browser</a> or with\
      \ the <a href=\"/edit/BatchExportCommandlet?redlink=1\" class=\"new\" title=\"\
      BatchExportCommandlet (page does not exist)\">BatchExportCommandlet</a>, a defaultproperties\
      \ block is generated for each class from the current default values of all properties\
      \ that differ from their default value in the parent class. These generated\
      \ defaults may include values read from <a href=\"/edit/Configuration_files?redlink=1\"\
      \ class=\"new\" title=\"Configuration files (page does not exist)\">configuration</a>\
      \ and <a href=\"/edit/Localization_files?redlink=1\" class=\"new\" title=\"\
      Localization files (page does not exist)\">localization files</a>, so make sure\
      \ they don't include any sensitive data like your login password before you\
      \ publish them. Also, especially in <a href=\"/UT2003\" title=\"UT2003\" class=\"\
      mw-redirect\">UT2003</a> and <a href=\"/UT3\" title=\"UT3\" class=\"mw-redirect\"\
      >UT3</a> exported defaults differ greatly from the imported defaults in some\
      \ areas.</p>\n<p>To edit default values of a class from within UnrealEd, go\
      \ to the <a href=\"/edit/Actor_Classes_browser?redlink=1\" class=\"new\" title=\"\
      Actor Classes browser (page does not exist)\">Actor Classes browser</a>, find\
      \ and right-click the class in the tree and select \"Default properties...\"\
      \ in the pop-up menu. A window titled \"Default <i>Packagename.Classname</i>\
      \ Properties\" similar to the <a href=\"/edit/Actor_Properties_window?redlink=1\"\
      \ class=\"new\" title=\"Actor Properties window (page does not exist)\">Actor\
      \ Properties window</a> will open and allow you to change most of the default\
      \ values. As with the Actor Properties window, what exactly you are allowed\
      \ to change depends on the declaration of the corresponding <a href=\"/Variables\"\
      \ title=\"Variables\">variables</a>.</p>\n<p><b>Note:</b> All script-editing\
      \ capabilities have been removed from the Unreal Engine 3 Unreal Editor. This\
      \ includes editing default values. Instead, you can create <a href=\"/Archetypes\"\
      \ title=\"Archetypes\" class=\"mw-redirect\">Archetypes</a>, but only for non-<a\
      \ href=\"/Abstract\" title=\"Abstract\" class=\"mw-redirect\">abstract</a>,\
      \ <a href=\"/Placeable\" title=\"Placeable\" class=\"mw-redirect\">placeable</a>\
      \ Actor classes.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#General_syntax\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">General syntax</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Default_struct_properties\"><span class=\"tocnumber\">1.1</span>\
      \ <span class=\"toctext\">Default struct properties</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Specifying_default_values\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Specifying default\
      \ values</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Manipulating_dynamic_arrays_in_UE3\"><span class=\"tocnumber\">2.1</span> <span\
      \ class=\"toctext\">Manipulating dynamic arrays in UE3</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Value_format\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Value format</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Boolean_values\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">Boolean values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Byte_values\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">Byte values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Enum_values\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">Enum values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Float_values\"><span class=\"\
      tocnumber\">3.4</span> <span class=\"toctext\">Float values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Int_values\"><span class=\"\
      tocnumber\">3.5</span> <span class=\"toctext\">Int values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#Name_values\"><span class=\"\
      tocnumber\">3.6</span> <span class=\"toctext\">Name values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#Object_values\"><span class=\"\
      tocnumber\">3.7</span> <span class=\"toctext\">Object values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#String_values\"><span class=\"\
      tocnumber\">3.8</span> <span class=\"toctext\">String values</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-14\"><a href=\"#Dynamic_arrays\"><span class=\"\
      tocnumber\">3.9</span> <span class=\"toctext\">Dynamic arrays</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#Struct_values\"><span class=\"\
      tocnumber\">3.10</span> <span class=\"toctext\">Struct values</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"\
      General_syntax\">General syntax</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=1\"\
      \ title=\"Edit section: General syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<pre><b>defaultproperties</b>\n<b>{</b>\n  <i>...</i>\n\
      <b>}</b>\n</pre>\n<p>The keyword <i>defaultproperties</i> and the braces must\
      \ each be on their own line. Especially putting the opening brace on the same\
      \ line as the keyword <i>defaultproperties</i> will not work! The default value\
      \ definitions are separated by line breaks and are <i>not</i> regular UnrealScript\
      \ code. They are more similar to the format of <a href=\"/edit/T3D_files?redlink=1\"\
      \ class=\"new\" title=\"T3D files (page does not exist)\">T3D files</a>. Starting\
      \ with Unreal Engine 2, the defaultproperties block may also contain <a href=\"\
      /Subobject\" title=\"Subobject\" class=\"mw-redirect\">Subobject</a> definitions.</p>\n\
      <p>The defaultproperties section may contain <a href=\"/Comments\" title=\"\
      Comments\">comments</a>. In Unreal Engine 1 block comment support for the defaults\
      \ section is very buggy, so line comments should be used instead.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Default_struct_properties\">Default struct properties</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Defaultproperties?section=2\" title=\"Edit section: Default struct\
      \ properties\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Starting with Unreal Engine 3 it's also possible to specify default values\
      \ for <a href=\"/Struct\" title=\"Struct\" class=\"mw-redirect\">struct</a>\
      \ members. The syntax and rules are identical to the class defaultproperties,\
      \ except that the block starts with the keyword <i>structdefaultproperties</i>:</p>\n\
      <pre><b>struct</b> <i>(struct declaration)</i>\n<b>{</b>\n  <i>(struct member\
      \ declarations)</i>\n  \n  <b>structdefaultproperties</b>\n  <b>{</b>\n    <i>...</i>\n\
      \  <b>}</b>\n<b>}</b>\n</pre>\n<p>As with class defaults, structs that extend\
      \ another struct will inherit default values from the parent struct.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Specifying_default_values\">Specifying default\
      \ values</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Defaultproperties?section=3\" title=\"Edit section:\
      \ Specifying default values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Each line in the defaultproperties can assign a value\
      \ to a class variable that is not a <a href=\"/Static_array\" title=\"Static\
      \ array\" class=\"mw-redirect\">static array</a> or to an element of a static\
      \ or <a href=\"/Dynamic_array\" title=\"Dynamic array\" class=\"mw-redirect\"\
      >dynamic array</a> variable. Dynamic array variables can also be assigned as\
      \ a whole. Starting with Unreal Engine 3, dynamic arrays can also be manipulated\
      \ in other ways than setting a value for an element or the complete array. Struct\
      \ variables must always be assigned directly, but the actual members to manipulate\
      \ can be specified in the value part.</p>\n<p>The syntax for manipulating a\
      \ value is:</p>\n<pre><i>propertyname</i>=<i>value</i>\n</pre>\n<p>Note that\
      \ Unreal Engine 1 does not allow whitespace before the equals sign. Any whitespace\
      \ following the equal sign is treated as part of the value, which may cause\
      \ trouble if the property type does not specifically allow whitespace. These\
      \ restrictions no longer exist in Unreal Engine 2 and 3. This syntax is also\
      \ used to assign an entire dynamic array by putting all array elements in the\
      \ value definition. Trailing semicolons are allowed, but not required because\
      \ only line breaks are used as separator.</p>\n<p>The syntax for manipulating\
      \ an array element is:</p>\n<pre><i>propertyname</i>(<i>index</i>)=<i>value</i>\n\
      </pre>\n<p>The <i>index</i> may only consist of decimal digits and can be surrounded\
      \ by whitespace. However, Unreal Engine 1 does not allow spaces around the equals\
      \ sign or before the first parenthesis. And yes, it demands round parentheses.\
      \ Starting with Unreal Engine 2 you can also use square brackets and insert\
      \ whitespace spaces around the equals sign and parentheses.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Manipulating_dynamic_arrays_in_UE3\">Manipulating dynamic\
      \ arrays in UE3</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Defaultproperties?section=4\" title=\"Edit section:\
      \ Manipulating dynamic arrays in UE3\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Changing a <a href=\"/Dynamic_array\" title=\"Dynamic\
      \ array\" class=\"mw-redirect\">dynamic array</a>'s default content only slightly\
      \ from that of the parent class is a much easier task in Unreal Engine 3. The\
      \ following operations can be freely mixed and are performed in the order they\
      \ appear in the defaultproperties block.</p>\n<p>Making the array completely\
      \ empty:</p>\n<pre><i>propertyname</i>.<b>Empty</b>\n</pre>\n<p>Adding a value\
      \ to the end of the array:</p>\n<pre><i>propertyname</i>.<b>Add</b>(<i>value</i>)\n\
      </pre>\n<p>Removing all occurrences of a value from the array:</p>\n<pre><i>propertyname</i>.<b>Remove</b>(<i>value</i>)\n\
      </pre>\n<p>Removing an element at a specific index:</p>\n<pre><i>propertyname</i>.<b>RemoveIndex</b>(<i>index</i>)\n\
      </pre>\n<p>Replacing all occurrences of a value with another value:</p>\n<pre><i>propertyname</i>.<b>Replace</b>(<i>oldvalue</i>,<i>newvalue</i>)\n\
      </pre>\n<p>These operations always require the entire value to be specified.\
      \ For partial manipulation of struct members you will have to use the regular\
      \ array element notation <code><i>propertyname</i>(<i>index</i>)=<i>value</i></code>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Value_format\">Value format</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Defaultproperties?section=5\" title=\"Edit section: Value format\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ defaultproperties block not only has a different general syntax, but also\
      \ a slightly different way to specify some values.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Boolean_values\">Boolean values</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=6\"\
      \ title=\"Edit section: Boolean values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Boolean values can be either \"1\", \"True\" or the\
      \ language-specific string representation of that value to set the property\
      \ to <i>True</i>, or \"0\", \"False\" or the language-specific string representation\
      \ of that value to set the property to <i>False</i>. Any other value is ignored.\
      \ Values are case-insensitive and can optionally be enclosed in double quotes.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Byte_values\">Byte values</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=7\"\
      \ title=\"Edit section: Byte values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Byte values may only consist of decimal digits and\
      \ must not contain a sign. Hexadecimal notation with the 0x prefix is not supported.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Enum_values\">Enum values</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=8\"\
      \ title=\"Edit section: Enum values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Values of enum properties are simply the name of the\
      \ enum constant, optionally enclosed in double quotes.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Float_values\">Float values</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=9\"\
      \ title=\"Edit section: Float values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The value for a float property consists of:</p>\n\
      <ol>\n<li>an optional sign, i.e. + or -</li>\n<li>zero or more decimal digits</li>\n\
      <li>optionally a dot followed by zero or more decimal digits</li>\n<li>optionally\
      \ the letter D or E in upper- or lowercase, followed by an optional sign and\
      \ one or more decimal digits</li>\n</ol>\n<p>A float value may be surrounded\
      \ by whitespace and followed by any \"junk data\" except comma and right/closing\
      \ round parenthesis.</p>\n<h3><span class=\"mw-headline\" id=\"Int_values\"\
      >Int values</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Defaultproperties?section=10\" title=\"Edit section:\
      \ Int values\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Like byte values, int values may only consist of decimal digits. They may\
      \ also be preceded by a minus sign. Hexadecimal notation is not supported.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Name_values\">Name values</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=11\"\
      \ title=\"Edit section: Name values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The value of a name property may either be a double-quoted,\
      \ non-empty string or a token that may start with a letter or digit and contain\
      \ letters, digits, the underscore and the minus character. If the name starts\
      \ with an underscore or minus character, you need to use the double-quoted notation.\
      \ Note that the name value may not exceed 63 characters.</p>\n<p>The usual notation\
      \ in single quotes is not supported in Unreal Engine 1 and 2.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Object_values\">Object values</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Defaultproperties?section=12\"\
      \ title=\"Edit section: Object values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Values for object properties can be specified <a href=\"\
      /Literals#Objects\" title=\"Literals\">as usual</a>. Additionally you can also\
      \ omit the class name and single quotes and only write the qualified or unqualified\
      \ object name.</p>\n<p>Be careful when using Unreal Engine 1 or when specifying\
      \ <a href=\"/Types#Class\" title=\"Types\">class limiter</a> properties. You\
      \ will not get a warning when the value doesn't fit in the variable due to type\
      \ mismatches. Check the default value of your class in <a href=\"/UnrealEd\"\
      \ title=\"UnrealEd\" class=\"mw-redirect\">UnrealEd</a> or with a tool such\
      \ as <a href=\"/UTPT\" title=\"UTPT\">UTPT</a> to see if it was imported correctly.</p>\n\
      <p><a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a> can only be referenced\
      \ if they were defined <i>before</i> (i.e. above) the assignment or array operation\
      \ referencing that subobject.</p>\n<h3><span class=\"mw-headline\" id=\"String_values\"\
      >String values</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Defaultproperties?section=13\" title=\"Edit section:\
      \ String values\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>For strings, the usual <a href=\"/Literals#Strings\" title=\"Literals\">double-quoted\
      \ notation</a> is allowed.</p>\n<h3><span class=\"mw-headline\" id=\"Dynamic_arrays\"\
      >Dynamic arrays</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Defaultproperties?section=14\" title=\"Edit section:\
      \ Dynamic arrays\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>When assigning values to an entire dynamic array, the values are separated\
      \ by commas and the entire list is enclosed in round parentheses. Each value\
      \ must be specified as described in the above sections. There may not be any\
      \ whitespace around values, unless permitted by the value type. The entire list\
      \ of values must be on a single line:</p>\n<pre><i>property</i>=(<i>value1</i>,<i>value2</i>,<i>value3</i>)\n\
      </pre>\n<p>The assignment always replaces all previous elements in the array.\
      \ The array is trimmed to a length equal to the number of values in the assignment.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Struct_values\">Struct values</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Defaultproperties?section=15\" title=\"Edit section: Struct values\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Struct\
      \ values are specified in a similar way as array values: value definition are\
      \ separated by commas and the entire definition is enclosed in round parentheses.\
      \ The difference is, that for each value the struct member name must be specified\
      \ like for class defaults:</p>\n<pre><i>property</i>=(<i>member1</i>=<i>value1</i>,<i>member2</i>=<i>value2</i>)\n\
      </pre>\n<p>The entire set of values must be on a single line, but starting with\
      \ Unreal Engine 3 you can also enclose the struct value definition in curly\
      \ braces to allow line breaks between the values:</p>\n<pre><i>property</i>=<b>{</b>(\n\
      \  <i>member1</i>=<i>value1</i>,\n  <i>member2</i>=<i>value2</i>\n)<b>}</b>\n\
      </pre>\n<p>Struct members not mentioned in the definition of the struct property\
      \ value will inherit the parent class default value. If the property was declared\
      \ in this class, the default member value for that struct type is inherited.\
      \ If no default value for that struct member was specified in the struct type,\
      \ the member type's <a href=\"/edit/Initial_value?redlink=1\" class=\"new\"\
      \ title=\"Initial value (page does not exist)\">initial value</a> is used.</p>\n\
      <table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <strong class=\"selflink\"\
      >Defaultproperties</strong>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\"\
      >Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/Types\" title=\"Types\">Types</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"\
      mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\"\
      >byte</a>&#160;• <a href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;•\
      \ <a href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.119 seconds\nReal time usage: 0.157 seconds\nPreprocessor\
      \ visited node count: 223/1000000\nPreprocessor generated node count: 933/1000000\n\
      Post‐expand include size: 10650/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   44.896      1 - -total\n100.00%   44.896      1 - Template:Navbox_unrealscript\n\
      \ 75.74%   34.005      1 - Template:Navbox\n 19.72%    8.852      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:4830-0!*!0!!en!*!*\
      \ and timestamp 20221117232813 and revision id 10989\n -->\n"
  categories:
  - sortkey: "Defaultproperties"
    name: "UnrealScript_reference"
  links:
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Subobject"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: false
    name: "Initial value"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Type"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "UTPT"
  - ns: 0
    exists: true
    name: "Abstract"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Unreal Engine"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Static array"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "UT2003"
  - ns: 0
    exists: false
    name: "Configuration files"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: false
    name: "Actor Properties window"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: false
    name: "Actor Classes browser"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: false
    name: "BatchExportCommandlet"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: false
    name: "Localization files"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "UnrealEd"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Placeable"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: false
    name: "Source code editor"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: true
    name: "UT3"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: false
    name: "T3D files"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 0
    exists: true
    name: "Archetypes"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "General syntax"
    number: "1"
    index: "1"
    fromtitle: "Defaultproperties"
    byteoffset: 2178
    anchor: "General_syntax"
  - toclevel: 2
    level: "3"
    line: "Default struct properties"
    number: "1.1"
    index: "2"
    fromtitle: "Defaultproperties"
    byteoffset: 2877
    anchor: "Default_struct_properties"
  - toclevel: 1
    level: "2"
    line: "Specifying default values"
    number: "2"
    index: "3"
    fromtitle: "Defaultproperties"
    byteoffset: 3427
    anchor: "Specifying_default_values"
  - toclevel: 2
    level: "3"
    line: "Manipulating dynamic arrays in UE3"
    number: "2.1"
    index: "4"
    fromtitle: "Defaultproperties"
    byteoffset: 4972
    anchor: "Manipulating_dynamic_arrays_in_UE3"
  - toclevel: 1
    level: "2"
    line: "Value format"
    number: "3"
    index: "5"
    fromtitle: "Defaultproperties"
    byteoffset: 5927
    anchor: "Value_format"
  - toclevel: 2
    level: "3"
    line: "Boolean values"
    number: "3.1"
    index: "6"
    fromtitle: "Defaultproperties"
    byteoffset: 6072
    anchor: "Boolean_values"
  - toclevel: 2
    level: "3"
    line: "Byte values"
    number: "3.2"
    index: "7"
    fromtitle: "Defaultproperties"
    byteoffset: 6445
    anchor: "Byte_values"
  - toclevel: 2
    level: "3"
    line: "Enum values"
    number: "3.3"
    index: "8"
    fromtitle: "Defaultproperties"
    byteoffset: 6598
    anchor: "Enum_values"
  - toclevel: 2
    level: "3"
    line: "Float values"
    number: "3.4"
    index: "9"
    fromtitle: "Defaultproperties"
    byteoffset: 6723
    anchor: "Float_values"
  - toclevel: 2
    level: "3"
    line: "Int values"
    number: "3.5"
    index: "10"
    fromtitle: "Defaultproperties"
    byteoffset: 7147
    anchor: "Int_values"
  - toclevel: 2
    level: "3"
    line: "Name values"
    number: "3.6"
    index: "11"
    fromtitle: "Defaultproperties"
    byteoffset: 7312
    anchor: "Name_values"
  - toclevel: 2
    level: "3"
    line: "Object values"
    number: "3.7"
    index: "12"
    fromtitle: "Defaultproperties"
    byteoffset: 7763
    anchor: "Object_values"
  - toclevel: 2
    level: "3"
    line: "String values"
    number: "3.8"
    index: "13"
    fromtitle: "Defaultproperties"
    byteoffset: 8445
    anchor: "String_values"
  - toclevel: 2
    level: "3"
    line: "Dynamic arrays"
    number: "3.9"
    index: "14"
    fromtitle: "Defaultproperties"
    byteoffset: 8545
    anchor: "Dynamic_arrays"
  - toclevel: 2
    level: "3"
    line: "Struct values"
    number: "3.10"
    index: "15"
    fromtitle: "Defaultproperties"
    byteoffset: 9104
    anchor: "Struct_values"
  displaytitle: "defaultproperties"
  iwlinks: []
  wikitext:
    text: "{{DISPLAYTITLE:defaultproperties}}\nThe '''defaultproperties''' block is\
      \ a special section in an [[UnrealScript]] class source file. It can define\
      \ or redefine default values for all properties declared in the class or inherited\
      \ from a parent class. If a property is not mentioned in the defaultproperties\
      \ block, its default value is inherited from the parent class. If a property\
      \ is not mentioned in any parent class defaultproperties either, its default\
      \ value is corresponding the [[initial value]] of the property's [[type]].\n\
      \nLike [[cpptext]] blocks, the defaultproperties block is stripped from the\
      \ source when the class source is imported by the UnrealScript compiler. This\
      \ means you can neither see nor specify it in the [[Source code editor]] of\
      \ [[UnrealEd]] versions coming with [[Unreal Engine]] generations 1 and 2. When\
      \ exporting source scripts from UnrealEd's [[Actor Classes browser]] or with\
      \ the [[BatchExportCommandlet]], a defaultproperties block is generated for\
      \ each class from the current default values of all properties that differ from\
      \ their default value in the parent class. These generated defaults may include\
      \ values read from [[configuration files|configuration]] and [[localization\
      \ files]], so make sure they don't include any sensitive data like your login\
      \ password before you publish them. Also, especially in [[UT2003]] and [[UT3]]\
      \ exported defaults differ greatly from the imported defaults in some areas.\n\
      \nTo edit default values of a class from within UnrealEd, go to the [[Actor\
      \ Classes browser]], find and right-click the class in the tree and select \"\
      Default properties...\" in the pop-up menu. A window titled \"Default ''Packagename.Classname''\
      \ Properties\" similar to the [[Actor Properties window]] will open and allow\
      \ you to change most of the default values. As with the Actor Properties window,\
      \ what exactly you are allowed to change depends on the declaration of the corresponding\
      \ [[variables]].\n\n'''Note:''' All script-editing capabilities have been removed\
      \ from the Unreal Engine 3 Unreal Editor. This includes editing default values.\
      \ Instead, you can create [[Archetypes]], but only for non-[[abstract]], [[placeable]]\
      \ Actor classes.\n\n==General syntax==\n '''defaultproperties'''\n '''{'''\n\
      \   ''...''\n '''}'''\nThe keyword ''defaultproperties'' and the braces must\
      \ each be on their own line. Especially putting the opening brace on the same\
      \ line as the keyword ''defaultproperties'' will not work! The default value\
      \ definitions are separated by line breaks and are ''not'' regular UnrealScript\
      \ code. They are more similar to the format of [[T3D files]]. Starting with\
      \ Unreal Engine 2, the defaultproperties block may also contain [[Subobject]]\
      \ definitions.\n\nThe defaultproperties section may contain [[comments]]. In\
      \ Unreal Engine 1 block comment support for the defaults section is very buggy,\
      \ so line comments should be used instead.\n\n===Default struct properties===\n\
      Starting with Unreal Engine 3 it's also possible to specify default values for\
      \ [[struct]] members. The syntax and rules are identical to the class defaultproperties,\
      \ except that the block starts with the keyword ''structdefaultproperties'':\n\
      \ '''struct''' ''(struct declaration)''\n '''{'''\n   ''(struct member declarations)''\n\
      \   \n   '''structdefaultproperties'''\n   '''{'''\n     ''...''\n   '''}'''\n\
      \ '''}'''\nAs with class defaults, structs that extend another struct will inherit\
      \ default values from the parent struct.\n\n==Specifying default values==\n\
      Each line in the defaultproperties can assign a value to a class variable that\
      \ is not a [[static array]] or to an element of a static or [[dynamic array]]\
      \ variable. Dynamic array variables can also be assigned as a whole. Starting\
      \ with Unreal Engine 3, dynamic arrays can also be manipulated in other ways\
      \ than setting a value for an element or the complete array. Struct variables\
      \ must always be assigned directly, but the actual members to manipulate can\
      \ be specified in the value part.\n\nThe syntax for manipulating a value is:\n\
      \ ''propertyname''=''value''\nNote that Unreal Engine 1 does not allow whitespace\
      \ before the equals sign. Any whitespace following the equal sign is treated\
      \ as part of the value, which may cause trouble if the property type does not\
      \ specifically allow whitespace. These restrictions no longer exist in Unreal\
      \ Engine 2 and 3. This syntax is also used to assign an entire dynamic array\
      \ by putting all array elements in the value definition. Trailing semicolons\
      \ are allowed, but not required because only line breaks are used as separator.\n\
      \nThe syntax for manipulating an array element is:\n ''propertyname''(''index'')=''value''\n\
      The ''index'' may only consist of decimal digits and can be surrounded by whitespace.\
      \ However, Unreal Engine 1 does not allow spaces around the equals sign or before\
      \ the first parenthesis. And yes, it demands round parentheses. Starting with\
      \ Unreal Engine 2 you can also use square brackets and insert whitespace spaces\
      \ around the equals sign and parentheses.\n\n===Manipulating dynamic arrays\
      \ in UE3===\nChanging a [[dynamic array]]'s default content only slightly from\
      \ that of the parent class is a much easier task in Unreal Engine 3. The following\
      \ operations can be freely mixed and are performed in the order they appear\
      \ in the defaultproperties block.\n\nMaking the array completely empty:\n ''propertyname''.'''Empty'''\n\
      Adding a value to the end of the array:\n ''propertyname''.'''Add'''(''value'')\n\
      Removing all occurrences of a value from the array:\n ''propertyname''.'''Remove'''(''value'')\n\
      Removing an element at a specific index:\n ''propertyname''.'''RemoveIndex'''(''index'')\n\
      Replacing all occurrences of a value with another value:\n ''propertyname''.'''Replace'''(''oldvalue'',''newvalue'')\n\
      These operations always require the entire value to be specified. For partial\
      \ manipulation of struct members you will have to use the regular array element\
      \ notation <code>''propertyname''(''index'')=''value''</code>.\n\n==Value format==\n\
      The defaultproperties block not only has a different general syntax, but also\
      \ a slightly different way to specify some values.\n\n===Boolean values===\n\
      Boolean values can be either \"1\", \"True\" or the language-specific string\
      \ representation of that value to set the property to ''True'', or \"0\", \"\
      False\" or the language-specific string representation of that value to set\
      \ the property to ''False''. Any other value is ignored. Values are case-insensitive\
      \ and can optionally be enclosed in double quotes.\n\n===Byte values===\nByte\
      \ values may only consist of decimal digits and must not contain a sign. Hexadecimal\
      \ notation with the 0x prefix is not supported.\n\n===Enum values===\nValues\
      \ of enum properties are simply the name of the enum constant, optionally enclosed\
      \ in double quotes.\n\n===Float values===\nThe value for a float property consists\
      \ of:\n#an optional sign, i.e. + or -\n#zero or more decimal digits\n#optionally\
      \ a dot followed by zero or more decimal digits\n#optionally the letter D or\
      \ E in upper- or lowercase, followed by an optional sign and one or more decimal\
      \ digits\nA float value may be surrounded by whitespace and followed by any\
      \ \"junk data\" except comma and right/closing round parenthesis.\n\n===Int\
      \ values===\nLike byte values, int values may only consist of decimal digits.\
      \ They may also be preceded by a minus sign. Hexadecimal notation is not supported.\n\
      \n===Name values===\nThe value of a name property may either be a double-quoted,\
      \ non-empty string or a token that may start with a letter or digit and contain\
      \ letters, digits, the underscore and the minus character. If the name starts\
      \ with an underscore or minus character, you need to use the double-quoted notation.\
      \ Note that the name value may not exceed 63 characters.\n\nThe usual notation\
      \ in single quotes is not supported in Unreal Engine 1 and 2.\n\n===Object values===\n\
      Values for object properties can be specified [[Literals#Objects|as usual]].\
      \ Additionally you can also omit the class name and single quotes and only write\
      \ the qualified or unqualified object name.\n\nBe careful when using Unreal\
      \ Engine 1 or when specifying [[Types#Class|class limiter]] properties. You\
      \ will not get a warning when the value doesn't fit in the variable due to type\
      \ mismatches. Check the default value of your class in [[UnrealEd]] or with\
      \ a tool such as [[UTPT]] to see if it was imported correctly.\n\n[[Subobjects]]\
      \ can only be referenced if they were defined ''before'' (i.e. above) the assignment\
      \ or array operation referencing that subobject.\n\n===String values===\nFor\
      \ strings, the usual [[Literals#Strings|double-quoted notation]] is allowed.\n\
      \n===Dynamic arrays===\nWhen assigning values to an entire dynamic array, the\
      \ values are separated by commas and the entire list is enclosed in round parentheses.\
      \ Each value must be specified as described in the above sections. There may\
      \ not be any whitespace around values, unless permitted by the value type. The\
      \ entire list of values must be on a single line:\n ''property''=(''value1'',''value2'',''value3'')\n\
      The assignment always replaces all previous elements in the array. The array\
      \ is trimmed to a length equal to the number of values in the assignment.\n\n\
      ===Struct values===\nStruct values are specified in a similar way as array values:\
      \ value definition are separated by commas and the entire definition is enclosed\
      \ in round parentheses. The difference is, that for each value the struct member\
      \ name must be specified like for class defaults:\n ''property''=(''member1''=''value1'',''member2''=''value2'')\n\
      The entire set of values must be on a single line, but starting with Unreal\
      \ Engine 3 you can also enclose the struct value definition in curly braces\
      \ to allow line breaks between the values:\n ''property''='''{'''(\n   ''member1''=''value1'',\n\
      \   ''member2''=''value2''\n )'''}'''\nStruct members not mentioned in the definition\
      \ of the struct property value will inherit the parent class default value.\
      \ If the property was declared in this class, the default member value for that\
      \ struct type is inherited. If no default value for that struct member was specified\
      \ in the struct type, the member type's [[initial value]] is used.\n\n{{navbox\
      \ unrealscript}}"
  properties:
  - name: "displaytitle"
    value: "defaultproperties"
  revId: 10989
name: "Defaultproperties"
revision:
  revid: 10989
  parentid: 10988
  user: "Wormbo"
  timestamp: 1208003787.000000000
  comment: "/* Name values */ aparently UE3 supports single quotes"
timestamp: 1668754701.981009000
