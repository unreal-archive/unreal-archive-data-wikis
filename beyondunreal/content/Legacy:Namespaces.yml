---
parse:
  title: "Legacy:Namespaces"
  text:
    text: "<p><b>Namespaces will probably be implemented by the time UT2003 and U2\
      \ are concurrent. Until then see <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a> for how to deal with new pages.</b></p>\n\
      <hr />\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Proposals\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Proposals</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Old_Discussion\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Old Discussion</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Technical_Implementation\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Technical Implementation</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Interface\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Interface</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-5\"><a href=\"#Usage\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Usage</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Feb_2003\"><span class=\"tocnumber\">6</span> <span\
      \ class=\"toctext\">Feb 2003</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Proposals\">Proposals</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Namespaces?section=1\"\
      \ title=\"Edit section: Proposals\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Mychaeel:</b> I've kept thinking about this, and\
      \ I'm suggesting the following (not claiming it hasn't been mentioned before):</p>\n\
      <ul>\n<li>Introduce technical support for namespaces.</li>\n<li>Create namespaces\
      \ for the various games, not by engine version but by game name: U, UT, UT2003,\
      \ UE2, DX...</li>\n<li>As soon as the class structure of UT2003 is known, move\
      \ all UT classes that have no UT2003 counterpart, or whose UT2003 counterpart\
      \ of the same name has a different meaning or a sufficiently different implementation\
      \ to justify a separate page, into the UT namespace. Create pages on classes\
      \ only present in UT2003 (see above) in the UT2003 namespace.</li>\n</ul>\n\
      <p>Unqualified page links will automatically lead to pages in the current namespace\
      \ if possible, or to pages in the global namespace otherwise, or open a \"new\
      \ page\" edit field within the current namespace.</p>\n<p>The only pages that\
      \ remain in the global namespace are those that apply to all engine versions.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Old_Discussion\">Old Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Namespaces?section=2\" title=\"Edit section: Old Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>to\
      \ set the scene...</p>\n<p><b>Tarquin:</b> Implement some heavy Wiki techology\
      \ such as namespaces so the global namespace is the latest version of the engine,\
      \ and for example current page Actor becomes UT:Actor. Would require major scripting.</p>\n\
      <p><b>Mychaeel:</b> ...but is <i>definitely</i> the preferable way. Everything\
      \ else is bound to lead to major confusion.</p>\n<p><b>Tarquin:</b> urg. But\
      \ do we simply fool the current system into accepting names like \"UT:actor\"\
      \ by using some sort of escape character and then detect it in the GetLink subs,\
      \ or do we have to majorly hack the way the data is stored? Or even somehow\
      \ hijack the built-in InterWiki links – they work like this: Wikipedia:Pagename\
      \ AFAIK, but I haven't implemented them.</p>\n<p><b>Mychaeel:</b> We could make\
      \ it upside-down: Not consider the namespace a new top-level branch but a page-level\
      \ distinction (as if we were to provide each page in different languages). Then\
      \ all versions of a page could even be stored in the same file without having\
      \ to mess around with the whole data storage code. If you are viewing a certain\
      \ flavor of a given page, all links would default to the same flavor of other\
      \ pages in case they're present.</p>\n<p><b>EntropicLqd:</b> That's not a bad\
      \ idea. Conceptually you could argue that the next gen Unreal engine stuff is\
      \ really another language. It's stretching the metaphor a little but sounds\
      \ easier than creating a whole new namespace. However, thinking ahead to Christmas\
      \ we'll probably need some Unreal 2 specific stuff as well - but goodness knows\
      \ just how similar UT2K3 and U2 will be.</p>\n<p><b>Mychaeel:</b> I'm meanwhile\
      \ strongly in favor of real namespaces.</p>\n<p><b>Tarquin:</b> yup, I think\
      \ we have to go for some sort of technical namespace thingy. My display idea\
      \ for the class thing has gone all wrong BTW: if I use SPAN instead of TABLE\
      \ it won't work on more than one line&#160;:(</p>\n<hr />\n<h2><span class=\"\
      mw-headline\" id=\"Technical_Implementation\">Technical Implementation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Namespaces?section=3\" title=\"Edit section: Technical\
      \ Implementation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> whether we use a top-level change so Wiki can use pagenames\
      \ like \"UT:Bot\", or the flavour system, I think different namespace pages\
      \ of the same name should behave to the user as different pages.</p>\n<p>Showing\
      \ all versions together for editing &amp; using new tags could have advantages\
      \ (eg a tutorial like <a href=\"/Legacy:Making_Waterfalls\" title=\"Legacy:Making\
      \ Waterfalls\">Making Waterfalls</a> might have only minor differences between\
      \ engines) but I think it could be very confusing when editing. Some pages (Bot,\
      \ for example) may be completely different in each engine.</p>\n<p><b>Mychaeel:</b>\
      \ As it happens, <a href=\"/Legacy:Making_Waterfalls\" title=\"Legacy:Making\
      \ Waterfalls\">Making Waterfalls</a> will have to undergo some changes for the\
      \ new engine – due to a couple of fundamental changes in how things like, for\
      \ instance, panning textures are done in the new engine. In any case there should\
      \ be a clear indication of the current namespace on every page and a way to\
      \ switch to a different namespace easily.</p>\n<p><b>Tarquin:</b> Agreed. The\
      \ title of a page should be \"UT:Bot\" for example. Are you still planning on\
      \ putting the different versions of a page in the one file &amp; using UMW's\
      \ superscript 3 seperator somehow?</p>\n<p><b>Mychaeel:</b> No – actually I'm\
      \ thinking more along the lines of branching the subdirectory structure directly\
      \ below the level of wiki-data/page and wiki-data/keep.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Interface\">Interface</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Namespaces?section=4\"\
      \ title=\"Edit section: Interface\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Suggestions for how it should work for the user:</p>\n\
      <ul>\n<li>Within Global namespace:\n<ul>\n<li>plain page links stay in global</li>\n\
      <li>namespace links go to that namespace</li>\n<li>plan page that doesn't exist\
      \ edits the new page in Global</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>within a\
      \ namespace\n<ul>\n<li>namespace links (another namespace of \"global:Bot\"\
      ) go to that namespace</li>\n<li>the tricky issue is what to do for the plain\
      \ name:\n<ul>\n<li>if the page in the same namespace exists, go there</li>\n\
      <li>if the page doesn't exist in that namespace...</li>\n</ul>\n</li>\n</ul>\n\
      </li>\n</ul>\n<p><b>Mychaeel:</b> ...jump to that page in the global namespace\
      \ if it exists there, or create a new page within the current namespace otherwise.\
      \ (That accommodates best Wiki growth as the engine grows.) – The behavior in\
      \ the global namespace suggested above is just a special case of this behavior,\
      \ by the way.</p>\n<p><b>Tarquin:</b> that's probably the best thing.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Usage\">Usage</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Namespaces?section=5\"\
      \ title=\"Edit section: Usage\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Tarquin:</b> Are namespaces just for classes and\
      \ script differences? Are things about mapping in general going to be in global?</p>\n\
      <p><b>Mychaeel:</b> Umm, anything that is specific to a particular engine version.\
      \ Particle emitters should be something in the UT2003 namespace, for instance.</p>\n\
      <p>Suggestions for namespaces...</p>\n<h2><span class=\"mw-headline\" id=\"\
      Feb_2003\">Feb 2003</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Namespaces?section=6\" title=\"Edit section:\
      \ Feb 2003\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> I had a funny thought the other day. It seems to me we've\
      \ just about implemented namespaces by the back door. The \"Page (UT)\", \"\
      Page (ut2003)\" syntax is pretty much a namespace system. The only thing that's\
      \ missing is the \"smart\" links as discussed above.</p>\n<p><b>Mychaeel:</b>\
      \ Yes, you're right... but it turns out to have just the problems that made\
      \ me think of namespaces as a somewhat untidy solution. (Plus a few more that\
      \ come from our rather crude implementation of them by adding a page name suffix.)</p>\n\
      <p>The main problem is that namespaces put every page into one single category,\
      \ and that they have a granularity of pages rather than parts of pages. Some\
      \ things are naturally exclusive to one category, like <a href=\"/Category:Legacy_Personal_Page\"\
      \ title=\"Category:Legacy Personal Page\">personal pages</a>; other things like\
      \ the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> class in UT\
      \ and UT2003 are actually the result of an evolution where most of the content\
      \ is shared, but some things are particular to either UT or UT2003.</p>\n<p>An\
      \ optimal solution would allow us to assign categories to <i>parts</i> of pages\
      \ without disrupting the reading flow when viewing the content of one category.\
      \ (If I look at a page in \"UT2003 mode\" I'd like to see all content that applies\
      \ to UT2003 even if it partly overlaps with UT or U2 content.)</p>\n<p>On the\
      \ other hand, some things like UT's and UT2002's <a href=\"/Legacy:Bot\" title=\"\
      Legacy:Bot\">Bot</a> class differ in more things than they have in common to\
      \ a degree that warrants a distinct page for UT and UT2003 each.</p>\n<p>Something's\
      \ on my mind that might solve that dilemma, but it's too vague yet to be put\
      \ into words...</p>\n<hr />\n<p><b>Fyfe:</b> Can I poke this topic back into\
      \ life&#160;:D Are we going about the grouping of pages wrong here? At the moment\
      \ we are splitting it by game, and this mainly comes down to <a href=\"/Legacy:UT\"\
      \ title=\"Legacy:UT\" class=\"mw-redirect\">UT</a> and <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a> (<a href=\"/Legacy:Unreal_Tournament_3\"\
      \ title=\"Legacy:Unreal Tournament 3\">Unreal Tournament 3</a> will open this\
      \ can of worms again when it arrives).</p>\n<p>The result is</p>\n<ul>\n<li><a\
      \ href=\"/Legacy:Triggers\" title=\"Legacy:Triggers\">Triggers</a></li>\n<li><a\
      \ href=\"/Legacy:Triggers_(UT)\" title=\"Legacy:Triggers (UT)\">Triggers (UT)</a></li>\n\
      <li><a href=\"/Legacy:Triggers_(UT2003)\" title=\"Legacy:Triggers (UT2003)\"\
      >Triggers (UT2003)</a></li>\n<li><a href=\"/Legacy:Triggers_(UT2004)\" title=\"\
      Legacy:Triggers (UT2004)\">Triggers (UT2004)</a> (Marked for deletion)</li>\n\
      </ul>\n<p>and ghost links to</p>\n<ul>\n<li>[Triggers (U2)]</li>\n<li>[Triggers\
      \ (UE2)]</li>\n</ul>\n<p>Now some people have wrongly assumed that because we\
      \ have a page for <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\"\
      >UT</a> and <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> we need one for every game (eg <a href=\"/Legacy:Triggers_(UT2004)\"\
      \ title=\"Legacy:Triggers (UT2004)\">Triggers (UT2004)</a>). When in reality\
      \ <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a> represents\
      \ Unreal Engine 1, <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"\
      mw-redirect\">UT2003</a> represents UE 2, <a href=\"/Legacy:UT2004\" title=\"\
      Legacy:UT2004\" class=\"mw-redirect\">UT2004</a> represent UE 2.5 and <a href=\"\
      /Legacy:Unreal_Tournament_3\" title=\"Legacy:Unreal Tournament 3\">Unreal Tournament\
      \ 3</a> will represent UE 3.</p>\n<p>So would it not make more sense to split\
      \ the wiki by engine version?? There are exceptions where a game will implement\
      \ new features that we want to document in the wiki.</p>\n<p><i><b>Same topic,\
      \ different question</b></i>, and using <a href=\"/Legacy:Triggers\" title=\"\
      Legacy:Triggers\">Triggers</a> as an example would the following layout be better...</p>\n\
      <ul>\n<li><a href=\"/Legacy:Triggers_(UT)\" title=\"Legacy:Triggers (UT)\">Triggers\
      \ (UT)</a> – As is UT specific info</li>\n<li><a href=\"/Legacy:Triggers_(UT2003)\"\
      \ title=\"Legacy:Triggers (UT2003)\">Triggers (UT2003)</a> – As is UT2003 specific\
      \ info</li>\n<li><a href=\"/Legacy:Triggers\" title=\"Legacy:Triggers\">Triggers</a>\
      \ – This redirects to the latest version, in this case <a href=\"/Legacy:Triggers_(UT2003)\"\
      \ title=\"Legacy:Triggers (UT2003)\">Triggers (UT2003)</a></li>\n</ul>\n<p>Then\
      \ when <a href=\"/Legacy:Unreal_Tournament_3\" title=\"Legacy:Unreal Tournament\
      \ 3\">Unreal Tournament 3</a> comes along we create (if it's needed) [Triggers\
      \ (UT2007)] and <a href=\"/Legacy:Triggers\" title=\"Legacy:Triggers\">Triggers</a>\
      \ is changed to point at [Triggers (UT2007)].</p>\n<p>Comments????</p>\n<p><b>EricBlade:</b>\
      \ It seems to me that potentially each game could have an Actor class, such\
      \ as [Land of the Dead/Actor]. Or any other class, or any other topic. If you\
      \ compared Postal 2, to whatever Unreal game was from a similar build of it's\
      \ engine, I doubt you'd even be able to recognise that their UC files came from\
      \ the same source. I'd wonder if it would be best to do it like that, with each\
      \ page referring back to what it is most similar to, and then detailing the\
      \ differences.. hmm...</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.047\
      \ seconds\nReal time usage: 0.049 seconds\nPreprocessor visited node count:\
      \ 23/1000000\nPreprocessor generated node count: 28/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2266-0!*!0!!en!*!*\
      \ and timestamp 20221118014139 and revision id 5482\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Tournament 3"
  - ns: 100
    exists: true
    name: "Legacy:Bot"
  - ns: 100
    exists: true
    name: "Legacy:Triggers"
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  - ns: 100
    exists: true
    name: "Legacy:Triggers (UT2003)"
  - ns: 100
    exists: true
    name: "Legacy:Triggers (UT2004)"
  - ns: 100
    exists: true
    name: "Legacy:Triggers (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Making Waterfalls"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 14
    exists: true
    name: "Category:Legacy Personal Page"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Proposals"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 167
    anchor: "Proposals"
  - toclevel: 1
    level: "2"
    line: "Old Discussion"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 1123
    anchor: "Old_Discussion"
  - toclevel: 1
    level: "2"
    line: "Technical Implementation"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 3014
    anchor: "Technical_Implementation"
  - toclevel: 1
    level: "2"
    line: "Interface"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 4366
    anchor: "Interface"
  - toclevel: 1
    level: "2"
    line: "Usage"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 5220
    anchor: "Usage"
  - toclevel: 1
    level: "2"
    line: "Feb 2003"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Namespaces"
    byteoffset: 5554
    anchor: "Feb_2003"
  displaytitle: "Legacy:Namespaces"
  iwlinks: []
  wikitext:
    text: "'''Namespaces will probably be implemented by the time UT2003 and U2 are\
      \ concurrent. Until then see [[Legacy:UT2003|UT2003]] for how to deal with new\
      \ pages.'''\n\n----\n\n==Proposals ==\n\n'''Mychaeel:'''  I've kept thinking\
      \ about this, and I'm suggesting the following (not claiming it hasn't been\
      \ mentioned before):\n\n* Introduce technical support for namespaces.\n* Create\
      \ namespaces for the various games, not by engine version but by game name:\
      \ U, UT, UT2003, UE2, DX...\n* As soon as the class structure of UT2003 is known,\
      \ move all UT classes that have no UT2003 counterpart, or whose UT2003 counterpart\
      \ of the same name has a different meaning or a sufficiently different implementation\
      \ to justify a separate page, into the UT namespace. Create pages on classes\
      \ only present in UT2003 (see above) in the UT2003 namespace.\n\nUnqualified\
      \ page links will automatically lead to pages in the current namespace if possible,\
      \ or to pages in the global namespace otherwise, or open a \"new page\" edit\
      \ field within the current namespace.\n\nThe only pages that remain in the global\
      \ namespace are those that apply to all engine versions.\n\n==Old Discussion\
      \ ==\n\nto set the scene...\n\n'''Tarquin:'''  Implement some heavy Wiki techology\
      \ such as namespaces so the global namespace is the latest version of the engine,\
      \ and for example current page Actor becomes UT:Actor. Would require major scripting.\n\
      \n'''Mychaeel:''' ...but is ''definitely'' the preferable way. Everything else\
      \ is bound to lead to major confusion.\n\n'''Tarquin:'''  urg. But do we simply\
      \ fool the current system into accepting names like \"UT:actor\" by using some\
      \ sort of escape character and then detect it in the GetLink subs, or do we\
      \ have to majorly hack the way the data is stored? Or even somehow hijack the\
      \ built-in InterWiki links &ndash; they work like this: Wikipedia:Pagename AFAIK,\
      \ but I haven't implemented them.\n\n'''Mychaeel:''' We could make it upside-down:\
      \  Not consider the namespace a new top-level branch but a page-level distinction\
      \ (as if we were to provide each page in different languages).  Then all versions\
      \ of a page could even be stored in the same file without having to mess around\
      \ with the whole data storage code.  If you are viewing a certain flavor of\
      \ a given page, all links would default to the same flavor of other pages in\
      \ case they're present. \n\n'''EntropicLqd:''' That's not a bad idea.  Conceptually\
      \ you could argue that the next gen Unreal engine stuff is really another language.\
      \  It's stretching the metaphor a little but sounds easier than creating a whole\
      \ new namespace.  However, thinking ahead to Christmas we'll probably need some\
      \ Unreal 2 specific stuff as well - but goodness knows just how similar UT2K3\
      \ and U2 will be. \n\n'''Mychaeel:'''  I'm meanwhile strongly in favor of real\
      \ namespaces.\n\n'''Tarquin:'''  yup, I think we have to go for some sort of\
      \ technical namespace thingy. My display idea for the class thing has gone all\
      \ wrong BTW: if I use SPAN instead of TABLE it won't work on more than one line\
      \ :(\n\n----\n\n==Technical Implementation ==\n\n'''Tarquin:'''  whether we\
      \ use a top-level change so Wiki can use pagenames like \"UT:Bot\", or the flavour\
      \ system, I think different namespace pages of the same name should behave to\
      \ the user as different pages. \n\nShowing all versions together for editing\
      \ & using new tags could have advantages (eg a tutorial like [[Legacy:Making\
      \ Waterfalls|Making Waterfalls]] might have only minor differences between engines)\
      \ but I think it could be very confusing when editing. Some pages (Bot, for\
      \ example) may be completely different in each engine.\n\n'''Mychaeel:'''  As\
      \ it happens, [[Legacy:Making Waterfalls|Making Waterfalls]] will have to undergo\
      \ some changes for the new engine &ndash; due to a couple of fundamental changes\
      \ in how things like, for instance, panning textures are done in the new engine.\
      \  In any case there should be a clear indication of the current namespace on\
      \ every page and a way to switch to a different namespace easily.\n\n'''Tarquin:'''\
      \  Agreed. The title of a page should be \"UT:Bot\" for example. Are you still\
      \ planning on putting the different versions of a page in the one file & using\
      \ UMW's superscript 3 seperator somehow?\n\n'''Mychaeel:'''  No &ndash; actually\
      \ I'm thinking more along the lines of branching the subdirectory structure\
      \ directly below the level of wiki-data/page and wiki-data/keep.\n\n==Interface\
      \ ==\n\nSuggestions for how it should work for the user:\n\n* Within Global\
      \ namespace:\n** plain page links stay in global\n** namespace links go to that\
      \ namespace\n** plan page that doesn't exist edits the new page in Global\n\n\
      * within a namespace\n** namespace links (another namespace of \"global:Bot\"\
      ) go to that namespace\n** the tricky issue is what to do for the plain name:\n\
      *** if the page in the same namespace exists, go there\n*** if the page doesn't\
      \ exist in that namespace... \n\n'''Mychaeel:''' ...jump to that page in the\
      \ global namespace if it exists there, or create a new page within the current\
      \ namespace otherwise.  (That accommodates best Wiki growth as the engine grows.)\
      \ &ndash; The behavior in the global namespace suggested above is just a special\
      \ case of this behavior, by the way.\n\n'''Tarquin:'''  that's probably the\
      \ best thing.\n\n==Usage ==\n\n'''Tarquin:'''  Are namespaces just for classes\
      \ and script differences? Are things about mapping in general going to be in\
      \ global?\n\n'''Mychaeel:'''  Umm, anything that is specific to a particular\
      \ engine version.  Particle emitters should be something in the UT2003 namespace,\
      \ for instance.\n\nSuggestions for namespaces...\n\n==Feb 2003 ==\n\n'''Tarquin:'''\
      \ I had a funny thought the other day. It seems to me we've just about implemented\
      \ namespaces by the back door. The \"Page (UT)\", \"Page (ut2003)\" syntax is\
      \ pretty much a namespace system. The only thing that's missing is the \"smart\"\
      \ links as discussed above.\n\n'''Mychaeel:''' Yes, you're right... but it turns\
      \ out to have just the problems that made me think of namespaces as a somewhat\
      \ untidy solution.  (Plus a few more that come from our rather crude implementation\
      \ of them by adding a page name suffix.)\n\nThe main problem is that namespaces\
      \ put every page into one single category, and that they have a granularity\
      \ of pages rather than parts of pages.  Some things are naturally exclusive\
      \ to one category, like [[:Category:Legacy Personal Page|personal pages]]; other\
      \ things like the [[Legacy:Actor|Actor]] class in UT and UT2003 are actually\
      \ the result of an evolution where most of the content is shared, but some things\
      \ are particular to either UT or UT2003.\n\nAn optimal solution would allow\
      \ us to assign categories to ''parts'' of pages without disrupting the reading\
      \ flow when viewing the content of one category.  (If I look at a page in \"\
      UT2003 mode\" I'd like to see all content that applies to UT2003 even if it\
      \ partly overlaps with UT or U2 content.)\n\nOn the other hand, some things\
      \ like UT's and UT2002's [[Legacy:Bot|Bot]] class differ in more things than\
      \ they have in common to a degree that warrants a distinct page for UT and UT2003\
      \ each.\n\nSomething's on my mind that might solve that dilemma, but it's too\
      \ vague yet to be put into words...\n\n----\n\n'''Fyfe:''' Can I poke this topic\
      \ back into life :D Are we going about the grouping of pages wrong here? At\
      \ the moment we are splitting it by game, and this mainly comes down to [[Legacy:UT|UT]]\
      \ and [[Legacy:UT2003|UT2003]] ([[Legacy:Unreal Tournament 3|Unreal Tournament\
      \ 3]] will open this can of worms again when it arrives). \n\nThe result is\
      \ \n* [[Legacy:Triggers|Triggers]]\n* [[Legacy:Triggers (UT)|Triggers (UT)]]\n\
      * [[Legacy:Triggers (UT2003)|Triggers (UT2003)]]\n* [[Legacy:Triggers (UT2004)|Triggers\
      \ (UT2004)]] (Marked for deletion)\n\nand ghost links to \n* [Triggers (U2)]\n\
      * [Triggers (UE2)]\n\nNow some people have wrongly assumed that because we have\
      \ a page for [[Legacy:UT|UT]] and [[Legacy:UT2003|UT2003]] we need one for every\
      \ game (eg [[Legacy:Triggers (UT2004)|Triggers (UT2004)]]). When in reality\
      \ [[Legacy:UT|UT]] represents Unreal Engine 1, [[Legacy:UT2003|UT2003]] represents\
      \ UE 2, [[Legacy:UT2004|UT2004]] represent UE 2.5 and [[Legacy:Unreal Tournament\
      \ 3|Unreal Tournament 3]] will represent UE 3.\n\nSo would it not make more\
      \ sense to split the wiki by engine version?? There are exceptions where a game\
      \ will implement new features that we want to document in  the wiki.\n\n'''''Same\
      \ topic, different question''''', and using [[Legacy:Triggers|Triggers]] as\
      \ an example would the following layout be better...\n* [[Legacy:Triggers (UT)|Triggers\
      \ (UT)]] &ndash; As is UT specific info\n* [[Legacy:Triggers (UT2003)|Triggers\
      \ (UT2003)]] &ndash; As is UT2003 specific info\n* [[Legacy:Triggers|Triggers]]\
      \ &ndash; This redirects to the latest version, in this case [[Legacy:Triggers\
      \ (UT2003)|Triggers (UT2003)]]\n\nThen when [[Legacy:Unreal Tournament 3|Unreal\
      \ Tournament 3]] comes along we create (if it's needed) [Triggers (UT2007)]\
      \ and [[Legacy:Triggers|Triggers]] is changed to point at [Triggers (UT2007)].\n\
      \nComments????\n\n'''EricBlade:''' It seems to me that potentially each game\
      \ could have an Actor class, such as [Land of the Dead/Actor]. Or any other\
      \ class, or any other topic.  If you compared Postal 2, to whatever Unreal game\
      \ was from a similar build of it's engine, I doubt you'd even be able to recognise\
      \ that their UC files came from the same source.  I'd wonder if it would be\
      \ best to do it like that, with each page referring back to what it is most\
      \ similar to, and then detailing the differences..  hmm..."
  properties: []
  revId: 5482
name: "Legacy:Namespaces"
revision:
  revid: 5482
  parentid: 5483
  user: "EricBlade"
  timestamp: 1164787363.000000000
  comment: "*"
timestamp: 1668766456.800359000
