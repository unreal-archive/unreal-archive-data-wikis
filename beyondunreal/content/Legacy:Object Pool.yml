---
parse:
  title: "Legacy:Object Pool"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#UT2003_Object_Pool\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">UT2003 Object Pool</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Overview\"><span class=\"\
      tocnumber\">1.1</span> <span class=\"toctext\">Overview</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-3\"><a href=\"#Allocating_Objects\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Allocating Objects</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Freeing_Objects\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Freeing Objects</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Important_Notes\"><span class=\"\
      tocnumber\">1.4</span> <span class=\"toctext\">Important Notes</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-6\"><a href=\"#You_should_clear_any_references_to_an_object_before_you_free_it_and_place_it_back_into_the_object_pool.\"\
      ><span class=\"tocnumber\">1.4.1</span> <span class=\"toctext\">You should clear\
      \ any references to an object before you free it and place it back into the\
      \ object pool.</span></a></li>\n<li class=\"toclevel-3 tocsection-7\"><a href=\"\
      #Properties_of_an_object_are_not_reset_to_default_when_placed_in_the_object_pool_but_instead_remain_intact.\"\
      ><span class=\"tocnumber\">1.4.2</span> <span class=\"toctext\">Properties of\
      \ an object are not reset to default when placed in the object pool but instead\
      \ remain intact.</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"UT2003_Object_Pool\">UT2003 Object\
      \ Pool</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Object_Pool?section=1\" title=\"Edit section:\
      \ UT2003 Object Pool\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Overview\">Overview</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Pool?section=2\"\
      \ title=\"Edit section: Overview\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The object pool allows you to dynamically assign and\
      \ create objects during the game. A main use is that of allocating textures\
      \ during the game as they are needed rather than creating all of them beforehand.\
      \ This method is far easier and more versatile than manually creating all the\
      \ files you may possibly need. There are of coures many other uses for the object\
      \ pool but for this example I will use textures.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Allocating_Objects\">Allocating Objects</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Pool?section=3\"\
      \ title=\"Edit section: Allocating Objects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>When you allocate an object the game will first check\
      \ if any existing objects of that type are available for use and if not, will\
      \ create a new one to be used. Allocating an object is a simple process, here\
      \ is an example using a shader.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">var</span> <span class=\"kw5\">Shader</span> Shader1;\n\
      \ \nShader1 <span class=\"sy0\">=</span> <span class=\"kw5\">Shader</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Shader'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>That will first check the object pool for any existing Shader objects in\
      \ the pool. If one is found it will be removed from the pool and returned as\
      \ the reference. If none are available it will create a new Shader and return\
      \ that instead.</p>\n<h3><span class=\"mw-headline\" id=\"Freeing_Objects\"\
      >Freeing Objects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Object_Pool?section=4\" title=\"Edit section:\
      \ Freeing Objects\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Since most uses of the object pool are temporary you need to free up an object\
      \ once you are done using it. This will add the object to the object pool for\
      \ later use. This too is a simple process.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span\
      \ class=\"me0\">FreeObject</span><span class=\"br0\">(</span>Shader1<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>That line will add Shader1 back into\
      \ the object pool where it can be re-allocated later as needed.</p>\n<table>\n\
      <tr>\n<td></td>\n</tr>\n</table>\n<h3><span class=\"mw-headline\" id=\"Important_Notes\"\
      >Important Notes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Object_Pool?section=5\" title=\"Edit section:\
      \ Important Notes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>While the object pool is very simple and powerful there are several things\
      \ you should be aware of.</p>\n<h4><span class=\"mw-headline\" id=\"You_should_clear_any_references_to_an_object_before_you_free_it_and_place_it_back_into_the_object_pool.\"\
      >You should clear any references to an object before you free it and place it\
      \ back into the object pool.</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Pool?section=6\"\
      \ title=\"Edit section: You should clear any references to an object before\
      \ you free it and place it back into the object pool.\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">Shader</span> Shader1;\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">ConstantColor</span> Fader1;\n\
      \ \nFader1 <span class=\"sy0\">=</span> <span class=\"kw5\">ConstantColor</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'ConstantColor'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\nShader1 <span class=\"\
      sy0\">=</span> <span class=\"kw5\">Shader</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span class=\"\
      me0\">AllocateObject</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Shader'</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n \nShader1.<span class=\"me0\">Opacity</span> <span class=\"sy0\"\
      >=</span> Fader1;\n \n<span class=\"co1\">//code here</span>\n \n<span class=\"\
      kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span class=\"me0\"\
      >FreeObject</span><span class=\"br0\">(</span>Fader1<span class=\"br0\">)</span>;\n\
      <span class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span\
      \ class=\"me0\">FreeObject</span><span class=\"br0\">(</span>Shader1<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>Note that after allocating the Shader\
      \ and ConstantColor I assign Fader1 as the opacity value for Shader1. I must\
      \ be careful how I free these objects up once I am done with them. The code\
      \ above is incorrect. You cannot properly free Fader1 because it is in use and\
      \ referenced by Shader1. Although not necessarily required it is generally a\
      \ good idea to manually clear the reference as well to ensure that no problems\
      \ occur. Therefore the proper way to free these objects would be as follows.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">Shader1.<span class=\"me0\">Opacity</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n<span class=\"\
      kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span class=\"me0\"\
      >FreeObject</span><span class=\"br0\">(</span>Shader1<span class=\"br0\">)</span>;\n\
      <span class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span\
      \ class=\"me0\">FreeObject</span><span class=\"br0\">(</span>Fader1<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>As I said this is not necessarily required\
      \ but it should be done anyways to ensure maximum compatibility and avoid any\
      \ possible problems. Even though problems relating to this seem rare we are\
      \ dealing with objects not actors and any problems tend to cause a GPF crash\
      \ so you are most likely better safe than sorry.</p>\n<table>\n<tr>\n<td></td>\n\
      </tr>\n</table>\n<h4><span class=\"mw-headline\" id=\"Properties_of_an_object_are_not_reset_to_default_when_placed_in_the_object_pool_but_instead_remain_intact.\"\
      >Properties of an object are not reset to default when placed in the object\
      \ pool but instead remain intact.</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Object_Pool?section=7\"\
      \ title=\"Edit section: Properties of an object are not reset to default when\
      \ placed in the object pool but instead remain intact.\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">Shader</span> Shader1;\n\
      \ \nShader1 <span class=\"sy0\">=</span> <span class=\"kw5\">Shader</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Shader'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\nShader1.<span class=\"\
      me0\">TwoSided</span> <span class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\n\
      \ \n<span class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span\
      \ class=\"me0\">FreeObject</span><span class=\"br0\">(</span>Shader1<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>In that example we allocate a Shader,\
      \ set the TwoSided variable to true, then free the Shader and place it back\
      \ into the object pool. This creates a huge problem. When you free Shader1 the\
      \ TwoSided variable is not reset but remains as you left it. The next person\
      \ to allocate a Shader may now get one that has TwoSided set to true. This is\
      \ not the default value so if they do not expect this it can cause major compatibility\
      \ problems. Although you can reset the variables yourself before you free the\
      \ object this only works for your code and there is no garuntee that other scripts\
      \ also running will be as courteous. As you can imagine the lack of consistency\
      \ with the objects you allocate can cause a great deal of problems. While you\
      \ could manually set every variable of an object each time you allocate it there\
      \ is a far more easy and effective solution to this problem. Instead of directly\
      \ allocating the class you want create a custom subclass.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyTwoSidedShader <span\
      \ class=\"kw1\">extends</span> <span class=\"kw5\">Shader</span>;\n \n<span\
      \ class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\tTwoSided<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>By using class'MyTwoSidedShader' instead of\
      \ simply class'Shader' you ensure that nobody will be using objects of this\
      \ type except you. Now you can assume with a reasonable amount of safety that\
      \ the properties of these objects will not be changed unless you yourself change\
      \ them. You can also save time, effort and performance by using default properties\
      \ instead of having to manually set the variables every time you allocate the\
      \ object. Overall it is a far cleaner and more compatible way of using the object\
      \ pool.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.115 seconds\nReal\
      \ time usage: 0.115 seconds\nPreprocessor visited node count: 68/1000000\nPreprocessor\
      \ generated node count: 152/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2314-0!*!*!!en!*!* and timestamp\
      \ 20221118003157 and revision id 5579\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "UT2003 Object Pool"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 0
    anchor: "UT2003_Object_Pool"
  - toclevel: 2
    level: "3"
    line: "Overview"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 25
    anchor: "Overview"
  - toclevel: 2
    level: "3"
    line: "Allocating Objects"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 453
    anchor: "Allocating_Objects"
  - toclevel: 2
    level: "3"
    line: "Freeing Objects"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 1065
    anchor: "Freeing_Objects"
  - toclevel: 2
    level: "3"
    line: "Important Notes"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 1454
    anchor: "Important_Notes"
  - toclevel: 3
    level: "4"
    line: "You should clear any references to an object before you free it and place\
      \ it back into the object pool."
    number: "1.4.1"
    index: "6"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 1578
    anchor: "You_should_clear_any_references_to_an_object_before_you_free_it_and_place_it_back_into_the_object_pool."
  - toclevel: 3
    level: "4"
    line: "Properties of an object are not reset to default when placed in the object\
      \ pool but instead remain intact."
    number: "1.4.2"
    index: "7"
    fromtitle: "Legacy:Object_Pool"
    byteoffset: 2958
    anchor: "Properties_of_an_object_are_not_reset_to_default_when_placed_in_the_object_pool_but_instead_remain_intact."
  displaytitle: "Legacy:Object Pool"
  iwlinks: []
  wikitext:
    text: "==UT2003 Object Pool ==\n\n===Overview ===\n\nThe object pool allows you\
      \ to dynamically assign and create objects during the game. A main use is that\
      \ of allocating textures during the game as they are needed rather than creating\
      \ all of them beforehand. This method is far easier and more versatile than\
      \ manually creating all the files you may possibly need. There are of coures\
      \ many other uses for the object pool but for this example I will use textures.\n\
      \n===Allocating Objects ===\n\nWhen you allocate an object the game will first\
      \ check if any existing objects of that type are available for use and if not,\
      \ will create a new one to be used. Allocating an object is a simple process,\
      \ here is an example using a shader.\n\n<uscript>\nvar Shader Shader1;\n\nShader1\
      \ = Shader(Level.ObjectPool.AllocateObject(class'Shader'));\n</uscript>\n\n\
      That will first check the object pool for any existing Shader objects in the\
      \ pool. If one is found it will be removed from the pool and returned as the\
      \ reference. If none are available it will create a new Shader and return that\
      \ instead.\n\n===Freeing Objects ===\n\nSince most uses of the object pool are\
      \ temporary you need to free up an object once you are done using it. This will\
      \ add the object to the object pool for later use. This too is a simple process.\n\
      \n<uscript>\nLevel.ObjectPool.FreeObject(Shader1);\n</uscript>\n\nThat line\
      \ will add Shader1 back into the object pool where it can be re-allocated later\
      \ as needed.\n\n{|\n\n|}\n\n===Important Notes ===\n\nWhile the object pool\
      \ is very simple and powerful there are several things you should be aware of.\n\
      \n====You should clear any references to an object before you free it and place\
      \ it back into the object pool.====\n\n<uscript>\nvar Shader Shader1;\nvar ConstantColor\
      \ Fader1;\n\nFader1 = ConstantColor(Level.ObjectPool.AllocateObject(class'ConstantColor'));\n\
      Shader1 = Shader(Level.ObjectPool.AllocateObject(class'Shader'));\n\nShader1.Opacity\
      \ = Fader1;\n\n//code here\n\nLevel.ObjectPool.FreeObject(Fader1);\nLevel.ObjectPool.FreeObject(Shader1);\n\
      </uscript>\n\nNote that after allocating the Shader and ConstantColor I assign\
      \ Fader1 as the opacity value for Shader1. I must be careful how I free these\
      \ objects up once I am done with them. The code above is incorrect. You cannot\
      \ properly free Fader1 because it is in use and referenced by Shader1. Although\
      \ not necessarily required it is generally a good idea to manually clear the\
      \ reference as well to ensure that no problems occur. Therefore the proper way\
      \ to free these objects would be as follows.\n\n<uscript>\nShader1.Opacity =\
      \ None;\nLevel.ObjectPool.FreeObject(Shader1);\nLevel.ObjectPool.FreeObject(Fader1);\n\
      </uscript>\n\nAs I said this is not necessarily required but it should be done\
      \ anyways to ensure maximum compatibility and avoid any possible problems. Even\
      \ though problems relating to this seem rare we are dealing with objects not\
      \ actors and any problems tend to cause a GPF crash so you are most likely better\
      \ safe than sorry.\n\n{|\n\n|}\n\n====Properties of an object are not reset\
      \ to default when placed in the object pool but instead remain intact.====\n\
      \n<uscript>\nvar Shader Shader1;\n\nShader1 = Shader(Level.ObjectPool.AllocateObject(class'Shader'));\n\
      Shader1.TwoSided = True;\n\nLevel.ObjectPool.FreeObject(Shader1);\n</uscript>\n\
      \nIn that example we allocate a Shader, set the TwoSided variable to true, then\
      \ free the Shader and place it back into the object pool. This creates a huge\
      \ problem. When you free Shader1 the TwoSided variable is not reset but remains\
      \ as you left it. The next person to allocate a Shader may now get one that\
      \ has TwoSided set to true. This is not the default value so if they do not\
      \ expect this it can cause major compatibility problems. Although you can reset\
      \ the variables yourself before you free the object this only works for your\
      \ code and there is no garuntee that other scripts also running will be as courteous.\
      \ As you can imagine the lack of consistency with the objects you allocate can\
      \ cause a great deal of problems. While you could manually set every variable\
      \ of an object each time you allocate it there is a far more easy and effective\
      \ solution to this problem. Instead of directly allocating the class you want\
      \ create a custom subclass.\n\n<uscript>\nclass MyTwoSidedShader extends Shader;\n\
      \ndefaultproperties\n{\n\tTwoSided=True\n}\n</uscript>\n\nBy using class'MyTwoSidedShader'\
      \ instead of simply class'Shader' you ensure that nobody will be using objects\
      \ of this type except you. Now you can assume with a reasonable amount of safety\
      \ that the properties of these objects will not be changed unless you yourself\
      \ change them. You can also save time, effort and performance by using default\
      \ properties instead of having to manually set the variables every time you\
      \ allocate the object. Overall it is a far cleaner and more compatible way of\
      \ using the object pool."
  properties: []
  revId: 5579
name: "Legacy:Object Pool"
revision:
  revid: 5579
  parentid: 5581
  user: "GRAFIK"
  timestamp: 1054252260.000000000
  comment: "please don't personalize community pages"
timestamp: 1668763350.879946000
