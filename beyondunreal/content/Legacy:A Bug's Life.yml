---
parse:
  title: "Legacy:A Bug's Life"
  text:
    text: "<blockquote class=\"legacyquote\">\n<p><i>I originally posted this article\
      \ in our internal Jailbreak testing forums and moved it on the Wiki at a second\
      \ thought. It's generically phrased, so it should apply to almost every project\
      \ that's in development.</i></p>\n<p><i>For another and rather entertaining\
      \ look on the same subject, have a look at <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://www.joelonsoftware.com/articles/fog0000000029.html\"\
      >Painless Bug Tracking</a> by Joel Spolsky. One of the most important things\
      \ Joel has to teach to us techies is that you have to make documents</i> fun\
      \ to read <i>to get people to actually read them.</i></p>\n</blockquote>\n<p>Instead\
      \ of listing a set of rules how bug reports should be posted, I'm going to describe\
      \ <b>A Bug's Life</b> here. After all, all rules I could possibly post boil\
      \ down to a certain understanding of which information is necessary (and why)\
      \ in order to squish a bug.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#What.27s_a_Bug.3F\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">What's a Bug?</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#A_Bug.27s_Life_Phases\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">A Bug's Life Phases</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-3\"><a href=\"#Bug_Hunters\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Bug Hunters</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-4\"><a href=\"#Reporting_Bugs\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Reporting Bugs</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-5\"><a href=\"#Comments\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Comments</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"What.27s_a_Bug.3F\">What's a Bug?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_Bug%27s_Life?section=1\" title=\"Edit section: What's\
      \ a Bug?\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>First off, whether something is a bug is a mere matter of definition. That\
      \ fragged players get respawned in jail is a distinct feature of Jailbreak,\
      \ but for common Deathmatch it'd be a bug. (Yes, that's a bit far-fetched, but\
      \ you get the idea.) Generally speaking, <b>if a program behaves in a way the\
      \ developer intended it not to, that's a bug.</b></p>\n<p>There are a number\
      \ of things where you can safely assume that a developer did not intend them\
      \ to happen:</p>\n<ul>\n<li><b>Crashes.</b></li>\n<li>Things that <b>obviously\
      \ disagree with existing documentation.</b> – That could just as well be an\
      \ error in the documentation, but that'd be a bug in its own right.</li>\n<li>Things\
      \ that are <b>needlessly inconvenient</b> for the user. – On the other hand,\
      \ they could also be <i>necessarily</i> inconvenient for the user, but then\
      \ that should be made obvious to prevent frustration on the users' part. Have\
      \ a look at the <a href=\"/Legacy:Mychaeel/Modding_Etiquette\" title=\"Legacy:Mychaeel/Modding\
      \ Etiquette\">Modding Etiquette</a> about that.</li>\n</ul>\n<p>If you find\
      \ such a thing, post a bug report. If you find something where you're not sure\
      \ whether it's a bug or intentional behavior, ask the developer; chances are\
      \ that it is a bug anyway, and if it's not it should at least be changed to\
      \ make that clear.</p>\n<h2><span class=\"mw-headline\" id=\"A_Bug.27s_Life_Phases\"\
      >A Bug's Life Phases</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_Bug%27s_Life?section=2\" title=\"Edit section:\
      \ A Bug's Life Phases\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>After this short intro to what a bug is, let's have a look at the bug's life.</p>\n\
      <ol>\n<li><b>A bug is born</b> somewhere on the way between the developer's\
      \ brain and the fingers typing the code.\n<ul>\n<li>Sometimes a bug's cause\
      \ is as simple as a typo in the code (when the coder lacks coffee, or sleep,\
      \ or both, or had too much coffee, or something like that).</li>\n<li>Sometimes\
      \ a coder <i>thought</i> she'd understood a particular piece of code, and how\
      \ she could get her own code to work with it effectively. Unfortunately she\
      \ is subtly mistaken (which could even be due to another bug in that existing\
      \ code which naturally isn't documented anywhere).</li>\n<li>Sometimes one part\
      \ of her own code puts the program in a state some other part of her own code\
      \ doesn't expect and handle; that's the most annoying and most avoidable kind\
      \ of bug for a decent programmer.</li>\n</ul>\n</li>\n<li>Now that the bug has\
      \ crept into the code, it stays there until <b>it is discovered</b> by chance\
      \ by somebody. More often than not that's in the middle of a complex situation\
      \ that is impossible to reproduce in every detail, and the next time the program\
      \ is executed and the situation is slightly different, the bug manages to hide\
      \ again.</li>\n<li>But the bug's days are numbered since its existence has been\
      \ given away already. Of course, just like with real-life bugs, the coder needs\
      \ to <b>see the bug in order to fix it.</b> So the bug hunter tries to recall\
      \ as much as possible of the situation that caused the bug to appear the first\
      \ time and the events preceding it and then successively <b>strips it of everything\
      \ unnecessary.</b> Ideally the bug hunter ends this process with a short and\
      \ simple list of steps that reliably lead to the bug showing itself.</li>\n\
      <li>Now it's the coder's turn to <b>squish the bug.</b> She traces the program's\
      \ execution from the start until she finds the point where a piece of code doesn't\
      \ change the program's state as she meant it to. Then she tries to trace the\
      \ program's flow <i>back</i> to the cause of that behavior. She changes it,\
      \ and the bug is <b>fixed.</b></li>\n</ol>\n<h2><span class=\"mw-headline\"\
      \ id=\"Bug_Hunters\">Bug Hunters</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_Bug%27s_Life?section=3\"\
      \ title=\"Edit section: Bug Hunters\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>You, as bug hunters, are responsible for the <b>second\
      \ and third phase</b> in a bug's hopefully short lifespan.</p>\n<p>Just discovering\
      \ the bug by chance is not enough; given that there are more bug hunters than\
      \ developers working on a project, leaving the third step up to the developers\
      \ is a big waste of project time.</p>\n<p>Imagine a small project with one coder\
      \ and three testers. For the sake of the argument, let's assume that the third\
      \ phase (reproduction) takes one hour per bug, and the fourth phase (fixing)\
      \ half an hour (which may or may not be way off in either direction depending\
      \ on the bug). Let's also assume that every tester discovers a single distinct\
      \ bug.</p>\n<ul>\n<li>If all testers stop working at the second phase (discovery)\
      \ and let the developer handle the third and fourth phase (reproduction and\
      \ fixing), we have: a single coder working one and a half hours on each of three\
      \ bugs, resulting in <b>four and a half hours of work.</b></li>\n</ul>\n<ul>\n\
      <li>If all testers continue working until the third phase is completed (discovery\
      \ and reproduction) and then let the developer fix the bug, we have: three bug\
      \ hunters working in parallel on three bugs for one hour, then the developer\
      \ fixing each of the three bugs for half an hour each, resulting in <b>two and\
      \ a half hours of work.</b></li>\n</ul>\n<p>Do you notice how the second way\
      \ to do it actually saves two hours of development time in this example?</p>\n\
      <h2><span class=\"mw-headline\" id=\"Reporting_Bugs\">Reporting Bugs</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_Bug%27s_Life?section=4\" title=\"Edit section: Reporting\
      \ Bugs\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>When you report a bug, include all information that's necessary for the developers\
      \ to reliably reproduce it. And just as important: Leave unnecessary information\
      \ away.</p>\n<p>Things every bug report should contain in some way or another:</p>\n\
      <ul>\n<li>A brief, but descriptive <b>bug report subject</b> (a thread subject\
      \ if you post it in a forum, for instance) for your bug report that clearly\
      \ summarizes the reported bug. As a rule of thumb, a descriptive subject always\
      \ <b>contains at a verb.</b> The program <i>does</i> something wrong after all.</li>\n\
      </ul>\n<ul>\n<li>A thorough, but to-the-point <b>description of the buggy behavior,</b>\
      \ including a short description of how you <i>expect</i> the program to behave\
      \ instead. Screenshots, logs and the like <i>can</i> be helpful there.</li>\n\
      </ul>\n<ul>\n<li>A thorough, but to-the-point <b>description of how to reproduce\
      \ the buggy behavior</b> which you worked out in the third phase of a bug's\
      \ life as described above.</li>\n</ul>\n<ul>\n<li>The <b>revision of the program</b>\
      \ you're reporting the bug for.</li>\n</ul>\n<ul>\n<li>An up-to-date <b>description\
      \ of your system</b> (hardware, operating system version and patch level, drivers,\
      \ and so on). You don't have to repeat the same information over and over again,\
      \ of course, but the developers should always be able to look it up if they\
      \ need to. (For example, the developers could ask all testers to submit their\
      \ system specs at the start of the testing period.)</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_Bug%27s_Life?section=5\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Mychaeel:</b> I originally posted that in the internal\
      \ \"Jailbreak Testing\" forum, but knowing the Wiki as a great sounding board\
      \ for articles like this one I decided to move it here and link it from our\
      \ testing forum instead. Comments are appreciated.</p>\n<p><b>EntropicLqd:</b>\
      \ Nice article. Is it worth mentioning that the number of bugs in any software\
      \ system generally decays exponentially? How about adding a suggested set of\
      \ minimum information that should be submitted with a bug report (game version,\
      \ mod version, log files, screen shots if applicable etc).</p>\n<p><b>Mychaeel:</b>\
      \ I expressly did not want to give a minimum set of information to post with\
      \ a bug report in terms of \"map name, log, screen shots\" and so on. It only\
      \ leads people to ticking those points off one by one without thinking about\
      \ whether they're actually giving the developers helpful information or not.</p>\n\
      <p><b>Tarquin:</b> That's sort of ... zen&#160;:D</p>\n<p><b>Piglet:</b> Hmm.\
      \ Good and intresting section, however you have seemed to have neglected the\
      \ 'immediatly obvious' type of bug. Which are generally more common (at least\
      \ in the programming that i do). Not a big complaint, just a minor point.</p>\n\
      <p><b>Mychaeel:</b> Hmm. The really obvious things should actually never get\
      \ into testing; and I would rather not tempt testers to skip bug research by\
      \ simply claiming that it's \"obvious.\" My stance is that, if a bug was obvious,\
      \ it wouldn't be there for others to find in the first place. I assume that\
      \ programmers do a minimum amount of testing themselves before releasing a piece\
      \ of software to anyone.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.034\
      \ seconds\nReal time usage: 0.049 seconds\nPreprocessor visited node count:\
      \ 29/1000000\nPreprocessor generated node count: 77/1000000\nPost‐expand include\
      \ size: 1206/2097152 bytes\nTemplate argument size: 555/2097152 bytes\nHighest\
      \ expansion depth: 3/40\nExpensive parser function count: 0/100\n-->\n\n<!--\
      \ \nTransclusion expansion time report (%,ms,calls,template)\n100.00%    9.360\
      \      1 - -total\n100.00%    9.360      1 - Template:Innerbox\n-->\n\n<!--\
      \ Saved in parser cache with key wiki:pcache:idhash:407-0!*!0!!en!*!* and timestamp\
      \ 20221118022736 and revision id 44210\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mychaeel/Modding Etiquette"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.joelonsoftware.com/articles/fog0000000029.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "What's a Bug?"
    number: "1"
    index: "1"
    fromtitle: "Legacy:A_Bug's_Life"
    byteoffset: 837
    anchor: "What.27s_a_Bug.3F"
  - toclevel: 1
    level: "2"
    line: "A Bug's Life Phases"
    number: "2"
    index: "2"
    fromtitle: "Legacy:A_Bug's_Life"
    byteoffset: 2081
    anchor: "A_Bug.27s_Life_Phases"
  - toclevel: 1
    level: "2"
    line: "Bug Hunters"
    number: "3"
    index: "3"
    fromtitle: "Legacy:A_Bug's_Life"
    byteoffset: 4139
    anchor: "Bug_Hunters"
  - toclevel: 1
    level: "2"
    line: "Reporting Bugs"
    number: "4"
    index: "4"
    fromtitle: "Legacy:A_Bug's_Life"
    byteoffset: 5537
    anchor: "Reporting_Bugs"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "5"
    index: "5"
    fromtitle: "Legacy:A_Bug's_Life"
    byteoffset: 6930
    anchor: "Comments"
  displaytitle: "Legacy:A Bug's Life"
  iwlinks: []
  wikitext:
    text: "{{innerbox| ''I originally posted this article in our internal Jailbreak\
      \ testing forums and moved it on the Wiki at a second thought.  It's generically\
      \ phrased, so it should apply to almost every project that's in development.''\n\
      \n ''For another and rather entertaining look on the same subject, have a look\
      \ at [http://www.joelonsoftware.com/articles/fog0000000029.html Painless Bug\
      \ Tracking] by Joel Spolsky.  One of the most important things Joel has to teach\
      \ to us techies is that you have to make documents ''fun to read'' to get people\
      \ to actually read them.''\n\n}}\n\nInstead of listing a set of rules how bug\
      \ reports should be posted, I'm going to describe '''A Bug's Life''' here. \
      \ After all, all rules I could possibly post boil down to a certain understanding\
      \ of which information is necessary (and why) in order to squish a bug.\n\n\
      ==What's a Bug?==\n\nFirst off, whether something is a bug is a mere matter\
      \ of definition.  That fragged players get respawned in jail is a distinct feature\
      \ of Jailbreak, but for common Deathmatch it'd be a bug.  (Yes, that's a bit\
      \ far-fetched, but you get the idea.)  Generally speaking, '''if a program behaves\
      \ in a way the developer intended it not to, that's a bug.'''\n\nThere are a\
      \ number of things where you can safely assume that a developer did not intend\
      \ them to happen:\n\n* '''Crashes.'''\n* Things that '''obviously disagree with\
      \ existing documentation.''' &ndash; That could just as well be an error in\
      \ the documentation, but that'd be a bug in its own right.\n* Things that are\
      \ '''needlessly inconvenient''' for the user. &ndash; On the other hand, they\
      \ could also be ''necessarily'' inconvenient for the user, but then that should\
      \ be made obvious to prevent frustration on the users' part.  Have a look at\
      \ the [[Legacy:Mychaeel/Modding Etiquette|Modding Etiquette]] about that.\n\n\
      If you find such a thing, post a bug report.  If you find something where you're\
      \ not sure whether it's a bug or intentional behavior, ask the developer; chances\
      \ are that it is a bug anyway, and if it's not it should at least be changed\
      \ to make that clear.\n\n==A Bug's Life Phases==\n\nAfter this short intro to\
      \ what a bug is, let's have a look at the bug's life.\n\n# '''A bug is born'''\
      \ somewhere on the way between the developer's brain and the fingers typing\
      \ the code.\n#* Sometimes a bug's cause is as simple as a typo in the code (when\
      \ the coder lacks coffee, or sleep, or both, or had too much coffee, or something\
      \ like that).\n#* Sometimes a coder ''thought'' she'd understood a particular\
      \ piece of code, and how she could get her own code to work with it effectively.\
      \  Unfortunately she is subtly mistaken (which could even be due to another\
      \ bug in that existing code which naturally isn't documented anywhere).\n#*\
      \ Sometimes one part of her own code puts the program in a state some other\
      \ part of her own code doesn't expect and handle; that's the most annoying and\
      \ most avoidable kind of bug for a decent programmer.\n# Now that the bug has\
      \ crept into the code, it stays there until '''it is discovered''' by chance\
      \ by somebody.  More often than not that's in the middle of a complex situation\
      \ that is impossible to reproduce in every detail, and the next time the program\
      \ is executed and the situation is slightly different, the bug manages to hide\
      \ again.\n# But the bug's days are numbered since its existence has been given\
      \ away already.  Of course, just like with real-life bugs, the coder needs to\
      \ '''see the bug in order to fix it.'''  So the bug hunter tries to recall as\
      \ much as possible of the situation that caused the bug  to appear the first\
      \ time and the events preceding it and then successively '''strips it of everything\
      \ unnecessary.'''  Ideally the bug hunter ends this process with a short and\
      \ simple list of steps that reliably lead to the bug showing itself.\n# Now\
      \ it's the coder's turn to '''squish the bug.'''  She traces the program's execution\
      \ from the start until she finds the point where a piece of code doesn't change\
      \ the program's state as she meant it to.  Then she tries to trace the program's\
      \ flow ''back'' to the cause of that behavior.  She changes it, and the bug\
      \ is '''fixed.'''\n\n==Bug Hunters==\n\nYou, as bug hunters, are responsible\
      \ for the '''second and third phase''' in a bug's hopefully short lifespan.\n\
      \nJust discovering the bug by chance is not enough; given that there are more\
      \ bug hunters than developers working on a project, leaving the third step up\
      \ to the developers is a big waste of project time.\n\nImagine a small project\
      \ with one coder and three testers.  For the sake of the argument, let's assume\
      \ that the third phase (reproduction) takes one hour per bug, and the fourth\
      \ phase (fixing) half an hour (which may or may not be way off in either direction\
      \ depending on the bug).  Let's also assume that every tester discovers a single\
      \ distinct bug.\n\n* If all testers stop working at the second phase (discovery)\
      \ and let the developer handle the third and fourth phase (reproduction and\
      \ fixing), we have:  a single coder working one and a half hours on each of\
      \ three bugs, resulting in '''four and a half hours of work.'''\n\n* If all\
      \ testers continue working until the third phase is completed (discovery and\
      \ reproduction) and then let the developer fix the bug, we have:  three bug\
      \ hunters working in parallel on three bugs for one hour, then the developer\
      \ fixing each of the three bugs for half an hour each, resulting in '''two and\
      \ a half hours of work.'''\n\nDo you notice how the second way to do it actually\
      \ saves two hours of development time in this example?\n\n==Reporting Bugs==\n\
      \nWhen you report a bug, include all information that's necessary for the developers\
      \ to reliably reproduce it.  And just as important:  Leave unnecessary information\
      \ away.\n\nThings every bug report should contain in some way or another:\n\n\
      * A brief, but descriptive '''bug report subject''' (a thread subject if you\
      \ post it in a forum, for instance) for your bug report that clearly summarizes\
      \ the reported bug.  As a rule of thumb, a descriptive subject always '''contains\
      \ at a verb.'''  The program ''does'' something wrong after all.\n\n* A thorough,\
      \ but to-the-point '''description of the buggy behavior,''' including a short\
      \ description of how you ''expect'' the program to behave instead.  Screenshots,\
      \ logs and the like ''can'' be helpful there.\n\n* A thorough, but to-the-point\
      \ '''description of how to reproduce the buggy behavior''' which you worked\
      \ out in the third phase of a bug's life as described above.\n\n* The '''revision\
      \ of the program''' you're reporting the bug for.\n\n* An up-to-date '''description\
      \ of your system''' (hardware, operating system version and patch level, drivers,\
      \ and so on).  You don't have to repeat the same information over and over again,\
      \ of course, but the developers should always be able to look it up if they\
      \ need to.  (For example, the developers could ask all testers to submit their\
      \ system specs at the start of the testing period.)\n\n==Comments==\n\n'''Mychaeel:'''\
      \ I originally posted that in the internal \"Jailbreak Testing\" forum, but\
      \ knowing the Wiki as a great sounding board for articles like this one I decided\
      \ to move it here and link it from our testing forum instead.  Comments are\
      \ appreciated.\n\n'''EntropicLqd:''' Nice article.  Is it worth mentioning that\
      \ the number of bugs in any software system generally decays exponentially?\
      \  How about adding a suggested set of minimum information that should be submitted\
      \ with a bug report (game version, mod version, log files, screen shots if applicable\
      \ etc).\n\n'''Mychaeel:''' I expressly did not want to give a minimum set of\
      \ information to post with a bug report in terms of \"map name, log, screen\
      \ shots\" and so on.  It only leads people to ticking those points off one by\
      \ one without thinking about whether they're actually giving the developers\
      \ helpful information or not.\n\n'''Tarquin:''' That's sort of ... zen :D \n\
      \n'''Piglet:''' Hmm.  Good and intresting section, however you have seemed to\
      \ have neglected the 'immediatly obvious' type of bug.  Which are generally\
      \ more common (at least in the programming that i do).  Not a big complaint,\
      \ just a minor point.\n\n'''Mychaeel:''' Hmm.  The really obvious things should\
      \ actually never get into testing; and I would rather not tempt testers to skip\
      \ bug research by simply claiming that it's \"obvious.\"  My stance is that,\
      \ if a bug was obvious, it wouldn't be there for others to find in the first\
      \ place.  I assume that programmers do a minimum amount of testing themselves\
      \ before releasing a piece of software to anyone."
  properties: []
  revId: 44210
name: "Legacy:A Bug's Life"
revision:
  revid: 44210
  parentid: 1352
  user: "Wormbo"
  timestamp: 1293554260.000000000
  comment: "/* A Bug's Life Phases */ formating"
timestamp: 1668786905.873134000
