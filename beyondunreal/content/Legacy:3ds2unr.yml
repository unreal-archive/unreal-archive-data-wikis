---
parse:
  title: "Legacy:3ds2unr"
  text:
    text: "<p>This page follows on from where the <a href=\"/Legacy:3D_Studio_Max_Weapon_Modeling_And_Import\"\
      \ title=\"Legacy:3D Studio Max Weapon Modeling And Import\">3D Studio Max Weapon\
      \ Modeling And Import</a> tutorial ends.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Download\">Download</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:3ds2unr?section=1\"\
      \ title=\"Edit section: Download\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://unreal.epicgames.com/Files/3ds2unr.zip\">Latest version of 3ds2unr (119)</a></p>\n\
      <h3><span class=\"mw-headline\" id=\"HowTo\">HowTo</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:3ds2unr?section=2\"\
      \ title=\"Edit section: HowTo\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Once you have the *.3ds files ready (from the above\
      \ tutorial) place them all into a new empty directory. Copy the 3ds2unr.exe\
      \ file into the same directory.</p>\n<p>Now you need to decide on what your\
      \ output file will be called. For my grenade weapon first person view I used\
      \ grenadefp which is what I will continue using here.</p>\n<p>The 3ds files\
      \ I ended up with after animation and export were:</p>\n<ul>\n<li>sel_desel.3ds\
      \ - the de-select/select animation</li>\n<li>pinpull_fire.3ds - animation for\
      \ pulling the pin and then throwing</li>\n</ul>\n<p>That was it actually. You\
      \ might have more. My pin pull and fire were in the same file because at the\
      \ end of the pin pull the arm is drawn back for the throw and not in the rest\
      \ position so I thought it was simpler this way.</p>\n<p>Open up a DOS box,\
      \ cd to your new directory that contains 3ds2unr and type in the following command:</p>\n\
      <pre>3ds2unr.exe grenadefp sel_desel.3ds pinpull_fire.3ds\n</pre>\n<p>Replacing\
      \ the command arguments with your output name and input 3ds files.</p>\n<p>If\
      \ this is the first time you have run 3ds2unr it will prompt you for a project\
      \ directory. I selected the directory in which we currently were (where 3ds2unr\
      \ was). If this is not the first time you have run the util it will carry on\
      \ with whatever setting it was originally given. This is OK if you know where\
      \ it is but you do have the option of redefining it by typing the following\
      \ command:</p>\n<pre>3ds2unr.exe -setproj\n</pre>\n<p>Assuming this is the first\
      \ time the utility has been run it will create 2 sub-directories in the project\
      \ directory (does it or do you have to manually create them? It was all of yesterday\
      \ I did this):</p>\n<ul>\n<li>Classes</li>\n<li>Models</li>\n</ul>\n<p>If there\
      \ were no problems with the conversion you will find, after the utility has\
      \ completed, a new *.uc file in the classes directory, and new *_d.3d and *_a.3d\
      \ files in the Models directory. In my case I had a grenadefp.uc, grenadefp_d.3d\
      \ and grenade_a.3d files.</p>\n<p>You have now finished with 3ds2unr.</p>\n\
      <p>If you get an error that you don't understand or want to learn how to use\
      \ transparent/two-sided object materials etc. then the easiest thing is to read\
      \ the .DOC file that comes with the 3ds2unr download above. It contains a lot\
      \ of good information on model/material restrictions and advice on how to achieve\
      \ different effects.</p>\n<h3><span class=\"mw-headline\" id=\"What_Now\">What\
      \ Now</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:3ds2unr?section=3\" title=\"Edit section: What\
      \ Now\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Once you have the output files it's time to get them into the game. Since\
      \ my 3ds2unr project directory was nowhere near my UT directory I manually copied\
      \ the model files into the Models sub-directory of my mods package directory\
      \ under UT. You will then also need to copy the texture files you used in Max\
      \ into your models directory. (make sure they are 8bit colour depth and are\
      \ a power of 2 in resolution - 128*128 or 128*256 or 256*256 etc)</p>\n<p>Then\
      \ open the generated .uc file in notepad and copied all of the #<a href=\"/Legacy:Exec_Directive\"\
      \ title=\"Legacy:Exec Directive\">exec directive</a> statements that this contained\
      \ and paste them at the top of your new weapon class.</p>\n<p>The first thing\
      \ you will need to change is the texture import lines. Example code:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec TEXTURE IMPORT\
      \ NAME=Jgrenade FILE=MODELS\\hand.bmp GROUP=Skins FLAGS=2 // skins</span>\n\
      <span class=\"co2\">#exec TEXTURE IMPORT NAME=Jgrenade1 FILE=MODELS\\grenbody.bmp\
      \ GROUP=Skins FLAGS=2 // skins</span>\n<span class=\"co2\">#exec TEXTURE IMPORT\
      \ NAME=Jgrenade2 FILE=MODELS\\grenarm.bmp GROUP=Skins FLAGS=2</span>\n<span\
      \ class=\"co2\">#exec MESHMAP NEW   MESHMAP=grenadehn MESH=grenadehn</span>\n\
      <span class=\"co2\">#exec MESHMAP SCALE MESHMAP=grenadehn X=0.1 Y=0.1 Z=0.2</span>\n\
      \ \n<span class=\"co2\">#exec MESHMAP SETTEXTURE MESHMAP=grenadehn NUM=1 TEXTURE=Jgrenade</span>\n\
      <span class=\"co2\">#exec MESHMAP SETTEXTURE MESHMAP=grenadehn NUM=2 TEXTURE=Jgrenade1</span>\n\
      <span class=\"co2\">#exec MESHMAP SETTEXTURE MESHMAP=grenadehn NUM=3 TEXTURE=Jgrenade2</span></pre></div>\n\
      </div>\n<p>The TEXTURE IMPORT lines will contain texture files that dont exist.\
      \ Replace the FILE setting with the correct bitmap or pcx file name.</p>\n<p>Ensure\
      \ that in the SETTEXTURE lines that the correct texture is set to the correct\
      \ NUM value. The NUM value refers to the material ID of the polys in your scene.\
      \ So for example my arm models all have material ID of 1. My grenade body and\
      \ ring pull have material ID 2 and the grenade arm has a material ID of 3 (done\
      \ this way to allow a 2 sided material for the grenade arm)</p>\n<p>Next, you\
      \ may need to change is the placement and orientation of the model. The line\
      \ for this on my model ended up like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co2\">#exec MESH ORIGIN MESH=grenadehn X=100 Y=0 Z=70 YAW=128</span></pre></div>\n\
      </div>\n<p>The origin (X=100 Y=0 Z=70) tells unreal where on the screen the\
      \ model will appear (X is into the screen, Y is left/right and Z is up/down).\
      \ Play with the numbers until it looks right. YAW, PITCH and ROLL can also be\
      \ defined to rotate the model as required (128 is equivalent to 180deg). My\
      \ model was facing the wrong way initially.</p>\n<p>You will also find that\
      \ the model may be too small or too large on import. To modify this add (or\
      \ modify) the line</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">PlayerViewScale<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0.4</span></pre></div>\n</div>\n\
      <p>in the default properties of the class. A value of 1 keeps the model dimensions\
      \ as they are. Smaller numbers reduce the size...</p>\n<p>It can take quite\
      \ some time to get the model exactly as you want it on screen.</p>\n<p>One thing\
      \ to be careful of is numbers used for the origin. If the model gets moved away\
      \ too far from the players point of view it will start to clip into walls when\
      \ you get close.</p>\n<p>Next come the animation sequences.</p>\n<p>My final\
      \ code looked like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#exec MESH SEQUENCE MESH=grenadehn SEQ=All STARTFRAME=0 NUMFRAMES=59</span>\n\
      <span class=\"co2\">#exec MESH SEQUENCE MESH=grenadehn SEQ=down STARTFRAME=0\
      \ NUMFRAMES=11 rate=6</span>\n<span class=\"co2\">#exec MESH SEQUENCE MESH=grenadehn\
      \ SEQ=select STARTFRAME=10 NUMFRAMES=11 rate=6</span>\n<span class=\"co2\">#exec\
      \ MESH SEQUENCE MESH=grenadehn SEQ=still STARTFRAME=0 NUMFRAMES=1</span>\n<span\
      \ class=\"co2\">#exec MESH SEQUENCE MESH=grenadehn SEQ=idle STARTFRAME=0 NUMFRAMES=1</span>\n\
      <span class=\"co2\">#exec MESH SEQUENCE MESH=grenadehn SEQ=loading STARTFRAME=21\
      \ NUMFRAMES=21 rate=8</span>\n<span class=\"co2\">#exec MESH SEQUENCE MESH=grenadehn\
      \ SEQ=fire STARTFRAME=41 NUMFRAMES=8</span>\n<span class=\"co2\">#exec MESH\
      \ SEQUENCE MESH=grenadehn SEQ=downempty STARTFRAME=48 NUMFRAMES=11 rate=6</span></pre></div>\n\
      </div>\n<p>The ALL sequence should be done for you. You will need to list out\
      \ all the other animation sequences specifying the exact frame they start on\
      \ and how many frames they last. The RATE keyword at the end of some of the\
      \ lines allows you to speed up or slow down the animation. You will need to\
      \ play with it until it feels right.</p>\n<p>Finally, write the code to call\
      \ the animations and make your weapon work&#160;:)</p>\n<p>One last thing. The\
      \ above code assumes a right handed weapon. Once you have this finished you\
      \ can copy all of the #exec statements and paste them below the originals. All\
      \ you have to do is change the MESH IMPORT MESH line so that it has unmirror=1\
      \ at the end. i.e.:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#exec MESH IMPORT MESH=grenadehn ANIVFILE=MODELS\\grenfp_a.3d DATAFILE=MODELS\\\
      grenfp_d.3d X=0 Y=0 Z=0 unmirror=1</span></pre></div>\n</div>\n<p>Then replace\
      \ all occurances of the mesh name (grenadehn here) with a different name (I\
      \ used grenadehnl). You can also remove the TEXTURE IMPORT lines since we have\
      \ already imported the required textures.</p>\n<p>Now for an annoying bit. After\
      \ getting everything spot on for the right hand view you may find that left\
      \ hand view is out. Again it is just a question of playing with the origin of\
      \ the mesh and <b>also</b> the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">PlayerViewOffset<span class=\"sy0\">=</span><span class=\"br0\">(</span>X<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1.500000</span>,Y<span class=\"\
      sy0\">=-</span><span class=\"nu0\">1.000000</span>,Z<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">1.650000</span><span class=\"br0\">)</span></pre></div>\n</div>\n\
      <p>Which can be found (or added) to the default properties of the class.</p>\n\
      <p>This allows for a model to be mirrored for left/right hand views and be placed\
      \ exactly where the author wants it. It makes for a lot of tweaking but you\
      \ can always get the effect you want eventually.</p>\n<hr />\n<p><b>Wang:</b>\
      \ This could do with being a bit more detailed and is \"fluffy\" in a few areas.\
      \ Anyone who knows more about the subject should add on/modify where necessary.</p>\n\
      <p><b>Col Kassad:</b> Very nice!&#160;:)</p>\n<p><b>Wang:</b> There is something\
      \ I should add to this that I found out later that only applies to this type\
      \ of 2 stage firing. On the client in a network game if a weapon is not animating\
      \ it will be sent to the idle state. When my animation for pulling the pin finished\
      \ I held the weapon at the last frame of this animation until the user released\
      \ the fire button. At this point the throw animation ran. Holding the weapon\
      \ at a specific frame meant it wasn't animating so off it went out of the ClientFiring\
      \ state. I had to add a 2 frame static animation that could loop in the ready\
      \ to throw position.</p>\n<p><b>Shuriken:</b> Hey - can anyone tell me if this\
      \ and the previous tutorial are the same method still used for importing models\
      \ and animations into UT2003? I've found it really hard to find tutorials about\
      \ the subject for UT2003... can anyone point me to some if it uses a different\
      \ method?</p>\n<p><b>Chip:</b> Shuri, this method <i>can</i> be used for getting\
      \ vertex animations into UT2003, but that type of animation isn't used for \"\
      modern\" UT2K3 character models and weapons – they're exported/imported as skeletal\
      \ meshes, using either <a href=\"/Legacy:ActorX\" title=\"Legacy:ActorX\">ActorX</a>\
      \ (for Max and <a href=\"/Legacy:Maya\" title=\"Legacy:Maya\">Maya</a> full\
      \ apps) or with the <a href=\"/Legacy:UnEditor.Mll\" title=\"Legacy:UnEditor.Mll\"\
      >unEditor</a> plug-in for Maya 4.0.1 PLE. The difference between the animation\
      \ types can be seen if you've ever played the Invasion game type – all the Unreal1\
      \ monsters are vertex anims (the method used for Unreal1 characters),and their\
      \ limited anims are obvious.</p>\n<p>In UEd, check the Animations browser to\
      \ see the extent of skeletal anims used in UT2K3 (File&gt;Open will shows how\
      \ many .ukx files are used), and the Meshes browser will show the vertex anims.\
      \ Note that some objects like waving flags are still best done with vertex animation\
      \ due to the complexity of the motion, or because the mesh shape changes (goop\
      \ blobs).</p>\n<p>So a full answer to your question means you have to define\
      \ what type of <a href=\"/Legacy:Animation\" title=\"Legacy:Animation\">Animation</a>\
      \ you're planning. Some links that might help: <a href=\"http://udn.epicgames.com/Two/ModelingTableOfContents\"\
      \ class=\"extiw\" title=\"udn2:ModelingTableOfContents\">udn2:ModelingTableOfContents</a>,\
      \ <a href=\"http://udn.epicgames.com/Two/ActorX\" class=\"extiw\" title=\"udn2:ActorX\"\
      >udn2:ActorX</a>, <a href=\"http://udn.epicgames.com/Two/UnrealVertexAnimation\"\
      \ class=\"extiw\" title=\"udn2:UnrealVertexAnimation\">udn2:UnrealVertexAnimation</a>,\
      \ <a href=\"/Legacy:Maya_PLE_Character_Model_Tutorial\" title=\"Legacy:Maya\
      \ PLE Character Model Tutorial\">Maya PLE Character Model Tutorial</a></p>\n\
      <p><b>Shuriken:</b> Wow, thanks - detailed reply&#160;:) (this is all new to\
      \ me, so I need all the help I can get...)</p>\n<p>From what I've been working\
      \ with today, I've realised that I'll definately need bones in the model to\
      \ attach emitters to. So I assume I have to go the ActorX route (I'm working\
      \ in Max btw)... but I'm confused about Skeletal Animation. Is it completely\
      \ different form of animation? Or can I do the regular 'move+rotate' animation\
      \ that is detailed in the first part of this tutorial.. all I need is some simple\
      \ recoil effects + select/down.</p>\n<p>Also, every weapon mutator I have comes\
      \ with a .ukx. Is this necessary for skeletal meshes? I know with vertex animating\
      \ the models you can embed it in the code, which is what I wish to do - possible\
      \ for skeletal animation?</p>\n<p><b>Chip:</b> Hmmm...hard to answer succinctly,\
      \ but basically vertex animation &amp; skeletal animation are significantly\
      \ different methods of accomplishing the same task – animating a mesh. Vertex\
      \ animation draws on more system resources (from what I've read) during game\
      \ play, and can be harder to animate for some types of movement (like humanoid\
      \ stuff.) For weapons, I don't know that it makes much diff, but all \"stock\"\
      \ UT2K3 weps are .ukx files, which are skeletal mesh anims. Here's another UDN\
      \ page to study – it makes the .ukx package a bit more understandable: <a href=\"\
      http://udn.epicgames.com/Two/AnimBrowserTutorial\" class=\"extiw\" title=\"\
      udn2:AnimBrowserTutorial\">udn2:AnimBrowserTutorial</a></p>\n<p>I haven't done\
      \ any weapons yet, so the \"embed it in the code\" question I can't speak to,\
      \ but just from the standpoint of ease of animation, export &amp; import, the\
      \ skeletal route seems better to me. Check out the ShockRifle_1st model &amp;\
      \ anims in Weapons.ukx (use the Animations browser) – a good recoil anim example,\
      \ among others.</p>\n<p><b>*Someone*:</b> Do you know if I can just clone the\
      \ objects and move them into their individual frames?</p>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.130 seconds\nReal time usage: 0.268 seconds\nPreprocessor\
      \ visited node count: 30/1000000\nPreprocessor generated node count: 144/1000000\n\
      Post‐expand include size: 7/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3874-0!*!0!!*!*!*\
      \ and timestamp 20221118015010 and revision id 9793\n -->\n"
  categories:
  - sortkey: "3ds2unr"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Animation"
  - ns: 100
    exists: true
    name: "Legacy:Maya"
  - ns: 100
    exists: true
    name: "Legacy:3D Studio Max Weapon Modeling And Import"
  - ns: 100
    exists: true
    name: "Legacy:UnEditor.Mll"
  - ns: 100
    exists: true
    name: "Legacy:Exec Directive"
  - ns: 100
    exists: true
    name: "Legacy:Maya PLE Character Model Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:ActorX"
  templates: []
  images: []
  externallinks:
  - "http://unreal.epicgames.com/Files/3ds2unr.zip"
  sections:
  - toclevel: 1
    level: "3"
    line: "Download"
    number: "1"
    index: "1"
    fromtitle: "Legacy:3ds2unr"
    byteoffset: 145
    anchor: "Download"
  - toclevel: 1
    level: "3"
    line: "HowTo"
    number: "2"
    index: "2"
    fromtitle: "Legacy:3ds2unr"
    byteoffset: 243
    anchor: "HowTo"
  - toclevel: 1
    level: "3"
    line: "What Now"
    number: "3"
    index: "3"
    fromtitle: "Legacy:3ds2unr"
    byteoffset: 2486
    anchor: "What_Now"
  displaytitle: "Legacy:3ds2unr"
  iwlinks:
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/ActorX"
    name: "udn2:ActorX"
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/UnrealVertexAnimation"
    name: "udn2:UnrealVertexAnimation"
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/ModelingTableOfContents"
    name: "udn2:ModelingTableOfContents"
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/AnimBrowserTutorial"
    name: "udn2:AnimBrowserTutorial"
  wikitext:
    text: "This page follows on from where the [[Legacy:3D Studio Max Weapon Modeling\
      \ And Import|3D Studio Max Weapon Modeling And Import]] tutorial ends.\n\n===Download\
      \ ===\n\n[http://unreal.epicgames.com/Files/3ds2unr.zip Latest version of 3ds2unr\
      \ (119)]\n\n===HowTo ===\n\nOnce you have the *.3ds files ready (from the above\
      \ tutorial) place them all into a new empty directory. Copy the 3ds2unr.exe\
      \ file into the same directory.\n\nNow you need to decide on what your output\
      \ file will be called. For my grenade weapon first person view I used grenadefp\
      \ which is what I will continue using here.\n\nThe 3ds files I ended up with\
      \ after animation and export were:\n* sel_desel.3ds - the de-select/select animation\n\
      * pinpull_fire.3ds - animation for pulling the pin and then throwing\n\nThat\
      \ was it actually. You might have more. My pin pull and fire were in the same\
      \ file because at the end of the pin pull the arm is drawn back for the throw\
      \ and not in the rest position so I thought it was simpler this way.\n\nOpen\
      \ up a DOS box, cd to your new directory that contains 3ds2unr and type in the\
      \ following command:\n\n 3ds2unr.exe grenadefp sel_desel.3ds pinpull_fire.3ds\n\
      \nReplacing the command arguments with your output name and input 3ds files.\n\
      \nIf this is the first time you have run 3ds2unr it will prompt you for a project\
      \ directory. I selected the directory in which we currently were (where 3ds2unr\
      \ was). If this is not the first time you have run the util it will carry on\
      \ with whatever setting it was originally given. This is OK if you know where\
      \ it is but you do have the option of redefining it by typing the following\
      \ command:\n\n 3ds2unr.exe -setproj\n\nAssuming this is the first time the utility\
      \ has been run it will create 2 sub-directories in the project directory (does\
      \ it or do you have to manually create them? It was all of yesterday I did this):\n\
      * Classes\n* Models\n\nIf there were no problems with the conversion you will\
      \ find, after the utility has completed, a new *.uc file in the classes directory,\
      \ and new *_d.3d and *_a.3d files in the Models directory. In my case I had\
      \ a grenadefp.uc, grenadefp_d.3d and grenade_a.3d files.\n\nYou have now finished\
      \ with 3ds2unr.\n\nIf you get an error that you don't understand or want to\
      \ learn how to use transparent/two-sided object materials etc. then the easiest\
      \ thing is to read the .DOC file that comes with the 3ds2unr download above.\
      \ It contains a lot of good information on model/material restrictions and advice\
      \ on how to achieve different effects.\n\n===What Now ===\n\nOnce you have the\
      \ output files it's time to get them into the game. Since my 3ds2unr project\
      \ directory was nowhere near my UT directory I manually copied the model files\
      \ into the Models sub-directory of my mods package directory under UT. You will\
      \ then also need to copy the texture files you used in Max into your models\
      \ directory. (make sure they are 8bit colour depth and are a power of 2 in resolution\
      \ - 128*128 or 128*256 or 256*256 etc)\n\nThen open the generated .uc file in\
      \ notepad and copied all of the #[[Legacy:Exec Directive|exec directive]] statements\
      \ that this contained and paste them at the top of your new weapon class.\n\n\
      The first thing you will need to change is the texture import lines. Example\
      \ code:\n\n<uscript>\n#exec TEXTURE IMPORT NAME=Jgrenade FILE=MODELS\\hand.bmp\
      \ GROUP=Skins FLAGS=2 // skins\n#exec TEXTURE IMPORT NAME=Jgrenade1 FILE=MODELS\\\
      grenbody.bmp GROUP=Skins FLAGS=2 // skins\n#exec TEXTURE IMPORT NAME=Jgrenade2\
      \ FILE=MODELS\\grenarm.bmp GROUP=Skins FLAGS=2\n#exec MESHMAP NEW   MESHMAP=grenadehn\
      \ MESH=grenadehn\n#exec MESHMAP SCALE MESHMAP=grenadehn X=0.1 Y=0.1 Z=0.2\n\n\
      #exec MESHMAP SETTEXTURE MESHMAP=grenadehn NUM=1 TEXTURE=Jgrenade\n#exec MESHMAP\
      \ SETTEXTURE MESHMAP=grenadehn NUM=2 TEXTURE=Jgrenade1\n#exec MESHMAP SETTEXTURE\
      \ MESHMAP=grenadehn NUM=3 TEXTURE=Jgrenade2\n</uscript>\n\nThe TEXTURE IMPORT\
      \ lines will contain texture files that dont exist. Replace the FILE setting\
      \ with the correct bitmap or pcx file name.\n\nEnsure that in the SETTEXTURE\
      \ lines that the correct texture is set to the correct NUM value. The NUM value\
      \ refers to the material ID of the polys in your scene. So for example my arm\
      \ models all have material ID of 1. My grenade body and ring pull have material\
      \ ID 2 and the grenade arm has a material ID of 3 (done this way to allow a\
      \ 2 sided material for the grenade arm)\n\nNext, you may need to change is the\
      \ placement and orientation of the model. The line for this on my model ended\
      \ up like this:\n\n<uscript>\n#exec MESH ORIGIN MESH=grenadehn X=100 Y=0 Z=70\
      \ YAW=128\n</uscript>\n\nThe origin (X=100 Y=0 Z=70) tells unreal where on the\
      \ screen the model will appear (X is into the screen, Y is left/right and Z\
      \ is up/down). Play with the numbers until it looks right. YAW, PITCH and ROLL\
      \ can also be defined to rotate the model as required (128 is equivalent to\
      \ 180deg). My model was facing the wrong way initially.\n\nYou will also find\
      \ that the model may be too small or too large on import. To modify this add\
      \ (or modify) the line\n\n<uscript>\nPlayerViewScale=0.4\n</uscript>\n\nin the\
      \ default properties of the class. A value of 1 keeps the model dimensions as\
      \ they are. Smaller numbers reduce the size...\n\nIt can take quite some time\
      \ to get the model exactly as you want it on screen.\n\nOne thing to be careful\
      \ of is numbers used for the origin. If the model gets moved away too far from\
      \ the players point of view it will start to clip into walls when you get close.\n\
      \nNext come the animation sequences.\n\nMy final code looked like this:\n\n\
      <uscript>\n#exec MESH SEQUENCE MESH=grenadehn SEQ=All STARTFRAME=0 NUMFRAMES=59\n\
      #exec MESH SEQUENCE MESH=grenadehn SEQ=down STARTFRAME=0 NUMFRAMES=11 rate=6\n\
      #exec MESH SEQUENCE MESH=grenadehn SEQ=select STARTFRAME=10 NUMFRAMES=11 rate=6\n\
      #exec MESH SEQUENCE MESH=grenadehn SEQ=still STARTFRAME=0 NUMFRAMES=1\n#exec\
      \ MESH SEQUENCE MESH=grenadehn SEQ=idle STARTFRAME=0 NUMFRAMES=1\n#exec MESH\
      \ SEQUENCE MESH=grenadehn SEQ=loading STARTFRAME=21 NUMFRAMES=21 rate=8\n#exec\
      \ MESH SEQUENCE MESH=grenadehn SEQ=fire STARTFRAME=41 NUMFRAMES=8\n#exec MESH\
      \ SEQUENCE MESH=grenadehn SEQ=downempty STARTFRAME=48 NUMFRAMES=11 rate=6\n\
      </uscript>\n\nThe ALL sequence should be done for you. You will need to list\
      \ out all the other animation sequences specifying the exact frame they start\
      \ on and how many frames they last. The RATE keyword at the end of some of the\
      \ lines allows you to speed up or slow down the animation. You will need to\
      \ play with it until it feels right.\n\nFinally, write the code to call the\
      \ animations and make your weapon work :)\n\nOne last thing. The above code\
      \ assumes a right handed weapon. Once you have this finished you can copy all\
      \ of the #exec statements and paste them below the originals. All you have to\
      \ do is change the MESH IMPORT MESH line so that it has unmirror=1 at the end.\
      \ i.e.:\n\n<uscript>\n#exec MESH IMPORT MESH=grenadehn ANIVFILE=MODELS\\grenfp_a.3d\
      \ DATAFILE=MODELS\\grenfp_d.3d X=0 Y=0 Z=0 unmirror=1\n</uscript>\n\nThen replace\
      \ all occurances of the mesh name (grenadehn here) with a different name (I\
      \ used grenadehnl). You can also remove the TEXTURE IMPORT lines since we have\
      \ already imported the required textures.\n\nNow for an annoying bit. After\
      \ getting everything spot on for the right hand view you may find that left\
      \ hand view is out. Again it is just a question of playing with the origin of\
      \ the mesh and '''also''' the following:\n\n<uscript>\nPlayerViewOffset=(X=1.500000,Y=-1.000000,Z=-1.650000)\n\
      </uscript>\n\nWhich can be found (or added) to the default properties of the\
      \ class.\n\nThis allows for a model to be mirrored for left/right hand views\
      \ and be placed exactly where the author wants it. It makes for a lot of tweaking\
      \ but you can always get the effect you want eventually.\n\n----\n\n'''Wang:'''\
      \  This could do with being a bit more detailed and is \"fluffy\" in a few areas.\
      \ Anyone who knows more about the subject should add on/modify where necessary.\n\
      \n'''Col Kassad:'''  Very nice! :)\n\n'''Wang:'''  There is something I should\
      \ add to this that I found out later that only applies to this type of 2 stage\
      \ firing. On the client in a network game if a weapon is not animating it will\
      \ be sent to the idle state. When my animation for pulling the pin finished\
      \ I held the weapon at the last frame of this animation until the user released\
      \ the fire button. At this point the throw animation ran. Holding the weapon\
      \ at a specific frame meant it wasn't animating so off it went out of the ClientFiring\
      \ state. I had to add a 2 frame static animation that could loop in the ready\
      \ to throw position.\n\n'''Shuriken:''' Hey - can anyone tell me if this and\
      \ the previous tutorial are the same method still used for importing models\
      \ and animations into UT2003?  I've found it really hard to find tutorials about\
      \ the subject for UT2003... can anyone point me to some if it uses a different\
      \ method?\n\n'''Chip:''' Shuri, this method ''can'' be used for getting vertex\
      \ animations into UT2003, but that type of animation isn't used for \"modern\"\
      \ UT2K3 character models and weapons &ndash; they're exported/imported as skeletal\
      \ meshes, using either [[Legacy:ActorX|ActorX]] (for Max and [[Legacy:Maya|Maya]]\
      \ full apps) or with the [[Legacy:UnEditor.Mll|unEditor]] plug-in for Maya 4.0.1\
      \ PLE. The difference between the animation types can be seen if you've ever\
      \ played the Invasion game type &ndash; all the Unreal1 monsters are vertex\
      \ anims (the method used for Unreal1 characters),and their limited anims are\
      \ obvious.\n\nIn UEd, check the Animations browser to see the extent of skeletal\
      \ anims used in UT2K3 (File>Open will shows how many .ukx files are used), and\
      \ the Meshes browser will show the vertex anims. Note that some objects like\
      \ waving flags are still best done with vertex animation due to the complexity\
      \ of the motion, or because the mesh shape changes (goop blobs).\n\nSo a full\
      \ answer to your question means you have to define what type of [[Legacy:Animation|Animation]]\
      \ you're planning. Some links that might help: [[udn2:ModelingTableOfContents]],\
      \ [[udn2:ActorX]], [[udn2:UnrealVertexAnimation]], [[Legacy:Maya PLE Character\
      \ Model Tutorial|Maya PLE Character Model Tutorial]]\n\n'''Shuriken:''' Wow,\
      \ thanks - detailed reply :) (this is all new to me, so I need all the help\
      \ I can get...)\n\nFrom what I've been working with today, I've realised that\
      \ I'll definately need bones in the model to attach emitters to.  So I assume\
      \ I have to go the ActorX route (I'm working in Max btw)... but I'm confused\
      \ about Skeletal Animation.  Is it completely different form of animation? \
      \ Or can I do the regular 'move+rotate' animation that is detailed in the first\
      \ part of this tutorial.. all I need is some simple recoil effects + select/down.\n\
      \nAlso, every weapon mutator I have comes with a .ukx.  Is this necessary for\
      \ skeletal meshes?  I know with vertex animating the models you can embed it\
      \ in the code, which is what I wish to do - possible for skeletal animation?\n\
      \n'''Chip:''' Hmmm...hard to answer succinctly, but basically vertex animation\
      \ & skeletal animation are significantly different methods of accomplishing\
      \ the same task &ndash; animating a mesh. Vertex animation draws on more system\
      \ resources (from what I've read) during game play, and can be harder to animate\
      \ for some types of movement (like humanoid stuff.) For weapons, I don't know\
      \ that it makes much diff, but all \"stock\" UT2K3 weps are .ukx files, which\
      \ are skeletal mesh anims. Here's another UDN page to study &ndash; it makes\
      \ the .ukx package a bit more understandable: [[udn2:AnimBrowserTutorial]]\n\
      \nI haven't done any weapons yet, so the \"embed it in the code\" question I\
      \ can't speak to, but just from the standpoint of ease of animation, export\
      \ & import, the skeletal route seems better to me. Check out the ShockRifle_1st\
      \ model & anims in Weapons.ukx (use the Animations browser) &ndash; a good recoil\
      \ anim example, among others.\n\n'''*Someone*:''' Do you know if I can just\
      \ clone the objects and move them into their individual frames?\n\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 9793
name: "Legacy:3ds2unr"
revision:
  revid: 9793
  parentid: 9795
  user: "Jan"
  timestamp: 1130966564.000000000
  comment: "*"
timestamp: 1668775079.051170000
