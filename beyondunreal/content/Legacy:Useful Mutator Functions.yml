---
parse:
  title: "Legacy:Useful Mutator Functions"
  text:
    text: "<p>Some useful <a href=\"/Legacy:Mutator_(UT)\" title=\"Legacy:Mutator\
      \ (UT)\">Mutator (UT)</a> functions. The code on this page probably doesn't\
      \ work at all in UT2003.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#HUD_Mutators\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">HUD Mutators</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Destructable_Mutators\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Destructable Mutators</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Replacing_Inventory_Items\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Replacing Inventory Items</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Giving_Weapons_To_Players\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Giving Weapons To\
      \ Players</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"HUD_Mutators\"\
      >HUD Mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=1\" title=\"\
      Edit section: HUD Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<blockquote class=\"legacyquote\">\n<p>\"How do I register\
      \ a HUD mutator?\"</p>\n<p>\"Why doesn't my HUD mutator work in online/LAN games?\"\
      </p>\n</blockquote>\n<p>This is a sample HUD mutator which does nothing more\
      \ that registering itself and showing how to get a reference to the local <a\
      \ href=\"/Legacy:PlayerPawn\" title=\"Legacy:PlayerPawn\">PlayerPawn</a> and\
      \ the <a href=\"/Legacy:HUD_(UT)\" title=\"Legacy:HUD (UT)\">HUD (UT)</a>.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyHUDMutator\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n\
      <span class=\"kw1\">var</span> PlayerPawn MyPlayer;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw9\">HUD</span> MyHUD;\n \n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw4\">Tick</span><span class=\"\
      br0\">(</span><span class=\"kw5\">float</span> DeltaTime<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"sy0\">!</span>bHUDMutator <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"kw7\">Level</span>.<span class=\"me0\"\
      >NetMode</span> <span class=\"sy0\">!=</span> NM_DedicatedServer <span class=\"\
      br0\">)</span>\n        RegisterHUDMutator<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >simulated</span> <span class=\"kw1\">function</span> PostRender<span class=\"\
      br0\">(</span><span class=\"kw8\">canvas</span> <span class=\"kw8\">Canvas</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    MyPlayer <span class=\"\
      sy0\">=</span> <span class=\"kw8\">Canvas</span>.<span class=\"me0\">Viewport</span>.<span\
      \ class=\"kw9\">Actor</span>;\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> MyPlayer <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n        MyHUD <span class=\"sy0\">=</span> MyPlayer.<span\
      \ class=\"me0\">myHUD</span>;\n \n    <span class=\"co1\">// This is important!\
      \ It allows the next HUD mutator to draw on the canvas.</span>\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> NextHUDMutator <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n  \
      \      NextHUDMutator.<span class=\"me0\">PostRender</span><span class=\"br0\"\
      >(</span><span class=\"kw8\">Canvas</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n     <span class=\"kw7\">RemoteRole</span><span\
      \ class=\"sy0\">=</span><span class=\"kw7\">ROLE_SimulatedProxy</span>\n   \
      \  bAlwaysRelevant<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      \     bNetTemporary<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\
      \  <span class=\"co1\">// Set to false if you need to replicate data to the\
      \ clients more than once per level</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Note:</b> Don't use the code of the Team Beacon HUD mutator or\
      \ the Relics. Team Beacon is far to complicated for this simple task and the\
      \ RelicHUDMutator (apart from being incompatible to regular HUD mutators) calls\
      \ its Destroy function without properly unregistering itself. (see Destructable\
      \ Mutators below)</p>\n<p><b>Note:</b> If you want to execute code once client-side,\
      \ but wish to do it after values have been replicated from the server to the\
      \ client then used the <i>PostNetBeginPlay()</i> function.</p>\n<p>Also see\
      \ <a href=\"/Legacy:Netcode_Idioms\" title=\"Legacy:Netcode Idioms\">Netcode\
      \ Idioms</a>.</p>\n<h2><span class=\"mw-headline\" id=\"Destructable_Mutators\"\
      >Destructable Mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=2\" title=\"\
      Edit section: Destructable Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Never destroy a <a href=\"/Legacy:Mutator_(UT)\" title=\"\
      Legacy:Mutator (UT)\">Mutator (UT)</a> while it still is in any of the mutator\
      \ chains. This would effectively disconnect all mutators further down in the\
      \ list. If you really need to destroy a mutator make sure it was unregistered\
      \ before destroying it.</p>\n<p>The other possible solution is that the mutator\
      \ unregisters itself:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// correctly unregister this mutator from all linked mutator chains</span>\n\
      <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">Destroyed</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Mutator</span> M;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">HUD</span> H;\n \n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"kw7\"\
      >Game</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"me0\">BaseMutator</span> <span class=\"\
      sy0\">==</span> <span class=\"kw6\">Self</span> <span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">BaseMutator</span> <span class=\"sy0\">=</span> NextMutator;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">DamageMutator</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw6\">Self</span> <span class=\"\
      br0\">)</span>\n\t\t\t<span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">DamageMutator</span> <span class=\"sy0\">=</span> NextDamageMutator;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">MessageMutator</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw6\">Self</span> <span class=\"\
      br0\">)</span>\n\t\t\t<span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">MessageMutator</span> <span class=\"sy0\">=</span> NextMessageMutator;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">ForEach</span> <span class=\"\
      kw2\">AllActors</span><span class=\"br0\">(</span><span class=\"kw1\">Class</span><span\
      \ class=\"st0\">'Engine.HUD'</span>, H<span class=\"br0\">)</span>\n\t\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> H.<span class=\"me0\"\
      >HUDMutator</span> <span class=\"sy0\">==</span> <span class=\"kw6\">Self</span>\
      \ <span class=\"br0\">)</span>\n\t\t\tH.<span class=\"me0\">HUDMutator</span>\
      \ <span class=\"sy0\">=</span> NextHUDMutator;\n\t<span class=\"kw2\">ForEach</span>\
      \ <span class=\"kw2\">AllActors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'Engine.Mutator'</span>, M<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> M.<span class=\"me0\">NextMutator</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw6\">Self</span> <span class=\"br0\"\
      >)</span>\n\t\t\tM.<span class=\"me0\">NextMutator</span> <span class=\"sy0\"\
      >=</span> NextMutator;\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> M.<span class=\"me0\">NextHUDMutator</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw6\">Self</span> <span class=\"br0\">)</span>\n\t\t\tM.<span\
      \ class=\"me0\">NextHUDMutator</span> <span class=\"sy0\">=</span> NextHUDMutator;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> M.<span class=\"\
      me0\">NextDamageMutator</span> <span class=\"sy0\">==</span> <span class=\"\
      kw6\">Self</span> <span class=\"br0\">)</span>\n\t\t\tM.<span class=\"me0\"\
      >NextDamageMutator</span> <span class=\"sy0\">=</span> NextDamageMutator;\n\t\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> M.<span class=\"\
      me0\">NextMessageMutator</span> <span class=\"sy0\">==</span> <span class=\"\
      kw6\">Self</span> <span class=\"br0\">)</span>\n\t\t\tM.<span class=\"me0\"\
      >NextMessageMutator</span> <span class=\"sy0\">=</span> NextMessageMutator;\n\
      \t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Replacing_Inventory_Items\">Replacing Inventory\
      \ Items</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=3\" title=\"\
      Edit section: Replacing Inventory Items\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <tt>ReplaceWith</tt> function does its job in\
      \ most cases, but not in all maps the items are placed with their default properties.\
      \ Some have the rotation turned off (either <tt>bRotatingPicklup=False</tt>,\
      \ which is the recommended way to do it, or <tt>RotationRate.Yaw=0</tt>) or\
      \ float in mid-air though they normally fall down. (<tt>Physics=PHYS_None</tt>\
      \ instead of <tt>PHYS_Falling</tt>)</p>\n<p>Also mutator sometimes want to further\
      \ adjust the properties of the item after spawning it.</p>\n<p>The <tt>ReplaceWithItem</tt>\
      \ function takes both into account: It modifies the new item's rotation and\
      \ physics and returns it, so the mutator can modify its properties.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Modified version\
      \ of the ReplaceWith function</span>\n<span class=\"co1\">// Replaces an inventory\
      \ Other with an inventory of class aClassName and</span>\n<span class=\"co1\"\
      >// returns a reference to it</span>\n<span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw9\">Inventory</span> ReplaceWithItem<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Inventory</span> Other, <span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> aClassName<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Inventory</span> A;\n\t<span class=\"kw1\">local</span>\
      \ class<span class=\"sy0\">&lt;</span>Inventory<span class=\"sy0\">&gt;</span>\
      \ a<span class=\"re0\">Class</span>&lt; SEMI &gt;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">bool</span> bAllowItemFall, bForceItemFall;\n\t<span class=\"\
      kw1\">local</span> <span class=\"kw5\">bool</span> bAllowItemRotation, bForceItemRotation;\n\
      \ \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> Other.<span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">==</span> <span class=\"\
      kw3\">vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span> <span\
      \ class=\"kw5\">None</span>;\n\taClass <span class=\"sy0\">=</span> class<span\
      \ class=\"sy0\">&lt;</span>Inventory<span class=\"sy0\">&gt;</span><span class=\"\
      br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span class=\"br0\"\
      >(</span>aClassName, <span class=\"kw1\">class</span><span class=\"st0\">'Class'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> aClass <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\tA <span\
      \ class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\"\
      >(</span>aClass, Other.<span class=\"kw7\">Owner</span>, Other.<span class=\"\
      kw7\">Tag</span>,\n\t\t\t\tOther.<span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> <span class=\"br0\">(</span>aClass.<span class=\"kw1\">Default</span>.<span\
      \ class=\"kw7\">CollisionHeight</span> <span class=\"sy0\">-</span> Other.<span\
      \ class=\"kw7\">CollisionHeight</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">*</span> <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>,\n\t\t\t\tOther.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Other.<span class=\"me0\">MyMarker</span> <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n\t\tOther.<span class=\"me0\">MyMarker</span>.<span\
      \ class=\"me0\">markedItem</span> <span class=\"sy0\">=</span> A;\n\t\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> A <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t\
      \tA.<span class=\"me0\">MyMarker</span> <span class=\"sy0\">=</span> Other.<span\
      \ class=\"me0\">MyMarker</span>;\n\t\tOther.<span class=\"me0\">MyMarker</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t<span class=\"\
      br0\">}</span>\n\t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> A <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \t\tA.<span class=\"me0\">bHeldItem</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">true</span>;\n\t\tA.<span class=\"me0\">Respawntime</span> <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> A\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> Other.<span class=\"kw7\">Physics</span> <span\
      \ class=\"sy0\">!=</span> Other.<span class=\"kw1\">Class</span>.<span class=\"\
      kw1\">Default</span>.<span class=\"kw7\">Physics</span> <span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n\t\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> Other.<span class=\"kw7\">Physics</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">PHYS_Falling</span> <span class=\"\
      br0\">)</span>\n\t\t\t\tbForceItemFall <span class=\"sy0\">=</span> <span class=\"\
      kw6\">True</span>;\n\t\t\t<span class=\"kw2\">else</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> Other.<span class=\"kw1\">Class</span>.<span\
      \ class=\"kw1\">Default</span>.<span class=\"kw7\">Physics</span> <span class=\"\
      sy0\">==</span> <span class=\"kw7\">PHYS_Falling</span> <span class=\"br0\"\
      >)</span>\n\t\t\t\tbAllowItemFall <span class=\"sy0\">=</span> <span class=\"\
      kw6\">False</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"\
      sy0\">!</span>Other.<span class=\"me0\">bRotatingPickup</span> <span class=\"\
      sy0\">||</span> Other.<span class=\"kw7\">RotationRate</span> <span class=\"\
      sy0\">==</span> <span class=\"kw3\">rot</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t\t\t<span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Other.<span class=\"kw7\"\
      >Rotation</span>.<span class=\"me0\">Pitch</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> Other.<span class=\"\
      kw7\">Rotation</span>.<span class=\"me0\">Roll</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n\t\t\tbAllowItemRotation <span class=\"sy0\">=</span> <span class=\"\
      kw6\">False</span>;\n\t\t<span class=\"kw2\">else</span>\n\t\t\tbAllowItemRotation\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Other.<span class=\"\
      kw7\">RotationRate</span> <span class=\"sy0\">!=</span> <span class=\"kw3\"\
      >rot</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> Other.<span class=\"me0\">bRotatingPickup</span><span\
      \ class=\"br0\">)</span>\n\t\t\t\t\t<span class=\"sy0\">||</span> <span class=\"\
      sy0\">!</span>Other.<span class=\"kw1\">default</span>.<span class=\"me0\">bRotatingPickup</span>\
      \ <span class=\"sy0\">||</span> Other.<span class=\"kw1\">default</span>.<span\
      \ class=\"kw7\">RotationRate</span> <span class=\"sy0\">==</span> <span class=\"\
      kw3\">rot</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;\n\
      \t\tbForceItemRotation <span class=\"sy0\">=</span> Other.<span class=\"kw7\"\
      >RotationRate</span> <span class=\"sy0\">!=</span> <span class=\"kw3\">rot</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Other.<span class=\"me0\">bRotatingPickup</span>\n\t\t\t\t<span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Other.<span\
      \ class=\"kw1\">default</span>.<span class=\"me0\">bRotatingPickup</span> <span\
      \ class=\"sy0\">||</span> Other.<span class=\"kw1\">default</span>.<span class=\"\
      kw7\">RotationRate</span> <span class=\"sy0\">==</span> <span class=\"kw3\"\
      >rot</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n \n\t\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> A.<span class=\"kw7\">Physics</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw7\">PHYS_Falling</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"sy0\">!</span>bAllowItemFall <span class=\"br0\">)</span>\n\t\
      \t\tA.<span class=\"kw4\">SetPhysics</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">PHYS_None</span><span class=\"br0\">)</span>;\n\t\t<span class=\"\
      kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ A.<span class=\"kw7\">Physics</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw7\">PHYS_Falling</span> <span class=\"sy0\">&amp;&amp;</span> bForceItemFall\
      \ <span class=\"br0\">)</span>\n\t\t\tA.<span class=\"kw4\">SetPhysics</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">PHYS_Falling</span><span class=\"\
      br0\">)</span>;\n\t\tA.<span class=\"me0\">bRotatingPickup</span> <span class=\"\
      sy0\">=</span> bAllowItemRotation <span class=\"sy0\">&amp;&amp;</span> <span\
      \ class=\"br0\">(</span>A.<span class=\"me0\">bRotatingPickup</span> <span class=\"\
      sy0\">||</span> bForceItemRotation<span class=\"br0\">)</span>;\n \n\t\tA.<span\
      \ class=\"kw1\">Event</span> <span class=\"sy0\">=</span> Other.<span class=\"\
      kw1\">Event</span>;\n\t\tA.<span class=\"kw7\">Tag</span> <span class=\"sy0\"\
      >=</span> Other.<span class=\"kw7\">Tag</span>;\n\t\t<span class=\"kw2\">return</span>\
      \ A;\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">return</span> <span\
      \ class=\"kw5\">None</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Giving_Weapons_To_Players\">Giving Weapons\
      \ To Players</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=4\" title=\"\
      Edit section: Giving Weapons To Players\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This function is a modified version of the <tt><a\
      \ href=\"/Legacy:DeathMatchPlus\" title=\"Legacy:DeathMatchPlus\">DeathMatchPlus</a>.GiveWeapon</tt>\
      \ function. It adds the weapon to the player's inventory and optionally brings\
      \ it up as the players selected weapon. The function returns the weapon.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Give a weapon\
      \ to a player and optionally bring it up as current weapon.</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw9\">Weapon</span> GiveWeapon<span class=\"\
      br0\">(</span><span class=\"kw9\">Pawn</span> PlayerPawn, <span class=\"kw5\"\
      >string</span> aClassName, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">bool</span> bBringUp<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n\t<span class=\"kw1\">local</span> class<span class=\"sy0\">&lt;</span>Weapon<span\
      \ class=\"sy0\">&gt;</span> Weapon<span class=\"re0\">Class</span>&lt; SEMI\
      \ &gt;\n\t<span class=\"kw1\">local</span> <span class=\"kw9\">Weapon</span>\
      \ NewWeapon;\n \n\tWeaponClass <span class=\"sy0\">=</span> class<span class=\"\
      sy0\">&lt;</span>Weapon<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">DynamicLoadObject</span><span class=\"br0\">(</span>aClassName,\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'Class'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> PlayerPawn.<span class=\"me0\">FindInventoryType</span><span\
      \ class=\"br0\">(</span>WeaponClass<span class=\"br0\">)</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\
      \t\t<span class=\"kw2\">return</span> <span class=\"kw5\">None</span>;\n\tnewWeapon\
      \ <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"\
      br0\">(</span>WeaponClass<span class=\"br0\">)</span>;\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> newWeapon <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n\t\tnewWeapon.<span class=\"me0\">RespawnTime</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0.0</span>;\n\t\tnewWeapon.<span class=\"\
      me0\">GiveTo</span><span class=\"br0\">(</span>PlayerPawn<span class=\"br0\"\
      >)</span>;\n\t\tnewWeapon.<span class=\"me0\">bHeldItem</span> <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n\t\tnewWeapon.<span class=\"\
      me0\">GiveAmmo</span><span class=\"br0\">(</span>PlayerPawn<span class=\"br0\"\
      >)</span>;\n\t\tnewWeapon.<span class=\"me0\">SetSwitchPriority</span><span\
      \ class=\"br0\">(</span>PlayerPawn<span class=\"br0\">)</span>;\n\t\tnewWeapon.<span\
      \ class=\"me0\">WeaponSet</span><span class=\"br0\">(</span>PlayerPawn<span\
      \ class=\"br0\">)</span>;\n\t\tnewWeapon.<span class=\"me0\">AmbientGlow</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> PlayerPawn.<span class=\"kw3\"\
      >IsA</span><span class=\"br0\">(</span><span class=\"st0\">'PlayerPawn'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t\tnewWeapon.<span\
      \ class=\"me0\">SetHand</span><span class=\"br0\">(</span>PlayerPawn<span class=\"\
      br0\">(</span>PlayerPawn<span class=\"br0\">)</span>.<span class=\"me0\">Handedness</span><span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">else</span>\n\t\t\tnewWeapon.<span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Idle'</span><span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> bBringUp <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n\t\t\tPlayerPawn.<span class=\"kw9\">Weapon</span>.<span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'DownWeapon'</span><span\
      \ class=\"br0\">)</span>;\n\t\t\tPlayerPawn.<span class=\"me0\">PendingWeapon</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t\t\tPlayerPawn.<span\
      \ class=\"kw9\">Weapon</span> <span class=\"sy0\">=</span> newWeapon;\n\t\t\t\
      PlayerPawn.<span class=\"kw9\">Weapon</span>.<span class=\"me0\">BringUp</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t\t<span class=\"br0\"\
      >}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">return</span>\
      \ newWeapon;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=5\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Open_Source\" title=\"Legacy:Open\
      \ Source\">Open Source</a></li>\n<li><a href=\"/Legacy:Mutator_Topics\" title=\"\
      Legacy:Mutator Topics\">Mutator Topics</a></li>\n<li><a href=\"/Legacy:Making_Mods\"\
      \ title=\"Legacy:Making Mods\">Making Mods</a></li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Mutator_Functions?section=6\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Kuhal:</b> I have a developed a way to allow a\
      \ mutator to \"appear\" to handle Damage to players BEFORE Inventory.ReduceDamage\
      \ is called. Shall I create a page for this and link to it from OpenSource or\
      \ would it be better to create the page and link form my homepage until one\
      \ of the guru's can comment on the content? I investigated this while helping\
      \ someone on the forums who wanted it specifically for his SpawnProtection code.</p>\n\
      <p><b>Mychaeel:</b> Would you describe that method in a few words? – By the\
      \ way, I believe the sections on this page would be well worth individual pages;\
      \ maybe subpages of this one.</p>\n<p><b>Kuhal:</b> Synopsis: Create an Inventory\
      \ Item with Charge=0; ArmorAbsorption=0; AbsorptionPriority=1000; bIsAnArmor=true;.\
      \ Override ArmorAbsorbDamage in new class to update member variables for use\
      \ by the mutator. Make sure that the mutator deals out the damage accordingly\
      \ because the REAL armor was not damaged in the hit. Has limited usefulness\
      \ - Why oh why didn't EPIC give Inventory.ReduceDamage the Victim and InstigatedBy\
      \ vars too? I'm interested in other ideas in this area so by all means hook\
      \ me up. I have full working source for the SpawnProtection use if needed.</p>\n\
      <p><b>Csimbi:</b> Could someone add an example of adding another mutator from\
      \ a mutator that is already added? I want to have only one entry in the .int\
      \ file for practical reasons (the one Mutator would add all the others), and\
      \ I cannot figure out how to do it. I tried a couple of things, but none of\
      \ those worked so far. Thank You in advance.</p>\n<p><b>Foxpaw:</b> Depending\
      \ on what exactly you had in mind, that may be quite easy. Or it may be next\
      \ to impossible. Do you mean, you only want the one entry in the mutator list\
      \ and when play begins all the other mutators are added? Or do you mean you\
      \ want all of them to show up in the mutator list, but only want one listed\
      \ in the INT file?</p>\n<p><b>Wormbo:</b> Just Level.Game.BaseMutator.AddMutator(Spawn(theMutatorClass))\
      \ should do the trick, but why don't you just combine the mutators into a single\
      \ class?</p>\n<p><b>Csimbi:</b></p>\n<p>Foxpaw, the idea is that one mutator\
      \ adds all the others.</p>\n<p>Wormbo, in which function do You call this? Prebeginplay,\
      \ PostBeginPlay, or&#160;?</p>\n<p><b>Wormbo:</b> Yes, call it from one of the\
      \ *BeginPlay functions.</p>\n<p><b>Csimbi:</b> I do this in the Mutator's PostBeginplay:\
      \ Level.Game.BaseMutator.AddMutator(Spawn(class'CustomTranslocator'));</p>\n\
      <p>The error message I get is: \"Error, Call to 'AddMutator': type mismatch\
      \ in parameter 1\"</p>\n<p>What am I doing wrong?</p>\n<p><b>Wormbo:</b> 'Type\
      \ mismatch' <a href=\"/Legacy:Compiler_Errors\" title=\"Legacy:Compiler Errors\"\
      >compiler errors</a> tell you that the function expects a different variable\
      \ type than you used. This CustomTranslocator class of yours, it's a mutator\
      \ subclass, isn't it?</p>\n<p><b>Csimbi:</b> My mistake. It's a TournamentWeapon.\
      \ Changed class name to the mutator's class, and it works like a charm. Thank\
      \ You.</p>\n<p><b>Vindexus:</b> I tried to make an arena mut using the Replace\
      \ function above. However, when i try to</p>\n<p>compile it with the ucc make\
      \ command, it says I'm missing a \";\" in \"Class\" on line 4 where the function\
      \ is started. Anybody know what that means?</p>\n<p><b>EntropicLqd:</b> Check\
      \ your class definition. It should be similar to the very first line of the\
      \ HUD Mutator code snippet (first code snippet) on this page. If you class definition\
      \ is correct then check that you don't mention the word <i>class</i> anywhere\
      \ in a comment block before the class declaration line. e.g. the following code\
      \ will give you an error at line 1:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">// This class is a mutator that does some stuff</span>\n\
      <span class=\"kw1\">class</span> MyMutator <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Mutator</span>;\n<span class=\"co1\">// .. rest of class\
      \ definition ...</span></pre></div>\n</div>\n<p><b>Vindexus:</b> For what it's\
      \ worth, I'm using UT2004. Here's the line of code that has the error on it</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw9\">Inventory</span> ReplaceWithItem<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Inventory</span> Other, <span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> MyWeaponPickup<span class=\"\
      br0\">)</span></pre></div>\n</div>\n<p><b>EntropicLqd:</b> The line number the\
      \ error is being reported on is bogus. Something that's pretty normal for compilers.\
      \ Check your code for missing semi-colons and the like - especially after the\
      \ class definition. It might be worth posting the whole code block rather than\
      \ just a single line.</p>\n<p><b>Wormbo:</b> Vindexus, please read the top of\
      \ this page again:</p>\n<blockquote class=\"legacyquote\">\n<p>Some useful <a\
      \ href=\"/Legacy:Mutator_(UT)\" title=\"Legacy:Mutator (UT)\">Mutator (UT)</a>\
      \ functions. The code on this page probably doesn't work at all in UT2003.</p>\n\
      </blockquote>\n<p>These functions are not intended to be used in UT2003/4 because\
      \ many aspects of Mutators and also the Pickup/Inventory system have changed.</p>\n\
      <p><b>AJRAD:</b> I'm trying to use the weapon replacement mutator thingy, but\
      \ you don't specify which bits to change!!! How the hell is a newbies such as\
      \ me supposed to understand? Please tell me what needs to be changed.</p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.148 seconds\nReal time usage: 0.196\
      \ seconds\nPreprocessor visited node count: 86/1000000\nPreprocessor generated\
      \ node count: 229/1000000\nPost‐expand include size: 646/2097152 bytes\nTemplate\
      \ argument size: 215/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%   99.995      1 - -total\n  6.24%    6.240\
      \      2 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3377-0!*!0!!en!*!*\
      \ and timestamp 20221117191522 and revision id 8710\n -->\n"
  categories:
  - sortkey: "Useful Mutator Functions"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Compiler Errors"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:DeathMatchPlus"
  - ns: 100
    exists: true
    name: "Legacy:HUD (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  - ns: 100
    exists: true
    name: "Legacy:Mutator (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Netcode Idioms"
  - ns: 100
    exists: true
    name: "Legacy:PlayerPawn"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "HUD Mutators"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 123
    anchor: "HUD_Mutators"
  - toclevel: 1
    level: "2"
    line: "Destructable Mutators"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 1742
    anchor: "Destructable_Mutators"
  - toclevel: 1
    level: "2"
    line: "Replacing Inventory Items"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 3017
    anchor: "Replacing_Inventory_Items"
  - toclevel: 1
    level: "2"
    line: "Giving Weapons To Players"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 5722
    anchor: "Giving_Weapons_To_Players"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 7026
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Useful_Mutator_Functions"
    byteoffset: 7163
    anchor: "Discussion"
  displaytitle: "Legacy:Useful Mutator Functions"
  iwlinks: []
  wikitext:
    text: "Some useful [[Legacy:Mutator (UT)|Mutator (UT)]] functions. The code on\
      \ this page probably doesn't work at all in UT2003.\n\n==HUD Mutators==\n\n\
      {{innerbox|\"How do I register a HUD mutator?\"\n\n\"Why doesn't my HUD mutator\
      \ work in online/LAN games?\"\n\n}}\n\nThis is a sample HUD mutator which does\
      \ nothing more that registering itself and showing how to get a reference to\
      \ the local [[Legacy:PlayerPawn|PlayerPawn]] and the [[Legacy:HUD (UT)|HUD (UT)]].\n\
      \n<uscript>\nclass MyHUDMutator extends Mutator;\n\nvar PlayerPawn MyPlayer;\n\
      var HUD MyHUD;\n\nsimulated function Tick(float DeltaTime)\n{\n    if ( !bHUDMutator\
      \ && Level.NetMode != NM_DedicatedServer )\n        RegisterHUDMutator();\n\
      }\n\nsimulated function PostRender(canvas Canvas)\n{\n    MyPlayer = Canvas.Viewport.Actor;\n\
      \    if ( MyPlayer != None )\n        MyHUD = MyPlayer.myHUD;\n    \n    //\
      \ This is important! It allows the next HUD mutator to draw on the canvas.\n\
      \    if ( NextHUDMutator != None )\n        NextHUDMutator.PostRender(Canvas);\n\
      }\n\ndefaultproperties\n{\n     RemoteRole=ROLE_SimulatedProxy\n     bAlwaysRelevant=True\n\
      \     bNetTemporary=True  // Set to false if you need to replicate data to the\
      \ clients more than once per level\n}\n</uscript>\n\n'''Note:''' Don't use the\
      \ code of the Team Beacon HUD mutator or the Relics. Team Beacon is far to complicated\
      \ for this simple task and the RelicHUDMutator (apart from being incompatible\
      \ to regular HUD mutators) calls its Destroy function without properly unregistering\
      \ itself. (see Destructable Mutators below)\n\n'''Note:''' If you want to execute\
      \ code once client-side, but wish to do it after values have been replicated\
      \ from the server to the client then used the ''PostNetBeginPlay()'' function.\n\
      \nAlso see [[Legacy:Netcode Idioms|Netcode Idioms]].\n\n==Destructable Mutators==\n\
      \nNever destroy a [[Legacy:Mutator (UT)|Mutator (UT)]] while it still is in\
      \ any of the mutator chains. This would effectively disconnect all mutators\
      \ further down in the list. If you really need to destroy a mutator make sure\
      \ it was unregistered before destroying it.\n\nThe other possible solution is\
      \ that the mutator unregisters itself:\n\n<uscript>\n// correctly unregister\
      \ this mutator from all linked mutator chains\nsimulated function Destroyed()\n\
      {\n\tlocal Mutator M;\n\tlocal HUD H;\n\t\n\tif ( Level.Game != None ) {\n\t\
      \tif ( Level.Game.BaseMutator == Self )\n\t\t\tLevel.Game.BaseMutator = NextMutator;\n\
      \t\tif ( Level.Game.DamageMutator == Self )\n\t\t\tLevel.Game.DamageMutator\
      \ = NextDamageMutator;\n\t\tif ( Level.Game.MessageMutator == Self )\n\t\t\t\
      Level.Game.MessageMutator = NextMessageMutator;\n\t}\n\tForEach AllActors(Class'Engine.HUD',\
      \ H)\n\t\tif ( H.HUDMutator == Self )\n\t\t\tH.HUDMutator = NextHUDMutator;\n\
      \tForEach AllActors(Class'Engine.Mutator', M) {\n\t\tif ( M.NextMutator == Self\
      \ )\n\t\t\tM.NextMutator = NextMutator;\n\t\tif ( M.NextHUDMutator == Self )\n\
      \t\t\tM.NextHUDMutator = NextHUDMutator;\n\t\tif ( M.NextDamageMutator == Self\
      \ )\n\t\t\tM.NextDamageMutator = NextDamageMutator;\n\t\tif ( M.NextMessageMutator\
      \ == Self )\n\t\t\tM.NextMessageMutator = NextMessageMutator;\n\t}\n}\n</uscript>\n\
      \n==Replacing Inventory Items==\n\nThe <tt>ReplaceWith</tt> function does its\
      \ job in most cases, but not in all maps the items are placed with their default\
      \ properties. Some have the rotation turned off (either <tt>bRotatingPicklup=False</tt>,\
      \ which is the recommended way to do it, or <tt>RotationRate.Yaw=0</tt>) or\
      \ float in mid-air though they normally fall down. (<tt>Physics=PHYS_None</tt>\
      \ instead of <tt>PHYS_Falling</tt>)\n\nAlso mutator sometimes want to further\
      \ adjust the properties of the item after spawning it.\n\nThe <tt>ReplaceWithItem</tt>\
      \ function takes both into account: It modifies the new item's rotation and\
      \ physics and returns it, so the mutator can modify its properties.\n\n<uscript>\n\
      // Modified version of the ReplaceWith function\n// Replaces an inventory Other\
      \ with an inventory of class aClassName and\n// returns a reference to it\n\
      final function Inventory ReplaceWithItem(Inventory Other, coerce string aClassName)\n\
      {\n\tlocal Inventory A;\n\tlocal class<Inventory> aClass;\n\tlocal bool bAllowItemFall,\
      \ bForceItemFall;\n\tlocal bool bAllowItemRotation, bForceItemRotation;\n\n\t\
      if ( Other.Location == vect(0,0,0) )\n\t\treturn None;\n\taClass = class<Inventory>(DynamicLoadObject(aClassName,\
      \ class'Class'));\n\tif ( aClass != None )\n\t\tA = Spawn(aClass, Other.Owner,\
      \ Other.Tag,\n\t\t\t\tOther.Location + (aClass.Default.CollisionHeight - Other.CollisionHeight)\
      \ * vect(0,0,1),\n\t\t\t\tOther.Rotation);\n\t\n\tif ( Other.MyMarker != None\
      \ ) {\n\t\tOther.MyMarker.markedItem = A;\n\t\tif ( A != None )\n\t\t\tA.MyMarker\
      \ = Other.MyMarker;\n\t\tOther.MyMarker = None;\n\t}\n\telse if ( A != None\
      \ ) {\n\t\tA.bHeldItem = true;\n\t\tA.Respawntime = 0.0;\n\t}\n\t\n\tif ( A\
      \ != None ) {\n\t\tif ( Other.Physics != Other.Class.Default.Physics ) {\n\t\
      \t\tif ( Other.Physics == PHYS_Falling )\n\t\t\t\tbForceItemFall = True;\n\t\
      \t\telse if ( Other.Class.Default.Physics == PHYS_Falling )\n\t\t\t\tbAllowItemFall\
      \ = False;\n\t\t}\n\t\tif ( (!Other.bRotatingPickup || Other.RotationRate ==\
      \ rot(0,0,0))\n\t\t\t\t&& (Other.Rotation.Pitch != 0 || Other.Rotation.Roll\
      \ != 0) )\n\t\t\tbAllowItemRotation = False;\n\t\telse\n\t\t\tbAllowItemRotation\
      \ = (Other.RotationRate != rot(0,0,0) && Other.bRotatingPickup)\n\t\t\t\t\t\
      || !Other.default.bRotatingPickup || Other.default.RotationRate == rot(0,0,0);\n\
      \t\tbForceItemRotation = Other.RotationRate != rot(0,0,0) && Other.bRotatingPickup\n\
      \t\t\t\t&& (!Other.default.bRotatingPickup || Other.default.RotationRate ==\
      \ rot(0,0,0));\n\t\t\n\t\tif ( A.Physics == PHYS_Falling && !bAllowItemFall\
      \ )\n\t\t\tA.SetPhysics(PHYS_None);\n\t\telse if ( A.Physics != PHYS_Falling\
      \ && bForceItemFall )\n\t\t\tA.SetPhysics(PHYS_Falling);\n\t\tA.bRotatingPickup\
      \ = bAllowItemRotation && (A.bRotatingPickup || bForceItemRotation);\n\t\t\n\
      \t\tA.Event = Other.Event;\n\t\tA.Tag = Other.Tag;\n\t\treturn A;\n\t}\n\treturn\
      \ None;\n}\n</uscript>\n\n==Giving Weapons To Players==\n\nThis function is\
      \ a modified version of the <tt>[[Legacy:DeathMatchPlus|DeathMatchPlus]].GiveWeapon</tt>\
      \ function. It adds the weapon to the player's inventory and optionally brings\
      \ it up as the players selected weapon. The function returns the weapon.\n\n\
      <uscript>\n// Give a weapon to a player and optionally bring it up as current\
      \ weapon.\nfunction Weapon GiveWeapon(Pawn PlayerPawn, string aClassName, optional\
      \ bool bBringUp)\n{\n\tlocal class<Weapon> WeaponClass;\n\tlocal Weapon NewWeapon;\n\
      \n\tWeaponClass = class<Weapon>(DynamicLoadObject(aClassName, class'Class'));\n\
      \n\tif ( PlayerPawn.FindInventoryType(WeaponClass) != None )\n\t\treturn None;\n\
      \tnewWeapon = Spawn(WeaponClass);\n\tif ( newWeapon != None ) {\n\t\tnewWeapon.RespawnTime\
      \ = 0.0;\n\t\tnewWeapon.GiveTo(PlayerPawn);\n\t\tnewWeapon.bHeldItem = true;\n\
      \t\tnewWeapon.GiveAmmo(PlayerPawn);\n\t\tnewWeapon.SetSwitchPriority(PlayerPawn);\n\
      \t\tnewWeapon.WeaponSet(PlayerPawn);\n\t\tnewWeapon.AmbientGlow = 0;\n\t\tif\
      \ ( PlayerPawn.IsA('PlayerPawn') )\n\t\t\tnewWeapon.SetHand(PlayerPawn(PlayerPawn).Handedness);\n\
      \t\telse\n\t\t\tnewWeapon.GotoState('Idle');\n\t\tif ( bBringUp ) {\n\t\t\t\
      PlayerPawn.Weapon.GotoState('DownWeapon');\n\t\t\tPlayerPawn.PendingWeapon =\
      \ None;\n\t\t\tPlayerPawn.Weapon = newWeapon;\n\t\t\tPlayerPawn.Weapon.BringUp();\n\
      \t\t}\n\t}\n\treturn newWeapon;\n}\n</uscript>\n\n==Related Topics==\n* [[Legacy:Open\
      \ Source|Open Source]]\n* [[Legacy:Mutator Topics|Mutator Topics]]\n* [[Legacy:Making\
      \ Mods|Making Mods]]\n\n==Discussion==\n\n'''Kuhal:''' I have a developed a\
      \ way to allow a mutator to \"appear\" to handle Damage to players BEFORE Inventory.ReduceDamage\
      \ is called.  Shall I create a page for this and link to it from OpenSource\
      \ or would it be better to create the page and link form my homepage until one\
      \ of the guru's can comment on the content?  I investigated this while helping\
      \ someone on the forums who wanted it specifically for his SpawnProtection code.\n\
      \n'''Mychaeel:''' Would you describe that method in a few words? &ndash; By\
      \ the way, I believe the sections on this page would be well worth individual\
      \ pages; maybe subpages of this one.\n\n'''Kuhal:''' Synopsis: Create an Inventory\
      \ Item with Charge=0; ArmorAbsorption=0;  AbsorptionPriority=1000; bIsAnArmor=true;.\
      \  Override ArmorAbsorbDamage in new class to update member variables for use\
      \ by the mutator.  Make sure that the mutator deals out the damage accordingly\
      \ because the REAL armor was not damaged in the hit.  Has limited usefulness\
      \ - Why oh why didn't EPIC give Inventory.ReduceDamage the Victim and InstigatedBy\
      \ vars too?  I'm interested in other ideas in this area so by all means hook\
      \ me up.  I have full working source for the SpawnProtection use if needed.\n\
      \n'''Csimbi:''' Could someone add an example of adding another mutator from\
      \ a mutator that is already added? I want to have only one entry in the .int\
      \ file for practical reasons (the one Mutator would add all the others), and\
      \ I cannot figure out how to do it. I tried a couple of things, but none of\
      \ those worked so far. Thank You in advance.\n\n'''Foxpaw:''' Depending on what\
      \ exactly you had in mind, that may be quite easy. Or it may be next to impossible.\
      \ Do you mean, you only want the one entry in the mutator list and when play\
      \ begins all the other mutators are added? Or do you mean you want all of them\
      \ to show up in the mutator list, but only want one listed in the INT file?\n\
      \n'''Wormbo:''' Just Level.Game.BaseMutator.AddMutator(Spawn(theMutatorClass))\
      \ should do the trick, but why don't you just combine the mutators into a single\
      \ class?\n\n'''Csimbi:'''\n\nFoxpaw, the idea is that one mutator adds all the\
      \ others.\n\nWormbo, in which function do You call this? Prebeginplay, PostBeginPlay,\
      \ or ?\n\n'''Wormbo:''' Yes, call it from one of the *BeginPlay functions.\n\
      \n'''Csimbi:''' I do this in the Mutator's PostBeginplay: Level.Game.BaseMutator.AddMutator(Spawn(class'CustomTranslocator'));\n\
      \nThe error message I get is: \"Error, Call to 'AddMutator': type mismatch in\
      \ parameter 1\"\n\nWhat am I doing wrong?\n\n'''Wormbo:''' 'Type mismatch' [[Legacy:Compiler\
      \ Errors|compiler errors]] tell you that the function expects a different variable\
      \ type than you used. This CustomTranslocator class of yours, it's a mutator\
      \ subclass, isn't it?\n\n'''Csimbi:''' My mistake. It's a TournamentWeapon.\
      \ Changed class name to the mutator's class, and it works like a charm. Thank\
      \ You.\n\n'''Vindexus:''' I tried to make an arena mut using the Replace function\
      \ above. However, when i try to\n\ncompile it with the ucc make command, it\
      \ says I'm missing a \";\" in \"Class\" on line 4 where the function is started.\
      \ Anybody know what that means?\n\n'''EntropicLqd:''' Check your class definition.\
      \  It should be similar to the very first line of the HUD Mutator code snippet\
      \ (first code snippet) on this page.  If you class definition is correct then\
      \ check that you don't mention the word ''class'' anywhere in a comment block\
      \ before the class declaration line.  e.g. the following code will give you\
      \ an error at line 1:\n\n<uscript>\n// This class is a mutator that does some\
      \ stuff\nclass MyMutator extends Mutator;\n// .. rest of class definition ...\n\
      </uscript>\n\n'''Vindexus:''' For what it's worth, I'm using UT2004. Here's\
      \ the line of code that has the error on it\n\n<uscript>\nfinal function Inventory\
      \ ReplaceWithItem(Inventory Other, coerce string MyWeaponPickup)\n</uscript>\n\
      \n'''EntropicLqd:''' The line number the error is being reported on is bogus.\
      \  Something that's pretty normal for compilers.  Check your code for missing\
      \ semi-colons and the like - especially after the class definition.  It might\
      \ be worth posting the whole code block rather than just a single line.\n\n\
      '''Wormbo:''' Vindexus, please read the top of this page again:\n\n{{innerbox|Some\
      \ useful [[Legacy:Mutator (UT)|Mutator (UT)]] functions. The code on this page\
      \ probably doesn't work at all in UT2003.\n\n}}\n\nThese functions are not intended\
      \ to be used in UT2003/4 because many aspects of Mutators and also the Pickup/Inventory\
      \ system have changed.\n\n'''AJRAD:''' I'm trying to use the weapon replacement\
      \ mutator thingy, but you don't specify which bits to change!!! How the hell\
      \ is a newbies such as me supposed to understand? Please tell me what needs\
      \ to be changed.\n\n[[Category:Legacy Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 8710
name: "Legacy:Useful Mutator Functions"
revision:
  revid: 8710
  parentid: 8711
  user: "SuperApe"
  timestamp: 1136666696.000000000
  comment: "*"
timestamp: 1668763180.708699000
