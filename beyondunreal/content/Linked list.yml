---
parse:
  title: "Linked list"
  text:
    text: "<p>A <b>linked list</b> is a data structure consisting of a sequence of\
      \ values, where each element in the list not only holds the data, but also a\
      \ reference to the next element in the list.</p>\n<center><a href=\"/File:Singly-linked-list.png\"\
      \ class=\"image\"><img alt=\"Singly-linked-list.png\" src=\"/w/images/Singly-linked-list.png\"\
      \ width=\"408\" height=\"41\" /></a><br />\n<small>A linked list containing\
      \ integer values.</small></center>\n<p>See <a href=\"http://en.wikipedia.org/wiki/linked_list\"\
      \ class=\"extiw\" title=\"wp:linked list\">linked list</a> for a more general\
      \ introduction to linked lists.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Linked_list_examples_in_UnrealScript\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Linked list examples in UnrealScript</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Inventory_list\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Inventory list</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Mutator_lists\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Mutator lists</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Controller.2C_Pawn_and_NavigationPoint_lists\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Controller, Pawn\
      \ and NavigationPoint lists</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-5\"><a href=\"#Iterating_over_linked_lists\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Iterating over linked lists</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Using_built-in_iterator_functions\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Using built-in\
      \ iterator functions</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"\
      ><a href=\"#Building_linked_lists\"><span class=\"tocnumber\">3</span> <span\
      \ class=\"toctext\">Building linked lists</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-8\"><a href=\"#Removing_list_items\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Removing list items</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Linked_list_examples_in_UnrealScript\"\
      >Linked list examples in UnrealScript</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Linked_list?section=1\"\
      \ title=\"Edit section: Linked list examples in UnrealScript\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The linked lists\
      \ used in <a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a>\
      \ are usually <b>simply-linked linear lists</b>, as opposed to circular and/or\
      \ doubly- or multiply-linked lists. Also the lists or list nodes in UnrealScript\
      \ linked lists usually aren't explicitly encapsulated in special objects, but\
      \ instead are created implicitly through properties in the objects contained\
      \ in the list. The first such object is usually referenced directly in another\
      \ object.</p>\n<p>Linked lists in UnrealScript are sometimes a bit difficult\
      \ to explain, as the property pointing to the first or next item in the list\
      \ often has a name that is similar or identical to the type of objects in the\
      \ list. For example, the inventory item list is created through a property of\
      \ type Inventory with the name Inventory. Don't get the type and name of variables\
      \ confused here.</p>\n<h3><span class=\"mw-headline\" id=\"Inventory_list\"\
      >Inventory list</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Linked_list?section=2\" title=\"Edit section: Inventory\
      \ list\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Probably one of the most important linked lists in UnrealScript is the Inventory<sup>(<span><a\
      \ href=\"/UE1:Inventory_(RTNP)\" title=\"UE1:Inventory (RTNP)\">RTNP</a></span>,\
      \ <span><a href=\"/UE1:Inventory_(U1)\" title=\"UE1:Inventory (U1)\">U1</a></span>,\
      \ <span><a href=\"/UE1:Inventory_(UT)\" title=\"UE1:Inventory (UT)\">UT</a></span>,\
      \ <span><a href=\"/UE2:Inventory_(U2)\" title=\"UE2:Inventory (U2)\">U2</a></span>,\
      \ <span><a href=\"/UE2:Inventory_(U2XMP)\" title=\"UE2:Inventory (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:Inventory_(UE2Runtime)\" title=\"UE2:Inventory (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:Inventory_(UT2003)\" title=\"UE2:Inventory\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:Inventory_(UT2004)\" title=\"\
      UE2:Inventory (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:Inventory_(UDK)\"\
      \ title=\"UE3:Inventory (UDK)\">UDK</a></span>, <span><a href=\"/UE3:Inventory_(UT3)\"\
      \ title=\"UE3:Inventory (UT3)\">UT3</a></span>)</sup> item list. In <a href=\"\
      /edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"Unreal Engine 1 (page\
      \ does not exist)\">Unreal Engine 1</a> and <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">2</a> games\
      \ it is built via the Actor.Inventory property. In theory this means any Actor\
      \ can have an Inventory list, but practically the Inventory property is only\
      \ used by Pawns and Inventory items to create the list.</p>\n<center><a href=\"\
      /File:InventoryListUT.png\" class=\"image\"><img alt=\"InventoryListUT.png\"\
      \ src=\"/w/images/InventoryListUT.png\" width=\"472\" height=\"100\" /></a><br\
      \ />\n<small>An inventory list in <a href=\"/UT\" title=\"UT\" class=\"mw-redirect\"\
      >UT</a>, starting at a <a href=\"/UE1:Pawn_(UT)\" title=\"UE1:Pawn (UT)\">Pawn</a>\
      \ and containing a <a href=\"/UE1:UT_FlakCannon_(UT)\" title=\"UE1:UT FlakCannon\
      \ (UT)\">Flak Cannon</a>, its <a href=\"/UE1:FlakAmmo_(UT)\" title=\"UE1:FlakAmmo\
      \ (UT)\">ammo</a> and a <a href=\"/UE1:Armor2_(UT)\" title=\"UE1:Armor2 (UT)\"\
      >body armor</a>.</small></center>\n<p><a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a> changed the layout of the inventory list\
      \ a bit. Pawns now have a special InventoryManager<sup>(<span><a href=\"/UE3:InventoryManager_(UDK)\"\
      \ title=\"UE3:InventoryManager (UDK)\">UDK</a></span>, <span><a href=\"/UE3:InventoryManager_(UT3)\"\
      \ title=\"UE3:InventoryManager (UT3)\">UT3</a></span>)</sup> object, which holds\
      \ a reference to the first item in the inventory list via its InventoryChain\
      \ property. The Inventory property is declared in the Inventory class now, so\
      \ \"universal\" inventory lists are no longer possible.</p>\n<p>In either case\
      \ the inventory list is a replicated linked list, which means its start and\
      \ link properties are replicated.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Mutator_lists\">Mutator lists</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Linked_list?section=3\" title=\"\
      Edit section: Mutator lists\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Another very important linked list is the Mutator<sup>(<span><a\
      \ href=\"/UE1:Mutator_(RTNP)\" title=\"UE1:Mutator (RTNP)\">RTNP</a></span>,\
      \ <span><a href=\"/UE1:Mutator_(U1)\" title=\"UE1:Mutator (U1)\">U1</a></span>,\
      \ <span><a href=\"/UE1:Mutator_(UT)\" title=\"UE1:Mutator (UT)\">UT</a></span>,\
      \ <span><a href=\"/UE2:Mutator_(U2)\" title=\"UE2:Mutator (U2)\">U2</a></span>,\
      \ <span><a href=\"/UE2:Mutator_(U2XMP)\" title=\"UE2:Mutator (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:Mutator_(UE2Runtime)\" title=\"UE2:Mutator (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:Mutator_(UT2003)\" title=\"UE2:Mutator\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:Mutator_(UT2004)\" title=\"\
      UE2:Mutator (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:Mutator_(UDK)\"\
      \ title=\"UE3:Mutator (UDK)\">UDK</a></span>, <span><a href=\"/UE3:Mutator_(UT3)\"\
      \ title=\"UE3:Mutator (UT3)\">UT3</a></span>)</sup> chain and the related GameRules<sup>(<span><a\
      \ href=\"/UE2:GameRules_(U2)\" title=\"UE2:GameRules (U2)\">U2</a></span>, <span><a\
      \ href=\"/UE2:GameRules_(U2XMP)\" title=\"UE2:GameRules (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:GameRules_(UE2Runtime)\" title=\"UE2:GameRules (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:GameRules_(UT2003)\" title=\"UE2:GameRules\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:GameRules_(UT2004)\" title=\"\
      UE2:GameRules (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:GameRules_(UT3)\"\
      \ title=\"UE3:GameRules (UT3)\">UT3</a></span>)</sup> chain. In <a href=\"/UT\"\
      \ title=\"UT\" class=\"mw-redirect\">UT</a> there are even four different Mutator\
      \ chains, the \"main\" mutators list, damage mutators, message mutators and\
      \ HUD mutators. Except for the HUD mutators list, all mutator and gamerules\
      \ lists are serverside-only.</p>\n<p>The main mutators list starts with the\
      \ BaseMutator property of the <a href=\"/GameInfo\" title=\"GameInfo\">GameInfo</a><sup>(<span><a\
      \ href=\"/UE1:GameInfo_(RTNP)\" title=\"UE1:GameInfo (RTNP)\">RTNP</a></span>,\
      \ <span><a href=\"/UE1:GameInfo_(U1)\" title=\"UE1:GameInfo (U1)\">U1</a></span>,\
      \ <span><a href=\"/UE1:GameInfo_(UT)\" title=\"UE1:GameInfo (UT)\">UT</a></span>,\
      \ <span><a href=\"/UE2:GameInfo_(U2)\" title=\"UE2:GameInfo (U2)\">U2</a></span>,\
      \ <span><a href=\"/UE2:GameInfo_(U2XMP)\" title=\"UE2:GameInfo (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:GameInfo_(UE2Runtime)\" title=\"UE2:GameInfo (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:GameInfo_(UT2003)\" title=\"UE2:GameInfo\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:GameInfo_(UT2004)\" title=\"\
      UE2:GameInfo (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:GameInfo_(UDK)\"\
      \ title=\"UE3:GameInfo (UDK)\">UDK</a></span>, <span><a href=\"/UE3:GameInfo_(UT3)\"\
      \ title=\"UE3:GameInfo (UT3)\">UT3</a></span>)</sup> and continues via the Mutator.NextMutator\
      \ property. In earlier engine generations you can assume the mutator list to\
      \ contain at least one entry during the game, but starting with <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> the mutator list can also be\
      \ completely empty.</p>\n<p>Similarly, UT's damage and message mutator lists\
      \ start with GameInfo.DamageMutator and GameInfo.MessageMutator respectively\
      \ and continue with the Mutator.NextDamageMutator and Mutator.NextMessageMutator\
      \ properties. Later engine generations combined these into the separate GameRules\
      \ class. The GameRules list starts at GameInfo.GameRulesModifiers and continues\
      \ via the GameRules.NextGameRules property.</p>\n<p>HUD mutators are a bit tricky.\
      \ Technically they are a clientside linked list starting at <a href=\"/UE1:HUD_(UT)#HUDMutator\"\
      \ title=\"UE1:HUD (UT)\">HUD.HUDMutator</a> and continuing via the <a href=\"\
      /UE1:Mutator_(UT)#NextHUDMutator\" title=\"UE1:Mutator (UT)\">Mutator.NextHUDMutator</a>\
      \ property. Two problems make them harder to use, though. One is the lack of\
      \ a standard registering method and standard PostRender() implementation. The\
      \ other, more critical is an implementation inconsistency in the Relic mutators.\
      \ These use the incompatible chaining property <a href=\"/UE1:HUDMutator_(UT)#NextRHUDMutator\"\
      \ title=\"UE1:HUDMutator (UT)\">HUDMutator.NextRHUDMutator</a>. If that wasn't\
      \ bad enough, the HUDMutator's registering method also destroys any previously\
      \ existing chain built on the Mutator.NextHUDMutator property! (See <a href=\"\
      /Legacy:Relics_Patch\" title=\"Legacy:Relics Patch\">Legacy:Relics Patch</a>\
      \ for an attempt to fix this incompatibility at least for the standard Relic\
      \ mutators.)</p>\n<h3><span class=\"mw-headline\" id=\"Controller.2C_Pawn_and_NavigationPoint_lists\"\
      >Controller, Pawn and NavigationPoint lists</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Linked_list?section=4\"\
      \ title=\"Edit section: Controller, Pawn and NavigationPoint lists\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a> games, all Pawns are automatically added to a linked list starting at\
      \ the LevelInfo.PawnList property, which is accessible from all actors via <code>Level.PawnList</code>\
      \ and continues via the Pawn.NextPawn property. Similarly <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> games maintain a Controller list (but no Pawn list) via LevelInfo.ControllerList\
      \ and Controller.NextController. <a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a> games maintain both a Controller and a Pawn\
      \ list via WorldInfo.ControllerList and WorldInfo.PawnList respectively.</p>\n\
      <p>All Unreal Engine games maintain a list of NavigationPoints via the LevelInfo/WorldInfo.NavigationPointList\
      \ and NavigationPoint.NextNavigationPoint properties.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Iterating_over_linked_lists\">Iterating over linked lists</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Linked_list?section=5\" title=\"Edit section: Iterating over\
      \ linked lists\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>To iterate over all items in a typical UnrealScript linked list, use the\
      \ following <a href=\"/For_loop\" title=\"For loop\">for loop</a>:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> ListItemType\
      \ Item;\n \n<span class=\"kw2\">for</span> <span class=\"br0\">(</span>Item\
      \ <span class=\"sy0\">=</span> FirstListItem; Item <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span>; Item <span class=\"sy0\">=</span> Item.<span\
      \ class=\"me0\">NextItem</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >{</span>\n  <span class=\"co1\">// process the current list item</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Here <i>ListItemType</i> is\
      \ the type of items making up the list, <i>FirstListItem</i> stands for an expression\
      \ that returns the first item in the linked list and <i>Item.NextItem</i> stands\
      \ for an expression that returns the item in the list following the current\
      \ item.</p>\n<p>Sometimes you may want to delete items from a linked list while\
      \ iterating over the list. In this case the above scheme will not work correctly.\
      \ A more robust way to iterate in such cases looks as follows:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> ListItemType Item, Next;\n\
      \ \n<span class=\"kw2\">for</span> <span class=\"br0\">(</span>Item <span class=\"\
      sy0\">=</span> FirstListItem; Item <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span>; Item <span class=\"sy0\">=</span> Next<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n  Next <span class=\"sy0\">=</span>\
      \ Item.<span class=\"me0\">NextItem</span>;\n  <span class=\"co1\">// process\
      \ the current list item</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Here the next item is determined before processing (and potentially deleting)\
      \ the current item.</p>\n<h3><span class=\"mw-headline\" id=\"Using_built-in_iterator_functions\"\
      >Using built-in iterator functions</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Linked_list?section=6\"\
      \ title=\"Edit section: Using built-in iterator functions\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> provides <a href=\"/Iterator_functions\"\
      \ title=\"Iterator functions\" class=\"mw-redirect\">iterator functions</a>\
      \ for many built-in linked list, for example <a href=\"/UE3:InventoryManager_(UT3)#InventoryActors\"\
      \ title=\"UE3:InventoryManager (UT3)\">InventoryManager.InventoryActors()</a>\
      \ and <a href=\"/UE3:WorldInfo_(UT3)#AllPawns\" title=\"UE3:WorldInfo (UT3)\"\
      >WorldInfo.AllPawns()</a>/<a href=\"/UE3:WorldInfo_(UT3)#AllControllers\" title=\"\
      UE3:WorldInfo (UT3)\">AllControllers()</a>. So, in order to iterate over all\
      \ weapons in a Pawn's inventory, you would use the following <a href=\"/Foreach_loop\"\
      \ title=\"Foreach loop\" class=\"mw-redirect\">foreach loop</a>:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw9\">Weapon</span>\
      \ W;\n \n<span class=\"kw2\">foreach</span> thePawn.<span class=\"me0\">InvManager</span>.<span\
      \ class=\"me0\">InventoryActors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'Weapon'</span>, W<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n  <span class=\"co1\">// process this\
      \ weapon</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Earlier\
      \ Unreal Engine generations require you to modify the original <a href=\"/For_loop\"\
      \ title=\"For loop\">for loop</a>:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> <span class=\"kw9\">Inventory</span> Inv;\n\
      <span class=\"kw1\">local</span> <span class=\"kw9\">Weapon</span> W;\n \n<span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>Inv <span class=\"sy0\"\
      >=</span> thePawn.<span class=\"kw9\">Inventory</span>; Inv <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span>; Inv <span class=\"sy0\">=</span>\
      \ Inv.<span class=\"kw9\">Inventory</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n  W <span class=\"sy0\">=</span> <span class=\"kw9\"\
      >Weapon</span><span class=\"br0\">(</span>Inv<span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>W <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    <span class=\"co1\">// process this weapon</span>\n\
      \  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>In Unreal Engine 3 the iteration steps and the checked <a href=\"\
      /Typecasting\" title=\"Typecasting\">typecasting</a> can be performed in fast\
      \ <a href=\"/edit/Native_code?redlink=1\" class=\"new\" title=\"Native code\
      \ (page does not exist)\">native code</a> by using the iterator functions mentioned\
      \ above. In fact, the Controller and NavigationPoint lists can only be accessed\
      \ via the iterator functions because they are built from private variables.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Building_linked_lists\">Building linked\
      \ lists</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Linked_list?section=7\" title=\"Edit section: Building\
      \ linked lists\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>You already know how to iterate over existing items in a linked list, but\
      \ how do you add new items to it? Well, basically there are three different\
      \ positions in a list where an item can be added:</p>\n<ol>\n<li>as new first\
      \ item,</li>\n<li>at the end of the list or</li>\n<li>somewhere in the middle\
      \ of the list, potentially after a specific other item.</li>\n</ol>\n<p>If the\
      \ list is empty, the second option collapses into the first option and the third\
      \ option no longer applies.</p>\n<p>The first option is the easiest:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">NewItem.<span class=\"me0\">NextItem</span>\
      \ <span class=\"sy0\">=</span> FirstListItem;\nFirstListItem <span class=\"\
      sy0\">=</span> NewItem;</pre></div>\n</div>\n<p>Basically the previously first\
      \ list item becomes the successor of the new item and the new item becomes the\
      \ new first item of the list. This is how almost all linked lists in UnrealScript\
      \ are used, although it's not very <a href=\"/Replication\" title=\"Replication\"\
      \ class=\"mw-redirect\">replication</a>-friendly as clients might temporarily\
      \ see only the new item in the list if the \"link properties\" are replicated\
      \ instead of being built clientsidely.</p>\n<p>Adding new items to the end of\
      \ the list is a bit more complicated unless you remember the last element in\
      \ a separate variable, but it is much more robust in the case of replicated\
      \ linked lists:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> ListItemType Item;\n \n<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>FirstListItem <span class=\"sy0\">==</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  FirstListItem <span class=\"sy0\">=</span> NewItem;\n<span class=\"br0\"\
      >}</span>\n<span class=\"kw2\">else</span> <span class=\"br0\">{</span>\n  <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>Item <span class=\"sy0\"\
      >=</span> FirstListItem; Item <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span>; Item <span class=\"sy0\">=</span> Item.<span class=\"me0\">NextItem</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>Item.<span class=\"me0\">NextItem</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"co1\">// found\
      \ last item</span>\n      Item.<span class=\"me0\">NextItem</span> <span class=\"\
      sy0\">=</span> NewItem;\n      <span class=\"kw2\">break</span>;\n    <span\
      \ class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Note that you need to catch the special case\
      \ where <code>FirstListItem == None</code> (i.e. the list is empty) because\
      \ the for loop can't cover this case.</p>\n<p>The third option, inserting a\
      \ new item after a given item is as simple as the first option:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">NewItem.<span class=\"me0\">NextItem</span> <span class=\"\
      sy0\">=</span> GivenItem.<span class=\"me0\">NextItem</span>;\nGivenItem.<span\
      \ class=\"me0\">NextItem</span> <span class=\"sy0\">=</span> NewItem;</pre></div>\n\
      </div>\n<p>One very important thing to keep in mind when using these schemes\
      \ is that every item can only be added to a list if it is not already in that\
      \ or in any other list! Checking other lists is virtually impossible, you can\
      \ only make sure an item is only added to a list if it was just created or removed\
      \ from a list.</p>\n<p>Another considerable issue with regard to building a\
      \ linked list, by appending new elements on the end of the list, is the 250\
      \ calls restriction. That is, when adding new elements by passing the new element\
      \ through the whole list, by calling an \"add\" function on the first element,\
      \ which passes the new element to the next etc.., until the last element assigns\
      \ the new element as its next element, the game will throw a \"Infinite Script\
      \ Recursion (250 calls) detected\" General Protection Fault on your screen.\
      \ This will happen from the moment it wants to add the 250th element, thus,\
      \ resulting in a sum of 250 recursive calls of the \"Add\" function.</p>\n<p>In\
      \ short, to benefit the replication surplus of adding elements to the end of\
      \ a linked list,either use an iterating function in the base object, or keep\
      \ a pointing variable to the last element of the list and use that one instead\
      \ to add the new element directly to the end. Make sure the function responsible\
      \ for removing elements from the list, will update this variable if it's pointing\
      \ to the element being removed, before removing the element.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Removing_list_items\">Removing list items</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Linked_list?section=8\" title=\"Edit section: Removing list items\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ previous section outlined how to build a linked list, but sometimes you need\
      \ to remove items from he list without breaking it. Take the inventory list\
      \ example from the top of the page and imagine the player throws away his Flak\
      \ Cannon. The Flak Cannon must be properly removed from the inventory chain,\
      \ otherwise Bad Things might happen. Similarly, if a player leaves the game,\
      \ the player's Controller and/or Pawn must be removed from their corresponding\
      \ lists.</p>\n<p>To remove an item from a simply-linked linear list, one must\
      \ consider two cases:</p>\n<ol>\n<li>The item is the first in the list or</li>\n\
      <li>the item is at some later point in the list.</li>\n</ol>\n<p>The following\
      \ removal scheme accounts for both cases:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">local</span> ListItemType Item;\n \n<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ItemToRemove <span class=\"sy0\"\
      >==</span> FirstListItem<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  <span class=\"co1\">// item is first in list</span>\n  FirstListItem <span\
      \ class=\"sy0\">=</span> ItemToRemove.<span class=\"me0\">NextItem</span>;\n\
      \  ItemToRemove.<span class=\"me0\">NextItem</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>; <span class=\"co1\">// important: unlink\
      \ the remaining list from the item!</span>\n<span class=\"br0\">}</span>\n<span\
      \ class=\"kw2\">else</span> <span class=\"br0\">{</span>\n  <span class=\"co1\"\
      >// item is somewhere else (or not at all) in the list</span>\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>Item <span class=\"sy0\">=</span>\
      \ FirstListItem; Item <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> Item.<span class=\"me0\">NextItem</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>; Item <span\
      \ class=\"sy0\">=</span> Item.<span class=\"me0\">NextItem</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Item.<span class=\"me0\">NextItem</span> <span\
      \ class=\"sy0\">==</span> ItemToRemove<span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n      <span class=\"co1\">// found the item, unlink it from\
      \ the list</span>\n      Item.<span class=\"me0\">NextItem</span> <span class=\"\
      sy0\">=</span> ItemToRemove.<span class=\"me0\">NextItem</span>;\n      ItemToRemove.<span\
      \ class=\"me0\">NextItem</span> <span class=\"sy0\">=</span> <span class=\"\
      kw5\">None</span>; <span class=\"co1\">// important: unlink the remaining list\
      \ from the item!</span>\n      <span class=\"kw2\">break</span>; <span class=\"\
      co1\">// item can be in the list only once</span>\n    <span class=\"br0\">}</span>\n\
      \  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.398 seconds\nReal time\
      \ usage: 1.082 seconds\nPreprocessor visited node count: 267/1000000\nPreprocessor\
      \ generated node count: 526/1000000\nPost‐expand include size: 3268/2097152\
      \ bytes\nTemplate argument size: 196/2097152 bytes\nHighest expansion depth:\
      \ 4/40\nExpensive parser function count: 5/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%  398.128      1 - -total\n 99.61%\
      \  396.595      5 - Template:Classgames\n  3.86%   15.372      5 - Template:Extension_DPL\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:24166-0!*!*!*!*!*!*\
      \ and timestamp 20221118093025 and revision id 34589\n -->\n"
  categories:
  - sortkey: ""
    name: "Programming_articles"
  links:
  - ns: 102
    exists: true
    name: "UE1:Mutator (RTNP)"
  - ns: 104
    exists: true
    name: "UE2:Mutator (UT2003)"
  - ns: 104
    exists: true
    name: "UE2:GameInfo (U2)"
  - ns: 0
    exists: false
    name: "InventoryManager"
  - ns: 104
    exists: true
    name: "UE2:GameInfo (U2XMP)"
  - ns: 106
    exists: true
    name: "UE3:GameInfo (UDK)"
  - ns: 106
    exists: true
    name: "UE3:InventoryManager (UDK)"
  - ns: 0
    exists: false
    name: "Mutator"
  - ns: 0
    exists: false
    name: "Native code"
  - ns: 0
    exists: true
    name: "Iterator functions"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 102
    exists: true
    name: "UE1:Inventory (UT)"
  - ns: 0
    exists: true
    name: "GameInfo"
  - ns: 106
    exists: true
    name: "UE3:Mutator (UT3)"
  - ns: 102
    exists: true
    name: "UE1:Inventory (RTNP)"
  - ns: 102
    exists: true
    name: "UE1:GameInfo (RTNP)"
  - ns: 106
    exists: true
    name: "UE3:Inventory (UT3)"
  - ns: 104
    exists: true
    name: "UE2:GameInfo (UT2003)"
  - ns: 102
    exists: true
    name: "UE1:Armor2 (UT)"
  - ns: 106
    exists: true
    name: "UE3:InventoryManager (UT3)"
  - ns: 104
    exists: true
    name: "UE2:Mutator (UT2004)"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 104
    exists: true
    name: "UE2:GameRules (U2XMP)"
  - ns: 102
    exists: true
    name: "UE1:Inventory (U1)"
  - ns: 0
    exists: false
    name: "GameRules"
  - ns: 100
    exists: true
    name: "Legacy:Relics Patch"
  - ns: 104
    exists: true
    name: "UE2:GameRules (UT2003)"
  - ns: 102
    exists: true
    name: "UE1:HUD (UT)"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 104
    exists: true
    name: "UE2:Inventory (U2)"
  - ns: 104
    exists: true
    name: "UE2:Inventory (U2XMP)"
  - ns: 104
    exists: true
    name: "UE2:GameInfo (UE2Runtime)"
  - ns: 104
    exists: true
    name: "UE2:GameRules (U2)"
  - ns: 104
    exists: true
    name: "UE2:GameRules (UT2004)"
  - ns: 106
    exists: true
    name: "UE3:GameRules (UT3)"
  - ns: 102
    exists: true
    name: "UE1:Pawn (UT)"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 106
    exists: true
    name: "UE3:Inventory (UDK)"
  - ns: 106
    exists: true
    name: "UE3:WorldInfo (UT3)"
  - ns: 104
    exists: true
    name: "UE2:Mutator (UE2Runtime)"
  - ns: 102
    exists: true
    name: "UE1:GameInfo (U1)"
  - ns: 104
    exists: true
    name: "UE2:GameInfo (UT2004)"
  - ns: 0
    exists: false
    name: "Inventory"
  - ns: 104
    exists: true
    name: "UE2:Mutator (U2)"
  - ns: 102
    exists: true
    name: "UE1:UT FlakCannon (UT)"
  - ns: 104
    exists: true
    name: "UE2:Inventory (UT2004)"
  - ns: 102
    exists: true
    name: "UE1:Mutator (U1)"
  - ns: 104
    exists: true
    name: "UE2:Mutator (U2XMP)"
  - ns: 102
    exists: true
    name: "UE1:GameInfo (UT)"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 104
    exists: true
    name: "UE2:Inventory (UE2Runtime)"
  - ns: 0
    exists: true
    name: "Foreach loop"
  - ns: 102
    exists: true
    name: "UE1:FlakAmmo (UT)"
  - ns: 104
    exists: true
    name: "UE2:GameRules (UE2Runtime)"
  - ns: 102
    exists: true
    name: "UE1:HUDMutator (UT)"
  - ns: 0
    exists: true
    name: "UT"
  - ns: 102
    exists: true
    name: "UE1:Mutator (UT)"
  - ns: 0
    exists: true
    name: "Replication"
  - ns: 104
    exists: true
    name: "UE2:Inventory (UT2003)"
  - ns: 106
    exists: true
    name: "UE3:GameInfo (UT3)"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 106
    exists: true
    name: "UE3:Mutator (UDK)"
  templates:
  - ns: 10
    exists: true
    name: "Template:Extension DPL"
  - ns: 10
    exists: true
    name: "Template:Classgames"
  images:
  - "InventoryListUT.png"
  - "Singly-linked-list.png"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Linked list examples in UnrealScript"
    number: "1"
    index: "1"
    fromtitle: "Linked_list"
    byteoffset: 382
    anchor: "Linked_list_examples_in_UnrealScript"
  - toclevel: 2
    level: "3"
    line: "Inventory list"
    number: "1.1"
    index: "2"
    fromtitle: "Linked_list"
    byteoffset: 1240
    anchor: "Inventory_list"
  - toclevel: 2
    level: "3"
    line: "Mutator lists"
    number: "1.2"
    index: "3"
    fromtitle: "Linked_list"
    byteoffset: 2360
    anchor: "Mutator_lists"
  - toclevel: 2
    level: "3"
    line: "Controller, Pawn and NavigationPoint lists"
    number: "1.3"
    index: "4"
    fromtitle: "Linked_list"
    byteoffset: 4289
    anchor: "Controller.2C_Pawn_and_NavigationPoint_lists"
  - toclevel: 1
    level: "2"
    line: "Iterating over linked lists"
    number: "2"
    index: "5"
    fromtitle: "Linked_list"
    byteoffset: 5017
    anchor: "Iterating_over_linked_lists"
  - toclevel: 2
    level: "3"
    line: "Using built-in iterator functions"
    number: "2.1"
    index: "6"
    fromtitle: "Linked_list"
    byteoffset: 6030
    anchor: "Using_built-in_iterator_functions"
  - toclevel: 1
    level: "2"
    line: "Building linked lists"
    number: "3"
    index: "7"
    fromtitle: "Linked_list"
    byteoffset: 7186
    anchor: "Building_linked_lists"
  - toclevel: 1
    level: "2"
    line: "Removing list items"
    number: "4"
    index: "8"
    fromtitle: "Linked_list"
    byteoffset: 10385
    anchor: "Removing_list_items"
  displaytitle: "Linked list"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/linked_list"
    name: "wp:linked list"
  wikitext:
    text: "A '''linked list''' is a data structure consisting of a sequence of values,\
      \ where each element in the list not only holds the data, but also a reference\
      \ to the next element in the list.\n<center>[[Image:Singly-linked-list.png]]<br/>\n\
      <small>A linked list containing integer values.</small></center>\nSee [[wp:linked\
      \ list|linked list]] for a more general introduction to linked lists.\n\n==Linked\
      \ list examples in UnrealScript==\nThe linked lists used in [[UnrealScript]]\
      \ are usually '''simply-linked linear lists''', as opposed to circular and/or\
      \ doubly- or multiply-linked lists. Also the lists or list nodes in UnrealScript\
      \ linked lists usually aren't explicitly encapsulated in special objects, but\
      \ instead are created implicitly through properties in the objects contained\
      \ in the list. The first such object is usually referenced directly in another\
      \ object.\n\nLinked lists in UnrealScript are sometimes a bit difficult to explain,\
      \ as the property pointing to the first or next item in the list often has a\
      \ name that is similar or identical to the type of objects in the list. For\
      \ example, the inventory item list is created through a property of type Inventory\
      \ with the name Inventory. Don't get the type and name of variables confused\
      \ here.\n\n===Inventory list===\nProbably one of the most important linked lists\
      \ in UnrealScript is the {{classgames|Inventory}} item list. In [[Unreal Engine\
      \ 1]] and [[Unreal Engine 2|2]] games it is built via the Actor.Inventory property.\
      \ In theory this means any Actor can have an Inventory list, but practically\
      \ the Inventory property is only used by Pawns and Inventory items to create\
      \ the list.\n<center>[[Image:InventoryListUT.png]]<br/>\n<small>An inventory\
      \ list in [[UT]], starting at a [[UE1:Pawn (UT)|Pawn]] and containing a [[UE1:UT_FlakCannon_(UT)|Flak\
      \ Cannon]], its [[UE1:FlakAmmo_(UT)|ammo]] and a [[UE1:Armor2_(UT)|body armor]].</small></center>\n\
      \n[[Unreal Engine 3]] changed the layout of the inventory list a bit. Pawns\
      \ now have a special {{classgames|InventoryManager}} object, which holds a reference\
      \ to the first item in the inventory list via its InventoryChain property. The\
      \ Inventory property is declared in the Inventory class now, so \"universal\"\
      \ inventory lists are no longer possible.\n\nIn either case the inventory list\
      \ is a replicated linked list, which means its start and link properties are\
      \ replicated.\n\n===Mutator lists===\nAnother very important linked list is\
      \ the {{classgames|Mutator}} chain and the related {{classgames|GameRules}}\
      \ chain. In [[UT]] there are even four different Mutator chains, the \"main\"\
      \ mutators list, damage mutators, message mutators and HUD mutators. Except\
      \ for the HUD mutators list, all mutator and gamerules lists are serverside-only.\n\
      \nThe main mutators list starts with the BaseMutator property of the {{classgames|GameInfo}}\
      \ and continues via the Mutator.NextMutator property. In earlier engine generations\
      \ you can assume the mutator list to contain at least one entry during the game,\
      \ but starting with [[Unreal Engine 3]] the mutator list can also be completely\
      \ empty.\n\nSimilarly, UT's damage and message mutator lists start with GameInfo.DamageMutator\
      \ and GameInfo.MessageMutator respectively and continue with the Mutator.NextDamageMutator\
      \ and Mutator.NextMessageMutator properties. Later engine generations combined\
      \ these into the separate GameRules class. The GameRules list starts at GameInfo.GameRulesModifiers\
      \ and continues via the GameRules.NextGameRules property.\n\nHUD mutators are\
      \ a bit tricky. Technically they are a clientside linked list starting at [[UE1:HUD\
      \ (UT)#HUDMutator|HUD.HUDMutator]] and continuing via the [[UE1:Mutator (UT)#NextHUDMutator|Mutator.NextHUDMutator]]\
      \ property. Two problems make them harder to use, though. One is the lack of\
      \ a standard registering method and standard PostRender() implementation. The\
      \ other, more critical is an implementation inconsistency in the Relic mutators.\
      \ These use the incompatible chaining property [[UE1:HUDMutator (UT)#NextRHUDMutator|HUDMutator.NextRHUDMutator]].\
      \ If that wasn't bad enough, the HUDMutator's registering method also destroys\
      \ any previously existing chain built on the Mutator.NextHUDMutator property!\
      \ (See [[Legacy:Relics Patch]] for an attempt to fix this incompatibility at\
      \ least for the standard Relic mutators.)\n\n===Controller, Pawn and NavigationPoint\
      \ lists===\nIn [[Unreal Engine 1]] games, all Pawns are automatically added\
      \ to a linked list starting at the LevelInfo.PawnList property, which is accessible\
      \ from all actors via <code>Level.PawnList</code> and continues via the Pawn.NextPawn\
      \ property. Similarly [[Unreal Engine 2]] games maintain a Controller list (but\
      \ no Pawn list) via LevelInfo.ControllerList and Controller.NextController.\
      \ [[Unreal Engine 3]] games maintain both a Controller and a Pawn list via WorldInfo.ControllerList\
      \ and WorldInfo.PawnList respectively.\n\nAll Unreal Engine games maintain a\
      \ list of NavigationPoints via the LevelInfo/WorldInfo.NavigationPointList and\
      \ NavigationPoint.NextNavigationPoint properties.\n\n==Iterating over linked\
      \ lists==\nTo iterate over all items in a typical UnrealScript linked list,\
      \ use the following [[for loop]]:\n<uscript>\nlocal ListItemType Item;\n\nfor\
      \ (Item = FirstListItem; Item != None; Item = Item.NextItem) {\n  // process\
      \ the current list item\n}\n</uscript>\nHere ''ListItemType'' is the type of\
      \ items making up the list, ''FirstListItem'' stands for an expression that\
      \ returns the first item in the linked list and ''Item.NextItem'' stands for\
      \ an expression that returns the item in the list following the current item.\n\
      \nSometimes you may want to delete items from a linked list while iterating\
      \ over the list. In this case the above scheme will not work correctly. A more\
      \ robust way to iterate in such cases looks as follows:\n<uscript>\nlocal ListItemType\
      \ Item, Next;\n\nfor (Item = FirstListItem; Item != None; Item = Next) {\n \
      \ Next = Item.NextItem;\n  // process the current list item\n}\n</uscript>\n\
      Here the next item is determined before processing (and potentially deleting)\
      \ the current item.\n\n===Using built-in iterator functions===\n[[Unreal Engine\
      \ 3]] provides [[iterator functions]] for many built-in linked list, for example\
      \ [[UE3:InventoryManager_(UT3)#InventoryActors|InventoryManager.InventoryActors()]]\
      \ and [[UE3:WorldInfo_(UT3)#AllPawns|WorldInfo.AllPawns()]]/[[UE3:WorldInfo_(UT3)#AllControllers|AllControllers()]].\
      \ So, in order to iterate over all weapons in a Pawn's inventory, you would\
      \ use the following [[foreach loop]]:\n<uscript>\nlocal Weapon W;\n\nforeach\
      \ thePawn.InvManager.InventoryActors(class'Weapon', W) {\n  // process this\
      \ weapon\n}\n</uscript>\nEarlier Unreal Engine generations require you to modify\
      \ the original [[for loop]]:\n<uscript>\nlocal Inventory Inv;\nlocal Weapon\
      \ W;\n\nfor (Inv = thePawn.Inventory; Inv != None; Inv = Inv.Inventory) {\n\
      \  W = Weapon(Inv);\n  if (W != None) {\n    // process this weapon\n  }\n}\n\
      </uscript>\nIn Unreal Engine 3 the iteration steps and the checked [[typecasting]]\
      \ can be performed in fast [[native code]] by using the iterator functions mentioned\
      \ above. In fact, the Controller and NavigationPoint lists can only be accessed\
      \ via the iterator functions because they are built from private variables.\n\
      \n==Building linked lists==\nYou already know how to iterate over existing items\
      \ in a linked list, but how do you add new items to it? Well, basically there\
      \ are three different positions in a list where an item can be added:\n#as new\
      \ first item,\n#at the end of the list or\n#somewhere in the middle of the list,\
      \ potentially after a specific other item.\nIf the list is empty, the second\
      \ option collapses into the first option and the third option no longer applies.\n\
      \nThe first option is the easiest:\n<uscript>\nNewItem.NextItem = FirstListItem;\n\
      FirstListItem = NewItem;\n</uscript>\nBasically the previously first list item\
      \ becomes the successor of the new item and the new item becomes the new first\
      \ item of the list. This is how almost all linked lists in UnrealScript are\
      \ used, although it's not very [[replication]]-friendly as clients might temporarily\
      \ see only the new item in the list if the \"link properties\" are replicated\
      \ instead of being built clientsidely.\n\nAdding new items to the end of the\
      \ list is a bit more complicated unless you remember the last element in a separate\
      \ variable, but it is much more robust in the case of replicated linked lists:\n\
      <uscript>\nlocal ListItemType Item;\n\nif (FirstListItem == None) {\n  FirstListItem\
      \ = NewItem;\n}\nelse {\n  for (Item = FirstListItem; Item != None; Item = Item.NextItem)\
      \ {\n    if (Item.NextItem == None) {\n      // found last item\n      Item.NextItem\
      \ = NewItem;\n      break;\n    }\n  }\n}\n</uscript>\nNote that you need to\
      \ catch the special case where <code>FirstListItem == None</code> (i.e. the\
      \ list is empty) because the for loop can't cover this case.\n\nThe third option,\
      \ inserting a new item after a given item is as simple as the first option:\n\
      <uscript>\nNewItem.NextItem = GivenItem.NextItem;\nGivenItem.NextItem = NewItem;\n\
      </uscript>\n\nOne very important thing to keep in mind when using these schemes\
      \ is that every item can only be added to a list if it is not already in that\
      \ or in any other list! Checking other lists is virtually impossible, you can\
      \ only make sure an item is only added to a list if it was just created or removed\
      \ from a list.\n\nAnother considerable issue with regard to building a linked\
      \ list, by appending new elements on the end of the list, is the 250 calls restriction.\
      \ That is, when adding new elements by passing the new element through the whole\
      \ list, by calling an \"add\" function on the first element, which passes the\
      \ new element to the next etc.., until the last element assigns the new element\
      \ as its next element, the game will throw a \"Infinite Script Recursion (250\
      \ calls) detected\" General Protection Fault on your screen. This will happen\
      \ from the moment it wants to add the 250th element, thus, resulting in a sum\
      \ of 250 recursive calls of the \"Add\" function.\n\nIn short, to benefit the\
      \ replication surplus of adding elements to the end of a linked list,either\
      \ use an iterating function in the base object, or keep a pointing variable\
      \ to the last element of the list and use that one instead to add the new element\
      \ directly to the end. Make sure the function responsible for removing elements\
      \ from the list, will update this variable if it's pointing to the element being\
      \ removed, before removing the element.\n\n==Removing list items==\nThe previous\
      \ section outlined how to build a linked list, but sometimes you need to remove\
      \ items from he list without breaking it. Take the inventory list example from\
      \ the top of the page and imagine the player throws away his Flak Cannon. The\
      \ Flak Cannon must be properly removed from the inventory chain, otherwise Bad\
      \ Things might happen. Similarly, if a player leaves the game, the player's\
      \ Controller and/or Pawn must be removed from their corresponding lists.\n\n\
      To remove an item from a simply-linked linear list, one must consider two cases:\n\
      #The item is the first in the list or\n#the item is at some later point in the\
      \ list.\nThe following removal scheme accounts for both cases:\n<uscript>\n\
      local ListItemType Item;\n\nif (ItemToRemove == FirstListItem) {\n  // item\
      \ is first in list\n  FirstListItem = ItemToRemove.NextItem;\n  ItemToRemove.NextItem\
      \ = None; // important: unlink the remaining list from the item!\n}\nelse {\n\
      \  // item is somewhere else (or not at all) in the list\n  for (Item = FirstListItem;\
      \ Item != None && Item.NextItem != None; Item = Item.NextItem) {\n    if (Item.NextItem\
      \ == ItemToRemove) {\n      // found the item, unlink it from the list\n   \
      \   Item.NextItem = ItemToRemove.NextItem;\n      ItemToRemove.NextItem = None;\
      \ // important: unlink the remaining list from the item!\n      break; // item\
      \ can be in the list only once\n    }\n  }\n}\n</uscript>\n\n[[Category:Programming\
      \ articles]]"
  properties: []
  revId: 34589
name: "Linked list"
revision:
  revid: 34589
  parentid: 34472
  user: "Claudius"
  timestamp: 1248731354.000000000
  comment: "/* Building linked lists */"
timestamp: 1668772602.706650000
