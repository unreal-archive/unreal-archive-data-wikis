---
parse:
  title: "Legacy:Variable Type"
  text:
    text: "<p>This page lists the variable types in <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a>. For details on declaring variables,\
      \ see <a href=\"/Legacy:Variable_Syntax\" title=\"Legacy:Variable Syntax\">Variable\
      \ Syntax</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Simple_Types\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Simple Types</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #bool\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">bool</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#int\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">int</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#byte\"><span class=\"tocnumber\">1.3</span> <span\
      \ class=\"toctext\">byte</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#float\"><span class=\"tocnumber\">1.4</span> <span class=\"toctext\"\
      >float</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#string\"\
      ><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">string</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#name\"><span class=\"tocnumber\"\
      >1.6</span> <span class=\"toctext\">name</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#vector.2C_rotator.2C_etc\"><span class=\"tocnumber\"\
      >1.7</span> <span class=\"toctext\">vector, rotator, etc</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-9\"><a href=\"#pointer\"><span class=\"tocnumber\"\
      >1.8</span> <span class=\"toctext\">pointer</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Structs\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Structs</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Extending_structs\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">Extending structs</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-12\"><a href=\"#Copying_structs\"><span class=\"tocnumber\">2.2</span>\
      \ <span class=\"toctext\">Copying structs</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-13\"><a href=\"#Enums\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Enums</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-14\"><a href=\"#Objects\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Objects</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-15\"\
      ><a href=\"#Copying_Objects\"><span class=\"tocnumber\">4.1</span> <span class=\"\
      toctext\">Copying Objects</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-16\"><a href=\"#Classes\"><span class=\"tocnumber\">5</span> <span\
      \ class=\"toctext\">Classes</span></a></li>\n<li class=\"toclevel-1 tocsection-17\"\
      ><a href=\"#Related_Topics\"><span class=\"tocnumber\">6</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Simple_Types\">Simple Types</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=1\"\
      \ title=\"Edit section: Simple Types\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"bool\">bool</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Type?section=2\" title=\"Edit section: bool\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Boolean\
      \ values: True, False</p>\n<p>Initial value: False</p>\n<p>Boolean values can't\
      \ be used for arrays or as <i>out</i> parameters of functions.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"int\">int</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=3\"\
      \ title=\"Edit section: int\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Numbers from -2147483648 to 2147483647.</p>\n<p>Initial\
      \ value: 0</p>\n<h3><span class=\"mw-headline\" id=\"byte\">byte</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Type?section=4\" title=\"Edit section: byte\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Numbers\
      \ from 0 to 255.</p>\n<p>Initial value: 0</p>\n<p>Assigning a number that exceeds\
      \ this range will wrap it at the boundaries (so setting a byte variable to 256\
      \ will actually set it to 0).</p>\n<h3><span class=\"mw-headline\" id=\"float\"\
      >float</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Variable_Type?section=5\" title=\"Edit section:\
      \ float\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Floating point numbers (single precision with a 24 bit mantissa).</p>\n<p>Initial\
      \ value: 0</p>\n<p>Maximum precision error free: 2<sup>23</sup> = 8388608</p>\n\
      <h3><span class=\"mw-headline\" id=\"string\">string</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=6\"\
      \ title=\"Edit section: string\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Any number of characters (including zero) enclosed\
      \ in double quotes.</p>\n<p>Initial value: Empty string <code>\"\"</code></p>\n\
      <ul>\n<li>Escape characters by prefixing them with a backslash: <code>\\\"</code>\
      \ for literal double quotes in a string and <code>\\\\</code> for literal backslashes.</li>\n\
      <li>For a newline character use the <code>Chr(13)</code> function call (<code>\\\
      n</code> is just a (needlessly) escaped <code>n</code>)</li>\n<li>Some Unreal\
      \ Tournament classes have support for the <code>n</code> escape on UnrealScript\
      \ level, for instance <a href=\"/Legacy:UWindowDynamicTextArea\" title=\"Legacy:UWindowDynamicTextArea\"\
      >UWindowDynamicTextArea</a> (which is, among other things, used to display the\
      \ weapon description for <a href=\"/Legacy:TournamentWeapon\" title=\"Legacy:TournamentWeapon\"\
      >TournamentWeapon</a>, so you can use <code>n</code> – escaped as <code>n</code>\
      \ in the <a href=\"/Legacy:Default_Properties\" title=\"Legacy:Default Properties\"\
      >Default properties</a> block of a .UC file – to create line breaks in such\
      \ a description).</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"name\">name</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Type?section=7\" title=\"Edit section: name\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>An\
      \ identifier enclosed in single quotes.</p>\n<p>Initial value: <code>'None'</code></p>\n\
      <p>The identifier may only contain letters, numbers and underscores. Names are\
      \ not case-sensitive, so 'RedeemerDeath' and 'rEdEeMeRdEaTh' are basically the\
      \ same thing, but the first appearance of the <i>name</i> in <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a> code will be used when converting\
      \ it to string. (e.g. for logging)</p>\n<h3><span class=\"mw-headline\" id=\"\
      vector.2C_rotator.2C_etc\">vector, rotator, etc</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=8\"\
      \ title=\"Edit section: vector, rotator, etc\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Other apparent variable types such as <a href=\"/Legacy:Vector\"\
      \ title=\"Legacy:Vector\">vector</a>, <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\"\
      >rotator</a>, color, etc. are in fact <a href=\"/Legacy:Built-In_Struct\" title=\"\
      Legacy:Built-In Struct\">built-In Structs</a>, enums or <a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Objects</a>. See <a href=\"/Legacy:Color_Operators\"\
      \ title=\"Legacy:Color Operators\">Color Operators</a> for more on colors.</p>\n\
      <h3><span class=\"mw-headline\" id=\"pointer\">pointer</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=9\"\
      \ title=\"Edit section: pointer\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>There seems to be a new built-in type <code>pointer</code>\
      \ which is used instead of <code>int</code> for C++ pointers as of build 2166.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Structs\">Structs</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=10\"\
      \ title=\"Edit section: Structs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A struct allows you to define a new variable type\
      \ that is made up of several variables itself. A good example is the <a href=\"\
      /Legacy:Built-In_Struct\" title=\"Legacy:Built-In Struct\">built-in struct</a>\
      \ <i><a href=\"/Legacy:Vector\" title=\"Legacy:Vector\">vector</a></i>, which\
      \ is made up of three floats X, Y, Z.</p>\n<p>Structs are defined at the start\
      \ of a class. They can't be declared within functions.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"> \n <span class=\"kw1\">struct</span> modifiers StructName\
      \ <span class=\"br0\">{</span>\n     variable declaration <span class=\"nu0\"\
      >1</span>;\n     variable declaration <span class=\"nu0\">2</span>;\n     ...\n\
      \ <span class=\"br0\">}</span>;</pre></div>\n</div>\n<p>Variable declaration\
      \ within struct declaration uses the same syntax as class variables. Using \"\
      var\" instead of \"var()\" will hide those component variables in an editable\
      \ variable that uses the struct.</p>\n<p>All elements of the struct are initialized\
      \ with their corresponding null values.</p>\n<p>Like variable declarations,\
      \ struct declarations can have modifiers. The following struct modifiers have\
      \ been spotted in UT2003 code:</p>\n<dl>\n<dt>native&#160;</dt>\n<dd></dd>\n\
      <dt>export&#160;</dt>\n<dd></dd>\n</dl>\n<p>The struct's name can be used as\
      \ variable type within variable and function declarations. A struct declaration\
      \ can also be used directly as the type of a variable, e.g.:</p>\n<pre>var <i>VariableModifiers</i>\
      \ struct <i>StructModifiers</i> <i>StructName</i> {\n    <i>variable declaration\
      \ 1</i>;\n    <i>variable declaration 2</i>;\n    ...\n} <i>name</i>, <i>name</i>,\
      \ ...;\n</pre>\n<h3><span class=\"mw-headline\" id=\"Extending_structs\">Extending\
      \ structs</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Variable_Type?section=11\" title=\"Edit section:\
      \ Extending structs\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>You can build a new struct on the base of an old struct.</p>\n<p>In object\
      \ for example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// A point or direction vector in 3d space.</span>\n<span class=\"kw1\"\
      >struct</span> <span class=\"kw5\">Vector</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw1\">config</span> <span class=\"kw5\">float</span>\
      \ X, Y, Z;\n<span class=\"br0\">}</span>;\n \n<span class=\"co1\">// A plane\
      \ definition in 3d space.</span>\n<span class=\"kw1\">struct</span> <span class=\"\
      kw5\">Plane</span> <span class=\"kw1\">extends</span> <span class=\"kw5\">Vector</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">config</span>\
      \ <span class=\"kw5\">float</span> W;\n<span class=\"br0\">}</span>;</pre></div>\n\
      </div>\n<p>So the Plane will get the X,Y,Z from Vector, but will also includes\
      \ its own W.</p>\n<h3><span class=\"mw-headline\" id=\"Copying_structs\">Copying\
      \ structs</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Variable_Type?section=12\" title=\"Edit section:\
      \ Copying structs\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>When you use the equals assignment operator <code>a = b;</code> on structs,\
      \ the data inside b is copied over the data inside a. In other words, a and\
      \ b are still two separate structs that happen to contain the same data. This\
      \ is different behavior from using objects. If a and b are objects, the above\
      \ statement results in a and b pointing to the same object.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">struct</span> something\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ anInt;\n<span class=\"br0\">}</span>;\n...\n<span class=\"me0\">something</span>\
      \ a,b;\na.<span class=\"me0\">anInt</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">3</span>;\nb.<span class=\"me0\">anInt</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">4</span>;\na <span class=\"sy0\">=</span>\
      \ b;\t\t<span class=\"co1\">//b and a both contain anInt eqaul to 4</span>\n\
      a.<span class=\"me0\">anInt</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">3</span>;\t<span class=\"co1\">//a.anInt is 3 but b.anInt is still 4</span></pre></div>\n\
      </div>\n<p>This behavior is standard for all variable types except objects.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Enums\">Enums</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=13\"\
      \ title=\"Edit section: Enums\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<pre>enum <i>EnumName</i> { <i>EnumValue1</i>, <i>EnumValue2</i>,\
      \ ... };\n</pre>\n<p>Enums can be declared within the variable's type like structs.</p>\n\
      <pre>var enum <i>EnumName</i> { <i>EnumValue1</i>, <i>EnumValue2</i>, ... }\
      \ <i>name</i>, <i>name</i>, ...;\n</pre>\n<p>Enums are internally handled as\
      \ byte variables and show some strange behavior when you try to <a href=\"/Legacy:Typecasting\"\
      \ title=\"Legacy:Typecasting\">typecast</a> them. The initial value of an enum\
      \ is its first element.</p>\n<p>There are some built-in enumerations in UnrealScript\
      \ like the <i>ERole</i> enumeration used in the <i>Role</i> and <i>RemoteRole</i>\
      \ variables declared in the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> class.</p>\n<p>If you want to know the number of items in the enum\
      \ use <tt>EnumCount(<i>ENumName</i>)</tt>.</p>\n<p>To get the name representation\
      \ of an enum value, use GetEnum(), defined in Object. It takes two parameters\
      \ - the enum object, and an int corresponding to the value. The expected type\
      \ for the object parameter is the name of the enum, explicitly casted to an\
      \ enum. ex:</p>\n<pre>log(\"Logging my Role and RemoteRole - Role:\" $ GetEnum(\
      \ enum'ENetRole', Role ) @ \"RemoteRole:\" $ GetEnum( enum'ENetRole', RemoteRole\
      \ ));\n</pre>\n<p><b>El Muerte TDS:</b> don't know if this always has been like\
      \ this, but in UT2003 I have to do the following to get the number of elements\
      \ in a enum:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">EnumName.<span\
      \ class=\"me0\">EnumCount</span></pre></div>\n</div>\n<p><b>Tarquin:</b> No\
      \ way to typecast them at ALL? Not even to int?</p>\n<p><b>Mysterial:</b> I've\
      \ never had any problems typecasting them either to or from ints.</p>\n<p><b>Dark\
      \ Ryder:</b> Does anyone know how to make something like the following work?</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span\
      \ class=\"kw1\">enum</span> EList <span class=\"br0\">{</span>\n\tLI_One,\n\t\
      LI_Two\n<span class=\"br0\">}</span> List;\n \n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">string</span> Text<span class=\"br0\">[</span>List.<span\
      \ class=\"me0\">EnumCount</span><span class=\"br0\">]</span>;\n \n<span class=\"\
      kw1\">defaultproperties</span> <span class=\"br0\">{</span>\n\tText<span class=\"\
      br0\">(</span>LI_One<span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"String number one.\"</span>\n\tText<span class=\"br0\">(</span>LI_Two<span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"String\
      \ number two.\"</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>I\
      \ keep getting \"Error, Variable declaration Text: Illegal array size 1\" (also\
      \ tried EList.EnumCount). If it can't be done, it can't be done, but that seems\
      \ like a very strange error to get (count should be 2 and even if it's only\
      \ 1, that should be a valid array length).</p>\n<p><b>Wormbo:</b> You can only\
      \ use numbers in the array index in default properties. Also, the enum count\
      \ is expressed as EnumCount(List) in your case, but somehow I doubt you can\
      \ use that in declarations.</p>\n<p><b>Dark Ryder:</b> So it would seem. In\
      \ fact, because the engine seems to be unable to see enums as anything but instance\
      \ variables, they can't be used as array indices in static functions (e.g. FillPlayInfo\
      \ and GetDescriptionText), which is the whole point of what I was trying to\
      \ do. Oh, well, back to the old-fashioned way...</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Objects\">Objects</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=14\"\
      \ title=\"Edit section: Objects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Object variables are specified in the form</p>\n<pre>class'package.name'\n\
      </pre>\n<p>These might be actors in a level, or resources such as <a href=\"\
      /Legacy:Texture\" title=\"Legacy:Texture\">textures</a>, <a href=\"/Legacy:Sound\"\
      \ title=\"Legacy:Sound\">sounds</a>, or meshes. For example:</p>\n<ul>\n<li><tt>Texture'Engine.DefaultTexture'</tt></li>\n\
      <li><tt>Sound'WeaponSounds.ExplosionSounds.Boom123'</tt></li>\n<li><tt>xPawn'CTF-SomeWeirdMap.xPawn9'</tt></li>\n\
      </ul>\n<p>The initial value of Object variables is None. Unlike for name properties,\
      \ this None is not enclosed in single quotes.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Copying_Objects\">Copying Objects</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=15\"\
      \ title=\"Edit section: Copying Objects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>When you use the equals assignment operator <code>a\
      \ = b;</code> on objects, the object a points to is now the object b points\
      \ to. In other words, a and b become references to the same object; changing\
      \ one changes the other. This is different behavior from using structs. If a\
      \ and b are structs, the above statement results in a and b containing the same\
      \ data but as separate places in memory.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> something <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">object</span>\n \n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">int</span> anInt;\n \n...\n \n<span class=\"me0\">something</span>\
      \ a,b;\na.<span class=\"me0\">anInt</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">3</span>;\nb.<span class=\"me0\">anInt</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">4</span>;\na <span class=\"sy0\">=</span>\
      \ b;\t\t<span class=\"co1\">//b and a both point to the object b. a will be\
      \ garbage collected (if nothing else references it)</span>\na.<span class=\"\
      me0\">anInt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>;\t\
      <span class=\"co1\">//a.anInt and b.anInt is now 3. There is only one copy of\
      \ something left in the code</span>\n<span class=\"kw3\">Log</span><span class=\"\
      br0\">(</span>b.<span class=\"me0\">anInt</span><span class=\"br0\">)</span>;\t\
      <span class=\"co1\">//Prints \"ScriptLog: 3\" to the log file.</span></pre></div>\n\
      </div>\n<p>Objects are the only variable type that this is true for. Using any\
      \ other variable type will leave two varibles in memory.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Classes\">Classes</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=16\"\
      \ title=\"Edit section: Classes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Class variables are actually just another type of\
      \ object variable. The value of a class variable is a particular class. (This\
      \ is because deep down in the engine even functions, enums, structs and variables\
      \ are objects.)</p>\n<p>You might use a class variable if you wanted a Spawn\
      \ statement where the class wasn't fixed at compile time. Basically, you can\
      \ use a class variable where you could also use a fixed class.</p>\n<p>A class\
      \ variable definition can specify a 'top-level' class, for example:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"> <span class=\"kw1\">var</span> <span\
      \ class=\"kw1\">class</span> any<span class=\"re0\">Class</span>&lt; SEMI &gt;\
      \ <span class=\"co1\">// can be anything</span>\n <span class=\"kw1\">var</span>\
      \ class<span class=\"sy0\">&lt;</span>Pawn<span class=\"sy0\">&gt;</span> notAny<span\
      \ class=\"re0\">Class</span>&lt; SEMI &gt; <span class=\"co1\">// can only be\
      \ Pawn or subclasses</span></pre></div>\n</div>\n<p>Specify the value of a class\
      \ variable the same way as an object variable: <tt>class'xGame.xPawn'</tt>.\
      \ Classes are just a special kind of Object reference, so their initial value\
      \ also is <code>None</code>.</p>\n<p>If you wish to find out whether an object\
      \ is of the same type as a class type then you can use the <i>Name</i> property\
      \ of the Class object you have.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">var</span> class<span class=\"sy0\">&lt;</span>Weapon<span\
      \ class=\"sy0\">&gt;</span> biggerGun;\n..\n<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> someObject.<span class=\"kw3\">IsA</span><span class=\"\
      br0\">(</span> biggerGun.<span class=\"kw5\">Name</span> <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span\
      \ class=\"co1\">// Code here</span>\n<span class=\"br0\">}</span>\n..\n<span\
      \ class=\"kw1\">default</span> properties <span class=\"br0\">{</span>\n  biggerGun<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\"\
      >'Botpack.WarHeadLauncher'</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Daid303:</b> IsA() doesn't seem to work with classes in UT2003.\
      \ Atleast not for me. Anyone else having this problem?</p>\n<p><b>Foxpaw:</b>\
      \ What exactly are you trying to do with it? If you are trying do something\
      \ like SomeClassVariable.IsA( 'SomeOtherClass' ), that won't work. Reason being\
      \ that class variables are all of type \"class\", and aren't derived from their\
      \ superclass. Only instances of objects are derived from their superclass. The\
      \ equivalent for class variables is to do:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">  <span class=\"kw2\">if</span> <span class=\"br0\">(</span> ClassVariable\
      \ <span class=\"sy0\">==</span> <span class=\"kw1\">Class</span><span class=\"\
      st0\">'SomeClass'</span> <span class=\"sy0\">||</span> <span class=\"kw3\">ClassIsChildOf</span><span\
      \ class=\"br0\">(</span> ClassVariable, <span class=\"kw1\">Class</span><span\
      \ class=\"st0\">'SomeClass'</span> <span class=\"br0\">)</span></pre></div>\n\
      </div>\n<p><b>Daid303:</b> If you hear a loud banging then that's my forehead\
      \ comming on contact with my table. I feel so stupid. It's so clear... Anyhow,\
      \ thanks. Now I can finaly take out that ugly hack.</p>\n<p><b>Wormbo:</b> Of\
      \ course \"class'xPawn'\" isn't a real \"Pawn\" but only \"a description of\
      \ a pawn\". However, \"a description of a pawn\" is a description, so e.g. class'xPawn'.IsA('Class')\
      \ will return true like it's supposed to.</p>\n<hr />\n<p><b>Guest:</b> I'd\
      \ like to ask here is there a way to convert a class variable into an actor\
      \ variable and vice versa?</p>\n<p><b>Mychaeel:</b> Well, the term \"converting\"\
      \ is a bit misplaced in that context... just as you wouldn't talk about \"converting\"\
      \ a recipe into a meal. To get an Actor of a given class, spawn it. To get the\
      \ class of a given Actor, read its <code>Class</code> property. Refer to <a\
      \ href=\"/Legacy:OOP\" title=\"Legacy:OOP\" class=\"mw-redirect\">OOP</a> for\
      \ general insights into object-oriented programming.</p>\n<p><b>Xian:</b> If\
      \ you are referring to typecasting then Mychaeel pushed you in the right direction.</p>\n\
      <p>Here is an example (if <i>this</i> is what you asked:)</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw1\">Class</span>\
      \ <span class=\"sy0\">&lt;</span>Actor<span class=\"sy0\">&gt;</span> My<span\
      \ class=\"re0\">Class</span>&lt; SEMI &gt;\n \n<span class=\"kw1\">function</span>\
      \ SpawnTestClass <span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span> <span class=\"\
      kw9\">Actor</span> TestActor;\n    <span class=\"kw1\">local</span> <span class=\"\
      kw1\">Class</span> <span class=\"sy0\">&lt;</span>Actor<span class=\"sy0\">&gt;</span>\
      \ Test<span class=\"re0\">Class</span>&lt; SEMI &gt;\n \n    <span class=\"\
      co1\">// creating an instance of a Class - aka converting a class into an actor</span>\n\
      \    TestActor <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span>MyClass<span class=\"br0\">)</span>;\n    <span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span><span class=\"st0\">\"Here I am:\"\
      </span> <span class=\"sy0\">@</span> TestActor<span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// same thing would be if you'd write Log(\"Here I am:\"\
      \ @ TestActor.Name);</span>\n \n    <span class=\"co1\">// converting an Actor\
      \ to a Class</span>\n    TestClass <span class=\"sy0\">=</span> TestActor.<span\
      \ class=\"kw1\">Class</span>;\n    <span class=\"kw3\">Log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Here I was:\"</span> <span class=\"sy0\"\
      >@</span> TestClass<span class=\"br0\">)</span>;  <span class=\"co1\">// same\
      \ thing would be if you'd write Log(\"Here I am:\" @ TestActor.Class);</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Word of advice, MyClass\
      \ is by default <i>None</i>. So it is best to set it to a class value before\
      \ using it. Because the variable type is a Class and the Class type is an Actor\
      \ it means you can set it to ANY CLASS which is a child of Actor (but not Object).\
      \ So Pawns, Weapons, HUDs, RIs, Mutators etc. Hope this clears it up&#160;:)</p>\n\
      <hr />\n<p><b>Dunge:</b> using var() class&lt;SomeClass&gt; varName; display\
      \ a drop down list in the editor with all sub-class of the specified class and\
      \ set it to NONE by default, that's great but what happen if we change it and\
      \ want to come back to NONE after? It just don't display in the list..</p>\n\
      <p><b>Xian:</b> what do you mean&#160;?</p>\n<p><b>Dunge:</b> I mean the dropdown\
      \ list contain every sub-class, but not the NONE (empty) option so we can't\
      \ unset something (at least not in our editor).</p>\n<p><b>Xian:</b> Try using\
      \ an Object type not an Object class. If you'll check most Effects classes you'll\
      \ see they use Object types instead of classes. Stuff like:</p>\n<ul>\n<li>var\
      \ () Sound Sblah;</li>\n<li>var () Texture Tblah;</li>\n</ul>\n<p>... and so\
      \ on. Perhaps that might help although I am not sure what you want.</p>\n<p><b>Tarquin:</b>\
      \ No, \"var() class&lt;SomeClass&gt; varName;\" defines a variable that holds\
      \ a class, not an object. You'd use a variable like this if you wanted a Spawn\
      \ statement where the class wasn't fixed at compile time: eg you might spawn\
      \ a biorifle or a minigun depending on what the player already has.</p>\n<p><b>Xian:</b>\
      \ That's what I said&#160;:) Maybe not using the best proper terms though...</p>\n\
      <hr />\n<p><b>SuperApe:</b> I have this question on HelpDesk as well, but: Is\
      \ there any way around the UT2004 class syntax <tt>HideDropDown</tt>? ShieldGun\
      \ or Translauncher, for example, are Weapons that will not show up on the drop\
      \ down list when you declare <tt>var() class&lt;Weapon&gt; myWeapon;</tt>. How\
      \ can I get around this? Suggestions?</p>\n<p><b>Xian:</b> Perhaps not the best\
      \ thought but might push you in the right direction; try using an enum. The\
      \ downside is that it won't support 3rd party guns.</p>\n<p><b>SuperApe:</b>\
      \ I thought of that, but not supporting 3rd party guns is too limiting for my\
      \ purposes. If I have to, I may try again to use a string. But I'm having problems\
      \ accessing it properly. This is actually an <tt>array&lt;Weapon&gt;</tt> property.\
      \ When I try accessing values from an <tt>array&lt;string&gt;</tt>, I have problems\
      \ with conditionals like <tt>if ( myString[i]&#160;!= \"\" )</tt> and statements\
      \ like <tt>CreateInventory( myString[i] )</tt>, especially from another class,\
      \ which is my situation. Not to mention strings can get messy if I'm asking\
      \ mappers to type.&#160;;) So, I'm trying to find another way. I'd really like\
      \ a simple pull down to include those few hidden weapons. <i>(btw, where the\
      \ heck is the lightning gun?)</i></p>\n<p><b>SuperApe:</b> I see the LightningGun\
      \ is actually <tt>xWeapons.SniperRifle</tt>. But, I'm still hoping someone can\
      \ help with a method to list all the Weapon classes in a listbox, even those\
      \ defined with the class syntax <tt>HideDropDown</tt>.</p>\n<p><b>Xian:</b>\
      \ I thought of a compromise but I am not sure if you'll accept it. Try writing\
      \ a var descriptor for any class, and simply use the Actor browser to set a\
      \ weapon (how you'd, for example set sounds, textures etc. effects in explosion\
      \ chains in UT/U1). Although this is not the best method as I assume you wanted\
      \ a simple way to do it, this is just something I thought might help. Good luck\
      \ though&#160;:)</p>\n<p><b>SuperApe:</b> var descriptor? I'm not sure what\
      \ you mean; I'm just not familiar with that phrase. I'm up for any suggestion.\
      \ If I'm not able to get a simple listbox for the mapper to use, I can probably\
      \ resort to using a string array, if I can figure out what I'm doing wrong when\
      \ I access that array in another class. <i>(problem described above)</i></p>\n\
      <p><b>Xian:</b> Nevermind it was late&#160;:P Guess the best way would be just\
      \ to use a string and then load it dynamically.</p>\n<p><b>SuperApe:</b> Thank\
      \ you. Loading it dynamically was the trick to working with the string array\
      \ property. I also just had some lame typos in my code that prevented it from\
      \ working during my tests. Thanks again.&#160;:)</p>\n<p><b>Xian:</b> Hey, you\
      \ did it all&#160;:) So the kudos go to you, I just pushed you in the right\
      \ direction (I hope)&#160;:)</p>\n<p>BTW I thought of an exotic way to do it\
      \ as well... You could use special localization files to write in all Weapon\
      \ classes and a name for each. Say, how in UT you had Botpack.UT_EightBall.\
      \ You could write the class string and a name, i.e. \"Rocket Launcher\". Then\
      \ the mapper would just have to write \"Rocket Launcher\" in the map actor (instead\
      \ of the class) and you'd use the int parse functions (GetNextIntDesc() in UT)\
      \ and check the corresponding class string. This might be easier and more fun\
      \ since it's easier to remember \"Bio Rifle\" instead of \"blah.stuff_blah_ut_bioriflez0r\"\
      . And the names could be anything you want them to be, as simple and easy to\
      \ remember as possible. The only drawback would be again, that it wouldn't support\
      \ 3rd party weapons unless they'd use int files (although you could say make\
      \ it easy for them by writing a readme on the syntax) as \"plugins\". Although\
      \ the dynamic load using input strings does the trick, just thought of giving\
      \ you a \"different\" idea.&#160;:) Not too many use this and the best part\
      \ is that it's easy to implement&#160;:)</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Type?section=17\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a>\n<ul>\n<li><a href=\"/Legacy:Variable_Syntax\" title=\"Legacy:Variable\
      \ Syntax\">Variable Syntax</a></li>\n<li><a href=\"/Legacy:Typecasting\" title=\"\
      Legacy:Typecasting\">Typecasting</a></li>\n</ul>\n</li>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference/Variables\"\
      \ title=\"Legacy:UnrealScript Language Reference/Variables\">UnrealScript Language\
      \ Reference/Variables</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.234 seconds\nReal time usage: 0.441 seconds\nPreprocessor visited\
      \ node count: 157/1000000\nPreprocessor generated node count: 272/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3608-0!*!0!!en!*!*\
      \ and timestamp 20221118092406 and revision id 9218\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  - ns: 100
    exists: true
    name: "Legacy:UWindowDynamicTextArea"
  - ns: 100
    exists: true
    name: "Legacy:OOP"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 100
    exists: true
    name: "Legacy:Color Operators"
  - ns: 100
    exists: true
    name: "Legacy:Built-In Struct"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Texture"
  - ns: 100
    exists: true
    name: "Legacy:Sound"
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:TournamentWeapon"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Simple Types"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 161
    anchor: "Simple_Types"
  - toclevel: 2
    level: "3"
    line: "bool"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 179
    anchor: "bool"
  - toclevel: 2
    level: "3"
    line: "int"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 322
    anchor: "int"
  - toclevel: 2
    level: "3"
    line: "byte"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 392
    anchor: "byte"
  - toclevel: 2
    level: "3"
    line: "float"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 584
    anchor: "float"
  - toclevel: 2
    level: "3"
    line: "string"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 738
    anchor: "string"
  - toclevel: 2
    level: "3"
    line: "name"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 1638
    anchor: "name"
  - toclevel: 2
    level: "3"
    line: "vector, rotator, etc"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 2042
    anchor: "vector.2C_rotator.2C_etc"
  - toclevel: 2
    level: "3"
    line: "pointer"
    number: "1.8"
    index: "9"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 2335
    anchor: "pointer"
  - toclevel: 1
    level: "2"
    line: "Structs"
    number: "2"
    index: "10"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 2487
    anchor: "Structs"
  - toclevel: 2
    level: "3"
    line: "Extending structs"
    number: "2.1"
    index: "11"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 3732
    anchor: "Extending_structs"
  - toclevel: 2
    level: "3"
    line: "Copying structs"
    number: "2.2"
    index: "12"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 4125
    anchor: "Copying_structs"
  - toclevel: 1
    level: "2"
    line: "Enums"
    number: "3"
    index: "13"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 4779
    anchor: "Enums"
  - toclevel: 1
    level: "2"
    line: "Objects"
    number: "4"
    index: "14"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 7291
    anchor: "Objects"
  - toclevel: 2
    level: "3"
    line: "Copying Objects"
    number: "4.1"
    index: "15"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 7765
    anchor: "Copying_Objects"
  - toclevel: 1
    level: "2"
    line: "Classes"
    number: "5"
    index: "16"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 8681
    anchor: "Classes"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "17"
    fromtitle: "Legacy:Variable_Type"
    byteoffset: 17259
    anchor: "Related_Topics"
  displaytitle: "Legacy:Variable Type"
  iwlinks: []
  wikitext:
    text: "This page lists the variable types in [[Legacy:UnrealScript|UnrealScript]].\
      \ For details on declaring variables, see [[Legacy:Variable Syntax|Variable\
      \ Syntax]].\n\n==Simple Types==\n\n===bool===\n\nBoolean values: True, False\n\
      \nInitial value: False\n\nBoolean values can't be used for arrays or as ''out''\
      \ parameters of functions.\n\n===int===\n\nNumbers from -2147483648 to 2147483647.\n\
      \nInitial value: 0\n\n===byte===\n\nNumbers from 0 to 255.\n\nInitial value:\
      \ 0\n\nAssigning a number that exceeds this range will wrap it at the boundaries\
      \ (so setting a byte variable to 256 will actually set it to 0).\n\n===float===\n\
      \nFloating point numbers (single precision with a 24 bit mantissa).\n\nInitial\
      \ value: 0\n\nMaximum precision error free: 2<sup>23</sup> = 8388608\n\n===string===\n\
      \nAny number of characters (including zero) enclosed in double quotes.\n\nInitial\
      \ value: Empty string <code>\"\"</code>\n* Escape characters by prefixing them\
      \ with a backslash: <code>\\\"</code> for literal double quotes in a string\
      \ and <code>\\\\</code> for literal backslashes.\n* For a newline character\
      \ use the <code>Chr(13)</code> function call (<code>\\n</code> is just a (needlessly)\
      \ escaped <code>n</code>)\n* Some Unreal Tournament classes have support for\
      \ the <code>n</code> escape on UnrealScript level, for instance [[Legacy:UWindowDynamicTextArea|UWindowDynamicTextArea]]\
      \ (which is, among other things, used to display the weapon description for\
      \ [[Legacy:TournamentWeapon|TournamentWeapon]], so you can use <code>n</code>\
      \ &ndash; escaped as <code>n</code> in the [[Legacy:Default Properties|Default\
      \ properties]] block of a .UC file &ndash; to create line breaks in such a description).\n\
      \n===name===\n\nAn identifier enclosed in single quotes.\n\nInitial value: <code>'None'</code>\n\
      \nThe identifier may only contain letters, numbers and underscores. Names are\
      \ not case-sensitive, so 'RedeemerDeath' and 'rEdEeMeRdEaTh' are basically the\
      \ same thing, but the first appearance of the ''name'' in [[Legacy:UnrealScript|UnrealScript]]\
      \ code will be used when converting it to string. (e.g. for logging)\n\n===vector,\
      \ rotator, etc===\n\nOther apparent variable types such as [[Legacy:Vector|vector]],\
      \ [[Legacy:Rotator|rotator]], color, etc. are in fact [[Legacy:Built-In Struct|built-In\
      \ Struct]]s, enums or [[Legacy:Object|Object]]s. See [[Legacy:Color Operators|Color\
      \ Operators]] for more on colors.\n\n===pointer===\n\nThere seems to be a new\
      \ built-in type <code>pointer</code> which is used instead of <code>int</code>\
      \ for C++ pointers as of build 2166.\n\n==Structs==\n\nA struct allows you to\
      \ define a new variable type that is made up of several variables itself. A\
      \ good example is the [[Legacy:Built-In Struct|built-in struct]] ''[[Legacy:Vector|vector]]'',\
      \ which is made up of three floats X, Y, Z.\n\nStructs are defined at the start\
      \ of a class. They can't be declared within functions.\n\n<uscript> \n struct\
      \ modifiers StructName {\n     variable declaration 1;\n     variable declaration\
      \ 2;\n     ...\n };\n</uscript> \n\nVariable declaration within struct declaration\
      \ uses the same syntax as class variables. Using \"var\" instead of \"var()\"\
      \ will hide those component variables in an editable variable that uses the\
      \ struct.\n\nAll elements of the struct are initialized with their corresponding\
      \ null values.\n\nLike variable declarations, struct declarations can have modifiers.\
      \ The following struct modifiers have been spotted in UT2003 code:\n; native\
      \ : \n; export :\n\nThe struct's name can be used as variable type within variable\
      \ and function declarations. A struct declaration can also be used directly\
      \ as the type of a variable, e.g.:\n var ''VariableModifiers'' struct ''StructModifiers''\
      \ ''StructName'' {\n     ''variable declaration 1'';\n     ''variable declaration\
      \ 2'';\n     ...\n } ''name'', ''name'', ...;\n\n===Extending structs===\n\n\
      You can build a new struct on the base of an old struct.\n\nIn object for example:\n\
      \n<uscript>\n// A point or direction vector in 3d space.\nstruct Vector\n{\n\
      \tvar() config float X, Y, Z;\n};\n\n// A plane definition in 3d space.\nstruct\
      \ Plane extends Vector\n{\n\tvar() config float W;\n};\n</uscript>\n\nSo the\
      \ Plane will get the X,Y,Z from Vector, but will also includes its own W.\n\n\
      ===Copying structs===\n\nWhen you use the equals assignment operator <code>a\
      \ = b;</code> on structs, the data inside b is copied over the data inside a.\
      \ In other words, a and b are still two separate structs that happen to contain\
      \ the same data. This is different behavior from using objects. If a and b are\
      \ objects, the above statement results in a and b pointing to the same object.\n\
      \n<uscript>\nstruct something\n{\n\tvar int anInt;\n};\n...\nsomething a,b;\n\
      a.anInt = 3;\nb.anInt = 4;\na = b;\t\t//b and a both contain anInt eqaul to\
      \ 4\na.anInt = 3;\t//a.anInt is 3 but b.anInt is still 4\n</uscript>\n\nThis\
      \ behavior is standard for all variable types except objects.\n\n==Enums ==\n\
      \ enum ''EnumName'' { ''EnumValue1'', ''EnumValue2'', ... };\n\nEnums can be\
      \ declared within the variable's type like structs.\n var enum ''EnumName''\
      \ { ''EnumValue1'', ''EnumValue2'', ... } ''name'', ''name'', ...;\n\nEnums\
      \ are internally handled as byte variables and show some strange behavior when\
      \ you try to [[Legacy:Typecasting|typecast]] them. The initial value of an enum\
      \ is its first element.\n\nThere are some built-in enumerations in UnrealScript\
      \ like the ''ERole'' enumeration used in the ''Role'' and ''RemoteRole'' variables\
      \ declared in the [[Legacy:Actor|Actor]] class.\n\nIf you want to know the number\
      \ of items in the enum use <tt>EnumCount(''ENumName'')</tt>.\n\nTo get the name\
      \ representation of an enum value, use GetEnum(), defined in Object.  It takes\
      \ two parameters - the enum object, and an int corresponding to the value. The\
      \ expected type for the object parameter is the name of the enum, explicitly\
      \ casted to an enum.  ex:\n log(\"Logging my Role and RemoteRole - Role:\" $\
      \ GetEnum( enum'ENetRole', Role ) @ \"RemoteRole:\" $ GetEnum( enum'ENetRole',\
      \ RemoteRole ));\n\n'''El Muerte TDS:''' don't know if this always has been\
      \ like this, but in UT2003 I have to do the following to get the number of elements\
      \ in a enum:\n\n<uscript>\nEnumName.EnumCount\n</uscript>\n\n'''Tarquin:'''\
      \ No way to typecast them at ALL? Not even to int?\n\n'''Mysterial:''' I've\
      \ never had any problems typecasting them either to or from ints.\n\n'''Dark\
      \ Ryder:''' Does anyone know how to make something like the following work?\n\
      \n<uscript>\nvar enum EList {\n\tLI_One,\n\tLI_Two\n} List;\n\nvar string Text[List.EnumCount];\n\
      \ndefaultproperties {\n\tText(LI_One)=\"String number one.\"\n\tText(LI_Two)=\"\
      String number two.\"\n}\n</uscript>\n\nI keep getting \"Error, Variable declaration\
      \ Text: Illegal array size 1\" (also tried EList.EnumCount).  If it can't be\
      \ done, it can't be done, but that seems like a very strange error to get (count\
      \ should be 2 and even if it's only 1, that should be a valid array length).\n\
      \n'''Wormbo:''' You can only use numbers in the array index in default properties.\
      \ Also, the enum count is expressed as EnumCount(List) in your case, but somehow\
      \ I doubt you can use that in declarations.\n\n'''Dark Ryder:''' So it would\
      \ seem.  In fact, because the engine seems to be unable to see enums as anything\
      \ but instance variables, they can't be used as array indices in static functions\
      \ (e.g. FillPlayInfo and GetDescriptionText), which is the whole point of what\
      \ I was trying to do.  Oh, well, back to the old-fashioned way...\n\n==Objects\
      \ ==\n\nObject variables are specified in the form\n class'package.name'\n\n\
      These might be actors in a level, or resources such as [[Legacy:Texture|texture]]s,\
      \ [[Legacy:Sound|sound]]s, or meshes. For example:\n\n* <tt>Texture'Engine.DefaultTexture'</tt>\n\
      * <tt>Sound'WeaponSounds.ExplosionSounds.Boom123'</tt> \n* <tt>xPawn'CTF-SomeWeirdMap.xPawn9'</tt>\n\
      \nThe initial value of Object variables is None. Unlike for name properties,\
      \ this None is not enclosed in single quotes.\n\n===Copying Objects===\n\nWhen\
      \ you use the equals assignment operator <code>a = b;</code> on objects, the\
      \ object a points to is now the object b points to. In other words, a and b\
      \ become references to the same object; changing one changes the other. This\
      \ is different behavior from using structs. If a and b are structs, the above\
      \ statement results in a and b containing the same data but as separate places\
      \ in memory.\n\n<uscript>\nclass something extends object\n\nvar int anInt;\n\
      \n...\n\nsomething a,b;\na.anInt = 3;\nb.anInt = 4;\na = b;\t\t//b and a both\
      \ point to the object b. a will be garbage collected (if nothing else references\
      \ it)\na.anInt = 3;\t//a.anInt and b.anInt is now 3. There is only one copy\
      \ of something left in the code\nLog(b.anInt);\t//Prints \"ScriptLog: 3\" to\
      \ the log file.\n</uscript>\n\nObjects are the only variable type that this\
      \ is true for. Using any other variable type will leave two varibles in memory.\n\
      \n==Classes ==\n\nClass variables are actually just another type of object variable.\
      \ The value of a  class variable is a particular class. (This is because deep\
      \ down in the engine even functions, enums, structs and variables are objects.)\n\
      \nYou might use a class variable if you wanted a Spawn statement where the class\
      \ wasn't fixed at compile time. Basically, you can use a class variable where\
      \ you could also use a fixed class.\n\nA class variable definition can specify\
      \ a 'top-level' class, for example:\n\n<uscript>\n var class anyClass; // can\
      \ be anything\n var class<Pawn> notAnyClass; // can only be Pawn or subclasses\
      \ \n</uscript>\n\nSpecify the value of a class variable the same way as an object\
      \ variable: <tt>class'xGame.xPawn'</tt>. Classes are just a special kind of\
      \ Object reference, so their initial value also is <code>None</code>.\n\nIf\
      \ you wish to find out whether an object is of the same type as a class type\
      \ then you can use the ''Name'' property of the Class object you have.\n\n<uscript>\n\
      var class<Weapon> biggerGun;\n..\nif ( someObject.IsA( biggerGun.Name ) ) {\n\
      \  // Code here\n}\n..\ndefault properties {\n  biggerGun=Class'Botpack.WarHeadLauncher'\n\
      }\n</uscript>\n\n'''Daid303:''' IsA() doesn't seem to work with classes in UT2003.\
      \ Atleast not for me. Anyone else having this problem?\n\n'''Foxpaw:''' What\
      \ exactly are you trying to do with it? If you are trying do something like\
      \ SomeClassVariable.IsA( 'SomeOtherClass' ), that won't work. Reason being that\
      \ class variables are all of type \"class\", and aren't derived from their superclass.\
      \ Only instances of objects are derived from their superclass. The equivalent\
      \ for class variables is to do:\n\n<uscript>\n  if ( ClassVariable == Class'SomeClass'\
      \ || ClassIsChildOf( ClassVariable, Class'SomeClass' )\n</uscript>\n\n'''Daid303:'''\
      \ If you hear a loud banging then that's my forehead comming on contact with\
      \ my table. I feel so stupid. It's so clear... Anyhow, thanks. Now I can finaly\
      \ take out that ugly hack.\n\n'''Wormbo:''' Of course \"class'xPawn'\" isn't\
      \ a real \"Pawn\" but only \"a description of a pawn\". However, \"a description\
      \ of a pawn\" is a description, so e.g. class'xPawn'.IsA('Class') will return\
      \ true like it's supposed to.\n\n----\n\n'''Guest:''' I'd like to ask here is\
      \ there a way to convert a class variable into an actor variable and vice versa?\n\
      \n'''Mychaeel:''' Well, the term \"converting\" is a bit misplaced in that context...\
      \ just as you wouldn't talk about \"converting\" a recipe into a meal.  To get\
      \ an Actor of a given class, spawn it.  To get the class of a given Actor, read\
      \ its <code>Class</code> property.  Refer to [[Legacy:OOP|OOP]] for general\
      \ insights into object-oriented programming.\n\n'''Xian:''' If you are referring\
      \ to typecasting then Mychaeel pushed you in the right direction.\n\nHere is\
      \ an example (if ''this'' is what you asked:)\n\n<uscript>var Class <Actor>\
      \ MyClass;\n\nfunction SpawnTestClass ()\n{\n    local Actor TestActor;\n  \
      \  local Class <Actor> TestClass;\n\n    // creating an instance of a Class\
      \ - aka converting a class into an actor\n    TestActor = Spawn(MyClass);\n\
      \    Log(\"Here I am:\" @ TestActor);  // same thing would be if you'd write\
      \ Log(\"Here I am:\" @ TestActor.Name);\n\n    // converting an Actor to a Class\n\
      \    TestClass = TestActor.Class;\n    Log(\"Here I was:\" @ TestClass);  //\
      \ same thing would be if you'd write Log(\"Here I am:\" @ TestActor.Class);\n\
      }</uscript>\n\nWord of advice, MyClass is by default ''None''. So it is best\
      \ to set it to a class value before using it. Because the variable type is a\
      \ Class and the Class type is an Actor it means you can set it to ANY CLASS\
      \ which is a child of Actor (but not Object). So Pawns, Weapons, HUDs, RIs,\
      \ Mutators etc. Hope this clears it up :)\n\n----\n\n'''Dunge:''' using var()\
      \ class<SomeClass>  varName; display a drop down list in the editor with all\
      \ sub-class of the specified class and set it to NONE by default, that's great\
      \ but what happen if we change it and want to come back to NONE after? It just\
      \ don't display in the list..\n\n'''Xian:''' what do you mean ?\n\n'''Dunge:'''\
      \ I mean the dropdown list contain every sub-class, but not the NONE (empty)\
      \ option so we can't unset something (at least not in our editor).\n\n'''Xian:'''\
      \ Try using an Object type not an Object class. If you'll check most Effects\
      \ classes you'll see they use Object types instead of classes. Stuff like:\n\
      \n* var () Sound Sblah;\n* var () Texture Tblah;\n\n... and so on. Perhaps that\
      \ might help although I am not sure what you want.\n\n'''Tarquin:''' No, \"\
      var() class<SomeClass>  varName;\" defines a variable that holds a class, not\
      \ an object. You'd use a variable like this if you wanted a Spawn statement\
      \ where the class wasn't fixed at compile time: eg you might spawn a biorifle\
      \ or a minigun depending on what the player already has.\n\n'''Xian:''' That's\
      \ what I said :) Maybe not using the best proper terms though...\n\n----\n\n\
      '''SuperApe:''' I have this question on HelpDesk as well, but: Is there any\
      \ way around the UT2004 class syntax <tt>HideDropDown</tt>?  ShieldGun or Translauncher,\
      \ for example, are Weapons that will not show up on the drop down list when\
      \ you declare <tt>var() class<Weapon> myWeapon;</tt>.  How can I get around\
      \ this?  Suggestions?\n\n'''Xian:''' Perhaps not the best thought but might\
      \ push you in the right direction; try using an enum. The downside is that it\
      \ won't support 3rd party guns.\n\n'''SuperApe:''' I thought of that, but not\
      \ supporting 3rd party guns is too limiting for my purposes.  If I have to,\
      \ I may try again to use a string.  But I'm having problems accessing it properly.\
      \  This is actually an <tt>array<Weapon></tt> property.  When I try accessing\
      \ values from an <tt>array<string></tt>, I have problems with conditionals like\
      \ <tt>if ( myString[i] != \"\" )</tt> and statements like <tt>CreateInventory(\
      \ myString[i] )</tt>, especially from another class, which is my situation.\
      \  Not to mention strings can get messy if I'm asking mappers to type. ;) So,\
      \ I'm trying to find another way.  I'd really like a simple pull down to include\
      \ those few hidden weapons. ''(btw, where the heck is the lightning gun?)''\n\
      \n'''SuperApe:''' I see the LightningGun is actually <tt>xWeapons.SniperRifle</tt>.\
      \  But, I'm still hoping someone can help with a method to list all the Weapon\
      \ classes in a listbox, even those defined with the class syntax <tt>HideDropDown</tt>.\n\
      \n'''Xian:''' I thought of a compromise but I am not sure if you'll accept it.\
      \ Try writing a var descriptor for any class, and simply use the Actor browser\
      \ to set a weapon (how you'd, for example set sounds, textures etc. effects\
      \ in explosion chains in UT/U1). Although this is not the best method as I assume\
      \ you wanted a simple way to do it, this is just something I thought might help.\
      \ Good luck though :)\n\n'''SuperApe:''' var descriptor?  I'm not sure what\
      \ you mean; I'm just not familiar with that phrase.  I'm up for any suggestion.\
      \  If I'm not able to get a simple listbox for the mapper to use, I can probably\
      \ resort to using a string array, if I can figure out what I'm doing wrong when\
      \ I access that array in another class. ''(problem described above)''\n\n'''Xian:'''\
      \ Nevermind it was late :P Guess the best way would be just to use a string\
      \ and then load it dynamically. \n\n'''SuperApe:''' Thank you.  Loading it dynamically\
      \ was the trick to working with the string array property.  I also just had\
      \ some lame typos in my code that prevented it from working during my tests.\
      \  Thanks again. :)\n\n'''Xian:''' Hey, you did it all :) So the kudos go to\
      \ you, I just pushed you in the right direction (I hope) :)\n\nBTW I thought\
      \ of an exotic way to do it as well... You could use special localization files\
      \ to write in all Weapon classes and a name for each. Say, how in UT you had\
      \ Botpack.UT_EightBall. You could write the class string and a name, i.e. \"\
      Rocket Launcher\". Then the mapper would just have to write \"Rocket Launcher\"\
      \ in the map actor (instead of the class) and you'd use the int parse functions\
      \ (GetNextIntDesc() in UT) and check the corresponding class string. This might\
      \ be easier and more fun since it's easier to remember \"Bio Rifle\" instead\
      \ of \"blah.stuff_blah_ut_bioriflez0r\". And the names could be anything you\
      \ want them to be, as simple and easy to remember as possible. The only drawback\
      \ would be again, that it wouldn't support 3rd party weapons unless they'd use\
      \ int files (although you could say make it easy for them by writing a readme\
      \ on the syntax) as \"plugins\". Although the dynamic load using input strings\
      \ does the trick, just thought of giving you a \"different\" idea. :) Not too\
      \ many use this and the best part is that it's easy to implement :)\n\n==Related\
      \ Topics==\n* [[Legacy:UnrealScript|UnrealScript]]\n** [[Legacy:Variable Syntax|Variable\
      \ Syntax]]\n** [[Legacy:Typecasting|Typecasting]]\n* [[Legacy:UnrealScript Language\
      \ Reference/Variables|UnrealScript Language Reference/Variables]]"
  properties: []
  revId: 9218
name: "Legacy:Variable Type"
revision:
  revid: 9218
  parentid: 9219
  user: "Juxtapose"
  timestamp: 1163453434.000000000
  comment: "description of copy behavior"
timestamp: 1668763447.750135000
