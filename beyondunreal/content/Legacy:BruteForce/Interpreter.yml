---
parse:
  title: "Legacy:BruteForce/Interpreter"
  text:
    text: "<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span>\
      \ Interpreter <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span>\
      \ dependsOn<span class=\"br0\">(</span>AST<span class=\"br0\">)</span> dependsOn<span\
      \ class=\"br0\">(</span>Scope<span class=\"br0\">)</span> dependsOn<span class=\"\
      br0\">(</span>Compiler<span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >var</span> <span class=\"kw1\">private</span> AST a;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw1\">private</span> Scope s;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw1\">private</span> array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> input;\n \n<span class=\"co1\">// keywords</span>\n\
      <span class=\"kw1\">const</span> __BEGIN                 <span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"begin\"</span>;\n<span class=\"kw1\">const</span>\
      \ __VAR                   <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      var\"</span>;\n<span class=\"kw1\">const</span> __INTEGER               <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"int\"</span>;\n<span class=\"\
      kw1\">const</span> __STRING                <span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"string\"</span>;\n<span class=\"kw1\">const</span> __FLOAT\
      \                 <span class=\"sy0\">=</span> <span class=\"st0\">\"float\"\
      </span>;\n<span class=\"kw1\">const</span> __BOOLEAN               <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"bool\"</span>;\n<span class=\"kw1\">const</span>\
      \ __FUNC                  <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      function\"</span>;\n<span class=\"kw1\">const</span> __BECOMES             \
      \  <span class=\"sy0\">=</span> <span class=\"st0\">\"=\"</span>;\n<span class=\"\
      kw1\">const</span> __WHILE                 <span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"while\"</span>;\n<span class=\"kw1\">const</span> __IF   \
      \                 <span class=\"sy0\">=</span> <span class=\"st0\">\"if\"</span>;\n\
      <span class=\"kw1\">const</span> __LT                    <span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"&lt;\"</span>;\n<span class=\"kw1\">const</span>\
      \ __LE                    <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      &lt;=\"</span>;\n<span class=\"kw1\">const</span> __GT                    <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"&gt;\"</span>;\n<span class=\"\
      kw1\">const</span> __GE                    <span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"&gt;=\"</span>;\n<span class=\"kw1\">const</span> __EQ   \
      \                 <span class=\"sy0\">=</span> <span class=\"st0\">\"==\"</span>;\n\
      <span class=\"kw1\">const</span> __NE                    <span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"!=\"</span>;\n<span class=\"kw1\">const</span>\
      \ __AND                   <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      &amp;&amp;\"</span>;\n<span class=\"kw1\">const</span> __OR                \
      \    <span class=\"sy0\">=</span> <span class=\"st0\">\"||\"</span>;\n<span\
      \ class=\"kw1\">const</span> __PLUS                  <span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"+\"</span>;\n<span class=\"kw1\">const</span> __MINUS\
      \                 <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span>;\n\
      <span class=\"kw1\">const</span> __MULTIPLY              <span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"*\"</span>;\n<span class=\"kw1\">const</span>\
      \ __DIVIDE                <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      /\"</span>;\n<span class=\"kw1\">const</span> __MOD                   <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"%\"</span>;\n<span class=\"kw1\"\
      >const</span> __NOT                   <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"!\"</span>;\n<span class=\"kw1\">const</span> __TRUE               \
      \   <span class=\"sy0\">=</span> <span class=\"st0\">\"true\"</span>;\n<span\
      \ class=\"kw1\">const</span> __FALSE                 <span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"false\"</span>;\n<span class=\"co1\">// terminals --\
      \ end</span></pre></div>\n</div>\n<p>These are the keywords that we can encounter\
      \ in the AST</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">const</span> FUNCRESULT              <span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"result\"</span>;</pre></div>\n</div>\n<p>the name of the default\
      \ local variable of function, the one that will contain the result.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ Create<span class=\"br0\">(</span>AST inAst, Scope inScope, array<span class=\"\
      sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> inInput<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  a <span class=\"sy0\">=</span>\
      \ inAst;\n  s <span class=\"sy0\">=</span> inScope;\n  input <span class=\"\
      sy0\">=</span> inInput;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >function</span> Execute<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> a.<span class=\"me0\">Tree</span>.<span class=\"me0\">length</span>;\
      \ i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>i<span class=\"br0\"\
      >]</span>.<span class=\"me0\">parent</span> <span class=\"sy0\">==</span> <span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ ExecuteRoot<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;\n  <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Execute will walk through all the tree nodes to search for the main root\
      \ nodes, without a parent, and execute those.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">private</span> <span class=\"kw1\">function</span>\
      \ ExecuteRoot<span class=\"br0\">(</span><span class=\"kw5\">int</span> node<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> Scope.<span class=\"me0\">Declaration</span> d;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __VAR<span class=\"br0\">)</span> _var<span class=\"br0\">(</span>node<span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __BECOMES<span class=\"br0\">)</span> _assignment<span class=\"br0\"\
      >(</span>node<span class=\"br0\">)</span>;\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __IF<span class=\"br0\">)</span> _ifthenelse<span\
      \ class=\"br0\">(</span>node<span class=\"br0\">)</span>;\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >value</span> <span class=\"sy0\">==</span> __WHILE<span class=\"br0\">)</span>\
      \ _whiledo<span class=\"br0\">(</span>node<span class=\"br0\">)</span>;\n  \
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">==</span> __FUNC<span class=\"\
      br0\">)</span> _function<span class=\"br0\">(</span>node<span class=\"br0\"\
      >)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">==</span> NT_Function<span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span> _functioncall<span\
      \ class=\"br0\">(</span>node<span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>This will\
      \ execute a root node. A root node can be a variable or function declaration,\
      \ an assigment, if statement , while statement or a function call.</p>\n<p>Each\
      \ node type has it's own way of handling, but basically it's all the same. Each\
      \ function will be called with the current AST node to use.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"coMULTI\">/**\n  returns the value of the\
      \ nth child\n*/</span>\n<span class=\"kw1\">private</span> <span class=\"kw1\"\
      >function</span> <span class=\"kw5\">string</span> ChildValue<span class=\"\
      br0\">(</span><span class=\"kw5\">int</span> node, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">int</span> n<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">return</span> a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>a.<span class=\"me0\">Tree</span><span class=\"br0\"\
      >[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">children</span><span\
      \ class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      coMULTI\">/**\n  returns the id of the nth child\n*/</span>\n<span class=\"\
      kw1\">private</span> <span class=\"kw1\">function</span> <span class=\"kw5\"\
      >int</span> Child<span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ node, <span class=\"kw1\">optional</span> <span class=\"kw5\">int</span> n<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\"\
      >return</span> a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">children</span><span class=\"br0\"\
      >[</span>n<span class=\"br0\">]</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>These two function has as only purpose to keep the code below a bit\
      \ more readable. Just imagine what a mess it would be if I repeated the above\
      \ code in the rest of the class.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"coMULTI\">/**\n  converts BruteForce bool to UScript bool\n*/</span>\n\
      <span class=\"kw1\">private</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">bool</span> boolean<span class=\"br0\">(</span><span class=\"\
      kw5\">string</span> in<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> <span class=\"sy0\">!</span><span class=\"\
      br0\">(</span>in ~<span class=\"sy0\">=</span> __FALSE<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/**\n  uscript bool\
      \ to BruteForce bool\n*/</span>\n<span class=\"kw1\">private</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> boolToString<span class=\"\
      br0\">(</span><span class=\"kw5\">bool</span> in<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>in<span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ __TRUE;\n  <span class=\"kw2\">else</span> <span class=\"kw2\">return</span>\
      \ __FALSE;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>We can't use\
      \ the built-in boolean type cast because out bools are <i>true</i> and <i>false</i>\
      \ instead of <i>not 0</i> and <i>0</i>.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"coMULTI\">/**\n  Convert from one type to the other\n*/</span>\n\
      <span class=\"kw1\">private</span> <span class=\"kw1\">function</span> Scope.<span\
      \ class=\"me0\">Declaration</span> typeCast<span class=\"br0\">(</span>Scope.<span\
      \ class=\"me0\">Declaration</span> d, Scope.<span class=\"me0\">DeclarationType</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>d.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">==</span> type<span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> d;\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>type <span class=\"sy0\">==</span> DT_Int<span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>d.<span class=\"me0\">type</span> <span class=\"sy0\">==</span>\
      \ DT_Bool<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"br0\"\
      >(</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>boolean<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n    <span\
      \ class=\"kw2\">else</span> d.<span class=\"me0\">value</span> <span class=\"\
      sy0\">=</span> <span class=\"kw5\">String</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \ d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Int;\n \
      \ <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Int<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>d.<span class=\"me0\"\
      >type</span> <span class=\"sy0\">==</span> DT_Bool<span class=\"br0\">)</span>\
      \ d.<span class=\"me0\">value</span> <span class=\"sy0\">=</span> <span class=\"\
      kw5\">String</span><span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>boolean<span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\">String</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Float</span><span class=\"br0\"\
      >(</span>d.<span class=\"me0\">value</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n    d.<span class=\"me0\">type</span> <span class=\"\
      sy0\">=</span> DT_Float;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\"\
      >else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Bool<span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>d.<span class=\"me0\">type</span> <span class=\"sy0\">==</span> DT_String<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span>d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"st0\">\"\"</span><span class=\"\
      br0\">)</span>;\n    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>d.<span class=\"me0\">type</span> <span class=\"\
      sy0\">==</span> DT_Int<span class=\"br0\">)</span> d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\"\
      >else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> DT_Float<span class=\"\
      br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\">=</span>\
      \ boolToString<span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0.0</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">(</span>d.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n    d.<span class=\"\
      me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_String<span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    d.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">=</span> DT_String;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> d;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>This function makes type completeness possible, each type will be\
      \ converted into an other type.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">private</span> <span class=\"kw1\">function</span> _var<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> node, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">string</span> initval<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n                   <span class=\"\
      co1\">// name                                 value</span>\n  s.<span class=\"\
      me0\">newDeclaration</span><span class=\"br0\">(</span>ChildValue<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ s.<span class=\"me0\">stringToType</span><span class=\"br0\">(</span>ChildValue<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>, initval<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Declare a new variable\
      \ in the current scope. The optional initval is used during the passing of the\
      \ function arguments.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">private</span> <span class=\"kw1\">function</span> _assignment<span class=\"\
      br0\">(</span><span class=\"kw5\">int</span> node<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>                  <span class=\"co1\">// name  \
      \            expression            left hand type</span>\n  s.<span class=\"\
      me0\">setDeclaration</span><span class=\"br0\">(</span>ChildValue<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,\
      \ typeCast<span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>, s.<span class=\"me0\">getType</span><span\
      \ class=\"br0\">(</span>ChildValue<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">value</span> <span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">function</span> _ifthenelse<span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> node<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>boolean<span\
      \ class=\"br0\">(</span>typeCast<span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>, DT_Bool<span class=\"\
      br0\">)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"co1\">//if true</span>\n  <span class=\"\
      br0\">{</span>\n    _codeblock<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// then</span>\n  <span class=\"\
      br0\">}</span>\n  <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">children</span>.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"\
      nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">// else</span>\n\
      \  <span class=\"br0\">{</span>\n    _codeblock<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">2</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Check if the first child node\
      \ evaluates to <i>true</i>, and if so execute the second child node which is\
      \ the <i>then</i> statement. If not check if there's a third child (the optional\
      \ <i>else</i> part), and execute it.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">private</span> <span class=\"kw1\">function</span>\
      \ _whiledo<span class=\"br0\">(</span><span class=\"kw5\">int</span> node<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\"\
      >while</span> <span class=\"br0\">(</span>boolean<span class=\"br0\">(</span>typeCast<span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>, DT_Bool<span class=\"br0\">)</span>.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"co1\">//while true</span>\n  <span class=\"br0\">{</span>\n    _codeblock<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span\
      \ class=\"co1\">// do</span>\n  <span class=\"br0\">}</span>  \n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">private</span> <span class=\"kw1\">function</span>\
      \ _codeblock<span class=\"br0\">(</span><span class=\"kw5\">int</span> node<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>a.<span class=\"me0\"\
      >Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">value</span> <span class=\"sy0\">==</span> __BEGIN<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">children</span>.<span class=\"\
      me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n      ExecuteRoot<span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">children</span><span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span><span class=\"br0\">)</span>;\n    <span class=\"br0\"\
      >}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span>\
      \ <span class=\"br0\">{</span>\n    ExecuteRoot<span class=\"br0\">(</span>node<span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>If the current node is a <i>begin</i> root\
      \ node we will execute all it's children, if not it's just a single statement\
      \ and we execute that one.</p>\n<p>Note that I just call the ExecuteRoot function,\
      \ this means that there is a possibility for inline variable and function declaration\
      \ even tho the language specification doesn't allow it the interpreter accepts\
      \ it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >private</span> <span class=\"kw1\">function</span> Scope.<span class=\"me0\"\
      >Declaration</span> _expr<span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ node, <span class=\"kw1\">optional</span> Scope.<span class=\"me0\">DeclarationType</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> _boolex<span class=\"br0\">(</span>node, type<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">function</span> Scope.<span class=\"me0\">Declaration</span>\
      \ _boolex<span class=\"br0\">(</span><span class=\"kw5\">int</span> node, <span\
      \ class=\"kw1\">optional</span> Scope.<span class=\"me0\">DeclarationType</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> Scope.<span class=\"me0\">Declaration</span> d;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\"\
      >Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __LT<span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n      d <span class=\"sy0\">=</span> _expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>;\n      type <span\
      \ class=\"sy0\">=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Int<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span><span class=\"\
      kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw5\"\
      >Int</span><span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Float<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span><span class=\"\
      kw5\">Float</span><span class=\"br0\">(</span>d.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw5\"\
      >Float</span><span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Bool<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span><span class=\"\
      kw5\">Int</span><span class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> boolToString<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >&lt;</span> _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n\
      \      d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __LE<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Float<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;=</span> <span class=\"kw5\">Int</span><span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span\
      \ class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span>d.<span class=\"me0\">value</span> <span class=\"sy0\">&lt;=</span>\
      \ _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\"\
      >)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n  \
      \    d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __GT<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Float<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"kw5\">Int</span><span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span\
      \ class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span>d.<span class=\"me0\">value</span> <span class=\"sy0\">&gt;</span>\
      \ _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\"\
      >)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n  \
      \    d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __GE<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;=</span> <span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Float<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;=</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;=</span> <span class=\"kw5\">Int</span><span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span\
      \ class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span>d.<span class=\"me0\">value</span> <span class=\"sy0\">&gt;=</span>\
      \ _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\"\
      >)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n  \
      \    d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __EQ<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">==</span> <span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Float<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">==</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> boolToString<span class=\"br0\">(</span>Boolean<span class=\"br0\"\
      >(</span>d.<span class=\"me0\">value</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">==</span> Boolean<span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"\
      sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span class=\"me0\"\
      >value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">==</span> _expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span>;\n      d.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">=</span> DT_Bool;\n      <span class=\"kw2\">return</span>\
      \ d;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">==</span> __NE<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n      d <span class=\"sy0\"\
      >=</span> _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>;\n      type <span class=\"sy0\">=</span> d.<span class=\"me0\"\
      >type</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Int<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"\
      sy0\">==</span> DT_Float<span class=\"br0\">)</span> d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span><span\
      \ class=\"kw5\">Float</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">Float</span><span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"\
      sy0\">==</span> DT_Bool<span class=\"br0\">)</span> d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span>Boolean<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> Boolean<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> boolToString<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >!=</span> _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n\
      \      d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __AND<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n      d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> boolToString<span class=\"br0\">(</span> Boolean<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&amp;&amp;</span> Boolean<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>;\n      d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span>\
      \ DT_Bool;\n      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\"\
      >}</span>\n    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __OR<span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n      d <span class=\"sy0\">=</span> _expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n      d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> boolToString<span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">(</span>d.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> Boolean<span class=\"\
      br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n      d.<span class=\"me0\">type</span> <span class=\"\
      sy0\">=</span> DT_Bool;\n      <span class=\"kw2\">return</span> d;\n    <span\
      \ class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\"\
      >return</span> _accum<span class=\"br0\">(</span>node, type<span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Right hand\
      \ side will be type casted to the left hand side, that's why we temporarily\
      \ save the result of the left hand side so that we can pass the type to the\
      \ right hand side.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">private</span> <span class=\"kw1\">function</span> Scope.<span class=\"\
      me0\">Declaration</span> _accum<span class=\"br0\">(</span><span class=\"kw5\"\
      >int</span> node, <span class=\"kw1\">optional</span> Scope.<span class=\"me0\"\
      >DeclarationType</span> type<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n  <span class=\"kw1\">local</span> Scope.<span class=\"me0\">Declaration</span>\
      \ d;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __PLUS<span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n      d <span class=\"sy0\">=</span> _expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>;\n      type <span\
      \ class=\"sy0\">=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Int<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"br0\"\
      >(</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"\
      me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>\
      \ <span class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span class=\"\
      br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"\
      sy0\">==</span> DT_Float<span class=\"br0\">)</span> d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"\
      br0\">(</span><span class=\"kw5\">Float</span><span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >+</span> <span class=\"kw5\">Float</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Bool<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\"\
      >String</span><span class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"sy0\">!</span>Boolean<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> d.<span class=\"me0\"\
      >value</span> <span class=\"sy0\">$</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\">value</span>;\n\
      \      <span class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __MINUS<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">String</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span class=\"br0\"\
      >(</span>Child<span class=\"br0\">(</span>node, <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n   \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"\
      sy0\">==</span> DT_Float<span class=\"br0\">)</span> d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"\
      br0\">(</span><span class=\"kw5\">Float</span><span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >-</span> <span class=\"kw5\">Float</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Bool<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\"\
      >String</span><span class=\"br0\">(</span>Boolean<span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"sy0\">!</span>Boolean<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> _expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span>;\n      <span class=\"kw2\">return</span> d;\n\
      \    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">return</span> _mult<span class=\"br0\">(</span>node, type<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">private</span>\
      \ <span class=\"kw1\">function</span> Scope.<span class=\"me0\">Declaration</span>\
      \ _mult<span class=\"br0\">(</span><span class=\"kw5\">int</span> node, <span\
      \ class=\"kw1\">optional</span> Scope.<span class=\"me0\">DeclarationType</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> Scope.<span class=\"me0\">Declaration</span> d;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\"\
      >Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __MULTIPLY<span class=\"br0\">)</span>\n   \
      \ <span class=\"br0\">{</span>\n      d <span class=\"sy0\">=</span> _expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>;\n\
      \      type <span class=\"sy0\">=</span> d.<span class=\"me0\">type</span>;\n\
      \      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type <span\
      \ class=\"sy0\">==</span> DT_Int<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\">String</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> <span class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Float<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\"\
      >String</span><span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">String</span><span class=\"br0\">(</span>Boolean<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">||</span> Boolean<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>; \n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_String<span class=\"br0\">)</span> _expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// ??</span>\n      <span class=\"kw2\">return</span>\
      \ d;\n    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">==</span> __DIVIDE<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n      d <span class=\"sy0\"\
      >=</span> _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>;\n      type <span class=\"sy0\">=</span> d.<span class=\"me0\"\
      >type</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Int<span class=\"br0\">)</span> d.<span class=\"\
      me0\">value</span> <span class=\"sy0\">=</span>  <span class=\"kw5\">String</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >/</span> <span class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Float<span class=\"br0\">)</span> d.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> <span class=\"kw5\"\
      >String</span><span class=\"br0\">(</span><span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">/</span> <span class=\"kw5\">Float</span><span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Bool<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">String</span><span class=\"br0\">(</span>Boolean<span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>Boolean<span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>; \n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_String<span\
      \ class=\"br0\">)</span> _expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\
      \ type<span class=\"br0\">)</span>; <span class=\"co1\">//?</span>\n      <span\
      \ class=\"kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n    <span\
      \ class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >==</span> __MOD<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \      d <span class=\"sy0\">=</span> _expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span>, type<span class=\"br0\">)</span>;\n      type <span class=\"sy0\"\
      >=</span> d.<span class=\"me0\">type</span>;\n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_Int<span\
      \ class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span class=\"sy0\"\
      >=</span>  <span class=\"kw5\">String</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span><span class=\"kw5\">Int</span><span\
      \ class=\"br0\">(</span>d.<span class=\"me0\">value</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">%</span> <span class=\"kw5\">Int</span><span class=\"\
      br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span>\
      \ DT_Float<span class=\"br0\">)</span> d.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"br0\"\
      >(</span><span class=\"kw5\">Float</span><span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >%</span> <span class=\"kw5\">Float</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">==</span> DT_Bool<span class=\"br0\">)</span> _expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// ??</span>\n      <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>type <span class=\"sy0\">==</span> DT_String<span class=\"\
      br0\">)</span> _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>, type<span class=\"\
      br0\">)</span>; <span class=\"co1\">//?</span>\n      <span class=\"kw2\">return</span>\
      \ d;\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span\
      \ class=\"kw2\">return</span> _preop<span class=\"br0\">(</span>node, type<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >private</span> <span class=\"kw1\">function</span> Scope.<span class=\"me0\"\
      >Declaration</span> _preop<span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ node, <span class=\"kw1\">optional</span> Scope.<span class=\"me0\">DeclarationType</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> Scope.<span class=\"me0\">Declaration</span> d;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\"\
      >Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Keyword<span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"\
      br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">==</span> __NOT<span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n      d.<span class=\"me0\">type</span> <span class=\"\
      sy0\">=</span> DT_Bool;\n      d.<span class=\"me0\">value</span> <span class=\"\
      sy0\">=</span> BoolToString<span class=\"br0\">(</span><span class=\"sy0\">!</span>Boolean<span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,\
      \ DT_Bool<span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n      <span class=\"\
      kw2\">return</span> d;\n    <span class=\"br0\">}</span>\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">return</span> _operand<span class=\"br0\">(</span>node,\
      \ type<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">private</span> <span class=\"kw1\">function</span> Scope.<span\
      \ class=\"me0\">Declaration</span> _operand<span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> node, <span class=\"kw1\">optional</span> Scope.<span\
      \ class=\"me0\">DeclarationType</span> type<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> Scope.<span class=\"\
      me0\">Declaration</span> d;\n  d.<span class=\"me0\">value</span> <span class=\"\
      sy0\">=</span> a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span>;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >type</span> <span class=\"sy0\">==</span> NT_Identifier<span class=\"br0\"\
      >)</span>\n  <span class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span>\
      \ s.<span class=\"me0\">getDeclaration</span><span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">value</span><span class=\"br0\">)</span>;\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">else</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >type</span> <span class=\"sy0\">==</span> NT_String<span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    d.<span class=\"me0\">type</span> <span\
      \ class=\"sy0\">=</span> DT_String;\n  <span class=\"br0\">}</span>\n  <span\
      \ class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">type</span> <span class=\"sy0\"\
      >==</span> NT_Boolean<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_Bool;\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >type</span> <span class=\"sy0\">==</span> NT_Integer<span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    d.<span class=\"me0\">type</span> <span\
      \ class=\"sy0\">=</span> DT_Int;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">type</span> <span class=\"sy0\">==</span> NT_Float<span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    d.<span class=\"\
      me0\">type</span> <span class=\"sy0\">=</span> DT_Float;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\"\
      >[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">type</span> <span\
      \ class=\"sy0\">==</span> NT_Function<span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    d <span class=\"sy0\">=</span> _functioncall<span class=\"\
      br0\">(</span>node<span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">else</span> <span class=\"br0\">{</span>\n    <span class=\"\
      kw3\">Warn</span><span class=\"br0\">(</span><span class=\"st0\">\"Unexpected\
      \ node:\"</span><span class=\"sy0\">@</span>a.<span class=\"me0\">Tree</span><span\
      \ class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">Assert</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">false</span><span class=\"br0\"\
      >)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>type <span class=\"\
      sy0\">!=</span> <span class=\"kw7\">DT_None</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>d.<span\
      \ class=\"me0\">type</span> <span class=\"sy0\">!=</span> type<span class=\"\
      br0\">)</span><span class=\"br0\">)</span> d <span class=\"sy0\">=</span> typeCast<span\
      \ class=\"br0\">(</span>d, type<span class=\"br0\">)</span>; <span class=\"\
      co1\">// from to</span>\n  <span class=\"kw2\">return</span> d;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">private</span> <span class=\"kw1\">function</span>\
      \ Scope.<span class=\"me0\">Declaration</span> _functioncall<span class=\"br0\"\
      >(</span><span class=\"kw5\">int</span> node<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> Scope.<span class=\"\
      me0\">Declaration</span> d;\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> ~<span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"print\"</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span> typeCast<span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>, DT_String<span class=\"br0\">)</span>;\n    <span\
      \ class=\"kw3\">log</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span>\
      \ d;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\"\
      >[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span> ~<span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"argc\"</span><span class=\"br0\"\
      >)</span>\n  <span class=\"br0\">{</span>\n    d.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">=</span> DT_Int;\n    d.<span class=\"me0\">value</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">String</span><span class=\"\
      br0\">(</span>input.<span class=\"me0\">length</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">return</span> d;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> ~<span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"argv\"</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    d.<span class=\"me0\">type</span> <span class=\"sy0\">=</span> DT_String;\n\
      \    d.<span class=\"me0\">value</span> <span class=\"sy0\">=</span> input<span\
      \ class=\"br0\">[</span><span class=\"kw5\">Int</span><span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>, DT_Int<span class=\"br0\">)</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span><span class=\"br0\"\
      >]</span>;\n    <span class=\"kw2\">return</span> d;\n  <span class=\"br0\"\
      >}</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">value</span> ~<span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"int\"</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    d <span class=\"sy0\">=</span> typeCast<span class=\"br0\"\
      >(</span>_expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node,\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>, DT_Int<span class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span>\
      \ d;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\"\
      >[</span>node<span class=\"br0\">]</span>.<span class=\"me0\">value</span> ~<span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"float\"</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span>\
      \ typeCast<span class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span\
      \ class=\"br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>, DT_Float<span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">return</span> d;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> ~<span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"string\"</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    d <span class=\"sy0\">=</span> typeCast<span class=\"br0\">(</span>_expr<span\
      \ class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, DT_String<span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span> d;\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span> ~<span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"bool\"</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span> typeCast<span\
      \ class=\"br0\">(</span>_expr<span class=\"br0\">(</span>Child<span class=\"\
      br0\">(</span>node, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>, DT_Bool<span class=\"br0\">)</span>;\n    <span class=\"\
      kw2\">return</span> d;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\"\
      >else</span> <span class=\"br0\">{</span>\n    d <span class=\"sy0\">=</span>\
      \ s.<span class=\"me0\">getDeclaration</span><span class=\"br0\">(</span>a.<span\
      \ class=\"me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\"\
      >]</span>.<span class=\"me0\">value</span>, DT_Function<span class=\"br0\">)</span>;\n\
      \    d <span class=\"sy0\">=</span> _execfunction<span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span><span class=\"br0\">(</span>d.<span class=\"me0\"\
      >value</span><span class=\"br0\">)</span>, node<span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">return</span> d;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw3\">Warn</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"Undeclared function:\"</span><span class=\"sy0\">@</span>a.<span class=\"\
      me0\">Tree</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span><span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">Assert</span><span class=\"br0\">(</span><span class=\"kw6\">false</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>First check if the function call is a built-in function, otherwise look if\
      \ there's a custom function defined. If so, execute that node.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">private</span> <span class=\"kw1\"\
      >function</span> _function<span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ node<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      co1\">//               function name        </span>\n  s.<span class=\"me0\"\
      >newDeclaration</span><span class=\"br0\">(</span>ChildValue<span class=\"br0\"\
      >(</span>node, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, DT_Function,\
      \ <span class=\"kw5\">string</span><span class=\"br0\">(</span>node<span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>A function declaration, just take the first node and skip the rest.\
      \ We only need to read the rest when the function is executed.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">private</span> <span class=\"kw1\"\
      >function</span> Scope.<span class=\"me0\">Declaration</span> _execfunction<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> func, <span class=\"\
      kw5\">int</span> node<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> Scope.<span class=\"me0\">Declaration</span>\
      \ d;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i, j;\n\
      \  s.<span class=\"me0\">openScope</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;                      \n  s.<span class=\"me0\">newDeclaration</span><span\
      \ class=\"br0\">(</span>FUNCRESULT, s.<span class=\"me0\">stringToType</span><span\
      \ class=\"br0\">(</span>ChildValue<span class=\"br0\">(</span>func, <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// return type</span>\n  j <span\
      \ class=\"sy0\">=</span> Child<span class=\"br0\">(</span>func, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>; i <span class=\"sy0\">&lt;</span> a.<span class=\"me0\">tree</span><span\
      \ class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me0\">children</span>.<span\
      \ class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    _var<span class=\"br0\"\
      >(</span>Child<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span>,\
      \ _expr<span class=\"br0\">(</span>Child<span class=\"br0\">(</span>node, i<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">value</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">2</span>; i <span class=\"sy0\">&lt;</span> a.<span class=\"\
      me0\">tree</span><span class=\"br0\">[</span>func<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">children</span>.<span class=\"me0\">length</span>; i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span> <span class=\"co1\">// 0 = return\
      \ type, 1 = function name</span>\n  <span class=\"br0\">{</span>\n    ExecuteRoot<span\
      \ class=\"br0\">(</span>a.<span class=\"me0\">Tree</span><span class=\"br0\"\
      >[</span>func<span class=\"br0\">]</span>.<span class=\"me0\">children</span><span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"br0\">}</span>\n  d <span class=\"sy0\">=</span> s.<span class=\"\
      me0\">getDeclaration</span><span class=\"br0\">(</span>FUNCRESULT<span class=\"\
      br0\">)</span>;\n  s.<span class=\"me0\">closeScope</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span>\
      \ d;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Jump to the node\
      \ where the function is declared. We need node of the function call because\
      \ we need to input arguments. We only read the number of argument that are defined.\
      \ So it's possible to enter more arguments in a function call than required,\
      \ we just ignore them.</p>\n<p>Each function argument is a local variable with\
      \ an initial value, which would be the result of the expression passed to it.</p>\n\
      <p>When we enter the function we will first open a new scope level, this is\
      \ to distinguish local and global variables. A local and global variable may\
      \ have the same name, but the most local variable is just.</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.428 seconds\nReal time usage: 0.608 seconds\n\
      Preprocessor visited node count: 43/1000000\nPreprocessor generated node count:\
      \ 284/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:605-0!*!*!*!*!*!* and timestamp 20221118154748 and revision\
      \ id 1820\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:BruteForce/Interpreter"
  iwlinks: []
  wikitext:
    text: "<uscript>\nclass Interpreter extends Object dependsOn(AST) dependsOn(Scope)\
      \ dependsOn(Compiler);\n\nvar private AST a;\nvar private Scope s;\nvar private\
      \ array<string> input;\n\n// keywords\nconst __BEGIN                 = \"begin\"\
      ;\nconst __VAR                   = \"var\";\nconst __INTEGER               =\
      \ \"int\";\nconst __STRING                = \"string\";\nconst __FLOAT     \
      \            = \"float\";\nconst __BOOLEAN               = \"bool\";\nconst\
      \ __FUNC                  = \"function\";\nconst __BECOMES               = \"\
      =\";\nconst __WHILE                 = \"while\";\nconst __IF               \
      \     = \"if\";\nconst __LT                    = \"<\";\nconst __LE        \
      \            = \"<=\";\nconst __GT                    = \">\";\nconst __GE \
      \                   = \">=\";\nconst __EQ                    = \"==\";\nconst\
      \ __NE                    = \"!=\";\nconst __AND                   = \"&&\"\
      ;\nconst __OR                    = \"||\";\nconst __PLUS                  =\
      \ \"+\";\nconst __MINUS                 = \"-\";\nconst __MULTIPLY         \
      \     = \"*\";\nconst __DIVIDE                = \"/\";\nconst __MOD        \
      \           = \"%\";\nconst __NOT                   = \"!\";\nconst __TRUE \
      \                 = \"true\";\nconst __FALSE                 = \"false\";\n\
      // terminals -- end\n</uscript>\n\nThese are the keywords that we can encounter\
      \ in the AST\n\n<uscript>\n\nconst FUNCRESULT              = \"result\";\n</uscript>\n\
      \nthe name of the default local variable of function, the one that will contain\
      \ the result.\n\n<uscript>\n\nfunction Create(AST inAst, Scope inScope, array<string>\
      \ inInput)\n{\n  a = inAst;\n  s = inScope;\n  input = inInput;\n}\n\nfunction\
      \ Execute()\n{\n  local int i;\n  for (i = 0; i < a.Tree.length; i++)\n  {\n\
      \    if (a.Tree[i].parent == -1) ExecuteRoot(i);\n  }\n}\n</uscript>\n\nExecute\
      \ will walk through all the tree nodes to search for the main root nodes, without\
      \ a parent, and execute those.\n\n<uscript>\n\nprivate function ExecuteRoot(int\
      \ node)\n{\n  local Scope.Declaration d;\n  if (a.Tree[node].type == NT_Keyword)\n\
      \  {\n    if (a.Tree[node].value == __VAR) _var(node);\n    if (a.Tree[node].value\
      \ == __BECOMES) _assignment(node);\n    if (a.Tree[node].value == __IF) _ifthenelse(node);\n\
      \    if (a.Tree[node].value == __WHILE) _whiledo(node);\n    if (a.Tree[node].value\
      \ == __FUNC) _function(node);\n  }\n  if (a.Tree[node].type == NT_Function)\n\
      \  {\n    d = _functioncall(node);\n  }\n}\n</uscript>\n\nThis will execute\
      \ a root node. A root node can be a variable or function declaration, an assigment,\
      \ if statement , while statement or a function call.\n\nEach node type has it's\
      \ own way of handling, but basically it's all the same. Each function will be\
      \ called with the current AST node to use.\n\n<uscript>\n\n/**\n  returns the\
      \ value of the nth child\n*/\nprivate function string ChildValue(int node, optional\
      \ int n)\n{\n  return a.Tree[a.Tree[node].children[n]].value;\n}\n\n/**\n  returns\
      \ the id of the nth child\n*/\nprivate function int Child(int node, optional\
      \ int n)\n{\n  return a.Tree[node].children[n];\n}\n</uscript>\n\nThese two\
      \ function has as only purpose to keep the code below a bit more readable. Just\
      \ imagine what a mess it would be if I repeated the above code in the rest of\
      \ the class.\n\n<uscript>\n\n/**\n  converts BruteForce bool to UScript bool\n\
      */\nprivate function bool boolean(string in)\n{\n  return !(in ~= __FALSE);\n\
      }\n\n/**\n  uscript bool to BruteForce bool\n*/\nprivate function string boolToString(bool\
      \ in)\n{\n  if (in) return __TRUE;\n  else return __FALSE;\n}\n</uscript>\n\n\
      We can't use the built-in boolean type cast because out bools are ''true'' and\
      \ ''false'' instead of ''not 0'' and ''0''.\n\n<uscript>\n\n/**\n  Convert from\
      \ one type to the other\n*/\nprivate function Scope.Declaration typeCast(Scope.Declaration\
      \ d, Scope.DeclarationType type)\n{\n  if (d.type == type) return d;\n  if (type\
      \ == DT_Int)\n  {\n    if (d.type == DT_Bool) d.value = String(Int(boolean(d.value)));\n\
      \    else d.value = String(Int(d.value));\n    d.type = DT_Int;\n  }\n  else\
      \ if (type == DT_Int)\n  {\n    if (d.type == DT_Bool) d.value = String(Float(boolean(d.value)));\n\
      \    else d.value = String(Float(d.value));\n    d.type = DT_Float;\n  }\n \
      \ else if (type == DT_Bool)\n  {\n    if (d.type == DT_String) d.value = boolToString(d.value\
      \ != \"\");\n    else if (d.type == DT_Int) d.value = boolToString(Int(d.value)\
      \ != 0);\n    else if (d.type == DT_Float) d.value = boolToString(Float(d.value)\
      \ != 0.0);\n    else d.value = boolToString(Boolean(d.value));\n    d.type =\
      \ DT_Bool;\n  }\n  else if (type == DT_String)\n  {\n    d.type = DT_String;\n\
      \  }\n  return d;\n}\n</uscript>\n\nThis function makes type completeness possible,\
      \ each type will be converted into an other type.\n\n<uscript>\n\nprivate function\
      \ _var(int node, optional string initval)\n{\n                   // name   \
      \                              value\n  s.newDeclaration(ChildValue(node, 1),\
      \ s.stringToType(ChildValue(node, 0)), initval);\n}\n</uscript>\n\nDeclare a\
      \ new variable in the current scope. The optional initval is used during the\
      \ passing of the function arguments.\n\n<uscript>\n\nprivate function _assignment(int\
      \ node)\n{                  // name              expression            left\
      \ hand type\n  s.setDeclaration(ChildValue(node, 0), typeCast(_expr(Child(node,\
      \ 1)), s.getType(ChildValue(node, 0))).value );\n}\n\nprivate function _ifthenelse(int\
      \ node)\n{\n  if (boolean(typeCast(_expr(Child(node, 0)), DT_Bool).value)) //if\
      \ true\n  {\n    _codeblock(Child(node, 1)); // then\n  }\n  else if (a.Tree[node].children.length\
      \ >= 3) // else\n  {\n    _codeblock(Child(node, 2));\n  }\n}\n</uscript>\n\n\
      Check if the first child node evaluates to ''true'', and if so execute the second\
      \ child node which is the ''then'' statement. If not check if there's a third\
      \ child (the optional ''else'' part), and execute it.\n\n<uscript>\n\nprivate\
      \ function _whiledo(int node)\n{\n  while (boolean(typeCast(_expr(Child(node,\
      \ 0)), DT_Bool).value)) //while true\n  {\n    _codeblock(Child(node, 1)); //\
      \ do\n  }  \n}\n\nprivate function _codeblock(int node)\n{\n  local int i;\n\
      \  if ((a.Tree[node].type == NT_Keyword) && (a.Tree[node].value == __BEGIN))\n\
      \  {\n    for (i = 0; i < a.Tree[node].children.length; i++)\n    {\n      ExecuteRoot(a.Tree[node].children[i]);\n\
      \    }\n  }\n  else {\n    ExecuteRoot(node);\n  }\n}\n</uscript>\n\nIf the\
      \ current node is a ''begin'' root node we will execute all it's children, if\
      \ not it's just a single statement and we execute that one.\n\nNote that I just\
      \ call the ExecuteRoot function, this means that there is a possibility for\
      \ inline variable and function declaration even tho the language specification\
      \ doesn't allow it the interpreter accepts it.\n\n<uscript>\n\nprivate function\
      \ Scope.Declaration _expr(int node, optional Scope.DeclarationType type)\n{\n\
      \  return _boolex(node, type);\n}\n\nprivate function Scope.Declaration _boolex(int\
      \ node, optional Scope.DeclarationType type)\n{\n  local Scope.Declaration d;\n\
      \  if (a.Tree[node].type == NT_Keyword)\n  {\n    if (a.Tree[node].value ==\
      \ __LT)\n    {\n      d = _expr(Child(node, 0), type);\n      type = d.type;\n\
      \      if (type == DT_Int) d.value = boolToString(Int(d.value) < Int(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Float) d.value = boolToString(Float(d.value)\
      \ < Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool) d.value\
      \ = boolToString(Int(Boolean(d.value)) < Int(Boolean(_expr(Child(node, 1), type).value)));\n\
      \      if (type == DT_String) d.value = boolToString(d.value < _expr(Child(node,\
      \ 1), type).value);\n      d.type = DT_Bool;\n      return d;\n    }\n    else\
      \ if (a.Tree[node].value == __LE)\n    {\n      d = _expr(Child(node, 0), type);\n\
      \      type = d.type;\n      if (type == DT_Int) d.value = boolToString(Int(d.value)\
      \ <= Int(_expr(Child(node, 1), type).value));\n      if (type == DT_Float) d.value\
      \ = boolToString(Float(d.value) <= Float(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_Bool) d.value = boolToString(Int(Boolean(d.value)) <=\
      \ Int(Boolean(_expr(Child(node, 1), type).value)));\n      if (type == DT_String)\
      \ d.value = boolToString(d.value <= _expr(Child(node, 1), type).value);\n  \
      \    d.type = DT_Bool;\n      return d;\n    }\n    else if (a.Tree[node].value\
      \ == __GT)\n    {\n      d = _expr(Child(node, 0), type);\n      type = d.type;\n\
      \      if (type == DT_Int) d.value = boolToString(Int(d.value) > Int(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Float) d.value = boolToString(Float(d.value)\
      \ > Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool) d.value\
      \ = boolToString(Int(Boolean(d.value)) > Int(Boolean(_expr(Child(node, 1), type).value)));\n\
      \      if (type == DT_String) d.value = boolToString(d.value > _expr(Child(node,\
      \ 1), type).value);\n      d.type = DT_Bool;\n      return d;\n    }\n    else\
      \ if (a.Tree[node].value == __GE)\n    {\n      d = _expr(Child(node, 0), type);\n\
      \      type = d.type;\n      if (type == DT_Int) d.value = boolToString(Int(d.value)\
      \ >= Int(_expr(Child(node, 1), type).value));\n      if (type == DT_Float) d.value\
      \ = boolToString(Float(d.value) >= Float(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_Bool) d.value = boolToString(Int(Boolean(d.value)) >=\
      \ Int(Boolean(_expr(Child(node, 1), type).value)));\n      if (type == DT_String)\
      \ d.value = boolToString(d.value >= _expr(Child(node, 1), type).value);\n  \
      \    d.type = DT_Bool;\n      return d;\n    }\n    else if (a.Tree[node].value\
      \ == __EQ)\n    {\n      d = _expr(Child(node, 0), type);\n      type = d.type;\n\
      \      if (type == DT_Int) d.value = boolToString(Int(d.value) == Int(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Float) d.value = boolToString(Float(d.value)\
      \ == Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool)\
      \ d.value = boolToString(Boolean(d.value) == Boolean(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_String) d.value = boolToString(d.value == _expr(Child(node,\
      \ 1), type).value);\n      d.type = DT_Bool;\n      return d;\n    }\n    else\
      \ if (a.Tree[node].value == __NE)\n    {\n      d = _expr(Child(node, 0), type);\n\
      \      type = d.type;\n      if (type == DT_Int) d.value = boolToString(Int(d.value)\
      \ != Int(_expr(Child(node, 1), type).value));\n      if (type == DT_Float) d.value\
      \ = boolToString(Float(d.value) != Float(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_Bool) d.value = boolToString(Boolean(d.value) != Boolean(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_String) d.value = boolToString(d.value\
      \ != _expr(Child(node, 1), type).value);\n      d.type = DT_Bool;\n      return\
      \ d;\n    }\n    else if (a.Tree[node].value == __AND)\n    {\n      d = _expr(Child(node,\
      \ 0));\n      d.value = boolToString( Boolean(d.value) && Boolean(_expr(Child(node,\
      \ 1)).value) );\n      d.type = DT_Bool;\n      return d;\n    }\n    else if\
      \ (a.Tree[node].value == __OR)\n    {\n      d = _expr(Child(node, 0));\n  \
      \    d.value = boolToString(Boolean(d.value) || Boolean(_expr(Child(node, 1)).value));\n\
      \      d.type = DT_Bool;\n      return d;\n    }\n  }\n  return _accum(node,\
      \ type);\n}\n</uscript>\n\nRight hand side will be type casted to the left hand\
      \ side, that's why we temporarily save the result of the left hand side so that\
      \ we can pass the type to the right hand side.\n\n<uscript>\n\nprivate function\
      \ Scope.Declaration _accum(int node, optional Scope.DeclarationType type)\n\
      {\n  local Scope.Declaration d;\n  if (a.Tree[node].type == NT_Keyword)\n  {\n\
      \    if (a.Tree[node].value == __PLUS)\n    {\n      d = _expr(Child(node, 0),\
      \ type);\n      type = d.type;\n      if (type == DT_Int) d.value = String(Int(d.value)\
      \ + Int(_expr(Child(node, 1), type).value));\n      if (type == DT_Float) d.value\
      \ = String(Float(d.value) + Float(_expr(Child(node, 1), type).value));\n   \
      \   if (type == DT_Bool) d.value = String(Boolean(d.value) && !Boolean(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_String) d.value = d.value $ _expr(Child(node,\
      \ 1), type).value;\n      return d;\n    }\n    else if (a.Tree[node].value\
      \ == __MINUS)\n    {\n      d = _expr(Child(node, 0), type);\n      type = d.type;\n\
      \      if (type == DT_Int) d.value = String(Int(d.value) - Int(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Float) d.value = String(Float(d.value)\
      \ - Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool) d.value\
      \ = String(Boolean(d.value) && !Boolean(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_String) _expr(Child(node, 1), type).value;\n      return\
      \ d;\n    }\n  }\n  return _mult(node, type);\n}\n\nprivate function Scope.Declaration\
      \ _mult(int node, optional Scope.DeclarationType type)\n{\n  local Scope.Declaration\
      \ d;\n  if (a.Tree[node].type == NT_Keyword)\n  {\n    if (a.Tree[node].value\
      \ == __MULTIPLY)\n    {\n      d = _expr(Child(node, 0), type);\n      type\
      \ = d.type;\n      if (type == DT_Int) d.value = String(Int(d.value) * Int(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Float) d.value = String(Float(d.value)\
      \ * Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool) d.value\
      \ = String(Boolean(d.value) || Boolean(_expr(Child(node, 1), type).value));\
      \ \n      if (type == DT_String) _expr(Child(node, 1), type); // ??\n      return\
      \ d;\n    }\n    else if (a.Tree[node].value == __DIVIDE)\n    {\n      d =\
      \ _expr(Child(node, 0), type);\n      type = d.type;\n      if (type == DT_Int)\
      \ d.value =  String(Int(d.value) / Int(_expr(Child(node, 1), type).value));\n\
      \      if (type == DT_Float) d.value = String(Float(d.value) / Float(_expr(Child(node,\
      \ 1), type).value));\n      if (type == DT_Bool) d.value = String(Boolean(d.value)\
      \ || !Boolean(_expr(Child(node, 1), type).value)); \n      if (type == DT_String)\
      \ _expr(Child(node, 1), type); //?\n      return d;\n    }\n    else if (a.Tree[node].value\
      \ == __MOD)\n    {\n      d = _expr(Child(node, 0), type);\n      type = d.type;\n\
      \      if (type == DT_Int) d.value =  String(Int(Int(d.value) % Int(_expr(Child(node,\
      \ 1), type).value)));\n      if (type == DT_Float) d.value = String(Float(d.value)\
      \ % Float(_expr(Child(node, 1), type).value));\n      if (type == DT_Bool) _expr(Child(node,\
      \ 1), type); // ??\n      if (type == DT_String) _expr(Child(node, 1), type);\
      \ //?\n      return d;\n    }\n  }\n  return _preop(node, type);\n}\n\nprivate\
      \ function Scope.Declaration _preop(int node, optional Scope.DeclarationType\
      \ type)\n{\n  local Scope.Declaration d;\n  if (a.Tree[node].type == NT_Keyword)\n\
      \  {\n    if (a.Tree[node].value == __NOT)\n    {\n      d.type = DT_Bool;\n\
      \      d.value = BoolToString(!Boolean(_expr(Child(node, 0), DT_Bool).value));\n\
      \      return d;\n    }\n  }\n  return _operand(node, type);\n}\n\nprivate function\
      \ Scope.Declaration _operand(int node, optional Scope.DeclarationType type)\n\
      {\n  local Scope.Declaration d;\n  d.value = a.Tree[node].value;\n  if (a.Tree[node].type\
      \ == NT_Identifier)\n  {\n    d = s.getDeclaration(a.Tree[node].value);\n  }\n\
      \  else if (a.Tree[node].type == NT_String)\n  {\n    d.type = DT_String;\n\
      \  }\n  else if (a.Tree[node].type == NT_Boolean)\n  {\n    d.type = DT_Bool;\n\
      \  }\n  else if (a.Tree[node].type == NT_Integer)\n  {\n    d.type = DT_Int;\n\
      \  }\n  else if (a.Tree[node].type == NT_Float)\n  {\n    d.type = DT_Float;\n\
      \  }\n  else if (a.Tree[node].type == NT_Function)\n  {\n    d = _functioncall(node);\n\
      \  }\n  else {\n    Warn(\"Unexpected node:\"@a.Tree[node].value);\n    Assert(false);\n\
      \  }\n  if ((type != DT_None) && (d.type != type)) d = typeCast(d, type); //\
      \ from to\n  return d;\n}\n\nprivate function Scope.Declaration _functioncall(int\
      \ node)\n{\n  local Scope.Declaration d;\n  if (a.Tree[node].value ~= \"print\"\
      )\n  {\n    d = typeCast(_expr(Child(node, 0)), DT_String);\n    log(d.value);\n\
      \    return d;\n  }\n  if (a.Tree[node].value ~= \"argc\")\n  {\n    d.type\
      \ = DT_Int;\n    d.value = String(input.length);\n    return d;\n  }\n  if (a.Tree[node].value\
      \ ~= \"argv\")\n  {\n    d.type = DT_String;\n    d.value = input[Int(_expr(Child(node,\
      \ 0), DT_Int).value)];\n    return d;\n  }\n  if (a.Tree[node].value ~= \"int\"\
      )\n  {\n    d = typeCast(_expr(Child(node, 0)), DT_Int);\n    return d;\n  }\n\
      \  if (a.Tree[node].value ~= \"float\")\n  {\n    d = typeCast(_expr(Child(node,\
      \ 0)), DT_Float);\n    return d;\n  }\n  if (a.Tree[node].value ~= \"string\"\
      )\n  {\n    d = typeCast(_expr(Child(node, 0)), DT_String);\n    return d;\n\
      \  }\n  if (a.Tree[node].value ~= \"bool\")\n  {\n    d = typeCast(_expr(Child(node,\
      \ 0)), DT_Bool);\n    return d;\n  }\n  else {\n    d = s.getDeclaration(a.Tree[node].value,\
      \ DT_Function);\n    d = _execfunction(int(d.value), node);\n    return d;\n\
      \  }\n  Warn(\"Undeclared function:\"@a.Tree[node].value);\n  Assert(false);\n\
      }\n</uscript>\n\nFirst check if the function call is a built-in function, otherwise\
      \ look if there's a custom function defined. If so, execute that node.\n\n<uscript>\n\
      \nprivate function _function(int node)\n{\n  //               function name\
      \        \n  s.newDeclaration(ChildValue(node, 1), DT_Function, string(node));\n\
      }\n</uscript>\n\nA function declaration, just take the first node and skip the\
      \ rest. We only need to read the rest when the function is executed.\n\n<uscript>\n\
      \nprivate function Scope.Declaration _execfunction(int func, int node)\n{\n\
      \  local Scope.Declaration d;\n  local int i, j;\n  s.openScope();         \
      \             \n  s.newDeclaration(FUNCRESULT, s.stringToType(ChildValue(func,\
      \ 0))); // return type\n  j = Child(func, 1);\n  for (i = 0; i < a.tree[j].children.length;\
      \ i++)\n  {\n    _var(Child(j, i), _expr(Child(node, i)).value);\n  }\n  for\
      \ (i = 2; i < a.tree[func].children.length; i++) // 0 = return type, 1 = function\
      \ name\n  {\n    ExecuteRoot(a.Tree[func].children[i]);\n  }\n  d = s.getDeclaration(FUNCRESULT);\n\
      \  s.closeScope();\n  return d;\n}\n</uscript>\n\nJump to the node where the\
      \ function is declared. We need node of the function call because we need to\
      \ input arguments. We only read the number of argument that are defined. So\
      \ it's possible to enter more arguments in a function call than required, we\
      \ just ignore them.\n\nEach function argument is a local variable with an initial\
      \ value, which would be the result of the expression passed to it.\n\nWhen we\
      \ enter the function we will first open a new scope level, this is to distinguish\
      \ local and global variables. A local and global variable may have the same\
      \ name, but the most local variable is just."
  properties: []
  revId: 1820
name: "Legacy:BruteForce/Interpreter"
revision:
  revid: 1820
  parentid: 1821
  user: "El Muerte TDS"
  timestamp: 1051198837.000000000
  comment: "*"
timestamp: 1668786393.194019000
