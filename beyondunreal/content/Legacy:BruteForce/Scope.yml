---
parse:
  title: "Legacy:BruteForce/Scope"
  text:
    text: "<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"coMULTI\">/**\n\
      \  Keep track of declarations in diffirent scopes\n*/</span>\n<span class=\"\
      kw1\">class</span> Scope <span class=\"kw1\">extends</span> <span class=\"kw8\"\
      >Object</span> <span class=\"kw1\">exportstructs</span>;\n \n<span class=\"\
      kw1\">var</span> <span class=\"kw1\">private</span> <span class=\"kw5\">int</span>\
      \ ScopeLevel;\n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ verbose;\n \n<span class=\"kw1\">enum</span> DeclarationType\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw7\">DT_None</span>,\n  DT_String,\n  DT_Int,\n\
      \  DT_Float,\n  DT_Bool,\n  DT_Function,\n<span class=\"br0\">}</span>;</pre></div>\n\
      </div>\n<p>The diffirent types of declarations we have. The DT_None is a safe\
      \ guard to be used for optional function arguments and should not be used for\
      \ actualy declarations.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">struct</span> Declaration\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">var</span> <span class=\"kw5\">string</span> <span class=\"kw5\">name</span>;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">string</span> value;\n\
      \  <span class=\"kw1\">var</span> <span class=\"kw5\">int</span> scopelevel;\n\
      \  <span class=\"kw1\">var</span> DeclarationType type;\n<span class=\"br0\"\
      >}</span>;\n<span class=\"kw1\">var</span> array<span class=\"sy0\">&lt;</span>Declaration<span\
      \ class=\"sy0\">&gt;</span> declarations;</pre></div>\n</div>\n<p>The value\
      \ can be anything: a string, an int or even a tree node.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> Declaration getDeclaration<span\
      \ class=\"br0\">(</span><span class=\"kw5\">string</span> <span class=\"kw5\"\
      >name</span>, <span class=\"kw1\">optional</span> DeclarationType type<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> declarations.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span>; i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span>;\
      \ i<span class=\"sy0\">--</span><span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>declarations<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw5\">name</span> ~<span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">name</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>declarations<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">scopelevel</span>\
      \ <span class=\"sy0\">&lt;=</span> ScopeLevel<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>verbose<span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span>ScopeLevel<span class=\"sy0\">$</span><span\
      \ class=\"st0\">\"] getDeclaration(\"</span><span class=\"sy0\">$</span>name<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\", \"</span><span class=\"sy0\"\
      >$</span>type<span class=\"sy0\">$</span><span class=\"st0\">\")\"</span>, <span\
      \ class=\"st0\">'Scope'</span><span class=\"br0\">)</span>;\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>type\
      \ <span class=\"sy0\">!=</span> <span class=\"kw7\">DT_None</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>declarations<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">type</span>\
      \ <span class=\"sy0\">!=</span> type<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n      <span class=\"br0\">{</span>\n        <span class=\"kw3\"\
      >Warn</span><span class=\"br0\">(</span><span class=\"st0\">\"Declaration type\
      \ doesn't match:\"</span><span class=\"sy0\">@</span><span class=\"kw5\">name</span><span\
      \ class=\"sy0\">@</span><span class=\"st0\">\"has\"</span><span class=\"sy0\"\
      >@</span>declarations<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">type</span><span class=\"sy0\">@</span><span class=\"st0\">\"\
      requested\"</span><span class=\"sy0\">@</span>type<span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">Assert</span><span class=\"br0\">(</span><span\
      \ class=\"kw6\">false</span><span class=\"br0\">)</span>;\n      <span class=\"\
      br0\">}</span>\n      <span class=\"kw2\">return</span> declarations<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n    <span class=\"br0\">}</span>\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw3\">Warn</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Undeclared identifier:\"</span><span class=\"\
      sy0\">@</span><span class=\"kw5\">name</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">Assert</span><span class=\"br0\">(</span><span class=\"\
      kw6\">false</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Look up a declaration in the declaration table. We start from the\
      \ bottom because the the variables with the highest scope level are at the bottom\
      \ and mostlikely they are used more that the low level scope declarations.</p>\n\
      <p>We also check the declaration type to match the requested type. This is only\
      \ used to divide functions and normal variables at the moment.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> DeclarationType getType<span\
      \ class=\"br0\">(</span><span class=\"kw5\">string</span> <span class=\"kw5\"\
      >name</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ declarations.<span class=\"me0\">length</span><span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span>; i <span class=\"sy0\">&gt;=</span> <span class=\"\
      nu0\">0</span>; i<span class=\"sy0\">--</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"kw5\">name</span> ~<span class=\"sy0\"\
      >=</span> <span class=\"kw5\">name</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>declarations<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">scopelevel</span>\
      \ <span class=\"sy0\">&lt;=</span> ScopeLevel<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>verbose<span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span>ScopeLevel<span class=\"sy0\">$</span><span\
      \ class=\"st0\">\"] getType(\"</span><span class=\"sy0\">$</span>name<span class=\"\
      sy0\">$</span><span class=\"st0\">\") =\"</span><span class=\"sy0\">@</span>declarations<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">type</span>,\
      \ <span class=\"st0\">'Scope'</span><span class=\"br0\">)</span>;\n      <span\
      \ class=\"kw2\">return</span> declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">type</span>;\n    <span class=\"\
      br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw3\">Warn</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Undeclared identifier:\"</span><span\
      \ class=\"sy0\">@</span><span class=\"kw5\">name</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">Assert</span><span class=\"br0\">(</span><span class=\"\
      kw6\">false</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">string</span> setDeclaration<span\
      \ class=\"br0\">(</span><span class=\"kw5\">string</span> <span class=\"kw5\"\
      >name</span>, <span class=\"kw5\">string</span> value, <span class=\"kw1\">optional</span>\
      \ DeclarationType type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\"\
      >=</span> declarations.<span class=\"me0\">length</span><span class=\"sy0\"\
      >-</span><span class=\"nu0\">1</span>; i <span class=\"sy0\">&gt;=</span> <span\
      \ class=\"nu0\">0</span>; i<span class=\"sy0\">--</span><span class=\"br0\"\
      >)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>declarations<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw5\">name</span>\
      \ ~<span class=\"sy0\">=</span> <span class=\"kw5\">name</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>declarations<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">scopelevel</span>\
      \ <span class=\"sy0\">&lt;=</span> ScopeLevel<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>verbose<span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span>ScopeLevel<span class=\"sy0\">$</span><span\
      \ class=\"st0\">\"] setDeclaration(\"</span><span class=\"sy0\">$</span>name<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\", \"</span><span class=\"sy0\"\
      >$</span>value<span class=\"sy0\">$</span><span class=\"st0\">\", \"</span><span\
      \ class=\"sy0\">$</span>type<span class=\"sy0\">$</span><span class=\"st0\"\
      >\")\"</span>, <span class=\"st0\">'Scope'</span><span class=\"br0\">)</span>;\n\
      \      declarations<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">value</span> <span class=\"sy0\">=</span> value;\n      <span\
      \ class=\"kw2\">return</span> declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">value</span>;\n    <span class=\"\
      br0\">}</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw3\">Warn</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Undeclared identifier:\"</span><span\
      \ class=\"sy0\">@</span><span class=\"kw5\">name</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">Assert</span><span class=\"br0\">(</span><span class=\"\
      kw6\">false</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> newDeclaration<span class=\"br0\">(</span><span\
      \ class=\"kw5\">string</span> <span class=\"kw5\">name</span>, <span class=\"\
      kw1\">optional</span> DeclarationType type, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> value<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> i;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> declarations.<span class=\"me0\">length</span>; i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      br0\">(</span>declarations<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"kw5\">name</span> ~<span class=\"sy0\">=</span> <span class=\"kw5\"\
      >name</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span>declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">scopelevel</span> <span class=\"\
      sy0\">==</span> ScopeLevel<span class=\"br0\">)</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n      <span class=\"kw3\">Warn</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Identifier redeclared:\"</span><span\
      \ class=\"sy0\">@</span><span class=\"kw5\">name</span><span class=\"br0\">)</span>;\n\
      \      <span class=\"kw2\">Assert</span><span class=\"br0\">(</span><span class=\"\
      kw6\">false</span><span class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>verbose<span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>\
      \ <span class=\"br0\">)</span> <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>ScopeLevel<span class=\"sy0\">$</span><span class=\"st0\">\"]\
      \ newDeclaration(\"</span><span class=\"sy0\">$</span>name<span class=\"sy0\"\
      >$</span><span class=\"st0\">\", \"</span><span class=\"sy0\">$</span>type<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\")\"</span>, <span class=\"st0\"\
      >'Scope'</span><span class=\"br0\">)</span>;\n  declarations.<span class=\"\
      me0\">length</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span\
      \ class=\"nu0\">1</span>;\n  declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"kw5\">name</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw5\">name</span>;\n  declarations<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">scopelevel</span>\
      \ <span class=\"sy0\">=</span> ScopeLevel;\n  declarations<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">value</span> <span\
      \ class=\"sy0\">=</span> value;\n  declarations<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">type</span> <span class=\"sy0\"\
      >=</span> type;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ openScope<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>verbose<span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\"\
      >)</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span>ScopeLevel<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\"] openScope()\"</span>, <span\
      \ class=\"st0\">'Scope'</span><span class=\"br0\">)</span>;\n  ScopeLevel<span\
      \ class=\"sy0\">++</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>openScope is easy, it just increases the current scope level, new declarations\
      \ will automatically be put in this scope level.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> closeScope<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>verbose<span class=\"\
      sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\
      \ <span class=\"kw3\">log</span><span class=\"br0\">(</span>ScopeLevel<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\"] closeScope()\"</span>, <span\
      \ class=\"st0\">'Scope'</span><span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ declarations.<span class=\"me0\">length</span><span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span>; i <span class=\"sy0\">&gt;=</span> <span class=\"\
      nu0\">0</span>; i<span class=\"sy0\">--</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>declarations<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">scopelevel</span> <span class=\"sy0\">&gt;=</span> ScopeLevel<span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      declarations.<span\
      \ class=\"me0\">remove</span><span class=\"br0\">(</span>i, <span class=\"nu0\"\
      >1</span><span class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n \
      \ <span class=\"br0\">}</span>\n  ScopeLevel<span class=\"sy0\">--</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>On closeScope we need to\
      \ remove all previously declared variables in this, or higher, scope. After\
      \ that we decrease the scope level.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">function</span> DeclarationType\
      \ stringToType<span class=\"br0\">(</span><span class=\"kw5\">string</span>\
      \ type<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type ~<span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"string\"</span><span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> DT_String;\n  <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type ~<span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"int\"</span><span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> DT_Int;\n  <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type ~<span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"float\"</span><span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> DT_Float;\n  <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>type ~<span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"bool\"</span><span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> DT_Bool;\n  <span class=\"kw3\">Warn</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Unknown type\"</span><span class=\"sy0\"\
      >@</span>type<span class=\"br0\">)</span>;\n  <span class=\"kw2\">assert</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">false</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Convert a string\
      \ to a declaration type.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  ScopeLevel<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>\n  verbose<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.148 seconds\nReal time\
      \ usage: 0.392 seconds\nPreprocessor visited node count: 22/1000000\nPreprocessor\
      \ generated node count: 144/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:606-0!*!*!*!*!*!* and timestamp\
      \ 20221118154755 and revision id 1822\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:BruteForce/Scope"
  iwlinks: []
  wikitext:
    text: "<uscript>\n/**\n  Keep track of declarations in diffirent scopes\n*/\n\
      class Scope extends Object exportstructs;\n\nvar private int ScopeLevel;\nvar\
      \ int verbose;\n\nenum DeclarationType\n{\n  DT_None,\n  DT_String,\n  DT_Int,\n\
      \  DT_Float,\n  DT_Bool,\n  DT_Function,\n};\n</uscript>\n\nThe diffirent types\
      \ of declarations we have. The DT_None is a safe guard to be used for optional\
      \ function arguments and should not be used for actualy declarations.\n\n<uscript>\n\
      \nstruct Declaration\n{\n  var string name;\n  var string value;\n  var int\
      \ scopelevel;\n  var DeclarationType type;\n};\nvar array<Declaration> declarations;\n\
      </uscript>\n\nThe value can be anything: a string, an int or even a tree node.\
      \ \n\n<uscript>\n\nfunction Declaration getDeclaration(string name, optional\
      \ DeclarationType type)\n{\n  local int i;\n  for (i = declarations.length-1;\
      \ i >= 0; i--)\n  {\n    if ((declarations[i].name ~= name) && (declarations[i].scopelevel\
      \ <= ScopeLevel))\n    {\n      if (verbose> 0 ) log(ScopeLevel$\"] getDeclaration(\"\
      $name$\", \"$type$\")\", 'Scope');\n      if ((type != DT_None) && (declarations[i].type\
      \ != type))\n      {\n        Warn(\"Declaration type doesn't match:\"@name@\"\
      has\"@declarations[i].type@\"requested\"@type);\n        Assert(false);\n  \
      \    }\n      return declarations[i];\n    }\n  }\n  Warn(\"Undeclared identifier:\"\
      @name);\n  Assert(false);\n}\n</uscript>\n\nLook up a declaration in the declaration\
      \ table. We start from the bottom because the the variables with the highest\
      \ scope level are at the bottom and mostlikely they are used more that the low\
      \ level scope declarations.\n\nWe also check the declaration type to match the\
      \ requested type. This is only used to divide functions and normal variables\
      \ at the moment.\n\n<uscript>\n\nfunction DeclarationType getType(string name)\n\
      {\n  local int i;\n  for (i = declarations.length-1; i >= 0; i--)\n  {\n   \
      \ if ((declarations[i].name ~= name) && (declarations[i].scopelevel <= ScopeLevel))\n\
      \    {\n      if (verbose> 0 ) log(ScopeLevel$\"] getType(\"$name$\") =\"@declarations[i].type,\
      \ 'Scope');\n      return declarations[i].type;\n    }\n  }\n  Warn(\"Undeclared\
      \ identifier:\"@name);\n  Assert(false);\n}\n\nfunction string setDeclaration(string\
      \ name, string value, optional DeclarationType type)\n{\n  local int i;\n  for\
      \ (i = declarations.length-1; i >= 0; i--)\n  {\n    if ((declarations[i].name\
      \ ~= name) && (declarations[i].scopelevel <= ScopeLevel))\n    {\n      if (verbose>\
      \ 0 ) log(ScopeLevel$\"] setDeclaration(\"$name$\", \"$value$\", \"$type$\"\
      )\", 'Scope');\n      declarations[i].value = value;\n      return declarations[i].value;\n\
      \    }\n  }\n  Warn(\"Undeclared identifier:\"@name);\n  Assert(false);\n}\n\
      \nfunction newDeclaration(string name, optional DeclarationType type, optional\
      \ string value)\n{\n  local int i;\n  for (i = 0; i < declarations.length; i++)\n\
      \  {\n    if ((declarations[i].name ~= name) && (declarations[i].scopelevel\
      \ == ScopeLevel))\n    {\n      Warn(\"Identifier redeclared:\"@name);\n   \
      \   Assert(false);\n    }\n  }\n  if (verbose> 0 ) log(ScopeLevel$\"] newDeclaration(\"\
      $name$\", \"$type$\")\", 'Scope');\n  declarations.length = i+1;\n  declarations[i].name\
      \ = name;\n  declarations[i].scopelevel = ScopeLevel;\n  declarations[i].value\
      \ = value;\n  declarations[i].type = type;\n}\n\nfunction openScope()\n{\n \
      \ if (verbose> 0 ) log(ScopeLevel$\"] openScope()\", 'Scope');\n  ScopeLevel++;\n\
      }\n</uscript>\n\nopenScope is easy, it just increases the current scope level,\
      \ new declarations will automatically be put in this scope level.\n\n<uscript>\n\
      \nfunction closeScope()\n{\n  local int i;\n  if (verbose> 0 ) log(ScopeLevel$\"\
      ] closeScope()\", 'Scope');\n  for (i = declarations.length-1; i >= 0; i--)\n\
      \  {\n    if (declarations[i].scopelevel >= ScopeLevel)\n    {\n      declarations.remove(i,\
      \ 1);\n    }\n  }\n  ScopeLevel--;\n}\n</uscript>\n\nOn closeScope we need to\
      \ remove all previously declared variables in this, or higher, scope. After\
      \ that we decrease the scope level.\n\n<uscript>\n\nstatic function DeclarationType\
      \ stringToType(string type)\n{\n  if (type ~= \"string\") return DT_String;\n\
      \  else if (type ~= \"int\") return DT_Int;\n  else if (type ~= \"float\") return\
      \ DT_Float;\n  else if (type ~= \"bool\") return DT_Bool;\n  Warn(\"Unknown\
      \ type\"@type);\n  assert(false);\n}\n</uscript>\n\nConvert a string to a declaration\
      \ type.\n\n<uscript>\n\ndefaultproperties\n{\n  ScopeLevel=0\n  verbose=0\n\
      }\n</uscript>"
  properties: []
  revId: 1822
name: "Legacy:BruteForce/Scope"
revision:
  revid: 1822
  parentid: 1823
  user: "El Muerte TDS"
  timestamp: 1051434196.000000000
  comment: "*"
timestamp: 1668786399.199481000
