---
parse:
  title: "Legacy:ComputerPersonal (DX)"
  text:
    text: "<h3><span class=\"mw-headline\" id=\"Overview_of_ComputerPersonal\">Overview\
      \ of ComputerPersonal</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:ComputerPersonal_(DX)?section=1\" title=\"Edit\
      \ section: Overview of ComputerPersonal\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>ComputerPersonal is, of course, the personal computer\
      \ in DX. All instructions for using them are available in the DX</p>\n<p>This\
      \ is what the editor doc says:</p>\n<blockquote class=\"legacyquote\">\n<p>This\
      \ is the desktop system of the DE world. Usually used only as a means of e-mail\
      \ reception it has similar properties</p>\n<p>of all of the computers and can\
      \ activate special options triggering outside events (i.e. Shutting off the\
      \ coolant to the</p>\n<p>generator in the NYC warehouse and blowing it up, Signaling\
      \ the NSF from the old NSF headquarters building, etc.)</p>\n</blockquote>\n\
      <h3><span class=\"mw-headline\" id=\"Important_functions_.28NB:_these_are_all_methods_of_the_superclass.2C_Computers.29\"\
      >Important functions (NB: these are all methods of the superclass, Computers)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:ComputerPersonal_(DX)?section=2\" title=\"Edit section:\
      \ Important functions (NB: these are all methods of the superclass, Computers)\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dt>string GetNodeName()&#160;</dt>\n<dd>Returns the title of the node (e.g.\
      \ \"UNATCO\")</dd>\n<dt>string GetNameDesc()&#160;</dt>\n<dd>Returns the node's\
      \ long name (e.g. \"United Nations Anti-Terrorist Coalition\")</dd>\n<dt>string\
      \ GetNodeAddress()&#160;</dt>\n<dd>Returns the node's address</dd>\n<dt>texture\
      \ GetNodeTexture()&#160;</dt>\n<dd>Returns the texture that is the node's icon</dd>\n\
      <dt>string GetUserName(int userIndex)&#160;</dt>\n<dd>Returns the username from\
      \ entry #userIndex in the userList array</dd>\n<dt>string GetUserPassword(int\
      \ userIndex)&#160;</dt>\n<dd>As GetUserName, but returns password</dd>\n<dt>int\
      \ GetAccessLevel(int userIndex)&#160;</dt>\n<dd>As GetUserName, but returns\
      \ access level (question: was access level ever implemented?)</dd>\n<dt>AdditionalActivation(DeusExPlayer\
      \ ActivatingPlayer), AdditionalDeactivation(DeusExPlayer DeactivatingPlayer)&#160;</dt>\n\
      <dd>Called for subclasses to do any additional activation steps. Empty in both\
      \ Computers and ComputerPersonal.</dd>\n<dt>BeginAlarm(), EndAlarm()&#160;</dt>\n\
      <dd>Turns the alarm on and off, after a hacker runs out of time</dd>\n</dl>\n\
      <h3><span class=\"mw-headline\" id=\"Custom_computer_nodes\">Custom computer\
      \ nodes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:ComputerPersonal_(DX)?section=3\" title=\"Edit\
      \ section: Custom computer nodes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>OK, this is my happy little contribution to this site.\
      \ How to make custom nodes.</p>\n<p>Now some people will have you make new subclasses\
      \ of Computer, ComputerPersonal, and all the UI interface classes as well. This\
      \ is not necessary! In fact, it is complete overkill.</p>\n<p>I will not explore\
      \ custom textures here, for info on that stuff you can visit tutorial sites\
      \ like www.planetdeusex.com/tack.</p>\n<p>As you may know, the computers have\
      \ variables like TitleString and TitleTexture that were never implemented. We\
      \ are now going to implement them.</p>\n<p>There is no need to edit the UI.\
      \ The UI classes get information like title string, description, etc. from functions\
      \ in the computer class, specifically GetNodeName(), GetNameDesc(), GetNodeAddress(),\
      \ and GetNodeTexture() (the values are returned by the functions). All we have\
      \ to do is a little tweaking to get everything running smoothly.</p>\n<p>The\
      \ following code is what I used in my mod. There's a new enumeration. It has\
      \ the following settings:</p>\n<dl>\n<dt>STANDARD_NODE_LIST&#160;</dt>\n<dd>Uses\
      \ the regular list of nodes (e.g. UNATCO, NSF, MJ12), like a regular computer</dd>\n\
      <dt>CUSTOM_NODE&#160;</dt>\n<dd>Uses the nodeName, titleString, titleTexture,\
      \ and (newly added) nodeAddress, that were present but not implemented in the\
      \ standard computer</dd>\n<dt>NN_MYNODETYPE&#160;</dt>\n<dd>This is an example\
      \ of a preset node type. Many of these could be added to the list for convenience.\
      \ I added several in my mod.</dd>\n</dl>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">//--------------------------------------------------------</span>\n\
      <span class=\"co1\">// MyComputerPersonal</span>\n<span class=\"co1\">// By\
      \ TheSheep</span>\n<span class=\"co1\">// thesheepbaa@hotmail.com</span>\n<span\
      \ class=\"co1\">//--------------------------------------------------------</span>\n\
      <span class=\"kw1\">class</span> MyComputerPersonal <span class=\"kw1\">extends</span>\
      \ ComputerPersonal;\n \n<span class=\"co1\">//New options for node type</span>\n\
      <span class=\"kw1\">enum</span> EAltNodeName\n\t<span class=\"br0\">{</span>\n\
      \tSTANDARD_NODE_LIST, <span class=\"co1\">//taken from the normal list of nodes\
      \ e.g. UNATCO, NSF, MJ12, etc.</span>\n\tCUSTOM_NODE,        <span class=\"\
      co1\">//custom node based on name, desc, addr, and texture settings</span>\n\
      \tNN_MYNODETYPE       <span class=\"co1\">//a preset custom configuration</span>\n\
      \t<span class=\"br0\">}</span>;\n \n<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> EAltNodeName AltNodeName;\n \n<span\
      \ class=\"co1\">//nodeAddress for CUSTOM_NODEs</span>\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span>Computers<span class=\"br0\">)</span> <span class=\"\
      kw1\">localized</span> <span class=\"kw5\">string</span> nodeAddress;\n \n<span\
      \ class=\"co1\">//These are the variables that settings are stored in</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw1\">localized</span> <span class=\"\
      kw5\">string</span> MyNodeName,MyNodeDesc,MyNodeAddress;\n<span class=\"kw1\"\
      >var</span> <span class=\"kw5\">texture</span> MyNodeTexture;\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">//executed near\
      \ start of game</span>\n<span class=\"br0\">{</span>\n<span class=\"kw2\">switch</span><span\
      \ class=\"br0\">(</span>AltNodeName<span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n\t<span class=\"kw2\">case</span> STANDARD_NODE_LIST:\n\t\t\
      MyNodeName<span class=\"sy0\">=</span>nodeInfo<span class=\"br0\">[</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>ComputerNode<span class=\"\
      br0\">)</span><span class=\"br0\">]</span>.<span class=\"me0\">nodeName</span>;\n\
      \t\tMyNodeDesc<span class=\"sy0\">=</span>nodeInfo<span class=\"br0\">[</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>ComputerNode<span class=\"\
      br0\">)</span><span class=\"br0\">]</span>.<span class=\"me0\">nodeDesc</span>;\n\
      \t\tMyNodeAddress<span class=\"sy0\">=</span>nodeInfo<span class=\"br0\">[</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>ComputerNode<span class=\"\
      br0\">)</span><span class=\"br0\">]</span>.<span class=\"me0\">nodeAddress</span>;\n\
      \t\tMyNodeTexture<span class=\"sy0\">=</span>nodeInfo<span class=\"br0\">[</span><span\
      \ class=\"kw5\">Int</span><span class=\"br0\">(</span>ComputerNode<span class=\"\
      br0\">)</span><span class=\"br0\">]</span>.<span class=\"me0\">nodeTexture</span>;\n\
      \t\t<span class=\"kw2\">break</span>;\n\t<span class=\"kw2\">case</span> CUSTOM_NODE:\n\
      \t\tMyNodeName<span class=\"sy0\">=</span>nodeName;\n\t\tMyNodeDesc<span class=\"\
      sy0\">=</span>titleString;\n\t\tMyNodeAddress<span class=\"sy0\">=</span>nodeAddress;\n\
      \t\tMyNodeTexture<span class=\"sy0\">=</span>titleTexture;\n\t\t<span class=\"\
      kw2\">break</span>;\n\t<span class=\"kw2\">case</span> NN_MYNODETYPE:\n\t\t\
      MyNodeName<span class=\"sy0\">=</span><span class=\"st0\">\"Preset node\"</span>;\n\
      \t\tMyNodeDesc<span class=\"sy0\">=</span><span class=\"st0\">\"My preset node\
      \ type for my mod\"</span>;\n\t\tMyNodeAddress<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"MY//NODE//TYPE//ADDRESS.0530.53\"</span>;\n\t\tMyNodeTexture<span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Texture</span><span class=\"st0\"\
      >'MyPackage.MyTexture'</span>;\n\t\t<span class=\"kw2\">break</span>;\n\t<span\
      \ class=\"br0\">}</span>\t\n<span class=\"kw6\">Super</span>.<span class=\"\
      kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// Functions to get info</span>\n\
      <span class=\"co1\">// They are called to obtain information about the node,\
      \ and pass the desired info as a return value.</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">String</span> GetNodeName<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span> <span class=\"kw2\">return</span>\
      \ MyNodeName; <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">String</span> GetNodeDesc<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span> <span class=\"kw2\">return</span>\
      \ MyNodeDesc; <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">String</span> GetNodeAddress<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span> <span class=\"kw2\">return</span>\
      \ MyNodeAddress; <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">Texture</span> GetNodeTexture<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span> <span class=\"kw2\">return</span>\
      \ MyNodeTexture; <span class=\"br0\">}</span>\n \n<span class=\"co1\">//default\
      \ properties - none of note</span>\n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>No matter what type of node is set up, the name, description, address, and\
      \ texture are stored in my variables MyNodeName, MyNodeDesc, MyNodeAddress,\
      \ MyNodeTexture. Quick, clean, simple.</p>\n<p>Although the class is</p>\n<pre>MyComputerPersonal\
      \ extends ComputerPersonal\n</pre>\n<p>it could also work as</p>\n<pre>MyComputerSecurity\
      \ extends ComputerSecurity\n</pre>\n<p>NB: I don't think you can easily subclass\
      \ Computer itself as this will need a new UI class.</p>\n<p>IAMME: I don't think\
      \ so - if you want to make one with a new skin you can use it's super's UI.</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.061 seconds\nReal time usage:\
      \ 0.062 seconds\nPreprocessor visited node count: 24/1000000\nPreprocessor generated\
      \ node count: 89/1000000\nPost‐expand include size: 810/2097152 bytes\nTemplate\
      \ argument size: 357/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    5.787      1 - -total\n100.00%    5.787\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:853-0!*!*!!*!*!*\
      \ and timestamp 20221122045143 and revision id 2378\n -->\n"
  categories: []
  links: []
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "3"
    line: "Overview of ComputerPersonal"
    number: "1"
    index: "1"
    fromtitle: "Legacy:ComputerPersonal_(DX)"
    byteoffset: 0
    anchor: "Overview_of_ComputerPersonal"
  - toclevel: 1
    level: "3"
    line: "Important functions (NB: these are all methods of the superclass, Computers)"
    number: "2"
    index: "2"
    fromtitle: "Legacy:ComputerPersonal_(DX)"
    byteoffset: 562
    anchor: "Important_functions_.28NB:_these_are_all_methods_of_the_superclass.2C_Computers.29"
  - toclevel: 1
    level: "3"
    line: "Custom computer nodes"
    number: "3"
    index: "3"
    fromtitle: "Legacy:ComputerPersonal_(DX)"
    byteoffset: 1565
    anchor: "Custom_computer_nodes"
  displaytitle: "Legacy:ComputerPersonal (DX)"
  iwlinks: []
  wikitext:
    text: "===Overview of ComputerPersonal===\n\nComputerPersonal is, of course, the\
      \ personal computer in DX. All instructions for using them are available in\
      \ the DX \n\nThis is what the editor doc says:\n\n{{innerbox|This is the desktop\
      \ system of the DE world. Usually used only as a means of e-mail reception it\
      \ has similar properties\n\nof all of the computers and can activate special\
      \ options triggering outside events (i.e. Shutting off the coolant to the\n\n\
      generator in the NYC warehouse and blowing it up, Signaling the NSF from the\
      \ old NSF headquarters building, etc.)\n\n}}\n\n===Important functions (NB:\
      \ these are all methods of the superclass, Computers)===\n; string GetNodeName()\
      \ : Returns the title of the node (e.g. \"UNATCO\")\n; string GetNameDesc()\
      \ : Returns the node's long name (e.g. \"United Nations Anti-Terrorist Coalition\"\
      )\n; string GetNodeAddress() : Returns the node's address\n; texture GetNodeTexture()\
      \ : Returns the texture that is the node's icon\n; string GetUserName(int userIndex)\
      \ : Returns the username from entry #userIndex in the userList array\n; string\
      \ GetUserPassword(int userIndex) : As GetUserName, but returns password\n; int\
      \ GetAccessLevel(int userIndex) : As GetUserName, but returns access level (question:\
      \ was access level ever implemented?)\n; AdditionalActivation(DeusExPlayer ActivatingPlayer),\
      \ AdditionalDeactivation(DeusExPlayer DeactivatingPlayer) : Called for subclasses\
      \ to do any additional activation steps. Empty in both Computers and ComputerPersonal.\n\
      ; BeginAlarm(), EndAlarm() : Turns the alarm on and off, after a hacker runs\
      \ out of time\n\n===Custom computer nodes===\n\nOK, this is my happy little\
      \ contribution to this site. How to make custom nodes.\n\nNow some people will\
      \ have you make new subclasses of Computer, ComputerPersonal, and all the UI\
      \ interface classes as well. This is not necessary! In fact, it is complete\
      \ overkill.\n\nI will not explore custom textures here, for info on that stuff\
      \ you can visit tutorial sites like www.planetdeusex.com/tack.\n\nAs you may\
      \ know, the computers have variables like TitleString and TitleTexture that\
      \ were never implemented. We are now going to implement them.\n\nThere is no\
      \ need to edit the UI. The UI classes get information like title string, description,\
      \ etc. from functions in the computer class, specifically GetNodeName(), GetNameDesc(),\
      \ GetNodeAddress(), and GetNodeTexture() (the values are returned by the functions).\
      \ All we have to do is a little tweaking to get everything running smoothly.\n\
      \nThe following code is what I used in my mod. There's a new enumeration. It\
      \ has the following settings:\n; STANDARD_NODE_LIST : Uses the regular list\
      \ of nodes (e.g. UNATCO, NSF, MJ12), like a regular computer\n; CUSTOM_NODE\
      \ : Uses the nodeName, titleString, titleTexture, and (newly added) nodeAddress,\
      \ that were present but not implemented in the standard computer\n; NN_MYNODETYPE\
      \ : This is an example of a preset node type. Many of these could be added to\
      \ the list for convenience. I added several in my mod.\n\n<uscript>\n//--------------------------------------------------------\n\
      // MyComputerPersonal\n// By TheSheep\n// thesheepbaa@hotmail.com\n//--------------------------------------------------------\n\
      class MyComputerPersonal extends ComputerPersonal;\n\n//New options for node\
      \ type\nenum EAltNodeName\n\t{\n\tSTANDARD_NODE_LIST, //taken from the normal\
      \ list of nodes e.g. UNATCO, NSF, MJ12, etc.\n\tCUSTOM_NODE,        //custom\
      \ node based on name, desc, addr, and texture settings\n\tNN_MYNODETYPE    \
      \   //a preset custom configuration\n\t};\n\t\nvar() EAltNodeName AltNodeName;\n\
      \n//nodeAddress for CUSTOM_NODEs\nvar(Computers) localized string nodeAddress;\n\
      \n//These are the variables that settings are stored in\nvar localized string\
      \ MyNodeName,MyNodeDesc,MyNodeAddress;\nvar texture MyNodeTexture;\n\nfunction\
      \ PostBeginPlay() //executed near start of game\n{\nswitch(AltNodeName)\n\t\
      {\n\tcase STANDARD_NODE_LIST:\n\t\tMyNodeName=nodeInfo[Int(ComputerNode)].nodeName;\n\
      \t\tMyNodeDesc=nodeInfo[Int(ComputerNode)].nodeDesc;\n\t\tMyNodeAddress=nodeInfo[Int(ComputerNode)].nodeAddress;\n\
      \t\tMyNodeTexture=nodeInfo[Int(ComputerNode)].nodeTexture;\n\t\tbreak;\n\tcase\
      \ CUSTOM_NODE:\n\t\tMyNodeName=nodeName;\n\t\tMyNodeDesc=titleString;\n\t\t\
      MyNodeAddress=nodeAddress;\n\t\tMyNodeTexture=titleTexture;\n\t\tbreak;\n\t\
      case NN_MYNODETYPE:\n\t\tMyNodeName=\"Preset node\";\n\t\tMyNodeDesc=\"My preset\
      \ node type for my mod\";\n\t\tMyNodeAddress=\"MY//NODE//TYPE//ADDRESS.0530.53\"\
      ;\n\t\tMyNodeTexture=Texture'MyPackage.MyTexture';\n\t\tbreak;\n\t}\t\nSuper.PostBeginPlay();\n\
      }\n\n// Functions to get info\n// They are called to obtain information about\
      \ the node, and pass the desired info as a return value.\nfunction String GetNodeName()\n\
      { return MyNodeName; }\n\nfunction String GetNodeDesc()\n{ return MyNodeDesc;\
      \ }\n\nfunction String GetNodeAddress()\n{ return MyNodeAddress; }\n\nfunction\
      \ Texture GetNodeTexture()\n{ return MyNodeTexture; }\n\n//default properties\
      \ - none of note\ndefaultproperties\n{\n}\n</uscript>\n\nNo matter what type\
      \ of node is set up, the name, description, address, and texture are stored\
      \ in my variables MyNodeName, MyNodeDesc, MyNodeAddress, MyNodeTexture. Quick,\
      \ clean, simple.\n\nAlthough the class is\n MyComputerPersonal extends ComputerPersonal\n\
      \nit could also work as\n MyComputerSecurity extends ComputerSecurity\n\nNB:\
      \ I don't think you can easily subclass Computer itself as this will need a\
      \ new UI class.\n\nIAMME: I don't think so - if you want to make one with a\
      \ new skin you can use it's super's UI."
  properties: []
  revId: 2378
name: "Legacy:ComputerPersonal (DX)"
revision:
  revid: 2378
  parentid: 2380
  user: "Amazonas-1990.adsl.datanet.hu"
  timestamp: 1128963434.000000000
  comment: "*"
timestamp: 1669092704.590446000
