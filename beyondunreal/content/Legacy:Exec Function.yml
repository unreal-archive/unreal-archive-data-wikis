---
parse:
  title: "Legacy:Exec Function"
  text:
    text: "<p><b>Exec Functions</b> are <a href=\"/Legacy:Function\" title=\"Legacy:Function\"\
      \ class=\"mw-redirect\">functions</a> that a player or user can execute by typing\
      \ its name in the <a href=\"/Legacy:Console\" title=\"Legacy:Console\">console</a>.\
      \ Basically, they provide a way to define new console commands in <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a> code.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">exec</span> <span\
      \ class=\"kw1\">function</span> God<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> bGodMode <span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n        bGodMode <span class=\"sy0\">=</span> <span\
      \ class=\"kw6\">false</span>;\n        <span class=\"kw4\">ClientMessage</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"God mode off\"</span><span class=\"\
      br0\">)</span>;\n        <span class=\"kw2\">return</span>;\n    <span class=\"\
      br0\">}</span>\n \n    bGodMode <span class=\"sy0\">=</span> <span class=\"\
      kw6\">true</span>; \n    <span class=\"kw4\">ClientMessage</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"God Mode on\"</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>Eliot:</b>theres\
      \ a much easyer way to do this like this example.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">exec</span> <span class=\"kw1\">function</span>\
      \ God<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    bGodMode <span class=\"sy0\">=</span> <span class=\"sy0\"\
      >!</span>bGodMode; \n    <span class=\"kw4\">ClientMessage</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"GodMode:\"</span><span class=\"sy0\">@</span>bGodMode<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Passing_Parameters\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Passing Parameters</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Valid_Places_for_Exec_Functions\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Valid Places for\
      \ Exec Functions</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Passing_Parameters\"\
      >Passing Parameters</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Exec_Function?section=1\" title=\"Edit section:\
      \ Passing Parameters\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>You can allow parameters for your console command by simply adding those\
      \ parameters to the exec function's definition:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">exec</span> <span class=\"kw1\">function</span>\
      \ Slap<span class=\"br0\">(</span><span class=\"kw5\">string</span> <span class=\"\
      kw8\">Player</span>, <span class=\"kw5\">int</span> Strength<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"me0\">Broadcast</span><span class=\"\
      br0\">(</span><span class=\"kw5\">None</span>, <span class=\"kw8\">Player</span>\
      \ <span class=\"sy0\">@</span> <span class=\"st0\">\"was slapped with strength\"\
      </span> <span class=\"sy0\">@</span> Strength<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>When entering this console\
      \ command, separate the parameters with blanks (not commas). If the last function\
      \ parameter is a string, it gobbles up everything that's remaining on the console\
      \ command line.</p>\n<pre> (&gt; Slap Mychaeel 1337\n Mychaeel was slapped with\
      \ strength 1337\n</pre>\n<p>You can make exec function parameters <a href=\"\
      /Legacy:Function_Syntax\" title=\"Legacy:Function Syntax\">optional</a> if you\
      \ want.</p>\n<h2><span class=\"mw-headline\" id=\"Valid_Places_for_Exec_Functions\"\
      >Valid Places for Exec Functions</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Exec_Function?section=2\"\
      \ title=\"Edit section: Valid Places for Exec Functions\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>Exec functions can be declared\
      \ anywhere, but they only actually work in the following objects:</p>\n<p><i>(Note:\
      \ this is only for UT2003/4, not UT or Unreal 1)</i></p>\n<ul>\n<li>the <a href=\"\
      /Legacy:Console\" title=\"Legacy:Console\">Console</a> interaction</li>\n<li>the\
      \ <a href=\"/Legacy:GameInfo\" title=\"Legacy:GameInfo\">GameInfo</a> actor\
      \ (keep in mind that the GameInfo only exists on the server, though)</li>\n\
      <li>the local player's <a href=\"/Legacy:HUD\" title=\"Legacy:HUD\">HUD</a>\
      \ actor</li>\n<li>the local player's <a href=\"/Legacy:CheatManager\" title=\"\
      Legacy:CheatManager\">CheatManager</a> (only offline)</li>\n<li>the local player's\
      \ AdminManager (an <a href=\"/Legacy:AdminBase\" title=\"Legacy:AdminBase\"\
      >AdminBase</a> subclass, only when logged in as admin and only available on\
      \ the serverside)</li>\n<li>the local <a href=\"/Legacy:PlayerController\" title=\"\
      Legacy:PlayerController\">PlayerController</a></li>\n<li>the local player's\
      \ <a href=\"/Legacy:PlayerInput\" title=\"Legacy:PlayerInput\">PlayerInput</a></li>\n\
      <li>the local player's <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a></li>\n\
      <li>that Pawn's selected <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\"\
      >Weapon</a> and SelectedItem (<a href=\"/Legacy:Inventory\" title=\"Legacy:Inventory\"\
      >Inventory</a>)</li>\n<li>in UT2004 also any local <a href=\"/Legacy:Interaction\"\
      \ title=\"Legacy:Interaction\">Interaction</a></li>\n</ul>\n<p>You can not declare\
      \ a working exec function in a mutator. You *can*, however, define the function\
      \ Mutate(), which gets called from the console (see <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">Mutator</a> or <a href=\"/Legacy:Mutator_(UT)\" title=\"\
      Legacy:Mutator (UT)\">Mutator (UT)</a>).</p>\n<p>Note that an exec function\
      \ must be <a href=\"/Legacy:Simulated_Function\" title=\"Legacy:Simulated Function\"\
      >simulated</a> to work client-side.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Related_Topics\">Related Topics</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Exec_Function?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:GUIUserKeyBinding\" title=\"\
      Legacy:GUIUserKeyBinding\">GUIUserKeyBinding</a> – adding your custom console\
      \ commands to the game's <i>Controls</i> setup menu.</li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Exec_Function?section=4\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>unknown:</b> I put a file in UT2004/System/ called\
      \ 'mysummon.ini', and put:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">exec</span> <span class=\"kw1\">function</span> myGod<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  bGodMode\
      \ <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>bGodMode; \n  <span\
      \ class=\"kw4\">ClientMessage</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"GodMode:\"</span><span class=\"sy0\">@</span>bGodMode<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>I startup\
      \ UT2004 and type: &gt; myGod</p>\n<p>into the console...but it says \"Command\
      \ not found\", or something like that&#160;:(</p>\n<p><b>EntropicLqd:</b> That's\
      \ because an ini file is not a valid place for an exec function. Ini files cannot\
      \ contain code. You would need to create your own class (see \"valid places\
      \ for an exec function\" above).</p>\n<p><b>orathaic</b> Also note, bGodMode\
      \ is a variable of the class controller, (and it's subclasses) This is the only\
      \ variable which prevents death. So presumably you should access it with something\
      \ like</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\">MyController.<span class=\"\
      me0\">bGodMode</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>MyController.<span\
      \ class=\"me0\">bGodMode</span></pre></div>\n</div>\n<pre>or access it from\
      \ the controller itself.\n</pre>\n<p><b>XxDangerxX:</b> In what classes must\
      \ you declare an exec function in UT? Also, how do you 'activate' the actor\
      \ that has the exec function so that you can type it in the console?</p>\n<p><b>VerteX</b>\
      \ well, i subclassed CheatManager, hooked it up so it modifies PlayerController\
      \ and sets the game's cheat manager to MyCheatManager, then i tried my cheat\
      \ (a custom allweapons). No go.</p>\n<p><b>XxDangerxX:</b> I've put an exec\
      \ function in an Inventory item I'm making. It works! Yay! One problem though\
      \ - it will only work in the console, not the quick console. What might be the\
      \ cause for this? This is for UT '99.</p>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.119 seconds\nReal time usage: 0.121 seconds\nPreprocessor visited\
      \ node count: 48/1000000\nPreprocessor generated node count: 120/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1165-0!*!0!!en!*!*\
      \ and timestamp 20221118155050 and revision id 33147\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:GUIUserKeyBinding"
  - ns: 100
    exists: true
    name: "Legacy:Function"
  - ns: 100
    exists: true
    name: "Legacy:AdminBase"
  - ns: 100
    exists: true
    name: "Legacy:Mutator (UT)"
  - ns: 100
    exists: true
    name: "Legacy:PlayerInput"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Weapon"
  - ns: 100
    exists: true
    name: "Legacy:GameInfo"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:CheatManager"
  - ns: 100
    exists: true
    name: "Legacy:HUD"
  - ns: 100
    exists: true
    name: "Legacy:Inventory"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Console"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Passing Parameters"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Exec_Function"
    byteoffset: 649
    anchor: "Passing_Parameters"
  - toclevel: 1
    level: "2"
    line: "Valid Places for Exec Functions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Exec_Function"
    byteoffset: 1306
    anchor: "Valid_Places_for_Exec_Functions"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Exec_Function"
    byteoffset: 2546
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Exec_Function"
    byteoffset: 2699
    anchor: "Discussion"
  displaytitle: "Legacy:Exec Function"
  iwlinks: []
  wikitext:
    text: "'''Exec Functions''' are [[Legacy:Function|function]]s that a player or\
      \ user can execute by typing its name in the [[Legacy:Console|console]].  Basically,\
      \ they provide a way to define new console commands in [[Legacy:UnrealScript|UnrealScript]]\
      \ code.\n\n<uscript>\nexec function God()\n{\n    if ( bGodMode )\n    {\n \
      \       bGodMode = false;\n        ClientMessage(\"God mode off\");\n      \
      \  return;\n    }\n\n    bGodMode = true; \n    ClientMessage(\"God Mode on\"\
      );\n}\n</uscript>\n\n'''Eliot:'''theres a much easyer way to do this like this\
      \ example.\n\n<uscript>\nexec function God()\n{\n    bGodMode = !bGodMode; \n\
      \    ClientMessage(\"GodMode:\"@bGodMode);\n}\n</uscript>\n\n==Passing Parameters==\n\
      \nYou can allow parameters for your console command by simply adding those parameters\
      \ to the exec function's definition:\n\n<uscript>\nexec function Slap(string\
      \ Player, int Strength)\n{\n    Level.Game.Broadcast(None, Player @ \"was slapped\
      \ with strength\" @ Strength);\n}\n</uscript>\n\nWhen entering this console\
      \ command, separate the parameters with blanks (not commas).  If the last function\
      \ parameter is a string, it gobbles up everything that's remaining on the console\
      \ command line.\n\n  (> Slap Mychaeel 1337\n  Mychaeel was slapped with strength\
      \ 1337\n\nYou can make exec function parameters [[Legacy:Function Syntax|optional]]\
      \ if you want.\n\n==Valid Places for Exec Functions==\n\nExec functions can\
      \ be declared anywhere, but they only actually work in the following objects:\n\
      \n''(Note: this is only for UT2003/4, not UT or Unreal 1)''\n* the [[Legacy:Console|Console]]\
      \ interaction\n* the [[Legacy:GameInfo|GameInfo]] actor (keep in mind that the\
      \ GameInfo only exists on the server, though)\n* the local player's [[Legacy:HUD|HUD]]\
      \ actor\n* the local player's [[Legacy:CheatManager|CheatManager]] (only offline)\n\
      * the local player's AdminManager (an [[Legacy:AdminBase|AdminBase]] subclass,\
      \ only when logged in as admin and only available on the serverside)\n* the\
      \ local [[Legacy:PlayerController|PlayerController]]\n* the local player's [[Legacy:PlayerInput|PlayerInput]]\n\
      * the local player's [[Legacy:Pawn|Pawn]]\n* that Pawn's selected [[Legacy:Weapon|Weapon]]\
      \ and SelectedItem ([[Legacy:Inventory|Inventory]])\n* in UT2004 also any local\
      \ [[Legacy:Interaction|Interaction]]\n\nYou can not declare a working exec function\
      \ in a mutator. You *can*, however, define the function Mutate(), which gets\
      \ called from the console (see [[Legacy:Mutator|Mutator]] or [[Legacy:Mutator\
      \ (UT)|Mutator (UT)]]).\n\nNote that an exec function must be [[Legacy:Simulated\
      \ Function|simulated]] to work client-side.\n\n==Related Topics==\n\n* [[Legacy:GUIUserKeyBinding|GUIUserKeyBinding]]\
      \ &ndash; adding your custom console commands to the game's ''Controls'' setup\
      \ menu.\n\n==Discussion==\n\n'''unknown:''' I put a file in UT2004/System/ called\
      \ 'mysummon.ini', and put:\n\n<uscript>\nexec function myGod()\n{\n  bGodMode\
      \ = !bGodMode; \n  ClientMessage(\"GodMode:\"@bGodMode);\n}\n</uscript>\n\n\
      I startup UT2004 and type: > myGod\n\ninto the console...but it says \"Command\
      \ not found\", or something like that :(\n\n'''EntropicLqd:''' That's because\
      \ an ini file is not a valid place for an exec function.  Ini files cannot contain\
      \ code.  You would need to create your own class (see \"valid places for an\
      \ exec function\" above).\n\n'''orathaic''' Also note, bGodMode is a variable\
      \ of the class controller, (and it's subclasses) This is the only variable which\
      \ prevents death. So presumably you should access it with something like <uscript>MyController.bGodMode\
      \ = !MyController.bGodMode</uscript>\n\n or access it from the controller itself.\n\
      \n'''XxDangerxX:''' In what classes must you declare an exec function in UT?\
      \ Also, how do you 'activate' the actor that has the exec function so that you\
      \ can type it in the console?\n\n'''VerteX''' well, i subclassed CheatManager,\
      \ hooked it up so it modifies PlayerController and sets the game's cheat manager\
      \ to MyCheatManager, then i tried my cheat (a custom allweapons). No go.\n\n\
      '''XxDangerxX:''' I've put an exec function in an Inventory item I'm making.\
      \ It works! Yay! One problem though - it will only work in the console, not\
      \ the quick console. What might be the cause for this? This is for UT '99."
  properties: []
  revId: 33147
name: "Legacy:Exec Function"
revision:
  revid: 33147
  parentid: 33146
  user: "XxDangerxX"
  timestamp: 1224322149.000000000
  comment: "/* Valid Places for Exec Functions */"
timestamp: 1668786574.309708000
