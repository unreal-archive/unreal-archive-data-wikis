---
parse:
  title: "Legacy:Scripting Custom Brushbuilders"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Preliminaries\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Preliminaries</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Prerequisites\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Prerequisites</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Code_style\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Code style</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Terms_used\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Terms used</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Caveat\"><span class=\"tocnumber\"\
      >1.4</span> <span class=\"toctext\">Caveat</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#The_maths_bit\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">The maths bit</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Getting_started\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Getting started</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Making_a_new_class\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Making a new class</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Modifying_an_existing_class\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Modifying an existing\
      \ class</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-10\"><a href=\"\
      #Anatomy_of_a_builder\"><span class=\"tocnumber\">2.3.1</span> <span class=\"\
      toctext\">Anatomy of a builder</span></a></li>\n<li class=\"toclevel-3 tocsection-11\"\
      ><a href=\"#Functions\"><span class=\"tocnumber\">2.3.2</span> <span class=\"\
      toctext\">Functions</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-12\"><a href=\"#A_little_example_.28ued2.29\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">A little example (ued2)</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"#.27Half_cube.27_brush_builder\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">'Half cube' brush\
      \ builder</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-14\"\
      ><a href=\"#Tips_And_Tricks\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Tips And Tricks</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-15\"\
      ><a href=\"#Naming_polys\"><span class=\"tocnumber\">4.1</span> <span class=\"\
      toctext\">Naming polys</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-16\"><a href=\"#Running_Unrealscript_in_the_Editor\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Running Unrealscript in the Editor</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-17\"><a href=\"#Obtaining_actor_reference\"\
      ><span class=\"tocnumber\">5.1</span> <span class=\"toctext\">Obtaining actor\
      \ reference</span></a></li>\n<li class=\"toclevel-2 tocsection-18\"><a href=\"\
      #User_Input\"><span class=\"tocnumber\">5.2</span> <span class=\"toctext\">User\
      \ Input</span></a></li>\n<li class=\"toclevel-2 tocsection-19\"><a href=\"#Actor_modification_notes\"\
      ><span class=\"tocnumber\">5.3</span> <span class=\"toctext\">Actor modification\
      \ notes</span></a></li>\n<li class=\"toclevel-2 tocsection-20\"><a href=\"#Obtaining_viewport_camera_reference\"\
      ><span class=\"tocnumber\">5.4</span> <span class=\"toctext\">Obtaining viewport\
      \ camera reference</span></a></li>\n<li class=\"toclevel-2 tocsection-21\"><a\
      \ href=\"#BrushBuilder_object_persistence\"><span class=\"tocnumber\">5.5</span>\
      \ <span class=\"toctext\">BrushBuilder object persistence</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-22\"><a href=\"#Comments\"><span\
      \ class=\"tocnumber\">6</span> <span class=\"toctext\">Comments</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Preliminaries\"\
      >Preliminaries</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=1\" title=\"\
      Edit section: Preliminaries\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Prerequisites\"\
      >Prerequisites</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=2\" title=\"\
      Edit section: Prerequisites\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>vague knowledge of <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a>.</li>\n<li>In particular a\
      \ passing familiarity with functions, variables and flow control statements\
      \ and a basic knowledge of the Unreal class structure.</li>\n<li>A little bit\
      \ of mathematics: geometry, vectors and trigonometry. For more advanced stuff,\
      \ matrix transformations.</li>\n<li><a href=\"/Legacy:Compiling_With_UCC\" title=\"\
      Legacy:Compiling With UCC\">Compiling With UCC</a>, or <a href=\"/Legacy:UMake\"\
      \ title=\"Legacy:UMake\">UMake</a></li>\n<li>read up on <a href=\"/Legacy:BrushBuilder\"\
      \ title=\"Legacy:BrushBuilder\">BrushBuilder</a>, the parent class</li>\n</ul>\n\
      <p>(I knew only JavaScript when I started and fumbled my way with the help of\
      \ tutorials: I recommend <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://www.unrealscript.com/\">Chimeric</a>'s excellent site.)</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Code_style\">Code style</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=3\"\
      \ title=\"Edit section: Code style\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Bear in mind that streamlined code isn't necessary\
      \ here. The user won't mind a few extra clock cycles – she's not having rockets\
      \ fired at her! Aim for code legibility rather than efficiency.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Terms_used\">Terms used</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=4\"\
      \ title=\"Edit section: Terms used\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li><i>builder brush</i> means the <a href=\"/Legacy:Red_Builder_Brush\"\
      \ title=\"Legacy:Red Builder Brush\">red builder brush</a>, the red dotted-line\
      \ brush seen in the editor.</li>\n<li>[UT] refers to your base UnrealTournament\
      \ directory.</li>\n<li>Names such as MyPackage, MyBuilder, etc are used as examples.\
      \ If you follow this tutorial feel free to use more sensible names.</li>\n</ul>\n\
      <h3><span class=\"mw-headline\" id=\"Caveat\">Caveat</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=5\"\
      \ title=\"Edit section: Caveat\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>I don't claim to know or understand the inner workings\
      \ of UnrealEd. Some of what is presented here is based on observation of UnrealEd's\
      \ behaviour and experimentation.</p>\n<h2><span class=\"mw-headline\" id=\"\
      The_maths_bit\">The maths bit</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=6\"\
      \ title=\"Edit section: The maths bit\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A simple brush in UEd is basically a polyhedron of\
      \ some sort, which need not necessarily be convex. Other types of brush are\
      \ sheet brushes and compound brushes (by that I mean made from intersecting\
      \ the builder with several simple brushes).<br /></p>\n<p>Whatever the brush\
      \ looks like, UEd stores it in two parts (see also <a href=\"/Legacy:T3D_File\"\
      \ title=\"Legacy:T3D File\">T3D file</a>):</p>\n<ul>\n<li>A list of vertices:\
      \ these are simply points in 3D space, stored as co-ordinates or vectors, it's\
      \ the same thing.</li>\n<li>A list of faces: these are the polygons that make\
      \ the sides of the brush. A poly is described by a list of the vertices that\
      \ make up its corners.</li>\n</ul>\n<p>What this means is that brushes are made\
      \ by defining some dots, and then joining them up to make shapes. (The dots\
      \ part is geometry, or vector algebra depending on how you look at it. The shapes\
      \ part is topology.)</p>\n<ul>\n<li><i>Order of the vertex list:</i> They must\
      \ be in sequence, or the poly will show diagonals, and essentially will be 'folded\
      \ up' → think of making the poly's outline out of a piece of wire, following\
      \ the order of the vertices. The engine draws the poly inside that wire like\
      \ a soap bubble.<br /></li>\n<li><i>Direction:</i> The direction in which the\
      \ list travels round the poly determines which way the poly will face. More\
      \ on how this works below.</li>\n<li><i>Starting vertex</i>: I believe that\
      \ UEd treats the side formed by the first two vertices in the list as that poly's\
      \ vertical – this sets the orientation of the poly's texture.</li>\n</ul>\n\
      <p>While the brushes may be concave, the individual polys must be convex. The\
      \ Unreal engine currently has a maximum of 16 vertices per poly, and if you\
      \ try to make one with more than this UEd will automatically split it.<br />\n\
      The Unreal engine uses a <b>left-handed co-ordinate system</b>. This just means\
      \ that the y-axis goes the opposite way to how it did at school!</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Getting_started\">Getting started</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=7\"\
      \ title=\"Edit section: Getting started\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>There are two ways to go about writing a new buidler:\
      \ you can write a new class, or you can modify an existing one. The demonstration\
      \ portion of this tutorial will work with either approach.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Making_a_new_class\">Making a new class</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=8\"\
      \ title=\"Edit section: Making a new class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealEd is designed to be modular. When it loads,\
      \ it looks for subclasses of object.brushbuilder, and whatever it finds, it\
      \ displays in the interface. You can see the native builders (and mine, if you've\
      \ installed the Tarquin Brush Builder pack) in the actor browser if you un-check\
      \ the 'actor classes only' box.<br />\nWhat this means is that all you need\
      \ to do is write the class, compile it, and add the package to the list in UnrealTournament.ini\
      \ — UEd will handle displaying the icon and making the property dialog box.<br\
      \ />\nMake a new directory tree [UT]\\MyPackage\\Classes. The package name can\
      \ be anything you like. Create a new text file named MyBuilder.uc in the Classes\
      \ directory, and paste into it the code below:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// A blank builder</span>\n<span class=\"\
      kw1\">class</span> MyBuilder\n\t<span class=\"kw1\">extends</span> BrushBuilder;\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">int</span> Sides;\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span>\
      \ AlignToSide;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">name</span> GroupName;\n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> Build<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> Sides <span class=\"sy0\"\
      >&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>\n\t\t\
      <span class=\"kw2\">return</span> BadParameters<span class=\"br0\">(</span><span\
      \ class=\"st0\">\"Bad input.\"</span><span class=\"br0\">)</span>;\n\tBeginBrush<span\
      \ class=\"br0\">(</span> <span class=\"kw6\">false</span>, GroupName <span class=\"\
      br0\">)</span>;\n\t<span class=\"kw2\">return</span> EndBrush<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      <span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      Radius<span class=\"sy0\">=</span><span class=\"nu0\">0.000000</span>\nSides<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">4</span>\nAlignToSide<span class=\"\
      sy0\">=</span><span class=\"kw6\">True</span>\nGroupName<span class=\"sy0\"\
      >=</span>AName\nBitmapFilename<span class=\"sy0\">=</span><span class=\"st0\"\
      >\"AFilename\"</span>\nToolTip<span class=\"sy0\">=</span><span class=\"st0\"\
      >\"A blank builder.\"</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Add or change variables as you see fit, duplicating changes in the declaration\
      \ and the <code>defaultproperties</code> section. The name declared by the <code>class</code>\
      \ statement must match the filename so change that too if you've renamed the\
      \ file.<br /></p>\n<p>The value of GroupName makes very little difference as\
      \ far as I can tell, but you may as well put something that describes the builder.<br\
      \ />\nUEd looks in [UT]\\system\\editorres for a file named <code>AFilename.BMP</code>.\
      \ If UEd can't find a file of this name, or if the value is blank or the line\
      \ deleted, UEd simply displays a grey button for the builder in the toolbox.\
      \ Change this value to the name of a bitmap file in that directory to see an\
      \ icon in the interface. If you want to make an icon yourself, they are 30 by\
      \ 30, with a background of 50% grey.<br />\nLastly, change the tooltip to whatever\
      \ you like.</p>\n<p>Compile your package with ucc, and add the following line\
      \ unrealtournament.ini at the end of the [Editor.EditorEngine] section, after\
      \ the other 'EditPackages' lines:</p>\n<pre>EditPackages=MyPackage\n</pre>\n\
      <p>Run UEd, and the button for new builder should be in the toolbox. Open the\
      \ actor browser, uncheck the 'actor classes only' box and look for your builder\
      \ under object.brushbuilder. Rather than work in a text editor and have to compile\
      \ to see changes, it's easier to make changes in UEd and see how they work straight\
      \ away. It's now an existing class, so move on to the next section!</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Modifying_an_existing_class\">Modifying an existing\
      \ class</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=9\" title=\"\
      Edit section: Modifying an existing class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You can modify the script of an existing brush builder,\
      \ recompile in UEd, use the builder and save your map, and as long as you don't\
      \ save the package the next time you run UEd the builder you changed will be\
      \ back to its old self. However, changing, adding or removing input variables\
      \ to the builder code will upset UEd to the point of crashing!<br />\nThis approach\
      \ can be useful if you want to try an idea quickly, or you want to script a\
      \ complex brush for a specific purpose.</p>\n<p>If you've built your own class\
      \ and are now modifying it within UEd, you should have added all the input variables\
      \ the builder will need. Keep a text editor running, and paste your updated\
      \ script into a different file (say MyBuilder.txt) for backup. When you are\
      \ happy with the changes, quit UEd, open MyBuilder.uc and copy the script across\
      \ from MyBuilder.txt. Remember that the version pasted from UEd won't have a\
      \ <code>defaultproperties</code> section, so keep the one from MyBuilder.uc.</p>\n\
      <p>It's at this stage you can add or change input variables' names, type and\
      \ default value.<br />\nRebuild MyPackage.u with ucc (remember you have to delete\
      \ the original, ucc won't overwrite files), and run UEd to see the new version.<br\
      \ />\nI found the easiest way to script a builder was to edit its script in\
      \ UEd, recompile from UEd and see the results straight away.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Anatomy_of_a_builder\">Anatomy of a builder</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=10\" title=\"Edit\
      \ section: Anatomy of a builder\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>Class declaration&#160;</dt>\n<dd>Defines the\
      \ class name. The class must be a subclass of brushbuilder. See <a href=\"/Legacy:Class_Syntax\"\
      \ title=\"Legacy:Class Syntax\">Class Syntax</a>.</dd>\n</dl>\n<dl>\n<dt>Input\
      \ parameters&#160;</dt>\n<dd>Variables that the user will set in the parameter\
      \ dialog box, such as Height, Sides, AlignToSide, IWantFriesWithThis. These\
      \ are declared as class variables thus:</dd>\n</dl>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">float</span> Height, OuterRadius,\
      \ InnerRadius;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">int</span> Sides;\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">bool</span> AlignToSide;</pre></div>\n</div>\n<p>You can define\
      \ and use enumeration type variables (out of this tutorial's scope). Variables\
      \ defined here should be matched in the <code>defaultproperties</code> section,\
      \ or they will hold peculiar values when first seen in the parameter dialog.\
      \ See <a href=\"/Legacy:Variable_Syntax\" title=\"Legacy:Variable Syntax\">Variable\
      \ Syntax</a> and <a href=\"/Legacy:Displaying_Variables_In_UnrealEd\" title=\"\
      Legacy:Displaying Variables In UnrealEd\">Displaying Variables in UnrealEd</a>\
      \ for details about how different <a href=\"/Legacy:Variable_Type\" title=\"\
      Legacy:Variable Type\">variable types</a> show up in the editor.</p>\n<dl>\n\
      <dt>Procedural functions&#160;</dt>\n<dd>Any actions your builder may need to\
      \ do repeatedly can be called in a function from the build function. For example,\
      \ the cylinder builder's build function calls a function to build a cylinder,\
      \ may call it again to build an inner cylinder if the overal brush should be\
      \ hollow, and then builds polys for the two ends.</dd>\n</dl>\n<dl>\n<dt>Build\
      \ function&#160;</dt>\n<dd>This function is called by UEd when you left-click\
      \ the builder icon, or press 'Build' in the parameter dialog box. Essentially,\
      \ it's the main body of the builder script.<br /></dd>\n</dl>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw5\"\
      >bool</span> Build<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></div>\n\
      </div>\n<p><br /></p>\n<p>Some of the Epic builders use the following, which\
      \ is identical to UnrealScript:<br /></p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">event</span> <span class=\"kw5\">bool</span> Build<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span></pre></div>\n</div>\n<p><br\
      \ /></p>\n<dl>\n<dt>Default properties&#160;</dt>\n<dd>This section goes at\
      \ the end of the builder script, and contains default values for the input parameters,\
      \ the tooltip text, and the filename for the icon bitmap.</dd>\n</dl>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">defaultproperties</span>\n\
      \          <span class=\"br0\">{</span>\n          <span class=\"br0\">[</span>parametername<span\
      \ class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>parametervalue<span\
      \ class=\"br0\">]</span>\n          BitmapFilename<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"[filename]\"</span>\n          ToolTip<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"[tooltiptext]\"</span>\n          <span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>UEd looks in {<a href=\"/Legacy:BaseDirectory\"\
      \ title=\"Legacy:BaseDirectory\" class=\"mw-redirect\">BaseDirectory</a>}\\\
      System\\Editorres for a file named [filename].BMP. If the value is blank, or\
      \ UEd can't find the file, the button will be grey with no picture.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Functions\">Functions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=11\"\
      \ title=\"Edit section: Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The functions are used to build the brush are native\
      \ functions of the <a href=\"/Legacy:BrushBuilder\" title=\"Legacy:BrushBuilder\"\
      >BrushBuilder</a> class that the current builder has inherited.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"A_little_example_.28ued2.29\">A little example\
      \ (ued2)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=12\"\
      \ title=\"Edit section: A little example (ued2)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\".27Half_cube.27_brush_builder\"\
      >'Half cube' brush builder</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=13\"\
      \ title=\"Edit section: 'Half cube' brush builder\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>[[Image:Legacy_Halfcubediagram.png|]]</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"co1\">//Half cube</span>\n<span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"kw1\">class</span> Halfcube <span class=\"kw1\">extends</span>\
      \ BrushBuilder;\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">name</span> GroupName;\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">int</span> Size;\n \n<span class=\"kw1\">event</span> <span\
      \ class=\"kw5\">bool</span> build<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\nBeginBrush<span class=\"br0\"\
      >(</span> <span class=\"kw6\">false</span>, GroupName <span class=\"br0\">)</span>;\n\
      \ \n<span class=\"co1\">//So each time we call the vertex3f function, the created\
      \ vertex is given a number,</span>\n<span class=\"co1\">//it's the number we\
      \ use in the poly functions..</span>\n<span class=\"co1\">//First vertex is\
      \ number 0, and so on</span>\n \nvertex3f<span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">//0</span>\nvertex3f<span class=\"\
      br0\">(</span>Size,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">//1</span>\nvertex3f<span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>,Size,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">//2</span>\npoly3i<span class=\"\
      br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// the base poly - the first parameter\
      \ indicates the \"front\" of the face</span>\nvertex3f<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,Size<span class=\"br0\"\
      >)</span>; <span class=\"co1\">//3</span>\nvertex3f<span class=\"br0\">(</span>Size,<span\
      \ class=\"nu0\">0</span>,Size<span class=\"br0\">)</span>; <span class=\"co1\"\
      >//4</span>\nvertex3f<span class=\"br0\">(</span><span class=\"nu0\">0</span>,Size,Size<span\
      \ class=\"br0\">)</span>; <span class=\"co1\">//5</span>\npoly3i<span class=\"\
      br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>,<span\
      \ class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// the top poly</span>\n<span class=\"co1\">//</span>\n\
      poly4i<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">2</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">// the three sides.</span>\npoly4i<span class=\"br0\"\
      >(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"\
      nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>; <span class=\"co1\">//</span>\n\
      poly4i<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">//</span>\n \n<span class=\"kw2\">return</span> endbrush<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">DefaultProperties</span>\n<span class=\"br0\">{</span>\n\
      Size<span class=\"sy0\">=</span><span class=\"nu0\">128</span>\nGroupName<span\
      \ class=\"sy0\">=</span>Halfcube\nBitmapFilename<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"BBHalfCube\"</span>\nToolTip<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"half a cube\"</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><br /></p>\n<h2><span class=\"mw-headline\" id=\"Tips_And_Tricks\"\
      >Tips And Tricks</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=14\"\
      \ title=\"Edit section: Tips And Tricks\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Naming_polys\">Naming\
      \ polys</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=15\"\
      \ title=\"Edit section: Naming polys\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Legacy:Mychaeel\" title=\"Legacy:Mychaeel\"\
      >Mychaeel</a> came up with a way to use an expression to set the ItemName parameter\
      \ in the poly building functions. First declare a <i>name</i> variable in your\
      \ BrushBuilder subclass; then use <i>SetPropertyText</i> to set it using an\
      \ arbitarily constructed <i>string</i> value; then take the <i>name</i> value\
      \ from the variable you declared.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">// declare a name variable:</span>\n<span class=\"kw1\"\
      >var</span> <span class=\"kw5\">name</span> DynItemName;  \n \n<span class=\"\
      co1\">// set it as needed:</span>\n<span class=\"kw3\">SetPropertyText</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"DynItemName\"</span> , <span\
      \ class=\"kw5\">string</span><span class=\"br0\">(</span>i<span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>;\n \n<span class=\"co1\">// use the DynItemName\
      \ variable in the poly call:</span>\nPoly4i<span class=\"br0\">(</span> sgn\
      \ , Va2 , Vb2 , Vb1 , Va1 , DynItemName , PolyFlags <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Running_Unrealscript_in_the_Editor\"\
      >Running Unrealscript in the Editor</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=16\"\
      \ title=\"Edit section: Running Unrealscript in the Editor\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>A brushbuilder is an Object,\
      \ and is one of the few (very few) classes in which you can run UnrealScript\
      \ within the editor. The editor calls the Build() function of a brushbuilder\
      \ to cause it to create a brush. You are not required to use this function to\
      \ make a brush, however, and can do virtually anything you like with it! Remember\
      \ that UnrealEd and the actual game run using mostly the same engine - as a\
      \ result you can essentially treat your brushbuilder as any Object. Basically,\
      \ anything you can do in the game, you can do with the brushbuilder.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Obtaining_actor_reference\">Obtaining actor reference</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=17\" title=\"Edit\
      \ section: Obtaining actor reference\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Generally the first thing you will want to do in the\
      \ Build script is to find an actor to do your dirty work. Objects can't use\
      \ Spawn or a myriad of other things. It is quite simple to do so:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// A base class\
      \ you can extend to call code within the editor.</span>\n<span class=\"kw1\"\
      >class</span> EditorScript <span class=\"kw1\">extends</span> BrushBuilder;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw9\">actor</span> LocateActor<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw9\">actor</span> I;\n  <span\
      \ class=\"kw2\">foreach</span> <span class=\"kw3\">AllObjects</span><span class=\"\
      br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\">'Actor'</span>,\
      \ I <span class=\"br0\">)</span> <span class=\"kw2\">return</span> I;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">event</span> <span class=\"\
      kw5\">bool</span> Build<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  ExecuteScript<span class=\"br0\">(</span> LocateActor<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> ExecuteScript<span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> A <span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\">// Do whatever\
      \ you want here, or ideally subclass this to make your own custom functionality.</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Instead of AllObjects iterator,\
      \ you can use the FindObject(). Use SetPropertyText() and a temp variable if\
      \ you know name of the actor you're looking for. Don't forget to clear the temp\
      \ variable after calling SetPropertyText(), leaving actor references in objects\
      \ most likely <a href=\"/Legacy:Creating_Actors_And_Objects\" title=\"Legacy:Creating\
      \ Actors And Objects\">will cause crashes</a> on save or exit.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">struct</span> SEditorActor\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw1\">var</span> <span class=\"kw5\"\
      >string</span> <span class=\"kw9\">Actor</span>;\n\t<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">int</span> MaxId;\n<span class=\"br0\">}</span>;\n \n\
      <span class=\"kw1\">var</span> array<span class=\"sy0\">&lt;</span>SEditorActor<span\
      \ class=\"sy0\">&gt;</span> EditorActors;\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw9\">Actor</span> TempEditorActor;\n \n<span class=\"kw1\">event</span>\
      \ <span class=\"kw5\">bool</span> Build<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Actor</span> A;\n \n\t<span class=\"co1\">// Find actor\
      \ reference</span>\n\tA <span class=\"sy0\">=</span> FindAnyActor<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> A <span class=\"sy0\">==</span> <span class=\"kw5\"\
      >None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">false</span>;\n \n\t<span class=\"co1\">//...</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw9\">Actor</span> FindAnyActor<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ SEditorActor E;\n\t<span class=\"kw1\">local</span> <span class=\"kw9\">Actor</span>\
      \ A;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i,j;\n\
      \ \n\t<span class=\"kw2\">for</span><span class=\"br0\">(</span> i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"sy0\">!=</span>EditorActors.<span\
      \ class=\"me0\">Length</span>; <span class=\"sy0\">++</span>i <span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tE <span class=\"sy0\">=</span>\
      \ EditorActors<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n\t\
      \t<span class=\"kw2\">for</span><span class=\"br0\">(</span> j<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>; j<span class=\"sy0\">!=</span>E.<span\
      \ class=\"me0\">MaxId</span>; <span class=\"sy0\">++</span>j <span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw3\"\
      >SetPropertyText</span><span class=\"br0\">(</span><span class=\"st0\">\"TempEditorActor\"\
      </span>,E.<span class=\"kw9\">Actor</span><span class=\"sy0\">$</span>j<span\
      \ class=\"br0\">)</span>;\n\t\t\t<span class=\"kw2\">if</span><span class=\"\
      br0\">(</span> TempEditorActor <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"br0\">{</span>\n\
      \t\t\t\tA <span class=\"sy0\">=</span> TempEditorActor;\n\t\t\t\tTempEditorActor\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t\t\t\t<span\
      \ class=\"kw3\">Log</span><span class=\"br0\">(</span> <span class=\"st0\">\"\
      Actor Ref:\"</span> <span class=\"sy0\">@</span> A, <span class=\"kw1\">class</span>.<span\
      \ class=\"kw5\">name</span> <span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"\
      kw2\">return</span> A;\n\t\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"\
      br0\">}</span>\n\t<span class=\"br0\">}</span>\t\n\tBadParameters<span class=\"\
      br0\">(</span> <span class=\"st0\">\"Could not find any actors in the level.\"\
      </span> <span class=\"br0\">)</span>;\n\t<span class=\"kw2\">return</span> <span\
      \ class=\"kw5\">None</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">DefaultProperties</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      co1\">// MyLevel.LevelInfo0 should exist in every level, empty or not.</span>\n\
      \tEditorActors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Actor</span><span class=\"sy0\">=</span><span class=\"st0\"\
      >\"MyLevel.LevelInfo\"</span>,MaxId<span class=\"sy0\">=</span><span class=\"\
      nu0\">8</span><span class=\"br0\">)</span>\n\tEditorActors<span class=\"br0\"\
      >(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"\
      sy0\">=</span><span class=\"br0\">(</span><span class=\"kw9\">Actor</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"MyLevel.Camera\"</span>,MaxId<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">64</span><span class=\"br0\">)</span>\n\
      \tEditorActors<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Actor</span><span class=\"sy0\">=</span><span class=\"st0\"\
      >\"MyLevel.Brush\"</span>,MaxId<span class=\"sy0\">=</span><span class=\"nu0\"\
      >128</span><span class=\"br0\">)</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Now that you have an actor, you can call functions from it to do\
      \ whatever you like. If you have need of more complex functionality, you can\
      \ create your own actor class, then use the actor class you found using LocateActor()\
      \ to spawn your own actor, which can then be instructed to do whatever you like.\
      \ <b>Note that actors spawned in this manner will not have some functions such\
      \ as tick executed on them in the editor.</b></p>\n<h3><span class=\"mw-headline\"\
      \ id=\"User_Input\">User Input</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=18\"\
      \ title=\"Edit section: User Input\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You can accept parameters simply by defining variables\
      \ like you would in any other Unrealscript. However, you cannot specify a group\
      \ name.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >// These will not show up as parameters, but can still be used within the script.</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">float</span> Counter;\n<span\
      \ class=\"kw1\">var</span><span class=\"br0\">(</span>Stuff<span class=\"br0\"\
      >)</span> <span class=\"kw5\">string</span> Names;\n \n<span class=\"co1\">//\
      \ These variables will show up as parameters</span>\n<span class=\"co1\">//\
      \ UnrealEd will intelligently create the appropriate form of text box/whatever\
      \ as appropriate for the type of variable.</span>\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw5\">int</span>\
      \ Count;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> array<span class=\"sy0\">&lt;</span>vector<span class=\"sy0\"\
      >&gt;</span> Offsets;</pre></div>\n</div>\n<p>The default BrushBuilder parameters\
      \ window is very small and not resizable. Keep the parameters names short so\
      \ there can be more space for parameter values.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Actor_modification_notes\">Actor modification notes</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=19\"\
      \ title=\"Edit section: Actor modification notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Note that changes made by your function or by the\
      \ indirect consequences of your functions will actually affect actors in the\
      \ level! If you save the level, those changes will be</b> <i>permanent</i><b>,\
      \ and Undo will</b> <i>not</i> <b>work reliably against these changes. Sometimes\
      \ it will, sometimes it won't, depending on your code. You can still recover\
      \ things by loading from your last save, however. Save really often, and be\
      \ extremely careful with calling the destroy function on things.</b></p>\n<p>As\
      \ a side-note, calling destroy on things also tends to cause General Protection\
      \ Faults, but it will not always do this. Sometimes it will also refuse to save\
      \ your level after you have destroyed something through script. I believe that\
      \ this is due to the lack of the Tick function. As you may know, Destroy() is\
      \ a special type of latent function and the actor is not actually destroyed\
      \ until the end of the tick, though it is flagged as bDeleteMe and as a result\
      \ many operations refuse to touch it, knowing that it has already been declared\
      \ 'dead.'</p>\n<h3><span class=\"mw-headline\" id=\"Obtaining_viewport_camera_reference\"\
      >Obtaining viewport camera reference</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=20\"\
      \ title=\"Edit section: Obtaining viewport camera reference\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Find viewport reference\
      \ and camera will be in its Actor variable. To find all viewport names use console\
      \ command <b>obj list class=viewport</b></p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span> Viewport TempViewport;\n<span class=\"\
      kw1\">function</span> Camera GetCamera<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ Camera C;\n\t<span class=\"kw3\">SetPropertyText</span><span class=\"br0\"\
      >(</span><span class=\"st0\">\"TempViewport\"</span>,<span class=\"st0\">\"\
      U2Viewport0\"</span><span class=\"br0\">)</span>;\n\tC <span class=\"sy0\">=</span>\
      \ Camera<span class=\"br0\">(</span>TempViewport.<span class=\"kw9\">Actor</span><span\
      \ class=\"br0\">)</span>;\n\tTempViewport <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">None</span>;\n\t<span class=\"kw2\">return</span> C;\t\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>UnrealEd 3.0 viewports:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">\tTerrainHeightmap\n\tTerrainLayers\n\
      \tTerrainDecoLayers\n\tMatineeScenes\n\tMatineeActions\n\tMatineeSubActions\n\
      \tU2Viewport0\n\tU2Viewport1\n\tU2Viewport2\n\tU2Viewport3\n\tMeshViewer\n\t\
      AnimationViewer\n\tPrefabBrowser\n\tLIPSinc\n\tStaticMeshBrowser\n\tTextureBrowser\n\
      \tTextureBrowserUsed\n\tTextureBrowserMRU</pre></div>\n</div>\n<h3><span class=\"\
      mw-headline\" id=\"BrushBuilder_object_persistence\">BrushBuilder object persistence</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=21\" title=\"Edit\
      \ section: BrushBuilder object persistence\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>BrushBuilders are destroyed and created when new level\
      \ is loaded. When UnrealEd starts up there may be more that one copy of each\
      \ BrushBuilder.</p>\n<h2><span class=\"mw-headline\" id=\"Comments\">Comments</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Custom_Brushbuilders?section=22\" title=\"Edit\
      \ section: Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Foxpaw:</b> I refactored the bit about brushbuilders being used for custom\
      \ editor functions, and I added what I've learned about them, but I think this\
      \ topic deserves it's own page. It is technically a custom brushbuilder, but\
      \ I don't think that people will find it here. I already had the idea and decided\
      \ to read up about the brushbuilder stuff to see if anyone else had tried it,\
      \ but otherwise I doubt a person looking to run unrealscript in the editor would\
      \ look here for the answer.</p>\n<p><b>Switch:</b> Keeping this in one place\
      \ is so far ok. The page is linked on <a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a>.</p>\n<p><b>Dushnok:</b> I'm very newbish\
      \ at uscript but I added the little example (halfcube) . Just for newbies like\
      \ me&#160;:) Do you think it's ok&#160;?</p>\n<p><b>EntropicLqd:</b> Nice example.\
      \ I'd be inclined to define all the points first and then the polygons afterwards.\
      \ Question though - The first parameter indicates the \"front\" of the face\
      \ by specifying the direction the vertices should be traversed. Presumably the\
      \ sign is reversed if the vertices are specified in reverse order. e.g. The\
      \ following are equivalent:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">poly3i<span class=\"\
      br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span>;\npoly3i<span class=\"br0\">(</span><span class=\"\
      nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>Is there a \"best way\" to specify the order of the vertices?</p>\n<p><b>Tarquin:</b>\
      \ the vector made by the first two vertices appears to give the orientation\
      \ of the texture, but I've not managed to pin this down exactly.</p>\n<p><b>OlympusMons:</b>\
      \ Changed category to refactor me.</p>\n<hr />\n<p><a href=\"/Category:Legacy_Refactor_Me\"\
      \ title=\"Category:Legacy Refactor Me\">Category:Legacy Refactor Me</a> – Badly\
      \ needs a more \"user-friendly\" format, with some pictures.</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.288 seconds\nReal time usage: 0.620 seconds\n\
      Preprocessor visited node count: 206/1000000\nPreprocessor generated node count:\
      \ 376/1000000\nPost‐expand include size: 30/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2726-0!*!0!!en!*!* and timestamp 20221118022021 and revision\
      \ id 7317\n -->\n"
  categories:
  - sortkey: "Scripting Custom Brushbuilders"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:BaseDirectory"
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: true
    name: "Legacy:Displaying Variables In UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:Mychaeel"
  - ns: 100
    exists: true
    name: "Legacy:BrushBuilder"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:UMake"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Red Builder Brush"
  - ns: 100
    exists: true
    name: "Legacy:T3D File"
  - ns: 14
    exists: true
    name: "Category:Legacy Refactor Me"
  - ns: 100
    exists: true
    name: "Legacy:Compiling With UCC"
  templates: []
  images: []
  externallinks:
  - "http://www.unrealscript.com/"
  sections:
  - toclevel: 1
    level: "2"
    line: "Preliminaries"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 0
    anchor: "Preliminaries"
  - toclevel: 2
    level: "3"
    line: "Prerequisites"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 20
    anchor: "Prerequisites"
  - toclevel: 2
    level: "3"
    line: "Code style"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 666
    anchor: "Code_style"
  - toclevel: 2
    level: "3"
    line: "Terms used"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 882
    anchor: "Terms_used"
  - toclevel: 2
    level: "3"
    line: "Caveat"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 1210
    anchor: "Caveat"
  - toclevel: 1
    level: "2"
    line: "The maths bit"
    number: "2"
    index: "6"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 1394
    anchor: "The_maths_bit"
  - toclevel: 2
    level: "4"
    line: "Getting started"
    number: "2.1"
    index: "7"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 3231
    anchor: "Getting_started"
  - toclevel: 2
    level: "3"
    line: "Making a new class"
    number: "2.2"
    index: "8"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 3449
    anchor: "Making_a_new_class"
  - toclevel: 2
    level: "3"
    line: "Modifying an existing class"
    number: "2.3"
    index: "9"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 6061
    anchor: "Modifying_an_existing_class"
  - toclevel: 3
    level: "4"
    line: "Anatomy of a builder"
    number: "2.3.1"
    index: "10"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 7430
    anchor: "Anatomy_of_a_builder"
  - toclevel: 3
    level: "4"
    line: "Functions"
    number: "2.3.2"
    index: "11"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 9635
    anchor: "Functions"
  - toclevel: 1
    level: "2"
    line: "A little example (ued2)"
    number: "3"
    index: "12"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 9810
    anchor: "A_little_example_.28ued2.29"
  - toclevel: 2
    level: "3"
    line: "'Half cube' brush builder"
    number: "3.1"
    index: "13"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 9839
    anchor: ".27Half_cube.27_brush_builder"
  - toclevel: 1
    level: "2"
    line: "Tips And Tricks"
    number: "4"
    index: "14"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 10858
    anchor: "Tips_And_Tricks"
  - toclevel: 2
    level: "3"
    line: "Naming polys"
    number: "4.1"
    index: "15"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 10879
    anchor: "Naming_polys"
  - toclevel: 1
    level: "2"
    line: "Running Unrealscript in the Editor"
    number: "5"
    index: "16"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 11505
    anchor: "Running_Unrealscript_in_the_Editor"
  - toclevel: 2
    level: "3"
    line: "Obtaining actor reference"
    number: "5.1"
    index: "17"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 12099
    anchor: "Obtaining_actor_reference"
  - toclevel: 2
    level: "3"
    line: "User Input"
    number: "5.2"
    index: "18"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 14534
    anchor: "User_Input"
  - toclevel: 2
    level: "3"
    line: "Actor modification notes"
    number: "5.3"
    index: "19"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 15212
    anchor: "Actor_modification_notes"
  - toclevel: 2
    level: "3"
    line: "Obtaining viewport camera reference"
    number: "5.4"
    index: "20"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 16286
    anchor: "Obtaining_viewport_camera_reference"
  - toclevel: 2
    level: "3"
    line: "BrushBuilder object persistence"
    number: "5.5"
    index: "21"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 17014
    anchor: "BrushBuilder_object_persistence"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "6"
    index: "22"
    fromtitle: "Legacy:Scripting_Custom_Brushbuilders"
    byteoffset: 17198
    anchor: "Comments"
  displaytitle: "Legacy:Scripting Custom Brushbuilders"
  iwlinks: []
  wikitext:
    text: "==Preliminaries ==\n\n===Prerequisites===\n* vague knowledge of [[Legacy:UnrealScript|UnrealScript]].\n\
      * In particular a passing familiarity with functions, variables and flow control\
      \ statements and a basic knowledge of the Unreal class structure.\n* A little\
      \ bit of mathematics: geometry, vectors and trigonometry. For more advanced\
      \ stuff, matrix transformations.\n* [[Legacy:Compiling With UCC|Compiling With\
      \ UCC]], or [[Legacy:UMake|UMake]] \n* read up on [[Legacy:BrushBuilder|BrushBuilder]],\
      \ the parent class\n\n(I knew only JavaScript when I started and fumbled my\
      \ way with the help of tutorials: I recommend [http://www.unrealscript.com/\
      \ Chimeric]'s excellent site.)\n\n===Code style===\n\nBear in mind that streamlined\
      \ code isn't necessary here. The user won't mind a few extra clock cycles &ndash;\
      \ she's not having rockets fired at her! Aim for code legibility rather than\
      \ efficiency.\n\n===Terms used ===\n* ''builder brush'' means the [[Legacy:Red\
      \ Builder Brush|red builder brush]], the red dotted-line brush seen in the editor.\n\
      * [UT] refers to your base UnrealTournament directory.\n* Names such as MyPackage,\
      \ MyBuilder, etc are used as examples. If you follow this tutorial feel free\
      \ to use more sensible names.\n\n===Caveat ===\n\nI don't claim to know or understand\
      \ the inner workings of UnrealEd. Some of what is presented here is based on\
      \ observation of UnrealEd's behaviour and experimentation.\n\n==The maths bit\
      \ ==\n\nA simple brush in UEd is basically a polyhedron of some sort, which\
      \ need not necessarily be convex. Other types of brush are sheet brushes and\
      \ compound brushes (by that I mean made from intersecting the builder with several\
      \ simple brushes).<br />\n\nWhatever the brush looks like, UEd stores it in\
      \ two parts (see also [[Legacy:T3D File|T3D file]]):\n\n* A list of vertices:\
      \ these are simply points in 3D space, stored as co-ordinates or vectors, it's\
      \ the same thing.\n* A list of faces: these are the polygons that make the sides\
      \ of the brush. A poly is described by a list of the vertices that make up its\
      \ corners.\n\nWhat this means is that brushes are made by defining some dots,\
      \ and then joining them up to make shapes. (The dots part is geometry, or vector\
      \ algebra depending on how you look at it. The shapes part is topology.)\n\n\
      *''Order of the vertex list:'' They must be in sequence, or the poly will show\
      \ diagonals, and essentially will be 'folded up' &rarr; think of making the\
      \ poly's outline out of a piece of wire, following the order of the vertices.\
      \ The engine draws the poly inside that wire like a soap bubble.<br>\n* ''Direction:''\
      \ The direction in which the list travels round the poly determines which way\
      \ the poly will face. More on how this works below.\n* ''Starting vertex'':\
      \ I believe that UEd treats the side formed by the first two vertices in the\
      \ list as that poly's vertical &ndash; this sets the orientation of the poly's\
      \ texture.\n\nWhile the brushes may be concave, the individual polys must be\
      \ convex. The Unreal engine currently has a maximum of 16 vertices per poly,\
      \ and if you try to make one with more than this UEd will automatically split\
      \ it.<br />The Unreal engine uses a '''left-handed co-ordinate system'''. This\
      \ just means that the y-axis goes the opposite way to how it did at school!\n\
      \n====Getting started ====\n\nThere are two ways to go about writing a new buidler:\
      \ you can write a new class, or you can modify an existing one. The demonstration\
      \ portion of this tutorial will work with either approach.\n\n===Making a new\
      \ class ===\n\nUnrealEd is designed to be modular. When it loads, it looks for\
      \ subclasses of object.brushbuilder, and whatever it finds, it displays in the\
      \ interface. You can see the native builders (and mine, if you've installed\
      \ the Tarquin Brush Builder pack) in the actor browser if you un-check the 'actor\
      \ classes only' box.<br />What this means is that all you need to do is write\
      \ the class, compile it, and add the package to the list in UnrealTournament.ini\
      \ &mdash; UEd will handle displaying the icon and making the property dialog\
      \ box.<br />Make a new directory tree [UT]\\MyPackage\\Classes. The package\
      \ name can be anything you like. Create a new text file named MyBuilder.uc in\
      \ the Classes directory, and paste into it the code below:\n\n<uscript>\n//\
      \ A blank builder\nclass MyBuilder\n\textends BrushBuilder;\nvar() int Sides;\n\
      var() bool AlignToSide;\nvar() name GroupName;\nfunction bool Build()\n{\n\t\
      if( Sides < 3 )\n\t\treturn BadParameters(\"Bad input.\");\n\tBeginBrush( false,\
      \ GroupName );\n\treturn EndBrush();\n}\ndefaultproperties\n{\nRadius=0.000000\n\
      Sides=4\nAlignToSide=True\nGroupName=AName\nBitmapFilename=\"AFilename\"\nToolTip=\"\
      A blank builder.\"\n}\n</uscript>\n\nAdd or change variables as you see fit,\
      \ duplicating changes in the declaration and the <code>defaultproperties</code>\
      \ section. The name declared by the <code>class</code> statement must match\
      \ the filename so change that too if you've renamed the file.<br>\n\nThe value\
      \ of GroupName makes very little difference as far as I can tell, but you may\
      \ as well put something that describes the builder.<br />UEd looks in [UT]\\\
      system\\editorres for a file named <code>AFilename.BMP</code>. If UEd can't\
      \ find a file of this name, or if the value is blank or the line deleted, UEd\
      \ simply displays a grey button for the builder in the toolbox. Change this\
      \ value to the name of a bitmap file in that directory to see an icon in the\
      \ interface. If you want to make an icon yourself, they are 30 by 30, with a\
      \ background of 50% grey.<br />Lastly, change the tooltip to whatever you like.\n\
      \nCompile your package with ucc, and add the following line unrealtournament.ini\
      \ at the end of the [Editor.EditorEngine] section, after the other 'EditPackages'\
      \ lines:\n EditPackages=MyPackage\n\nRun UEd, and the button for new builder\
      \ should be in the toolbox. Open the actor browser, uncheck the 'actor classes\
      \ only' box and look for your builder under object.brushbuilder. Rather than\
      \ work in a text editor and have to compile to see changes, it's easier to make\
      \ changes in UEd and see how they work straight away. It's now an existing class,\
      \ so move on to the next section!\n\n===Modifying an existing class ===\n\n\
      You can modify the script of an existing brush builder, recompile in UEd, use\
      \ the builder and save your map, and as long as you don't save the package the\
      \ next time you run UEd the builder you changed will be back to its old self.\
      \ However, changing, adding or removing input variables to the builder code\
      \ will upset UEd to the point of crashing!<br />This approach can be useful\
      \ if you want to try an idea quickly, or you want to script a complex brush\
      \ for a specific purpose.\n\nIf you've built your own class and are now modifying\
      \ it within UEd, you should have added all the input variables the builder will\
      \ need. Keep a text editor running, and paste your updated script into a different\
      \ file (say MyBuilder.txt) for backup. When you are happy with the changes,\
      \ quit UEd, open MyBuilder.uc and copy the script across from MyBuilder.txt.\
      \ Remember that the version pasted from UEd won't have a <code>defaultproperties</code>\
      \ section, so keep the one from MyBuilder.uc.\n\nIt's at this stage you can\
      \ add or change input variables' names, type and default value.<br>Rebuild MyPackage.u\
      \ with ucc (remember you have to delete the original, ucc won't overwrite files),\
      \ and run UEd to see the new version.<br />I found the easiest way to script\
      \ a builder was to edit its script in UEd, recompile from UEd and see the results\
      \ straight away.\n\n====Anatomy of a builder ====\n\n; Class declaration : Defines\
      \ the class name. The class must be a subclass of brushbuilder. See [[Legacy:Class\
      \ Syntax|Class Syntax]].\n\n; Input parameters : Variables that the user will\
      \ set in the parameter dialog box, such as Height, Sides, AlignToSide, IWantFriesWithThis.\
      \ These are declared as class variables thus:\n\n<uscript>\nvar() float Height,\
      \ OuterRadius, InnerRadius;\nvar() int Sides;\nvar() bool AlignToSide;\n</uscript>\n\
      \nYou can define and use enumeration type variables (out of this tutorial's\
      \ scope). Variables defined here should be matched in the <code>defaultproperties</code>\
      \ section, or they will hold peculiar values when first seen in the parameter\
      \ dialog. See [[Legacy:Variable Syntax|Variable Syntax]] and [[Legacy:Displaying\
      \ Variables In UnrealEd|Displaying Variables in UnrealEd]] for details about\
      \ how different [[Legacy:Variable Type|variable type]]s show up in the editor.\n\
      \n; Procedural functions : Any actions your builder may need to do repeatedly\
      \ can be called in a function from the build function. For example, the cylinder\
      \ builder's build function calls a function to build a cylinder, may call it\
      \ again to build an inner cylinder if the overal brush should be hollow, and\
      \ then builds polys for the two ends.\n\n; Build function : This function is\
      \ called by UEd when you left-click the builder icon, or press 'Build' in the\
      \ parameter dialog box. Essentially, it's the main body of the builder script.</br>\n\
      \n<UScript>\n\nfunction bool Build()\n</UScript><br>\n\nSome of the Epic builders\
      \ use the following, which is identical to UnrealScript:<br>\n\n<UScript>event\
      \ bool Build()</UScript><br>\n\n; Default properties : This section goes at\
      \ the end of the builder script, and contains default values for the input parameters,\
      \ the tooltip text, and the filename for the icon bitmap.\n\n<uscript>\ndefaultproperties\n\
      \          {\n          [parametername]=[parametervalue]\n          BitmapFilename=\"\
      [filename]\"\n          ToolTip=\"[tooltiptext]\"\n          }\n</uscript>\n\
      \nUEd looks in {[[Legacy:BaseDirectory|BaseDirectory]]}\\System\\Editorres for\
      \ a file named [filename].BMP. If the value is blank, or UEd can't find the\
      \ file, the button will be grey with no picture.\n\n====Functions ====\n\nThe\
      \ functions are used to build the brush are native functions  of the [[Legacy:BrushBuilder|BrushBuilder]]\
      \ class that the current builder has inherited.\n\n==A little example (ued2)==\n\
      \n==='Half cube' brush builder===\n\n[[Image:Legacy_Halfcubediagram.png|]]\n\
      \n<uscript>\n//-----------------------------------------------------------\n\
      //Half cube\n//-----------------------------------------------------------\n\
      class Halfcube extends BrushBuilder;\n\nvar() name GroupName;\nvar() int Size;\n\
      \nevent bool build()\n{\nBeginBrush( false, GroupName );\n\n//So each time we\
      \ call the vertex3f function, the created vertex is given a number,\n//it's\
      \ the number we use in the poly functions..\n//First vertex is number 0, and\
      \ so on\n\nvertex3f(0,0,0); //0\nvertex3f(Size,0,0); //1\nvertex3f(0,Size,0);\
      \ //2\npoly3i(-1,0,1,2); // the base poly - the first parameter indicates the\
      \ \"front\" of the face\nvertex3f(0,0,Size); //3\nvertex3f(Size,0,Size); //4\n\
      vertex3f(0,Size,Size); //5\npoly3i(1,3,4,5); // the top poly\n//\npoly4i(-1,3,0,2,5);\
      \ // the three sides.\npoly4i(-1,3,4,1,0); //\npoly4i(-1,2,1,4,5); //\n\nreturn\
      \ endbrush();\n}\n\nDefaultProperties\n{\nSize=128\nGroupName=Halfcube\nBitmapFilename=\"\
      BBHalfCube\"\nToolTip=\"half a cube\"\n}\n</uscript>\n\n\t\n\n==Tips And Tricks==\n\
      \n===Naming polys===\n\n[[Legacy:Mychaeel|Mychaeel]] came up with a way to use\
      \ an expression to set the ItemName parameter in the poly building functions.\
      \ First declare a ''name'' variable in your BrushBuilder subclass; then use\
      \ ''SetPropertyText'' to set it using an arbitarily constructed ''string'' value;\
      \ then take the ''name'' value from the variable you declared. \n\n<uscript>\n\
      // declare a name variable:\nvar name DynItemName;  \n\n// set it as needed:\n\
      SetPropertyText( \"DynItemName\" , string(i) );\n\n// use the DynItemName variable\
      \ in the poly call:\nPoly4i( sgn , Va2 , Vb2 , Vb1 , Va1 , DynItemName , PolyFlags\
      \ );\n</uscript>\n\n==Running Unrealscript in the Editor==\n\nA brushbuilder\
      \ is an Object, and is one of the few (very few) classes in which you can run\
      \ UnrealScript within the editor. The editor calls the Build() function of a\
      \ brushbuilder to cause it to create a brush. You are not required to use this\
      \ function to make a brush, however, and can do virtually anything you like\
      \ with it! Remember that UnrealEd and the actual game run using mostly the same\
      \ engine - as a result you can essentially treat your brushbuilder as any Object.\
      \ Basically, anything you can do in the game, you can do with the brushbuilder.\n\
      \n===Obtaining actor reference===\n\nGenerally the first thing you will want\
      \ to do in the Build script is to find an actor to do your dirty work. Objects\
      \ can't use Spawn or a myriad of other things. It is quite simple to do so:\n\
      \n<uscript>\n// A base class you can extend to call code within the editor.\n\
      class EditorScript extends BrushBuilder;\n\nfunction actor LocateActor()\n{\n\
      \  local actor I;\n  foreach AllObjects( class'Actor', I ) return I;\n}\n\n\
      event bool Build()\n{\n  ExecuteScript( LocateActor() );\n  return false;\n\
      }\n\nfunction ExecuteScript( actor A )\n{\n  // Do whatever you want here, or\
      \ ideally subclass this to make your own custom functionality.\n}\n</uscript>\n\
      \nInstead of AllObjects iterator, you can use the FindObject(). Use SetPropertyText()\
      \ and a temp variable if you know name of the actor you're looking for. Don't\
      \ forget to clear the temp variable after calling SetPropertyText(), leaving\
      \ actor references in objects most likely [[Legacy:Creating_Actors_And_Objects|will\
      \ cause crashes]] on save or exit.\n\n<uscript>\n\nstruct SEditorActor\n{\n\t\
      var string Actor;\n\tvar int MaxId;\n};\n\nvar array<SEditorActor> EditorActors;\n\
      var Actor TempEditorActor;\n\nevent bool Build()\n{\n\tlocal Actor A;\n\t\n\t\
      // Find actor reference\n\tA = FindAnyActor();\n\tif( A == None )\n\t\treturn\
      \ false;\n\n\t//...\n}\n\nfunction Actor FindAnyActor()\n{\n\tlocal SEditorActor\
      \ E;\n\tlocal Actor A;\n\tlocal int i,j;\n\t\t\n\tfor( i=0; i!=EditorActors.Length;\
      \ ++i )\n\t{\n\t\tE = EditorActors[i];\n\t\tfor( j=0; j!=E.MaxId; ++j )\n\t\t\
      {\n\t\t\tSetPropertyText(\"TempEditorActor\",E.Actor$j);\n\t\t\tif( TempEditorActor\
      \ != None )\n\t\t\t{\n\t\t\t\tA = TempEditorActor;\n\t\t\t\tTempEditorActor\
      \ = None;\n\t\t\t\tLog( \"Actor Ref:\" @ A, class.name );\n\t\t\t\treturn A;\n\
      \t\t\t}\n\t\t}\n\t}\t\n\tBadParameters( \"Could not find any actors in the level.\"\
      \ );\n\treturn None;\n}\n\nDefaultProperties\n{\n\t// MyLevel.LevelInfo0 should\
      \ exist in every level, empty or not.\n\tEditorActors(0)=(Actor=\"MyLevel.LevelInfo\"\
      ,MaxId=8)\n\tEditorActors(1)=(Actor=\"MyLevel.Camera\",MaxId=64)\n\tEditorActors(2)=(Actor=\"\
      MyLevel.Brush\",MaxId=128)\n}\n</uscript>\n\nNow that you have an actor, you\
      \ can call functions from it to do whatever you like. If you have need of more\
      \ complex functionality, you can create your own actor class, then use the actor\
      \ class you found using LocateActor() to spawn your own actor, which can then\
      \ be instructed to do whatever you like. '''Note that actors spawned in this\
      \ manner will not have some functions such as tick executed on them in the editor.'''\n\
      \n===User Input===\n\nYou can accept parameters simply by defining variables\
      \ like you would in any other Unrealscript. However, you cannot specify a group\
      \ name.\n\n<uscript>\n// These will not show up as parameters, but can still\
      \ be used within the script.\nvar float Counter;\nvar(Stuff) string Names;\n\
      \n// These variables will show up as parameters\n// UnrealEd will intelligently\
      \ create the appropriate form of text box/whatever as appropriate for the type\
      \ of variable.\nvar() int Count;\nvar() array<vector> Offsets;\n</uscript>\n\
      \nThe default BrushBuilder parameters window is very small and not resizable.\
      \ Keep the parameters names short so there can be more space for parameter values.\n\
      \n===Actor modification notes===\n\n'''Note that changes made by your function\
      \ or by the indirect consequences of your functions will actually affect actors\
      \ in the level! If you save the level, those changes will be '''''permanent''''',\
      \ and Undo will '''''not''''' work reliably against these changes. Sometimes\
      \ it will, sometimes it won't, depending on your code. You can still recover\
      \ things by loading from your last save, however. Save really often, and be\
      \ extremely careful with calling the destroy function on things.'''\n\nAs a\
      \ side-note, calling destroy on things also tends to cause General Protection\
      \ Faults, but it will not always do this. Sometimes it will also refuse to save\
      \ your level after you have destroyed something through script. I believe that\
      \ this is due to the lack of the Tick function. As you may know, Destroy() is\
      \ a special type of latent function and the actor is not actually destroyed\
      \ until the end of the tick, though it is flagged as bDeleteMe and as a result\
      \ many operations refuse to touch it, knowing that it has already been declared\
      \ 'dead.'\n\n===Obtaining viewport camera reference===\n\nFind viewport reference\
      \ and camera will be in its Actor variable. To find all viewport names use console\
      \ command '''obj list class=viewport'''\n\n<uscript>\nvar Viewport TempViewport;\n\
      function Camera GetCamera()\n{\n\tlocal Camera C;\n\tSetPropertyText(\"TempViewport\"\
      ,\"U2Viewport0\");\n\tC = Camera(TempViewport.Actor);\n\tTempViewport = None;\n\
      \treturn C;\t\n}\n</uscript>\n\nUnrealEd 3.0 viewports:\n\n<uscript>\n\tTerrainHeightmap\n\
      \tTerrainLayers\n\tTerrainDecoLayers\n\tMatineeScenes\n\tMatineeActions\n\t\
      MatineeSubActions\n\tU2Viewport0\n\tU2Viewport1\n\tU2Viewport2\n\tU2Viewport3\n\
      \tMeshViewer\n\tAnimationViewer\n\tPrefabBrowser\n\tLIPSinc\n\tStaticMeshBrowser\n\
      \tTextureBrowser\n\tTextureBrowserUsed\n\tTextureBrowserMRU\n</uscript>\n\n\
      ===BrushBuilder object persistence===\n\nBrushBuilders are destroyed and created\
      \ when new level is loaded. When UnrealEd starts up there may be more that one\
      \ copy of each BrushBuilder.\n\n==Comments ==\n\n'''Foxpaw:''' I refactored\
      \ the bit about brushbuilders being used for custom editor functions, and I\
      \ added what I've learned about them, but I think this topic deserves it's own\
      \ page. It is technically a custom brushbuilder, but I don't think that people\
      \ will find it here. I already had the idea and decided to read up about the\
      \ brushbuilder stuff to see if anyone else had tried it, but otherwise I doubt\
      \ a person looking to run unrealscript in the editor would look here for the\
      \ answer.\n\n'''Switch:''' Keeping this in one place is so far ok. The page\
      \ is linked on [[Legacy:UnrealScript|UnrealScript]].\n\n'''Dushnok:''' I'm very\
      \ newbish at uscript but I added the little example (halfcube) . Just for newbies\
      \ like me :) Do you think it's ok ?\n\n'''EntropicLqd:''' Nice example.  I'd\
      \ be inclined to define all the points first and then the polygons afterwards.\
      \  Question though - The first parameter indicates the \"front\" of the face\
      \ by specifying the direction the vertices should be traversed.  Presumably\
      \ the sign is reversed if the vertices are specified in reverse order. e.g.\
      \ The following are equivalent:\n\n<uscript>\npoly3i(-1,0,1,2);\npoly3i(1,2,1,0);\n\
      </uscript>\n\nIs there a \"best way\" to specify the order of the vertices?\n\
      \n'''Tarquin:''' the vector made by the first two vertices appears to give the\
      \ orientation of the texture, but I've not managed to pin this down exactly.\n\
      \n'''OlympusMons:''' Changed category to refactor me.\n\n----\n\n[[:Category:Legacy\
      \ Refactor Me]] &ndash; Badly needs a more \"user-friendly\" format, with some\
      \ pictures.\n[[Category:Legacy Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 7317
name: "Legacy:Scripting Custom Brushbuilders"
revision:
  revid: 7317
  parentid: 7319
  user: "211.27.199.123"
  timestamp: 1137982957.000000000
  comment: "*"
timestamp: 1668763525.179083000
