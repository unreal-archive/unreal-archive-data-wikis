---
parse:
  title: "Legacy:Dynamic Array"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Definition\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Definition</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Syntax\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Syntax</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Properties_and_Methods\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Properties and Methods</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#UnrealEngine_2\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">UnrealEngine 2</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#UnrealEngine_3\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">UnrealEngine 3</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Dynamic_Arrays_as_Config_Variables\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Dynamic Arrays as\
      \ Config Variables</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"><a\
      \ href=\"#Related_Topics\"><span class=\"tocnumber\">5</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Definition\">Definition</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Dynamic_Array?section=1\"\
      \ title=\"Edit section: Definition\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>An array is a series of variables stored together\
      \ and references as one variable. You can also access individual elements of\
      \ the array variable. It is often likened to a list – it could be a list of\
      \ integers, a list of names, a list of strings, etcetera. You can even have\
      \ arrays of structs and arrays of references.</p>\n<p>A dynamic array is an\
      \ array that can be lengthened or shortened to accomodate the number of elements\
      \ in the array. Dynamic arrays support is implemented in UnrealScript starting\
      \ with UnrealEngine2.</p>\n<p>Dynamic arrays have advantages and disadvantages\
      \ when compared to arrays with a fixed number of elements (for these, see <a\
      \ href=\"/Legacy:Variable_Syntax\" title=\"Legacy:Variable Syntax\">Variable\
      \ Syntax</a>). Dynamic arrays cannot be replicated. However, they can be resized\
      \ and they are faster than static arrays. Although this may seem strange, it's\
      \ true - dynamic arrays can actually be accessed <b>faster</b> than static arrays.\
      \ However, the difference is primarily academic, as both have an almost negligible\
      \ access time.</p>\n<h2><span class=\"mw-headline\" id=\"Syntax\">Syntax</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Dynamic_Array?section=2\" title=\"Edit section: Syntax\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<pre>var<i>/</i>local\
      \ array&lt;<i>type</i>&gt; <i>ArrayName</i>, ...;\n</pre>\n<p>The <i>type</i>\
      \ can be any of the built-in or self-defined types (structs, enums, classes).\
      \ After declaration the dynamic array is empty, i.e. the array's length is zero.</p>\n\
      <p><b>Note 1:</b> UnrealEngine 2 does not bool support bool arrays. You can\
      \ declare them, but they won't work. Use a byte array instead, it has the least\
      \ memory usage per element. UnrealEngine 3 correctly supports bool arrays, though.</p>\n\
      <p><b>Note 2:</b> Be careful when declaring a dynamic array of classes. The\
      \ correct syntax for this is:</p>\n<pre>array&lt;class&lt;<i>type</i>&gt; &gt;\n\
      </pre>\n<p>Note the space between the two closing angle brackets. If you don't\
      \ put the space there, the parser will recognize it as the operator <code>&gt;&gt;</code>\
      \ and report a syntax error.</p>\n<p>To access a dynamic array use this syntax:</p>\n\
      <pre><i>ArrayName</i>[<i>element number</i>]\n</pre>\n<p>If you read an array\
      \ element that doesn't exist because it's beyond the array's length, you'll\
      \ get a null value (see below) and an \"Accessed array out of bounds\" <a href=\"\
      /Legacy:Log_Warnings\" title=\"Legacy:Log Warnings\">warning</a> is logged.</p>\n\
      <p>If you write to an array element that doesn't exist (yet) because the array\
      \ is too short, the array will automatically increase its length. All new elements\
      \ inserted between the former end of the array and the element you are writing\
      \ to are initialized with their respective null element (zero, empty string\
      \ or None, depending on the array's type). <b>Note:</b> Arrays of structs can\
      \ only be extended that way when assigning <i>an entire struct</i> not only\
      \ one property of the struct because only the first really assigns something\
      \ to the array, while the second actually tries to <i>access</i> an object (not)\
      \ stored in the array to modify one of its properties.</p>\n<p><b>Note:</b>\
      \ You can't use a combination of dynamic and static arrays.<br />\nThe declaration\
      \ <code>var array&lt;string&gt; StringArray[10];</code> will actually be compiled\
      \ and used as a static array declared as <code>var string StringArray[10];</code></p>\n\
      <p>Also declaring dynamic arrays of dynamic arrays won't work. Here you can\
      \ use the same workaround as mentioned for static arrays in <a href=\"/Legacy:Variable_Syntax\"\
      \ title=\"Legacy:Variable Syntax\">Variable Syntax</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Properties_and_Methods\">Properties and Methods</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Dynamic_Array?section=3\" title=\"Edit section: Properties\
      \ and Methods\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Dynamic arrays behave a bit like objects. They have properties and methods\
      \ to access and modify them.</p>\n<h3><span class=\"mw-headline\" id=\"UnrealEngine_2\"\
      >UnrealEngine 2</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Dynamic_Array?section=4\" title=\"Edit section:\
      \ UnrealEngine 2\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>UnrealEngine 2 provides the following properties and methods:</p>\n<dl>\n\
      <dt>Length&#160;</dt>\n<dd>Returns the number of elements in the array, similar\
      \ to ArrayCount(<i>ArrayName</i>) for static arrays. So, for example, if the\
      \ array has no elements, <i>ArrayName.Length</i> will have a value of 0 (zero),\
      \ if the array has 47 elements, <i>ArrayName.Length</i> will equal 47, and so\
      \ on. You can assign a new length using the <code>=</code> operator. Increasing\
      \ the length adds empty elements at the end of the array while preserving the\
      \ existing elements. Decreasing the length removes only the last elements without\
      \ changing the other ones.<br />\n<b>Note:</b> Only use the <code>=</code> operator\
      \ to change the length! Don't pass the length property as an 'out' parameter\
      \ to a function or operator. This specificly also includes operators like <code>++</code>\
      \ or <code>-=-</code>.</dd>\n</dl>\n<dl>\n<dt>Remove(<i>position</i>, <i>number</i>)&#160;</dt>\n\
      <dd>Removes <i>number</i> elements from the array, starting at <i>position</i>.\
      \ All elements before <i>position</i> and from <i>position</i>+<i>number</i>\
      \ on are not changed, but the element indices change, i.e. the element formerly\
      \ accessed through <i>ArrayName</i>[<i>position</i>+<i>number</i>] is accessed\
      \ through <i>ArrayName</i>[<i>position</i>] after the removing.</dd>\n</dl>\n\
      <dl>\n<dt>Insert(<i>position</i>, <i>number</i>)&#160;</dt>\n<dd>Inserts <i>number</i>\
      \ empty elements into the array at <i>position</i>. The indices of the following\
      \ elements are increased by <i>number</i> in order to make room for the new\
      \ elements.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"UnrealEngine_3\"\
      >UnrealEngine 3</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Dynamic_Array?section=5\" title=\"Edit section:\
      \ UnrealEngine 3\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>In UnrealEngine 3, the following additional dynamic array methods are available:</p>\n\
      <dl>\n<dt>Add(<i>number</i>)&#160;</dt>\n<dd>Adds <i>number</i> empty elements\
      \ at the end of the array.</dd>\n<dt>AddItem(<i>value</i>)&#160;</dt>\n<dd>Adds\
      \ <i>value</i> as new element to the end of the array.</dd>\n<dt>RemoveItem(<i>value</i>)&#160;</dt>\n\
      <dd>Removes all occurances of <i>value</i> from the array. For example <code>ar.RemoveItem(None);</code>\
      \ will remove all empty elements from the object array <i>ar</i>. To find out,\
      \ how many elements were removed you need to compare the length of the array\
      \ before and after this operation.</dd>\n<dt>InsertItem(<i>position</i>, <i>value</i>)&#160;</dt>\n\
      <dd>Inserts <i>value</i> as new element at index <i>position</i>.</dd>\n<dt>Find(<i>value</i>)&#160;</dt>\n\
      <dd>Does a linear search for <i>value</i> in the array and returns the first\
      \ matching array index. If the value isn't found, the value INDEX_NONE (i.e.\
      \ -1) is returned.</dd>\n<dt>Find(<i>property</i>, <i>value</i>)&#160;</dt>\n\
      <dd>This is a special version of the Find method for struct arrays. The <i>property</i>\
      \ parameter is the name of the struct element <i>value</i> should be compared\
      \ to. For example <code>vectorArray.Find('X', 0.0)</code> will return the first\
      \ index with the X coordinate being zero. Again, a return value of INDEX_NONE\
      \ signals that no matching element was found.</dd>\n</dl>\n<p>UnrealEngine 3\
      \ also allows dynamic arrays to be used as iterators in ForEach loops:</p>\n\
      <dl>\n<dt><b>foreach</b> <i>arrayname</i>(<i>valuevariable</i>)</dt>\n<dt><b>foreach</b>\
      \ <i>arrayname</i>(<i>valuevariable</i>, <i>indexvariable</i>)&#160;</dt>\n\
      <dd>The <i>valuevariable</i> needs to be of the same type as the array, the\
      \ <i>indexvariable</i> must be of type int. Modifications to the value or index\
      \ variables will <i>not</i> write through to the array or otherwise affect the\
      \ iteration.<br />\n<b>Note:</b> The iteration will skip values if you use the\
      \ <b>Remove</b>(i, n) or <b>RemoveItem</b>(v) methods on the array to remove\
      \ any elements up to and including the current element. Even using the index\
      \ version of the iterator and modifying the index variable according to the\
      \ number of elements removed will <i>not</i> work. You will have to use an \"\
      oldskool\" for loop to do this kind of work.</dd>\n</dl>\n<h2><span class=\"\
      mw-headline\" id=\"Dynamic_Arrays_as_Config_Variables\">Dynamic Arrays as Config\
      \ Variables</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Dynamic_Array?section=6\" title=\"Edit section:\
      \ Dynamic Arrays as Config Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Dynamic arrays can be initialized from .ini files\
      \ by adding the <code>config</code> keyword to their <a href=\"/Legacy:Variable_Syntax\"\
      \ title=\"Legacy:Variable Syntax\">declaration</a>. Given the following class...</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> DynamicArrayTest\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span>\n  <span\
      \ class=\"kw1\">config</span>;\n \n<span class=\"kw1\">var</span> <span class=\"\
      kw1\">config</span> array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> MyDynamic<span class=\"re1\">Array</span>&lt; SEMI &gt;</pre></div>\n\
      </div>\n<p>...the corresponding .ini entries look as follows:</p>\n<pre> [DynamicArrayTest.DynamicArrayTest]\n\
      \ MyDynamicArray=first entry\n MyDynamicArray=second entry\n MyDynamicArray=third\
      \ entry\n</pre>\n<p>Note the lack of array indices.</p>\n<p>If you leave out\
      \ the MyDynamicArray, like this:</p>\n<pre> [DynamicArrayTest.DynamicArrayTest]\n\
      </pre>\n<p>the result will be an empty MyDynamicArray, even if you have default\
      \ values set in the class' defaultproperties block</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Dynamic_Array?section=7\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Variable_Syntax\" title=\"\
      Legacy:Variable Syntax\">Variable Syntax</a></li>\n<li>Dynamic arrays in <a\
      \ href=\"/Legacy:Dynamic_Array/UnrealEngine_1\" title=\"Legacy:Dynamic Array/UnrealEngine\
      \ 1\">Legacy:Dynamic Array/UnrealEngine 1</a></li>\n</ul>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.048 seconds\nReal time usage: 0.049 seconds\nPreprocessor\
      \ visited node count: 40/1000000\nPreprocessor generated node count: 74/1000000\n\
      Post‐expand include size: 19/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:963-0!*!0!!en!*!*\
      \ and timestamp 20221118022105 and revision id 2612\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Array/UnrealEngine 1"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Log Warnings"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Definition"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 0
    anchor: "Definition"
  - toclevel: 1
    level: "2"
    line: "Syntax"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 1023
    anchor: "Syntax"
  - toclevel: 1
    level: "2"
    line: "Properties and Methods"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 3166
    anchor: "Properties_and_Methods"
  - toclevel: 2
    level: "3"
    line: "UnrealEngine 2"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 3297
    anchor: "UnrealEngine_2"
  - toclevel: 2
    level: "3"
    line: "UnrealEngine 3"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 4757
    anchor: "UnrealEngine_3"
  - toclevel: 1
    level: "2"
    line: "Dynamic Arrays as Config Variables"
    number: "4"
    index: "6"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 6819
    anchor: "Dynamic_Arrays_as_Config_Variables"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "7"
    fromtitle: "Legacy:Dynamic_Array"
    byteoffset: 7562
    anchor: "Related_Topics"
  displaytitle: "Legacy:Dynamic Array"
  iwlinks: []
  wikitext:
    text: "==Definition==\n\nAn array is a series of variables stored together and\
      \ references as one variable. You can also access individual elements of the\
      \ array variable. It is often likened to a list &ndash; it could be a list of\
      \ integers, a list of names, a list of strings, etcetera. You can even have\
      \ arrays of structs and arrays of references.\n\nA dynamic array is an array\
      \ that can be lengthened or shortened to accomodate the number of elements in\
      \ the array. Dynamic arrays support is implemented in UnrealScript starting\
      \ with UnrealEngine2.\n\nDynamic arrays have advantages and disadvantages when\
      \ compared to arrays with a fixed number of elements (for these, see [[Legacy:Variable\
      \ Syntax|Variable Syntax]]). Dynamic arrays cannot be replicated. However, they\
      \ can be resized and they are faster than static arrays. Although this may seem\
      \ strange, it's true - dynamic arrays can actually be accessed '''faster'''\
      \ than static arrays. However, the difference is primarily academic, as both\
      \ have an almost negligible access time.\n\n==Syntax==\n var''/''local array<''type''>\
      \ ''ArrayName'', ...;\n\nThe ''type'' can be any of the built-in or self-defined\
      \ types (structs, enums, classes). After declaration the dynamic array is empty,\
      \ i.e. the array's length is zero.\n\n'''Note 1:''' UnrealEngine 2 does not\
      \ bool support bool arrays. You can declare them, but they won't work. Use a\
      \ byte array instead, it has the least memory usage per element. UnrealEngine\
      \ 3 correctly supports bool arrays, though.\n\n'''Note 2:''' Be careful when\
      \ declaring a dynamic array of classes. The correct syntax for this is:\n array<class<''type''>\
      \ ></code>\n\nNote the space between the two closing angle brackets. If you\
      \ don't put the space there, the parser will recognize it as the operator <code>>></code>\
      \ and report a syntax error.\n\nTo access a dynamic array use this syntax:\n\
      \n ''ArrayName''[''element number'']\n\nIf you read an array element that doesn't\
      \ exist because it's beyond the array's length, you'll get a null value (see\
      \ below) and an \"Accessed array out of bounds\" [[Legacy:Log Warnings|warning]]\
      \ is logged.\n\nIf you write to an array element that doesn't exist (yet) because\
      \ the array is too short, the array will automatically increase its length.\
      \  All new elements inserted between the former end of the array and the element\
      \ you are writing to are initialized with their respective null element (zero,\
      \ empty string or None, depending on the array's type). '''Note:''' Arrays of\
      \ structs can only be extended that way when assigning ''an entire struct''\
      \ not only one property of the struct because only the first really assigns\
      \ something to the array, while the second actually tries to ''access'' an object\
      \ (not) stored in the array to modify one of its properties.\n\n'''Note:'''\
      \ You can't use a combination of dynamic and static arrays.<br />The declaration\
      \ <code>var array<string> StringArray[10];</code> will actually be compiled\
      \ and used as a static array declared as <code>var string StringArray[10];</code>\n\
      \nAlso declaring dynamic arrays of dynamic arrays won't work. Here you can use\
      \ the same workaround as mentioned for static arrays in [[Legacy:Variable Syntax|Variable\
      \ Syntax]].\n\n==Properties and Methods==\n\nDynamic arrays behave a bit like\
      \ objects. They have properties and methods to access and modify them.\n\n===UnrealEngine\
      \ 2===\n\nUnrealEngine 2 provides the following properties and methods:\n\n\
      ; Length : Returns the number of elements in the array, similar to ArrayCount(''ArrayName'')\
      \ for static arrays.  So, for example, if the array has no elements, ''ArrayName.Length''\
      \ will have a value of 0 (zero), if the array has 47 elements, ''ArrayName.Length''\
      \ will equal 47, and so on.  You can assign a new length using the <code>=</code>\
      \ operator. Increasing the length adds empty elements at the end of the array\
      \ while preserving the existing elements. Decreasing the length removes only\
      \ the last elements without changing the other ones.<br />'''Note:''' Only use\
      \ the <code>=</code> operator to change the length! Don't pass the length property\
      \ as an 'out' parameter to a function or operator. This specificly also includes\
      \ operators like <code>++</code> or <code>-=-</code>.\n\n; Remove(''position'',\
      \ ''number'') : Removes ''number'' elements from the array, starting at ''position''.\
      \ All elements before ''position'' and from ''position''+''number'' on are not\
      \ changed, but the element indices change, i.e. the element formerly accessed\
      \ through ''ArrayName''[''position''+''number''] is accessed through ''ArrayName''[''position'']\
      \ after the removing.\n\n; Insert(''position'', ''number'') : Inserts ''number''\
      \ empty elements into the array at ''position''. The indices of the following\
      \ elements are increased by ''number'' in order to make room for the new elements.\
      \ \n\n===UnrealEngine 3===\n\nIn UnrealEngine 3, the following additional dynamic\
      \ array methods are available:\n\n; Add(''number'') : Adds ''number'' empty\
      \ elements at the end of the array.\n; AddItem(''value'') : Adds ''value'' as\
      \ new element to the end of the array.\n; RemoveItem(''value'') : Removes all\
      \ occurances of ''value'' from the array. For example <code>ar.RemoveItem(None);</code>\
      \ will remove all empty elements from the object array ''ar''. To find out,\
      \ how many elements were removed you need to compare the length of the array\
      \ before and after this operation.\n; InsertItem(''position'', ''value'') :\
      \ Inserts ''value'' as new element at index ''position''.\n; Find(''value'')\
      \ : Does a linear search for ''value'' in the array and returns the first matching\
      \ array index. If the value isn't found, the value INDEX_NONE (i.e. -1) is returned.\n\
      ; Find(''property'', ''value'') : This is a special version of the Find method\
      \ for struct arrays. The ''property'' parameter is the name of the struct element\
      \ ''value'' should be compared to. For example <code>vectorArray.Find('X', 0.0)</code>\
      \ will return the first index with the X coordinate being zero. Again, a return\
      \ value of INDEX_NONE signals that no matching element was found.\n\nUnrealEngine\
      \ 3 also allows dynamic arrays to be used as iterators in ForEach loops:\n;\
      \ '''foreach''' ''arrayname''(''valuevariable'')\n; '''foreach''' ''arrayname''(''valuevariable'',\
      \ ''indexvariable'') : The ''valuevariable'' needs to be of the same type as\
      \ the array, the ''indexvariable'' must be of type int. Modifications to the\
      \ value or index variables will ''not'' write through to the array or otherwise\
      \ affect the iteration.<br />'''Note:''' The iteration will skip values if you\
      \ use the '''Remove'''(i, n) or '''RemoveItem'''(v) methods on the array to\
      \ remove any elements up to and including the current element. Even using the\
      \ index version of the iterator and modifying the index variable according to\
      \ the number of elements removed will ''not'' work. You will have to use an\
      \ \"oldskool\" for loop to do this kind of work.\n\n==Dynamic Arrays as Config\
      \ Variables==\n\nDynamic arrays can be initialized from .ini files by adding\
      \ the <code>config</code> keyword to their [[Legacy:Variable Syntax|declaration]].\
      \  Given the following class...\n\n<uscript>\nclass DynamicArrayTest extends\
      \ Object\n  config;\n\nvar config array<string> MyDynamicArray;\n</uscript>\n\
      \n...the corresponding .ini entries look as follows:\n\n  [DynamicArrayTest.DynamicArrayTest]\n\
      \  MyDynamicArray=first entry\n  MyDynamicArray=second entry\n  MyDynamicArray=third\
      \ entry\n\nNote the lack of array indices.\n\nIf you leave out the MyDynamicArray,\
      \ like this:\n\n  [DynamicArrayTest.DynamicArrayTest]\n\nthe result will be\
      \ an empty MyDynamicArray, even if you have default values set in the class'\
      \ defaultproperties block\n\n==Related Topics==\n* [[Legacy:Variable Syntax|Variable\
      \ Syntax]]\n* Dynamic arrays in [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/UnrealEngine\
      \ 1]]"
  properties: []
  revId: 2612
name: "Legacy:Dynamic Array"
revision:
  revid: 2612
  parentid: 2613
  user: "Wormbo"
  timestamp: 1197145290.000000000
  comment: "how to find number of items removed"
timestamp: 1668763603.723428000
