---
parse:
  title: "Legacy:Dynamic Array/UnrealEngine 1"
  text:
    text: "<p>This is an example of <a href=\"/Legacy:Scripting_Operators\" title=\"\
      Legacy:Scripting Operators\">Scripting Operators</a>.</p>\n<p>Always wanted\
      \ to use those elusive array&lt;&gt;'s, but found the GetPropertyText/SetPropertyText\
      \ interface to be a problem? This is where operators come in. Here I provide\
      \ a simple interface to a dynamic array of integers (although this is easily\
      \ adaptable to support various types). You set elements of a dynamic array with\
      \ 'Array &lt;&lt; (Index:Data)' (totally arbitrary syntax I made up), and access\
      \ an element with 'Array&lt;Index&gt;'.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> TestDynArray <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">CommandLet</span>;\n<span class=\"co1\">// Our struct\
      \ to store the index/data pairs created using the : operator</span>\n<span class=\"\
      kw1\">struct</span> SetGroup\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">var</span> <span class=\"kw5\">int</span> Index;\n  <span class=\"kw1\"\
      >var</span> <span class=\"kw5\">int</span> NData;\n<span class=\"br0\">}</span>;\n\
      \ \n<span class=\"co1\">// The left side of the Array construct... the one that\
      \ actually does something.</span>\n<span class=\"kw1\">final</span> <span class=\"\
      kw1\">operator</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">int</span> <span class=\"sy0\"\
      >&lt;</span> <span class=\"br0\">(</span> DynArray A, <span class=\"kw5\">int</span>\
      \ B <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> A.<span class=\"me0\">Get</span><span class=\"br0\">(</span>\
      \ B <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">// The right side of the Array construct... does absolutely nothing, it's\
      \ just there to make the syntax pretty (complete the brackets).</span>\n<span\
      \ class=\"kw1\">final</span> postoperator <span class=\"kw5\">int</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"br0\">(</span> <span class=\"kw5\"\
      >int</span> A <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"co1\">// Sets an element in a dynamic array, taking a index/data pair\
      \ as the right side.</span>\n<span class=\"kw1\">final</span> <span class=\"\
      kw1\">operator</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span\
      \ class=\"br0\">)</span> DynArray <span class=\"sy0\">&lt;&lt;</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw1\">out</span> DynArray A, SetGroup\
      \ B <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  A.<span class=\"\
      me0\">Set</span><span class=\"br0\">(</span> B.<span class=\"me0\">Index</span>,\
      \ B.<span class=\"me0\">NData</span> <span class=\"br0\">)</span>;\n  <span\
      \ class=\"kw2\">return</span> A;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">// Creates a index/data pair</span>\n<span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"\
      nu0\">23</span><span class=\"br0\">)</span> SetGroup : <span class=\"br0\">(</span>\
      \ <span class=\"kw5\">int</span> A, <span class=\"kw5\">int</span> B <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ SetGroup C;\n  C.<span class=\"me0\">Index</span> <span class=\"sy0\">=</span>\
      \ A;\n  C.<span class=\"me0\">NData</span> <span class=\"sy0\">=</span> B;\n\
      \  <span class=\"kw2\">return</span> C;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"co1\">// Just a test function to show that we can use all sorts of\
      \ expressions within the index/data pairs</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> TestFunc<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"nu0\">10</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">int</span> main<span class=\"br0\"\
      >(</span> <span class=\"kw5\">string</span> parm <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> DynArray Arr;\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n  <span\
      \ class=\"kw1\">local</span> setgroup g;\n \n  <span class=\"co1\">// Instantiate\
      \ a DynArray</span>\n  Arr <span class=\"sy0\">=</span> <span class=\"kw1\"\
      >new</span> <span class=\"kw1\">class</span><span class=\"st0\">'DynArray'</span>;\n\
      \ \n  <span class=\"co1\">// Set some elements</span>\n  Arr <span class=\"\
      sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span>:<span\
      \ class=\"nu0\">78</span><span class=\"br0\">)</span>;\n  Arr <span class=\"\
      sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span\
      \ class=\"nu0\">30</span><span class=\"br0\">)</span>;\n  Arr <span class=\"\
      sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>TestFunc<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>:<span class=\"nu0\">69</span><span class=\"\
      br0\">)</span>;\n \n  <span class=\"co1\">// And log them</span>\n  <span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span> Arr<span class=\"sy0\">&lt;</span><span\
      \ class=\"nu0\">5</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\"\
      >@</span> Arr<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span\
      \ class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span> Arr<span class=\"sy0\"\
      >&lt;</span>TestFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">&gt;</span> <span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">return</span> <span class=\"nu0\">1</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Interface\
      \ to dynamic arrays. Evil.</span>\n<span class=\"kw1\">class</span> DynArray\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span>;\n \n\
      <span class=\"kw1\">var</span> array<span class=\"sy0\">&lt;</span>int<span\
      \ class=\"sy0\">&gt;</span> Data;\n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">int</span> CacheData<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span\
      \ class=\"br0\">]</span>;\n<span class=\"kw1\">var</span> <span class=\"kw5\"\
      >int</span> Num;\n<span class=\"kw1\">var</span> <span class=\"kw5\">bool</span>\
      \ bCached;\n \n<span class=\"co1\">// Parse the elements out of a string like\
      \ (2,3,5,2,4,6,2), and store them in our cache</span>\n<span class=\"kw1\">function</span>\
      \ Recache<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span> Nightmare;\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> NextPos;\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> z;\n  Num\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n  Nightmare <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">GetPropertyText</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Data\"</span><span class=\"br0\">)</span>;\n\
      \  Nightmare <span class=\"sy0\">=</span> <span class=\"kw3\">Right</span><span\
      \ class=\"br0\">(</span> NightMare, <span class=\"kw3\">Len</span><span class=\"\
      br0\">(</span>NightMare<span class=\"br0\">)</span><span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span> <span class=\"br0\">)</span>;\n  Nightmare <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Left</span><span class=\"br0\">(</span> NightMare,\
      \ <span class=\"kw3\">Len</span><span class=\"br0\">(</span>NightMare<span class=\"\
      br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">for</span><span class=\"br0\"\
      >(</span>i <span class=\"sy0\">=</span> <span class=\"kw3\">InStr</span><span\
      \ class=\"br0\">(</span> Nightmare, <span class=\"st0\">\",\"</span> <span class=\"\
      br0\">)</span>;i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>;z<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    CacheData<span class=\"br0\">[</span>Num<span class=\"sy0\">++</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw5\">int</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">Left</span><span class=\"br0\"\
      >(</span>Nightmare, i<span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \    Nightmare <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span> Nightmare, i <span class=\"sy0\">+</span> <span class=\"\
      nu0\">1</span>, <span class=\"kw3\">Len</span><span class=\"br0\">(</span> Nightmare\
      \ <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n    i <span class=\"\
      sy0\">=</span> <span class=\"kw3\">InStr</span><span class=\"br0\">(</span>\
      \ Nightmare, <span class=\"st0\">\",\"</span> <span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> i <span class=\"\
      sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">Len</span><span class=\"\
      br0\">(</span>NightMare<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n      CacheData<span\
      \ class=\"br0\">[</span>Num<span class=\"sy0\">++</span><span class=\"br0\"\
      >]</span> <span class=\"sy0\">=</span> <span class=\"kw5\">int</span><span class=\"\
      br0\">(</span> Nightmare <span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n  bCached <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// Set an element by building\
      \ a string like (3,3,5,9), and recache.</span>\n<span class=\"kw1\">function</span>\
      \ Set<span class=\"br0\">(</span> <span class=\"kw5\">int</span> Index, <span\
      \ class=\"kw5\">int</span> Data <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span>\
      \ Build;\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  Recache<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n \
      \ CacheData<span class=\"br0\">[</span>Index<span class=\"br0\">]</span> <span\
      \ class=\"sy0\">=</span> Data;\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Index <span class=\"sy0\">&gt;</span> Num<span class=\"sy0\"\
      >-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span>\n    Num\
      \ <span class=\"sy0\">=</span> Index<span class=\"sy0\">+</span><span class=\"\
      nu0\">1</span>;\n  Build <span class=\"sy0\">=</span> Build <span class=\"sy0\"\
      >$</span> <span class=\"st0\">\"(\"</span>;\n  <span class=\"kw2\">for</span><span\
      \ class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span\
      \ class=\"sy0\">&lt;</span>Num;i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    Build <span class=\"sy0\"\
      >=</span> Build <span class=\"sy0\">$</span> CacheData<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>;\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> i <span class=\"sy0\">!=</span> Num<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span> <span class=\"br0\">)</span>\n      Build <span class=\"\
      sy0\">=</span> Build <span class=\"sy0\">$</span> <span class=\"st0\">\",\"\
      </span>;\n  <span class=\"br0\">}</span>\n  Build <span class=\"sy0\">=</span>\
      \ Build <span class=\"sy0\">$</span> <span class=\"st0\">\")\"</span>;\n  <span\
      \ class=\"kw3\">SetPropertyText</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"Data\"</span>, Build<span class=\"br0\">)</span>;\n  bCached <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Get a cached element</span>\n<span class=\"kw1\"\
      >function</span> <span class=\"kw5\">int</span> Get<span class=\"br0\">(</span>\
      \ <span class=\"kw5\">int</span> Index <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"sy0\">!</span>bCached <span class=\"br0\">)</span>\n    Recache<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n  <span class=\"kw2\"\
      >return</span> CacheData<span class=\"br0\">[</span>Index<span class=\"br0\"\
      >]</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.065 seconds\nReal time usage: 0.133 seconds\n\
      Preprocessor visited node count: 8/1000000\nPreprocessor generated node count:\
      \ 52/1000000\nPost‐expand include size: 28/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1086-0!*!0!*!*!*!* and timestamp 20221118015427 and revision\
      \ id 2877\n -->\n"
  categories:
  - sortkey: "Dynamic Array/UnrealEngine 1"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Scripting Operators"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Dynamic Array/UnrealEngine 1"
  iwlinks: []
  wikitext:
    text: "This is an example of [[Legacy:Scripting Operators|Scripting Operators]].\n\
      \nAlways wanted to use those elusive array<>'s, but found the GetPropertyText/SetPropertyText\
      \ interface to be a problem? This is where operators come in. Here I provide\
      \ a simple interface to a dynamic array of integers (although this is easily\
      \ adaptable to support various types). You set elements of a dynamic array with\
      \ 'Array << (Index:Data)' (totally arbitrary syntax I made up), and access an\
      \ element with 'Array<Index>'.\n\n<uscript>\nclass TestDynArray extends CommandLet;\n\
      // Our struct to store the index/data pairs created using the : operator\nstruct\
      \ SetGroup\n{\n  var int Index;\n  var int NData;\n};\n\n// The left side of\
      \ the Array construct... the one that actually does something.\nfinal operator(50)\
      \ int < ( DynArray A, int B )\n{\n  return A.Get( B );\n}\n\n// The right side\
      \ of the Array construct... does absolutely nothing, it's just there to make\
      \ the syntax pretty (complete the brackets).\nfinal postoperator int > ( int\
      \ A )\n{\n  return A;\n}\n\n// Sets an element in a dynamic array, taking a\
      \ index/data pair as the right side.\nfinal operator(50) DynArray << ( out DynArray\
      \ A, SetGroup B )\n{\n  A.Set( B.Index, B.NData );\n  return A;\n}\n\n// Creates\
      \ a index/data pair\nfinal operator(23) SetGroup : ( int A, int B )\n{\n  local\
      \ SetGroup C;\n  C.Index = A;\n  C.NData = B;\n  return C;\n}\n\n// Just a test\
      \ function to show that we can use all sorts of expressions within the index/data\
      \ pairs\nfunction int TestFunc()\n{\n  return 10;\n}\n\nfunction int main( string\
      \ parm )\n{\n  local DynArray Arr;\n  local int i;\n  local setgroup g;\n\n\
      \  // Instantiate a DynArray\n  Arr = new class'DynArray';\n\n  // Set some\
      \ elements\n  Arr << (5:78);\n  Arr << (1:30);\n  Arr << (TestFunc():69);\n\n\
      \  // And log them\n  Log( Arr<5> @ Arr<1> @ Arr<TestFunc()> );\n  return 1;\n\
      }\n</uscript>\n\n<uscript>\n// Interface to dynamic arrays. Evil.\nclass DynArray\
      \ extends Object;\n\nvar array<int> Data;\nvar int CacheData[1024];\nvar int\
      \ Num;\nvar bool bCached;\n\n// Parse the elements out of a string like (2,3,5,2,4,6,2),\
      \ and store them in our cache\nfunction Recache()\n{\n  local int i;\n  local\
      \ string Nightmare;\n  local int NextPos;\n  local int z;\n  Num = 0;\n  Nightmare\
      \ = GetPropertyText(\"Data\");\n  Nightmare = Right( NightMare, Len(NightMare)-1\
      \ );\n  Nightmare = Left( NightMare, Len(NightMare)-1 );\n  for(i = InStr( Nightmare,\
      \ \",\" );i > 0;z++)\n  {\n    CacheData[Num++] = int( Left(Nightmare, i) );\n\
      \    Nightmare = Mid( Nightmare, i + 1, Len( Nightmare ) );\n    i = InStr(\
      \ Nightmare, \",\" );\n    if ( i == -1 && Len(NightMare) > 0 )\n      CacheData[Num++]\
      \ = int( Nightmare );\n  }\n  bCached = true;\n}\n\n// Set an element by building\
      \ a string like (3,3,5,9), and recache.\nfunction Set( int Index, int Data )\n\
      {\n  local string Build;\n  local int i;\n  Recache();\n  CacheData[Index] =\
      \ Data;\n  if ( Index > Num-1 )\n    Num = Index+1;\n  Build = Build $ \"(\"\
      ;\n  for(i=0;i<Num;i++)\n  {\n    Build = Build $ CacheData[i];\n    if ( i\
      \ != Num-1 )\n      Build = Build $ \",\";\n  }\n  Build = Build $ \")\";\n\
      \  SetPropertyText(\"Data\", Build);\n  bCached = true;\n}\n\n// Get a cached\
      \ element\nfunction int Get( int Index )\n{\n  if ( !bCached )\n    Recache();\n\
      \n  return CacheData[Index];\n}\n</uscript>\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 2877
name: "Legacy:Dynamic Array/UnrealEngine 1"
revision:
  revid: 2877
  parentid: 0
  user: "Wormbo"
  timestamp: 1197144637.000000000
  comment: "moved code from DynArrays page"
timestamp: 1668787902.330699000
