---
parse:
  title: "Legacy:Mod Authoring/The Anatomy Of Mutator"
  text:
    text: "<p>So now you've had your first exposure to writing a simple UT mod. Clearly\
      \ this isn't enough to shake the world or get a job in the industry. Let's take\
      \ a close look at the methods inside the <a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">Mutator</a> base class. This will give you a better idea of\
      \ what you can do with them. It only scratches the surface, however, because\
      \ you have the power to use a multitude of inherited functions as well as interact\
      \ with other objects.</p>\n<dl>\n<dt>ModifyPlayer&#160;</dt>\n<dd>We'll skip\
      \ the <code>PostRender</code> function for now and look at <code>ModifyPlayer</code>.\
      \ This is called by the game whenever a <a href=\"/Legacy:Pawn_(UT)\" title=\"\
      Legacy:Pawn (UT)\">Pawn (UT)</a> is respawned. It gives you a chance to modify\
      \ the pawn's variables or perform some game logic on the pawn. Remember to call\
      \ <code>Super.ModifyPlayer()</code> if you override this function. That will\
      \ call the parent class' version of the function.</dd>\n</dl>\n<dl>\n<dt>ScoreKill&#160;</dt>\n\
      <dd>is called whenever a pawn kills another pawn. This lets you influence the\
      \ score rules of the game, preventing point gains in certain situations or awarding\
      \ more points in others. Remember to call <code>Super.ScoreKill()</code> if\
      \ you override this function.</dd>\n</dl>\n<dl>\n<dt>MutatedDefaultWeapon&#160;</dt>\n\
      <dd>gives you an opportunity to give a different default weapon to a player\
      \ that enters a game or respawns. In UT, the default weapon is the Enforcer.\
      \ If you just want to change the default weapon, you don't need to override\
      \ this function. Instead, just add a DefaultWeapon definition to the defaultproperties\
      \ of your mutator. (See the bottom of PulseArena for an example).</dd>\n</dl>\n\
      <dl>\n<dt>MyDefaultWeapon, AddMutator&#160;</dt>\n<dd>You don't need to mess\
      \ with <code>MyDefaultWeapon</code> or <code>AddMutator</code>.</dd>\n</dl>\n\
      <dl>\n<dt>ReplaceWith, AlwaysKeep&#160;</dt>\n<dd>allow you to interdict objects\
      \ that the game wants to add to the world. You can replace objects on the fly\
      \ with other objects as they appear. The Botpack.Arena mutators are a great\
      \ example of this. They take all the weapons in a game and replace them with\
      \ one other weapon. If you are adding a new weapon to the game, you might want\
      \ to add an Arena mutator for it.</dd>\n</dl>\n<dl>\n<dt>IsRelevant&#160;</dt>\n\
      <dd>is called when the game wants to add an object to the world. You can override\
      \ it with special code and return true, to keep the object, or false, to reject\
      \ it. If you say false, the object will be destroyed.</dd>\n</dl>\n<dl>\n<dt>Mutate&#160;</dt>\n\
      <dd>is cool. It lets your mutator define new commands that player's can bind\
      \ to keys. If a player binds \"mutate givehealth\" to a key and then uses that\
      \ key, every mutator will get a mutate call with a \"givehealth\" parameter.\
      \ Your mutator might look for this string and give the player who sent the message\
      \ some extra health.</dd>\n</dl>\n<dl>\n<dt>MutatorTakeDamage&#160;</dt>\n<dd>as\
      \ described above, is called on DamageMutators. It lets damage mutators do some\
      \ kind of game logic based on a pawn taking damage. It also tells you where\
      \ the pawn was hit, the type of damage, and how much force the damage imparted.</dd>\n\
      </dl>\n<dl>\n<dt>RegisterHUDMutator&#160;</dt>\n<dd>is used to tell the game\
      \ that this mutator should get PostRender calls. PostRender passes you a Canvas\
      \ every frame. You can use the Canvas to draw stuff on the HUD. Look in the\
      \ Botpack.ChallengeHUD class for extensive examples of abusing the Canvas. Hehe.</dd>\n\
      </dl>\n<p>The best way to learn mutators is to read the code in the mutators\
      \ that ship with UT. In fact, you'll probably want to spend a lot of time just\
      \ pooring over the massive amount of code that comes with the game. Trace execution\
      \ paths and look at how the various classes override and interact with each\
      \ other. It can be <b>very intimidating</b> at first, but with time you'll get\
      \ more experienced with where things are and what things do. Don't be afraid\
      \ to go online and ask questions either or read other mod authors code. If you\
      \ spend the time it takes to learn, you will be rewarded with the ability to\
      \ take on larger, more difficult projects.</p>\n<hr />\n<p>Prev Page: <a href=\"\
      /Legacy:Mod_Authoring/Making_A_Mutator\" title=\"Legacy:Mod Authoring/Making\
      \ A Mutator\">Legacy:Mod Authoring/Making A Mutator</a> – <b>Section 8 of 12</b>\
      \ – Next Page: <a href=\"/Legacy:Mod_Authoring/Introduction_To_GameTypes\" title=\"\
      Legacy:Mod Authoring/Introduction To GameTypes\">Legacy:Mod Authoring/Introduction\
      \ To GameTypes</a></p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.036 seconds\n\
      Real time usage: 0.123 seconds\nPreprocessor visited node count: 5/1000000\n\
      Preprocessor generated node count: 36/1000000\nPost‐expand include size: 38/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1797-0!*!0!*!*!*!*\
      \ and timestamp 20221118155501 and revision id 4410\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/Making A Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/Introduction To GameTypes"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Mod Authoring/The Anatomy Of Mutator"
  iwlinks: []
  wikitext:
    text: "So now you've had your first exposure to writing a simple UT mod. Clearly\
      \ this isn't enough to shake the world or get a job in the industry. Let's take\
      \ a close look at the methods inside the [[Legacy:Mutator|Mutator]] base class.\
      \ This will give you a better idea of what you can do with them. It only scratches\
      \ the surface, however, because you have the power to use a multitude of inherited\
      \ functions as well as interact with other objects.\n\n; ModifyPlayer : We'll\
      \ skip the <code>PostRender</code> function for now and look at <code>ModifyPlayer</code>.\
      \ This is called by the game whenever a [[Legacy:Pawn (UT)|Pawn (UT)]] is respawned.\
      \ It gives you a chance to modify the pawn's variables or perform some game\
      \ logic on the pawn. Remember to call <code>Super.ModifyPlayer()</code> if you\
      \ override this function. That will call the parent class' version of the function.\n\
      \n; ScoreKill : is called whenever a pawn kills another pawn. This lets you\
      \ influence the score rules of the game, preventing point gains in certain situations\
      \ or awarding more points in others. Remember to call <code>Super.ScoreKill()</code>\
      \ if you override this function.\n\n; MutatedDefaultWeapon : gives you an opportunity\
      \ to give a different default weapon to a player that enters a game or respawns.\
      \ In UT, the default weapon is the Enforcer. If you just want to change the\
      \ default weapon, you don't need to override this function. Instead, just add\
      \ a DefaultWeapon definition to the defaultproperties of your mutator. (See\
      \ the bottom of PulseArena for an example).\n\n; MyDefaultWeapon, AddMutator\
      \ : You don't need to mess with <code>MyDefaultWeapon</code> or <code>AddMutator</code>.\n\
      \n; ReplaceWith, AlwaysKeep : allow you to interdict objects that the game wants\
      \ to add to the world. You can replace objects on the fly with other objects\
      \ as they appear. The Botpack.Arena mutators are a great example of this. They\
      \ take all the weapons in a game and replace them with one other weapon. If\
      \ you are adding a new weapon to the game, you might want to add an Arena mutator\
      \ for it.\n\n; IsRelevant : is called when the game wants to add an object to\
      \ the world. You can override it with special code and return true, to keep\
      \ the object, or false, to reject it. If you say false, the object will be destroyed.\n\
      \n; Mutate : is cool. It lets your mutator define new commands that player's\
      \ can bind to keys. If a player binds \"mutate givehealth\" to a key and then\
      \ uses that key, every mutator will get a mutate call with a \"givehealth\"\
      \ parameter. Your mutator might look for this string and give the player who\
      \ sent the message some extra health.\n\n; MutatorTakeDamage : as described\
      \ above, is called on DamageMutators. It lets damage mutators do some kind of\
      \ game logic based on a pawn taking damage. It also tells you where the pawn\
      \ was hit, the type of damage, and how much force the damage imparted.\n\n;\
      \ RegisterHUDMutator : is used to tell the game that this mutator should get\
      \ PostRender calls. PostRender passes you a Canvas every frame. You can use\
      \ the Canvas to draw stuff on the HUD. Look in the Botpack.ChallengeHUD class\
      \ for extensive examples of abusing the Canvas. Hehe.\n\nThe best way to learn\
      \ mutators is to read the code in the mutators that ship with UT. In fact, you'll\
      \ probably want to spend a lot of time just pooring over the massive amount\
      \ of code that comes with the game. Trace execution paths and look at how the\
      \ various classes override and interact with each other. It can be '''very intimidating'''\
      \ at first, but with time you'll get more experienced with where things are\
      \ and what things do. Don't be afraid to go online and ask questions either\
      \ or read other mod authors code. If you spend the time it takes to learn, you\
      \ will be rewarded with the ability to take on larger, more difficult projects.\n\
      \n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Making A Mutator]]\
      \ &ndash; '''Section 8 of 12''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Introduction\
      \ To GameTypes]]"
  properties: []
  revId: 4410
name: "Legacy:Mod Authoring/The Anatomy Of Mutator"
revision:
  revid: 4410
  parentid: 4411
  user: "Mychaeel"
  timestamp: 1021375967.000000000
  comment: "*"
timestamp: 1668786825.646168000
