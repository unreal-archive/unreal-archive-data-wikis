---
parse:
  title: "Legacy:Mod Authoring/Setting Up Your Project"
  text:
    text: "<p>Now its time to set up Unreal Tournament to build your project. First\
      \ things first, you need to understand how UnrealScript uses packages.</p>\n\
      <p>Packages are collections of game resources. The resources can be anything,\
      \ <a href=\"/Legacy:Texture\" title=\"Legacy:Texture\">Textures</a>, <a href=\"\
      /Legacy:Sound\" title=\"Legacy:Sound\">sounds</a>, <a href=\"/Legacy:Music\"\
      \ title=\"Legacy:Music\">music</a>, or compiled game code. The package format\
      \ is the same for all resources and multiple resource types can be mixed in\
      \ a package. For the sake of sanity, Unreal Tournament splits up packages into\
      \ resources. The textures directory contains packages with textures, the sounds\
      \ directory contains packages with sounds and so forth. Even though these packages\
      \ have different suffixes (.utx, .uax, etc) they are still the same kind of\
      \ file.</p>\n<p>You are going to be dealing with .u files, or code packages.\
      \ Code packages primarily contain compiled UnrealScript, but may also contain\
      \ textures and sounds that the code depends on.</p>\n<p>UnrealScript is an object\
      \ oriented language. If you aren't familiar with <a href=\"/Legacy:OOP\" title=\"\
      Legacy:OOP\" class=\"mw-redirect\">OOP</a>, now is a good time to take a detour\
      \ and read my guide to object oriented programming. Here is the link: <a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.orangesmoothie.org/tuts/GM-OOtutorial.html\"\
      >http://www.orangesmoothie.org/tuts/GM-OOtutorial.html</a>. This document is\
      \ fairly old, but still a good resource.</p>\n<p>Since UnrealScript is object\
      \ oriented, you won't be editing any of the original source. This is different\
      \ from Quake, where you edit the original source and then distribute a new DLL.\
      \ In UnrealScript, you will subclass the classes that shipped with Unreal Tournament,\
      \ modifying them to suit your needs.</p>\n<p>So lets make a package. I'm going\
      \ to refer to our test package as <code>MyPackage</code> but you will want to\
      \ call it the name of your mod. Where I say <code>MyPackage</code> you'll want\
      \ to replace with your own package name. Make a directory in your Unreal Tournament\
      \ directory called MyPackage. Underneath this directory, make a directory called\
      \ Classes. The UnrealScript compiler looks in the Classes directory for source\
      \ files to build.</p>\n<p>Now, edit <a href=\"/Legacy:UnrealTournament.Ini\"\
      \ title=\"Legacy:UnrealTournament.Ini\">UnrealTournament.ini</a> and search\
      \ for <code>EditPackages=</code>. You'll see a list of all the Unreal Tournament\
      \ packages. Add your package to the list:</p>\n<pre> EditPackages=Core\n EditPackages=Engine\n\
      \ EditPackages=Editor\n EditPackages=UWindow\n EditPackages=Fire\n EditPackages=IpDrv\n\
      \ EditPackages=UWeb\n EditPackages=UBrowser\n EditPackages=UnrealShare\n EditPackages=UnrealI\n\
      \ EditPackages=UMenu\n EditPackages=IpServer\n EditPackages=Botpack\n EditPackages=UTServerAdmin\n\
      \ EditPackages=UTMenu\n EditPackages=UTBrowser\n EditPackages=MyPackage\n</pre>\n\
      <p>Lets take a break and figure out what all those packages are for!</p>\n<dl>\n\
      <dt>Core&#160;</dt>\n<dd>contains fundamental unrealscript classes. You won't\
      \ need to look at the stuff in here much at all. Notice that Core, like many\
      \ .u files, has a related DLL. The DLL contains the C++ part of the package.</dd>\n\
      </dl>\n<dl>\n<dt>Engine&#160;</dt>\n<dd>is where things get interesting. You'll\
      \ soon become very familiar with the classes in engine. It contains the core\
      \ definitions of many classes that will be central to your mod. GameInfo describes\
      \ basic game rules. PlayerPawn describes basic player behavior. Actor describes\
      \ the basic behavior of UnrealScript objects.</dd>\n</dl>\n<dl>\n<dt>Editor&#160;</dt>\n\
      <dd>contains classes relevant to the editor. You'll never need to mess with\
      \ this, unless you become a totally elite hacker.</dd>\n</dl>\n<dl>\n<dt>UWindow&#160;</dt>\n\
      <dd>contains the basic classes relevant to the Unreal Tournament windowing system.\
      \ This is a good place to research how the system works if you want to add complex\
      \ windows and menus to your mod.</dd>\n</dl>\n<dl>\n<dt>Fire&#160;</dt>\n<dd>contains\
      \ the UnrealScript interface to the \"Fire Engine.\" The fire engine is the\
      \ code that makes all the cool water and fire effects in UT.</dd>\n</dl>\n<dl>\n\
      <dt>IpDrv&#160;</dt>\n<dd>contains classes for putting a UDP or TCP interface\
      \ into your mod. We use this for the IRC interface in the game, among other\
      \ things.</dd>\n</dl>\n<dl>\n<dt>UWeb&#160;</dt>\n<dd>contains classes for remote\
      \ web administration.</dd>\n</dl>\n<dl>\n<dt>UBrowser&#160;</dt>\n<dd>contains\
      \ the core classes for the in game server browser.</dd>\n</dl>\n<dl>\n<dt>UnrealShare&#160;</dt>\n\
      <dd>contains all the code from the shareware version of Unreal. Nalis galore!</dd>\n\
      </dl>\n<dl>\n<dt>UnrealI&#160;</dt>\n<dd>contains all the code from the full\
      \ version of Unreal. UnrealShare and UnrealI are included in UT because some\
      \ UT code is based on classes in these packages. There is a LOT of content here\
      \ you could use for your mod.</dd>\n</dl>\n<dl>\n<dt>UMenu&#160;</dt>\n<dd>contains\
      \ any menus for UT that don't depend on Botpack.</dd>\n</dl>\n<dl>\n<dt>IpServer&#160;</dt>\n\
      <dd>contains the GameSpy querying interface.</dd>\n</dl>\n<dl>\n<dt>Botpack&#160;</dt>\n\
      <dd>is the soul of the new machine. It contains all of the game logic for Unreal\
      \ Tournament. There are tons of kick ass toys to play with. This is where a\
      \ lot of your research time will be spent.</dd>\n</dl>\n<dl>\n<dt>UTServerAdmin&#160;</dt>\n\
      <dd>contains Unreal Tournamnt specific web admin code.</dd>\n</dl>\n<dl>\n<dt>UTMenu&#160;</dt>\n\
      <dd>contains UT menus that require content from Botpack.</dd>\n</dl>\n<dl>\n\
      <dt>UTBrowser&#160;</dt>\n<dd>contains browser code that requires content from\
      \ Botpack.</dd>\n</dl>\n<p>Notice that the order matters here. This is the order\
      \ in which the compiler will load the packages. <a href=\"/Legacy:TournamentGameInfo\"\
      \ title=\"Legacy:TournamentGameInfo\">TournamentGameInfo</a> in Botpack is a\
      \ <a href=\"/Legacy:GameInfo_(UT)\" title=\"Legacy:GameInfo (UT)\">GameInfo\
      \ (UT)</a>, so in order for the compiler to build that code, it needs to have\
      \ Engine loaded. Your mod should go at the end of the list to benefit from all\
      \ the code in the previous packages.</p>\n<hr />\n<p>Prev Page: <a href=\"/Legacy:Mod_Authoring/A_Few_Things_To_Watch_Out_For\"\
      \ title=\"Legacy:Mod Authoring/A Few Things To Watch Out For\">Legacy:Mod Authoring/A\
      \ Few Things To Watch Out For</a> – <b>Section 5 of 12</b> – Next Page: <a href=\"\
      /Legacy:Mod_Authoring/How_To_Build_Your_Package\" title=\"Legacy:Mod Authoring/How\
      \ To Build Your Package\">Legacy:Mod Authoring/How To Build Your Package</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.024 seconds\nReal time usage:\
      \ 0.049 seconds\nPreprocessor visited node count: 5/1000000\nPreprocessor generated\
      \ node count: 36/1000000\nPost‐expand include size: 38/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1795-0!*!0!*!*!*!* and timestamp 20221117220759 and revision\
      \ id 4406\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/How To Build Your Package"
  - ns: 100
    exists: true
    name: "Legacy:UnrealTournament.Ini"
  - ns: 100
    exists: true
    name: "Legacy:OOP"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/A Few Things To Watch Out For"
  - ns: 100
    exists: true
    name: "Legacy:Texture"
  - ns: 100
    exists: true
    name: "Legacy:TournamentGameInfo"
  - ns: 100
    exists: true
    name: "Legacy:Sound"
  - ns: 100
    exists: true
    name: "Legacy:GameInfo (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Music"
  templates: []
  images: []
  externallinks:
  - "http://www.orangesmoothie.org/tuts/GM-OOtutorial.html"
  sections: []
  displaytitle: "Legacy:Mod Authoring/Setting Up Your Project"
  iwlinks: []
  wikitext:
    text: "Now its time to set up Unreal Tournament to build your project. First things\
      \ first, you need to understand how UnrealScript uses packages.\n\nPackages\
      \ are collections of game resources. The resources can be anything, [[Legacy:Texture|Texture]]s,\
      \ [[Legacy:Sound|sound]]s, [[Legacy:Music|music]], or compiled game code. The\
      \ package format is the same for all resources and multiple resource types can\
      \ be mixed in a package. For the sake of sanity, Unreal Tournament splits up\
      \ packages into resources. The textures directory contains packages with textures,\
      \ the sounds directory contains packages with sounds and so forth. Even though\
      \ these packages have different suffixes (.utx, .uax, etc) they are still the\
      \ same kind of file.\n\nYou are going to be dealing with .u files, or code packages.\
      \ Code packages primarily contain compiled UnrealScript, but may also contain\
      \ textures and sounds that the code depends on.\n\nUnrealScript is an object\
      \ oriented language. If you aren't familiar with [[Legacy:OOP|OOP]], now is\
      \ a good time to take a detour and read my guide to object oriented programming.\
      \ Here is the link: http://www.orangesmoothie.org/tuts/GM-OOtutorial.html. This\
      \ document is fairly old, but still a good resource.\n\nSince UnrealScript is\
      \ object oriented, you won't be editing any of the original source. This is\
      \ different from Quake, where you edit the original source and then distribute\
      \ a new DLL. In UnrealScript, you will subclass the classes that shipped with\
      \ Unreal Tournament, modifying them to suit your needs.\n\nSo lets make a package.\
      \ I'm going to refer to our test package as <code>MyPackage</code> but you will\
      \ want to call it the name of your mod. Where I say <code>MyPackage</code> you'll\
      \ want to replace with your own package name. Make a directory in your Unreal\
      \ Tournament directory called MyPackage. Underneath this directory, make a directory\
      \ called Classes. The UnrealScript compiler looks in the Classes directory for\
      \ source files to build.\n\nNow, edit [[Legacy:UnrealTournament.Ini|UnrealTournament.ini]]\
      \ and search for <code>EditPackages=</code>. You'll see a list of all the Unreal\
      \ Tournament packages. Add your package to the list:\n\n  EditPackages=Core\n\
      \  EditPackages=Engine\n  EditPackages=Editor\n  EditPackages=UWindow\n  EditPackages=Fire\n\
      \  EditPackages=IpDrv\n  EditPackages=UWeb\n  EditPackages=UBrowser\n  EditPackages=UnrealShare\n\
      \  EditPackages=UnrealI\n  EditPackages=UMenu\n  EditPackages=IpServer\n  EditPackages=Botpack\n\
      \  EditPackages=UTServerAdmin\n  EditPackages=UTMenu\n  EditPackages=UTBrowser\n\
      \  EditPackages=MyPackage\n\nLets take a break and figure out what all those\
      \ packages are for!\n\n; Core : contains fundamental unrealscript classes. You\
      \ won't need to look at the stuff in here much at all. Notice that Core, like\
      \ many .u files, has a related DLL. The DLL contains the C++ part of the package.\n\
      \n; Engine : is where things get interesting. You'll soon become very familiar\
      \ with the classes in engine. It contains the core definitions of many classes\
      \ that will be central to your mod. GameInfo describes basic game rules. PlayerPawn\
      \ describes basic player behavior. Actor describes the basic behavior of UnrealScript\
      \ objects.\n\n; Editor : contains classes relevant to the editor. You'll never\
      \ need to mess with this, unless you become a totally elite hacker.\n\n; UWindow\
      \ : contains the basic classes relevant to the Unreal Tournament windowing system.\
      \ This is a good place to research how the system works if you want to add complex\
      \ windows and menus to your mod.\n\n; Fire : contains the UnrealScript interface\
      \ to the \"Fire Engine.\" The fire engine is the code that makes all the cool\
      \ water and fire effects in UT.\n\n; IpDrv : contains classes for putting a\
      \ UDP or TCP interface into your mod. We use this for the IRC interface in the\
      \ game, among other things.\n\n; UWeb : contains classes for remote web administration.\n\
      \n; UBrowser : contains the core classes for the in game server browser.\n\n\
      ; UnrealShare : contains all the code from the shareware version of Unreal.\
      \ Nalis galore!\n\n; UnrealI : contains all the code from the full version of\
      \ Unreal. UnrealShare and UnrealI are included in UT because some UT code is\
      \ based on classes in these packages. There is a LOT of content here you could\
      \ use for your mod. \n\n; UMenu : contains any menus for UT that don't depend\
      \ on Botpack.\n\n; IpServer : contains the GameSpy querying interface.\n\n;\
      \ Botpack : is the soul of the new machine. It contains all of the game logic\
      \ for Unreal Tournament. There are tons of kick ass toys to play with. This\
      \ is where a lot of your research time will be spent.\n\n; UTServerAdmin : contains\
      \ Unreal Tournamnt specific web admin code.\n\n; UTMenu : contains UT menus\
      \ that require content from Botpack.\n\n; UTBrowser : contains browser code\
      \ that requires content from Botpack.\n\nNotice that the order matters here.\
      \ This is the order in which the compiler will load the packages. [[Legacy:TournamentGameInfo|TournamentGameInfo]]\
      \ in Botpack is a [[Legacy:GameInfo (UT)|GameInfo (UT)]], so in order for the\
      \ compiler to build that code, it needs to have Engine loaded. Your mod should\
      \ go at the end of the list to benefit from all the code in the previous packages.\n\
      \n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/A Few Things To Watch\
      \ Out For]] &ndash; '''Section 5 of 12''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/How\
      \ To Build Your Package]]"
  properties: []
  revId: 4406
name: "Legacy:Mod Authoring/Setting Up Your Project"
revision:
  revid: 4406
  parentid: 4407
  user: "Wormbo"
  timestamp: 1040576616.000000000
  comment: "*"
timestamp: 1668786852.855015000
