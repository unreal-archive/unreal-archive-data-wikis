---
parse:
  title: "Legacy:Mod Authoring/Introduction To GameTypes"
  text:
    text: "<p>Where to start, where to start? This is the meat. The big bone. Now\
      \ we start getting into the hard stuff. <a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">Mutators</a> can do some cool stuff. They are pretty easy to\
      \ understand and they can do a lot of things by interacting with the game. They\
      \ can be mixed and matched to get even cooler effects... but they are <i>not</i>\
      \ very powerful. If you want to make a new type of game (say a <a href=\"/Legacy:Jailbreak\"\
      \ title=\"Legacy:Jailbreak\">Jailbreak</a> style mod) you can't do it with mutators.\
      \ You need to have complete control over the game rules. That's where the <a\
      \ href=\"/Legacy:GameInfo_(UT)\" title=\"Legacy:GameInfo (UT)\">GameInfo (UT)</a>\
      \ series of classes come into play.</p>\n<p>GameInfo is a class located in Engine.\
      \ It is created by the game engine and is the core of the game play rules. Unreal\
      \ Tournament makes use of a series of GameInfo subclasses located in the Botpack\
      \ package. <a href=\"/Legacy:TournamentGameInfo\" title=\"Legacy:TournamentGameInfo\"\
      >TournamentGameInfo</a> contains code that is universal to all of Unreal Tournament's\
      \ game types. <a href=\"/Legacy:DeathMatchPlus\" title=\"Legacy:DeathMatchPlus\"\
      >DeathMatchPlus</a> contains the code for running a normal death match. <a href=\"\
      /Legacy:TeamGamePlus\" title=\"Legacy:TeamGamePlus\">TeamGamePlus</a> contains\
      \ code for team deathmatch as well as general team management code. <a href=\"\
      /Legacy:DOM\" title=\"Legacy:DOM\" class=\"mw-redirect\">Domination</a> and\
      \ <a href=\"/Legacy:AS\" title=\"Legacy:AS\" class=\"mw-redirect\">Assault</a>,\
      \ which are subclasses of TeamGamePlus, implement those particular game types.</p>\n\
      <p>The first step in writing your new game type is to determine which class\
      \ to subclass. If you are writing a team game, you'll want to subclass TeamGamePlus.\
      \ If you are writing a game without teams, use DeathMatchPlus. If you are writing\
      \ a game that departs significantly from any previously styled game type, use\
      \ TournamentGameInfo. Subclassing is very beneficial... you immediately inherit\
      \ all of the code in your parent classes.</p>\n<p>Lets look at a very simple\
      \ GameType mod:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyGame <span class=\"kw1\">extends</span> DeathMatchPlus;\n\
      <span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \   GameName<span class=\"sy0\">=</span><span class=\"st0\">\"My Game\"</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>The above code, when saved\
      \ in a file called <code>MyGame.uc</code> will build a new game type. The only\
      \ difference here is that we've changed the name to \"My Game.\" This new name\
      \ will be reflected in many places: the <i>Practice Session</i> selection window,\
      \ the <a href=\"/Legacy:ScoreBoard\" title=\"Legacy:ScoreBoard\">scoreboard</a>\
      \ header, and so forth. If you play this game, it'll play just like DeathMatchPlus...\
      \ we haven't actually added any new behavior.</p>\n<p>Like Mutators, we need\
      \ to do a little .int file hacking in order to get the new game type to show\
      \ up in the menus. Edit your package's .int file and add the following lines\
      \ to the <code>[Public]</code> section:</p>\n<pre> Object=(Name=MyPackage.MyGame,Class=Class,MetaClass=Botpack.TournamentGameInfo)\n\
      \ Preferences=(Caption=\"My Game\",Parent=\"Game Types\",Class=MyPackage.MyGame,Immediate=True)\n\
      </pre>\n<p>The practice session and start server menus look in all .int files\
      \ for declared objects that have a MetaClass of Botpack.TournamentGameInfo.\
      \ If you add these line to your package's .int file, you'll get an entry called\
      \ \"My Game\" in the list of games. The name is taken from the GameName variable\
      \ of your GameInfo class. The <code>Preferences</code> line gives your game\
      \ a configuration entry in the <i>Advanced Options</i> menu. You probably don't\
      \ need to worry about that right now.</p>\n<p>So now we have a simple game to\
      \ start messing with. What do we do? Well lets look at a few of the methods\
      \ available in GameInfo. Remember, you'll need to do a lot of research on your\
      \ own. You'll only become a strong UnrealScript hacker if you spend time to\
      \ acquaint yourself with the code at your fingertips.</p>\n<hr />\n<p>Prev Page:\
      \ <a href=\"/Legacy:Mod_Authoring/The_Anatomy_Of_Mutator\" title=\"Legacy:Mod\
      \ Authoring/The Anatomy Of Mutator\">Legacy:Mod Authoring/The Anatomy Of Mutator</a>\
      \ – <b>Section 9 of 12</b> – Next Page: <a href=\"/Legacy:Mod_Authoring/A_First_Look_At_GameInfo\"\
      \ title=\"Legacy:Mod Authoring/A First Look At GameInfo\">Legacy:Mod Authoring/A\
      \ First Look At GameInfo</a></p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.038 seconds\nReal time usage: 0.040 seconds\nPreprocessor visited node count:\
      \ 8/1000000\nPreprocessor generated node count: 56/1000000\nPost‐expand include\
      \ size: 38/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1793-0!*!0!*!*!*!*\
      \ and timestamp 20221118023841 and revision id 43335\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/A First Look At GameInfo"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:AS"
  - ns: 100
    exists: true
    name: "Legacy:TournamentGameInfo"
  - ns: 100
    exists: true
    name: "Legacy:TeamGamePlus"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/The Anatomy Of Mutator"
  - ns: 100
    exists: true
    name: "Legacy:DOM"
  - ns: 100
    exists: true
    name: "Legacy:ScoreBoard"
  - ns: 100
    exists: true
    name: "Legacy:DeathMatchPlus"
  - ns: 100
    exists: true
    name: "Legacy:GameInfo (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Jailbreak"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Mod Authoring/Introduction To GameTypes"
  iwlinks: []
  wikitext:
    text: "Where to start, where to start? This is the meat. The big bone. Now we\
      \ start getting into the hard stuff. [[Legacy:Mutator|Mutator]]s can do some\
      \ cool stuff. They are pretty easy to understand and they can do a lot of things\
      \ by interacting with the game. They can be mixed and matched to get even cooler\
      \ effects... but they are ''not'' very powerful. If you want to make a new type\
      \ of game (say a [[Legacy:Jailbreak|Jailbreak]] style mod) you can't do it with\
      \ mutators. You need to have complete control over the game rules. That's where\
      \ the [[Legacy:GameInfo (UT)|GameInfo (UT)]] series of classes come into play.\n\
      \nGameInfo is a class located in Engine. It is created by the game engine and\
      \ is the core of the game play rules. Unreal Tournament makes use of a series\
      \ of GameInfo subclasses located in the Botpack package. [[Legacy:TournamentGameInfo|TournamentGameInfo]]\
      \ contains code that is universal to all of Unreal Tournament's game types.\
      \ [[Legacy:DeathMatchPlus|DeathMatchPlus]] contains the code for running a normal\
      \ death match. [[Legacy:TeamGamePlus|TeamGamePlus]] contains code for team deathmatch\
      \ as well as general team management code. [[Legacy:DOM|Domination]] and [[Legacy:AS|Assault]],\
      \ which are subclasses of TeamGamePlus, implement those particular game types.\n\
      \nThe first step in writing your new game type is to determine which class to\
      \ subclass. If you are writing a team game, you'll want to subclass TeamGamePlus.\
      \ If you are writing a game without teams, use DeathMatchPlus. If you are writing\
      \ a game that departs significantly from any previously styled game type, use\
      \ TournamentGameInfo. Subclassing is very beneficial... you immediately inherit\
      \ all of the code in your parent classes.\n\nLets look at a very simple GameType\
      \ mod:\n\n<uscript>\nclass MyGame extends DeathMatchPlus;\ndefaultproperties\n\
      {\n   GameName=\"My Game\"\n}\n</uscript>\n\nThe above code, when saved in a\
      \ file called <code>MyGame.uc</code> will build a new game type. The only difference\
      \ here is that we've changed the name to \"My Game.\" This new name will be\
      \ reflected in many places: the ''Practice Session'' selection window, the [[Legacy:ScoreBoard|scoreboard]]\
      \ header, and so forth. If you play this game, it'll play just like DeathMatchPlus...\
      \ we haven't actually added any new behavior.\n\nLike Mutators, we need to do\
      \ a little .int file hacking in order to get the new game type to show up in\
      \ the menus. Edit your package's .int file and add the following lines to the\
      \ <code>[Public]</code> section:\n\n  Object=(Name=MyPackage.MyGame,Class=Class,MetaClass=Botpack.TournamentGameInfo)\n\
      \  Preferences=(Caption=\"My Game\",Parent=\"Game Types\",Class=MyPackage.MyGame,Immediate=True)\n\
      \nThe practice session and start server menus look in all .int files for declared\
      \ objects that have a MetaClass of Botpack.TournamentGameInfo. If you add these\
      \ line to your package's .int file, you'll get an entry called \"My Game\" in\
      \ the list of games. The name is taken from the GameName variable of your GameInfo\
      \ class. The <code>Preferences</code> line gives your game a configuration entry\
      \ in the ''Advanced Options'' menu. You probably don't need to worry about that\
      \ right now.\n\nSo now we have a simple game to start messing with. What do\
      \ we do? Well lets look at a few of the methods available in GameInfo. Remember,\
      \ you'll need to do a lot of research on your own. You'll only become a strong\
      \ UnrealScript hacker if you spend time to acquaint yourself with the code at\
      \ your fingertips.\n\n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/The\
      \ Anatomy Of Mutator]] &ndash; '''Section 9 of 12''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/A\
      \ First Look At GameInfo]]"
  properties: []
  revId: 43335
name: "Legacy:Mod Authoring/Introduction To GameTypes"
revision:
  revid: 43335
  parentid: 43321
  user: "Wormbo"
  timestamp: 1274502228.000000000
  comment: "Reverted edits by [[Special:Contributions/Jinmartt|Jinmartt]] ([[User\
    \ talk:Jinmartt|Talk]]) to last revision by [[User:Wormbo|Wormbo]]"
timestamp: 1668786881.715924000
