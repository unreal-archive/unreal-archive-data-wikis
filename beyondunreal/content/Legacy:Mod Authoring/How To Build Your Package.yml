---
parse:
  title: "Legacy:Mod Authoring/How To Build Your Package"
  text:
    text: "<p>Now that your package is set up, you are ready to build it. You don't\
      \ have any code written yet, so lets make a very simple useless mod. This will\
      \ serve as a good example of making a new GameType.</p>\n<p>In the MyPackage\\\
      Classes directory, create a file called MyGame.uc. Put the following code inside\
      \ of it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> MyGame <span class=\"kw1\">extends</span> DeathMatchPlus;\n \n\
      <span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \tGameName<span class=\"sy0\">=</span><span class=\"st0\">\"My Game\"</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>This creates a class called\
      \ <code>MyGame</code> that is a subclass of <a href=\"/Legacy:DeathMatchPlus\"\
      \ title=\"Legacy:DeathMatchPlus\">DeathMatchPlus</a>. All we are doing is changing\
      \ the name of the game... pretty simple. Notice the inheritance in action. All\
      \ the code that makes up DeathMatchPlus is now a part of your game type.</p>\n\
      <p>Save the file and change directory to System. Type <code>ucc make</code>\
      \ and watch the code burn. Pretty soon, your package will be compiled and a\
      \ new MyPackage.u will be sitting in the System directory.</p>\n<p>In order\
      \ to make our new gametype show up in the menus, we have to give it a metaclass\
      \ definition. Create a file in the System directory called MyPackage.int. INT\
      \ files primarily contain <a href=\"/Legacy:Localization\" title=\"Legacy:Localization\"\
      >localization</a> information for foreign versions of the game, but they also\
      \ contain extra information about the classes inside a package.</p>\n<p>Add\
      \ the following lines to your .int file:</p>\n<pre> [Public]\n Object=(Name=MyPackage.MyGame,Class=Class,MetaClass=Botpack.TournamentGameInfo)\n\
      </pre>\n<p>Save it and exit. When UT's menus search for games to list in the\
      \ Game selection window, they search all the .int files in the System directory\
      \ for classes that have a MetaClass of <code>Botpack.TournamentGameInfo</code>.\
      \ Now your game will show up on that list. Start Unreal Tournament and go to\
      \ Start Practice Session. Find your game on the list. If you start it, \"My\
      \ Game\" will show up as the game's name in the scoreboard. Cool!</p>\n<p>So\
      \ that's how you build a basic project. Obviously writing a mod is a lot more\
      \ complicated than that. Now we'll get down and <i>really</i> dirty by looking\
      \ at the specifics of different types of mod.</p>\n<hr />\n<p>Prev Page: <a\
      \ href=\"/Legacy:Mod_Authoring/Setting_Up_Your_Project\" title=\"Legacy:Mod\
      \ Authoring/Setting Up Your Project\">Legacy:Mod Authoring/Setting Up Your Project</a>\
      \ – <b>Section 6 of 12</b> – Next Page: <a href=\"/Legacy:Mod_Authoring/Making_A_Mutator\"\
      \ title=\"Legacy:Mod Authoring/Making A Mutator\">Legacy:Mod Authoring/Making\
      \ A Mutator</a></p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.036 seconds\n\
      Real time usage: 0.037 seconds\nPreprocessor visited node count: 8/1000000\n\
      Preprocessor generated node count: 56/1000000\nPost‐expand include size: 38/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1792-0!*!0!*!*!*!*\
      \ and timestamp 20221117175807 and revision id 4397\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:DeathMatchPlus"
  - ns: 100
    exists: true
    name: "Legacy:Localization"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/Making A Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring/Setting Up Your Project"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Mod Authoring/How To Build Your Package"
  iwlinks: []
  wikitext:
    text: "Now that your package is set up, you are ready to build it. You don't have\
      \ any code written yet, so lets make a very simple useless mod. This will serve\
      \ as a good example of making a new GameType.\n\nIn the MyPackage\\Classes directory,\
      \ create a file called MyGame.uc. Put the following code inside of it:\n\n<uscript>\n\
      class MyGame extends DeathMatchPlus;\n\ndefaultproperties\n{\n\tGameName=\"\
      My Game\"\n}\n</uscript>\n\nThis creates a class called <code>MyGame</code>\
      \ that is a subclass of [[Legacy:DeathMatchPlus|DeathMatchPlus]]. All we are\
      \ doing is changing the name of the game... pretty simple. Notice the inheritance\
      \ in action. All the code that makes up DeathMatchPlus is now a part of your\
      \ game type.\n\nSave the file and change directory to System. Type <code>ucc\
      \ make</code> and watch the code burn. Pretty soon, your package will be compiled\
      \ and a new MyPackage.u will be sitting in the System directory.\n\nIn order\
      \ to make our new gametype show up in the menus, we have to give it a metaclass\
      \ definition. Create a file in the System directory called MyPackage.int. INT\
      \ files primarily contain [[Legacy:Localization|localization]] information for\
      \ foreign versions of the game, but they also contain extra information about\
      \ the classes inside a package.\n\nAdd the following lines to your .int file:\n\
      \n  [Public]\n  Object=(Name=MyPackage.MyGame,Class=Class,MetaClass=Botpack.TournamentGameInfo)\n\
      \nSave it and exit. When UT's menus search for games to list in the Game selection\
      \ window, they search all the .int files in the System directory for classes\
      \ that have a MetaClass of <code>Botpack.TournamentGameInfo</code>. Now your\
      \ game will show up on that list. Start Unreal Tournament and go to Start Practice\
      \ Session. Find your game on the list. If you start it, \"My Game\" will show\
      \ up as the game's name in the scoreboard. Cool!\n\nSo that's how you build\
      \ a basic project. Obviously writing a mod is a lot more complicated than that.\
      \ Now we'll get down and ''really'' dirty by looking at the specifics of different\
      \ types of mod.\n\n----\n\nPrev Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Setting\
      \ Up Your Project]] &ndash; '''Section 6 of 12''' &ndash; Next Page: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Making\
      \ A Mutator]]"
  properties: []
  revId: 4397
name: "Legacy:Mod Authoring/How To Build Your Package"
revision:
  revid: 4397
  parentid: 4399
  user: "Ip68-110-10-195.tc.ph.cox.net"
  timestamp: 1060301174.000000000
  comment: "*"
timestamp: 1668786831.456030000
