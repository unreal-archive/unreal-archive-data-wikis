---
parse:
  title: "Legacy:Creating An Interaction From A PlayerController"
  text:
    text: "<p><a href=\"/Legacy:Interaction\" title=\"Legacy:Interaction\">Interactions</a>\
      \ created from a <a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a> are much simpler than those created from <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">mutators</a>. You only need to add a small amount\
      \ of code, and a variable.</p>\n<p>First off, add a variable - bHasInteraction\
      \ (you dont want to give a player several interactions):</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">bool</span>\
      \ bHasInteraction</pre></div>\n</div>\n<p>Next, you will need to edit the state\
      \ \"PlayerWaiting\". Add a \"Begin:\" label (if you dont already have one),\
      \ and add this code under it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw2\">Begin</span>:\n\t<span class=\"kw2\">If</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>Viewport<span class=\"br0\">(</span><span\
      \ class=\"kw8\">Player</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"\
      sy0\">!</span>bHasInteraction<span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw8\">Player</span>.<span\
      \ class=\"kw8\">InteractionMaster</span>.<span class=\"me0\">AddInteraction</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyMod.MyInteraction\"</span>,\
      \ <span class=\"kw8\">Player</span><span class=\"br0\">)</span>;\n\t\tbHasInteraction\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\n\t\t<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>.. and that's it.</p>\n<p>Make sure you\
      \ don't try to add an interaction within PostBeginPlay(). It won't work because\
      \ Player is None.</p>\n<p>Interactions can do a whole load of stuff though,\
      \ so choose a section relating to what you want to do:</p>\n<ul>\n<li><a href=\"\
      /Legacy:HUD_Interactions\" title=\"Legacy:HUD Interactions\">HUD Interactions</a></li>\n\
      <li><a href=\"/Legacy:Keypress_Interactions\" title=\"Legacy:Keypress Interactions\"\
      >Keypress Interactions</a></li>\n<li><a href=\"/Legacy:Message_Interactions\"\
      \ title=\"Legacy:Message Interactions\">Message Interactions</a></li>\n</ul>\n\
      <h2><span class=\"mw-headline\" id=\"Comments\">Comments</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_An_Interaction_From_A_PlayerController?section=1\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Will:</b> Any problems understanding this? Anything\
      \ I could do to make it clearer? If so: tell me, or do it yourself&#160;;)</p>\n\
      <p><b>VonStrohmen:</b> I tried using this procedure, but for some reason an\
      \ InteractionMaster isn't spawned for my player controller. My player controller\
      \ is always a spectator, if that makes a difference, and I check for PlayerController.Player.InteractionMaster\
      \ every 2 seconds using a timer. The player is created, but the InteractionMaster\
      \ isn't for some reason. I thought this might have to do with the fact that\
      \ the player controller is always a spectator: any suggestions?</p>\n<p><b>MasterOfTheDark:</b>\
      \ I had the same problem as VonStrohmen, and I used this code instead to add\
      \ the interaction: ¶</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> EnterStartState<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">EnterStartState</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>Viewport<span class=\"br0\">(</span><span class=\"kw8\"\
      >Player</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bHasInteraction<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw8\">Player</span>.<span class=\"kw8\">InteractionMaster</span>.<span\
      \ class=\"me0\">AddInteraction</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"MyMod.MyInteraction\"</span>, <span class=\"kw8\">Player</span><span\
      \ class=\"br0\">)</span>;\n\t\tbHasInteraction <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">True</span>;\n\t<span class=\"br0\">}</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>The code written by Will might work in\
      \ previous versions of Unreal, but this is what is necessary for UT2003. (Oh,\
      \ and I checked it for net play. It works there, too.)</p>\n<p><b>Wormbo:</b>\
      \ There are no Interactions in previous engine versions...&#160;;)</p>\n<p><b>RegularX:</b>\
      \ \"you dont want to give a player several interactions\" &lt;– why is that?\
      \ It can't juggle them?</p>\n<p><b>Mychaeel:</b> There's no technical problem\
      \ with having several <a href=\"/Legacy:Interaction\" title=\"Legacy:Interaction\"\
      >Interactions</a> stacked. I think what's meant there is \"You don't want to\
      \ <i>accidentally</i> give a player several <i>instances of the same Interaction</i>\"\
      \ if that code happens to be executed several times.</p>\n<p><b>RegularX:</b>\
      \ That's what I suspected. Question though - interactions I assume are client\
      \ side only. Does this mean that any config vars they use are based on the local\
      \ client and not the server (unless otherwise replicated)? I did some tests\
      \ last night and that seemed to be true, but I remember similar things being\
      \ much, much harder in Freehold UT to get the same effect (variables from a\
      \ client machine valid online)</p>\n<p><b>Mysterial:</b> Values of config properties\
      \ are taken from the machine they are spawned on (in this case, the client).\
      \ Additionally, for replicated actors, as far as the server is concerned the\
      \ properties have their default values, so changes in configuration will NOT\
      \ be automatically replicated - you will either have to set a seperate property\
      \ in an initialization function (e.g. PostBeginPlay()) or use replicated functions\
      \ (PlayerController in particular uses this to inform the server of various\
      \ clientside settings)</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.059\
      \ seconds\nReal time usage: 0.061 seconds\nPreprocessor visited node count:\
      \ 24/1000000\nPreprocessor generated node count: 68/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:762-0!*!0!*!*!*!*\
      \ and timestamp 20221118122731 and revision id 2177\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:HUD Interactions"
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  - ns: 100
    exists: true
    name: "Legacy:Message Interactions"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:Keypress Interactions"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Creating_An_Interaction_From_A_PlayerController"
    byteoffset: 1094
    anchor: "Comments"
  displaytitle: "Legacy:Creating An Interaction From A PlayerController"
  iwlinks: []
  wikitext:
    text: "[[Legacy:Interaction|Interaction]]s created from a [[Legacy:PlayerController|PlayerController]]\
      \ are much simpler than those created from [[Legacy:Mutator|mutator]]s. You\
      \ only need to add a small amount of code, and a variable.\n\nFirst off, add\
      \ a variable - bHasInteraction (you dont want to give a player several interactions):\n\
      \n<uscript>\nvar bool bHasInteraction\n</uscript>\n\nNext, you will need to\
      \ edit the state \"PlayerWaiting\". Add a \"Begin:\" label (if you dont already\
      \ have one), and add this code under it.\n\n<uscript>\nBegin:\n\tIf ((Viewport(Player)\
      \ != None) && (!bHasInteraction))\n\t\t{\n\t\tPlayer.InteractionMaster.AddInteraction(\"\
      MyMod.MyInteraction\", Player);\n\t\tbHasInteraction = True;\n\t\t}\n</uscript>\n\
      \n.. and that's it.\n\nMake sure you don't try to add an interaction within\
      \ PostBeginPlay().  It won't work because Player is None.\n\nInteractions can\
      \ do a whole load of stuff though, so choose a section relating to what you\
      \ want to do:\n\n*[[Legacy:HUD Interactions|HUD Interactions]]\n*[[Legacy:Keypress\
      \ Interactions|Keypress Interactions]]\n*[[Legacy:Message Interactions|Message\
      \ Interactions]]\n\n==Comments ==\n\n'''Will:''' Any problems understanding\
      \ this? Anything I could do to make it clearer? If so: tell me, or do it yourself\
      \ ;)\n\n'''VonStrohmen:''' I tried using this procedure, but for some reason\
      \ an InteractionMaster isn't spawned for my player controller. My player controller\
      \ is always a spectator, if that makes a difference, and I check for PlayerController.Player.InteractionMaster\
      \ every 2 seconds using a timer. The player is created, but the InteractionMaster\
      \ isn't for some reason. I thought this might have to do with the fact that\
      \ the player controller is always a spectator: any suggestions?\n\n'''MasterOfTheDark:'''\
      \ I had the same problem as VonStrohmen, and I used this code instead to add\
      \ the interaction: ¶\n\n<uscript>\nfunction EnterStartState()\n{\n\tSuper.EnterStartState();\n\
      \tif ((Viewport(Player) != None) && (!bHasInteraction))\n\t{\n\t\tPlayer.InteractionMaster.AddInteraction(\"\
      MyMod.MyInteraction\", Player);\n\t\tbHasInteraction = True;\n\t}\n}\n</uscript>\n\
      \nThe code written by Will might work in previous versions of Unreal, but this\
      \ is what is necessary for UT2003.  (Oh, and I checked it for net play.  It\
      \ works there, too.)\n\n'''Wormbo:''' There are no Interactions in previous\
      \ engine versions... ;)\n\n'''RegularX:''' \"you dont want to give a player\
      \ several interactions\" <&ndash; why is that?  It can't juggle them?\n\n'''Mychaeel:'''\
      \ There's no technical problem with having several [[Legacy:Interaction|Interaction]]s\
      \ stacked.  I think what's meant there is \"You don't want to ''accidentally''\
      \ give a player several ''instances of the same Interaction''\" if that code\
      \ happens to be executed several times.\n\n'''RegularX:''' That's what I suspected.\
      \  Question though - interactions I assume are client side only.  Does this\
      \ mean that any config vars they use are based on the local client and not the\
      \ server (unless otherwise replicated)?  I did some tests last night and that\
      \ seemed to be true, but I remember similar things being much, much harder in\
      \ Freehold UT to get the same effect (variables from a client machine valid\
      \ online)\n\n'''Mysterial:''' Values of config properties are taken from the\
      \ machine they are spawned on (in this case, the client). Additionally, for\
      \ replicated actors, as far as the server is concerned the properties have their\
      \ default values, so changes in configuration will NOT be automatically replicated\
      \ - you will either have to set a seperate property in an initialization function\
      \ (e.g. PostBeginPlay()) or use replicated functions (PlayerController in particular\
      \ uses this to inform the server of various clientside settings)"
  properties: []
  revId: 2177
name: "Legacy:Creating An Interaction From A PlayerController"
revision:
  revid: 2177
  parentid: 2179
  user: "Wormbo"
  timestamp: 1101881856.000000000
  comment: "*"
timestamp: 1668774452.170244000
