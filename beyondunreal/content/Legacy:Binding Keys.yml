---
parse:
  title: "Legacy:Binding Keys"
  text:
    text: "<p>To <i><b>bind</b></i> a key means to assign an in-game command with\
      \ that of a button on a keyboard, mouse or joystick (or other input device).</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Binding_Keys\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Binding Keys</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Using_the_in-game_console.\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Using the in-game\
      \ console.</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #Edit_the_User.ini_file\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">Edit the User.ini file</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#But_how_do_Epic.2FDE_assign_keys_in_the_Configure_Controls_menus.3F\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">But how do Epic/DE\
      \ assign keys in the Configure Controls menus?</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-5\"><a href=\"#How_to_add_keybinds_to_UT\"><span class=\"\
      tocnumber\">1.4</span> <span class=\"toctext\">How to add keybinds to UT</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#How_to_add_keybinds_to_UT2003\"\
      ><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">How to add keybinds\
      \ to UT2003</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"\
      ><a href=\"#Using_Aliases\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Using Aliases</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Toggle_Commands\"><span class=\"tocnumber\">2.1</span> <span class=\"\
      toctext\">Toggle Commands</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"\
      ><a href=\"#Content_that_needs_to_pay_a_visit_to_the_UnrealEd_Goblin\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Content that needs\
      \ to pay a visit to the UnrealEd Goblin</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-10\"><a href=\"#Related_Topics\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-11\"><a href=\"#Discussion\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Binding_Keys\">Binding Keys</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Binding_Keys?section=1\" title=\"Edit section: Binding\
      \ Keys\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>There are two methods for binding keys to commands. Both work in all <a href=\"\
      /Legacy:Unreal_Engine\" title=\"Legacy:Unreal Engine\">Unreal Engine</a> games\
      \ (confirm this please).</p>\n<h3><span class=\"mw-headline\" id=\"Using_the_in-game_console.\"\
      >Using the in-game console.</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=2\"\
      \ title=\"Edit section: Using the in-game console.\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>The syntax for the command\
      \ is:</p>\n<pre>set input &lt;key&gt; &lt;command&gt;\n</pre>\n<p>For example:</p>\n\
      <pre>set input Z Behindview 1 | OnRelease Behindview 0\n</pre>\n<p>Note, for\
      \ Deus Ex, the syntax is (Deus Ex uses Extension.InputExt rather than Engine.Input\
      \ for its input class):</p>\n<pre>set inputext &lt;key&gt; &lt;command&gt;\n\
      </pre>\n<p>So, if I wanted to bind the g key to activate god mode, the syntax\
      \ would be:</p>\n<pre>set inputext g god\n</pre>\n<h3><span class=\"mw-headline\"\
      \ id=\"Edit_the_User.ini_file\">Edit the User.ini file</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=3\"\
      \ title=\"Edit section: Edit the User.ini file\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The other method is to edit the <a href=\"/edit/Legacy:User.Ini?redlink=1\"\
      \ class=\"new\" title=\"Legacy:User.Ini (page does not exist)\">User.ini</a>\
      \ file. Under the section [Engine.Input], there should be many lines like this:</p>\n\
      <pre>W=MoveForward\n</pre>\n<p>Keys can easily be bound to commands by finding\
      \ the appropriate line and editing it. The syntax is</p>\n<pre>&lt;key&gt;=&lt;command&gt;\n\
      </pre>\n<p>For example:</p>\n<pre>Z=Behindview 1 | OnRelease Behindview 0\n\
      </pre>\n<p>(In both cases, the keybind makes it such that when the 'Z' button\
      \ is held down, it switches to BehindView (third-person view). When you release\
      \ the key, it goes back to normal (first-person) view.)</p>\n<p>Multiple commands\
      \ can be bound to one key by separating the commands with the pipe character\
      \ (\"<tt>{|</tt></p>\n<p><tt>|}</tt> \").</p>\n<p>Other useful binding commands\
      \ are PipedSwitchWeapon and SwitchToLastWeapon. Consider the following bind.</p>\n\
      <pre>V=PipedSwitchWeapon 3 | PipedSwitchWeapon 7\n</pre>\n<p>This will bind\
      \ the Bio Rifle and the Flak Cannon to the V key such that if you have both\
      \ weapons you will be able to toggle between them by repeated presses of the\
      \ V key. If you only have a single weapon out of the two pressing the V key\
      \ will switch to the weapon you have.</p>\n<pre>R=SwitchWeapon 1| AltFire |\
      \ OnRelease SwitchToLastWeapon\n</pre>\n<p>This binding will cause the R key\
      \ to bring up the shield when the key is pressed, and then revert to the weapon\
      \ you were holding when you pressed the R key.</p>\n<p>Bindings not only work\
      \ with keys, but also for mouse and joystick buttons:</p>\n<pre>MouseWheelDown=NextWeapon\n\
      Joy1=Fire\n</pre>\n<h3><span class=\"mw-headline\" id=\"But_how_do_Epic.2FDE_assign_keys_in_the_Configure_Controls_menus.3F\"\
      >But how do Epic/DE assign keys in the Configure Controls menus?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Binding_Keys?section=4\" title=\"Edit section: But how\
      \ do Epic/DE assign keys in the Configure Controls menus?\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>This differs from version\
      \ to version of the Unreal Engine. Unreal Tournament has third-party developer\
      \ (i.e. mod makers) key bind support - this means we can add new keys to the\
      \ bottom of the pre-existing Configure Key list.</p>\n<p>Games such as Deus\
      \ Ex, if you want to define a new key, you have to replace the entire menu(!)\
      \ which is a more inefficent use of code. However, both methods work - but you'd\
      \ be made to replace the entire Configure Key menu in UT!</p>\n<h3><span class=\"\
      mw-headline\" id=\"How_to_add_keybinds_to_UT\">How to add keybinds to UT</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Binding_Keys?section=5\" title=\"Edit section: How to\
      \ add keybinds to UT\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><a href=\"/Legacy:UTExtraKeyBindings\" title=\"Legacy:UTExtraKeyBindings\"\
      >UTExtraKeyBindings</a> - This class allows you to set your button names and\
      \ aliases so players can configure their own controls.</p>\n<h3><span class=\"\
      mw-headline\" id=\"How_to_add_keybinds_to_UT2003\">How to add keybinds to UT2003</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Binding_Keys?section=6\" title=\"Edit section: How to\
      \ add keybinds to UT2003\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>As of version 2179, <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"\
      mw-redirect\">UT2003</a> now has a similar class - <a href=\"/Legacy:GUIUserKeyBinding\"\
      \ title=\"Legacy:GUIUserKeyBinding\">GUIUserKeyBinding</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Using_Aliases\">Using Aliases</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=7\"\
      \ title=\"Edit section: Using Aliases\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>An <i><b>alias</b></i> is a short command that represents\
      \ one or more commands. Aliases can be made in the User.ini file, again under\
      \ the [Engine.Input] section.</p>\n<p>To create an alias, find an empty alias\
      \ line like this one:</p>\n<pre> Aliases[36]=(Command=,Alias=)</pre>\n<p>If\
      \ there aren't any, then make your own, adding a new number. The line can be\
      \ modified to make an alias. The syntax is:</p>\n<pre> Aliases[&lt;number&gt;]=(Command=\"\
      &lt;command(s)&gt;\",Alias=\"&lt;alias name&gt;\")</pre>\n<p>For example, say\
      \ I want to make a new command called \"wireframe\" that turns on wireframe\
      \ mode. This might be how I go about doing it:</p>\n<pre> Aliases[36]=(Command=\"\
      rmode 1\",Alias=\"wireframe\")</pre>\n<h3><span class=\"mw-headline\" id=\"\
      Toggle_Commands\">Toggle Commands</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=8\"\
      \ title=\"Edit section: Toggle Commands\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Aliases can be used in a clever way in combination\
      \ with binds. Suppose I want to make it so that pressing X will toggle between\
      \ wireframe mode and normal mode. It might seem rather difficult at first, but\
      \ with a couple of aliases and a keybind it is quite simple:</p>\n<pre>\n Aliases[38]=(Command=\"\
      rmode 1 | set input X nowireframe\",Alias=\"wireframe\")\n Aliases[39]=(Command=\"\
      rmode 5 | set input X wireframe\",Alias=\"nowireframe\")\n X=wireframe\n</pre>\n\
      <p>The way this works is, pressing X runs the command \"wireframe\". This alias\
      \ sets the rmode to wireframe, and then changes the X bind to run the command\
      \ \"nowireframe\". When X is pressed again, the command \"nowireframe\" reverts\
      \ the rmode back to normal, and it rebinds X to \"wireframe\" again. With a\
      \ little modification, this method can easily be extended to cycle between several\
      \ commands.</p>\n<h3><span class=\"mw-headline\" id=\"Content_that_needs_to_pay_a_visit_to_the_UnrealEd_Goblin\"\
      >Content that needs to pay a visit to the UnrealEd Goblin</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=9\"\
      \ title=\"Edit section: Content that needs to pay a visit to the UnrealEd Goblin\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dt>Aliases&#160;</dt>\n<dd>Keys must have an alias function name. This alias\
      \ will call an exec function in your player class if you have one. This is good\
      \ for one time use functions like QSFire()</dd>\n</dl>\n<dl>\n<dt>Buttons&#160;</dt>\n\
      <dd>If you need to know when the player releases or is holding a button, you\
      \ must have an input button variable, and an alias binding.</dd>\n</dl>\n<dl>\n\
      <dt>Input Button Variable&#160;</dt>\n<dd>the player class must contain your\
      \ button variables (var input byte bMyButton;)...the button is true when held,\
      \ false when not.</dd>\n</dl>\n<dl>\n<dt>Alias Binding&#160;</dt>\n<dd>In order\
      \ to prevent 'Bad button command' from logging when you press your button, you\
      \ have to bind it. To do this while inside UT press '~' to bring up your console,\
      \ then type PREFERENCES &lt;enter&gt; to bring up Advanced Options. Select ADVANCED,\
      \ KEY ALAISES, ALIASES, then go down to an empty space and enter your alias\
      \ name and the command parameter BUTTON bMyButton.</dd>\n</dl>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Binding_Keys?section=10\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Binding_Editor_Commands\"\
      \ title=\"Legacy:Binding Editor Commands\">Binding Editor Commands</a></li>\n\
      <li><a href=\"/Legacy:InputKeyMap\" title=\"Legacy:InputKeyMap\">Input Key Mapping</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Binding_Keys?section=11\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>ZxAnPhOrIaN:</b>\
      \ I use the menu and windows key on my keyboard for the behindview 0 and 1 commands.</p>\n\
      <p><b>Bcladd:</b> Don't mean to seem dim but I cannot find the class <a href=\"\
      /Legacy:GUIUserKeyBinding\" title=\"Legacy:GUIUserKeyBinding\">GUIUserKeyBinding</a>\
      \ anywhere in my 2199 source tree nor is it referenced in any of the source\
      \ code. I am guessing the reference to it above should probably be eliminated.</p>\n\
      <p><b>PleaseLoveMe:</b> No, it's there. Check Object -&gt; GUI -&gt; GUIUserKeyBinding\
      \ in the object tree. I recommend using WOTgreal for editing uscript because\
      \ it makes it easier to find such things.</p>\n<p><b>Tarquin:</b> How do you\
      \ create a binding that toggles, eg \"Rmode 1 / rmode 5\"?</p>\n<p><b>Mychaeel:</b>\
      \ You can't. The only thing you could do is make a binding that switches to\
      \ \"rmode 1\" when pressed and back to \"rmode 5\" when released: \"rmode 1\
      \ | onrelease rmode 5\".</p>\n<p><b>Tarquin:</b> Pity&#160;:( I remember Quake\
      \ had a neat trick of the binding for the keypress <i>creating</i> the binding\
      \ for the release, and vice versa.</p>\n<p><b>Wormbo:</b> It's possible with\
      \ aliases:</p>\n<pre>\nAliases[38]=(Command=\"rmode 1 | set input X nowireframe\"\
      ,Alias=\"wireframe\")\nAliases[39]=(Command=\"rmode 5 | set input X wireframe\"\
      ,Alias=\"nowireframe\")\nX=wireframe\n</pre>\n<p><b>DemonThing:</b> Alright,\
      \ I clarified the article a bit (I think), and added a little section on aliases.\
      \ (Thanks Wormbo for pointing that out)</p>\n<p><b>Rock-SoLiD:</b> Here is a\
      \ present to all the UT'99 folks. A working ViewToggle. Could not find this\
      \ anywhere online so I had to use my mind a bit following the above wireframe\
      \ alias. Thanks Wormbo.</p>\n<pre>\nAliases[26]=(Command=\"behindview 1 | set\
      \ input x 1stperson\",Alias=3rdperson)\nAliases[27]=(Command=\"behindview 0\
      \ | set input x 3rdperson\",Alias=1stperson)\nx=3rdperson\n</pre>\n<p><b>Crusher:</b>\
      \ If anyone is looking to bind keys to UT Taunts or CTF Commands (like: \"You\
      \ like that\" or \"Take their flag\") there is a cool tool called the UT Speech\
      \ Binder. It can be found at www.UT99.org ... this is a link to the topic itself\
      \ <a rel=\"nofollow\" class=\"external free\" href=\"http://www.ut99.org/viewtopic.php?f=12&amp;t=3628&amp;p=34909#p34909\"\
      >http://www.ut99.org/viewtopic.php?f=12&amp;t=3628&amp;p=34909#p34909</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.045 seconds\nReal time usage:\
      \ 0.046 seconds\nPreprocessor visited node count: 86/1000000\nPreprocessor generated\
      \ node count: 176/1000000\nPost‐expand include size: 12/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:565-0!*!0!!en!*!* and timestamp 20221117184934 and revision\
      \ id 44865\n -->\n"
  categories:
  - sortkey: "Binding Keys"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Binding Editor Commands"
  - ns: 100
    exists: true
    name: "Legacy:GUIUserKeyBinding"
  - ns: 100
    exists: true
    name: "Legacy:InputKeyMap"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: false
    name: "Legacy:User.Ini"
  - ns: 100
    exists: true
    name: "Legacy:UTExtraKeyBindings"
  templates: []
  images: []
  externallinks:
  - "http://www.ut99.org/viewtopic.php?f=12&t=3628&p=34909#p34909"
  sections:
  - toclevel: 1
    level: "2"
    line: "Binding Keys"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 140
    anchor: "Binding_Keys"
  - toclevel: 2
    level: "3"
    line: "Using the in-game console."
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 296
    anchor: "Using_the_in-game_console."
  - toclevel: 2
    level: "3"
    line: "Edit the User.ini file"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 696
    anchor: "Edit_the_User.ini_file"
  - toclevel: 2
    level: "3"
    line: "But how do Epic/DE assign keys in the Configure Controls menus?"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 2129
    anchor: "But_how_do_Epic.2FDE_assign_keys_in_the_Configure_Controls_menus.3F"
  - toclevel: 2
    level: "3"
    line: "How to add keybinds to UT"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 2659
    anchor: "How_to_add_keybinds_to_UT"
  - toclevel: 2
    level: "3"
    line: "How to add keybinds to UT2003"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 2848
    anchor: "How_to_add_keybinds_to_UT2003"
  - toclevel: 1
    level: "2"
    line: "Using Aliases"
    number: "2"
    index: "7"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 3005
    anchor: "Using_Aliases"
  - toclevel: 2
    level: "3"
    line: "Toggle Commands"
    number: "2.1"
    index: "8"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 3683
    anchor: "Toggle_Commands"
  - toclevel: 2
    level: "3"
    line: "Content that needs to pay a visit to the UnrealEd Goblin"
    number: "2.2"
    index: "9"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 4541
    anchor: "Content_that_needs_to_pay_a_visit_to_the_UnrealEd_Goblin"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 5470
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "11"
    fromtitle: "Legacy:Binding_Keys"
    byteoffset: 5596
    anchor: "Discussion"
  displaytitle: "Legacy:Binding Keys"
  iwlinks: []
  wikitext:
    text: "To '''''bind''''' a key means to assign an in-game command with that of\
      \ a button on a keyboard, mouse or joystick (or other input device).\n\n==Binding\
      \ Keys==\n\nThere are two methods for binding keys to commands. Both work in\
      \ all [[Legacy:Unreal Engine|Unreal Engine]] games (confirm this please).\n\n\
      ===Using the in-game console.===\n\nThe syntax for the command is:\n set input\
      \ <key> <command>\n\nFor example:\n set input Z Behindview 1 | OnRelease Behindview\
      \ 0\n\nNote, for Deus Ex, the syntax is (Deus Ex uses Extension.InputExt rather\
      \ than Engine.Input for its input class):\n set inputext <key> <command>\n\n\
      So, if I wanted to bind the g key to activate god mode, the syntax would be:\n\
      \ set inputext g god\n\n===Edit the User.ini file===\n\nThe other method is\
      \ to edit the [[Legacy:User.Ini|User.ini]] file. Under the section [Engine.Input],\
      \ there should be many lines like this:\n W=MoveForward\n\nKeys can easily be\
      \ bound to commands by finding the appropriate line and editing it. The syntax\
      \ is\n <key>=<command>\n\nFor example:\n Z=Behindview 1 | OnRelease Behindview\
      \ 0\n\n(In both cases, the keybind makes it such that when the 'Z' button is\
      \ held down, it switches to BehindView (third-person view). When you release\
      \ the key, it goes back to normal (first-person) view.)\n\nMultiple commands\
      \ can be bound to one key by separating the commands with the pipe character\
      \ (\"<TT>{|\n\n|}\n</TT>\").\n\nOther useful binding commands are PipedSwitchWeapon\
      \ and SwitchToLastWeapon.  Consider the following bind.\n\n V=PipedSwitchWeapon\
      \ 3 | PipedSwitchWeapon 7\n\nThis will bind the Bio Rifle and the Flak Cannon\
      \ to the V key such that if you have both weapons you will be able to toggle\
      \ between them by repeated presses of the V key.  If you only have a single\
      \ weapon out of the two pressing the V key will switch to the weapon you have.\n\
      \n R=SwitchWeapon 1| AltFire | OnRelease SwitchToLastWeapon\n\nThis binding\
      \ will cause the R key to bring up the shield when the key is pressed, and then\
      \ revert to the weapon you were holding when you pressed the R key.\n\nBindings\
      \ not only work with keys, but also for mouse and joystick buttons:\n MouseWheelDown=NextWeapon\n\
      \ Joy1=Fire\n\n===But how do Epic/DE assign keys in the Configure Controls menus?===\n\
      \nThis differs from version to version of the Unreal Engine.  Unreal Tournament\
      \ has third-party developer (i.e. mod makers) key bind support - this means\
      \ we can add new keys to the bottom of the pre-existing Configure Key list.\n\
      \nGames such as Deus Ex, if you want to define a new key, you have to replace\
      \ the entire menu(!) which is a more inefficent use of code.  However, both\
      \ methods work - but you'd be made to replace the entire Configure Key menu\
      \ in UT!\n\n===How to add keybinds to UT===\n\n[[Legacy:UTExtraKeyBindings|UTExtraKeyBindings]]\
      \ - This class allows you to set your button names and aliases so players can\
      \ configure their own controls.\n\n===How to add keybinds to UT2003===\n\nAs\
      \ of version 2179, [[Legacy:UT2003|UT2003]] now has a similar class - [[Legacy:GUIUserKeyBinding|GUIUserKeyBinding]].\n\
      \n==Using Aliases==\n\nAn '''''alias''''' is a short command that represents\
      \ one or more commands. Aliases can be made in the User.ini file, again under\
      \ the [Engine.Input] section.\n\nTo create an alias, find an empty alias line\
      \ like this one:\n\n<pre> Aliases[36]=(Command=,Alias=)</pre>\n\nIf there aren't\
      \ any, then make your own, adding a new number. The line can be modified to\
      \ make an alias. The syntax is:\n\n<pre> Aliases[<number>]=(Command=\"<command(s)>\"\
      ,Alias=\"<alias name>\")</pre>\n\nFor example, say I want to make a new command\
      \ called \"wireframe\" that turns on wireframe mode. This might be how I go\
      \ about doing it:\n\n<pre> Aliases[36]=(Command=\"rmode 1\",Alias=\"wireframe\"\
      )</pre>\n\n===Toggle Commands===\n\nAliases can be used in a clever way in combination\
      \ with binds. Suppose I want to make it so that pressing X will toggle between\
      \ wireframe mode and normal mode. It might seem rather difficult at first, but\
      \ with a couple of aliases and a keybind it is quite simple:\n\n<pre>\n Aliases[38]=(Command=\"\
      rmode 1 | set input X nowireframe\",Alias=\"wireframe\")\n Aliases[39]=(Command=\"\
      rmode 5 | set input X wireframe\",Alias=\"nowireframe\")\n X=wireframe\n</pre>\n\
      \nThe way this works is, pressing X runs the command \"wireframe\". This alias\
      \ sets the rmode to wireframe, and then changes the X bind to run the command\
      \ \"nowireframe\". When X is pressed again, the command \"nowireframe\" reverts\
      \ the rmode back to normal, and it rebinds X to \"wireframe\" again. With a\
      \ little modification, this method can easily be extended to cycle between several\
      \ commands.\n\n===Content that needs to pay a visit to the UnrealEd Goblin===\n\
      ; Aliases : Keys must have an alias function name. This alias will call an exec\
      \ function in your player class if you have one. This is good for one time use\
      \ functions like QSFire()\n\n; Buttons : If you need to know when the player\
      \ releases or is holding a button, you must have an input button variable, and\
      \ an alias binding.\n\n; Input Button Variable : the player class must contain\
      \ your button variables (var input byte bMyButton;)...the button is true when\
      \ held, false when not.\n\n; Alias Binding : In order to prevent 'Bad button\
      \ command' from logging when you press your button, you have to bind it. To\
      \ do this while inside UT press '~' to bring up your console, then type PREFERENCES\
      \ <enter> to bring up Advanced Options. Select ADVANCED, KEY ALAISES, ALIASES,\
      \ then go down to an empty space and enter your alias name and the command parameter\
      \ BUTTON bMyButton.\n\n==Related Topics==\n* [[Legacy:Binding Editor Commands|Binding\
      \ Editor Commands]]\n* [[Legacy:InputKeyMap | Input Key Mapping]]\n\n==Discussion\
      \ ==\n\n'''ZxAnPhOrIaN:''' I use the menu and windows key on my keyboard for\
      \ the behindview 0 and 1 commands.\n\n'''Bcladd:''' Don't mean to seem dim but\
      \ I cannot find the class [[Legacy:GUIUserKeyBinding|GUIUserKeyBinding]] anywhere\
      \ in my 2199 source tree nor is it referenced in any of the source code. I am\
      \ guessing the reference to it above should probably be eliminated.\n\n'''PleaseLoveMe:'''\
      \ No, it's there.  Check Object -> GUI -> GUIUserKeyBinding in the object tree.\
      \  I recommend using WOTgreal for editing uscript because it makes it easier\
      \ to find such things.\n\n'''Tarquin:''' How do you create a binding that toggles,\
      \ eg \"Rmode 1 / rmode 5\"?\n\n'''Mychaeel:''' You can't.  The only thing you\
      \ could do is make a binding that switches to \"rmode 1\" when pressed and back\
      \ to \"rmode 5\" when released:  \"rmode 1 | onrelease rmode 5\".\n\n'''Tarquin:'''\
      \ Pity :( I remember Quake had a neat trick of the binding for the keypress\
      \ ''creating'' the binding for the release, and vice versa.\n\n'''Wormbo:'''\
      \ It's possible with aliases:\n\n<pre>\nAliases[38]=(Command=\"rmode 1 | set\
      \ input X nowireframe\",Alias=\"wireframe\")\nAliases[39]=(Command=\"rmode 5\
      \ | set input X wireframe\",Alias=\"nowireframe\")\nX=wireframe\n</pre>\n\n\
      '''DemonThing:''' Alright, I clarified the article a bit (I think), and added\
      \ a little section on aliases. (Thanks Wormbo for pointing that out)\n\n'''Rock-SoLiD:'''\
      \ Here is a present to all the UT'99 folks.  A working ViewToggle.  Could not\
      \ find this anywhere online so I had to use my mind a bit following the above\
      \ wireframe alias.  Thanks Wormbo.\n\n<pre>\nAliases[26]=(Command=\"behindview\
      \ 1 | set input x 1stperson\",Alias=3rdperson)\nAliases[27]=(Command=\"behindview\
      \ 0 | set input x 3rdperson\",Alias=1stperson)\nx=3rdperson\n</pre>\n\n'''Crusher:'''\
      \ If anyone is looking to bind keys to UT Taunts or CTF Commands (like: \"You\
      \ like that\" or \"Take their flag\") there is a cool tool called the UT Speech\
      \ Binder. It can be found at www.UT99.org ... this is a link to the topic itself\
      \ \nhttp://www.ut99.org/viewtopic.php?f=12&t=3628&p=34909#p34909\n\n[[Category:Legacy\
      \ To Do|{{PAGENAME}}]]"
  properties: []
  revId: 44865
name: "Legacy:Binding Keys"
revision:
  revid: 44865
  parentid: 1736
  user: "Crusher"
  timestamp: 1327418508.000000000
  comment: ""
timestamp: 1668762944.774283000
