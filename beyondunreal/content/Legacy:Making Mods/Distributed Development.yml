---
parse:
  title: "Legacy:Making Mods/Distributed Development"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Making_a_Distributed_Development_Team_Work\"\
      >Making a Distributed Development Team Work</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Distributed_Development?section=1\"\
      \ title=\"Edit section: Making a Distributed Development Team Work\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>It's fair to say\
      \ that most mods are developed by a single person working on their own, or maybe\
      \ a couple of people in the same time zone. When a team is distrubted in both\
      \ space and time zone the single most important factor for a mod team's success,\
      \ communication, becomes extremely difficult.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Talk_or_Die\">Talk or Die</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Distributed_Development?section=2\"\
      \ title=\"Edit section: Talk or Die\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>People communicate most effectively when they are\
      \ sat in front of each other. You can talk freely, draw diagrams, and generally\
      \ make points that would be missed or misinterpreted via another medium (axcept\
      \ maybe by phone). I have seen a very long and dull e-mail conversation (about\
      \ 90 odd messages) over 2 days about a particular problem get resolved in a\
      \ 10 minute face to face meeting.</p>\n<p>When a mod team is distributed face\
      \ to face meetings are hard, and most likely impossible. It seems that if you\
      \ are not sitting next to, or near, a person you are working with it's very\
      \ easy to forget that they exist. Once you forget that they are around then\
      \ you stop communicating. That's bad.</p>\n<p>Isolation is the killer. It can\
      \ cause any or all of the following destructive patterns, all of which can be\
      \ avoided by <a href=\"/Legacy:Making_Mods/Working_As_A_Team\" title=\"Legacy:Making\
      \ Mods/Working As A Team\">good communication</a>.</p>\n<ul>\n<li>One thing\
      \ vital to the success of your mod is that everyone on the team needs to be\
      \ working towards the same end result. When the team is separated diverging\
      \ ideas about what the mod should be can easily creep in.</li>\n<li>Sitting\
      \ alone building a model or coding up a new weapon it can be very easy to get\
      \ the feeling that you are the only person doing anything on the mod. Especially\
      \ if you've not heard from anyone on the team for a while.</li>\n<li>Lack of\
      \ feedback is particularly disheartening. If you want to discourage someone\
      \ working within the same mod team as yourself then never give them any feedback\
      \ on the work they do.</li>\n<li>Failing to track progress effectively can be\
      \ a killer. It doesn't matter whether you deliver the mod early or late, it's\
      \ only a game mod, but not knowing how far towards completion team members are\
      \ can be frustrating and worrying.</li>\n<li>When a team member goes quiet,\
      \ either by no longer replying to e-mails (or maybe they get bounced), or simply\
      \ no longer sending out a steady stream of information, it effects everyone\
      \ on the team. Perhaps they've quit the team and are too scared to tell anyone.\
      \ The could even be working away, quite happy in their own little world, cracking\
      \ on with the delivery of their bits of the mod. The fact that you don't know\
      \ will cause confusion and possibly duplication of effort. It can also be discouraging\
      \ for them if they pop up suddenly and say, \"Here's that widget we needfor\
      \ map X.\", and get a response like, \"Oh, Dave did that last week, we thought\
      \ you'd gone.\".</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Little_Bits\"\
      >Little Bits</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/Distributed_Development?section=3\"\
      \ title=\"Edit section: Little Bits\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Although communication is the most significant problem\
      \ facing a distributed development team there are additional challenges that\
      \ can just as easily cause problems.</p>\n<ul>\n<li>Having more than one developer\
      \ work on code is hard. It's vital that you break the code into different parts\
      \ (modules) that can be developed as separatelt from each other as possible.\
      \ For example if your mod has new weapons and new gameplay elements, then its\
      \ not too unreasonable to have one coder work mainly on the weapons part while\
      \ another coder works on the gameplay (the game type, HUD, mutators, etc). If\
      \ you have purely a weapons mod, you could simply assign three to each coder\
      \ for example. The tricky part is always the integration of the code after it's\
      \ been written.</li>\n<li>Code integration is hard. It's well worth the effort\
      \ of assigning owners to specific modules and files. Even though the temptation\
      \ will be extreme, never change files you don't have checked out (or you don't\
      \ own). I guarantee that you will lose code at some point during the mod development\
      \ when you try and integrate your code with that from the other developer(s)\
      \ if you do.</li>\n</ul>\n<ul>\n<li>It's well worth taking the \"release little\
      \ and often\" approach within the team. Releasing your code and content to each\
      \ other as often as you have a stable version of a new feature has a number\
      \ of benefits. It provides the team with a sense of progress. It gives everyone\
      \ in the team practice as pulling the whole mod together. It allows for regular\
      \ internal shake down testing. It ensures that everyone is working towards the\
      \ same goal (there should be no suprises in what's delivered). Don't fall into\
      \ the trap of releasing code that simply won't run though. You'll simply hold\
      \ everyone else on the team up (and they'll hate you for it).</li>\n<li>Every\
      \ time a member of the team releases some new code, texture, model, or other\
      \ asset do your very best to grab the release and apply it to the build you\
      \ are developing against. This ensures that there are no integration nightmares\
      \ at the end of the project. It's not uncommon for things to break when mod\
      \ assets are integrated. Frequent integrations keep the amount of pain to a\
      \ minimum.</li>\n<li>Make sure you have a centrally maintained build script\
      \ (and build manager if you can manage it) to pull everything together.</li>\n\
      <li>Small teams are better.</li>\n<li>Over all it's much easier to transfer\
      \ little bits exactly how you want them then it is to transfer the entire mod\
      \ and find that it is like putting a square in a circle.</li>\n</ul>\n<p>If\
      \ at all possible set up a <a href=\"/Legacy:Subversion\" title=\"Legacy:Subversion\"\
      >Subversion</a> or <a href=\"/Legacy:CVS\" title=\"Legacy:CVS\">CVS</a> system\
      \ on a server, so there is always ONE true up-to-date version, and anyone can\
      \ grab it. This is worth doing even if the only CVS server you can get hold\
      \ of runs on one of the team's PCs and is not available 24 hours a day.</p>\n\
      <dl>\n<dd><b>Jb:</b> One thing that I think works for sharing code is when you\
      \ can break you code into different parts (modules) that can be developed in\
      \ part, separate of each other. For example if your mod has new weapons and\
      \ new gameplay elements, then its not too unreasonable to have one coder work\
      \ mainly on the weapons part while another coder works on the gameplay part\
      \ (new game type, HUD, mut, ect). Or if you say have a weapons mod. Here you\
      \ could split up the weapons an \"assign 3 to each coder\" for example. Then\
      \ the tricky part is only have one to bring it all together. Not sure if that\
      \ fits anywhere... just IMHO that it might work somewhere&#160;:)</dd>\n<dd><b>EntropicLqd:</b>\
      \ Agreed. I've got a paragraph written up on that at work that I never got time\
      \ to paste in. I'll combine yours and mine and drop it in. Your examples were\
      \ better I think. You can just edit the text of the main content if you want\
      \ though. I'll update it tomorrow.</dd>\n<dd><b>EntropicLqd:</b> Yours was much\
      \ better so I kept it, and tacked what remained of my thoughts on the end.</dd>\n\
      </dl>\n<dl>\n<dd><b>Jb:</b> Nice work EntropicLqd!</dd>\n<dd><b>EntropicLqd:</b>\
      \ Thanks, but you started it, and that last update was pretty much all yours\
      \ anyway.</dd>\n<dd><b>ZedSquared:</b> This whole making mods section is fantastic\
      \ folks! Well done, I'll see if I can add anything worthwhile but I think you've\
      \ got it all already&#160;:-) It might be worth mentioning that for good reliable\
      \ free cvs services (as well as mailing lists, forums, bug trackers and loads\
      \ more) it's worth considering hosting your project on sourceforge, the only\
      \ downside is that your development stage code will be available for anyone\
      \ to download if they can work CVS. Oh and you have to be releasing your mod\
      \ under GPL type license too. There are also some good docs on installing wincvs\
      \ over there.</dd>\n</dl>\n<p><b>Lilguy:</b> I don't have time to reformat it\
      \ at the moment, but a lot more has to be said about version management systems\
      \ like CVS and Subversion. These types of programs are standard in any type\
      \ of professional development environment with more than a couple developers,\
      \ and can even be very useful on a personal level. They track changes, and efficiently\
      \ store <i>everything</i> that has ever been committed – so nothing that's been\
      \ checked in can ever be truly destroyed, unless the cvs server itself gets\
      \ destroyed. They also are fairly good at merging code changes together, so\
      \ if two people happen to work on the same code (changing different lines) then\
      \ there's a pretty good chance that it will be able to merge the changes correctly.\
      \ So essentially, it deals very effectively with every one of the issues in\
      \ the \"other issues\" section. They are used most effectively when everyone\
      \ who's working on something does an update before starting to work on something,\
      \ and commits as often as possible (i.e. as soon as the code you're working\
      \ on compiles and runs)</p>\n<p><b>Foogod:</b> BTW, I've just added several\
      \ pages to the Wiki about setting up <a href=\"/Legacy:Subversion\" title=\"\
      Legacy:Subversion\">Subversion</a> for Unreal projects. Comments are welcome.</p>\n\
      <p><b>Lilguy:</b> Thanks! Subversion rocks, everyone should use it.</p>\n<p><b>TSOShadow:</b>\
      \ I like what you all have done here. It really explains communication and file\
      \ intergration well. Although I think I'll touch up the other issues as I got\
      \ alittle lost in there...</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.026 seconds\nReal time usage: 0.085 seconds\nPreprocessor visited node count:\
      \ 10/1000000\nPreprocessor generated node count: 16/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1854-0!*!0!!*!*!*\
      \ and timestamp 20221118022710 and revision id 4551\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:CVS"
  - ns: 100
    exists: true
    name: "Legacy:Subversion"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods/Working As A Team"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Making a Distributed Development Team Work"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Making_Mods/Distributed_Development"
    byteoffset: 0
    anchor: "Making_a_Distributed_Development_Team_Work"
  - toclevel: 2
    level: "3"
    line: "Talk or Die"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Making_Mods/Distributed_Development"
    byteoffset: 346
    anchor: "Talk_or_Die"
  - toclevel: 1
    level: "2"
    line: "Little Bits"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Making_Mods/Distributed_Development"
    byteoffset: 2770
    anchor: "Little_Bits"
  displaytitle: "Legacy:Making Mods/Distributed Development"
  iwlinks: []
  wikitext:
    text: "==Making a Distributed Development Team Work ==\n\nIt's fair to say that\
      \ most mods are developed by a single person working on their own, or maybe\
      \ a couple of people in the same time zone.  When a team is distrubted in both\
      \ space and time zone the single most important factor for a mod team's success,\
      \ communication, becomes extremely difficult.\n\n===Talk or Die ===\n\nPeople\
      \ communicate most effectively when they are sat in front of each other.  You\
      \ can talk freely, draw diagrams, and generally make points that would be missed\
      \ or misinterpreted via another medium (axcept maybe by phone).  I have seen\
      \ a very long and dull e-mail conversation (about 90 odd messages) over 2 days\
      \ about a particular problem get resolved in a 10 minute face to face meeting.\n\
      \nWhen a mod team is distributed face to face meetings are hard, and most likely\
      \ impossible.  It seems that if you are not sitting next to, or near, a person\
      \ you are working with it's very easy to forget that they exist.  Once you forget\
      \ that they are around then you stop communicating.  That's bad.\n\nIsolation\
      \ is the killer.  It can cause any or all of the following destructive patterns,\
      \ all of which can be avoided by [[Legacy:Making Mods/Working As A Team|good\
      \ communication]].\n* One thing vital to the success of your mod is that everyone\
      \ on the team needs to be working towards the same end result.  When the team\
      \ is separated diverging ideas about what the mod should be can easily creep\
      \ in.\n* Sitting alone building a model or coding up a new weapon it can be\
      \ very easy to get the feeling that you are the only person doing anything on\
      \ the mod.  Especially if you've not heard from anyone on the team for a while.\n\
      * Lack of feedback is particularly disheartening.  If you want to discourage\
      \ someone working within the same mod team as yourself then never give them\
      \ any feedback on the work they do.\n* Failing to track progress effectively\
      \ can be a killer.  It doesn't matter whether you deliver the mod early or late,\
      \ it's only a game mod, but not knowing how far towards completion team members\
      \ are can be frustrating and worrying.\n* When a team member goes quiet, either\
      \ by no longer replying to e-mails (or maybe they get bounced), or simply no\
      \ longer sending out a steady stream of information, it effects everyone on\
      \ the team.  Perhaps they've quit the team and are too scared to tell anyone.\
      \  The could even be working away, quite happy in their own little world, cracking\
      \ on with the delivery of their bits of the mod.  The fact that you don't know\
      \ will cause confusion and possibly duplication of effort.  It can also be discouraging\
      \ for them if they pop up suddenly and say, \"Here's that widget we needfor\
      \ map X.\", and get a response like, \"Oh, Dave did that last week, we thought\
      \ you'd gone.\".\n\n==Little Bits ==\n\nAlthough communication is the most significant\
      \ problem facing a distributed development team there are additional challenges\
      \ that can just as easily cause problems.\n* Having more than one developer\
      \ work on code is hard.  It's vital that you break the code into different parts\
      \ (modules) that can be developed as separatelt from each other as possible.\
      \ For example if your mod has new weapons and new gameplay elements, then its\
      \ not too unreasonable to have one coder work mainly on the weapons part while\
      \ another coder works on the gameplay (the game type, HUD, mutators, etc). \
      \ If you have purely a weapons mod, you could simply assign three to each coder\
      \ for example.  The tricky part is always the integration of the code after\
      \ it's been written.\n* Code integration is hard.  It's well worth the effort\
      \ of assigning owners to specific modules and files.  Even though the temptation\
      \ will be extreme, never change files you don't have checked out (or you don't\
      \ own).  I guarantee that you will lose code at some point during the mod development\
      \ when you try and integrate your code with that from the other developer(s)\
      \ if you do.\n\n* It's well worth taking the \"release little and often\" approach\
      \ within the team.  Releasing your code and content to each other as often as\
      \ you have a stable version of a new feature has a number of benefits.  It provides\
      \ the team with a sense of progress.  It gives everyone in the team practice\
      \ as pulling the whole mod together.  It allows for regular internal shake down\
      \ testing.  It ensures that everyone is working towards the same goal (there\
      \ should be no suprises in what's delivered).  Don't fall into the trap of releasing\
      \ code that simply won't run though.  You'll simply hold everyone else on the\
      \ team up (and they'll hate you for it).\n* Every time a member of the team\
      \ releases some new code, texture, model, or other asset do your very best to\
      \ grab the release and apply it to the build you are developing against.  This\
      \ ensures that there are no integration nightmares at the end of the project.\
      \  It's not uncommon for things to break when mod assets are integrated.  Frequent\
      \ integrations keep the amount of pain to a minimum.\n* Make sure you have a\
      \ centrally maintained build script (and build manager if you can manage it)\
      \ to pull everything together.\n* Small teams are better.\n* Over all it's much\
      \ easier to transfer little bits exactly how you want them then it is to transfer\
      \ the entire mod and find that it is like putting a square in a circle.\n\n\
      If at all possible set up a [[Legacy:Subversion|Subversion]] or [[Legacy:CVS|CVS]]\
      \ system on a server, so there is always ONE true up-to-date version, and anyone\
      \ can grab it.  This is worth doing even if the only CVS server you can get\
      \ hold of runs on one of the team's PCs and is not available 24 hours a day.\n\
      \n:'''Jb:''' One thing that I think works for sharing code is when you can break\
      \ you code into different parts (modules) that can be developed in part, separate\
      \ of each other. For example if your mod has new weapons and new gameplay elements,\
      \ then its not too unreasonable to have one coder work mainly on the weapons\
      \ part while another coder works on the gameplay part (new game type, HUD, mut,\
      \ ect). Or if you say have a weapons mod. Here you could split up the weapons\
      \ an \"assign 3 to each coder\" for example. Then the tricky part is only have\
      \ one to bring it all together. Not sure if that fits anywhere... just IMHO\
      \ that it might work somewhere :)\n:'''EntropicLqd:''' Agreed.  I've got a paragraph\
      \ written up on that at work that I never got time to paste in.  I'll combine\
      \ yours and mine and drop it in.  Your examples were better I think.  You can\
      \ just edit the text of the main content if you want though.  I'll update it\
      \ tomorrow.\n:'''EntropicLqd:''' Yours was much better so I kept it, and tacked\
      \ what remained of my thoughts on the end.\n\n:'''Jb:'''  Nice work EntropicLqd!\n\
      :'''EntropicLqd:''' Thanks, but you started it, and that last update was pretty\
      \ much all yours anyway.\n:'''ZedSquared:''' This whole making mods section\
      \ is fantastic folks! Well done, I'll see if I can add anything worthwhile but\
      \ I think you've got it all already :-) It might be worth mentioning that for\
      \ good reliable free cvs services (as well as mailing lists, forums, bug trackers\
      \ and loads more) it's worth considering hosting your project on sourceforge,\
      \ the only downside is that your development stage code will be available for\
      \ anyone to download if they can work CVS. Oh and you have to be releasing your\
      \ mod under GPL type license too. There are also some good docs on installing\
      \ wincvs over there. \n\n'''Lilguy:''' I don't have time to reformat it at the\
      \ moment, but a lot more has to be said about version management systems like\
      \ CVS and Subversion. These types of programs are standard in any type of professional\
      \ development environment with more than a couple developers, and can even be\
      \ very useful on a personal level. They track changes, and efficiently store\
      \ ''everything'' that has ever been committed &ndash; so nothing that's been\
      \ checked in can ever be truly destroyed, unless the cvs server itself gets\
      \ destroyed. They also are fairly good at merging code changes together, so\
      \ if two people happen to work on the same code (changing different lines) then\
      \ there's a pretty good chance that it will be able to merge the changes correctly.\
      \ So essentially, it deals very effectively with every one of the issues in\
      \ the \"other issues\" section. They are used most effectively when everyone\
      \ who's working on something does an update before starting to work on something,\
      \ and commits as often as possible (i.e. as soon as the code you're working\
      \ on compiles and runs)\n\n'''Foogod:''' BTW, I've just added several pages\
      \ to the Wiki about setting up [[Legacy:Subversion|Subversion]] for Unreal projects.\
      \  Comments are welcome.\n\n'''Lilguy:''' Thanks! Subversion rocks, everyone\
      \ should use it.\n\n'''TSOShadow:''' I like what you all have done here. It\
      \ really explains communication and file intergration well. Although I think\
      \ I'll touch up the other issues as I got alittle lost in there..."
  properties: []
  revId: 4551
name: "Legacy:Making Mods/Distributed Development"
revision:
  revid: 4551
  parentid: 4553
  user: "Wormbo"
  timestamp: 1144397078.000000000
  comment: "reverted"
timestamp: 1668763168.421681000
