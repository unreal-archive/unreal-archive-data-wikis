---
parse:
  title: "Legacy:Making Mods/Effective Testing"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Effective_Testing\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Effective Testing</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Some_Possible_Scenarios\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Some Possible\
      \ Scenarios</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-3\"><a href=\"\
      #The_developer\"><span class=\"tocnumber\">1.1.1</span> <span class=\"toctext\"\
      >The developer</span></a></li>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"\
      #The_tester\"><span class=\"tocnumber\">1.1.2</span> <span class=\"toctext\"\
      >The tester</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#What_went_wrong\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">What went wrong</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Why_do_I_need_to_test_my_mod\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Why do I need to test my mod</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#How_To_Test_A_Mod\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">How To Test A Mod</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Doing_it_right\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">Doing it right</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Shake_down_testing\"><span\
      \ class=\"tocnumber\">3.2</span> <span class=\"toctext\">Shake down testing</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Full_testing\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">Full testing</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#Group_testing\"><span class=\"\
      tocnumber\">3.4</span> <span class=\"toctext\">Group testing</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#Don.27t_forget_about_the_network_testing\"\
      ><span class=\"tocnumber\">3.5</span> <span class=\"toctext\">Don't forget about\
      \ the network testing</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-13\"><a href=\"#Reporting_Faults\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Reporting Faults</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-14\"><a href=\"#Some_common_pitfalls\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Some common pitfalls</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-15\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Effective_Testing\"\
      >Effective Testing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=1\" title=\"\
      Edit section: Effective Testing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Some_Possible_Scenarios\"\
      >Some Possible Scenarios</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=2\"\
      \ title=\"Edit section: Some Possible Scenarios\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If either of the following scenarios strike a chord\
      \ then this page should hopefully help you to fix the problem. Although, it's\
      \ probable that you should be contributing to this page rather than reading\
      \ it.</p>\n<h4><span class=\"mw-headline\" id=\"The_developer\">The developer</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=3\" title=\"Edit\
      \ section: The developer\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>So, time has passed and people are interested in playing your mod. You've\
      \ finished, or at the very least finalised all of the features in the first\
      \ version of your mod, and it's ready for release. You upload it onto your mod\
      \ web site with pleasure. Maybe you even dance around the room a little while\
      \ it's uploading. In a few minutes people will be able to view all of your hard\
      \ work and tell you how much it rocks.</p>\n<p>The reality turns out to be most\
      \ unpleasant. Your in-box is swamped with e-mails complaining about bugs, balance,\
      \ and calls for support and changes to be made. All you can do is read in disbelief\
      \ as all of your hard work is slated, shredded, and generally jumped on by hoards\
      \ of ungrateful screaming barbarians.</p>\n<p>Maybe you should have got some\
      \ other people to look at your mod. Maybe you did, but their testing wasn't\
      \ effective enough.</p>\n<h4><span class=\"mw-headline\" id=\"The_tester\">The\
      \ tester</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=4\" title=\"\
      Edit section: The tester\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Wow, cool, you've been accepted as a beta tester on your favourite mod. You've\
      \ been anticipating this one for a while and you're really excited that you'll\
      \ get the chance to play it before anyone else. And give feedback. You install\
      \ the mod, fire it up, and it fails to even start. \"What sort of crappy half-arsed\
      \ mod is this?\", you cry before you remember it's a beta - which means it doesn't\
      \ work. After some to-ing and fro-ing between yourself and the developer you\
      \ eventually get the mod up and running and you start to test it.</p>\n<p>While\
      \ playing with the new hand held automatic limb dismember device you realise\
      \ that the gun has stopped firing. It's obviously a bug. You send in your bug\
      \ report to the developer: <i>The gun stopped firing.</i>. If you had a patient\
      \ developer you might have got a request for more information. You may even\
      \ have been removed from the beta-test team without any adequate explanation\
      \ as to why.</p>\n<h3><span class=\"mw-headline\" id=\"What_went_wrong\">What\
      \ went wrong</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=5\" title=\"\
      Edit section: What went wrong\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In the developer's case, he simply hadn't put enough\
      \ time or effort (if any) into testing his mod so it crashed and burned on release.\
      \ In the tester's case, the bug report submitted contained almost no useful\
      \ information. The feedback provided to the developer was almost useless in\
      \ helping the developer find the problem.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Why_do_I_need_to_test_my_mod\">Why do I need to test my mod</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=6\" title=\"Edit\
      \ section: Why do I need to test my mod\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you write perfect code all the time that always\
      \ works first time, in the manner you expected, every single time then you can\
      \ stop reading. The odds are however that every now and then small errors creep\
      \ into your code. These may be simple typing errors, or they could be non-obvious\
      \ logical flaws in the structure of your code. Remember, just because your code\
      \ compiles doesn’t mean it will work in the way that you intended. Consider\
      \ the code below.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>I<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>;I<span class=\"sy0\">&lt;</span><span class=\"nu0\"\
      >10</span>;I<span class=\"sy0\">++</span><span class=\"br0\">)</span>;\n  DoSomethingTenTimes<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">for</span> <span\
      \ class=\"br0\">(</span>I<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;I<span\
      \ class=\"sy0\">&lt;</span><span class=\"nu0\">10</span>;I<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span>\n  DoSomethingTenTimes<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>Neither\
      \ statement will produce a compiler error, but only the second one will actually\
      \ perform the required operations.</p>\n<p>Once you accept the fact that you\
      \ cannot and will not write completely perfect code all of the time then it’\
      s obvious that you need some way of finding the errors in the code. This process\
      \ is called testing. The aim of the game is to put your code through the wringer,\
      \ and hopefully find any problems before anyone else does.</p>\n<h2><span class=\"\
      mw-headline\" id=\"How_To_Test_A_Mod\">How To Test A Mod</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=7\"\
      \ title=\"Edit section: How To Test A Mod\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Doing_it_right\"\
      >Doing it right</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=8\" title=\"\
      Edit section: Doing it right\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Testing a mod effectively is hard. Very hard. The\
      \ testing process takes up a lot of time, and can also be a very tedious job.\
      \ There are two types of testing.</p>\n<ul>\n<li>Shake down testing – The easiest\
      \ and lightest form of testing. If your mod is complex then this should be avoided.</li>\n\
      <li>Full testing – The only real way of ensuring your mod gets released with\
      \ the minimum number of bugs.</li>\n</ul>\n<p>The type of testing you choose\
      \ to use will be influenced by the size and complexity of the mod. It will also\
      \ have a big impact on the final quality of your mod. Shake down testing is\
      \ great for small map components and simple mutators. Anything more complex\
      \ than that and you should seriously consider using a full test approach. Otherwise\
      \ you risk releasing a buggy pile of pap to the general public.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Shake_down_testing\">Shake down testing</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=9\" title=\"Edit\
      \ section: Shake down testing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is the lightest form of testing. Anyone can start\
      \ a mod up run around a bit, do some \"stuff\", and generally \"have a look\"\
      \ for problems. This is the type of testing that most developers do. They start\
      \ up their mod, check out the last thing they changed, and determine whether\
      \ they are happy or not. They don’t bother checking to see if the change they\
      \ just made broke something else. If they are sensible, the mod they are testing\
      \ is sufficiently simple that there isn’t anything else to break.</p>\n<p>If\
      \ this testing technique is used then you should either not bother with a testing\
      \ team at all, or, make your testing team as large as you possibly can.</p>\n\
      <p>If the mod is complex, then this type of testing can be more harmful than\
      \ useful as it allows the developer to build up a false sense of security in\
      \ the quality of their mod. This type of testing should not be used for complex\
      \ mods.</p>\n<h3><span class=\"mw-headline\" id=\"Full_testing\">Full testing</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=10\" title=\"Edit\
      \ section: Full testing\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This type of testing is time consuming, laborious, and quite often dull.\
      \ It is however, the most effective way or systematically removing problems\
      \ and bugs from your mod.</p>\n<p>Before you even start your mod for the first\
      \ time, or while you are writing the code for it, create a list of things that\
      \ could possibly go wrong. The list of things that may go wrong should be phrased\
      \ as much as possible as questions that can be answered yes or no. This speeds\
      \ the testing slightly as the tests become a simple tick list.</p>\n<p>Rather\
      \ than attempt to describe in detail how to come up with the list, here is an\
      \ example taken from the list I’m building up for my single flag CTF mod. It’\
      s only a small subset of a rather scary looking list.</p>\n<ul>\n<li>When the\
      \ game starts are both Flag Bases on the map visible?</li>\n<li>Is there only\
      \ one flag on the map?</li>\n<li>Is the HUD showing that nether team has the\
      \ flag and that it’s dropped soemwhere?</li>\n<li>Is the flag picked up when\
      \ touched?</li>\n<li>Is the flag displayed properly when held (can I see myself\
      \ carrying it in behind view)?</li>\n<li>Is the flag respawned somewhere on\
      \ the map if I fall into a pain zone?</li>\n<li>Is the flag dropped if I use\
      \ the teleporter?</li>\n</ul>\n<p>Once you have your list of tests written out,\
      \ you need to use it. Every time you do a build that could be a viable release\
      \ you should run through all of your tests ticking each one off as you see the\
      \ expected behaviour. If you get some unexpected behaviour then either your\
      \ test is wrong, or, you have found a bug.</p>\n<p>Once you have finished all\
      \ of your test conditions it’s well worth entering a period of Shake down testing\
      \ to try out new and strange things that \"people would never do in real life\"\
      . Every time you find a problem that isn’t covered by your existing test list\
      \ add it. By adding tests to your initial list you are ensuring that a particular\
      \ problem does not reoccur once removed.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Group_testing\">Group testing</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=11\"\
      \ title=\"Edit section: Group testing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If the mod is a reasonable size then it’s worth trying\
      \ to find some testers to help you. As the complexity of the mod increases the\
      \ number of tests that need to be done grows hugely as the number of components\
      \ that can be interacted with, and the number of combinations of components\
      \ that can be interacted grows. The following are some points to consider when\
      \ you have a group of testers</p>\n<ul>\n<li>First thing you might want to think\
      \ about is have one central point for bugs to be reported and/or documented\
      \ (message board?). It does you no good if you have to wade through 30 reports\
      \ of the same bug. You could expand on this to have someone lead or take charge\
      \ of this part of the team. Having one source to keep track of the bugs and\
      \ what has been or has not been fixed allows for the other members to have more\
      \ time to fix the said bugs.</li>\n</ul>\n<ul>\n<li>Delegate and/or assign certain\
      \ parts of the mod testing to certain people. For example give a certain group\
      \ of people (or a single person) an area they should look at for bugs and give\
      \ another group a different area. For example have one group that looks at the\
      \ weapons while the other group looks at the game play aspect of the mod. This\
      \ allows for an efficient way to get more coverage and testing as well as it\
      \ being a more effective way to user your resources. Your testers will also\
      \ like is as they wont have to spend as much time testing/bug hunting. Some\
      \ overlapping is a good idea but try to keep that to a minimum. If you did elect\
      \ one member of the team to handle to be the central point for bug testing this\
      \ then its should be their job to do the delegating.</li>\n</ul>\n<ul>\n<li>Get\
      \ confirmation from another member when a bug is reported. Sometimes one of\
      \ your users could have accidentally corrupted a core file that will cause a\
      \ bug to appear when it is more of a configuration issue on that users PC. For\
      \ example say if they accidentally loaded a older version of a .u file and get\
      \ some type of \"weird results\".</li>\n</ul>\n<ul>\n<li>Make sure you have\
      \ a reliable group. Having a group that does not test their assign areas will\
      \ not help you at all. Make sure you find people that can dedicated the time\
      \ that it is needed when your ready for testing. Nothing is more aggravating\
      \ then posting an update and not seeing any feedback on it. If its at all possible\
      \ you can try to have a set date for updates. This helps as then your beta testers\
      \ will know when an update is out and when they need to reserve time for testing.</li>\n\
      </ul>\n<h3><span class=\"mw-headline\" id=\"Don.27t_forget_about_the_network_testing\"\
      >Don't forget about the network testing</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=12\"\
      \ title=\"Edit section: Don't forget about the network testing\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>One of the things\
      \ that it's easy to forget, especially if it's a small mod, is to test your\
      \ mod thoroughly over a network, preferably against a dedicated server. Network\
      \ replication is one of the biggest pit fall a coder will have to face. Just\
      \ because things work fine in a practice match does not mean that they will\
      \ work in an on-line game. Usually they won't work in on-line games unless the\
      \ coder has dealt with replication in their past work. The larger the mod the\
      \ more chances for replication issues to crop up and usually these are the harder\
      \ bugs to fix. You also can test what happens to your mod on dynamic conditions\
      \ or when players leave under catastrophic circumstances (drop the network).\
      \ For example what happens to the flag if the flag carrier leaves? Or what happens\
      \ to your remote controlled weapon if the owner leaves? You can also check the\
      \ network use of your mod as well. Finally don't forget to look at the log from\
      \ the server when testing your mod with a dedicated server.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Reporting_Faults\">Reporting Faults</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=13\"\
      \ title=\"Edit section: Reporting Faults\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Finding a problem is not useful in itself. The developer\
      \ is still unaware that the problem exists. How you communicate that problem\
      \ to the developer is crucial to avoid wasting your time and his.</p>\n<p>If\
      \ you have a tick list of tests, and one of them failed then reporting the problem\
      \ is easy. You can tell the developer which test failed, and supply him with\
      \ your log file. Because the developer has an exact duplicate of your list he\
      \ can see everything you did up to the point your problem occurred. By providing\
      \ him with your log file he may be able to tell directly from the log what went\
      \ wrong.</p>\n<p>If this is a brand new test then the first thing you should\
      \ so is update your tick list of tests. Then send the following information\
      \ on to the developer.</p>\n<ul>\n<li>The exact details of the problem.</li>\n\
      <li>What you did prior to the problem manifesting itself.</li>\n<li>What you\
      \ were trying to do.</li>\n<li>What objects you had in your inventory – and\
      \ your \"player state\".</li>\n</ul>\n<p>The more detail you can supply to the\
      \ developer about the bug the better. If you are testing a map then send some\
      \ screenshots of the problem or feature that caused you the problem.</p>\n<p>Always\
      \ remember to send your log file along with your bug report. The log file is\
      \ one of the most valuable tools the developer has when it comes to resolving\
      \ problems.</p>\n<p>Don’t be surprised (or offended) if the developer comes\
      \ back with some more questions about your fault. They may not have been able\
      \ to reproduce it, or, they might want additional clarification about the exact\
      \ manifestation of the problem. If you can identify a problem with the way in\
      \ which bugs are reported then change the way you (and the team) report bugs.</p>\n\
      <p>If you have a team of testers, consider using a standard format for error\
      \ reporting across the whole team. That way new testers will get up to speed\
      \ faster, and developers can find the information they are looking for easier.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Some_common_pitfalls\">Some common pitfalls</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=14\" title=\"Edit\
      \ section: Some common pitfalls\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dt>The change is only one line it can't possibly\
      \ be wrong.&#160;</dt>\n<dd>Those tiny one line fixes to your code will quite\
      \ often cause you far more pain than a complete change to the class hierarchy.\
      \ The reason for this is that the one-line code change doesn’t get the same\
      \ level of consideration as a complete class hierarchy change. It’s very easy\
      \ to fall into the trap of, \"It’s only one line it won’t break anything and\
      \ it will fix my problem.\".</dd>\n</dl>\n<dl>\n<dt>Changing code at the point\
      \ of release.&#160;</dt>\n<dd>If you ever change some code prior to building\
      \ your release, and then fail to test it, your release will have bugs. In the\
      \ best case you will have introduced a new bug (assuming the one you were trying\
      \ to fix was fixed by your last minute change). At worst you will have completely\
      \ broken your mod and it will no longer work.</dd>\n</dl>\n<dl>\n<dt>Publishing\
      \ an unattainable release date.&#160;</dt>\n<dd>As a developer you are always\
      \ optimistic about how much bug free code you can write in a given amount of\
      \ time. Publishing a release date for your mod based upon your expectations\
      \ of when the mod will be finished will out you and your team under extreme\
      \ pressure. Have you allowed time for testing and bug fixing in your date? Do\
      \ you have any spare time (contingency) added to cater for interruptions from\
      \ real life? Bad things happen when release dates are missed. The developer\
      \ and testers may get discouraged. People will start to lose interest in the\
      \ mod and accuse it of being vapourware. Your team may get flamed to a crisp\
      \ for not delivering on your published release date. Your \"consumers\" won’\
      t care that your PC caught fire, or that a builder has severed your Internet\
      \ connection so you couldn’t do anything. All they will see is that you failed\
      \ to deliver, when you said you were going to.</dd>\n</dl>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/Effective_Testing?section=15\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:A_Bug%27S_Life\" title=\"\
      Legacy:A Bug'S Life\" class=\"mw-redirect\">A Bug's Life</a> – hints on how\
      \ to write a useful bug report</li>\n<li><a href=\"/Legacy:Debugging_Techniques\"\
      \ title=\"Legacy:Debugging Techniques\">Debugging Techniques</a> – useful techniques\
      \ for finding and eliminating bugs</li>\n<li><a href=\"/Legacy:Testing_Lab\"\
      \ title=\"Legacy:Testing Lab\">Testing Lab</a> – Get others to help test your\
      \ mod</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.087 seconds\n\
      Real time usage: 0.089 seconds\nPreprocessor visited node count: 77/1000000\n\
      Preprocessor generated node count: 112/1000000\nPost‐expand include size: 29/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1848-0!*!0!!en!*!*\
      \ and timestamp 20221118022713 and revision id 4536\n -->\n"
  categories:
  - sortkey: "Making Mods/Effective Testing"
    name: "Legacy_Troubleshooting"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Debugging Techniques"
  - ns: 100
    exists: true
    name: "Legacy:A Bug'S Life"
  - ns: 100
    exists: true
    name: "Legacy:Testing Lab"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Effective Testing"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 0
    anchor: "Effective_Testing"
  - toclevel: 2
    level: "3"
    line: "Some Possible Scenarios"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 24
    anchor: "Some_Possible_Scenarios"
  - toclevel: 3
    level: "4"
    line: "The developer"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 264
    anchor: "The_developer"
  - toclevel: 3
    level: "4"
    line: "The tester"
    number: "1.1.2"
    index: "4"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 1149
    anchor: "The_tester"
  - toclevel: 2
    level: "3"
    line: "What went wrong"
    number: "1.2"
    index: "5"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 2106
    anchor: "What_went_wrong"
  - toclevel: 1
    level: "2"
    line: "Why do I need to test my mod"
    number: "2"
    index: "6"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 2456
    anchor: "Why_do_I_need_to_test_my_mod"
  - toclevel: 1
    level: "2"
    line: "How To Test A Mod"
    number: "3"
    index: "7"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 3533
    anchor: "How_To_Test_A_Mod"
  - toclevel: 2
    level: "3"
    line: "Doing it right"
    number: "3.1"
    index: "8"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 3557
    anchor: "Doing_it_right"
  - toclevel: 2
    level: "3"
    line: "Shake down testing"
    number: "3.2"
    index: "9"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 4381
    anchor: "Shake_down_testing"
  - toclevel: 2
    level: "3"
    line: "Full testing"
    number: "3.3"
    index: "10"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 5302
    anchor: "Full_testing"
  - toclevel: 2
    level: "3"
    line: "Group testing"
    number: "3.4"
    index: "11"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 7185
    anchor: "Group_testing"
  - toclevel: 2
    level: "3"
    line: "Don't forget about the network testing"
    number: "3.5"
    index: "12"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 9649
    anchor: "Don.27t_forget_about_the_network_testing"
  - toclevel: 1
    level: "2"
    line: "Reporting Faults"
    number: "4"
    index: "13"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 10698
    anchor: "Reporting_Faults"
  - toclevel: 1
    level: "2"
    line: "Some common pitfalls"
    number: "5"
    index: "14"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 12621
    anchor: "Some_common_pitfalls"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "15"
    fromtitle: "Legacy:Making_Mods/Effective_Testing"
    byteoffset: 14412
    anchor: "Related_Topics"
  displaytitle: "Legacy:Making Mods/Effective Testing"
  iwlinks: []
  wikitext:
    text: "==Effective Testing ==\n\n===Some Possible Scenarios ===\n\nIf either of\
      \ the following scenarios strike a chord then this page should hopefully help\
      \ you to fix the problem.  Although, it's probable that you should be contributing\
      \ to this page rather than reading it.\n\n====The developer ====\n\nSo, time\
      \ has passed and people are interested in playing your mod.  You've finished,\
      \ or at the very least finalised all of the features in the first version of\
      \ your mod, and it's ready for release.  You upload it onto your mod web site\
      \ with pleasure.  Maybe you even dance around the room a little while it's uploading.\
      \  In a few minutes people will be able to view all of your hard work and tell\
      \ you how much it rocks.\n\nThe reality turns out to be most unpleasant.  Your\
      \ in-box is swamped with e-mails complaining about bugs, balance, and calls\
      \ for support and changes to be made.  All you can do is read in disbelief as\
      \ all of your hard work is slated, shredded, and generally jumped on by hoards\
      \ of ungrateful screaming barbarians.\n\nMaybe you should have got some other\
      \ people to look at your mod.  Maybe you did, but their testing wasn't effective\
      \ enough.\n\n====The tester ====\n\nWow, cool, you've been accepted as a beta\
      \ tester on your favourite mod.  You've been anticipating this one for a while\
      \ and you're really excited that you'll get the chance to play it before anyone\
      \ else.  And give feedback.  You install the mod, fire it up, and it fails to\
      \ even start.  \"What sort of crappy half-arsed mod is this?\", you cry before\
      \ you remember it's a beta - which means it doesn't work.  After some to-ing\
      \ and fro-ing between yourself and the developer you eventually get the mod\
      \ up and running and you start to test it.\n\nWhile playing with the new hand\
      \ held automatic limb dismember device you realise that the gun has stopped\
      \ firing.  It's obviously a bug.  You send in your bug report to the developer:\
      \ ''The gun stopped firing.''.  If you had a patient developer you might have\
      \ got a request for more information.  You may even have been removed from the\
      \ beta-test team without any adequate explanation as to why.\n\n===What went\
      \ wrong ===\n\nIn the developer's case, he simply hadn't put enough time or\
      \ effort (if any) into testing his mod so it crashed and burned on release.\
      \  In the tester's case, the bug report submitted contained almost no useful\
      \ information.  The feedback provided to the developer was almost useless in\
      \ helping the developer find the problem.\n\n==Why do I need to test my mod\
      \ ==\n\nIf you write perfect code all the time that always works first time,\
      \ in the manner you expected, every single time then you can stop reading. \
      \ The odds are however that every now and then small errors creep into your\
      \ code.  These may be simple typing errors, or they could be non-obvious logical\
      \ flaws in the structure of your code.  Remember, just because your code compiles\
      \ doesn’t mean it will work in the way that you intended.  Consider the code\
      \ below.\n\n<uscript>\nfor (I=0;I<10;I++);\n  DoSomethingTenTimes();\n</uscript>\n\
      \n<uscript>\nfor (I=0;I<10;I++)\n  DoSomethingTenTimes();\n</uscript>\n\nNeither\
      \ statement will produce a compiler error, but only the second one will actually\
      \ perform the required operations.\n\nOnce you accept the fact that you cannot\
      \ and will not write completely perfect code all of the time then it’s obvious\
      \ that you need some way of finding the errors in the code.  This process is\
      \ called testing.  The aim of the game is to put your code through the wringer,\
      \ and hopefully find any problems before anyone else does.\n\n==How To Test\
      \ A Mod ==\n\n===Doing it right ===\n\nTesting a mod effectively is hard.  Very\
      \ hard.  The testing process takes up a lot of time, and can also be a very\
      \ tedious job.  There are two types of testing.\n* Shake down testing &ndash;\
      \ The easiest and lightest form of testing.  If your mod is complex then this\
      \ should be avoided.\n* Full testing &ndash; The only real way of ensuring your\
      \ mod gets released with the minimum number of bugs.\n\nThe type of testing\
      \ you choose to use will be influenced by the size and complexity of the mod.\
      \  It will also have a big impact on the final quality of your mod.  Shake down\
      \ testing is great for small map components and simple mutators.  Anything more\
      \ complex than that and you should seriously consider using a full test approach.\
      \  Otherwise you risk releasing a buggy pile of pap to the general public.\n\
      \n===Shake down testing ===\n\nThis is the lightest form of testing.  Anyone\
      \ can start a mod up run around a bit, do some \"stuff\", and generally \"have\
      \ a look\" for problems.  This is the type of testing that most developers do.\
      \  They start up their mod, check out the last thing they changed, and determine\
      \ whether they are happy or not.  They don’t bother checking to see if the change\
      \ they just made broke something else.  If they are sensible, the mod they are\
      \ testing is sufficiently simple that there isn’t anything else to break.\n\n\
      If this testing technique is used then you should either not bother with a testing\
      \ team at all, or, make your testing team as large as you possibly can.\n\n\
      If the mod is complex, then this type of testing can be more harmful than useful\
      \ as it allows the developer to build up a false sense of security in the quality\
      \ of their mod.  This type of testing should not be used for complex mods.\n\
      \n===Full testing ===\n\nThis type of testing is time consuming, laborious,\
      \ and quite often dull.  It is however, the most effective way or systematically\
      \ removing problems and bugs from your mod.\n\nBefore you even start your mod\
      \ for the first time, or while you are writing the code for it, create a list\
      \ of things that could possibly go wrong.  The list of things that may go wrong\
      \ should be phrased as much as possible as questions that can be answered yes\
      \ or no.  This speeds the testing slightly as the tests become a simple tick\
      \ list.\n\nRather than attempt to describe in detail how to come up with the\
      \ list, here is an example taken from the list I’m building up for my single\
      \ flag CTF mod.  It’s only a small subset of a rather scary looking list.\n\
      * When the game starts are both Flag Bases on the map visible?\n* Is there only\
      \ one flag on the map?\n* Is the HUD showing that nether team has the flag and\
      \ that it’s dropped soemwhere?\n* Is the flag picked up when touched?\n* Is\
      \ the flag displayed properly when held (can I see myself carrying it in behind\
      \ view)?\n* Is the flag respawned somewhere on the map if I fall into a pain\
      \ zone?\n* Is the flag dropped if I use the teleporter?\n\nOnce you have your\
      \ list of tests written out, you need to use it.  Every time you do a build\
      \ that could be a viable release you should run through all of your tests ticking\
      \ each one off as you see the expected behaviour.  If you get some unexpected\
      \ behaviour then either your test is wrong, or, you have found a bug.\n\nOnce\
      \ you have finished all of your test conditions it’s well worth entering a period\
      \ of Shake down testing to try out new and strange things that \"people would\
      \ never do in real life\".  Every time you find a problem that isn’t covered\
      \ by your existing test list add it.  By adding tests to your initial list you\
      \ are ensuring that a particular problem does not reoccur once removed.\n\n\
      ===Group testing ===\n\nIf the mod is a reasonable size then it’s worth trying\
      \ to find some testers to help you.  As the complexity of the mod increases\
      \ the number of tests that need to be done grows hugely as the number of components\
      \ that can be interacted with, and the number of combinations of components\
      \ that can be interacted grows. The following are some points to consider when\
      \ you have a group of testers\n\n* First thing you might want to think about\
      \ is have one central point for bugs to be reported and/or documented (message\
      \ board?). It does you no good if you have to wade through 30 reports of the\
      \ same bug. You could expand on this to have someone lead or take charge of\
      \ this part of the team. Having one source to keep track of the bugs and what\
      \ has been or has not been fixed allows for the other members to have more time\
      \ to fix the said bugs.\n\n* Delegate and/or assign certain parts of the mod\
      \ testing to certain people. For example give a certain group of people (or\
      \ a single person) an area they should look at for bugs and give another group\
      \ a different area. For example have one group that looks at the weapons while\
      \ the other group looks at the game play aspect of the mod. This allows for\
      \ an efficient way to get more coverage and testing as well as it being a more\
      \ effective way to user your resources. Your testers will also like is as they\
      \ wont have to spend as much time testing/bug hunting. Some overlapping is a\
      \ good idea but try to keep that to a minimum. If you did elect one member of\
      \ the team to handle to be the central point for bug testing this then its should\
      \ be their job to do the delegating.\n\n* Get confirmation from another member\
      \ when a bug is reported. Sometimes one of your users could have accidentally\
      \ corrupted a core file that will cause a bug to appear when it is more of a\
      \ configuration issue on that users PC. For example say if they accidentally\
      \ loaded a older version of a .u file and get some type of \"weird results\"\
      . \n\n* Make sure you have a reliable group. Having a group that does not test\
      \ their assign areas will not help you at all. Make sure you find people that\
      \ can dedicated the time that it is needed when your ready for testing. Nothing\
      \ is more aggravating then posting an update and not seeing any feedback on\
      \ it. If its at all possible you can try to have a set date for updates. This\
      \ helps as then your beta testers will know when an update is out and when they\
      \ need to reserve time for testing.\n\n===Don't forget about the network testing\
      \ ===\n\nOne of the things that it's easy to forget, especially if it's a small\
      \ mod, is to test your mod thoroughly over a network, preferably against a dedicated\
      \ server.  Network replication is one of the biggest pit fall a coder will have\
      \ to face. Just because things work fine in a practice match does not mean that\
      \ they will work in an on-line game. Usually they won't work in on-line games\
      \ unless the coder has dealt with replication in their past work. The larger\
      \ the mod the more chances for replication issues to crop up and usually these\
      \ are the harder bugs to fix. You also can test what happens to your mod on\
      \ dynamic conditions or when players leave under catastrophic circumstances\
      \ (drop the network). For example what happens to the flag if the flag carrier\
      \ leaves? Or what happens to your remote controlled weapon if the owner leaves?\
      \  You can also check the network use of your mod as well. Finally don't forget\
      \ to look at the log from the server when testing your mod with a dedicated\
      \ server.\n\n==Reporting Faults ==\n\nFinding a problem is not useful in itself.\
      \  The developer is still unaware that the problem exists.  How you communicate\
      \ that problem to the developer is crucial to avoid wasting your time and his.\n\
      \nIf you have a tick list of tests, and one of them failed then reporting the\
      \ problem is easy.  You can tell the developer which test failed, and supply\
      \ him with your log file.  Because the developer has an exact duplicate of your\
      \ list he can see everything you did up to the point your problem occurred.\
      \ By providing him with your log file he may be able to tell directly from the\
      \ log what went wrong.\n\nIf this is a brand new test then the first thing you\
      \ should so is update your tick list of tests.  Then send the following information\
      \ on to the developer.\n* The exact details of the problem.\n* What you did\
      \ prior to the problem manifesting itself.\n* What you were trying to do.\n\
      * What objects you had in your inventory &ndash; and your \"player state\".\n\
      \nThe more detail you can supply to the developer about the bug the better.\
      \  If you are testing a map then send some screenshots of the problem or feature\
      \ that caused you the problem.\n\nAlways remember to send your log file along\
      \ with your bug report.  The log file is one of the most valuable tools the\
      \ developer has when it comes to resolving problems.\n\nDon’t be surprised (or\
      \ offended) if the developer comes back with some more questions about your\
      \ fault.  They may not have been able to reproduce it, or, they might want additional\
      \ clarification about the exact manifestation of the problem.  If you can identify\
      \ a problem with the way in which bugs are reported then change the way you\
      \ (and the team) report bugs.\n\nIf you have a team of testers, consider using\
      \ a standard format for error reporting across the whole team.  That way new\
      \ testers will get up to speed faster, and developers can find the information\
      \ they are looking for easier.\n\n==Some common pitfalls ==\n;The change is\
      \ only one line it can't possibly be wrong. : Those tiny one line fixes to your\
      \ code will quite often cause you far more pain than a complete change to the\
      \ class hierarchy.  The reason for this is that the one-line code change doesn’\
      t get the same level of consideration as a complete class hierarchy change.\
      \  It’s very easy to fall into the trap of, \"It’s only one line it won’t break\
      \ anything and it will fix my problem.\".\n\n; Changing code at the point of\
      \ release. : If you ever change some code prior to building your release, and\
      \ then fail to test it, your release will have bugs.  In the best case you will\
      \ have introduced a new bug (assuming the one you were trying to fix was fixed\
      \ by your last minute change).  At worst you will have completely broken your\
      \ mod and it will no longer work.\n\n; Publishing an unattainable release date.\
      \ : As a developer you are always optimistic about how much bug free code you\
      \ can write in a given amount of time.  Publishing a release date for your mod\
      \ based upon your expectations of when the mod will be finished will out you\
      \ and your team under extreme pressure.  Have you allowed time for testing and\
      \ bug fixing in your date?  Do you have any spare time (contingency) added to\
      \ cater for interruptions from real life? Bad things happen when release dates\
      \ are missed.  The developer and testers may get discouraged.  People will start\
      \ to lose interest in the mod and accuse it of being vapourware.  Your team\
      \ may get flamed to a crisp for not delivering on your published release date.\
      \  Your \"consumers\" won’t care that your PC caught fire, or that a builder\
      \ has severed your Internet connection so you couldn’t do anything.  All they\
      \ will see is that you failed to deliver, when you said you were going to.\n\
      \n==Related Topics==\n* [[Legacy:A Bug'S Life|A Bug's Life]] &ndash; hints on\
      \ how to write a useful bug report\n* [[Legacy:Debugging Techniques|Debugging\
      \ Techniques]] &ndash; useful techniques for finding and eliminating bugs\n\
      * [[Legacy:Testing Lab|Testing Lab]] &ndash; Get others to help test your mod\n\
      \n[[Category:Legacy Troubleshooting|{{PAGENAME}}]]"
  properties: []
  revId: 4536
name: "Legacy:Making Mods/Effective Testing"
revision:
  revid: 4536
  parentid: 4538
  user: "SuperApe"
  timestamp: 1133752462.000000000
  comment: "*"
timestamp: 1668763237.317791000
