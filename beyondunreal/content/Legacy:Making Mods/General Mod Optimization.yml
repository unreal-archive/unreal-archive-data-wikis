---
parse:
  title: "Legacy:Making Mods/General Mod Optimization"
  text:
    text: "<p>Here I will outline some easy and commonly overlooked methods for optimizing\
      \ your mod so that it performs at its best. I encountered all of these myself\
      \ while producing Frag.Ops, and being my first mod I realized how easy it is\
      \ to not notice these things. Currently a work in progress. -SquirrelZero</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Mesh_LOD_-_UT200X\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Mesh LOD - UT200X</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Player_Models\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Player Models</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Vehicles\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Vehicles</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#1st_and_3rd_Person_Weapon_Models\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">1st and 3rd Person Weapon Models</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Rigidize_-_UT200X\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Rigidize - UT200X</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Player_Models_2\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Player Models</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Vehicles_2\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Vehicles</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-8\"><a href=\"#1st_Person_Weapon_Models\"><span\
      \ class=\"tocnumber\">2.3</span> <span class=\"toctext\">1st Person Weapon Models</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#3rd_Person_Weapon_Models\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">3rd Person Weapon\
      \ Models</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#Conclusion\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Conclusion</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Mesh_LOD_-_UT200X\">Mesh LOD - UT200X</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=1\"\
      \ title=\"Edit section: Mesh LOD - UT200X\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Mesh LOD (Level Of Detail) levels and their benefits.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Player_Models\">Player Models</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=2\" title=\"\
      Edit section: Player Models\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>For each of your player models, you should have 4\
      \ <a href=\"/edit/Legacy:LOD?redlink=1\" class=\"new\" title=\"Legacy:LOD (page\
      \ does not exist)\">LOD</a> levels. These can be viewed in the LOD drop-down\
      \ menu in the <a href=\"/Legacy:Animation_Browser\" title=\"Legacy:Animation\
      \ Browser\">Animation Browser</a>. LOD levels are what the engine will display\
      \ at varying view distances from the model, to save polygon counts that the\
      \ viewer would otherwise never notice. Each level collapses certain polygons\
      \ on the model to create a lower-poly version of the original. When importing\
      \ your models into the editor, these levels are generated for you. However,\
      \ if you saved them with smoothing groups, the engine will generally collapse\
      \ parts of the model that you really don't want it to collapse – like the neck,\
      \ ankles, elbows, wrists, etc. This causes pieces of the model to be completely\
      \ see-through at a relatively short view distance. Make sure you don't save\
      \ any player models with smoothing groups.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Vehicles\">Vehicles</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=3\"\
      \ title=\"Edit section: Vehicles\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These are generally the same as Player Models. No\
      \ need for further explanation.</p>\n<h3><span class=\"mw-headline\" id=\"1st_and_3rd_Person_Weapon_Models\"\
      >1st and 3rd Person Weapon Models</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=4\"\
      \ title=\"Edit section: 1st and 3rd Person Weapon Models\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Here you only need 1 LOD level:\
      \ the original mesh. Since the editor automatically creates the 4 levels for\
      \ you when importing a model, this is often the most overlooked setting I've\
      \ come across. You can safely delete levels 1,2, and 3, thus reducing the total\
      \ data size by a very large amount. When preloading each model, all of the LOD\
      \ levels are preloaded along with it, and by deleting these you can reduce the\
      \ memory usage often by almost a megabyte per 1st person model, and 200-300\
      \ kilobytes per 3rd person model. In cases of high memory usage, this can make\
      \ a world of difference.</p>\n<h2><span class=\"mw-headline\" id=\"Rigidize_-_UT200X\"\
      >Rigidize - UT200X</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=5\"\
      \ title=\"Edit section: Rigidize - UT200X\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The rigidize subcategory of LOD levels, used for reducing\
      \ the overhead when drawing a skeletal mesh.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Player_Models_2\">Player Models</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=6\"\
      \ title=\"Edit section: Player Models\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is somewhat of a topic of contention among modders.\
      \ Open the Animation Browser and go to the first level of LOD in any stock UT200X\
      \ player model. You'll see a subsection named <b>Rigidize</b>. There is a variable\
      \ here named <b>MeshSectionMethod</b>. You'll notice that on all UT200X player\
      \ models, they're set to <b>MSM_SmoothOnly</b>. This basically tells the engine\
      \ \"This mesh has no rigid parts, and should be reuploaded to the video card\
      \ each time the model needs to be repainted.\" Sound slow? It is. In fact, it's\
      \ the slowest of all the Rigid settings. So why do all the stock models use\
      \ it? Most player models have very few rigid parts and are generally deformable\
      \ on the whole. For example, if you set it to <b>MSM_RigidOnly</b> then click\
      \ the <b>Redigest LOD</b> button, you'll only see the rigid parts, which are\
      \ very few and don't make up large chunks of the polycount. Obviously using\
      \ MSM_RigidOnly would be a bad idea, since you wouldn't want to see only those\
      \ small patches of the model in the game. <b>MSM_Mixed</b> tells the engine\
      \ \"This model has both smooth and rigid parts, so cache some of it to memory\
      \ while reuploading the rest.\" However, using this on a model with very few\
      \ rigid parts can actually decrease performance, since the CPU overhead needed\
      \ to compute these configurations would outweigh the benefit.</p>\n<p>So when\
      \ is it a good idea to use MSM_Mixed on a player model? Say your killer new\
      \ model is a mechanical one, like a robot, with very few deformable parts –\
      \ let's say, a Star Wars AT-ST. Machines generally don't deform because they're\
      \ made of metal. In this case, you would probably see an excellent benefit from\
      \ using the MSM_Mixed rigid setting, since it will allow your model to be almost\
      \ entirely cacheable to video memory, like a static mesh. This means the video\
      \ card would require less overhead per tick when rendering that model, allowing\
      \ a substantial performance increase. This and the MSM_RigidOnly setting are\
      \ also common on Vehicles in UT2004, which I'll get to next.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Vehicles_2\">Vehicles</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=7\"\
      \ title=\"Edit section: Vehicles\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Vehicles can almost always use MSM_RigidOnly. Very\
      \ few vehicles will need to deform, except perhaps ones like the LawDogs horses\
      \ or the Shattered Oasis cows. This is used extensively in UT2004 to boost performance\
      \ in maps where sometimes there are as many as 10-15 vehicles on screen at once.</p>\n\
      <h3><span class=\"mw-headline\" id=\"1st_Person_Weapon_Models\">1st Person Weapon\
      \ Models</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=8\"\
      \ title=\"Edit section: 1st Person Weapon Models\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Here's a good time to make use of the MSM_Mixed and\
      \ MSM_RigidOnly settings. Since most weapons don't deform, you can safely use\
      \ MSM_RigidOnly in almost all situations. This basically allows your weapons\
      \ to be entirely cacheable to the video card, and is much, much faster than\
      \ reuploading the entire mesh each repaint, especially when compared with models\
      \ at high polycounts. The only time you wouldn't want to use this setting is\
      \ if your models also included some kind of arm or hand holding them, since\
      \ these need to deform and can't be rigid. Here it is safe to use MSM_Mixed\
      \ because the weapon itself takes up a large chunk of the polycount, and is\
      \ not deformable.</p>\n<h3><span class=\"mw-headline\" id=\"3rd_Person_Weapon_Models\"\
      >3rd Person Weapon Models</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=9\"\
      \ title=\"Edit section: 3rd Person Weapon Models\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Ah, here we introduce a new rigid setting: <b>MSM_SinglePiece</b>.\
      \ This is similar to MSM_RigidOnly, except forces the model to always use the\
      \ reference pose (no animation). Nearly all 3rd person weapon/inventory models\
      \ can use this setting. This setting performs nearly as good as static meshes,\
      \ with the small exception of the mesh skeleton. The reason 3rd person weapon\
      \ models are skeletal meshes at all is because they can use bones, which are\
      \ very handy for attaching effects like shell ejectors and muzzle flashes, things\
      \ that would otherwise be very difficult to code in. Note that MSM_SinglePiece\
      \ is the fastest of all the Rigid settings.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Conclusion\">Conclusion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Making_Mods/General_Mod_Optimization?section=10\"\
      \ title=\"Edit section: Conclusion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This is by no means complete, but I do need some sleep\
      \ now&#160;:). I'll be adding a few more tips this week, and I intend to link\
      \ the relevant sections to their counterparts elsewhere on the wiki.</p>\n<hr\
      \ />\n<p>----</p>\n<p><b>EntropicLqd:</b> Can you explain <i>deformable</i>\
      \ a little more clearly. Is it the same as <i>animated</i>? In which case the\
      \ Flak Cannon would be <i>deformable</i>? or is it something else? interesting\
      \ page btw. Very nice.</p>\n<p><b>Foxpaw:</b> I believe deformable refers to\
      \ a group of vertices that do not change position relative to each other. So,\
      \ for instance, some parts of the flak cannon are animated, but all parts of\
      \ the piston head (and I believe the shell too) stay in the same place relative\
      \ to each other, as do the \"body\" pieces. However, in, say, a player, the\
      \ \"skin\" of the player changes considerably as it moves.</p>\n<p><b>Foxpaw:</b>\
      \ Also, should this page be merged with <a href=\"/edit/Legacy:Optimization_Techniques?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Optimization Techniques (page does not exist)\"\
      >Optimization Techniques</a>?</p>\n<p><b>SquirrelZero:</b> Ah, I didn't see\
      \ that page. It might fit in quite nicely there. Foxpaw is correct, <i>deformable</i>\
      \ refers to models that stretch and bend, like the legs on a player model when\
      \ running, or the twisting of the torso. The model's structure changes often\
      \ and so needs to be reuploaded to memory with each change.</p>\n<p><b>Dirk\
      \ Fist:</b> Rubber == Deformable; Porcelain&#160;!= Deformable&#160;:D</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.044 seconds\nReal time usage:\
      \ 0.229 seconds\nPreprocessor visited node count: 39/1000000\nPreprocessor generated\
      \ node count: 44/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1857-0!*!0!!en!*!* and timestamp 20221118092029 and revision\
      \ id 4557\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Animation Browser"
  - ns: 100
    exists: false
    name: "Legacy:Optimization Techniques"
  - ns: 100
    exists: false
    name: "Legacy:LOD"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Mesh LOD - UT200X"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 304
    anchor: "Mesh_LOD_-_UT200X"
  - toclevel: 2
    level: "3"
    line: "Player Models"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 383
    anchor: "Player_Models"
  - toclevel: 2
    level: "3"
    line: "Vehicles"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 1286
    anchor: "Vehicles"
  - toclevel: 2
    level: "3"
    line: "1st and 3rd Person Weapon Models"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 1384
    anchor: "1st_and_3rd_Person_Weapon_Models"
  - toclevel: 1
    level: "2"
    line: "Rigidize - UT200X"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 2020
    anchor: "Rigidize_-_UT200X"
  - toclevel: 2
    level: "3"
    line: "Player Models"
    number: "2.1"
    index: "6"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 2146
    anchor: "Player_Models_2"
  - toclevel: 2
    level: "3"
    line: "Vehicles"
    number: "2.2"
    index: "7"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 4206
    anchor: "Vehicles_2"
  - toclevel: 2
    level: "3"
    line: "1st Person Weapon Models"
    number: "2.3"
    index: "8"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 4519
    anchor: "1st_Person_Weapon_Models"
  - toclevel: 2
    level: "3"
    line: "3rd Person Weapon Models"
    number: "2.4"
    index: "9"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 5225
    anchor: "3rd_Person_Weapon_Models"
  - toclevel: 1
    level: "2"
    line: "Conclusion"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Making_Mods/General_Mod_Optimization"
    byteoffset: 5909
    anchor: "Conclusion"
  displaytitle: "Legacy:Making Mods/General Mod Optimization"
  iwlinks: []
  wikitext:
    text: "Here I will outline some easy and commonly overlooked methods for optimizing\
      \ your mod so that it performs at its best.  I encountered all of these myself\
      \ while producing Frag.Ops, and being my first mod I realized how easy it is\
      \ to not notice these things.  Currently a work in progress.  -SquirrelZero\n\
      \n==Mesh LOD - UT200X ==\n\nMesh LOD (Level Of Detail) levels and their benefits.\n\
      \n===Player Models===\n\nFor each of your player models, you should have 4 [[Legacy:LOD|LOD]]\
      \ levels.  These can be viewed in the LOD drop-down menu in the [[Legacy:Animation\
      \ Browser|Animation Browser]].  LOD levels are what the engine will display\
      \ at varying view distances from the model, to save polygon counts that the\
      \ viewer would otherwise never notice.  Each level collapses certain polygons\
      \ on the model to create a lower-poly version of the original.  When importing\
      \ your models into the editor, these levels are generated for you.  However,\
      \ if you saved them with smoothing groups, the engine will generally collapse\
      \ parts of the model that you really don't want it to collapse &ndash; like\
      \ the neck, ankles, elbows, wrists, etc.  This causes pieces of the model to\
      \ be completely see-through at a relatively short view distance.  Make sure\
      \ you don't save any player models with smoothing groups.\n\n===Vehicles===\n\
      \nThese are generally the same as Player Models.  No need for further explanation.\n\
      \n===1st and 3rd Person Weapon Models===\n\nHere you only need 1 LOD level:\
      \ the original mesh.  Since the editor automatically creates the 4 levels for\
      \ you when importing a model, this is often the most overlooked setting I've\
      \ come across.  You can safely delete levels 1,2, and 3, thus reducing the total\
      \ data size by a very large amount.  When preloading each model, all of the\
      \ LOD levels are preloaded along with it, and by deleting these you can reduce\
      \ the memory usage often by almost a megabyte per 1st person model, and 200-300\
      \ kilobytes per 3rd person model.  In cases of high memory usage, this can make\
      \ a world of difference.   \n\n==Rigidize - UT200X ==\n\nThe rigidize subcategory\
      \ of LOD levels, used for reducing the overhead when drawing a skeletal mesh.\n\
      \n===Player Models===\n\nThis is somewhat of a topic of contention among modders.\
      \  Open the Animation Browser and go to the first level of LOD in any stock\
      \ UT200X player model.  You'll see a subsection named '''Rigidize'''.  There\
      \ is a variable here named '''MeshSectionMethod'''.  You'll notice that on all\
      \ UT200X player models, they're set to '''MSM_SmoothOnly'''.  This basically\
      \ tells the engine \"This mesh has no rigid parts, and should be reuploaded\
      \ to the video card each time the model needs to be repainted.\"  Sound slow?\
      \  It is.  In fact, it's the slowest of all the Rigid settings.  So why do all\
      \ the stock models use it?  Most player models have very few rigid parts and\
      \ are generally deformable on the whole.  For example, if you set it to '''MSM_RigidOnly'''\
      \ then click the '''Redigest LOD''' button, you'll only see the rigid parts,\
      \ which are very few and don't make up large chunks of the polycount.  Obviously\
      \ using MSM_RigidOnly would be a bad idea, since you wouldn't want to see only\
      \ those small patches of the model in the game.  '''MSM_Mixed''' tells the engine\
      \ \"This model has both smooth and rigid parts, so cache some of it to memory\
      \ while reuploading the rest.\"  However, using this on a model with very few\
      \ rigid parts can actually decrease performance, since the CPU overhead needed\
      \ to compute these configurations would outweigh the benefit.\n\nSo when is\
      \ it a good idea to use MSM_Mixed on a player model?  Say your killer new model\
      \ is a mechanical one, like a robot, with very few deformable parts &ndash;\
      \ let's say, a Star Wars AT-ST.  Machines generally don't deform because they're\
      \ made of metal.  In this case, you would probably see an excellent benefit\
      \ from using the MSM_Mixed rigid setting, since it will allow your model to\
      \ be almost entirely cacheable to video memory, like a static mesh.  This means\
      \ the video card would require less overhead per tick when rendering that model,\
      \ allowing a substantial performance increase.  This and the MSM_RigidOnly setting\
      \ are also common on Vehicles in UT2004, which I'll get to next.\n\n===Vehicles===\n\
      \nVehicles can almost always use MSM_RigidOnly.  Very few vehicles will need\
      \ to deform, except perhaps ones like the LawDogs horses or the Shattered Oasis\
      \ cows.  This is used extensively in UT2004 to boost performance in maps where\
      \ sometimes there are as many as 10-15 vehicles on screen at once. \n\n===1st\
      \ Person Weapon Models===\n\nHere's a good time to make use of the MSM_Mixed\
      \ and MSM_RigidOnly settings.  Since most weapons don't deform, you can safely\
      \ use MSM_RigidOnly in almost all situations.  This basically allows your weapons\
      \ to be entirely cacheable to the video card, and is much, much faster than\
      \ reuploading the entire mesh each repaint, especially when compared with models\
      \ at high polycounts.  The only time you wouldn't want to use this setting is\
      \ if your models also included some kind of arm or hand holding them, since\
      \ these need to deform and can't be rigid.  Here it is safe to use MSM_Mixed\
      \ because the weapon itself takes up a large chunk of the polycount, and is\
      \ not deformable.\n\n===3rd Person Weapon Models===\n\nAh, here we introduce\
      \ a new rigid setting: '''MSM_SinglePiece'''.  This is similar to MSM_RigidOnly,\
      \ except forces the model to always use the reference pose (no animation). \
      \ Nearly all 3rd person weapon/inventory models can use this setting.  This\
      \ setting performs nearly as good as static meshes, with the small exception\
      \ of the mesh skeleton.  The reason 3rd person weapon models are skeletal meshes\
      \ at all is because they can use bones, which are very handy for attaching effects\
      \ like shell ejectors and muzzle flashes, things that would otherwise be very\
      \ difficult to code in.  Note that MSM_SinglePiece is the fastest of all the\
      \ Rigid settings.\n\n==Conclusion==\n\nThis is by no means complete, but I do\
      \ need some sleep now :).  I'll be adding a few more tips this week, and I intend\
      \ to link the relevant sections to their counterparts elsewhere on the wiki.\n\
      \n---- ----\n\n'''EntropicLqd:'''  Can you explain ''deformable'' a little more\
      \ clearly.  Is it the same as ''animated''?  In which case the Flak Cannon would\
      \ be ''deformable''? or is it something else?  interesting page btw.  Very nice.\n\
      \n'''Foxpaw:''' I believe deformable refers to a group of vertices that do not\
      \ change position relative to each other. So, for instance, some parts of the\
      \ flak cannon are animated, but all parts of the piston head (and I believe\
      \ the shell too) stay in the same place relative to each other, as do the \"\
      body\" pieces. However, in, say, a player, the \"skin\" of the player changes\
      \ considerably as it moves.\n\n'''Foxpaw:''' Also, should this page be merged\
      \ with [[Legacy:Optimization Techniques|Optimization Techniques]]?\n\n'''SquirrelZero:'''\
      \ Ah, I didn't see that page.  It might fit in quite nicely there.  Foxpaw is\
      \ correct, ''deformable'' refers to models that stretch and bend, like the legs\
      \ on a player model when running, or the twisting of the torso.  The model's\
      \ structure changes often and so needs to be reuploaded to memory with each\
      \ change.\n\n'''Dirk Fist:''' Rubber == Deformable; Porcelain != Deformable\
      \ :D"
  properties: []
  revId: 4557
name: "Legacy:Making Mods/General Mod Optimization"
revision:
  revid: 4557
  parentid: 4559
  user: "SquirrelZero"
  timestamp: 1092228021.000000000
  comment: "*"
timestamp: 1668763230.064017000
