---
parse:
  title: "Typecasting"
  text:
    text: "<p><b>Typecasting</b> or <b>type conversion</b> is the concept of converting\
      \ one <a href=\"/Data_type\" title=\"Data type\" class=\"mw-redirect\">data\
      \ type</a> into another, for example the turning the string \"1\" into the numeric\
      \ value 1.</p>\n<p>Type conversions from or to primitive data types, including\
      \ conversions between the struct types <a href=\"/Vector\" title=\"Vector\"\
      >vector</a> and <a href=\"/Rotator\" title=\"Rotator\">rotator</a> and from\
      \ a reference type, are called <b>primitive casts</b>. Type conversions between\
      \ different classes of object references are called <b>dynamic casts</b>. Type\
      \ conversions between different <a href=\"/Class_limiter\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">class limiter</a> types or from an object reference\
      \ to a class limiter type are called <b>metacasts</b>.</p>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#Explicit_conversion_syntax\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Explicit conversion\
      \ syntax</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Implicit_type_conversion\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Implicit type conversion</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Numeric_types\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Numeric types</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Object_and_class_limiter_types\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Object and class\
      \ limiter types</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Parameters_defined_with_coerce\"><span class=\"tocnumber\">2.3</span> <span\
      \ class=\"toctext\">Parameters defined with <i>coerce</i></span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Primitive_casts\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Primitive casts</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#bool_to...\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">bool to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#byte_to...\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">byte to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#int_to...\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">int to...</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-10\"><a href=\"#float_to...\"><span class=\"\
      tocnumber\">3.4</span> <span class=\"toctext\">float to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#name_to...\"><span class=\"\
      tocnumber\">3.5</span> <span class=\"toctext\">name to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#string_to...\"><span class=\"\
      tocnumber\">3.6</span> <span class=\"toctext\">string to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#rotator_to...\"><span class=\"\
      tocnumber\">3.7</span> <span class=\"toctext\">rotator to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-14\"><a href=\"#vector_to...\"><span class=\"\
      tocnumber\">3.8</span> <span class=\"toctext\">vector to...</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#Object_to...\"><span class=\"\
      tocnumber\">3.9</span> <span class=\"toctext\">Object to...</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-16\"><a href=\"#Reference_type_conversions\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Reference type conversions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-17\"><a href=\"#Dynamic_casts\"><span\
      \ class=\"tocnumber\">4.1</span> <span class=\"toctext\">Dynamic casts</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-18\"><a href=\"#Examples\"><span class=\"\
      tocnumber\">4.1.1</span> <span class=\"toctext\">Examples</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-19\"><a href=\"#Metacasts\"\
      ><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">Metacasts</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-20\"><a href=\"#Examples_2\"><span class=\"\
      tocnumber\">4.2.1</span> <span class=\"toctext\">Examples</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-21\"><a href=\"\
      #Other_conversions\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Other conversions</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-22\"\
      ><a href=\"#string_to_name\"><span class=\"tocnumber\">5.1</span> <span class=\"\
      toctext\">string to name</span></a></li>\n<li class=\"toclevel-2 tocsection-23\"\
      ><a href=\"#string_to_object_reference\"><span class=\"tocnumber\">5.2</span>\
      \ <span class=\"toctext\">string to object reference</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-24\"><a href=\"#string_to_struct\"><span class=\"tocnumber\"\
      >5.3</span> <span class=\"toctext\">string to struct</span></a></li>\n</ul>\n\
      </li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Explicit_conversion_syntax\"\
      >Explicit conversion syntax</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=1\" title=\"\
      Edit section: Explicit conversion syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>To explicitly convert a value of one type to another,\
      \ use the following syntax:</p>\n<pre><i>typename</i><b>(</b><i>value</i><b>)</b>\n\
      </pre>\n<p>Typename is the type to convert the value to. As you can see, this\
      \ syntax looks like a function call and is a good reason why your <a href=\"\
      /Functions\" title=\"Functions\">functions</a> should not have the same name\
      \ as any built-in or user-defined types. If a function and a type of the same\
      \ name are found, the function call takes precedence over the typecast.</p>\n\
      <p><b>Note:</b> The compiler will throw an error message if the typecast is\
      \ redundant, for example because the target type is identical to the value's\
      \ type, or will always fail, for example when casting between classes from unrelated\
      \ branches of the class tree.</p>\n<h2><span class=\"mw-headline\" id=\"Implicit_type_conversion\"\
      >Implicit type conversion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=2\" title=\"\
      Edit section: Implicit type conversion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Certain type conversions are done automatically.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Numeric_types\">Numeric types</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=3\" title=\"Edit section: Numeric types\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The\
      \ types <i>int</i>, <i>float</i> and <i>byte</i> are automatically converted\
      \ into each other when an assignment, <a href=\"/Operator\" title=\"Operator\"\
      \ class=\"mw-redirect\">operator</a> or function call require it. Especially\
      \ for byte values this is essential, because only the increment, decrement and\
      \ combined assignment operators are defined for the type <i>byte</i>. All other\
      \ operators, such as + or - actually are <i>int</i> operators returning <i>int</i>\
      \ values. The reason why you can still use them as expected is implicit type\
      \ conversion:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw5\">byte</span> A, B, C;\n \nC <span class=\"\
      sy0\">=</span> A <span class=\"sy0\">+</span> B; <span class=\"co1\">// actually\
      \ compiled as: C = byte(int(A) + int(B));</span></pre></div>\n</div>\n<p>Keep\
      \ in mind that these implicit conversions have the same effects like explicit\
      \ conversions. The *= and /= operators for the <i>int</i> type actually expect\
      \ a <i>float</i> value as the second operand, so <code>x *= 2</code> is not\
      \ exactly the same as <code>x = x * 2</code>, because the the latter performs\
      \ actual integer multiplication, while the former internally performs floating\
      \ point multiplication, which may produce rounding errors for very large values.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Object_and_class_limiter_types\">Object\
      \ and class limiter types</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=4\" title=\"\
      Edit section: Object and class limiter types\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Another kind of implicit type conversion happens when\
      \ assigning an object reference of a certain class to a variable whose type\
      \ is a parent class of the object's class. This is a direct consequence of <a\
      \ href=\"http://en.wikipedia.org/wiki/object-oriented_programming\" class=\"\
      extiw\" title=\"wp:object-oriented programming\">object-oriented programming</a>\
      \ and does not alter the referenced object itself in any way, only the <i>view</i>\
      \ on the object through the reference. This kind of conversion is done implicitly\
      \ because it is a common task and will never fail. In fact, the compiler <i>refuses</i>\
      \ any explicit type conversion to a super class because this is how OOP works.</p>\n\
      <p>Similarly, a <a href=\"/Class_limiter\" title=\"Class limiter\" class=\"\
      mw-redirect\">class limiter</a> type of a certain metaclass is implicitly converted\
      \ to a class limiter type whose metaclass is a parent class of the first type's\
      \ metaclass. Like with object typecasts, the compiler actually refuses explicit\
      \ typecasts to a class limiter for a parent class.</p>\n<p>For engine implementations\
      \ that support <a href=\"/Interfaces\" title=\"Interfaces\">interfaces</a>,\
      \ object references can be implicitly converted to all implemented interfaces\
      \ when assigning the reference to a variable of the interface type. Note that\
      \ this does <i>not</i> apply to class limiters, those strictly follow the class\
      \ hierarchy without respecting the \"cross connections\" created by implementing\
      \ interfaces!</p>\n<h3><span class=\"mw-headline\" id=\"Parameters_defined_with_coerce\"\
      >Parameters defined with <i>coerce</i></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=5\"\
      \ title=\"Edit section: Parameters defined with coerce\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p><a href=\"/Functions\" title=\"\
      Functions\">Functions</a> and <a href=\"/Operators\" title=\"Operators\">operators</a>\
      \ can apply the keyword <a href=\"/Coerce\" title=\"Coerce\" class=\"mw-redirect\"\
      >coerce</a> to their parameter declarations to instruct the compiler to automatically\
      \ perform type conversion on values passed when the function or operator is\
      \ called. That is only possible if an explicit type conversion exists from the\
      \ value's type to the parameter's type. See the following section for a list\
      \ of possible type conversions.</p>\n<p>Usually the <i>coerce</i> keyword is\
      \ only used for <a href=\"/String\" title=\"String\">string</a> parameters.\
      \ It is widely used in the built-in string functions and operators and in the\
      \ logging functions.</p>\n<h2><span class=\"mw-headline\" id=\"Primitive_casts\"\
      >Primitive casts</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Typecasting?section=6\" title=\"Edit section: Primitive\
      \ casts\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Not all possible combinations of type conversions can actually be performed.\
      \ For example, converting a floating point value to a class or a struct value\
      \ to a name does not provide any meaningful result. This section lists all built-in\
      \ primitive casts. These conversions will happen automatically when passing\
      \ values to function parameters declared with the <a href=\"/Coerce\" title=\"\
      Coerce\" class=\"mw-redirect\">coerce</a> modifier, unless the conversion requires\
      \ casting to an <a href=\"/Enum\" title=\"Enum\" class=\"mw-redirect\">enum</a>\
      \ type.</p>\n<p>Note that it might be a good idea to specify literals of the\
      \ target type directly instead of typecasting from a different type. For example\
      \ <code>rotator(vect(0.0,1.0,0.0))</code> should be written as <code>rot(0,16384,0)</code>\
      \ instead.</p>\n<h3><span class=\"mw-headline\" id=\"bool_to...\">bool to...</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=7\" title=\"Edit section: bool to...\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>...byte,\
      \ int or float&#160;</dt>\n<dd>Returns 1 (or 1.0) for the value <i>True</i>\
      \ and 0 (or 0.0) for the value <i>False</i>.</dd>\n<dt>...string&#160;</dt>\n\
      <dd>Returns the localized version of the strings \"True\" or \"False\" for the\
      \ values <i>True</i> and <i>False</i> respectively.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"byte_to...\">byte to...</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=8\"\
      \ title=\"Edit section: byte to...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>...bool&#160;</dt>\n<dd>Returns <i>False</i>\
      \ for the byte value 0 and <i>True</i> for any other value.</dd>\n<dt>...<a\
      \ href=\"/Enum\" title=\"Enum\" class=\"mw-redirect\">enum</a> types&#160;</dt>\n\
      <dd>Returns the enum constant corresponding to the numeric value. (0 -&gt; first\
      \ value, 1 -&gt; second value, etc.)</dd>\n<dt>...float&#160;</dt>\n<dd>Byte\
      \ to float conversion is also lossless and returns a float with the same numeric\
      \ value as the byte value.</dd>\n<dt>...int&#160;</dt>\n<dd>Byte to int conversion\
      \ is lossless and simply returns an int with the same numeric value as the byte\
      \ value.</dd>\n<dt>...string&#160;</dt>\n<dd>Returns the decimal string representation\
      \ of the byte value.</dd>\n</dl>\n<p>All byte conversions also apply to values\
      \ of enum types, with the first enum constant corresponding to 0, second constant\
      \ to 1, etc.</p>\n<h3><span class=\"mw-headline\" id=\"int_to...\">int to...</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=9\" title=\"Edit section: int to...\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>...bool&#160;</dt>\n\
      <dd>Returns <i>False</i> for the int value 0 and <i>True</i> for any other value.</dd>\n\
      <dt>...byte&#160;</dt>\n<dd>Int to byte conversion truncates the binary representation\
      \ of the int value to the least significant eight bits. Negative int values\
      \ are stored in <a href=\"http://en.wikipedia.org/wiki/two%27s_complement\"\
      \ class=\"extiw\" title=\"wp:two's complement\">two's complement</a>, so for\
      \ example converting -1 to byte results in the value 255.</dd>\n<dt>...float&#160;</dt>\n\
      <dd>Int to float conversion returns the nearest possible float value. This is\
      \ unproblematic for values between -16777216 (0xFF000000) and +16777216 (0x1000000),\
      \ but for larger positive or smaller negative values the float data type is\
      \ not precise enough, so rounding will occur.</dd>\n<dt>...<a href=\"/Enum\"\
      \ title=\"Enum\" class=\"mw-redirect\">enum</a> types&#160;</dt>\n<dd>Performs\
      \ conversion to byte, then returns the enum constant corresponding to the resulting\
      \ numeric value. (0 -&gt; first value, 1 -&gt; second value, etc.)</dd>\n<dt>...string&#160;</dt>\n\
      <dd>Returns the decimal string representation of the int value. Negative values\
      \ are preceded by a minus sign, positive values do not have a sign in their\
      \ string representation.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      float_to...\">float to...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=10\" title=\"\
      Edit section: float to...\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>...bool&#160;</dt>\n<dd>Returns <i>False</i> for the float value 0.0\
      \ and <i>True</i> for any other value.</dd>\n<dt>...byte&#160;</dt>\n<dd>Float\
      \ to byte conversion has the same result as float to int conversion, followed\
      \ by int to byte conversion.</dd>\n<dt>...<a href=\"/Enum\" title=\"Enum\" class=\"\
      mw-redirect\">enum</a> types&#160;</dt>\n<dd>Performs conversion to byte, then\
      \ returns the enum constant corresponding to the resulting numeric value. (0\
      \ -&gt; first value, 1 -&gt; second value, etc.)</dd>\n<dt>...int&#160;</dt>\n\
      <dd>Float to int conversion truncates any digits after the decimal point. If\
      \ the value before the decimal point exceeds the range of valid int values,\
      \ the binary (or hexadecimal) representation of the value is truncated to the\
      \ least significant 32 bits (8 hex digits) and the resulting value is the two's\
      \ complement representation of the resulting int value. An important side effect\
      \ of this conversion is that the resulting int value might no longer resemble\
      \ the magnitude or even sign of the original float value! NaN and infinity values\
      \ are always converted to 0.</dd>\n<dt>...string&#160;</dt>\n<dd>Returns the\
      \ decimal string representation of the float value with a fixed number of digits\
      \ after the decimal point and as many digits before the decimal point as necessary.\
      \ Negative values are preceded by a minus sign. The number of digits after the\
      \ decimal point is hard-coded and varies from game to game. For example, <a\
      \ href=\"/UT\" title=\"UT\" class=\"mw-redirect\">UT</a> emits six digits, <a\
      \ href=\"/UT2003\" title=\"UT2003\" class=\"mw-redirect\">UT2003</a> and <a\
      \ href=\"/UT2004\" title=\"UT2004\" class=\"mw-redirect\">UT2004</a> only two.\
      \ For obvious reasons this greatly limits the accuracy for small values. Scientific\
      \ notation is not supported.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      name_to...\">name to...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=11\" title=\"\
      Edit section: name to...\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>...bool&#160;</dt>\n<dd>The result is <i>False</i> for the name value\
      \ <code>'None'</code> and <i>True</i> for any other name.</dd>\n<dt>...string&#160;</dt>\n\
      <dd>The result is the normalized string representation of the name value.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"string_to...\">string to...</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=12\" title=\"Edit section: string to...\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dt>...bool&#160;</dt>\n<dd>The result is <i>True</i> for the string \"true\"\
      , both in the English and localized version, as well as any string that, when\
      \ converted to int, stands for a number other than zero. Any other string results\
      \ in the value <i>False</i>.</dd>\n<dt>...byte&#160;</dt>\n<dd>Has the same\
      \ result as string to int conversion, followed by int to byte conversion.</dd>\n\
      <dt>...int&#160;</dt>\n<dd>Expects a decimal representation of the numeric value,\
      \ potentially preceded by a plus or minus sign. If the resulting number exceeds\
      \ the int range, the 32 least significant bits of its binary representation\
      \ are used. Binary, octal or hexadecimal string representations are not supported.\
      \ Leading spaces are ignored. Number recognition stops at the end of the string\
      \ or the first non-digit character.</dd>\n<dt>...name&#160;</dt>\n<dd>This conversion\
      \ is only allowed in <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\"\
      >Unreal Engine 3</a> and returns a name value that case-insensitively equals\
      \ the input string. If the name value was not used before, its capitalization\
      \ is the same as the original string's, otherwise capitalization may differ.</dd>\n\
      <dt>...rotator&#160;</dt>\n<dd>Expects a string containing at least two commas,\
      \ which are used to divide the string. All three parts are converted as described\
      \ for string to int conversion above. The first value becomes the rotator value's\
      \ Pitch component, the second the Yaw component and the third the Roll component.\
      \ If the string contains no or only one comma, only Pitch or Pitch and Yaw are\
      \ filled, while the remaining components stay 0.</dd>\n<dt>...vector&#160;</dt>\n\
      <dd>Expects a string containing at least two commas, which are used to divide\
      \ the string. All three parts are converted as described for string to float\
      \ conversion above. The values become the X, Y and Z components of the vector.\
      \ If the string contains no or only one comma, only the X or X and Y components\
      \ are filled, while the remaining components stay 0.</dd>\n</dl>\n<p>Note that\
      \ strings can't be converted to object references or name values (except for\
      \ Unreal Engine 3) using the typecasting syntax. To load or find an object reference\
      \ via the object's string name, use the <a href=\"/DynamicLoadObject()_function\"\
      \ title=\"DynamicLoadObject() function\">DynamicLoadObject() function</a>.</p>\n\
      <h3><span class=\"mw-headline\" id=\"rotator_to...\">rotator to...</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=13\" title=\"Edit section: rotator to...\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dt>...bool&#160;</dt>\n<dd>Returns <i>False</i> if Pitch, Yaw and Roll components\
      \ are zero, otherwise <i>True</i>.</dd>\n<dt>...string&#160;</dt>\n<dd>Returns\
      \ the string representations of the Pitch, Yaw and Roll components of the rotator,\
      \ separated by commas. Each component value is normalized to the range of 0\
      \ to 65535. If you want the string representations of actual integer values,\
      \ you need to typecast the components separately.</dd>\n<dt>...vector&#160;</dt>\n\
      <dd>Returns a <a href=\"http://en.wikipedia.org/wiki/unit_vector\" class=\"\
      extiw\" title=\"wp:unit vector\">unit vector</a> (i.e. VSize() == 1.0) pointing\
      \ in the direction described by the Pitch and Yaw components of the rotator\
      \ value. The zero rotator <code>rot(0,0,0)</code> corresponds to the unit vector\
      \ pointing in positive X-axis direction <code>vect(1.0,0.0,0.0)</code>. The\
      \ result is the same as the <a href=\"/Functions#out_parameter\" title=\"Functions\"\
      >out parameter</a> X of the GetAxes() function.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"vector_to...\">vector to...</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=14\"\
      \ title=\"Edit section: vector to...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>...bool&#160;</dt>\n<dd>Returns <i>False</i>\
      \ for the zero vector, otherwise <i>True</i>.</dd>\n<dt>...string&#160;</dt>\n\
      <dd>Returns the string representations of the X, Y and Z components, separated\
      \ by commas. Each component value is converted as described for the float to\
      \ string conversion above, so small values may suffer from rounding errors.</dd>\n\
      <dt>...rotator&#160;</dt>\n<dd>Returns a rotator whose Pitch and Yaw components\
      \ represent the same orientation as the vector. The Roll component is always\
      \ zero. Since the zero vector does not have any orientation, it is defined to\
      \ result in the zero rotator <code>rot(0,0,0)</code>.</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Object_to...\">Object to...</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=15\"\
      \ title=\"Edit section: Object to...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<dl>\n<dt>...bool&#160;</dt>\n<dd>Returns <i>False</i>\
      \ for the value <i>None</i> and <i>True</i> for any object reference.</dd>\n\
      <dt>...string&#160;</dt>\n<dd>Returns the string representation of the object.\
      \ In Unreal Engine 3 only the string representation of the object's name is\
      \ returned. Previous engine generations also include the object's package and\
      \ group(s), separated by dots.</dd>\n</dl>\n<p>These conversions also apply\
      \ to class limiter type values.</p>\n<h2><span class=\"mw-headline\" id=\"Reference_type_conversions\"\
      >Reference type conversions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=16\" title=\"\
      Edit section: Reference type conversions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Unlike primitive casts, type conversions between different\
      \ reference types do not modify the reference in any way. They only act as a\
      \ kind of \"gate\" for accessing objects so you don't accidently access variables\
      \ or call functions of objects that don't have those variables or functions.</p>\n\
      <p>There are two types of reference typecasts, dynamic casts and metacasts.\
      \ Dynamic casts are used to convert to a different type of object, and metacasts\
      \ are used to convert to a different type of class. Both have in common that\
      \ they don't actually change the reference being typecasted. That means, after\
      \ a successful dynamic or metacast, the result is still a reference to the same\
      \ object. However, if the typecast was not successful, the result is the null\
      \ reference <i>None</i>. This means, whenever you can't be 100% sure the typecast\
      \ was successful, you need to perform an additional check on the result to make\
      \ sure you're not accidently <a href=\"/Accessing_None\" title=\"Accessing None\"\
      \ class=\"mw-redirect\">accessing None</a>.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Dynamic_casts\">Dynamic casts</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=17\"\
      \ title=\"Edit section: Dynamic casts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A dynamic cast typecasts an object reference of a\
      \ certain class, for example Actor, to a subclass, for example Inventory. Attempting\
      \ to typecast to a class that is not a subclass of the original object reference\
      \ type will be refused by the compiler, either for being redundant (i.e. casting\
      \ to te same class or a parent class) or because the conversion would always\
      \ fail. Examples of conversions that will always fail include Pawn to Inventory\
      \ and Weapon to Ammo, or more generally all conversions between unrelated branches\
      \ of the class tree.</p>\n<h4><span class=\"mw-headline\" id=\"Examples\">Examples</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=18\" title=\"Edit section: Examples\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Controllers have\
      \ a reference to their currently controlled Pawn, but it's of type \"Pawn\"\
      . Now neither UT200x nor UT3 actually use pawns of type Pawn directly, instead\
      \ they use the class xPawn and UTPawn by default, which are (indirect) subclasses\
      \ of Pawn.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >local</span> <span class=\"kw9\">Controller</span> C;\n \n<span class=\"co1\"\
      >// getting Pawn's health:</span>\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>C.<span class=\"kw9\">Pawn</span>.<span class=\"me0\">Health</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// yup, no typecasting at all\
      \ - Health is defined in Pawn</span>\n \n<span class=\"co1\">// is the Pawn\
      \ currently invisible?</span>\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw9\">xPawn</span><span class=\"br0\">(</span>C.<span\
      \ class=\"kw9\">Pawn</span><span class=\"br0\">)</span>.<span class=\"me0\"\
      >bInvis</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>Vehicles\
      \ are Pawn subclasses as well:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> <span class=\"kw9\">Controller</span> C;\n\
      \ \n<span class=\"co1\">// currently driving a vehicle?</span>\n<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"kw9\">Vehicle</span><span\
      \ class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"co1\">// sitting in a turret seat?</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"kw9\"\
      >ONSWeaponPawn</span><span class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"co1\">// accessing the vehicle driver:</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"kw9\"\
      >Vehicle</span><span class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">Driver</span><span class=\"br0\"\
      >)</span>;\n \n<span class=\"co1\">// accessing vehicle health and driver health:</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span>C.<span class=\"kw9\"\
      >Pawn</span>.<span class=\"me0\">Health</span> <span class=\"sy0\">@</span>\
      \ <span class=\"kw9\">Vehicle</span><span class=\"br0\">(</span>C.<span class=\"\
      kw9\">Pawn</span><span class=\"br0\">)</span>.<span class=\"me0\">Driver</span>.<span\
      \ class=\"me0\">Health</span><span class=\"br0\">)</span>;\n \n<span class=\"\
      co1\">// accessing an Onslaught vehicle's active driver weapon (might change,\
      \ e.g. for Leviathan):</span>\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw9\">ONSVehicle</span><span class=\"br0\">(</span>C.<span\
      \ class=\"kw9\">Pawn</span><span class=\"br0\">)</span>.<span class=\"me0\"\
      >Weapons</span><span class=\"br0\">[</span><span class=\"kw9\">ONSVehicle</span><span\
      \ class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">ActiveWeapon</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span>;\n \n<span class=\"co1\">// Ready for some serious\
      \ typecasting action?</span>\n<span class=\"co1\">// The Hellbender side turret\
      \ stores the last fired sky mine projectile as combo target for bots.</span>\n\
      <span class=\"co1\">// Let's find its location, but with all the usual checks\
      \ to prevent Accessed Nones:</span>\n<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw9\">ONSWeaponPawn</span><span class=\"br0\">(</span>C.<span\
      \ class=\"kw9\">Pawn</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ ONSPRVSideGun<span class=\"br0\">(</span><span class=\"kw9\">ONSWeaponPawn</span><span\
      \ class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">Gun</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ ONSPRVSideGun<span class=\"br0\">(</span><span class=\"kw9\">ONSWeaponPawn</span><span\
      \ class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">Gun</span><span class=\"br0\">)</span>.<span class=\"\
      me0\">ComboTarget</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"kw3\">log</span><span class=\"br0\"\
      >(</span>ONSPRVSideGun<span class=\"br0\">(</span><span class=\"kw9\">ONSWeaponPawn</span><span\
      \ class=\"br0\">(</span>C.<span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">Gun</span><span class=\"br0\">)</span>.<span class=\"\
      me0\">ComboTarget</span>.<span class=\"kw7\">Location</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p><b>Note:</b> Usually you would avoid complex\
      \ typecasting expressions and instead store part in variables. But if you only\
      \ access things once, you might actually do it like in the last example above.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Metacasts\">Metacasts</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=19\"\
      \ title=\"Edit section: Metacasts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If the result of a type conversion is a <a href=\"\
      /Class_limiter\" title=\"Class limiter\" class=\"mw-redirect\">class limiter</a>\
      \ type, the conversion is also called metacast. Metacasts are not limited to\
      \ class references, but can also be used to convert from the most-generic type\
      \ Object. Class references are special object references after all. Like for\
      \ dynamic casts, metacasts between different class limiter types will only be\
      \ accepted by the compiler if the target limiter metaclass is a subclass of\
      \ the casted class limiter's metaclass. Typecasting to the same metaclass or\
      \ one of its parent classes is refused for being redundant and typecasting to\
      \ a metaclass in an unrelated branch of the class tree is refused because it\
      \ will always fail.</p>\n<h4><span class=\"mw-headline\" id=\"Examples_2\">Examples</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=20\" title=\"Edit section: Examples\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>The most common\
      \ use for metacasts is when loading classes with the <a href=\"/DynamicLoadObject()_function\"\
      \ title=\"DynamicLoadObject() function\">DynamicLoadObject() function</a>:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> class<span\
      \ class=\"sy0\">&lt;</span>Actor<span class=\"sy0\">&gt;</span> Actor<span class=\"\
      re0\">Class</span>&lt; SEMI &gt;\n \nActorClass <span class=\"sy0\">=</span>\
      \ class<span class=\"sy0\">&lt;</span>Actor<span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span class=\"\
      br0\">(</span>ActorClassName, <span class=\"kw1\">class</span><span class=\"\
      st0\">'Class'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span>ActorClass<span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>The above example only works\
      \ because of the metacast. DynamicLoadObject() only returns a reference of type\
      \ Object, so a typecast is definitely required. A simple dynamic cast to type\
      \ Class (which would actually be a metacast to <code>class&lt;Object&gt;</code>)will\
      \ not work here, because the Spawn() function requires an Actor class as its\
      \ parameter.</p>\n<p>Just for fun - weapon class roundtrip:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw3\">log</span><span class=\"br0\">(</span>class<span\
      \ class=\"sy0\">&lt;</span>WeaponDamageType<span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">(</span>class<span class=\"sy0\">&lt;</span>InstantFire<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'AssaultRifle'</span>.<span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">FireModeClass</span><span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span\
      \ class=\"kw1\">default</span>.<span class=\"kw9\">DamageType</span><span class=\"\
      br0\">)</span>.<span class=\"kw1\">default</span>.<span class=\"me0\">WeaponClass</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// logs XWeapons.AssaultRifle</span></pre></div>\n\
      </div>\n<p>What happened there? First we access the FireModeClass[0] of class\
      \ <a href=\"/UE2:AssaultRifle_(UT2004)\" title=\"UE2:AssaultRifle (UT2004)\"\
      >AssaultRifle</a>, which returns class <a href=\"/UE2:AssaultFire_(UT2004)\"\
      \ title=\"UE2:AssaultFire (UT2004)\">AssaultFire</a>. That's an <a href=\"/UE2:InstantFire_(UT2004)\"\
      \ title=\"UE2:InstantFire (UT2004)\">InstantFire</a> subclass and its DamageType\
      \ property returns class <a href=\"/UE2:DamTypeAssaultBullet_(UT2004)\" title=\"\
      UE2:DamTypeAssaultBullet (UT2004)\">DamTypeAssaultBullet</a>. That, in turn,\
      \ is a <a href=\"/UE2:WeaponDamageType_(UT2004)\" title=\"UE2:WeaponDamageType\
      \ (UT2004)\">WeaponDamageType</a> with its WeaponClass set to class AssaultRifle.\
      \ Note that all of these are classes, not instances, so we always need to access\
      \ default values via \"<code>.default.</code>\".</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Other_conversions\">Other conversions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Typecasting?section=21\"\
      \ title=\"Edit section: Other conversions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Some type conversions are not allowed by the compiler.\
      \ For example typecasting a string to a reference type will not work. If you\
      \ need to perform such conversions, you will have to go a different route.</p>\n\
      <h3><span class=\"mw-headline\" id=\"string_to_name\">string to name</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=22\" title=\"Edit section: string to name\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The\
      \ string to name typecast is not allowed before <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a>. Instead you have to rely on\
      \ the SetPropertyText() function and a name-type variable declared at the class\
      \ scope, optionally encapsulating the conversion in a function:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw5\">name</span>\
      \ NameConversionHack;\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">name</span> StringToName<span class=\"br0\">(</span><span class=\"kw5\"\
      >string</span> str<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw3\">SetPropertyText</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"NameConversionHack\"</span>, str<span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">return</span> NameConversionHack;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>So what's happening here is that you let the\
      \ engine parse your input string and assign it to a variable with the name you\
      \ specified. The usual conventions for name values apply, so capitalization\
      \ might get lost if the name was used before already.</p>\n<h3><span class=\"\
      mw-headline\" id=\"string_to_object_reference\">string to object reference</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=23\" title=\"Edit section: string to object\
      \ reference\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>To convert a string to an object or class reference, you can use the <a href=\"\
      /DynamicLoadObject()_function\" title=\"DynamicLoadObject() function\">DynamicLoadObject()\
      \ function</a>. This will attempt to load the object, if it does not already\
      \ exist. Such a load operation may require considerable amount of time if the\
      \ engine needs to load the containing package first. Remember that UnrealScript\
      \ is executed between rendering frames, so long load operations will cause the\
      \ game to stop until loading either finished successfully or failed. Note that\
      \ the DynamicLoadObject() function may emit a log warning if loading failed.\
      \ See the article on the <a href=\"/DynamicLoadObject()_function\" title=\"\
      DynamicLoadObject() function\">DynamicLoadObject() function</a> for more details.</p>\n\
      <p>As an alternative for already loaded objects you can use the FindObject()\
      \ function in Unreal Engine 2 and later. Its usage is similar to that of DynamicLoadObject(),\
      \ but it will never tryto load objects from disk if they do not already exist.</p>\n\
      <h3><span class=\"mw-headline\" id=\"string_to_struct\">string to struct</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Typecasting?section=24\" title=\"Edit section: string to struct\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>While\
      \ there is not direct support for typecasting strings to a struct value or vice\
      \ versa, you might want to try using the SetPropertyText() and GetPropertyText()\
      \ functions on class variables of the desired struct type. The string to struct\
      \ conversion would be similar to the <a href=\"#string_to_name\">string to name</a>\
      \ conversion mentioned above. The other way, struct to string, works as follows:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> YourStructType\
      \ StructVariable;\n \n<span class=\"kw1\">function</span> <span class=\"kw5\"\
      >string</span> YourStructToString<span class=\"br0\">(</span>YourStructType\
      \ val<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  StructVariable\
      \ <span class=\"sy0\">=</span> val; <span class=\"co1\">// GetPropertyText()\
      \ only operates on class variables!</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"kw3\">GetPropertyText</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"StructVariable\"</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>You can use this example to\
      \ find out the required string format for the string to struct conversion.</p>\n\
      <table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <strong class=\"selflink\">Typecasting</strong></td>\n</tr>\n<tr class=\"\
      navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\"\
      \ title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.250 seconds\nReal time usage: 0.254 seconds\nPreprocessor\
      \ visited node count: 314/1000000\nPreprocessor generated node count: 1101/1000000\n\
      Post‐expand include size: 10625/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   26.342      1 - -total\n100.00%   26.342      1 - Template:Navbox_unrealscript\n\
      \ 73.55%   19.374      1 - Template:Navbox\n 13.08%    3.445      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:23980-0!*!0!!en!*!*\
      \ and timestamp 20221118005911 and revision id 46372\n -->\n"
  categories:
  - sortkey: "Typecasting"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 104
    exists: true
    name: "UE2:WeaponDamageType (UT2004)"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Enum"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Coerce"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Accessing None"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Data type"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 104
    exists: true
    name: "UE2:AssaultRifle (UT2004)"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "UT2003"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 104
    exists: true
    name: "UE2:InstantFire (UT2004)"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "UT2004"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "UT"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Operator"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 104
    exists: true
    name: "UE2:AssaultFire (UT2004)"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 104
    exists: true
    name: "UE2:DamTypeAssaultBullet (UT2004)"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "DynamicLoadObject() function"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "If statement"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Explicit conversion syntax"
    number: "1"
    index: "1"
    fromtitle: "Typecasting"
    byteoffset: 591
    anchor: "Explicit_conversion_syntax"
  - toclevel: 1
    level: "2"
    line: "Implicit type conversion"
    number: "2"
    index: "2"
    fromtitle: "Typecasting"
    byteoffset: 1320
    anchor: "Implicit_type_conversion"
  - toclevel: 2
    level: "3"
    line: "Numeric types"
    number: "2.1"
    index: "3"
    fromtitle: "Typecasting"
    byteoffset: 1399
    anchor: "Numeric_types"
  - toclevel: 2
    level: "3"
    line: "Object and class limiter types"
    number: "2.2"
    index: "4"
    fromtitle: "Typecasting"
    byteoffset: 2456
    anchor: "Object_and_class_limiter_types"
  - toclevel: 2
    level: "3"
    line: "Parameters defined with <i>coerce</i>"
    number: "2.3"
    index: "5"
    fromtitle: "Typecasting"
    byteoffset: 3738
    anchor: "Parameters_defined_with_coerce"
  - toclevel: 1
    level: "2"
    line: "Primitive casts"
    number: "3"
    index: "6"
    fromtitle: "Typecasting"
    byteoffset: 4342
    anchor: "Primitive_casts"
  - toclevel: 2
    level: "3"
    line: "bool to..."
    number: "3.1"
    index: "7"
    fromtitle: "Typecasting"
    byteoffset: 5040
    anchor: "bool_to..."
  - toclevel: 2
    level: "3"
    line: "byte to..."
    number: "3.2"
    index: "8"
    fromtitle: "Typecasting"
    byteoffset: 5295
    anchor: "byte_to..."
  - toclevel: 2
    level: "3"
    line: "int to..."
    number: "3.3"
    index: "9"
    fromtitle: "Typecasting"
    byteoffset: 5976
    anchor: "int_to..."
  - toclevel: 2
    level: "3"
    line: "float to..."
    number: "3.4"
    index: "10"
    fromtitle: "Typecasting"
    byteoffset: 6988
    anchor: "float_to..."
  - toclevel: 2
    level: "3"
    line: "name to..."
    number: "3.5"
    index: "11"
    fromtitle: "Typecasting"
    byteoffset: 8467
    anchor: "name_to..."
  - toclevel: 2
    level: "3"
    line: "string to..."
    number: "3.6"
    index: "12"
    fromtitle: "Typecasting"
    byteoffset: 8677
    anchor: "string_to..."
  - toclevel: 2
    level: "3"
    line: "rotator to..."
    number: "3.7"
    index: "13"
    fromtitle: "Typecasting"
    byteoffset: 10754
    anchor: "rotator_to..."
  - toclevel: 2
    level: "3"
    line: "vector to..."
    number: "3.8"
    index: "14"
    fromtitle: "Typecasting"
    byteoffset: 11579
    anchor: "vector_to..."
  - toclevel: 2
    level: "3"
    line: "Object to..."
    number: "3.9"
    index: "15"
    fromtitle: "Typecasting"
    byteoffset: 12175
    anchor: "Object_to..."
  - toclevel: 1
    level: "2"
    line: "Reference type conversions"
    number: "4"
    index: "16"
    fromtitle: "Typecasting"
    byteoffset: 12588
    anchor: "Reference_type_conversions"
  - toclevel: 2
    level: "3"
    line: "Dynamic casts"
    number: "4.1"
    index: "17"
    fromtitle: "Typecasting"
    byteoffset: 13568
    anchor: "Dynamic_casts"
  - toclevel: 3
    level: "4"
    line: "Examples"
    number: "4.1.1"
    index: "18"
    fromtitle: "Typecasting"
    byteoffset: 14133
    anchor: "Examples"
  - toclevel: 2
    level: "3"
    line: "Metacasts"
    number: "4.2"
    index: "19"
    fromtitle: "Typecasting"
    byteoffset: 15798
    anchor: "Metacasts"
  - toclevel: 3
    level: "4"
    line: "Examples"
    number: "4.2.1"
    index: "20"
    fromtitle: "Typecasting"
    byteoffset: 16494
    anchor: "Examples_2"
  - toclevel: 1
    level: "2"
    line: "Other conversions"
    number: "5"
    index: "21"
    fromtitle: "Typecasting"
    byteoffset: 17911
    anchor: "Other_conversions"
  - toclevel: 2
    level: "3"
    line: "string to name"
    number: "5.1"
    index: "22"
    fromtitle: "Typecasting"
    byteoffset: 18137
    anchor: "string_to_name"
  - toclevel: 2
    level: "3"
    line: "string to object reference"
    number: "5.2"
    index: "23"
    fromtitle: "Typecasting"
    byteoffset: 18815
    anchor: "string_to_object_reference"
  - toclevel: 2
    level: "3"
    line: "string to struct"
    number: "5.3"
    index: "24"
    fromtitle: "Typecasting"
    byteoffset: 19714
    anchor: "string_to_struct"
  displaytitle: "Typecasting"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/unit_vector"
    name: "wp:unit vector"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/two%27s_complement"
    name: "wp:two's complement"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/object-oriented_programming"
    name: "wp:object-oriented programming"
  wikitext:
    text: "'''Typecasting''' or '''type conversion''' is the concept of converting\
      \ one [[data type]] into another, for example the turning the string \"1\" into\
      \ the numeric value 1.\n\nType conversions from or to primitive data types,\
      \ including conversions between the struct types [[vector]] and [[rotator]]\
      \ and from a reference type, are called '''primitive casts'''. Type conversions\
      \ between different classes of object references are called '''dynamic casts'''.\
      \ Type conversions between different [[class limiter]] types or from an object\
      \ reference to a class limiter type are called '''metacasts'''.\n\n==Explicit\
      \ conversion syntax==\nTo explicitly convert a value of one type to another,\
      \ use the following syntax:\n ''typename'''''('''''value''''')'''\nTypename\
      \ is the type to convert the value to. As you can see, this syntax looks like\
      \ a function call and is a good reason why your [[functions]] should not have\
      \ the same name as any built-in or user-defined types. If a function and a type\
      \ of the same name are found, the function call takes precedence over the typecast.\n\
      \n'''Note:''' The compiler will throw an error message if the typecast is redundant,\
      \ for example because the target type is identical to the value's type, or will\
      \ always fail, for example when casting between classes from unrelated branches\
      \ of the class tree.\n\n==Implicit type conversion==\nCertain type conversions\
      \ are done automatically.\n\n===Numeric types===\nThe types ''int'', ''float''\
      \ and ''byte'' are automatically converted into each other when an assignment,\
      \ [[operator]] or function call require it.\nEspecially for byte values this\
      \ is essential, because only the increment, decrement and combined assignment\
      \ operators are defined for the type ''byte''. All other operators, such as\
      \ + or - actually are ''int'' operators returning ''int'' values. The reason\
      \ why you can still use them as expected is implicit type conversion:\n<uscript>\n\
      local byte A, B, C;\n\nC = A + B; // actually compiled as: C = byte(int(A) +\
      \ int(B));\n</uscript>\nKeep in mind that these implicit conversions have the\
      \ same effects like explicit conversions. The *= and /= operators for the ''int''\
      \ type actually expect a ''float'' value as the second operand, so <code>x *=\
      \ 2</code> is not exactly the same as <code>x = x * 2</code>, because the the\
      \ latter performs actual integer multiplication, while the former internally\
      \ performs floating point multiplication, which may produce rounding errors\
      \ for very large values.\n\n===Object and class limiter types===\nAnother kind\
      \ of implicit type conversion happens when assigning an object reference of\
      \ a certain class to a variable whose type is a parent class of the object's\
      \ class. This is a direct consequence of [[wp:object-oriented programming|object-oriented\
      \ programming]] and does not alter the referenced object itself in any way,\
      \ only the ''view'' on the object through the reference. This kind of conversion\
      \ is done implicitly because it is a common task and will never fail. In fact,\
      \ the compiler ''refuses'' any explicit type conversion to a super class because\
      \ this is how OOP works.\n\nSimilarly, a [[class limiter]] type of a certain\
      \ metaclass is implicitly converted to a class limiter type whose metaclass\
      \ is a parent class of the first type's metaclass. Like with object typecasts,\
      \ the compiler actually refuses explicit typecasts to a class limiter for a\
      \ parent class.\n\nFor engine implementations that support [[interfaces]], object\
      \ references can be implicitly converted to all implemented interfaces when\
      \ assigning the reference to a variable of the interface type. Note that this\
      \ does ''not'' apply to class limiters, those strictly follow the class hierarchy\
      \ without respecting the \"cross connections\" created by implementing interfaces!\n\
      \n===Parameters defined with ''coerce''===\n[[Functions]] and [[operators]]\
      \ can apply the keyword [[coerce]] to their parameter declarations to instruct\
      \ the compiler to automatically perform type conversion on values passed when\
      \ the function or operator is called. That is only possible if an explicit type\
      \ conversion exists from the value's type to the parameter's type. See the following\
      \ section for a list of possible type conversions.\n\nUsually the ''coerce''\
      \ keyword is only used for [[string]] parameters. It is widely used in the built-in\
      \ string functions and operators and in the logging functions.\n\n==Primitive\
      \ casts==\nNot all possible combinations of type conversions can actually be\
      \ performed. For example, converting a floating point value to a class or a\
      \ struct value to a name does not provide any meaningful result. This section\
      \ lists all built-in primitive casts. These conversions will happen automatically\
      \ when passing values to function parameters declared with the [[coerce]] modifier,\
      \ unless the conversion requires casting to an [[enum]] type.\n\nNote that it\
      \ might be a good idea to specify literals of the target type directly instead\
      \ of typecasting from a different type. For example <code>rotator(vect(0.0,1.0,0.0))</code>\
      \ should be written as <code>rot(0,16384,0)</code> instead.\n\n===bool to...===\n\
      ; ...byte, int or float : Returns 1 (or 1.0) for the value ''True'' and 0 (or\
      \ 0.0) for the value ''False''.\n; ...string : Returns the localized version\
      \ of the strings \"True\" or \"False\" for the values ''True'' and ''False''\
      \ respectively.\n\n===byte to...===\n; ...bool : Returns ''False'' for the byte\
      \ value 0 and ''True'' for any other value.\n; ...[[enum]] types : Returns the\
      \ enum constant corresponding to the numeric value. (0 -> first value, 1 ->\
      \ second value, etc.)\n; ...float : Byte to float conversion is also lossless\
      \ and returns a float with the same numeric value as the byte value.\n; ...int\
      \ : Byte to int conversion is lossless and simply returns an int with the same\
      \ numeric value as the byte value.\n; ...string : Returns the decimal string\
      \ representation of the byte value.\n\nAll byte conversions also apply to values\
      \ of enum types, with the first enum constant corresponding to 0, second constant\
      \ to 1, etc.\n\n===int to...===\n; ...bool : Returns ''False'' for the int value\
      \ 0 and ''True'' for any other value.\n; ...byte : Int to byte conversion truncates\
      \ the binary representation of the int value to the least significant eight\
      \ bits. Negative int values are stored in [[wp:two's complement|two's complement]],\
      \ so for example converting -1 to byte results in the value 255.\n; ...float\
      \ : Int to float conversion returns the nearest possible float value. This is\
      \ unproblematic for values between -16777216 (0xFF000000) and +16777216 (0x1000000),\
      \ but for larger positive or smaller negative values the float data type is\
      \ not precise enough, so rounding will occur.\n; ...[[enum]] types : Performs\
      \ conversion to byte, then returns the enum constant corresponding to the resulting\
      \ numeric value. (0 -> first value, 1 -> second value, etc.)\n; ...string :\
      \ Returns the decimal string representation of the int value. Negative values\
      \ are preceded by a minus sign, positive values do not have a sign in their\
      \ string representation.\n\n===float to...===\n; ...bool : Returns ''False''\
      \ for the float value 0.0 and ''True'' for any other value.\n; ...byte : Float\
      \ to byte conversion has the same result as float to int conversion, followed\
      \ by int to byte conversion.\n; ...[[enum]] types : Performs conversion to byte,\
      \ then returns the enum constant corresponding to the resulting numeric value.\
      \ (0 -> first value, 1 -> second value, etc.)\n; ...int : Float to int conversion\
      \ truncates any digits after the decimal point. If the value before the decimal\
      \ point exceeds the range of valid int values, the binary (or hexadecimal) representation\
      \ of the value is truncated to the least significant 32 bits (8 hex digits)\
      \ and the resulting value is the two's complement representation of the resulting\
      \ int value. An important side effect of this conversion is that the resulting\
      \ int value might no longer resemble the magnitude or even sign of the original\
      \ float value! NaN and infinity values are always converted to 0.\n; ...string\
      \ : Returns the decimal string representation of the float value with a fixed\
      \ number of digits after the decimal point and as many digits before the decimal\
      \ point as necessary. Negative values are preceded by a minus sign. The number\
      \ of digits after the decimal point is hard-coded and varies from game to game.\
      \ For example, [[UT]] emits six digits, [[UT2003]] and [[UT2004]] only two.\
      \ For obvious reasons this greatly limits the accuracy for small values. Scientific\
      \ notation is not supported.\n\n===name to...===\n; ...bool : The result is\
      \ ''False'' for the name value <code>'None'</code> and ''True'' for any other\
      \ name.\n; ...string : The result is the normalized string representation of\
      \ the name value.\n\n===string to...===\n; ...bool : The result is ''True''\
      \ for the string \"true\", both in the English and localized version, as well\
      \ as any string that, when converted to int, stands for a number other than\
      \ zero. Any other string results in the value ''False''.\n; ...byte : Has the\
      \ same result as string to int conversion, followed by int to byte conversion.\n\
      ; ...int : Expects a decimal representation of the numeric value, potentially\
      \ preceded by a plus or minus sign. If the resulting number exceeds the int\
      \ range, the 32 least significant bits of its binary representation are used.\
      \ Binary, octal or hexadecimal string representations are not supported. Leading\
      \ spaces are ignored. Number recognition stops at the end of the string or the\
      \ first non-digit character.\n; ...name : This conversion is only allowed in\
      \ [[Unreal Engine 3]] and returns a name value that case-insensitively equals\
      \ the input string. If the name value was not used before, its capitalization\
      \ is the same as the original string's, otherwise capitalization may differ.\n\
      ; ...rotator : Expects a string containing at least two commas, which are used\
      \ to divide the string. All three parts are converted as described for string\
      \ to int conversion above. The first value becomes the rotator value's Pitch\
      \ component, the second the Yaw component and the third the Roll component.\
      \ If the string contains no or only one comma, only Pitch or Pitch and Yaw are\
      \ filled, while the remaining components stay 0.\n; ...vector : Expects a string\
      \ containing at least two commas, which are used to divide the string. All three\
      \ parts are converted as described for string to float conversion above. The\
      \ values become the X, Y and Z components of the vector. If the string contains\
      \ no or only one comma, only the X or X and Y components are filled, while the\
      \ remaining components stay 0.\nNote that strings can't be converted to object\
      \ references or name values (except for Unreal Engine 3) using the typecasting\
      \ syntax. To load or find an object reference via the object's string name,\
      \ use the [[DynamicLoadObject() function]].\n\n===rotator to...===\n; ...bool\
      \ : Returns ''False'' if Pitch, Yaw and Roll components are zero, otherwise\
      \ ''True''.\n; ...string : Returns the string representations of the Pitch,\
      \ Yaw and Roll components of the rotator, separated by commas. Each component\
      \ value is normalized to the range of 0 to 65535. If you want the string representations\
      \ of actual integer values, you need to typecast the components separately.\n\
      ; ...vector : Returns a [[wp:unit vector|unit vector]] (i.e. VSize() == 1.0)\
      \ pointing in the direction described by the Pitch and Yaw components of the\
      \ rotator value. The zero rotator <code>rot(0,0,0)</code> corresponds to the\
      \ unit vector pointing in positive X-axis direction <code>vect(1.0,0.0,0.0)</code>.\
      \ The result is the same as the [[Functions#out_parameter|out parameter]] X\
      \ of the GetAxes() function.\n\n===vector to...===\n; ...bool : Returns ''False''\
      \ for the zero vector, otherwise ''True''.\n; ...string : Returns the string\
      \ representations of the X, Y and Z components, separated by commas. Each component\
      \ value is converted as described for the float to string conversion above,\
      \ so small values may suffer from rounding errors.\n; ...rotator : Returns a\
      \ rotator whose Pitch and Yaw components represent the same orientation as the\
      \ vector. The Roll component is always zero. Since the zero vector does not\
      \ have any orientation, it is defined to result in the zero rotator <code>rot(0,0,0)</code>.\n\
      \n===Object to...===\n; ...bool : Returns ''False'' for the value ''None'' and\
      \ ''True'' for any object reference.\n; ...string : Returns the string representation\
      \ of the object. In Unreal Engine 3 only the string representation of the object's\
      \ name is returned. Previous engine generations also include the object's package\
      \ and group(s), separated by dots.\nThese conversions also apply to class limiter\
      \ type values.\n\n==Reference type conversions==\nUnlike primitive casts, type\
      \ conversions between different reference types do not modify the reference\
      \ in any way. They only act as a kind of \"gate\" for accessing objects so you\
      \ don't accidently access variables or call functions of objects that don't\
      \ have those variables or functions.\n\nThere are two types of reference typecasts,\
      \ dynamic casts and metacasts. Dynamic casts are used to convert to a different\
      \ type of object, and metacasts are used to convert to a different type of class.\
      \ Both have in common that they don't actually change the reference being typecasted.\
      \ That means, after a successful dynamic or metacast, the result is still a\
      \ reference to the same object. However, if the typecast was not successful,\
      \ the result is the null reference ''None''. This means, whenever you can't\
      \ be 100% sure the typecast was successful, you need to perform an additional\
      \ check on the result to make sure you're not accidently [[accessing None]].\n\
      \n===Dynamic casts===\nA dynamic cast typecasts an object reference of a certain\
      \ class, for example Actor, to a subclass, for example Inventory.\nAttempting\
      \ to typecast to a class that is not a subclass of the original object reference\
      \ type will be refused by the compiler, either for being redundant (i.e. casting\
      \ to te same class or a parent class) or because the conversion would always\
      \ fail. Examples of conversions that will always fail include Pawn to Inventory\
      \ and Weapon to Ammo, or more generally all conversions between unrelated branches\
      \ of the class tree.\n\n====Examples====\nControllers have a reference to their\
      \ currently controlled Pawn, but it's of type \"Pawn\". Now neither UT200x nor\
      \ UT3 actually use pawns of type Pawn directly, instead they use the class xPawn\
      \ and UTPawn by default, which are (indirect) subclasses of Pawn. \n<uscript>\n\
      local Controller C;\n\n// getting Pawn's health:\nlog(C.Pawn.Health); // yup,\
      \ no typecasting at all - Health is defined in Pawn\n\n// is the Pawn currently\
      \ invisible?\nlog(xPawn(C.Pawn).bInvis);\n</uscript>\nVehicles are Pawn subclasses\
      \ as well:\n<uscript>\nlocal Controller C;\n\n// currently driving a vehicle?\n\
      log(Vehicle(C.Pawn) != None);\n\n// sitting in a turret seat?\nlog(ONSWeaponPawn(C.Pawn)\
      \ != None);\n\n// accessing the vehicle driver:\nlog(Vehicle(C.Pawn).Driver);\n\
      \n// accessing vehicle health and driver health:\nlog(C.Pawn.Health @ Vehicle(C.Pawn).Driver.Health);\n\
      \n// accessing an Onslaught vehicle's active driver weapon (might change, e.g.\
      \ for Leviathan):\nlog(ONSVehicle(C.Pawn).Weapons[ONSVehicle(C.Pawn).ActiveWeapon]);\n\
      \n// Ready for some serious typecasting action?\n// The Hellbender side turret\
      \ stores the last fired sky mine projectile as combo target for bots.\n// Let's\
      \ find its location, but with all the usual checks to prevent Accessed Nones:\n\
      if (ONSWeaponPawn(C.Pawn) != None && ONSPRVSideGun(ONSWeaponPawn(C.Pawn).Gun)\
      \ != None && ONSPRVSideGun(ONSWeaponPawn(C.Pawn).Gun).ComboTarget != None)\n\
      \  log(ONSPRVSideGun(ONSWeaponPawn(C.Pawn).Gun).ComboTarget.Location);\n</uscript>\n\
      '''Note:''' Usually you would avoid complex typecasting expressions and instead\
      \ store part in variables. But if you only access things once, you might actually\
      \ do it like in the last example above.\n\n===Metacasts===\nIf the result of\
      \ a type conversion is a [[class limiter]] type, the conversion is also called\
      \ metacast. Metacasts are not limited to class references, but can also be used\
      \ to convert from the most-generic type Object. Class references are special\
      \ object references after all. Like for dynamic casts, metacasts between different\
      \ class limiter types will only be accepted by the compiler if the target limiter\
      \ metaclass is a subclass of the casted class limiter's metaclass. Typecasting\
      \ to the same metaclass or one of its parent classes is refused for being redundant\
      \ and typecasting to a metaclass in an unrelated branch of the class tree is\
      \ refused because it will always fail.\n\n====Examples====\nThe most common\
      \ use for metacasts is when loading classes with the [[DynamicLoadObject() function]]:\n\
      <uscript>\nlocal class<Actor> ActorClass;\n\nActorClass = class<Actor>(DynamicLoadObject(ActorClassName,\
      \ class'Class'));\nSpawn(ActorClass);\n</uscript>\nThe above example only works\
      \ because of the metacast. DynamicLoadObject() only returns a reference of type\
      \ Object, so a typecast is definitely required. A simple dynamic cast to type\
      \ Class (which would actually be a metacast to <code>class<Object></code>)will\
      \ not work here, because the Spawn() function requires an Actor class as its\
      \ parameter.\n\nJust for fun - weapon class roundtrip:\n<uscript>\nlog(class<WeaponDamageType>(class<InstantFire>(class'AssaultRifle'.default.FireModeClass[0]).default.DamageType).default.WeaponClass);\
      \ // logs XWeapons.AssaultRifle\n</uscript>\nWhat happened there? First we access\
      \ the FireModeClass[0] of class [[UE2:AssaultRifle (UT2004)|AssaultRifle]],\
      \ which returns class [[UE2:AssaultFire (UT2004)|AssaultFire]]. That's an [[UE2:InstantFire\
      \ (UT2004)|InstantFire]] subclass and its DamageType property returns class\
      \ [[UE2:DamTypeAssaultBullet (UT2004)|DamTypeAssaultBullet]]. That, in turn,\
      \ is a [[UE2:WeaponDamageType (UT2004)|WeaponDamageType]] with its WeaponClass\
      \ set to class AssaultRifle. Note that all of these are classes, not instances,\
      \ so we always need to access default values via \"<code>.default.</code>\"\
      .\n\n==Other conversions==\nSome type conversions are not allowed by the compiler.\
      \ For example typecasting a string to a reference type will not work. If you\
      \ need to perform such conversions, you will have to go a different route.\n\
      \n===string to name===\nThe string to name typecast is not allowed before [[Unreal\
      \ Engine 3]]. Instead you have to rely on the SetPropertyText() function and\
      \ a name-type variable declared at the class scope, optionally encapsulating\
      \ the conversion in a function:\n<uscript>\nvar name NameConversionHack;\n\n\
      function name StringToName(string str)\n{\n  SetPropertyText(\"NameConversionHack\"\
      , str);\n  return NameConversionHack;\n}\n</uscript>\nSo what's happening here\
      \ is that you let the engine parse your input string and assign it to a variable\
      \ with the name you specified. The usual conventions for name values apply,\
      \ so capitalization might get lost if the name was used before already.\n\n\
      ===string to object reference===\nTo convert a string to an object or class\
      \ reference, you can use the [[DynamicLoadObject() function]]. This will attempt\
      \ to load the object, if it does not already exist. Such a load operation may\
      \ require considerable amount of time if the engine needs to load the containing\
      \ package first. Remember that UnrealScript is executed between rendering frames,\
      \ so long load operations will cause the game to stop until loading either finished\
      \ successfully or failed. Note that the DynamicLoadObject() function may emit\
      \ a log warning if loading failed. See the article on the [[DynamicLoadObject()\
      \ function]] for more details.\n\nAs an alternative for already loaded objects\
      \ you can use the FindObject() function in Unreal Engine 2 and later. Its usage\
      \ is similar to that of DynamicLoadObject(), but it will never tryto load objects\
      \ from disk if they do not already exist.\n\n===string to struct===\nWhile there\
      \ is not direct support for typecasting strings to a struct value or vice versa,\
      \ you might want to try using the SetPropertyText() and GetPropertyText() functions\
      \ on class variables of the desired struct type. The string to struct conversion\
      \ would be similar to the [[#string to name|string to name]] conversion mentioned\
      \ above. The other way, struct to string, works as follows:\n<uscript>\nvar\
      \ YourStructType StructVariable;\n\nfunction string YourStructToString(YourStructType\
      \ val)\n{\n  StructVariable = val; // GetPropertyText() only operates on class\
      \ variables!\n  return GetPropertyText(\"StructVariable\");\n}\n</uscript>\n\
      You can use this example to find out the required string format for the string\
      \ to struct conversion.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 46372
name: "Typecasting"
revision:
  revid: 46372
  parentid: 44346
  user: "SeriousBarbie"
  timestamp: 1475813974.000000000
  comment: "set red link to correction destination"
timestamp: 1668754786.932856000
