---
parse:
  title: "Legacy:Assault Mapping Tutorial/Creating A Destroyable Objective"
  text:
    text: "<hr />\n<p>This page is a section of the <a href=\"/Legacy:Assault_Mapping_Tutorial\"\
      \ title=\"Legacy:Assault Mapping Tutorial\">Assault Mapping Tutorial</a>. If\
      \ you have arrived here from some other place, this page will likely make more\
      \ sense if you start at the above link and read the tutorial through from beginning\
      \ to end.</p>\n<p><b>Previous Section: <a href=\"/Legacy:Assault_Mapping_Tutorial/Getting_Started\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Getting Started\">Legacy:Assault Mapping\
      \ Tutorial/Getting Started</a></b></p>\n<p><b>Next Section: <a href=\"/Legacy:Assault_Mapping_Tutorial/PlayerStarts_And_The_PlayerSpawnManager\"\
      \ title=\"Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager\"\
      >Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager</a></b></p>\n\
      <hr />\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Creating_a_Destroyable_Objective\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Creating a Destroyable\
      \ Objective</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #DestroyableObjective_SM\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">DestroyableObjective_SM</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"\
      ><a href=\"#Explosions\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Explosions</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"\
      #Comments:\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Comments:</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Creating_a_Destroyable_Objective\"\
      >Creating a Destroyable Objective</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective?section=1\"\
      \ title=\"Edit section: Creating a Destroyable Objective\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>As you might notice from the\
      \ map creation directions, or from looking at the map itself, this base isn't\
      \ that hard to get into. It doesn't even have a door! Our first objective in\
      \ this tutorial, therefore, is going to be a destroyable door, that will (try\
      \ to) protect the entrance to the stronghold.</p>\n<p>There are a couple of\
      \ different ways we can do destroyable objectives, but the one which is almost\
      \ always what we'll want to use is a <a href=\"/Legacy:DestroyableObjective_SM\"\
      \ title=\"Legacy:DestroyableObjective SM\">DestroyableObjective_SM</a>, which\
      \ uses the flexibility of static meshes to automatically adjust its representation\
      \ within the world it inhabits.</p>\n<h2><span class=\"mw-headline\" id=\"DestroyableObjective_SM\"\
      >DestroyableObjective_SM</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective?section=2\"\
      \ title=\"Edit section: DestroyableObjective SM\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The first step is to <a href=\"/Legacy:Add_An_Actor\"\
      \ title=\"Legacy:Add An Actor\">Add an Actor</a>&gt;&gt;NavigationPoint&gt;&gt;JumpDest&gt;&gt;JumpSpot&gt;&gt;GameObjective&gt;&gt;DestroyableObjective&gt;&gt;DestroyableObjective_SM.\
      \ This actor combines several different functions in one convenient package:</p>\n\
      <ul>\n<li>It's a <a href=\"/Legacy:GameObjective\" title=\"Legacy:GameObjective\"\
      >GameObjective</a>. GameObjectives do several things:\n<ul>\n<li>They have text\
      \ strings which display on the HUD directing people to attack or defend them\
      \ when the time comes.</li>\n<li>They automatically draw the little flashing\
      \ HUD displays indicating where they are, how close to completion they are,\
      \ and whether they're under attack at the moment.</li>\n<li>Bots automatically\
      \ know when GameObjectives need to be attacked or defended, and will act accordingly.</li>\n\
      </ul>\n</li>\n<li>The DestroyableObjective_SM shows a static mesh, just like\
      \ a <a href=\"/Legacy:StaticMesh\" title=\"Legacy:StaticMesh\" class=\"mw-redirect\"\
      >StaticMesh</a> actor does. Moreover, when this objective is the active one,\
      \ this mesh will flash on the screen in addition to the HUD icon, showing players\
      \ where they should be shooting.</li>\n<li>When the objective is destroyed,\
      \ the DestroyableObjective_SM will also automatically change its static mesh\
      \ to another one (generally, one that looks like a blown-up version of whatever\
      \ it's supposed to be).</li>\n</ul>\n<p>As you can see, the actor already does\
      \ most of the work for us, there are only a few things we'll need to fiddle\
      \ with. First, we'll deal with the properties which apply to any objective you\
      \ might place in your map. Open the properties window for the new actor and\
      \ <a href=\"/Legacy:Set_The_Following_Properties\" title=\"Legacy:Set The Following\
      \ Properties\">set the following properties</a>:</p>\n<dl>\n<dt>Events-&gt;Tag\
      \ = BaseDoor</dt>\n<dd>This property is used in many places, so you should generally\
      \ make it something descriptive and easy to remember.</dd>\n<dt>GameObjective-&gt;ObjectiveName\
      \ = the Base Door</dt>\n<dd>This is used to print location messages, so make\
      \ it something that makes sense to a human.</dd>\n<dt>GameObjective-&gt;LocationPrefix\
      \ = Near</dt>\n<dd>This is the text that's printed in front of the ObjectiveName\
      \ when describing where somebody is (i.e. \"Near the Base Door\").</dd>\n<dt>GameObjective-&gt;LocationPostfix\
      \ =&#160;</dt>\n<dd>This is the text that's printed after the ObjectiveName\
      \ in location descriptions (for example, we might put \"area\" for \"the Base\
      \ Door area\"). We'll just leave it at the default empty string.</dd>\n<dt>GameObjective-&gt;Score\
      \ = 10</dt>\n<dd>How many points are awarded to the attacker who completes this\
      \ objective?</dd>\n<dt>Assault-&gt;DrawDistThresHold = 0</dt>\n<dd>How close\
      \ does an attacker have to be for the game to show the crosshairs and health\
      \ bar of this objective (when it's visible) instead of the triangular icon?\
      \ (0 means it's always shown as soon as the objective becomes visible, no matter\
      \ how far away it is).</dd>\n<dt>Assault-&gt;Objective_Info_Attacker = Penetrate\
      \ the Base's Outer Defenses</dt>\n<dd>The message shown on the screen to attackers\
      \ when this is the active objective.</dd>\n<dt>Assault-&gt;Objective_Info_Defender\
      \ = Prevent the Attackers from Infiltrating the Base</dt>\n<dd>The message shown\
      \ to defenders when this is the active objective.</dd>\n<dt>Assault-&gt;ObjectiveDescription\
      \ = Destroy the door to enter the base</dt>\n<dd>A brief message of what people\
      \ need to do to accomplish this goal.</dd>\n<dt>GameObjective-&gt;DestructionMessage\
      \ = Base Outer Defenses Breached!</dt>\n<dd>The message displayed to both sides\
      \ when the objective has been completed.</dd>\n</dl>\n<p>Now for the bits which\
      \ are specific to the DestroyableObjective_SM class. You've probably already\
      \ noticed that this actor starts out with a default untextured box mesh, which\
      \ we will want to change. For our purposes, we'll just borrow from RobotFactory,\
      \ which has a nice door mesh we can use (and more importantly, a destroyed version\
      \ we can use for the destroyed mesh). This mesh can be found in the Plutonic_BP2_static\
      \ package as Door.FactoryGateDoor, so go into the DestroyableObjective_SM actor's\
      \ properties and <a href=\"/Legacy:Set_The_Resource_Property\" title=\"Legacy:Set\
      \ The Resource Property\">set the resource property</a> Display-&gt;StaticMesh\
      \ to Plutonic_BP2_static.Door.FactoryGateDoor.</p>\n<p>As you might notice,\
      \ the door from RobotFactory is a bit large for our purposes, so we'll scale\
      \ it down to about half size by setting the Display-&gt;DrawScale property to\
      \ 0.55. Now we can position it into place over the entrance to the base. It's\
      \ still a bit taller than we need, but that's ok. Just move it down so the top\
      \ of the door meets the top of the door frame, and we'll let the extra stay\
      \ hidden under the floor.</p>\n<p>Next, we need to set the destroyed version.\
      \ The destroyed version of the factory door from RobotFactory is Plutonic_BP2_static.Factory.door_destroyed,\
      \ so in the DestroyableObjective_SM Properties, simply <a href=\"/Legacy:Set_The_Resource_Property\"\
      \ title=\"Legacy:Set The Resource Property\">set the resource property</a> DestroyableObjective_SM-&gt;DestroyedStaticMesh\
      \ to Plutonic_BP2_static.Factory.door_destroyed. That was easy, wasn't it?</p>\n\
      <p>Now would be a good time to check to make sure that our door will look right\
      \ when it's been blown up. When the destroyable objective is destroyed, it simply\
      \ changes the Display-&gt;StaticMesh it's using to the value of DestroyableObjective_SM-&gt;DestroyedStaticMesh\
      \ instead, so we can do the same thing in the editor to check how it will look.\
      \ Just temporarily set Display-&gt;StaticMesh to Plutonic_BP2_static.Factory.door_destroyed\
      \ and take a look. The particularly astute here will notice that something doesn't\
      \ look right. The destroyed door actually doesn't line up the same way as the\
      \ normal one does.</p>\n<p>Did we do something wrong? Nope. Believe it or not,\
      \ Epic screwed up, and if you look closely at RobotFactory while you're playing\
      \ it, it has the same problem. The origin of the destroyed door mesh is at the\
      \ bottom, but the origin of the regular door mesh is in the center, so they\
      \ don't line up. This illustrates an important point when designing meshes for\
      \ destroyable objectives: Make sure their origins match up, because you can't\
      \ adjust this in the actor. Also note that since the actor just changes the\
      \ setting for the Display-&gt;StaticMesh property when it gets destroyed, all\
      \ of the other settings will be applied to the different mesh as well. This\
      \ means, for example, that any skins you use in Display-&gt;Skins to change\
      \ the appearance of the original mesh will also be applied to the destroyed\
      \ mesh when it gets put in place, so if you're going to use your own skins,\
      \ you'll need to make sure that the two meshes map their textures in compatible\
      \ ways.</p>\n<p>In any case, the glitch with the destroyed door mesh is annoying,\
      \ but we'll leave it for now. For a more polished level, you'll probably want\
      \ to make sure things like this are fixed (by creating your own meshes correctly,\
      \ or by loading up the broken mesh in a 3D modeller, adjusting the origin, and\
      \ saving the fixed version in your own package to use instead (Remember: as\
      \ tempting as it may be, <a href=\"/Legacy:Do_Not_Alter_Default_Packages\" title=\"\
      Legacy:Do Not Alter Default Packages\">Do Not Alter Default Packages</a>)).\
      \ Anyway, moving along...</p>\n<p>The last thing we need to do is to tell the\
      \ game how much punishment our door will be able to take before finally giving\
      \ up the ghost. This is done by setting the DestroyableObjective-&gt;DamageCapacity\
      \ property to the amount of damage it can take. For our purposes, let's set\
      \ it to about 2000, which should be enough to make somebody with a rocket launcher\
      \ work a bit, but still not be impossibly tough to get through.</p>\n<p>In general,\
      \ there are a couple of other properties one may want to fiddle with as well:</p>\n\
      <dl>\n<dt>DestroyableObjective-&gt;AIShootOffset</dt>\n<dd>This determines where\
      \ bots will aim when trying to shoot this objective, relative to its origin.\
      \ For our purposes here, (0,0,0) is fine, since that's roughly the middle of\
      \ the door, but if the origin of your static mesh isn't actually in the mesh,\
      \ or there's something else covering that part of it, you may want to ajust\
      \ this so the bots know to shoot some other part of it instead. (Note that the\
      \ crosshairs displayed to players when they approach the objective are always\
      \ shown at (0,0,0), and as far as I know that can't be changed, so you will\
      \ generally want to put the mesh's origin where you want people to shoot anyway,\
      \ so that it looks right to human players)</dd>\n<dt>DestroyableObjective-&gt;DamageEventThreshold</dt>\n\
      <dd></dd>\n<dt>DestroyableObjective-&gt;TakeDamageEvent</dt>\n<dd>These allow\
      \ you to set a threshold at which the objective will trigger an event once it\
      \ has taken a certain amount of damage, but before it actually gets to the point\
      \ of blowing up. This can be used, for example, to trigger an \"almost destroyed\"\
      \ warning, or to make things look more damaged as the attackers get closer to\
      \ actually breaking through.</dd>\n</dl>\n<p>There, we now have a door which\
      \ can be blown up by the attackers as one of the objectives for the assault.\
      \ Go ahead and fire up the game and give it a try!</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Explosions\">Explosions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective?section=3\"\
      \ title=\"Edit section: Explosions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Ok, so we've got our door, and we can blow it up,\
      \ and the game takes care of all the proper objectivey things like announcing\
      \ it and showing it on the HUD and so forth, but there's still something missing.\
      \ When the door gets blown up, sure, the mesh changes to a blown up version,\
      \ but that's it. In the words of Marvin the Martian, \"Where's the kaboom?!\
      \ There's supposed to be an earth-shattering kaboom!\"</p>\n<p>Obviously, we're\
      \ going to want to make some things happen when the door goes kablooey. All\
      \ GameObjectives will trigger their Events-&gt;Event when they have been completed\
      \ (in this case, when the door's been destroyed), so go into the properties\
      \ for the DestroyableObjective_SM object, and set the Events-&gt;Event property\
      \ to some appropriate name, let's say \"DoorDestroyed\". Now we'll use a <a\
      \ href=\"/Legacy:ScriptedTrigger\" title=\"Legacy:ScriptedTrigger\">ScriptedTrigger</a>\
      \ to perform a few different actions for us when that event gets triggered.\
      \ <a href=\"/Legacy:Add_An_Actor\" title=\"Legacy:Add An Actor\">Add an Actor</a>&gt;&gt;Keypoint&gt;&gt;AIScript&gt;&gt;ScriptedSequence&gt;&gt;ScriptedTrigger\
      \ to the map near the door (so it's easy to find), bring up its properties,\
      \ and <a href=\"/Legacy:Add_An_Inline_Object\" title=\"Legacy:Add An Inline\
      \ Object\">add an inline object</a> or three to the AIScript-&gt;Actions property\
      \ to define what this ScriptedTrigger should do. We'll want something along\
      \ the following lines:</p>\n<dl>\n<dt>Action_WAITFOREVENT</dt>\n<dd></dd>\n\
      </dl>\n<dl>\n<dd>\n<ul>\n<li>ExternalEvent = DoorDestroyed</li>\n</ul>\n</dd>\n\
      </dl>\n<dl>\n<dt>Action_TRIGGEREVENT</dt>\n<dd></dd>\n</dl>\n<dl>\n<dd>\n<ul>\n\
      <li>Event = DoorExplosion</li>\n</ul>\n</dd>\n</dl>\n<dl>\n<dt>ACTION_PlayExplosionSound</dt>\n\
      <dd></dd>\n</dl>\n<dl>\n<dd>\n<ul>\n<li>SoundEmitterActorTag = BaseDoor</li>\n\
      <li>SoundVolumeScale = 2.0</li>\n<li>SoundRadiusScale = 1.0</li>\n<li>SoundPitchScale\
      \ = 1.0</li>\n</ul>\n</dd>\n</dl>\n<p>This will trigger the explosion event,\
      \ and play the explosion sound. Note that the SoundEmitterActorTag in the ACTION_PlayExplosionSound\
      \ action is the same as the tag we gave to the door objective earlier. This\
      \ means that the explosion will sound like it's coming from that object. Now,\
      \ for the actual explosion, we'll do two things: We'll need to set up an <a\
      \ href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\">Emitter</a> to show the\
      \ visual explosion, and we'll also create a <a href=\"/Legacy:ViewShaker\" title=\"\
      Legacy:ViewShaker\">ViewShaker</a> actor to shake the camera a bit, to give\
      \ it a bit of \"oomph\". But wait a minute, there's a problem here..</p>\n<p>We\
      \ could just create the Emitter and the ViewShaker, and set their tags to \"\
      DoorExplosion\", so they get triggered by the ScriptedTrigger. In fact, this\
      \ would work fine, in single-player mode. Unfortunately, this doesn't work in\
      \ network play. It turns out that in client-server mode, ScriptedTriggers only\
      \ run on the server. Things like Emitters and ViewShakers, on the other hand,\
      \ only run on the clients, so we need some way for the ScriptedTrigger on the\
      \ server to trigger an event on the clients to show the explosion. The answer\
      \ to this is a <a href=\"/Legacy:NetworkTrigger\" title=\"Legacy:NetworkTrigger\"\
      >NetworkTrigger</a>.</p>\n<p>NetworkTriggers are very easy to use. Simply <a\
      \ href=\"/Legacy:Add_An_Actor\" title=\"Legacy:Add An Actor\">add an Actor</a>&gt;&gt;NetworkTrigger\
      \ to the map (doesn't matter where, but let's keep it close to the ScriptedTrigger),\
      \ and set its Events-&gt;Tag to \"DoorExplosion\" (the event that happens on\
      \ the server). Then, set its Events-&gt;Event to \"DoorExplosionClient\" (an\
      \ event we want to happen on the client side). Now whenever the server triggers\
      \ a DoorExplosion event, the NetworkTrigger will trigger a DoorExplosionClient\
      \ event on the client side of things.</p>\n<p>Now <a href=\"/Legacy:Add_An_Actor\"\
      \ title=\"Legacy:Add An Actor\">add an Actor</a>&gt;&gt;Emitter and place it\
      \ just a little bit in front of the door. Open up its properties, and set its\
      \ Events-&gt;Tag to \"DoorExplosionClient\". Now, go to Emitter-&gt;Emitters\
      \ and <a href=\"/Legacy:Add_An_Inline_Object\" title=\"Legacy:Add An Inline\
      \ Object\">add an inline object</a> of a new <a href=\"/Legacy:SpriteEmitter\"\
      \ title=\"Legacy:SpriteEmitter\">SpriteEmitter</a>. In the new SpriteEmitter,\
      \ you'll want to set the following properties:</p>\n<ul>\n<li>Color-&gt;Opacity\
      \ = 0.4</li>\n<li>Fading-&gt;FadeOut = True</li>\n<li>Fading-&gt;FadeOutStartTime\
      \ = 0.5</li>\n<li>Local-&gt;Disabled = True</li>\n<li>Local-&gt;RespawnDeadParticles\
      \ = False</li>\n<li>Location-&gt;StartLocationShape = PTLS_Sphere</li>\n<li>Location-&gt;SphereRadiusRange\
      \ = (Min=-300, Max=300)</li>\n<li>Size-&gt;UseSizeScale = True</li>\n<li>Size-&gt;UseRegularSizeScale\
      \ = False</li>\n<li>Size-&gt;SizeScale[0] = (RlativeSize=10, RelativeTime=1)</li>\n\
      <li>Spawning-&gt;InitialParticlesPerSecond = 10</li>\n<li>Texture-&gt;Texture\
      \ = Texture'VMParticleTextures.TankFiringP.CloudParticleOrangeBMPtex'</li>\n\
      <li>Texture-&gt;TextureUSubdivisions = 4</li>\n<li>Texture-&gt;TextureVSubdivisions\
      \ = 4</li>\n<li>Texture-&gt;UseRandomSubdivision = True</li>\n<li>Time-&gt;LifetimeRange\
      \ = (Min=1, Max=1)</li>\n</ul>\n<p>This will create a visual blast when the\
      \ door is destroyed. Obviously, we could get a lot more sophisticated than this,\
      \ including making a few smaller explosions around the area, varying the colors,\
      \ making smoke, and throwing door bits around with a <a href=\"/Legacy:MeshEmitter\"\
      \ title=\"Legacy:MeshEmitter\">MeshEmitter</a> if we wanted to, but this isn't\
      \ a tutorial on Emitters, so we'll leave that as an exercise for another time.</p>\n\
      <p>Now we need to <a href=\"/Legacy:Add_An_Actor\" title=\"Legacy:Add An Actor\"\
      >add an Actor</a>&gt;&gt;Triggers&gt;&gt;ViewShaker. Place it next to the emitter,\
      \ open its properties, and set its Events-&gt;Tag property to \"DoorExplosionClient\"\
      . We could also customize what sort of shaking to produce by modifying the other\
      \ properties under the ViewShaker section of the properties window, but for\
      \ now the defaults will work fine.</p>\n<p>We now have a door that goes \"Boom!\"\
      \ like any respectable door should when it gets blown up.</p>\n<hr />\n<p><b>Proceed\
      \ to the next section: <a href=\"/Legacy:Assault_Mapping_Tutorial/PlayerStarts_And_The_PlayerSpawnManager\"\
      \ title=\"Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager\"\
      >Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager</a></b></p>\n\
      <hr />\n<p>This tutorial was originally written and contributed to the Wiki\
      \ community by <a href=\"/Legacy:Foogod\" title=\"Legacy:Foogod\">Foogod</a>.\
      \ Questions and comments are welcome! Please either leave them on my personal\
      \ page or at the bottom of the relevant tutorial page. If you see something\
      \ which is wrong or unclear and you think needs some correction, please feel\
      \ free to edit the text directly (that's what the Wiki is for!), but please\
      \ try to keep the tutorial flow intact (no thread discussions in the middle\
      \ of the tutorial text, please).</p>\n<p>Note: To reduce clutter, comments on\
      \ the tutorial pages will be periodically moved to the <a href=\"/Legacy:Assault_Mapping_Tutorial/Discussion\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Discussion\">Legacy:Assault Mapping\
      \ Tutorial/Discussion</a> page. Look there for older comments and thread discussions.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Comments:\">Comments:</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective?section=4\"\
      \ title=\"Edit section: Comments:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.069 seconds\n\
      Real time usage: 0.119 seconds\nPreprocessor visited node count: 39/1000000\n\
      Preprocessor generated node count: 84/1000000\nPost‐expand include size: 120/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:485-0!*!0!!en!*!* and\
      \ timestamp 20221118152325 and revision id 1550\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Foogod"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager"
  - ns: 100
    exists: true
    name: "Legacy:Add An Inline Object"
  - ns: 100
    exists: true
    name: "Legacy:Emitter"
  - ns: 100
    exists: true
    name: "Legacy:GameObjective"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Getting Started"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTrigger"
  - ns: 100
    exists: true
    name: "Legacy:ViewShaker"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Do Not Alter Default Packages"
  - ns: 100
    exists: true
    name: "Legacy:Set The Following Properties"
  - ns: 100
    exists: true
    name: "Legacy:StaticMesh"
  - ns: 100
    exists: true
    name: "Legacy:SpriteEmitter"
  - ns: 100
    exists: true
    name: "Legacy:NetworkTrigger"
  - ns: 100
    exists: true
    name: "Legacy:DestroyableObjective SM"
  - ns: 100
    exists: true
    name: "Legacy:Add An Actor"
  - ns: 100
    exists: true
    name: "Legacy:Set The Resource Property"
  - ns: 100
    exists: true
    name: "Legacy:MeshEmitter"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Discussion"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Creating a Destroyable Objective"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective"
    byteoffset: 456
    anchor: "Creating_a_Destroyable_Objective"
  - toclevel: 1
    level: "2"
    line: "DestroyableObjective_SM"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective"
    byteoffset: 1109
    anchor: "DestroyableObjective_SM"
  - toclevel: 1
    level: "2"
    line: "Explosions"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective"
    byteoffset: 9661
    anchor: "Explosions"
  - toclevel: 1
    level: "2"
    line: "Comments:"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective"
    byteoffset: 15629
    anchor: "Comments:"
  displaytitle: "Legacy:Assault Mapping Tutorial/Creating A Destroyable Objective"
  iwlinks: []
  wikitext:
    text: "----\n\nThis page is a section of the [[Legacy:Assault Mapping Tutorial|Assault\
      \ Mapping Tutorial]].  If you have arrived here from some other place, this\
      \ page will likely make more sense if you start at the above link and read the\
      \ tutorial through from beginning to end.\n\n'''Previous Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Getting\
      \ Started]]'''\n\n'''Next Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/PlayerStarts\
      \ And The PlayerSpawnManager]]'''\n\n----\n\n==Creating a Destroyable Objective==\n\
      \nAs you might notice from the map creation directions, or from looking at the\
      \ map itself, this base isn't that hard to get into.  It doesn't even have a\
      \ door!  Our first objective in this tutorial, therefore, is going to be a destroyable\
      \ door, that will (try to) protect the entrance to the stronghold.\n\nThere\
      \ are a couple of different ways we can do destroyable objectives, but the one\
      \ which is almost always what we'll want to use is a [[Legacy:DestroyableObjective_SM|DestroyableObjective_SM]],\
      \ which uses the flexibility of static meshes to automatically adjust its representation\
      \ within the world it inhabits.\n\n==DestroyableObjective_SM==\n\nThe first\
      \ step is to [[Legacy:Add An Actor|Add an Actor]]>>NavigationPoint>>JumpDest>>JumpSpot>>GameObjective>>DestroyableObjective>>DestroyableObjective_SM.\
      \  This actor combines several different functions in one convenient package:\n\
      * It's a [[Legacy:GameObjective|GameObjective]].  GameObjectives do several\
      \ things:\n** They have text strings which display on the HUD directing people\
      \ to attack or defend them when the time comes.\n** They automatically draw\
      \ the little flashing HUD displays indicating where they are, how close to completion\
      \ they are, and whether they're under attack at the moment.\n** Bots automatically\
      \ know when GameObjectives need to be attacked or defended, and will act accordingly.\n\
      * The DestroyableObjective_SM shows a static mesh, just like a [[Legacy:StaticMesh|StaticMesh]]\
      \ actor does.  Moreover, when this objective is the active one, this mesh will\
      \ flash on the screen in addition to the HUD icon, showing players where they\
      \ should be shooting.\n* When the objective is destroyed, the DestroyableObjective_SM\
      \ will also automatically change its static mesh to another one (generally,\
      \ one that looks like a blown-up version of whatever it's supposed to be).\n\
      \nAs you can see, the actor already does most of the work for us, there are\
      \ only a few things we'll need to fiddle with.  First, we'll deal with the properties\
      \ which apply to any objective you might place in your map.  Open the properties\
      \ window for the new actor and [[Legacy:Set The Following Properties|set the\
      \ following properties]]:\n\n; Events->Tag = BaseDoor: This property is used\
      \ in many places, so you should generally make it something descriptive and\
      \ easy to remember.\n; GameObjective->ObjectiveName = the Base Door: This is\
      \ used to print location messages, so make it something that makes sense to\
      \ a human.\n; GameObjective->LocationPrefix = Near: This is the text that's\
      \ printed in front of the ObjectiveName when describing where somebody is (i.e.\
      \ \"Near the Base Door\").\n; GameObjective->LocationPostfix = : This is the\
      \ text that's printed after the ObjectiveName in location descriptions (for\
      \ example, we might put \"area\" for \"the Base Door area\").  We'll just leave\
      \ it at the default empty string.\n; GameObjective->Score = 10: How many points\
      \ are awarded to the attacker who completes this objective?\n; Assault->DrawDistThresHold\
      \ = 0: How close does an attacker have to be for the game to show the crosshairs\
      \ and health bar of this objective (when it's visible) instead of the triangular\
      \ icon?  (0 means it's always shown as soon as the objective becomes visible,\
      \ no matter how far away it is).\n; Assault->Objective_Info_Attacker = Penetrate\
      \ the Base's Outer Defenses: The message shown on the screen to attackers when\
      \ this is the active objective.\n; Assault->Objective_Info_Defender = Prevent\
      \ the Attackers from Infiltrating the Base: The message shown to defenders when\
      \ this is the active objective.\n; Assault->ObjectiveDescription = Destroy the\
      \ door to enter the base: A brief message of what people need to do to accomplish\
      \ this goal.\n; GameObjective->DestructionMessage = Base Outer Defenses Breached!:\
      \ The message displayed to both sides when the objective has been completed.\n\
      \nNow for the bits which are specific to the DestroyableObjective_SM class.\
      \  You've probably already noticed that this actor starts out with a default\
      \ untextured box mesh, which we will want to change.  For our purposes, we'll\
      \ just borrow from RobotFactory, which has a nice door mesh we can use (and\
      \ more importantly, a destroyed version we can use for the destroyed mesh).\
      \  This mesh can be found in the Plutonic_BP2_static package as Door.FactoryGateDoor,\
      \ so go into the DestroyableObjective_SM actor's properties and [[Legacy:Set\
      \ The Resource Property|set the resource property]] Display->StaticMesh to Plutonic_BP2_static.Door.FactoryGateDoor.\n\
      \nAs you might notice, the door from RobotFactory is a bit large for our purposes,\
      \ so we'll scale it down to about half size by setting the Display->DrawScale\
      \ property to 0.55.  Now we can position it into place over the entrance to\
      \ the base.  It's still a bit taller than we need, but that's ok.  Just move\
      \ it down so the top of the door meets the top of the door frame, and we'll\
      \ let the extra stay hidden under the floor.\n\nNext, we need to set the destroyed\
      \ version.  The destroyed version of the factory door from RobotFactory is Plutonic_BP2_static.Factory.door_destroyed,\
      \ so in the DestroyableObjective_SM Properties, simply [[Legacy:Set The Resource\
      \ Property|set the resource property]] DestroyableObjective_SM->DestroyedStaticMesh\
      \ to Plutonic_BP2_static.Factory.door_destroyed.  That was easy, wasn't it?\n\
      \nNow would be a good time to check to make sure that our door will look right\
      \ when it's been blown up.  When the destroyable objective is destroyed, it\
      \ simply changes the Display->StaticMesh it's using to the value of DestroyableObjective_SM->DestroyedStaticMesh\
      \ instead, so we can do the same thing in the editor to check how it will look.\
      \  Just temporarily set Display->StaticMesh to Plutonic_BP2_static.Factory.door_destroyed\
      \ and take a look.  The particularly astute here will notice that something\
      \ doesn't look right.  The destroyed door actually doesn't line up the same\
      \ way as the normal one does.\n\nDid we do something wrong?  Nope.  Believe\
      \ it or not, Epic screwed up, and if you look closely at RobotFactory while\
      \ you're playing it, it has the same problem.  The origin of the destroyed door\
      \ mesh is at the bottom, but the origin of the regular door mesh is in the center,\
      \ so they don't line up.  This illustrates an important point when designing\
      \ meshes for destroyable objectives:  Make sure their origins match up, because\
      \ you can't adjust this in the actor.  Also note that since the actor just changes\
      \ the setting for the Display->StaticMesh property when it gets destroyed, all\
      \ of the other settings will be applied to the different mesh as well.  This\
      \ means, for example, that any skins you use in Display->Skins to change the\
      \ appearance of the original mesh will also be applied to the destroyed mesh\
      \ when it gets put in place, so if you're going to use your own skins, you'll\
      \ need to make sure that the two meshes map their textures in compatible ways.\n\
      \nIn any case, the glitch with the destroyed door mesh is annoying, but we'll\
      \ leave it for now.  For a more polished level, you'll probably want to make\
      \ sure things like this are fixed (by creating your own meshes correctly, or\
      \ by loading up the broken mesh in a 3D modeller, adjusting the origin, and\
      \ saving the fixed version in your own package to use instead (Remember: as\
      \ tempting as it may be, [[Legacy:Do Not Alter Default Packages|Do Not Alter\
      \ Default Packages]])).  Anyway, moving along...\n\nThe last thing we need to\
      \ do is to tell the game how much punishment our door will be able to take before\
      \ finally giving up the ghost.  This is done by setting the DestroyableObjective->DamageCapacity\
      \ property to the amount of damage it can take.  For our purposes, let's set\
      \ it to about 2000, which should be enough to make somebody with a rocket launcher\
      \ work a bit, but still not be impossibly tough to get through.\n\nIn general,\
      \ there are a couple of other properties one may want to fiddle with as well:\n\
      \n;DestroyableObjective->AIShootOffset: This determines where bots will aim\
      \ when trying to shoot this objective, relative to its origin.  For our purposes\
      \ here, (0,0,0) is fine, since that's roughly the middle of the door, but if\
      \ the origin of your static mesh isn't actually in the mesh, or there's something\
      \ else covering that part of it, you may want to ajust this so the bots know\
      \ to shoot some other part of it instead.  (Note that the crosshairs displayed\
      \ to players when they approach the objective are always shown at (0,0,0), and\
      \ as far as I know that can't be changed, so you will generally want to put\
      \ the mesh's origin where you want people to shoot anyway, so that it looks\
      \ right to human players)\n;DestroyableObjective->DamageEventThreshold:\n;DestroyableObjective->TakeDamageEvent:\
      \ These allow you to set a threshold at which the objective will trigger an\
      \ event once it has taken a certain amount of damage, but before it actually\
      \ gets to the point of blowing up.  This can be used, for example, to trigger\
      \ an \"almost destroyed\" warning, or to make things look more damaged as the\
      \ attackers get closer to actually breaking through.\n\nThere, we now have a\
      \ door which can be blown up by the attackers as one of the objectives for the\
      \ assault.  Go ahead and fire up the game and give it a try!\n\n==Explosions==\n\
      \nOk, so we've got our door, and we can blow it up, and the game takes care\
      \ of all the proper objectivey things like announcing it and showing it on the\
      \ HUD and so forth, but there's still something missing.  When the door gets\
      \ blown up, sure, the mesh changes to a blown up version, but that's it.  In\
      \ the words of Marvin the Martian, \"Where's the kaboom?!  There's supposed\
      \ to be an earth-shattering kaboom!\"\n\nObviously, we're going to want to make\
      \ some things happen when the door goes kablooey.  All GameObjectives will trigger\
      \ their Events->Event when they have been completed (in this case, when the\
      \ door's been destroyed), so go into the properties for the DestroyableObjective_SM\
      \ object, and set the Events->Event property to some appropriate name, let's\
      \ say \"DoorDestroyed\".  Now we'll use a [[Legacy:ScriptedTrigger|ScriptedTrigger]]\
      \ to perform a few different actions for us when that event gets triggered.\
      \  [[Legacy:Add An Actor|Add an Actor]]>>Keypoint>>AIScript>>ScriptedSequence>>ScriptedTrigger\
      \ to the map near the door (so it's easy to find), bring up its properties,\
      \ and [[Legacy:Add An Inline Object|add an inline object]] or three to the AIScript->Actions\
      \ property to define what this ScriptedTrigger should do.  We'll want something\
      \ along the following lines:\n\n;Action_WAITFOREVENT:\n;* ExternalEvent = DoorDestroyed\n\
      ;Action_TRIGGEREVENT:\n;* Event = DoorExplosion\n;ACTION_PlayExplosionSound:\n\
      ;* SoundEmitterActorTag = BaseDoor\n;* SoundVolumeScale = 2.0\n;* SoundRadiusScale\
      \ = 1.0\n;* SoundPitchScale = 1.0\n\nThis will trigger the explosion event,\
      \ and play the explosion sound.  Note that the SoundEmitterActorTag in the ACTION_PlayExplosionSound\
      \ action is the same as the tag we gave to the door objective earlier.  This\
      \ means that the explosion will sound like it's coming from that object.  Now,\
      \ for the actual explosion, we'll do two things:  We'll need to set up an [[Legacy:Emitter|Emitter]]\
      \ to show the visual explosion, and we'll also create a [[Legacy:ViewShaker|ViewShaker]]\
      \ actor to shake the camera a bit, to give it a bit of \"oomph\".  But wait\
      \ a minute, there's a problem here..\n\nWe could just create the Emitter and\
      \ the ViewShaker, and set their tags to \"DoorExplosion\", so they get triggered\
      \ by the ScriptedTrigger.  In fact, this would work fine, in single-player mode.\
      \  Unfortunately, this doesn't work in network play.  It turns out that in client-server\
      \ mode, ScriptedTriggers only run on the server.  Things like Emitters and ViewShakers,\
      \ on the other hand, only run on the clients, so we need some way for the ScriptedTrigger\
      \ on the server to trigger an event on the clients to show the explosion.  The\
      \ answer to this is a [[Legacy:NetworkTrigger|NetworkTrigger]].\n\nNetworkTriggers\
      \ are very easy to use.  Simply [[Legacy:Add An Actor|add an Actor]]>>NetworkTrigger\
      \ to the map (doesn't matter where, but let's keep it close to the ScriptedTrigger),\
      \ and set its Events->Tag to \"DoorExplosion\" (the event that happens on the\
      \ server).  Then, set its Events->Event to \"DoorExplosionClient\" (an event\
      \ we want to happen on the client side).  Now whenever the server triggers a\
      \ DoorExplosion event, the NetworkTrigger will trigger a DoorExplosionClient\
      \ event on the client side of things.\n\nNow [[Legacy:Add An Actor|add an Actor]]>>Emitter\
      \ and place it just a little bit in front of the door.  Open up its properties,\
      \ and set its Events->Tag to \"DoorExplosionClient\".  Now, go to Emitter->Emitters\
      \ and [[Legacy:Add An Inline Object|add an inline object]] of a new [[Legacy:SpriteEmitter|SpriteEmitter]].\
      \  In the new SpriteEmitter, you'll want to set the following properties:\n\n\
      * Color->Opacity = 0.4\n* Fading->FadeOut = True\n* Fading->FadeOutStartTime\
      \ = 0.5\n* Local->Disabled = True\n* Local->RespawnDeadParticles = False\n*\
      \ Location->StartLocationShape = PTLS_Sphere\n* Location->SphereRadiusRange\
      \ = (Min=-300, Max=300)\n* Size->UseSizeScale = True\n* Size->UseRegularSizeScale\
      \ = False\n* Size->SizeScale[0] = (RlativeSize=10, RelativeTime=1)\n* Spawning->InitialParticlesPerSecond\
      \ = 10\n* Texture->Texture = Texture'VMParticleTextures.TankFiringP.CloudParticleOrangeBMPtex'\n\
      * Texture->TextureUSubdivisions = 4\n* Texture->TextureVSubdivisions = 4\n*\
      \ Texture->UseRandomSubdivision = True\n* Time->LifetimeRange = (Min=1, Max=1)\n\
      \nThis will create a visual blast when the door is destroyed.  Obviously, we\
      \ could get a lot more sophisticated than this, including making a few smaller\
      \ explosions around the area, varying the colors, making smoke, and throwing\
      \ door bits around with a [[Legacy:MeshEmitter|MeshEmitter]] if we wanted to,\
      \ but this isn't a tutorial on Emitters, so we'll leave that as an exercise\
      \ for another time. \n\nNow we need to [[Legacy:Add An Actor|add an Actor]]>>Triggers>>ViewShaker.\
      \  Place it next to the emitter, open its properties, and set its Events->Tag\
      \ property to \"DoorExplosionClient\".  We could also customize what sort of\
      \ shaking to produce by modifying the other properties under the ViewShaker\
      \ section of the properties window, but for now the defaults will work fine.\n\
      \nWe now have a door that goes \"Boom!\" like any respectable door should when\
      \ it gets blown up.\n\n----\n\n'''Proceed to the next section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/PlayerStarts\
      \ And The PlayerSpawnManager]]'''\n\n----\n\nThis tutorial was originally written\
      \ and contributed to the Wiki community by [[Legacy:Foogod|Foogod]].  Questions\
      \ and comments are welcome!  Please either leave them on my personal page or\
      \ at the bottom of the relevant tutorial page.  If you see something which is\
      \ wrong or unclear and you think needs some correction, please feel free to\
      \ edit the text directly (that's what the Wiki is for!), but please try to keep\
      \ the tutorial flow intact (no thread discussions in the middle of the tutorial\
      \ text, please).\n\nNote: To reduce clutter, comments on the tutorial pages\
      \ will be periodically moved to the [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Discussion]]\
      \ page.  Look there for older comments and thread discussions.\n\n==Comments:=="
  properties: []
  revId: 1550
name: "Legacy:Assault Mapping Tutorial/Creating A Destroyable Objective"
revision:
  revid: 1550
  parentid: 1551
  user: "Bc18524.bendcable.com"
  timestamp: 1105670149.000000000
  comment: "*revert"
timestamp: 1668785006.026672000
