---
parse:
  title: "Legacy:Assault Mapping Tutorial/Attacking And Defending"
  text:
    text: "<hr />\n<p>This page is a section of the <a href=\"/Legacy:Assault_Mapping_Tutorial\"\
      \ title=\"Legacy:Assault Mapping Tutorial\">Assault Mapping Tutorial</a>. If\
      \ you have arrived here from some other place, this page will likely make more\
      \ sense if you start at the above link and read the tutorial through from beginning\
      \ to end.</p>\n<p><b>Previous Section: <a href=\"/Legacy:Assault_Mapping_Tutorial/PlayerStarts_And_The_PlayerSpawnManager\"\
      \ title=\"Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager\"\
      >Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager</a></b></p>\n\
      <p><b>Next Section: <a href=\"/Legacy:Assault_Mapping_Tutorial/Continuing_The_Assault\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Continuing The Assault\">Legacy:Assault\
      \ Mapping Tutorial/Continuing The Assault</a></b></p>\n<hr />\n<p></p>\n<div\
      \ id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Attacking_and_Defending\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Attacking and Defending</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Bot_Pathing\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Bot Pathing</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Defense_Points\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Defense Points</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Critical_Volumes\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Critical Volumes</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Comments:\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Comments:</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Attacking_and_Defending\"\
      >Attacking and Defending</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending?section=1\"\
      \ title=\"Edit section: Attacking and Defending\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Ok, we've got our map and all of our objectives, and\
      \ places for players to spawn and equipment for them to use. We just need a\
      \ couple more things to make this a fully functional Assault scenario.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Bot_Pathing\">Bot Pathing</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending?section=2\"\
      \ title=\"Edit section: Bot Pathing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The basic bot pathing for Assault is no different\
      \ from most of the other gametypes. Start out by laying out an appropriate grid\
      \ of <a href=\"/Legacy:PathNode\" title=\"Legacy:PathNode\">PathNodes</a> around\
      \ the map, so the bots know where they can and where they can't go. Once you've\
      \ got a basic network down, and checked it to make sure that everything's reachable\
      \ and all the other standard <a href=\"/Legacy:Bot_Pathing\" title=\"Legacy:Bot\
      \ Pathing\">bot pathing</a> issues, fire up the map in the game and give it\
      \ a try with some bots to see how it goes.</p>\n<p>You'll notice at this point\
      \ that the attacking bots are able to find and attack the objective automatically,\
      \ and the defenders are defending as well, but you might also notice something\
      \ else: For the most part, the bots are always following the same path to attack\
      \ the objective. This is not a good thing (predictable bots make for uninteresting\
      \ levels). How do we fix this?</p>\n<p>The answer is <a href=\"/Legacy:AssaultPath\"\
      \ title=\"Legacy:AssaultPath\">AssaultPaths</a>. If you've made Capture the\
      \ Flag, Bombing Run, or other \"goal-type\" maps before, AssaultPaths may already\
      \ be familiar to you, but in case they aren't, here's a quick summary:</p>\n\
      <p>An AssaultPath actor allows you to specify one of several alternate routes\
      \ to reach an objective. All AssaultPath actors which share a common AssaultPath-&gt;PathTag\
      \ are part of the same assault path (each AssaultPath actor can have up to four\
      \ PathTags, so it can be part of up to four different assault paths). Ordinarily,\
      \ when a bot is deciding how to reach an objective, it picks the shortest route\
      \ it can find to get wherever it wants to go and follows it. However, if there\
      \ are AssaultPath actors associated with the objective, the bot will instead\
      \ look at all of the assault paths available for that objective, and randomly\
      \ choose one to follow. Instead of finding the quickest path to the objective,\
      \ the bot will then look for the quickest path to the first AssaultPath actor\
      \ in its chosen assault path and go there instead. Then it will repeat that\
      \ process with the next AssaultPath (if there is one) in the path, until it\
      \ runs out of AssaultPaths associated with the particular path it's following.\
      \ Once it gets to the last AssaultPath actor for the assault path, it then falls\
      \ back to its default behavior of finding the quickest route to the game objective\
      \ from there.</p>\n<p>One important point to note from this is that the AssaultPaths\
      \ really don't define whole paths. Instead, what they really do is tell the\
      \ bot \"go here first, and then proceed from here\". This means that in most\
      \ cases you will not need very many AssaultPath actors if you're careful about\
      \ where you put them. In a lot of cases, you'll only need one AssaultPath actor\
      \ for each path you want to define (simply put it someplace where you want the\
      \ bot to go first, and where the quickest route from there to the objective\
      \ is a good path for the bot to take anyway, such as at one of the entrances\
      \ to a base, for example). You do not need to lay out long strings of AssaultPath\
      \ actors for bots. They're smart enough to figure out how to get where they're\
      \ going already, you just need to give them a pointer here or there if the way\
      \ they choose isn't the best one.</p>\n<p>In the case of our map, all of the\
      \ bots are going to take the same route until they get around the bend in the\
      \ valley anyway, so there's no need to fiddle with that part. We will want them\
      \ to attempt to attack the base from both sides, though, so we'll need an AssaultPath\
      \ actor on either side of the base to direct the bots to go to one side or the\
      \ other.</p>\n<p><a href=\"/Legacy:Add_An_Actor\" title=\"Legacy:Add An Actor\"\
      >Add an Actor</a>&gt;&gt;NavigationPoint&gt;&gt;AssaultPath on the left side\
      \ of the base near the entrance (you may want to replace an existing NavigationPoint\
      \ with the new AssaultPath). Open up its properties window and <a href=\"/Legacy:Set_The_Following_Properties\"\
      \ title=\"Legacy:Set The Following Properties\">set the following properties</a>:</p>\n\
      <ul>\n<li>AssaultPath-&gt;ObjectiveTag = BaseDoor</li>\n<li>AssaultPath-&gt;PathTag[0]\
      \ = leftpath</li>\n</ul>\n<p>Now also add an AssaultPath on the right side of\
      \ the base near the entrance on that side. Set its properties as follows:</p>\n\
      <ul>\n<li>AssaultPath-&gt;ObjectiveTag = BaseDoor</li>\n<li>AssaultPath-&gt;PathTag[0]\
      \ = rightpath</li>\n</ul>\n<p>That's really all there is to it. <a href=\"/Legacy:Rebuild\"\
      \ title=\"Legacy:Rebuild\">Rebuild</a> everything and fire it up to give it\
      \ a try. The bots should now be attacking the base from both sides.</p>\n<p>There\
      \ is one other behavior associated with AssaultPaths: When bots reach an AssaultPath\
      \ actor, they will sometimes wait to \"regroup\" with other bots on their team\
      \ at that point before continuing on. In many cases, this is a useful feature,\
      \ as it automatically adds some additional tactical ramifications to the bot\
      \ attack patterns, but in some cases (such as when an AssaultPath is particularly\
      \ exposed, or you want bots to attack individually for some reason), this behavior\
      \ can be undesirable. In these cases, you can set the AssaultPath-&gt;bNoGrouping\
      \ parameter to True, which will disable this behavior at that particular AssaultPath\
      \ point (we don't need to do this with any of our AssaultPaths in this case,\
      \ though).</p>\n<p>Just to add a little more variety to make things more interesting,\
      \ let's add two more paths with slightly different routes so that even if a\
      \ bot is attacking a particular side, they won't always be taking quite the\
      \ same route to get there. Create two more AssaultPaths with similar properties\
      \ to the previous ones, but set their PathTags to \"otherleft\" and \"otherright\"\
      , and place them in alternate spots to the left and to the right of the base\
      \ (you may want to position some further out and some closer in, so the bots\
      \ follow significantly different paths to get to them as soon as they turn the\
      \ corner. Take into consideration available cover and other strategic factors).\
      \ Adjust as necessary to get reasonable variation without having needlessly\
      \ long routes. You can also adjust the AssaultPath-&gt;Priority properties to\
      \ determine how likely it is that a bot will choose a particular path to follow.</p>\n\
      <p>For more help with bot pathing see <a href=\"/Legacy:Pathing_For_Assault\"\
      \ title=\"Legacy:Pathing For Assault\">Pathing for Assault</a></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Defense_Points\">Defense Points</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending?section=3\"\
      \ title=\"Edit section: Defense Points\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Ok, so we've added some strategy to the attacking\
      \ bots, but the defending bots are still doing their own simple bot things (which\
      \ basically means they're all huddling around the objective). Time to make them\
      \ a bit smarter too (again, if you've made CTF, Domination, or similar maps\
      \ some of this may already be familiar). To do this, we'll be using some <a\
      \ href=\"/Legacy:UnrealScriptedSequence\" title=\"Legacy:UnrealScriptedSequence\"\
      >UnrealScriptedSequence</a> actors. UnrealScriptedSequences are a fairly powerful\
      \ way to script a lot of different bot behaviors, but the behavior we're interested\
      \ in at the moment is just to set up some \"defense points\" which tell the\
      \ bots \"this is a good place to stand and shoot at things\". As it happens,\
      \ this sort of UnrealScriptedSequence is so common that it's built in as the\
      \ default behavior if you create an UnrealScriptedSequence but don't give it\
      \ a custom script of its own.</p>\n<p>This makes defense points fairly easy\
      \ to use: Simply pick a spot, and <a href=\"/Legacy:Add_An_Actor\" title=\"\
      Legacy:Add An Actor\">add an Actor</a>&gt;&gt;Keypoint&gt;&gt;AIScript&gt;&gt;ScriptedSequence&gt;&gt;UnrealScriptedSequence.\
      \ There are a few other things we'll need to do, though:</p>\n<ul>\n<li>Go to\
      \ the objective this defense point will be associated with (in this case, our\
      \ door). Open its properties, and find the GameObjective-&gt;DefenseScriptTags\
      \ property. Set this property to an appropriate tag name (say, \"BaseDoorDefense\"\
      ). Now, go to your UnrealScriptedSequence actor, and set its Events-&gt;Tag\
      \ to the same value (\"BaseDoorDefense\"). This will cause the defense point\
      \ to automatically be active when the right objective is active, and disabled\
      \ otherwise.</li>\n<li>When selected, you'll notice that the UnrealScriptedSequence\
      \ actor has a little red arrow protruding from it (look very carefully, it's\
      \ a little hard to see). This indicates the direction that a bot will face when\
      \ using this defense point. Rotate the actor appropriately to make sure the\
      \ bot will be facing the right direction.</li>\n</ul>\n<p>There are also a few\
      \ other properties which you may want to change, depending on the circumstances:</p>\n\
      <dl>\n<dt>UnrealScriptedSequence-&gt;WeaponPreference</dt>\n<dd>When using this\
      \ defense point, use this weapon.</dd>\n<dt>UnrealScriptedSequence-&gt;Priority</dt>\n\
      <dd>Relative priority of this defense point compared with the others for this\
      \ objective. The higher this value, the more likely a bot will choose this script\
      \ when deciding what to do.</dd>\n<dt>UnrealScriptedSequence-&gt;bSniping</dt>\n\
      <dd>If True, this defense point marks a spot which the bot should snipe from.\
      \ It will stay here, crouch, and shoot at anything which enters the associated\
      \ <a href=\"/Legacy:SnipingVolume\" title=\"Legacy:SnipingVolume\">SnipingVolume</a>.</dd>\n\
      <dt>UnrealScriptedSequence-&gt;SnipingVolumeTag</dt>\n<dd>The tag of the <a\
      \ href=\"/Legacy:SnipingVolume\" title=\"Legacy:SnipingVolume\">SnipingVolume</a>\
      \ to use for bSniping (Note: You don't have to have a SnipingVolume. If you\
      \ don't have one, bots will just snipe at anything they see).</dd>\n<dt>UnrealScriptedSequence-&gt;bRoamingScript</dt>\n\
      <dd>If True, the bot will not stay in this spot while using this script, but\
      \ will roam around. Since defense points don't really have \"scripts\", and\
      \ their main point is to say \"go here\", this usually isn't that useful, but\
      \ it can be used, for example, to say something like \"pick this weapon and\
      \ then patrol this general area with it\".</dd>\n</dl>\n<p>(For more information\
      \ on defense points, take a look at <a href=\"/Legacy:UnrealScriptedSequence\"\
      \ title=\"Legacy:UnrealScriptedSequence\">UnrealScriptedSequence</a> and <a\
      \ href=\"/Legacy:Creating_A_Defense_Point_In_UT200x\" title=\"Legacy:Creating\
      \ A Defense Point In UT200x\">Creating a Defense Point In UT200x</a>)</p>\n\
      <p>You will want to put some careful thought into where you place defense points\
      \ around your map. Keep in mind that a defending bot's natural inclination is\
      \ to stay close to the objective, so you don't really need to put defense points\
      \ there, but you will usually want to put some out in advance positions so that\
      \ the defenders will intercept the attackers before they get too close. Don't\
      \ place defense points too close to walls or other obstacles, or bots' vision\
      \ may be obstructed and they may not defend as well as they should. Also keep\
      \ in mind that bots will pick which defense point to use partially based on\
      \ whether the WeaponPreference setting matches their own preferred weapon (and\
      \ whether they have that weapon on them), so make sure to have a variety of\
      \ defense points appropriate for different types of weapons, to suit different\
      \ bots' tastes (also note that the PreferredWeapon property is only a suggestion,\
      \ so sometimes bots will completely ignore it. It's good to place defense points\
      \ in locations which are effective with a variety of weapon types for this reason).</p>\n\
      <p>A well placed defense point can dramatically improve defending bots' chances\
      \ of holding off the attackers, but a poorly placed defense point can take one\
      \ or more defenders effectively out of the action or make them sitting ducks\
      \ for the attackers, severely hampering the defense of the objective. Be careful\
      \ where you place defense points and be sure to test them thoroughly by observing\
      \ how bots of different skill levels use them in real gameplay. You will likely\
      \ have to adjust the locations and priorities of your defense points several\
      \ times until you get a configuration that works well and reliably.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Critical_Volumes\">Critical Volumes</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending?section=4\"\
      \ title=\"Edit section: Critical Volumes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There is one last little detail which we should add\
      \ to our objective, which will make defending easier both for bots and humans\
      \ alike. You may have noticed when playing this level up to now that the DestroyableObjective_SM\
      \ actor will automatically flash the HUD icon and play the warning sound when\
      \ people start shooting at it. This is good, but what would be more useful is\
      \ if it didn't actually wait until somebody was in the process of blowing it\
      \ up before saying something about it. We can add this functionality with what's\
      \ known as a \"critical volume\".</p>\n<p>The first thing we want to do is to\
      \ create a new <a href=\"/Legacy:ASCriticalObjectiveVolume\" title=\"Legacy:ASCriticalObjectiveVolume\"\
      >ASCriticalObjectiveVolume</a> in the map. This volume should be big enough\
      \ (and the right shape) to enclose any parts of the map which one might consider\
      \ \"close to the objective\". For our purposes, let's create a simple cylinder-shaped\
      \ builder brush with Height=1024 and OuterRadius=2048, then place it over all\
      \ of the area surrounding the base, and create a new ASCriticalObjectiveVolume\
      \ there.</p>\n<p>The next step is to associate this new volume with our objective.\
      \ Open the ASCriticalObjectiveVolume's properties, and set its Events-&gt;Tag\
      \ to some appropriate value (something like, say, \"BaseDoorCriticalVolume\"\
      ). Now we need to open up the properties for our base door DestroyableObjective_SM\
      \ actor, and set its GameObjective-&gt;CriticalObjectiveVolumeTag to the same\
      \ tag name.</p>\n<p>That should do it. Now whenever an attacker enters our new\
      \ volume, it will automatically set off the \"objective in danger\" alarm, alerting\
      \ the defenders that attackers are in the vicinity. (Note that this will also\
      \ affect bot behavior, as the bots automatically know when this alarm goes off\
      \ to fall back and defend the objective more closely, too.</p>\n<hr />\n<p><b>Proceed\
      \ to the next section: <a href=\"/Legacy:Assault_Mapping_Tutorial/Continuing_The_Assault\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Continuing The Assault\">Legacy:Assault\
      \ Mapping Tutorial/Continuing The Assault</a></b></p>\n<hr />\n<p>This tutorial\
      \ was originally written and contributed to the Wiki community by <a href=\"\
      /Legacy:Foogod\" title=\"Legacy:Foogod\">Foogod</a>. Questions and comments\
      \ are welcome! Please either leave them on my personal page or at the bottom\
      \ of the relevant tutorial page. If you see something which is wrong or unclear\
      \ and you think needs some correction, please feel free to edit the text directly\
      \ (that's what the Wiki is for!), but please try to keep the tutorial flow intact\
      \ (no thread discussions in the middle of the tutorial text, please).</p>\n\
      <p>Note: To reduce clutter, comments on the tutorial pages will be periodically\
      \ moved to the <a href=\"/Legacy:Assault_Mapping_Tutorial/Discussion\" title=\"\
      Legacy:Assault Mapping Tutorial/Discussion\">Legacy:Assault Mapping Tutorial/Discussion</a>\
      \ page. Look there for older comments and thread discussions.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Comments:\">Comments:</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending?section=5\"\
      \ title=\"Edit section: Comments:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.065 seconds\n\
      Real time usage: 0.066 seconds\nPreprocessor visited node count: 43/1000000\n\
      Preprocessor generated node count: 88/1000000\nPost‐expand include size: 120/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:487-0!*!0!!en!*!* and\
      \ timestamp 20221118152348 and revision id 1554\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Discussion"
  - ns: 100
    exists: true
    name: "Legacy:Rebuild"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Set The Following Properties"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Continuing The Assault"
  - ns: 100
    exists: true
    name: "Legacy:Add An Actor"
  - ns: 100
    exists: true
    name: "Legacy:ASCriticalObjectiveVolume"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScriptedSequence"
  - ns: 100
    exists: true
    name: "Legacy:AssaultPath"
  - ns: 100
    exists: true
    name: "Legacy:Foogod"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/PlayerStarts And The PlayerSpawnManager"
  - ns: 100
    exists: true
    name: "Legacy:SnipingVolume"
  - ns: 100
    exists: true
    name: "Legacy:PathNode"
  - ns: 100
    exists: true
    name: "Legacy:Pathing For Assault"
  - ns: 100
    exists: true
    name: "Legacy:Bot Pathing"
  - ns: 100
    exists: true
    name: "Legacy:Creating A Defense Point In UT200x"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Attacking and Defending"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending"
    byteoffset: 463
    anchor: "Attacking_and_Defending"
  - toclevel: 1
    level: "2"
    line: "Bot Pathing"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending"
    byteoffset: 690
    anchor: "Bot_Pathing"
  - toclevel: 1
    level: "2"
    line: "Defense Points"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending"
    byteoffset: 6665
    anchor: "Defense_Points"
  - toclevel: 1
    level: "2"
    line: "Critical Volumes"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending"
    byteoffset: 11732
    anchor: "Critical_Volumes"
  - toclevel: 1
    level: "2"
    line: "Comments:"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Attacking_And_Defending"
    byteoffset: 14354
    anchor: "Comments:"
  displaytitle: "Legacy:Assault Mapping Tutorial/Attacking And Defending"
  iwlinks: []
  wikitext:
    text: "----\n\nThis page is a section of the [[Legacy:Assault Mapping Tutorial|Assault\
      \ Mapping Tutorial]].  If you have arrived here from some other place, this\
      \ page will likely make more sense if you start at the above link and read the\
      \ tutorial through from beginning to end.\n\n'''Previous Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/PlayerStarts\
      \ And The PlayerSpawnManager]]'''\n\n'''Next Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Continuing\
      \ The Assault]]'''\n\n----\n\n==Attacking and Defending==\n\nOk, we've got our\
      \ map and all of our objectives, and places for players to spawn and equipment\
      \ for them to use.  We just need a couple more things to make this a fully functional\
      \ Assault scenario.\n\n==Bot Pathing==\n\nThe basic bot pathing for Assault\
      \ is no different from most of the other gametypes.  Start out by laying out\
      \ an appropriate grid of [[Legacy:PathNode|PathNode]]s around the map, so the\
      \ bots know where they can and where they can't go.  Once you've got a basic\
      \ network down, and checked it to make sure that everything's reachable and\
      \ all the other standard [[Legacy:Bot Pathing|bot pathing]] issues, fire up\
      \ the map in the game and give it a try with some bots to see how it goes.\n\
      \nYou'll notice at this point that the attacking bots are able to find and attack\
      \ the objective automatically, and the defenders are defending as well, but\
      \ you might also notice something else:  For the most part, the bots are always\
      \ following the same path to attack the objective.  This is not a good thing\
      \ (predictable bots make for uninteresting levels).  How do we fix this?\n\n\
      The answer is [[Legacy:AssaultPath|AssaultPath]]s.  If you've made Capture the\
      \ Flag, Bombing Run, or other \"goal-type\" maps before, AssaultPaths may already\
      \ be familiar to you, but in case they aren't, here's a quick summary:\n\nAn\
      \ AssaultPath actor allows you to specify one of several alternate routes to\
      \ reach an objective.  All AssaultPath actors which share a common AssaultPath->PathTag\
      \ are part of the same assault path (each AssaultPath actor can have up to four\
      \ PathTags, so it can be part of up to four different assault paths).  Ordinarily,\
      \ when a bot is deciding how to reach an objective, it picks the shortest route\
      \ it can find to get wherever it wants to go and follows it.  However, if there\
      \ are AssaultPath actors associated with the objective, the bot will instead\
      \ look at all of the assault paths available for that objective, and randomly\
      \ choose one to follow.  Instead of finding the quickest path to the objective,\
      \ the bot will then look for the quickest path to the first AssaultPath actor\
      \ in its chosen assault path and go there instead.  Then it will repeat that\
      \ process with the next AssaultPath (if there is one) in the path, until it\
      \ runs out of AssaultPaths associated with the particular path it's following.\
      \  Once it gets to the last AssaultPath actor for the assault path, it then\
      \ falls back to its default behavior of finding the quickest route to the game\
      \ objective from there.\n\nOne important point to note from this is that the\
      \ AssaultPaths really don't define whole paths.  Instead, what they really do\
      \ is tell the bot \"go here first, and then proceed from here\".  This means\
      \ that in most cases you will not need very many AssaultPath actors if you're\
      \ careful about where you put them.  In a lot of cases, you'll only need one\
      \ AssaultPath actor for each path you want to define (simply put it someplace\
      \ where you want the bot to go first, and where the quickest route from there\
      \ to the objective is a good path for the bot to take anyway, such as at one\
      \ of the entrances to a base, for example).  You do not need to lay out long\
      \ strings of AssaultPath actors for bots.  They're smart enough to figure out\
      \ how to get where they're going already, you just need to give them a pointer\
      \ here or there if the way they choose isn't the best one.\n\nIn the case of\
      \ our map, all of the bots are going to take the same route until they get around\
      \ the bend in the valley anyway, so there's no need to fiddle with that part.\
      \  We will want them to attempt to attack the base from both sides, though,\
      \ so we'll need an AssaultPath actor on either side of the base to direct the\
      \ bots to go to one side or the other.\n\n[[Legacy:Add An Actor|Add an Actor]]>>NavigationPoint>>AssaultPath\
      \ on the left side of the base near the entrance (you may want to replace an\
      \ existing NavigationPoint with the new AssaultPath).  Open up its properties\
      \ window and [[Legacy:Set The Following Properties|set the following properties]]:\n\
      \n* AssaultPath->ObjectiveTag = BaseDoor\n* AssaultPath->PathTag[0] = leftpath\n\
      \nNow also add an AssaultPath on the right side of the base near the entrance\
      \ on that side.  Set its properties as follows:\n\n* AssaultPath->ObjectiveTag\
      \ = BaseDoor\n* AssaultPath->PathTag[0] = rightpath\n\nThat's really all there\
      \ is to it.  [[Legacy:Rebuild|Rebuild]] everything and fire it up to give it\
      \ a try.  The bots should now be attacking the base from both sides.\n\nThere\
      \ is one other behavior associated with AssaultPaths:  When bots reach an AssaultPath\
      \ actor, they will sometimes wait to \"regroup\" with other bots on their team\
      \ at that point before continuing on.  In many cases, this is a useful feature,\
      \ as it automatically adds some additional tactical ramifications to the bot\
      \ attack patterns, but in some cases (such as when an AssaultPath is particularly\
      \ exposed, or you want bots to attack individually for some reason), this behavior\
      \ can be undesirable.  In these cases, you can set the AssaultPath->bNoGrouping\
      \ parameter to True, which will disable this behavior at that particular AssaultPath\
      \ point (we don't need to do this with any of our AssaultPaths in this case,\
      \ though).\n\nJust to add a little more variety to make things more interesting,\
      \ let's add two more paths with slightly different routes so that even if a\
      \ bot is attacking a particular side, they won't always be taking quite the\
      \ same route to get there.  Create two more AssaultPaths with similar properties\
      \ to the previous ones, but set their PathTags to \"otherleft\" and \"otherright\"\
      , and place them in alternate spots to the left and to the right of the base\
      \ (you may want to position some further out and some closer in, so the bots\
      \ follow significantly different paths to get to them as soon as they turn the\
      \ corner.  Take into consideration available cover and other strategic factors).\
      \  Adjust as necessary to get reasonable variation without having needlessly\
      \ long routes.  You can also adjust the AssaultPath->Priority properties to\
      \ determine how likely it is that a bot will choose a particular path to follow.\n\
      \nFor more help with bot pathing see [[Legacy:Pathing For Assault|Pathing for\
      \ Assault]]\n\n==Defense Points==\n\nOk, so we've added some strategy to the\
      \ attacking bots, but the defending bots are still doing their own simple bot\
      \ things (which basically means they're all huddling around the objective).\
      \  Time to make them a bit smarter too (again, if you've made CTF, Domination,\
      \ or similar maps some of this may already be familiar).  To do this, we'll\
      \ be using some [[Legacy:UnrealScriptedSequence|UnrealScriptedSequence]] actors.\
      \  UnrealScriptedSequences are a fairly powerful way to script a lot of different\
      \ bot behaviors, but the behavior we're interested in at the moment is just\
      \ to set up some \"defense points\" which tell the bots \"this is a good place\
      \ to stand and shoot at things\".  As it happens, this sort of UnrealScriptedSequence\
      \ is so common that it's built in as the default behavior if you create an UnrealScriptedSequence\
      \ but don't give it a custom script of its own.\n\nThis makes defense points\
      \ fairly easy to use:  Simply pick a spot, and [[Legacy:Add An Actor|add an\
      \ Actor]]>>Keypoint>>AIScript>>ScriptedSequence>>UnrealScriptedSequence.  There\
      \ are a few other things we'll need to do, though:\n\n* Go to the objective\
      \ this defense point will be associated with (in this case, our door).  Open\
      \ its properties, and find the GameObjective->DefenseScriptTags property.  Set\
      \ this property to an appropriate tag name (say, \"BaseDoorDefense\").  Now,\
      \ go to your UnrealScriptedSequence actor, and set its Events->Tag to the same\
      \ value (\"BaseDoorDefense\").  This will cause the defense point to automatically\
      \ be active when the right objective is active, and disabled otherwise.\n* When\
      \ selected, you'll notice that the UnrealScriptedSequence actor has a little\
      \ red arrow protruding from it (look very carefully, it's a little hard to see).\
      \  This indicates the direction that a bot will face when using this defense\
      \ point.  Rotate the actor appropriately to make sure the bot will be facing\
      \ the right direction.\n\nThere are also a few other properties which you may\
      \ want to change, depending on the circumstances:\n\n;UnrealScriptedSequence->WeaponPreference:\
      \ When using this defense point, use this weapon.\n;UnrealScriptedSequence->Priority:\
      \ Relative priority of this defense point compared with the others for this\
      \ objective.  The higher this value, the more likely a bot will choose this\
      \ script when deciding what to do.\n;UnrealScriptedSequence->bSniping: If True,\
      \ this defense point marks a spot which the bot should snipe from.  It will\
      \ stay here, crouch, and shoot at anything which enters the associated [[Legacy:SnipingVolume|SnipingVolume]].\n\
      ;UnrealScriptedSequence->SnipingVolumeTag: The tag of the [[Legacy:SnipingVolume|SnipingVolume]]\
      \ to use for bSniping (Note: You don't have to have a SnipingVolume.  If you\
      \ don't have one, bots will just snipe at anything they see).\n;UnrealScriptedSequence->bRoamingScript:\
      \ If True, the bot will not stay in this spot while using this script, but will\
      \ roam around.  Since defense points don't really have \"scripts\", and their\
      \ main point is to say \"go here\", this usually isn't that useful, but it can\
      \ be used, for example, to say something like \"pick this weapon and then patrol\
      \ this general area with it\".\n\n(For more information on defense points, take\
      \ a look at [[Legacy:UnrealScriptedSequence|UnrealScriptedSequence]] and [[Legacy:Creating\
      \ A Defense Point In UT200x|Creating a Defense Point In UT200x]])\n\nYou will\
      \ want to put some careful thought into where you place defense points around\
      \ your map.  Keep in mind that a defending bot's natural inclination is to stay\
      \ close to the objective, so you don't really need to put defense points there,\
      \ but you will usually want to put some out in advance positions so that the\
      \ defenders will intercept the attackers before they get too close.  Don't place\
      \ defense points too close to walls or other obstacles, or bots' vision may\
      \ be obstructed and they may not defend as well as they should.  Also keep in\
      \ mind that bots will pick which defense point to use partially based on whether\
      \ the WeaponPreference setting matches their own preferred weapon (and whether\
      \ they have that weapon on them), so make sure to have a variety of defense\
      \ points appropriate for different types of weapons, to suit different bots'\
      \ tastes (also note that the PreferredWeapon property is only a suggestion,\
      \ so sometimes bots will completely ignore it.  It's good to place defense points\
      \ in locations which are effective with a variety of weapon types for this reason).\n\
      \nA well placed defense point can dramatically improve defending bots' chances\
      \ of holding off the attackers, but a poorly placed defense point can take one\
      \ or more defenders effectively out of the action or make them sitting ducks\
      \ for the attackers, severely hampering the defense of the objective.  Be careful\
      \ where you place defense points and be sure to test them thoroughly by observing\
      \ how bots of different skill levels use them in real gameplay.  You will likely\
      \ have to adjust the locations and priorities of your defense points several\
      \ times until you get a configuration that works well and reliably.\n\n==Critical\
      \ Volumes==\n\nThere is one last little detail which we should add to our objective,\
      \ which will make defending easier both for bots and humans alike.  You may\
      \ have noticed when playing this level up to now that the DestroyableObjective_SM\
      \ actor will automatically flash the HUD icon and play the warning sound when\
      \ people start shooting at it.  This is good, but what would be more useful\
      \ is if it didn't actually wait until somebody was in the process of blowing\
      \ it up before saying something about it.  We can add this functionality with\
      \ what's known as a \"critical volume\".\n\nThe first thing we want to do is\
      \ to create a new [[Legacy:ASCriticalObjectiveVolume|ASCriticalObjectiveVolume]]\
      \ in the map.  This volume should be big enough (and the right shape) to enclose\
      \ any parts of the map which one might consider \"close to the objective\".\
      \  For our purposes, let's create a simple cylinder-shaped builder brush with\
      \ Height=1024 and OuterRadius=2048, then place it over all of the area surrounding\
      \ the base, and create a new ASCriticalObjectiveVolume there.\n\nThe next step\
      \ is to associate this new volume with our objective.  Open the ASCriticalObjectiveVolume's\
      \ properties, and set its Events->Tag to some appropriate value (something like,\
      \ say, \"BaseDoorCriticalVolume\").  Now we need to open up the properties for\
      \ our base door DestroyableObjective_SM actor, and set its GameObjective->CriticalObjectiveVolumeTag\
      \ to the same tag name.\n\nThat should do it.  Now whenever an attacker enters\
      \ our new volume, it will automatically set off the \"objective in danger\"\
      \ alarm, alerting the defenders that attackers are in the vicinity.  (Note that\
      \ this will also affect bot behavior, as the bots automatically know when this\
      \ alarm goes off to fall back and defend the objective more closely, too.\n\n\
      ----\n\n'''Proceed to the next section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Continuing\
      \ The Assault]]'''\n\n----\n\nThis tutorial was originally written and contributed\
      \ to the Wiki community by [[Legacy:Foogod|Foogod]].  Questions and comments\
      \ are welcome!  Please either leave them on my personal page or at the bottom\
      \ of the relevant tutorial page.  If you see something which is wrong or unclear\
      \ and you think needs some correction, please feel free to edit the text directly\
      \ (that's what the Wiki is for!), but please try to keep the tutorial flow intact\
      \ (no thread discussions in the middle of the tutorial text, please).\n\nNote:\
      \ To reduce clutter, comments on the tutorial pages will be periodically moved\
      \ to the [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Discussion]] page.  Look there\
      \ for older comments and thread discussions.\n\n==Comments:=="
  properties: []
  revId: 1554
name: "Legacy:Assault Mapping Tutorial/Attacking And Defending"
revision:
  revid: 1554
  parentid: 1555
  user: "Blip2"
  timestamp: 1170246563.000000000
  comment: "*"
timestamp: 1668785028.912989000
