---
parse:
  title: "Legacy:Assault Mapping Tutorial/Other Objectives"
  text:
    text: "<hr />\n<p>This page is a section of the <a href=\"/Legacy:Assault_Mapping_Tutorial\"\
      \ title=\"Legacy:Assault Mapping Tutorial\">Assault Mapping Tutorial</a>. If\
      \ you have arrived here from some other place, this page will likely make more\
      \ sense if you start at the above link and read the tutorial through from beginning\
      \ to end.</p>\n<p><b>Previous Section: <a href=\"/Legacy:Assault_Mapping_Tutorial/Continuing_The_Assault\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Continuing The Assault\">Legacy:Assault\
      \ Mapping Tutorial/Continuing The Assault</a></b></p>\n<p><b>Next Section: <a\
      \ href=\"/Legacy:Assault_Mapping_Tutorial/Adding_Vehicles_And_Turrets\" title=\"\
      Legacy:Assault Mapping Tutorial/Adding Vehicles And Turrets\">Legacy:Assault\
      \ Mapping Tutorial/Adding Vehicles And Turrets</a> <i>(still being written)</i></b></p>\n\
      <hr />\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Other_Objectives\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Other Objectives</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Objective_Types\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Objective Types</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#DestroyableObjective\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">DestroyableObjective</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#HoldObjective\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">HoldObjective</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#TouchObjective\"><span class=\"\
      tocnumber\">2.3</span> <span class=\"toctext\">TouchObjective</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#UseObjective\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">UseObjective</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#DestroyVehicleObjective\"><span\
      \ class=\"tocnumber\">2.5</span> <span class=\"toctext\">DestroyVehicleObjective</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#TriggeredObjective\"><span\
      \ class=\"tocnumber\">2.6</span> <span class=\"toctext\">TriggeredObjective</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Using_Optional_Objectives\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Using Optional Objectives</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Other_Neat_Tricks\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Other Neat Tricks</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"#Flashing_Objective_Icons\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Flashing Objective\
      \ Icons</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#Flashing_Static_Meshes\"\
      ><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">Flashing Static\
      \ Meshes</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-13\"\
      ><a href=\"#Comments:\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Comments:</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Other_Objectives\">Other Objectives</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=1\"\
      \ title=\"Edit section: Other Objectives\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>So far you've made your way through creating a pretty\
      \ complete (if a little short) assault map, including a couple of different\
      \ types of objectives and all the little bits and pieces that go with them.\
      \ At this point you might be wondering a bit about what kind of options you\
      \ have beyond what's been shown here when you're putting together your own maps.\
      \ Well, here's some possibilities:</p>\n<h2><span class=\"mw-headline\" id=\"\
      Objective_Types\">Objective Types</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=2\"\
      \ title=\"Edit section: Objective Types\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The UT2004 game comes with several different types\
      \ of GameObjectives which are useful in Assault maps. Some of these can even\
      \ be combined with other mapping elements to produce even more possibilities:</p>\n\
      <h3><span class=\"mw-headline\" id=\"DestroyableObjective\">DestroyableObjective</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=3\"\
      \ title=\"Edit section: DestroyableObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These have been pretty well covered in <a href=\"\
      /Legacy:Assault_Mapping_Tutorial/Creating_A_Destroyable_Objective\" title=\"\
      Legacy:Assault Mapping Tutorial/Creating A Destroyable Objective\">Legacy:Assault\
      \ Mapping Tutorial/Creating A Destroyable Objective</a>. The obvious use for\
      \ these is doors, of course, but keep in mind that there's a lot of other things\
      \ that can be destroyed, and a lot of ways to destroy something. For example,\
      \ in our tutorial so far, we've been rather assuming that somebody was stupid\
      \ enough to make a power core with an overload sequence that couldn't be turned\
      \ off by the bad guys once they've dealt with the pesky invaders. To add a bit\
      \ of realism, we could add a DestroyableObjective to blow up the console after\
      \ one has flipped the lever, to prevent deactivation of the overload. For this\
      \ application, it could just be a quick (doesn't take much to blow it up) thing,\
      \ but little details like this can add a lot to the feel of a game.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"HoldObjective\">HoldObjective</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=4\"\
      \ title=\"Edit section: HoldObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Again, these have been pretty well covered in <a href=\"\
      /Legacy:Assault_Mapping_Tutorial/Continuing_The_Assault\" title=\"Legacy:Assault\
      \ Mapping Tutorial/Continuing The Assault\">Legacy:Assault Mapping Tutorial/Continuing\
      \ The Assault</a>. It is important to note, however, that there are a lot of\
      \ possible applications for this sort of objective. It's actually rather unfortunate\
      \ that these seem to have been relegated almost entirely to \"flip the lever\"\
      \ sort of goals, because they can do a lot more.</p>\n<p>Firstly, keep in mind\
      \ that while every HoldObjective has to have an associated mover to make it\
      \ work, this mover doesn't even have to be visible anywhere in the game world\
      \ (you can even stick it off in solid space somewhere). Also note that if your\
      \ mover is visible, there's nothing that says it has to have only two keyframes\
      \ or just a simple movement. There's also nothing that says it has to be small.\
      \ Be creative!</p>\n<p>There are also a couple of variations you can try to\
      \ add some spice to your HoldObjectives:</p>\n<dl>\n<dt>Change the Mover's Object-&gt;InitialState\
      \ property</dt>\n<dd>The normal way to use them is with an InitialState of TriggerAdvance,\
      \ but if you set it to TriggerControl instead, then the mover will automatically\
      \ start moving back to its \"home\" position when there isn't somebody standing\
      \ on the HoldObjective. This means that all of a sudden, the objective has become\
      \ a lot harder because as soon as the attacker who reached it gets killed (or\
      \ bumped off or whatever), the objective starts \"healing\" itself.</dd>\n<dt>Be\
      \ creative with where you put the HoldObjective</dt>\n<dd>For example, you can\
      \ put it on a moving platform (you can even put it on top of its own mover,\
      \ so that the objective becomes \"ride this platform from A to B\", etc), and\
      \ <a href=\"/Legacy:Attaching_Actors\" title=\"Legacy:Attaching Actors\">attach\
      \ it to the mover</a> so it moves with it.</dd>\n<dt>Use more than one mover</dt>\n\
      <dd>Nothing says that only one mover can have the same tag. Set up several movers\
      \ with the MoverTag tag and set them to do different things. Combine this with\
      \ the \"hidden mover\" trick and give them different durations and you have\
      \ a way to trigger events at various points throughout the completion process\
      \ (just make sure that only the mover which takes the longest is the one which\
      \ sends an event back to the HoldObjective to disable it). As an example, this\
      \ technique is used in AS-Convoy to trigger the spawning of C4 packs at timed\
      \ points while one is standing outside the door.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"TouchObjective\">TouchObjective</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=5\"\
      \ title=\"Edit section: TouchObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The ProximityObjective&gt;&gt;TouchObjective is pretty\
      \ simple: If a member of the attacking team touches it (enters its collision\
      \ cylinder), it's completed. This can be made a bit more sophisticated, however,\
      \ by changing the ProximityObjective-&gt;ConstraintPawnClass to, for example,\
      \ require that the attacker touching it be driving a particular type of vehicle\
      \ (\"Get the hellbender to the checkpoint!\"), etc.</p>\n<h3><span class=\"\
      mw-headline\" id=\"UseObjective\">UseObjective</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=6\"\
      \ title=\"Edit section: UseObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Again, the ProximityObjective&gt;&gt;UseObjective\
      \ is also pretty simple: An attacker must get to it and hit the \"use\" key\
      \ in order to complete it. The collision cylinder of this objective determines\
      \ how close somebody has to get before trying to \"use\" it.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"DestroyVehicleObjective\">DestroyVehicleObjective</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=7\"\
      \ title=\"Edit section: DestroyVehicleObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>As you might be able to guess from the name, this\
      \ objective type is used for cases where you want somebody to have to destroy\
      \ a particular vehicle in order to complete the objective. Unlike most objectives,\
      \ it doesn't matter where you place this one, and the way you use it isn't actually\
      \ in the objective actor but mostly in your vehicle factory.</p>\n<p>Now, we\
      \ haven't gotten to vehicles yet in the tutorial (but we'll get there in the\
      \ next section!), but suffice to say here that whenever you want a vehicle to\
      \ be in your assault map, you need to place an ASVehicleFactory actor where\
      \ you want it to spawn to generate the vehicle. Once you have the DestroyVehicleObjective\
      \ placed in your map, and you also have an ASVehicleFactory which is going to\
      \ spawn the vehicle you want destroyed, you need to <a href=\"/Legacy:Match_These_Tags\"\
      \ title=\"Legacy:Match These Tags\">match these tags</a>:</p>\n<ul>\n<li>DestroyVehicleObjective:\
      \ Events-&gt;Tag</li>\n<li>ASVehicleFactory: ASVehicleFactory-&gt;VehicleEvent</li>\n\
      </ul>\n<p>And the rest is pretty much automatic. Obviously, depending on your\
      \ application, you may want to trigger the factory to spawn the vehicle when\
      \ the objective becomes active, set it not to respawn when destroyed, etc. Obviously,\
      \ you will also want to set all the standard objective properties (event messages,\
      \ etc) on the DestroyVehicelObjective actor.</p>\n<p>Keep in mind that turrets\
      \ are also spawned using ASVehicleFactory actors, and thus can also be used\
      \ with a DestroyVehicleObjective (\"Destroy the plasma turret!\").</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"TriggeredObjective\">TriggeredObjective</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=8\"\
      \ title=\"Edit section: TriggeredObjective\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The TriggeredObjective is basically a \"generic\"\
      \ objective which can be used in many cases when you want to do something not\
      \ handled by any of the other objective types. This objective will be completed\
      \ when something somewhere triggers it (by generating an event which matches\
      \ its Events-&gt;Tag). The something somewhere can be a Trigger, or a ScriptedTrigger\
      \ (it can technically be other kinds of actors too, but if you do this bots\
      \ may get confused about how to attack the objective, so in general try to stick\
      \ to Triggers and ScriptedTriggers. Even when doing that, however, you may run\
      \ into problems if you get too complicated. Test thoroughly.).</p>\n<p>Note\
      \ that the HUD displays generated by a TriggeredObjective will show as being\
      \ wherever the TriggeredObjective actor is placed, so you will generally want\
      \ to place it near where the attackers will need to be to do whatever it is\
      \ that will generate the trigger event or things might get confusing.</p>\n\
      <p>It should be noted that a particular type of trigger actor which may be useful\
      \ in this context (and elsewhere) is the Triggers&gt;&gt;Trigger&gt;&gt;Trigger_ASTeam\
      \ actor. This is a basic (proximity) trigger which will only trigger if a member\
      \ of the correct assault team (attackers or defenders) touches it. You can choose\
      \ which team triggers the actor by setting its Trigger_ASTeam-&gt;AssaultTeam\
      \ property.</p>\n<h2><span class=\"mw-headline\" id=\"Using_Optional_Objectives\"\
      >Using Optional Objectives</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=9\"\
      \ title=\"Edit section: Using Optional Objectives\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>One last thing which isn't exactly a type of objective,\
      \ but is something to consider when choosing objectives for your map is the\
      \ use of optional objectives. These are objectives which do not have to be completed\
      \ in order to successfully complete the map, but can make things easier for\
      \ the attackers or are otherwise significant events. Examples of these include\
      \ the bridge control at the beginning of AS-Glacier, and the forward weapon\
      \ cache in AS-Convoy.</p>\n<p>In order to make an objective which is optional,\
      \ simply go into its properties and set its GameObjective-&gt;bOptionalObjective\
      \ property to True. As with other objectives, you can determine when optional\
      \ objectives become active using their DefensePriority setting, but they won't\
      \ prevent the next objective from becoming active as well.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Other_Neat_Tricks\">Other Neat Tricks</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=10\"\
      \ title=\"Edit section: Other Neat Tricks\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Flashing_Objective_Icons\"\
      >Flashing Objective Icons</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=11\"\
      \ title=\"Edit section: Flashing Objective Icons\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Is the flashing indicator displayed when somebody\
      \ gets close to your objective not quite right? You can change it by changing\
      \ the objective's GameObjective-&gt;ObjectiveTypeIcon to a different texture.\
      \ There are several useful animated icons available in the AS_FX_TX package\
      \ under the Icons group (use the FinalBlend ones) including a hellbender and\
      \ ion tank icon. Don't like those? Make your own!</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Flashing_Static_Meshes\">Flashing Static Meshes</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=12\"\
      \ title=\"Edit section: Flashing Static Meshes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Want to make it a bit clearer where people are supposed\
      \ to be going or what they're supposed to be doing? You can take a significant\
      \ piece of scenery (or two) and make it flash when a particular objective becomes\
      \ active (for example, a pad on the ground that indicates where to drive a vehicle,\
      \ or for a UseObjective, make the control panel (or whatever is supposed to\
      \ be used) flash). To do this, go into the objective's properties and set its\
      \ Assault-&gt;PhysicalObjectiveActorsTag to the tag of the static mesh(es) you\
      \ want to flash when that objective becomes active.</p>\n<hr />\n<p>(The next\
      \ section is currently being written. We apologize for the inconvenience.)</p>\n\
      <p><b>Return to the <a href=\"/Legacy:Assault_Mapping_Tutorial\" title=\"Legacy:Assault\
      \ Mapping Tutorial\">Assault Mapping Tutorial</a> main page</b></p>\n<hr />\n\
      <p>This tutorial was originally written and contributed to the Wiki community\
      \ by <a href=\"/Legacy:Foogod\" title=\"Legacy:Foogod\">Foogod</a>. Questions\
      \ and comments are welcome! Please either leave them on my personal page or\
      \ at the bottom of the relevant tutorial page. If you see something which is\
      \ wrong or unclear and you think needs some correction, please feel free to\
      \ edit the text directly (that's what the Wiki is for!), but please try to keep\
      \ the tutorial flow intact (no thread discussions in the middle of the tutorial\
      \ text, please).</p>\n<p>Note: To reduce clutter, comments on the tutorial pages\
      \ will be periodically moved to the <a href=\"/Legacy:Assault_Mapping_Tutorial/Discussion\"\
      \ title=\"Legacy:Assault Mapping Tutorial/Discussion\">Legacy:Assault Mapping\
      \ Tutorial/Discussion</a> page. Look there for older comments and thread discussions.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Comments:\">Comments:</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Assault_Mapping_Tutorial/Other_Objectives?section=13\"\
      \ title=\"Edit section: Comments:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.058 seconds\n\
      Real time usage: 0.100 seconds\nPreprocessor visited node count: 81/1000000\n\
      Preprocessor generated node count: 136/1000000\nPost‐expand include size: 150/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:490-0!*!0!!en!*!* and\
      \ timestamp 20221118152330 and revision id 1560\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Continuing The Assault"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Attaching Actors"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Discussion"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Creating A Destroyable Objective"
  - ns: 100
    exists: true
    name: "Legacy:Foogod"
  - ns: 100
    exists: true
    name: "Legacy:Match These Tags"
  - ns: 100
    exists: true
    name: "Legacy:Assault Mapping Tutorial/Adding Vehicles And Turrets"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Other Objectives"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 474
    anchor: "Other_Objectives"
  - toclevel: 1
    level: "2"
    line: "Objective Types"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 887
    anchor: "Objective_Types"
  - toclevel: 2
    level: "3"
    line: "DestroyableObjective"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 1112
    anchor: "DestroyableObjective"
  - toclevel: 2
    level: "3"
    line: "HoldObjective"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 1962
    anchor: "HoldObjective"
  - toclevel: 2
    level: "3"
    line: "TouchObjective"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 4275
    anchor: "TouchObjective"
  - toclevel: 2
    level: "3"
    line: "UseObjective"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 4701
    anchor: "UseObjective"
  - toclevel: 2
    level: "3"
    line: "DestroyVehicleObjective"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 4973
    anchor: "DestroyVehicleObjective"
  - toclevel: 2
    level: "3"
    line: "TriggeredObjective"
    number: "2.6"
    index: "8"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 6458
    anchor: "TriggeredObjective"
  - toclevel: 1
    level: "2"
    line: "Using Optional Objectives"
    number: "3"
    index: "9"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 7834
    anchor: "Using_Optional_Objectives"
  - toclevel: 1
    level: "2"
    line: "Other Neat Tricks"
    number: "4"
    index: "10"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 8663
    anchor: "Other_Neat_Tricks"
  - toclevel: 2
    level: "3"
    line: "Flashing Objective Icons"
    number: "4.1"
    index: "11"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 8686
    anchor: "Flashing_Objective_Icons"
  - toclevel: 2
    level: "3"
    line: "Flashing Static Meshes"
    number: "4.2"
    index: "12"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 9119
    anchor: "Flashing_Static_Meshes"
  - toclevel: 1
    level: "2"
    line: "Comments:"
    number: "5"
    index: "13"
    fromtitle: "Legacy:Assault_Mapping_Tutorial/Other_Objectives"
    byteoffset: 10624
    anchor: "Comments:"
  displaytitle: "Legacy:Assault Mapping Tutorial/Other Objectives"
  iwlinks: []
  wikitext:
    text: "----\n\nThis page is a section of the [[Legacy:Assault Mapping Tutorial|Assault\
      \ Mapping Tutorial]].  If you have arrived here from some other place, this\
      \ page will likely make more sense if you start at the above link and read the\
      \ tutorial through from beginning to end.\n\n'''Previous Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Continuing\
      \ The Assault]]'''\n\n'''Next Section: [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Adding\
      \ Vehicles And Turrets]] ''(still being written)''\n\n----\n\n==Other Objectives==\n\
      \nSo far you've made your way through creating a pretty complete (if a little\
      \ short) assault map, including a couple of different types of objectives and\
      \ all the little bits and pieces that go with them.  At this point you might\
      \ be wondering a bit about what kind of options you have beyond what's been\
      \ shown here when you're putting together your own maps.  Well, here's some\
      \ possibilities:\n\n==Objective Types==\n\nThe UT2004 game comes with several\
      \ different types of GameObjectives which are useful in Assault maps.  Some\
      \ of these can even be combined with other mapping elements to produce even\
      \ more possibilities:\n\n===DestroyableObjective===\n\nThese have been pretty\
      \ well covered in [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Creating A Destroyable\
      \ Objective]].  The obvious use for these is doors, of course, but keep in mind\
      \ that there's a lot of other things that can be destroyed, and a lot of ways\
      \ to destroy something.  For example, in our tutorial so far, we've been rather\
      \ assuming that somebody was stupid enough to make a power core with an overload\
      \ sequence that couldn't be turned off by the bad guys once they've dealt with\
      \ the pesky invaders.  To add a bit of realism, we could add a DestroyableObjective\
      \ to blow up the console after one has flipped the lever, to prevent deactivation\
      \ of the overload.  For this application, it could just be a quick (doesn't\
      \ take much to blow it up) thing, but little details like this can add a lot\
      \ to the feel of a game.\n\n===HoldObjective===\n\nAgain, these have been pretty\
      \ well covered in [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Continuing The Assault]].\
      \  It is important to note, however, that there are a lot of possible applications\
      \ for this sort of objective.  It's actually rather unfortunate that these seem\
      \ to have been relegated almost entirely to \"flip the lever\" sort of goals,\
      \ because they can do a lot more.\n\nFirstly, keep in mind that while every\
      \ HoldObjective has to have an associated mover to make it work, this mover\
      \ doesn't even have to be visible anywhere in the game world (you can even stick\
      \ it off in solid space somewhere).  Also note that if your mover is visible,\
      \ there's nothing that says it has to have only two keyframes or just a simple\
      \ movement.  There's also nothing that says it has to be small.  Be creative!\n\
      \nThere are also a couple of variations you can try to add some spice to your\
      \ HoldObjectives:\n\n; Change the Mover's Object->InitialState property: The\
      \ normal way to use them is with an InitialState of TriggerAdvance, but if you\
      \ set it to TriggerControl instead, then the mover will automatically start\
      \ moving back to its \"home\" position when there isn't somebody standing on\
      \ the HoldObjective.  This means that all of a sudden, the objective has become\
      \ a lot harder because as soon as the attacker who reached it gets killed (or\
      \ bumped off or whatever), the objective starts \"healing\" itself.\n; Be creative\
      \ with where you put the HoldObjective: For example, you can put it on a moving\
      \ platform (you can even put it on top of its own mover, so that the objective\
      \ becomes \"ride this platform from A to B\", etc), and [[Legacy:Attaching Actors|attach\
      \ it to the mover]] so it moves with it.\n; Use more than one mover: Nothing\
      \ says that only one mover can have the same tag.  Set up several movers with\
      \ the MoverTag tag and set them to do different things.  Combine this with the\
      \ \"hidden mover\" trick and give them different durations and you have a way\
      \ to trigger events at various points throughout the completion process (just\
      \ make sure that only the mover which takes the longest is the one which sends\
      \ an event back to the HoldObjective to disable it).  As an example, this technique\
      \ is used in AS-Convoy to trigger the spawning of C4 packs at timed points while\
      \ one is standing outside the door.\n\n===TouchObjective===\n\nThe ProximityObjective>>TouchObjective\
      \ is pretty simple: If a member of the attacking team touches it (enters its\
      \ collision cylinder), it's completed.  This can be made a bit more sophisticated,\
      \ however, by changing the ProximityObjective->ConstraintPawnClass to, for example,\
      \ require that the attacker touching it be driving a particular type of vehicle\
      \ (\"Get the hellbender to the checkpoint!\"), etc.\n\n===UseObjective===\n\n\
      Again, the ProximityObjective>>UseObjective is also pretty simple: An attacker\
      \ must get to it and hit the \"use\" key in order to complete it.  The collision\
      \ cylinder of this objective determines how close somebody has to get before\
      \ trying to \"use\" it.\n\n===DestroyVehicleObjective===\n\nAs you might be\
      \ able to guess from the name, this objective type is used for cases where you\
      \ want somebody to have to destroy a particular vehicle in order to complete\
      \ the objective.  Unlike most objectives, it doesn't matter where you place\
      \ this one, and the way you use it isn't actually in the objective actor but\
      \ mostly in your vehicle factory.\n\nNow, we haven't gotten to vehicles yet\
      \ in the tutorial (but we'll get there in the next section!), but suffice to\
      \ say here that whenever you want a vehicle to be in your assault map, you need\
      \ to place an ASVehicleFactory actor where you want it to spawn to generate\
      \ the vehicle.  Once you have the DestroyVehicleObjective placed in your map,\
      \ and you also have an ASVehicleFactory which is going to spawn the vehicle\
      \ you want destroyed, you need to [[Legacy:Match These Tags|match these tags]]:\n\
      \n* DestroyVehicleObjective: Events->Tag\n* ASVehicleFactory: ASVehicleFactory->VehicleEvent\n\
      \nAnd the rest is pretty much automatic.  Obviously, depending on your application,\
      \ you may want to trigger the factory to spawn the vehicle when the objective\
      \ becomes active, set it not to respawn when destroyed, etc.  Obviously, you\
      \ will also want to set all the standard objective properties (event messages,\
      \ etc) on the DestroyVehicelObjective actor.\n\nKeep in mind that turrets are\
      \ also spawned using ASVehicleFactory actors, and thus can also be used with\
      \ a DestroyVehicleObjective (\"Destroy the plasma turret!\").\n\n===TriggeredObjective===\n\
      \nThe TriggeredObjective is basically a \"generic\" objective which can be used\
      \ in many cases when you want to do something not handled by any of the other\
      \ objective types.  This objective will be completed when something somewhere\
      \ triggers it (by generating an event which matches its Events->Tag).  The something\
      \ somewhere can be a Trigger, or a ScriptedTrigger (it can technically be other\
      \ kinds of actors too, but if you do this bots may get confused about how to\
      \ attack the objective, so in general try to stick to Triggers and ScriptedTriggers.\
      \  Even when doing that, however, you may run into problems if you get too complicated.\
      \  Test thoroughly.).\n\nNote that the HUD displays generated by a TriggeredObjective\
      \ will show as being wherever the TriggeredObjective actor is placed, so you\
      \ will generally want to place it near where the attackers will need to be to\
      \ do whatever it is that will generate the trigger event or things might get\
      \ confusing.\n\nIt should be noted that a particular type of trigger actor which\
      \ may be useful in this context (and elsewhere) is the Triggers>>Trigger>>Trigger_ASTeam\
      \ actor.  This is a basic (proximity) trigger which will only trigger if a member\
      \ of the correct assault team (attackers or defenders) touches it.  You can\
      \ choose which team triggers the actor by setting its Trigger_ASTeam->AssaultTeam\
      \ property.\n\n==Using Optional Objectives==\n\nOne last thing which isn't exactly\
      \ a type of objective, but is something to consider when choosing objectives\
      \ for your map is the use of optional objectives.  These are objectives which\
      \ do not have to be completed in order to successfully complete the map, but\
      \ can make things easier for the attackers or are otherwise significant events.\
      \  Examples of these include the bridge control at the beginning of AS-Glacier,\
      \ and the forward weapon cache in AS-Convoy.\n\nIn order to make an objective\
      \ which is optional, simply go into its properties and set its GameObjective->bOptionalObjective\
      \ property to True.  As with other objectives, you can determine when optional\
      \ objectives become active using their DefensePriority setting, but they won't\
      \ prevent the next objective from becoming active as well.\n\n==Other Neat Tricks==\n\
      \n===Flashing Objective Icons===\n\nIs the flashing indicator displayed when\
      \ somebody gets close to your objective not quite right?  You can change it\
      \ by changing the objective's GameObjective->ObjectiveTypeIcon to a different\
      \ texture.  There are several useful animated icons available in the AS_FX_TX\
      \ package under the Icons group (use the FinalBlend ones) including a hellbender\
      \ and ion tank icon.  Don't like those?  Make your own!\n\n===Flashing Static\
      \ Meshes===\n\nWant to make it a bit clearer where people are supposed to be\
      \ going or what they're supposed to be doing?  You can take a significant piece\
      \ of scenery (or two) and make it flash when a particular objective becomes\
      \ active (for example, a pad on the ground that indicates where to drive a vehicle,\
      \ or for a UseObjective, make the control panel (or whatever is supposed to\
      \ be used) flash).  To do this, go into the objective's properties and set its\
      \ Assault->PhysicalObjectiveActorsTag to the tag of the static mesh(es) you\
      \ want to flash when that objective becomes active.\n\n----\n\n(The next section\
      \ is currently being written.  We apologize for the inconvenience.)\n\n'''Return\
      \ to the [[Legacy:Assault Mapping Tutorial|Assault Mapping Tutorial]] main page'''\n\
      \n----\n\nThis tutorial was originally written and contributed to the Wiki community\
      \ by [[Legacy:Foogod|Foogod]].  Questions and comments are welcome!  Please\
      \ either leave them on my personal page or at the bottom of the relevant tutorial\
      \ page.  If you see something which is wrong or unclear and you think needs\
      \ some correction, please feel free to edit the text directly (that's what the\
      \ Wiki is for!), but please try to keep the tutorial flow intact (no thread\
      \ discussions in the middle of the tutorial text, please).\n\nNote: To reduce\
      \ clutter, comments on the tutorial pages will be periodically moved to the\
      \ [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Discussion]] page.  Look there for older\
      \ comments and thread discussions.\n\n==Comments:=="
  properties: []
  revId: 1560
name: "Legacy:Assault Mapping Tutorial/Other Objectives"
revision:
  revid: 1560
  parentid: 1561
  user: "64-110-209-1.regn.hsdb.sasknet.sk.ca"
  timestamp: 1150780002.000000000
  comment: "Linked Next Tutorial"
timestamp: 1668785011.634288000
