---
parse:
  title: "Legacy:BinarySearch"
  text:
    text: "<p>A Binary Search is a fast way of searching a <i>sorted</i> array.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#For_this_to_work:\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">For this to work:</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Algorithm\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Algorithm</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Code\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Code</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"For_this_to_work:\">For this to work:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:BinarySearch?section=1\" title=\"Edit section: For this\
      \ to work:\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>The array must be sorted in ascending order. <a href=\"/Legacy:QuickSort\"\
      \ title=\"Legacy:QuickSort\">QuickSort</a> is good for this.</li>\n<li>The array\
      \ to be searched is called MyArray.</li>\n<li>The Algorithm will return the\
      \ element number if SearchString is found, otherwise it will return -1.</li>\n\
      <li>The values Low and High represent the position range that is to be searched.</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Algorithm\">Algorithm</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:BinarySearch?section=2\" title=\"Edit section: Algorithm\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<ol>\n\
      <li>If High is smaller than Low produce -1 and quit the algorithm, as it has\
      \ not found what it was looking for</li>\n<li>Set Middle (the holder for the\
      \ number of the partition element) to (Low+High)/2 - which would be the midle\
      \ of the array.</li>\n<li>If MyArray[Middle] is equal to SearchString (You've\
      \ found it!) Return Middle and quit the algorithm.<br />\nelse, if SearchString\
      \ is smaller than MyArray[Middle] then set High to Middle - 1, altering the\
      \ range to be searched to the lower half of the current range.<br />\nelse,\
      \ if SearchString is larger than MyArray[Middle] then set Low to Middle + 1,\
      \ altering the range to be searched to the upper half of the current range.</li>\n\
      <li>Go back to 1.</li>\n</ol>\n<h2><span class=\"mw-headline\" id=\"Code\">Code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:BinarySearch?section=3\" title=\"Edit section: Code\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">Function</span> <span class=\"kw5\"\
      >Int</span> BinarySearch<span class=\"br0\">(</span><span class=\"kw5\">Int</span>\
      \ Low, <span class=\"kw5\">Int</span> High, <span class=\"kw5\">String</span>\
      \ SearchString<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n<span\
      \ class=\"co1\">//  low is the lower index, high is the upper index</span>\n\
      <span class=\"co1\">//  of the region of array a that is to be sorted</span>\n\
      \ \n    <span class=\"kw1\">Local</span> <span class=\"kw5\">Int</span> Middle;\n\
      \ \n    <span class=\"kw2\">while</span> <span class=\"br0\">(</span>Low <span\
      \ class=\"sy0\">&lt;=</span> High<span class=\"br0\">)</span> <span class=\"\
      co1\">//only run while low is less than or equal to high.</span>\n        <span\
      \ class=\"br0\">{</span>\n        Middle <span class=\"sy0\">=</span> <span\
      \ class=\"br0\">(</span>Low <span class=\"sy0\">+</span> High<span class=\"\
      br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>; <span\
      \ class=\"co1\">//Set 'Middle' to be some midpoint</span>\n \n        <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>MyArray<span class=\"\
      br0\">[</span>Middle<span class=\"br0\">]</span> ~<span class=\"sy0\">=</span>\
      \ SearchString<span class=\"br0\">)</span> <span class=\"co1\">//if its found,\
      \ return the array element</span>\n            <span class=\"kw2\">Return</span>\
      \ Middle;\n \n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>MyArray<span\
      \ class=\"br0\">[</span>Middle<span class=\"br0\">]</span> <span class=\"sy0\"\
      >&gt;</span> SearchString<span class=\"br0\">)</span> <span class=\"co1\">//if\
      \ the SearchString is less, adjust the 'high' value accordingly.</span>\n  \
      \          High <span class=\"sy0\">=</span> Middle <span class=\"sy0\">-</span>\
      \ <span class=\"nu0\">1</span>;\n        <span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>MyArray<span class=\"\
      br0\">[</span>Middle<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>\
      \ SearchString<span class=\"br0\">)</span> <span class=\"co1\">//if the SearchString\
      \ is more, adjust the 'low' value accordingly</span>\n            Low <span\
      \ class=\"sy0\">=</span> Middle <span class=\"sy0\">+</span> <span class=\"\
      nu0\">1</span>;\n        <span class=\"br0\">}</span>\n    <span class=\"kw2\"\
      >Return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>; <span\
      \ class=\"co1\">//if it fails, return -1.            </span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BinarySearch?section=4\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Open_Source\" title=\"Legacy:Open Source\">Open\
      \ Source</a></li>\n<li><a href=\"/Legacy:QuickSort\" title=\"Legacy:QuickSort\"\
      >QuickSort</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.035\
      \ seconds\nReal time usage: 0.037 seconds\nPreprocessor visited node count:\
      \ 27/1000000\nPreprocessor generated node count: 52/1000000\nPost‐expand include\
      \ size: 12/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:572-0!*!0!!en!*!*\
      \ and timestamp 20221118025011 and revision id 1751\n -->\n"
  categories:
  - sortkey: "BinarySearch"
    name: "Legacy_Algorithm"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  - ns: 100
    exists: true
    name: "Legacy:QuickSort"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "For this to work:"
    number: "1"
    index: "1"
    fromtitle: "Legacy:BinarySearch"
    byteoffset: 64
    anchor: "For_this_to_work:"
  - toclevel: 1
    level: "2"
    line: "Algorithm"
    number: "2"
    index: "2"
    fromtitle: "Legacy:BinarySearch"
    byteoffset: 406
    anchor: "Algorithm"
  - toclevel: 1
    level: "2"
    line: "Code"
    number: "3"
    index: "3"
    fromtitle: "Legacy:BinarySearch"
    byteoffset: 1096
    anchor: "Code"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "4"
    fromtitle: "Legacy:BinarySearch"
    byteoffset: 1950
    anchor: "Related_Topics"
  displaytitle: "Legacy:BinarySearch"
  iwlinks: []
  wikitext:
    text: "A Binary Search is a fast way of searching a ''sorted'' array.\n\n==For\
      \ this to work:==\n*The array must be sorted in ascending order. [[Legacy:QuickSort|QuickSort]]\
      \ is good for this.\n*The array to be searched is called MyArray.\n*The Algorithm\
      \ will return the element number if SearchString is found, otherwise it will\
      \ return -1.\n*The values Low and High represent the position range that is\
      \ to be searched.\n\n==Algorithm==\n\n# If High is smaller than Low produce\
      \ -1 and quit the algorithm, as it has not found what it was looking for\n#\
      \ Set Middle (the holder for the number of the partition element) to (Low+High)/2\
      \ - which would be the midle of the array.\n# If MyArray[Middle] is equal to\
      \ SearchString (You've found it!) Return Middle and quit the algorithm. <br\
      \ />else, if SearchString is smaller than MyArray[Middle] then set High to Middle\
      \ - 1, altering the range to be searched to the lower half of the current range.<br\
      \ />else, if SearchString is larger than MyArray[Middle] then set Low to Middle\
      \ + 1, altering the range to be searched to the upper half of the current range.\n\
      # Go back to 1.\n\n==Code==\n\n<uscript>\nFunction Int BinarySearch(Int Low,\
      \ Int High, String SearchString)\n{\n//  low is the lower index, high is the\
      \ upper index\n//  of the region of array a that is to be sorted\n\n    Local\
      \ Int Middle;\n\n    while (Low <= High) //only run while low is less than or\
      \ equal to high.\n        {\n        Middle = (Low + High) / 2; //Set 'Middle'\
      \ to be some midpoint\n    \n        if (MyArray[Middle] ~= SearchString) //if\
      \ its found, return the array element\n            Return Middle;\n\n      \
      \  if (MyArray[Middle] > SearchString) //if the SearchString is less, adjust\
      \ the 'high' value accordingly.\n            High = Middle - 1;\n        else\
      \ if (MyArray[Middle] < SearchString) //if the SearchString is more, adjust\
      \ the 'low' value accordingly\n            Low = Middle + 1;\n        }\n  \
      \  Return -1; //if it fails, return -1.            \n}\n</uscript>\n\n==Related\
      \ Topics==\n* [[Legacy:Open Source|Open Source]]\n* [[Legacy:QuickSort|QuickSort]]\n\
      \n[[Category:Legacy Algorithm|{{PAGENAME}}]]"
  properties: []
  revId: 1751
name: "Legacy:BinarySearch"
revision:
  revid: 1751
  parentid: 1753
  user: "El Muerte"
  timestamp: 1092905499.000000000
  comment: "*"
timestamp: 1668764870.709132000
