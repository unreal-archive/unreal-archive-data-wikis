---
parse:
  title: "Legacy:Basic AI Scripting Tutorial"
  text:
    text: "<p>This is a tutorial on UScripting a custom AI.</p>\n<p><b>This page is\
      \ under construction.</b></p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Overview\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Prerequisites\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Prerequisites</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"\
      ><a href=\"#Behavior_Design\"><span class=\"tocnumber\">3</span> <span class=\"\
      toctext\">Behavior Design</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#AI_Design_Plan\"><span class=\"tocnumber\">3.1</span> <span class=\"\
      toctext\">AI Design Plan</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#Provided_Animation_and_Sounds\"><span class=\"tocnumber\">3.2</span>\
      \ <span class=\"toctext\">Provided Animation and Sounds</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-6\"><a href=\"#AI_Design_Flow\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">AI Design Flow</span></a>\n<ul>\n\
      <li class=\"toclevel-3 tocsection-7\"><a href=\"#NaliCow_Behaviors\"><span class=\"\
      tocnumber\">3.3.1</span> <span class=\"toctext\"><b>NaliCow Behaviors</b></span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"\
      #Coding_Elements\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Coding Elements</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-9\"><a\
      \ href=\"#Animation_.26_Sound\"><span class=\"tocnumber\">4.1</span> <span class=\"\
      toctext\">Animation &amp; Sound</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"\
      ><a href=\"#Navigation\"><span class=\"tocnumber\">4.2</span> <span class=\"\
      toctext\">Navigation</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"\
      ><a href=\"#Movement\"><span class=\"tocnumber\">4.3</span> <span class=\"toctext\"\
      >Movement</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"\
      #Damage\"><span class=\"tocnumber\">4.4</span> <span class=\"toctext\">Damage</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#Death\"><span class=\"tocnumber\"\
      >4.5</span> <span class=\"toctext\">Death</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-14\"><a href=\"#Effects\"><span class=\"tocnumber\">4.6</span>\
      \ <span class=\"toctext\">Effects</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-15\"><a href=\"#Class_Construction\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Class Construction</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-16\"><a href=\"#NaliCow\"><span class=\"tocnumber\">5.1</span>\
      \ <span class=\"toctext\">NaliCow</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-17\"\
      ><a href=\"#Pawn_Default_Properties\"><span class=\"tocnumber\">5.1.1</span>\
      \ <span class=\"toctext\">Pawn Default Properties</span></a></li>\n<li class=\"\
      toclevel-3 tocsection-18\"><a href=\"#Pawn_Default_Methods\"><span class=\"\
      tocnumber\">5.1.2</span> <span class=\"toctext\">Pawn Default Methods</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-19\"><a href=\"#AIController_Properties\"\
      ><span class=\"tocnumber\">5.1.3</span> <span class=\"toctext\">AIController\
      \ Properties</span></a></li>\n<li class=\"toclevel-3 tocsection-20\"><a href=\"\
      #Final_Source_Code\"><span class=\"tocnumber\">5.1.4</span> <span class=\"toctext\"\
      >Final Source Code</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-21\"\
      ><a href=\"#NaliCowPoop\"><span class=\"tocnumber\">5.2</span> <span class=\"\
      toctext\">NaliCowPoop</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-22\"\
      ><a href=\"#BioGlob_Default_Properties\"><span class=\"tocnumber\">5.2.1</span>\
      \ <span class=\"toctext\">BioGlob Default Properties</span></a></li>\n<li class=\"\
      toclevel-3 tocsection-23\"><a href=\"#BioGlob_Default_Methods\"><span class=\"\
      tocnumber\">5.2.2</span> <span class=\"toctext\">BioGlob Default Methods</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-24\"><a href=\"#Final_Source_Code_2\"><span\
      \ class=\"tocnumber\">5.2.3</span> <span class=\"toctext\">Final Source Code</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-25\"><a href=\"\
      #Testing_and_Implementation\"><span class=\"tocnumber\">6</span> <span class=\"\
      toctext\">Testing and Implementation</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-26\"><a href=\"#Compiling\"><span class=\"tocnumber\">6.1</span>\
      \ <span class=\"toctext\">Compiling</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-27\"><a href=\"#Implementation\"><span class=\"tocnumber\">6.2</span>\
      \ <span class=\"toctext\">Implementation</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-28\"><a href=\"#Replication\"><span class=\"tocnumber\">6.3</span>\
      \ <span class=\"toctext\">Replication</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-29\"><a href=\"#Further_Development\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">Further Development</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-30\"><a href=\"#DrawScale_Adjustments\"><span\
      \ class=\"tocnumber\">7.1</span> <span class=\"toctext\">DrawScale Adjustments</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-31\"><a href=\"#Cow_and_Baby_Relationships\"\
      ><span class=\"tocnumber\">7.2</span> <span class=\"toctext\">Cow and Baby Relationships</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-32\"><a href=\"#bHasBaby_and_BabyCow\"\
      ><span class=\"tocnumber\">7.2.1</span> <span class=\"toctext\">bHasBaby and\
      \ BabyCow</span></a></li>\n<li class=\"toclevel-3 tocsection-33\"><a href=\"\
      #bStayClose_and_WanderRadius\"><span class=\"tocnumber\">7.2.2</span> <span\
      \ class=\"toctext\">bStayClose and WanderRadius</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-2 tocsection-34\"><a href=\"#Ridable_NaliCows\"><span class=\"\
      tocnumber\">7.3</span> <span class=\"toctext\">Ridable NaliCows</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-35\"><a href=\"#External_Links\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">External Links</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-36\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-37\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Overview\">Overview</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=1\" title=\"Edit section:\
      \ Overview\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This tutorial will detail re-construction of the NaliCow NPC for UT2004.\
      \ It was originally available in UT as a <a href=\"/Legacy:Cow\" title=\"Legacy:Cow\"\
      >Cow</a>, but this tutorial will revise its AI design as if it were new. The\
      \ stock meshes and sounds that are available will allow us to concentrate purely\
      \ on the AI that drives its behavior. We will start will a comprehensive behavior\
      \ design before coding the elements and constructing the custom classes that\
      \ will give this NPC life and then implement it in the game environment.</p>\n\
      <div class=\"center\">\n<div class=\"floatnone\"><a href=\"/File:Legacy_scriptedpawn.nalicows.jpeg\"\
      \ class=\"image\" title=\"The NaliCow and BabyCow from Unreal Tournament.\"\
      ><img alt=\"The NaliCow and BabyCow from Unreal Tournament.\" src=\"/w/images/Legacy_scriptedpawn.nalicows.jpeg\"\
      \ width=\"348\" height=\"121\" /></a></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Prerequisites\">Prerequisites</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=2\"\
      \ title=\"Edit section: Prerequisites\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Although creating only a simple AI for this NPC, this\
      \ will be an advanced tutorial that assumes a solid understanding of <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>. This\
      \ tutorial will assume you know how to <a href=\"/Legacy:Create_A_Subclass\"\
      \ title=\"Legacy:Create A Subclass\">Create A Subclass</a>, <a href=\"/Legacy:Set_Up_Package_Folders\"\
      \ title=\"Legacy:Set Up Package Folders\">Set up package folders</a>, <a href=\"\
      /Legacy:Launch_A_Local_Netgame\" title=\"Legacy:Launch A Local Netgame\">Launch\
      \ a local netgame</a> and <a href=\"/Legacy:Add_EditPackage\" title=\"Legacy:Add\
      \ EditPackage\">Add EditPackage</a>. In terms of <a href=\"/Legacy:Making_Mods\"\
      \ title=\"Legacy:Making Mods\">Making Mods</a>, this tutorial will assume that\
      \ you know about <a href=\"/Legacy:Replication\" title=\"Legacy:Replication\"\
      >Replication</a>, <a href=\"/Legacy:Coding_Guidelines\" title=\"Legacy:Coding\
      \ Guidelines\">Coding Guidelines</a> and <a href=\"/Legacy:Compiling_With_UCC\"\
      \ title=\"Legacy:Compiling With UCC\">Compiling with UCC</a>.</p>\n<p>Even if\
      \ you aren't confident in your understanding of these many topics, this tutorial\
      \ will still serve as an overview discussion of designing a simple <a href=\"\
      /Legacy:Artificial_Intelligence\" title=\"Legacy:Artificial Intelligence\">Artificial\
      \ Intelligence</a> construct.</p>\n<h2><span class=\"mw-headline\" id=\"Behavior_Design\"\
      >Behavior Design</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=3\" title=\"\
      Edit section: Behavior Design\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>We will begin by defining a design for the NaliCow's\
      \ behavior.</p>\n<h3><span class=\"mw-headline\" id=\"AI_Design_Plan\">AI Design\
      \ Plan</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=4\" title=\"\
      Edit section: AI Design Plan\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The behavior design is the roadmap for our AI scripting,\
      \ giving us a clear set of coding elements to complete before it's AI takes\
      \ shape.</p>\n<p>Although there are many different methods of designing AI (including\
      \ sophisticated methods such as neural networks and artificial evolution), with\
      \ a simple creature like this, our tutorial will follow the most basic and standard\
      \ method used by all stock Unreal AI; conditional decision-making. This is the\
      \ method that takes stimuli as a constant condition or trigger to either do\
      \ this or that; also known as \"if this, then do that\", or \"if-then\" decision-making.\
      \ A common example of this kind of AI is the AI Script in a <a href=\"/Legacy:ScriptedSequence\"\
      \ title=\"Legacy:ScriptedSequence\">ScriptedSequence</a>, but even Bots use\
      \ this method, just in an extremely complex form.</p>\n<p>We have some features\
      \ of our NPC already defined for us; it's model, textures, animation and sounds.\
      \ Normally, a custom character would be started by defining it's purpose or\
      \ goal and then design those features around it. But for this behavior design,\
      \ we will work \"backwards\"; starting with those features and finding the purpose\
      \ and behavior design that fits it.</p>\n<p>With that in mind, we will first\
      \ look at what we have to work with.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Provided_Animation_and_Sounds\">Provided Animation and Sounds</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=5\"\
      \ title=\"Edit section: Provided Animation and Sounds\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>There are plenty of stock\
      \ animations provided in UT2004 for the NaliCow even though there is no <a href=\"\
      /Legacy:Monster\" title=\"Legacy:Monster\">Monster</a> subclass for it. With\
      \ these animation sequences, we can easily construct an AI design flow that\
      \ will convey a creature of convincing realism and range of ability. The following\
      \ is a list of the NaliCow animations found the <a href=\"/Legacy:Mesh_Browser\"\
      \ title=\"Legacy:Mesh Browser\">Mesh Browser</a>. The number of animation frames\
      \ in the sequence are shown in brackets. <i>Loop</i> indicates the last frame\
      \ matches a common start pose of all other <i>Loop</i> animations. <i>SingleFrame</i>\
      \ is just one frame, a pose. <i>Sequence</i> indicates an animation sequence\
      \ that is meant to only play through once and does not end on the common starting\
      \ pose of the <i>Loop</i> animations.</p>\n<ul>\n<li><b>root</b> [20]&#160;:\
      \ Loop. Bends down to graze.</li>\n<li><b>Breath</b> [6]&#160;: Loop. Breathes.\
      \ Prone.</li>\n<li><b>Chew</b> [7]&#160;: Loop. Chews.</li>\n<li><b>Poop</b>\
      \ [20]&#160;: Loop. Lifts tail and poops.</li>\n<li><b>Shake</b> [18]&#160;:\
      \ Loop. Shakes head, as if shaking off water or dust.</li>\n<li><b>Swish</b>\
      \ [20]&#160;: Loop. Swishes it's tail from side to side and stamps foot.</li>\n\
      <li><b>Walk</b> [15]&#160;: Loop. A walk cycle.</li>\n<li><b>Run</b> [10]&#160;:\
      \ Loop. A run cycle.</li>\n<li><b>Landed</b> [1]&#160;: Single frame. Indicates\
      \ recovery from a fall.</li>\n<li><b>TakeHit1</b> [1]&#160;: Single frame. Indicates\
      \ recovery from damage.</li>\n<li><b>TakeHit2</b> [1]&#160;: Single frame. Indicates\
      \ recovery from more damage.</li>\n<li><b>BigHit</b> [1]&#160;: Single frame.\
      \ Indicates recovery from a lot of damage. (both feet in the air)</li>\n<li><b>Dead</b>\
      \ [23]&#160;: Sequence. Indicates a slow death, slumping to the side.</li>\n\
      <li><b>Dead2</b> [13]&#160;: Sequence. Death animation, starting from <b>TakeHit2</b>,\
      \ slumping forward.</li>\n<li><b>Dead3</b> [23]&#160;: Sequence. Severe death,\
      \ starting from <b>BigHit</b>, showing a complete back flip.</li>\n</ul>\n<p>These\
      \ stock sounds are available in the <a href=\"/Legacy:Sound_Browser\" title=\"\
      Legacy:Sound Browser\">Sound Browser</a>, under <tt>SkaarjPack_rc</tt>, that\
      \ relate to the NaliCow:</p>\n<ul>\n<li><b>ambCow</b>&#160;: Breath of a NaliCow.</li>\n\
      <li><b>cMoo1c</b>&#160;: NaliCow call. (sounds suspiciously like a Doom creature's\
      \ death cry)</li>\n<li><b>cMoo2c</b>&#160;: Another call.</li>\n<li><b>DeathC1c</b>&#160;:\
      \ \"Urgent\" call.</li>\n<li><b>DeathC2c</b>&#160;: Another \"urgent\" call.</li>\n\
      <li><b>injurC1c</b>&#160;: Pained call.</li>\n<li><b>injurC2c</b>&#160;: A call\
      \ that sounds a little like, \"Ow\".</li>\n<li><b>munch1p</b>&#160;: A biting\
      \ sound (normally used for the SkaarjPupae).</li>\n<li><b>shakeC</b>&#160;:\
      \ Ears flapping as the NaliCow shakes.</li>\n<li><b>swishC</b>&#160;: Swishing\
      \ sound of the NaliCow tail.</li>\n<li><b>Thump</b>&#160;: Generic hard landing\
      \ sound.</li>\n<li><b>WalkC</b>&#160;: NaliCow footstep.</li>\n</ul>\n<h3><span\
      \ class=\"mw-headline\" id=\"AI_Design_Flow\">AI Design Flow</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=6\"\
      \ title=\"Edit section: AI Design Flow\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>With these pieces, we can begin to analyze the potential\
      \ behavior and assemble the design in such a way that we understand how one\
      \ piece leads to the next.</p>\n<ul>\n<li>Some of these pieces indicate behavior\
      \ that's initiated by the NaliCow; such as Grazing, Swishing, Pooping. Others\
      \ are behaviors that are in reaction to external stimuli; such as TakeHit or\
      \ Death.</li>\n<li>We know we will want the NaliCow to navigate from place to\
      \ place. Some decision making will involve where to go and whether to walk or\
      \ run. Running away from danger will serve a self-preservation purpose while\
      \ walking toward a goal, such as another NaliCow, may serve to support the idea\
      \ these are real creatures (an immersion purpose) through a percieved flocking\
      \ behavior.</li>\n<li>Obvious connections can be made between the animation\
      \ sequences and the sounds that correspond to them. We will want to have these\
      \ sounds play whenever those animations are played. Other connections can be\
      \ made between some of these pieces, where one will likely lead to another;\
      \ such as Grazing leading to Chewing, a TakeHit leading to either Death or Run,\
      \ etc.</li>\n<li>One piece of this behavior, Pooping, appears to need an extra\
      \ effect; the NaliCowPoop itself. It will have to be an extra actor class with\
      \ it's own code.</li>\n</ul>\n<p>We can see a prone state, where the <b>Breath</b>\
      \ animation and <b>ambCow</b> sound would be looped. This appears to be a good\
      \ place to start. We will be able to branch out from this prone state to any\
      \ other looping animation sequence and corresponding sound, building up the\
      \ behavior design flow, piece by piece.</p>\n<p>The following chart attempts\
      \ to describe all the possible behaviors, their animation, their sound and what\
      \ behaviors might preceed and follow them.</p>\n<table class=\"wikitable\">\n\
      <tr>\n<td colspan=\"12\" style=\"text-align: center\">\n<h4><span class=\"mw-headline\"\
      \ id=\"NaliCow_Behaviors\"><b>NaliCow Behaviors</b></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=7\"\
      \ title=\"Edit section: NaliCow Behaviors\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:\
      \ center\"><b>1. Prone</b></td>\n<td style=\"text-align: center\"><b>2. Graze</b></td>\n\
      <td style=\"text-align: center\"><b>3. Chew</b></td>\n<td style=\"text-align:\
      \ center\"><b>4. Poop</b></td>\n<td style=\"text-align: center\"><b>5. Shake</b></td>\n\
      <td style=\"text-align: center\"><b>6. Swish</b></td>\n<td style=\"text-align:\
      \ center\"><b>7. Walk</b></td>\n<td style=\"text-align: center\"><b>8. Run</b></td>\n\
      <td style=\"text-align: center\"><b>9. Land</b></td>\n<td style=\"text-align:\
      \ center\"><b>10. TakeHit</b></td>\n<td style=\"text-align: center\"><b>11.\
      \ Dying</b></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><b>Animation</b></td>\n\
      <td>Breath</td>\n<td>root</td>\n<td>Chew</td>\n<td>Poop</td>\n<td>Shake</td>\n\
      <td>Swish</td>\n<td>Walk</td>\n<td>Run</td>\n<td>Landed</td>\n<td>TakeHit1,\
      \ 2 or BigHit</td>\n<td>Dead, 2, 3</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ left\"><b>Sound</b></td>\n<td>ambCow</td>\n<td>munch1p</td>\n<td>munch1p</td>\n\
      <td>cMoo1c, 2c</td>\n<td>shakeC</td>\n<td>swishC</td>\n<td>WalkC</td>\n<td>WalkC</td>\n\
      <td>Thump</td>\n<td>injurC1c, 2c</td>\n<td>DeathC1c, 2c</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: left\"><b>Lead From</b></td>\n<td>1-7</td>\n<td>1-7</td>\n\
      <td>2</td>\n<td>1-7</td>\n<td>1-7</td>\n<td>1-7</td>\n<td>1-10</td>\n<td>7-10</td>\n\
      <td>7 or 8**</td>\n<td>1-9***</td>\n<td>10</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ left\"><b>Lead To</b></td>\n<td>1-7</td>\n<td>3</td>\n<td>1-7</td>\n<td>1-7*</td>\n\
      <td>1-7</td>\n<td>1-7</td>\n<td>1-8</td>\n<td>7-8</td>\n<td>1, 5, 7</td>\n<td>7,\
      \ 8, 11</td>\n<td><i>None</i>†</td>\n</tr>\n<tr>\n<td colspan=\"12\" style=\"\
      text-align: center\">* – <i>A NaliCowPoop actor should be spawned during this\
      \ behavior.</i></td>\n</tr>\n<tr>\n<td colspan=\"12\" style=\"text-align: center\"\
      >** – <i>This behavior will activate immeditately upon landing from a fall,\
      \ without waiting for animation loops to end..</i></td>\n</tr>\n<tr>\n<td colspan=\"\
      12\" style=\"text-align: center\">*** – <i>This behavior will activate immeditately\
      \ upon taking damage, without waiting for animation loops to end.</i></td>\n\
      </tr>\n<tr>\n<td colspan=\"12\" style=\"text-align: center\">† – <i>The NaliCow\
      \ carcass will DeRes and disappear a short time after this behavior.</i></td>\n\
      </tr>\n</table>\n<h2><span class=\"mw-headline\" id=\"Coding_Elements\">Coding\
      \ Elements</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=8\" title=\"\
      Edit section: Coding Elements\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>With the AI Design Flow sketched out, we will be able\
      \ to code the AI behaviors appropriately. But first, we will have to complete\
      \ the code that will handle the basic tasks these behaviors will have to perform.\
      \ These tasks include animation, sound, movement, damage, death, etc.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Animation_.26_Sound\">Animation &amp; Sound</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=9\" title=\"Edit section:\
      \ Animation &amp; Sound\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>As shown in the above chart, animation sequences and sounds are linked together.\
      \ A couple exceptions to that rule include animations that can play one of a\
      \ few available sounds and actions that play one animation, but more than one\
      \ sound, such as Walk or Run, where two footsteps should be heard. We will use\
      \ the animation sequence as a handle for the action and have that dictate the\
      \ possible sounds.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// DisplayBehavior() takes a BehaviorIndex value and sets the appropriate\
      \ animation and sound.</span>\n<span class=\"co1\">// Degrees of behavior will\
      \ be taken into account via an optional arguement.</span>\n<span class=\"kw1\"\
      >function</span> DisplayBehavior<span class=\"br0\">(</span> <span class=\"\
      kw5\">int</span> BehaviorIndex, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">int</span> Degree <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">switch</span><span class=\"br0\">(</span> BehaviorIndex\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> :\n            Acting<span class=\"br0\">(</span> <span\
      \ class=\"st0\">'Breath'</span>, <span class=\"kw5\">sound</span><span class=\"\
      st0\">'SkaarjPack_rc.ambCow'</span>, <span class=\"kw6\">true</span> <span class=\"\
      br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"\
      br0\">)</span> : \n            Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'root'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.munch1p'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> : \n     \
      \       Acting<span class=\"br0\">(</span> <span class=\"st0\">'Chew'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.munch1p'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : \n     \
      \       <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"br0\"\
      >)</span>\n                Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'Poop'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.cMoo1c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span>\n                Acting<span class=\"br0\"\
      >(</span> <span class=\"st0\">'Poop'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.cMoo2c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">break</span>;\n\
      \        <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">5</span><span class=\"br0\">)</span> : \n            Acting<span class=\"\
      br0\">(</span> <span class=\"st0\">'Shake'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.shakeC'</span>, <span class=\"kw6\">true</span>\
      \ <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span\
      \ class=\"br0\">)</span> : \n            Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Swish'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.swishC'</span>, <span class=\"kw6\">true</span>\
      \ <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span\
      \ class=\"br0\">)</span> : \n            Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Walk'</span>, <span class=\"kw5\">sound</span><span class=\"\
      st0\">'SkaarjPack_rc.WalkC'</span>, <span class=\"kw6\">true</span> <span class=\"\
      br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"\
      br0\">)</span> : \n            Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'Run'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.WalkC'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> : \n     \
      \       Acting<span class=\"br0\">(</span> <span class=\"st0\">'Landed'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.Thump'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> : \n    \
      \        <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Degree <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\"\
      >)</span>\n                Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'TakeHit'</span>, <span class=\"kw5\">sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.cMoo1c'</span>, <span class=\"kw6\">false</span> <span class=\"\
      br0\">)</span>;\n            <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> Degree <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">2</span> <span class=\"br0\">)</span>\n              \
      \  Acting<span class=\"br0\">(</span> <span class=\"st0\">'TakeHit2'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.injurC1c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Degree <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>\
      \ <span class=\"br0\">)</span>\n                Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'BigHit'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.injurC2c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">break</span>;\n\
      \        <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">11</span><span class=\"br0\">)</span> : \n            <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> Degree <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">2</span> <span class=\"br0\">)</span>\n              \
      \  Acting<span class=\"br0\">(</span> <span class=\"st0\">'Dead'</span>, <span\
      \ class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.cMoo2c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Degree <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>\
      \ <span class=\"br0\">)</span>\n                Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Dead2'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.DeathC1c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Degree <span class=\"\
      sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>\n\
      \                Acting<span class=\"br0\">(</span> <span class=\"st0\">'Dead3'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.DeathC2c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">break</span>;\n        <span class=\"kw1\">default</span>\
      \ : \n            Acting<span class=\"br0\">(</span> <span class=\"st0\">'Breath'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.ambCow'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n     <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Acting() loops the given animation sequence\
      \ name and plays the given sound.</span>\n<span class=\"co1\">// For Replication\
      \ purposes, animation is normally looped.  Sequences may be interupted each\
      \ AnimEnd().</span>\n<span class=\"kw1\">function</span> Acting<span class=\"\
      br0\">(</span> <span class=\"kw5\">name</span> Anim, <span class=\"kw5\">sound</span>\
      \ Soundname, <span class=\"kw5\">bool</span> bLoop <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> bLoop <span class=\"br0\">)</span>\n        <span class=\"kw4\"\
      >LoopAnim</span><span class=\"br0\">(</span> Anim, <span class=\"nu0\">1.0</span>,\
      \ <span class=\"nu0\">0.1</span> <span class=\"br0\">)</span>;\n    <span class=\"\
      kw2\">else</span>\n        <span class=\"kw4\">PlayAnim</span><span class=\"\
      br0\">(</span> Anim, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.1</span>\
      \ <span class=\"br0\">)</span>;\n    SimAnim.<span class=\"me0\">AnimSequence</span>\
      \ <span class=\"sy0\">=</span> Anim;\n    SimAnim.<span class=\"me0\">AnimRate</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> bLoop <span class=\"br0\">)</span>\n\
      \        SimAnim.<span class=\"me0\">bAnimLoop</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n    <span class=\"kw2\">else</span>\n  \
      \      SimAnim.<span class=\"me0\">bAnimLoop</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n\tSimAnim.<span class=\"me0\">TweenRate</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span>;\n    <span class=\"\
      kw4\">PlaySound</span><span class=\"br0\">(</span> Soundname, <span class=\"\
      kw7\">SLOT_Misc</span> <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Navigation\">Navigation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=10\" title=\"Edit\
      \ section: Navigation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This is our first decision-making code. We will need our AI to decide where\
      \ to go and what to look at. Controllers use MoveTarget and ViewTarget by default.\
      \ They are the Destination and Focus for the controller. We will simply alter\
      \ those properties based on desires of self-preservation.</p>\n<p>First, if\
      \ we have reached our destination, we want to be able to select another one\
      \ reasonably. Next, if another Actor has hurt our NPC, we want our AI to avoid\
      \ it. So we will do checks to make sure the selected destination or focus is\
      \ not the Actor that hurt our NPC. We will also avoid any Actor who Bumps or\
      \ Touches our NPC, as if it had hurt it. If the NPC is Bumped, Touched or Triggered,\
      \ we will have our NPC Walk away, or if already Walking, perhaps begin to Run.\
      \ Finally, we want to know if our NPC is stuck, trying to reach a destination\
      \ but not able to progress from it's current Location. We will do a simple check\
      \ to ensure it makes progress when it Walks or Runs, and if not, we will select\
      \ another destination.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span>\t\t<span class=\"kw9\">Actor</span>\t\tHurtingActor;\t<span\
      \ class=\"co1\">// An Actor to get away from.</span>\n<span class=\"kw1\">var</span>\t\
      \t<span class=\"kw5\">vector</span>\t\tOldLocation;\t<span class=\"co1\">//\
      \ Used to determine if stuck.</span>\n \n<span class=\"co1\">// PostBeginPlay()\
      \ is originally defined in Actor().</span>\n<span class=\"co1\">// We will use\
      \ it to make sure an AIController is spawned for our NaliCow.</span>\n<span\
      \ class=\"kw1\">event</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> ControllerClass\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw9\">Controller</span> <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n\t\t<span class=\"kw9\">Controller</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">spawn</span><span class=\"br0\">(</span> ControllerClass\
      \ <span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw9\">Controller</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Possess</span><span class=\"br0\"\
      >(</span> <span class=\"kw6\">self</span> <span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"co1\">// ReachedDestination() is\
      \ originally defined in Pawn.</span>\n<span class=\"co1\">// MoveTarget and\
      \ other relevant properties are defined in Controller.</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> ReachedDestination<span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Actor</span> OldTarget <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">local</span>\
      \   <span class=\"kw9\">Actor</span>   NewTarget, A;\n    <span class=\"kw1\"\
      >local</span>   <span class=\"kw9\">NavigationPoint</span>    NP;\n \n    <span\
      \ class=\"kw2\">forEach</span> <span class=\"kw2\">VisibleActors</span><span\
      \ class=\"br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'Actor'</span>, A <span class=\"br0\">)</span>\n        <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> A <span class=\"sy0\">!=</span> OldTarget\
      \ <span class=\"sy0\">&amp;&amp;</span> A <span class=\"sy0\">!=</span> HurtingActor\
      \ <span class=\"br0\">)</span>\n            NewTarget <span class=\"sy0\">=</span>\
      \ A;\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> A <span\
      \ class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"br0\"\
      >)</span>\n        <span class=\"kw2\">forEach</span> <span class=\"kw2\">RadiusActors</span><span\
      \ class=\"br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'NavigationPoint'</span>, NP, <span class=\"nu0\">1024</span> <span class=\"\
      br0\">)</span>\n            <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.5</span> <span class=\"sy0\">&amp;&amp;</span> NP <span class=\"sy0\">!=</span>\
      \ OldTarget <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw4\">FastTrace</span><span\
      \ class=\"br0\">(</span> NP.<span class=\"kw7\">Location</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>\n            <span class=\"br0\"\
      >{</span>\n                A <span class=\"sy0\">=</span> NP;\n            \
      \    NewTarget <span class=\"sy0\">=</span> A;\n            <span class=\"br0\"\
      >}</span>\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n        <span class=\"kw2\">forEach</span> <span class=\"kw2\"\
      >AllActors</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Actor'</span>, A <span class=\"br0\">)</span>\n           \
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\"\
      >&amp;&amp;</span> A <span class=\"sy0\">!=</span> HurtingActor <span class=\"\
      sy0\">&amp;&amp;</span> A <span class=\"sy0\">!=</span> OldTarget <span class=\"\
      sy0\">&amp;&amp;</span> A <span class=\"sy0\">!=</span> <span class=\"kw6\"\
      >self</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>A.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'Controller'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n                NewTarget\
      \ <span class=\"sy0\">=</span> A;\n \n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> NewTarget <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span>\
      \ <span class=\"sy0\">=</span> NewTarget;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">=</span> NewTarget.<span\
      \ class=\"kw7\">Location</span>;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> NewTarget.<span\
      \ class=\"kw7\">Location</span>;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Focus</span> <span class=\"sy0\">=</span> NewTarget;\n    <span\
      \ class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\n    <span class=\"\
      br0\">{</span>\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ HurtingActor <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n     \
      \       <span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw7\"\
      >Location</span> <span class=\"sy0\">-</span> HurtingActor.<span class=\"kw7\"\
      >Location</span> <span class=\"br0\">)</span>;\n            <span class=\"kw9\"\
      >Controller</span>.<span class=\"me0\">FocalPoint</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n\
      \        <span class=\"br0\">}</span>\n        <span class=\"kw2\">else</span>\n\
      \        <span class=\"br0\">{</span>\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">=</span> <span class=\"\
      kw5\">vector</span><span class=\"br0\">(</span> <span class=\"kw7\">Rotation</span>\
      \ <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\"\
      >(</span> <span class=\"nu0\">512</span> <span class=\"sy0\">*</span> <span\
      \ class=\"kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">512</span> <span\
      \ class=\"br0\">)</span>;\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Trigger() is originally defined in Actor.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">Trigger</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Actor</span> Other, <span class=\"\
      kw9\">Pawn</span> EventInstigator <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Walk'</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\"\
      >)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Walk'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Touch() is originally defined in Actor.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">Touch</span><span class=\"\
      br0\">(</span> <span class=\"kw9\">Actor</span> Other <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ Other;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>;\n\t<span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Walk'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Bump() is originally defined in Actor.</span>\n<span\
      \ class=\"kw1\">function</span> <span class=\"kw4\">Bump</span><span class=\"\
      br0\">(</span> <span class=\"kw9\">Actor</span> Other <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ Other;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">0.9</span> <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>  <span class=\"co1\">// Chance to calm.</span>\n\
      \        <span class=\"kw2\">return</span>;\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw6\">self</span>.<span class=\"\
      kw3\">IsInState</span><span class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.9</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span\
      \ class=\"co1\">// Change due to startle.</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Run'</span><span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>And then somewhere\
      \ in during movement, we will perform checks to determine if the character has\
      \ reached it's destination or if it's gotten stuck while traveling.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Movement\">Movement</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=11\"\
      \ title=\"Edit section: Movement\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>We need our NPC NaliCow to travel to destinations.\
      \ It's default Physics will be PHYS_Walking. So unless we find that the character\
      \ should be falling, we're just going to concern ourselves with ground movement.\
      \ Our checks determining if the NPCs destination is reached or if the NPC is\
      \ stuck will also happen during movement. We also want the ability to halt all\
      \ movement by defining a zero SpeedRatio, so that our character does not slide\
      \ around while showing an animation with it's feet firmly planted. At this point,\
      \ we will also introduce another property bStartled that will indicate the NaliCow\
      \ has been recently hurt or otherwise made to react. We will take advantage\
      \ of the fact that movement will be checked often and use it to make a few decisions\
      \ about bStartle, either to react to it by Running or to calm back down. bStartled\
      \ will be set to true during damage.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">var</span>\t\t<span class=\"kw5\">bool</span>\t\t\
      bStartled;\t\t<span class=\"co1\">// Recently startled.</span>\n \n<span class=\"\
      co1\">// MoveCheck() deals with periodic checks for bStartled, DamageTaken and\
      \ falling.</span>\n<span class=\"co1\">// Then moves the character in direction\
      \ of Rotation and at speed of SpeedRatio.</span>\n<span class=\"kw1\">function</span>\
      \ MoveCheck<span class=\"br0\">(</span> <span class=\"kw5\">float</span> SpeedRatio\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tDamageTaken\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;  <span class=\"\
      co1\">// Reset most recent damage memory.</span>\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw7\">Base</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\
      \  <span class=\"co1\">// Should be falling.</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Physics</span> <span class=\"sy0\">!=</span> <span class=\"kw7\">PHYS_Falling</span>\
      \ <span class=\"br0\">)</span>\n\t\t\t<span class=\"kw4\">SetPhysics</span><span\
      \ class=\"br0\">(</span> <span class=\"kw7\">PHYS_Falling</span> <span class=\"\
      br0\">)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"br0\"\
      >)</span>\n\t\tReachedDestination<span class=\"br0\">(</span> <span class=\"\
      kw6\">self</span> <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Controller</span>.<span class=\"\
      me0\">MoveTarget</span>.<span class=\"kw7\">Location</span> <span class=\"sy0\"\
      >-</span> <span class=\"kw7\">Location</span> <span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">64</span> <span class=\"br0\"\
      >)</span>\n   \t    ReachedDestination<span class=\"br0\">(</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span> <span class=\"\
      br0\">)</span>;\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw3\">VSize</span><span class=\"br0\">(</span> OldLocation <span\
      \ class=\"sy0\">-</span> <span class=\"kw7\">Location</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">48</span>\
      \ <span class=\"br0\">)</span>\n   \t    ReachedDestination<span class=\"br0\"\
      >(</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span>\
      \ <span class=\"br0\">)</span>;\n \n    OldLocation <span class=\"sy0\">=</span>\
      \ <span class=\"kw7\">Location</span>;\n \n    <span class=\"kw7\">RotationRate</span>.<span\
      \ class=\"me0\">Yaw</span> <span class=\"sy0\">=</span> SpeedRatio <span class=\"\
      sy0\">*</span> <span class=\"nu0\">20000</span>;\n   \t<span class=\"kw7\">Velocity</span>\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span> SpeedRatio <span\
      \ class=\"sy0\">*</span> GroundSpeed <span class=\"br0\">)</span> <span class=\"\
      sy0\">*</span> <span class=\"kw5\">vector</span><span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Rotation</span> <span class=\"br0\">)</span>;\n    <span\
      \ class=\"kw7\">Acceleration</span> <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Velocity</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.95</span> <span class=\"br0\">)</span>  <span class=\"co1\">// Chance to\
      \ calm down.</span>\n\t\tbStartled <span class=\"sy0\">=</span> <span class=\"\
      kw6\">false</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ bStartled <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// React to startle.\t</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>During Walk and Run behaviors, we will want to update the character's\
      \ movement, based on any changes to Rotation. The following code uses a Tick()\
      \ function to constantly update the movement. We only need to do this during\
      \ certain behaviors, so we will only use this code within a state designated\
      \ for either Walk or Run. Normally, SetTimer() and Timer() functions set to\
      \ activate every tenth of a second or so are used in place of Tick(), but this\
      \ code is not particularly expensive.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">    <span class=\"kw1\">function</span> <span class=\"kw4\">Tick</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">float</span> DeltaTime <span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Physics</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">PHYS_Walking</span> <span class=\"\
      sy0\">&amp;&amp;</span> DamageTaken <span class=\"sy0\">==</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\
      \            <span class=\"kw7\">Velocity</span> <span class=\"sy0\">=</span>\
      \ <span class=\"br0\">(</span> <span class=\"nu0\">0.5</span> <span class=\"\
      sy0\">*</span> GroundSpeed <span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> <span class=\"kw5\">vector</span><span class=\"br0\">(</span> <span\
      \ class=\"kw7\">Rotation</span> <span class=\"br0\">)</span>;\n            <span\
      \ class=\"kw7\">Acceleration</span> <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Velocity</span>;\n        <span class=\"br0\">}</span>\n    <span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Damage\"\
      >Damage</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=12\" title=\"\
      Edit section: Damage\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>When our NPC gets hurt, we want to display specific behavior and effects.\
      \ The effects needed here are blood puffs that emit from the character at the\
      \ appropriate angle to which it was hurt. The behavior will be similar to those\
      \ in Navigation, as the Instigator of the damage will automatically become the\
      \ NPCs HurtingActor, the Actor to avoid. Any damage will cause our NPC to react\
      \ by Running, unless it recieves enough damage to bring the Health down to zero.\
      \ In that case, our NPC will switch to a Dying state. A new property, DamageTaken,\
      \ is introduced to keep track of the most recent damage inflicted on our NaliCow.\
      \ This will be used to determine the Degree to specify for our TakeHit and Dying\
      \ behavior displays and it will serve to remind the NaliCow to Run away from\
      \ danger.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >var</span>\t\t<span class=\"kw5\">int</span>\t\t\tDamageTaken;\t<span class=\"\
      co1\">// Most recent damage amount.</span>\n \n<span class=\"co1\">// TakeDamage()\
      \ is originally defined in Actor.</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span><span class=\"\
      kw5\">int</span> Damage, <span class=\"kw9\">Pawn</span> InstigatedBy, <span\
      \ class=\"kw5\">Vector</span> HitLocation, <span class=\"kw5\">Vector</span>\
      \ Momentum, class<span class=\"sy0\">&lt;</span>DamageType<span class=\"sy0\"\
      >&gt;</span> <span class=\"kw9\">DamageType</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ InstigatedBy;\n\tDamageTaken <span class=\"sy0\">=</span> Damage;\n\tbStartled\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n \n    <span\
      \ class=\"kw6\">Super</span>.<span class=\"kw4\">TakeDamage</span><span class=\"\
      br0\">(</span> Damage, InstigatedBy, HitLocation, Momentum, <span class=\"kw9\"\
      >DamageType</span> <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> DamageTaken <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">3</span> <span class=\"br0\">)</span>\n        <span class=\"\
      kw4\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'STR_green_blood_puff'</span>,,, HitLocation, <span class=\"\
      kw5\">Rotator</span><span class=\"br0\">(</span> Momentum <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>.<span class=\"\
      me0\">MoveTarget</span> <span class=\"sy0\">==</span> HurtingActor <span class=\"\
      sy0\">||</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">Focus</span>\
      \ <span class=\"sy0\">==</span> HurtingActor <span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\tReachedDestination<span class=\"br0\">(</span>\
      \ HurtingActor <span class=\"br0\">)</span>;  <span class=\"co1\">// Do not\
      \ approach HurtingActor.</span>\n \n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> Health <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n        <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'TakeHit'</span><span class=\"br0\"\
      >)</span>;\n    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"kw6\"\
      >self</span>.<span class=\"kw3\">IsInState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Dying'</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n        <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Dying'</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Death\"\
      >Death</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=13\" title=\"\
      Edit section: Death\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>When our NPC dies, it will be switched to a Dying state. Switching to a unique\
      \ state will allow us to Ignore various functions, like Bump or Touch, which\
      \ would cause further behavior. At the beginning of this state, our NPC should\
      \ stop all animation. After displaying the appropriate Dying behavior, it should\
      \ stay still for a short time before removing itself from the gameworld for\
      \ the sake of garbage collection. The typical garbage collection method in Unreal\
      \ involves a simple check for any player currently looking at the Actor, and\
      \ if no player is, delete it. If a player happens to be watching our character\
      \ at this time, we will DeRez it's Mesh, a typical function where the Skin is\
      \ changed to a gently flashing texture before the Actor is deleted. It visually\
      \ lets players know this Actor is about to be removed. On Clients, this function\
      \ will be called by a TornOff() event, which signals the Client has been given\
      \ control of this actor. We will use bTearOff to signal to Clients that this\
      \ NaliCow is dead and should be removed. If not explicitly removed via Destroy(),\
      \ this NPC will be automatically destroyed after a set time defined with Lifespan.</p>\n\
      <p>The following code shows the Dying behavior state.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">state</span> Dying\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw1\">Ignores</span> <span class=\"kw4\">Trigger</span>,\
      \ <span class=\"kw4\">Touch</span>, <span class=\"kw4\">Bump</span>, <span class=\"\
      kw4\">Landed</span>, Died;\n \n    <span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">Timer</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw4\">SetPhysics</span><span\
      \ class=\"br0\">(</span> <span class=\"kw7\">PHYS_None</span> <span class=\"\
      br0\">)</span>;\n        <span class=\"kw4\">SetCollision</span><span class=\"\
      br0\">(</span> <span class=\"kw6\">false</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n        <span class=\"kw7\">Lifespan</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span>;\n        <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> PlayerCanSeeMe<span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n  \
      \          DeRez<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \        <span class=\"kw2\">else</span>\n            <span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n    <span class=\"br0\"\
      >}</span>\n \n    <span class=\"kw1\">event</span> <span class=\"kw4\">AnimEnd</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel <span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw4\"\
      >SetTimer</span><span class=\"br0\">(</span> <span class=\"nu0\">4.0</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n    <span\
      \ class=\"br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n       \
      \ <span class=\"kw4\">StopAnimating</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n        DisplayBehavior<span class=\"br0\">(</span>\
      \ <span class=\"nu0\">11</span>, <span class=\"kw3\">Min</span><span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> DamageTaken <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span>, <span\
      \ class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \        MoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span>\
      \ <span class=\"br0\">)</span>;\n        <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"me0\"\
      >NetMode</span> <span class=\"sy0\">==</span> NM_DedicatedServer <span class=\"\
      br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"\
      kw4\">SetPhysics</span><span class=\"br0\">(</span> <span class=\"kw7\">PHYS_None</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw4\">SetCollision</span><span\
      \ class=\"br0\">(</span> <span class=\"kw6\">false</span>, <span class=\"kw6\"\
      >false</span> <span class=\"br0\">)</span>;\n            <span class=\"kw7\"\
      >LifeSpan</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span>;\n\
      \            bTearOff <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\
      \        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Our DeRez function is made available on Clients and can be called\
      \ from a TornOff() event.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// TornOff() is originally defined in Actor.</span>\n<span class=\"kw1\"\
      >event</span> <span class=\"kw4\">TornOff</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> PlayerCanSeeMe<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n        DeRez<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span>\n\
      \        <span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// DeRez() will signal removal of the dead NaliCow.</span>\n<span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> DeRez<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"sy0\">==</span>\
      \ NM_DedicatedServer <span class=\"br0\">)</span>\n        <span class=\"kw2\"\
      >return</span>;\n \n    <span class=\"kw7\">Skins</span>.<span class=\"me0\"\
      >length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \    <span class=\"kw7\">Skins</span><span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'DeRez.Shaders.DeRezFinalBody'</span>;\
      \  \n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Sometimes Pawns are\
      \ asked to die automatically. The following function will catch any \"automatic\
      \ death\" event, such as being crushed by a Mover or Telefragged.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Died() is originally\
      \ defined in Pawn.</span>\n<span class=\"kw1\">function</span> Died<span class=\"\
      br0\">(</span> <span class=\"kw9\">Controller</span> Killer, class<span class=\"\
      sy0\">&lt;</span>DamageType<span class=\"sy0\">&gt;</span> <span class=\"kw9\"\
      >DamageType</span>, <span class=\"kw5\">vector</span> HitLocation <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\">TakeDamage</span><span\
      \ class=\"br0\">(</span> Health, <span class=\"kw5\">None</span>, <span class=\"\
      kw7\">Location</span>, <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Crushed'</span> <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Effects\"\
      >Effects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=14\" title=\"\
      Edit section: Effects\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Besides the blood puffs needed to indicate Damage, the only effect this NPC\
      \ needs is it's poop. When it performs its Poop behavior, we will want a separate\
      \ Actor, a Projectile, to spawn at the appropriate place and drop to the ground.</p>\n\
      <p>We will use this line during the Poop behavior to spawn the NaliCowPoop in\
      \ the appropriate location and orientation; towards the back of the character\
      \ and pointing down.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">\t<span class=\"\
      kw4\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'NaliCowPoop'</span>,, <span class=\"st0\">'Poop'</span>, <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> <span class=\"br0\">(</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Rotation</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">24</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span\
      \ class=\"kw5\">rotator</span><span class=\"br0\">(</span> <span class=\"kw3\"\
      >vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Class_Construction\">Class Construction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=15\" title=\"Edit\
      \ section: Class Construction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Our NPC mostly uses functions and methods already\
      \ found in the Pawn class. Because this character is not meant to respawn, pickup\
      \ <a href=\"/Legacy:Adrenaline\" title=\"Legacy:Adrenaline\">Adrenaline</a>,\
      \ carry <a href=\"/Legacy:Inventory\" title=\"Legacy:Inventory\">Inventory</a>,\
      \ etc., a simple Pawn subclass can be used without a custom Controller. The\
      \ AI can be coded into the custom Pawn class, NaliCow, and we can use the default\
      \ AIController.</p>\n<p>For the effects, the NaliCowPoop, we will use make a\
      \ custom subclass from the Projectile class, BioGlob.</p>\n<h3><span class=\"\
      mw-headline\" id=\"NaliCow\">NaliCow</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=16\"\
      \ title=\"Edit section: NaliCow\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>With our code elements defined, we can simply begin\
      \ to piece them together within a Pawn subclass called NaliCow. Along the way,\
      \ we will make decisions about any further behaviors needed, such as a simple\
      \ Turn behavior, where the Walk animation is played but the character only spins\
      \ in place, or a redefinition of the Landed() event to make sure the character\
      \ reacts appropriately if bStartled. We will also make decisions about the frequency\
      \ and chance that any given behavior be initiated from any other. Most of the\
      \ time, a simple random chance filtered through a switch statement will suffice.</p>\n\
      <p>A state will be defined for each behavior, allowing us to completely control\
      \ the character, including it's movement and further behavior.</p>\n<p>Putting\
      \ together this NPC character requires the use of properties and methods, some\
      \ will be custom, but most of which have been defined in the Pawn, Actor or\
      \ Controller classes.</p>\n<h4><span class=\"mw-headline\" id=\"Pawn_Default_Properties\"\
      >Pawn Default Properties</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=17\"\
      \ title=\"Edit section: Pawn Default Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>(Advanced) float Lifespan&#160;</dt>\n<dd>Pawn\
      \ default is 0. We keep it there by default, but will be modifying it in game.</dd>\n\
      <dt>(Collision) int CollisionHeight&#160;</dt>\n<dd>Pawn default is 74. Our\
      \ default will be 34.</dd>\n<dt>(Collision) SurfaceType&#160;</dt>\n<dd>Pawn\
      \ default is EST_Default. Our default will be EST_Flesh.</dd>\n<dt>(Display)\
      \ <a href=\"/Legacy:Mesh\" title=\"Legacy:Mesh\">Mesh</a> Mesh&#160;</dt>\n\
      <dd>Our default is <tt>VertMesh'SkaarjPack_rc.NaliCow'</tt>.</dd>\n<dt>(Movement)\
      \ Physics&#160;</dt>\n<dd>Pawn default is PHYS_None. Our default will be PHYS_Walking.</dd>\n\
      <dt>(Movement) rotator RotationRate&#160;</dt>\n<dd>Pawn default RotationRate.Yaw\
      \ is 20000. We keep it there by default, but will be modifying it in game.</dd>\n\
      <dt>(Movement) vector Velocity, Acceleration&#160;</dt>\n<dd>These two properties\
      \ are used during Movement.</dd>\n<dt>(None) <a href=\"/Legacy:Controller\"\
      \ title=\"Legacy:Controller\">Controller</a> Controller&#160;</dt>\n<dd>By default\
      \ Pawns automatically spawn a Controller of Pawn.ControllerClass during PreBeginPlay().\
      \ This will be our handle to the Controller.</dd>\n<dt>(None) class&lt;<a href=\"\
      /Legacy:Controller\" title=\"Legacy:Controller\">Controller</a>&gt; ControllerClass&#160;</dt>\n\
      <dd>Pawn default value is <a href=\"/Legacy:AIController\" title=\"Legacy:AIController\"\
      >AIController</a>. We keep it there by default.</dd>\n<dt>(None) int GroundSpeed&#160;</dt>\n\
      <dd>Pawn default value is 440. Our default value will be 100.</dd>\n<dt>(None)\
      \ int Health&#160;</dt>\n<dd>Pawn default value is 100. We keep it there by\
      \ default, but will be modifying it in game.</dd>\n<dt>(None) bool bReplicateAnimations&#160;</dt>\n\
      <dd>Pawn default is false. Our default value will be true. For use with SimAnim\
      \ struct.</dd>\n<dt>(None) SimAnims&#160;</dt>\n<dd>This struct is used for\
      \ Animation Replication. Includes AnimSequence, bAnimLoop, etc.</dd>\n<dt>(None)\
      \ bool bTearOff&#160;</dt>\n<dd>This property is used to make the Client the\
      \ owner of the actor, making it \"TornOff\" and no longer replicated to new\
      \ Clients. We will use this during Death only.</dd>\n<dt>(Sound) bool bFullVolume&#160;</dt>\n\
      <dd>Pawn default is false. Our default value will be true.</dd>\n<dt>(Sound)\
      \ int SoundRadius&#160;</dt>\n<dd>Pawn default is 160. Our default value will\
      \ be 512.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Pawn_Default_Methods\"\
      >Pawn Default Methods</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=18\" title=\"\
      Edit section: Pawn Default Methods\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>bool PlayAnim( name Sequence, optional float\
      \ Rate, optional float TweenTime, optional int Channel )&#160;</dt>\n<dd>This\
      \ function is originally defined in Actor. It will allow an Anim Sequence to\
      \ play.</dd>\n<dt>bool LoopAnim( name Sequence, optional float Rate, optional\
      \ float TweenTime, optional int Channel )&#160;</dt>\n<dd>This function is originally\
      \ defined in Actor. It will allow an Anim Sequence to loop.</dd>\n<dt>StopAnimating()&#160;</dt>\n\
      <dd>This function is originally defined in Actor.</dd>\n<dt>PlaySound( Sound\
      \ Sound, optional ESoundSlot Slot, optional float Volume, optional bool bNoOverride,\
      \ optional float Radius, optional float Pitch, optional bool Attenuate )&#160;</dt>\n\
      <dd>This function is originally defined in Actor. It will allow a Sound to play.</dd>\n\
      <dt>SetPhysics( EPhysics newPhysics )&#160;</dt>\n<dd>This function is originally\
      \ defined in Actor. We will use it when in a Dying state.</dd>\n<dt>SetCollision(\
      \ optional bool NewColActors, optional bool NewBlockActors, optional bool NewBlockPlayers\
      \ )&#160;</dt>\n<dd>This function is originally defined in Actor. We will use\
      \ it when in a Dying state.</dd>\n<dt>bool PlayerCanSeeMe()&#160;</dt>\n<dd>This\
      \ function is originally defined in Actor. It returns true when a player has\
      \ a line of sight to this Actor. We will use it when in a Dying state.</dd>\n\
      <dt>AnimEnd( int Channel )&#160;</dt>\n<dd>This event is originally defined\
      \ in Actor. It is called when the current animation sequence has played through.\
      \ This will allow us to switch from action to action at an appropriate time.</dd>\n\
      <dt>Landed( vector HitNormal )&#160;</dt>\n<dd>This event is originally defined\
      \ in Actor. It is called when the Actor has landed on a Base after falling.</dd>\n\
      <dt>TornOff()&#160;</dt>\n<dd>This event is a signal that this actor is no longer\
      \ being replicated to new Clients and is now set to <tt>Role == ROLE_Authority</tt>\
      \ on the Clients. We will use this for removal of a dead NaliCow on Clients.</dd>\n\
      </dl>\n<h4><span class=\"mw-headline\" id=\"AIController_Properties\">AIController\
      \ Properties</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=19\" title=\"\
      Edit section: AIController Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>(None) Actor MoveTarget&#160;</dt>\n<dd>Originally\
      \ defined in Controller, this is the Actor to move toward.</dd>\n<dt>(None)\
      \ vector Destination&#160;</dt>\n<dd>Originally defined in Controller, this\
      \ is the vector (Location) to move toward. We will use this to set desired location.</dd>\n\
      <dt>(None) vector FocalPoint&#160;</dt>\n<dd>Originally defined in Controller,\
      \ this is the vector to look toward. We will use this to set desired rotation.</dd>\n\
      <dt>(None) Actor Focus</dt>\n<dd>Originally defined in Controller, this is the\
      \ Actor to look toward.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Final_Source_Code\"\
      >Final Source Code</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=20\" title=\"\
      Edit section: Final Source Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The following is the AI Source Code for a NaliCow\
      \ NPC, using all the available animations and sounds to convey believable behavior.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// NaliCow.</span>\n<span class=\"co1\">// NaliCow Non-Player\
      \ Character for UT2004.</span>\n<span class=\"co1\">// by SuperApe -- Dec 2005</span>\n\
      <span class=\"co1\">// ( Based on Mesh animations and sounds from Epic Games\
      \ )</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> NaliCow <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Pawn</span>\n    <span class=\"kw1\">placeable</span>;\n\
      \ \n<span class=\"kw1\">var</span>     <span class=\"kw9\">Actor</span>    \
      \   HurtingActor;   <span class=\"co1\">// An Actor to get away from.</span>\n\
      <span class=\"kw1\">var</span>     <span class=\"kw5\">vector</span>      OldLocation;\
      \    <span class=\"co1\">// Used to determine if stuck.</span>\n<span class=\"\
      kw1\">var</span>\t\t<span class=\"kw5\">int</span>\t\t\tDamageTaken;\t<span\
      \ class=\"co1\">// Most recent damage amount.</span>\n<span class=\"kw1\">var</span>\t\
      \t<span class=\"kw5\">bool</span>\t\tbStartled;\t\t<span class=\"co1\">// Recently\
      \ startled.</span>\n \n<span class=\"co1\">// PostBeginPlay() is originally\
      \ defined in Actor().</span>\n<span class=\"co1\">// We will use it to make\
      \ sure an AIController is spawned for our NaliCow.</span>\n<span class=\"kw1\"\
      >event</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw6\"\
      >Super</span>.<span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> ControllerClass <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"\
      kw9\">Controller</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw9\">Controller</span> <span class=\"sy0\">=</span> <span class=\"kw4\">spawn</span><span\
      \ class=\"br0\">(</span> ControllerClass <span class=\"br0\">)</span>;\n\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw9\">Controller</span>.<span class=\"me0\"\
      >Possess</span><span class=\"br0\">(</span> <span class=\"kw6\">self</span>\
      \ <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">// DisplayBehavior() takes a BehaviorIndex value and sets the appropriate\
      \ animation and sound.</span>\n<span class=\"co1\">// Degrees of behavior will\
      \ be taken into account via an optional arguement.</span>\n<span class=\"kw1\"\
      >function</span> DisplayBehavior<span class=\"br0\">(</span> <span class=\"\
      kw5\">int</span> BehaviorIndex, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">int</span> Degree <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">switch</span><span class=\"br0\">(</span> BehaviorIndex\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> :\n            Acting<span class=\"br0\">(</span> <span\
      \ class=\"st0\">'Breath'</span>, <span class=\"kw5\">sound</span><span class=\"\
      st0\">'SkaarjPack_rc.ambCow'</span>, <span class=\"kw6\">true</span> <span class=\"\
      br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"\
      br0\">)</span> : \n            Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'root'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.munch1p'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> : \n     \
      \       Acting<span class=\"br0\">(</span> <span class=\"st0\">'Chew'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.munch1p'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : \n     \
      \       <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"br0\"\
      >)</span>\n                Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'Poop'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.cMoo1c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span>\n                Acting<span class=\"br0\"\
      >(</span> <span class=\"st0\">'Poop'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.cMoo2c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">break</span>;\n\
      \        <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">5</span><span class=\"br0\">)</span> : \n            Acting<span class=\"\
      br0\">(</span> <span class=\"st0\">'Shake'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.shakeC'</span>, <span class=\"kw6\">true</span>\
      \ <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span\
      \ class=\"br0\">)</span> : \n            Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Swish'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.swishC'</span>, <span class=\"kw6\">true</span>\
      \ <span class=\"br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span\
      \ class=\"br0\">)</span> : \n            Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Walk'</span>, <span class=\"kw5\">sound</span><span class=\"\
      st0\">'SkaarjPack_rc.WalkC'</span>, <span class=\"kw6\">true</span> <span class=\"\
      br0\">)</span>; <span class=\"kw2\">break</span>;\n        <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"\
      br0\">)</span> : \n            Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'Run'</span>, <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.WalkC'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> : \n     \
      \       Acting<span class=\"br0\">(</span> <span class=\"st0\">'Landed'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.Thump'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n        <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> : \n    \
      \        <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Degree <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\"\
      >)</span>\n                Acting<span class=\"br0\">(</span> <span class=\"\
      st0\">'TakeHit'</span>, <span class=\"kw5\">sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.cMoo1c'</span>, <span class=\"kw6\">false</span> <span class=\"\
      br0\">)</span>;\n            <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> Degree <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">2</span> <span class=\"br0\">)</span>\n              \
      \  Acting<span class=\"br0\">(</span> <span class=\"st0\">'TakeHit2'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.injurC1c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Degree <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>\
      \ <span class=\"br0\">)</span>\n                Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'BigHit'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.injurC2c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">break</span>;\n\
      \        <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">11</span><span class=\"br0\">)</span> : \n            <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> Degree <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">2</span> <span class=\"br0\">)</span>\n              \
      \  Acting<span class=\"br0\">(</span> <span class=\"st0\">'Dead'</span>, <span\
      \ class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.cMoo2c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Degree <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>\
      \ <span class=\"br0\">)</span>\n                Acting<span class=\"br0\">(</span>\
      \ <span class=\"st0\">'Dead2'</span>, <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.DeathC1c'</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Degree <span class=\"\
      sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>\n\
      \                Acting<span class=\"br0\">(</span> <span class=\"st0\">'Dead3'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.DeathC2c'</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n         \
      \   <span class=\"kw2\">break</span>;\n        <span class=\"kw1\">default</span>\
      \ : \n            Acting<span class=\"br0\">(</span> <span class=\"st0\">'Breath'</span>,\
      \ <span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.ambCow'</span>,\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>; <span class=\"\
      kw2\">break</span>;\n     <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Acting() loops the given animation sequence\
      \ name and plays the given sound.</span>\n<span class=\"co1\">// For Replication\
      \ purposes, animation is normally looped.  Sequences may be interupted each\
      \ AnimEnd().</span>\n<span class=\"kw1\">function</span> Acting<span class=\"\
      br0\">(</span> <span class=\"kw5\">name</span> Anim, <span class=\"kw5\">sound</span>\
      \ Soundname, <span class=\"kw5\">bool</span> bLoop <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> bLoop <span class=\"br0\">)</span>\n        <span class=\"kw4\"\
      >LoopAnim</span><span class=\"br0\">(</span> Anim, <span class=\"nu0\">1.0</span>,\
      \ <span class=\"nu0\">0.1</span> <span class=\"br0\">)</span>;\n    <span class=\"\
      kw2\">else</span>\n\t\t<span class=\"kw4\">PlayAnim</span><span class=\"br0\"\
      >(</span> Anim, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.1</span>\
      \ <span class=\"br0\">)</span>;\n    SimAnim.<span class=\"me0\">AnimSequence</span>\
      \ <span class=\"sy0\">=</span> Anim;\n    SimAnim.<span class=\"me0\">AnimRate</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> bLoop <span class=\"br0\">)</span>\n\
      \        SimAnim.<span class=\"me0\">bAnimLoop</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n    <span class=\"kw2\">else</span>\n  \
      \      SimAnim.<span class=\"me0\">bAnimLoop</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n    SimAnim.<span class=\"me0\">TweenRate</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span>;\n    <span class=\"\
      kw4\">PlaySound</span><span class=\"br0\">(</span> Soundname, <span class=\"\
      kw7\">SLOT_Misc</span> <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// MoveCheck() deals with periodic checks for bStartled,\
      \ DamageTaken and falling.</span>\n<span class=\"co1\">// Then moves the character\
      \ in direction of Rotation and at speed of SpeedRatio.</span>\n<span class=\"\
      kw1\">function</span> MoveCheck<span class=\"br0\">(</span> <span class=\"kw5\"\
      >float</span> SpeedRatio <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \tDamageTaken <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;  <span\
      \ class=\"co1\">// Reset most recent damage memory.</span>\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Base</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>  <span class=\"co1\">// Should be falling.</span>\n\t<span class=\"\
      br0\">{</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Physics</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw7\">PHYS_Falling</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      kw4\">SetPhysics</span><span class=\"br0\">(</span> <span class=\"kw7\">PHYS_Falling</span>\
      \ <span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\t\
      <span class=\"br0\">}</span>\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n\t\tReachedDestination<span class=\"br0\">(</span> <span class=\"\
      kw6\">self</span> <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Controller</span>.<span class=\"\
      me0\">MoveTarget</span>.<span class=\"kw7\">Location</span> <span class=\"sy0\"\
      >-</span> <span class=\"kw7\">Location</span> <span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">64</span> <span class=\"br0\"\
      >)</span>\n   \t    ReachedDestination<span class=\"br0\">(</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span> <span class=\"\
      br0\">)</span>;\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw3\">VSize</span><span class=\"br0\">(</span> OldLocation <span\
      \ class=\"sy0\">-</span> <span class=\"kw7\">Location</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">48</span>\
      \ <span class=\"br0\">)</span>\n   \t    ReachedDestination<span class=\"br0\"\
      >(</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span>\
      \ <span class=\"br0\">)</span>;\n \n    OldLocation <span class=\"sy0\">=</span>\
      \ <span class=\"kw7\">Location</span>;\n \n    <span class=\"kw7\">RotationRate</span>.<span\
      \ class=\"me0\">Yaw</span> <span class=\"sy0\">=</span> SpeedRatio <span class=\"\
      sy0\">*</span> <span class=\"nu0\">20000</span>;\n   \t<span class=\"kw7\">Velocity</span>\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span> SpeedRatio <span\
      \ class=\"sy0\">*</span> GroundSpeed <span class=\"br0\">)</span> <span class=\"\
      sy0\">*</span> <span class=\"kw5\">vector</span><span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Rotation</span> <span class=\"br0\">)</span>;\n    <span\
      \ class=\"kw7\">Acceleration</span> <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Velocity</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.95</span> <span class=\"br0\">)</span>  <span class=\"co1\">// Chance to\
      \ calm down.</span>\n\t\tbStartled <span class=\"sy0\">=</span> <span class=\"\
      kw6\">false</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ bStartled <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// React to startle.\t</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// ReachedDestination() is originally defined in Pawn.</span>\n\
      <span class=\"co1\">// MoveTarget and other relevant properties are defined\
      \ in Controller.</span>\n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> ReachedDestination<span class=\"br0\">(</span> <span class=\"\
      kw9\">Actor</span> OldTarget <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n    <span class=\"kw1\">local</span>   <span class=\"kw9\">Actor</span>\
      \   NewTarget, A;\n    <span class=\"kw1\">local</span>   <span class=\"kw9\"\
      >NavigationPoint</span>    NP;\n \n    <span class=\"kw2\">forEach</span> <span\
      \ class=\"kw2\">VisibleActors</span><span class=\"br0\">(</span> <span class=\"\
      kw1\">class</span><span class=\"st0\">'Actor'</span>, A <span class=\"br0\"\
      >)</span>\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">!=</span> OldTarget <span class=\"sy0\">&amp;&amp;</span>\
      \ A <span class=\"sy0\">!=</span> HurtingActor <span class=\"br0\">)</span>\n\
      \            NewTarget <span class=\"sy0\">=</span> A;\n \n    <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> A <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n        <span\
      \ class=\"kw2\">forEach</span> <span class=\"kw2\">RadiusActors</span><span\
      \ class=\"br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'NavigationPoint'</span>, NP, <span class=\"nu0\">1024</span> <span class=\"\
      br0\">)</span>\n            <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.5</span> <span class=\"sy0\">&amp;&amp;</span> NP <span class=\"sy0\">!=</span>\
      \ OldTarget <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw4\">FastTrace</span><span\
      \ class=\"br0\">(</span> NP.<span class=\"kw7\">Location</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>\n            <span class=\"br0\"\
      >{</span>\n                A <span class=\"sy0\">=</span> NP;\n            \
      \    NewTarget <span class=\"sy0\">=</span> A;\n            <span class=\"br0\"\
      >}</span>\n \n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n        <span class=\"kw2\">forEach</span> <span class=\"kw2\"\
      >AllActors</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Actor'</span>, A <span class=\"br0\">)</span>\n           \
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\"\
      >&amp;&amp;</span> A <span class=\"sy0\">!=</span> HurtingActor <span class=\"\
      sy0\">&amp;&amp;</span> A <span class=\"sy0\">!=</span> OldTarget <span class=\"\
      sy0\">&amp;&amp;</span> A <span class=\"sy0\">!=</span> <span class=\"kw6\"\
      >self</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>A.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'Controller'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n                NewTarget\
      \ <span class=\"sy0\">=</span> A;\n \n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> NewTarget <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw9\">Controller</span>.<span class=\"me0\">MoveTarget</span>\
      \ <span class=\"sy0\">=</span> NewTarget;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">=</span> NewTarget.<span\
      \ class=\"kw7\">Location</span>;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> NewTarget.<span\
      \ class=\"kw7\">Location</span>;\n        <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Focus</span> <span class=\"sy0\">=</span> NewTarget;\n    <span\
      \ class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\n    <span class=\"\
      br0\">{</span>\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ HurtingActor <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n     \
      \       <span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw7\"\
      >Location</span> <span class=\"sy0\">-</span> HurtingActor.<span class=\"kw7\"\
      >Location</span> <span class=\"br0\">)</span>;\n            <span class=\"kw9\"\
      >Controller</span>.<span class=\"me0\">FocalPoint</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n\
      \        <span class=\"br0\">}</span>\n        <span class=\"kw2\">else</span>\n\
      \        <span class=\"br0\">{</span>\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">=</span> <span class=\"\
      kw5\">vector</span><span class=\"br0\">(</span> <span class=\"kw7\">Rotation</span>\
      \ <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\"\
      >(</span> <span class=\"nu0\">512</span> <span class=\"sy0\">*</span> <span\
      \ class=\"kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">512</span> <span\
      \ class=\"br0\">)</span>;\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Trigger() is originally defined in Actor.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">Trigger</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Actor</span> Other, <span class=\"\
      kw9\">Pawn</span> EventInstigator <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Walk'</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\"\
      >)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Walk'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Touch() is originally defined in Actor.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">Touch</span><span class=\"\
      br0\">(</span> <span class=\"kw9\">Actor</span> Other <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ Other;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>;\n\t<span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Walk'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Bump() is originally defined in Actor.</span>\n<span\
      \ class=\"kw1\">function</span> <span class=\"kw4\">Bump</span><span class=\"\
      br0\">(</span> <span class=\"kw9\">Actor</span> Other <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ Other;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">0.9</span> <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>  <span class=\"co1\">// Chance to calm.</span>\n\
      \        <span class=\"kw2\">return</span>;\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw6\">self</span>.<span class=\"\
      kw3\">IsInState</span><span class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >0.9</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span\
      \ class=\"co1\">// Change due to startle.</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Run'</span><span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Landed()\
      \ is originally defined in Actor.</span>\n<span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">Landed</span><span class=\"br0\">(</span> <span class=\"kw5\"\
      >vector</span> HitNormal <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">Landed</span><span class=\"\
      br0\">(</span> HitNormal <span class=\"br0\">)</span>;\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Velocity</span>.<span\
      \ class=\"me0\">Z</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\"\
      >-</span><span class=\"nu0\">200</span> <span class=\"br0\">)</span>  <span\
      \ class=\"co1\">// Slow enough fall to forgive landing.</span>\n\t\t<span class=\"\
      kw2\">return</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> DamageTaken <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Land'</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw2\">else</span>\n\t\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'TakeHit'</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// TakeDamage()\
      \ is originally defined in Actor.</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span><span class=\"\
      kw5\">int</span> Damage, <span class=\"kw9\">Pawn</span> InstigatedBy, <span\
      \ class=\"kw5\">Vector</span> HitLocation, <span class=\"kw5\">Vector</span>\
      \ Momentum, class<span class=\"sy0\">&lt;</span>DamageType<span class=\"sy0\"\
      >&gt;</span> <span class=\"kw9\">DamageType</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    HurtingActor <span class=\"sy0\">=</span>\
      \ InstigatedBy;\n\tDamageTaken <span class=\"sy0\">=</span> Damage;\n\tbStartled\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n \n    <span\
      \ class=\"kw6\">Super</span>.<span class=\"kw4\">TakeDamage</span><span class=\"\
      br0\">(</span> Damage, InstigatedBy, HitLocation, Momentum, <span class=\"kw9\"\
      >DamageType</span> <span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> DamageTaken <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">3</span> <span class=\"br0\">)</span>\n\t    <span class=\"\
      kw4\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'STR_green_blood_puff'</span>,,, HitLocation, <span class=\"\
      kw5\">Rotator</span><span class=\"br0\">(</span> Momentum <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>.<span class=\"\
      me0\">MoveTarget</span> <span class=\"sy0\">==</span> HurtingActor <span class=\"\
      sy0\">||</span> <span class=\"kw9\">Controller</span>.<span class=\"me0\">Focus</span>\
      \ <span class=\"sy0\">==</span> HurtingActor <span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\tReachedDestination<span class=\"br0\">(</span>\
      \ HurtingActor <span class=\"br0\">)</span>;  <span class=\"co1\">// Do not\
      \ approach HurtingActor.</span>\n \n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> Health <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n        <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'TakeHit'</span><span class=\"br0\"\
      >)</span>;\n    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"kw6\"\
      >self</span>.<span class=\"kw3\">IsInState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Dying'</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n        <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Dying'</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"co1\">// Died() is originally defined in Pawn.</span>\n\
      <span class=\"kw1\">function</span> Died<span class=\"br0\">(</span> <span class=\"\
      kw9\">Controller</span> Killer, class<span class=\"sy0\">&lt;</span>DamageType<span\
      \ class=\"sy0\">&gt;</span> <span class=\"kw9\">DamageType</span>, <span class=\"\
      kw5\">vector</span> HitLocation <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span>\
      \ Health, <span class=\"kw5\">None</span>, <span class=\"kw7\">Location</span>,\
      \ <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Crushed'</span> <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"co1\">// TornOff() is originally defined in\
      \ Actor.</span>\n<span class=\"kw1\">event</span> <span class=\"kw4\">TornOff</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> PlayerCanSeeMe<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \        DeRez<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n  \
      \  <span class=\"kw2\">else</span>\n        <span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// DeRez() will signal removal of the dead NaliCow.</span>\n\
      <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> DeRez<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"sy0\">==</span>\
      \ NM_DedicatedServer <span class=\"br0\">)</span>\n        <span class=\"kw2\"\
      >return</span>;\n \n    <span class=\"kw7\">Skins</span>.<span class=\"me0\"\
      >length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \    <span class=\"kw7\">Skins</span><span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'DeRez.Shaders.DeRezFinalBody'</span>;\
      \  \n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">auto</span> <span\
      \ class=\"kw1\">state</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> Prone\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">event</span>\
      \ <span class=\"kw4\">AnimEnd</span><span class=\"br0\">(</span> <span class=\"\
      kw5\">int</span> Channel <span class=\"br0\">)</span>\n    <span class=\"br0\"\
      >{</span>\n        <span class=\"kw1\">local</span>   <span class=\"kw5\">int</span>\
      \     X;\n \n        X <span class=\"sy0\">=</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">20</span>;\n        <span class=\"kw2\">switch</span>\
      \ <span class=\"br0\">(</span> X <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Turn'</span><span\
      \ class=\"br0\">)</span>;        <span class=\"kw2\">break</span>;\n       \
      \     <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Graze'</span><span class=\"br0\"\
      >)</span>;       <span class=\"kw2\">break</span>;\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Poop'</span><span class=\"br0\">)</span>;\
      \        <span class=\"kw2\">break</span>;\n            <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"\
      br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Shake'</span><span class=\"br0\">)</span>;       <span class=\"\
      kw2\">break</span>;\n            <span class=\"kw2\">case</span><span class=\"\
      br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : <span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Swish'</span><span class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n\
      \            <span class=\"kw2\">case</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">5</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span class=\"br0\"\
      >)</span>;        <span class=\"kw2\">break</span>;\n            <span class=\"\
      kw1\">default</span> : DisplayBehavior<span class=\"br0\">(</span> <span class=\"\
      nu0\">1</span> <span class=\"br0\">)</span>;     <span class=\"kw2\">break</span>;\n\
      \        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n\
      \    <span class=\"kw2\">Begin</span>:\n        DisplayBehavior<span class=\"\
      br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;\n\t\
      \tMoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"br0\">)</span>;\n        <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> HurtingActor <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span> <span class=\"br0\">)</span>\n            <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">0.95</span> <span class=\"br0\">)</span>  <span class=\"co1\"\
      >// Chance to forgive HurtingActor.</span>\n                HurtingActor <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">state</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> Turn\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw1\">event</span> <span class=\"kw4\">AnimEnd</span><span class=\"br0\">(</span>\
      \ <span class=\"kw5\">int</span> Channel <span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n        <span class=\"kw7\">RotationRate</span>.<span\
      \ class=\"me0\">Yaw</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0</span>;\n        <span class=\"kw3\">GotoState</span><span class=\"br0\"\
      >(</span><span class=\"st0\">'Prone'</span><span class=\"br0\">)</span>;\n \
      \   <span class=\"br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n\
      \t\tMoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"br0\">)</span>;\n        <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw7\">DesiredRotation</span> <span class=\"sy0\"\
      >!=</span> <span class=\"kw7\">Rotation</span> <span class=\"br0\">)</span>\n\
      \        <span class=\"br0\">{</span>\n            <span class=\"kw7\">RotationRate</span>.<span\
      \ class=\"me0\">Yaw</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >10000</span>;\n            DisplayBehavior<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">7</span> <span class=\"br0\">)</span>;\n        <span class=\"\
      br0\">}</span>\n        <span class=\"kw2\">else</span>\n            <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >state</span><span class=\"br0\">(</span><span class=\"br0\">)</span> Graze\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">event</span> <span class=\"\
      kw4\">AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\">int</span>\
      \ Channel <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n \
      \       <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Chew'</span><span class=\"br0\">)</span>;\n    <span class=\"\
      br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n        DisplayBehavior<span\
      \ class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;\n\
      \t\tMoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >state</span><span class=\"br0\">(</span><span class=\"br0\">)</span> Chew\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">event</span> <span class=\"\
      kw4\">AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\">int</span>\
      \ Channel <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n \
      \       <span class=\"kw1\">local</span>   <span class=\"kw5\">int</span>  \
      \   X;\n \n        X <span class=\"sy0\">=</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">15</span>;\n        <span class=\"kw2\">switch</span>\
      \ <span class=\"br0\">(</span> X <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span\
      \ class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n        \
      \    <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Graze'</span><span class=\"br0\"\
      >)</span>;       <span class=\"kw2\">break</span>;\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Poop'</span><span class=\"br0\">)</span>;\
      \        <span class=\"kw2\">break</span>;\n            <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"\
      br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Shake'</span><span class=\"br0\">)</span>;       <span class=\"\
      kw2\">break</span>;\n            <span class=\"kw2\">case</span><span class=\"\
      br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : <span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Swish'</span><span class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n\
      \            <span class=\"kw2\">case</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">5</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span class=\"br0\"\
      >)</span>;        <span class=\"kw2\">break</span>;\n            <span class=\"\
      kw1\">default</span> : DisplayBehavior<span class=\"br0\">(</span> <span class=\"\
      nu0\">3</span> <span class=\"br0\">)</span>;     <span class=\"kw2\">break</span>;\n\
      \        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n\
      \    <span class=\"kw2\">Begin</span>:\n        DisplayBehavior<span class=\"\
      br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>;\n\t\
      \tMoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >state</span> Poop\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">Timer</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw4\"\
      >spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'NaliCowPoop'</span>,, <span class=\"st0\">'Poop'</span>, <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> <span class=\"br0\">(</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Rotation</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">24</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span\
      \ class=\"kw5\">rotator</span><span class=\"br0\">(</span> <span class=\"kw3\"\
      >vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\"\
      >int</span> Channel <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw1\">local</span>   <span class=\"kw5\">int</span> \
      \    X;\n \n        X <span class=\"sy0\">=</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">20</span>;\n        <span class=\"kw2\">switch</span>\
      \ <span class=\"br0\">(</span> X <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Graze'</span><span\
      \ class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n        \
      \    <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Shake'</span><span class=\"br0\"\
      >)</span>;       <span class=\"kw2\">break</span>;\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Swish'</span><span class=\"br0\">)</span>;\
      \       <span class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Walk'</span><span class=\"br0\">)</span>;        <span class=\"kw2\"\
      >break</span>;\n            <span class=\"kw1\">default</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span\
      \ class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">Begin</span>:\n        DisplayBehavior<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">4</span> <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"\
      br0\">(</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">)</span>;\n\
      \        <span class=\"kw4\">SetTimer</span><span class=\"br0\">(</span> <span\
      \ class=\"nu0\">1.0</span>, <span class=\"kw6\">false</span> <span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> Shake\n<span class=\"br0\"\
      >{</span>\n    <span class=\"kw1\">event</span> <span class=\"kw4\">AnimEnd</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel <span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\"\
      >local</span>   <span class=\"kw5\">int</span>     X;\n \n        X <span class=\"\
      sy0\">=</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span>;\n\
      \        <span class=\"kw2\">switch</span> <span class=\"br0\">(</span> X <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Graze'</span><span class=\"br0\">)</span>;\
      \       <span class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Poop'</span><span class=\"br0\">)</span>;        <span class=\"kw2\"\
      >break</span>;\n \n            <span class=\"kw2\">case</span><span class=\"\
      br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> : DisplayBehavior<span\
      \ class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span>;\
      \     <span class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Swish'</span><span class=\"br0\">)</span>;       <span class=\"kw2\"\
      >break</span>;\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Walk'</span><span\
      \ class=\"br0\">)</span>;        <span class=\"kw2\">break</span>;\n       \
      \     <span class=\"kw1\">default</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span class=\"br0\"\
      >)</span>;       <span class=\"kw2\">break</span>;\n        <span class=\"br0\"\
      >}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n\
      \        DisplayBehavior<span class=\"br0\">(</span> <span class=\"nu0\">5</span>\
      \ <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">0.0</span> <span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">state</span> Swish\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw1\">event</span> <span class=\"kw4\">AnimEnd</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel <span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\"\
      >local</span>   <span class=\"kw5\">int</span>     X;\n \n        X <span class=\"\
      sy0\">=</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span>;\n\
      \        <span class=\"kw2\">switch</span> <span class=\"br0\">(</span> X <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Graze'</span><span class=\"br0\">)</span>;\
      \       <span class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Poop'</span><span class=\"br0\">)</span>;        <span class=\"kw2\"\
      >break</span>;\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Shake'</span><span\
      \ class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n        \
      \    <span class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"\
      nu0\">3</span><span class=\"br0\">)</span> : DisplayBehavior<span class=\"br0\"\
      >(</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span>;     <span\
      \ class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Walk'</span><span class=\"br0\">)</span>;        <span class=\"kw2\"\
      >break</span>;\n            <span class=\"kw1\">default</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span\
      \ class=\"br0\">)</span>;       <span class=\"kw2\">break</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">Begin</span>:\n        DisplayBehavior<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">6</span> <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"\
      br0\">(</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Walk\n<span\
      \ class=\"br0\">{</span>\n    <span class=\"kw1\">function</span> <span class=\"\
      kw4\">Tick</span><span class=\"br0\">(</span> <span class=\"kw5\">float</span>\
      \ DeltaTime <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Physics</span> <span class=\"sy0\">==</span> <span class=\"kw7\">PHYS_Walking</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> DamageTaken <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n        <span class=\"\
      br0\">{</span>\n            <span class=\"kw7\">Velocity</span> <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0.5</span> <span\
      \ class=\"sy0\">*</span> GroundSpeed <span class=\"br0\">)</span> <span class=\"\
      sy0\">*</span> <span class=\"kw5\">vector</span><span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Rotation</span> <span class=\"br0\">)</span>;\n      \
      \      <span class=\"kw7\">Acceleration</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw7\">Velocity</span>;\n        <span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\"\
      >int</span> Channel <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw1\">local</span>   <span class=\"kw5\">int</span> \
      \    X;\n \n        X <span class=\"sy0\">=</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">20</span>;\n        <span class=\"kw2\">switch</span>\
      \ <span class=\"br0\">(</span> X <span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n            <span class=\"kw2\">case</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> : <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Prone'</span><span\
      \ class=\"br0\">)</span>;\t\t\t\t\t\t\t<span class=\"kw2\">break</span>;\n \
      \           <span class=\"kw2\">case</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Turn'</span><span class=\"br0\"\
      >)</span>;\t\t\t\t\t\t\t<span class=\"kw2\">break</span>;\n            <span\
      \ class=\"kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Graze'</span><span class=\"br0\">)</span>;\t\
      \t\t\t\t\t\t<span class=\"kw2\">break</span>;\n            <span class=\"kw2\"\
      >case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"\
      br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Poop'</span><span class=\"br0\">)</span>;\t\t\t\t\t\t\t<span\
      \ class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Shake'</span><span class=\"br0\">)</span>;\t\t\t\t\t\t\t<span class=\"\
      kw2\">break</span>;\n            <span class=\"kw2\">case</span><span class=\"\
      br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> : <span\
      \ class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Swish'</span><span class=\"br0\">)</span>;\t\t\t\t\t\t\t<span class=\"kw2\"\
      >break</span>;\n            <span class=\"kw1\">default</span> : DisplayBehavior<span\
      \ class=\"br0\">(</span> <span class=\"nu0\">7</span> <span class=\"br0\">)</span>;\
      \ MoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.5</span> <span\
      \ class=\"br0\">)</span>;\t\t<span class=\"kw2\">break</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">Begin</span>:\n        DisplayBehavior<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">7</span> <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"\
      br0\">(</span> <span class=\"nu0\">0.5</span> <span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Run\n<span\
      \ class=\"br0\">{</span>\n    <span class=\"kw1\">function</span> <span class=\"\
      kw4\">Tick</span><span class=\"br0\">(</span> <span class=\"kw5\">float</span>\
      \ DeltaTime <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">Physics</span> <span class=\"sy0\">==</span> <span class=\"kw7\">PHYS_Walking</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> DamageTaken <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n        <span class=\"\
      br0\">{</span>\n            <span class=\"kw7\">Velocity</span> <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> GroundSpeed <span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Rotation</span> <span class=\"\
      br0\">)</span>;\n            <span class=\"kw7\">Acceleration</span> <span class=\"\
      sy0\">=</span> <span class=\"kw7\">Velocity</span>;\n        <span class=\"\
      br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\"\
      >event</span> <span class=\"kw4\">AnimEnd</span><span class=\"br0\">(</span>\
      \ <span class=\"kw5\">int</span> Channel <span class=\"br0\">)</span>\n    <span\
      \ class=\"br0\">{</span>\n        <span class=\"kw1\">local</span>   <span class=\"\
      kw5\">int</span>     X;\n \n        X <span class=\"sy0\">=</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">*</span> <span class=\"nu0\">10</span>;\n        <span class=\"\
      kw2\">switch</span> <span class=\"br0\">(</span> X <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Walk'</span><span class=\"br0\">)</span>;\t\t\t\t\t\t\t<span class=\"\
      kw2\">break</span>;\n            <span class=\"kw1\">default</span> : DisplayBehavior<span\
      \ class=\"br0\">(</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span>;\
      \ MoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span> <span\
      \ class=\"br0\">)</span>;\t\t<span class=\"kw2\">break</span>;\n        <span\
      \ class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      kw2\">Begin</span>:\n        DisplayBehavior<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">8</span> <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"\
      br0\">(</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Land\n<span\
      \ class=\"br0\">{</span>\n    <span class=\"kw1\">function</span> <span class=\"\
      kw4\">Timer</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      \    <span class=\"br0\">{</span>\n        <span class=\"kw1\">local</span>\
      \   <span class=\"kw5\">int</span>     X;\n \n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> bStartled <span class=\"br0\">)</span>  <span\
      \ class=\"co1\">// Always run if startled.</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\t<span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Run'</span><span class=\"br0\">)</span>;\n\t\t\t<span class=\"\
      kw2\">return</span>;\n\t\t<span class=\"br0\">}</span>\n \n        X <span class=\"\
      sy0\">=</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>;\n\
      \        <span class=\"kw2\">switch</span> <span class=\"br0\">(</span> X <span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"\
      kw2\">case</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Prone'</span><span class=\"br0\">)</span>;\
      \   <span class=\"kw2\">break</span>;\n            <span class=\"kw2\">case</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Turn'</span><span class=\"br0\">)</span>;    <span class=\"kw2\">break</span>;\n\
      \            <span class=\"kw2\">case</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span> : <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Shake'</span><span class=\"br0\"\
      >)</span>;   <span class=\"kw2\">break</span>;\n            <span class=\"kw1\"\
      >default</span> : <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Walk'</span><span class=\"br0\">)</span>;    <span class=\"\
      kw2\">break</span>;\n        <span class=\"br0\">}</span>\n    <span class=\"\
      br0\">}</span>\n \n    <span class=\"kw1\">event</span> <span class=\"kw4\"\
      >AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel\
      \ <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span\
      \ class=\"kw4\">SetTimer</span><span class=\"br0\">(</span> <span class=\"nu0\"\
      >0.2</span>, <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n\
      \    <span class=\"br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n\
      \        DisplayBehavior<span class=\"br0\">(</span> <span class=\"nu0\">9</span>\
      \ <span class=\"br0\">)</span>;\n\t\tMoveCheck<span class=\"br0\">(</span> <span\
      \ class=\"nu0\">0.0</span> <span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">state</span> TakeHit\n<span class=\"br0\"\
      >{</span>\n    <span class=\"kw1\">function</span> <span class=\"kw4\">Timer</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n    <span class=\"br0\"\
      >{</span>\n        <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Run'</span><span class=\"br0\">)</span>;\n    <span class=\"\
      br0\">}</span>\n \n    <span class=\"kw1\">event</span> <span class=\"kw4\"\
      >AnimEnd</span><span class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel\
      \ <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> Health <span class=\"\
      sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>\n\
      \            <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Dying'</span><span class=\"br0\">)</span>;\n        <span class=\"\
      kw2\">else</span>\n            <span class=\"kw4\">SetTimer</span><span class=\"\
      br0\">(</span> <span class=\"nu0\">0.2</span>, <span class=\"kw6\">false</span>\
      \ <span class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n \n    <span\
      \ class=\"kw2\">Begin</span>:\n        DisplayBehavior<span class=\"br0\">(</span>\
      \ <span class=\"nu0\">10</span>, <span class=\"kw3\">Min</span><span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> DamageTaken <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">15</span> <span class=\"br0\">)</span>, <span\
      \ class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \        MoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span>\
      \ <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">state</span> Dying\n<span class=\"br0\">{</span>\n    <span class=\"kw1\"\
      >Ignores</span> <span class=\"kw4\">Trigger</span>, <span class=\"kw4\">Touch</span>,\
      \ <span class=\"kw4\">Bump</span>, <span class=\"kw4\">Landed</span>, Died;\n\
      \ \n    <span class=\"kw1\">function</span> <span class=\"kw4\">Timer</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n    <span class=\"br0\"\
      >{</span>\n        <span class=\"kw4\">SetPhysics</span><span class=\"br0\"\
      >(</span> <span class=\"kw7\">PHYS_None</span> <span class=\"br0\">)</span>;\n\
      \        <span class=\"kw4\">SetCollision</span><span class=\"br0\">(</span>\
      \ <span class=\"kw6\">false</span>, <span class=\"kw6\">false</span> <span class=\"\
      br0\">)</span>;\n        <span class=\"kw7\">Lifespan</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">3.0</span>;\n        <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> PlayerCanSeeMe<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n            DeRez<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n        <span class=\"\
      kw2\">else</span>\n            <span class=\"kw4\">Destroy</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n    <span class=\"br0\">}</span>\n\
      \ \n    <span class=\"kw1\">event</span> <span class=\"kw4\">AnimEnd</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">int</span> Channel <span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw4\"\
      >SetTimer</span><span class=\"br0\">(</span> <span class=\"nu0\">4.0</span>,\
      \ <span class=\"kw6\">false</span> <span class=\"br0\">)</span>;\n    <span\
      \ class=\"br0\">}</span>\n \n    <span class=\"kw2\">Begin</span>:\n       \
      \ <span class=\"kw4\">StopAnimating</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n        DisplayBehavior<span class=\"br0\">(</span>\
      \ <span class=\"nu0\">11</span>, <span class=\"kw3\">Min</span><span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> DamageTaken <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span>, <span\
      \ class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \        MoveCheck<span class=\"br0\">(</span> <span class=\"nu0\">0.0</span>\
      \ <span class=\"br0\">)</span>;\n        <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"me0\"\
      >NetMode</span> <span class=\"sy0\">==</span> NM_DedicatedServer <span class=\"\
      br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"\
      kw4\">SetPhysics</span><span class=\"br0\">(</span> <span class=\"kw7\">PHYS_None</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw4\">SetCollision</span><span\
      \ class=\"br0\">(</span> <span class=\"kw6\">false</span>, <span class=\"kw6\"\
      >false</span> <span class=\"br0\">)</span>;\n            <span class=\"kw7\"\
      >LifeSpan</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span>;\n\
      \            bTearOff <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\
      \        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">defaultProperties</span> \n<span class=\"br0\">{</span>\n  \
      \  <span class=\"kw7\">CollisionHeight</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">34</span>\n    SurfaceType<span class=\"sy0\">=</span>EST_Flesh\n\
      \    <span class=\"kw5\">Mesh</span><span class=\"sy0\">=</span>VertMesh<span\
      \ class=\"st0\">'SkaarjPack_rc.NaliCow'</span>\n    <span class=\"kw7\">Physics</span><span\
      \ class=\"sy0\">=</span><span class=\"kw7\">PHYS_Walking</span>\n    GroundSpeed<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">100</span>\n    bReplicateAnimations<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>\n    bFullVolume<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>\n    <span class=\"\
      kw7\">SoundRadius</span><span class=\"sy0\">=</span><span class=\"nu0\">512</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"NaliCowPoop\">NaliCowPoop</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=21\"\
      \ title=\"Edit section: NaliCowPoop\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>An obvious Projectile to use for this NaliCowPoop\
      \ Actor is the BioRifle's Projectile, BioGlob. It uses a Mesh that automatically\
      \ drips, jiggles and splats like our desired NaliCowPoop should. We will need\
      \ to make a custom subclass of BioGlob, change its Texture, Lighting and alter\
      \ some of it's default code to prevent it from causing Damage.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"BioGlob_Default_Properties\">BioGlob Default Properties</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=22\" title=\"Edit\
      \ section: BioGlob Default Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>(Display) Skins&#160;</dt>\n<dd>It's default\
      \ Skins are set for BioRifle ammo. We will set it to <tt>Texture'XEffectMat.goop.SlimeSkin'</tt>.</dd>\n\
      <dt>(Movement) vector Velocity&#160;</dt>\n<dd>The BioGlob starts with a lot\
      \ of velocity by default, we will set it to vect(0,0,0) during PostBeginPlay().</dd>\n\
      <dt>(Lighting) int AmbientGlow&#160;</dt>\n<dd>BioGlobs have an AmbientGlow\
      \ by default. We will set this to zero.</dd>\n<dt>(Lighting) bool bUnlit&#160;</dt>\n\
      <dd>BioGlobs are unlit by default. We will set this to false.</dd>\n<dt>(Lighting)\
      \ bool bDynamicLight&#160;</dt>\n<dd>BioGlobs glow by default. We will set this\
      \ to false.</dd>\n<dt>(Lighting) LightType&#160;</dt>\n<dd>We will set this\
      \ to LT_None.</dd>\n<dt>float RestTime&#160;</dt>\n<dd>This property is originally\
      \ defined in BioGlob. It determines how long the BioGlob sits before it calls\
      \ BlowUp(). We will set this value to 10.0.</dd>\n<dt>int BaseDamage&#160;</dt>\n\
      <dd>This property is originally defined in BioGlob. We will make sure this doesn't\
      \ cause damage by setting it to 0.</dd>\n</dl>\n<h4><span class=\"mw-headline\"\
      \ id=\"BioGlob_Default_Methods\">BioGlob Default Methods</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=23\"\
      \ title=\"Edit section: BioGlob Default Methods\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>BlowUp( vector HitLocation )&#160;</dt>\n<dd>This\
      \ function is originally defined in BioGlob. We will modify it to not cause\
      \ damage and instead switch to a Shriveling state, which shrinks the BioGlob\
      \ and \"pops\" it.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Final_Source_Code_2\"\
      >Final Source Code</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=24\" title=\"\
      Edit section: Final Source Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// NaliCowPoop.</span>\n<span class=\"co1\">// The effects\
      \ result of the NaliCow Poop behavior.</span>\n<span class=\"co1\">// by SuperApe\
      \ -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> NaliCowPoop <span class=\"kw1\">extends</span>\
      \ BioGlob;\n \n<span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"kw7\"\
      >Velocity</span> <span class=\"sy0\">=</span> <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// BlowUp() is originally defined in BioGlob.</span>\n\
      <span class=\"kw1\">function</span> BlowUp<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">vector</span> HitLocation <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Shriveling'</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultProperties</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw7\">Skins</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Texture</span><span class=\"st0\"\
      >'XEffectMat.goop.SlimeSkin'</span>\n\tAmbientGlow<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>\n\tbUnlit<span class=\"sy0\">=</span><span class=\"\
      kw6\">false</span>\n\tbDynamicLight<span class=\"sy0\">=</span><span class=\"\
      kw6\">false</span>\n\tLightType<span class=\"sy0\">=</span>LT_None\n\tRestTime<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">10.0</span>\n\tBaseDamage<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Testing_and_Implementation\">Testing\
      \ and Implementation</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=25\" title=\"\
      Edit section: Testing and Implementation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The new NPC character should be tested thoroughly\
      \ to ensure it is behaving reliably both as a character and as a game object.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Compiling\">Compiling</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=26\"\
      \ title=\"Edit section: Compiling\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you're familiar with <a href=\"/Legacy:Compiling_With_UCC\"\
      \ title=\"Legacy:Compiling With UCC\">Compiling With UCC</a>, then you can skip\
      \ this section.</p>\n<p>The steps for compiling our NPC code are as follows:</p>\n\
      <ol>\n<li>Find your UT2004 base directory. This is usually <tt>C:/UT2004/</tt>.\
      \ We will refer to this as <tt>.../UT2004/</tt> from this point on.</li>\n<li>Create\
      \ a subdirectory there for our NaliCow code, <tt>.../UT2004/NaliCow/</tt>, and\
      \ create a subdirectory within that for our Classes, <tt>.../UT2004/NaliCow/Classes</tt></li>\n\
      <li>Within that Classes subdirectory, create a simple (text) file with a .uc\
      \ extention called, \"NaliCow.uc\", and another called, \"NaliCowPoop.uc\".</li>\n\
      <li>Copy the above final source code for the NaliCow and paste it into the .uc\
      \ file. Do the same for the NaliCowPoop code.</li>\n<li>Find your <tt>.../UT2004/System/UT2004.ini</tt>\
      \ file and edit it with a text editor. Find the <tt>EditPackages=</tt> block\
      \ and add <tt>EditPackages=NaliCow</tt> to the end of the block. This will make\
      \ sure the compiling application knows which subdirectory to look for things\
      \ to compile.</li>\n<li>In Windows, use StartMenu -&gt; Run... to launch <tt>.../UT2004/System/ucc\
      \ make</tt>.</li>\n<li>If there were no errors, you will now have a <tt>.../UT2004/System/NaliCow.u</tt>\
      \ package file. (Note that to <i>re-compile</i> a package, you must remove it\
      \ from the <tt>.../UT2004/System/</tt> subdirectory, or else the compiling application\
      \ will skip it.)</li>\n<li>If there were errors, they are in the ucc log file,\
      \ <tt>.../UT2004/System/ucc.txt</tt>, and will tell you which line number the\
      \ error came from.</li>\n</ol>\n<h3><span class=\"mw-headline\" id=\"Implementation\"\
      >Implementation</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=27\" title=\"\
      Edit section: Implementation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Now, we will bring our NPC into the game environment\
      \ to test and debug.</p>\n<ol>\n<li>Within Ued, open a map suitable for testing\
      \ our NPC.</li>\n<li>In the <a href=\"/Legacy:Actor_Browser\" title=\"Legacy:Actor\
      \ Browser\" class=\"mw-redirect\">Actor Browser</a>, go to File -&gt; Open...\
      \ and select our <tt>NaliCow.u</tt> package file.</li>\n<li>Add an Actor -&gt;\
      \ Pawn -&gt; NaliCow to the map.</li>\n<li>Configure the desired properties,\
      \ if any.</li>\n<li>Hit the Playtest (\"Joystick\") button on the <a href=\"\
      /Legacy:Toolbar\" title=\"Legacy:Toolbar\">Toolbar</a>.</li>\n</ol>\n<p>Now\
      \ you have the ability to test it's behaviors under a variety of situations.\
      \ This is a good idea to do with any new AI construct. Be vigilant and thorough\
      \ in your testing to find all the possible bugs.</p>\n<p>Some helpful <a href=\"\
      /Legacy:Console_Commands\" title=\"Legacy:Console Commands\">Console Commands</a>\
      \ to use during testing are:</p>\n<dl>\n<dt>summon NaliCow.NaliCow&#160;</dt>\n\
      <dd>This spawns a default NaliCow, placed directly in front of your view.</dd>\n\
      <dt>addbots &lt;int NumberOfBots&gt;&#160;</dt>\n<dd>This adds bots to the map.</dd>\n\
      <dt>killall &lt;class KillClass&gt;&#160;</dt>\n<dd>This destroys all objects\
      \ of the given KillClass.</dd>\n<dt>allweapons&#160;</dt>\n<dd>Gives all weapons\
      \ and default ammo.</dd>\n<dt>map &lt;name MapName&gt;&#160;</dt>\n<dd>Starts\
      \ a new match within the MapName provided. Note that <b>map autoplay</b> will\
      \ re-start the current map within Ued's memory.</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"Replication\">Replication</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=28\"\
      \ title=\"Edit section: Replication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you know how to <a href=\"/Legacy:Launch_A_Local_Netgame\"\
      \ title=\"Legacy:Launch A Local Netgame\">Launch a Local Netgame</a>, you may\
      \ skip this section.</p>\n<p>Testing Replication is important to ensure that\
      \ what you have made offline will work just as well online.</p>\n<ol>\n<li>Save\
      \ a map with at least a few NaliCows in it, different settings, etc. Save it\
      \ to the <tt>.../UT2004/Maps/</tt> subdirectory with a valid <a href=\"/Legacy:Map_File_Prefix\"\
      \ title=\"Legacy:Map File Prefix\">Map File Prefix</a>.</li>\n<li>Launch UT2004\
      \ and Host a game. Pick your custom map and click on <b>Dedicated</b>. The menu\
      \ window will disappear and a server log window will open as the game launches\
      \ in the background.</li>\n<li>Launch UT2004 again. Bring down the console and\
      \ type, <tt>map 127.0.0.1</tt>, to join the local server you just started.</li>\n\
      <li>Once there for the first time, bring up the menu by hitting Esc and save\
      \ this local server as one of your \"Favs\" for easier Joining in the future.</li>\n\
      </ol>\n<p>Now, you're seeing what a slow Dial-Up client player sees. There will\
      \ be some lag due to your machine handling both the Server and Client at the\
      \ same time. However, this is important to see what imformation is being Replicated\
      \ properly and what isn't.</p>\n<p>For pinpointing the problems, it's useful\
      \ to use Logs to be called either on the DedicatedServer or not. See also <a\
      \ href=\"/Legacy:Netcode_Idioms\" title=\"Legacy:Netcode Idioms\">Netcode Idioms</a>.\
      \ The Logs are found at <tt>.../UT2004/System/Server.txt</tt> for the Server\
      \ and <tt>.../UT2004/System/UT2004.txt</tt> for the Client.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Further_Development\">Further Development</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=29\"\
      \ title=\"Edit section: Further Development\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Beyond this basic NaliCow NPC, more can be done to\
      \ improve behavior, realism, gameplay or ease of use.</p>\n<h3><span class=\"\
      mw-headline\" id=\"DrawScale_Adjustments\">DrawScale Adjustments</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=30\" title=\"Edit\
      \ section: DrawScale Adjustments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Based on the DrawScale property, several adjustments\
      \ can be made during PostBeginPlay() to make sure the NaliCow behaves, moves\
      \ and sounds properly. The result is a simple one-property adjustment that can\
      \ be made to make a small, fast baby cow or a big, slow older cow. We will use\
      \ a separate function that can be called from PostBeginPlay(), AdjustForSize().\
      \ Before the adjustments are made, we can make sure the DrawScale is within\
      \ a reasonable size range.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// PostBeginPlay() is originally defined in Actor().</span>\n<span class=\"\
      co1\">// We will use it to make sure an AIController is spawned for our NaliCow.</span>\n\
      <span class=\"kw1\">event</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> ControllerClass\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw9\">Controller</span> <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n\t\t<span class=\"kw9\">Controller</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">spawn</span><span class=\"br0\">(</span> ControllerClass\
      \ <span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw9\">Controller</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Possess</span><span class=\"br0\"\
      >(</span> <span class=\"kw6\">self</span> <span class=\"br0\">)</span>;\n \n\
      \tAdjustForSize<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"co1\">// AdjustForSize() will make\
      \ various adjustments according to DrawScale.</span>\n<span class=\"kw1\">function</span>\
      \ AdjustForSize<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw7\">DrawScale</span> <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">3.0</span> <span class=\"sy0\">||</span> <span class=\"\
      kw7\">DrawScale</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"kw4\">SetDrawScale</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">FClamp</span><span class=\"br0\"\
      >(</span> <span class=\"kw7\">DrawScale</span>, <span class=\"nu0\">3.0</span>,\
      \ <span class=\"nu0\">0.5</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>;\n\t<span class=\"kw4\">SetCollisionSize</span><span class=\"\
      br0\">(</span> <span class=\"nu0\">34</span> <span class=\"sy0\">*</span> <span\
      \ class=\"kw7\">DrawScale</span>, <span class=\"nu0\">34</span> <span class=\"\
      sy0\">*</span> <span class=\"kw7\">DrawScale</span> <span class=\"br0\">)</span>;\n\
      \t<span class=\"kw7\">Mass</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">100</span> <span class=\"sy0\">*</span> <span class=\"kw7\">DrawScale</span>;\n\
      \tHealth <span class=\"sy0\">=</span> <span class=\"nu0\">100</span> <span class=\"\
      sy0\">*</span> <span class=\"kw7\">DrawScale</span>;\n\t<span class=\"kw7\"\
      >SoundRadius</span> <span class=\"sy0\">=</span> <span class=\"nu0\">512</span>\
      \ <span class=\"sy0\">*</span> <span class=\"kw7\">DrawScale</span>;\n\t<span\
      \ class=\"kw7\">SoundPitch</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">128</span> <span class=\"sy0\">/</span> <span class=\"kw7\">DrawScale</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw7\">DrawScale</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1.5</span>\
      \ <span class=\"br0\">)</span>\n\t\tbCanBeBaseForPawns <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Other functions and elements will also have to be changed based on\
      \ DrawScale. Changes to the AnimationRate, RotationRate, SoundVolume, SoundPitch,\
      \ NaliCowPoop DrawScale and RestTime, etc. can all be made to reflect the size\
      \ of the NaliCow. For example, the Acting() function can be altered to look\
      \ like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// Acting() loops the given animation sequence name and plays the given\
      \ sound.</span>\n<span class=\"co1\">// For Replication purposes, animation\
      \ is normally looped.  Sequences may be interupted each AnimEnd().</span>\n\
      <span class=\"kw1\">function</span> Acting<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">name</span> Anim, <span class=\"kw5\">sound</span> Soundname,\
      \ <span class=\"kw5\">bool</span> bLoop <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> bLoop <span class=\"br0\">)</span>\n        <span class=\"kw4\">LoopAnim</span><span\
      \ class=\"br0\">(</span> Anim, <span class=\"br0\">(</span> <span class=\"nu0\"\
      >1.0</span> <span class=\"sy0\">/</span> <span class=\"kw7\">DrawScale</span>\
      \ <span class=\"br0\">)</span>, <span class=\"br0\">(</span> <span class=\"\
      nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"kw7\">DrawScale</span>\
      \ <span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\"\
      >10</span> <span class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span>\n\
      \t\t<span class=\"kw4\">PlayAnim</span><span class=\"br0\">(</span> Anim, <span\
      \ class=\"br0\">(</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\"\
      >/</span> <span class=\"kw7\">DrawScale</span> <span class=\"br0\">)</span>,\
      \ <span class=\"br0\">(</span> <span class=\"nu0\">1.0</span> <span class=\"\
      sy0\">/</span> <span class=\"kw7\">DrawScale</span> <span class=\"br0\">)</span><span\
      \ class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"br0\">)</span>;\n\
      \    SimAnim.<span class=\"me0\">AnimSequence</span> <span class=\"sy0\">=</span>\
      \ Anim;\n    SimAnim.<span class=\"me0\">AnimRate</span> <span class=\"sy0\"\
      >=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1.0</span> <span\
      \ class=\"sy0\">/</span> <span class=\"kw7\">DrawScale</span> <span class=\"\
      br0\">)</span>;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ bLoop <span class=\"br0\">)</span>\n        SimAnim.<span class=\"me0\">bAnimLoop</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n    <span class=\"\
      kw2\">else</span>\n        SimAnim.<span class=\"me0\">bAnimLoop</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw6\">false</span>;\n\tSimAnim.<span\
      \ class=\"me0\">TweenRate</span> <span class=\"sy0\">=</span> <span class=\"\
      br0\">(</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span\
      \ class=\"kw7\">DrawScale</span> <span class=\"br0\">)</span><span class=\"\
      sy0\">/</span><span class=\"nu0\">10</span>;\n    <span class=\"kw4\">PlaySound</span><span\
      \ class=\"br0\">(</span> Soundname, <span class=\"kw7\">SLOT_Misc</span>, <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">DrawScale</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>,,,\
      \ <span class=\"br0\">(</span> <span class=\"kw7\">SoundPitch</span> <span class=\"\
      sy0\">/</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Cow_and_Baby_Relationships\">Cow and Baby\
      \ Relationships</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=31\" title=\"\
      Edit section: Cow and Baby Relationships\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The original <a href=\"/Legacy:Cow\" title=\"Legacy:Cow\"\
      >Cow</a> and BabyCow UT creatures had properties to define their relationships.\
      \ These can be reproduced with our NaliCow to perform the same behaviors.</p>\n\
      <h4><span class=\"mw-headline\" id=\"bHasBaby_and_BabyCow\">bHasBaby and BabyCow</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=32\" title=\"Edit\
      \ section: bHasBaby and BabyCow\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>In UT, the property bHasBaby was meant to automatically\
      \ spawn a BabyCow (a smaller version) for this Cow. BabyCows were not meant\
      \ to be explicitly placed in maps. A simple modification to PostBeginPlay()\
      \ should allow us to use our new DrawScale adjustments to do this easily.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\t\t<span class=\"kw5\"\
      >bool</span>\t\tbHasBaby;\t\t<span class=\"co1\">// This NaliCow will spawn\
      \ a smaller \"Baby\" at map start.</span>\n<span class=\"kw1\">var</span>  \t\
      \tNaliCow\t\tMama;\t\t\t<span class=\"co1\">// This NaliCow is a \"Baby\" and\
      \ should stay close to \"Mama\".</span>\n \n<span class=\"kw1\">event</span>\
      \ <span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span>\tNaliCow\t\tBaby;\n \n\t<span class=\"kw6\">Super</span>.<span\
      \ class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"br0\">(</span> ControllerClass <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>\n\t\t<span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw4\">spawn</span><span class=\"\
      br0\">(</span> ControllerClass <span class=\"br0\">)</span>;\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw9\">Controller</span>.<span class=\"me0\"\
      >Possess</span><span class=\"br0\">(</span> <span class=\"kw6\">self</span>\
      \ <span class=\"br0\">)</span>;\n \n\tAdjustForSize<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> bHasBaby <span class=\"br0\">)</span>\n\t\t<span class=\"kw2\"\
      >while</span> <span class=\"br0\">(</span> Baby <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\tBaby <span class=\"sy0\">=</span> <span class=\"kw4\"\
      >spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'NaliCow'</span>, <span class=\"kw6\">self</span>,, <span class=\"\
      kw7\">Location</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw3\">VRand</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span\
      \ class=\"nu0\">64</span> <span class=\"sy0\">+</span> <span class=\"kw7\">CollisionRadius</span>\
      \ <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"\
      kw7\">Rotation</span> <span class=\"br0\">)</span>;\n\t\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> Baby <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      br0\">{</span>\n\t\t\t\tBaby.<span class=\"me0\">Mama</span> <span class=\"\
      sy0\">=</span> <span class=\"kw6\">self</span>;\n\t\t\t\tBaby.<span class=\"\
      kw4\">SetDrawScale</span><span class=\"br0\">(</span> <span class=\"kw7\">DrawScale</span>\
      \ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\"\
      >)</span>;\n\t\t\t\tBaby.<span class=\"me0\">AdjustForSize</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n\t\t\t<span class=\"br0\">}</span>\n\
      \t\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Also, we should encourage the BabyCow to stay close to its \"Mama\"\
      . We will do this with a modification to ReachedDestination(). The following\
      \ code will be added to ReachedDestination() just before NewTarget is assigned\
      \ to the Controller attributes.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> Mama <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\
      \t\tNewTarget <span class=\"sy0\">=</span> Mama;</pre></div>\n</div>\n<h4><span\
      \ class=\"mw-headline\" id=\"bStayClose_and_WanderRadius\">bStayClose and WanderRadius</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=33\" title=\"Edit\
      \ section: bStayClose and WanderRadius\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>bStayClose modified the behavior of the Cow so that\
      \ it's Movement destinations were never more than WanderRadius UU away from\
      \ it's starting Location. <i>Note: Although there is a <b>home</b> property\
      \ defined in Controller, it is defined as a NavigationPoint and won't serve\
      \ this purpose.</i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\
      <span class=\"kw5\">bool</span>\t\tbStayClose;\t\t<span class=\"co1\">// This\
      \ NaliCow will only select MoveTargets within WanderRadius.</span>\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\
      <span class=\"kw5\">int</span> \t\tWanderRadius;\t<span class=\"co1\">// The\
      \ radius from Home that MoveTargets will be selected.</span>\n<span class=\"\
      kw1\">var</span>  \t\t<span class=\"kw5\">vector</span>\t\tHome;\t\t\t<span\
      \ class=\"co1\">// The Location this NaliCow started at.</span></pre></div>\n\
      </div>\n<p>And the following code will be added to the end of ReachedDestination().</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> bStayClose <span class=\"sy0\">&amp;&amp;</span> WanderRadius\
      \ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"\
      sy0\">&amp;&amp;</span> \n\t\t<span class=\"br0\">(</span> <span class=\"kw3\"\
      >VSize</span><span class=\"br0\">(</span> NewTarget.<span class=\"kw7\">Location</span>\
      \ <span class=\"sy0\">-</span> Home <span class=\"br0\">)</span> <span class=\"\
      sy0\">&gt;</span> WanderRadius <span class=\"sy0\">||</span> \n\t\t\t<span class=\"\
      kw3\">VSize</span><span class=\"br0\">(</span> <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">-</span> Home <span class=\"\
      br0\">)</span> <span class=\"sy0\">&gt;</span> WanderRadius <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t\
      <span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>\
      \ <span class=\"sy0\">=</span> Home <span class=\"sy0\">+</span> <span class=\"\
      br0\">(</span> <span class=\"kw3\">VRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> WanderRadius <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>;\n\t\t<span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n\t<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Ridable_NaliCows\"\
      >Ridable NaliCows</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=34\" title=\"\
      Edit section: Ridable NaliCows\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>An extra gameplay feature could be to have players\
      \ be able to ride and loosely steer larger NaliCows. You may have noticed the\
      \ <tt>bCanBeBaseForPawns</tt> property set during AdjustForSize() in the section\
      \ above. This will allow larger cows to support and carry Pawns. Once a player\
      \ has managed to get on top of one, a simple UsedBy() function can enable them\
      \ to press Use and become a special Pawn to the NaliCow.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span>\t\t<span class=\"kw9\"\
      >Pawn</span>\t\tRider;\t\t\t<span class=\"co1\">// PlayerPawn riding this cow.</span>\n\
      \ \n<span class=\"co1\">// UsedBy() is originally defined in Actor.</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">UsedBy</span><span class=\"\
      br0\">(</span> <span class=\"kw9\">Pawn</span> P <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"sy0\">!</span>bCanBeBaseForPawns <span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw2\">return</span>;\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> Rider <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n\t\tRider <span class=\"sy0\">=</span> P;\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw9\">PlayerController</span><span\
      \ class=\"br0\">(</span> Rider.<span class=\"kw9\">Controller</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n\t\t\t<span class=\"kw9\">PlayerController</span><span\
      \ class=\"br0\">(</span> Rider.<span class=\"kw9\">Controller</span> <span class=\"\
      br0\">)</span>.<span class=\"me0\">bBehindView</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n\t<span class=\"br0\">}</span>\n \n\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> P <span class=\"sy0\"\
      >==</span> Rider <span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw9\">Controller</span>.<span class=\"me0\">Destination</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> <span class=\"br0\">(</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">rot</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> Rider.<span class=\"kw9\"\
      >Controller</span>.<span class=\"kw7\">Rotation</span>.<span class=\"me0\">Yaw</span>\
      \ <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\"\
      >1024</span> <span class=\"br0\">)</span>;\n\t\t<span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span><span\
      \ class=\"kw6\">self</span>.<span class=\"kw3\">IsInState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\t\t<span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Run'</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"kw2\">else</span>\n\t\t\t<span class=\"kw4\">PlaySound</span><span\
      \ class=\"br0\">(</span> <span class=\"kw5\">sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.injurC1c'</span>, <span class=\"kw7\">SLOT_Misc</span>, <span\
      \ class=\"br0\">(</span> <span class=\"kw7\">DrawScale</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>,,,\
      \ <span class=\"br0\">(</span> <span class=\"kw7\">SoundPitch</span> <span class=\"\
      sy0\">/</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Once the player has become a Rider to the\
      \ NaliCow, the NaliCow's Controller's Destinations are subject to the whims\
      \ of the Rider.Controller. The Rider.Controller also is automatically set to\
      \ bBehindView to give a visual cue that the change has taken place. By pressing\
      \ the Use key, the NaliCow is urged to keep Running. When the NaliCow reaches\
      \ it's Destinations, we'll keep the player in control by adding a little code\
      \ to the top of ReachedDestination().</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Rider <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\"\
      >)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span> Rider.<span class=\"kw7\">Location</span> <span class=\"sy0\"\
      >-</span> <span class=\"kw7\">Location</span> <span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&gt;</span> <span class=\"br0\">(</span> <span class=\"kw7\"\
      >CollisionHeight</span> <span class=\"sy0\">+</span> Rider.<span class=\"kw7\"\
      >CollisionHeight</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \        <span class=\"br0\">{</span>\n            <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw9\">PlayerController</span><span\
      \ class=\"br0\">(</span> Rider.<span class=\"kw9\">Controller</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n                <span class=\"kw9\">PlayerController</span><span\
      \ class=\"br0\">(</span> Rider.<span class=\"kw9\">Controller</span> <span class=\"\
      br0\">)</span>.<span class=\"me0\">bBehindView</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n            Rider <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>;  <span class=\"co1\">// Rider has left.</span>\n\
      \        <span class=\"br0\">}</span>\n        <span class=\"kw2\">else</span>\n\
      \        <span class=\"br0\">{</span>\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Destination</span> <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Location</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw5\">vector</span><span class=\"br0\">(</span> <span class=\"\
      kw3\">rot</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> Rider.<span class=\"kw9\">Controller</span>.<span\
      \ class=\"kw7\">Rotation</span>.<span class=\"me0\">Yaw</span> <span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1024</span>\
      \ <span class=\"br0\">)</span>;\n            <span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">FocalPoint</span> <span class=\"sy0\">=</span> <span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Destination</span>;\n          \
      \  <span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n    \
      \    <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>To stop being a Rider, the player can simply move off the NaliCow.\
      \ The bBehindView setting will return after the NaliCow has reached it's next\
      \ Destination.</p>\n<h2><span class=\"mw-headline\" id=\"External_Links\">External\
      \ Links</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=35\" title=\"\
      Edit section: External Links\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Other links to basic AI scripting tutorials should\
      \ be listed here:</p>\n<ul>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.langsuyar.com/articles/u2_tutorialsmain.html\">Mattias Worch's\
      \ Unreal 2 Tutorials</a> <b>(broken)</b>&#160;:</li>\n</ul>\n<dl>\n<dd>Mattias\
      \ Worch worked on the Unreal 2 team and has written a few useful tutorials on\
      \ AI scripting. The tutorials on this page directly relating to AI scripting\
      \ are \"Set up Dialog and AI Scripting for a Level,\" and \"Create a Basic AI\
      \ Script.\" Please note that the copyright on these tutorials allows us to link\
      \ to them, but not to \"wikify\" the tutorials and place them here. If you would\
      \ like to have a tutorial on the Wiki, I'm sure that everyone would appreciate\
      \ if someone were to read over these tutorials and experiment with AI scripting\
      \ until they had a complete enough understanding to place an original tutorial\
      \ here.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=36\" title=\"\
      Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Artificial_Intelligence\"\
      \ title=\"Legacy:Artificial Intelligence\">Artificial Intelligence</a> – A super\
      \ topic on all AI (bots, Monsters, NPCs, etc.)\n<ul>\n<li><a href=\"/Legacy:Bot_Support\"\
      \ title=\"Legacy:Bot Support\">Bot Support</a></li>\n<li><a href=\"/Legacy:Monster_Support\"\
      \ title=\"Legacy:Monster Support\">Monster Support</a></li>\n<li><a href=\"\
      /Legacy:NPC_Support\" title=\"Legacy:NPC Support\">NPC Support</a></li>\n</ul>\n\
      </li>\n<li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making\
      \ Mods</a> and <a href=\"/Legacy:Mutator_Topics\" title=\"Legacy:Mutator Topics\"\
      >Mutator Topics</a></li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a></li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\"\
      >Discussion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_AI_Scripting_Tutorial?section=37\" title=\"\
      Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> Link to documentation wiki pages, if they exist, or start\
      \ writing them! That's a good way to start.</p>\n<p><b>Foxpaw:</b> I actually\
      \ don't have any experience with AI scripting myself, I was just using the random\
      \ page function and thought this page could use a bit of refactoring.</p>\n\
      <p><b>SuperApe:</b> The above link is dead. Yes, we need links or some tuts\
      \ on the wiki itself.</p>\n<p><b>SuperApe:</b> I will most likely take over\
      \ this page and revive it. Linking to <a href=\"/Legacy:NPC_Support\" title=\"\
      Legacy:NPC Support\">NPC Support</a> and others. My thought is to take the Mesh\
      \ for the NaliCow and re-construct it's AI coding as an NPC for UT2004. (I never\
      \ had UT, so this will be a from scratch effort that I look forward to) Tutorial\
      \ outlined. Working...</p>\n<p><b>SuperApe:</b> This is a tutorial on UScripting\
      \ a custom AI. Comments welcome.</p>\n<p><b>Solid Snake:</b> Hmmm, I don't really\
      \ like some of the code in here as I think it could be a lot better.</p>\n<p><b>SuperApe:</b>\
      \ I'll do my best to take that as constructive criticism, but it would really\
      \ help if you could elaborate. I guess, <b>This page is under construction.</b></p>\n\
      <p><b>SuperApe:</b> After spending some time with <a href=\"/Legacy:Monster\"\
      \ title=\"Legacy:Monster\">Monsters</a>, I see a much easier way to do this.\
      \ I will redo this tutorial, taking advantage of the all Pawn functions, instead\
      \ of \"re-inventing the wheel\", like I do above. This will make sounds and\
      \ animation play better. The code will be much smaller. However, I will need\
      \ to build a custom Controller, as MonsterController does not have a \"pacifist\"\
      \ setting.&#160;;) Other than that, it should be much more generalized and applicable\
      \ to other people's projects. Working...</p>\n<p><b>SuperApe:</b> Something\
      \ like this, plus a new MonsterController to favor Wandering, avoid Hunting,\
      \ Attacking, StakeOut, etc.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// NaliCow.</span>\n<span class=\"co1\">// Recreation of\
      \ UT NaliCow.</span>\n<span class=\"co1\">// by SuperApe -- Jan 2006</span>\n\
      <span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> NaliCow <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Monster</span>\n\t<span class=\"kw1\">placeable</span>;\n\
      \ \n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\t<span class=\"kw5\">bool</span>        bHasBaby;       <span\
      \ class=\"co1\">// Spawns a smaller \"Baby\" at map start.</span>\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t<span\
      \ class=\"kw5\">bool</span>        bStayClose;     <span class=\"co1\">// Only\
      \ select MoveTargets within WanderRadius.</span>\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"kw5\">int</span>\
      \         WanderRadius;   <span class=\"co1\">// The radius from Home that MoveTargets\
      \ will be selected.</span>\n \n<span class=\"kw1\">var</span>\t\t<span class=\"\
      kw5\">name</span>\t\tDeathAnim<span class=\"br0\">[</span><span class=\"nu0\"\
      >4</span><span class=\"br0\">]</span>;  <span class=\"co1\">// Death animations.</span>\n\
      <span class=\"kw1\">var</span>\t\t<span class=\"kw5\">name</span>\t\tInjureAnim<span\
      \ class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>;\
      \  <span class=\"co1\">// Injury animations.</span>\n \n<span class=\"kw1\"\
      >var</span>\t\t<span class=\"kw5\">name</span>\t\tIdleAnim<span class=\"br0\"\
      >[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>;  <span class=\"\
      co1\">// Idle animations.</span>\n<span class=\"kw1\">var</span>\t\t<span class=\"\
      kw5\">sound</span>\t\tIdleSounds<span class=\"br0\">[</span><span class=\"nu0\"\
      >6</span><span class=\"br0\">]</span>;  <span class=\"co1\">// Idle sounds.</span>\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n \n<span class=\"br0\"\
      >{</span>\n\t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\"\
      >// FIXME: Make attitude ignore, friendly or fear players only.</span>\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"co1\">// This stand-alone creature\
      \ should avoid being placed in a roster.  Skip UnrealPawn's PostNetBeginPlay().</span>\n\
      <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> PostBeginNetPlay<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"co1\">// Do Pawn's PostNetBeginPlay()</span>\n\t<span class=\"\
      kw1\">local</span> <span class=\"kw9\">playercontroller</span> P;\n \n\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">bDropDetail</span> <span class=\"sy0\">||</span> <span class=\"\
      br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"me0\">DetailMode</span>\
      \ <span class=\"sy0\">==</span> DM_Low<span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n\t\tMaxLights <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >Min</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>,MaxLights<span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw7\">Role</span> <span class=\"sy0\">==</span> <span\
      \ class=\"kw7\">ROLE_Authority</span> <span class=\"br0\">)</span>\n\t\t<span\
      \ class=\"kw2\">return</span>;\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"br0\">(</span><span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span\
      \ class=\"kw9\">Controller</span>.<span class=\"kw9\">Pawn</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw9\">Controller</span>.<span class=\"kw9\">Pawn</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw6\">self</span>;\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw9\"\
      >PlayerController</span><span class=\"br0\">(</span><span class=\"kw9\">Controller</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n\t\t\t<span class=\"sy0\">&amp;&amp;</span> <span\
      \ class=\"br0\">(</span><span class=\"kw9\">PlayerController</span><span class=\"\
      br0\">(</span><span class=\"kw9\">Controller</span><span class=\"br0\">)</span>.<span\
      \ class=\"me0\">ViewTarget</span> <span class=\"sy0\">==</span> <span class=\"\
      kw9\">Controller</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"kw9\">PlayerController</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Controller</span><span class=\"br0\">)</span>.<span class=\"\
      me0\">SetViewTarget</span><span class=\"br0\">(</span><span class=\"kw6\">self</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Role</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw7\">ROLE_AutonomousProxy</span>\
      \ <span class=\"br0\">)</span>\n\t\tbUpdateEyeHeight <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n \n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"br0\">(</span>PlayerReplicationInfo <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n\t\t<span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>PlayerReplicationInfo.<span\
      \ class=\"kw7\">Owner</span> <span class=\"sy0\">==</span> <span class=\"kw5\"\
      >None</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n\t\tPlayerReplicationInfo.<span class=\"kw4\">SetOwner</span><span\
      \ class=\"br0\">(</span><span class=\"kw9\">Controller</span><span class=\"\
      br0\">)</span>;\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw3\">left</span><span class=\"br0\">(</span>PlayerReplicationInfo.<span\
      \ class=\"me0\">PlayerName</span>, <span class=\"nu0\">5</span><span class=\"\
      br0\">)</span> ~<span class=\"sy0\">=</span> <span class=\"st0\">\"PRESS\"</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tP <span\
      \ class=\"sy0\">=</span> <span class=\"kw7\">Level</span>.<span class=\"me0\"\
      >GetLocalPlayerController</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"br0\">(</span>P.<span class=\"me0\">PlayerReplicationInfo</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span\
      \ class=\"br0\">(</span><span class=\"kw3\">left</span><span class=\"br0\">(</span>PlayerReplicationInfo.<span\
      \ class=\"me0\">PlayerName</span>, <span class=\"nu0\">5</span><span class=\"\
      br0\">)</span> ~<span class=\"sy0\">=</span> <span class=\"st0\">\"PRESS\"</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t\t\tbScriptPostRender\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\t\t<span class=\"\
      br0\">}</span>\n\t<span class=\"br0\">}</span>\n\tPlayWaiting<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\">// Do\
      \ xPawn's PostNetBeginPlay()</span>\n\tMultiJumpRemaining <span class=\"sy0\"\
      >=</span> MaxMultiJump;\n\tbCanDoubleJump <span class=\"sy0\">=</span> CanMultiJump<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> Step<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw4\"\
      >PlaySound</span><span class=\"br0\">(</span><span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.WalkC'</span>, <span class=\"kw7\">SLOT_Interact</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >simulated</span> <span class=\"kw1\">function</span> <span class=\"kw4\">AnimEnd</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> Channel<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ \t<span class=\"kw5\">name</span>\tAnim, <span class=\"kw1\">New</span>;\n\
      \t<span class=\"kw1\">local</span> \t<span class=\"kw5\">float</span>\tframe,\
      \ rate;\n\t<span class=\"kw1\">local</span>\t<span class=\"kw5\">int</span>\t\
      \tn;\n\t<span class=\"kw1\">local</span>\tBioGlob\tB;\n \n    <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">TimeSeconds</span> <span class=\"sy0\">-</span> LastPainSound\
      \ <span class=\"sy0\">&lt;</span> MinTimeBetweenPainSounds <span class=\"br0\"\
      >)</span>\n        <span class=\"kw2\">return</span>;  <span class=\"co1\">//\
      \ Allow pain to play through.</span>\n \n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> Channel <span class=\"sy0\">==</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\tGetAnimParams<span class=\"br0\">(</span><span class=\"nu0\">0</span>, Anim,frame,rate<span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Anim <span class=\"sy0\">==</span> <span class=\"st0\">'Swish'</span>\
      \ <span class=\"sy0\">||</span> Anim <span class=\"sy0\">==</span> <span class=\"\
      st0\">'Shake'</span> <span class=\"sy0\">||</span> Anim <span class=\"sy0\"\
      >==</span> <span class=\"st0\">'Poop'</span> <span class=\"br0\">)</span>\n\t\
      \t\tn <span class=\"sy0\">=</span> <span class=\"kw5\">int</span><span class=\"\
      br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span>\
      \ <span class=\"br0\">)</span>;\t\t\n\t\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"br0\">(</span> Anim <span class=\"sy0\"\
      >!=</span> <span class=\"st0\">'Breath'</span> <span class=\"sy0\">||</span>\
      \ Anim <span class=\"sy0\">!=</span> <span class=\"st0\">'Chew'</span> <span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> Anim <span class=\"\
      sy0\">==</span> IdleAnim<span class=\"br0\">[</span>n<span class=\"br0\">]</span>\
      \ <span class=\"br0\">)</span>\n\t\t\tn <span class=\"sy0\">=</span> <span class=\"\
      kw5\">int</span><span class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">6</span> <span class=\"br0\">)</span>;\n \n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> Anim <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">'Poop'</span> <span class=\"br0\">)</span>\n\t\t<span\
      \ class=\"br0\">{</span>\n\t\t\tB <span class=\"sy0\">=</span> <span class=\"\
      kw4\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'BioGlob'</span>, <span class=\"kw6\">self</span>,, <span class=\"\
      kw7\">Location</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw5\">vector</span><span class=\"br0\">(</span> <span class=\"\
      kw7\">Rotation</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">24</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>;\n\t\t\tB.<span class=\"kw7\">Velocity</span> <span class=\"\
      sy0\">=</span> <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>;\n\t\t\tB.<span class=\"me0\">bDynamicLight</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">false</span>;\n\t\t\tB.<span\
      \ class=\"me0\">AmbientGlow</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>;\n\t\t\tB.<span class=\"me0\">RestTime</span> <span class=\"\
      sy0\">*=</span> <span class=\"nu0\">2.0</span>;\n\t\t\tB.<span class=\"me0\"\
      >BaseDamage</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \t\t\tB.<span class=\"me0\">Damage</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0</span>;\n\t\t\tB.<span class=\"kw7\">Skins</span><span class=\"\
      br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">Texture</span><span class=\"st0\"\
      >'XEffectMat.goop.SlimeSkin'</span>;\n\t\t\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">0.5</span> <span class=\"br0\">)</span>\n\t\t\t\tIdleSounds<span\
      \ class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">sound</span><span class=\"\
      st0\">'SkaarjPack_rc.cMoo1c'</span>;\n\t\t\t<span class=\"kw2\">else</span>\n\
      \t\t\t\tIdleSounds<span class=\"br0\">[</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw5\">sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.cMoo2c'</span>;\n\t\t<span class=\"br0\">}</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> Anim <span class=\"\
      sy0\">==</span> <span class=\"st0\">'root'</span> <span class=\"br0\">)</span>\n\
      \t\t\tn <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>;\n\t\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw3\">FRand</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0.8</span> <span class=\"br0\">)</span>\n\t\t\tn <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n \n\t\tIdleWeaponAnim\
      \ <span class=\"sy0\">=</span> IdleAnim<span class=\"br0\">[</span>n<span class=\"\
      br0\">]</span>;\n\t\t<span class=\"kw4\">PlayAnim</span><span class=\"br0\"\
      >(</span> IdleAnim<span class=\"br0\">[</span>n<span class=\"br0\">]</span>\
      \ <span class=\"br0\">)</span>;\n\t\t<span class=\"kw4\">PlaySound</span><span\
      \ class=\"br0\">(</span> IdleSounds<span class=\"br0\">[</span>n<span class=\"\
      br0\">]</span> <span class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">AnimEnd</span><span class=\"\
      br0\">(</span>Channel<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> PlayTakeHit<span class=\"br0\">(</span><span\
      \ class=\"kw5\">vector</span> HitLocation, <span class=\"kw5\">int</span> Damage,\
      \ class<span class=\"sy0\">&lt;</span>DamageType<span class=\"sy0\">&gt;</span>\
      \ <span class=\"kw9\">DamageType</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">local</span>\t<span class=\"kw5\">int</span>\t\
      \ti;\n \n    <span class=\"kw2\">if</span><span class=\"br0\">(</span> <span\
      \ class=\"kw7\">Level</span>.<span class=\"me0\">TimeSeconds</span> <span class=\"\
      sy0\">-</span> LastPainSound <span class=\"sy0\">&lt;</span> MinTimeBetweenPainSounds\
      \ <span class=\"br0\">)</span>\n        <span class=\"kw2\">return</span>;\n\
      \ \n\ti <span class=\"sy0\">=</span> <span class=\"kw3\">Clamp</span><span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> Damage <span class=\"sy0\">/</span>\
      \ <span class=\"nu0\">15</span> <span class=\"br0\">)</span>, <span class=\"\
      nu0\">0</span>, <span class=\"nu0\">3</span> <span class=\"br0\">)</span>;\n\
      \t<span class=\"kw4\">PlayAnim</span><span class=\"br0\">(</span> InjureAnim<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span>;\n\
      \ \n    LastPainSound <span class=\"sy0\">=</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">TimeSeconds</span>;\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"kw4\">PlaySound</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.cMoo1c'</span>, <span class=\"kw7\">SLOT_Pain</span>, <span\
      \ class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw7\">TransientSoundVolume</span>,,\
      \ <span class=\"nu0\">200</span><span class=\"br0\">)</span>;\n\t<span class=\"\
      kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ i <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw4\">PlaySound</span><span class=\"br0\"\
      >(</span><span class=\"kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.injurC1c'</span>,\
      \ <span class=\"kw7\">SLOT_Pain</span>, <span class=\"nu0\">2</span><span class=\"\
      sy0\">*</span><span class=\"kw7\">TransientSoundVolume</span>,, <span class=\"\
      nu0\">200</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\">else</span>\n\
      \t\t<span class=\"kw4\">PlaySound</span><span class=\"br0\">(</span><span class=\"\
      kw5\">sound</span><span class=\"st0\">'SkaarjPack_rc.injurC2c'</span>, <span\
      \ class=\"kw7\">SLOT_Pain</span>, <span class=\"nu0\">2</span><span class=\"\
      sy0\">*</span><span class=\"kw7\">TransientSoundVolume</span>,, <span class=\"\
      nu0\">200</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ PlayDying<span class=\"br0\">(</span>class<span class=\"sy0\">&lt;</span>DamageType<span\
      \ class=\"sy0\">&gt;</span> <span class=\"kw9\">DamageType</span>, <span class=\"\
      kw5\">vector</span> HitLoc<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n\t<span class=\"kw9\">AmbientSound</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>;\n    bCanTeleport <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>; \n    bReplicateMovement <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n    bTearOff <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n    bPlayedDeath <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n \n\tHitDamageType <span class=\"\
      sy0\">=</span> <span class=\"kw9\">DamageType</span>; <span class=\"co1\">//\
      \ these are replicated to other clients</span>\n    TakeHitLocation <span class=\"\
      sy0\">=</span> HitLoc;\n\t<span class=\"kw7\">LifeSpan</span> <span class=\"\
      sy0\">=</span> RagdollLifeSpan;\n \n    <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Dying'</span><span class=\"br0\"\
      >)</span>;\n \n\t<span class=\"kw7\">Velocity</span> <span class=\"sy0\">+=</span>\
      \ TearOffMomentum;\n    BaseEyeHeight <span class=\"sy0\">=</span> <span class=\"\
      kw1\">Default</span>.<span class=\"me0\">BaseEyeHeight</span>;\n    <span class=\"\
      kw4\">SetPhysics</span><span class=\"br0\">(</span><span class=\"kw7\">PHYS_Falling</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw4\">PlayAnim</span><span class=\"\
      br0\">(</span>DeathAnim<span class=\"br0\">[</span><span class=\"kw3\">Rand</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">]</span>,<span class=\"nu0\">1.2</span>,<span class=\"nu0\"\
      >0.05</span><span class=\"br0\">)</span>;\t\t\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \     DeathAnim<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Dead\"\
      </span>\n     DeathAnim<span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Dead2\"\
      </span>\n     DeathAnim<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Dead3\"\
      </span>\n     DeathAnim<span class=\"br0\">(</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Dead3\"\
      </span>\n     InjureAnim<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"TakeHit\"\
      </span>\n     InjureAnim<span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"TakeHit2\"\
      </span>\n     InjureAnim<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"BigHit\"\
      </span>\n     InjureAnim<span class=\"br0\">(</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"BigHit\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Breath\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"root\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Chew\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Poop\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">4</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Shake\"\
      </span>\n     IdleAnim<span class=\"br0\">(</span><span class=\"nu0\">5</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Swish\"\
      </span>\n     IdleSounds<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.Cow.ambCow'</span>\n     IdleSounds<span class=\"\
      br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.Pupae.munch1p'</span>\n     IdleSounds<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">Sound</span><span class=\"st0\">'SkaarjPack_rc.Pupae.munch1p'</span>\n\
      \     IdleSounds<span class=\"br0\">(</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.Cow.cMoo2c'</span>\n     IdleSounds<span class=\"\
      br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.Cow.shakeC'</span>\n     IdleSounds<span class=\"br0\">(</span><span\
      \ class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">Sound</span><span class=\"st0\">'SkaarjPack_rc.Cow.swishC'</span>\n\
      \     StartingAnim<span class=\"sy0\">=</span><span class=\"st0\">\"Breath\"\
      </span>\n     bMeleeFighter<span class=\"sy0\">=</span><span class=\"kw6\">False</span>\n\
      \     bCanDodge<span class=\"sy0\">=</span><span class=\"kw6\">False</span>\n\
      \     HitSound<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.Cow.injurC1c'</span>\n     HitSound<span class=\"\
      br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.Cow.injurC2c'</span>\n     HitSound<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">Sound</span><span class=\"st0\">'SkaarjPack_rc.Cow.injurC1c'</span>\n\
      \     HitSound<span class=\"br0\">(</span><span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.Cow.injurC2c'</span>\n     DeathSound<span class=\"\
      br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.Cow.cMoo2c'</span>\n     DeathSound<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">Sound</span><span class=\"st0\">'SkaarjPack_rc.Cow.DeathC1c'</span>\n\
      \     DeathSound<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'SkaarjPack_rc.Cow.DeathC2c'</span>\n     DeathSound<span class=\"\
      br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span class=\"st0\"\
      >'SkaarjPack_rc.Cow.DeathC2c'</span>\n     bCanDodgeDoubleJump<span class=\"\
      sy0\">=</span><span class=\"kw6\">False</span>\n     WallDodgeAnims<span class=\"\
      br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Landed\"</span>\n     WallDodgeAnims<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Landed\"</span>\n     WallDodgeAnims<span\
      \ class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Landed\"</span>\n     WallDodgeAnims<span\
      \ class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Landed\"</span>\n     IdleHeavyAnim<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Breath\"</span>\n     IdleRifleAnim<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Breath\"</span>\n     bCanJump<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     bCanClimbLadders<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     bCanStrafe<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     bCanDoubleJump<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     bCanUse<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     MeleeRange<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">80.000000</span>\n     GroundSpeed<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">100.000000</span>\n     WaterSpeed<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">75.000000</span>\n     JumpZ<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">75.000000</span>\n     ControllerClass<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\"\
      >'MonsterController'</span>\n     MovementAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     MovementAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     MovementAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     MovementAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     TurnLeftAnim<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     TurnRightAnim<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     SwimAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     SwimAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     SwimAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     SwimAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Run\"</span>\n     WalkAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     WalkAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     WalkAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     WalkAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Walk\"</span>\n     AirAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     AirAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     AirAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     AirAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     TakeoffAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     TakeoffAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     TakeoffAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     TakeoffAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     LandAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     LandAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     LandAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     LandAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DoubleJumpAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DoubleJumpAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DoubleJumpAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DoubleJumpAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DodgeAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DodgeAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DodgeAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     DodgeAnims<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     AirStillAnim<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Landed\"</span>\n     TakeoffStillAnim<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Landed\"</span>\n     IdleCrouchAnim<span class=\"\
      sy0\">=</span><span class=\"st0\">\"Breath\"</span>\n     IdleSwimAnim<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Walk\"</span>\n     IdleWeaponAnim<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Breath\"</span>\n     IdleRestAnim<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Breath\"</span>\n     <span class=\"\
      kw5\">Mesh</span><span class=\"sy0\">=</span>VertMesh<span class=\"st0\">'SkaarjPack_rc.NaliCow'</span>\n\
      \     PrePivot<span class=\"sy0\">=</span><span class=\"br0\">(</span>Z<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0.000000</span><span class=\"br0\"\
      >)</span>\n     <span class=\"kw7\">CollisionRadius</span><span class=\"sy0\"\
      >=</span><span class=\"nu0\">34.000000</span>\n     <span class=\"kw7\">CollisionHeight</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">34.000000</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.981 seconds\nReal time usage: 1.071 seconds\nPreprocessor visited node count:\
      \ 322/1000000\nPreprocessor generated node count: 560/1000000\nPost‐expand include\
      \ size: 27/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:608-0!*!0!!en!5!*\
      \ and timestamp 20221118014915 and revision id 1826\n -->\n"
  categories:
  - sortkey: "Basic AI Scripting Tutorial"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Toolbar"
  - ns: 100
    exists: true
    name: "Legacy:Mesh Browser"
  - ns: 100
    exists: true
    name: "Legacy:Netcode Idioms"
  - ns: 100
    exists: true
    name: "Legacy:NPC Support"
  - ns: 100
    exists: true
    name: "Legacy:Create A Subclass"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Bot Support"
  - ns: 100
    exists: true
    name: "Legacy:Mesh"
  - ns: 100
    exists: true
    name: "Legacy:AIController"
  - ns: 100
    exists: true
    name: "Legacy:Monster Support"
  - ns: 100
    exists: true
    name: "Legacy:Coding Guidelines"
  - ns: 100
    exists: true
    name: "Legacy:Inventory"
  - ns: 100
    exists: true
    name: "Legacy:Sound Browser"
  - ns: 100
    exists: true
    name: "Legacy:Add EditPackage"
  - ns: 100
    exists: true
    name: "Legacy:Adrenaline"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Controller"
  - ns: 100
    exists: true
    name: "Legacy:Launch A Local Netgame"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:Actor Browser"
  - ns: 100
    exists: true
    name: "Legacy:Map File Prefix"
  - ns: 100
    exists: true
    name: "Legacy:Set Up Package Folders"
  - ns: 100
    exists: true
    name: "Legacy:Console Commands"
  - ns: 100
    exists: true
    name: "Legacy:Cow"
  - ns: 100
    exists: true
    name: "Legacy:Compiling With UCC"
  - ns: 100
    exists: true
    name: "Legacy:Monster"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedSequence"
  templates: []
  images:
  - "Legacy_scriptedpawn.nalicows.jpeg"
  externallinks:
  - "http://www.langsuyar.com/articles/u2_tutorialsmain.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 87
    anchor: "Overview"
  - toclevel: 1
    level: "2"
    line: "Prerequisites"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 709
    anchor: "Prerequisites"
  - toclevel: 1
    level: "2"
    line: "Behavior Design"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 1597
    anchor: "Behavior_Design"
  - toclevel: 2
    level: "3"
    line: "AI Design Plan"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 1682
    anchor: "AI_Design_Plan"
  - toclevel: 2
    level: "3"
    line: "Provided Animation and Sounds"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 2916
    anchor: "Provided_Animation_and_Sounds"
  - toclevel: 2
    level: "3"
    line: "AI Design Flow"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 5428
    anchor: "AI_Design_Flow"
  - toclevel: 3
    level: "4"
    line: "<b>NaliCow Behaviors</b>"
    number: "3.3.1"
    index: "7"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 7244
    anchor: "NaliCow_Behaviors"
  - toclevel: 1
    level: "2"
    line: "Coding Elements"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 8912
    anchor: "Coding_Elements"
  - toclevel: 2
    level: "3"
    line: "Animation & Sound"
    number: "4.1"
    index: "9"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 9214
    anchor: "Animation_.26_Sound"
  - toclevel: 2
    level: "3"
    line: "Navigation"
    number: "4.2"
    index: "10"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 12285
    anchor: "Navigation"
  - toclevel: 2
    level: "3"
    line: "Movement"
    number: "4.3"
    index: "11"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 16157
    anchor: "Movement"
  - toclevel: 2
    level: "3"
    line: "Damage"
    number: "4.4"
    index: "12"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 18867
    anchor: "Damage"
  - toclevel: 2
    level: "3"
    line: "Death"
    number: "4.5"
    index: "13"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 20493
    anchor: "Death"
  - toclevel: 2
    level: "3"
    line: "Effects"
    number: "4.6"
    index: "14"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 23306
    anchor: "Effects"
  - toclevel: 1
    level: "2"
    line: "Class Construction"
    number: "5"
    index: "15"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 23858
    anchor: "Class_Construction"
  - toclevel: 2
    level: "3"
    line: "NaliCow"
    number: "5.1"
    index: "16"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 24361
    anchor: "NaliCow"
  - toclevel: 3
    level: "4"
    line: "Pawn Default Properties"
    number: "5.1.1"
    index: "17"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 25300
    anchor: "Pawn_Default_Properties"
  - toclevel: 3
    level: "4"
    line: "Pawn Default Methods"
    number: "5.1.2"
    index: "18"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 27166
    anchor: "Pawn_Default_Methods"
  - toclevel: 3
    level: "4"
    line: "AIController Properties"
    number: "5.1.3"
    index: "19"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 28970
    anchor: "AIController_Properties"
  - toclevel: 3
    level: "4"
    line: "Final Source Code"
    number: "5.1.4"
    index: "20"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 29483
    anchor: "Final_Source_Code"
  - toclevel: 2
    level: "3"
    line: "NaliCowPoop"
    number: "5.2"
    index: "21"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 44766
    anchor: "NaliCowPoop"
  - toclevel: 3
    level: "4"
    line: "BioGlob Default Properties"
    number: "5.2.1"
    index: "22"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 45131
    anchor: "BioGlob_Default_Properties"
  - toclevel: 3
    level: "4"
    line: "BioGlob Default Methods"
    number: "5.2.2"
    index: "23"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 46062
    anchor: "BioGlob_Default_Methods"
  - toclevel: 3
    level: "4"
    line: "Final Source Code"
    number: "5.2.3"
    index: "24"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 46298
    anchor: "Final_Source_Code_2"
  - toclevel: 1
    level: "2"
    line: "Testing and Implementation"
    number: "6"
    index: "25"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 46998
    anchor: "Testing_and_Implementation"
  - toclevel: 2
    level: "3"
    line: "Compiling"
    number: "6.1"
    index: "26"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 47157
    anchor: "Compiling"
  - toclevel: 2
    level: "3"
    line: "Implementation"
    number: "6.2"
    index: "27"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 48697
    anchor: "Implementation"
  - toclevel: 2
    level: "3"
    line: "Replication"
    number: "6.3"
    index: "28"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 49863
    anchor: "Replication"
  - toclevel: 1
    level: "2"
    line: "Further Development"
    number: "7"
    index: "29"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 51292
    anchor: "Further_Development"
  - toclevel: 2
    level: "3"
    line: "DrawScale Adjustments"
    number: "7.1"
    index: "30"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 51421
    anchor: "DrawScale_Adjustments"
  - toclevel: 2
    level: "3"
    line: "Cow and Baby Relationships"
    number: "7.2"
    index: "31"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 53750
    anchor: "Cow_and_Baby_Relationships"
  - toclevel: 3
    level: "4"
    line: "bHasBaby and BabyCow"
    number: "7.2.1"
    index: "32"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 53961
    anchor: "bHasBaby_and_BabyCow"
  - toclevel: 3
    level: "4"
    line: "bStayClose and WanderRadius"
    number: "7.2.2"
    index: "33"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 55305
    anchor: "bStayClose_and_WanderRadius"
  - toclevel: 2
    level: "3"
    line: "Ridable NaliCows"
    number: "7.3"
    index: "34"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 56284
    anchor: "Ridable_NaliCows"
  - toclevel: 1
    level: "2"
    line: "External Links"
    number: "8"
    index: "35"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 58618
    anchor: "External_Links"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "9"
    index: "36"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 59444
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "10"
    index: "37"
    fromtitle: "Legacy:Basic_AI_Scripting_Tutorial"
    byteoffset: 59829
    anchor: "Discussion"
  displaytitle: "Legacy:Basic AI Scripting Tutorial"
  iwlinks: []
  wikitext:
    text: "This is a tutorial on UScripting a custom AI.\n\n'''This page is under\
      \ construction.'''\n\n==Overview==\n\nThis tutorial will detail re-construction\
      \ of the NaliCow NPC for UT2004.  It was originally available in UT as a [[Legacy:Cow|Cow]],\
      \ but this tutorial will revise its AI design as if it were new.  The stock\
      \ meshes and sounds that are available will allow us to concentrate purely on\
      \ the AI that drives its behavior.  We will start will a comprehensive behavior\
      \ design before coding the elements and constructing the custom classes that\
      \ will give this NPC life and then implement it in the game environment.\n\n\
      [[Image:Legacy_scriptedpawn.nalicows.jpeg|center|The NaliCow and BabyCow from\
      \ Unreal Tournament.]]\n\n==Prerequisites==\n\nAlthough creating only a simple\
      \ AI for this NPC, this will be an advanced tutorial that assumes a solid understanding\
      \ of [[Legacy:UnrealScript|UnrealScript]].  This tutorial will assume you know\
      \ how to [[Legacy:Create A Subclass|Create A Subclass]], [[Legacy:Set Up Package\
      \ Folders|Set up package folders]], [[Legacy:Launch A Local Netgame|Launch a\
      \ local netgame]] and [[Legacy:Add EditPackage|Add EditPackage]].  In terms\
      \ of [[Legacy:Making Mods|Making Mods]], this tutorial will assume that you\
      \ know about [[Legacy:Replication|Replication]], [[Legacy:Coding Guidelines|Coding\
      \ Guidelines]] and [[Legacy:Compiling With UCC|Compiling with UCC]].\n\nEven\
      \ if you aren't confident in your understanding of these many topics, this tutorial\
      \ will still serve as an overview discussion of designing a simple [[Legacy:Artificial\
      \ Intelligence|Artificial Intelligence]] construct.\n\n==Behavior Design==\n\
      \nWe will begin by defining a design for the NaliCow's behavior.\n\n===AI Design\
      \ Plan===\n\nThe behavior design is the roadmap for our AI scripting, giving\
      \ us a clear set of coding elements to complete before it's AI takes shape.\n\
      \nAlthough there are many different methods of designing AI (including sophisticated\
      \ methods such as neural networks and artificial evolution), with a simple creature\
      \ like this, our tutorial will follow the most basic and standard method used\
      \ by all stock Unreal AI; conditional decision-making.  This is the method that\
      \ takes stimuli as a constant condition or trigger to either do this or that;\
      \ also known as \"if this, then do that\", or \"if-then\" decision-making. \
      \ A common example of this kind of AI is the AI Script in a [[Legacy:ScriptedSequence|ScriptedSequence]],\
      \ but even Bots use this method, just in an extremely complex form.\n\nWe have\
      \ some features of our NPC already defined for us; it's model, textures, animation\
      \ and sounds.  Normally, a custom character would be started by defining it's\
      \ purpose or goal and then design those features around it.  But for this behavior\
      \ design, we will work \"backwards\"; starting with those features and finding\
      \ the purpose and behavior design that fits it.\n\nWith that in mind, we will\
      \ first look at what we have to work with.\n\n===Provided Animation and Sounds===\n\
      \nThere are plenty of stock animations provided in UT2004 for the NaliCow even\
      \ though there is no [[Legacy:Monster|Monster]] subclass for it.  With these\
      \ animation sequences, we can easily construct an AI design flow that will convey\
      \ a creature of convincing realism and range of ability.  The following is a\
      \ list of the NaliCow animations found the [[Legacy:Mesh Browser|Mesh Browser]].\
      \ The number of animation frames in the sequence are shown in brackets.  ''Loop''\
      \ indicates the last frame matches a common start pose of all other ''Loop''\
      \ animations.  ''SingleFrame'' is just one frame, a pose.  ''Sequence'' indicates\
      \ an animation sequence that is meant to only play through once and does not\
      \ end on the common starting pose of the ''Loop'' animations.\n* '''root'''\
      \ [20] : Loop.  Bends down to graze.\n* '''Breath''' [6] : Loop.  Breathes.\
      \  Prone.\n* '''Chew''' [7] : Loop.  Chews.\n* '''Poop''' [20] : Loop.  Lifts\
      \ tail and poops.\n* '''Shake''' [18] : Loop.  Shakes head, as if shaking off\
      \ water or dust.\n* '''Swish''' [20] : Loop.  Swishes it's tail from side to\
      \ side and stamps foot.\n* '''Walk''' [15] : Loop.  A walk cycle.\n* '''Run'''\
      \ [10] : Loop.  A run cycle.\n* '''Landed''' [1] : Single frame.  Indicates\
      \ recovery from a fall.\n* '''TakeHit1''' [1] : Single frame.  Indicates recovery\
      \ from damage.\n* '''TakeHit2''' [1] : Single frame.  Indicates recovery from\
      \ more damage.\n* '''BigHit''' [1] : Single frame.  Indicates recovery from\
      \ a lot of damage. (both feet in the air)\n* '''Dead''' [23] : Sequence.  Indicates\
      \ a slow death, slumping to the side.\n* '''Dead2''' [13] : Sequence.  Death\
      \ animation, starting from '''TakeHit2''', slumping forward.\n* '''Dead3'''\
      \ [23] : Sequence.  Severe death, starting from '''BigHit''', showing a complete\
      \ back flip.\n\nThese stock sounds are available in the [[Legacy:Sound Browser|Sound\
      \ Browser]], under <tt>SkaarjPack_rc</tt>, that relate to the NaliCow:\n* '''ambCow'''\
      \ : Breath of a NaliCow.\n* '''cMoo1c''' : NaliCow call. (sounds suspiciously\
      \ like a Doom creature's death cry)\n* '''cMoo2c''' : Another call.\n* '''DeathC1c'''\
      \ : \"Urgent\" call.\n* '''DeathC2c''' : Another \"urgent\" call.\n* '''injurC1c'''\
      \ : Pained call.\n* '''injurC2c''' : A call that sounds a little like, \"Ow\"\
      .\n* '''munch1p''' : A biting sound (normally used for the SkaarjPupae).\n*\
      \ '''shakeC''' : Ears flapping as the NaliCow shakes.\n* '''swishC''' : Swishing\
      \ sound of the NaliCow tail.\n* '''Thump''' : Generic hard landing sound.\n\
      * '''WalkC''' : NaliCow footstep.\n\n===AI Design Flow===\n\nWith these pieces,\
      \ we can begin to analyze the potential behavior and assemble the design in\
      \ such a way that we understand how one piece leads to the next.\n\n* Some of\
      \ these pieces indicate behavior that's initiated by the NaliCow; such as Grazing,\
      \ Swishing, Pooping.  Others are behaviors that are in reaction to external\
      \ stimuli; such as TakeHit or Death.\n* We know we will want the NaliCow to\
      \ navigate from place to place.  Some decision making will involve where to\
      \ go and whether to walk or run.  Running away from danger will serve a self-preservation\
      \ purpose while walking toward a goal, such as another NaliCow, may serve to\
      \ support the idea these are real creatures (an immersion purpose) through a\
      \ percieved flocking behavior.\n* Obvious connections can be made between the\
      \ animation sequences and the sounds that correspond to them.  We will want\
      \ to have these sounds play whenever those animations are played.  Other connections\
      \ can be made between some of these pieces, where one will likely lead to another;\
      \ such as Grazing leading to Chewing, a TakeHit leading to either Death or Run,\
      \ etc.\n* One piece of this behavior, Pooping, appears to need an extra effect;\
      \ the NaliCowPoop itself.  It will have to be an extra actor class with it's\
      \ own code.\n\nWe can see a prone state, where the '''Breath''' animation and\
      \ '''ambCow''' sound would be looped.  This appears to be a good place to start.\
      \  We will be able to branch out from this prone state to any other looping\
      \ animation sequence and corresponding sound, building up the behavior design\
      \ flow, piece by piece.\n\nThe following chart attempts to describe all the\
      \ possible behaviors, their animation, their sound and what behaviors might\
      \ preceed and follow them.\n\n{| class=\"wikitable\"\n\n|-\n| colspan=\"12\"\
      \ style=\"text-align: center\" |\n===='''NaliCow Behaviors'''====\n \n|-\n|\n\
      | style=\"text-align: center\" |'''1. Prone'''\n| style=\"text-align: center\"\
      \ |'''2. Graze'''\n| style=\"text-align: center\" |'''3. Chew'''\n| style=\"\
      text-align: center\" |'''4. Poop'''\n| style=\"text-align: center\" |'''5. Shake'''\n\
      | style=\"text-align: center\" |'''6. Swish'''\n| style=\"text-align: center\"\
      \ |'''7. Walk'''\n| style=\"text-align: center\" |'''8. Run'''\n| style=\"text-align:\
      \ center\" |'''9. Land'''\n| style=\"text-align: center\" |'''10. TakeHit'''\n\
      | style=\"text-align: center\" |'''11. Dying''' \n|-\n| style=\"text-align:\
      \ left\" |'''Animation'''\n|Breath\n|root\n|Chew\n|Poop\n|Shake\n|Swish\n|Walk\n\
      |Run\n|Landed\n|TakeHit1, 2 or BigHit\n|Dead, 2, 3 \n|-\n| style=\"text-align:\
      \ left\" |'''Sound'''\n|ambCow\n|munch1p\n|munch1p\n|cMoo1c, 2c\n|shakeC\n|swishC\n\
      |WalkC\n|WalkC\n|Thump\n|injurC1c, 2c\n|DeathC1c, 2c \n|-\n| style=\"text-align:\
      \ left\" |'''Lead From'''\n|1-7\n|1-7\n|2\n|1-7\n|1-7\n|1-7\n|1-10\n|7-10\n\
      |7 or 8**\n|1-9***\n|10 \n|-\n| style=\"text-align: left\" |'''Lead To'''\n\
      |1-7\n|3\n|1-7\n|1-7*\n|1-7\n|1-7\n|1-8\n|7-8\n|1, 5, 7\n|7, 8, 11\n|''None''&dagger;\
      \ \n|-\n| colspan=\"12\" style=\"text-align: center\" |* &ndash; ''A NaliCowPoop\
      \ actor should be spawned during this behavior.'' \n|-\n| colspan=\"12\" style=\"\
      text-align: center\" |** &ndash; ''This behavior will activate immeditately\
      \ upon landing from a fall, without waiting for animation loops to end..'' \n\
      |-\n| colspan=\"12\" style=\"text-align: center\" |*** &ndash; ''This behavior\
      \ will activate immeditately upon taking damage, without waiting for animation\
      \ loops to end.'' \n|-\n| colspan=\"12\" style=\"text-align: center\" |&dagger;\
      \ &ndash; ''The NaliCow carcass will DeRes and disappear a short time after\
      \ this behavior.'' \n|}\n\n==Coding Elements==\n\nWith the AI Design Flow sketched\
      \ out, we will be able to code the AI behaviors appropriately.  But first, we\
      \ will have to complete the code that will handle the basic tasks these behaviors\
      \ will have to perform.  These tasks include animation, sound, movement, damage,\
      \ death, etc.\n\n===Animation & Sound===\n\nAs shown in the above chart, animation\
      \ sequences and sounds are linked together.  A couple exceptions to that rule\
      \ include animations that can play one of a few available sounds and actions\
      \ that play one animation, but more than one sound, such as Walk or Run, where\
      \ two footsteps should be heard.  We will use the animation sequence as a handle\
      \ for the action and have that dictate the possible sounds.\n\n<uscript>\n//\
      \ DisplayBehavior() takes a BehaviorIndex value and sets the appropriate animation\
      \ and sound.\n// Degrees of behavior will be taken into account via an optional\
      \ arguement.\nfunction DisplayBehavior( int BehaviorIndex, optional int Degree\
      \ )\n{\n    switch( BehaviorIndex ) {\n        case(1) :\n            Acting(\
      \ 'Breath', sound'SkaarjPack_rc.ambCow', true ); break;\n        case(2) : \n\
      \            Acting( 'root', sound'SkaarjPack_rc.munch1p', true ); break;\n\
      \        case(3) : \n            Acting( 'Chew', sound'SkaarjPack_rc.munch1p',\
      \ true ); break;\n        case(4) : \n            if ( FRand() > 0.5 )\n   \
      \             Acting( 'Poop', sound'SkaarjPack_rc.cMoo1c', false );\n      \
      \      else\n                Acting( 'Poop', sound'SkaarjPack_rc.cMoo2c', false\
      \ );\n            break;\n        case(5) : \n            Acting( 'Shake', sound'SkaarjPack_rc.shakeC',\
      \ true ); break;\n        case(6) : \n            Acting( 'Swish', sound'SkaarjPack_rc.swishC',\
      \ true ); break;\n        case(7) : \n            Acting( 'Walk', sound'SkaarjPack_rc.WalkC',\
      \ true ); break;\n        case(8) : \n            Acting( 'Run', sound'SkaarjPack_rc.WalkC',\
      \ true ); break;\n        case(9) : \n            Acting( 'Landed', sound'SkaarjPack_rc.Thump',\
      \ false ); break;\n        case(10) : \n            if ( Degree < 2 )\n    \
      \            Acting( 'TakeHit', sound'SkaarjPack_rc.cMoo1c', false );\n    \
      \        else if ( Degree == 2 )\n                Acting( 'TakeHit2', sound'SkaarjPack_rc.injurC1c',\
      \ false );\n            else if ( Degree == 3 )\n                Acting( 'BigHit',\
      \ sound'SkaarjPack_rc.injurC2c', false );\n            break;\n        case(11)\
      \ : \n            if ( Degree < 2 )\n                Acting( 'Dead', sound'SkaarjPack_rc.cMoo2c',\
      \ false );\n            else if ( Degree == 2 )\n                Acting( 'Dead2',\
      \ sound'SkaarjPack_rc.DeathC1c', false );\n            else if ( Degree == 3\
      \ )\n                Acting( 'Dead3', sound'SkaarjPack_rc.DeathC2c', false );\n\
      \            break;\n        default : \n            Acting( 'Breath', sound'SkaarjPack_rc.ambCow',\
      \ true ); break;\n     }\n}\n\n// Acting() loops the given animation sequence\
      \ name and plays the given sound.\n// For Replication purposes, animation is\
      \ normally looped.  Sequences may be interupted each AnimEnd().\nfunction Acting(\
      \ name Anim, sound Soundname, bool bLoop )\n{\n    if ( bLoop )\n        LoopAnim(\
      \ Anim, 1.0, 0.1 );\n    else\n        PlayAnim( Anim, 1.0, 0.1 );\n    SimAnim.AnimSequence\
      \ = Anim;\n    SimAnim.AnimRate = 1.0;\n    if ( bLoop )\n        SimAnim.bAnimLoop\
      \ = true;\n    else\n        SimAnim.bAnimLoop = false;\n\tSimAnim.TweenRate\
      \ = 0.1;\n    PlaySound( Soundname, SLOT_Misc );\n}\n</uscript>\n\n===Navigation===\n\
      \nThis is our first decision-making code.  We will need our AI to decide where\
      \ to go and what to look at.  Controllers use MoveTarget and ViewTarget by default.\
      \  They are the Destination and Focus for the controller.  We will simply alter\
      \ those properties based on desires of self-preservation.\n\nFirst, if we have\
      \ reached our destination, we want to be able to select another one reasonably.\
      \  Next, if another Actor has hurt our NPC, we want our AI to avoid it.  So\
      \ we will do checks to make sure the selected destination or focus is not the\
      \ Actor that hurt our NPC.  We will also avoid any Actor who Bumps or Touches\
      \ our NPC, as if it had hurt it.  If the NPC is Bumped, Touched or Triggered,\
      \ we will have our NPC Walk away, or if already Walking, perhaps begin to Run.\
      \  Finally, we want to know if our NPC is stuck, trying to reach a destination\
      \ but not able to progress from it's current Location.  We will do a simple\
      \ check to ensure it makes progress when it Walks or Runs, and if not, we will\
      \ select another destination.\n\n<uscript>\nvar\t\tActor\t\tHurtingActor;\t\
      // An Actor to get away from.\nvar\t\tvector\t\tOldLocation;\t// Used to determine\
      \ if stuck.\n\n// PostBeginPlay() is originally defined in Actor().\n// We will\
      \ use it to make sure an AIController is spawned for our NaliCow.\nevent PostBeginPlay()\n\
      {\n\tSuper.PostBeginPlay();\n\t\n\tif ( ( ControllerClass != None ) && ( Controller\
      \ == None ) )\n\t\tController = spawn( ControllerClass );\n\tif ( Controller\
      \ != None )\n\t\tController.Possess( self );\n}\n\n// ReachedDestination() is\
      \ originally defined in Pawn.\n// MoveTarget and other relevant properties are\
      \ defined in Controller.\nfunction bool ReachedDestination( Actor OldTarget\
      \ )\n{\n    local   Actor   NewTarget, A;\n    local   NavigationPoint    NP;\n\
      \n    forEach VisibleActors( class'Actor', A )\n        if ( A != OldTarget\
      \ && A != HurtingActor )\n            NewTarget = A;\n\n    if ( A == None )\n\
      \        forEach RadiusActors( class'NavigationPoint', NP, 1024 )\n        \
      \    if ( FRand() > 0.5 && NP != OldTarget && FastTrace( NP.Location ) )\n \
      \           {\n                A = NP;\n                NewTarget = A;\n   \
      \         }\n\n    if ( A == None )\n        forEach AllActors( class'Actor',\
      \ A )\n            if ( FRand() > 0.5 && A != HurtingActor && A != OldTarget\
      \ && A != self && !A.IsA('Controller') )\n                NewTarget = A;\n\n\
      \    if ( NewTarget != None )\n    {\n        Controller.MoveTarget = NewTarget;\n\
      \        Controller.Destination = NewTarget.Location;\n        Controller.FocalPoint\
      \ = NewTarget.Location;\n        Controller.Focus = NewTarget;\n    }\n    else\n\
      \    {\n        if ( HurtingActor != None )\n        {\n            Controller.Destination\
      \ = ( Location - HurtingActor.Location );\n            Controller.FocalPoint\
      \ = Controller.Destination;\n        }\n        else\n        {\n          \
      \  Controller.Destination = vector( Rotation ) * ( 512 * FRand() + 512 );\n\
      \            Controller.FocalPoint = Controller.Destination;\n        }\n  \
      \  }\n}\n\n// Trigger() is originally defined in Actor.\nfunction Trigger( Actor\
      \ Other, Pawn EventInstigator )\n{\n    if ( self.IsInState('Run') )\n     \
      \   return;\n\tif ( self.IsInState('Walk') )\n\t{\n\t\tGotoState('Run');\n\t\
      \treturn;\n\t}\n\tGotoState('Walk');\n}\n\n// Touch() is originally defined\
      \ in Actor.\nfunction Touch( Actor Other )\n{\n    HurtingActor = Other;\n \
      \   if ( self.IsInState('Run') )\n        return;\n\tGotoState('Walk');\n}\n\
      \n// Bump() is originally defined in Actor.\nfunction Bump( Actor Other )\n\
      {\n    HurtingActor = Other;\n    if ( self.IsInState('Run') && ( FRand() <\
      \ 0.9 ) )  // Chance to calm.\n        return;\n\tif ( self.IsInState('Walk')\
      \ && ( FRand() > 0.9 ) )  // Change due to startle.\n\t{\n\t\tGotoState('Run');\n\
      \t\treturn;\n\t}\n\tGotoState('Walk');\n}\n</uscript>\n\nAnd then somewhere\
      \ in during movement, we will perform checks to determine if the character has\
      \ reached it's destination or if it's gotten stuck while traveling.\n\n===Movement===\n\
      \nWe need our NPC NaliCow to travel to destinations.  It's default Physics will\
      \ be PHYS_Walking.  So unless we find that the character should be falling,\
      \ we're just going to concern ourselves with ground movement.  Our checks determining\
      \ if the NPCs destination is reached or if the NPC is stuck will also happen\
      \ during movement.  We also want the ability to halt all movement by defining\
      \ a zero SpeedRatio, so that our character does not slide around while showing\
      \ an animation with it's feet firmly planted.  At this point, we will also introduce\
      \ another property bStartled that will indicate the NaliCow has been recently\
      \ hurt or otherwise made to react.  We will take advantage of the fact that\
      \ movement will be checked often and use it to make a few decisions about bStartle,\
      \ either to react to it by Running or to calm back down.  bStartled will be\
      \ set to true during damage.\n\n<uscript>\nvar\t\tbool\t\tbStartled;\t\t// Recently\
      \ startled.\n\n// MoveCheck() deals with periodic checks for bStartled, DamageTaken\
      \ and falling.\n// Then moves the character in direction of Rotation and at\
      \ speed of SpeedRatio.\nfunction MoveCheck( float SpeedRatio )\n{\n\tDamageTaken\
      \ = 0;  // Reset most recent damage memory.\n\n\tif ( Base == None )  // Should\
      \ be falling.\n\t{\n\t\tif ( Physics != PHYS_Falling )\n\t\t\tSetPhysics( PHYS_Falling\
      \ );\n\t\treturn;\n\t}\n\n\tif ( Controller.MoveTarget == None )\n\t\tReachedDestination(\
      \ self );\n\n    if ( VSize( Controller.MoveTarget.Location - Location ) < 64\
      \ )\n   \t    ReachedDestination( Controller.MoveTarget );\n\n    if ( VSize(\
      \ OldLocation - Location ) < 48 )\n   \t    ReachedDestination( Controller.MoveTarget\
      \ );\n\n    OldLocation = Location;\n\n    RotationRate.Yaw = SpeedRatio * 20000;\n\
      \   \tVelocity = ( SpeedRatio * GroundSpeed ) * vector( Rotation );\n    Acceleration\
      \ = Velocity;\n\n\tif ( FRand() > 0.95 )  // Chance to calm down.\n\t\tbStartled\
      \ = false;\n\tif ( bStartled && !self.IsInState('Run') )\n\t\tGotoState('Run');\
      \  // React to startle.\t\n}\n</uscript>\n\nDuring Walk and Run behaviors, we\
      \ will want to update the character's movement, based on any changes to Rotation.\
      \  The following code uses a Tick() function to constantly update the movement.\
      \  We only need to do this during certain behaviors, so we will only use this\
      \ code within a state designated for either Walk or Run.  Normally, SetTimer()\
      \ and Timer() functions set to activate every tenth of a second or so are used\
      \ in place of Tick(), but this code is not particularly expensive.\n\n<uscript>\n\
      \    function Tick( float DeltaTime )\n    {\n        if ( Physics == PHYS_Walking\
      \ && DamageTaken == 0 )\n        {\n            Velocity = ( 0.5 * GroundSpeed\
      \ ) * vector( Rotation );\n            Acceleration = Velocity;\n        }\n\
      \    }\n</uscript>\n\n===Damage===\n\nWhen our NPC gets hurt, we want to display\
      \ specific behavior and effects.  The effects needed here are blood puffs that\
      \ emit from the character at the appropriate angle to which it was hurt.  The\
      \ behavior will be similar to those in Navigation, as the Instigator of the\
      \ damage will automatically become the NPCs HurtingActor, the Actor to avoid.\
      \  Any damage will cause our NPC to react by Running, unless it recieves enough\
      \ damage to bring the Health down to zero.  In that case, our NPC will switch\
      \ to a Dying state.  A new property, DamageTaken, is introduced to keep track\
      \ of the most recent damage inflicted on our NaliCow.  This will be used to\
      \ determine the Degree to specify for our TakeHit and Dying behavior displays\
      \ and it will serve to remind the NaliCow to Run away from danger.\n\n<uscript>\n\
      var\t\tint\t\t\tDamageTaken;\t// Most recent damage amount.\n\n// TakeDamage()\
      \ is originally defined in Actor.\nfunction TakeDamage(int Damage, Pawn InstigatedBy,\
      \ Vector HitLocation, Vector Momentum, class<DamageType> DamageType)\n{\n  \
      \  HurtingActor = InstigatedBy;\n\tDamageTaken = Damage;\n\tbStartled = true;\n\
      \n    Super.TakeDamage( Damage, InstigatedBy, HitLocation, Momentum, DamageType\
      \ );\n\n    if ( DamageTaken > 3 )\n        spawn( class'STR_green_blood_puff',,,\
      \ HitLocation, Rotator( Momentum ) );\n\n    if ( Controller != None && ( Controller.MoveTarget\
      \ == HurtingActor || Controller.Focus == HurtingActor ) )\n\t\tReachedDestination(\
      \ HurtingActor );  // Do not approach HurtingActor.\n\n    if ( Health > 0 )\n\
      \        GotoState('TakeHit');\n    else if ( !self.IsInState('Dying') )\n \
      \       GotoState('Dying');\n}\n</uscript>\n\n===Death===\n\nWhen our NPC dies,\
      \ it will be switched to a Dying state.  Switching to a unique state will allow\
      \ us to Ignore various functions, like Bump or Touch, which would cause further\
      \ behavior.  At the beginning of this state, our NPC should stop all animation.\
      \  After displaying the appropriate Dying behavior, it should stay still for\
      \ a short time before removing itself from the gameworld for the sake of garbage\
      \ collection.  The typical garbage collection method in Unreal involves a simple\
      \ check for any player currently looking at the Actor, and if no player is,\
      \ delete it.  If a player happens to be watching our character at this time,\
      \ we will DeRez it's Mesh, a typical function where the Skin is changed to a\
      \ gently flashing texture before the Actor is deleted.  It visually lets players\
      \ know this Actor is about to be removed.  On Clients, this function will be\
      \ called by a TornOff() event, which signals the Client has been given control\
      \ of this actor.  We will use bTearOff to signal to Clients that this NaliCow\
      \ is dead and should be removed.  If not explicitly removed via Destroy(), this\
      \ NPC will be automatically destroyed after a set time defined with Lifespan.\n\
      \nThe following code shows the Dying behavior state.\n\n<uscript>\nstate Dying\n\
      {\n    Ignores Trigger, Touch, Bump, Landed, Died;\n\n    function Timer()\n\
      \    {\n        SetPhysics( PHYS_None );\n        SetCollision( false, false\
      \ );\n        Lifespan = 3.0;\n        if ( PlayerCanSeeMe() )\n           \
      \ DeRez();\n        else\n            Destroy();\n    }\n\n    event AnimEnd(\
      \ int Channel )\n    {\n        SetTimer( 4.0, false );\n    }\n\n    Begin:\n\
      \        StopAnimating();\n        DisplayBehavior( 11, Min( ( DamageTaken /\
      \ 20 ), 3 ) );\n        MoveCheck( 0.0 );\n        if ( Level.NetMode == NM_DedicatedServer\
      \ )\n        {\n            SetPhysics( PHYS_None );\n            SetCollision(\
      \ false, false );\n            LifeSpan = 3.0;\n            bTearOff = true;\n\
      \        }\n}\n</uscript>\n\nOur DeRez function is made available on Clients\
      \ and can be called from a TornOff() event.\n\n<uscript>\n// TornOff() is originally\
      \ defined in Actor.\nevent TornOff()\n{\n    if ( PlayerCanSeeMe() )\n     \
      \   DeRez();\n    else\n        Destroy();\n}\n\n// DeRez() will signal removal\
      \ of the dead NaliCow.\nsimulated function DeRez()\n{\n    if ( Level.NetMode\
      \ == NM_DedicatedServer )\n        return;\n\n    Skins.length = 0;\n    Skins[0]\
      \ = Material'DeRez.Shaders.DeRezFinalBody';  \n}\n</uscript>\n\nSometimes Pawns\
      \ are asked to die automatically.  The following function will catch any \"\
      automatic death\" event, such as being crushed by a Mover or Telefragged.\n\n\
      <uscript>\n// Died() is originally defined in Pawn.\nfunction Died( Controller\
      \ Killer, class<DamageType> DamageType, vector HitLocation )\n{\n\tTakeDamage(\
      \ Health, None, Location, vect(0,0,-1), class'Crushed' );\n}\n</uscript>\n\n\
      ===Effects===\n\nBesides the blood puffs needed to indicate Damage, the only\
      \ effect this NPC needs is it's poop.  When it performs its Poop behavior, we\
      \ will want a separate Actor, a Projectile, to spawn at the appropriate place\
      \ and drop to the ground.\n\nWe will use this line during the Poop behavior\
      \ to spawn the NaliCowPoop in the appropriate location and orientation; towards\
      \ the back of the character and pointing down.\n\n<uscript>\n\tspawn( class'NaliCowPoop',,\
      \ 'Poop', ( Location + ( vector(Rotation) * -24 ) ), rotator( vect(0,0,-1) )\
      \ );\n</uscript>\n\n==Class Construction==\n\nOur NPC mostly uses functions\
      \ and methods already found in the Pawn class.  Because this character is not\
      \ meant to respawn, pickup [[Legacy:Adrenaline|Adrenaline]], carry [[Legacy:Inventory|Inventory]],\
      \ etc., a simple Pawn subclass can be used without a custom Controller.  The\
      \ AI can be coded into the custom Pawn class, NaliCow, and we can use the default\
      \ AIController.\n\nFor the effects, the NaliCowPoop, we will use make a custom\
      \ subclass from the Projectile class, BioGlob.\n\n===NaliCow===\n\nWith our\
      \ code elements defined, we can simply begin to piece them together within a\
      \ Pawn subclass called NaliCow.  Along the way, we will make decisions about\
      \ any further behaviors needed, such as a simple Turn behavior, where the Walk\
      \ animation is played but the character only spins in place, or a redefinition\
      \ of the Landed() event to make sure the character reacts appropriately if bStartled.\
      \  We will also make decisions about the frequency and chance that any given\
      \ behavior be initiated from any other.  Most of the time, a simple random chance\
      \ filtered through a switch statement will suffice.\n\nA state will be defined\
      \ for each behavior, allowing us to completely control the character, including\
      \ it's movement and further behavior.\n\nPutting together this NPC character\
      \ requires the use of properties and methods, some will be custom, but most\
      \ of which have been defined in the Pawn, Actor or Controller classes.  \n\n\
      ====Pawn Default Properties====\n; (Advanced) float Lifespan : Pawn default\
      \ is 0.  We keep it there by default, but will be modifying it in game.\n; (Collision)\
      \ int CollisionHeight : Pawn default is 74.  Our default will be 34.\n; (Collision)\
      \ SurfaceType : Pawn default is EST_Default.  Our default will be EST_Flesh.\n\
      ; (Display) [[Legacy:Mesh|Mesh]] Mesh : Our default is <tt>VertMesh'SkaarjPack_rc.NaliCow'</tt>.\n\
      ; (Movement) Physics : Pawn default is PHYS_None.  Our default will be PHYS_Walking.\n\
      ; (Movement) rotator RotationRate : Pawn default RotationRate.Yaw is 20000.\
      \  We keep it there by default, but will be modifying it in game.\n; (Movement)\
      \ vector Velocity, Acceleration : These two properties are used during Movement.\n\
      ; (None) [[Legacy:Controller|Controller]] Controller : By default Pawns automatically\
      \ spawn a Controller of Pawn.ControllerClass during PreBeginPlay().  This will\
      \ be our handle to the Controller.\n; (None) class<[[Legacy:Controller|Controller]]>\
      \ ControllerClass : Pawn default value is [[Legacy:AIController|AIController]].\
      \  We keep it there by default.\n; (None) int GroundSpeed : Pawn default value\
      \ is 440.  Our default value will be 100.\n; (None) int Health : Pawn default\
      \ value is 100.  We keep it there by default, but will be modifying it in game.\n\
      ; (None) bool bReplicateAnimations : Pawn default is false.  Our default value\
      \ will be true.  For use with SimAnim struct.\n; (None) SimAnims : This struct\
      \ is used for Animation Replication.  Includes AnimSequence, bAnimLoop, etc.\n\
      ; (None) bool bTearOff : This property is used to make the Client the owner\
      \ of the actor, making it \"TornOff\" and no longer replicated to new Clients.\
      \  We will use this during Death only.\n; (Sound) bool bFullVolume : Pawn default\
      \ is false.  Our default value will be true.\n; (Sound) int SoundRadius : Pawn\
      \ default is 160.  Our default value will be 512.\n\n====Pawn Default Methods====\n\
      ; bool PlayAnim( name Sequence, optional float Rate, optional float TweenTime,\
      \ optional int Channel ) : This function is originally defined in Actor.  It\
      \ will allow an Anim Sequence to play.\n; bool LoopAnim( name Sequence, optional\
      \ float Rate, optional float TweenTime, optional int Channel ) : This function\
      \ is originally defined in Actor.  It will allow an Anim Sequence to loop. \n\
      ; StopAnimating() : This function is originally defined in Actor.\n; PlaySound(\
      \ Sound Sound, optional ESoundSlot Slot, optional float Volume, optional bool\
      \ bNoOverride, optional float Radius, optional float Pitch, optional bool Attenuate\
      \ ) : This function is originally defined in Actor.  It will allow a Sound to\
      \ play.\n; SetPhysics( EPhysics newPhysics ) : This function is originally defined\
      \ in Actor.  We will use it when in a Dying state.\n; SetCollision( optional\
      \ bool NewColActors, optional bool NewBlockActors, optional bool NewBlockPlayers\
      \ ) : This function is originally defined in Actor.  We will use it when in\
      \ a Dying state.\n; bool PlayerCanSeeMe() : This function is originally defined\
      \ in Actor.  It returns true when a player has a line of sight to this Actor.\
      \  We will use it when in a Dying state.\n; AnimEnd( int Channel ) : This event\
      \ is originally defined in Actor.  It is called when the current animation sequence\
      \ has played through.  This will allow us to switch from action to action at\
      \ an appropriate time.\n; Landed( vector HitNormal ) : This event is originally\
      \ defined in Actor.  It is called when the Actor has landed on a Base after\
      \ falling.\n; TornOff() : This event is a signal that this actor is no longer\
      \ being replicated to new Clients and is now set to <tt>Role == ROLE_Authority</tt>\
      \ on the Clients.  We will use this for removal of a dead NaliCow on Clients.\n\
      \n====AIController Properties====\n; (None) Actor MoveTarget : Originally defined\
      \ in Controller, this is the Actor to move toward.\n; (None) vector Destination\
      \ : Originally defined in Controller, this is the vector (Location) to move\
      \ toward.  We will use this to set desired location.\n; (None) vector FocalPoint\
      \ : Originally defined in Controller, this is the vector to look toward.  We\
      \ will use this to set desired rotation.\n; (None) Actor Focus: Originally defined\
      \ in Controller, this is the Actor to look toward.\n\n====Final Source Code====\n\
      \nThe following is the AI Source Code for a NaliCow NPC, using all the available\
      \ animations and sounds to convey believable behavior.\n\n<uscript>\n//=============================================================================\n\
      // NaliCow.\n// NaliCow Non-Player Character for UT2004.\n// by SuperApe --\
      \ Dec 2005\n// ( Based on Mesh animations and sounds from Epic Games )\n//=============================================================================\n\
      class NaliCow extends Pawn\n    placeable;\n\nvar     Actor       HurtingActor;\
      \   // An Actor to get away from.\nvar     vector      OldLocation;    // Used\
      \ to determine if stuck.\nvar\t\tint\t\t\tDamageTaken;\t// Most recent damage\
      \ amount.\nvar\t\tbool\t\tbStartled;\t\t// Recently startled.\n\n// PostBeginPlay()\
      \ is originally defined in Actor().\n// We will use it to make sure an AIController\
      \ is spawned for our NaliCow.\nevent PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\
      \t\n\tif ( ( ControllerClass != None ) && ( Controller == None ) )\n\t\tController\
      \ = spawn( ControllerClass );\n\tif ( Controller != None )\n\t\tController.Possess(\
      \ self );\n}\n\n// DisplayBehavior() takes a BehaviorIndex value and sets the\
      \ appropriate animation and sound.\n// Degrees of behavior will be taken into\
      \ account via an optional arguement.\nfunction DisplayBehavior( int BehaviorIndex,\
      \ optional int Degree )\n{\n    switch( BehaviorIndex ) {\n        case(1) :\n\
      \            Acting( 'Breath', sound'SkaarjPack_rc.ambCow', true ); break;\n\
      \        case(2) : \n            Acting( 'root', sound'SkaarjPack_rc.munch1p',\
      \ true ); break;\n        case(3) : \n            Acting( 'Chew', sound'SkaarjPack_rc.munch1p',\
      \ true ); break;\n        case(4) : \n            if ( FRand() > 0.5 )\n   \
      \             Acting( 'Poop', sound'SkaarjPack_rc.cMoo1c', false );\n      \
      \      else\n                Acting( 'Poop', sound'SkaarjPack_rc.cMoo2c', false\
      \ );\n            break;\n        case(5) : \n            Acting( 'Shake', sound'SkaarjPack_rc.shakeC',\
      \ true ); break;\n        case(6) : \n            Acting( 'Swish', sound'SkaarjPack_rc.swishC',\
      \ true ); break;\n        case(7) : \n            Acting( 'Walk', sound'SkaarjPack_rc.WalkC',\
      \ true ); break;\n        case(8) : \n            Acting( 'Run', sound'SkaarjPack_rc.WalkC',\
      \ true ); break;\n        case(9) : \n            Acting( 'Landed', sound'SkaarjPack_rc.Thump',\
      \ false ); break;\n        case(10) : \n            if ( Degree < 2 )\n    \
      \            Acting( 'TakeHit', sound'SkaarjPack_rc.cMoo1c', false );\n    \
      \        else if ( Degree == 2 )\n                Acting( 'TakeHit2', sound'SkaarjPack_rc.injurC1c',\
      \ false );\n            else if ( Degree == 3 )\n                Acting( 'BigHit',\
      \ sound'SkaarjPack_rc.injurC2c', false );\n            break;\n        case(11)\
      \ : \n            if ( Degree < 2 )\n                Acting( 'Dead', sound'SkaarjPack_rc.cMoo2c',\
      \ false );\n            else if ( Degree == 2 )\n                Acting( 'Dead2',\
      \ sound'SkaarjPack_rc.DeathC1c', false );\n            else if ( Degree == 3\
      \ )\n                Acting( 'Dead3', sound'SkaarjPack_rc.DeathC2c', false );\n\
      \            break;\n        default : \n            Acting( 'Breath', sound'SkaarjPack_rc.ambCow',\
      \ true ); break;\n     }\n}\n\n// Acting() loops the given animation sequence\
      \ name and plays the given sound.\n// For Replication purposes, animation is\
      \ normally looped.  Sequences may be interupted each AnimEnd().\nfunction Acting(\
      \ name Anim, sound Soundname, bool bLoop )\n{\n    if ( bLoop )\n        LoopAnim(\
      \ Anim, 1.0, 0.1 );\n    else\n\t\tPlayAnim( Anim, 1.0, 0.1 );\n    SimAnim.AnimSequence\
      \ = Anim;\n    SimAnim.AnimRate = 1.0;\n    if ( bLoop )\n        SimAnim.bAnimLoop\
      \ = true;\n    else\n        SimAnim.bAnimLoop = false;\n    SimAnim.TweenRate\
      \ = 0.1;\n    PlaySound( Soundname, SLOT_Misc );\n}\n\n// MoveCheck() deals\
      \ with periodic checks for bStartled, DamageTaken and falling.\n// Then moves\
      \ the character in direction of Rotation and at speed of SpeedRatio.\nfunction\
      \ MoveCheck( float SpeedRatio )\n{\n\tDamageTaken = 0;  // Reset most recent\
      \ damage memory.\n\n\tif ( Base == None )  // Should be falling.\n\t{\n\t\t\
      if ( Physics != PHYS_Falling )\n\t\t\tSetPhysics( PHYS_Falling );\n\t\treturn;\n\
      \t}\n\n\tif ( Controller.MoveTarget == None )\n\t\tReachedDestination( self\
      \ );\n\n    if ( VSize( Controller.MoveTarget.Location - Location ) < 64 )\n\
      \   \t    ReachedDestination( Controller.MoveTarget );\n\n    if ( VSize( OldLocation\
      \ - Location ) < 48 )\n   \t    ReachedDestination( Controller.MoveTarget );\n\
      \n    OldLocation = Location;\n\n    RotationRate.Yaw = SpeedRatio * 20000;\n\
      \   \tVelocity = ( SpeedRatio * GroundSpeed ) * vector( Rotation );\n    Acceleration\
      \ = Velocity;\n\n\tif ( FRand() > 0.95 )  // Chance to calm down.\n\t\tbStartled\
      \ = false;\n\tif ( bStartled && !self.IsInState('Run') )\n\t\tGotoState('Run');\
      \  // React to startle.\t\n}\n\n// ReachedDestination() is originally defined\
      \ in Pawn.\n// MoveTarget and other relevant properties are defined in Controller.\n\
      function bool ReachedDestination( Actor OldTarget )\n{\n    local   Actor  \
      \ NewTarget, A;\n    local   NavigationPoint    NP;\n\n    forEach VisibleActors(\
      \ class'Actor', A )\n        if ( A != OldTarget && A != HurtingActor )\n  \
      \          NewTarget = A;\n\n    if ( A == None )\n        forEach RadiusActors(\
      \ class'NavigationPoint', NP, 1024 )\n            if ( FRand() > 0.5 && NP !=\
      \ OldTarget && FastTrace( NP.Location ) )\n            {\n                A\
      \ = NP;\n                NewTarget = A;\n            }\n\n    if ( A == None\
      \ )\n        forEach AllActors( class'Actor', A )\n            if ( FRand()\
      \ > 0.5 && A != HurtingActor && A != OldTarget && A != self && !A.IsA('Controller')\
      \ )\n                NewTarget = A;\n\n    if ( NewTarget != None )\n    {\n\
      \        Controller.MoveTarget = NewTarget;\n        Controller.Destination\
      \ = NewTarget.Location;\n        Controller.FocalPoint = NewTarget.Location;\n\
      \        Controller.Focus = NewTarget;\n    }\n    else\n    {\n        if (\
      \ HurtingActor != None )\n        {\n            Controller.Destination = (\
      \ Location - HurtingActor.Location );\n            Controller.FocalPoint = Controller.Destination;\n\
      \        }\n        else\n        {\n            Controller.Destination = vector(\
      \ Rotation ) * ( 512 * FRand() + 512 );\n            Controller.FocalPoint =\
      \ Controller.Destination;\n        }\n    }\n}\n\n// Trigger() is originally\
      \ defined in Actor.\nfunction Trigger( Actor Other, Pawn EventInstigator )\n\
      {\n    if ( self.IsInState('Run') )\n        return;\n\tif ( self.IsInState('Walk')\
      \ )\n\t{\n\t\tGotoState('Run');\n\t\treturn;\n\t}\n\tGotoState('Walk');\n}\n\
      \n// Touch() is originally defined in Actor.\nfunction Touch( Actor Other )\n\
      {\n    HurtingActor = Other;\n    if ( self.IsInState('Run') )\n        return;\n\
      \tGotoState('Walk');\n}\n\n// Bump() is originally defined in Actor.\nfunction\
      \ Bump( Actor Other )\n{\n    HurtingActor = Other;\n    if ( self.IsInState('Run')\
      \ && ( FRand() < 0.9 ) )  // Chance to calm.\n        return;\n\tif ( self.IsInState('Walk')\
      \ && ( FRand() > 0.9 ) )  // Change due to startle.\n\t{\n\t\tGotoState('Run');\n\
      \t\treturn;\n\t}\n\tGotoState('Walk');\n}\n\n// Landed() is originally defined\
      \ in Actor.\nevent Landed( vector HitNormal )\n{\n\tSuper.Landed( HitNormal\
      \ );\n\n\tif ( Velocity.Z > -200 )  // Slow enough fall to forgive landing.\n\
      \t\treturn;\n\n\tif ( DamageTaken == 0 )\n\t\tGotoState('Land');\n\telse\n\t\
      \tGotoState('TakeHit');\n}\n\n// TakeDamage() is originally defined in Actor.\n\
      function TakeDamage(int Damage, Pawn InstigatedBy, Vector HitLocation, Vector\
      \ Momentum, class<DamageType> DamageType)\n{\n    HurtingActor = InstigatedBy;\n\
      \tDamageTaken = Damage;\n\tbStartled = true;\n\n    Super.TakeDamage( Damage,\
      \ InstigatedBy, HitLocation, Momentum, DamageType );\n\n\tif ( DamageTaken >\
      \ 3 )\n\t    spawn( class'STR_green_blood_puff',,, HitLocation, Rotator( Momentum\
      \ ) );\n\n    if ( Controller != None && ( Controller.MoveTarget == HurtingActor\
      \ || Controller.Focus == HurtingActor ) )\n\t\tReachedDestination( HurtingActor\
      \ );  // Do not approach HurtingActor.\n\n    if ( Health > 0 )\n        GotoState('TakeHit');\n\
      \    else if ( !self.IsInState('Dying') )\n        GotoState('Dying');\n}\n\n\
      // Died() is originally defined in Pawn.\nfunction Died( Controller Killer,\
      \ class<DamageType> DamageType, vector HitLocation )\n{\n\tTakeDamage( Health,\
      \ None, Location, vect(0,0,-1), class'Crushed' );\n}\n\n// TornOff() is originally\
      \ defined in Actor.\nevent TornOff()\n{\n    if ( PlayerCanSeeMe() )\n     \
      \   DeRez();\n    else\n        Destroy();\n}\n\n// DeRez() will signal removal\
      \ of the dead NaliCow.\nsimulated function DeRez()\n{\n    if ( Level.NetMode\
      \ == NM_DedicatedServer )\n        return;\n\n    Skins.length = 0;\n    Skins[0]\
      \ = Material'DeRez.Shaders.DeRezFinalBody';  \n}\n\nauto state() Prone\n{\n\
      \    event AnimEnd( int Channel )\n    {\n        local   int     X;\n\n   \
      \     X = FRand() * 20;\n        switch ( X ) {\n            case(0) : GotoState('Turn');\
      \        break;\n            case(1) : GotoState('Graze');       break;\n  \
      \          case(2) : GotoState('Poop');        break;\n            case(3) :\
      \ GotoState('Shake');       break;\n            case(4) : GotoState('Swish');\
      \       break;\n            case(5) : GotoState('Walk');        break;\n   \
      \         default : DisplayBehavior( 1 );     break;\n        }\n    }\n\n \
      \   Begin:\n        DisplayBehavior( 1 );\n\t\tMoveCheck( 0.0 );\n        if\
      \ ( HurtingActor != None )\n            if ( FRand() > 0.95 )  // Chance to\
      \ forgive HurtingActor.\n                HurtingActor = None;\n}\n\nstate()\
      \ Turn\n{\n    event AnimEnd( int Channel )\n    {\n        RotationRate.Yaw\
      \ = 0;\n        GotoState('Prone');\n    }\n\n    Begin:\n\t\tMoveCheck( 0.0\
      \ );\n        if ( DesiredRotation != Rotation )\n        {\n            RotationRate.Yaw\
      \ = 10000;\n            DisplayBehavior( 7 );\n        }\n        else\n   \
      \         GotoState('Prone');\n}\n\nstate() Graze\n{\n    event AnimEnd( int\
      \ Channel )\n    {\n        GotoState('Chew');\n    }\n\n    Begin:\n      \
      \  DisplayBehavior( 2 );\n\t\tMoveCheck( 0.0 );\n}\n\nstate() Chew\n{\n    event\
      \ AnimEnd( int Channel )\n    {\n        local   int     X;\n\n        X = FRand()\
      \ * 15;\n        switch ( X ) {\n            case(0) : GotoState('Prone'); \
      \      break;\n            case(1) : GotoState('Graze');       break;\n    \
      \        case(2) : GotoState('Poop');        break;\n            case(3) : GotoState('Shake');\
      \       break;\n            case(4) : GotoState('Swish');       break;\n   \
      \         case(5) : GotoState('Walk');        break;\n            default :\
      \ DisplayBehavior( 3 );     break;\n        }\n    }\n\n    Begin:\n       \
      \ DisplayBehavior( 3 );\n\t\tMoveCheck( 0.0 );\n}\n\nstate Poop\n{\n    function\
      \ Timer()\n    {\n        spawn( class'NaliCowPoop',, 'Poop', ( Location + (\
      \ vector(Rotation) * -24 ) ), rotator( vect(0,0,-1) ) );\n    }\n\n    event\
      \ AnimEnd( int Channel )\n    {\n        local   int     X;\n\n        X = FRand()\
      \ * 20;\n        switch ( X ) {\n            case(0) : GotoState('Graze'); \
      \      break;\n            case(1) : GotoState('Shake');       break;\n    \
      \        case(2) : GotoState('Swish');       break;\n            case(3) : GotoState('Walk');\
      \        break;\n            default : GotoState('Prone');       break;\n  \
      \      }\n    }\n\n    Begin:\n        DisplayBehavior( 4 );\n\t\tMoveCheck(\
      \ 0.0 );\n        SetTimer( 1.0, false );\n}\n\nstate() Shake\n{\n    event\
      \ AnimEnd( int Channel )\n    {\n        local   int     X;\n\n        X = FRand()\
      \ * 20;\n        switch ( X ) {\n            case(0) : GotoState('Graze'); \
      \      break;\n            case(1) : GotoState('Poop');        break;\n\n  \
      \          case(2) : DisplayBehavior( 5 );     break;\n            case(3) :\
      \ GotoState('Swish');       break;\n            case(4) : GotoState('Walk');\
      \        break;\n            default : GotoState('Prone');       break;\n  \
      \      }\n    }\n\n    Begin:\n        DisplayBehavior( 5 );\n\t\tMoveCheck(\
      \ 0.0 );\n}\n\nstate Swish\n{\n    event AnimEnd( int Channel )\n    {\n   \
      \     local   int     X;\n\n        X = FRand() * 20;\n        switch ( X )\
      \ {\n            case(0) : GotoState('Graze');       break;\n            case(1)\
      \ : GotoState('Poop');        break;\n            case(2) : GotoState('Shake');\
      \       break;\n            case(3) : DisplayBehavior( 6 );     break;\n   \
      \         case(4) : GotoState('Walk');        break;\n            default :\
      \ GotoState('Prone');       break;\n        }\n    }\n\n    Begin:\n       \
      \ DisplayBehavior( 6 );\n\t\tMoveCheck( 0.0 );\n}\n\nstate Walk\n{\n    function\
      \ Tick( float DeltaTime )\n    {\n        if ( Physics == PHYS_Walking && DamageTaken\
      \ == 0 )\n        {\n            Velocity = ( 0.5 * GroundSpeed ) * vector(\
      \ Rotation );\n            Acceleration = Velocity;\n        }\n    }\n\n  \
      \  event AnimEnd( int Channel )\n    {\n        local   int     X;\n\n     \
      \   X = FRand() * 20;\n        switch ( X ) {\n            case(0) : GotoState('Prone');\t\
      \t\t\t\t\t\tbreak;\n            case(1) : GotoState('Turn');\t\t\t\t\t\t\tbreak;\n\
      \            case(1) : GotoState('Graze');\t\t\t\t\t\t\tbreak;\n           \
      \ case(2) : GotoState('Poop');\t\t\t\t\t\t\tbreak;\n            case(3) : GotoState('Shake');\t\
      \t\t\t\t\t\tbreak;\n            case(4) : GotoState('Swish');\t\t\t\t\t\t\t\
      break;\n            default : DisplayBehavior( 7 ); MoveCheck( 0.5 );\t\tbreak;\n\
      \        }\n    }\n\n    Begin:\n        DisplayBehavior( 7 );\n\t\tMoveCheck(\
      \ 0.5 );\n}\n\nstate Run\n{\n    function Tick( float DeltaTime )\n    {\n \
      \       if ( Physics == PHYS_Walking && DamageTaken == 0 )\n        {\n    \
      \        Velocity = ( GroundSpeed ) * vector( Rotation );\n            Acceleration\
      \ = Velocity;\n        }\n    }\n\n    event AnimEnd( int Channel )\n    {\n\
      \        local   int     X;\n\n        X = FRand() * 10;\n        switch ( X\
      \ ) {\n            case(0) : GotoState('Walk');\t\t\t\t\t\t\tbreak;\n      \
      \      default : DisplayBehavior( 8 ); MoveCheck( 1.0 );\t\tbreak;\n       \
      \ }\n    }\n\n    Begin:\n        DisplayBehavior( 8 );\n\t\tMoveCheck( 1.0\
      \ );\n}\n\nstate Land\n{\n    function Timer()\n    {\n        local   int \
      \    X;\n\n\t\tif ( bStartled )  // Always run if startled.\n\t\t{\n\t\t\tGotoState('Run');\n\
      \t\t\treturn;\n\t\t}\n\n        X = FRand() * 10;\n        switch ( X ) {\n\
      \            case(0) : GotoState('Prone');   break;\n            case(1) : GotoState('Turn');\
      \    break;\n            case(2) : GotoState('Shake');   break;\n          \
      \  default : GotoState('Walk');    break;\n        }\n    }\n\n    event AnimEnd(\
      \ int Channel )\n    {\n        SetTimer( 0.2, false );\n    }\n\n    Begin:\n\
      \        DisplayBehavior( 9 );\n\t\tMoveCheck( 0.0 );\n}\n\nstate TakeHit\n\
      {\n    function Timer()\n    {\n        GotoState('Run');\n    }\n\n    event\
      \ AnimEnd( int Channel )\n    {\n        if ( Health < 1 )\n            GotoState('Dying');\n\
      \        else\n            SetTimer( 0.2, false );\n    }\n\n    Begin:\n  \
      \      DisplayBehavior( 10, Min( ( DamageTaken / 15 ), 3 ) );\n        MoveCheck(\
      \ 0.0 );\n}\n\nstate Dying\n{\n    Ignores Trigger, Touch, Bump, Landed, Died;\n\
      \n    function Timer()\n    {\n        SetPhysics( PHYS_None );\n        SetCollision(\
      \ false, false );\n        Lifespan = 3.0;\n        if ( PlayerCanSeeMe() )\n\
      \            DeRez();\n        else\n            Destroy();\n    }\n\n    event\
      \ AnimEnd( int Channel )\n    {\n        SetTimer( 4.0, false );\n    }\n\n\
      \    Begin:\n        StopAnimating();\n        DisplayBehavior( 11, Min( ( DamageTaken\
      \ / 20 ), 3 ) );\n        MoveCheck( 0.0 );\n        if ( Level.NetMode == NM_DedicatedServer\
      \ )\n        {\n            SetPhysics( PHYS_None );\n            SetCollision(\
      \ false, false );\n            LifeSpan = 3.0;\n            bTearOff = true;\n\
      \        }\n}\n\ndefaultProperties \n{\n    CollisionHeight=34\n    SurfaceType=EST_Flesh\n\
      \    Mesh=VertMesh'SkaarjPack_rc.NaliCow'\n    Physics=PHYS_Walking\n    GroundSpeed=100\n\
      \    bReplicateAnimations=true\n    bFullVolume=true\n    SoundRadius=512\n\
      }\n</uscript>\n\n===NaliCowPoop===\n\nAn obvious Projectile to use for this\
      \ NaliCowPoop Actor is the BioRifle's Projectile, BioGlob.  It uses a Mesh that\
      \ automatically drips, jiggles and splats like our desired NaliCowPoop should.\
      \  We will need to make a custom subclass of BioGlob, change its Texture, Lighting\
      \ and alter some of it's default code to prevent it from causing Damage.\n\n\
      ====BioGlob Default Properties====\n; (Display) Skins : It's default Skins are\
      \ set for BioRifle ammo.  We will set it to <tt>Texture'XEffectMat.goop.SlimeSkin'</tt>.\n\
      ; (Movement) vector Velocity : The BioGlob starts with a lot of velocity by\
      \ default, we will set it to vect(0,0,0) during PostBeginPlay().\n; (Lighting)\
      \ int AmbientGlow : BioGlobs have an AmbientGlow by default.  We will set this\
      \ to zero.\n; (Lighting) bool bUnlit : BioGlobs are unlit by default.  We will\
      \ set this to false.\n; (Lighting) bool bDynamicLight : BioGlobs glow by default.\
      \  We will set this to false.\n; (Lighting) LightType : We will set this to\
      \ LT_None.\n; float RestTime : This property is originally defined in BioGlob.\
      \  It determines how long the BioGlob sits before it calls BlowUp().  We will\
      \ set this value to 10.0.\n; int BaseDamage : This property is originally defined\
      \ in BioGlob.  We will make sure this doesn't cause damage by setting it to\
      \ 0.\n\n====BioGlob Default Methods====\n; BlowUp( vector HitLocation ) : This\
      \ function is originally defined in BioGlob.  We will modify it to not cause\
      \ damage and instead switch to a Shriveling state, which shrinks the BioGlob\
      \ and \"pops\" it.\n\n====Final Source Code====\n\n<uscript>\n//=============================================================================\n\
      // NaliCowPoop.\n// The effects result of the NaliCow Poop behavior.\n// by\
      \ SuperApe -- Dec 2005\n//=============================================================================\n\
      class NaliCowPoop extends BioGlob;\n\nfunction PostBeginPlay()\n{\n\tSuper.PostBeginPlay();\n\
      \n\tVelocity = vect(0,0,0);\n}\n\n// BlowUp() is originally defined in BioGlob.\n\
      function BlowUp( vector HitLocation )\n{\n\tGotoState('Shriveling');\n}\n\n\
      defaultProperties\n{\n\tSkins(0)=Texture'XEffectMat.goop.SlimeSkin'\n\tAmbientGlow=0\n\
      \tbUnlit=false\n\tbDynamicLight=false\n\tLightType=LT_None\n\tRestTime=10.0\n\
      \tBaseDamage=0\n}\n</uscript>\n\n==Testing and Implementation==\n\nThe new NPC\
      \ character should be tested thoroughly to ensure it is behaving reliably both\
      \ as a character and as a game object.\n\n===Compiling===\n\nIf you're familiar\
      \ with [[Legacy:Compiling With UCC|Compiling With UCC]], then you can skip this\
      \ section.\n\nThe steps for compiling our NPC code are as follows:\n\n# Find\
      \ your UT2004 base directory.  This is usually <tt>C:/UT2004/</tt>.  We will\
      \ refer to this as <tt>.../UT2004/</tt> from this point on.\n# Create a subdirectory\
      \ there for our NaliCow code, <tt>.../UT2004/NaliCow/</tt>, and create a subdirectory\
      \ within that for our Classes, <tt>.../UT2004/NaliCow/Classes</tt>\n# Within\
      \ that Classes subdirectory, create a simple (text) file with a .uc extention\
      \ called, \"NaliCow.uc\", and another called, \"NaliCowPoop.uc\".\n# Copy the\
      \ above final source code for the NaliCow and paste it into the .uc file.  Do\
      \ the same for the NaliCowPoop code.\n# Find your <tt>.../UT2004/System/UT2004.ini</tt>\
      \ file and edit it with a text editor.  Find the <tt>EditPackages=</tt> block\
      \ and add <tt>EditPackages=NaliCow</tt> to the end of the block.  This will\
      \ make sure the compiling application knows which subdirectory to look for things\
      \ to compile.\n# In Windows, use StartMenu -> Run... to launch <tt>.../UT2004/System/ucc\
      \ make</tt>.\n# If there were no errors, you will now have a <tt>.../UT2004/System/NaliCow.u</tt>\
      \ package file. (Note that to ''re-compile'' a package, you must remove it from\
      \ the <tt>.../UT2004/System/</tt> subdirectory, or else the compiling application\
      \ will skip it.)\n# If there were errors, they are in the ucc log file, <tt>.../UT2004/System/ucc.txt</tt>,\
      \ and will tell you which line number the error came from.\n\n===Implementation===\n\
      \nNow, we will bring our NPC into the game environment to test and debug.\n\n\
      # Within Ued, open a map suitable for testing our NPC.\n# In the [[Legacy:Actor\
      \ Browser|Actor Browser]], go to File -> Open... and select our <tt>NaliCow.u</tt>\
      \ package file.\n# Add an Actor -> Pawn -> NaliCow to the map.\n# Configure\
      \ the desired properties, if any.\n# Hit the Playtest (\"Joystick\") button\
      \ on the [[Legacy:Toolbar|Toolbar]].\n\nNow you have the ability to test it's\
      \ behaviors under a variety of situations.  This is a good idea to do with any\
      \ new AI construct.  Be vigilant and thorough in your testing to find all the\
      \ possible bugs.\n\nSome helpful [[Legacy:Console Commands|Console Commands]]\
      \ to use during testing are:\n\n; summon NaliCow.NaliCow : This spawns a default\
      \ NaliCow, placed directly in front of your view.\n; addbots <int NumberOfBots>\
      \ : This adds bots to the map.\n; killall <class KillClass> : This destroys\
      \ all objects of the given KillClass.\n; allweapons : Gives all weapons and\
      \ default ammo.\n; map <name MapName> : Starts a new match within the MapName\
      \ provided.  Note that '''map autoplay''' will re-start the current map within\
      \ Ued's memory.\n\n===Replication===\n\nIf you know how to [[Legacy:Launch A\
      \ Local Netgame|Launch a Local Netgame]], you may skip this section.\n\nTesting\
      \ Replication is important to ensure that what you have made offline will work\
      \ just as well online.\n\n# Save a map with at least a few NaliCows in it, different\
      \ settings, etc.  Save it to the <tt>.../UT2004/Maps/</tt> subdirectory with\
      \ a valid [[Legacy:Map File Prefix|Map File Prefix]].\n# Launch UT2004 and Host\
      \ a game.  Pick your custom map and click on '''Dedicated'''.  The menu window\
      \ will disappear and a server log window will open as the game launches in the\
      \ background.\n# Launch UT2004 again.  Bring down the console and type, <tt>map\
      \ 127.0.0.1</tt>, to join the local server you just started.\n# Once there for\
      \ the first time, bring up the menu by hitting Esc and save this local server\
      \ as one of your \"Favs\" for easier Joining in the future.\n\nNow, you're seeing\
      \ what a slow Dial-Up client player sees.  There will be some lag due to your\
      \ machine handling both the Server and Client at the same time.  However, this\
      \ is important to see what imformation is being Replicated properly and what\
      \ isn't.\n\nFor pinpointing the problems, it's useful to use Logs to be called\
      \ either on the DedicatedServer or not.  See also [[Legacy:Netcode Idioms|Netcode\
      \ Idioms]].  The Logs are found at <tt>.../UT2004/System/Server.txt</tt> for\
      \ the Server and <tt>.../UT2004/System/UT2004.txt</tt> for the Client.\n\n==Further\
      \ Development==\n\nBeyond this basic NaliCow NPC, more can be done to improve\
      \ behavior, realism, gameplay or ease of use.\n\n===DrawScale Adjustments===\n\
      \nBased on the DrawScale property, several adjustments can be made during PostBeginPlay()\
      \ to make sure the NaliCow behaves, moves and sounds properly.  The result is\
      \ a simple one-property adjustment that can be made to make a small, fast baby\
      \ cow or a big, slow older cow.  We will use a separate function that can be\
      \ called from PostBeginPlay(), AdjustForSize().  Before the adjustments are\
      \ made, we can make sure the DrawScale is within a reasonable size range.\n\n\
      <uscript>\n// PostBeginPlay() is originally defined in Actor().\n// We will\
      \ use it to make sure an AIController is spawned for our NaliCow.\nevent PostBeginPlay()\n\
      {\n\tSuper.PostBeginPlay();\n\t\n\tif ( ( ControllerClass != None ) && ( Controller\
      \ == None ) )\n\t\tController = spawn( ControllerClass );\n\tif ( Controller\
      \ != None )\n\t\tController.Possess( self );\n\n\tAdjustForSize();\n}\n\n//\
      \ AdjustForSize() will make various adjustments according to DrawScale.\nfunction\
      \ AdjustForSize()\n{\n\tif ( DrawScale > 3.0 || DrawScale < 0.5 )\n\t\tSetDrawScale(\
      \ FClamp( DrawScale, 3.0, 0.5 ) );\n\tSetCollisionSize( 34 * DrawScale, 34 *\
      \ DrawScale );\n\tMass = 100 * DrawScale;\n\tHealth = 100 * DrawScale;\n\tSoundRadius\
      \ = 512 * DrawScale;\n\tSoundPitch = 128 / DrawScale;\n\tif ( DrawScale > 1.5\
      \ )\n\t\tbCanBeBaseForPawns = true;\n}\n</uscript>\n\nOther functions and elements\
      \ will also have to be changed based on DrawScale.  Changes to the AnimationRate,\
      \ RotationRate, SoundVolume, SoundPitch, NaliCowPoop DrawScale and RestTime,\
      \ etc. can all be made to reflect the size of the NaliCow.  For example, the\
      \ Acting() function can be altered to look like this:\n\n<uscript>\n// Acting()\
      \ loops the given animation sequence name and plays the given sound.\n// For\
      \ Replication purposes, animation is normally looped.  Sequences may be interupted\
      \ each AnimEnd().\nfunction Acting( name Anim, sound Soundname, bool bLoop )\n\
      {\n    if ( bLoop )\n        LoopAnim( Anim, ( 1.0 / DrawScale ), ( 1.0 / DrawScale\
      \ )/10 );\n    else\n\t\tPlayAnim( Anim, ( 1.0 / DrawScale ), ( 1.0 / DrawScale\
      \ )/10 );\n    SimAnim.AnimSequence = Anim;\n    SimAnim.AnimRate = ( 1.0 /\
      \ DrawScale );\n    if ( bLoop )\n        SimAnim.bAnimLoop = true;\n    else\n\
      \        SimAnim.bAnimLoop = false;\n\tSimAnim.TweenRate = ( 1.0 / DrawScale\
      \ )/10;\n    PlaySound( Soundname, SLOT_Misc, ( DrawScale * 2 ),,, ( SoundPitch\
      \ / 128 ) );\n}\n</uscript>\n\n===Cow and Baby Relationships===\n\nThe original\
      \ [[Legacy:Cow|Cow]] and BabyCow UT creatures had properties to define their\
      \ relationships.  These can be reproduced with our NaliCow to perform the same\
      \ behaviors.\n\n====bHasBaby and BabyCow====\n\nIn UT, the property bHasBaby\
      \ was meant to automatically spawn a BabyCow (a smaller version) for this Cow.\
      \  BabyCows were not meant to be explicitly placed in maps.  A simple modification\
      \ to PostBeginPlay() should allow us to use our new DrawScale adjustments to\
      \ do this easily.\n\n<uscript>\nvar()\t\tbool\t\tbHasBaby;\t\t// This NaliCow\
      \ will spawn a smaller \"Baby\" at map start.\nvar  \t\tNaliCow\t\tMama;\t\t\
      \t// This NaliCow is a \"Baby\" and should stay close to \"Mama\".\n\nevent\
      \ PostBeginPlay()\n{\n\tlocal\tNaliCow\t\tBaby;\n\n\tSuper.PostBeginPlay();\n\
      \t\n\tif ( ( ControllerClass != None ) && ( Controller == None ) )\n\t\tController\
      \ = spawn( ControllerClass );\n\tif ( Controller != None )\n\t\tController.Possess(\
      \ self );\n\n\tAdjustForSize();\n\t\n\tif ( bHasBaby )\n\t\twhile ( Baby ==\
      \ None )\n\t\t{\n\t\t\tBaby = spawn( class'NaliCow', self,, Location + ( VRand()\
      \ * ( 64 + CollisionRadius ) ), Rotation );\n\t\t\tif ( Baby != None )\n\t\t\
      \t{\n\t\t\t\tBaby.Mama = self;\n\t\t\t\tBaby.SetDrawScale( DrawScale / 2 );\n\
      \t\t\t\tBaby.AdjustForSize();\n\t\t\t}\n\t\t}\n}\n</uscript>\n\nAlso, we should\
      \ encourage the BabyCow to stay close to its \"Mama\".  We will do this with\
      \ a modification to ReachedDestination().  The following code will be added\
      \ to ReachedDestination() just before NewTarget is assigned to the Controller\
      \ attributes.\n\n<uscript>\n\tif ( Mama != None )\n\t\tNewTarget = Mama;\n</uscript>\n\
      \n====bStayClose and WanderRadius====\n\nbStayClose modified the behavior of\
      \ the Cow so that it's Movement destinations were never more than WanderRadius\
      \ UU away from it's starting Location.  ''Note: Although there is a '''home'''\
      \ property defined in Controller, it is defined as a NavigationPoint and won't\
      \ serve this purpose.''\n\n<uscript>\nvar()\t\tbool\t\tbStayClose;\t\t// This\
      \ NaliCow will only select MoveTargets within WanderRadius.\nvar()\t\tint \t\
      \tWanderRadius;\t// The radius from Home that MoveTargets will be selected.\n\
      var  \t\tvector\t\tHome;\t\t\t// The Location this NaliCow started at.\n</uscript>\n\
      \nAnd the following code will be added to the end of ReachedDestination().\n\
      \n<uscript>\n\tif ( bStayClose && WanderRadius > 0 && \n\t\t( VSize( NewTarget.Location\
      \ - Home ) > WanderRadius || \n\t\t\tVSize( Controller.Destination - Home )\
      \ > WanderRadius ) )\n\t{\n\t\tController.Destination = Home + ( VRand() * (\
      \ FRand() * WanderRadius ) );\n\t\tController.FocalPoint = Controller.Destination;\n\
      \t}\n</uscript>\n\n===Ridable NaliCows===\n\nAn extra gameplay feature could\
      \ be to have players be able to ride and loosely steer larger NaliCows.  You\
      \ may have noticed the <tt>bCanBeBaseForPawns</tt> property set during AdjustForSize()\
      \ in the section above.  This will allow larger cows to support and carry Pawns.\
      \  Once a player has managed to get on top of one, a simple UsedBy() function\
      \ can enable them to press Use and become a special Pawn to the NaliCow.\n\n\
      <uscript>\nvar\t\tPawn\t\tRider;\t\t\t// PlayerPawn riding this cow.\n\n// UsedBy()\
      \ is originally defined in Actor.\nfunction UsedBy( Pawn P )\n{\n\tif ( !bCanBeBaseForPawns\
      \ )\n\t\treturn;\n\n\tif ( Rider == None )\n\t{\n\t\tRider = P;\n\t\tif ( PlayerController(\
      \ Rider.Controller ) != None )\n\t\t\tPlayerController( Rider.Controller ).bBehindView\
      \ = true;\n\t}\n\n\tif ( P == Rider )\n\t{\n\t\tController.Destination = Location\
      \ + ( vector( rot(0,1,0) * Rider.Controller.Rotation.Yaw ) * 1024 );\n\t\tController.FocalPoint\
      \ = Controller.Destination;\n\t\tif ( !self.IsInState('Run') )\n\t\t\tGotoState('Run');\n\
      \t\telse\n\t\t\tPlaySound( sound'SkaarjPack_rc.injurC1c', SLOT_Misc, ( DrawScale\
      \ * 2 ),,, ( SoundPitch / 128 ) );\n\t}\n}\n</uscript>\n\nOnce the player has\
      \ become a Rider to the NaliCow, the NaliCow's Controller's Destinations are\
      \ subject to the whims of the Rider.Controller.  The Rider.Controller also is\
      \ automatically set to bBehindView to give a visual cue that the change has\
      \ taken place.  By pressing the Use key, the NaliCow is urged to keep Running.\
      \  When the NaliCow reaches it's Destinations, we'll keep the player in control\
      \ by adding a little code to the top of ReachedDestination().\n\n<uscript>\n\
      \    if ( Rider != None )\n    {\n        if ( VSize( Rider.Location - Location\
      \ ) > ( CollisionHeight + Rider.CollisionHeight ) )\n        {\n           \
      \ if ( PlayerController( Rider.Controller ) != None )\n                PlayerController(\
      \ Rider.Controller ).bBehindView = false;\n            Rider = None;  // Rider\
      \ has left.\n        }\n        else\n        {\n            Controller.Destination\
      \ = Location + ( vector( rot(0,1,0) * Rider.Controller.Rotation.Yaw ) * 1024\
      \ );\n            Controller.FocalPoint = Controller.Destination;\n        \
      \    return true;\n        }\n    }\n</uscript>\n\nTo stop being a Rider, the\
      \ player can simply move off the NaliCow.  The bBehindView setting will return\
      \ after the NaliCow has reached it's next Destination.\n\n==External Links==\n\
      \nOther links to basic AI scripting tutorials should be listed here:\n* [http://www.langsuyar.com/articles/u2_tutorialsmain.html\
      \ Mattias Worch's Unreal 2 Tutorials] '''(broken)''' :\n: Mattias Worch worked\
      \ on the Unreal 2 team and has written a few useful tutorials on AI scripting.\
      \ The tutorials on this page directly relating to AI scripting are \"Set up\
      \ Dialog and AI Scripting for a Level,\" and \"Create a Basic AI Script.\" Please\
      \ note that the copyright on these tutorials allows us to link to them, but\
      \ not to \"wikify\" the tutorials and place them here. If you would like to\
      \ have a tutorial on the Wiki, I'm sure that everyone would appreciate if someone\
      \ were to read over these tutorials and experiment with AI scripting until they\
      \ had a complete enough understanding to place an original tutorial here.\n\n\
      ==Related Topics==\n* [[Legacy:Artificial Intelligence|Artificial Intelligence]]\
      \ &ndash; A super topic on all AI (bots, Monsters, NPCs, etc.)\n** [[Legacy:Bot\
      \ Support|Bot Support]]\n** [[Legacy:Monster Support|Monster Support]]\n** [[Legacy:NPC\
      \ Support|NPC Support]]\n* [[Legacy:Making Mods|Making Mods]] and [[Legacy:Mutator\
      \ Topics|Mutator Topics]]\n* [[Legacy:UnrealScript|UnrealScript]]\n\n==Discussion==\n\
      \n'''Tarquin:''' Link to documentation wiki pages, if they exist, or start writing\
      \ them! That's a good way to start.\n\n'''Foxpaw:''' I actually don't have any\
      \ experience with AI scripting myself, I was just using the random page function\
      \ and thought this page could use a bit of refactoring.\n\n'''SuperApe:''' The\
      \ above link is dead.  Yes, we need links or some tuts on the wiki itself.\n\
      \n'''SuperApe:''' I will most likely take over this page and revive it.  Linking\
      \ to [[Legacy:NPC Support|NPC Support]] and others.  My thought is to take the\
      \ Mesh for the NaliCow and re-construct it's AI coding as an NPC for UT2004.\
      \ (I never had UT, so this will be a from scratch effort that I look forward\
      \ to)  Tutorial outlined.  Working...\n\n'''SuperApe:''' This is a tutorial\
      \ on UScripting a custom AI.  Comments welcome.\n\n'''Solid Snake:''' Hmmm,\
      \ I don't really like some of the code in here as I think it could be a lot\
      \ better.\n\n'''SuperApe:''' I'll do my best to take that as constructive criticism,\
      \ but it would really help if you could elaborate.  I guess, '''This page is\
      \ under construction.'''\n\n'''SuperApe:''' After spending some time with [[Legacy:Monster|Monster]]s,\
      \ I see a much easier way to do this.  I will redo this tutorial, taking advantage\
      \ of the all Pawn functions, instead of \"re-inventing the wheel\", like I do\
      \ above.  This will make sounds and animation play better.  The code will be\
      \ much smaller.  However, I will need to build a custom Controller, as MonsterController\
      \ does not have a \"pacifist\" setting. ;)  Other than that, it should be much\
      \ more generalized and applicable to other people's projects.  Working...\n\n\
      '''SuperApe:''' Something like this, plus a new MonsterController to favor Wandering,\
      \ avoid Hunting, Attacking, StakeOut, etc.\n\n<uscript>\n//=============================================================================\n\
      // NaliCow.\n// Recreation of UT NaliCow.\n// by SuperApe -- Jan 2006\n//=============================================================================\n\
      class NaliCow extends Monster\n\tplaceable;\n\nvar()\tbool        bHasBaby;\
      \       // Spawns a smaller \"Baby\" at map start.\nvar()\tbool        bStayClose;\
      \     // Only select MoveTargets within WanderRadius.\nvar()\tint         WanderRadius;\
      \   // The radius from Home that MoveTargets will be selected.\n\nvar\t\tname\t\
      \tDeathAnim[4];  // Death animations.\nvar\t\tname\t\tInjureAnim[4];  // Injury\
      \ animations.\n\nvar\t\tname\t\tIdleAnim[6];  // Idle animations.\nvar\t\tsound\t\
      \tIdleSounds[6];  // Idle sounds.\n\nfunction PostBeginPlay()\n\n{\n\tSuper.PostBeginPlay();\n\
      \n\t// FIXME: Make attitude ignore, friendly or fear players only.\n}\n\n//\
      \ This stand-alone creature should avoid being placed in a roster.  Skip UnrealPawn's\
      \ PostNetBeginPlay().\nsimulated function PostBeginNetPlay()\n{\n\t// Do Pawn's\
      \ PostNetBeginPlay()\n\tlocal playercontroller P;\n\n\tif ( Level.bDropDetail\
      \ || (Level.DetailMode == DM_Low) )\n\t\tMaxLights = Min(4,MaxLights);\n\tif\
      \ ( Role == ROLE_Authority )\n\t\treturn;\n\tif ( (Controller != None) && (Controller.Pawn\
      \ == None) )\n\t{\n\t\tController.Pawn = self;\n\t\tif ( (PlayerController(Controller)\
      \ != None)\n\t\t\t&& (PlayerController(Controller).ViewTarget == Controller)\
      \ )\n\t\t\tPlayerController(Controller).SetViewTarget(self);\n\t}\n\n\tif (\
      \ Role == ROLE_AutonomousProxy )\n\t\tbUpdateEyeHeight = true;\n\n\tif ( (PlayerReplicationInfo\
      \ != None)\n\t\t&& (PlayerReplicationInfo.Owner == None) )\n\t{\n\t\tPlayerReplicationInfo.SetOwner(Controller);\n\
      \t\tif ( left(PlayerReplicationInfo.PlayerName, 5) ~= \"PRESS\" )\n\t\t{\n\t\
      \t\tP = Level.GetLocalPlayerController();\n\t\t\tif ( (P.PlayerReplicationInfo\
      \ != None) && !(left(PlayerReplicationInfo.PlayerName, 5) ~= \"PRESS\") )\n\t\
      \t\t\tbScriptPostRender = true;\n\t\t}\n\t}\n\tPlayWaiting();\n\n\t// Do xPawn's\
      \ PostNetBeginPlay()\n\tMultiJumpRemaining = MaxMultiJump;\n\tbCanDoubleJump\
      \ = CanMultiJump();\n}\n\nfunction Step()\n{\n\tPlaySound(sound'SkaarjPack_rc.WalkC',\
      \ SLOT_Interact);\n}\n\nsimulated function AnimEnd(int Channel)\n{\n\tlocal\
      \ \tname\tAnim, New;\n\tlocal \tfloat\tframe, rate;\n\tlocal\tint\t\tn;\n\t\
      local\tBioGlob\tB;\n\n    if( Level.TimeSeconds - LastPainSound < MinTimeBetweenPainSounds\
      \ )\n        return;  // Allow pain to play through.\n\n\tif ( Channel == 0\
      \ )\n\t{\n\t\tGetAnimParams(0, Anim,frame,rate);\n\t\tif ( Anim == 'Swish' ||\
      \ Anim == 'Shake' || Anim == 'Poop' )\n\t\t\tn = int( FRand() * 6 );\t\t\n\t\
      \tif ( ( Anim != 'Breath' || Anim != 'Chew' ) && Anim == IdleAnim[n] )\n\t\t\
      \tn = int( FRand() * 6 );\n\n\t\tif ( Anim == 'Poop' )\n\t\t{\n\t\t\tB = spawn(\
      \ class'BioGlob', self,, Location - ( vector( Rotation ) * 24 ) );\n\t\t\tB.Velocity\
      \ = vect(0,0,0);\n\t\t\tB.bDynamicLight = false;\n\t\t\tB.AmbientGlow = 0;\n\
      \t\t\tB.RestTime *= 2.0;\n\t\t\tB.BaseDamage = 0;\n\t\t\tB.Damage = 0;\n\t\t\
      \tB.Skins[0] = Texture'XEffectMat.goop.SlimeSkin';\n\t\t\tif ( FRand() > 0.5\
      \ )\n\t\t\t\tIdleSounds[3] = sound'SkaarjPack_rc.cMoo1c';\n\t\t\telse\n\t\t\t\
      \tIdleSounds[3] = sound'SkaarjPack_rc.cMoo2c';\n\t\t}\n\t\tif ( Anim == 'root'\
      \ )\n\t\t\tn = 2;\n\t\tif ( FRand() > 0.8 )\n\t\t\tn = 0;\n\n\t\tIdleWeaponAnim\
      \ = IdleAnim[n];\n\t\tPlayAnim( IdleAnim[n] );\n\t\tPlaySound( IdleSounds[n]\
      \ );\n\t}\n\tSuper.AnimEnd(Channel);\n}\n\nfunction PlayTakeHit(vector HitLocation,\
      \ int Damage, class<DamageType> DamageType)\n{\n\tlocal\tint\t\ti;\n\n    if(\
      \ Level.TimeSeconds - LastPainSound < MinTimeBetweenPainSounds )\n        return;\n\
      \n\ti = Clamp( ( Damage / 15 ), 0, 3 );\n\tPlayAnim( InjureAnim[i] );\n\n  \
      \  LastPainSound = Level.TimeSeconds;\n\tif ( i == 1 )\n\t\tPlaySound(sound'SkaarjPack_rc.cMoo1c',\
      \ SLOT_Pain, 2*TransientSoundVolume,, 200);\n\telse if ( i == 2 )\n\t\tPlaySound(sound'SkaarjPack_rc.injurC1c',\
      \ SLOT_Pain, 2*TransientSoundVolume,, 200);\n\telse\n\t\tPlaySound(sound'SkaarjPack_rc.injurC2c',\
      \ SLOT_Pain, 2*TransientSoundVolume,, 200);\n}\n\nsimulated function PlayDying(class<DamageType>\
      \ DamageType, vector HitLoc)\n{\n\tAmbientSound = None;\n    bCanTeleport =\
      \ false; \n    bReplicateMovement = false;\n    bTearOff = true;\n    bPlayedDeath\
      \ = true;\n\t\t\n\tHitDamageType = DamageType; // these are replicated to other\
      \ clients\n    TakeHitLocation = HitLoc;\n\tLifeSpan = RagdollLifeSpan;\n\n\
      \    GotoState('Dying');\n\t\t\n\tVelocity += TearOffMomentum;\n    BaseEyeHeight\
      \ = Default.BaseEyeHeight;\n    SetPhysics(PHYS_Falling);\n\n\tPlayAnim(DeathAnim[Rand(4)],1.2,0.05);\t\
      \t\n}\n\ndefaultproperties\n{\n     DeathAnim(0)=\"Dead\"\n     DeathAnim(1)=\"\
      Dead2\"\n     DeathAnim(2)=\"Dead3\"\n     DeathAnim(3)=\"Dead3\"\n     InjureAnim(0)=\"\
      TakeHit\"\n     InjureAnim(1)=\"TakeHit2\"\n     InjureAnim(2)=\"BigHit\"\n\
      \     InjureAnim(3)=\"BigHit\"\n     IdleAnim(0)=\"Breath\"\n     IdleAnim(1)=\"\
      root\"\n     IdleAnim(2)=\"Chew\"\n     IdleAnim(3)=\"Poop\"\n     IdleAnim(4)=\"\
      Shake\"\n     IdleAnim(5)=\"Swish\"\n     IdleSounds(0)=Sound'SkaarjPack_rc.Cow.ambCow'\n\
      \     IdleSounds(1)=Sound'SkaarjPack_rc.Pupae.munch1p'\n     IdleSounds(2)=Sound'SkaarjPack_rc.Pupae.munch1p'\n\
      \     IdleSounds(3)=Sound'SkaarjPack_rc.Cow.cMoo2c'\n     IdleSounds(4)=Sound'SkaarjPack_rc.Cow.shakeC'\n\
      \     IdleSounds(5)=Sound'SkaarjPack_rc.Cow.swishC'\n     StartingAnim=\"Breath\"\
      \n     bMeleeFighter=False\n     bCanDodge=False\n     HitSound(0)=Sound'SkaarjPack_rc.Cow.injurC1c'\n\
      \     HitSound(1)=Sound'SkaarjPack_rc.Cow.injurC2c'\n     HitSound(2)=Sound'SkaarjPack_rc.Cow.injurC1c'\n\
      \     HitSound(3)=Sound'SkaarjPack_rc.Cow.injurC2c'\n     DeathSound(0)=Sound'SkaarjPack_rc.Cow.cMoo2c'\n\
      \     DeathSound(1)=Sound'SkaarjPack_rc.Cow.DeathC1c'\n     DeathSound(2)=Sound'SkaarjPack_rc.Cow.DeathC2c'\n\
      \     DeathSound(3)=Sound'SkaarjPack_rc.Cow.DeathC2c'\n     bCanDodgeDoubleJump=False\n\
      \     WallDodgeAnims(0)=\"Landed\"\n     WallDodgeAnims(1)=\"Landed\"\n    \
      \ WallDodgeAnims(2)=\"Landed\"\n     WallDodgeAnims(3)=\"Landed\"\n     IdleHeavyAnim=\"\
      Breath\"\n     IdleRifleAnim=\"Breath\"\n     bCanJump=False\n     bCanClimbLadders=False\n\
      \     bCanStrafe=False\n     bCanDoubleJump=False\n     bCanUse=False\n    \
      \ MeleeRange=80.000000\n     GroundSpeed=100.000000\n     WaterSpeed=75.000000\n\
      \     JumpZ=75.000000\n     ControllerClass=Class'MonsterController'\n     MovementAnims(0)=\"\
      Run\"\n     MovementAnims(1)=\"Run\"\n     MovementAnims(2)=\"Run\"\n     MovementAnims(3)=\"\
      Run\"\n     TurnLeftAnim=\"Walk\"\n     TurnRightAnim=\"Walk\"\n     SwimAnims(0)=\"\
      Run\"\n     SwimAnims(1)=\"Run\"\n     SwimAnims(2)=\"Run\"\n     SwimAnims(3)=\"\
      Run\"\n     WalkAnims(0)=\"Walk\"\n     WalkAnims(1)=\"Walk\"\n     WalkAnims(2)=\"\
      Walk\"\n     WalkAnims(3)=\"Walk\"\n     AirAnims(0)=\"Landed\"\n     AirAnims(1)=\"\
      Landed\"\n     AirAnims(2)=\"Landed\"\n     AirAnims(3)=\"Landed\"\n     TakeoffAnims(0)=\"\
      Landed\"\n     TakeoffAnims(1)=\"Landed\"\n     TakeoffAnims(2)=\"Landed\"\n\
      \     TakeoffAnims(3)=\"Landed\"\n     LandAnims(0)=\"Landed\"\n     LandAnims(1)=\"\
      Landed\"\n     LandAnims(2)=\"Landed\"\n     LandAnims(3)=\"Landed\"\n     DoubleJumpAnims(0)=\"\
      Landed\"\n     DoubleJumpAnims(1)=\"Landed\"\n     DoubleJumpAnims(2)=\"Landed\"\
      \n     DoubleJumpAnims(3)=\"Landed\"\n     DodgeAnims(0)=\"Landed\"\n     DodgeAnims(1)=\"\
      Landed\"\n     DodgeAnims(2)=\"Landed\"\n     DodgeAnims(3)=\"Landed\"\n   \
      \  AirStillAnim=\"Landed\"\n     TakeoffStillAnim=\"Landed\"\n     IdleCrouchAnim=\"\
      Breath\"\n     IdleSwimAnim=\"Walk\"\n     IdleWeaponAnim=\"Breath\"\n     IdleRestAnim=\"\
      Breath\"\n     Mesh=VertMesh'SkaarjPack_rc.NaliCow'\n     PrePivot=(Z=0.000000)\n\
      \     CollisionRadius=34.000000\n     CollisionHeight=34.000000\n}\n</uscript>\n\
      \n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 1826
name: "Legacy:Basic AI Scripting Tutorial"
revision:
  revid: 1826
  parentid: 1828
  user: "SuperApe"
  timestamp: 1139023246.000000000
  comment: "*"
timestamp: 1668764319.521639000
