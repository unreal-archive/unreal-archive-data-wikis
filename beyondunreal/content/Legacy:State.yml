---
parse:
  title: "Legacy:State"
  text:
    text: "<p>This topic will probably get linked from both mapping pages and scripting\
      \ pages...</p>\n<p>For mapping see <a href=\"/Legacy:InitialState\" title=\"\
      Legacy:InitialState\">InitialState</a>, perhaps.</p>\n<p></p>\n<div id=\"toc\"\
      \ class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li\
      \ class=\"toclevel-1 tocsection-1\"><a href=\"#Overview\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Declaring_States\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Declaring States</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-3\"><a href=\"#State_modifiers\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">State modifiers</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#Configurable_states\"><span class=\"tocnumber\"\
      >2.2</span> <span class=\"toctext\">Configurable states</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-5\"><a href=\"#Extending\"><span class=\"tocnumber\"\
      >2.3</span> <span class=\"toctext\">Extending</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-6\"><a href=\"#Ignores_statement\"><span class=\"tocnumber\"\
      >2.4</span> <span class=\"toctext\">Ignores statement</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-7\"><a href=\"#Functions\"><span class=\"tocnumber\">2.5</span>\
      \ <span class=\"toctext\">Functions</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#State_code\"><span class=\"tocnumber\">2.6</span>\
      \ <span class=\"toctext\">State code</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-9\"><a href=\"#State_Flow\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">State Flow</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-10\"><a href=\"#Example\"><span class=\"tocnumber\">3.1</span>\
      \ <span class=\"toctext\">Example</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"\
      ><a href=\"#Interrogation\"><span class=\"tocnumber\">3.2</span> <span class=\"\
      toctext\">Interrogation</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"\
      ><a href=\"#Example_2\"><span class=\"tocnumber\">3.3</span> <span class=\"\
      toctext\">Example</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-13\"\
      ><a href=\"#State_Scoping\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">State Scoping</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-14\"\
      ><a href=\"#Example_3\"><span class=\"tocnumber\">4.1</span> <span class=\"\
      toctext\">Example</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-15\"\
      ><a href=\"#Related_topics\"><span class=\"tocnumber\">5</span> <span class=\"\
      toctext\">Related topics</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-16\"\
      ><a href=\"#Tutorials\"><span class=\"tocnumber\">5.1</span> <span class=\"\
      toctext\">Tutorials</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-17\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">6</span> <span class=\"toctext\"\
      >Comments</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Overview\">Overview</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=1\" title=\"\
      Edit section: Overview\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>For a good overview of the concept of states, see the opening of <a href=\"\
      /Legacy:UnrealScript_Language_Reference/States\" title=\"Legacy:UnrealScript\
      \ Language Reference/States\">UnrealScript Language Reference/States</a>.</p>\n\
      <p>There are two fairly different strategies for state programming. On the one\
      \ hand are actors such as <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn\
      \ (UT)\">Pawn (UT)</a> that change their state in-game according to what they\
      \ are doing. Other actors such as <a href=\"/Legacy:Trigger\" title=\"Legacy:Trigger\"\
      >Trigger</a> and <a href=\"/Legacy:Mover\" title=\"Legacy:Mover\">Mover</a>\
      \ and <a href=\"/Legacy:SpecialEvent\" title=\"Legacy:SpecialEvent\">SpecialEvent</a>\
      \ use segregated states to essentially create several different types of behaviour\
      \ in one class. The Mover class, for example, only changes its own state to\
      \ go dormant if Mover.bTriggerOnceOnly is set.</p>\n<p>The term <b>State code</b>\
      \ means code within states, in labels outside of functions.</p>\n<p>Note that\
      \ while you <i>can</i> declare states in classes not descendent from <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> or <a href=\"/Legacy:Console\"\
      \ title=\"Legacy:Console\">Console</a> (in <a href=\"/Legacy:UT\" title=\"Legacy:UT\"\
      \ class=\"mw-redirect\">UT</a>) or <a href=\"/Legacy:Interaction\" title=\"\
      Legacy:Interaction\">Interaction</a> (in <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>), they simply won't work there.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Declaring_States\">Declaring States</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:State?section=2\" title=\"Edit section: Declaring States\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>A state\
      \ is declared as a block of code in the class. States can contain the <i>Ignores</i>\
      \ statement, functions and/or state code, but they don't have to.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">&lt;</span><span\
      \ class=\"kw1\">optional</span> <span class=\"kw1\">state</span> modifiers<span\
      \ class=\"sy0\">&gt;</span> <span class=\"kw1\">State</span><span class=\"br0\"\
      >[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">&lt;</span><span class=\"kw1\">state</span>\
      \ name<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"\
      kw1\">extends</span> <span class=\"sy0\">&lt;</span>parent <span class=\"kw1\"\
      >state</span> name<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span>\n\
      <span class=\"br0\">{</span>\n<span class=\"kw1\">Ignores</span> <span class=\"\
      sy0\">&lt;</span><span class=\"kw1\">function</span> name<span class=\"sy0\"\
      >&gt;</span>, <span class=\"sy0\">&lt;</span><span class=\"kw1\">function</span>\
      \ name<span class=\"sy0\">&gt;</span>, ... ;\n \n    <span class=\"sy0\">&lt;</span><span\
      \ class=\"kw1\">state</span> functions<span class=\"sy0\">&gt;</span>\n \n<span\
      \ class=\"kw2\">Begin</span>:\n    <span class=\"sy0\">&lt;</span><span class=\"\
      kw1\">state</span> code<span class=\"sy0\">&gt;</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"State_modifiers\"\
      >State modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:State?section=3\" title=\"Edit section: State\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>Note:</b> These modifiers only have an effect when used in an actor subclass.\
      \ They don't have any effect in other classes states can be used in.</p>\n<dl>\n\
      <dt>auto&#160;</dt>\n<dd>The state should be the initial state of the object.\
      \ This can be overridden by the InitialState variable in Actors.</dd>\n<dt>simulated&#160;</dt>\n\
      <dd>State code can be simulated like functions. See <a href=\"/Legacy:Simulated_Function\"\
      \ title=\"Legacy:Simulated Function\">Simulated Function</a>.</dd>\n</dl>\n\
      <h3><span class=\"mw-headline\" id=\"Configurable_states\">Configurable states</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:State?section=4\" title=\"Edit section: Configurable states\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Just\
      \ like the var keyword, the state keyword can be followed by a pair of parentheses.\
      \ This makes the state available in the Object -&gt; InitialState property in\
      \ UnrealEd for a placed instance of the actor. Actors like <a href=\"/Legacy:Trigger\"\
      \ title=\"Legacy:Trigger\">Trigger</a> and <a href=\"/Legacy:Mover\" title=\"\
      Legacy:Mover\">Mover</a> use this technique to expose several different behaviours\
      \ to mappers with just one control. The value specified for InitialState will\
      \ of course override any states declared with the Auto keyword.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">state</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> MyState <span class=\"br0\">{</span>\n  <span class=\"\
      co1\">// rest of state block</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Since InitialState is simply a name variable, you can use the property\
      \ yourself. For example, you might want to reset the actor:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">  <span class=\"kw3\">GoToState</span><span class=\"br0\"\
      >(</span>InitialState<span class=\"br0\">)</span>;</pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"Extending\">Extending</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=5\"\
      \ title=\"Edit section: Extending\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The <i>extends</i> &lt;parent state name&gt; part\
      \ is optional for new states and may not be used for states which override a\
      \ state with the same name in the parent class.</p>\n<p>See <a href=\"/Legacy:Extending_States\"\
      \ title=\"Legacy:Extending States\">Extending States</a>. There's sort of an\
      \ example of this on <a href=\"/Legacy:Scripting_Movers\" title=\"Legacy:Scripting\
      \ Movers\">Scripting movers</a>.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Ignores_statement\">Ignores statement</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=6\"\
      \ title=\"Edit section: Ignores statement\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The ignores statement effectively does the same as\
      \ overriding functions with empty functions, just more efficient. This is how\
      \ it should work, but unfortunately doesn't. If you absolutely do not want a\
      \ function to execute while an Actor is in a particular state, you must override\
      \ it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> DontExecuteMe<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">\"ignore keyword isn't reliable\"\
      </span> <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">state</span> MyState\n<span class=\"br0\">{</span>\n    <span\
      \ class=\"kw1\">function</span> DontExecuteMe<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Ignore effectively does a Disable() on the specified function, which is meaningless\
      \ to anything but native events, and even then most events don't respect the\
      \ probing status properly. When all else fails, just override the function and\
      \ then write an email to Tim and tell him to fix his code.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Functions\">Functions</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=7\"\
      \ title=\"Edit section: Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Functions are defined within a state just as they\
      \ would be elsewhere in the class. Functions of the same name can exist outside\
      \ state blocks, and in each state block.</p>\n<p>Which version of a function\
      \ is called is determined by special state scoping rules – see below. This can\
      \ be overriden by the Super and Global <a href=\"/Legacy:Special_UnrealScript_Keywords\"\
      \ title=\"Legacy:Special UnrealScript Keywords\">Special UnrealScript Keywords</a>.</p>\n\
      <p>Functions declared only within a state are local to that state. You cannot\
      \ call them from outside the state since they do not exist there. (A possible\
      \ alternative behavior of the language could be to treat functions exclusively\
      \ declared in a certain state as empty functions in any other state; but that's\
      \ not how it works.)</p>\n<p>Note that you can cause a nasty crash using functions\
      \ that exist only in states if you are not careful. The compiler will allow\
      \ you do execute state-specific functions after a call to GotoState, which might\
      \ suggest that the state change is delayed. This is not true. For instance:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">state</span> A\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">function</span> C<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n \n  <span class=\"co1\">// This\
      \ crashes, because there is no C() function in state B.</span>\n  <span class=\"\
      co1\">// The compiler, however, allows it, even though it is not</span>\n  <span\
      \ class=\"co1\">// technically permissable.</span>\n  <span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">Tick</span><span class=\"br0\">(</span> <span class=\"\
      kw5\">float</span> Delta <span class=\"br0\">)</span>\n  <span class=\"br0\"\
      >{</span>\n    <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span>\
      \ <span class=\"st0\">'B'</span> <span class=\"br0\">)</span>;\n    C<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> B\n<span class=\"\
      br0\">{</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Calls\
      \ the E state's F() function, not our own.</span>\n<span class=\"kw1\">state</span>\
      \ D\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">function</span> F<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n  <span class=\"kw1\"\
      >function</span> <span class=\"kw4\">Tick</span><span class=\"br0\">(</span>\
      \ <span class=\"kw5\">float</span> Delta <span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>;\n\
      \    F<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span>\
      \ E\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">function</span> F<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"State_code\">State code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:State?section=8\" title=\"Edit section: State code\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>State code is code\
      \ that is within the state block, but outside of any functions. It is usually\
      \ divided up into sections with labels.Adding \":\" after the name declares\
      \ it as a lable. When the actor is put into a particular state, a destination\
      \ label can be specified (see State Flow below), or the code at the special\
      \ <b>Begin:</b> label is executed.</p>\n<p>Note that labels don't stop execution\
      \ of state code. Unless you explicitely put a <tt>Stop</tt> command at the end\
      \ of the code following the \"Open\" label in the example below, the code following\
      \ the \"Close\" will also be executed:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">Open:\n <span class=\"co1\">// some code</span>\nClose:\n <span class=\"\
      co1\">// some more code</span></pre></div>\n</div>\n<p>State code is only inherited\
      \ as a whole. If a subclass puts at least one line of state code in its own\
      \ version of that state, the parent class' state code will not be used. This\
      \ one line of code could be just a \"Begin:\" label, which basically removes\
      \ all executable state code.</p>\n<h2><span class=\"mw-headline\" id=\"State_Flow\"\
      >State Flow</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:State?section=9\" title=\"Edit section: State\
      \ Flow\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Movement between states are controlled by the following functions:</p>\n\
      <dl>\n<dt>GotoState (<i>state name</i>, <i>optional label name</i>)&#160;</dt>\n\
      <dd>This call not only places the object into the state requested but starts\
      \ code execution at the label specified. If the second parameter is omitted,\
      \ then code at the <b>Begin:</b> label is executed, if it exists. The BeginState()\
      \ function is called in all instances, from within the GotoState function, ie\
      \ before the state code is executed.</dd>\n<dt>Goto (<i>label name</i>)&#160;</dt>\n\
      <dd>This call simply continues code execution at the label specified within\
      \ the current state.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Example\"\
      >Example</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:State?section=10\" title=\"Edit section: Example\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>An\
      \ example of how state flow can have unexpected results</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> Foo<span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span> bTest <span class=\"br0\"\
      >)</span>\n    <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'FirstState'</span><span class=\"br0\">)</span>;\n  <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'SecondState'</span><span\
      \ class=\"br0\">)</span>; \n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>This actor will always end up in SecondState, because the second GotoState()\
      \ is always executed. The BeginState() and EndState() of state FirstState <i>will</i>\
      \ be called.</p>\n<h3><span class=\"mw-headline\" id=\"Interrogation\">Interrogation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:State?section=11\" title=\"Edit section: Interrogation\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The\
      \ following functions allow the interrogation of objects to determine things\
      \ about their state:</p>\n<dl>\n<dt>GetStateName ( )&#160;</dt>\n<dd>This function\
      \ returns the name of the current state the object is in.</dd>\n<dt>IsInState\
      \ (<i>state name</i>)&#160;</dt>\n<dd>This function returns <i>true</i> if the\
      \ object is in the state specified, and false if not.<br />\nNote however, that\
      \ this will also return true if the object is in a state that is extended from\
      \ \"state name\". (Bug or behaviour?) If this is going to cause a problem, use\
      \ <tt>GetStateName() == 'desiredStateName'</tt> instead.</dd>\n</dl>\n<p><b>SuperApe:</b>\
      \ Is there a way to find out if a particular state exists? Or, if I try to send\
      \ an object to a state that doesn't exist, how can I recover?</p>\n<p><b>SuperApe:</b>\
      \ I seem to remember reading somewhere that there is an Event called when an\
      \ object has recovered from a bad state (or was it bad state code?). Anyway,\
      \ if an object is sent to a non-existant state, it will revert to a state of\
      \ it's class Name. One method to recover this is:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">// Some object</span>\n<span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'DoesntExist'</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">IsInState</span><span class=\"br0\">(</span> <span\
      \ class=\"kw5\">Name</span> <span class=\"br0\">)</span> <span class=\"br0\"\
      >)</span>\n     <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'DoesExist'</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Example_2\">Example</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:State?section=12\" title=\"Edit section: Example\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Some extremely contrived\
      \ example code:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"> <span class=\"\
      kw1\">function</span> DrinkBeer<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"co1\">//but don't drive afterwards!!!</span>\n <span\
      \ class=\"br0\">{</span>\n     <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw3\">IsInState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Quenched'</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n     <span class=\"br0\">{</span>\n         <span class=\"co1\"\
      >// Second parameter not passed so \"Begin\" label is used</span>\n        \
      \ <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'DryAsABone'</span><span class=\"br0\">)</span>;\n     <span class=\"\
      br0\">}</span>\n     <span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> <span class=\"kw3\">GetStateName</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span>\
      \ <span class=\"st0\">'Drinking'</span> <span class=\"br0\">)</span>\n     <span\
      \ class=\"br0\">{</span>\n         <span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Quenched'</span><span class=\"\
      br0\">)</span>;\n     <span class=\"br0\">}</span>\n     <span class=\"kw2\"\
      >return</span>;\n <span class=\"br0\">}</span>\n <span class=\"kw1\">state</span>\
      \ DryAsABone\n <span class=\"br0\">{</span>\n <span class=\"kw2\">Begin</span>:\n\
      \     PurchaseBeer<span class=\"br0\">(</span><span class=\"st0\">'Guinness'</span><span\
      \ class=\"br0\">)</span>;\n     <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Drinking'</span>,<span class=\"st0\">'FullPint'</span><span\
      \ class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n <span class=\"kw1\"\
      >state</span> Drinking\n <span class=\"br0\">{</span>\n FullPint:\n     DrinkBeer<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n <span class=\"br0\"\
      >}</span>\n <span class=\"kw1\">state</span> Quenched\n <span class=\"br0\"\
      >{</span>\n <span class=\"kw2\">Begin</span>:\n     <span class=\"co1\">// Code</span>\n\
      \ <span class=\"br0\">}</span></pre></div>\n</div>\n<p>As a general rule of\
      \ thumb you should place all of your labels together at the end of your state\
      \ block after the function declarations.</p>\n<p>Note that instead of using\
      \ IsInState('Quenched') to branch within the function DrinkBeer(), we could\
      \ have made a versions of the function within each state.</p>\n<h2><span class=\"\
      mw-headline\" id=\"State_Scoping\">State Scoping</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=13\"\
      \ title=\"Edit section: State Scoping\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The concept of states adds an extra complication to\
      \ the question: <i>which version of a function does an actor call?</i> Here's\
      \ the answer:</p>\n<blockquote class=\"legacyquote\">\n<p>from <a href=\"/Legacy:UnrealScript_Language_Reference/States\"\
      \ title=\"Legacy:UnrealScript Language Reference/States\">UnrealScript Language\
      \ Reference/States</a></p>\n<p>The scoping rules, which resolves these complex\
      \ situations, are:</p>\n<ul>\n<li>If the object is in a state, and an implementation\
      \ of the function exists somewhere in that state (either in the actor’s class\
      \ or in some parent class), the most-derived state version of the function is\
      \ called.</li>\n<li>Otherwise, the most-derived non-state version of the function\
      \ is called.</li>\n</ul>\n<p><br /></p>\n</blockquote>\n<p>Basically, if the\
      \ actor is in state Foo, when it looks for a function, it searches within code\
      \ declared as within that state as much as possible.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Example_3\">Example</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=14\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Suppose we have the following functions defined (using\
      \ non-standard notation to indicate states):</p>\n<ul>\n<li>Monster.Trigger</li>\n\
      <li>Monster.Idle.Trigger</li>\n<li>BugEyedMonster.Trigger (a child class of\
      \ Monster)</li>\n</ul>\n<p>Now BugEyedMonster is in state Idle, and there is\
      \ a call of Trigger. What should it do?</p>\n<ol>\n<li>there is no BugEyedMonster.Idle.Trigger</li>\n\
      <li>look higher up the class tree...</li>\n<li>there is a Monster.Idle.Trigger.\
      \ Execute that.</li>\n</ol>\n<p>Now suppose we have:</p>\n<ul>\n<li>Monster.UnTrigger</li>\n\
      <li>BugEyedMonster.UnTrigger (a child class of Monster)</li>\n</ul>\n<ol>\n\
      <li>there is no BugEyedMonster.Idle.UnTrigger</li>\n<li>look higher up the class\
      \ tree...</li>\n<li>there is no Monster.Idle.UnTrigger</li>\n<li>Monster is\
      \ the \"eldest\" class that defines a state Idle. So we have to give up looking\
      \ in that state. Switch to looking for non-state version, back at the current\
      \ class, BugEyedMonster</li>\n<li>there is a BugEyedMonster.UnTrigger. Execute\
      \ that.</li>\n</ol>\n<h2><span class=\"mw-headline\" id=\"Related_topics\">Related\
      \ topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:State?section=15\" title=\"Edit section: Related\
      \ topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Flow_Syntax\" title=\"Legacy:Flow Syntax\">Flow\
      \ Syntax</a></li>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference/States\"\
      \ title=\"Legacy:UnrealScript Language Reference/States\">UnrealScript Language\
      \ Reference/States</a></li>\n<li><a href=\"/Legacy:Latent_Function\" title=\"\
      Legacy:Latent Function\">Latent function</a></li>\n</ul>\n<h3><span class=\"\
      mw-headline\" id=\"Tutorials\">Tutorials</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=16\"\
      \ title=\"Edit section: Tutorials\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li><a href=\"/Legacy:TriggerJumpPad\" title=\"\
      Legacy:TriggerJumpPad\">TriggerJumpPad</a></li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:State?section=17\" title=\"\
      Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.177 seconds\nReal time usage:\
      \ 0.589 seconds\nPreprocessor visited node count: 160/1000000\nPreprocessor\
      \ generated node count: 307/1000000\nPost‐expand include size: 1006/2097152\
      \ bytes\nTemplate argument size: 455/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%   19.675      1 - -total\n100.00%\
      \   19.675      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:2749-0!*!0!!en!*!* and timestamp 20221117195531 and\
      \ revision id 7369\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Trigger"
  - ns: 100
    exists: true
    name: "Legacy:TriggerJumpPad"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Mover"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:SpecialEvent"
  - ns: 100
    exists: true
    name: "Legacy:Latent Function"
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/States"
  - ns: 100
    exists: true
    name: "Legacy:InitialState"
  - ns: 100
    exists: true
    name: "Legacy:Extending States"
  - ns: 100
    exists: true
    name: "Legacy:Scripting Movers"
  - ns: 100
    exists: true
    name: "Legacy:Flow Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Console"
  - ns: 100
    exists: true
    name: "Legacy:Special UnrealScript Keywords"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "1"
    index: "1"
    fromtitle: "Legacy:State"
    byteoffset: 149
    anchor: "Overview"
  - toclevel: 1
    level: "2"
    line: "Declaring States"
    number: "2"
    index: "2"
    fromtitle: "Legacy:State"
    byteoffset: 1168
    anchor: "Declaring_States"
  - toclevel: 2
    level: "3"
    line: "State modifiers"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:State"
    byteoffset: 1552
    anchor: "State_modifiers"
  - toclevel: 2
    level: "3"
    line: "Configurable states"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:State"
    byteoffset: 1962
    anchor: "Configurable_states"
  - toclevel: 2
    level: "3"
    line: "Extending"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:State"
    byteoffset: 2704
    anchor: "Extending"
  - toclevel: 2
    level: "3"
    line: "Ignores statement"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:State"
    byteoffset: 3020
    anchor: "Ignores_statement"
  - toclevel: 2
    level: "3"
    line: "Functions"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:State"
    byteoffset: 3771
    anchor: "Functions"
  - toclevel: 2
    level: "3"
    line: "State code"
    number: "2.6"
    index: "8"
    fromtitle: "Legacy:State"
    byteoffset: 5253
    anchor: "State_code"
  - toclevel: 1
    level: "2"
    line: "State Flow"
    number: "3"
    index: "9"
    fromtitle: "Legacy:State"
    byteoffset: 6201
    anchor: "State_Flow"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "3.1"
    index: "10"
    fromtitle: "Legacy:State"
    byteoffset: 6798
    anchor: "Example"
  - toclevel: 2
    level: "3"
    line: "Interrogation"
    number: "3.2"
    index: "11"
    fromtitle: "Legacy:State"
    byteoffset: 7154
    anchor: "Interrogation"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "3.3"
    index: "12"
    fromtitle: "Legacy:State"
    byteoffset: 8280
    anchor: "Example_2"
  - toclevel: 1
    level: "2"
    line: "State Scoping"
    number: "4"
    index: "13"
    fromtitle: "Legacy:State"
    byteoffset: 9161
    anchor: "State_Scoping"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "4.1"
    index: "14"
    fromtitle: "Legacy:State"
    byteoffset: 9933
    anchor: "Example_3"
  - toclevel: 1
    level: "2"
    line: "Related topics"
    number: "5"
    index: "15"
    fromtitle: "Legacy:State"
    byteoffset: 10811
    anchor: "Related_topics"
  - toclevel: 2
    level: "3"
    line: "Tutorials"
    number: "5.1"
    index: "16"
    fromtitle: "Legacy:State"
    byteoffset: 11005
    anchor: "Tutorials"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "6"
    index: "17"
    fromtitle: "Legacy:State"
    byteoffset: 11066
    anchor: "Comments"
  displaytitle: "Legacy:State"
  iwlinks: []
  wikitext:
    text: "This topic will probably get linked from both mapping pages and scripting\
      \ pages...\n\nFor mapping see [[Legacy:InitialState|InitialState]], perhaps.\
      \ \n\n==Overview ==\n\nFor a good overview of the concept of states, see the\
      \ opening of [[Legacy:UnrealScript Language Reference/States|UnrealScript Language\
      \ Reference/States]].\n\nThere are two fairly different strategies for state\
      \ programming. On the one hand are actors such as [[Legacy:Pawn (UT)|Pawn (UT)]]\
      \ that change their state in-game according to what they are doing. Other actors\
      \ such as [[Legacy:Trigger|Trigger]] and [[Legacy:Mover|Mover]] and [[Legacy:SpecialEvent|SpecialEvent]]\
      \ use segregated states to essentially create several different types of behaviour\
      \ in one class. The Mover class, for example, only changes its own state to\
      \ go dormant if Mover.bTriggerOnceOnly is set.\n\nThe term '''State code'''\
      \ means code within states, in labels outside of functions.\n\nNote that while\
      \ you ''can'' declare states in classes not descendent from [[Legacy:Actor|Actor]]\
      \ or [[Legacy:Console|Console]] (in [[Legacy:UT|UT]]) or [[Legacy:Interaction|Interaction]]\
      \ (in [[Legacy:UT2003|UT2003]]), they simply won't work there.\n\n==Declaring\
      \ States==\n\nA state is declared as a block of code in the class. States can\
      \ contain the ''Ignores'' statement, functions and/or state code, but they don't\
      \ have to. \n\n<uscript>\n<optional state modifiers> State[()] <state name>\
      \ [extends <parent state name>]\n{\nIgnores <function name>, <function name>,\
      \ ... ;\n     \n    <state functions>\n \nBegin:\n    <state code>\n}\n</uscript>\n\
      \n===State modifiers ===\n\n'''Note:''' These modifiers only have an effect\
      \ when used in an actor subclass. They don't have any effect in other classes\
      \ states can be used in.\n\n; auto : The state should be the initial state of\
      \ the object. This can be overridden by the InitialState variable in Actors.\n\
      ; simulated : State code can be simulated like functions. See [[Legacy:Simulated\
      \ Function|Simulated Function]].\n\n===Configurable states===\n\nJust like the\
      \ var keyword, the state keyword can be followed by a pair of parentheses. This\
      \ makes the state available in the Object -> InitialState property in UnrealEd\
      \ for a placed instance of the actor. Actors like [[Legacy:Trigger|Trigger]]\
      \ and [[Legacy:Mover|Mover]] use this technique to expose several different\
      \ behaviours to mappers with just one control. The value specified for InitialState\
      \ will of course override any states declared with the Auto keyword. \n\n<uscript>\n\
      state() MyState {\n  // rest of state block\n}\n</uscript>\n\nSince InitialState\
      \ is simply a name variable, you can use the property yourself. For example,\
      \ you might want to reset the actor:\n\n<uscript>\n  GoToState(InitialState);\n\
      </uscript>\n\n===Extending===\n\nThe ''extends'' <parent state name> part is\
      \ optional for new states and may not be used for states which override a state\
      \ with the same name in the parent class. \n\nSee [[Legacy:Extending States|Extending\
      \ States]]. There's sort of an example of this on [[Legacy:Scripting Movers|Scripting\
      \ movers]].\n\n===Ignores statement===\n\nThe ignores statement effectively\
      \ does the same as overriding functions with empty functions, just more efficient.\
      \ This is how it should work, but unfortunately doesn't.  If you absolutely\
      \ do not want a function to execute while an Actor is in a particular state,\
      \ you must override it:\n\n<uscript>\nfunction DontExecuteMe()\n{\n    log(\
      \ \"ignore keyword isn't reliable\" );\n}\n\nstate MyState\n{\n    function\
      \ DontExecuteMe();\n}\n</uscript>\n\nIgnore effectively does a Disable() on\
      \ the specified function, which is meaningless to anything but native events,\
      \ and even then most events don't respect the probing status properly.  When\
      \ all else fails, just override the function and then write an email to Tim\
      \ and tell him to fix his code.\n\n===Functions ===\n\nFunctions are defined\
      \ within a state just as they would be elsewhere in the class. Functions of\
      \ the same name can exist outside state blocks, and in each state block. \n\n\
      Which version of a function is called is determined by special state scoping\
      \ rules &ndash; see below. This can be overriden by the Super and Global [[Legacy:Special\
      \ UnrealScript Keywords|Special UnrealScript Keywords]].\n\nFunctions declared\
      \ only within a state are local to that state. You cannot call them from outside\
      \ the state since they do not exist there. (A possible alternative behavior\
      \ of the language could be to treat functions exclusively declared in a certain\
      \ state as empty functions in any other state; but that's not how it works.)\n\
      \nNote that you can cause a nasty crash using functions that exist only in states\
      \ if you are not careful. The compiler will allow you do execute state-specific\
      \ functions after a call to GotoState, which might suggest that the state change\
      \ is delayed. This is not true. For instance:\n\n<uscript>\nstate A\n{\n  function\
      \ C();\n\n  // This crashes, because there is no C() function in state B.\n\
      \  // The compiler, however, allows it, even though it is not\n  // technically\
      \ permissable.\n  function Tick( float Delta )\n  {\n    GotoState( 'B' );\n\
      \    C();\n  }\n}\n\nstate B\n{\n}\n\n// Calls the E state's F() function, not\
      \ our own.\nstate D\n{\n  function F();\n\n  function Tick( float Delta )\n\
      \  {\n    GotoState('E');\n    F();\n  }\n}\n\nstate E\n{\n  function F();\n\
      }\n</uscript>\n\n===State code===\n\nState code is code that is within the state\
      \ block, but outside of any functions. It is usually divided up into sections\
      \ with labels.Adding \":\" after the name declares it as a lable. When the actor\
      \ is put into a particular state, a destination label can be specified  (see\
      \ State Flow below), or the code at the special '''Begin:''' label is executed.\n\
      \nNote that labels don't stop execution of state code.  Unless you explicitely\
      \ put a <tt>Stop</tt> command at the end of the code following the \"Open\"\
      \ label in the example below, the code following the \"Close\" will also be\
      \ executed:\n\n<uscript>\nOpen:\n // some code\nClose:\n // some more code\n\
      </uscript>\n\nState code is only inherited as a whole. If a subclass puts at\
      \ least one line of state code in its own version of that state, the parent\
      \ class' state code will not be used. This one line of code could be just a\
      \ \"Begin:\" label, which basically removes all executable state code.\n\n==State\
      \ Flow ==\n\nMovement between states are controlled by the following functions:\n\
      ; GotoState (''state name'', ''optional label name'') : This call not only places\
      \ the object into the state requested but starts code execution at the label\
      \ specified. If the second parameter is omitted, then code at the '''Begin:'''\
      \ label is executed, if it exists. The BeginState() function is called in all\
      \ instances, from within the GotoState function, ie before the state code is\
      \ executed.\n; Goto (''label name'') : This call simply continues code execution\
      \ at the label specified within the current state.\n\n===Example===\n\nAn example\
      \ of how state flow can have unexpected results\n\n<uscript>\nfunction Foo()\
      \ {\n  if( bTest )\n    GotoState('FirstState');\n  GotoState('SecondState');\
      \ \n}\n</uscript>\n\nThis actor will always end up in SecondState, because the\
      \ second GotoState() is always executed. The BeginState() and EndState() of\
      \ state FirstState ''will'' be called.\n\n===Interrogation ===\n\nThe following\
      \ functions allow the interrogation of objects to determine things about their\
      \ state:\n; GetStateName ( ) : This function returns the name of the current\
      \ state the object is in.\n; IsInState (''state name'') : This function returns\
      \ ''true'' if the object is in the state specified, and false if not.<br />Note\
      \ however, that this will also return true if the object is in a state that\
      \ is extended from \"state name\". (Bug or behaviour?) If this is going to cause\
      \ a problem, use <tt>GetStateName() == 'desiredStateName'</tt> instead.\n\n\
      '''SuperApe:''' Is there a way to find out if a particular state exists?  Or,\
      \ if I try to send an object to a state that doesn't exist, how can I recover?\n\
      \n'''SuperApe:''' I seem to remember reading somewhere that there is an Event\
      \ called when an object has recovered from a bad state (or was it bad state\
      \ code?).  Anyway, if an object is sent to a non-existant state, it will revert\
      \ to a state of it's class Name.  One method to recover this is:<uscript>\n\
      // Some object\nGotoState('DoesntExist');\nif ( IsInState( Name ) )\n     GotoState('DoesExist');</uscript>\n\
      \n===Example===\n\nSome extremely contrived example code:\n\n<uscript>\n function\
      \ DrinkBeer() //but don't drive afterwards!!!\n {\n     if ( IsInState('Quenched')\
      \ )\n     {\n         // Second parameter not passed so \"Begin\" label is used\n\
      \         GotoState('DryAsABone');\n     }\n     else if ( GetStateName() ==\
      \ 'Drinking' )\n     {\n         GotoState('Quenched');\n     }\n     return;\n\
      \ }\n state DryAsABone\n {\n Begin:\n     PurchaseBeer('Guinness');\n     GotoState('Drinking','FullPint');\n\
      \ }\n state Drinking\n {\n FullPint:\n     DrinkBeer();\n }\n state Quenched\n\
      \ {\n Begin:\n     // Code\n }\n</uscript>\n\nAs a general rule of thumb you\
      \ should place all of your labels together at the end of your state block after\
      \ the function declarations.\n\nNote that instead of using IsInState('Quenched')\
      \ to branch within the function DrinkBeer(), we could have made a versions of\
      \ the function within each state. \n\n==State Scoping==\n\nThe concept of states\
      \ adds an extra complication to the question: ''which version of a function\
      \ does an actor call?'' Here's the answer:\n\n{{innerbox|\nfrom [[Legacy:UnrealScript\
      \ Language Reference/States|UnrealScript Language Reference/States]]\n\nThe\
      \ scoping rules, which resolves these complex situations, are:\n* If the object\
      \ is in a state, and an implementation of the function exists somewhere in that\
      \ state (either in the actor’s class or in some parent class), the most-derived\
      \ state version of the function is called.\n* Otherwise, the most-derived non-state\
      \ version of the function is called. \n\n\n\n}}\n\nBasically, if the actor is\
      \ in state Foo, when it looks for a function, it searches within code declared\
      \ as within that state as much as possible.\n\n===Example===\n\nSuppose we have\
      \ the following functions defined (using non-standard notation to indicate states):\n\
      * Monster.Trigger\n* Monster.Idle.Trigger\n* BugEyedMonster.Trigger (a child\
      \ class of Monster)\n\nNow BugEyedMonster is in state Idle, and there is a call\
      \ of Trigger. What should it do?\n\n# there is no BugEyedMonster.Idle.Trigger\n\
      # look higher up the class tree...\n# there is a Monster.Idle.Trigger. Execute\
      \ that.\n\nNow suppose we have:\n\n* Monster.UnTrigger\n* BugEyedMonster.UnTrigger\
      \ (a child class of Monster)\n\n# there is no BugEyedMonster.Idle.UnTrigger\n\
      # look higher up the class tree...\n# there is no Monster.Idle.UnTrigger\n#\
      \ Monster is the \"eldest\" class that defines a state Idle. So we have to give\
      \ up looking in that state. Switch to looking for non-state version, back at\
      \ the current class, BugEyedMonster\n# there is a BugEyedMonster.UnTrigger.\
      \ Execute that. \n\n==Related topics ==\n* [[Legacy:Flow Syntax|Flow Syntax]]\n\
      * [[Legacy:UnrealScript Language Reference/States|UnrealScript Language Reference/States]]\n\
      * [[Legacy:Latent Function|Latent function]]\n\n===Tutorials ===\n* [[Legacy:TriggerJumpPad|TriggerJumpPad]]\n\
      \n==Comments =="
  properties: []
  revId: 7369
name: "Legacy:State"
revision:
  revid: 7369
  parentid: 7371
  user: "Wormbo"
  timestamp: 1153205879.000000000
  comment: "reverted"
timestamp: 1668761657.936011000
