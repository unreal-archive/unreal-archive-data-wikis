---
parse:
  title: "Legacy:PhysicsType"
  text:
    text: "<p>An <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s <b>PhysicsType</b>\
      \ is set in the <a href=\"/Legacy:Actor/Movement\" title=\"Legacy:Actor/Movement\"\
      >Movement</a> -&gt; Physics property. Use the SetPhysics() method to change.</p>\n\
      <dl>\n<dt>PHYS_CinMotion&#160;</dt>\n<dd>(new in UT2003)</dd>\n<dt>PHYS_Falling&#160;</dt>\n\
      <dd>Automatically applies the gravity of the current zone. Pawn-set acceleration\
      \ in the Z direction is ignored.</dd>\n<dt>PHYS_Flying&#160;</dt>\n<dd>The <a\
      \ href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a> or <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> can move independantly from gravity. Velocity\
      \ on the Z axis is ignored (only in UT?).</dd>\n<dt>PHYS_Hovering&#160;</dt>\n\
      <dd>This is is a fun Physics type. When you set an actors physics to PHYS_Hovering,\
      \ it, er, hovers a few <a href=\"/Legacy:UU\" title=\"Legacy:UU\" class=\"mw-redirect\"\
      >UU</a> off the ground. If you do this to an <a href=\"/Legacy:XPawn\" title=\"\
      Legacy:XPawn\">xPawn</a>, for example, it will act kind of like a hovercraft.\
      \ Friction is reduced (so you slide around, and slide down ramps), and if you\
      \ go at speed up an incline you can do some massive jumps. Good fun. (new in\
      \ UT2003)</dd>\n<dt>PHYS_Interpolating&#160;</dt>\n<dd>Used in conjunction with\
      \ <b>bInterpolating</b> in <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a>. Seems to also use the <b>PhysRate</b> and <b>PhysAlpha</b> parameters\
      \ (which I cannot find in <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a>.) I recommend against its use. Seems to be\
      \ a leftover from the pre-<a href=\"/Legacy:Matinee\" title=\"Legacy:Matinee\"\
      >Matinee</a> days.</dd>\n<dt>PHYS_Karma&#160;</dt>\n<dd>Signals an <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> is to be affected by the <a\
      \ href=\"/Legacy:Karma\" title=\"Legacy:Karma\">Karma</a> engine. (new in UT2003)</dd>\n\
      <dt>PHYS_KarmaRagDoll&#160;</dt>\n<dd>This is used for dead pawns. See <a href=\"\
      /Legacy:Karma_Ragdoll\" title=\"Legacy:Karma Ragdoll\">Karma Ragdoll</a>. (new\
      \ in UT2003)</dd>\n<dt>PHYS_Ladder&#160;</dt>\n<dd>Applies to an <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> when they are climbing a <a\
      \ href=\"/Legacy:Ladder_(UT)\" title=\"Legacy:Ladder (UT)\">Ladder (UT)</a>.\
      \ (new in <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a>)</dd>\n<dt>PHYS_MovingBrush&#160;</dt>\n<dd>Used for <a href=\"\
      /Legacy:Mover\" title=\"Legacy:Mover\">Movers</a>!</dd>\n<dt>PHYS_None&#160;</dt>\n\
      <dd>No native physics code is applied.</dd>\n<dt>PHYS_Projectile&#160;</dt>\n\
      <dd>Uses velocities on all 3 axes but DOES NOT use the current Zone's ZoneGravity\
      \ and ZoneFluidFriction members to adjust velocity. This means that actors with\
      \ a velocity are not affected by gravity or friction. <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actors</a> with this physics setting do not have any\
      \ freedom of movement. Acceleration is also processed (please check this!).</dd>\n\
      <dt>PHYS_Rolling&#160;</dt>\n<dd>(removed in <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>)</dd>\n<dt>PHYS_RootMotion&#160;</dt>\n\
      <dd>(new in UT2003)</dd>\n<dt>PHYS_Rotating&#160;</dt>\n<dd>Only rotation changes.\
      \ Location doesn't change. If <b>bRotateToDesired</b> is false, then the <a\
      \ href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> rotates according\
      \ to <b>RotationRate</b>. If <b>bRotateToDesired</b> is true, then the <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> rotates to the rotation specified\
      \ by <b>DesiredRotation</b> at the speed specified by <b>RotationRate</b>.</dd>\n\
      <dt>PHYS_Spider&#160;</dt>\n<dd>Similar to PHYS_Walking except it applies to\
      \ an <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> against any\
      \ surface, not just a \"ground\" surface. An <a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a> in PHYS_Spider will move against a horizontal <i>OR</i>\
      \ vertical surface just like in PHYS_Walking. When the end of the surface is\
      \ reached the Pawn will be set to PHYS_Falling. PHYS_Spider only works on one\
      \ plane, it will not allow a Pawn to move across perpendicular walls.</dd>\n\
      <dt>PHYS_Swimming&#160;</dt>\n<dd>Similar to PHYS_Flying, but also take the\
      \ zone's FluidFriction into account. (also <a href=\"/Legacy:Pawn_(UT)\" title=\"\
      Legacy:Pawn (UT)\">Pawn (UT)</a> related)</dd>\n<dt>PHYS_Trailer&#160;</dt>\n\
      <dd>Used to set an <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>\
      \ to follow its Owner. An <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>\
      \ set this way has no physics of its own, (*including collision) and simply\
      \ follow their Owner around. <i><b>NOTE:</b></i> There are two settings in the\
      \ <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> class which can\
      \ specify the actions of a PHYS_Trailer. First is Actor.bTrailerPrePivot, which,\
      \ when set to True, causes the Actor in PHYS_Trailer to be positioned away from\
      \ its Owner by the vector value set in Actor.PrePivot. If not set or left at\
      \ 0, the Actor in PHYS_Trailer will have the same location as its Owner. Secondly,\
      \ there is Actor.bTrailerSameRotation, which causes the Actor in PHYS_Trailer\
      \ to have the same Rotation as its Owner no matter where it is.</dd>\n<dt>PHYS_Walking&#160;</dt>\n\
      <dd>Native physics code for Pawn classes only. Applies all the things that make\
      \ a pawn move around on the ground. Must have a Base set, without a Base to\
      \ walk on, this turns to PHYS_Falling.</dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:PhysicsType?section=1\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>RoninLord:</b> The physics variables PHYS_RootMotion,\
      \ PHYS_KarmaRagDoll, PHYS_Hovering and PHYS_CinMotion are not used in any of\
      \ the Unreal Tournamnet 2003 source files and so probably only have significance\
      \ to the engine.</p>\n<p><b>Eldhrin:</b> I would expect that we may see these\
      \ in future games on the new Unreal engine builds, such as Unreal II. Although\
      \ Deus Ex 2's going to be completely different probably... different physics\
      \ engine.</p>\n<p><b>DJPaul:</b> Yes. It will be interesting to compare the\
      \ relative merits of both Karma and Havok physics engine. Also, it will be fun\
      \ to see how the Wiki evolves to handle information for both Physics.</p>\n\
      <p><b>SocratesJohnson:</b> In my experience PHYS_Flying does not ignore Z velocity.\
      \ My <a href=\"/Legacy:SocratesJohnson/Freefall\" title=\"Legacy:SocratesJohnson/Freefall\"\
      >Freefall</a> mutator uses it exclusively and I have no problems in the Z direction.\
      \ It does apply a strange 'drag' on the velocity in all direcitons, though.\
      \ Perhaps this was a change for UT2003? I've added a few notes to the physics\
      \ types above from my own fiddling, please correct me if I'm wrong.</p>\n<p><b>Foxpaw:</b>\
      \ I think it's a bit unfair to say that Karma Ragdolls are used only for dead\
      \ pawns.. that's all epic uses them for but they have other possibilities.</p>\n\
      <p><b>Quad</b> PHYS_Walking, PHYS_Flying and I'm sure others all restrict the\
      \ maximum velocity to the appropriate *Speed variable's setting. However, PHYS_Falling\
      \ does not.</p>\n<p><b>Durandal</b> Where are these stored? Is it possible to\
      \ create new PHYS_ types, or alter variables of existing ones? I'm thinking\
      \ things like changing the friction value of Hovering, that sort of thing; I'm\
      \ working on a mut that needs a way of setting players to zero-friction, and\
      \ Physics types seemed the best way, especially using Hovering as a start point,\
      \ except I can't find any way of altering them.</p>\n<p><b>Wormbo:</b> Physics\
      \ types are values of the enum EPhysics. UnrealScript doesn't provide ways to\
      \ change enums after they have been declared, so the only way to add physics\
      \ types would be an engine license. Mods cannot create their own physics types.</p>\n\
      <p><b>smattbac:</b> <i>\"Native physics code for <a href=\"/Legacy:Pawn_(UT)\"\
      \ title=\"Legacy:Pawn (UT)\">Pawn (UT)</a> class only.\"</i> Does that only\
      \ apply to the original UT, since <a href=\"/edit/Legacy:ONSMineProjectile?redlink=1\"\
      \ class=\"new\" title=\"Legacy:ONSMineProjectile (page does not exist)\">ONSMineProjectile</a>\
      \ seems to use PHYS_Walking?</p>\n<p><b>SuperApe:</b> Good catch. That's a mistake.\
      \ It should read, <i>\"... for Pawn classes only.\"</i>, and not be explicitly\
      \ associated with any engine version. All Pawns use <tt>PHYS_Walking</tt>.</p>\n\
      <p><b>smattbac:</b> What I meant was that if the \"PHYS_Walking is only for\
      \ Pawns\" was only true in Unreal Engine 1, but not in 2.x, since ONSMineProjectile\
      \ is a subclass of Projectile.</p>\n<p><b>SuperApe:</b> I suppose that it was\
      \ originally meant for Pawns, but has become useful for other things since UT.</p>\n\
      <p><b>Saishy:</b> Quad, I think Airspeed does limit PHYS_Flying speed. Also,\
      \ sadly to know we can't create new PHYS_ types, but how do we modify existing\
      \ ones?</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:PhysicsType?section=2\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>, <a href=\"\
      /Legacy:Actor_(UT)\" title=\"Legacy:Actor (UT)\">Actor (UT)</a> class</li>\n\
      <li><a href=\"/Legacy:Actor/Movement\" title=\"Legacy:Actor/Movement\">Actor/Movement</a>\
      \ properties</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.035\
      \ seconds\nReal time usage: 0.046 seconds\nPreprocessor visited node count:\
      \ 8/1000000\nPreprocessor generated node count: 20/1000000\nPost‐expand include\
      \ size: 11/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2442-0!*!0!!*!*!*\
      \ and timestamp 20221117184818 and revision id 44380\n -->\n"
  categories:
  - sortkey: "PhysicsType"
    name: "Legacy_Enum"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Ladder (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Mover"
  - ns: 100
    exists: true
    name: "Legacy:UU"
  - ns: 100
    exists: true
    name: "Legacy:Actor (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: false
    name: "Legacy:ONSMineProjectile"
  - ns: 100
    exists: true
    name: "Legacy:Actor/Movement"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Karma"
  - ns: 100
    exists: true
    name: "Legacy:Matinee"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:XPawn"
  - ns: 100
    exists: true
    name: "Legacy:Karma Ragdoll"
  - ns: 100
    exists: true
    name: "Legacy:SocratesJohnson/Freefall"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "1"
    index: "1"
    fromtitle: "Legacy:PhysicsType"
    byteoffset: 4008
    anchor: "Comments"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "2"
    fromtitle: "Legacy:PhysicsType"
    byteoffset: 6943
    anchor: "Related_Topics"
  displaytitle: "Legacy:PhysicsType"
  iwlinks: []
  wikitext:
    text: "An [[Legacy:Actor|Actor]]'s '''PhysicsType''' is set in the [[Legacy:Actor/Movement|Movement]]\
      \ -> Physics property. Use the SetPhysics() method to change.\n\n; PHYS_CinMotion\
      \ : (new in UT2003)\n; PHYS_Falling : Automatically applies the gravity of the\
      \ current zone.  Pawn-set acceleration in the Z direction is ignored.\n; PHYS_Flying\
      \ : The [[Legacy:Pawn|Pawn]] or [[Legacy:Actor|Actor]] can move independantly\
      \ from gravity. Velocity on the Z axis is ignored (only in UT?).\n; PHYS_Hovering\
      \ : This is is a fun Physics type. When you set an actors physics to PHYS_Hovering,\
      \ it, er, hovers a few [[Legacy:UU|UU]] off the ground. If you do this to an\
      \ [[Legacy:XPawn|xPawn]], for example, it will act kind of like a hovercraft.\
      \ Friction is reduced (so you slide around, and slide down ramps), and if you\
      \ go at speed up an incline you can do some massive jumps. Good fun. (new in\
      \ UT2003)\n; PHYS_Interpolating : Used in conjunction with '''bInterpolating'''\
      \ in [[Legacy:Actor|Actor]].  Seems to also use the '''PhysRate''' and '''PhysAlpha'''\
      \ parameters (which I cannot find in [[Legacy:UT2003|UT2003]].)  I recommend\
      \ against its use.  Seems to be a leftover from the pre-[[Legacy:Matinee|Matinee]]\
      \ days.\n; PHYS_Karma : Signals an [[Legacy:Actor|Actor]] is to be affected\
      \ by the [[Legacy:Karma|Karma]] engine. (new in UT2003)\n; PHYS_KarmaRagDoll\
      \ : This is used for dead pawns. See [[Legacy:Karma Ragdoll|Karma Ragdoll]].\
      \ (new in UT2003)\n; PHYS_Ladder : Applies to an [[Legacy:Actor|Actor]] when\
      \ they are climbing a [[Legacy:Ladder (UT)|Ladder (UT)]]. (new in [[Legacy:UT2003|UT2003]])\n\
      ; PHYS_MovingBrush : Used for [[Legacy:Mover|Mover]]s!\n; PHYS_None : No native\
      \ physics code is applied.\n; PHYS_Projectile : Uses velocities on all 3 axes\
      \ but DOES NOT use the current Zone's ZoneGravity and ZoneFluidFriction members\
      \ to adjust velocity. This means that actors with a velocity are not affected\
      \ by gravity or friction. [[Legacy:Actor|Actors]] with this physics setting\
      \ do not have any freedom of movement.  Acceleration is also processed (please\
      \ check this!).\n; PHYS_Rolling : (removed in [[Legacy:UT2003|UT2003]])\n; PHYS_RootMotion\
      \ : (new in UT2003)\n; PHYS_Rotating : Only rotation changes.  Location doesn't\
      \ change.  If '''bRotateToDesired''' is false, then the [[Legacy:Actor|Actor]]\
      \ rotates according to '''RotationRate'''.  If '''bRotateToDesired''' is true,\
      \ then the [[Legacy:Actor|Actor]] rotates to the rotation specified by '''DesiredRotation'''\
      \ at the speed specified by '''RotationRate'''.\n; PHYS_Spider : Similar to\
      \ PHYS_Walking except it applies to an [[Legacy:Actor|Actor]] against any surface,\
      \ not just a \"ground\" surface. An [[Legacy:Actor|Actor]] in PHYS_Spider will\
      \ move against a horizontal ''OR'' vertical surface just like in PHYS_Walking.\
      \ When the end of the surface is reached the Pawn will be set to PHYS_Falling.\
      \ PHYS_Spider only works on one plane, it will not allow a Pawn to move across\
      \ perpendicular walls.\n; PHYS_Swimming : Similar to PHYS_Flying, but also take\
      \ the zone's FluidFriction into account. (also [[Legacy:Pawn (UT)|Pawn (UT)]]\
      \ related)\n; PHYS_Trailer : Used to set an [[Legacy:Actor|Actor]] to follow\
      \ its Owner. An [[Legacy:Actor|Actor]] set this way has no physics of its own,\
      \ (*including collision) and simply follow their Owner around. '''''NOTE:'''''\
      \ There are two settings in the [[Legacy:Actor|Actor]] class which can specify\
      \ the actions of a PHYS_Trailer. First is Actor.bTrailerPrePivot, which, when\
      \ set to True, causes the Actor in PHYS_Trailer to be positioned away from its\
      \ Owner by the vector value set in Actor.PrePivot. If not set or left at 0,\
      \ the Actor in PHYS_Trailer will have the same location as its Owner. Secondly,\
      \ there is Actor.bTrailerSameRotation, which causes the Actor in PHYS_Trailer\
      \ to have the same Rotation as its Owner no matter where it is.\n; PHYS_Walking\
      \ : Native physics code for Pawn classes only. Applies all the things that make\
      \ a pawn move around on the ground. Must have a Base set, without a Base to\
      \ walk on, this turns to PHYS_Falling.\n\n==Comments ==\n\n'''RoninLord:'''\
      \ The physics variables PHYS_RootMotion, PHYS_KarmaRagDoll, PHYS_Hovering and\
      \ PHYS_CinMotion are not used in any of the Unreal Tournamnet 2003 source files\
      \ and so probably only have significance to the engine.\n\n'''Eldhrin:''' I\
      \ would expect that we may see these in future games on the new Unreal engine\
      \ builds, such as Unreal II. Although Deus Ex 2's going to be completely different\
      \ probably... different physics engine.\n\n'''DJPaul:''' Yes.  It will be interesting\
      \ to compare the relative merits of both Karma and Havok physics engine.  Also,\
      \ it will be fun to see how the Wiki evolves to handle information for both\
      \ Physics.\n\n'''SocratesJohnson:''' In my experience PHYS_Flying does not ignore\
      \ Z velocity.  My [[Legacy:SocratesJohnson/Freefall|Freefall]] mutator uses\
      \ it exclusively and I have no problems in the Z direction.  It does apply a\
      \ strange 'drag' on the velocity in all direcitons, though.  Perhaps this was\
      \ a change for UT2003?  I've added a few notes to the physics types above from\
      \ my own fiddling, please correct me if I'm wrong.\n\n'''Foxpaw:''' I think\
      \ it's a bit unfair to say that Karma Ragdolls are used only for dead pawns..\
      \ that's all epic uses them for but they have other possibilities.\n\n'''Quad'''\
      \ PHYS_Walking, PHYS_Flying and I'm sure others all restrict the maximum velocity\
      \ to the appropriate *Speed variable's setting. However, PHYS_Falling does not.\n\
      \n'''Durandal''' Where are these stored? Is it possible to create new PHYS_\
      \ types, or alter variables of existing ones? I'm thinking things like changing\
      \ the friction value of Hovering, that sort of thing; I'm working on a mut that\
      \ needs a way of setting players to zero-friction, and Physics types seemed\
      \ the best way, especially using Hovering as a start point, except I can't find\
      \ any way of altering them.\n\n'''Wormbo:''' Physics types are values of the\
      \ enum EPhysics. UnrealScript doesn't provide ways to change enums after they\
      \ have been declared, so the only way to add physics types would be an engine\
      \ license. Mods cannot create their own physics types.\n\n'''smattbac:''' ''\"\
      Native physics code for [[Legacy:Pawn (UT)|Pawn (UT)]] class only.\"'' Does\
      \ that only apply to the original UT, since [[Legacy:ONSMineProjectile|ONSMineProjectile]]\
      \ seems to use PHYS_Walking?\n\n'''SuperApe:''' Good catch.  That's a mistake.\
      \  It should read, ''\"... for Pawn classes only.\"'', and not be explicitly\
      \ associated with any engine version.  All Pawns use <tt>PHYS_Walking</tt>.\n\
      \n'''smattbac:''' What I meant was that if the \"PHYS_Walking is only for Pawns\"\
      \ was only true in Unreal Engine 1, but not in 2.x, since ONSMineProjectile\
      \ is a subclass of Projectile.\n\n'''SuperApe:''' I suppose that it was originally\
      \ meant for Pawns, but has become useful for other things since UT.\n\n'''Saishy:'''\
      \ Quad, I think Airspeed does limit PHYS_Flying speed. Also, sadly to know we\
      \ can't create new PHYS_ types, but how do we modify existing ones?\n\n==Related\
      \ Topics ==\n* [[Legacy:Actor|Actor]], [[Legacy:Actor (UT)|Actor (UT)]] class\n\
      * [[Legacy:Actor/Movement|Actor/Movement]] properties\n\n[[Category:Legacy Enum|{{PAGENAME}}]]"
  properties: []
  revId: 44380
name: "Legacy:PhysicsType"
revision:
  revid: 44380
  parentid: 5867
  user: "210.170.176.192"
  timestamp: 1304083139.000000000
  comment: "/* Comments */"
timestamp: 1668767074.643087000
