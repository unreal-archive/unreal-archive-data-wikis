---
parse:
  title: "Legacy:Mutator Config GUI (UT2004)"
  text:
    text: "<p>Mutator configuration within <a href=\"/Legacy:UT2004\" title=\"Legacy:UT2004\"\
      \ class=\"mw-redirect\">UT2004</a> is handled very differently from that in\
      \ previous games (see <a href=\"/Legacy:Mutator_Config_GUI_(UT2003)\" title=\"\
      Legacy:Mutator Config GUI (UT2003)\">Mutator Config GUI (UT2003)</a>). Rather\
      \ than have a separate config window for each mutator all <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">mutators</a> share the same configuration.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Basic_Requirements\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Basic Requirements</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Mutator_GUI_Functions\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Mutator GUI Functions</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Mutator_GUI_Properties\"><span\
      \ class=\"tocnumber\">1.2</span> <span class=\"toctext\">Mutator GUI Properties</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Example_Code\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Example Code</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#The_PlayInfo.AddSetting.28.29_Function\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">The PlayInfo.AddSetting()\
      \ Function</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"\
      #AddSetting.28.29_Function_Parameters\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">AddSetting() Function Parameters</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Advanced_Configuration_Support\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Advanced Configuration\
      \ Support</span></a></li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Basic_Requirements\"\
      >Basic Requirements</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=1\" title=\"\
      Edit section: Basic Requirements\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>These are the basic elements needed to include configurable\
      \ options for a mutator.</p>\n<h3><span class=\"mw-headline\" id=\"Mutator_GUI_Functions\"\
      >Mutator GUI Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=2\" title=\"\
      Edit section: Mutator GUI Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Each mutator has the option to add its configuration\
      \ options as a separate <i>group</i> to an existing configuration group. This\
      \ is handled by adding the following <a href=\"/Legacy:Static_Function\" title=\"\
      Legacy:Static Function\">static functions</a> to the mutator you are writing.</p>\n\
      <dl>\n<dt>static function FillPlayInfo(PlayInfo PlayInfo)&#160;</dt>\n<dd>Responsible\
      \ for actually creating the GUI widgets used to configure each option.</dd>\n\
      <dt>static event string GetDescriptionText(string PropName)&#160;</dt>\n<dd>Responsible\
      \ for returning \"long\" descriptions of each of the options.</dd>\n<dt>static\
      \ function string GetDisplayText(string PropName)&#160;</dt>\n<dd>Repsonsible\
      \ for returning the displayed menu name of each of the options. This function\
      \ is not strictly required but it keeps things consistent with the GameInfo\
      \ configuration code.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Mutator_GUI_Properties\"\
      >Mutator GUI Properties</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=3\"\
      \ title=\"Edit section: Mutator GUI Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In addition to the above functions your mutator will\
      \ also have the following array properties. The number of elements within the\
      \ array should equal the number of configurable items your mutator has.</p>\n\
      <p>For example, if your mutator has two configuration options the the following\
      \ arrays should be declared. The size of the arrays should match the number\
      \ of properties you are attempting to configure.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> HitAndScore <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Mutator</span> <span class=\"kw1\"\
      >config</span> <span class=\"br0\">(</span>MutHitAndScore<span class=\"br0\"\
      >)</span>;\n \n<span class=\"kw1\">var</span> <span class=\"kw1\">localized</span>\
      \ <span class=\"kw5\">string</span> GUIDisplayText<span class=\"br0\">[</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">]</span>; <span class=\"co1\">//\
      \ Config property label names</span>\n<span class=\"kw1\">var</span> <span class=\"\
      kw1\">localized</span> <span class=\"kw5\">string</span> GUIDescText<span class=\"\
      br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>;    <span\
      \ class=\"co1\">// Config property long descriptions</span>\n \n<span class=\"\
      co1\">// If you have any drop lists then you will want to add a localized array</span>\n\
      <span class=\"co1\">// variable whose element count matches the number of selections\
      \ within the drop list.</span>\n<span class=\"kw1\">var</span> <span class=\"\
      kw1\">localized</span> <span class=\"kw5\">string</span> GUISelectOptions<span\
      \ class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Example_Code\">Example Code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=4\" title=\"Edit section:\
      \ Example Code\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The following is some example code of GUI support for a mutator that counts\
      \ the hits taken and resets the player's score after a certain threshold is\
      \ reached.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >var</span> <span class=\"kw1\">config</span> <span class=\"kw5\">int</span>\
      \ HitCount;  <span class=\"co1\">// A counter for the number of hits taken</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw1\">config</span> <span class=\"\
      kw5\">int</span> MaxHits;   <span class=\"co1\">// Number of hits before you\
      \ lose your score</span>\n \n<span class=\"kw1\">var</span> <span class=\"kw1\"\
      >localized</span> <span class=\"kw5\">string</span> GUIDisplayText<span class=\"\
      br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>; <span\
      \ class=\"co1\">// Config property label names</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw1\">localized</span> <span class=\"kw5\">string</span> GUIDescText<span\
      \ class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>;\
      \    <span class=\"co1\">// Config property long descriptions</span>\n \n<span\
      \ class=\"co1\">// Mutator code and class definition snipped for clarity</span>\n\
      \ \n<span class=\"co1\">// The function used to obtain the text that will be\
      \ displayed within the</span>\n<span class=\"co1\">// config window.</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">string</span> GetDisplayText<span class=\"br0\">(</span><span\
      \ class=\"kw5\">string</span> PropName<span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n  <span class=\"co1\">// The value of PropName passed to the\
      \ function should match the variable name</span>\n  <span class=\"co1\">// being\
      \ configured.</span>\n  <span class=\"kw2\">switch</span> <span class=\"br0\"\
      >(</span>PropName<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">case</span> <span class=\"st0\">\"HitCount\"</span>:\
      \  <span class=\"kw2\">return</span> <span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">GUIDisplayText</span><span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>;\n    <span class=\"kw2\">case</span>\
      \ <span class=\"st0\">\"MaxHits\"</span>:  <span class=\"kw2\">return</span>\
      \ <span class=\"kw1\">default</span>.<span class=\"me0\">GUIDisplayText</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      kw6\">Super</span>.<span class=\"me0\">GetDisplayText</span><span class=\"br0\"\
      >(</span>PropName<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// The function used to obtain the \"hint\" text that\
      \ is displayed at the bottom</span>\n<span class=\"co1\">// of the config window.</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">event</span> <span class=\"\
      kw5\">string</span> GetDescriptionText<span class=\"br0\">(</span><span class=\"\
      kw5\">string</span> PropName<span class=\"br0\">)</span> <span class=\"br0\"\
      >{</span>\n  <span class=\"co1\">// The value of PropName passed to the function\
      \ should match the variable name</span>\n  <span class=\"co1\">// being configured.</span>\n\
      \  <span class=\"kw2\">switch</span> <span class=\"br0\">(</span>PropName<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\"\
      >case</span> <span class=\"st0\">\"HitCount\"</span>:  <span class=\"kw2\">return</span>\
      \ <span class=\"kw1\">default</span>.<span class=\"me0\">GUIDescText</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;\n\
      \    <span class=\"kw2\">case</span> <span class=\"st0\">\"MaxHits\"</span>:\
      \  <span class=\"kw2\">return</span> <span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">GUIDescText</span><span class=\"br0\">[</span><span class=\"\
      nu0\">1</span><span class=\"br0\">]</span>;\n  <span class=\"br0\">}</span>\n\
      \  <span class=\"kw2\">return</span> <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">GetDescriptionText</span><span class=\"br0\">(</span>PropName<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >// This function is called to actually add the configuration options for the</span>\n\
      <span class=\"co1\">// mutator to the configuration window.</span>\n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">function</span> FillPlayInfo<span class=\"\
      br0\">(</span><span class=\"kw8\">PlayInfo</span> <span class=\"kw8\">PlayInfo</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw6\"\
      >Super</span>.<span class=\"me0\">FillPlayInfo</span><span class=\"br0\">(</span><span\
      \ class=\"kw8\">PlayInfo</span><span class=\"br0\">)</span>;  <span class=\"\
      co1\">// Always begin with calling parent</span>\n \n  <span class=\"co1\">//\
      \ The following function calls actually cause the configuration options to be</span>\n\
      \  <span class=\"co1\">// added to the mutator config window.  See below for\
      \ a description of how to</span>\n  <span class=\"co1\">// use the PlayInfo.AddSetting()\
      \ function.</span>\n  <span class=\"kw8\">PlayInfo</span>.<span class=\"me0\"\
      >AddSetting</span><span class=\"br0\">(</span><span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">GameGroup</span>, <span class=\"st0\">\"HitCount\"</span>, GetDisplayText<span\
      \ class=\"br0\">(</span><span class=\"st0\">\"HitCount\"</span><span class=\"\
      br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>,\
      \ <span class=\"st0\">\"Text\"</span>, <span class=\"st0\">\"3;0:32\"</span>,\
      \ <span class=\"st0\">\"\"</span>, <span class=\"kw6\">True</span>, <span class=\"\
      kw6\">True</span><span class=\"br0\">)</span>;\n \n  <span class=\"kw8\">PlayInfo</span>.<span\
      \ class=\"me0\">AddSetting</span><span class=\"br0\">(</span><span class=\"\
      kw1\">default</span>.<span class=\"me0\">GameGroup</span>, <span class=\"st0\"\
      >\"MaxHits\"</span>, GetDisplayText<span class=\"br0\">(</span><span class=\"\
      st0\">\"MaxHits\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>,\
      \ <span class=\"nu0\">0</span>, <span class=\"st0\">\"Text\"</span>, <span class=\"\
      st0\">\"3;0:999\"</span><span class=\"br0\">)</span>;\n \n  <span class=\"co1\"\
      >// Note that the second parameter, and the value passed to the GetDisplayText()</span>\n\
      \  <span class=\"co1\">// within the calls to the AddSetting() function above\
      \ matches the</span>\n  <span class=\"co1\">// name of the attribute we want\
      \ to configure as declared within the class defintion</span>\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span> <span class=\"\
      br0\">{</span>\n  HitCount<span class=\"sy0\">=</span><span class=\"nu0\">8</span>\n\
      \  MaxHits<span class=\"sy0\">=</span><span class=\"nu0\">500</span>\n  GUIDisplayText<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Hit Count\"</span>\n  GUIDisplayText<span\
      \ class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Max Hits\"</span>\n  GUIDescText<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"The number of hits each player\
      \ can take\"</span>\n  GUIDescText<span class=\"br0\">[</span><span class=\"\
      nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"The number of hits that a player can take before their score\
      \ is reset\"</span>\n \n  <span class=\"co1\">//Group these components when\
      \ other mutator components are configurable</span>\n  GroupName <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"HitAndScore\"</span>\n  <span class=\"\
      co1\">//Display of mutator in mutator list</span>\n  FriendlyName <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"Hit And Score\"</span>\n  <span class=\"\
      co1\">//Description of mutator appearing in GUI</span>\n  description <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"mutator that counts the hits\
      \ taken and resets the player's score after a certain threshold is reached.\"\
      </span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>Note:</b> If\
      \ you are subclassing from an existing mutator, or from the <a href=\"/Legacy:GameInfo\"\
      \ title=\"Legacy:GameInfo\">GameInfo</a> class then your GetDisplayText() and\
      \ GetDescriptionText() functions should include a call to the method defined\
      \ within the superclass. Be aware that the inclusion of a GetDisplayText() function\
      \ is considered good practice rather than being mandatory so check that the\
      \ function is defined within the superclass before calling it. Note that on\
      \ patch 3355, GetDisplayText will cause a compile error, so you do not need\
      \ this function when compiling for that environment.</p>\n<h2><span class=\"\
      mw-headline\" id=\"The_PlayInfo.AddSetting.28.29_Function\">The PlayInfo.AddSetting()\
      \ Function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=5\" title=\"\
      Edit section: The PlayInfo.AddSetting() Function\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The PlayInfo.AddSetting() function is defined as shown\
      \ below.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >native</span><span class=\"br0\">(</span><span class=\"nu0\">704</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">final</span> <span class=\"kw1\"\
      >function</span> <span class=\"kw5\">bool</span> AddSetting<span class=\"br0\"\
      >(</span><span class=\"kw5\">string</span> Group, <span class=\"kw5\">string</span>\
      \ PropertyName, <span class=\"kw5\">string</span> Description, <span class=\"\
      kw5\">byte</span> SecLevel, <span class=\"kw5\">byte</span> Weight, <span class=\"\
      kw5\">string</span> RenderType, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">string</span> Extras, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">string</span> ExtraPrivs, <span class=\"kw1\">optional</span> <span class=\"\
      kw5\">bool</span> bMultiPlayerOnly, <span class=\"kw1\">optional</span> <span\
      \ class=\"kw5\">bool</span> bAdvanced<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"AddSetting.28.29_Function_Parameters\"\
      >AddSetting() Function Parameters</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=6\"\
      \ title=\"Edit section: AddSetting() Function Parameters\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>What follows is a description\
      \ of each of the parameters to the AddSetting() function.</p>\n<dl>\n<dt>Group&#160;</dt>\n\
      <dd>This is the group the setting falls into. Within the mutator config window\
      \ this setting has no effect. It is used primarily to group similar properties\
      \ together within the main \"game\" and \"game rules\" windows. The values used\
      \ by the default UT2004 code are defined within the /Engine/Info class and are\
      \ as follows:</dd>\n<dt>* default.RulesGroup (\"Rules\")</dt>\n<dt>* default.ServerGroup\
      \ (\"Server\")</dt>\n<dt>* default.BotsGroup (\"Bots\")</dt>\n<dt>* default.GameGroup\
      \ (\"Game\")</dt>\n<dt>* default.ChatGroup (\"Chat\")</dt>\n<dt>* default.MapVoteGroup\
      \ (\"Map Voting\")</dt>\n<dt>* default.KickVoteGroup (\"Kick Voting\")</dt>\n\
      <dt>PropertyName&#160;</dt>\n<dd>This is the name of the property that this\
      \ setting relates to. It must match exactly the name of the class configuration\
      \ attribute that this menu setting relates to.</dd>\n<dt>Description&#160;</dt>\n\
      <dd>This is the label that will be used when the configuration option is displayed\
      \ within the GUI window.</dd>\n<dt>SecLevel&#160;</dt>\n<dd>This is the security\
      \ level of the setting. Values greater than zero may require the user to be\
      \ logged on (<i>Is this used more at the Web-Admin level?</i>). For a mutator\
      \ it will generally be passed as 0.</dd>\n<dt>Weight&#160;</dt>\n<dd>This is\
      \ simply an value used to order the configuration options within the group.\
      \ For the purposes of the Mutator config screen it can be set to 0.</dd>\n<dt>RenderType&#160;</dt>\n\
      <dd>This is the type of widget to be used to alter the value of the property\
      \ being configured. The allowed values are listed below.</dd>\n<dt>* \"Check\"\
      \ Used when a check boxes is required.</dt>\n<dt>* \"Text\" - Used when a standard\
      \ entry field is required.</dt>\n<dt>* \"Select\" - Used when a drop list is\
      \ needed.</dt>\n<dt>* \"Custom\" - Used when an advanced configuration page\
      \ (new window) is needed. This value cannot be used within a mutator configuration\
      \ setting.</dt>\n<dt>Extras&#160;</dt>\n<dd>This parameter is used in conjunction\
      \ with the RenderType parameter to determine what is actually displayed. The\
      \ format for the string is described below.</dd>\n<dt>&#160;; Check&#160;</dt>\n\
      <dd>Ignored.</dd>\n<dt>&#160;; Text&#160;</dt>\n<dd>This parameter can be in\
      \ a number of different forms</dd>\n<dt>&#160;; * \"value\" for the default\
      \ value of the Text Edit box.</dt>\n<dt>&#160;; * \"width;value\" for a Text\
      \ Edit box with a given width and default value.</dt>\n<dt>&#160;; * \"width;lowest</dt>\n\
      <dd>highest\" for a Ranged Edit box that allows values between the lowest and\
      \ highest to be entered. If the range is a float then the values should be specified\
      \ with a decimal point.</dd>\n<dt>&#160;; Select&#160;</dt>\n<dd>The paramter\
      \ should be a semi-colon delimited list of value and name pairs. For example\
      \ \"value1;name1;value2;name2;value3;name3\".</dd>\n<dt>&#160;; Custom&#160;</dt>\n\
      <dd>This configuration type cannot be used in a mutator configuration. However\
      \ values are of the form: <b>\"##;Package.WebHandlerClass;Package.CustomConfigPage\"\
      </b><br />\nThe first part generally indicates an optional width. The second\
      \ part allows to specify the class that should handle rendering this property\
      \ in webadmin. The third part is the classname of a custom GUI page for this\
      \ property. All three parts are optional.<br />\nCouple of notes:</dd>\n<dt>&#160;;\
      \ * The semi-colons are only required if you are using the second or third part\
      \ of the field. So valid values could be <b>\"255\"</b>, <b>\"255;;GUI2K4.MOTDConfigPage\"\
      </b> or <b>\";;GUI2K4.MOTDConfigPage\"</b>.</dt>\n<dt>&#160;; * The second part\
      \ (webadmin support) is currently not implemented, so any value you put here\
      \ will be ignored.</dt>\n<dt>&#160;; * If you specify a custom config page,\
      \ your property will appear in the GUI list as a button. Clicking this button\
      \ opens the page you've specified. You'd normally only need to do this for more\
      \ complex properties, such as structs.</dt>\n<dt>ExtraPrivs&#160;</dt>\n<dd>Used\
      \ to specify any additional privileges that are required in order for an admin\
      \ to modify the value of this property from e.g. webadmin. You'd only use this\
      \ field if have custom privilege classes (i.e. subclasses of xPrivilegeBase),\
      \ and then only in cases where you'd like the property to appear in the same\
      \ group as other properties, but only for certain admins.<br />\n<br />\nExpected\
      \ values would be the abbreviation for the corresponding privilege type as listed\
      \ in the SubPrivs value of your custom privilege class. In order to require\
      \ multiple privileges for this property, use the pipe character as a delimiter.<br\
      \ />\nFor example, to have a property appear on the Game page, but only if the\
      \ admin also has the ability to kick players, you could specify \"Game\" for\
      \ the Group parameter, and \"Kp\" for this parameter.</dd>\n<dt>bMultiPlayerOnly&#160;</dt>\n\
      <dd>This parameter should be set to True if the configuration option only applies\
      \ within a mutliplayer game.</dd>\n<dt>bAdvanced&#160;</dt>\n<dd>This parameter\
      \ should be set to True if the configuration option should only be displayed\
      \ when the \"Advanced\" options checkbox is checked.</dd>\n</dl>\n<h2><span\
      \ class=\"mw-headline\" id=\"Advanced_Configuration_Support\">Advanced Configuration\
      \ Support</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=7\" title=\"\
      Edit section: Advanced Configuration Support\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you need to pass on the PlayInfo object to other\
      \ <b>Info subclasses</b> then after the call to <tt>FillPlayInfo</tt> you should\
      \ call the <tt>PlayInfo.PopClass()</tt> function. An example is given below.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Example take\
      \ from Engine/GameInfo.uc FillPlayInfo() function</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">function</span> FillPlayInfo<span class=\"\
      br0\">(</span><span class=\"kw8\">PlayInfo</span> <span class=\"kw8\">PlayInfo</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw6\"\
      >Super</span>.<span class=\"me0\">FillPlayInfo</span><span class=\"br0\">(</span><span\
      \ class=\"kw8\">PlayInfo</span><span class=\"br0\">)</span>;  <span class=\"\
      co1\">// Always begin with calling parent</span>\n<span class=\"co1\">// code\
      \ snipped</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw1\">default</span>.<span class=\"me0\">GameReplicationInfoClass</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">GameReplicationInfoClass</span>.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">FillPlayInfo</span><span class=\"br0\">(</span><span class=\"\
      kw8\">PlayInfo</span><span class=\"br0\">)</span>;\n    <span class=\"kw8\"\
      >PlayInfo</span>.<span class=\"me0\">PopClass</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n<span class=\"co1\"\
      >// code snipped</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>The call to <tt>Super.FillPlayInfo()</tt> performs an AddClass(). Not popping\
      \ the class off the stack will result in a different number of classes being\
      \ held within the PlayInfo's class stack on function exit than on function entry.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=8\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Mutator_Topics\" title=\"Legacy:Mutator Topics\"\
      >Mutator Topics</a></li>\n<li><a href=\"/Legacy:Mutator_Availability_(UT2004)\"\
      \ title=\"Legacy:Mutator Availability (UT2004)\">Mutator Availability (UT2004)</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Mutator_Config_GUI_(UT2004)?section=9\" title=\"Edit section:\
      \ Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>EntropicLqd:</b> Reset discussion and added real property names.</p>\n\
      <p><b>GnaM:</b> Maybe it's just me, but this lesson seems pretty vague on how\
      \ to actually use the 'extras' parameters. After reading it, I understand that\
      \ that I need to use a list of names and values for \"select\", but I have no\
      \ idea how to use those values to actiate changes within the game. Perhaps a\
      \ small simple example of how to use each type of extra in the code would help.\
      \ Anyway, it's also kind of hard to find this lesson from the UScript topics\
      \ page. It seems to me a link right under the other mutator tutorials would\
      \ be apropriate. Thanks.</p>\n<p><b>Foxpaw:</b> Just one minor point: this tutorial\
      \ would likely be hard to follow, as it is not a tutorial.&#160;;) It's a reference,\
      \ probrably aimed at people who already have a general idea of what to do and\
      \ are looking for specifics.</p>\n<p><b>Geist:</b> Remember, you need to declare\
      \ your configurable vars with the <i>config</i> keyword. Otherwise, they wont\
      \ appear in the Configure Mutator dialog, and you'll get runtime warnings in\
      \ the log like \" Warning: Property 'HitCount' not found in class 'Class MutHitAndScore.HitAndScore'\
      \ \" when opening that dialog. This was very confusing at first, since HitCount\
      \ is definitely there, but it just wasn't a <i>configurable property</i> (slightly\
      \ misleading warning message, I guess). I've made the corrections in the script\
      \ above.</p>\n<p><b>LionsHeart:</b> I have a slight confusion on what I should\
      \ do...I'm not sure what I should do with the PropName string. Do I set it equal\
      \ to something? If would would like to give me a hand quickly, email me at LionsHeart455@hotmail.com.\
      \ Thanks!</p>\n<p><b>Geist:</b> Take a look at how <i>PropName</i> is used the\
      \ functions. <i>PropName</i> is used in the switch() of both GetDisplayText()\
      \ and GetDescriptionText() as a key to what strings to return. These strings\
      \ are then displayed in the <i>Mutator Configuration</i> screen in the game.</p>\n\
      <p><b>Devi:</b> I found this pretty helpful, I managed to add a config window\
      \ to my mutator in about 20 minutes with it =)</p>\n<p><b>Sir_Brizz:</b> Shouldn't\
      \ we add the ability to create a seperate Config Page to this page as well?</p>\n\
      <p><b>SuperApe:</b> I added the following line to the end of the GetDescriptionText()\
      \ event code above...</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">return</span> <span class=\"kw6\">Super</span>.<span class=\"me0\">GetDescriptionText</span><span\
      \ class=\"br0\">(</span>PropName<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>...It appears to be necessary. And am I correct in assuming that\
      \ while the GetDisplayText() function can be called whatever, the GetDescriptionText()\
      \ event must be explicitly named so? (Please correct me if I'm wrong on any\
      \ of this.) My question is this: How can I have a checkbox property <i>enable</i>\
      \ another PlayInfo setting? IOW, a main option \"Allow Foo\" check box is available,\
      \ but a greyed out (or non-existant) sub-option \"Start with Foo\" check box\
      \ will not be available unless the \"Allow Foo\" box is checked. Is something\
      \ like that possible with the UT2004 GUI system?</p>\n<p><b>Wormbo:</b> GetDisplayText()\
      \ is only a helper function for this class, but GetDescriptionText() is an engine\
      \ event.</p>\n<p><b>SuperApe:</b> That's what I figured. Thank you. Now, about\
      \ my question of enabling/disabling Mutator config option widgets: I see an\
      \ example of what I'm looking for in the standard game config for bots. If you\
      \ select Bot Mode: \"Specify Number\" (as opposed to \"Use Map Defaults\"),\
      \ the \"Number of Bots\" widget is enabled. That is what I'm looking for and\
      \ it's not apparent to me, in the code, how this works. Is this functionality\
      \ even available to Mutator configs?</p>\n<p><b>Wormbo:</b> This information\
      \ can't be stored in <a href=\"/Legacy:PlayInfo\" title=\"Legacy:PlayInfo\"\
      >PlayInfo</a>, so the functionality is not available in <a href=\"/Legacy:PlayInfo\"\
      \ title=\"Legacy:PlayInfo\">PlayInfo</a>-generated config menus like the mutator\
      \ configuration.</p>\n<p><b>SuperApe:</b> Thank you for clearing that up, Wormbo.</p>\n\
      <p><b>Bitty:</b> Added the following to GetDisplayText()...</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">return</span> <span class=\"kw6\"\
      >Super</span>.<span class=\"me0\">GetDisplayText</span><span class=\"br0\">(</span>PropName<span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>It's necessary to do this\
      \ to prevent some of the default settings descriptions from disappearing in\
      \ the UI. Also, these functions are not limited to mutators, but can also be\
      \ used in custom gametype classes. Another thing you may want to mention here\
      \ is if you have a lot of configurable options, you can create separate configuration\
      \ sections by doing the following in FillPlayInfo()...</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >function</span> FillPlayInfo<span class=\"br0\">(</span><span class=\"kw8\"\
      >PlayInfo</span> <span class=\"kw8\">PlayInfo</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">string</span> MyGroup;\n \n  <span class=\"kw6\">Super</span>.<span class=\"\
      me0\">FillPlayInfo</span><span class=\"br0\">(</span><span class=\"kw8\">PlayInfo</span><span\
      \ class=\"br0\">)</span>;\n \n  MyGroup<span class=\"sy0\">=</span><span class=\"\
      st0\">\"My Config Section\"</span>;\n  <span class=\"kw8\">PlayInfo</span>.<span\
      \ class=\"me0\">AddSetting</span><span class=\"br0\">(</span>MyGroup, <span\
      \ class=\"st0\">\"bAddEffect\"</span>, GetDisplayText<span class=\"br0\">(</span><span\
      \ class=\"st0\">\"bAddEffect\"</span><span class=\"br0\">)</span>, <span class=\"\
      nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"st0\">\"Check\"\
      </span><span class=\"br0\">)</span>;\n  <span class=\"co1\">// code snipped</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>mad:</b> Added some\
      \ lines to show how to change what is displayed in the mutator list. The above\
      \ code by Bitty will also pretty much do the same thing. Also, when I tried\
      \ to add GetDisplayText function to my mutator, there was a compile error. I\
      \ have patch 3355, so this may be the reason why I get compilation errors. I\
      \ added a note about this below the main class code up top.</p>\n<p><br />\n\
      <b>me:</b>Any ways to change a guns prop(Damage) with a guid page, if so how?</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.176 seconds\nReal time usage:\
      \ 0.512 seconds\nPreprocessor visited node count: 86/1000000\nPreprocessor generated\
      \ node count: 198/1000000\nPost‐expand include size: 27/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2170-0!*!0!!en!*!* and timestamp 20221118022805 and revision\
      \ id 34181\n -->\n"
  categories:
  - sortkey: "Mutator Config GUI (UT2004)"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mutator Availability (UT2004)"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Config GUI (UT2003)"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:PlayInfo"
  - ns: 100
    exists: true
    name: "Legacy:GameInfo"
  - ns: 100
    exists: true
    name: "Legacy:Static Function"
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Basic Requirements"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 307
    anchor: "Basic_Requirements"
  - toclevel: 2
    level: "3"
    line: "Mutator GUI Functions"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 416
    anchor: "Mutator_GUI_Functions"
  - toclevel: 2
    level: "3"
    line: "Mutator GUI Properties"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 1191
    anchor: "Mutator_GUI_Properties"
  - toclevel: 2
    level: "3"
    line: "Example Code"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 2056
    anchor: "Example_Code"
  - toclevel: 1
    level: "2"
    line: "The PlayInfo.AddSetting() Function"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 5568
    anchor: "The_PlayInfo.AddSetting.28.29_Function"
  - toclevel: 2
    level: "3"
    line: "AddSetting() Function Parameters"
    number: "2.1"
    index: "6"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 5948
    anchor: "AddSetting.28.29_Function_Parameters"
  - toclevel: 1
    level: "2"
    line: "Advanced Configuration Support"
    number: "3"
    index: "7"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 10640
    anchor: "Advanced_Configuration_Support"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 11504
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Mutator_Config_GUI_(UT2004)"
    byteoffset: 11640
    anchor: "Discussion"
  displaytitle: "Legacy:Mutator Config GUI (UT2004)"
  iwlinks: []
  wikitext:
    text: "Mutator configuration within [[Legacy:UT2004|UT2004]] is handled very differently\
      \ from that in previous games (see [[Legacy:Mutator Config GUI (UT2003)|Mutator\
      \ Config GUI (UT2003)]]).  Rather than have a separate config window for each\
      \ mutator all [[Legacy:Mutator|mutator]]s share the same configuration.\n\n\
      ==Basic Requirements==\n\nThese are the basic elements needed to include configurable\
      \ options for a mutator. \n\n===Mutator GUI Functions ===\n\nEach mutator has\
      \ the option to add its configuration options as a separate ''group'' to an\
      \ existing configuration group.  This is handled by adding the following [[Legacy:Static\
      \ Function|static function]]s to the mutator you are writing.\n\n; static function\
      \ FillPlayInfo(PlayInfo PlayInfo) : Responsible for actually creating the GUI\
      \ widgets used to configure each option.\n; static event string GetDescriptionText(string\
      \ PropName) : Responsible for returning \"long\" descriptions of each of the\
      \ options.\n; static function string GetDisplayText(string PropName) : Repsonsible\
      \ for returning the displayed menu name of each of the options.  This function\
      \ is not strictly required but it keeps things consistent with the GameInfo\
      \ configuration code.\n\n===Mutator GUI Properties===\n\nIn addition to the\
      \ above functions your mutator will also have the following array properties.\
      \  The number of elements within the array should equal the number of configurable\
      \ items your mutator has.\n\nFor example, if your mutator has two configuration\
      \ options the the following arrays should be declared.  The size of the arrays\
      \ should match the number of properties you are attempting to configure.\n\n\
      <uscript>\nclass HitAndScore extends Mutator config (MutHitAndScore);\n\nvar\
      \ localized string GUIDisplayText[2]; // Config property label names\nvar localized\
      \ string GUIDescText[2];    // Config property long descriptions\n\n// If you\
      \ have any drop lists then you will want to add a localized array\n// variable\
      \ whose element count matches the number of selections within the drop list.\n\
      var localized string GUISelectOptions[2];\n</uscript>\n\n===Example Code===\n\
      \nThe following is some example code of GUI support for a mutator that counts\
      \ the hits taken and resets the player's score after a certain threshold is\
      \ reached.\n\n<uscript>\nvar config int HitCount;  // A counter for the number\
      \ of hits taken\nvar config int MaxHits;   // Number of hits before you lose\
      \ your score\n\nvar localized string GUIDisplayText[2]; // Config property label\
      \ names\nvar localized string GUIDescText[2];    // Config property long descriptions\n\
      \n// Mutator code and class definition snipped for clarity\n\n// The function\
      \ used to obtain the text that will be displayed within the\n// config window.\n\
      static function string GetDisplayText(string PropName) {\n  // The value of\
      \ PropName passed to the function should match the variable name\n  // being\
      \ configured.\n  switch (PropName) {\n    case \"HitCount\":  return default.GUIDisplayText[0];\n\
      \    case \"MaxHits\":  return default.GUIDisplayText[1];\n  }\n  return Super.GetDisplayText(PropName);\n\
      }\n\n// The function used to obtain the \"hint\" text that is displayed at the\
      \ bottom\n// of the config window.\nstatic event string GetDescriptionText(string\
      \ PropName) {\n  // The value of PropName passed to the function should match\
      \ the variable name\n  // being configured.\n  switch (PropName) {\n    case\
      \ \"HitCount\":  return default.GUIDescText[0];\n    case \"MaxHits\":  return\
      \ default.GUIDescText[1];\n  }\n  return Super.GetDescriptionText(PropName);\n\
      }\n\n// This function is called to actually add the configuration options for\
      \ the\n// mutator to the configuration window.\nstatic function FillPlayInfo(PlayInfo\
      \ PlayInfo) {\n  Super.FillPlayInfo(PlayInfo);  // Always begin with calling\
      \ parent\n\n  // The following function calls actually cause the configuration\
      \ options to be\n  // added to the mutator config window.  See below for a description\
      \ of how to\n  // use the PlayInfo.AddSetting() function.\n  PlayInfo.AddSetting(default.GameGroup,\
      \ \"HitCount\", GetDisplayText(\"HitCount\"), 0, 2, \"Text\", \"3;0:32\", \"\
      \", True, True);\n\n  PlayInfo.AddSetting(default.GameGroup, \"MaxHits\", GetDisplayText(\"\
      MaxHits\"), 0, 0, \"Text\", \"3;0:999\");\n\n  // Note that the second parameter,\
      \ and the value passed to the GetDisplayText()\n  // within the calls to the\
      \ AddSetting() function above matches the\n  // name of the attribute we want\
      \ to configure as declared within the class defintion\n}\n\ndefaultproperties\
      \ {\n  HitCount=8\n  MaxHits=500\n  GUIDisplayText[0]=\"Hit Count\"\n  GUIDisplayText[1]=\"\
      Max Hits\"\n  GUIDescText[0]=\"The number of hits each player can take\"\n \
      \ GUIDescText[1]=\"The number of hits that a player can take before their score\
      \ is reset\"\n\n  //Group these components when other mutator components are\
      \ configurable\n  GroupName = \"HitAndScore\"\n  //Display of mutator in mutator\
      \ list\n  FriendlyName = \"Hit And Score\"\n  //Description of mutator appearing\
      \ in GUI\n  description = \"mutator that counts the hits taken and resets the\
      \ player's score after a certain threshold is reached.\"\n}\n</uscript>\n\n\
      '''Note:''' If you are subclassing from an existing mutator, or from the [[Legacy:GameInfo|GameInfo]]\
      \ class then your GetDisplayText() and GetDescriptionText() functions should\
      \ include a call to the method defined within the superclass.  Be aware that\
      \ the inclusion of a GetDisplayText() function is considered good practice rather\
      \ than being mandatory so check that the function is defined within the superclass\
      \ before calling it. Note that on patch 3355, GetDisplayText will cause a compile\
      \ error, so you do not need this function when compiling for that environment.\n\
      \n==The PlayInfo.AddSetting() Function==\n\nThe PlayInfo.AddSetting() function\
      \ is defined as shown below.\n\n<uscript>\nnative(704) final function bool AddSetting(string\
      \ Group, string PropertyName, string Description, byte SecLevel, byte Weight,\
      \ string RenderType, optional string Extras, optional string ExtraPrivs, optional\
      \ bool bMultiPlayerOnly, optional bool bAdvanced);\n</uscript>\n\n===AddSetting()\
      \ Function Parameters===\n\nWhat follows is a description of each of the parameters\
      \ to the AddSetting() function.\n\n; Group : This is the group the setting falls\
      \ into.  Within the mutator config window this setting has no effect.  It is\
      \ used primarily to group similar properties together within the main \"game\"\
      \ and \"game rules\" windows.  The values used by the default UT2004 code are\
      \ defined within the /Engine/Info class and are as follows:\n; * default.RulesGroup\
      \ (\"Rules\")\n; * default.ServerGroup (\"Server\")\n; * default.BotsGroup (\"\
      Bots\")\n; * default.GameGroup (\"Game\")\n; * default.ChatGroup (\"Chat\")\n\
      ; * default.MapVoteGroup (\"Map Voting\")\n; * default.KickVoteGroup (\"Kick\
      \ Voting\")\n; PropertyName : This is the name of the property that this setting\
      \ relates to.  It must match exactly the name of the class configuration attribute\
      \ that this menu setting relates to.\n; Description : This is the label that\
      \ will be used when the configuration option is displayed within the GUI window.\n\
      ; SecLevel : This is the security level of the setting.  Values greater than\
      \ zero may require the user to be logged on (''Is this used more at the Web-Admin\
      \ level?'').  For a mutator it will generally be passed as 0.\n; Weight : This\
      \ is simply an value used to order the configuration options within the group.\
      \  For the purposes of the Mutator config screen it can be set to 0.\n; RenderType\
      \ : This is the type of widget to be used to alter the value of the property\
      \ being configured.  The allowed values are listed below.\n; * \"Check\"  Used\
      \ when a check boxes is required.\n; * \"Text\" - Used when a standard entry\
      \ field is required.\n; * \"Select\" - Used when a drop list is needed.\n; *\
      \ \"Custom\" - Used when an advanced configuration page (new window) is needed.\
      \  This value cannot be used within a mutator configuration setting.\n; Extras\
      \ : This parameter is used in conjunction with the RenderType parameter to determine\
      \ what is actually displayed.  The format for the string is described below.\n\
      ; ; Check : Ignored.\n; ; Text : This parameter can be in a number of different\
      \ forms\n; ; * \"value\" for the default value of the Text Edit box. \n; ; *\
      \ \"width;value\" for a Text Edit box with a given width and default value.\n\
      ; ; * \"width;lowest:highest\" for a Ranged Edit box that allows values between\
      \ the lowest and highest to be entered.  If the range is a float then the values\
      \ should be specified with a decimal point.\n; ; Select : The paramter should\
      \ be a semi-colon delimited list of value and name pairs.  For example \"value1;name1;value2;name2;value3;name3\"\
      .\n; ; Custom : This configuration type cannot be used in a mutator configuration.\
      \  However values are of the form: '''\"##;Package.WebHandlerClass;Package.CustomConfigPage\"\
      '''  <br />The first part generally indicates an optional width.  The second\
      \ part allows to specify the class that should handle rendering this property\
      \ in webadmin.  The third part is the classname of a custom GUI page for this\
      \ property.  All three parts are optional. <br />Couple of notes:\n; ; * The\
      \ semi-colons are only required if you are using the second or third part of\
      \ the field.  So valid values could be '''\"255\"''', '''\"255;;GUI2K4.MOTDConfigPage\"\
      ''' or '''\";;GUI2K4.MOTDConfigPage\"'''.\n; ; * The second part (webadmin support)\
      \ is currently not implemented, so any value you put here will be ignored.\n\
      ; ; * If you specify a custom config page, your property will appear in the\
      \ GUI list as a button.  Clicking this button opens the page you've specified.\
      \  You'd normally only need to do this for more complex properties, such as\
      \ structs.\n; ExtraPrivs : Used to specify any additional privileges that are\
      \ required in order for an admin to modify the value of this property from e.g.\
      \ webadmin.  You'd only use this field if have custom privilege classes (i.e.\
      \ subclasses of xPrivilegeBase), and then only in cases where you'd like the\
      \ property to appear in the same group as other properties, but only for certain\
      \ admins.<br /><br />Expected values would be the abbreviation for the corresponding\
      \ privilege type as listed in the SubPrivs value of your custom privilege class.\
      \  In order to require multiple privileges for this property, use the pipe character\
      \ as a delimiter. <br />For example, to have a property appear on the Game page,\
      \ but only if the admin also has the ability to kick players, you could specify\
      \ \"Game\" for the Group parameter, and \"Kp\" for this parameter.\n; bMultiPlayerOnly\
      \ : This parameter should be set to True if the configuration option only applies\
      \ within a mutliplayer game.\n; bAdvanced : This parameter should be set to\
      \ True if the configuration option should only be displayed when the \"Advanced\"\
      \ options checkbox is checked.\n\n==Advanced Configuration Support==\n\nIf you\
      \ need to pass on the PlayInfo object to other '''Info subclasses''' then after\
      \ the call to <tt>FillPlayInfo</tt> you should call the <tt>PlayInfo.PopClass()</tt>\
      \ function.  An example is given below.\n\n<uscript>\n// Example take from Engine/GameInfo.uc\
      \ FillPlayInfo() function\nstatic function FillPlayInfo(PlayInfo PlayInfo) {\n\
      \  Super.FillPlayInfo(PlayInfo);  // Always begin with calling parent\n// code\
      \ snipped\n  if (default.GameReplicationInfoClass != None) {\n    default.GameReplicationInfoClass.static.FillPlayInfo(PlayInfo);\n\
      \    PlayInfo.PopClass();\n  }\n// code snipped\n}\n</uscript>\n\nThe call to\
      \ <tt>Super.FillPlayInfo()</tt> performs an AddClass().  Not popping the class\
      \ off the stack will result in a different number of classes being held within\
      \ the PlayInfo's class stack on function exit than on function entry.\n\n==Related\
      \ Topics==\n* [[Legacy:Mutator Topics|Mutator Topics]]\n* [[Legacy:Mutator Availability\
      \ (UT2004)|Mutator Availability (UT2004)]]\n\n==Discussion==\n\n'''EntropicLqd:'''\
      \ Reset discussion and added real property names.\n\n'''GnaM:''' Maybe it's\
      \ just me, but this lesson seems pretty vague on how to actually use the 'extras'\
      \ parameters. After reading it, I understand that that I need to use a list\
      \ of names and values for \"select\", but I have no idea how to use those values\
      \ to actiate changes within the game. Perhaps a small simple example of how\
      \ to use each type of extra in the code would help. Anyway, it's also kind of\
      \ hard to find this lesson from the UScript topics page. It seems to me a link\
      \ right under the other mutator tutorials would be apropriate. Thanks.\n\n'''Foxpaw:'''\
      \ Just one minor point: this tutorial would likely be hard to follow, as it\
      \ is not a tutorial. ;) It's a reference, probrably aimed at people who already\
      \ have a general idea of what to do and are looking for specifics.\n\n'''Geist:'''\
      \ Remember, you need to declare your configurable vars with the ''config'' keyword.\
      \  Otherwise, they wont appear in the Configure Mutator dialog, and you'll get\
      \ runtime warnings in the log like \" Warning: Property 'HitCount' not found\
      \ in class 'Class MutHitAndScore.HitAndScore' \" when opening that dialog. \
      \ This was very confusing at first, since HitCount is definitely there, but\
      \ it just wasn't a ''configurable property'' (slightly misleading warning message,\
      \ I guess).  I've made the corrections in the script above.\n\n'''LionsHeart:'''\
      \ I have a slight confusion on what I should do...I'm not sure what I should\
      \ do with the PropName string.  Do I set it equal to something?  If would would\
      \ like to give me a hand quickly, email me at LionsHeart455@hotmail.com.  Thanks!\n\
      \n'''Geist:''' Take a look at how ''PropName'' is used the functions.  ''PropName''\
      \ is used in the switch() of both GetDisplayText() and GetDescriptionText()\
      \ as a key to what strings to return.  These strings are then displayed in the\
      \ ''Mutator Configuration'' screen in the game.\n\n'''Devi:''' I found this\
      \ pretty helpful, I managed to add a config window to my mutator in about 20\
      \ minutes with it =)\n\n'''Sir_Brizz:''' Shouldn't we add the ability to create\
      \ a seperate Config Page to this page as well?\n\n'''SuperApe:''' I added the\
      \ following line to the end of the GetDescriptionText() event code above...<uscript>return\
      \ Super.GetDescriptionText(PropName);</uscript>...It appears to be necessary.\
      \  And am I correct in assuming that while the GetDisplayText() function can\
      \ be called whatever, the GetDescriptionText() event must be explicitly named\
      \ so? (Please correct me if I'm wrong on any of this.) My question is this:\
      \ How can I have a checkbox property ''enable'' another PlayInfo setting?  IOW,\
      \ a main option \"Allow Foo\" check box is available, but a greyed out (or non-existant)\
      \ sub-option \"Start with Foo\" check box will not be available unless the \"\
      Allow Foo\" box is checked.  Is something like that possible with the UT2004\
      \ GUI system?\n\n'''Wormbo:''' GetDisplayText() is only a helper function for\
      \ this class, but GetDescriptionText() is an engine event.\n\n'''SuperApe:'''\
      \ That's what I figured.  Thank you.  Now, about my question of enabling/disabling\
      \ Mutator config option widgets: I see an example of what I'm looking for in\
      \ the standard game config for bots.  If you select Bot Mode: \"Specify Number\"\
      \ (as opposed to \"Use Map Defaults\"), the \"Number of Bots\" widget is enabled.\
      \  That is what I'm looking for and it's not apparent to me, in the code, how\
      \ this works.  Is this functionality even available to Mutator configs?\n\n\
      '''Wormbo:''' This information can't be stored in [[Legacy:PlayInfo|PlayInfo]],\
      \ so the functionality is not available in [[Legacy:PlayInfo|PlayInfo]]-generated\
      \ config menus like the mutator configuration.\n\n'''SuperApe:''' Thank you\
      \ for clearing that up, Wormbo.\n\n'''Bitty:''' Added the following to GetDisplayText()...\n\
      \n<uscript>return Super.GetDisplayText(PropName);</uscript>\n\nIt's necessary\
      \ to do this to prevent some of the default settings descriptions from disappearing\
      \ in the UI.  Also, these functions are not limited to mutators, but can also\
      \ be used in custom gametype classes.  Another thing you may want to mention\
      \ here is if you have a lot of configurable options, you can create separate\
      \ configuration sections by doing the following in FillPlayInfo()...\n\n<uscript>\n\
      static function FillPlayInfo(PlayInfo PlayInfo)\n{\n  local string MyGroup;\n\
      \n  Super.FillPlayInfo(PlayInfo);\n\n  MyGroup=\"My Config Section\";\n  PlayInfo.AddSetting(MyGroup,\
      \ \"bAddEffect\", GetDisplayText(\"bAddEffect\"), 0, 1, \"Check\");\n  // code\
      \ snipped\n}\n</uscript>\n\n'''mad:''' Added some lines to show how to change\
      \ what is displayed in the mutator list. The above code by Bitty will also pretty\
      \ much do the same thing. Also, when I tried to add GetDisplayText function\
      \ to my mutator, there was a compile error. I have patch 3355, so this may be\
      \ the reason why I get compilation errors. I added a note about this below the\
      \ main class code up top.\n\n\n'''me:'''Any ways to change a guns prop(Damage)\
      \ with a guid page, if so how?\n\n[[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 34181
name: "Legacy:Mutator Config GUI (UT2004)"
revision:
  revid: 34181
  parentid: 34180
  user: "128.151.80.181"
  timestamp: 1238466587.000000000
  comment: "/* Example Code */"
timestamp: 1668763658.421110000
