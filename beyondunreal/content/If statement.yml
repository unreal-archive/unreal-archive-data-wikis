---
parse:
  title: "If statement"
  text:
    text: "<p>The <b>if</b> statement provides a simple way to branch code execution\
      \ paths based on a condition. When the condition is met, a certain piece of\
      \ code can be executed and optionally, when the condition is not met, another\
      \ piece of code can be executed.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Syntax\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Syntax</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#.22ElseIf.22_statement\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">\"ElseIf\" statement</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#The_.22dangling_else.22_problem\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">The \"dangling else\" problem</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Related_concepts\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related concepts</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Syntax\">Syntax</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/If_statement?section=1\" title=\"Edit section: Syntax\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The simple <b>if</b>\
      \ statement looks as follows:</p>\n<pre><b>if (</b><i>condition</i><b>)</b>\n\
      \  <i>statement</i><b>;</b>\n</pre>\n<p>The <i>condition</i> is a <a href=\"\
      /edit/Boolean?redlink=1\" class=\"new\" title=\"Boolean (page does not exist)\"\
      >boolean</a> expression and if it evaluates to <i>True</i> at runtime, the <i>statement</i>\
      \ is executed.</p>\n<p>If more than one code statement should be executed, simply\
      \ enclose them all in curly braces:</p>\n<pre><b>if (</b><i>condition</i><b>)\
      \ {</b>\n  ...\n<b>}</b>\n</pre>\n<p>Additionally, when the <i>condition</i>\
      \ evaluates to <i>False</i>, a different piece of code can be executed:</p>\n\
      <pre><b>if (</b><i>condition</i><b>)</b>\n  <i>statement</i><b>;</b>\n<b>else</b>\n\
      \  <i>statement</i><b>;</b>\n</pre>\n<p>Of course, this also works with a block\
      \ of code:</p>\n<pre><b>if (</b><i>condition</i><b>) {</b>\n  ...\n<b>} else\
      \ {</b>\n  ...\n<b>}</b>\n</pre>\n<p>You can even combine the block and simple\
      \ forms:</p>\n<pre><b>if (</b><i>condition</i><b>) {</b>\n  ...\n<b>}</b>\n\
      <b>else</b>\n  <i>statement</i><b>;</b>\n</pre>\n<p>...or:</p>\n<pre><b>if (</b><i>condition</i><b>)</b>\n\
      \  <i>statement</i><b>;</b>\n<b>else {</b>\n  ...\n<b>}</b>\n</pre>\n<p>To prevent\
      \ confusion, it may be a good idea to always use curly braces, even if you only\
      \ put a single statement after the <b>if</b> or <b>else</b> part.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\".22ElseIf.22_statement\">\"ElseIf\" statement</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/If_statement?section=2\" title=\"Edit section: &quot;ElseIf&quot;\
      \ statement\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The <b>if</b> statement in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a> does not support an \"elseif\" clause, like e.g. BASIC dialects\
      \ do. Instead, you can simply add another <b>if</b> clause in the <b>else</b>\
      \ part:</p>\n<pre><b>if (</b><i>condition1</i><b>) {</b>\n  ...\n<b>} else if\
      \ (</b><i>condition2</i><b>) {</b>\n  ...\n<b>} else if (</b><i>condition3</i><b>)\
      \ {</b>\n  ...\n<b>} else {</b>\n  ...\n<b>}</b>\n</pre>\n<h2><span class=\"\
      mw-headline\" id=\"The_.22dangling_else.22_problem\">The \"dangling else\" problem</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/If_statement?section=3\" title=\"Edit section: The &quot;dangling\
      \ else&quot; problem\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Consider the following example code:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>a<span class=\"\
      br0\">)</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>b<span\
      \ class=\"br0\">)</span>\n    doSomething<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n<span class=\"kw2\">else</span>\n  doSomethingElse<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>This looks\
      \ highly ambigious. Which <b>if</b> does the <b>else</b> belong to? Indenting\
      \ would suggest it belongs to the first <b>if</b> statement. However, the compiler\
      \ ignores all indenting, so the <b>else</b> may as well belong to the second\
      \ <b>if</b> statement.</p>\n<p>Using curly braces, the above code may look as\
      \ follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>b<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    doSomething<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span>\n<span class=\"br0\">}</span> <span class=\"kw2\">else</span> <span\
      \ class=\"br0\">{</span>\n  doSomethingElse<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Or like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    doSomething<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\"\
      >}</span> <span class=\"kw2\">else</span> <span class=\"br0\">{</span>\n   \
      \ doSomethingElse<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Obviously these two implementations are not the same, but which one\
      \ would be used if you left out the curly braces?</p>\n<p>This problem is called\
      \ \"dangling else\" and the compiler solves it by applying a simple rule: <i>An\
      \ else statement always belongs to the inner-most preceeding if statement.</i>\
      \ In our case, this is the \"if (b) statement\".</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_concepts\">Related concepts</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/If_statement?section=4\"\
      \ title=\"Edit section: Related concepts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Conditional_operator\" title=\"\
      Conditional operator\" class=\"mw-redirect\">Conditional operator</a> (for conditionally\
      \ evaluating expressions)</li>\n<li><a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch statement</a> (for executing different code branches based\
      \ on the value of an expression)</li>\n</ul>\n<table class=\"navbox nowraplinks\"\
      \ style=\"\">\n<tr class=\"navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\"\
      \ style=\"\">\n<div style=\"position:relative; width:100%; white-space:nowrap;\"\
      >\n<div class=\"noprint plainlinks\" style=\"background-color:transparent; padding:0;\
      \ font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <strong class=\"\
      selflink\">If</strong>&#160;• <a href=\"/Assert_statement\" title=\"Assert statement\"\
      >Assert</a>&#160;• <a href=\"/Return_statement\" title=\"Return statement\"\
      >Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop statement\">Stop</a>&#160;•\
      \ <a href=\"/Switch_statement\" title=\"Switch statement\">Switch</a>&#160;•\
      \ <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;• <a href=\"/Do...Until_loop\"\
      \ title=\"Do...Until loop\">Do...Until</a>&#160;• <a href=\"/For_loop\" title=\"\
      For loop\">For</a>&#160;• <a href=\"/ForEach_loop\" title=\"ForEach loop\">ForEach</a>&#160;•\
      \ <a href=\"/Break_statement\" title=\"Break statement\">Break</a>&#160;• <a\
      \ href=\"/Continue_statement\" title=\"Continue statement\">Continue</a></td>\n\
      </tr>\n<tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Specifiers\" title=\"Specifiers\">Specifiers</a></th>\n<td class=\"\
      navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\" title=\"\
      Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.139 seconds\nReal time usage: 0.365 seconds\nPreprocessor\
      \ visited node count: 204/1000000\nPreprocessor generated node count: 941/1000000\n\
      Post‐expand include size: 10630/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   83.857      1 - -total\n100.00%   83.857      1 - Template:Navbox_unrealscript\n\
      \ 72.25%   60.590      1 - Template:Navbox\n 10.85%    9.102      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:23810-0!*!0!!en!*!*\
      \ and timestamp 20221117232758 and revision id 34013\n -->\n"
  categories:
  - sortkey: "If statement"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: false
    name: "Boolean"
  - ns: 0
    exists: true
    name: "Conditional operator"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Quat"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Syntax"
    number: "1"
    index: "1"
    fromtitle: "If_statement"
    byteoffset: 252
    anchor: "Syntax"
  - toclevel: 1
    level: "2"
    line: "\"ElseIf\" statement"
    number: "2"
    index: "2"
    fromtitle: "If_statement"
    byteoffset: 1328
    anchor: ".22ElseIf.22_statement"
  - toclevel: 1
    level: "2"
    line: "The \"dangling else\" problem"
    number: "3"
    index: "3"
    fromtitle: "If_statement"
    byteoffset: 1709
    anchor: "The_.22dangling_else.22_problem"
  - toclevel: 1
    level: "2"
    line: "Related concepts"
    number: "4"
    index: "4"
    fromtitle: "If_statement"
    byteoffset: 2722
    anchor: "Related_concepts"
  displaytitle: "If statement"
  iwlinks: []
  wikitext:
    text: "The '''if''' statement provides a simple way to branch code execution paths\
      \ based on a condition. When the condition is met, a certain piece of code can\
      \ be executed and optionally, when the condition is not met, another piece of\
      \ code can be executed.\n\n==Syntax==\nThe simple '''if''' statement looks as\
      \ follows:\n '''if ('''''condition''''')'''\n   ''statement''''';'''\nThe ''condition''\
      \ is a [[boolean]] expression and if it evaluates to ''True'' at runtime, the\
      \ ''statement'' is executed.\n\nIf more than one code statement should be executed,\
      \ simply enclose them all in curly braces:\n '''if ('''''condition''''') {'''\n\
      \   ...\n '''}'''\n\nAdditionally, when the ''condition'' evaluates to ''False'',\
      \ a different piece of code can be executed:\n '''if ('''''condition''''')'''\n\
      \   ''statement''''';'''\n '''else'''\n   ''statement''''';'''\nOf course, this\
      \ also works with a block of code:\n '''if ('''''condition''''') {'''\n   ...\n\
      \ '''} else {'''\n   ...\n '''}'''\nYou can even combine the block and simple\
      \ forms:\n '''if ('''''condition''''') {'''\n   ...\n '''}'''\n '''else'''\n\
      \   ''statement''''';'''\n...or:\n '''if ('''''condition''''')'''\n   ''statement''''';\n\
      \ '''else {'''\n   ...\n '''}'''\nTo prevent confusion, it may be a good idea\
      \ to always use curly braces, even if you only put a single statement after\
      \ the '''if''' or '''else''' part.\n\n==\"ElseIf\" statement==\nThe '''if'''\
      \ statement in [[UnrealScript]] does not support an \"elseif\" clause, like\
      \ e.g. BASIC dialects do. Instead, you can simply add another '''if''' clause\
      \ in the '''else''' part:\n '''if ('''''condition1''''') {'''\n   ...\n '''}\
      \ else if ('''''condition2''''') {'''\n   ...\n '''} else if ('''''condition3''''')\
      \ {'''\n   ...\n '''} else {'''\n   ...\n '''}'''\n\n==The \"dangling else\"\
      \ problem==\nConsider the following example code:\n<uscript>\nif (a)\n  if (b)\n\
      \    doSomething();\nelse\n  doSomethingElse();\n</uscript>\nThis looks highly\
      \ ambigious. Which '''if''' does the '''else''' belong to? Indenting would suggest\
      \ it belongs to the first '''if''' statement. However, the compiler ignores\
      \ all indenting, so the '''else''' may as well belong to the second '''if'''\
      \ statement.\n\nUsing curly braces, the above code may look as follows:\n<uscript>\n\
      if (a) {\n  if (b) {\n    doSomething();\n  }\n} else {\n  doSomethingElse();\n\
      }\n</uscript>\nOr like this:\n<uscript>\nif (a) {\n  if (b) {\n    doSomething();\n\
      \  } else {\n    doSomethingElse();\n  }\n}\n</uscript>\nObviously these two\
      \ implementations are not the same, but which one would be used if you left\
      \ out the curly braces?\n\nThis problem is called \"dangling else\" and the\
      \ compiler solves it by applying a simple rule: ''An else statement always belongs\
      \ to the inner-most preceeding if statement.'' In our case, this is the \"if\
      \ (b) statement\".\n\n==Related concepts==\n* [[Conditional operator]] (for\
      \ conditionally evaluating expressions)\n* [[Switch statement]] (for executing\
      \ different code branches based on the value of an expression)\n\n{{navbox unrealscript}}"
  properties: []
  revId: 34013
name: "If statement"
revision:
  revid: 34013
  parentid: 33132
  user: "Wormbo"
  timestamp: 1234163121.000000000
  comment: "added related links to switch and conditional operator"
timestamp: 1668754853.592701000
