---
parse:
  title: "Legacy:Subobject"
  text:
    text: "<p>In <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> it is possible to define <b>subobjects</b> in the <a href=\"/Legacy:Default_Properties\"\
      \ title=\"Legacy:Default Properties\">defaultproperties</a> section of a class.</p>\n\
      <p>This technique is frequently used to set up <a href=\"/Legacy:GUIComponent\"\
      \ title=\"Legacy:GUIComponent\">GUI controls</a> for dialog boxes, but it can\
      \ also be used for other purposes – it's equally possible to create a <a href=\"\
      /Legacy:ScriptedTexture\" title=\"Legacy:ScriptedTexture\">ScriptedTexture</a>\
      \ object or whole <a href=\"/Legacy:Material\" title=\"Legacy:Material\">Material</a>\
      \ systems.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> <span class=\"kw5\">bool</span> MyScaryButton_Click<span class=\"\
      br0\">(</span>GUIComponent Sender<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw3\">Log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"User clicked Booo!\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw2\">Begin</span> <span class=\"\
      kw8\">Object</span> <span class=\"kw1\">Class</span><span class=\"sy0\">=</span>GUIButton\
      \ <span class=\"kw5\">Name</span><span class=\"sy0\">=</span>MyScaryButton\n\
      \        Caption   <span class=\"sy0\">=</span> <span class=\"st0\">\"Booo!\"\
      </span>;\n        WinTop    <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0.800</span>;\n        WinLeft   <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0.100</span>;\n        WinWidth  <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0.300</span>;\n        WinHeight <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0.040</span>;\n        StyleName <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"RoundButton\"</span>;\n        OnClick   <span class=\"sy0\">=</span>\
      \ MyScaryButton_Click;\n    End <span class=\"kw8\">Object</span>\n \n    Controls<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> GUIButton<span class=\"st0\">'MyScaryButton'</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Subobjects are <b>private\
      \ to the defaultproperties section</b> they are defined in. They cannot be referenced\
      \ by their name from outside it. You can however, access the original subobject\
      \ by using default.Controls[0] (in the above example).</p>\n<p>In addition,\
      \ subobjects act as a template for actual objects that are created when the\
      \ parent object they are defined in is created. <b>Every reference creates a\
      \ new instance</b> of a subobject; so in the following example, <code>Controls[0]</code>\
      \ and <code>MyVeryScaryButton</code> would point to two distinct, different\
      \ objects:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">Begin</span> <span class=\"kw8\">Object</span> <span class=\"kw1\">Class</span><span\
      \ class=\"sy0\">=</span>GUIButton <span class=\"kw5\">Name</span><span class=\"\
      sy0\">=</span>MyScaryButton\n      <span class=\"co1\">// ...</span>\n    End\
      \ <span class=\"kw8\">Object</span>\n \n    Controls<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>       <span class=\"sy0\"\
      >=</span> GUIButton<span class=\"st0\">'MyScaryButton'</span>;\n    MyVeryScaryButton\
      \ <span class=\"sy0\">=</span> GUIButton<span class=\"st0\">'MyScaryButton'</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Here is an example of a\
      \ <a href=\"/Legacy:ColorModifier\" title=\"Legacy:ColorModifier\">ColorModifier</a>\
      \ object defined at compile time. It takes a single (white) icon texture and\
      \ creates a red and a blue team version of it:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">defaultproperties</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw2\">Begin</span> <span class=\"kw8\">Object</span>\
      \ <span class=\"kw1\">Class</span><span class=\"sy0\">=</span><span class=\"\
      kw5\">ColorModifier</span> <span class=\"kw5\">Name</span><span class=\"sy0\"\
      >=</span>IconPlayerRed\n        <span class=\"kw5\">Material</span> <span class=\"\
      sy0\">=</span> <span class=\"kw5\">Texture</span><span class=\"st0\">'IconPlayer'</span>;\n\
      \        <span class=\"kw5\">Color</span> <span class=\"sy0\">=</span> <span\
      \ class=\"br0\">(</span>R<span class=\"sy0\">=</span><span class=\"nu0\">255</span>,G<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>,B<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;\n    End <span class=\"\
      kw8\">Object</span>\n \n    <span class=\"kw2\">Begin</span> <span class=\"\
      kw8\">Object</span> <span class=\"kw1\">Class</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">ColorModifier</span> <span class=\"kw5\">Name</span><span class=\"\
      sy0\">=</span>IconPlayerBlue\n        <span class=\"kw5\">Material</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">Texture</span><span class=\"st0\"\
      >'IconPlayer'</span>;\n        <span class=\"kw5\">Color</span> <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>R<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>,G<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,B<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>;\n\
      \    End <span class=\"kw8\">Object</span>\n \n    IconMaterial<span class=\"\
      br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">Material</span><span class=\"st0\"\
      >'IconPlayerRed'</span>;\n    IconMaterial<span class=\"br0\">[</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">Material</span><span class=\"st0\">'IconPlayerBlue'</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>Note:</b> These subobjects\
      \ are created when importing the default properties, i.e. in the compiler's\
      \ last pass over all classes. This means referencing them in the default properties\
      \ of other classes only works if those classes' default properties are processed\
      \ after the class with the subobject. However, this order isn't guaranteed,\
      \ so a project which compiles fine on one computer may not compile on a different\
      \ one if a class using a different class's subobjects (e.g. a texture modifier)\
      \ is suddenly parsed, compiled and imported before the class containing the\
      \ subobject.</p>\n<h2><span class=\"mw-headline\" id=\"Problems\">Problems</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Subobject?section=1\" title=\"Edit section: Problems\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span\
      \ class=\"mw-headline\" id=\"Exporting\">Exporting</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Subobject?section=2\"\
      \ title=\"Edit section: Exporting\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a> inline objects are always lost when sources\
      \ are exported from <a href=\"/Legacy:UnrealEd\" title=\"Legacy:UnrealEd\" class=\"\
      mw-redirect\">UnrealEd</a> or via the <a href=\"/Legacy:BatchExportCommandlet\"\
      \ title=\"Legacy:BatchExportCommandlet\">BatchExportCommandlet</a>. In <a href=\"\
      /Legacy:UT2004\" title=\"Legacy:UT2004\" class=\"mw-redirect\">UT2004</a> they\
      \ will be exported unless the property they are assigned to or the subobject\
      \ class itself is declared as <b>noexport</b>.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Spawning\">Spawning</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Subobject?section=3\"\
      \ title=\"Edit section: Spawning\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you have an actor class with a subobject, and you\
      \ spawn an actor of that class... does that create a new instance of the subobject\
      \ too?</p>\n<ul>\n<li>in GUI classes, yes</li>\n<li>in Actor classes, we're\
      \ not sure&#160;:( Seems sometimes not, but <a href=\"/Legacy:Emitter\" title=\"\
      Legacy:Emitter\">Emitters</a> seem to do it.</li>\n</ul>\n<ul>\n<li>Yes, if\
      \ you are spawning a subclass of an instanced class, other wise the last actor\
      \ to spawn gets control of all the other actors of the same tree's sub objects...</li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.075 seconds\nReal time\
      \ usage: 0.242 seconds\nPreprocessor visited node count: 38/1000000\nPreprocessor\
      \ generated node count: 76/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2805-0!*!0!!*!*!* and timestamp\
      \ 20221118115702 and revision id 7513\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Material"
  - ns: 100
    exists: true
    name: "Legacy:GUIComponent"
  - ns: 100
    exists: true
    name: "Legacy:BatchExportCommandlet"
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  - ns: 100
    exists: true
    name: "Legacy:ColorModifier"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTexture"
  - ns: 100
    exists: true
    name: "Legacy:Emitter"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Problems"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Subobject"
    byteoffset: 2886
    anchor: "Problems"
  - toclevel: 2
    level: "3"
    line: "Exporting"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Subobject"
    byteoffset: 2900
    anchor: "Exporting"
  - toclevel: 2
    level: "3"
    line: "Spawning"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Subobject"
    byteoffset: 3256
    anchor: "Spawning"
  displaytitle: "Legacy:Subobject"
  iwlinks: []
  wikitext:
    text: "In [[Legacy:UT2003|UT2003]] it is possible to define '''subobjects''' in\
      \ the [[Legacy:Default Properties|defaultproperties]] section of a class.\n\n\
      This technique is frequently used to set up [[Legacy:GUIComponent|GUI controls]]\
      \ for dialog boxes, but it can also be used for other purposes &ndash; it's\
      \ equally possible to create a [[Legacy:ScriptedTexture|ScriptedTexture]] object\
      \ or whole [[Legacy:Material|Material]] systems.\n\n<uscript>\nfunction bool\
      \ MyScaryButton_Click(GUIComponent Sender)\n{\n    Log(\"User clicked Booo!\"\
      );\n}\n\ndefaultproperties\n{\n    Begin Object Class=GUIButton Name=MyScaryButton\n\
      \        Caption   = \"Booo!\";\n        WinTop    = 0.800;\n        WinLeft\
      \   = 0.100;\n        WinWidth  = 0.300;\n        WinHeight = 0.040;\n     \
      \   StyleName = \"RoundButton\";\n        OnClick   = MyScaryButton_Click;\n\
      \    End Object\n\n    Controls[0] = GUIButton'MyScaryButton';\n}\n</uscript>\n\
      \nSubobjects are '''private to the defaultproperties section''' they are defined\
      \ in.  They cannot be referenced by their name from outside it.  You can however,\
      \ access the original subobject by using default.Controls[0] (in the above example).\n\
      \nIn addition, subobjects act as a template for actual objects that are created\
      \ when the parent object they are defined in is created.  '''Every reference\
      \ creates a new instance''' of a subobject; so in the following example, <code>Controls[0]</code>\
      \ and <code>MyVeryScaryButton</code> would point to two distinct, different\
      \ objects:\n\n<uscript>\ndefaultproperties\n{\n    Begin Object Class=GUIButton\
      \ Name=MyScaryButton\n      // ...\n    End Object\n\n    Controls[0]      \
      \ = GUIButton'MyScaryButton';\n    MyVeryScaryButton = GUIButton'MyScaryButton';\n\
      }\n</uscript>\n\nHere is an example of a [[Legacy:ColorModifier|ColorModifier]]\
      \ object defined at compile time.  It takes a single (white) icon texture and\
      \ creates a red and a blue team version of it:\n\n<uscript>\ndefaultproperties\n\
      {\n    Begin Object Class=ColorModifier Name=IconPlayerRed\n        Material\
      \ = Texture'IconPlayer';\n        Color = (R=255,G=0,B=0);\n    End Object\n\
      \n    Begin Object Class=ColorModifier Name=IconPlayerBlue\n        Material\
      \ = Texture'IconPlayer';\n        Color = (R=0,G=0,B=255);\n    End Object\n\
      \n    IconMaterial[0] = Material'IconPlayerRed';\n    IconMaterial[1] = Material'IconPlayerBlue';\n\
      }\n</uscript>\n\n'''Note:''' These subobjects are created when importing the\
      \ default properties, i.e. in the compiler's last pass over all classes. This\
      \ means referencing them in the default properties of other classes only works\
      \ if those classes' default properties are processed after the class with the\
      \ subobject. However, this order isn't guaranteed, so a project which compiles\
      \ fine on one computer may not compile on a different one if a class using a\
      \ different class's subobjects (e.g. a texture modifier) is suddenly parsed,\
      \ compiled and imported before the class containing the subobject.\n\n==Problems==\n\
      \n===Exporting===\n\nIn [[Legacy:UT2003|UT2003]] inline objects are always lost\
      \ when sources are exported from [[Legacy:UnrealEd|UnrealEd]] or via the [[Legacy:BatchExportCommandlet|BatchExportCommandlet]].\
      \ In [[Legacy:UT2004|UT2004]] they will be exported unless the property they\
      \ are assigned to or the subobject class itself is declared as '''noexport'''.\n\
      \n===Spawning===\n\nIf you have an actor class with a subobject, and you spawn\
      \ an actor of that class... does that create a new instance of the subobject\
      \ too? \n\n* in GUI classes, yes\n* in Actor classes, we're not sure :( Seems\
      \ sometimes not, but [[Legacy:Emitter|Emitter]]s seem to do it.\n\n* Yes, if\
      \ you are spawning a subclass of an instanced class, other wise the last actor\
      \ to spawn gets control of all the other actors of the same tree's sub objects..."
  properties: []
  revId: 7513
name: "Legacy:Subobject"
revision:
  revid: 7513
  parentid: 7514
  user: "Hsoolien"
  timestamp: 1127170814.000000000
  comment: "*"
timestamp: 1668774346.412019000
