---
parse:
  title: "Legacy:Replication Examples/Emitter replication"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Emitter_replication_example\">Emitter\
      \ replication example</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Replication_Examples/Emitter_replication?section=1\"\
      \ title=\"Edit section: Emitter replication example\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>This emitter is based on Spiral.uc\
      \ emitter that is used in game to spawn those flares marking item pickup locations.\
      \ This emitter allows to change the color of these flare at runtime by calling\
      \ functions SetFirstColor(Color firstC) and SetSecondColor(Color secondC).</p>\n\
      <p>Note: This emitter works in UT2004.<br /></p>\n<hr />\n<p><br /></p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec OBJ LOAD FILE=EpicParticles.utx</span>\n\
      \ \n<span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"co1\">// by Shadow_knight</span>\n<span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"kw1\">class</span> ChangingEmitter <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Emitter</span>;\n \n<span class=\"co1\">//here we will\
      \ store colors that will be used by the emitter</span>\n<span class=\"kw1\"\
      >var</span> <span class=\"kw5\">color</span> FirstColor;\n<span class=\"kw1\"\
      >var</span> <span class=\"kw5\">color</span> SecondColor;\n \n<span class=\"\
      co1\">//We need to replicate the variables FirstColor and SecondColor to clients</span>\n\
      <span class=\"kw1\">replication</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">reliable</span> <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span><span class=\"kw7\">Role</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw7\">Role_Authority</span><span class=\"br0\">)</span>\n  \
      \  FirstColor, SecondColor;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">//this function sets the FirstColor variable to desired value, it is simulated\
      \ so it will set the FirstColor also on client</span>\n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> SetFirstColor<span class=\"br0\">(</span><span\
      \ class=\"kw5\">Color</span> firstC<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\tFirstColor <span class=\"sy0\">=</span> firstC;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"co1\">//same as previous function except it\
      \ will set SecondColor</span>\n<span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">function</span> SetSecondColor<span class=\"br0\">(</span><span class=\"\
      kw5\">Color</span> secondC<span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n\tSecondColor <span class=\"sy0\">=</span> secondC;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"co1\">//This is our key function. This function\
      \ is called on clients if the actor has set bNetNotify to true</span>\n<span\
      \ class=\"co1\">//Here we will set the emitter to use our color variables</span>\n\
      <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">PostNetReceive</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\tEmitters<span class=\"br0\"\
      >[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"\
      me0\">ColorScale</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>.<span class=\"kw5\">Color</span> <span class=\"sy0\"\
      >=</span> FirstColor;\n\tEmitters<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">ColorScale</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span\
      \ class=\"kw5\">Color</span> <span class=\"sy0\">=</span> SecondColor;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"co1\">//The SpriteEmitter object\
      \ here is copy paste from original UT class Spiral.uc</span>\n    <span class=\"\
      kw2\">Begin</span> <span class=\"kw8\">Object</span> <span class=\"kw1\">Class</span><span\
      \ class=\"sy0\">=</span><span class=\"kw8\">SpriteEmitter</span> <span class=\"\
      kw5\">Name</span><span class=\"sy0\">=</span>SpriteEmitter2\n\tUseColorScale<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n        ColorScale<span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw5\">Color</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>B<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">255</span>,G<span class=\"sy0\">=</span><span class=\"nu0\"\
      >255</span>,R<span class=\"sy0\">=</span><span class=\"nu0\">255</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        ColorScale<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span class=\"\
      sy0\">=</span><span class=\"nu0\">0.200000</span>,<span class=\"kw5\">Color</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>G<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">170</span>,R<span class=\"sy0\">=</span><span class=\"nu0\"\
      >255</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n      \
      \  ColorScale<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"\
      br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1.000000</span>,<span class=\"kw5\"\
      >Color</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>G<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">217</span>,R<span class=\"sy0\"\
      >=</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n        FadeOutStartTime<span class=\"sy0\">=</span><span class=\"\
      nu0\">1.300000</span>\n        FadeOut<span class=\"sy0\">=</span><span class=\"\
      kw6\">True</span>\n        FadeInEndTime<span class=\"sy0\">=</span><span class=\"\
      nu0\">0.250000</span>\n        FadeIn<span class=\"sy0\">=</span><span class=\"\
      kw6\">True</span>\n        MaxParticles<span class=\"sy0\">=</span><span class=\"\
      nu0\">15</span>\n        StartLocationShape<span class=\"sy0\">=</span>PTLS_Sphere\n\
      \        SphereRadiusRange<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Min</span><span class=\"sy0\">=</span><span class=\"nu0\">16.000000</span>,<span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">16.000000</span><span\
      \ class=\"br0\">)</span>\n        RevolutionsPerSecondRange<span class=\"sy0\"\
      >=</span><span class=\"br0\">(</span>Z<span class=\"sy0\">=</span><span class=\"\
      br0\">(</span><span class=\"kw3\">Min</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0.200000</span>,<span class=\"kw3\">Max</span><span class=\"\
      sy0\">=</span><span class=\"nu0\">0.500000</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n        RevolutionScale<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>RelativeRevolution<span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>Z<span class=\"sy0\">=</span><span class=\"nu0\">2.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        RevolutionScale<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span class=\"\
      sy0\">=</span><span class=\"nu0\">0.600000</span><span class=\"br0\">)</span>\n\
      \        RevolutionScale<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1.000000</span>,RelativeRevolution<span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>Z<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">2.000000</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>\n        SpinsPerSecondRange<span class=\"sy0\">=</span><span class=\"\
      br0\">(</span>X<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">4.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        StartSizeRange<span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span><span class=\"kw3\">Min</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">4.000000</span>,<span class=\"kw3\">Max</span><span class=\"\
      sy0\">=</span><span class=\"nu0\">4.000000</span><span class=\"br0\">)</span>,Y<span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw3\">Min</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">4.000000</span>,<span class=\"kw3\"\
      >Max</span><span class=\"sy0\">=</span><span class=\"nu0\">4.000000</span><span\
      \ class=\"br0\">)</span>,Z<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Min</span><span class=\"sy0\">=</span><span class=\"nu0\">8.000000</span>,<span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">8.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        UniformSize<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n        <span class=\"\
      kw5\">Texture</span><span class=\"sy0\">=</span><span class=\"kw5\">Texture</span><span\
      \ class=\"st0\">'EpicParticles.Flares.HotSpot'</span>\n        LifetimeRange<span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw3\">Min</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1.600000</span>,<span class=\"kw3\"\
      >Max</span><span class=\"sy0\">=</span><span class=\"nu0\">1.600000</span><span\
      \ class=\"br0\">)</span>\n        StartVelocityRadialRange<span class=\"sy0\"\
      >=</span><span class=\"br0\">(</span><span class=\"kw3\">Min</span><span class=\"\
      sy0\">=-</span><span class=\"nu0\">20.000000</span>,<span class=\"kw3\">Max</span><span\
      \ class=\"sy0\">=-</span><span class=\"nu0\">20.000000</span><span class=\"\
      br0\">)</span>\n        VelocityLossRange<span class=\"sy0\">=</span><span class=\"\
      br0\">(</span>X<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Min</span><span class=\"sy0\">=</span><span class=\"nu0\">0.200000</span>,<span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">0.200000</span><span\
      \ class=\"br0\">)</span>,Y<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Min</span><span class=\"sy0\">=</span><span class=\"nu0\">0.200000</span>,<span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">0.200000</span><span\
      \ class=\"br0\">)</span>,Z<span class=\"sy0\">=</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Min</span><span class=\"sy0\">=</span><span class=\"nu0\">1.000000</span>,<span\
      \ class=\"kw3\">Max</span><span class=\"sy0\">=</span><span class=\"nu0\">1.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        GetVelocityDirectionFrom<span\
      \ class=\"sy0\">=</span>PTVD_AddRadial\n        UseVelocityScale<span class=\"\
      sy0\">=</span><span class=\"kw6\">True</span>\n        VelocityScale<span class=\"\
      br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeVelocity<span class=\"\
      sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">2.000000</span>,Y<span class=\"sy0\">=</span><span class=\"\
      nu0\">2.000000</span>,Z<span class=\"sy0\">=</span><span class=\"nu0\">2.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        VelocityScale<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span class=\"\
      sy0\">=</span><span class=\"nu0\">0.600000</span><span class=\"br0\">)</span>\n\
      \        VelocityScale<span class=\"br0\">(</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>RelativeTime<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1.000000</span>,RelativeVelocity<span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">10.000000</span>,Y<span class=\"sy0\">=-</span><span class=\"\
      nu0\">10.000000</span>,Z<span class=\"sy0\">=-</span><span class=\"nu0\">10.000000</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n \n        LowDetailFactor<span\
      \ class=\"sy0\">=+</span><span class=\"nu0\">1.0</span>\n        <span class=\"\
      kw5\">Name</span><span class=\"sy0\">=</span><span class=\"st0\">\"SpriteEmitter7\"\
      </span>\n    End <span class=\"kw8\">Object</span>\n    Emitters<span class=\"\
      br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"kw8\">SpriteEmitter</span><span class=\"\
      st0\">'SpriteEmitter2'</span>\n    bNoDelete<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">false</span>\n    bAlwaysRelevant<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">True</span>\n    bNetTemporary<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">False</span>\n    bHidden<span class=\"sy0\">=</span><span class=\"\
      kw6\">False</span>\n    bNetNotify<span class=\"sy0\">=</span><span class=\"\
      kw6\">True</span> <span class=\"co1\">//this is important here, otherwise the\
      \ function PostNetReceive() would not be called</span>\n    <span class=\"kw7\"\
      >RemoteRole</span><span class=\"sy0\">=</span><span class=\"kw7\">ROLE_SimulatedProxy</span>\n\
      \    CullDistance<span class=\"sy0\">=+</span><span class=\"nu0\">2000.0</span>\n\
      \    FirstColor<span class=\"sy0\">=</span><span class=\"br0\">(</span>R<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>\
      \ <span class=\"co1\">//This will be default FirstColor for our emitter</span>\n\
      \    SecondColor<span class=\"sy0\">=</span><span class=\"br0\">(</span>R<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"br0\">)</span>\
      \ <span class=\"co1\">//This will be default SecondColor for our emitter</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Examples/Emitter_replication?section=2\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Now, why we haven't set the Emitters[0].ColorScale[1].Color\
      \ in functions SetFirstColor(Color firstC) and SetSecondColor(Color firstC)\
      \ directly? This wouldn't work because these functions won't be replicated as\
      \ long as the owner of the emitter wouldn't be some PlayerController class.\
      \ On the other side, function PostNetReceive() is replicated always when bNetNotify\
      \ is set to true.</p>\n<p>It is possible to set also the other emitter values\
      \ by creating the replicated variable and then setting it up in PostNetReceive()\
      \ function.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.066 seconds\n\
      Real time usage: 0.067 seconds\nPreprocessor visited node count: 16/1000000\n\
      Preprocessor generated node count: 34/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:24151-0!*!*!!*!*!*\
      \ and timestamp 20221120202906 and revision id 34437\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Emitter replication example"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Replication_Examples/Emitter_replication"
    byteoffset: 0
    anchor: "Emitter_replication_example"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Replication_Examples/Emitter_replication"
    byteoffset: 3657
    anchor: "Discussion"
  displaytitle: "Legacy:Replication Examples/Emitter replication"
  iwlinks: []
  wikitext:
    text: "==Emitter replication example==\n\nThis emitter is based on Spiral.uc emitter\
      \ that is used in game to spawn those flares marking item pickup locations.\
      \ This emitter allows to change the color of these flare at runtime by calling\
      \ functions SetFirstColor(Color firstC) and SetSecondColor(Color secondC).\n\
      \nNote:\nThis emitter works in UT2004.\n<br />\n\n----\n\n<br>\n\n<uscript>#exec\
      \ OBJ LOAD FILE=EpicParticles.utx\n\n//-----------------------------------------------------------\n\
      // by Shadow_knight\n//-----------------------------------------------------------\n\
      class ChangingEmitter extends Emitter;\n\n//here we will store colors that will\
      \ be used by the emitter\nvar color FirstColor;\nvar color SecondColor;\n\n\
      //We need to replicate the variables FirstColor and SecondColor to clients\n\
      replication\n{\n  reliable if(Role == Role_Authority)\n    FirstColor, SecondColor;\n\
      }\n\n//this function sets the FirstColor variable to desired value, it is simulated\
      \ so it will set the FirstColor also on client\nsimulated function SetFirstColor(Color\
      \ firstC)\n{\n\tFirstColor = firstC;\n}\n\n//same as previous function except\
      \ it will set SecondColor\nsimulated function SetSecondColor(Color secondC)\n\
      {\n\tSecondColor = secondC;\n}\n\n//This is our key function. This function\
      \ is called on clients if the actor has set bNetNotify to true\n//Here we will\
      \ set the emitter to use our color variables\nsimulated function PostNetReceive()\n\
      {\n\tEmitters[0].ColorScale[1].Color = FirstColor;\n\tEmitters[0].ColorScale[2].Color\
      \ = SecondColor;\n}\n\ndefaultproperties\n{\n    //The SpriteEmitter object\
      \ here is copy paste from original UT class Spiral.uc\n    Begin Object Class=SpriteEmitter\
      \ Name=SpriteEmitter2\n\tUseColorScale=True\n        ColorScale(0)=(Color=(B=255,G=255,R=255))\n\
      \        ColorScale(1)=(RelativeTime=0.200000,Color=(G=170,R=255))\n       \
      \ ColorScale(2)=(RelativeTime=1.000000,Color=(G=217,R=255))\n        FadeOutStartTime=1.300000\n\
      \        FadeOut=True\n        FadeInEndTime=0.250000\n        FadeIn=True\n\
      \        MaxParticles=15\n        StartLocationShape=PTLS_Sphere\n        SphereRadiusRange=(Min=16.000000,Max=16.000000)\n\
      \        RevolutionsPerSecondRange=(Z=(Min=0.200000,Max=0.500000))\n       \
      \ RevolutionScale(0)=(RelativeRevolution=(Z=2.000000))\n        RevolutionScale(1)=(RelativeTime=0.600000)\n\
      \        RevolutionScale(2)=(RelativeTime=1.000000,RelativeRevolution=(Z=2.000000))\n\
      \        SpinsPerSecondRange=(X=(Max=4.000000))\n        StartSizeRange=(X=(Min=4.000000,Max=4.000000),Y=(Min=4.000000,Max=4.000000),Z=(Min=8.000000,Max=8.000000))\n\
      \        UniformSize=True\n        Texture=Texture'EpicParticles.Flares.HotSpot'\n\
      \        LifetimeRange=(Min=1.600000,Max=1.600000)\n        StartVelocityRadialRange=(Min=-20.000000,Max=-20.000000)\n\
      \        VelocityLossRange=(X=(Min=0.200000,Max=0.200000),Y=(Min=0.200000,Max=0.200000),Z=(Min=1.000000,Max=1.000000))\n\
      \        GetVelocityDirectionFrom=PTVD_AddRadial\n        UseVelocityScale=True\n\
      \        VelocityScale(0)=(RelativeVelocity=(X=2.000000,Y=2.000000,Z=2.000000))\n\
      \        VelocityScale(1)=(RelativeTime=0.600000)\n        VelocityScale(2)=(RelativeTime=1.000000,RelativeVelocity=(X=-10.000000,Y=-10.000000,Z=-10.000000))\n\
      \n        LowDetailFactor=+1.0\n        Name=\"SpriteEmitter7\"\n    End Object\n\
      \    Emitters(0)=SpriteEmitter'SpriteEmitter2'\n    bNoDelete=false\n    bAlwaysRelevant=True\n\
      \    bNetTemporary=False\n    bHidden=False\n    bNetNotify=True //this is important\
      \ here, otherwise the function PostNetReceive() would not be called\n    RemoteRole=ROLE_SimulatedProxy\n\
      \    CullDistance=+2000.0\n    FirstColor=(R=255) //This will be default FirstColor\
      \ for our emitter\n    SecondColor=(R=255) //This will be default SecondColor\
      \ for our emitter\n}</uscript>\n\n==Discussion==\n\nNow, why we haven't set\
      \ the Emitters[0].ColorScale[1].Color in functions SetFirstColor(Color firstC)\
      \ and SetSecondColor(Color firstC) directly? This wouldn't work because these\
      \ functions won't be replicated as long as the owner of the emitter wouldn't\
      \ be some PlayerController class. On the other side, function PostNetReceive()\
      \ is replicated always when bNetNotify is set to true.  \n\nIt is possible to\
      \ set also the other emitter values by creating the replicated variable and\
      \ then setting it up in PostNetReceive() function."
  properties: []
  revId: 34437
name: "Legacy:Replication Examples/Emitter replication"
revision:
  revid: 34437
  parentid: 34435
  user: "80.251.252.163"
  timestamp: 1243092925.000000000
  comment: "/* Emitter replication example */"
timestamp: 1668975887.099092000
