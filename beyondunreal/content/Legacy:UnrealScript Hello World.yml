---
parse:
  title: "Legacy:UnrealScript Hello World"
  text:
    text: "<p><i>This page is one of a series of <a href=\"/Legacy:UnrealScript_Lessons\"\
      \ title=\"Legacy:UnrealScript Lessons\">UnrealScript Lessons</a>.</i></p>\n\
      <p>Previous tutorials:</p>\n<ul>\n<li>You've set up your environment: <a href=\"\
      /Legacy:Setting_Up_UnrealScript\" title=\"Legacy:Setting Up UnrealScript\">Setting\
      \ Up UnrealScript</a></li>\n</ul>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n\
      <div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Overview\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Create_the_Directory_Structure\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Create the Directory Structure</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Creating_the_mutator\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Creating the mutator</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Compile_Your_Code\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Compile Your Code</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Creating_the_package_interface_file\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">Creating the package\
      \ interface file</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-6\"><a\
      \ href=\"#for_running_with_UT_and_UT2003\"><span class=\"tocnumber\">5.1</span>\
      \ <span class=\"toctext\">for running with UT and UT2003</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-7\"><a href=\"#for_running_with_UT2004\"><span\
      \ class=\"tocnumber\">5.2</span> <span class=\"toctext\">for running with UT2004</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#for_running_with_KillingFloor\"\
      ><span class=\"tocnumber\">5.3</span> <span class=\"toctext\">for running with\
      \ KillingFloor</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#That.27s_All_Folks\"><span class=\"tocnumber\">6</span> <span class=\"\
      toctext\">That's All Folks</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#How_it_works\"><span class=\"tocnumber\">7</span> <span class=\"\
      toctext\">How it works</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"\
      ><a href=\"#Some_Other_Things_to_Look_At\"><span class=\"tocnumber\">8</span>\
      \ <span class=\"toctext\">Some Other Things to Look At</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-12\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-13\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Overview\">Overview</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Hello_World?section=1\" title=\"Edit section:\
      \ Overview\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This tutorial will teach you how to compile a small <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">mutator</a> whose sole purpose in life is to write\
      \ \"Hello World\" into the Unreal Tournament <a href=\"/Legacy:Log_File\" title=\"\
      Legacy:Log File\">log file</a> (UnrealTournament.log, UT2003.log or UT2004.log).</p>\n\
      <p>We assume that you've never tried building anything in <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a> before, and you haven't got\
      \ a clue where to actually start. What follows applies equally well to <a href=\"\
      /Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a> , <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a> or <a href=\"/Legacy:UT2004\"\
      \ title=\"Legacy:UT2004\" class=\"mw-redirect\">UT2004</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Create_the_Directory_Structure\">Create the Directory Structure</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Hello_World?section=2\" title=\"Edit section:\
      \ Create the Directory Structure\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>In your UT directory create a directory called <b>MutHelloWorld</b>.\
      \ MutHelloWorld is the name of our <a href=\"/Legacy:Package\" title=\"Legacy:Package\"\
      >package</a>.</p>\n<p>In the newly created MutHelloWorld directory create another\
      \ directory called <b>Classes</b>. (For more on this step, see <a href=\"/Legacy:Set_Up_Package_Folders\"\
      \ title=\"Legacy:Set Up Package Folders\">Set Up Package Folders</a>.)</p>\n\
      <p>You should now have the following directory structure</p>\n<ul>\n<li>{<a\
      \ href=\"/Legacy:Base_Directory\" title=\"Legacy:Base Directory\">Base Directory</a>}\\\
      MutHelloWorld</li>\n<li>{<a href=\"/Legacy:Base_Directory\" title=\"Legacy:Base\
      \ Directory\">Base Directory</a>}\\MutHelloWorld\\Classes</li>\n</ul>\n<p>So\
      \ far so good. Now let's write the code.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Creating_the_mutator\">Creating the mutator</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=3\"\
      \ title=\"Edit section: Creating the mutator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Within the {<a href=\"/Legacy:Base_Directory\" title=\"\
      Legacy:Base Directory\">Base Directory</a>}\\MutHelloWorld\\Classes directory\
      \ create a new file called <b>HelloWorld.uc</b>.</p>\n<p>This is just a normal\
      \ text file so you can use Notepad, vi, or any other <a href=\"/Legacy:Text_Editor\"\
      \ title=\"Legacy:Text Editor\">text editor</a> application of your choice to\
      \ create/edit it. The <i>uc</i> extension means that it's an <i>Unreal Class</i>\
      \ file. All UnrealScript code is contained in <a href=\"/Legacy:UC_File\" title=\"\
      Legacy:UC File\" class=\"mw-redirect\">UC Files</a> (see that page for tips\
      \ on working with them).</p>\n<dl>\n<dd><b>Caution:</b> Be careful to actually\
      \ name your file HelloWorld.uc, not HelloWorld.uc<b>.txt</b> when using Notepad\
      \ or another Windows text editor. By default Windows Explorer would hide the\
      \ \".txt\" part of the file name, so only \"HelloWorld.uc\" would show up along\
      \ with a \"text file\" icon. The compiler won't find that file though and complain\
      \ about it.(If you're using notepad change the \"save as type\" to \"All files\"\
      \ to ensure it wont save it to a .txt file)</dd>\n</dl>\n<p>Place the following\
      \ code within the file you just created (HelloWorld.uc)</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> HelloWorld <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw6\">Super</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ Run the super class function (Mutator.PostBeginPlay).</span>\n  <span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"\
      </span><span class=\"br0\">)</span>;    <span class=\"co1\">// Write our log\
      \ message</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<dl>\n<dd><b>Caution:</b>\
      \ Note that the name of the class must be exactly the same as the filename with\
      \ the .uc taken off.</dd>\n</dl>\n<p>The first line says \"This describes a\
      \ new class of object called a 'HelloWorld' which is just like a 'Mutator' except\
      \ for what follows...\"</p>\n<p>The <i>PostBeginPlay()</i> function is called\
      \ immediately after the object has \"entered the game\" so to speak. All we\
      \ need this function to do is write a line to the log.</p>\n<p>This is already\
      \ enough for UT, but in UT2003 and UT2004 we need some more. Add the following\
      \ lines at the end of the file:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \  FriendlyName<span class=\"sy0\">=</span><span class=\"st0\">\"Hello World\
      \ Mutator\"</span>\n  Description<span class=\"sy0\">=</span><span class=\"\
      st0\">\"Log 'Hello World'.\"</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>defaultproperties allows the programmer (that's you!) to embed default\
      \ values for properties in the source file. FriendlyName and Description are\
      \ declared in <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\">Mutator</a>\
      \ and here we give them default values for the HelloWorld variety of Mutator.</p>\n\
      <p>Save the file and, if you used notepad, make sure it has an extension of\
      \ <b>.uc</b> and not <b>.uc.txt</b>.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Compile_Your_Code\">Compile Your Code</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=4\"\
      \ title=\"Edit section: Compile Your Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>So far we have created our code and created a file\
      \ that will tell UT about our fantastic mutator. We still don't actually have\
      \ any code that UT can run. We need to compile our code into a package file\
      \ (a <b>.u</b> extension). To do this we need to tweak the <a href=\"/Legacy:Game_Ini_File\"\
      \ title=\"Legacy:Game Ini File\">Game Ini File</a> – UnrealTournament.ini, UT2003.ini\
      \ or UT2004.ini – depending on which game you are using.</p>\n<p>Open the INI\
      \ (the one that resides in the /System directory, not the one in the {<a href=\"\
      /Legacy:Base_Directory\" title=\"Legacy:Base Directory\">Base Directory</a>})\
      \ file in your favourite <a href=\"/Legacy:Text_Editor\" title=\"Legacy:Text\
      \ Editor\">text editor</a> and search for the following string <b>EditPackages=</b>.\
      \ You'll find a whole list of them. These are the packages that the compile\
      \ command you are about to learn will attempt to build when executed. Only packages\
      \ that are <b>not found</b> will be built.</p>\n<p>Immediately after the last\
      \ EditPackages=.... line (doesn't matter what the .... is) add the following\
      \ line:</p>\n<pre> EditPackages=MutHelloWorld\n</pre>\n<p>Save the file and\
      \ get a command prompt up (e.g. \"Start\" -&gt; \"Run...\" -&gt; type \"cmd\"\
      \ and press &lt;Return&gt; to get the command prompt). Change the directory\
      \ you are in until you are in the {<a href=\"/Legacy:Base_Directory\" title=\"\
      Legacy:Base Directory\">Base Directory</a>}/System directory (e.g. type: <b>cd\
      \ \\UT2004\\System</b>). Once in the {<a href=\"/Legacy:Base_Directory\" title=\"\
      Legacy:Base Directory\">Base Directory</a>}/System directory enter the following\
      \ command:</p>\n<pre> ucc make\n</pre>\n<p>This will run the compiler. It will\
      \ list each package you have on your EditPackages=... lines in your UT ini file,\
      \ but will only attempt to compile a package if its <b>.u</b> (or package file)\
      \ is not there. In this case, because this is the first time we have built our\
      \ mutator the package file <i>MutHelloWorld.u</i> doesn't exist.</p>\n<p>Assuming\
      \ you weren't told about any errors you should be able to see your compiled\
      \ mutator's package file <b>MutHelloWorld.u</b> in your {<a href=\"/Legacy:Base_Directory\"\
      \ title=\"Legacy:Base Directory\">Base Directory</a>}/System directory.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Creating_the_package_interface_file\">Creating\
      \ the package interface file</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=5\"\
      \ title=\"Edit section: Creating the package interface file\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"\
      mw-headline\" id=\"for_running_with_UT_and_UT2003\">for running with UT and\
      \ UT2003</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=6\" title=\"\
      Edit section: for running with UT and UT2003\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>(This is specific for <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>. UT2004 package descriptions\
      \ are made easiest after compilation, so read below)</p>\n<p>The package interface\
      \ file has an extension of <b>.int</b>. This file tells UT what classes are\
      \ available within the package of the same name (it has a <b>.u</b> extension\
      \ instead) for interrogation and/or public use. All <a href=\"/Legacy:INT_File\"\
      \ title=\"Legacy:INT File\">INT files</a> need to live within the {<a href=\"\
      /Legacy:Base_Directory\" title=\"Legacy:Base Directory\">Base Directory</a>}/System\
      \ directory. So lets create our <a href=\"/Legacy:INT_File\" title=\"Legacy:INT\
      \ File\">INT file</a> now.</p>\n<p>Using your favourite text editor create a\
      \ file called MutHelloWorld.int in the {<a href=\"/Legacy:Base_Directory\" title=\"\
      Legacy:Base Directory\">Base Directory</a>}/System directory. All <a href=\"\
      /Legacy:INT_File\" title=\"Legacy:INT File\">INT files</a> are plain text so\
      \ you can look at the others in the {<a href=\"/Legacy:Base_Directory\" title=\"\
      Legacy:Base Directory\">Base Directory</a>}/System directory if you wish. Just\
      \ don't change any of them.</p>\n<p>Add the following two lines of text to your\
      \ MutHelloWorld.int file and save it to disk:</p>\n<pre>[Public]\nObject=(Class=Class,MetaClass=Engine.Mutator,Name=MutHelloWorld.HelloWorld,Description=\"\
      Hello World Example\")</pre>\n<p>The Description=... part won't be used in UT2003,\
      \ but it helps identifying the mutator if you have more than only one of them\
      \ in your package.</p>\n<dl>\n<dd><b>Caution:</b> Make sure you don't indent\
      \ any of the lines within the .int file. The .int files are not parsed correctly\
      \ by the Unreal Engine when lines are indented.</dd>\n</dl>\n<p>You'll find\
      \ more on this step on the \"<a href=\"/Legacy:Create_An_INT_File\" title=\"\
      Legacy:Create An INT File\">Create An INT File</a>\" tutorial page.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"for_running_with_UT2004\">for running with UT2004</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Hello_World?section=7\" title=\"Edit section:\
      \ for running with UT2004\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The package interface file has an extension of <b>.ucl</b>. It is accompanied\
      \ by an INT file that can contain localised text. The <a href=\"/edit/Legacy:UCL_File?redlink=1\"\
      \ class=\"new\" title=\"Legacy:UCL File (page does not exist)\">UCL file</a>\
      \ tells UT what classes are available within the package of the same name (it\
      \ has a <b>.u</b> extension instead) for public use. UCL files live within the\
      \ {<a href=\"/Legacy:Base_Directory\" title=\"Legacy:Base Directory\">Base Directory</a>}/System\
      \ directory. UCL and INT files are generated automatically by UCC. You can create\
      \ the UCL and INT files by running these two lines from your {<a href=\"/Legacy:Base_Directory\"\
      \ title=\"Legacy:Base Directory\">Base Directory</a>}/System directory (easiest\
      \ by creating a batch file):</p>\n<blockquote class=\"legacyquote\">\n<p>ucc\
      \ dumpint MutHelloWorld.u</p>\n</blockquote>\n<blockquote class=\"legacyquote\"\
      >\n<p>ucc exportcache MutHelloWorld.u</p>\n</blockquote>\n<p>See <a href=\"\
      /Legacy:DumpIntCommandlet\" title=\"Legacy:DumpIntCommandlet\">DumpIntCommandlet</a>\
      \ and <a href=\"/Legacy:ExportCacheCommandlet\" title=\"Legacy:ExportCacheCommandlet\"\
      >ExportCacheCommandlet</a> for more on these. ExportCache will be called automatically\
      \ by UCC Make or UnrealEd in UT2004 v3204 and above. For this to work the INI\
      \ file used during compiling (by default that's UT2004.ini, but with <a href=\"\
      /Legacy:UMake\" title=\"Legacy:UMake\">UMake</a> it's the project's make.ini)\
      \ needs to have its CacheRecordPath entry in the [Core.System] section to be\
      \ set to the {<a href=\"/Legacy:Base_Directory\" title=\"Legacy:Base Directory\"\
      >Base Directory</a>}/System directory.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"for_running_with_KillingFloor\">for running with KillingFloor</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Hello_World?section=8\" title=\"Edit section:\
      \ for running with KillingFloor\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you are making this mutator for KF, it will not\
      \ appear in the mutator list. To fix this append this line into command that\
      \ is in the .ucl file:</p>\n<p>GroupName=KF</p>\n<p>example from my .ucl file:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw9\">Mutator</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>ClassName<span class=\"\
      sy0\">=</span>MutHelloWorld.<span class=\"me0\">HelloWorld</span>,IconMaterialName<span\
      \ class=\"sy0\">=</span>MutatorArt.<span class=\"me0\">nosym</span>,GroupName<span\
      \ class=\"sy0\">=</span>KF,FriendlyName<span class=\"sy0\">=</span>MutHelloWorld.<span\
      \ class=\"me0\">HelloWorld</span>.<span class=\"me0\">FriendlyName</span>,Description<span\
      \ class=\"sy0\">=</span>MutHelloWorld.<span class=\"me0\">HelloWorld</span>.<span\
      \ class=\"me0\">Description</span>,FriendlyName<span class=\"sy0\">=</span>MutHelloWorld.<span\
      \ class=\"me0\">HelloWorld</span>.<span class=\"me0\">FriendlyName</span>,FallbackName<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Hello World Mutator\"</span>,FallbackDesc<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Log 'Hello World'.\"</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"That.27s_All_Folks\">That's All Folks</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=9\"\
      \ title=\"Edit section: That's All Folks\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Right, we've created our package interface file (<b>.int</b>),\
      \ written our code (<b>.uc</b>), and compiled it into a package file (<b>.u</b>)\
      \ it's now time to test our mutator.</p>\n<p>Start up Unreal Tournament and\
      \ go to the mutator page (e.g. for UT2004 you find the <b>Mutator</b> button/tab\
      \ via the <b>Instant Action</b> menu option, you may have to select a <b>Gametype</b>\
      \ first). You should see your <i>Hello World</i> mutator in the list of available\
      \ mutators. Add it to the game and start killing things.</p>\n<p>Once you've\
      \ been in the game for a few seconds quit Unreal Tournament. If you look in\
      \ your Unreal Tournament log file (UNREALTOURNAMENT.log, UT2003.log or UT2004.log)\
      \ you should be able to find your <b>Hello World</b> message in there. If you\
      \ can then your mutator worked&#160;:) Well done. If you can't and did everything\
      \ as explained above, look again. It <i>has</i> to be in there&#160;;).</p>\n\
      <h2><span class=\"mw-headline\" id=\"How_it_works\">How it works</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Hello_World?section=10\" title=\"Edit section:\
      \ How it works\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The game looks at all INT file when it starts up. The INT file you created\
      \ tells it to load the package you compiled. More precisely, \"MutHelloWorld.HelloWorld\"\
      \ means the class \"HelloWorld\" in package \"MutHelloWorld\", and the INT file\
      \ tells the game that this class is a mutator, and should therefore be displayed\
      \ in the interface for the player to select.</p>\n<p>In the case of UT2003,\
      \ the values in the \"default properties\" section tell the game what to display\
      \ in the GUI interface.</p>\n<p>If a mutator class has been enabled by the player,\
      \ then an <i>instance</i> of it is created when the game begins. This is an\
      \ <i>object</i> of class \"HelloWorld\" that now exists in the game.</p>\n<p>The\
      \ function PostBeginPlay() is called on all objects that exist. So at some point\
      \ right at the start of the game (quite a bit less than a single second), the\
      \ function PostBeginPlay() in the script you pasted is called.</p>\n<p>This\
      \ calls Log(\"Hello World\"), which is a special function that handles writing\
      \ output to the log. The object thus write the string \"Hello World\" to the\
      \ log, and then does nothing else for the remainder of the match.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Some_Other_Things_to_Look_At\">Some Other Things\
      \ to Look At</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=11\" title=\"\
      Edit section: Some Other Things to Look At\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>OK, so now you've built your first mod you're probably\
      \ wanting to make one that does more than write to the UT log file. Well, here's\
      \ some suggested reading.</p>\n<ul>\n<li><a href=\"/Legacy:UMake\" title=\"\
      Legacy:UMake\">UMake</a> – Will make building and managing your mods easier</li>\n\
      <li><a href=\"/Legacy:Mod_Authoring\" title=\"Legacy:Mod Authoring\">Mod Authoring</a>\
      \ – An excellent overview of the types of mods - it's a little dated now but\
      \ worth the read.</li>\n</ul>\n<p>If you are looking for a list of 'special'\
      \ function names, such as \"PostBeginPlay\", then you will might want to read\
      \ some of these related articles&#160;:</p>\n<ul>\n<li><a href=\"/Legacy:Chain_Of_Events_At_Level_Startup\"\
      \ title=\"Legacy:Chain Of Events At Level Startup\">Chain Of Events At Level\
      \ Startup</a></li>\n<li><a href=\"/Legacy:UnrealScript_Entry_Points\" title=\"\
      Legacy:UnrealScript Entry Points\">UnrealScript Entry Points</a></li>\n</ul>\n\
      <p>Also, since most of the classes you will be writing are subclasses of \"\
      <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a>\" or \"<a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>\" (<a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\"\
      >Pawn</a> is a subclass of actor) I suggest that you read those classes to find\
      \ out what functions you can overload (another term for replace).</p>\n<ul>\n\
      <li><a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a></li>\n<li><a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a></li>\n</ul>\n<hr />\n<p>Don't\
      \ forget about the <a href=\"/Legacy:Search\" title=\"Legacy:Search\">search</a>\
      \ function in the Wiki.</p>\n<p>On a final note, I have found a difference between\
      \ UT and UT2003. In the UT2003.INI file there are 2 EditPackages=.... sections.\
      \ One for the game, and one for the editor. It seems that the EditPackages=....\
      \ in the editor section (2nd in the file) is re-written whenever the editor\
      \ is closed. So if you start UnrealEd (UT2003 version) up and it complains about\
      \ a missing package file, check the UnrealEd EditPackages=... section in your\
      \ UT2003.INI file.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=12\" title=\"\
      Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Regen_Mutator\" title=\"\
      Legacy:Regen Mutator\">Regen Mutator</a> – your recommended next step</li>\n\
      <li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"Legacy:UnrealScript Lessons\"\
      >UnrealScript Lessons</a> – all the UnrealScript tutorials</li>\n<li><a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a> – all\
      \ the reference pages</li>\n<li><a href=\"/Legacy:Mutator_Topics\" title=\"\
      Legacy:Mutator Topics\">Mutator Topics</a> – more on mutators</li>\n<li><a href=\"\
      /Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making Mods</a> – more on\
      \ the organizational and social aspects</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Hello_World?section=13\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Mychaeel:</b> What about using Level.GetLocalPlayerController().ClientMessage\
      \ instead of \"Log\" for that Hello World script though? That'd give people\
      \ something to look at in-game. – And I'd be in favor of mentioning <a href=\"\
      /Legacy:UMake\" title=\"Legacy:UMake\">UMake</a> somewhere after explaining\
      \ the individual compilation steps.</p>\n<p><b>EntropicLqd:</b> I did think\
      \ about actually displaying the Log message on screen - but decided that the\
      \ additional code might be too scary - if it only appears once people would\
      \ miss it so it would have to be on a timer ..... The benefit of using Log()\
      \ is that it forces people to look in their UT log file - a good reminder that\
      \ it exists. I am intending to add some additional reading links to the page\
      \ - but didn't get time last night. In terms of the name of the page, feel free\
      \ to rename it to anything you feel is more appropriate.</p>\n<p><b>UserEquals1D10T</b>\
      \ Does the INT file serve the same function as a header file does in C++?</p>\n\
      <p><b>EntropicLqd:</b> They are similar - but INT files are not compulsory.\
      \ You don't actually need an INT file to run a mod if you specify it on the\
      \ command line (e.g. CTF-Coret?mutator=MutMyMutator.MyMutator). However, both\
      \ UT and UT2K3 use the INT files to determine which mods are installed. They\
      \ essentially search through the INT files for public classes of type Mutator\
      \ and GameInfo so they can list gametypes and mutators in the interface. So\
      \ if you want your mutator/mod to appear in the menus then you need to create\
      \ an INT file.</p>\n<p><b>Foxpaw:</b> From what I've heard, UCC takes quite\
      \ a while to compile so it isn't high on the list of things to debug at Epic\
      \ right now.</p>\n<p><b>DodgerWA:</b> (Okay, I'm commenting by editing the page\
      \ because I can't find any kind of Add Comment button/link.) The information\
      \ regarding editing the INI is not complete. In order to compile, you must add\
      \ a ServerPackages entry. I presume the EditPackages is only for the editor,\
      \ but it won't compile with that alone:</p>\n<p><b>EntropicLqd:</b> Good spot.\
      \ Main text corrected.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      br0\">[</span><span class=\"kw8\">Engine</span>.<span class=\"me0\">GameEngine</span><span\
      \ class=\"br0\">]</span>\nEditPackages<span class=\"sy0\">=</span>MutHelloWorld</pre></div>\n\
      </div>\n<p><b>Wormbo:</b> ServerPackages for compiling? What are you trying\
      \ to to, coding as a multiplayer game?&#160;:) It's always EditPackages when\
      \ dealing with development. ServerPackages only comes into play when network-testing\
      \ your compiled stuff.</p>\n<p><b>EntropicLqd:</b> You are ofcourse correct.\
      \ I'd plead insanity but it's more likely the headache from hell I'm suffering\
      \ from. Somehow I'm going to squeeze in some UScript this weekend. Maybe that'll\
      \ make my headache go away.</p>\n<p><b>DodgerWA:</b> (Wrote this once before\
      \ but it's not there now.) Dunno what to tell you. Compiler complained that\
      \ it didn't know anything about the existence of my package. The only change\
      \ I made was adding the ServerPackage line and it compiled. This was from the\
      \ command line. Seems to work fine using WOTgreal.</p>\n<p><b>MythOpus:</b>\
      \ Try adding your package to both ServerPackages AND EditPackages. Also make\
      \ sure your .int are set up correctly. (You need a .int and a .ini file to register\
      \ your mutator into the game)</p>\n<p><b>EntropicLqd:</b> If the compiler says\
      \ it can't find your package then you've probably not got some things in the\
      \ right place. The fact that it's looking for your package means that you most\
      \ likely have added the <i>EditPackages=....</i> line in the INI file correctly.\
      \ However, you <b>must</b> put your code in the /UT2004/&lt;your package name&gt;/Classes\
      \ directory otherwise your code will not be found. The package name used in\
      \ your EditPackages=... line must match exactly the directory name the classes\
      \ directory is contained in. Maybe your ServerPackage and EditPackage lines\
      \ were different.</p>\n<p>I've also noticed that in UT2004 a .ucl file is created\
      \ from the .int first time the mutator is used (to allow caching and some other\
      \ stuff - it's in a header somewhere and I've not had time to investigate it.\
      \ It may be that these two files are out of sync or something.</p>\n<p><b>Kamek:</b>\
      \ A ServerPackages entry shouldn't be necessary unless the package contains\
      \ classes with simulated functions or variables, or other things that the client\
      \ needs to know about such as new weapons or something. In the case of this\
      \ HelloWorld mutator it shouldn't need a ServerPackage line, and just adds to\
      \ the list of stuff the client has to download when connecting.</p>\n<p><b>Mortal\
      \ Monkey:</b> If you're using UEd's built-in script editor, neither ServerPackages\
      \ nor EditPackages should be necessary. I wouldn't know about the other way(s)\
      \ though, as I've just recently downloaded WOTgreal.</p>\n<p><b>Boksha:</b>\
      \ I've tried editing this page so making UCL and INT files works correctly for\
      \ UT2004. I'm not sure if everything I've written down is correct, although\
      \ it should work just fine for small mutators.</p>\n<p><b>Atlantis|TheKing</b>\
      \ Just added an line on where to find those mutators in UT2004.</p>\n<hr />\n\
      <p><b>LinkeT</b> i have the current Unreal Engine 2 Runtime Demo - this sample\
      \ doesnt work</p>\n<p>Log: 16781187818.5ms Unloading: Package MutHelloWorld</p>\n\
      <p>was added to log after load the test-map</p>\n<p>I follow all instructions\
      \ all time the same message</p>\n<p><b>Mcx:</b> this sample works with Unreal\
      \ Engine 2 Runtime Demo too!</p>\n<p>just start your runtime with the command\
      \ line like</p>\n<p>\"C:\\UnrealEngine2RuntimeDemo\\System\\UE2Runtime.exe EM_Runtime?mutator=MutHelloWorld.HelloWorld\"\
      </p>\n<p><b>Mstram:</b> Are mutators applicable to the UnrealEngine2 Runtime?\
      \ I'm trying to do the the \"UnrealScript Hello World\" tutor (<a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://wiki.beyondunreal.com/wiki/UnrealScript_Hello_World\"\
      >http://wiki.beyondunreal.com/wiki/UnrealScript_Hello_World</a>) and can't find\
      \ the \"mutator page\" (\"Start up Unreal Tournament and go to the mutator page\
      \ ...)</p>\n<p><b>EntropicLqd:</b> Mstram - the mutator page is part of UT2004.\
      \ Mutators do work with the Unreal Engine Runtime though. You simply need to\
      \ specify the mutaor and map on the command line. (See the last comment by <b>Mcx</b>.</p>\n\
      <p><b>Mstram:</b> Ok, thx, I got it to work. I also dug through my cd collection\
      \ and found my copy of UT(436). I got the mutator code to work in it as well,\
      \ but I had to add the contents of the MutHelloWorld.int file to the BotPack.int\
      \ file, for the mutator to show up in the game interface. Is that the correct\
      \ procedure? (If anybody is still running such an old version&#160;:) )</p>\n\
      <p><b>EntropicLqd:</b> No. You should never have to change any of the game files\
      \ to make your mods work. It's hard to know what you did wrong though. Check\
      \ the ini file for the EditPackages (and ServerPackages just to be complete)\
      \ lines. Also check you've got <i>.int</i>, <i>u.</i>, and <i>.ucl</i> files\
      \ for your mutator in the /UT2004/System directory.</p>\n<p><b>Mstram:</b> \"\
      <i>.int</i>, <i>u.</i>, and <i>.ucl</i> files for your mutator in the /UT2004/System\
      \ directory.\" ... This isn't UT2004 .. it's an old (the first&#160;??) version\
      \ of Unreal Tournament ... there are no .ucl files.... it's probably amazing\
      \ that I have it working at all&#160;:)</p>\n<p><b>Infernus:</b> The old versions\
      \ of Unreal dont use \".ucl\" files.</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.145 seconds\nReal time usage: 0.147 seconds\nPreprocessor visited\
      \ node count: 113/1000000\nPreprocessor generated node count: 237/1000000\n\
      Post‐expand include size: 332/2097152 bytes\nTemplate argument size: 58/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    5.725      1 - -total\n 94.31%    5.399      2 - Template:Innerbox\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3440-0!*!0!!en!*!*\
      \ and timestamp 20221118001712 and revision id 46329\n -->\n"
  categories:
  - sortkey: "UnrealScript Hello World"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UMake"
  - ns: 100
    exists: false
    name: "Legacy:UCL File"
  - ns: 100
    exists: true
    name: "Legacy:Create An INT File"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring"
  - ns: 100
    exists: true
    name: "Legacy:ExportCacheCommandlet"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Search"
  - ns: 100
    exists: true
    name: "Legacy:Setting Up UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Entry Points"
  - ns: 100
    exists: true
    name: "Legacy:Log File"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:UC File"
  - ns: 100
    exists: true
    name: "Legacy:INT File"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Regen Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  - ns: 100
    exists: true
    name: "Legacy:Text Editor"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:DumpIntCommandlet"
  - ns: 100
    exists: true
    name: "Legacy:Game Ini File"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Set Up Package Folders"
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  - ns: 100
    exists: true
    name: "Legacy:Base Directory"
  - ns: 100
    exists: true
    name: "Legacy:Chain Of Events At Level Startup"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://wiki.beyondunreal.com/wiki/UnrealScript_Hello_World"
  sections:
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 206
    anchor: "Overview"
  - toclevel: 1
    level: "2"
    line: "Create the Directory Structure"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 723
    anchor: "Create_the_Directory_Structure"
  - toclevel: 1
    level: "2"
    line: "Creating the mutator"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 1296
    anchor: "Creating_the_mutator"
  - toclevel: 1
    level: "2"
    line: "Compile Your Code"
    number: "4"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 3583
    anchor: "Compile_Your_Code"
  - toclevel: 1
    level: "2"
    line: "Creating the package interface file"
    number: "5"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 5511
    anchor: "Creating_the_package_interface_file"
  - toclevel: 2
    level: "3"
    line: "for running with UT and UT2003"
    number: "5.1"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 5553
    anchor: "for_running_with_UT_and_UT2003"
  - toclevel: 2
    level: "3"
    line: "for running with UT2004"
    number: "5.2"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 7082
    anchor: "for_running_with_UT2004"
  - toclevel: 2
    level: "3"
    line: "for running with KillingFloor"
    number: "5.3"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 8310
    anchor: "for_running_with_KillingFloor"
  - toclevel: 1
    level: "2"
    line: "That's All Folks"
    number: "6"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 8869
    anchor: "That.27s_All_Folks"
  - toclevel: 1
    level: "2"
    line: "How it works"
    number: "7"
    index: "10"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 9775
    anchor: "How_it_works"
  - toclevel: 1
    level: "2"
    line: "Some Other Things to Look At"
    number: "8"
    index: "11"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 10899
    anchor: "Some_Other_Things_to_Look_At"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "9"
    index: "12"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 12470
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "10"
    index: "13"
    fromtitle: "Legacy:UnrealScript_Hello_World"
    byteoffset: 12890
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript Hello World"
  iwlinks: []
  wikitext:
    text: "''This page is one of a series of [[Legacy:UnrealScript Lessons|UnrealScript\
      \ Lessons]].''\n\nPrevious tutorials: \n* You've set up your environment: [[Legacy:Setting\
      \ Up UnrealScript|Setting Up UnrealScript]]\n\n==Overview==\n\nThis tutorial\
      \ will teach you how to compile a small [[Legacy:Mutator|mutator]] whose sole\
      \ purpose in life is to write \"Hello World\" into the Unreal Tournament [[Legacy:Log\
      \ File|log file]] (UnrealTournament.log, UT2003.log or UT2004.log).\n\nWe assume\
      \ that you've never tried building anything in [[Legacy:UnrealScript|UnrealScript]]\
      \ before, and you haven't got a clue where to actually start.  What follows\
      \ applies equally well to [[Legacy:UT|UT]] , [[Legacy:UT2003|UT2003]] or [[Legacy:UT2004|UT2004]].\n\
      \n==Create the Directory Structure ==\n\nIn your UT directory create a directory\
      \ called '''MutHelloWorld'''.  MutHelloWorld is the name of our [[Legacy:Package|package]].\n\
      \nIn the newly created MutHelloWorld directory create another directory called\
      \ '''Classes'''. (For more on this step, see [[Legacy:Set Up Package Folders|Set\
      \ Up Package Folders]].)\n\nYou should now have the following directory structure\n\
      * {[[Legacy:Base Directory|Base Directory]]}\\MutHelloWorld\n* {[[Legacy:Base\
      \ Directory|Base Directory]]}\\MutHelloWorld\\Classes\n\nSo far so good.  Now\
      \ let's write the code.\n\n==Creating the mutator ==\n\nWithin the {[[Legacy:Base\
      \ Directory|Base Directory]]}\\MutHelloWorld\\Classes directory create a new\
      \ file called '''HelloWorld.uc'''.\n\nThis is just a normal text file so you\
      \ can use Notepad, vi, or any other [[Legacy:Text Editor|text editor]] application\
      \ of your choice to create/edit it.  The ''uc'' extension means that it's an\
      \ ''Unreal Class'' file.  All UnrealScript code is contained in [[Legacy:UC\
      \ File|UC File]]s (see that page for tips on working with them).\n\n: '''Caution:'''\
      \  Be careful to actually name your file HelloWorld.uc, not HelloWorld.uc'''.txt'''\
      \ when using Notepad or another Windows text editor.  By default Windows Explorer\
      \ would hide the \".txt\" part of the file name, so only \"HelloWorld.uc\" would\
      \ show up along with a \"text file\" icon.  The compiler won't find that file\
      \ though and complain about it.(If you're using notepad change the \"save as\
      \ type\" to \"All files\" to ensure it wont save it to a .txt file)\n\nPlace\
      \ the following code within the file you just created (HelloWorld.uc)\n\n<uscript>\n\
      class HelloWorld extends Mutator;\n\nfunction PostBeginPlay()\n{\n  Super.PostBeginPlay();\
      \ // Run the super class function (Mutator.PostBeginPlay).\n  Log(\"Hello World\"\
      );    // Write our log message\n}\n</uscript>\n: '''Caution:''' Note that the\
      \ name of the class must be exactly the same as the filename with the .uc taken\
      \ off. \n\nThe first line says \"This describes a new class of object called\
      \ a 'HelloWorld' which is just like a 'Mutator' except for what follows...\"\
      \n\nThe ''PostBeginPlay()'' function is called immediately after the object\
      \ has \"entered the game\" so to speak.  All we need this function to do is\
      \ write a line to the log.\n\nThis is already enough for UT, but in UT2003 and\
      \ UT2004 we need some more. Add the following lines at the end of the file:\n\
      \n<uscript>\ndefaultproperties\n{\n  FriendlyName=\"Hello World Mutator\"\n\
      \  Description=\"Log 'Hello World'.\"\n}\n</uscript>\n\ndefaultproperties allows\
      \ the programmer (that's you!) to embed default values for properties in the\
      \ source file.  FriendlyName and Description are declared in [[Legacy:Mutator|Mutator]]\
      \ and here we give them default values for the HelloWorld variety of Mutator.\n\
      \nSave the file and, if you used notepad, make sure it has an extension of '''.uc'''\
      \ and not '''.uc.txt'''.\n\n==Compile Your Code ==\n\nSo far we have created\
      \ our code and created a file that will tell UT about our fantastic mutator.\
      \  We still don't actually have any code that UT can run.  We need to compile\
      \ our code into a package file (a '''.u''' extension).  To do this we need to\
      \ tweak the [[Legacy:Game Ini File|Game Ini File]] &ndash; UnrealTournament.ini,\
      \ UT2003.ini or UT2004.ini &ndash; depending on which game you are using.\n\n\
      Open the INI (the one that resides in the /System directory, not the one in\
      \ the {[[Legacy:Base Directory|Base Directory]]}) file in your favourite [[Legacy:Text\
      \ Editor|text editor]] and search for the following string '''EditPackages='''.\
      \  You'll find a whole list of them.  These are the packages that the compile\
      \ command you are about to learn will attempt to build when executed.  Only\
      \ packages that are '''not found''' will be built.\n\nImmediately after the\
      \ last EditPackages=.... line (doesn't matter what the .... is) add the following\
      \ line:\n  EditPackages=MutHelloWorld\n\nSave the file and get a command prompt\
      \ up (e.g. \"Start\" -> \"Run...\" -> type \"cmd\" and press <Return> to get\
      \ the command prompt).  Change the directory you are in until you are in the\
      \ {[[Legacy:Base Directory|Base Directory]]}/System directory (e.g. type: '''cd\
      \ \\UT2004\\System''').  Once in the {[[Legacy:Base Directory|Base Directory]]}/System\
      \ directory enter the following command:\n  ucc make\n\nThis will run the compiler.\
      \  It will list each package you have on your EditPackages=... lines in your\
      \ UT ini file, but will only attempt to compile a package if its '''.u''' (or\
      \ package file) is not there.  In this case, because this is the first time\
      \ we have built our mutator the package file ''MutHelloWorld.u'' doesn't exist.\n\
      \nAssuming you weren't told about any errors you should be able to see your\
      \ compiled mutator's package file '''MutHelloWorld.u''' in your {[[Legacy:Base\
      \ Directory|Base Directory]]}/System directory.\n\n==Creating the package interface\
      \ file ==\n\n===for running with UT and UT2003===\n\n(This is specific for [[Legacy:UT2003|UT2003]].\
      \ UT2004 package descriptions are made easiest after compilation, so read below)\n\
      \nThe package interface file has an extension of '''.int'''.  This file tells\
      \ UT what classes are available within the package of the same name (it has\
      \ a '''.u''' extension instead) for interrogation and/or public use.  All [[Legacy:INT\
      \ File|INT file]]s need to live within the {[[Legacy:Base Directory|Base Directory]]}/System\
      \ directory.  So lets create our [[Legacy:INT File|INT file]] now.\n\nUsing\
      \ your favourite text editor create a file called MutHelloWorld.int in the {[[Legacy:Base\
      \ Directory|Base Directory]]}/System directory.  All [[Legacy:INT File|INT file]]s\
      \ are plain text so you can look at the others in the {[[Legacy:Base Directory|Base\
      \ Directory]]}/System directory if you wish.  Just don't change any of them.\n\
      \nAdd the following two lines of text to your MutHelloWorld.int file and save\
      \ it to disk:\n\n<pre>[Public]\nObject=(Class=Class,MetaClass=Engine.Mutator,Name=MutHelloWorld.HelloWorld,Description=\"\
      Hello World Example\")</pre>\n\nThe Description=... part won't be used in UT2003,\
      \ but it helps identifying the mutator if you have more than only one of them\
      \ in your package.\n\n:'''Caution:''' Make sure you don't indent any of the\
      \ lines within the .int file.  The .int files are not parsed correctly by the\
      \ Unreal Engine when lines are indented.\n\nYou'll find more on this step on\
      \ the \"[[Legacy:Create An INT File|Create An INT File]]\" tutorial page.\n\n\
      ===for running with UT2004===\n\nThe package interface file has an extension\
      \ of '''.ucl'''. It is accompanied by an INT file that can contain localised\
      \ text. The [[Legacy:UCL File|UCL file]] tells UT what classes are available\
      \ within the package of the same name (it has a '''.u''' extension instead)\
      \ for public use.  UCL files live within the {[[Legacy:Base Directory|Base Directory]]}/System\
      \ directory. UCL and INT files are generated automatically by UCC. You can create\
      \ the UCL and INT files by running these two lines from your {[[Legacy:Base\
      \ Directory|Base Directory]]}/System directory (easiest by creating a batch\
      \ file):\n\n{{innerbox|ucc dumpint MutHelloWorld.u}}\n{{innerbox|ucc exportcache\
      \ MutHelloWorld.u}}\n\nSee [[Legacy:DumpIntCommandlet|DumpIntCommandlet]] and\
      \ [[Legacy:ExportCacheCommandlet|ExportCacheCommandlet]] for more on these.\
      \ ExportCache will be called automatically by UCC Make or UnrealEd in UT2004\
      \ v3204 and above. For this to work the INI file used during compiling (by default\
      \ that's UT2004.ini, but with [[Legacy:UMake|UMake]] it's the project's make.ini)\
      \ needs to have its CacheRecordPath entry in the [Core.System] section to be\
      \ set to the {[[Legacy:Base Directory|Base Directory]]}/System directory.\n\n\
      ===for running with KillingFloor===\n\nIf you are making this mutator for KF,\
      \ it will not appear in the mutator list. To fix this append this line into\
      \ command that is in the .ucl file:\n\nGroupName=KF\n\nexample from my .ucl\
      \ file:\n\n<uscript>Mutator=(ClassName=MutHelloWorld.HelloWorld,IconMaterialName=MutatorArt.nosym,GroupName=KF,FriendlyName=MutHelloWorld.HelloWorld.FriendlyName,Description=MutHelloWorld.HelloWorld.Description,FriendlyName=MutHelloWorld.HelloWorld.FriendlyName,FallbackName=\"\
      Hello World Mutator\",FallbackDesc=\"Log 'Hello World'.\")</uscript>\n\n==That's\
      \ All Folks ==\n\nRight, we've created our package interface file ('''.int'''),\
      \ written our code ('''.uc'''), and compiled it into a package file ('''.u''')\
      \ it's now time to test our mutator.\n\nStart up Unreal Tournament and go to\
      \ the mutator page (e.g. for UT2004 you find the '''Mutator''' button/tab via\
      \ the '''Instant Action''' menu option, you may have to select a '''Gametype'''\
      \ first). You should see your ''Hello World'' mutator in the list of available\
      \ mutators.  Add it to the game and start killing things.\n\nOnce you've been\
      \ in the game for a few seconds quit Unreal Tournament.  If you look in your\
      \ Unreal Tournament log file (UNREALTOURNAMENT.log, UT2003.log or UT2004.log)\
      \ you should be able to find your '''Hello World''' message in there.  If you\
      \ can then your mutator worked :)  Well done. If you can't and did everything\
      \ as explained above, look again. It ''has'' to be in there ;).\n\n==How it\
      \ works==\n\nThe game looks at all INT file when it starts up. The INT file\
      \ you created tells it to load the package you compiled. More precisely, \"\
      MutHelloWorld.HelloWorld\" means the class \"HelloWorld\" in package \"MutHelloWorld\"\
      , and the INT file tells the game that this class is a mutator, and should therefore\
      \ be displayed in the interface for the player to select.\n\nIn the case of\
      \ UT2003, the values in the \"default properties\" section tell the game what\
      \ to display in the GUI interface.\n\nIf a mutator class has been enabled by\
      \ the player, then an ''instance'' of it is created when the game begins. This\
      \ is an ''object'' of class \"HelloWorld\" that now exists in the game.\n\n\
      The function PostBeginPlay() is called on all objects that exist. So at some\
      \ point right at the start of the game (quite a bit less than a single second),\
      \ the function PostBeginPlay() in the script you pasted is called. \n\nThis\
      \ calls Log(\"Hello World\"), which is a special function that handles writing\
      \ output to the log. The object thus write the string \"Hello World\" to the\
      \ log, and then does nothing else for the remainder of the match.\n\n==Some\
      \ Other Things to Look At ==\n\nOK, so now you've built your first mod you're\
      \ probably wanting to make one that does more than write to the UT log file.\
      \  Well, here's some suggested reading.\n* [[Legacy:UMake|UMake]] &ndash; Will\
      \ make building and managing your mods easier\n* [[Legacy:Mod Authoring|Mod\
      \ Authoring]] &ndash; An excellent overview of the types of mods - it's a little\
      \ dated now but worth the read.\n\nIf you are looking for a list of 'special'\
      \ function names, such as \"PostBeginPlay\", then you will might want to read\
      \ some of these related articles :\n* [[Legacy:Chain Of Events At Level Startup|Chain\
      \ Of Events At Level Startup]]\n* [[Legacy:UnrealScript Entry Points|UnrealScript\
      \ Entry Points]]\n\nAlso, since most of the classes you will be writing are\
      \ subclasses of \"[[Legacy:Pawn|Pawn]]\" or \"[[Legacy:Actor|Actor]]\" ([[Legacy:Pawn|Pawn]]\
      \ is a subclass of actor) I suggest that you read those classes to find out\
      \ what functions you can overload (another term for replace).\n* [[Legacy:Pawn|Pawn]]\n\
      * [[Legacy:Actor|Actor]]\n\n----\n\nDon't forget about the [[Legacy:Search|search]]\
      \ function in the Wiki.\n\nOn a final note, I have found a difference between\
      \ UT and UT2003.  In the UT2003.INI file there are 2 EditPackages=.... sections.\
      \  One for the game, and one for the editor.  It seems that the EditPackages=....\
      \ in the editor section (2nd in the file) is re-written whenever the editor\
      \ is closed.  So if you start UnrealEd (UT2003 version) up and it complains\
      \ about a missing package file, check the UnrealEd EditPackages=... section\
      \ in your UT2003.INI file.\n\n==Related Topics==\n* [[Legacy:Regen Mutator|Regen\
      \ Mutator]] &ndash; your recommended next step\n* [[Legacy:UnrealScript Lessons|UnrealScript\
      \ Lessons]] &ndash; all the UnrealScript tutorials\n* [[Legacy:UnrealScript|UnrealScript]]\
      \ &ndash; all the reference pages\n* [[Legacy:Mutator Topics|Mutator Topics]]\
      \ &ndash; more on mutators\n* [[Legacy:Making Mods|Making Mods]] &ndash; more\
      \ on the organizational and social aspects\n\n==Discussion==\n\n'''Mychaeel:'''\
      \ What about using Level.GetLocalPlayerController().ClientMessage instead of\
      \ \"Log\" for that Hello World script though?  That'd give people something\
      \ to look at in-game. &ndash; And I'd be in favor of mentioning [[Legacy:UMake|UMake]]\
      \ somewhere after explaining the individual compilation steps.\n\n'''EntropicLqd:'''\
      \ I did think about actually displaying the Log message on screen - but decided\
      \ that the additional code might be too scary - if it only appears once people\
      \ would miss it so it would have to be on a timer .....  The benefit of using\
      \ Log() is that it forces people to look in their UT log file - a good reminder\
      \ that it exists.  I am intending to add some additional reading links to the\
      \ page - but didn't get time last night.  In terms of the name of the page,\
      \ feel free to rename it to anything you feel is more appropriate.\n\n'''UserEquals1D10T'''\
      \ Does the INT file serve the same function as a header file does in C++?\n\n\
      '''EntropicLqd:''' They are similar - but INT files are not compulsory.  You\
      \ don't actually need an INT file to run a mod if you specify it on the command\
      \ line (e.g. CTF-Coret?mutator=MutMyMutator.MyMutator).  However, both UT and\
      \ UT2K3 use the INT files to determine which mods are installed.  They essentially\
      \ search through the INT files for public classes of type Mutator and GameInfo\
      \ so they can list gametypes and mutators in the interface.  So if you want\
      \ your mutator/mod to appear in the menus then you need to create an INT file.\n\
      \n'''Foxpaw:''' From what I've heard, UCC takes quite a while to compile so\
      \ it isn't high on the list of things to debug at Epic right now.\n\n'''DodgerWA:'''\
      \ (Okay, I'm commenting by editing the page because I can't find any kind of\
      \ Add Comment button/link.) The information regarding editing the INI is not\
      \ complete.  In order to compile, you must add a ServerPackages entry.  I presume\
      \ the EditPackages is only for the editor, but it won't compile with that alone:\n\
      \n'''EntropicLqd:''' Good spot.  Main text corrected.\n\n<uscript>\n[Engine.GameEngine]\n\
      EditPackages=MutHelloWorld\n</uscript>\n\n'''Wormbo:''' ServerPackages for compiling?\
      \ What are you trying to to, coding as a multiplayer game? :) It's always EditPackages\
      \ when dealing with development. ServerPackages only comes into play when network-testing\
      \ your compiled stuff.\n\n'''EntropicLqd:''' You are ofcourse correct.  I'd\
      \ plead insanity but it's more likely the headache from hell I'm suffering from.\
      \  Somehow I'm going to squeeze in some UScript this weekend.  Maybe that'll\
      \ make my headache go away.\n\n'''DodgerWA:''' (Wrote this once before but it's\
      \ not there now.) Dunno what to tell you.  Compiler complained that it didn't\
      \ know anything about the existence of my package.  The only change I made was\
      \ adding the ServerPackage line and it compiled.  This was from the command\
      \ line.  Seems to work fine using WOTgreal.\n\n'''MythOpus:''' Try adding your\
      \ package to both ServerPackages AND EditPackages.  Also make sure your .int\
      \ are set up correctly. (You need a .int and a .ini file to register your mutator\
      \ into the game)\n\n'''EntropicLqd:''' If the compiler says it can't find your\
      \ package then you've probably not got some things in the right place.  The\
      \ fact that it's looking for your package means that you most likely have added\
      \ the ''EditPackages=....'' line in the INI file correctly.  However, you '''must'''\
      \ put your code in the /UT2004/<your package name>/Classes directory otherwise\
      \ your code will not be found.  The package name used in your EditPackages=...\
      \ line must match exactly the directory name the classes directory is contained\
      \ in.  Maybe your ServerPackage and EditPackage lines were different.\n\nI've\
      \ also noticed that in UT2004 a .ucl file is created from the .int first time\
      \ the mutator is used (to allow caching and some other stuff - it's in a header\
      \ somewhere and I've not had time to investigate it.  It may be that these two\
      \ files are out of sync or something.\n\n'''Kamek:''' A ServerPackages entry\
      \ shouldn't be necessary unless the package contains classes with simulated\
      \ functions or variables, or other things that the client needs to know about\
      \ such as new weapons or something. In the case of this HelloWorld mutator it\
      \ shouldn't need a ServerPackage line, and just adds to the list of stuff the\
      \ client has to download when connecting.\n\n'''Mortal Monkey:''' If you're\
      \ using UEd's built-in script editor, neither ServerPackages nor EditPackages\
      \ should be necessary. I wouldn't know about the other way(s) though, as I've\
      \ just recently downloaded WOTgreal.\n\n'''Boksha:''' I've tried editing this\
      \ page so making UCL and INT files works correctly for UT2004. I'm not sure\
      \ if everything I've written down is correct, although it should work just fine\
      \ for small mutators.\n\n'''Atlantis|TheKing''' Just added an line on where\
      \ to find those mutators in UT2004.\n\n----\n\n'''LinkeT''' i have the current\
      \ Unreal Engine 2 Runtime Demo - this sample doesnt work\n\nLog: 16781187818.5ms\
      \ Unloading: Package MutHelloWorld\n\nwas added to log after load the test-map\n\
      \nI follow all instructions all time the same message\n\n'''Mcx:''' this sample\
      \ works with Unreal Engine 2 Runtime Demo too!\n\njust start your runtime with\
      \ the command line like \n\n\"C:\\UnrealEngine2RuntimeDemo\\System\\UE2Runtime.exe\
      \ EM_Runtime?mutator=MutHelloWorld.HelloWorld\"\n\n'''Mstram:''' Are mutators\
      \ applicable to the UnrealEngine2 Runtime? I'm trying to do the the \"UnrealScript\
      \ Hello World\" tutor (http://wiki.beyondunreal.com/wiki/UnrealScript_Hello_World)\
      \ and can't find the \"mutator page\" (\"Start up Unreal Tournament and go to\
      \ the mutator page  ...)\n\n'''EntropicLqd:''' Mstram - the mutator page is\
      \ part of UT2004.  Mutators do work with the Unreal Engine Runtime though. \
      \ You simply need to specify the mutaor and map on the command line.  (See the\
      \ last comment by '''Mcx'''.\n\n'''Mstram:''' Ok, thx, I got it to work.  I\
      \ also dug through my cd collection and found my copy of UT(436).  I got the\
      \ mutator code to work in it as well, but I had to add the contents of the MutHelloWorld.int\
      \ file to the BotPack.int file, for the mutator to show up in the game interface.\
      \ Is that the correct procedure? (If anybody is still running such an old version\
      \ :) )\n\n'''EntropicLqd:''' No.  You should never have to change any of the\
      \ game files to make your mods work.  It's hard to know what you did wrong though.\
      \  Check the ini file for the EditPackages (and ServerPackages just to be complete)\
      \ lines.  Also check you've got ''.int'', ''u.'', and ''.ucl'' files for your\
      \ mutator in the /UT2004/System directory.\n\n'''Mstram:''' \"''.int'', ''u.'',\
      \ and ''.ucl'' files for your mutator in the /UT2004/System directory.\" ...\
      \   This isn't UT2004 .. it's an old (the first ??) version of Unreal Tournament\
      \ ... there are no .ucl files.... it's probably  amazing that I have it working\
      \ at all :)\n\n'''Infernus:''' The old versions of Unreal dont use \".ucl\"\
      \ files.\n\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 46329
name: "Legacy:UnrealScript Hello World"
revision:
  revid: 46329
  parentid: 44077
  user: "*mGm*Lizard"
  timestamp: 1461870957.000000000
  comment: "Corrected ServerPackages=MutHelloWorld to EditPackages=MutHelloWorld"
timestamp: 1668764249.227194000
