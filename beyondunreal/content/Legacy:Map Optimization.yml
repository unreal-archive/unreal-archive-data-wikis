---
parse:
  title: "Legacy:Map Optimization"
  text:
    text: "<p><b>Optimizing a map</b> is a balancing exercise between building a great\
      \ looking map and builing a map that runs at a playable speed.</p>\n<p><i>For\
      \ an excellent offsite tutorial by Angel Mapper, see <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://angelmapper.com/tutorials/optimization1.htm\"\
      >http://angelmapper.com/tutorials/optimization1.htm</a></i></p>\n<p></p>\n<div\
      \ id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Occlusion\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Occlusion</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-2\"><a href=\"#Using_Zones\"><span class=\"\
      tocnumber\">1.1</span> <span class=\"toctext\">Using Zones</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Using_Antiportals\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Using Antiportals</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Using_BSP_inside_of_Antiportals_for_Online_Optimization\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Using BSP inside\
      \ of Antiportals for Online Optimization</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Combining_The_Two\"><span class=\"tocnumber\">1.4</span>\
      \ <span class=\"toctext\">Combining The Two</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#Manually_excluding_Zones_from_rendering\"><span\
      \ class=\"tocnumber\">1.5</span> <span class=\"toctext\">Manually excluding\
      \ Zones from rendering</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"\
      ><a href=\"#Using_ForcedVisibilityZoneTag\"><span class=\"tocnumber\">1.6</span>\
      \ <span class=\"toctext\">Using ForcedVisibilityZoneTag</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Reducing_Channels_for_Online_Optimization\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Reducing Channels\
      \ for Online Optimization</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#Simplify_Collisions\"><span class=\"tocnumber\">3</span> <span class=\"\
      toctext\">Simplify Collisions</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#Simplify_lighting\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Simplify lighting</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"\
      ><a href=\"#Minimize_Texture_Loading\"><span class=\"tocnumber\">5</span> <span\
      \ class=\"toctext\">Minimize Texture Loading</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-12\"><a href=\"#Other_Things_that_Slow_Levels_Down\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Other Things that Slow Levels Down</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-13\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Discussion</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-14\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">8</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Occlusion\">Occlusion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Map_Optimization?section=1\" title=\"Edit section: Occlusion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Because\
      \ game engines simply draw <i>everything</i> and rely on overdrawing to actually\
      \ make sure the player only sees what they ought to see, a huge amount of detail\
      \ is drawn by the graphics card unnecessarily. Occlusion is the reduction of\
      \ what actually gets drawn on screen. A number of different techniques allow\
      \ mappers to control occlusion and keep levels playable.</p>\n<p>In <a href=\"\
      /Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>, level optimization\
      \ was primarily about keeping the number of visible polygons to a sensible number\
      \ (150 polygons was considered about the most you wanted in view in the beginning,\
      \ although most PCs will handle 400 with ease these days). In addition the number\
      \ of visible objects (or meshes) needed to be kept to a minimum. For more on\
      \ changes from the Unreal and UT generation of the engine, see <a href=\"/Legacy:Occlusion_Changes_For_UnrealEngine2\"\
      \ title=\"Legacy:Occlusion Changes For UnrealEngine2\">Occlusion Changes For\
      \ UnrealEngine2</a>.</p>\n<h3><span class=\"mw-headline\" id=\"Using_Zones\"\
      >Using Zones</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Map_Optimization?section=2\" title=\"Edit section:\
      \ Using Zones\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><a href=\"/Legacy:Zoning\" title=\"Legacy:Zoning\">Zoning</a> splits the\
      \ map up into separate areas called zones. These provide a way for the engine\
      \ to eliminate a large proportion of the map from what it has to consider for\
      \ rendering, simply because the player can't see it. Zone portals are basically\
      \ the opposite of Antiportals (as the name suggests). Zones completely eliminate\
      \ entire meshes (and other geometry) from the rendering queue (except for those\
      \ meshes that are un-occluded by zone-portals).</p>\n<p>Only the geometry inside\
      \ a zone within which a client is present will be rendered... with the exception\
      \ of any other geometry that is visible through a zone portal. Zones occlude\
      \ EVERYTHING outside them, which is bad since then nothing could be seen through\
      \ doors and windows between zones. So EPIC created this special mechanism called\
      \ a zone portal to un-occlude whatever things might be seen through them (for\
      \ doors and windows between zones, etc). Zone portals are special entities that\
      \ take on the shape of their defining brushes. They are NOT BSP geometry! If\
      \ the player is looking through a zone portal, meshes in adjacent zones will\
      \ still be rendered if they are also in the player's fustrum.</p>\n<p>Zones\
      \ are calculated at map-build time from the BSP geometry that makes up a room,\
      \ but since rooms generally have an opening to adjacent rooms (otherwise players\
      \ would be trapped!), Epic had to come up with a special way to tell the engine\
      \ where passage of players was possible (non-solid), while still maintaining\
      \ the seal of the zone. [Question: are Non-solid brushes NON-BSP??? I believe\
      \ they are just raw sheet polygons, especially considering that semi-solids\
      \ are not even BSP].</p>\n<p>Zone portals are not BSP. They are come from the\
      \ original brushes that define them, just like Antiportals. Note however, that\
      \ it is possible to use a brush to define both a zone portal surface and simulatenously\
      \ visible BSP polygons. But keep in mind that it's the actual original brush\
      \ shape that is used for portal calculations at runtime, so if the brush sticks\
      \ into BSP walls, the part that is sticking into the walls will still allow\
      \ the rendering of geometry in the adjacent zone. [Also note that all sheets\
      \ are Non-solid despite that their defining brush might be set to solid or semi-solid.\
      \ So for example, a single sheet brush can generate both a zone-portal and a\
      \ visible non-solid polygon (neither of which is BSP??)]. It is the source geometry\
      \ of the portal that is used for determining what is visible, not just the part\
      \ of it that creates the BSP polygons (when its visibility surface property\
      \ is set to true). Because of this you should use the 2D shape editor to make\
      \ your zone portals fit the hole they're filling as closely as possible (within\
      \ reason - do not use more than 6 verices or so to define the portal brush).</p>\n\
      <p>Zones are much less flexible than <a href=\"/Legacy:Antiportal\" title=\"\
      Legacy:Antiportal\">Antiportals</a> as they are static within the map and can\
      \ only be formed using <a href=\"/Legacy:BSP\" title=\"Legacy:BSP\">BSP</a>\
      \ geometry + zone portals. <a href=\"/Legacy:Static_Mesh\" title=\"Legacy:Static\
      \ Mesh\">Static meshes</a> and terrain cannot be used to form zones.</p>\n<p>Even\
      \ though zones are not as flexible as Antiportals they are much faster to use\
      \ for in-game occlusion and so should be the first line of defense against mesh\
      \ rendering.</p>\n<p>Essentially, if you cannot \"see\" a zone then none of\
      \ the geometry within that zone will be considered by the rendering engine.\
      \ The entire level segment within the zone is occluded. But zone portals can\
      \ still be \"seen\" through even if they are opaque, so do not take this too\
      \ literally. When optimizing your level, assume that players have magic glasses\
      \ and can \"see\" through zone portals even if the texture on them is opaque.\
      \ But note, there is a nifty feature to get around this. (See the ManualExcludes\
      \ paragraph below).</p>\n<p>A popular optimization technique in the Epic maps\
      \ is to place zone portals at either end of a hallway. This way if you're viewing\
      \ the hallway from an off angle, the portal at the far end won't be visible\
      \ through the portal at the near end, and everything beyond the hallway can\
      \ quickly be thrown out. Basically, try to create as many non-adjacent zones\
      \ as possible. In other words, combine zoning with the players view fustrum\
      \ to achieve the best occlusion.</p>\n<p>The biggest drawback to zones is that\
      \ it is impossible to zone large outdoor areas.</p>\n<p>See also: <a href=\"\
      /Legacy:Zoning\" title=\"Legacy:Zoning\">Zoning</a></p>\n<h3><span class=\"\
      mw-headline\" id=\"Using_Antiportals\">Using Antiportals</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=3\"\
      \ title=\"Edit section: Using Antiportals\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>That is why Antiportals were invented. They are simple\
      \ shapes that work even outdoors. Instead of telling the engine what it should\
      \ render, they tell the engine what it should not render, depending on the direction\
      \ the client is looking. They use the players view fustrum to figure out what\
      \ to occlude.</p>\n<p>Comparing every polygon of a mesh against an Antiportal\
      \ is not cheap, but it is certainly less expensive than doing so against regular\
      \ BSP nodes on average (assuming the average BSP poly count is 200~500), which\
      \ was the old method. Of course these days with the use of static-meshes, the\
      \ BSP poly count is often much lower than that, with static-mesh polygons in\
      \ their place, and static-meshes are even worse! They don't even have a binary-tree\
      \ like BSP. [Instead of a Logarithmic-Complexity data-structure-oriented piece\
      \ of code to process mesh occlusion, there would be an N^2-Complexity algorithm-oriented\
      \ piece of code. This is, in laymen's terms, is VERY BAD.]</p>\n<p>Antiportals\
      \ solve this problem because they are simple shapes (or should be!). However,\
      \ since they will occlude everything \"behind\" them (relative to the client),\
      \ they must be placed carefully. Make sure they are always hidden inside visible\
      \ static geometry including BSP, terrain, and static-meshes.</p>\n<p><a href=\"\
      /Legacy:Antiportal\" title=\"Legacy:Antiportal\">Antiportals</a> can be any\
      \ shape you want, and the specific shape does not make a big difference in the\
      \ performance, as long as it is not complex (the number of vertices should be\
      \ low: try to stick to simple prisms). <a href=\"/Legacy:Antiportal\" title=\"\
      Legacy:Antiportal\">Antiportals</a> are relatively slow but if they occlude\
      \ a large number of polygons it is generally worth it. An Antiportal can, for\
      \ instance, be placed inside a static mesh to basically make the static mesh\
      \ occlude, or it can be made to the shape of an existing BSP brush to make that\
      \ brush appear to occlude meshes. Note that Antiportals are invisible and cannot\
      \ actually be used to make visible geometry. If an Antiportal is visible to\
      \ a player, a <a href=\"/Legacy:Hall_Of_Mirrors\" title=\"Legacy:Hall Of Mirrors\"\
      >HOM</a> effect can occur.</p>\n<p>Antiportals are generally used in large outdoor\
      \ areas or other areas that cannot be reasonably zoned off. For example, if\
      \ you had an outdoor area with a large hill, it is usually not practical to\
      \ try to zone of the hill, because you are pretty well always going to be able\
      \ to see into the other zones, just not into much of them. In this instance\
      \ an Antiportal could be used to occlude the objects behind it. (see CTF-Magma\
      \ for a counterexample).</p>\n<p>It is worth noting that an Antiportal will\
      \ only be used for occlusion if some part of it is contained within a zone visible\
      \ to the player. As a result, the total number of Antiportals in a level may\
      \ be high, but you should try to keep the number of Antiportals in each zone\
      \ to a minimum to optimize the number of Antiportal calculations made.</p>\n\
      <p><a href=\"/Legacy:Devastation\" title=\"Legacy:Devastation\">Devastation</a>\
      \ also adds a new type of Antiportal to the mappers arsenal. This is the Zone-antiportal.\
      \ A Zone-Antiportal is just like a regular Antiportal, except that it has a\
      \ list of zones that will not be occluded by the Antiportal, even if that zone\
      \ is behind the Antiportal. One use for this might be a huge outdoor wall with\
      \ little \"pockets\" (rooms) attach to it. The rooms would have open doorways\
      \ in the wall (requiring some subtraction brushes for the doors + zone portal\
      \ sheets). The entire wall shape could contain a big rectangular antiportal\
      \ to block everything beyond the wall EXCEPT those rooms by adding them to the\
      \ zones to exclude. A more common example would be a building in the outdoors\
      \ which should occlude everything behind it but not everything inside of it\
      \ (you can see through the windows for instance).</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Using_BSP_inside_of_Antiportals_for_Online_Optimization\">Using BSP inside\
      \ of Antiportals for Online Optimization</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=4\"\
      \ title=\"Edit section: Using BSP inside of Antiportals for Online Optimization\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Antiportals\
      \ occlude static meshes, BSP and terrain chunks, but DO NOT occlude other players\
      \ or their projectiles. If you plan on having a lot of players in a map that\
      \ uses antiportals, create a slightly smaller semisolid/unlit/invisible BSP\
      \ brush and put it inside of the antiportal. This will occlude any network relevant\
      \ actors and will help optimize online play with many players.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Combining_The_Two\">Combining The Two</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Map_Optimization?section=5\" title=\"Edit section: Combining\
      \ The Two\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Antiportals can be used to occlude zone portals. For example, lets say you\
      \ have a set of large pillars in front of an area with a small doorway at the\
      \ back. Obviously you should put a zone portal in the doorway, but it would\
      \ be useful to not render the zone inside the doorway if the doorway isn't visible.\
      \ The two options are to either put a zone portal between each pillar (one big\
      \ zone portal won't work), or to put an Antiportal inside each pillar. Depending\
      \ on the specifics of the map the later may be the better option as it saves\
      \ you a zone (you only have 63 available, which can become an issue in a large\
      \ CTF/BR map).</p>\n<h3><span class=\"mw-headline\" id=\"Manually_excluding_Zones_from_rendering\"\
      >Manually excluding Zones from rendering</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=6\"\
      \ title=\"Edit section: Manually excluding Zones from rendering\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Antiportals are\
      \ not the only way in the UnrealEngine2 to prevent things from being rendered.\
      \ Another, more general way is the ManualExcludes array in the <a href=\"/Legacy:ZoneInfo\"\
      \ title=\"Legacy:ZoneInfo\">ZoneInfo</a>'s ZoneVisibility property group. In\
      \ this array you can specify the ZoneInfos of other zones that will never be\
      \ seen by a player in the zone belonging to this ZoneInfo.</p>\n<p>Imagine a\
      \ room with a few pillars and a doorway on each side. The pillars might be placed\
      \ in a way that blocks the view from each doorwa to the others, but it might\
      \ not be possible to properly occlude those doorways' zoneportals with antiportals\
      \ in the pillars. This is where the ManualExcludes take over: For each doorway\
      \ zone you specify the other doorway zones in the ManualExcludes array to completely\
      \ exclude them from rendering.</p>\n<p>To add ZoneInfos to the ManualExcludes\
      \ list you have to put their Object -&gt; Name into the textbox. For obvious\
      \ reasons you can only exclude zones that have their own ZoneInfo actor.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Using_ForcedVisibilityZoneTag\">Using ForcedVisibilityZoneTag</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Map_Optimization?section=7\" title=\"Edit section: Using\
      \ ForcedVisibilityZoneTag\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Sometimes the visibility logic can't decide, which zone an actor belongs\
      \ to. This often happens with larger <a href=\"/Legacy:StaticMesh\" title=\"\
      Legacy:StaticMesh\" class=\"mw-redirect\">StaticMeshes</a> that reach into BSP\
      \ geometry. These actors are often rendered even if they are not visible at\
      \ all.</p>\n<p>You can tell the visibility logic, which zone this actor belongs\
      \ to, by matching its Display -&gt; ForcedVisibilityZoneTag property with the\
      \ Events -&gt; Tag property of the ZoneInfo(s) of the zone(s) the actor is located\
      \ in. This way the visibility logic knows that the actor belongs to the zone\
      \ or zones with that tag and properly excludes it from rendering if the zone\
      \ is not visible.</p>\n<h2><span class=\"mw-headline\" id=\"Reducing_Channels_for_Online_Optimization\"\
      >Reducing Channels for Online Optimization</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=8\"\
      \ title=\"Edit section: Reducing Channels for Online Optimization\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Every pickup on\
      \ a map creates a channel when played on a server. The more channels on a server,\
      \ the more lag there is overall on the server. Try to use fewer pickups on larger\
      \ maps, and replace clustered pickups with a weapon locker.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Simplify_Collisions\">Simplify Collisions</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=9\"\
      \ title=\"Edit section: Simplify Collisions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you have many complex <a href=\"/Legacy:Static_Mesh\"\
      \ title=\"Legacy:Static Mesh\">static meshes</a> in your level either make them\
      \ non-collidable or use a simplified collision hull. You can do this either\
      \ with a blockingvolume or by saving a brush into the static mesh using the\
      \ static mesh browser. If you do the latter, the brush will be used for collision\
      \ but the static mesh will be displayed. If you do not use either of these,\
      \ straight triangle collision is used on every polygon in the static mesh. This\
      \ can have a significant impact on the performance of your level.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Simplify_lighting\">Simplify lighting</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Map_Optimization?section=10\" title=\"Edit section: Simplify\
      \ lighting\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Even static lights are costly since they are only static with respect to\
      \ BSP geometry and STATIC mesh vertices. Their effect on non-static meshes (such\
      \ as) players is still calculated at runtime. The bigger the radius of each\
      \ light, the longer it takes the runtime system to calculate what non-static\
      \ meshes should be affected by the light. The obvious solution is to minimize\
      \ the radius of lights (typically 32 units are less is good), as well as the\
      \ number of unique lights. [Given a choice between using smaller radii and fewer\
      \ lights, it is better to use smaller radii and more lights. The volume of a\
      \ sphere is 4/3*Pi*r^3! Multiply this by the number of lights (assuming that\
      \ they have the same radius), and you get n*4/3*Pi*r^3, where n is the number\
      \ of lights. So increasing the r on a particular light has a cubic detriment\
      \ on its efficiency, whereas increasing n only has a linear detriment.]</p>\n\
      <p>But sometimes, you need to use a bigger radius, or many lights. One method\
      \ to minimize this is to use bSpecialit in the light, as well as on the BSP\
      \ surface or static mesh it is intended to light. This will cause the light\
      \ to be used for static map lighting, while not actually lighting players. However,\
      \ be careful that this does not look weird! You still need to have lights that\
      \ *do* affect the player to make sure it looks like they are really in the room.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Minimize_Texture_Loading\">Minimize Texture\
      \ Loading</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Map_Optimization?section=11\" title=\"Edit section:\
      \ Minimize Texture Loading\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Don't be afraid to use polygons. A high polycount\
      \ (up to 50,000 polygons in view today!) is better than a high texture-memory\
      \ usage!</p>\n<p>These days, the pushing of mesh polygons to the video card\
      \ is far cheaper than the pushing of textures. In the old days, textures were\
      \ used for making \"virtual\" 3D geometry (just like faux architecture in the\
      \ real world), to save on the number of polygons. This meant that great looking\
      \ levels needed a relatively large number of custom textures to implement all\
      \ the 3D looking complexities. It was hoped that the user did not notice too\
      \ much that what he was looking at was actually a 2D surface. This technique\
      \ is still used today, and the best example of its usage is in AS-RobotFactory.\
      \ It is sometimes the best way to do things. However the rules have changed\
      \ quite a bit. Now polygons are generally far cheaper. Texture loading is quite\
      \ expensive. The fewer unique textures you use in your level, the better. Try\
      \ to reuse a relatively small set of base textures frequently, and building\
      \ the vast majority of your 3D detail with *actual* 3D geometry in Maya or 3DS\
      \ Max. Not only will your level run faster, but it will also look better.</p>\n\
      <p>It is also far easier and faster to model architecture than it is to draw\
      \ it. Of course, this comes with some practice in Maya or 3DSMax. Emulating\
      \ 3D shapes in 2D artwork is hard. Especially since, once applied in your level,\
      \ the textures tend to look flat and unrealistic.</p>\n<p>There are however\
      \ somethings that must be done with textures still. Small 3D details, like the\
      \ plaster on a wall, or the rust on metal, must still be implemeted with textures.\
      \ It also sometimes looks better to use textures to implement details that are\
      \ very nearly 2D in real life, because you can control the shadown and lighting\
      \ directly using your raster editor, as opposed to hoping and praying that the\
      \ Vertex Lighting of Unreal looks good.</p>\n<p>Another method for decreasing\
      \ texture usage is using ColorModifier materials together with grayscale images.\
      \ See <a rel=\"nofollow\" class=\"external free\" href=\"http://udn.epicgames.com/Two/MaterialsModifiers\"\
      >http://udn.epicgames.com/Two/MaterialsModifiers</a>. The grays determine how\
      \ dark or light to make various pixels in the texture. Using this, you can optimize\
      \ the compression of the texture since it has fewer colors, while also reusing\
      \ the texture in various parts of your map with different hues. This works well\
      \ for paint, plaster and other raw bases. It does not work well for multi-hued\
      \ textures, such as moss covered rocks (where there are rock hues [brown, black,\
      \ white ] and moss colors [green, aqua]). You can sometimes design your static\
      \ meshes with a few extra polygons that are layered, to apply multiple ColorModifier\
      \ materials and textures. Note that Combiner materials were desinged for this\
      \ kind of thing, but at present do not work reliably on many conventional video\
      \ cards. Plus it is more efficient on many static meshes to use a few more polygons\
      \ that are layered, than it is to go through the Unreal material pipeline with\
      \ Combiners.</p>\n<p>As an example of this method, you might have an old Italian\
      \ villa. The houses are made of red-organgish bricks, plaster, and paint. The\
      \ plaster and paint is weathered and peeling off in places. You could implement\
      \ the walls of the houses using 2 or 3 polygon layers: the underneath layer\
      \ for bricks, the 2nd layer for plaster, and possibly a 3rd layer for paint.\
      \ You could reuse the same brick texture on all the walls of the houses, but\
      \ use different colors of plaster and paint on top of it. All the houses could\
      \ reuse just a handful of plaster and paint textures that are grayscale, plus\
      \ a bunch of ColorModifier materials to make these few textures look like 20\
      \ or 30 different ones! And since ColorModifiers are implemented at compile\
      \ time in the lightmap, you are not actually increasing texture memory usage\
      \ to the video card at runtime. The same textures are cached and reused, improving\
      \ framerate, while only the lightmap values change from house to house.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Other_Things_that_Slow_Levels_Down\">Other\
      \ Things that Slow Levels Down</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=12\"\
      \ title=\"Edit section: Other Things that Slow Levels Down\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>Here are some things to avoid\
      \ when you construct a level:</p>\n<ul>\n<li>Spawning. Spawning objects is relatively\
      \ expensive. Emitters spawn a large number of objects, and so are not practical\
      \ in most serious online maps. (Avoid emitters!)</li>\n<li>Players. Having many\
      \ players in an area is a bad idea most of the time. It not only causes network\
      \ lag since the server must send more information to each client, but it also\
      \ slows down the rendering tremendously, with the game having to animate and\
      \ render all the players. Also, don't forget that local clients perform local\
      \ physics calculations to estimate the location and orientation every player\
      \ that relevant more frequently than the server updates this information (to\
      \ minimize the appearance of network lag). Unfortunately, this leads to local\
      \ CPU lag due to all the extra calculations. Avoid creating maps in which large\
      \ scale battles take place in one visible area.</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Map_Optimization?section=13\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>inio:</b> Is anyone interested in a demo map with\
      \ examples of the various occlusion methods? There seems to be a lot of \"here's\
      \ how you do it\" but no \"here's how it's done\" relating to this topic.</p>\n\
      <p><b>King Mango:</b> Yes I would be interested in that. I am curious if antiportals\
      \ are even used in UED2... It would be nice if there could be rooms connected\
      \ to one another, with a sort of \"stand here\" design on the floor. Then when\
      \ a player stands there a series of triggered messages explains what to put\
      \ the crosshairs on and why the info displayed by \"stat fps\" is different\
      \ for each occlusion type.</p>\n<p><b>EntropicLqd:</b> Antiportals do not exist\
      \ in UED2 at all. PS - It looks liked you are cutting and pasting from notepad\
      \ with word wrap turned on - hard line breaks are generally a bad thing.</p>\n\
      <p><b>inio:</b> Antiportals weren't needed in UnrealEd 2 because it didn't have\
      \ <a href=\"/Legacy:Terrain\" title=\"Legacy:Terrain\">terrain</a>, it didn't\
      \ have <a href=\"/Legacy:Static_Mesh\" title=\"Legacy:Static Mesh\">static meshes</a>,\
      \ and BSP ocluded in the engine versions it worked with.</p>\n<p><b>anonymous:</b>\
      \ Could anyone possibly write something about how to fix bsp bugs the editor\
      \ causes? I'm talking stuff like invisible walls caused by editor rebuilder\
      \ bugs. I currently fix them by remodelling part of my maps with is a rather\
      \ unelegant way.</p>\n<p><b>evil_blue_dude:</b> I've found a fool proof way.\
      \ I think I'll write a tutorial!&#160;:D</p>\n<p><b>Durandal:</b> Think it needs\
      \ noting that WarpZones are still functional in UEd 3.0. (But I cant work out\
      \ how to make it so you see the other side...)</p>\n<p><b>Tarquin:</b> Note\
      \ to c-67-183-19-195.client.comcast.net – the new material is good, but we now\
      \ seem to have the same thing twice (more or less) on this page. Things need\
      \ merging.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Map_Optimization?section=14\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Zone\" title=\"Legacy:Zone\">Zone</a></li>\n<li><a\
      \ href=\"/Legacy:ZoneInfo\" title=\"Legacy:ZoneInfo\">ZoneInfo</a></li>\n<li><a\
      \ href=\"/Legacy:Antiportal\" title=\"Legacy:Antiportal\">Antiportal</a></li>\n\
      <li><a href=\"/Legacy:Distance_Fog\" title=\"Legacy:Distance Fog\">Distance\
      \ Fog</a></li>\n</ul>\n<hr />\n<ul>\n<li>Zone Your World: <a href=\"/Legacy:Zoning\"\
      \ title=\"Legacy:Zoning\">Zoning</a> , <a href=\"/Legacy:Zoning_(UT)\" title=\"\
      Legacy:Zoning (UT)\">Zoning (UT)</a></li>\n<li><a href=\"/Legacy:ZoneInfo\"\
      \ title=\"Legacy:ZoneInfo\">ZoneInfo</a></li>\n<li><a href=\"/Legacy:WarpZoneInfo\"\
      \ title=\"Legacy:WarpZoneInfo\">WarpZoneInfo</a> – also (confusingly) called\
      \ portals</li>\n<li><a href=\"/Legacy:Gravity,_Warp_Tunnels\" title=\"Legacy:Gravity,\
      \ Warp Tunnels\">Gravity, Warp Tunnels</a></li>\n<li><a href=\"/Legacy:Zone\"\
      \ title=\"Legacy:Zone\">Zone</a></li>\n<li><a href=\"/Legacy:BlockAll\" title=\"\
      Legacy:BlockAll\">BlockAll</a> and <a href=\"/Legacy:BlockPlayer\" title=\"\
      Legacy:BlockPlayer\">BlockPlayer</a></li>\n<li><a href=\"/Legacy:Solidity\"\
      \ title=\"Legacy:Solidity\">Solidity</a></li>\n<li><a href=\"/Legacy:Invisible_Collision_Hull\"\
      \ title=\"Legacy:Invisible Collision Hull\">Invisible Collision Hull</a></li>\n\
      <li><a href=\"/Legacy:Volume\" title=\"Legacy:Volume\">Volume</a></li>\n</ul>\n\
      <hr />\n<p><a href=\"/Category:Legacy_Mapping\" title=\"Category:Legacy Mapping\"\
      >Category:Legacy Mapping</a></p>\n<p><a href=\"/Category:Legacy_To_Do\" title=\"\
      Category:Legacy To Do\">Category:Legacy To Do</a> – see top.</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.063 seconds\nReal time usage: 0.189 seconds\n\
      Preprocessor visited node count: 57/1000000\nPreprocessor generated node count:\
      \ 76/1000000\nPost‐expand include size: 32/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2085-0!*!0!!en!*!* and timestamp 20221117233216 and revision\
      \ id 5077\n -->\n"
  categories:
  - sortkey: "Map Optimization"
    name: "Legacy_Mapping"
  - sortkey: "Map Optimization"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Antiportal"
  - ns: 100
    exists: true
    name: "Legacy:Devastation"
  - ns: 100
    exists: true
    name: "Legacy:WarpZoneInfo"
  - ns: 100
    exists: true
    name: "Legacy:Zoning"
  - ns: 100
    exists: true
    name: "Legacy:Gravity, Warp Tunnels"
  - ns: 100
    exists: true
    name: "Legacy:Volume"
  - ns: 100
    exists: true
    name: "Legacy:BlockAll"
  - ns: 100
    exists: true
    name: "Legacy:BSP"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:Hall Of Mirrors"
  - ns: 100
    exists: true
    name: "Legacy:Terrain"
  - ns: 100
    exists: true
    name: "Legacy:Distance Fog"
  - ns: 100
    exists: true
    name: "Legacy:Zone"
  - ns: 100
    exists: true
    name: "Legacy:Invisible Collision Hull"
  - ns: 100
    exists: true
    name: "Legacy:Static Mesh"
  - ns: 100
    exists: true
    name: "Legacy:Zoning (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Occlusion Changes For UnrealEngine2"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 14
    exists: true
    name: "Category:Legacy Mapping"
  - ns: 100
    exists: true
    name: "Legacy:Solidity"
  - ns: 100
    exists: true
    name: "Legacy:BlockPlayer"
  - ns: 100
    exists: true
    name: "Legacy:ZoneInfo"
  - ns: 100
    exists: true
    name: "Legacy:StaticMesh"
  templates: []
  images: []
  externallinks:
  - "http://udn.epicgames.com/Two/MaterialsModifiers"
  - "http://angelmapper.com/tutorials/optimization1.htm"
  sections:
  - toclevel: 1
    level: "2"
    line: "Occlusion"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 245
    anchor: "Occlusion"
  - toclevel: 2
    level: "3"
    line: "Using Zones"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 1132
    anchor: "Using_Zones"
  - toclevel: 2
    level: "3"
    line: "Using Antiportals"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 5482
    anchor: "Using_Antiportals"
  - toclevel: 2
    level: "3"
    line: "Using BSP inside of Antiportals for Online Optimization"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 9179
    anchor: "Using_BSP_inside_of_Antiportals_for_Online_Optimization"
  - toclevel: 2
    level: "3"
    line: "Combining The Two"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 9627
    anchor: "Combining_The_Two"
  - toclevel: 2
    level: "3"
    line: "Manually excluding Zones from rendering"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 10285
    anchor: "Manually_excluding_Zones_from_rendering"
  - toclevel: 2
    level: "3"
    line: "Using ForcedVisibilityZoneTag"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 11303
    anchor: "Using_ForcedVisibilityZoneTag"
  - toclevel: 1
    level: "2"
    line: "Reducing Channels for Online Optimization"
    number: "2"
    index: "8"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 11966
    anchor: "Reducing_Channels_for_Online_Optimization"
  - toclevel: 1
    level: "2"
    line: "Simplify Collisions"
    number: "3"
    index: "9"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 12248
    anchor: "Simplify_Collisions"
  - toclevel: 1
    level: "2"
    line: "Simplify lighting"
    number: "4"
    index: "10"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 12811
    anchor: "Simplify_lighting"
  - toclevel: 1
    level: "2"
    line: "Minimize Texture Loading"
    number: "5"
    index: "11"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 14199
    anchor: "Minimize_Texture_Loading"
  - toclevel: 1
    level: "2"
    line: "Other Things that Slow Levels Down"
    number: "6"
    index: "12"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 18161
    anchor: "Other_Things_that_Slow_Levels_Down"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "7"
    index: "13"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 19106
    anchor: "Discussion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "8"
    index: "14"
    fromtitle: "Legacy:Map_Optimization"
    byteoffset: 20818
    anchor: "Related_Topics"
  displaytitle: "Legacy:Map Optimization"
  iwlinks: []
  wikitext:
    text: "'''Optimizing a map''' is a balancing exercise between building a great\
      \ looking map and builing a map that runs at a playable speed.\n\n''For an excellent\
      \ offsite tutorial by Angel Mapper, see http://angelmapper.com/tutorials/optimization1.htm''\n\
      \n==Occlusion==\n\nBecause game engines simply draw ''everything'' and rely\
      \ on overdrawing to actually make sure the player only sees what they ought\
      \ to see, a huge amount of detail is drawn by the graphics card unnecessarily.\
      \ Occlusion is the reduction of what actually gets drawn on screen. A number\
      \ of different techniques allow mappers to control occlusion and keep levels\
      \ playable.\n\nIn [[Legacy:UT|UT]], level optimization was primarily about keeping\
      \ the number of visible polygons to a sensible number (150 polygons was considered\
      \ about the most you wanted in view in the beginning, although most PCs will\
      \ handle 400 with ease these days).  In addition the number of visible objects\
      \ (or meshes) needed to be kept to a minimum. For more on changes from the Unreal\
      \ and UT generation of the engine, see [[Legacy:Occlusion Changes For UnrealEngine2|Occlusion\
      \ Changes For UnrealEngine2]].\n\n===Using Zones===\n\n[[Legacy:Zoning|Zoning]]\
      \ splits the map up into separate areas called zones. These provide a way for\
      \ the engine to eliminate a large proportion of the map from what it has to\
      \ consider for rendering, simply because the player can't see it. Zone portals\
      \ are basically the opposite of Antiportals (as the name suggests). Zones completely\
      \ eliminate entire meshes (and other geometry) from the rendering queue (except\
      \ for those meshes that are un-occluded by zone-portals).\n\nOnly the geometry\
      \ inside a zone within which a client is present will be rendered... with the\
      \ exception of any other geometry that is visible through a zone portal. Zones\
      \ occlude EVERYTHING outside them, which is bad since then nothing could be\
      \ seen through doors and windows between zones. So EPIC created this special\
      \ mechanism called a zone portal to un-occlude whatever things might be seen\
      \ through them (for doors and windows between zones, etc). Zone portals are\
      \ special entities that take on the shape of their defining brushes. They are\
      \ NOT BSP geometry! If the player is looking through a zone portal, meshes in\
      \ adjacent zones will still be rendered if they are also in the player's fustrum.\n\
      \nZones are calculated at map-build time from the BSP geometry that makes up\
      \ a room, but since rooms generally have an opening to adjacent rooms (otherwise\
      \ players would be trapped!), Epic had to come up with a special way to tell\
      \ the engine where passage of players was possible (non-solid), while still\
      \ maintaining the seal of the zone. [Question: are Non-solid brushes NON-BSP???\
      \ I believe they are just raw sheet polygons, especially considering that semi-solids\
      \ are not even BSP]. \n\nZone portals are not BSP. They are come from the original\
      \ brushes that define them, just like Antiportals. Note however, that it is\
      \ possible to use a brush to define both a zone portal surface and simulatenously\
      \ visible BSP polygons. But keep in mind that it's the actual original brush\
      \ shape that is used for portal calculations at runtime, so if the brush sticks\
      \ into BSP walls, the part that is sticking into the walls will still allow\
      \ the rendering of geometry in the adjacent zone. [Also note that all sheets\
      \ are Non-solid despite that their defining brush might be set to solid or semi-solid.\
      \ So for example, a single sheet brush can generate both a zone-portal and a\
      \ visible non-solid polygon (neither of which is BSP??)]. It is the source geometry\
      \ of the portal that is used for determining what is visible, not just the part\
      \ of it that creates the BSP polygons (when its visibility surface property\
      \ is set to true). Because of this you should use the 2D shape editor to make\
      \ your zone portals fit the hole they're filling as closely as possible (within\
      \ reason - do not use more than 6 verices or so to define the portal brush).\n\
      \nZones are much less flexible than [[Legacy:Antiportal|Antiportal]]s as they\
      \ are static within the map and can only be formed using [[Legacy:BSP|BSP]]\
      \ geometry + zone portals. [[Legacy:Static Mesh|Static mesh]]es and terrain\
      \ cannot be used to form zones.\n\nEven though zones are not as flexible as\
      \ Antiportals they are much faster to use for in-game occlusion and so should\
      \ be the first line of defense against mesh rendering. \n\nEssentially, if you\
      \ cannot \"see\" a zone then none of the geometry within that zone will be considered\
      \ by the rendering engine.  The entire level segment within the zone is occluded.\
      \ But zone portals can still be \"seen\" through even if they are opaque, so\
      \ do not take this too literally. When optimizing your level, assume that players\
      \ have magic glasses and can \"see\" through zone portals even if the texture\
      \ on them is opaque. But note, there is a nifty feature to get around this.\
      \ (See the ManualExcludes paragraph below).\n\nA popular optimization technique\
      \ in the Epic maps is to place zone portals at either end of a hallway.  This\
      \ way if you're viewing the hallway from an off angle, the portal at the far\
      \ end won't be visible through the portal at the near end, and everything beyond\
      \ the hallway can quickly be thrown out. Basically, try to create as many non-adjacent\
      \ zones as possible. In other words, combine zoning with the players view fustrum\
      \ to achieve the best occlusion.\n\nThe biggest drawback to zones is that it\
      \ is impossible to zone large outdoor areas. \n\nSee also: [[Legacy:Zoning|Zoning]]\n\
      \n===Using Antiportals===\n\nThat is why Antiportals were invented. They are\
      \ simple shapes that work even outdoors. Instead of telling the engine what\
      \ it should render, they tell the engine what it should not render, depending\
      \ on the direction the client is looking. They use the players view fustrum\
      \ to figure out what to occlude.\n\nComparing every polygon of a mesh against\
      \ an Antiportal is not cheap, but it is certainly less expensive than doing\
      \ so against regular BSP nodes on average (assuming the average BSP poly count\
      \ is 200~500), which was the old method. Of course these days with the use of\
      \ static-meshes, the BSP poly count is often much lower than that, with static-mesh\
      \ polygons in their place, and static-meshes are even worse! They don't even\
      \ have a binary-tree like BSP. [Instead of a Logarithmic-Complexity data-structure-oriented\
      \ piece of code to process mesh occlusion, there would be an N^2-Complexity\
      \ algorithm-oriented piece of code. This is, in laymen's terms, is VERY BAD.]\n\
      \nAntiportals solve this problem because they are simple shapes (or should be!).\
      \ However, since they will occlude everything \"behind\" them (relative to the\
      \ client), they must be placed carefully. Make sure they are always hidden inside\
      \ visible static geometry including BSP, terrain, and static-meshes.\n\n[[Legacy:Antiportal|Antiportal]]s\
      \ can be any shape you want, and the specific shape does not make a big difference\
      \ in the performance, as long as it is not complex (the number of vertices should\
      \ be low: try to stick to simple prisms). [[Legacy:Antiportal|Antiportal]]s\
      \ are relatively slow but if they occlude a large number of polygons it is generally\
      \ worth it. An Antiportal can, for instance, be placed inside a static mesh\
      \ to basically make the static mesh occlude, or it can be made to the shape\
      \ of an existing BSP brush to make that brush appear to occlude meshes. Note\
      \ that Antiportals are invisible and cannot actually be used to make visible\
      \ geometry. If an Antiportal is visible to a player, a [[Legacy:Hall Of Mirrors|HOM]]\
      \ effect can occur.\n\nAntiportals are generally used in large outdoor areas\
      \ or other areas that cannot be reasonably zoned off. For example, if you had\
      \ an outdoor area with a large hill, it is usually not practical to try to zone\
      \ of the hill, because you are pretty well always going to be able to see into\
      \ the other zones, just not into much of them. In this instance an Antiportal\
      \ could be used to occlude the objects behind it.  (see CTF-Magma for a counterexample).\n\
      \nIt is worth noting that an Antiportal will only be used for occlusion if some\
      \ part of it is contained within a zone visible to the player. As a result,\
      \ the total number of Antiportals in a level may be high, but you should try\
      \ to keep the number of Antiportals in each zone to a minimum to optimize the\
      \ number of Antiportal calculations made.\n\n[[Legacy:Devastation|Devastation]]\
      \ also adds a new type of Antiportal to the mappers arsenal.  This is the Zone-antiportal.\
      \  A Zone-Antiportal is just like a regular Antiportal, except that it has a\
      \ list of zones that will not be occluded by the Antiportal, even if that zone\
      \ is behind the Antiportal. One use for this might be a huge outdoor wall with\
      \ little \"pockets\" (rooms) attach to it. The rooms would have open doorways\
      \ in the wall (requiring some subtraction brushes for the doors + zone portal\
      \ sheets). The entire wall shape could contain a big rectangular antiportal\
      \ to block everything beyond the wall EXCEPT those rooms by adding them to the\
      \ zones to exclude. A more common example would be a building in the outdoors\
      \ which should occlude everything behind it but not everything inside of it\
      \ (you can see through the windows for instance).\n\n===Using BSP inside of\
      \ Antiportals for Online Optimization===\n\nAntiportals occlude static meshes,\
      \ BSP and terrain chunks, but DO NOT occlude other players or their projectiles.\
      \ If you plan on having a lot of players in a map that uses antiportals, create\
      \ a slightly smaller semisolid/unlit/invisible BSP brush and put it inside of\
      \ the antiportal. This will occlude any network relevant actors and will help\
      \ optimize online play with many players.\n\n===Combining The Two===\n\nAntiportals\
      \ can be used to occlude zone portals.  For example, lets say you have a set\
      \ of large pillars in front of an area with a small doorway at the back.  Obviously\
      \ you should put a zone portal in the doorway, but it would be useful to not\
      \ render the zone inside the doorway if the doorway isn't visible.  The two\
      \ options are to either put a zone portal between each pillar (one big zone\
      \ portal won't work), or to put an Antiportal inside each pillar.  Depending\
      \ on the specifics of the map the later may be the better option as it saves\
      \ you a zone (you only have 63 available, which can become an issue in a large\
      \ CTF/BR map).\n\n===Manually excluding Zones from rendering===\n\nAntiportals\
      \ are not the only way in the UnrealEngine2 to prevent things from being rendered.\
      \ Another, more general way is the ManualExcludes array in the [[Legacy:ZoneInfo|ZoneInfo]]'s\
      \ ZoneVisibility property group. In this array you can specify the ZoneInfos\
      \ of other zones that will never be seen by a player in the zone belonging to\
      \ this ZoneInfo.\n\nImagine a room with a few pillars and a doorway on each\
      \ side. The pillars might be placed in a way that blocks the view from each\
      \ doorwa to the others, but it might not be possible to properly occlude those\
      \ doorways' zoneportals with antiportals in the pillars. This is where the ManualExcludes\
      \ take over: For each doorway zone you specify the other doorway zones in the\
      \ ManualExcludes array to completely exclude them from rendering.\n\nTo add\
      \ ZoneInfos to the ManualExcludes list you have to put their Object -> Name\
      \ into the textbox. For obvious reasons you can only exclude zones that have\
      \ their own ZoneInfo actor.\n\n===Using ForcedVisibilityZoneTag===\n\nSometimes\
      \ the visibility logic can't decide, which zone an actor belongs to. This often\
      \ happens with larger [[Legacy:StaticMesh|StaticMesh]]es that reach into BSP\
      \ geometry. These actors are often rendered even if they are not visible at\
      \ all.\n\nYou can tell the visibility logic, which zone this actor belongs to,\
      \ by matching its Display -> ForcedVisibilityZoneTag property with the Events\
      \ -> Tag property of the ZoneInfo(s) of the zone(s) the actor is located in.\
      \ This way the visibility logic knows that the actor belongs to the zone or\
      \ zones with that tag and properly excludes it from rendering if the zone is\
      \ not visible.\n\n==Reducing Channels for Online Optimization==\n\nEvery pickup\
      \ on a map creates a channel when played on a server. The more channels on a\
      \ server, the more lag there is overall on the server. Try to use fewer pickups\
      \ on larger maps, and replace clustered pickups with a weapon locker.\n\n==Simplify\
      \ Collisions==\n\nIf you have many complex [[Legacy:Static Mesh|static mesh]]es\
      \ in your level either make them non-collidable or use a simplified collision\
      \ hull. You can do this either with a blockingvolume or by saving a brush into\
      \ the static mesh using the static mesh browser. If you do the latter, the brush\
      \ will be used for collision but the static mesh will be displayed. If you do\
      \ not use either of these, straight triangle collision is used on every polygon\
      \ in the static mesh. This can have a significant impact on the performance\
      \ of your level.\n\n==Simplify lighting==\n\nEven static lights are costly since\
      \ they are only static with respect to BSP geometry and STATIC mesh vertices.\
      \ Their effect on non-static meshes (such as) players is still calculated at\
      \ runtime. The bigger the radius of each light, the longer it takes the runtime\
      \ system to calculate what non-static meshes should be affected by the light.\
      \ The obvious solution is to minimize the radius of lights (typically 32 units\
      \ are less is good), as well as the number of unique lights. [Given a choice\
      \ between using smaller radii and fewer lights, it is better to use smaller\
      \ radii and more lights. The volume of a sphere is 4/3*Pi*r^3! Multiply this\
      \ by the number of lights (assuming that they have the same radius), and you\
      \ get n*4/3*Pi*r^3, where n is the number of lights. So increasing the r on\
      \ a particular light has a cubic detriment on its efficiency, whereas increasing\
      \ n only has a linear detriment.]\n\nBut sometimes, you need to use a bigger\
      \ radius, or many lights. One method to minimize this is to use bSpecialit in\
      \ the light, as well as on the BSP surface or static mesh it is intended to\
      \ light. This will cause the light to be used for static map lighting, while\
      \ not actually lighting players. However, be careful that this does not look\
      \ weird! You still need to have lights that *do* affect the player to make sure\
      \ it looks like they are really in the room.\n\n==Minimize Texture Loading==\n\
      \nDon't be afraid to use polygons. A high polycount (up to 50,000 polygons in\
      \ view today!) is better than a high texture-memory usage!\n\nThese days, the\
      \ pushing of mesh polygons to the video card is far cheaper than the pushing\
      \ of textures. In the old days, textures were used for making \"virtual\" 3D\
      \ geometry (just like faux architecture in the real world), to save on the number\
      \ of polygons. This meant that great looking levels needed a relatively large\
      \ number of custom textures to implement all the 3D looking complexities. It\
      \ was hoped that the user did not notice too much that what he was looking at\
      \ was actually a 2D surface. This technique is still used today, and the best\
      \ example of its usage is in AS-RobotFactory. It is sometimes the best way to\
      \ do things. However the rules have changed quite a bit. Now polygons are generally\
      \ far cheaper. Texture loading is quite expensive. The fewer unique textures\
      \ you use in your level, the better. Try to reuse a relatively small set of\
      \ base textures frequently, and building the vast majority of your 3D detail\
      \ with *actual* 3D geometry in Maya or 3DS Max. Not only will your level run\
      \ faster, but it will also look better.\n\nIt is also far easier and faster\
      \ to model architecture than it is to draw it. Of course, this comes with some\
      \ practice in Maya or 3DSMax. Emulating 3D shapes in 2D artwork is hard. Especially\
      \ since, once applied in your level, the textures tend to look flat and unrealistic.\n\
      \nThere are however somethings that must be done with textures still. Small\
      \ 3D details, like the plaster on a wall, or the rust on metal, must still be\
      \ implemeted with textures. It also sometimes looks better to use textures to\
      \ implement details that are very nearly 2D in real life, because you can control\
      \ the shadown and lighting directly using your raster editor, as opposed to\
      \ hoping and praying that the Vertex Lighting of Unreal looks good.\n\nAnother\
      \ method for decreasing texture usage is using ColorModifier materials together\
      \ with grayscale images. See http://udn.epicgames.com/Two/MaterialsModifiers.\
      \ The grays determine how dark or light to make various pixels in the texture.\
      \ Using this, you can optimize the compression of the texture since it has fewer\
      \ colors, while also reusing the texture in various parts of your map with different\
      \ hues. This works well for paint, plaster and other raw bases. It does not\
      \ work well for multi-hued textures, such as moss covered rocks (where there\
      \ are rock hues [brown, black, white ] and moss colors [green, aqua]). You can\
      \ sometimes design your static meshes with a few extra polygons that are layered,\
      \ to apply multiple ColorModifier materials and textures. Note that Combiner\
      \ materials were desinged for this kind of thing, but at present do not work\
      \ reliably on many conventional video cards. Plus it is more efficient on many\
      \ static meshes to use a few more polygons that are layered, than it is to go\
      \ through the Unreal material pipeline with Combiners.\n\nAs an example of this\
      \ method, you might have an old Italian villa. The houses are made of red-organgish\
      \ bricks, plaster, and paint. The plaster and paint is weathered and peeling\
      \ off in places. You could implement the walls of the houses using 2 or 3 polygon\
      \ layers: the underneath layer for bricks, the 2nd layer for plaster, and possibly\
      \ a 3rd layer for paint. You could reuse the same brick texture on all the walls\
      \ of the houses, but use different colors of plaster and paint on top of it.\
      \ All the houses could reuse just a handful of plaster and paint textures that\
      \ are grayscale, plus a bunch of ColorModifier materials to make these few textures\
      \ look like 20 or 30 different ones! And since ColorModifiers are implemented\
      \ at compile time in the lightmap, you are not actually increasing  texture\
      \ memory usage to the video card at runtime. The same textures are cached and\
      \ reused, improving framerate, while only the lightmap values change from house\
      \ to house.\n\n==Other Things that Slow Levels Down==\n\nHere are some things\
      \ to avoid when you construct a level:\n* Spawning. Spawning objects is relatively\
      \ expensive. Emitters spawn a large number of objects, and so are not practical\
      \ in most serious online maps. (Avoid emitters!)\n* Players. Having many players\
      \ in an area is a bad idea most of the time. It not only causes network lag\
      \ since the server must send more information to each client, but it also slows\
      \ down the rendering tremendously, with the game having to animate and render\
      \ all the players. Also, don't forget that local clients perform local physics\
      \ calculations to estimate the location and orientation every player that relevant\
      \ more frequently than the server updates this information (to minimize the\
      \ appearance of network lag). Unfortunately, this leads to local CPU lag due\
      \ to all the extra calculations. Avoid creating maps in which large scale battles\
      \ take place in one visible area.\n\n==Discussion==\n\n'''inio:''' Is anyone\
      \ interested in a demo map with examples of the various occlusion methods? \
      \ There seems to be a lot of \"here's how you do it\" but no \"here's how it's\
      \ done\" relating to this topic.\n\n'''King Mango:''' Yes I would be interested\
      \ in that. I am curious if antiportals are even used in UED2... It would be\
      \ nice if there could be rooms connected to one another, with a sort of \"stand\
      \ here\" design on the floor. Then when a player stands there a series of triggered\
      \ messages explains what to put the crosshairs on and why the info displayed\
      \ by \"stat fps\" is different for each occlusion type.\n\n'''EntropicLqd:'''\
      \ Antiportals do not exist in UED2 at all.  PS - It looks liked you are cutting\
      \ and pasting from notepad with word wrap turned on - hard line breaks are generally\
      \ a bad thing.\n\n'''inio:''' Antiportals weren't needed in UnrealEd 2 because\
      \ it didn't have [[Legacy:Terrain|terrain]], it didn't have [[Legacy:Static\
      \ Mesh|static mesh]]es, and BSP ocluded in the engine versions it worked with.\n\
      \n'''anonymous:''' Could anyone possibly write something about how to fix bsp\
      \ bugs the editor causes? I'm talking stuff like invisible walls caused by editor\
      \ rebuilder bugs. I currently fix them by remodelling part of my maps with is\
      \ a rather unelegant way.\n\n'''evil_blue_dude:''' I've found a fool proof way.\
      \ I think I'll write a tutorial! :D\n\n'''Durandal:''' Think it needs noting\
      \ that WarpZones are still functional in UEd 3.0. (But I cant work out how to\
      \ make it so you see the other side...)\n\n'''Tarquin:''' Note to c-67-183-19-195.client.comcast.net\
      \ &ndash; the new material is good, but we now seem to have the same thing twice\
      \ (more or less) on this page. Things need merging.\n\n==Related Topics==\n\
      * [[Legacy:Zone|Zone]]\n* [[Legacy:ZoneInfo|ZoneInfo]]\n* [[Legacy:Antiportal|Antiportal]]\n\
      * [[Legacy:Distance Fog|Distance Fog]]\n\n----\n* Zone Your World: [[Legacy:Zoning|Zoning]]\
      \ , [[Legacy:Zoning (UT)|Zoning (UT)]]\n* [[Legacy:ZoneInfo|ZoneInfo]]\n* [[Legacy:WarpZoneInfo|WarpZoneInfo]]\
      \ &ndash; also (confusingly) called portals\n* [[Legacy:Gravity, Warp Tunnels|Gravity,\
      \ Warp Tunnels]]\n* [[Legacy:Zone|Zone]]\n* [[Legacy:BlockAll|BlockAll]] and\
      \ [[Legacy:BlockPlayer|BlockPlayer]]\n* [[Legacy:Solidity|Solidity]]\n* [[Legacy:Invisible\
      \ Collision Hull|Invisible Collision Hull]]\n* [[Legacy:Volume|Volume]]\n\n\
      ----\n\n[[:Category:Legacy Mapping]]\n\n[[:Category:Legacy To Do]] &ndash; see\
      \ top.\n\n\t\n\n\t\n[[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy\
      \ To Do|{{PAGENAME}}]]"
  properties: []
  revId: 5077
name: "Legacy:Map Optimization"
revision:
  revid: 5077
  parentid: 5079
  user: "24-113-89-39.wavecable.com"
  timestamp: 1185824588.000000000
  comment: "* Added awesome tutorial link by AngelMapper, removed previous (broken)\
    \ link."
timestamp: 1668753141.562373000
