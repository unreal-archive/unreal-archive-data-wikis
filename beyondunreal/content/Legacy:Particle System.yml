---
parse:
  title: "Legacy:Particle System"
  text:
    text: "<p>A <b>particle system</b> is a fairly low-level concept in 3D graphics,\
      \ though it has only recently become practical for use in a gaming environment.\
      \ A particle system allows a user to generate complex objects fairly easily\
      \ and with relatively little resource usage by making many copies of simple,\
      \ small objects.</p>\n<p>For example, consider a lawn, covered in grass. If\
      \ you were to model each individual blade of grass and display them all as meshes,\
      \ the graphics load would be enormous and it would take a long time to make,\
      \ too. By defining \"template\" blades of grass and defining the area that the\
      \ grass should cover, a particle system can randomly or algorithmically generate\
      \ the lawn quite quickly. Similarly, the \"particles\" (blades of grass in this\
      \ example) can be individually affected for very realistic effects.</p>\n<p>The\
      \ lawn effect is exactly what <a href=\"/Legacy:Terrain_Decoration_Layer\" title=\"\
      Legacy:Terrain Decoration Layer\">Terrain Decoration Layers</a> do in the engine's\
      \ <a href=\"/Legacy:Terrain\" title=\"Legacy:Terrain\">terrain</a> system; in\
      \ the strictest sense of computer graphics, that is a particle system. However,\
      \ when we speak of particle systems in Unreal, we mean systems that generate\
      \ particles dynamically.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Particle_Systems_in_the_Unreal_Engine\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Particle Systems in the Unreal\
      \ Engine</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #Emitters\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Emitters</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#xEmitters_.28UT2003.29\"><span\
      \ class=\"tocnumber\">1.2</span> <span class=\"toctext\">xEmitters (UT2003)</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#xWeatherEffect_.28UT2003.29\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">xWeatherEffect\
      \ (UT2003)</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #U2_systems\"><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">U2\
      \ systems</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-6\"\
      ><a href=\"#Notes_on_Particle_Systems\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Notes on Particle Systems</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-7\"><a href=\"#Links\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">Links</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Particle_Systems_in_the_Unreal_Engine\">Particle\
      \ Systems in the Unreal Engine</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Particle_System?section=1\"\
      \ title=\"Edit section: Particle Systems in the Unreal Engine\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The current build\
      \ of the <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal Engine\">Unreal\
      \ engine</a> (UnrealEngine2, <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a> and beyond) has a particle system built in\
      \ natively. It allows you to generate a particle system based on sprites, meshes,\
      \ stretched sprites (\"beams\") or \"sparks\".</p>\n<p>Digital Extremes also\
      \ implemented two additional particle systems that were released with <a href=\"\
      /Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>. All\
      \ three systems contain all of their particles within themselves and handle\
      \ all of the particle's dynamics within themselves. This results in a dramatic\
      \ savings of processor and memory usage, because any class that wants to be\
      \ visible must be an actor, and having thousands of actors on-screen would use\
      \ piles of resources. The native particle systems are best thought of internally\
      \ as a single actor which dynamically changes its appearance. <a href=\"/Legacy:Dynamic_Texture\"\
      \ title=\"Legacy:Dynamic Texture\">Dynamic Textures</a>, aka \"procedural textures,\"\
      \ were a two dimensional particle system, though they were considerably less\
      \ flexible than the new particle systems in UT2003.</p>\n<p>Just to complicate\
      \ matters, <a href=\"/Legacy:Unreal_2\" title=\"Legacy:Unreal 2\">Unreal 2</a>\
      \ has a separate particle system too.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Emitters\">Emitters</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Particle_System?section=2\" title=\"Edit section:\
      \ Emitters\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><a href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\">Emitter</a> is the particle\
      \ system produced by Epic Games. It is a powerful but complex system, and is\
      \ capable of reproducing the same effects as <a href=\"/Legacy:XEmitter\" title=\"\
      Legacy:XEmitter\">xEmitters</a> and <a href=\"/Legacy:XWeatherEffect\" title=\"\
      Legacy:XWeatherEffect\">xWeatherEffects</a> with only a few exceptions. They\
      \ are also capable of making compound effects, ie particles that move relative\
      \ to other particles, etc. However, <a href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\"\
      >Emitters</a> have piles upon piles of settings and can be difficult to learn\
      \ to use properly. There is also a small number of effects that they cannot\
      \ do without some custom scripting.</p>\n<p>See <a href=\"/Legacy:ParticleEmitter_Cookbook\"\
      \ title=\"Legacy:ParticleEmitter Cookbook\">ParticleEmitter Cookbook</a> for\
      \ some settings.</p>\n<h3><span class=\"mw-headline\" id=\"xEmitters_.28UT2003.29\"\
      >xEmitters (UT2003)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Particle_System?section=3\" title=\"Edit section:\
      \ xEmitters (UT2003)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><a href=\"/Legacy:XEmitter\" title=\"Legacy:XEmitter\">xEmitter</a> is the\
      \ main particle system made by Digital Extremes for <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>. They cannot make\
      \ compound effects, but are much easier to use than <a href=\"/Legacy:Emitter\"\
      \ title=\"Legacy:Emitter\">Emitters</a> and the beam effects produced by <a\
      \ href=\"/Legacy:XEmitter\" title=\"Legacy:XEmitter\">xEmitters</a> can move,\
      \ allowing you to make beam-based trails, for instance. However, it is worth\
      \ noting that the xEmitter system is not part of the Unreal Engine per se so\
      \ if you are planning to get an Unreal Engine license and produce a commercial\
      \ title you will not be able to use xEmitters.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"xWeatherEffect_.28UT2003.29\">xWeatherEffect (UT2003)</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Particle_System?section=4\"\
      \ title=\"Edit section: xWeatherEffect (UT2003)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Legacy:XWeatherEffect\" title=\"Legacy:XWeatherEffect\"\
      >xWeatherEffect</a> is essentially a powered down and simplified <a href=\"\
      /Legacy:XEmitter\" title=\"Legacy:XEmitter\">xEmitter</a>. Because it is simpler\
      \ it runs faster than an <a href=\"/Legacy:XEmitter\" title=\"Legacy:XEmitter\"\
      >xEmitter</a> and is much, much easier to set up to do what you want. It will\
      \ also follow your player around so you do not need to cover the map with particle\
      \ emitters in order to have coverage everywhere. You can set up certain <a href=\"\
      /Legacy:Volume\" title=\"Legacy:Volume\">volumes</a> to be excluded so it doesn't\
      \ snow inside your buildings as well.</p>\n<h3><span class=\"mw-headline\" id=\"\
      U2_systems\">U2 systems</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Particle_System?section=5\"\
      \ title=\"Edit section: U2 systems\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>See <a href=\"/Legacy:On_ParticleGenerators_(U2)\"\
      \ title=\"Legacy:On ParticleGenerators (U2)\">On ParticleGenerators (U2)</a>\
      \ for now. (someone with expertise please do a quick summary of U2 types here!)</p>\n\
      <p><b>GRAF1K:</b> Won't U2 be basically dead soon after UT2004 is released?\
      \ Why bother?&#160;:)</p>\n<p><b>Foxpaw:</b> Well, people are still making mods\
      \ for UT, long after the release of UT2003, so I don't think U2 will die with\
      \ the release of UT2004.</p>\n<p><b>GRAF1K:</b> That's because UT is so different\
      \ from UT2003. I don't think, for example, people will continue modding for\
      \ UT2003 after the release of UT2004.</p>\n<p><b>EricBlade:</b> Anyone know\
      \ offhand when the Particle Editor was implemented in the Editor? UDN indicates\
      \ that it should work for 2226 builds, but my game has no particle editor in\
      \ it's editor&#160;:(</p>\n<p><br /></p>\n<h2><span class=\"mw-headline\" id=\"\
      Notes_on_Particle_Systems\">Notes on Particle Systems</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Particle_System?section=6\"\
      \ title=\"Edit section: Notes on Particle Systems\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Particle systems allow you to generate and display\
      \ a large number of meshes or sprites with relative ease. However, as Spiderman\
      \ taught us, \"with great power, comes great responsibility!\" Particles drawn\
      \ using a particle system use far less resources than if they were all actors,\
      \ but they are not \"free.\" This is important to remember as how good a particle\
      \ effect looks is generally related to the number of particles. For instance,\
      \ a dust cloud with twice as many particles half the size will have more apparent\
      \ detail. You must avoid using tons of particles, of course, to prevent large\
      \ drops in framerate.</p>\n<p>However, it is also important to keep in mind\
      \ that particles, especially sprites, should never be too large, unless they\
      \ are in the skybox. The reason for this is simple: every time a sprite intersects\
      \ a mesh, it must be \"clipped\" so it isn't drawn overlapping the mesh on-screen.\
      \ A big sprite can touch a lot of triangles, and this can make the game run\
      \ REALLY slow. If a particle system you are using is slowing down the framerate,\
      \ try adjusting it both ways (more/smaller particles, and less/larger particles)\
      \ to improve performance.</p>\n<h2><span class=\"mw-headline\" id=\"Links\"\
      >Links</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Particle_System?section=7\" title=\"Edit section:\
      \ Links\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\">Emitter</a></li>\n\
      <li><a href=\"/Legacy:XEmitter\" title=\"Legacy:XEmitter\">xEmitter</a></li>\n\
      <li><a href=\"/Legacy:XWeatherEffect\" title=\"Legacy:XWeatherEffect\">xWeatherEffect</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.046 seconds\nReal time\
      \ usage: 0.144 seconds\nPreprocessor visited node count: 27/1000000\nPreprocessor\
      \ generated node count: 32/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2487-0!*!0!!en!*!* and timestamp\
      \ 20221118122536 and revision id 5967\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:XWeatherEffect"
  - ns: 100
    exists: true
    name: "Legacy:On ParticleGenerators (U2)"
  - ns: 100
    exists: true
    name: "Legacy:Volume"
  - ns: 100
    exists: true
    name: "Legacy:Terrain Decoration Layer"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Texture"
  - ns: 100
    exists: true
    name: "Legacy:Unreal 2"
  - ns: 100
    exists: true
    name: "Legacy:ParticleEmitter Cookbook"
  - ns: 100
    exists: true
    name: "Legacy:Terrain"
  - ns: 100
    exists: true
    name: "Legacy:XEmitter"
  - ns: 100
    exists: true
    name: "Legacy:Emitter"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Particle Systems in the Unreal Engine"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 1146
    anchor: "Particle_Systems_in_the_Unreal_Engine"
  - toclevel: 2
    level: "3"
    line: "Emitters"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 2313
    anchor: "Emitters"
  - toclevel: 2
    level: "3"
    line: "xEmitters (UT2003)"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 2996
    anchor: "xEmitters_.28UT2003.29"
  - toclevel: 2
    level: "3"
    line: "xWeatherEffect (UT2003)"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 3575
    anchor: "xWeatherEffect_.28UT2003.29"
  - toclevel: 2
    level: "3"
    line: "U2 systems"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 4103
    anchor: "U2_systems"
  - toclevel: 1
    level: "2"
    line: "Notes on Particle Systems"
    number: "2"
    index: "6"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 4866
    anchor: "Notes_on_Particle_Systems"
  - toclevel: 1
    level: "2"
    line: "Links"
    number: "3"
    index: "7"
    fromtitle: "Legacy:Particle_System"
    byteoffset: 6047
    anchor: "Links"
  displaytitle: "Legacy:Particle System"
  iwlinks: []
  wikitext:
    text: "A '''particle system''' is a fairly low-level concept in 3D graphics, though\
      \ it has only recently become practical for use in a gaming environment. A particle\
      \ system allows a user to generate complex objects fairly easily and with relatively\
      \ little resource usage by making many copies of simple, small objects. \n\n\
      For example, consider a lawn, covered in grass. If you were to model each individual\
      \ blade of grass and display them all as meshes, the graphics load would be\
      \ enormous and it would take a long time to make, too. By defining \"template\"\
      \ blades of grass and defining the area that the grass should cover, a particle\
      \ system can randomly or algorithmically generate the lawn quite quickly. Similarly,\
      \ the \"particles\" (blades of grass in this example) can be individually affected\
      \ for very realistic effects.\n\nThe lawn effect is exactly what [[Legacy:Terrain\
      \ Decoration Layer|Terrain Decoration Layer]]s do in the engine's [[Legacy:Terrain|terrain]]\
      \ system; in the strictest sense of computer graphics, that is a particle system.\
      \ However, when we speak of particle systems in Unreal, we mean systems that\
      \ generate particles dynamically.\n\n==Particle Systems in the Unreal Engine==\n\
      \nThe current build of the [[Legacy:Unreal Engine|Unreal engine]] (UnrealEngine2,\
      \ [[Legacy:UT2003|UT2003]] and beyond) has a particle system built in natively.\
      \ It allows you to generate a particle system based on sprites, meshes, stretched\
      \ sprites (\"beams\") or \"sparks\". \n\nDigital Extremes also implemented two\
      \ additional particle systems that were released with [[Legacy:UT2003|UT2003]].\
      \ All three systems contain all of their particles within themselves and handle\
      \ all of the particle's dynamics within themselves. This results in a dramatic\
      \ savings of processor and memory usage, because any class that wants to be\
      \ visible must be an actor, and having thousands of actors on-screen would use\
      \ piles of resources. The native particle systems are best thought of internally\
      \ as a single actor which dynamically changes its appearance. [[Legacy:Dynamic\
      \ Texture|Dynamic Texture]]s, aka \"procedural textures,\" were a two dimensional\
      \ particle system, though they were considerably less flexible than the new\
      \ particle systems in UT2003.\n\nJust to complicate matters, [[Legacy:Unreal\
      \ 2|Unreal 2]] has a separate particle system too.\n\n===Emitters===\n\n[[Legacy:Emitter|Emitter]]\
      \ is the particle system produced by Epic Games. It is a powerful but complex\
      \ system, and is capable of reproducing the same effects as [[Legacy:XEmitter|xEmitter]]s\
      \ and [[Legacy:XWeatherEffect|xWeatherEffect]]s with only a few exceptions.\
      \ They are also capable of making compound effects, ie particles that move relative\
      \ to other particles, etc. However, [[Legacy:Emitter|Emitter]]s have piles upon\
      \ piles of settings and can be difficult to learn to use properly. There is\
      \ also a small number of effects that they cannot do without some custom scripting.\n\
      \nSee [[Legacy:ParticleEmitter Cookbook|ParticleEmitter Cookbook]] for some\
      \ settings.\n\n===xEmitters (UT2003)===\n\n[[Legacy:XEmitter|xEmitter]] is the\
      \ main particle system made by Digital Extremes for [[Legacy:UT2003|UT2003]].\
      \ They cannot make compound effects, but are much easier to use than [[Legacy:Emitter|Emitter]]s\
      \ and the beam effects produced by [[Legacy:XEmitter|xEmitter]]s can move, allowing\
      \ you to make beam-based trails, for instance. However, it is worth noting that\
      \ the xEmitter system is not part of the Unreal Engine per se so if you are\
      \ planning to get an Unreal Engine license and produce a commercial title you\
      \ will not be able to use xEmitters.\n\n===xWeatherEffect (UT2003)===\n\n[[Legacy:XWeatherEffect|xWeatherEffect]]\
      \ is essentially a powered down and simplified [[Legacy:XEmitter|xEmitter]].\
      \ Because it is simpler it runs faster than an [[Legacy:XEmitter|xEmitter]]\
      \ and is much, much easier to set up to do what you want. It will also follow\
      \ your player around so you do not need to cover the map with particle emitters\
      \ in order to have coverage everywhere. You can set up certain [[Legacy:Volume|volume]]s\
      \ to be excluded so it doesn't snow inside your buildings as well.\n\n===U2\
      \ systems===\n\nSee [[Legacy:On ParticleGenerators (U2)|On ParticleGenerators\
      \ (U2)]] for now. (someone with expertise please do a quick summary of U2 types\
      \ here!)\n\n'''GRAF1K:''' Won't U2 be basically dead soon after UT2004 is released?\
      \ Why bother? :)\n\n'''Foxpaw:''' Well, people are still making mods for UT,\
      \ long after the release of UT2003, so I don't think U2 will die with the release\
      \ of UT2004.\n\n'''GRAF1K:''' That's because UT is so different from UT2003.\
      \ I don't think, for example, people will continue modding for UT2003 after\
      \ the release of UT2004.\n\n'''EricBlade:''' Anyone know offhand when the Particle\
      \ Editor was implemented in the Editor?  UDN indicates that it should work for\
      \ 2226 builds, but my game has no particle editor in it's editor :(\n \n\n==Notes\
      \ on Particle Systems==\n\nParticle systems allow you to generate and display\
      \ a large number of meshes or sprites with relative ease. However, as Spiderman\
      \ taught us, \"with great power, comes great responsibility!\" Particles drawn\
      \ using a particle system use far less resources than if they were all actors,\
      \ but they are not \"free.\" This is important to remember as how good a particle\
      \ effect looks is generally related to the number of particles. For instance,\
      \ a dust cloud with twice as many particles half the size will have more apparent\
      \ detail. You must avoid using tons of particles, of course, to prevent large\
      \ drops in framerate.\n\nHowever, it is also important to keep in mind that\
      \ particles, especially sprites, should never be too large, unless they are\
      \ in the skybox. The reason for this is simple: every time a sprite intersects\
      \ a mesh, it must be \"clipped\" so it isn't drawn overlapping the mesh on-screen.\
      \ A big sprite can touch a lot of triangles, and this can make the game run\
      \ REALLY slow. If a particle system you are using is slowing down the framerate,\
      \ try adjusting it both ways (more/smaller particles, and less/larger particles)\
      \ to improve performance.\n\n==Links==\n* [[Legacy:Emitter|Emitter]]\n* [[Legacy:XEmitter|xEmitter]]\n\
      * [[Legacy:XWeatherEffect|xWeatherEffect]]"
  properties: []
  revId: 5967
name: "Legacy:Particle System"
revision:
  revid: 5967
  parentid: 5968
  user: "EricBlade"
  timestamp: 1142726804.000000000
  comment: "*"
timestamp: 1668774336.924619000
