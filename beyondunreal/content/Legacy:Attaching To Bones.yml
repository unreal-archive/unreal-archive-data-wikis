---
parse:
  title: "Legacy:Attaching To Bones"
  text:
    text: "<p>A <a href=\"/edit/Legacy:Bone?redlink=1\" class=\"new\" title=\"Legacy:Bone\
      \ (page does not exist)\">bone</a> is part of a <a href=\"/Legacy:Skeletal_Mesh\"\
      \ title=\"Legacy:Skeletal Mesh\">skeletal mesh</a>. The standard skeletal mesh\
      \ for the <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">pawn</a> includes the\
      \ head, right leg, left leg, right foot, left foot, right hand, left hand, right\
      \ shoulder, left shoulder, and the spine. Using <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a>, you can attach almost anything\
      \ to any bone of a given mesh.</p>\n<p>Here, we'll discuss how you can attach\
      \ actors to bones. For instance if you wanted an actor to follow a pawn around,\
      \ you could attach it to a bone of that pawn. Or, if you wanted to attach emitters\
      \ to the legs of a pawn, you would have to attach the emitters to both leg bones.\
      \ An example of this is the Speed Combo in <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>.</p>\n<p></p>\n<div id=\"toc\"\
      \ class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li\
      \ class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Step_One\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Step One</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Step_Two\"><span class=\"tocnumber\">3</span> <span\
      \ class=\"toctext\">Step Two</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#Step_Three\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Step Three</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"\
      #Step_Four\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Step\
      \ Four</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Attaching_To_Bones?section=1\" title=\"Edit section: Introduction\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>We'll\
      \ start by putting you through a very basic walkthrough. We'll spawn a custom\
      \ trigger, attach it to the 'spine' of the pawn and then we will spawn Emitters\
      \ and attach them to both legs. I suggest making a new package and call it AttachingToBones\
      \ or something easy (see <a href=\"/Legacy:Set_Up_Package_Folders\" title=\"\
      Legacy:Set Up Package Folders\">Set Up Package Folders</a> for help with this).</p>\n\
      <h2><span class=\"mw-headline\" id=\"Step_One\">Step One</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Attaching_To_Bones?section=2\"\
      \ title=\"Edit section: Step One\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>First, we need to create the custom trigger. Create\
      \ the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> SpineTrigger <span class=\"kw1\">extends</span> <span class=\"\
      kw4\">Trigger</span>;\n \n<span class=\"co1\">//We aren't going to make this\
      \ do anything because</span>\n<span class=\"co1\">//this is just a walkthrough\
      \ on how you can attach something to a bone</span>\n \n<span class=\"kw1\">DefaultProperties</span>\n\
      <span class=\"br0\">{</span>\n      bHidden<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">False</span> <span class=\"co1\">//We want this false so you\
      \ can see that it actually attached itself to the spine.</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Step_Two\"\
      >Step Two</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Attaching_To_Bones?section=3\" title=\"Edit\
      \ section: Step Two\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Now we need to spawn this trigger and attach it to the pawn. The following\
      \ mutator code should do this with no problem at all.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> MutAttachToBones <span\
      \ class=\"kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n<span\
      \ class=\"kw1\">var</span> <span class=\"kw4\">trigger</span> BoneTrigger; <span\
      \ class=\"co1\">//We need this variable or, it won't recognize what your trying\
      \ to attach.</span>\n \n<span class=\"kw1\">function</span> ModifyPlayer<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Pawn</span> Other<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">xPawn</span> x;\n   x <span class=\"sy0\">=</span> <span\
      \ class=\"kw9\">xPawn</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;\n \n  BoneTrigger <span class=\"sy0\">=</span> <span class=\"\
      kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'SpineTrigger'</span>, x,, x.<span class=\"kw7\">Location</span>,\
      \ x.<span class=\"kw7\">Rotation</span><span class=\"br0\">)</span>;\n  x.<span\
      \ class=\"kw4\">AttachToBone</span><span class=\"br0\">(</span>BoneTrigger,\
      \ <span class=\"st0\">'spine'</span><span class=\"br0\">)</span>; <span class=\"\
      co1\">//AttachToBone I believe is a native function so it can work in all actors.</span>\n\
      \                             <span class=\"co1\">//'spine' is the bone name.\
      \  If you wanted you could replace this with any other bone name.</span>\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">DefaultProperties</span>\n\
      <span class=\"br0\">{</span>\nGroupName<span class=\"sy0\">=</span><span class=\"\
      st0\">\"AttachingStuffToBone\"</span>\nFriendlyName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"AttachingStuffToBone\"</span>\nDescription<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Attaching Stuff ToBone.|| This will attach the\
      \ triggers and the emitters to the pawn..\"</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Step_Three\">Step Three</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Attaching_To_Bones?section=4\" title=\"Edit section: Step\
      \ Three\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Next, we will put attaching emitters into the mix. Add the following bits\
      \ of code. (pulled from the SpeedCombo source)</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">    <span class=\"kw1\">var</span> <span class=\"kw9\">xEmitter</span>\
      \ LeftTrail, RightTrail; <span class=\"co1\">//Put this line just under the\
      \ first variable</span>\n \n    <span class=\"co1\">//Put these lines of code\
      \ just under your BoneTrigger lines of code.</span>\n    LeftTrail <span class=\"\
      sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'SpeedTrail'</span>, x,, x.<span\
      \ class=\"kw7\">Location</span>, x.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">//SpeedTrail is already created\
      \ :).</span>\n    x.<span class=\"kw4\">AttachToBone</span><span class=\"br0\"\
      >(</span>LeftTrail, <span class=\"st0\">'lfoot'</span><span class=\"br0\">)</span>;\
      \ <span class=\"co1\">//lfoot = Left Foot</span>\n \n    RightTrail <span class=\"\
      sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'SpeedTrail'</span>, x,, x.<span\
      \ class=\"kw7\">Location</span>, x.<span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span>;\n    x.<span class=\"kw4\">AttachToBone</span><span\
      \ class=\"br0\">(</span>RightTrail, <span class=\"st0\">'rfoot'</span><span\
      \ class=\"br0\">)</span>;<span class=\"co1\">//rfoot = Right Foot</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Step_Four\">Step Four</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Attaching_To_Bones?section=5\" title=\"Edit section: Step\
      \ Four\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Compile&#160;:). Your basically done now. All you have to do is create our\
      \ .INT file for the mutator and the package that you put the code in. When all\
      \ is well, load up <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"\
      mw-redirect\">UT2003</a>. Start a match with your Mutator selected. When the\
      \ match starts, go to your console and type <b>behindview 1</b>. Now walk around.\
      \ You should see the trigger attached to your spine and the emitters attached\
      \ to your feet.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Attaching_To_Bones?section=6\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Bone_Names\" title=\"Legacy:Bone Names\">Bone Names</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Attaching_To_Bones?section=7\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>EricBlade:</b>\
      \ I'm attempting to attach a beam emitter to a player, which works great, using\
      \ the normal bHardAttach and SetBase(), however, I wanted a little more realism\
      \ for attachment, so I attached it to the player's Right Hand bone. This works\
      \ great, as long as I'm not in first person view. If I'm in first person view,\
      \ the emitter is invisible. Is this because the player pawn isn't drawn, while\
      \ in first person? Is there a way around that?</p>\n<p><b>SuperApe:</b> You\
      \ guessed it. Third-person view draws the xPawn just like you see other teammates\
      \ and enemies. But, First-person view draws entirely different meshes for your\
      \ weapons and turns off your xPawn. If you want your beam emitter to be on the\
      \ \"weapon hand\", first I'd make sure you know which one it is (since you can\
      \ configure it to be Right, Left, Center or Hidden in UT200x), then I'd try\
      \ two things: 1) try to \"piggy back\" on the First-Person Weapon mesh so you\
      \ automatically get it's walk/run bobbing motion, then if not that, 2) try attaching\
      \ your beam emitter to the Controller instead and make your own bobbing to try\
      \ and match the First-Person weapon meshes. It seems #2 would be decidedly more\
      \ difficult, but it's something to try.</p>\n<p><b>Xian:</b> Not sure how it\
      \ works in UE2, since UE1 doesn't have bones (well it does, but no support for\
      \ it from UScript), but I for one would keep a pointer to the attachemnt then\
      \ use RenderOverlays and Canvas.DrawActor();</p>\n<p>OK this is how I'd do it\
      \ in UE1, IF I had bone support:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> AttachIt <span class=\"br0\">(</span><span\
      \ class=\"kw9\">PlayerController</span> Other<span class=\"br0\">)</span> <span\
      \ class=\"co1\">// at least I think the PalyerController is the main \"player\"\
      \ in UE2</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Actor</span> MyAttachment; <span class=\"co1\">// Obviously\
      \ &lt;Actor&gt; here would be replaced by your Object type</span>\n \n  MyAttachment\
      \ <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'Actor'</span>,\
      \ Other,, Other.<span class=\"kw7\">Location</span>, Other.<span class=\"kw7\"\
      >Rotation</span><span class=\"br0\">)</span>;\n  Other.<span class=\"kw4\">AttachToBone</span><span\
      \ class=\"br0\">(</span>MyAttachment,<span class=\"st0\">'whatever'</span><span\
      \ class=\"br0\">)</span>;\n  Xian<span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>.<span class=\"me0\">MyAttachment</span> <span class=\"sy0\">=</span>\
      \ MyAttachment;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Ok that'd\
      \ be the basic attachment (small reference, I didn't get the point of the xPawn\
      \ conversion... it's just useless code since the function is available to all\
      \ Actor class... anyway...)</p>\n<p>And this is in a your PlayerPawn (I assume\
      \ it's the PlayerController in UE2):</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> <span class=\"kw4\">RenderOverlays</span>\
      \ <span class=\"br0\">(</span><span class=\"kw8\">Canvas</span> <span class=\"\
      kw8\">Canvas</span><span class=\"br0\">)</span> <span class=\"co1\">// if this\
      \ function doesn't exist in UE2 use PostRender</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>MyAttachment <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n     <span class=\"kw8\">Canvas</span>.<span class=\"me0\">DrawActor</span><span\
      \ class=\"br0\">(</span>MyAttachment,<span class=\"kw6\">False</span><span class=\"\
      br0\">)</span>;\n \n  <span class=\"co1\">// don't forget to call the super\
      \ :)</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>I'm sorry\
      \ I can't give you a detailed enough example but if you worked with both engines\
      \ you'll know how to port what I showed you properly. Although I doubt it's\
      \ the case but if it still doesn't work try setting bHidden to False in your\
      \ attachment(s)&#160;:)</p>\n<p><b>SuperApe:</b> I see the economy of this suggestion.\
      \ I think it depends on the detail you'd want from this attachment. If you want\
      \ it to interact with the world in 3D, as a beam emitter shooting from the arm\
      \ might, a HUDOverlay may not do it.</p>\n<p><b>Xian:</b> well Canvas.DrawActor()\
      \ is limited to drawing ONLY the mesh itself. However... there are ways around\
      \ it. Remember the Pulse Gun from UT&#160;? It has the beam sprite/model, the\
      \ green long one. You could use that in another effect or a \"fake\" projectile\
      \ which would have 0 damage with a bit of adjusted code. This approach might\
      \ work in UE2 if you have such a firing animation/sprite/model. So what I am\
      \ saying is use DrawActor() for the mesh but the firing effect or whatever it\
      \ does would be a separate thing... although you could prolly use a PostRender()\
      \ call in that as well if it is all just texture drawing and not real animation\
      \ (where Actor-&gt;Effects classes should be used). But I think you get the\
      \ idea&#160;:) Such code \"hacks\" are quite efficient if done properly. Engine\
      \ limitations should not stop you.</p>\n<p><b>EricBlade:</b> What I ended up\
      \ doing is, since I'm moving a projector and emitter and light around every\
      \ tick, anyway, I just made it so that the emitter gets reset to GetBoneCoords('rhand',1).Origin\
      \ as it's position, and that works just about as well&#160;:)</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.094 seconds\nReal time usage: 0.255 seconds\n\
      Preprocessor visited node count: 60/1000000\nPreprocessor generated node count:\
      \ 132/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:459-0!*!0!!en!*!* and timestamp 20221120201950 and revision\
      \ id 1507\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: false
    name: "Legacy:Bone"
  - ns: 100
    exists: true
    name: "Legacy:Set Up Package Folders"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Skeletal Mesh"
  - ns: 100
    exists: true
    name: "Legacy:Bone Names"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 719
    anchor: "Introduction"
  - toclevel: 1
    level: "2"
    line: "Step One"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 1091
    anchor: "Step_One"
  - toclevel: 1
    level: "2"
    line: "Step Two"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 1481
    anchor: "Step_Two"
  - toclevel: 1
    level: "2"
    line: "Step Three"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 2367
    anchor: "Step_Three"
  - toclevel: 1
    level: "2"
    line: "Step Four"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 2985
    anchor: "Step_Four"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 3418
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "7"
    index: "7"
    fromtitle: "Legacy:Attaching_To_Bones"
    byteoffset: 3473
    anchor: "Discussion"
  displaytitle: "Legacy:Attaching To Bones"
  iwlinks: []
  wikitext:
    text: "A [[Legacy:Bone|bone]] is part of a [[Legacy:Skeletal Mesh|skeletal mesh]].\
      \  The standard skeletal mesh for the [[Legacy:Pawn|pawn]] includes the head,\
      \ right leg, left leg, right foot, left foot, right hand, left hand, right shoulder,\
      \ left shoulder, and the spine.  Using [[Legacy:UnrealScript|UnrealScript]],\
      \ you can attach almost anything to any bone of a given mesh.\n\nHere, we'll\
      \ discuss how you can attach actors to bones.  For instance if you wanted an\
      \ actor to follow a pawn around, you could attach it to a bone of that pawn.\
      \  Or, if you wanted to attach emitters to the legs of a pawn, you would have\
      \ to attach the emitters to both leg bones. An example of this is the Speed\
      \ Combo in [[Legacy:UT2003|UT2003]].\n\n==Introduction==\n\nWe'll start by putting\
      \ you through a very basic walkthrough.  We'll spawn a custom trigger, attach\
      \ it to the 'spine' of the pawn and then we will spawn Emitters and attach them\
      \ to both legs.  I suggest making a new package and call it AttachingToBones\
      \ or something easy (see [[Legacy:Set Up Package Folders|Set Up Package Folders]]\
      \ for help with this).\n\n==Step One==\n\nFirst, we need to create the custom\
      \ trigger.  Create the following:\n\n<uscript>\nclass SpineTrigger extends Trigger;\n\
      \n//We aren't going to make this do anything because\n//this is just a walkthrough\
      \ on how you can attach something to a bone\n\nDefaultProperties\n{\n      bHidden=False\
      \ //We want this false so you can see that it actually attached itself to the\
      \ spine.\n}\n</uscript>\n\n==Step Two==\n\nNow we need to spawn this trigger\
      \ and attach it to the pawn.  The following mutator code should do this with\
      \ no problem at all.\n\n<uscript>\nclass MutAttachToBones extends Mutator;\n\
      \nvar trigger BoneTrigger; //We need this variable or, it won't recognize what\
      \ your trying to attach.\n\nfunction ModifyPlayer(Pawn Other)\n{\n  local xPawn\
      \ x;\n   x = xPawn(Other);\n\n  BoneTrigger = Spawn(class'SpineTrigger', x,,\
      \ x.Location, x.Rotation);\n  x.AttachToBone(BoneTrigger, 'spine'); //AttachToBone\
      \ I believe is a native function so it can work in all actors.\n           \
      \                  //'spine' is the bone name.  If you wanted you could replace\
      \ this with any other bone name.\n}\n\nDefaultProperties\n{\nGroupName=\"AttachingStuffToBone\"\
      \nFriendlyName=\"AttachingStuffToBone\"\nDescription=\"Attaching Stuff ToBone.||\
      \ This will attach the triggers and the emitters to the pawn..\"\n}\n</uscript>\n\
      \n==Step Three==\n\nNext, we will put attaching emitters into the mix.  Add\
      \ the following bits of code. (pulled from the SpeedCombo source)\n\n<uscript>\n\
      \    var xEmitter LeftTrail, RightTrail; //Put this line just under the first\
      \ variable\n\n    //Put these lines of code just under your BoneTrigger lines\
      \ of code.\n    LeftTrail = Spawn(class'SpeedTrail', x,, x.Location, x.Rotation);\
      \ //SpeedTrail is already created :).\n    x.AttachToBone(LeftTrail, 'lfoot');\
      \ //lfoot = Left Foot\n\n    RightTrail = Spawn(class'SpeedTrail', x,, x.Location,\
      \ x.Rotation);\n    x.AttachToBone(RightTrail, 'rfoot');//rfoot = Right Foot\n\
      </uscript>\n\n==Step Four==\n\nCompile :).  Your basically done now.  All you\
      \ have to do is create our .INT file for the mutator and the package that you\
      \ put the code in.  When all is well, load up [[Legacy:UT2003|UT2003]].  Start\
      \ a match with your Mutator selected.  When the match starts, go to your console\
      \ and type '''behindview 1'''.  Now walk around.  You should see the trigger\
      \ attached to your spine and the emitters attached to your feet.\n\n==Related\
      \ Topics==\n* [[Legacy:Bone Names|Bone Names]]\n\n==Discussion==\n\n'''EricBlade:'''\
      \ I'm attempting to attach a beam emitter to a player, which works great, using\
      \ the normal bHardAttach and SetBase(), however, I wanted a little more realism\
      \ for attachment, so I attached it to the player's Right Hand bone.  This works\
      \ great, as long as I'm not in first person view.  If I'm in first person view,\
      \ the emitter is invisible.  Is this because the player pawn isn't drawn, while\
      \ in first person?  Is there a way around that?\n\n'''SuperApe:''' You guessed\
      \ it.  Third-person view draws the xPawn just like you see other teammates and\
      \ enemies.  But, First-person view draws entirely different meshes for your\
      \ weapons and turns off your xPawn.  If you want your beam emitter to be on\
      \ the \"weapon hand\", first I'd make sure you know which one it is (since you\
      \ can configure it to be Right, Left, Center or Hidden in UT200x), then I'd\
      \ try two things: 1) try to \"piggy back\" on the First-Person Weapon mesh so\
      \ you automatically get it's walk/run bobbing motion, then if not that, 2) try\
      \ attaching your beam emitter to the Controller instead and make your own bobbing\
      \ to try and match the First-Person weapon meshes.  It seems #2 would be decidedly\
      \ more difficult, but it's something to try.\n\n'''Xian:''' Not sure how it\
      \ works in UE2, since UE1 doesn't have bones (well it does, but no support for\
      \ it from UScript), but I for one would keep a pointer to the attachemnt then\
      \ use RenderOverlays and Canvas.DrawActor();\n\nOK this is how I'd do it in\
      \ UE1, IF I had bone support:\n\n<uscript>\nfunction AttachIt (PlayerController\
      \ Other) // at least I think the PalyerController is the main \"player\" in\
      \ UE2\n{\n  local Actor MyAttachment; // Obviously <Actor> here would be replaced\
      \ by your Object type\n\n  MyAttachment = Spawn(class'Actor', Other,, Other.Location,\
      \ Other.Rotation);\n  Other.AttachToBone(MyAttachment,'whatever');\n  Xian(Other).MyAttachment\
      \ = MyAttachment;\n}\n</uscript>\n\nOk that'd be the basic attachment (small\
      \ reference, I didn't get the point of the xPawn conversion... it's just useless\
      \ code since the function is available to all Actor class... anyway...)\n\n\
      And this is in a your PlayerPawn (I assume it's the PlayerController in UE2):\n\
      \n<uscript>\nfunction RenderOverlays (Canvas Canvas) // if this function doesn't\
      \ exist in UE2 use PostRender\n{\n  if (MyAttachment != None)\n     Canvas.DrawActor(MyAttachment,False);\n\
      \n  // don't forget to call the super :)\n}\n</uscript>\n\nI'm sorry I can't\
      \ give you a detailed enough example but if you worked with both engines you'll\
      \ know how to port what I showed you properly. Although I doubt it's the case\
      \ but if it still doesn't work try setting bHidden to False in your attachment(s)\
      \ :)\n\n'''SuperApe:''' I see the economy of this suggestion.  I think it depends\
      \ on the detail you'd want from this attachment.  If you want it to interact\
      \ with the world in 3D, as a beam emitter shooting from the arm might, a HUDOverlay\
      \ may not do it.\n\n'''Xian:''' well Canvas.DrawActor() is limited to drawing\
      \ ONLY the mesh itself. However... there are ways around it. Remember the Pulse\
      \ Gun from UT ? It has the beam sprite/model, the green long one. You could\
      \ use that in another effect or a \"fake\" projectile which would have 0 damage\
      \ with a bit of adjusted code. This approach might work in UE2 if you have such\
      \ a firing animation/sprite/model. So what I am saying is use DrawActor() for\
      \ the mesh but the firing effect or whatever it does would be a separate thing...\
      \ although you could prolly use a PostRender() call in that as well if it is\
      \ all just texture drawing and not real animation (where Actor->Effects classes\
      \ should be used). But I think you get the idea :) Such code \"hacks\" are quite\
      \ efficient if done properly. Engine limitations should not stop you.\n\n'''EricBlade:'''\
      \ What I ended up doing is, since I'm moving a projector and emitter and light\
      \ around every tick, anyway, I just made it so that the emitter gets reset to\
      \ GetBoneCoords('rhand',1).Origin as it's position, and that works just about\
      \ as well :)"
  properties: []
  revId: 1507
name: "Legacy:Attaching To Bones"
revision:
  revid: 1507
  parentid: 1508
  user: "EricBlade"
  timestamp: 1145050475.000000000
  comment: "found a way around"
timestamp: 1668975331.396081000
