---
parse:
  title: "Legacy:Version Control"
  text:
    text: "<p>Version Control refers to the process of managing a history of changes\
      \ to one or more files over time. This is generally used in the context of project\
      \ management for software development and other projects involving collaborative\
      \ changes to files or other resources.</p>\n<p>There are many different software\
      \ packages available which implement version control systems in many different\
      \ ways. A couple of the most well-known early version control systems were SCCS\
      \ (the Source Code Control System) and RCS (the Revision Control System), which\
      \ allowed users to \"check out\" files, make changes, and then check them back\
      \ in. While this was an effective way of recording changes to files and reducing\
      \ the problems which arise from multiple people working on the same files, it\
      \ did have its limitations when it came to widespread development of many people\
      \ working on a group of files (such as a project) together, and in response\
      \ to many of these limitations, a tool known as <a href=\"/Legacy:CVS\" title=\"\
      Legacy:CVS\">CVS</a> (the Concurrent Versions System) was developed, which has\
      \ since become arguably the most popular version control system in use to this\
      \ day.</p>\n<p>CVS uses a somewhat different model to RCS/SCCS, in that it is\
      \ explicitly designed to allow multiple people to check out files from a central\
      \ repository at the same time, and work on them in their own working directories,\
      \ concurrently. It does this by using a technique known as \"merging\" to resolve\
      \ conflicts. When two people modify the same file at the same time, CVS is able\
      \ to detect this and will attempt to automatically merge the results into one\
      \ version of the file which reflects both users' changes. In many cases, CVS\
      \ is able to do this automatically and nearly transparently to the users. In\
      \ some cases, when two developers modify exactly the same part of a file in\
      \ incompatible ways, a conflict can occur. If this happens, CVS will require\
      \ one developer or another to manually resolve the conflict before allowing\
      \ them to check their changes back into the repository.</p>\n<p>The CVS \"merging\"\
      \ model is what has come to be used by a large number of version control systems\
      \ in use today, although some other systems are designed around a more traditional\
      \ one-person-at-a-time locking model. Both models can be useful in different\
      \ scenarios, and when choosing a version control system it is important to understand\
      \ the subtleties of how the model it uses will work in the context of the project\
      \ you will be using it with.</p>\n<h2><span class=\"mw-headline\" id=\"Open_Source_Version_Control_Systems\"\
      >Open Source Version Control Systems</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Version_Control?section=1\"\
      \ title=\"Edit section: Open Source Version Control Systems\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>(The following list\
      \ is only a small portion of the open-source version control systems available)</p>\n\
      <dl>\n<dt>RCS</dt>\n<dd>The Revision Control System, one of the first widespread\
      \ version control systems and still in use to this day in some environments.\
      \ Its usefulness is arguably limited, however, as other products such as CVS\
      \ are much better for most applications.<br />\n<a rel=\"nofollow\" class=\"\
      external free\" href=\"http://www.cs.purdue.edu/homes/trinkle/RCS/\">http://www.cs.purdue.edu/homes/trinkle/RCS/</a></dd>\n\
      </dl>\n<dl>\n<dt><a href=\"/Legacy:CVS\" title=\"Legacy:CVS\">CVS</a></dt>\n\
      <dd>The Concurrent Versions System is extremely popular and has been tried and\
      \ tested over many years (this Wiki system itself is built on top of a CVS repository).<br\
      \ />\n<a rel=\"nofollow\" class=\"external free\" href=\"http://www.cvshome.org/\"\
      >http://www.cvshome.org/</a></dd>\n</dl>\n<dl>\n<dt><a href=\"/Legacy:Subversion\"\
      \ title=\"Legacy:Subversion\">Subversion</a></dt>\n<dd>Subversion is a relatively\
      \ new system which is intended to solve some of the few lingering problems with\
      \ CVS.<br />\n<a rel=\"nofollow\" class=\"external free\" href=\"http://subversion.tigris.org/\"\
      >http://subversion.tigris.org/</a></dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Commercial_Server.2FClient_Products\">Commercial Server/Client Products</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Version_Control?section=2\" title=\"Edit section: Commercial\
      \ Server/Client Products\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <dl>\n<dt>SCCS</dt>\n<dd>The Source Code Control System was originally developed\
      \ as part of AT&amp;T UNIX. This product is rarely used anymore, and is mostly\
      \ of interest for historical value.<br />\n<a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://cssc.sourceforge.net/old-cyclic/sccs.html\">http://cssc.sourceforge.net/old-cyclic/sccs.html</a></dd>\n\
      </dl>\n<dl>\n<dt>NXN Alienbrain</dt>\n<dd>Asset managment system designed for\
      \ PC-based 3D, digital entertainment and simulation projects and provides efficient\
      \ management for 3D models, textures, video, audio, and source code. Typical\
      \ projects running on NXN alienbrain range from 5 to 100 users. It is integrated\
      \ with Microsoft's Visual Studio, Metrowerks' CodeWarrior , 3DSMax, Maya, Softimage|XSI,\
      \ Photoshop.<br />\n<a rel=\"nofollow\" class=\"external free\" href=\"http://www.alienbrain.com\"\
      >http://www.alienbrain.com</a></dd>\n</dl>\n<dl>\n<dt>Perforce</dt>\n<dd>The\
      \ Perforce SCM system features comprehensive software configuration management\
      \ capabilities built around a scalable client/server architecture. Requiring\
      \ only TCP/IP, developers can access the Perforce Server through a variety of\
      \ Perforce clients. Perforce can be deployed quickly and easily, and requires\
      \ minimal administration, even for large sites. Available on over 50 operating\
      \ systems, Perforce includes version control, workspace management, atomic change\
      \ transactions and a powerful branching model to develop and maintain multiple\
      \ codelines. Perforce client/server is free for 2 client usage.<br />\n<a rel=\"\
      nofollow\" class=\"external free\" href=\"http://www.perforce.com\">http://www.perforce.com</a></dd>\n\
      </dl>\n<dl>\n<dt>Microsoft Visual SourceSafe</dt>\n<dd>Visual SourceSafe is\
      \ a version control system with integration for Microsoft Visual Studio.<br\
      \ />\n<a rel=\"nofollow\" class=\"external free\" href=\"http://msdn.microsoft.com/ssafe\"\
      >http://msdn.microsoft.com/ssafe</a></dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Version_Control?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:CVS\" title=\"Legacy:CVS\"\
      >CVS</a></li>\n<li><a href=\"/Legacy:Subversion\" title=\"Legacy:Subversion\"\
      >Subversion</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.027\
      \ seconds\nReal time usage: 0.042 seconds\nPreprocessor visited node count:\
      \ 18/1000000\nPreprocessor generated node count: 30/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3599-0!*!0!!*!*!*\
      \ and timestamp 20221118094326 and revision id 9199\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Subversion"
  - ns: 100
    exists: true
    name: "Legacy:CVS"
  templates: []
  images: []
  externallinks:
  - "http://www.perforce.com"
  - "http://cssc.sourceforge.net/old-cyclic/sccs.html"
  - "http://www.cvshome.org/"
  - "http://subversion.tigris.org/"
  - "http://www.alienbrain.com"
  - "http://www.cs.purdue.edu/homes/trinkle/RCS/"
  - "http://msdn.microsoft.com/ssafe"
  sections:
  - toclevel: 1
    level: "2"
    line: "Open Source Version Control Systems"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Version_Control"
    byteoffset: 2461
    anchor: "Open_Source_Version_Control_Systems"
  - toclevel: 1
    level: "2"
    line: "Commercial Server/Client Products"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Version_Control"
    byteoffset: 3304
    anchor: "Commercial_Server.2FClient_Products"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Version_Control"
    byteoffset: 4801
    anchor: "Related_Topics"
  displaytitle: "Legacy:Version Control"
  iwlinks: []
  wikitext:
    text: "Version Control refers to the process of managing a history of changes\
      \ to one or more files over time.  This is generally used in the context of\
      \ project management for software development and other projects involving collaborative\
      \ changes to files or other resources.\n\nThere are many different software\
      \ packages available which implement version control systems in many different\
      \ ways.  A couple of the most well-known early version control systems were\
      \ SCCS (the Source Code Control System) and RCS (the Revision Control System),\
      \ which allowed users to \"check out\" files, make changes, and then check them\
      \ back in.  While this was an effective way of recording changes to files and\
      \ reducing the problems which arise from multiple people working on the same\
      \ files, it did have its limitations when it came to widespread development\
      \ of many people working on a group of files (such as a project) together, and\
      \ in response to many of these limitations, a tool known as [[Legacy:CVS|CVS]]\
      \ (the Concurrent Versions System) was developed, which has since become arguably\
      \ the most popular version control system in use to this day.\n\nCVS uses a\
      \ somewhat different model to RCS/SCCS, in that it is explicitly designed to\
      \ allow multiple people to check out files from a central repository at the\
      \ same time, and work on them in their own working directories, concurrently.\
      \  It does this by using a technique known as \"merging\" to resolve conflicts.\
      \  When two people modify the same file at the same time, CVS is able to detect\
      \ this and will attempt to automatically merge the results into one version\
      \ of the file which reflects both users' changes.  In many cases, CVS is able\
      \ to do this automatically and nearly transparently to the users.  In some cases,\
      \ when two developers modify exactly the same part of a file in incompatible\
      \ ways, a conflict can occur.  If this happens, CVS will require one developer\
      \ or another to manually resolve the conflict before allowing them to check\
      \ their changes back into the repository.\n\nThe CVS \"merging\" model is what\
      \ has come to be used by a large number of version control systems in use today,\
      \ although some other systems are designed around a more traditional one-person-at-a-time\
      \ locking model.  Both models can be useful in different scenarios, and when\
      \ choosing a version control system it is important to understand the subtleties\
      \ of how the model it uses will work in the context of the project you will\
      \ be using it with.\n\n==Open Source Version Control Systems==\n\n(The following\
      \ list is only a small portion of the open-source version control systems available)\n\
      \n; RCS: The Revision Control System, one of the first widespread version control\
      \ systems and still in use to this day in some environments.  Its usefulness\
      \ is arguably limited, however, as other products such as CVS are much better\
      \ for most applications. <br />http://www.cs.purdue.edu/homes/trinkle/RCS/\n\
      \n; [[Legacy:CVS|CVS]]: The Concurrent Versions System is extremely popular\
      \ and has been tried and tested over many years (this Wiki system itself is\
      \ built on top of a CVS repository).  <br />http://www.cvshome.org/\n\n; [[Legacy:Subversion|Subversion]]:\
      \ Subversion is a relatively new system which is intended to solve some of the\
      \ few lingering problems with CVS. <br />http://subversion.tigris.org/\n\n==Commercial\
      \ Server/Client Products==\n\n; SCCS: The Source Code Control System was originally\
      \ developed as part of AT&T UNIX.  This product is rarely used anymore, and\
      \ is mostly of interest for historical value. <br />http://cssc.sourceforge.net/old-cyclic/sccs.html\n\
      \n; NXN Alienbrain: Asset managment system designed for PC-based 3D, digital\
      \ entertainment and simulation projects and provides efficient management for\
      \ 3D models, textures, video, audio, and source code. Typical projects running\
      \ on NXN alienbrain range from 5 to 100 users. It is integrated with Microsoft's\
      \ Visual Studio, Metrowerks' CodeWarrior , 3DSMax, Maya, Softimage|XSI, Photoshop.\
      \ <br />http://www.alienbrain.com\n\n; Perforce: The Perforce SCM system features\
      \ comprehensive software configuration management capabilities built around\
      \ a scalable client/server architecture. Requiring only TCP/IP, developers can\
      \ access the Perforce Server through a variety of Perforce clients. Perforce\
      \ can be deployed quickly and easily, and requires minimal administration, even\
      \ for large sites. Available on over 50 operating systems, Perforce includes\
      \ version control, workspace management, atomic change transactions and a powerful\
      \ branching model to develop and maintain multiple codelines. Perforce client/server\
      \ is free for 2 client usage. <br />http://www.perforce.com\n\n; Microsoft Visual\
      \ SourceSafe: Visual SourceSafe is a version control system with integration\
      \ for Microsoft Visual Studio. <br />http://msdn.microsoft.com/ssafe\n\n==Related\
      \ Topics==\n\n* [[Legacy:CVS|CVS]]\n* [[Legacy:Subversion|Subversion]]"
  properties: []
  revId: 9199
name: "Legacy:Version Control"
revision:
  revid: 9199
  parentid: 9200
  user: "Foogod"
  timestamp: 1103446611.000000000
  comment: "*"
timestamp: 1668787710.808640000
