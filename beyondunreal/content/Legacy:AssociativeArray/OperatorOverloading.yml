---
parse:
  title: "Legacy:AssociativeArray/OperatorOverloading"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Operators\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Operators</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#AADemoCommandlet\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">AADemoCommandlet</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#AAProxy\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">AAProxy</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Related_Links\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Related Links</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Operators\">Operators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:AssociativeArray/OperatorOverloading?section=1\" title=\"\
      Edit section: Operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Associative arrays use angle brackets as a \"natural\" notation. The operators\
      \ are defined in the demonstration commandlet; they should be defined in a root-ward\
      \ class so they can be used widely. This is just a proof of concept.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"AADemoCommandlet\">AADemoCommandlet</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:AssociativeArray/OperatorOverloading?section=2\" title=\"\
      Edit section: AADemoCommandlet\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The commandlet contains the definitions and some demonstration\
      \ code.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >class</span> AADemoCommandlet\n    <span class=\"kw1\">extends</span> <span\
      \ class=\"kw8\">Commandlet</span>;\n \n<span class=\"coMULTI\">/* The left-angle\
      \ bracket operator. Returns an AAProxy, a proxy that can\n   be converted either\
      \ to a string or to a \"reference\" to a string. The\n   operator parameters\
      \ are an associative array  and the string index\n   into the array. */</span>\n\
      <span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span> AAProxy\
      \ <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"\
      kw1\">out</span> AssociativeArray A, <span class=\"kw1\">coerce</span> <span\
      \ class=\"kw5\">string</span> index<span class=\"br0\">)</span> \n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> AAProxy aa;\n  aa <span class=\"\
      sy0\">=</span> <span class=\"kw1\">new</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span> <span class=\"kw1\"\
      >class</span><span class=\"st0\">'AAProxy'</span>;\n  aa.<span class=\"me0\"\
      >init</span><span class=\"br0\">(</span>A, index<span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">return</span> aa; \n<span class=\"br0\">}</span> <span\
      \ class=\"co1\">// operator &lt;</span>\n \n<span class=\"coMULTI\">/* The right-angle\
      \ bracket operator; a postoperator as it finishes an\n   expression with an\
      \ AAProxy (an associative array generated the proxy).\n   This converts a proxy\
      \ to an r-value (a string) */</span>\n<span class=\"kw1\">final</span> postoperator\
      \ <span class=\"kw5\">string</span> <span class=\"sy0\">&gt;</span> <span class=\"\
      br0\">(</span>AAProxy proxy<span class=\"br0\">)</span> \n<span class=\"br0\"\
      >{</span>\n  <span class=\"kw2\">return</span> proxy.<span class=\"me0\">r_value</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\
      \ <span class=\"co1\">// operator &gt;</span>\n \n<span class=\"coMULTI\">/*\
      \ The combined right-angle bracket and assignment operator. It takes the\n \
      \  rhs of the operator (a string) and assigns the value to the appropriate\n\
      \   slot in the array. This operator converts the AAProxy into an\n   l-value.\
      \ */</span>\n<span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span>\
      \ <span class=\"kw5\">string</span> <span class=\"sy0\">&gt;=</span> <span class=\"\
      br0\">(</span>AAProxy A, <span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> value<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> A.<span class=\"me0\">l_value</span><span\
      \ class=\"br0\">(</span>value<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span> <span class=\"co1\">// operator &gt;=</span>\n \n<span class=\"coMULTI\"\
      >/* The left-angle bracket for use with AssociativeArrayIterator. Note that\n\
      \   it returns an AAProxy permitting the &gt; and &gt;= operators defined above\
      \ to\n   be used on the right end of an iterator expression. */</span>\n<span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">preoperator</span> AAProxy\
      \ <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>AssociativeArrayIterator\
      \ ai<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> AAProxy aa;\n  aa <span class=\"sy0\">=</span> <span class=\"\
      kw1\">new</span><span class=\"br0\">(</span><span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'AAProxy'</span>;\n  aa.<span class=\"me0\">init</span><span class=\"br0\"\
      >(</span>ai.<span class=\"me0\">getCollection</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>, ai.<span class=\"me0\">getIndex</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n  <span\
      \ class=\"kw2\">return</span> aa;\n<span class=\"br0\">}</span> <span class=\"\
      co1\">// operator &lt;</span>\n \n<span class=\"coMULTI\">/* preoperator increment\
      \ for iterators. No postoperator is defined because\n   it requires creation\
      \ of a temporary iterator and I didn't feel like\n   worrying about where the\
      \ spare copy went. */</span>\n<span class=\"kw1\">final</span> <span class=\"\
      kw1\">preoperator</span> AssociativeArrayIterator <span class=\"sy0\">++</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">out</span> AssociativeArrayIterator\
      \ ai<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  ai.<span\
      \ class=\"me0\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">return</span> ai;\n<span class=\"br0\">}</span> <span\
      \ class=\"co1\">// operator ++</span>\n \n<span class=\"coMULTI\">/* iterator's\
      \ not equality comparison. Equality would be easy to write and\n   this could\
      \ have been defined in terms of equality but the extra function\n   call seemed\
      \ a waste (given script speed). */</span>\n<span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"\
      nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>AssociativeArrayIterator\
      \ lhs,\n                            AssociativeArrayIterator rhs<span class=\"\
      br0\">)</span> \n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"sy0\">!</span>lhs.<span class=\"me0\">same</span><span class=\"\
      br0\">(</span>rhs<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/* Main function of the commandlet. Ignores its\
      \ input arguments and\n   demonstrates the use of the associative array operators\
      \ and\n   iterators. */</span>\n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">int</span> main<span class=\"br0\">(</span><span class=\"kw5\">string</span>\
      \ args<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> AssociativeArray A;\n  <span class=\"kw1\">local</span> AssociativeArrayIterator\
      \ i;\n \n      <span class=\"co1\">// construct a new, initially empty associative\
      \ array</span>\n  A <span class=\"sy0\">=</span> <span class=\"kw1\">new</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">None</span><span class=\"br0\">)</span>\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'AssociativeArray'</span>;\n\
      \ \n      <span class=\"co1\">// populate the array with some values; note that\
      \ the \"&gt;=\" is one symbol</span>\n  A<span class=\"sy0\">&lt;</span><span\
      \ class=\"st0\">\"fish\"</span><span class=\"sy0\">&gt;=</span>   <span class=\"\
      st0\">\"shark\"</span>;\n  A<span class=\"sy0\">&lt;</span><span class=\"st0\"\
      >\"dog\"</span><span class=\"sy0\">&gt;=</span>    <span class=\"br0\">(</span><span\
      \ class=\"st0\">\"new\"</span><span class=\"sy0\">$</span><span class=\"st0\"\
      >\"found\"</span><span class=\"sy0\">$</span><span class=\"st0\">\"land\"</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// parentheses are required</span>\n\
      \  A<span class=\"sy0\">&lt;</span><span class=\"st0\">\"cat\"</span><span class=\"\
      sy0\">&gt;=</span>    <span class=\"st0\">\"persian\"</span>;\n  A<span class=\"\
      sy0\">&lt;</span><span class=\"st0\">\"cow\"</span><span class=\"sy0\">&gt;=</span>\
      \    <span class=\"st0\">\"zebu\"</span>;\n  A<span class=\"sy0\">&lt;</span><span\
      \ class=\"st0\">\"bird\"</span><span class=\"sy0\">&gt;=</span>   <span class=\"\
      st0\">\"penguin\"</span>;\n  A<span class=\"sy0\">&lt;</span><span class=\"\
      st0\">\"rodent\"</span><span class=\"sy0\">&gt;=</span> <span class=\"st0\"\
      >\"gerbil\"</span>;\n \n      <span class=\"co1\">// i iterates across the elements\
      \ within the associative array </span>\n      <span class=\"co1\">// first and\
      \ second return the key and value portions of an associative</span>\n      <span\
      \ class=\"co1\">// array entry</span>\n  <span class=\"kw2\">for</span><span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">=</span> A.<span class=\"kw2\"\
      >begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; i <span\
      \ class=\"sy0\">!=</span> A.<span class=\"me0\">end</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>; <span class=\"sy0\">++</span>i<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"A&lt;\"</span> <span class=\"\
      sy0\">$</span> i.<span class=\"me0\">first</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">$</span> <span class=\"st0\">\"\
      &gt; = \"</span> <span class=\"sy0\">$</span> i.<span class=\"me0\">second</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\
      \    \n  <span class=\"br0\">}</span>\n \n      <span class=\"co1\">// modify\
      \ the contents of the associative array; put each entry inside</span>\n    \
      \  <span class=\"co1\">// curly braces</span>\n  <span class=\"kw2\">for</span><span\
      \ class=\"br0\">(</span>i <span class=\"sy0\">=</span> A.<span class=\"kw2\"\
      >begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; i <span\
      \ class=\"sy0\">!=</span> A.<span class=\"me0\">end</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>; <span class=\"sy0\">++</span>i<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"sy0\">&lt;</span>i<span\
      \ class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"st0\"\
      >\"{\"</span> <span class=\"sy0\">$</span> i.<span class=\"me0\">second</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span>\
      \ <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;\n  <span class=\"\
      br0\">}</span>\n \n  <span class=\"kw2\">for</span><span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> A.<span class=\"kw2\">begin</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>; i <span class=\"sy0\">!=</span>\
      \ A.<span class=\"me0\">end</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>; <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw3\">log</span><span class=\"br0\"\
      >(</span><span class=\"st0\">\"&lt;i&gt; = \"</span><span class=\"sy0\">$&lt;</span>i<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">)</span>; <span class=\"co1\"\
      >// this will just print out the values in the array</span>\n  <span class=\"\
      br0\">}</span>\n \n      <span class=\"co1\">// if an element doesn't exist,\
      \ returns \"\" without inserting an item</span>\n  <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"No such item: A&lt;<span class=\"\
      es0\">\\\"</span>gamma<span class=\"es0\">\\\"</span>&gt; = \"</span><span class=\"\
      sy0\">$</span>A<span class=\"sy0\">&lt;</span><span class=\"st0\">\"gamma\"\
      </span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>;\n \n  <span\
      \ class=\"kw2\">return</span> <span class=\"nu0\">0</span>;\n<span class=\"\
      br0\">}</span> <span class=\"co1\">// main</span>\n<span class=\"co1\">//AADemoCommandlet</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"AAProxy\">AAProxy</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:AssociativeArray/OperatorOverloading?section=3\"\
      \ title=\"Edit section: AAProxy\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The demonstration uses an <tt>AAProxy</tt> type. This\
      \ type tracks a location in an associative array and permits that entry to be\
      \ returned or set. It is simply a reference some associative array and a string\
      \ index. This is enough informatino to either insert or retrieve a value in\
      \ the associative array.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> AAProxy <span class=\"kw1\">extends</span> <span class=\"\
      kw8\">Object</span>;\n<span class=\"coMULTI\">/* AAProxy - Associative Array\
      \ proxy class. The proxy is returned by the &lt;\n indexing operator and can\
      \ be converted to either a l-value or an r-value\n (okay, almost an r-value;\
      \ the proxy can set the underlying element in\n the Associative Array). */</span>\n\
      \ \n<span class=\"coMULTI\">/* An AAProxy serves as in the stead of an associative\
      \ array element.  To\n be able to simulate an r-value, the array and the index\
      \ must both be\n kept in the proxy. Both are private to limit access to the\
      \ three\n interface functions. */</span>\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw1\">private</span> AssociativeArray A;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw1\">private</span> <span class=\"kw5\">string</span> ndx;\n\
      \ \n<span class=\"coMULTI\">/* init - initializes the proxy object with an associative\
      \ array and\n   an index. */</span>\n<span class=\"kw1\">function</span> init<span\
      \ class=\"br0\">(</span>AssociativeArray AA, <span class=\"kw5\">string</span>\
      \ index<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  A <span\
      \ class=\"sy0\">=</span> AA;\n  ndx <span class=\"sy0\">=</span> index;\n<span\
      \ class=\"br0\">}</span> <span class=\"co1\">// init</span>\n \n<span class=\"\
      coMULTI\">/* Read the value from the given location in the associative\n   array.\
      \ Effectively convert the proxy to an r-value representing the\n   given element\
      \ in the associative array.*/</span>\n<span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">string</span> r_value<span class=\"br0\">(</span><span class=\"\
      br0\">)</span> \n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ A.<span class=\"me0\">lookup</span><span class=\"br0\">(</span>ndx<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span> <span class=\"co1\">// r_value</span>\n\
      \ \n<span class=\"coMULTI\">/* Set the value represented by the proxy to the\
      \ value provided as a\n   parameter to this function. Effectively convert the\
      \ proxy to an l-value\n   representing the given element in the associative\
      \ array. */</span>\n<span class=\"kw1\">function</span> <span class=\"kw5\"\
      >string</span> l_value<span class=\"br0\">(</span><span class=\"kw5\">string</span>\
      \ v<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  A.<span class=\"\
      me0\">insert</span><span class=\"br0\">(</span>ndx, v<span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">return</span> v;\n<span class=\"br0\">}</span> <span\
      \ class=\"co1\">// l_value</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Links\">Related Links</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:AssociativeArray/OperatorOverloading?section=4\"\
      \ title=\"Edit section: Related Links\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:AssociativeArray\" title=\"\
      Legacy:AssociativeArray\">AssociativeArray</a> – Main topic</li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:AssociativeArray/OperatorOverloading?section=5\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>SuperApe:</b> This page needs linkage: related\
      \ topics, category tags, etc.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.096 seconds\nReal time usage: 0.163 seconds\nPreprocessor visited node count:\
      \ 36/1000000\nPreprocessor generated node count: 64/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:442-0!*!0!!en!*!*\
      \ and timestamp 20221120163441 and revision id 1473\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:AssociativeArray"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Operators"
    number: "1"
    index: "1"
    fromtitle: "Legacy:AssociativeArray/OperatorOverloading"
    byteoffset: 0
    anchor: "Operators"
  - toclevel: 2
    level: "3"
    line: "AADemoCommandlet"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:AssociativeArray/OperatorOverloading"
    byteoffset: 244
    anchor: "AADemoCommandlet"
  - toclevel: 2
    level: "3"
    line: "AAProxy"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:AssociativeArray/OperatorOverloading"
    byteoffset: 3878
    anchor: "AAProxy"
  - toclevel: 1
    level: "2"
    line: "Related Links"
    number: "2"
    index: "4"
    fromtitle: "Legacy:AssociativeArray/OperatorOverloading"
    byteoffset: 5498
    anchor: "Related_Links"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "5"
    fromtitle: "Legacy:AssociativeArray/OperatorOverloading"
    byteoffset: 5583
    anchor: "Discussion"
  displaytitle: "Legacy:AssociativeArray/OperatorOverloading"
  iwlinks: []
  wikitext:
    text: "==Operators ==\n\nAssociative arrays use angle brackets as a \"natural\"\
      \ notation. The operators are defined in the demonstration commandlet; they\
      \ should be defined in a root-ward class so they can be used widely. This is\
      \ just a proof of concept.\n\n===AADemoCommandlet===\n\nThe commandlet contains\
      \ the definitions and some demonstration code.\n\n<uscript>\nclass AADemoCommandlet\n\
      \    extends Commandlet;\n\n/* The left-angle bracket operator. Returns an AAProxy,\
      \ a proxy that can\n   be converted either to a string or to a \"reference\"\
      \ to a string. The\n   operator parameters are an associative array  and the\
      \ string index\n   into the array. */\nfinal operator(24) AAProxy < (out AssociativeArray\
      \ A, coerce string index) \n{\n  local AAProxy aa;\n  aa = new(None) class'AAProxy';\n\
      \  aa.init(A, index);\n  return aa; \n} // operator <\n\n/* The right-angle\
      \ bracket operator; a postoperator as it finishes an\n   expression with an\
      \ AAProxy (an associative array generated the proxy).\n   This converts a proxy\
      \ to an r-value (a string) */\nfinal postoperator string > (AAProxy proxy) \n\
      {\n  return proxy.r_value();\n} // operator >\n\n/* The combined right-angle\
      \ bracket and assignment operator. It takes the\n   rhs of the operator (a string)\
      \ and assigns the value to the appropriate\n   slot in the array. This operator\
      \ converts the AAProxy into an\n   l-value. */\nfinal operator(24) string >=\
      \ (AAProxy A, coerce string value) \n{\n  return A.l_value(value);\n} // operator\
      \ >=\n\n/* The left-angle bracket for use with AssociativeArrayIterator. Note\
      \ that\n   it returns an AAProxy permitting the > and >= operators defined above\
      \ to\n   be used on the right end of an iterator expression. */\nfinal preoperator\
      \ AAProxy < (AssociativeArrayIterator ai)\n{\n  local AAProxy aa;\n  aa = new(None)\
      \ class'AAProxy';\n  aa.init(ai.getCollection(), ai.getIndex());\n  return aa;\n\
      } // operator <\n\n/* preoperator increment for iterators. No postoperator is\
      \ defined because\n   it requires creation of a temporary iterator and I didn't\
      \ feel like\n   worrying about where the spare copy went. */\nfinal preoperator\
      \ AssociativeArrayIterator ++(out AssociativeArrayIterator ai) \n{\n  ai.next();\n\
      \  return ai;\n} // operator ++\n\n/* iterator's not equality comparison. Equality\
      \ would be easy to write and\n   this could have been defined in terms of equality\
      \ but the extra function\n   call seemed a waste (given script speed). */\n\
      final operator(26) bool != (AssociativeArrayIterator lhs,\n                \
      \            AssociativeArrayIterator rhs) \n{\n  return !lhs.same(rhs);\n}\n\
      \n/* Main function of the commandlet. Ignores its input arguments and\n   demonstrates\
      \ the use of the associative array operators and\n   iterators. */\nfunction\
      \ int main(string args) \n{\n  local AssociativeArray A;\n  local AssociativeArrayIterator\
      \ i;\n\n      // construct a new, initially empty associative array\n  A = new(None)\
      \ class'AssociativeArray';\n\n      // populate the array with some values;\
      \ note that the \">=\" is one symbol\n  A<\"fish\">=   \"shark\";\n  A<\"dog\"\
      >=    (\"new\"$\"found\"$\"land\"); // parentheses are required\n  A<\"cat\"\
      >=    \"persian\";\n  A<\"cow\">=    \"zebu\";\n  A<\"bird\">=   \"penguin\"\
      ;\n  A<\"rodent\">= \"gerbil\";\n\n      // i iterates across the elements within\
      \ the associative array \n      // first and second return the key and value\
      \ portions of an associative\n      // array entry\n  for(i = A.begin(); i !=\
      \ A.end(); ++i) {\n    log(\"A<\" $ i.first() $ \"> = \" $ i.second());    \n\
      \  }\n\n      // modify the contents of the associative array; put each entry\
      \ inside\n      // curly braces\n  for(i = A.begin(); i != A.end(); ++i) {\n\
      \    <i>= (\"{\" $ i.second() $ \"}\");\n  }\n\n  for(i = A.begin(); i != A.end();\
      \ ++i) {\n    log(\"<i> = \"$<i>); // this will just print out the values in\
      \ the array\n  }\n\n      // if an element doesn't exist, returns \"\" without\
      \ inserting an item\n  log(\"No such item: A<\\\"gamma\\\"> = \"$A<\"gamma\"\
      >);\n\n  return 0;\n} // main\n//AADemoCommandlet\n</uscript>\n\n===AAProxy===\n\
      \nThe demonstration uses an <tt>AAProxy</tt> type. This type tracks a location\
      \ in an associative array and permits that entry to be returned or set. It is\
      \ simply a reference some associative array and a string index. This is enough\
      \ informatino to either insert or retrieve a value in the associative array.\n\
      \n<uscript>\nclass AAProxy extends Object;\n/* AAProxy - Associative Array proxy\
      \ class. The proxy is returned by the <\n indexing operator and can be converted\
      \ to either a l-value or an r-value\n (okay, almost an r-value; the proxy can\
      \ set the underlying element in\n the Associative Array). */\n\n/* An AAProxy\
      \ serves as in the stead of an associative array element.  To\n be able to simulate\
      \ an r-value, the array and the index must both be\n kept in the proxy. Both\
      \ are private to limit access to the three\n interface functions. */\nvar private\
      \ AssociativeArray A;\nvar private string ndx;\n\n/* init - initializes the\
      \ proxy object with an associative array and\n   an index. */\nfunction init(AssociativeArray\
      \ AA, string index) \n{\n  A = AA;\n  ndx = index;\n} // init\n\n/* Read the\
      \ value from the given location in the associative\n   array. Effectively convert\
      \ the proxy to an r-value representing the\n   given element in the associative\
      \ array.*/\nfunction string r_value() \n{\n  return A.lookup(ndx);\n} // r_value\n\
      \n/* Set the value represented by the proxy to the value provided as a\n   parameter\
      \ to this function. Effectively convert the proxy to an l-value\n   representing\
      \ the given element in the associative array. */\nfunction string l_value(string\
      \ v) \n{\n  A.insert(ndx, v);\n  return v;\n} // l_value\n</uscript>\n\n==Related\
      \ Links==\n* [[Legacy:AssociativeArray|AssociativeArray]] &ndash; Main topic\n\
      \n==Discussion==\n\n'''SuperApe:''' This page needs linkage: related topics,\
      \ category tags, etc."
  properties: []
  revId: 1473
name: "Legacy:AssociativeArray/OperatorOverloading"
revision:
  revid: 1473
  parentid: 1474
  user: "SuperApe"
  timestamp: 1132345308.000000000
  comment: "*"
timestamp: 1668961814.551817000
