---
parse:
  title: "Legacy:MaskedCompare"
  text:
    text: "<p>With the algoritm below you can compare a string with a wild card string.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Usage\">Usage</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MaskedCompare?section=1\"\
      \ title=\"Edit section: Usage\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are two types of wild cards: <code>*</code>\
      \ to match zero or more characters and <code>?</code> to match a single character</p>\n\
      <p>For example, the mask <code>bite my *ass</code> matches:</p>\n<pre>bite my\
      \ ass\nbite my shining metal ass\nbite my          ass\n</pre>\n<p>The mask\
      \ <code>mich?el</code> matches:</p>\n<pre>michael\nmichiel\n</pre>\n<p>But not:</p>\n\
      <pre>michel\nmichaeel\n</pre>\n<h2><span class=\"mw-headline\" id=\"Code\">Code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:MaskedCompare?section=2\" title=\"Edit section: Code\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Internal function used for MaskedCompare</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">private</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ _match<span class=\"br0\">(</span><span class=\"kw1\">out</span> <span class=\"\
      kw5\">string</span> mask, <span class=\"kw1\">out</span> <span class=\"kw5\"\
      >string</span> target<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">string</span> m, mp,\
      \ cp;\n  m <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n  <span class=\"kw2\">while</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>target <span class=\"sy0\">!=</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span>m <span class=\"sy0\">!=</span> <span class=\"\
      st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">!=</span> <span\
      \ class=\"kw3\">Left</span><span class=\"br0\">(</span>target, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>m <span class=\"\
      sy0\">!=</span> <span class=\"st0\">\"?\"</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw6\"\
      >false</span>;\n    mask <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>Mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n    target <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>target, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n\t\tm <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span>target <span class=\"sy0\">!=</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span> \n  <span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>m <span class=\"\
      sy0\">==</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>\
      \ \n    <span class=\"br0\">{</span>\n      mask <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>Mask, <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n\t\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>mask <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>; <span class=\"co1\">// only \"*\" mask -&gt;\
      \ always true</span>\n\t\t\tmp <span class=\"sy0\">=</span> mask;\n\t\t\tcp\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"\
      br0\">(</span>target, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \      m <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span class=\"\
      br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"br0\">}</span> \n    <span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m\
      \ <span class=\"sy0\">==</span> <span class=\"kw3\">Left</span><span class=\"\
      br0\">(</span>target, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>m\
      \ <span class=\"sy0\">==</span> <span class=\"st0\">\"?\"</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n\
      \t\t\tmask <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>Mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n      target <span class=\"sy0\">=</span> <span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>target, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n  \t\tm <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n\t\t<span class=\"br0\">}</span> \n    <span class=\"kw2\">else</span>\
      \ \n    <span class=\"br0\">{</span>\n\t\t\tmask <span class=\"sy0\">=</span>\
      \ mp;\n      m <span class=\"sy0\">=</span> <span class=\"kw3\">Left</span><span\
      \ class=\"br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>;\n\t\t\ttarget <span class=\"sy0\">=</span> cp;\n      cp <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>cp,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\t\t<span class=\"\
      br0\">}</span>\n\t<span class=\"br0\">}</span>\n \n  <span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">Left</span><span class=\"\
      br0\">(</span>mask, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"st0\">\"*\"</span><span class=\"\
      br0\">)</span> \n  <span class=\"br0\">{</span>\n\t\tmask <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>Mask, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\"\
      >}</span>\n\t<span class=\"kw2\">return</span> <span class=\"br0\">(</span>mask\
      \ <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Compare\
      \ a string with a mask</span>\n<span class=\"co1\">// Wildcards: * = X chars;\
      \ ? = 1 char</span>\n<span class=\"co1\">// Wildcards can appear anywhere in\
      \ the mask</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> MaskedCompare<span\
      \ class=\"br0\">(</span><span class=\"kw1\">coerce</span> <span class=\"kw5\"\
      >string</span> target, <span class=\"kw5\">string</span> mask, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">bool</span> casesensitive<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"sy0\">!</span>casesensitive<span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    mask <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Caps</span><span class=\"br0\">(</span>mask<span\
      \ class=\"br0\">)</span>;\n    target <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Caps</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span>;\n\
      \  <span class=\"br0\">}</span>\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>mask <span class=\"sy0\">==</span> <span class=\"st0\">\"*\"</span><span\
      \ class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw6\"\
      >true</span>;\n \n  <span class=\"kw2\">return</span> _match<span class=\"br0\"\
      >(</span>mask, target<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.047 seconds\nReal time\
      \ usage: 0.095 seconds\nPreprocessor visited node count: 11/1000000\nPreprocessor\
      \ generated node count: 40/1000000\nPost‐expand include size: 13/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2071-0!*!*!!*!*!* and timestamp\
      \ 20221118025045 and revision id 5044\n -->\n"
  categories:
  - sortkey: "MaskedCompare"
    name: "Legacy_Algorithm"
  links: []
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Usage"
    number: "1"
    index: "1"
    fromtitle: "Legacy:MaskedCompare"
    byteoffset: 75
    anchor: "Usage"
  - toclevel: 1
    level: "2"
    line: "Code"
    number: "2"
    index: "2"
    fromtitle: "Legacy:MaskedCompare"
    byteoffset: 427
    anchor: "Code"
  displaytitle: "Legacy:MaskedCompare"
  iwlinks: []
  wikitext:
    text: "With the algoritm below you can compare a string with a wild card string.\n\
      \n==Usage==\n\nThere are two types of wild cards: <code>*</code> to match zero\
      \ or more characters and <code>?</code> to match a single character\n\nFor example,\
      \ the mask <code> bite my *ass </code> matches:\n bite my ass\n bite my shining\
      \ metal ass\n bite my          ass\n\nThe mask <code> mich?el </code> matches:\n\
      \ michael\n michiel\n\nBut not:\n michel\n michaeel\n\n==Code==\n\n<uscript>\n\
      // Internal function used for MaskedCompare\nstatic private final function bool\
      \ _match(out string mask, out string target)\n{\n  local string m, mp, cp;\n\
      \  m = Left(mask, 1);\n  while ((target != \"\") && (m != \"*\"))\n  {\n   \
      \ if ((m != Left(target, 1)) && (m != \"?\")) return false;\n    mask = Mid(Mask,\
      \ 1);\n    target = Mid(target, 1);\n\t\tm = Left(mask, 1);\n  }\n\n  while\
      \ (target != \"\") \n  {\n\t\tif (m == \"*\") \n    {\n      mask = Mid(Mask,\
      \ 1);\n\t\t\tif (mask == \"\") return true; // only \"*\" mask -> always true\n\
      \t\t\tmp = mask;\n\t\t\tcp = Mid(target, 1);\n      m = Left(mask, 1);\n\t\t\
      } \n    else if ((m == Left(target, 1)) || (m == \"?\")) \n    {\n\t\t\tmask\
      \ = Mid(Mask, 1);\n      target = Mid(target, 1);\n  \t\tm = Left(mask, 1);\n\
      \t\t} \n    else \n    {\n\t\t\tmask = mp;\n      m = Left(mask, 1);\n\t\t\t\
      target = cp;\n      cp = Mid(cp, 1);\n\t\t}\n\t}\n\n  while (Left(mask, 1) ==\
      \ \"*\") \n  {\n\t\tmask = Mid(Mask, 1);\n\t}\n\treturn (mask == \"\");\n}\n\
      \n// Compare a string with a mask\n// Wildcards: * = X chars; ? = 1 char\n//\
      \ Wildcards can appear anywhere in the mask\nstatic final function bool MaskedCompare(coerce\
      \ string target, string mask, optional bool casesensitive)\n{\n  if (!casesensitive)\n\
      \  {\n    mask = Caps(mask);\n    target = Caps(target);\n  }\n  if (mask ==\
      \ \"*\") return true;\n\n  return _match(mask, target);\n}\n</uscript>\n\n[[Category:Legacy\
      \ Algorithm|{{PAGENAME}}]]"
  properties: []
  revId: 5044
name: "Legacy:MaskedCompare"
revision:
  revid: 5044
  parentid: 5045
  user: "Foxpaw"
  timestamp: 1105673339.000000000
  comment: "revert"
timestamp: 1668764918.171152000
