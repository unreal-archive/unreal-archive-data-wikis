---
parse:
  title: "Functions"
  text:
    text: "<p>A <b>function</b> in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a> is a <a href=\"http://en.wikipedia.org/wiki/subroutine\" class=\"\
      extiw\" title=\"wp:subroutine\">subroutine</a> associated with a specific <a\
      \ href=\"/Class\" title=\"Class\" class=\"mw-redirect\">class</a>. Functions\
      \ can define zero or up to sixteen <a href=\"#Parameters\">parameters</a> and\
      \ optionally a return type. Various <a href=\"#Modifiers\">modifiers</a> can\
      \ be used in the declaration to change the way the function can be accessed\
      \ or how it behaves when called.</p>\n<p><a href=\"/Operators\" title=\"Operators\"\
      >Operators</a> and <a href=\"/Delegates\" title=\"Delegates\">delegates</a>\
      \ are special kinds of functions. Operators have either exactly one (prefix/postfix\
      \ operators) or two (infix operators) parameters and can use an operator symbol\
      \ instead of a function name. Delegates are variable-like placeholders you can\
      \ assign functions to. Calls to a delegate actually call the function assigned\
      \ to it.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Function_declarations\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Function declarations</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Syntax\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >Syntax</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Modifiers\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Modifiers</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"#Access_modifiers\"><span\
      \ class=\"tocnumber\">1.2.1</span> <span class=\"toctext\">Access modifiers</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-5\"><a href=\"#Call_modifiers\"><span class=\"\
      tocnumber\">1.2.2</span> <span class=\"toctext\">Call modifiers</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-6\"><a href=\"#Network_modifiers\"><span class=\"\
      tocnumber\">1.2.3</span> <span class=\"toctext\">Network modifiers</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-7\"><a href=\"#Implementation_modifiers\"\
      ><span class=\"tocnumber\">1.2.4</span> <span class=\"toctext\">Implementation\
      \ modifiers</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Parameters\"><span class=\"tocnumber\">1.3</span> <span class=\"\
      toctext\">Parameters</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-9\"\
      ><a href=\"#Syntax_2\"><span class=\"tocnumber\">1.3.1</span> <span class=\"\
      toctext\">Syntax</span></a></li>\n<li class=\"toclevel-3 tocsection-10\"><a\
      \ href=\"#Parameter_modifiers\"><span class=\"tocnumber\">1.3.2</span> <span\
      \ class=\"toctext\">Parameter modifiers</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-11\"><a href=\"#Locals\"><span class=\"tocnumber\">1.4</span>\
      \ <span class=\"toctext\">Locals</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-12\"><a href=\"#Function_calls\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Function calls</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-13\"><a href=\"#Syntax_3\"><span class=\"tocnumber\">2.1</span>\
      \ <span class=\"toctext\">Syntax</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"\
      ><a href=\"#Determining_the_target_function\"><span class=\"tocnumber\">2.2</span>\
      \ <span class=\"toctext\">Determining the target function</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#How_function_calls_are_processed\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">How function calls\
      \ are processed</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"\
      #Limits_for_function_calls\"><span class=\"tocnumber\">2.4</span> <span class=\"\
      toctext\">Limits for function calls</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Function_declarations\">Function\
      \ declarations</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=1\" title=\"Edit section: Function\
      \ declarations\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Syntax\">Syntax</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Functions?section=2\"\
      \ title=\"Edit section: Syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A regular function declaration looks like this:</p>\n\
      <pre><i><a href=\"#Modifiers\">[modifiers]</a></i> <b>function</b> <i><a href=\"\
      /Types\" title=\"Types\">[returntype]</a></i> functionname <b>(</b> <i><a href=\"\
      #Parameters\">[parameter declarations]</a></i> <b>)</b> <i>body_or_semicolon</i>\n\
      </pre>\n<p>If the function does not return any value, the return type can be\
      \ omitted. In this case <a href=\"/Return_statement\" title=\"Return statement\"\
      >return statements</a> in the function body may not specify any value. Otherwise,\
      \ if a return value was specified, any return statement must specify an expression\
      \ that evaluates to that type. Starting with <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> the compiler will emit a warning if a return type was specified, but\
      \ the function body does not contain any return statement. Alternatively, the\
      \ keyword <b>event</b> can be used instead of <b>function</b> without any difference\
      \ at the UnrealScript level. The <b>event</b> keyword will only become relevant\
      \ when writing <a href=\"/edit/Native_code?redlink=1\" class=\"new\" title=\"\
      Native code (page does not exist)\">native code</a>.</p>\n<p><b>Note:</b> The\
      \ compiler is not very strict about the order of modifiers and the keywords\
      \ <b>function</b> and <b>event</b>. Especially in the UT3 source code you will\
      \ sometimes see modifiers between the keyword <b>function</b> and the return\
      \ type or function name. This can be very confusing to anyone reading your code,\
      \ so please always make <b>function</b> or <b>event</b> the last keyword before\
      \ the return type or function name.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Modifiers\">Modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=3\" title=\"Edit section: Modifiers\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Before\
      \ the actual function declaration you are allowed to specify one or more function\
      \ modifiers. These change the way the function works in certain situations.</p>\n\
      <div style=\"float:left;\">\n<table>\n<tr>\n<td>The modifier is available in\
      \ ...</td>\n</tr>\n<tr style=\"background-color:#C6CFD6;\">\n<td>Version Tag</td>\n\
      <td>Game</td>\n<td><a href=\"/edit/Engine_version?redlink=1\" class=\"new\"\
      \ title=\"Engine version (page does not exist)\">Engine Version</a></td>\n</tr>\n\
      <tr style=\"background-color:White;\">\n<td><b>1</b></td>\n<td>Any <a href=\"\
      /edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"Unreal Engine 1 (page\
      \ does not exist)\">Unreal Engine 1</a> game e.g. <a href=\"/UT\" title=\"UT\"\
      \ class=\"mw-redirect\">UT</a></td>\n<td><a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a></td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\">\n<td><b>2</b></td>\n\
      <td>Any <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal\
      \ Engine 2 (page does not exist)\">Unreal Engine 2</a> game e.g. <a href=\"\
      /UT2004\" title=\"UT2004\" class=\"mw-redirect\">UT2004</a></td>\n<td><a href=\"\
      /edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal Engine 2 (page\
      \ does not exist)\">Unreal Engine 2</a></td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>3</b></td>\n<td>Any <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> game e.g. <a href=\"/UT3\" title=\"UT3\" class=\"\
      mw-redirect\">UT3</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a></td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\"\
      >\n<td><b>3-x1</b></td>\n<td><a href=\"/UT3\" title=\"UT3\" class=\"mw-redirect\"\
      >UT3 patch 2.0</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a></td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>3-x2</b></td>\n<td><a href=\"/UDK\" title=\"UDK\" class=\"mw-redirect\"\
      >UDK 2009-12</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> - 6000 - present</td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\"\
      >\n<td><b>3-x3</b></td>\n<td><a href=\"/UDK\" title=\"UDK\" class=\"mw-redirect\"\
      >UDK 2010-07</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> - 6890 - present</td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>(lesser than i.e. &lt;)</b></td>\n<td></td>\n<td>A specific version\
      \ e.g. <i>3</i> &lt; <i>3-x2</i> would mean it's available in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> but not anymore since <a href=\"\
      /UDK\" title=\"UDK\" class=\"mw-redirect\">UDK</a></td>\n</tr>\n<tr style=\"\
      background-color:#EEEEEE;\">\n<td><b>(no number)</b></td>\n<td></td>\n<td>all\
      \ <a href=\"/Unreal_Engine\" title=\"Unreal Engine\" class=\"mw-redirect\">Unreal\
      \ Engine</a> generations.</td>\n</tr>\n</table>\n</div>\n<div style=\"clear:both;\"\
      ></div>\n<h4><span class=\"mw-headline\" id=\"Access_modifiers\">Access modifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=4\" title=\"Edit section: Access modifiers\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<dl>\n\
      <dt>Private<sup>2,3</sup></dt>\n<dd>The function is only accessible within the\
      \ same class. Not even subclasses can \"see\" it, which means the usual rules\
      \ for overriding functions don't apply - subclasses may change the return type\
      \ and the number and type of parameters. Since they don't see the parent class\
      \ function, they cannot call it via the <a href=\"/Super\" title=\"Super\" class=\"\
      mw-redirect\">Super</a> keyword.</dd>\n<dt>Protected<sup>2,3</sup></dt>\n<dd>Restricts\
      \ access to this function to the current class and its subclasses. Subclasses\
      \ may override the function unless it is also declared as <b>final</b>.</dd>\n\
      <dt>Public<sup>2,3</sup></dt>\n<dd>The default access rule. If neither <b>private</b>\
      \ nor <b>protected</b> is specified, this is one is implied. Public functions\
      \ can be called from non-related classes and may be overridden in subclasses,\
      \ unless the function is also declared as <b>final</b>.</dd>\n<dt>Static</dt>\n\
      <dd>Static functions are not tied to specific objects, but to a class. The object\
      \ literal <code>Self</code> is not allowed within static functions and instance\
      \ functions (i.e. functions not declared with the <b>static</b> modifier) can\
      \ only be called through object references, this includes iterator functions\
      \ in <a href=\"/ForEach_loop\" title=\"ForEach loop\">ForEach loops</a>. Because\
      \ static functions are not executed in the context of any object instance, they\
      \ can also not be subject to <a href=\"/Replication\" title=\"Replication\"\
      \ class=\"mw-redirect\">replication</a>.</dd>\n<dt>Final</dt>\n<dd>As the name\
      \ suggests, function declarations with this modifier are \"final\" and can't\
      \ be overridden in subclasses.</dd>\n</dl>\n<h4><span class=\"mw-headline\"\
      \ id=\"Call_modifiers\">Call modifiers</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Functions?section=5\"\
      \ title=\"Edit section: Call modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>Exec</dt>\n<dd>Marks the function as potential\
      \ console command. Note that exec functions are only really called via console\
      \ commands for certain objects, such as the local PlayerController, that player's\
      \ HUD, Pawn or selected Weapon and a few other places. The possible places for\
      \ exec functions may vary from game to game, so have a look at the <a href=\"\
      /UnrealScript_source_code\" title=\"UnrealScript source code\">UnrealScript\
      \ source code</a> of your game to find out where you can put exec functions\
      \ that actually work.<br />\nWhen overriding functions, you must also declare\
      \ the new function with the <b>exec</b> modifier if and only if the overridden\
      \ function was declared with it. This means you cannot turn a regular function\
      \ into a console command!</dd>\n<dt>K2Call<sup>3-x3</sup>&#160;</dt>\n<dd>Allows\
      \ the function to be referenced and called via <a href=\"/Kismet_2\" title=\"\
      Kismet 2\">Kismet 2</a><sup><i><a href=\"/Template:Confirm\" title=\"Template:Confirm\"\
      >[confirm]</a></i></sup>.</dd>\n<dt>K2Override<sup>3-x3</sup>&#160;</dt>\n<dd>Related\
      \ to <a href=\"/Kismet_2\" title=\"Kismet 2\">Kismet 2</a><sup><i><a href=\"\
      /Template:Confirm\" title=\"Template:Confirm\">[confirm]</a></i></sup>. Effect\
      \ unknown.</dd>\n<dt>K2Pure<sup>3-x3</sup>&#160;</dt>\n<dd>Related to <a href=\"\
      /Kismet_2\" title=\"Kismet 2\">Kismet 2</a><sup><i><a href=\"/Template:Confirm\"\
      \ title=\"Template:Confirm\">[confirm]</a></i></sup>. Effect unknown.</dd>\n\
      <dt>Simulated</dt>\n<dd>Marks the function as valid for execution on clients\
      \ if the actor containing it was replicated to that client and the local <a\
      \ href=\"/edit/Role?redlink=1\" class=\"new\" title=\"Role (page does not exist)\"\
      >role</a> of that client is either ROLE_SimulatedProxy or ROLE_DumbProxy.<br\
      \ />\n<b>Note:</b> The modifier <b>simulated</b> does not imply any kind of\
      \ replication or even broadcast! Also, this modifier is not inherited when overriding\
      \ functions - every super function call evaluates that super function's <b>simulated</b>\
      \ modifier separately, potentially breaking the chain of super calls on clients!</dd>\n\
      <dt>Singular</dt>\n<dd>Restricts recursive function calls by only ever allowing\
      \ a single singular function to execute per object instance. If a singular function\
      \ is called, the engine first checks if the object instance the function was\
      \ called on already executes a singular function. If it does, the new function\
      \ call is ignored.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Network_modifiers\"\
      >Network modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=6\" title=\"Edit section: Network\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>These modifiers affect function <a href=\"/Replication\" title=\"Replication\"\
      \ class=\"mw-redirect\">replication</a> in <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a>. Earlier engine generations use the <a\
      \ href=\"/Replication_block\" title=\"Replication block\">replication block</a>\
      \ to define these.</p>\n<dl>\n<dt>Client<sup>3</sup></dt>\n<dd>Specifies that\
      \ this function should be replicated to the client owning the actor if it is\
      \ called on the server. This modifier automatically makes the function <b>simulated</b>\
      \ as well.</dd>\n<dt>DemoRecording<sup>3-x1</sup></dt>\n<dd>Specifies that this\
      \ function should be replicated to the demorecording driver (applicable to server-side\
      \ demo recording only). It will only be executed during demo playback. This\
      \ modifier automatically makes the function <b>simulated</b> as well, which\
      \ makes sense since demo playback essentially is a client environment. Note\
      \ that <b>Client</b> function calls are also replicated to the demorecording\
      \ driver, whereas <b>DemoRecording</b> ones are replicated only to the driver,\
      \ not to the real clients.</dd>\n<dt>Reliable<sup>3</sup></dt>\n<dd>Replicated\
      \ functions will be replicated reliably when marked with this modifier.</dd>\n\
      <dt>Server<sup>3</sup></dt>\n<dd>Specifies that this function should be replicated\
      \ to the server if it was called on a replicated actor that is owned by the\
      \ local client.</dd>\n<dt>Unreliable<sup>3</sup></dt>\n<dd>Replicated functions\
      \ will be replicated unreliably when marked with this modifier, i.e. they may\
      \ be dropped due to packet loss or bandwidth saturation.</dd>\n</dl>\n<h4><span\
      \ class=\"mw-headline\" id=\"Implementation_modifiers\">Implementation modifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=7\" title=\"Edit section: Implementation modifiers\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<dl>\n\
      <dt>Const<sup>3</sup></dt>\n<dd>This modifier is actually placed after the closing\
      \ parenthesis of the parameter list. It will be passed to the generated native\
      \ header file, but has no effect in UnrealScript.</dd>\n<dt>DLLImport<sup>3-x2</sup></dt>\n\
      <dd>Indicates that the function should be linked to the specified <a href=\"\
      http://en.wikipedia.org/wiki/DLL\" class=\"extiw\" title=\"wp:DLL\">DLL</a>\
      \ in <a href=\"/DLLBind\" title=\"DLLBind\" class=\"mw-redirect\">DLLBind</a>.</dd>\n\
      <dt>Event</dt>\n<dd>As mentioned in the <a href=\"#Syntax\">Syntax</a> section\
      \ above, the keyword <b>event</b> may replace the keyword <b>function</b> without\
      \ any effect on the UnrealScript level. However, when exporting native header\
      \ files from script code, <b>event</b> functions will have calling stubs generated\
      \ so the UnrealScript function can be called more easily from C++ code. These\
      \ generated C++ methods have the name <code>event<i>NameOfUnrealScriptFunction</i></code>\
      \ and their parameters and possible return type reflects the UnrealScript function\
      \ declaration.</dd>\n<dt>Intrinsic<sup>1,2</sup></dt>\n<dd>See <b>native</b>.</dd>\n\
      <dt>Intrinsic(<i>number</i>)<sup>1,2</sup></dt>\n<dd>See <b>native(<i>number</i>)</b>.</dd>\n\
      <dt>Iterator</dt>\n<dd>Native functions with the <b>iterator</b> modifier can\
      \ only be used as the iterator function of a <a href=\"/ForEach_loop\" title=\"\
      ForEach loop\">ForEach loop</a>. This modifier may not be used for non-native\
      \ functions.</dd>\n<dt>Latent</dt>\n<dd>Native functions with the <b>latent</b>\
      \ modifier may only be called directly from <a href=\"/edit/State_code?redlink=1\"\
      \ class=\"new\" title=\"State code (page does not exist)\">state code</a> (but\
      \ not within any <a href=\"/ForEach_loop\" title=\"ForEach loop\">ForEach loop</a>)\
      \ and usually pause state code execution at least until the next tick, possibly\
      \ even longer. This modifier may not be used for non-native functions.</dd>\n\
      <dt>Native</dt>\n<dd>The actual implementation of this function resides in native\
      \ code in a C++ function with the name <code>exec<i>NameOfUnrealScriptFunction</i></code>.\
      \ Very early <a href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"\
      Unreal Engine 1 (page does not exist)\">Unreal Engine 1</a> versions used the\
      \ keyword <b>intrinsic</b> instead.<br />\nSimilar to <b>simulated</b> functions,\
      \ native functions can be called clientsidely on replicated actors even if the\
      \ local <a href=\"/edit/Role?redlink=1\" class=\"new\" title=\"Role (page does\
      \ not exist)\">role</a> is <i>ROLE_SimulatedProxy</i> or <i>ROLE_DumbProxy</i>.</dd>\n\
      <dt>Native(<i>number</i>)</dt>\n<dd>Same as the plain <b>native</b> modifier,\
      \ but additionally the function gets its own <a href=\"/edit/UnrealScript_bytecode?redlink=1\"\
      \ class=\"new\" title=\"UnrealScript bytecode (page does not exist)\">UnrealScript\
      \ bytecode</a> token.<br />\n<i>Even if you can write native code for your mod,\
      \ you should never specify numbers for your native functions!</i></dd>\n<dt>NoExport<sup>3</sup>,\
      \ NoExportHeader<sup>3-x2</sup></dt>\n<dd>Prevents this function from being\
      \ exported to native headers.</dd>\n<dt>Virtual<sup>3</sup></dt>\n<dd>This modifier\
      \ is just passed through to exported native headers and has no effect in UnrealScript.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Parameters\">Parameters</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=8\" title=\"Edit section: Parameters\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>A function may have\
      \ zero to sixteen parameters. If you need to pass more values to your function,\
      \ consider using combining some or all of them to a <a href=\"/Struct\" title=\"\
      Struct\" class=\"mw-redirect\">struct</a>-type parameter or passing them as\
      \ a <a href=\"/Static_array\" title=\"Static array\" class=\"mw-redirect\">static</a>\
      \ or <a href=\"/Dynamic_array\" title=\"Dynamic array\" class=\"mw-redirect\"\
      >dynamic array</a>.</p>\n<h4><span class=\"mw-headline\" id=\"Syntax_2\">Syntax</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=9\" title=\"Edit section: Syntax\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Parameter declarations\
      \ have the following syntax:</p>\n<pre><i>[parameter modifiers]</i> <a href=\"\
      /Type\" title=\"Type\" class=\"mw-redirect\">type</a> parametername\n</pre>\n\
      <p>As with other <a href=\"/Variable_declaration\" title=\"Variable declaration\"\
      \ class=\"mw-redirect\">variable declarations</a>, the parameter name may optionally\
      \ followed by a number in square brackets to declare the parameter as <a href=\"\
      /Static_array\" title=\"Static array\" class=\"mw-redirect\">static array</a>:</p>\n\
      <pre><i>[parameter modifiers]</i> <a href=\"/Type\" title=\"Type\" class=\"\
      mw-redirect\">type</a> parametername<b>[</b>arraysize<b>]</b>\n</pre>\n<p>If\
      \ more than one parameter is specified, the individual parameters must be separated\
      \ by commas. The type and any modifiers only apply to the parameter they were\
      \ specified for.</p>\n<h4><span class=\"mw-headline\" id=\"Parameter_modifiers\"\
      >Parameter modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=10\" title=\"Edit section: Parameter\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <dl>\n<dt>coerce</dt>\n<dd>Automatically performs <a href=\"/Typecasting\" title=\"\
      Typecasting\">typecasting</a> of values passed to this parameter, if the parameter\
      \ is of a primitive type other than <a href=\"/Enum\" title=\"Enum\" class=\"\
      mw-redirect\">enum</a>. Note that the built-in numeric types <a href=\"/Int\"\
      \ title=\"Int\" class=\"mw-redirect\">int</a>, <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a> and <a href=\"/Byte\" title=\"Byte\" class=\"\
      mw-redirect\">byte</a> are automatically typecasted to each other even without\
      \ this modifier. Enum conversion to these numeric types is automatic as well.\
      \ This modifier can also be applied to the return type of the function.</dd>\n\
      <dt>const<sup>3</sup></dt>\n<dd>For native functions this modifier is passed\
      \ to the generated native headers. In UnrealScript, it prevents changes to the\
      \ parameter within the function body, i.e. the value of the parameter must remain\
      \ as the value that was passed when the function was called.</dd>\n<dt>init<sup>3-x2</sup></dt>\n\
      <dd>Effect unknown.</dd>\n<dt>optional</dt>\n<dd>Specifying the parameter in\
      \ function calls is optional. Omitted parameters assume a default value, which\
      \ is the parameter type's null value. In Unreal Engine 3 it is also possible\
      \ to specify a different default value:</dd>\n</dl>\n<pre><b>optional</b> <a\
      \ href=\"/Type\" title=\"Type\" class=\"mw-redirect\">type</a> parametername\
      \ <b>=</b> defaultvalue\n</pre>\n<dl>\n<dd>The <i>defaultvalue</i> can be any\
      \ expression you could use on the right side of a variable assignment. It will\
      \ be evaluated as if it was placed between the last local variable declaration\
      \ and the first executable code statement of the function. In other words, you\
      \ can call functions here and use any of the function's parameters or local\
      \ variables. Evaluation of the expression is skipped if that parameter was specified\
      \ when calling the function.</dd>\n<dt><span id=\"out_parameter\"></span> out<sup>1,2</sup></dt>\n\
      <dd>If the parameter is a variable or an array element or struct member accessed\
      \ through a variable (as opposed to a literal, or function return value or an\
      \ array element or struct member accessed through a function return value),\
      \ any modification to the parameter inside the function is copied back into\
      \ the variable originally passed to the function after the function returns.<br\
      \ />\n<b>Note:</b> This is not \"call by reference\", but actually <a href=\"\
      http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_copy-restore\" class=\"\
      extiw\" title=\"wp:Evaluation strategy\">call by value-result</a>. Instead of\
      \ only copying the value when passing the parameter in, it needs to be copied\
      \ again when returning from the function, so declaring a parameter as <b>out</b>\
      \ is actually more expensive in UnrealScript prior to Unreal Engine 3. (see\
      \ below)</dd>\n<dt>out<sup>3</sup></dt>\n<dd>The parameter is passed <a href=\"\
      http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_reference\" class=\"\
      extiw\" title=\"wp:Evaluation strategy\">by reference</a> instead of being copied.\
      \ Any changes to the parameter inside the function become immediately visible\
      \ in the variable, struct member or (static) array element originally passed\
      \ to the function. For large dynamic arrays or structs passing by reference\
      \ (via <b>out</b> parameter) may be more efficient than passing by value.<br\
      \ />\n<b>Note:</b> Due to the way dynamic arrays are implemented, you can't\
      \ pass dynamic array elements or parts of them to an <b>out</b> parameter. Passing\
      \ an entire dynamic array via <b>out</b> parameter is possible, and for large\
      \ arrays even recommended.</dd>\n<dt>skip</dt>\n<dd>Only allowed for the second\
      \ parameter of a native <a href=\"/Operator\" title=\"Operator\" class=\"mw-redirect\"\
      >operator</a> declaration. The native implementation of the operator may choose\
      \ to not evaluate the second operand if the operator result can be determined\
      \ by evaluating only the first operand. This is used for the operators <code>&amp;&amp;</code>\
      \ and <code>||</code> to skip evaluating the second boolean expression if it\
      \ is not required.</dd>\n</dl>\n<p>Parameters are evaluated at the time the\
      \ function is called, before deciding if or where to execute the function body.\
      \ Parameter expressions are evaluated from left to right in the context of the\
      \ calling code and with the exception of parameters declared with the <b>out</b>\
      \ modifier, UnrealScript always uses the <a href=\"http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value\"\
      \ class=\"extiw\" title=\"wp:Evaluation strategy\">call-by-value evaluation\
      \ strategy</a>. Note that reference type values are not objects, but object\
      \ references! Passing objects to functions duplicates the object reference,\
      \ not the object itself.</p>\n<h3><span class=\"mw-headline\" id=\"Locals\"\
      >Locals</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=11\" title=\"Edit section: Locals\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Functions\
      \ can have also locals which are just like <a href=\"/Variables\" title=\"Variables\"\
      >class variables</a> with the exception of no modifiers. Locals can only be\
      \ declared in functions and they are only available within functions.</p>\n\
      <p>See <a href=\"/Variables#Local_variables\" title=\"Variables\">Local variables</a>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Function_calls\">Function calls</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=12\" title=\"Edit section: Function calls\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Functions\
      \ can be called from <a href=\"/edit/State_code?redlink=1\" class=\"new\" title=\"\
      State code (page does not exist)\">state code</a> and other functions. In theory\
      \ they can also be called from a <a href=\"/Replication_block\" title=\"Replication\
      \ block\">replication block</a>, but this is impractical as replication conditions\
      \ are tested relatively often and at unexpected times, while function calls\
      \ (especially to non-native functions) are a much more expensive operation than\
      \ checking variable values.</p>\n<p>Function calls must not be confused with\
      \ executing functions. The call to and execution of a function can happen in\
      \ different places if replication is involved, and some <a href=\"#Modifiers\"\
      >modifiers</a> (e.g. <i>singular</i> or no <i>simulated</i>) may prevent the\
      \ execution of a called function at runtime altogether.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Syntax_3\">Syntax</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Functions?section=13\"\
      \ title=\"Edit section: Syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A typical function call uses the following syntax:</p>\n\
      <pre>[<i>objectreference</i> <b>.</b>] <i>functionname</i> <b>(</b> [<i>expression</i>\
      \ [<b>,</b> <i>expression</i> [<b>,</b> ...]]] <b>)</b>\n</pre>\n<p>The object\
      \ reference in front of the function name provides a \"calling context\" for\
      \ the function. The function will be called on the specified object. If the\
      \ reference is left out, the function is called in the same context as the code\
      \ calling the function.</p>\n<p>For static functions the context is actually\
      \ the class of the specified object reference. To specify a context class directly,\
      \ you can use the following syntax instead:</p>\n<pre><i>classreference</i>\
      \ <b>. static .</b> <i>functionname</i> <b>(</b> [<i>expression</i> [<b>,</b>\
      \ <i>expression</i> [<b>,</b> ...]]] <b>)</b>\n</pre>\n<p>Instead of an object\
      \ reference, you can also use one of the <a href=\"/Function_call_specifiers\"\
      \ title=\"Function call specifiers\">function call specifiers</a> <b>Super</b>\
      \ or <b>Global</b> to tell the compiler you want a different implementation\
      \ of a function to be called.</p>\n<h3><span class=\"mw-headline\" id=\"Determining_the_target_function\"\
      >Determining the target function</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Functions?section=14\"\
      \ title=\"Edit section: Determining the target function\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>When the UnrealScript interpreter\
      \ or compiler (only for <i>final</i> functions and when using the <a href=\"\
      /Super\" title=\"Super\" class=\"mw-redirect\">Super</a> call specifier) encounters\
      \ a function call, it needs to figure out, which implementation actually gets\
      \ called. It does so by starting at the class of the context object reference.\
      \ The compiler and <a href=\"/edit/UnrealScript_bytecode?redlink=1\" class=\"\
      new\" title=\"UnrealScript bytecode (page does not exist)\">UnrealScript bytecode</a>\
      \ interpreter have similar rules for this, but there are some important differences.\
      \ The most important difference is that the compiler doesn't actually execute\
      \ the code, so it doesn't know e.g. the content of variables at runtime. Due\
      \ to this restriction, the compiler relies on variable types instead of the\
      \ referenced objects to find the calling context. Similar restrictions apply\
      \ to determining the <a href=\"/State\" title=\"State\" class=\"mw-redirect\"\
      >state</a> of the context object. The compiler can only assume that functions\
      \ without a context object reference are called in the context of the state\
      \ the calling code resides in. At runtime, the context state can change before\
      \ a state function returns if any code that function executes calls the <b>GotoState()</b>\
      \ function.</p>\n<p>If the context class and context object state have been\
      \ determined, the engine first looks in that state for a function definition\
      \ with the specified name. If none is found, it continues to look in the parent\
      \ state for extended states or in the parent class version of the same state\
      \ for inherited states. It continues upwards until no more parent states are\
      \ found. In that case, non-state functions with the specified name are looked\
      \ up in a similar manner, starting at the context class. If the compiler can't\
      \ find any function definition this way, it issues an error. Due to the compiler\
      \ check the engine should always find a function to call at runtime, but there\
      \ are some special cases the compiler can't catch and in these cases the engine\
      \ crash will crash with a \"Failed to find function\" error.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"How_function_calls_are_processed\">How function\
      \ calls are processed</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Functions?section=15\" title=\"Edit section: How function\
      \ calls are processed\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>After the engine resolved, which function it should actually call, it evaluates\
      \ the function call.</p>\n<p>Before looking at the function itself, all specified\
      \ argument expressions are evaluated from left to right. If an expression contains\
      \ a function call, its return value is determined by calling that function first.\
      \ Some native functions have non-standard argument evaluation methods, especially\
      \ the operators <code>&amp;&amp;</code> and <code>||</code>, which may choose\
      \ to not evaluate their second argument at all.</p>\n<p>If the function has\
      \ <a href=\"/Replication\" title=\"Replication\" class=\"mw-redirect\">replication</a>\
      \ logic attached, the engine checks if it needs to replicate the call. If that's\
      \ the case, the function's argument values are wrapped up along with the function\
      \ name in a network packet, which is sent to the remote side. The <i>local</i>\
      \ function call then returns immediately and if the function has a return type,\
      \ it returns that type's null value. When the remote side receives the function\
      \ call, it first checks whether it actually wants it (in case something strange\
      \ happened) and then continues to process the function call similar to a local\
      \ function call as described below.</p>\n<p>Now that the function's argument\
      \ values are known and the is to be executed locally, the engine checks if and\
      \ how it should actually execute the function. If the function is neither <i>native</i>\
      \ nor <i>simulated</i>, but the context object is an actor with <code><a href=\"\
      /edit/Role?redlink=1\" class=\"new\" title=\"Role (page does not exist)\">Role</a>\
      \ &lt;= ROLE_SimulatedProxy</code>, then the function is not executed. Similarly,\
      \ if the function is <i>singular</i> and the context object already executes\
      \ the same or another <i>singular</i> function, the function is not executed.\
      \ And lastly, if the function is a <a href=\"/Legacy:Probe_Function\" title=\"\
      Legacy:Probe Function\">probe function</a> and the probe event with the same\
      \ name was disabled, then the function is not executed. In all these cases,\
      \ if the function has a return type, the corresponding null value is returned.</p>\n\
      <p>If the engine found that the function should be executed, it initializes\
      \ all parameters (except <b>out</b> parameters in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a>) as local variables with an\
      \ initial value equal to the corresponding argument value. Omitted optional\
      \ parameters with a default value expression are initialized accordingly at\
      \ this point. Any other optional parameters and local variables are initialized\
      \ with their type's corresponding null value. After that is done, the code in\
      \ the function body is <a href=\"/edit/Code_execution?redlink=1\" class=\"new\"\
      \ title=\"Code execution (page does not exist)\">executed</a> until either a\
      \ <a href=\"/Return_statement\" title=\"Return statement\">return statement</a>\
      \ or the end of the function body is reached. If the function has a return type,\
      \ but code execution did not reach any return statement, the function's return\
      \ value is the return type's corresponding null value.</p>\n<p>In <a href=\"\
      /edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"Unreal Engine 1 (page\
      \ does not exist)\">Unreal Engine 1</a> and <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">2</a>, if the\
      \ function has any <b>out</b> parameters, the final values of those local variables\
      \ are copied back to the corresponding variables originally passed in as arguments.</p>\n\
      <p>Finally, if the function was called as part of an expression, its return\
      \ value is used to further evaluate that expression.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Limits_for_function_calls\">Limits for function calls</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Functions?section=16\" title=\"Edit section: Limits for function\
      \ calls\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Generally there is a limit of at most 250 nested function calls at runtime.\
      \ If this limit is exceeded, the engine will crash with an \"Infinite script\
      \ recursion\" error. The value 250 may look like a severe restriction, but in\
      \ practice you will rarely ever run into it unless your code contains logic\
      \ errors (bad <code>CheckReplacement()</code> logic is a frequent cause) or\
      \ you tried to explicitly implement a recursive algorithm with recursive function\
      \ calls. In the latter case you may have to try and find a different solution\
      \ using either a stack-like structure or a completely different algorithm. Generally,\
      \ recursion must be viewed as an expensive operation in UnrealScript.</p>\n\
      <p>A function call is nested in another function call if it happens as part\
      \ of the containing function's <a href=\"/edit/Code_execution?redlink=1\" class=\"\
      new\" title=\"Code execution (page does not exist)\">code execution</a>. Function\
      \ calls as part of a parameter expression for another function call are nested\
      \ in the calling environment, not in the called function. For example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> X<span class=\"br0\">(</span><span class=\"\
      kw5\">int</span> A, <span class=\"kw5\">int</span> B<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> Y<span class=\"\
      br0\">(</span>Z<span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// calls Z(A, B), then calls Y(result\
      \ of Z call), then returns result of Y call</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">int</span> Y<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> C<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ C <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">int</span>\
      \ Z<span class=\"br0\">(</span><span class=\"kw5\">int</span> D, <span class=\"\
      kw5\">int</span> E<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> D <span class=\"sy0\">+</span> E;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Here, when calling <code>X()</code>,\
      \ the maximum nesting level is 2 while executing <code>Z()</code> and <code>Y()</code>,\
      \ respectively.</p>\n<p>Native functions do not increase the nesting level,\
      \ but UnrealScript functions called from native functions (e.g. <code>*BeginPlay()</code>\
      \ called from <code>Spawn()</code>) will resume with the nesting level at which\
      \ the native function was called.</p>\n<table class=\"navbox nowraplinks\" style=\"\
      \">\n<tr class=\"navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\"\
      \ style=\"\">\n<div style=\"position:relative; width:100%; white-space:nowrap;\"\
      >\n<div class=\"noprint plainlinks\" style=\"background-color:transparent; padding:0;\
      \ font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <strong class=\"\
      selflink\">Functions</strong>&#160;• <a href=\"/States\" title=\"States\">States</a>&#160;•\
      \ <a href=\"/Defaultproperties\" title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a\
      \ href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr\
      \ class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"\
      /Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"\
      /Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\"\
      \ title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"\
      Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\"\
      \ class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\" title=\"String\"\
      >string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"Types\">Object</a>&#160;•\
      \ <a href=\"/Class_limiter#Class\" title=\"Class limiter\" class=\"mw-redirect\"\
      >Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"\
      /Structs\" title=\"Structs\">Structs</a>&#160;(<a href=\"/Vector\" title=\"\
      Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅\
      \ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a\
      \ href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"/Static_arrays\"\
      \ title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"/Dynamic_arrays\"\
      \ title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"/Delegates\"\
      \ title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\" title=\"\
      Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body odd\">\n\
      <th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"Literals\"\
      >Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Literals#Boolean_values\"\
      \ title=\"Literals\">Boolean</a>&#160;• <a href=\"/Literals#Float_numbers\"\
      \ title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.219 seconds\nReal time usage: 0.400 seconds\nPreprocessor\
      \ visited node count: 288/1000000\nPreprocessor generated node count: 1179/1000000\n\
      Post‐expand include size: 12355/2097152 bytes\nTemplate argument size: 4203/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  149.735      1 - -total\n 36.27%   54.314      1 - Template:Navbox_unrealscript\n\
      \ 28.57%   42.786      1 - Template:Infobox_EngineVersion\n 26.46%   39.625\
      \      1 - Template:Navbox\n  5.82%    8.712      2 - Template:UE1\n  5.62%\
      \    8.408      3 - Template:Confirm\n  3.74%    5.606      1 - Template:Clear\n\
      \  3.65%    5.471      1 - Template:Tnavbar\n  3.55%    5.309      2 - Template:UE2\n\
      \  3.01%    4.506      6 - Template:UE3\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:24088-0!*!0!!en!*!* and timestamp 20221117232741 and\
      \ revision id 46373\n -->\n"
  categories:
  - sortkey: "Functions"
    name: "Pages_needing_verification"
  - sortkey: "Functions"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Replication"
  - ns: 0
    exists: false
    name: "Engine version"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: false
    name: "UnrealScript bytecode"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Class"
  - ns: 0
    exists: true
    name: "Super"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "UT2004"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Static array"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "UDK"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "UT"
  - ns: 0
    exists: true
    name: "Enum"
  - ns: 0
    exists: false
    name: "Native code"
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Unreal Engine"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Kismet 2"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "UnrealScript source code"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "DLLBind"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Type"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: false
    name: "Code execution"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "State"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 100
    exists: true
    name: "Legacy:Probe Function"
  - ns: 0
    exists: true
    name: "Operator"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: false
    name: "Role"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Variable declaration"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "UT3"
  - ns: 0
    exists: false
    name: "State code"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Compiler directives"
  templates:
  - ns: 10
    exists: true
    name: "Template:UE1"
  - ns: 10
    exists: true
    name: "Template:Infobox EngineVersion"
  - ns: 10
    exists: true
    name: "Template:UE2"
  - ns: 10
    exists: true
    name: "Template:UE3"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 10
    exists: true
    name: "Template:Clear"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Function declarations"
    number: "1"
    index: "1"
    fromtitle: "Functions"
    byteoffset: 706
    anchor: "Function_declarations"
  - toclevel: 2
    level: "3"
    line: "Syntax"
    number: "1.1"
    index: "2"
    fromtitle: "Functions"
    byteoffset: 732
    anchor: "Syntax"
  - toclevel: 2
    level: "3"
    line: "Modifiers"
    number: "1.2"
    index: "3"
    fromtitle: "Functions"
    byteoffset: 2039
    anchor: "Modifiers"
  - toclevel: 3
    level: "4"
    line: "Access modifiers"
    number: "1.2.1"
    index: "4"
    fromtitle: "Functions"
    byteoffset: 2252
    anchor: "Access_modifiers"
  - toclevel: 3
    level: "4"
    line: "Call modifiers"
    number: "1.2.2"
    index: "5"
    fromtitle: "Functions"
    byteoffset: 3682
    anchor: "Call_modifiers"
  - toclevel: 3
    level: "4"
    line: "Network modifiers"
    number: "1.2.3"
    index: "6"
    fromtitle: "Functions"
    byteoffset: 5496
    anchor: "Network_modifiers"
  - toclevel: 3
    level: "4"
    line: "Implementation modifiers"
    number: "1.2.4"
    index: "7"
    fromtitle: "Functions"
    byteoffset: 6851
    anchor: "Implementation_modifiers"
  - toclevel: 2
    level: "3"
    line: "Parameters"
    number: "1.3"
    index: "8"
    fromtitle: "Functions"
    byteoffset: 9253
    anchor: "Parameters"
  - toclevel: 3
    level: "4"
    line: "Syntax"
    number: "1.3.1"
    index: "9"
    fromtitle: "Functions"
    byteoffset: 9512
    anchor: "Syntax_2"
  - toclevel: 3
    level: "4"
    line: "Parameter modifiers"
    number: "1.3.2"
    index: "10"
    fromtitle: "Functions"
    byteoffset: 10038
    anchor: "Parameter_modifiers"
  - toclevel: 2
    level: "3"
    line: "Locals"
    number: "1.4"
    index: "11"
    fromtitle: "Functions"
    byteoffset: 13978
    anchor: "Locals"
  - toclevel: 1
    level: "2"
    line: "Function calls"
    number: "2"
    index: "12"
    fromtitle: "Functions"
    byteoffset: 14248
    anchor: "Function_calls"
  - toclevel: 2
    level: "3"
    line: "Syntax"
    number: "2.1"
    index: "13"
    fromtitle: "Functions"
    byteoffset: 14931
    anchor: "Syntax_3"
  - toclevel: 2
    level: "3"
    line: "Determining the target function"
    number: "2.2"
    index: "14"
    fromtitle: "Functions"
    byteoffset: 15874
    anchor: "Determining_the_target_function"
  - toclevel: 2
    level: "3"
    line: "How function calls are processed"
    number: "2.3"
    index: "15"
    fromtitle: "Functions"
    byteoffset: 17773
    anchor: "How_function_calls_are_processed"
  - toclevel: 2
    level: "3"
    line: "Limits for function calls"
    number: "2.4"
    index: "16"
    fromtitle: "Functions"
    byteoffset: 20796
    anchor: "Limits_for_function_calls"
  displaytitle: "Functions"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/subroutine"
    name: "wp:subroutine"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Evaluation_strategy"
    name: "wp:Evaluation strategy"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/DLL"
    name: "wp:DLL"
  wikitext:
    text: "A '''function''' in [[UnrealScript]] is a [[wp:subroutine|subroutine]]\
      \ associated with a specific [[class]]. Functions can define zero or up to sixteen\
      \ [[#Parameters|parameters]] and optionally a return type. Various [[#Modifiers|modifiers]]\
      \ can be used in the declaration to change the way the function can be accessed\
      \ or how it behaves when called.\n\n[[Operators]] and [[delegates]] are special\
      \ kinds of functions. Operators have either exactly one (prefix/postfix operators)\
      \ or two (infix operators) parameters and can use an operator symbol instead\
      \ of a function name. Delegates are variable-like placeholders you can assign\
      \ functions to. Calls to a delegate actually call the function assigned to it.\n\
      \n==Function declarations==\n===Syntax===\nA regular function declaration looks\
      \ like this:\n ''[[#Modifiers|[modifiers]]]'' '''function''' ''[[types|[returntype]]]''\
      \ functionname '''(''' ''[[#Parameters|[parameter declarations]]]'' ''')'''\
      \ ''body_or_semicolon''\nIf the function does not return any value, the return\
      \ type can be omitted. In this case [[return statement]]s in the function body\
      \ may not specify any value. Otherwise, if a return value was specified, any\
      \ return statement must specify an expression that evaluates to that type. Starting\
      \ with [[Unreal Engine 2]] the compiler will emit a warning if a return type\
      \ was specified, but the function body does not contain any return statement.\n\
      Alternatively, the keyword '''event''' can be used instead of '''function'''\
      \ without any difference at the UnrealScript level. The '''event''' keyword\
      \ will only become relevant when writing [[native code]].\n\n'''Note:''' The\
      \ compiler is not very strict about the order of modifiers and the keywords\
      \ '''function''' and '''event'''. Especially in the UT3 source code you will\
      \ sometimes see modifiers between the keyword '''function''' and the return\
      \ type or function name. This can be very confusing to anyone reading your code,\
      \ so please always make '''function''' or '''event''' the last keyword before\
      \ the return type or function name.\n\n===Modifiers===\nBefore the actual function\
      \ declaration you are allowed to specify one or more function modifiers. These\
      \ change the way the function works in certain situations.\n{{Infobox EngineVersion|modifier}}\n\
      \n====Access modifiers====\n; Private<sup>2,3</sup>: The function is only accessible\
      \ within the same class. Not even subclasses can \"see\" it, which means the\
      \ usual rules for overriding functions don't apply - subclasses may change the\
      \ return type and the number and type of parameters. Since they don't see the\
      \ parent class function, they cannot call it via the [[Super]] keyword.\n; Protected<sup>2,3</sup>:\
      \ Restricts access to this function to the current class and its subclasses.\
      \ Subclasses may override the function unless it is also declared as '''final'''.\n\
      ; Public<sup>2,3</sup>: The default access rule. If neither '''private''' nor\
      \ '''protected''' is specified, this is one is implied. Public functions can\
      \ be called from non-related classes and may be overridden in subclasses, unless\
      \ the function is also declared as '''final'''.\n; Static: Static functions\
      \ are not tied to specific objects, but to a class. The object literal <code>Self</code>\
      \ is not allowed within static functions and instance functions (i.e. functions\
      \ not declared with the '''static''' modifier) can only be called through object\
      \ references, this includes iterator functions in [[ForEach loop]]s. Because\
      \ static functions are not executed in the context of any object instance, they\
      \ can also not be subject to [[replication]].\n; Final: As the name suggests,\
      \ function declarations with this modifier are \"final\" and can't be overridden\
      \ in subclasses.\n\n====Call modifiers====\n; Exec: Marks the function as potential\
      \ console command. Note that exec functions are only really called via console\
      \ commands for certain objects, such as the local PlayerController, that player's\
      \ HUD, Pawn or selected Weapon and a few other places. The possible places for\
      \ exec functions may vary from game to game, so have a look at the [[UnrealScript\
      \ source code]] of your game to find out where you can put exec functions that\
      \ actually work.<br/>When overriding functions, you must also declare the new\
      \ function with the '''exec''' modifier if and only if the overridden function\
      \ was declared with it. This means you cannot turn a regular function into a\
      \ console command!\n; K2Call<sup>3-x3</sup> : Allows the function to be referenced\
      \ and called via [[Kismet 2]]{{confirm}}.\n; K2Override<sup>3-x3</sup> : Related\
      \ to [[Kismet 2]]{{confirm}}. Effect unknown.\n; K2Pure<sup>3-x3</sup> : Related\
      \ to [[Kismet 2]]{{confirm}}. Effect unknown.\n; Simulated: Marks the function\
      \ as valid for execution on clients if the actor containing it was replicated\
      \ to that client and the local [[role]] of that client is either ROLE_SimulatedProxy\
      \ or ROLE_DumbProxy.<br/>'''Note:''' The modifier '''simulated''' does not imply\
      \ any kind of replication or even broadcast! Also, this modifier is not inherited\
      \ when overriding functions - every super function call evaluates that super\
      \ function's '''simulated''' modifier separately, potentially breaking the chain\
      \ of super calls on clients!\n; Singular: Restricts recursive function calls\
      \ by only ever allowing a single singular function to execute per object instance.\
      \ If a singular function is called, the engine first checks if the object instance\
      \ the function was called on already executes a singular function. If it does,\
      \ the new function call is ignored.\n\n====Network modifiers====\nThese modifiers\
      \ affect function [[replication]] in [[Unreal Engine 3]]. Earlier engine generations\
      \ use the [[replication block]] to define these.\n; Client<sup>3</sup>: Specifies\
      \ that this function should be replicated to the client owning the actor if\
      \ it is called on the server. This modifier automatically makes the function\
      \ '''simulated''' as well.\n; DemoRecording<sup>3-x1</sup>: Specifies that this\
      \ function should be replicated to the demorecording driver (applicable to server-side\
      \ demo recording only). It will only be executed during demo playback. This\
      \ modifier automatically makes the function '''simulated''' as well, which makes\
      \ sense since demo playback essentially is a client environment. Note that '''Client'''\
      \ function calls are also replicated to the demorecording driver, whereas '''DemoRecording'''\
      \ ones are replicated only to the driver, not to the real clients.\n; Reliable<sup>3</sup>:\
      \ Replicated functions will be replicated reliably when marked with this modifier.\n\
      ; Server<sup>3</sup>: Specifies that this function should be replicated to the\
      \ server if it was called on a replicated actor that is owned by the local client.\n\
      ; Unreliable<sup>3</sup>: Replicated functions will be replicated unreliably\
      \ when marked with this modifier, i.e. they may be dropped due to packet loss\
      \ or bandwidth saturation.\n\n====Implementation modifiers====\n; Const<sup>3</sup>:\
      \ This modifier is actually placed after the closing parenthesis of the parameter\
      \ list. It will be passed to the generated native header file, but has no effect\
      \ in UnrealScript.\n; DLLImport<sup>3-x2</sup>: Indicates that the function\
      \ should be linked to the specified [[wp:DLL|DLL]] in [[DLLBind]].\n; Event:\
      \ As mentioned in the [[#Syntax|Syntax]] section above, the keyword '''event'''\
      \ may replace the keyword '''function''' without any effect on the UnrealScript\
      \ level. However, when exporting native header files from script code, '''event'''\
      \ functions will have calling stubs generated so the UnrealScript function can\
      \ be called more easily from C++ code. These generated C++ methods have the\
      \ name <code>event''NameOfUnrealScriptFunction''</code> and their parameters\
      \ and possible return type reflects the UnrealScript function declaration.\n\
      ; Intrinsic<sup>1,2</sup>: See '''native'''.\n; Intrinsic(''number'')<sup>1,2</sup>:\
      \ See '''native(''number'')'''.\n; Iterator: Native functions with the '''iterator'''\
      \ modifier can only be used as the iterator function of a [[ForEach loop]].\
      \ This modifier may not be used for non-native functions.\n; Latent: Native\
      \ functions with the '''latent''' modifier may only be called directly from\
      \ [[state code]] (but not within any [[ForEach loop]]) and usually pause state\
      \ code execution at least until the next tick, possibly even longer. This modifier\
      \ may not be used for non-native functions.\n; Native: The actual implementation\
      \ of this function resides in native code in a C++ function with the name <code>exec''NameOfUnrealScriptFunction''</code>.\
      \ Very early [[Unreal Engine 1]] versions used the keyword '''intrinsic''' instead.<br/>Similar\
      \ to '''simulated''' functions, native functions can be called clientsidely\
      \ on replicated actors even if the local [[role]] is ''ROLE_SimulatedProxy''\
      \ or ''ROLE_DumbProxy''.\n; Native(''number''): Same as the plain '''native'''\
      \ modifier, but additionally the function gets its own [[UnrealScript bytecode]]\
      \ token.<br/>''Even if you can write native code for your mod, you should never\
      \ specify numbers for your native functions!''\n; NoExport<sup>3</sup>, NoExportHeader<sup>3-x2</sup>:\
      \ Prevents this function from being exported to native headers.\n; Virtual<sup>3</sup>:\
      \ This modifier is just passed through to exported native headers and has no\
      \ effect in UnrealScript.\n\n===Parameters===\nA function may have zero to sixteen\
      \ parameters. If you need to pass more values to your function, consider using\
      \ combining some or all of them to a [[struct]]-type parameter or passing them\
      \ as a [[static array|static]] or [[dynamic array]].\n\n====Syntax====\nParameter\
      \ declarations have the following syntax:\n ''[parameter modifiers]'' [[type]]\
      \ parametername\nAs with other [[variable declaration]]s, the parameter name\
      \ may optionally followed by a number in square brackets to declare the parameter\
      \ as [[static array]]:\n ''[parameter modifiers]'' [[type]] parametername'''['''arraysize''']'''\n\
      If more than one parameter is specified, the individual parameters must be separated\
      \ by commas. The type and any modifiers only apply to the parameter they were\
      \ specified for.\n\n====Parameter modifiers====\n; coerce: Automatically performs\
      \ [[typecasting]] of values passed to this parameter, if the parameter is of\
      \ a primitive type other than [[enum]]. Note that the built-in numeric types\
      \ [[int]], [[float]] and [[byte]] are automatically typecasted to each other\
      \ even without this modifier. Enum conversion to these numeric types is automatic\
      \ as well. This modifier can also be applied to the return type of the function.\n\
      ; const<sup>3</sup>: For native functions this modifier is passed to the generated\
      \ native headers. In UnrealScript, it prevents changes to the parameter within\
      \ the function body, i.e. the value of the parameter must remain as the value\
      \ that was passed when the function was called.\n; init<sup>3-x2</sup>: Effect\
      \ unknown.\n; optional: Specifying the parameter in function calls is optional.\
      \ Omitted parameters assume a default value, which is the parameter type's null\
      \ value. In Unreal Engine 3 it is also possible to specify a different default\
      \ value:\n '''optional''' [[type]] parametername '''=''' defaultvalue\n:The\
      \ ''defaultvalue'' can be any expression you could use on the right side of\
      \ a variable assignment. It will be evaluated as if it was placed between the\
      \ last local variable declaration and the first executable code statement of\
      \ the function. In other words, you can call functions here and use any of the\
      \ function's parameters or local variables. Evaluation of the expression is\
      \ skipped if that parameter was specified when calling the function.\n;<span\
      \ ID=\"out_parameter\"></span> out<sup>1,2</sup>: If the parameter is a variable\
      \ or an array element or struct member accessed through a variable (as opposed\
      \ to a literal, or function return value or an array element or struct member\
      \ accessed through a function return value), any modification to the parameter\
      \ inside the function is copied back into the variable originally passed to\
      \ the function after the function returns.<br/>'''Note:''' This is not \"call\
      \ by reference\", but actually [[wp:Evaluation strategy#Call by copy-restore|call\
      \ by value-result]]. Instead of only copying the value when passing the parameter\
      \ in, it needs to be copied again when returning from the function, so declaring\
      \ a parameter as '''out''' is actually more expensive in UnrealScript prior\
      \ to Unreal Engine 3. (see below)\n;out<sup>3</sup>: The parameter is passed\
      \ [[wp:Evaluation strategy#Call by reference|by reference]] instead of being\
      \ copied. Any changes to the parameter inside the function become immediately\
      \ visible in the variable, struct member or (static) array element originally\
      \ passed to the function. For large dynamic arrays or structs passing by reference\
      \ (via '''out''' parameter) may be more efficient than passing by value.<br/>'''Note:'''\
      \ Due to the way dynamic arrays are implemented, you can't pass dynamic array\
      \ elements or parts of them to an '''out''' parameter. Passing an entire dynamic\
      \ array via '''out''' parameter is possible, and for large arrays even recommended.\n\
      ; skip: Only allowed for the second parameter of a native [[operator]] declaration.\
      \ The native implementation of the operator may choose to not evaluate the second\
      \ operand if the operator result can be determined by evaluating only the first\
      \ operand. This is used for the operators <code>&&</code> and <code><nowiki>||</nowiki></code>\
      \ to skip evaluating the second boolean expression if it is not required.\n\n\
      Parameters are evaluated at the time the function is called, before deciding\
      \ if or where to execute the function body. Parameter expressions are evaluated\
      \ from left to right in the context of the calling code and with the exception\
      \ of parameters declared with the '''out''' modifier, UnrealScript always uses\
      \ the [[wp:Evaluation strategy#Call by value|call-by-value evaluation strategy]].\n\
      Note that reference type values are not objects, but object references! Passing\
      \ objects to functions duplicates the object reference, not the object itself.\n\
      \n===Locals===\nFunctions can have also locals which are just like [[Variables|class\
      \ variables]] with the exception of no modifiers. Locals can only be declared\
      \ in functions and they are only available within functions.\n\nSee [[Variables#Local_variables|Local\
      \ variables]].\n\n==Function calls==\nFunctions can be called from [[state code]]\
      \ and other functions. In theory they can also be called from a [[replication\
      \ block]], but this is impractical as replication conditions are tested relatively\
      \ often and at unexpected times, while function calls (especially to non-native\
      \ functions) are a much more expensive operation than checking variable values.\n\
      \nFunction calls must not be confused with executing functions. The call to\
      \ and execution of a function can happen in different places if replication\
      \ is involved, and some [[#Modifiers|modifiers]] (e.g. ''singular'' or no ''simulated'')\
      \ may prevent the execution of a called function at runtime altogether.\n\n\
      ===Syntax===\nA typical function call uses the following syntax:\n [''objectreference''\
      \ '''.'''] ''functionname'' '''(''' [''expression'' [''',''' ''expression''\
      \ [''',''' ...]]] ''')'''\nThe object reference in front of the function name\
      \ provides a \"calling context\" for the function. The function will be called\
      \ on the specified object. If the reference is left out, the function is called\
      \ in the same context as the code calling the function. \n\nFor static functions\
      \ the context is actually the class of the specified object reference. To specify\
      \ a context class directly, you can use the following syntax instead:\n ''classreference''\
      \ '''. static .''' ''functionname'' '''(''' [''expression'' [''',''' ''expression''\
      \ [''',''' ...]]] ''')'''\n\nInstead of an object reference, you can also use\
      \ one of the [[function call specifiers]] '''Super''' or '''Global''' to tell\
      \ the compiler you want a different implementation of a function to be called.\n\
      \n===Determining the target function===\nWhen the UnrealScript interpreter or\
      \ compiler (only for ''final'' functions and when using the [[Super]] call specifier)\
      \ encounters a function call, it needs to figure out, which implementation actually\
      \ gets called. It does so by starting at the class of the context object reference.\
      \ The compiler and [[UnrealScript bytecode]] interpreter have similar rules\
      \ for this, but there are some important differences. The most important difference\
      \ is that the compiler doesn't actually execute the code, so it doesn't know\
      \ e.g. the content of variables at runtime. Due to this restriction, the compiler\
      \ relies on variable types instead of the referenced objects to find the calling\
      \ context. Similar restrictions apply to determining the [[state]] of the context\
      \ object. The compiler can only assume that functions without a context object\
      \ reference are called in the context of the state the calling code resides\
      \ in. At runtime, the context state can change before a state function returns\
      \ if any code that function executes calls the '''GotoState()''' function.\n\
      \nIf the context class and context object state have been determined, the engine\
      \ first looks in that state for a function definition with the specified name.\
      \ If none is found, it continues to look in the parent state for extended states\
      \ or in the parent class version of the same state for inherited states. It\
      \ continues upwards until no more parent states are found. In that case, non-state\
      \ functions with the specified name are looked up in a similar manner, starting\
      \ at the context class. If the compiler can't find any function definition this\
      \ way, it issues an error. Due to the compiler check the engine should always\
      \ find a function to call at runtime, but there are some special cases the compiler\
      \ can't catch and in these cases the engine crash will crash with a \"Failed\
      \ to find function\" error.\n\n===How function calls are processed===\nAfter\
      \ the engine resolved, which function it should actually call, it evaluates\
      \ the function call.\n\nBefore looking at the function itself, all specified\
      \ argument expressions are evaluated from left to right. If an expression contains\
      \ a function call, its return value is determined by calling that function first.\
      \ Some native functions have non-standard argument evaluation methods, especially\
      \ the operators <code>&&</code> and <code>||</code>, which may choose to not\
      \ evaluate their second argument at all.\n\nIf the function has [[replication]]\
      \ logic attached, the engine checks if it needs to replicate the call. If that's\
      \ the case, the function's argument values are wrapped up along with the function\
      \ name in a network packet, which is sent to the remote side. The ''local''\
      \ function call then returns immediately and if the function has a return type,\
      \ it returns that type's null value. When the remote side receives the function\
      \ call, it first checks whether it actually wants it (in case something strange\
      \ happened) and then continues to process the function call similar to a local\
      \ function call as described below.\n\nNow that the function's argument values\
      \ are known and the is to be executed locally, the engine checks if and how\
      \ it should actually execute the function. If the function is neither ''native''\
      \ nor ''simulated'', but the context object is an actor with <code>[[Role]]\
      \ <= ROLE_SimulatedProxy</code>, then the function is not executed. Similarly,\
      \ if the function is ''singular'' and the context object already executes the\
      \ same or another ''singular'' function, the function is not executed. And lastly,\
      \ if the function is a [[Legacy:Probe_Function|probe function]] and the probe\
      \ event with the same name was disabled, then the function is not executed.\
      \ In all these cases, if the function has a return type, the corresponding null\
      \ value is returned.\n\nIf the engine found that the function should be executed,\
      \ it initializes all parameters (except '''out''' parameters in [[Unreal Engine\
      \ 3]]) as local variables with an initial value equal to the corresponding argument\
      \ value. Omitted optional parameters with a default value expression are initialized\
      \ accordingly at this point. Any other optional parameters and local variables\
      \ are initialized with their type's corresponding null value. After that is\
      \ done, the code in the function body is [[code execution|executed]] until either\
      \ a [[return statement]] or the end of the function body is reached. If the\
      \ function has a return type, but code execution did not reach any return statement,\
      \ the function's return value is the return type's corresponding null value.\n\
      \nIn [[Unreal Engine 1]] and [[Unreal Engine 2|2]], if the function has any\
      \ '''out''' parameters, the final values of those local variables are copied\
      \ back to the corresponding variables originally passed in as arguments.\n\n\
      Finally, if the function was called as part of an expression, its return value\
      \ is used to further evaluate that expression.\n\n===Limits for function calls===\n\
      Generally there is a limit of at most 250 nested function calls at runtime.\
      \ If this limit is exceeded, the engine will crash with an \"Infinite script\
      \ recursion\" error. The value 250 may look like a severe restriction, but in\
      \ practice you will rarely ever run into it unless your code contains logic\
      \ errors (bad <code>CheckReplacement()</code> logic is a frequent cause) or\
      \ you tried to explicitly implement a recursive algorithm with recursive function\
      \ calls. In the latter case you may have to try and find a different solution\
      \ using either a stack-like structure or a completely different algorithm. Generally,\
      \ recursion must be viewed as an expensive operation in UnrealScript.\n\nA function\
      \ call is nested in another function call if it happens as part of the containing\
      \ function's [[code execution]]. Function calls as part of a parameter expression\
      \ for another function call are nested in the calling environment, not in the\
      \ called function. For example:\n<uscript>\nfunction int X(int A, int B)\n{\n\
      \  return Y(Z(A, B)); // calls Z(A, B), then calls Y(result of Z call), then\
      \ returns result of Y call\n}\n\nfunction int Y(int C)\n{\n  return C - 1;\n\
      }\n\nfunction int Z(int D, int E)\n{\n  return D + E;\n}\n</uscript>\nHere,\
      \ when calling <code>X()</code>, the maximum nesting level is 2 while executing\
      \ <code>Z()</code> and <code>Y()</code>, respectively.\n\nNative functions do\
      \ not increase the nesting level, but UnrealScript functions called from native\
      \ functions (e.g. <code>*BeginPlay()</code> called from <code>Spawn()</code>)\
      \ will resume with the nesting level at which the native function was called.\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 46373
name: "Functions"
revision:
  revid: 46373
  parentid: 46371
  user: "SeriousBarbie"
  timestamp: 1475814038.000000000
  comment: "baaah, anchor set at wrong keyword..."
timestamp: 1668754755.575619000
