---
parse:
  title: "Legacy:UnrealScript Grammar"
  text:
    text: "<p>This is a <a href=\"http://en.wikipedia.org/wiki/EBNF\" class=\"extiw\"\
      \ title=\"wikipedia:EBNF\">Wikipedia:EBNF</a> Specification of the <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a> grammar.</p>\n\
      <p>It can be useful if you are going to write a parser for the UnrealScript\
      \ language.</p>\n<p><b>Note:</b> this is not the official specification, it's\
      \ made by visitors of the UnrealWiki.</p>\n<p><i><b>Important note:</b></i>\
      \ the stock UnrealScript compiler doesn't follow strict rules as usually specified\
      \ by a grammar like this. It is very well possible that the compiler accepts\
      \ constructions not documented here. See <a href=\"/Legacy:UnrealScript_Language_Test\"\
      \ title=\"Legacy:UnrealScript Language Test\">UnrealScript Language Test</a>\
      \ for actual examples of various constructions.</p>\n<p><b>Edit guidelines:</b></p>\n\
      <ul>\n<li>all non-terminals should have all uppercase characters. Keep everything\
      \ aligned. If you leave things <i>open</i> use '...' to make that clear.</li>\n\
      <li>Always use as much brackets as needed, don't optimize because this can result\
      \ in confusion.</li>\n<li>Terminals that are words can be used directly in the\
      \ production rules, otherwise you must use a terminal rule.</li>\n</ul>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Non-Terminals\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Non-Terminals</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Declaration_parts\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Declaration parts</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Replication_parts\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Replication parts</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Body_parts\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Body parts</span></a>\n<ul>\n\
      <li class=\"toclevel-3 tocsection-5\"><a href=\"#State_parts\"><span class=\"\
      tocnumber\">1.3.1</span> <span class=\"toctext\">State parts</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-6\"><a href=\"#Function_parts\"><span class=\"\
      tocnumber\">1.3.2</span> <span class=\"toctext\">Function parts</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-7\"><a href=\"#Code_parts\"><span class=\"\
      tocnumber\">1.3.3</span> <span class=\"toctext\">Code parts</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Defaultproperties\"\
      ><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">Defaultproperties</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Terminals\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Terminals</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Notes\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Notes</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Case\"><span class=\"tocnumber\">3.1</span> <span\
      \ class=\"toctext\">Case</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"\
      ><a href=\"#Unreal_Engine\"><span class=\"tocnumber\">3.2</span> <span class=\"\
      toctext\">Unreal Engine</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-13\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-14\"><a href=\"#Discussion\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Non-Terminals\">Non-Terminals</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=1\" title=\"Edit section:\
      \ Non-Terminals\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">PROGRAM                  <span class=\"\
      sy0\">=</span> CLASSDECL \n                           <span class=\"br0\">(</span>\
      \ DECLARATIONS <span class=\"br0\">)</span><span class=\"sy0\">*</span>\n  \
      \                         <span class=\"br0\">(</span> REPLICATIONBLOCK <span\
      \ class=\"br0\">)</span>? \n                           BODY \n             \
      \              <span class=\"br0\">(</span> DEFAULTPROPERTIESBLOCK <span class=\"\
      br0\">)</span>?\n \nCLASSDECL                <span class=\"sy0\">=</span> <span\
      \ class=\"kw1\">class</span> IDENTIFIER <span class=\"br0\">(</span> <span class=\"\
      kw1\">extends</span> PACKAGEIDENTIFIER <span class=\"br0\">)</span>? \n    \
      \                       <span class=\"br0\">(</span> CLASSPARAMS <span class=\"\
      br0\">)</span><span class=\"sy0\">*</span> SEMICOLON\n \nCLASSPARAMS       \
      \       <span class=\"sy0\">=</span> CONSTCLASSPARAMS <span class=\"sy0\">|</span>\
      \ within PACKAGEIDENTIFIER <span class=\"sy0\">|</span> \n                 \
      \          dependson LBRACK PACKAGEIDENTIFIER RBRACK <span class=\"sy0\">|</span>\n\
      \                           <span class=\"kw1\">config</span> <span class=\"\
      br0\">(</span> LBRACK PACKAGEIDENTIFIER RBRACK <span class=\"br0\">)</span>?\
      \ <span class=\"sy0\">|</span>\n                           hidecategories LBRACK\
      \ IDENTIFIERLIST RBRACK <span class=\"sy0\">|</span>\n                     \
      \      showcategories LBRACK IDENTIFIERLIST RBRACK                         \
      \  \n \nIDENTIFIER               <span class=\"sy0\">=</span> <span class=\"\
      br0\">(</span> ALPHA <span class=\"sy0\">|</span> UNDERSCORE <span class=\"\
      br0\">)</span> <span class=\"br0\">(</span> ALPHA <span class=\"sy0\">|</span>\
      \ UNDERSCORE <span class=\"sy0\">|</span> DIGIT <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span>\n                           <span class=\"co1\">//\
      \ packagename.classname or classname.structname</span>\nPACKAGEIDENTIFIER  \
      \      <span class=\"sy0\">=</span> <span class=\"br0\">(</span> IDENTIFIER\
      \ DOT <span class=\"br0\">)</span>? IDENTIFIER\nQUALIFIEDIDENTIFIER      <span\
      \ class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw1\">class</span> SQUOTE PACKAGEIDENTIFIER SQUOTE DOT <span\
      \ class=\"kw1\">default</span> DOT IDENTIFIER <span class=\"br0\">)</span>\n\
      \                           <span class=\"sy0\">|</span> <span class=\"br0\"\
      >(</span> <span class=\"br0\">(</span> IDENTIFIER DOT <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> IDENTIFIER <span class=\"br0\">)</span> \n        \
      \                   <span class=\"br0\">)</span>\nIDENTIFIERLIST           <span\
      \ class=\"sy0\">=</span> IDENTIFIER <span class=\"br0\">(</span> COMMA IDENTIFIER\
      \ <span class=\"br0\">)</span><span class=\"sy0\">*</span>\n \nSTRINGVAL   \
      \             <span class=\"sy0\">=</span> DQUOTE PRINTABLE DQUOTE\nINTVAL \
      \                  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\
      \ DIGIT<span class=\"sy0\">+</span> <span class=\"sy0\">|</span> <span class=\"\
      br0\">(</span> <span class=\"st0\">'0x'</span> <span class=\"br0\">(</span>\
      \ HEXDIGIT <span class=\"br0\">)</span><span class=\"sy0\">+</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>\nFLOATVAL                 <span\
      \ class=\"sy0\">=</span> <span class=\"br0\">(</span> DIGIT <span class=\"br0\"\
      >)</span><span class=\"sy0\">+</span> DOT <span class=\"br0\">(</span> DIGIT\
      \ <span class=\"br0\">)</span><span class=\"sy0\">*</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Declaration_parts\">Declaration parts</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=2\" title=\"Edit section:\
      \ Declaration parts\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">DECLARATIONS             <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> CONSTDECL <span class=\"sy0\">|</span>\
      \ VARDECL <span class=\"sy0\">|</span> ENUMDECL <span class=\"sy0\">|</span>\
      \ STRUCTDECL <span class=\"br0\">)</span> SEMICOLON\n \nCONSTDECL          \
      \      <span class=\"sy0\">=</span> <span class=\"kw1\">const</span> IDENTIFIER\
      \ <span class=\"sy0\">=</span> CONSTVALUE\nCONSTVALUE               <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> STRINGVAL <span class=\"sy0\">|</span>\
      \ INTVAL <span class=\"sy0\">|</span> FLOATVAL <span class=\"sy0\">|</span>\
      \ BOOLVAL <span class=\"br0\">)</span>\n \nVARDECL                  <span class=\"\
      sy0\">=</span> <span class=\"kw1\">var</span> <span class=\"br0\">(</span> CONFIGGROUP\
      \ <span class=\"br0\">)</span>? <span class=\"br0\">(</span> VARPARAMS <span\
      \ class=\"br0\">)</span><span class=\"sy0\">*</span> \n                    \
      \       VARTYPE VARIDENTIFIER <span class=\"br0\">(</span> COMMA VARIDENTIFIER\
      \ <span class=\"br0\">)</span><span class=\"sy0\">*</span>\nCONFIGGROUP    \
      \          <span class=\"sy0\">=</span> LBRACK <span class=\"br0\">(</span>\
      \ IDENTIFIER <span class=\"br0\">)</span>? RBRACK\nVARTYPE                 \
      \ <span class=\"sy0\">=</span> PACKAGEIDENTIFIER <span class=\"sy0\">|</span>\
      \ ENUMDECL <span class=\"sy0\">|</span> STRUCTDECL <span class=\"sy0\">|</span>\
      \ ARRAYDECL <span class=\"sy0\">|</span> CLASSTYPE <span class=\"sy0\">|</span>\
      \ BASICTYPE\nVARIDENTIFIER            <span class=\"sy0\">=</span> IDENTIFIER\n\
      \ \nARRAYDECL                <span class=\"sy0\">=</span> IDENTIFIER LSBRACK\
      \ INTVAL RSBRACK\nDYNARRAYDECL             <span class=\"sy0\">=</span> array\
      \ LABRACK <span class=\"br0\">(</span>PACKAGEIDENTIFIER <span class=\"sy0\"\
      >|</span> CLASSTYPE <span class=\"sy0\">|</span> BASICTYPE<span class=\"br0\"\
      >)</span> RABRACK\nCLASSTYPE                <span class=\"sy0\">=</span> <span\
      \ class=\"kw1\">class</span> LABRACK PACKAGEIDENTIFIER RABRACK\n \nENUMDECL\
      \                 <span class=\"sy0\">=</span> <span class=\"kw1\">enum</span>\
      \ IDENTIFIER LCBRACK ENUMOPTIONS RCBRACK\nENUMOPTIONS              <span class=\"\
      sy0\">=</span> IDENTIFIER <span class=\"br0\">(</span> COMMA IDENTIFIER <span\
      \ class=\"br0\">)</span><span class=\"sy0\">*</span>\n \nSTRUCTDECL        \
      \       <span class=\"sy0\">=</span> <span class=\"kw1\">struct</span> <span\
      \ class=\"br0\">(</span> STRUCTPARAMS <span class=\"br0\">)</span><span class=\"\
      sy0\">*</span> IDENTIFIER <span class=\"br0\">(</span> <span class=\"kw1\">extends</span>\
      \ PACKAGEIDENTIFIER <span class=\"br0\">)</span>? \n                       \
      \    LCBRACK STRUCTBODY RCBRACK\nSTRUCTPARAMS             <span class=\"sy0\"\
      >=</span> <span class=\"br0\">(</span> <span class=\"kw1\">native</span> <span\
      \ class=\"sy0\">|</span> export <span class=\"br0\">)</span>\nSTRUCTBODY   \
      \            <span class=\"sy0\">=</span> <span class=\"br0\">(</span> VARDECL\
      \ SEMICOLON <span class=\"br0\">)</span><span class=\"sy0\">+</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Replication_parts\">Replication\
      \ parts</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=3\" title=\"Edit\
      \ section: Replication parts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">REPLICATIONBLOCK\
      \         <span class=\"sy0\">=</span> <span class=\"kw1\">replication</span>\
      \ LCBRACK <span class=\"br0\">(</span> REPLICATIONBODY <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> RCBRACK\nREPLICATIONBODY          <span class=\"sy0\"\
      >=</span> <span class=\"br0\">(</span> <span class=\"kw1\">reliable</span> <span\
      \ class=\"sy0\">|</span> <span class=\"kw1\">unreliable</span> <span class=\"\
      br0\">)</span> <span class=\"kw2\">if</span> LBRACK EXPR RBRACK \n         \
      \                  IDENTIFIER <span class=\"br0\">(</span> COMMA IDENTIFIER\
      \ <span class=\"br0\">)</span><span class=\"sy0\">*</span> SEMICOLON</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Body_parts\">Body parts</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=4\" title=\"Edit section:\
      \ Body parts\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">BODY                     <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> STATEDECL <span class=\"sy0\">|</span>\
      \ FUNCTIONDECL <span class=\"br0\">)</span><span class=\"sy0\">*</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"State_parts\">State parts</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=5\" title=\"Edit section:\
      \ State parts\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">STATEDECL                <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> STATEPARAMS <span class=\"br0\"\
      >)</span><span class=\"sy0\">*</span> <span class=\"kw1\">state</span> IDENTIFIER\
      \ <span class=\"br0\">(</span> CONFIGGROUP <span class=\"br0\">)</span>? <span\
      \ class=\"br0\">(</span> <span class=\"kw1\">extends</span> IDENTIFIER <span\
      \ class=\"br0\">)</span>? STATEBODY\nSTATEBODY                <span class=\"\
      sy0\">=</span> LCBRACK <span class=\"br0\">(</span> STATEIGNORE <span class=\"\
      br0\">)</span>? <span class=\"br0\">(</span> FUNCTIONDECL <span class=\"br0\"\
      >)</span><span class=\"sy0\">*</span> STATELABELS RCBRACK\nSTATEIGNORE     \
      \         <span class=\"sy0\">=</span> <span class=\"kw1\">ignores</span> IDENTIFIER\
      \ <span class=\"br0\">(</span> COMMA IDENTIFIER <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> SEMICOLON\nSTATELABELS              <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> IDENTIFIER COLON <span class=\"\
      br0\">(</span> CODELINE <span class=\"br0\">)</span><span class=\"sy0\">*</span>\
      \ <span class=\"br0\">)</span><span class=\"sy0\">*</span></pre></div>\n</div>\n\
      <h4><span class=\"mw-headline\" id=\"Function_parts\">Function parts</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=6\" title=\"Edit section:\
      \ Function parts\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">                           <span class=\"\
      co1\">// operators require an set amouth of arguments</span>\nFUNCTIONDECL \
      \            <span class=\"sy0\">=</span> <span class=\"br0\">(</span> NORMALFUNC\
      \ <span class=\"sy0\">|</span> OPERATORFUNC <span class=\"br0\">)</span>\n \n\
      NORMALFUNC               <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\
      \ FUNCTIONPARAMS <span class=\"br0\">)</span><span class=\"sy0\">*</span> FUNCTIONTYPE\
      \ <span class=\"br0\">(</span> LOCALTYPE <span class=\"br0\">)</span>? \n  \
      \                         IDENTIFIER LBRACK <span class=\"br0\">(</span> FUNCTIONARGS\
      \ <span class=\"br0\">(</span> COMMA FUNCTIONARGS <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> <span class=\"br0\">)</span>? RBRACK \n           \
      \                FUNCTIONBODY\n \nFUNCTIONPARAMS           <span class=\"sy0\"\
      >=</span> CONSTFUNCPARAMS <span class=\"sy0\">|</span> <span class=\"kw1\">native</span>\
      \ <span class=\"br0\">(</span> LBRACK INTVAL RBRACK <span class=\"br0\">)</span>?\n\
      \ \nOPERATORFUNC             <span class=\"sy0\">=</span> <span class=\"br0\"\
      >(</span> FUNCTIONPARAMS <span class=\"br0\">)</span><span class=\"sy0\">*</span>\
      \ OPERATORTYPE FUNCTIONBODY\nOPERATORTYPE             <span class=\"sy0\">=</span>\
      \ <span class=\"br0\">(</span> BINARYOPERATOR <span class=\"sy0\">|</span> UNARYOPERATOR\
      \ <span class=\"br0\">)</span>\n                           <span class=\"co1\"\
      >// requires two arguments</span>\nBINARYOPERATOR           <span class=\"sy0\"\
      >=</span> <span class=\"kw1\">operator</span> LBRACK INTVAL RBRACK PACKAGEIDENTIFIER\
      \ OPIDENTIFIER \n                           LBRACK FUNCTIONARGS COMMA FUNCTIONARGS\
      \ RBRACK  \n                           <span class=\"co1\">// requires one argument</span>\n\
      UNARYOPERATOR            <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw1\">preoperator</span> <span class=\"sy0\">|</span> postoperator\
      \ <span class=\"br0\">)</span> PACKAGEIDENTIFIER OPIDENTIFIER \n           \
      \                LBRACK FUNCTIONARGS RBRACK  \nOPIDENTIFIER             <span\
      \ class=\"sy0\">=</span> IDENTIFIER <span class=\"sy0\">|</span> OPERATORNAMES\n\
      \ \nFUNCTIONARGS             <span class=\"sy0\">=</span> <span class=\"br0\"\
      >(</span> <span class=\"kw1\">optional</span> <span class=\"sy0\">|</span> <span\
      \ class=\"kw1\">out</span> <span class=\"sy0\">|</span> <span class=\"kw1\"\
      >coerce</span> <span class=\"br0\">)</span>? FUNCTIONARGTYPE IDENTIFIER\nFUNCTIONARGTYPE\
      \          <span class=\"sy0\">=</span> BASICTYPE <span class=\"sy0\">|</span>\
      \ PACKAGEIDENTIFIER\nFUNCTIONBODY             <span class=\"sy0\">=</span> <span\
      \ class=\"br0\">(</span> SEMICOLON <span class=\"sy0\">|</span> <span class=\"\
      br0\">(</span> <span class=\"br0\">(</span> LOCALDECL <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> <span class=\"br0\">(</span> CODELINE <span class=\"\
      br0\">)</span><span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span\
      \ class=\"br0\">(</span> SEMICOLON <span class=\"br0\">)</span>? <span class=\"\
      br0\">)</span>\nLOCALDECL                <span class=\"sy0\">=</span> <span\
      \ class=\"kw1\">local</span> LOCALTYPE IDENTIFIER <span class=\"br0\">(</span>\
      \ COMMA IDENTIFIER <span class=\"br0\">)</span><span class=\"sy0\">*</span>\n\
      LOCALTYPE                <span class=\"sy0\">=</span> PACKAGEIDENTIFIER <span\
      \ class=\"sy0\">|</span> ARRAYDECL <span class=\"sy0\">|</span> CLASSTYPE <span\
      \ class=\"sy0\">|</span> BASICTYPE</pre></div>\n</div>\n<h4><span class=\"mw-headline\"\
      \ id=\"Code_parts\">Code parts</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=7\"\
      \ title=\"Edit section: Code parts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">CODELINE     \
      \            <span class=\"sy0\">=</span> <span class=\"br0\">(</span> STATEMENT\
      \ <span class=\"sy0\">|</span> ASSIGNMENT <span class=\"sy0\">|</span> IFTHENELSE\
      \ <span class=\"sy0\">|</span> WHILELOOP <span class=\"sy0\">|</span> DOLOOP\
      \ \n                           <span class=\"sy0\">|</span> SWITCHCASE <span\
      \ class=\"sy0\">|</span> RETURNFUNC <span class=\"sy0\">|</span> FOREACHLOOP\
      \ <span class=\"sy0\">|</span> FORLOOP <span class=\"br0\">)</span>\nCODEBLOCK\
      \                <span class=\"sy0\">=</span> <span class=\"br0\">(</span> CODELINE\
      \ <span class=\"sy0\">|</span> <span class=\"br0\">(</span> LCBRACK <span class=\"\
      br0\">(</span> CODELINE <span class=\"br0\">)</span><span class=\"sy0\">*</span>\
      \ RCBRACK <span class=\"br0\">)</span> <span class=\"br0\">)</span>\n \nSTATEMENT\
      \                <span class=\"sy0\">=</span> FUNCCALL SEMICOLON\nASSIGNMENT\
      \               <span class=\"sy0\">=</span> IDENTIFIER EQUALS EXPR SEMICOLON\n\
      IFTHENELSE               <span class=\"sy0\">=</span> <span class=\"kw2\">if</span>\
      \ LBRACK EXPR RBRACK CODEBLOCK <span class=\"br0\">(</span> <span class=\"kw2\"\
      >else</span> CODEBLOCK <span class=\"br0\">)</span>?\nWHILELOOP            \
      \    <span class=\"sy0\">=</span> <span class=\"kw2\">while</span> LBRACK EXPR\
      \ RBRACK CODEBLOCK\nDOLOOP                   <span class=\"sy0\">=</span> <span\
      \ class=\"kw2\">do</span> CODEBLOCK until LBRACK EXPR RBRACK\n \nSWITCHCASE\
      \               <span class=\"sy0\">=</span> <span class=\"kw2\">switch</span>\
      \ LBRACK EXPR RBRACK LCBRACK <span class=\"br0\">(</span> CASERULE <span class=\"\
      br0\">)</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span> DEFAULTRULE\
      \ <span class=\"br0\">)</span>? RCBRACK\nCASERULE                 <span class=\"\
      sy0\">=</span> <span class=\"kw2\">case</span> INTVAL COLON CODEBLOCK\nDEFAULTRULE\
      \              <span class=\"sy0\">=</span> <span class=\"kw1\">default</span>\
      \ CODEBLOCK\n \nRETURNFUNC               <span class=\"sy0\">=</span> <span\
      \ class=\"kw2\">return</span> <span class=\"br0\">(</span> EXPR <span class=\"\
      br0\">)</span>? SEMICOLON\nFOREACHLOOP              <span class=\"sy0\">=</span>\
      \ <span class=\"kw2\">foreach</span> FUNCCALL CODEBLOCK\nFORLOOP           \
      \       <span class=\"sy0\">=</span> <span class=\"kw2\">for</span> LBRACK ASSIGNMENT\
      \ SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK\n \nEXPR                  \
      \   <span class=\"sy0\">=</span> OPERAND <span class=\"br0\">(</span> OPIDENTIFIER\
      \ OPERAND <span class=\"br0\">)</span><span class=\"sy0\">*</span>\nOPERAND\
      \                  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\
      \ CONSTVALUE <span class=\"sy0\">|</span> QUALIFIEDIDENTIFIER <span class=\"\
      sy0\">|</span> FUNCCALL <span class=\"br0\">)</span>\nFUNCCALL             \
      \    <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"\
      br0\">(</span> <span class=\"kw1\">class</span> SQUOTE PACKAGEIDENTIFIER SQUOTE\
      \ DOT <span class=\"kw1\">static</span> DOT <span class=\"br0\">)</span> \n\
      \                           <span class=\"sy0\">|</span> <span class=\"br0\"\
      >(</span> <span class=\"br0\">(</span> IDENTIFIER DOT <span class=\"br0\">)</span><span\
      \ class=\"sy0\">+</span> <span class=\"br0\">)</span>\n                    \
      \       <span class=\"br0\">)</span>? \n                           IDENTIFIER\
      \ LBRACK <span class=\"br0\">(</span> EXPR <span class=\"br0\">(</span> COMMA\
      \ EXPR <span class=\"br0\">)</span><span class=\"sy0\">*</span> <span class=\"\
      br0\">)</span>? RBRACK</pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Defaultproperties\">Defaultproperties</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=8\"\
      \ title=\"Edit section: Defaultproperties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">DEFAULTPROPERTIESBLOCK\
      \   <span class=\"sy0\">=</span> <span class=\"kw1\">defaultproperties</span>\
      \ LCBRACK <span class=\"br0\">(</span> DEFPROP <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> RCBRACK\nDEFPROP                  <span class=\"sy0\"\
      >=</span> DEFPROPIDENTIFIER EQUALS PRINTABLE\nDEFPROPIDENTIFIER        <span\
      \ class=\"sy0\">=</span> IDENTIFIER <span class=\"br0\">(</span> <span class=\"\
      br0\">(</span> LBRACK INTVAL RBRACK <span class=\"br0\">)</span> <span class=\"\
      sy0\">|</span> <span class=\"br0\">(</span> LSBRACK INTVAL RSBRACK <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>?</pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Terminals\">Terminals</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=9\"\
      \ title=\"Edit section: Terminals\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">PRINTABLE    \
      \            <span class=\"sy0\">=</span> all printable characters\nALPHA  \
      \                  <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span>\
      \ .. <span class=\"st0\">'z'</span>\nDIGIT                    <span class=\"\
      sy0\">=</span> <span class=\"st0\">'0'</span> .. <span class=\"st0\">'9'</span>\n\
      HEXDIGIT                 <span class=\"sy0\">=</span> DIGIT <span class=\"sy0\"\
      >|</span> <span class=\"st0\">'a'</span> .. <span class=\"st0\">'f'</span>\n\
      SEMICOLON                <span class=\"sy0\">=</span> <span class=\"st0\">';'</span>\n\
      COLON                    <span class=\"sy0\">=</span> <span class=\"st0\">':'</span>\n\
      UNDERSCORE               <span class=\"sy0\">=</span> <span class=\"st0\">'_'</span>\n\
      LBRACK                   <span class=\"sy0\">=</span> <span class=\"st0\">'('</span>\n\
      RBRACK                   <span class=\"sy0\">=</span> <span class=\"st0\">')'</span>\n\
      LABRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">'&lt;'</span>\n\
      RABRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">'&gt;'</span>\n\
      LCBRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">'{'</span>\n\
      RCBRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">'}'</span>\n\
      LSBRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">'['</span>\n\
      RSBRACK                  <span class=\"sy0\">=</span> <span class=\"st0\">']'</span>\n\
      DOT                      <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span>\n\
      COMMA                    <span class=\"sy0\">=</span> <span class=\"st0\">','</span>\n\
      SQUOTE                   <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span\
      \ class=\"st0\">'\nDQUOTE                   = '</span><span class=\"st0\">\"\
      '\nEQUALS                   = '='\n \nCONSTCLASSPARAMS         = abstract |\
      \ native | nativereplication | safereplace |\n                           perobjectconfig\
      \ | transient | noexport | exportstructs |\n                           // available\
      \ but obsolete:\n                           guid(INTVAL,INTVAL,INTVAL,INTVAL)\n\
      \                           // available from warfare and up:\n            \
      \               collapsecategories | dontcollapsecategories | placeable |\n\
      \                           notplaceable | editinlinenew | noteditinlinenew\n\
      BOOLVAL                  = true | false\nVARPARAMS                = config |\
      \ const | editconst | export | globalconfig | input |\n                    \
      \       localized | native | private | protected | transient | travel |\n  \
      \                         // available from warfare and up:\n              \
      \             editinline | deprecated | edfindable | editinlineuse\nSTATEPARAMS\
      \              = auto | simulated\nCONSTFUNCPARAMS          = final | iterator\
      \ | latent | simulated | singular | static |\n                           exec\
      \ | protected | private \nBASICTYPE                = byte | int | float | string\
      \ | bool | name | class\nFUNCTIONTYPE             = function | event | delegate\n\
      OPERATORNAMES            = '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&amp;'\
      \ | '*' | \n                           '-' | '=' | '+' | '|' | '<span class=\"\
      es0\">\\'</span> | ':' | '&lt;' | '&gt;' | '/' |\n                         \
      \  '?' | '`' |\n                           '&lt;&lt;' | '&gt;&gt;' | '!=' |\
      \ '&lt;=' | '&gt;=' | '++' | '--' | '?-' | '+=' | \n                       \
      \    '-=' | '*=' | '/=' | '&amp;&amp;' | '||' | '^^' | '==' | '**' |\n     \
      \                      '~=' | '@=' | '&gt;&gt;&gt;'</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Notes\">Notes</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=10\"\
      \ title=\"Edit section: Notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Case\">Case</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=11\" title=\"Edit section:\
      \ Case\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>UnrealScript is case insensitive, so all terminals may be written in any\
      \ case format. Because of this the uppercase variants for ALPHA and HEXDIGIT\
      \ are omitted.</p>\n<h3><span class=\"mw-headline\" id=\"Unreal_Engine\">Unreal\
      \ Engine</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Grammar?section=12\" title=\"Edit\
      \ section: Unreal Engine\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This grammar applies to the UnrealEngine 2. Older versions of the Unreal\
      \ engine have a few differences. Here's a list of changes to this grammar to\
      \ be applied for older versions.</p>\n<ul>\n<li><i>extends</i> can be replaced\
      \ with <i>expands</i></li>\n<li>The ARRAYDECL rule does not apply</li>\n<li>in\
      \ the CLASSPARAMS rule the following do not apply:\n<ul>\n<li><i>within PACKAGEIDENTIFIER</i></li>\n\
      <li><i>dependson LBRACK PACKAGEIDENTIFIER RBRACK</i></li>\n<li><i>hidecategories\
      \ LBRACK IDENTIFIERLIST RBRACK</i></li>\n<li><i>showcategories LBRACK IDENTIFIERLIST\
      \ RBRACK</i></li>\n</ul>\n</li>\n<li>In CONSTCLASSPARAMS <i>nousercreate</i>\
      \ is allowed to replace notplaceable</li>\n<li>STRUCTPARAMS does not apply</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=13\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\">Class\
      \ Syntax</a></li>\n<li><a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">Function Syntax</a></li>\n<li><a href=\"/Legacy:Variable_Syntax\"\
      \ title=\"Legacy:Variable Syntax\">Variable Syntax</a></li>\n<li><a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm\"\
      >http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm</a></li>\n<li><a href=\"/Legacy:UnrealScript_Language_Test\"\
      \ title=\"Legacy:UnrealScript Language Test\">UnrealScript Language Test</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Grammar?section=14\" title=\"Edit section:\
      \ Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>El Muerte TDS:</b> As suggested in <a href=\"/Legacy:UnDox_Revisited\"\
      \ title=\"Legacy:UnDox Revisited\">UnDox Revisited</a> , so hell why not&#160;:)</p>\n\
      <p><b>Tarquin:</b> Nice&#160;:)</p>\n<p><b>Jerome-X</b> This can be very useful\
      \ for the parser in the UCEditor plugin. Thanks&#160;:)</p>\n<p><b>El Muerte\
      \ TDS:</b> The only <i>open</i> things are the class, var and function params,\
      \ for the rest is should be done. So if anyone could verify the stuff I wrote\
      \ down, I might have missed some things.</p>\n<p><b>El Muerte TDS:</b> done,\
      \ no more open rules</p>\n<p><b>CaptainNuss:</b> Greetings, just added the local\
      \ keyword for variable declarations. Btw, why aren't the basic built-in variable\
      \ types listed in this specification?</p>\n<p><b>Mychaeel:</b> \"local\" is\
      \ covered by LOCALDECL already. In VARDECL it's a bug.</p>\n<p><b>CaptainNuss:</b>\
      \ Oops, I'm sorry. Didn't see that.&#160;:(</p>\n<p><b>El Muerte TDS:</b> you're\
      \ right about the basic types, added them now, also the function return type\
      \ was incorrect (functions can also return arrays, etc..)</p>\n<p>The reson\
      \ why <b>var</b> and <b>local</b> are diffirent is because inline enum and struct\
      \ definitions are not allowed in <b>local</b> but are in <b>var</b>.</p>\n<p><b>Wormbo:</b>\
      \ Is there a (free) program that can check a source code file against an EBNF\
      \ definition?</p>\n<p><b>El Muerte TDS:</b> not that I know of. But there are\
      \ programs that create a parser from a EBNF definition (needs some chaning tho):\
      \ <a rel=\"nofollow\" class=\"external free\" href=\"http://catalog.compilertools.net/lexparse.html\"\
      >http://catalog.compilertools.net/lexparse.html</a> and one not in that list\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://www.antlr.org\"\
      >ANTLR</a></p>\n<p><b>Tarquin:</b> I've changed:</p>\n<pre>CONFIGGROUP     \
      \         = LBRACK IDENTIFIER RBRACK\n</pre>\n<p>as the actual IDENTIFIER is\
      \ optional, right?</p>\n<p><b>El Muerte:</b> uh, yeah. there are a few other\
      \ things that might also be changed, I've come across a couple of \"hacks\"\
      \ that are apperently legal too&#160;:( Not to speak of the things Unreal2 allows.\
      \ Also there are a couple of new UT2004 keywords missing.</p>\n<p><b>Iainmcgin:</b>\
      \ i changed FUNCTIONARGS so that the type of the parameter can include the basic\
      \ types (int, float etc). I'm working on a SableCC grammar file for UnrealScript\
      \ at the moment, so I'll note down other errors in this EBNF as i find them.</p>\n\
      <p><b>sprfreak14:</b> Should comments be included in this EBNF?<br />\nProposal:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">COMMENT                    <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span> SINGLELINECOMMENT <span class=\"\
      sy0\">|</span> DELIMITEDCOMMENT <span class=\"br0\">)</span>\nSINGLELINECOMMENT\
      \          <span class=\"sy0\">=</span> <span class=\"st0\">'//'</span> <span\
      \ class=\"br0\">(</span> NOTNEWLINE <span class=\"br0\">)</span><span class=\"\
      sy0\">*</span>\nNOTNEWLINE                 <span class=\"sy0\">=</span> Any\
      \ character except a <span class=\"kw1\">new</span> line character\nDELIMITEDCOMMENT\
      \           <span class=\"sy0\">=</span> <span class=\"st0\">'/*'</span> <span\
      \ class=\"br0\">(</span> DELIMITEDCOMMENTCHARACTERS <span class=\"br0\">)</span><span\
      \ class=\"sy0\">*</span> <span class=\"st0\">'*/'</span>\nDELIMITEDCOMMENTCHARACTERS\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span> NOTASTERISK <span\
      \ class=\"sy0\">|</span> <span class=\"st0\">'*'</span> NOTSLASH <span class=\"\
      br0\">)</span>\nNOTASTERISK                <span class=\"sy0\">=</span> Any\
      \ character except <span class=\"st0\">'*'</span>\nNOTSLASH                \
      \   <span class=\"sy0\">=</span> Any character except <span class=\"st0\">'/'</span></pre></div>\n\
      </div>\n<p><b>Sweavo:</b> the usual way (i.e. the way I would do it writing\
      \ a C parser) to deal with comments is at the <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://en.wikipedia.org/wiki/Lexer\">Lexing stage</a>, i.e.\
      \ there is a stage before parsing that recognizes tokens. Comments are reduced\
      \ to whitespace at that stage. While the comment stuff above looks OK at a glance,\
      \ the problem is that you then have to put <tt>COMMENT</tt> all over the place\
      \ in the grammar to reflect all the valid places for a comment. Pretty much\
      \ destroys the usefulness of the grammar. But I agree, if this is to be useful\
      \ to people writing syntax highlighters, comments should be addressed.</p>\n\
      <p><b>sprfreak14:</b> Is <tt>DOT default DOT IDENTIFIER</tt> in <tt>QUALIFIEDIDENTIFIER</tt>\
      \ optional?</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.188 seconds\n\
      Real time usage: 0.191 seconds\nPreprocessor visited node count: 140/1000000\n\
      Preprocessor generated node count: 262/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3441-0!*!0!!en!*!*\
      \ and timestamp 20221118014230 and revision id 8854\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Test"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnDox Revisited"
  templates: []
  images: []
  externallinks:
  - "http://en.wikipedia.org/wiki/Lexer"
  - "http://catalog.compilertools.net/lexparse.html"
  - "http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm"
  - "http://www.antlr.org"
  sections:
  - toclevel: 1
    level: "2"
    line: "Non-Terminals"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 982
    anchor: "Non-Terminals"
  - toclevel: 2
    level: "3"
    line: "Declaration parts"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 2403
    anchor: "Declaration_parts"
  - toclevel: 2
    level: "3"
    line: "Replication parts"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 3606
    anchor: "Replication_parts"
  - toclevel: 2
    level: "3"
    line: "Body parts"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 3876
    anchor: "Body_parts"
  - toclevel: 3
    level: "4"
    line: "State parts"
    number: "1.3.1"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 3974
    anchor: "State_parts"
  - toclevel: 3
    level: "4"
    line: "Function parts"
    number: "1.3.2"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 4361
    anchor: "Function_parts"
  - toclevel: 3
    level: "4"
    line: "Code parts"
    number: "1.3.3"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 5825
    anchor: "Code_parts"
  - toclevel: 2
    level: "3"
    line: "Defaultproperties"
    number: "1.4"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 7216
    anchor: "Defaultproperties"
  - toclevel: 1
    level: "2"
    line: "Terminals"
    number: "2"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 7497
    anchor: "Terminals"
  - toclevel: 1
    level: "2"
    line: "Notes"
    number: "3"
    index: "10"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 9808
    anchor: "Notes"
  - toclevel: 2
    level: "3"
    line: "Case"
    number: "3.1"
    index: "11"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 9820
    anchor: "Case"
  - toclevel: 2
    level: "3"
    line: "Unreal Engine"
    number: "3.2"
    index: "12"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 9995
    anchor: "Unreal_Engine"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "13"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 10621
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "14"
    fromtitle: "Legacy:UnrealScript_Grammar"
    byteoffset: 10886
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript Grammar"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/EBNF"
    name: "wikipedia:EBNF"
  wikitext:
    text: "This is a [[Wikipedia:EBNF]] Specification of the [[Legacy:UnrealScript|UnrealScript]]\
      \ grammar.\n\nIt can be useful if you are going to write a parser for the UnrealScript\
      \ language.\n\n'''Note:''' this is not the official specification, it's made\
      \ by visitors of the UnrealWiki.\n\n'''''Important note:''''' the stock UnrealScript\
      \ compiler doesn't follow strict rules as usually specified by a grammar like\
      \ this. It is very well possible that the compiler accepts constructions not\
      \ documented here. See [[Legacy:UnrealScript Language Test|UnrealScript Language\
      \ Test]] for actual examples of various constructions.\n\n'''Edit guidelines:'''\n\
      * all non-terminals should have all uppercase characters. Keep everything aligned.\
      \ If you leave things ''open'' use '...' to make that clear. \n* Always use\
      \ as much brackets as needed, don't optimize because this can result in confusion.\n\
      * Terminals that are words can be used directly in the production rules, otherwise\
      \ you must use a terminal rule.\n\n==Non-Terminals ==\n\n<uscript>\nPROGRAM\
      \                  = CLASSDECL \n                           ( DECLARATIONS )*\n\
      \                           ( REPLICATIONBLOCK )? \n                       \
      \    BODY \n                           ( DEFAULTPROPERTIESBLOCK )?\n\nCLASSDECL\
      \                = class IDENTIFIER ( extends PACKAGEIDENTIFIER )? \n      \
      \                     ( CLASSPARAMS )* SEMICOLON\n\nCLASSPARAMS            \
      \  = CONSTCLASSPARAMS | within PACKAGEIDENTIFIER | \n                      \
      \     dependson LBRACK PACKAGEIDENTIFIER RBRACK |\n                        \
      \   config ( LBRACK PACKAGEIDENTIFIER RBRACK )? |\n                        \
      \   hidecategories LBRACK IDENTIFIERLIST RBRACK |\n                        \
      \   showcategories LBRACK IDENTIFIERLIST RBRACK                           \n\
      \nIDENTIFIER               = ( ALPHA | UNDERSCORE ) ( ALPHA | UNDERSCORE | DIGIT\
      \ )*\n                           // packagename.classname or classname.structname\n\
      PACKAGEIDENTIFIER        = ( IDENTIFIER DOT )? IDENTIFIER\nQUALIFIEDIDENTIFIER\
      \      = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT default DOT IDENTIFIER\
      \ )\n                           | ( ( IDENTIFIER DOT )* IDENTIFIER ) \n    \
      \                       )\nIDENTIFIERLIST           = IDENTIFIER ( COMMA IDENTIFIER\
      \ )*\n\nSTRINGVAL                = DQUOTE PRINTABLE DQUOTE\nINTVAL         \
      \          = ( DIGIT+ | ( '0x' ( HEXDIGIT )+ ) )\nFLOATVAL                 =\
      \ ( DIGIT )+ DOT ( DIGIT )*\n</uscript>\n\n===Declaration parts ===\n\n<uscript>\n\
      DECLARATIONS             = ( CONSTDECL | VARDECL | ENUMDECL | STRUCTDECL ) SEMICOLON\n\
      \nCONSTDECL                = const IDENTIFIER = CONSTVALUE\nCONSTVALUE     \
      \          = ( STRINGVAL | INTVAL | FLOATVAL | BOOLVAL )\n\nVARDECL        \
      \          = var ( CONFIGGROUP )? ( VARPARAMS )* \n                        \
      \   VARTYPE VARIDENTIFIER ( COMMA VARIDENTIFIER )*\nCONFIGGROUP            \
      \  = LBRACK ( IDENTIFIER )? RBRACK\nVARTYPE                  = PACKAGEIDENTIFIER\
      \ | ENUMDECL | STRUCTDECL | ARRAYDECL | CLASSTYPE | BASICTYPE\nVARIDENTIFIER\
      \            = IDENTIFIER\n\nARRAYDECL                = IDENTIFIER LSBRACK INTVAL\
      \ RSBRACK\nDYNARRAYDECL             = array LABRACK (PACKAGEIDENTIFIER | CLASSTYPE\
      \ | BASICTYPE) RABRACK\nCLASSTYPE                = class LABRACK PACKAGEIDENTIFIER\
      \ RABRACK\n\nENUMDECL                 = enum IDENTIFIER LCBRACK ENUMOPTIONS\
      \ RCBRACK\nENUMOPTIONS              = IDENTIFIER ( COMMA IDENTIFIER )*\n\nSTRUCTDECL\
      \               = struct ( STRUCTPARAMS )* IDENTIFIER ( extends PACKAGEIDENTIFIER\
      \ )? \n                           LCBRACK STRUCTBODY RCBRACK\nSTRUCTPARAMS \
      \            = ( native | export )\nSTRUCTBODY               = ( VARDECL SEMICOLON\
      \ )+\n\n</uscript>\n\n===Replication parts ===\n\n<uscript>\nREPLICATIONBLOCK\
      \         = replication LCBRACK ( REPLICATIONBODY )* RCBRACK\nREPLICATIONBODY\
      \          = ( reliable | unreliable ) if LBRACK EXPR RBRACK \n            \
      \               IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON\n</uscript>\n\n===Body\
      \ parts ===\n\n<uscript>\nBODY                     = ( STATEDECL | FUNCTIONDECL\
      \ )*\n</uscript>\n\n====State parts ====\n\n<uscript>\nSTATEDECL           \
      \     = ( STATEPARAMS )* state IDENTIFIER ( CONFIGGROUP )? ( extends IDENTIFIER\
      \ )? STATEBODY\nSTATEBODY                = LCBRACK ( STATEIGNORE )? ( FUNCTIONDECL\
      \ )* STATELABELS RCBRACK\nSTATEIGNORE              = ignores IDENTIFIER ( COMMA\
      \ IDENTIFIER )* SEMICOLON\nSTATELABELS              = ( IDENTIFIER COLON ( CODELINE\
      \ )* )*\n</uscript>\n\n====Function parts ====\n\n<uscript>\n              \
      \             // operators require an set amouth of arguments\nFUNCTIONDECL\
      \             = ( NORMALFUNC | OPERATORFUNC )\n\nNORMALFUNC               =\
      \ ( FUNCTIONPARAMS )* FUNCTIONTYPE ( LOCALTYPE )? \n                       \
      \    IDENTIFIER LBRACK ( FUNCTIONARGS ( COMMA FUNCTIONARGS )* )? RBRACK \n \
      \                          FUNCTIONBODY\n\nFUNCTIONPARAMS           = CONSTFUNCPARAMS\
      \ | native ( LBRACK INTVAL RBRACK )?\n\nOPERATORFUNC             = ( FUNCTIONPARAMS\
      \ )* OPERATORTYPE FUNCTIONBODY\nOPERATORTYPE             = ( BINARYOPERATOR\
      \ | UNARYOPERATOR )\n                           // requires two arguments\n\
      BINARYOPERATOR           = operator LBRACK INTVAL RBRACK PACKAGEIDENTIFIER OPIDENTIFIER\
      \ \n                           LBRACK FUNCTIONARGS COMMA FUNCTIONARGS RBRACK\
      \  \n                           // requires one argument\nUNARYOPERATOR    \
      \        = ( preoperator | postoperator ) PACKAGEIDENTIFIER OPIDENTIFIER \n\
      \                           LBRACK FUNCTIONARGS RBRACK  \nOPIDENTIFIER     \
      \        = IDENTIFIER | OPERATORNAMES\n\nFUNCTIONARGS             = ( optional\
      \ | out | coerce )? FUNCTIONARGTYPE IDENTIFIER\nFUNCTIONARGTYPE          = BASICTYPE\
      \ | PACKAGEIDENTIFIER\nFUNCTIONBODY             = ( SEMICOLON | ( ( LOCALDECL\
      \ )* ( CODELINE )* ) ( SEMICOLON )? )\nLOCALDECL                = local LOCALTYPE\
      \ IDENTIFIER ( COMMA IDENTIFIER )*\nLOCALTYPE                = PACKAGEIDENTIFIER\
      \ | ARRAYDECL | CLASSTYPE | BASICTYPE\n</uscript>\n\n====Code parts ====\n\n\
      <uscript>\nCODELINE                 = ( STATEMENT | ASSIGNMENT | IFTHENELSE\
      \ | WHILELOOP | DOLOOP \n                           | SWITCHCASE | RETURNFUNC\
      \ | FOREACHLOOP | FORLOOP )\nCODEBLOCK                = ( CODELINE | ( LCBRACK\
      \ ( CODELINE )* RCBRACK ) )\n\nSTATEMENT                = FUNCCALL SEMICOLON\n\
      ASSIGNMENT               = IDENTIFIER EQUALS EXPR SEMICOLON\nIFTHENELSE    \
      \           = if LBRACK EXPR RBRACK CODEBLOCK ( else CODEBLOCK )?\nWHILELOOP\
      \                = while LBRACK EXPR RBRACK CODEBLOCK\nDOLOOP              \
      \     = do CODEBLOCK until LBRACK EXPR RBRACK\n\nSWITCHCASE               =\
      \ switch LBRACK EXPR RBRACK LCBRACK ( CASERULE )+ ( DEFAULTRULE )? RCBRACK\n\
      CASERULE                 = case INTVAL COLON CODEBLOCK\nDEFAULTRULE        \
      \      = default CODEBLOCK\n\nRETURNFUNC               = return ( EXPR )? SEMICOLON\n\
      FOREACHLOOP              = foreach FUNCCALL CODEBLOCK\nFORLOOP             \
      \     = for LBRACK ASSIGNMENT SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK\n\
      \nEXPR                     = OPERAND ( OPIDENTIFIER OPERAND )*\nOPERAND    \
      \              = ( CONSTVALUE | QUALIFIEDIDENTIFIER | FUNCCALL )\nFUNCCALL \
      \                = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT static DOT\
      \ ) \n                           | ( ( IDENTIFIER DOT )+ )\n               \
      \            )? \n                           IDENTIFIER LBRACK ( EXPR ( COMMA\
      \ EXPR )* )? RBRACK\n\n</uscript>\n\n===Defaultproperties ===\n\n<uscript>\n\
      DEFAULTPROPERTIESBLOCK   = defaultproperties LCBRACK ( DEFPROP )* RCBRACK\n\
      DEFPROP                  = DEFPROPIDENTIFIER EQUALS PRINTABLE\nDEFPROPIDENTIFIER\
      \        = IDENTIFIER ( ( LBRACK INTVAL RBRACK ) | ( LSBRACK INTVAL RSBRACK\
      \ ) )?\n</uscript>\n\n==Terminals ==\n\n<uscript>\nPRINTABLE               \
      \ = all printable characters\nALPHA                    = 'a' .. 'z'\nDIGIT \
      \                   = '0' .. '9'\nHEXDIGIT                 = DIGIT | 'a' ..\
      \ 'f'\nSEMICOLON                = ';'\nCOLON                    = ':'\nUNDERSCORE\
      \               = '_'\nLBRACK                   = '('\nRBRACK              \
      \     = ')'\nLABRACK                  = '<'\nRABRACK                  = '>'\n\
      LCBRACK                  = '{'\nRCBRACK                  = '}'\nLSBRACK    \
      \              = '['\nRSBRACK                  = ']'\nDOT                  \
      \    = '.'\nCOMMA                    = ','\nSQUOTE                   = '''\n\
      DQUOTE                   = '\"'\nEQUALS                   = '='\n\nCONSTCLASSPARAMS\
      \         = abstract | native | nativereplication | safereplace |\n        \
      \                   perobjectconfig | transient | noexport | exportstructs |\n\
      \                           // available but obsolete:\n                   \
      \        guid(INTVAL,INTVAL,INTVAL,INTVAL)\n                           // available\
      \ from warfare and up:\n                           collapsecategories | dontcollapsecategories\
      \ | placeable |\n                           notplaceable | editinlinenew | noteditinlinenew\n\
      BOOLVAL                  = true | false\nVARPARAMS                = config |\
      \ const | editconst | export | globalconfig | input |\n                    \
      \       localized | native | private | protected | transient | travel |\n  \
      \                         // available from warfare and up:\n              \
      \             editinline | deprecated | edfindable | editinlineuse\nSTATEPARAMS\
      \              = auto | simulated\nCONSTFUNCPARAMS          = final | iterator\
      \ | latent | simulated | singular | static |\n                           exec\
      \ | protected | private \nBASICTYPE                = byte | int | float | string\
      \ | bool | name | class\nFUNCTIONTYPE             = function | event | delegate\n\
      OPERATORNAMES            = '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*'\
      \ | \n                           '-' | '=' | '+' | '|' | '\\' | ':' | '<' |\
      \ '>' | '/' |\n                           '?' | '`' |\n                    \
      \       '<<' | '>>' | '!=' | '<=' | '>=' | '++' | '--' | '?-' | '+=' | \n  \
      \                         '-=' | '*=' | '/=' | '&&' | '||' | '^^' | '==' | '**'\
      \ |\n                           '~=' | '@=' | '>>>'\n</uscript>\n\n==Notes ==\n\
      \n===Case ===\n\nUnrealScript is case insensitive, so all terminals may be written\
      \ in any case format. Because of this the uppercase variants for ALPHA and HEXDIGIT\
      \ are omitted.\n\n===Unreal Engine ===\n\nThis grammar applies to the UnrealEngine\
      \ 2. Older versions of the Unreal engine have a few differences. Here's a list\
      \ of changes to this grammar to be applied for older versions.\n* ''extends''\
      \ can be replaced with ''expands''\n* The ARRAYDECL rule does not apply\n* in\
      \ the CLASSPARAMS rule the following do not apply:\n** ''within PACKAGEIDENTIFIER''\n\
      ** ''dependson LBRACK PACKAGEIDENTIFIER RBRACK''\n** ''hidecategories LBRACK\
      \ IDENTIFIERLIST RBRACK''\n** ''showcategories LBRACK IDENTIFIERLIST RBRACK''\n\
      * In CONSTCLASSPARAMS ''nousercreate'' is allowed to replace notplaceable\n\
      * STRUCTPARAMS does not apply\n\n==Related Topics ==\n* [[Legacy:Class Syntax|Class\
      \ Syntax]]\n* [[Legacy:Function Syntax|Function Syntax]]\n* [[Legacy:Variable\
      \ Syntax|Variable Syntax]]\n* http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm\n\
      * [[Legacy:UnrealScript Language Test|UnrealScript Language Test]]\n\n==Discussion\
      \ ==\n\n'''El Muerte TDS:''' As suggested in [[Legacy:UnDox Revisited|UnDox\
      \ Revisited]] , so hell why not :)\n\n'''Tarquin:''' Nice :)\n\n'''Jerome-X'''\
      \ This can be very useful for the parser in the UCEditor plugin. Thanks :)\n\
      \n'''El Muerte TDS:''' The only ''open'' things are the class, var and function\
      \ params, for the rest is should be done. So if anyone could verify the stuff\
      \ I wrote down, I might have missed some things.\n\n'''El Muerte TDS:''' done,\
      \ no more open rules\n\n'''CaptainNuss:''' Greetings, just added the local keyword\
      \ for variable declarations. Btw, why aren't the basic built-in variable types\
      \ listed in this specification?\n\n'''Mychaeel:''' \"local\" is covered by LOCALDECL\
      \ already.  In VARDECL it's a bug.\n\n'''CaptainNuss:''' Oops, I'm sorry. Didn't\
      \ see that. :(\n\n'''El Muerte TDS:''' you're right about the basic types, added\
      \ them now, also the function return type was incorrect (functions can also\
      \ return arrays, etc..)\n\nThe reson why '''var''' and '''local''' are diffirent\
      \ is because inline enum and struct definitions are not allowed in '''local'''\
      \ but are in '''var'''.\n\n'''Wormbo:''' Is there a (free) program that can\
      \ check a source code file against an EBNF definition?\n\n'''El Muerte TDS:'''\
      \ not that I know of. But there are programs that create a parser from a EBNF\
      \ definition (needs some chaning tho): http://catalog.compilertools.net/lexparse.html\
      \ and one not in that list [http://www.antlr.org ANTLR]\n\n'''Tarquin:''' I've\
      \ changed:\n CONFIGGROUP              = LBRACK IDENTIFIER RBRACK\n\nas the actual\
      \ IDENTIFIER  is optional, right?\n\n'''El Muerte:''' uh, yeah. there are a\
      \ few other things that might also be changed, I've come across a couple of\
      \ \"hacks\" that are apperently legal too :( Not to speak of the things Unreal2\
      \ allows. Also there are a couple of new UT2004 keywords missing.\n\n'''Iainmcgin:'''\
      \ i changed FUNCTIONARGS so that the type of the parameter can include the basic\
      \ types (int, float etc). I'm working on a SableCC grammar file for UnrealScript\
      \ at the moment, so I'll note down other errors in this EBNF as i find them.\n\
      \n'''sprfreak14:''' Should comments be included in this EBNF? <br />Proposal:\n\
      \n<uscript>\nCOMMENT                    = ( SINGLELINECOMMENT | DELIMITEDCOMMENT\
      \ )\nSINGLELINECOMMENT          = '//' ( NOTNEWLINE )*\nNOTNEWLINE         \
      \        = Any character except a new line character\nDELIMITEDCOMMENT     \
      \      = '/*' ( DELIMITEDCOMMENTCHARACTERS )* '*/'\nDELIMITEDCOMMENTCHARACTERS\
      \ = ( NOTASTERISK | '*' NOTSLASH )\nNOTASTERISK                = Any character\
      \ except '*'\nNOTSLASH                   = Any character except '/'\n</uscript>\n\
      \n'''Sweavo:''' the usual way (i.e. the way I would do it writing a C parser)\
      \ to deal with comments is at the [http://en.wikipedia.org/wiki/Lexer Lexing\
      \ stage], i.e. there is a stage before parsing that recognizes tokens.  Comments\
      \ are reduced to whitespace at that stage.  While the comment stuff above looks\
      \ OK at a glance, the problem is that you then have to put <tt>COMMENT</tt>\
      \ all over the place in the grammar to reflect all the valid places for a comment.\
      \  Pretty much destroys the usefulness of the grammar.  But I agree, if this\
      \ is to be useful to people writing syntax highlighters, comments should be\
      \ addressed.\n\n'''sprfreak14:''' Is <tt>DOT default DOT IDENTIFIER</tt> in\
      \ <tt>QUALIFIEDIDENTIFIER</tt> optional?"
  properties: []
  revId: 8854
name: "Legacy:UnrealScript Grammar"
revision:
  revid: 8854
  parentid: 8856
  user: "Xian"
  timestamp: 1200768980.000000000
  comment: "oki, point taken :) small clearing for the GUID though... not satisfied\
    \ to how i \"formatted\" it"
timestamp: 1668763484.772768000
