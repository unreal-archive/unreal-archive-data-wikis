---
parse:
  title: "Legacy:Delegate"
  text:
    text: "<p><b>Delegates</b> are a new <a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a> concept in <a href=\"/Legacy:UT2003\"\
      \ title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a> and beyond. They\
      \ are (more or less) placeholders for functions. They are particularly used\
      \ in GUI components: for example, a delegate for the clicking action can be\
      \ assigned to a specific function without having to re-script the class.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Delegate_Syntax\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Delegate Syntax</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Calling_Delegates\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Calling Delegates</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Delegate_Assignment\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Delegate Assignment</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Delegate_testing\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Delegate testing</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Delegate_Syntax\"\
      >Delegate Syntax</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Delegate?section=1\" title=\"Edit section: Delegate\
      \ Syntax\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Delegates are declared just like functions, with the small difference, that\
      \ usually they don't have a function body.</p>\n<pre>&lt;<i>delegate modifiers</i>&gt;\
      \ <b>delegate</b> &lt;<i>return type</i>&gt; &lt;<i>delegate name</i>&gt; \n\
      \ <b>(</b>&lt;<i>parameter modifier</i>&gt; &lt;<i>type</i>&gt; &lt;<i>parameter\
      \ name</i>&gt;<b>,</b> ...<b>);</b>\n</pre>\n<dl>\n<dt>&lt;delegate modifiers&gt;&#160;</dt>\n\
      <dd>Keywords that specify aspects of the delegate's overall nature and behaviour.\
      \ These modifiers only affect the delegate itself. When you assign another function\
      \ to the delegate that functions modifiers will replace the delegate's original\
      \ modifiers. See <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">Function Syntax</a> for a list of possible modifiers.</dd>\n<dt>&lt;return\
      \ type&gt;&#160;</dt>\n<dd>The <a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable\
      \ Type\">variable type</a> the function returns. You can't return static arrays\
      \ due to the way they have to be declared. However, you can use an <i>out</i>\
      \ variable in this case.</dd>\n<dt>&lt;delegate name&gt;&#160;</dt>\n<dd>The\
      \ name of the delegate, chosen by the coder. For advice on naming conventions\
      \ see <a href=\"/Legacy:Coding_Guidelines\" title=\"Legacy:Coding Guidelines\"\
      >Coding Guidelines</a>.</dd>\n<dt>&lt;parameter modifier&gt;&#160;</dt>\n<dd>Changes\
      \ the nature of individual parameters. See <a href=\"/Legacy:Function_Syntax\"\
      \ title=\"Legacy:Function Syntax\">Function Syntax</a> for a list of possible\
      \ parameter modifiers.</dd>\n<dt>&lt;type&gt;&#160;</dt>\n<dd>The <a href=\"\
      /Legacy:Variable_Type\" title=\"Legacy:Variable Type\">variable type</a> of\
      \ each parameter.</dd>\n</dl>\n<p>Examples:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">delegate</span> <span class=\"kw5\">bool</span> MyDelegate<span\
      \ class=\"br0\">(</span><span class=\"kw5\">bool</span> FirstParam , <span class=\"\
      kw1\">out</span> <span class=\"kw5\">int</span> SecondParam, <span class=\"\
      kw1\">optional</span> <span class=\"kw5\">string</span> ThirdParam<span class=\"\
      br0\">)</span>;\n \n<span class=\"kw1\">simulated</span> <span class=\"kw1\"\
      >delegate</span> MyDelegateWithCode<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"My delegate with code was executed.\"\
      </span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>This second example might be useful if you want a delegate with default\
      \ code which should be executed clientside. The simulated keyword <i>only</i>\
      \ applies to the delegate itself. It will have no effect if the function you\
      \ assign to the delegate is not simulated.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Calling_Delegates\">Calling Delegates</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Delegate?section=2\"\
      \ title=\"Edit section: Calling Delegates\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Delegates are called like regular functions:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">bool</span> bReturn, bHaveIt;\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> Number;\n \nMyDelegate<span class=\"br0\">(</span><span\
      \ class=\"kw6\">True</span>, <span class=\"nu0\">34</span>, <span class=\"st0\"\
      >\"Hello World!\"</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ parameters passed as literals</span>\nMyDelegate<span class=\"br0\">(</span>bHaveIt,\
      \ Number<span class=\"br0\">)</span>;          <span class=\"co1\">// parameters\
      \ passed as variables</span>\nbReturn <span class=\"sy0\">=</span> MyDelegate<span\
      \ class=\"br0\">(</span><span class=\"kw6\">False</span>, Number, <span class=\"\
      st0\">\"Hi there!\"</span><span class=\"br0\">)</span>; <span class=\"co1\"\
      >// save delegate's return value in another variable</span></pre></div>\n</div>\n\
      <p>When a delegate is called without having a function assigned to it, the delegate's\
      \ default function body will be used. If the delegate doesn't have a function\
      \ body, nothing will happen.</p>\n<p><b>Note:</b> If a function of an object\
      \ that no longer exists is assigned to a delegate, calling this delegate will\
      \ result in a crash.</p>\n<p><b>Daid303:</b> Does that crash also happens when\
      \ the function is in actor?</p>\n<p><b>Wormbo:</b> I don't know. That's info\
      \ from the UDN page about delegates.</p>\n<p><b>Evolution:</b> Yes this would\
      \ cause a crash regardless of where the delegate is declared. The compiler is\
      \ supposed to catch all types of delegate assignment which might result in a\
      \ delegate's associated function not actually existing, but this doesn't work\
      \ 100% in UT2003. 99% of these compiler bugs are found with delegate assignments\
      \ from subobject blocks in defaultproperties, so if you're experiencing a crash\
      \ indicating the 'function blah couldn't be found' try moving your delegate\
      \ assignment out of defaultproperties into the first function that will be called\
      \ on your class (InitComponent(), for instance in the GUI). The other way this\
      \ can happen is if the function you're assigning to the delegate exists in another\
      \ package. If the function is removed from the other package, and the package\
      \ is recompiled, but the code containing the delegate assignment *isn't* recompiled,\
      \ then you'll get also get this crash.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Delegate_Assignment\">Delegate Assignment</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Delegate?section=3\"\
      \ title=\"Edit section: Delegate Assignment\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>To assign a function to a delegate property simply\
      \ use the syntax:</p>\n<pre>DelegateName = FunctionName;\n</pre>\n<p>(This also\
      \ works in a class's <a href=\"/Legacy:Default_Properties\" title=\"Legacy:Default\
      \ Properties\">default properties</a>.)</p>\n<p>You can only assign functions\
      \ to a delegate that have the same return type and the same number and type\
      \ of parameters. Optional delegate parameters have to be optional for the function\
      \ as well. Other parameter modifiers such as <b>out</b> don't have to match.\
      \ Those modifiers will be replaced by the corresponding modifiers of the function\
      \ assigned to the delegate.</p>\n<p>To restore the delegate's default behavior\
      \ simply assign None to it. You will have to do that if the function assigned\
      \ to the delegate belongs to an object you want to be garbage-collected, because\
      \ for non-actor objects delegates count as references to the object just like\
      \ a direct object reference.</p>\n<p>If an actor has a function assigned to\
      \ a delegate and the actor is destroyed, the delegate is automatically set to\
      \ None, just like a direct Actor reference.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Delegate_testing\">Delegate testing</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Delegate?section=4\"\
      \ title=\"Edit section: Delegate testing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Is is possible to examine what a delegate is set to\
      \ and test it?</p>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Delegate?section=5\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Tarquin:</b>\
      \ If I understand the UDN example correctly, a delegate is a sort of placeholder\
      \ in a class. When you have an object of that class, you can stick any function\
      \ you like in the placeholder.</p>\n<p><b>Wormbo:</b> Think of it as a variable\
      \ that holds a reference to an object of type \"function\". You can assign objects\
      \ to it and use them (i.e. execute the function). You can even give it a default\
      \ value, i.e. a default function body, default function modifiers and default\
      \ parameter modifiers. Like variables of type Class or arrays where you can\
      \ further specify the type of class or array you can specify details about the\
      \ functions that can be assigned to a delegate property.</p>\n<p><b>Foxpaw:</b>\
      \ I don't suppose there's any way to use delegates in structs, or make arrays\
      \ of delegates? If there was, you could make a nifty adaptive timeslicing scheme\
      \ that would keep your framerate high no matter what. (well, okay, not no matter\
      \ what, but no matter what was in your script)</p>\n<p><b>dataangel:</b> Unfortunately\
      \ you can't just imagine delegates as being variables that hold references to\
      \ function objects because as far as I know ucc will give you compile errors\
      \ whenever you try to use a delegate as a function parameter. Perhaps this is\
      \ a bug? It'd be really useful to be able to pass functions or delegates as\
      \ parameters.</p>\n<p><b>Xian:</b> If you can't quit picture Wormbo's description,\
      \ I think you could rather imagine it as virtually moving a function body in\
      \ another class without actually modifying it or subclassing it...</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Delegate?section=6\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a>\n<ul>\n<li><a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">Function Syntax</a></li>\n<li><a href=\"/Legacy:Destroying_Objects\"\
      \ title=\"Legacy:Destroying Objects\">Destroying Objects</a></li>\n</ul>\n</li>\n\
      <li><a href=\"http://udn.epicgames.com/Two/UnrealScriptDelegates\" class=\"\
      extiw\" title=\"udn2:UnrealScriptDelegates\">udn2:UnrealScriptDelegates</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.053 seconds\nReal time\
      \ usage: 0.054 seconds\nPreprocessor visited node count: 41/1000000\nPreprocessor\
      \ generated node count: 68/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:1029-0!*!0!!en!*!* and timestamp\
      \ 20221118152851 and revision id 2752\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Coding Guidelines"
  - ns: 100
    exists: true
    name: "Legacy:Destroying Objects"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Delegate Syntax"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Delegate"
    byteoffset: 336
    anchor: "Delegate_Syntax"
  - toclevel: 1
    level: "2"
    line: "Calling Delegates"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Delegate"
    byteoffset: 2071
    anchor: "Calling_Delegates"
  - toclevel: 1
    level: "2"
    line: "Delegate Assignment"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Delegate"
    byteoffset: 3858
    anchor: "Delegate_Assignment"
  - toclevel: 1
    level: "2"
    line: "Delegate testing"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Delegate"
    byteoffset: 4889
    anchor: "Delegate_testing"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Delegate"
    byteoffset: 4977
    anchor: "Discussion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Delegate"
    byteoffset: 6517
    anchor: "Related_Topics"
  displaytitle: "Legacy:Delegate"
  iwlinks:
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/UnrealScriptDelegates"
    name: "udn2:UnrealScriptDelegates"
  wikitext:
    text: "'''Delegates''' are a new [[Legacy:UnrealScript|UnrealScript]] concept\
      \ in [[Legacy:UT2003|UT2003]] and beyond. They are (more or less) placeholders\
      \ for functions. They are particularly used in GUI components: for example,\
      \ a delegate for the clicking action can be assigned to a specific function\
      \ without having to re-script the class.\n\n==Delegate Syntax==\n\nDelegates\
      \ are declared just like functions, with the small difference, that usually\
      \ they don't have a function body.\n <''delegate modifiers''> '''delegate'''\
      \ <''return type''> <''delegate name''> \n  '''('''<''parameter modifier''>\
      \ <''type''> <''parameter name''>''',''' ...''');'''\n\n; <delegate modifiers>\
      \ : Keywords that specify aspects of the delegate's overall nature and behaviour.\
      \ These modifiers only affect the delegate itself. When you assign another function\
      \ to the delegate that functions modifiers will replace the delegate's original\
      \ modifiers. See [[Legacy:Function Syntax|Function Syntax]] for a list of possible\
      \ modifiers.\n; <return type> : The [[Legacy:Variable Type|variable type]] the\
      \ function returns. You can't return static arrays due to the way they have\
      \ to be declared. However, you can use an ''out'' variable in this case.\n;\
      \ <delegate name> : The name of the delegate, chosen by the coder. For advice\
      \ on naming conventions see [[Legacy:Coding Guidelines|Coding Guidelines]].\n\
      ; <parameter modifier> : Changes the nature of individual parameters. See [[Legacy:Function\
      \ Syntax|Function Syntax]] for a list of possible parameter modifiers.\n; <type>\
      \ : The [[Legacy:Variable Type|variable type]] of each parameter.\n\nExamples:\n\
      \n<uscript>\ndelegate bool MyDelegate(bool FirstParam , out int SecondParam,\
      \ optional string ThirdParam);\n\nsimulated delegate MyDelegateWithCode()\n\
      {\n  log(\"My delegate with code was executed.\");\n}\n</uscript>\n\nThis second\
      \ example might be useful if you want a delegate with default code which should\
      \ be executed clientside. The simulated keyword ''only'' applies to the delegate\
      \ itself. It will have no effect if the function you assign to the delegate\
      \ is not simulated.\n\n==Calling Delegates==\n\nDelegates are called like regular\
      \ functions:\n\n<uscript>\nlocal bool bReturn, bHaveIt;\nlocal int Number;\n\
      \nMyDelegate(True, 34, \"Hello World!\"); // parameters passed as literals\n\
      MyDelegate(bHaveIt, Number);          // parameters passed as variables\nbReturn\
      \ = MyDelegate(False, Number, \"Hi there!\"); // save delegate's return value\
      \ in another variable\n</uscript>\n\nWhen a delegate is called without having\
      \ a function assigned to it, the delegate's default function body will be used.\
      \ If the delegate doesn't have a function body, nothing will happen.\n\n'''Note:'''\
      \ If a function of an object that no longer exists is assigned to a delegate,\
      \ calling this delegate will result in a crash.\n\n'''Daid303:''' Does that\
      \ crash also happens when the function is in actor?\n\n'''Wormbo:''' I don't\
      \ know. That's info from the UDN page about delegates.\n\n'''Evolution:''' Yes\
      \ this would cause a crash regardless of where the delegate is declared.  The\
      \ compiler is supposed to catch all types of delegate assignment which might\
      \ result in a delegate's associated function not actually existing, but this\
      \ doesn't work 100% in UT2003.  99% of these compiler bugs are found with delegate\
      \ assignments from subobject blocks in defaultproperties, so if you're experiencing\
      \ a crash indicating the 'function blah couldn't be found' try moving your delegate\
      \ assignment out of defaultproperties into the first function that will be called\
      \ on your class (InitComponent(), for instance in the GUI).  The other way this\
      \ can happen is if the function you're assigning to the delegate exists in another\
      \ package.  If the function is removed from the other package, and the package\
      \ is recompiled, but the code containing the delegate assignment *isn't* recompiled,\
      \ then you'll get also get this crash.\n\n==Delegate Assignment==\n\nTo assign\
      \ a function to a delegate property simply use the syntax:\n DelegateName =\
      \ FunctionName;\n\n(This also works in a class's [[Legacy:Default Properties|default\
      \ properties]].)\n\nYou can only assign functions to a delegate that have the\
      \ same return type and the same number and type of parameters. Optional delegate\
      \ parameters have to be optional for the function as well. Other parameter modifiers\
      \ such as '''out''' don't have to match. Those modifiers will be replaced by\
      \ the corresponding modifiers of the function assigned to the delegate.\n\n\
      To restore the delegate's default behavior simply assign None to it. You will\
      \ have to do that if the function assigned to the delegate belongs to an object\
      \ you want to be garbage-collected, because for non-actor objects delegates\
      \ count as references to the object just like a direct object reference.\n\n\
      If an actor has a function assigned to a delegate and the actor is destroyed,\
      \ the delegate is automatically set to None, just like a direct Actor reference.\n\
      \n==Delegate testing==\n\nIs is possible to examine what a delegate is set to\
      \ and test it?\n\n==Discussion==\n\n'''Tarquin:''' If I understand the UDN example\
      \ correctly, a delegate is a sort of placeholder in a class. When you have an\
      \ object of that class, you can stick any function you like in the placeholder.\n\
      \n'''Wormbo:''' Think of it as a variable that holds a reference to an object\
      \ of type \"function\". You can assign objects to it and use them (i.e. execute\
      \ the function). You can even give it a default value, i.e. a default function\
      \ body, default function modifiers and default parameter modifiers. Like variables\
      \ of type Class or arrays where you can further specify the type of class or\
      \ array you can specify details about the functions that can be assigned to\
      \ a delegate property.\n\n'''Foxpaw:''' I don't suppose there's any way to use\
      \ delegates in structs, or make arrays of delegates? If there was, you could\
      \ make a nifty adaptive timeslicing scheme that would keep your framerate high\
      \ no matter what. (well, okay, not no matter what, but no matter what was in\
      \ your script)\n\n'''dataangel:''' Unfortunately you can't just imagine delegates\
      \ as being variables that hold references to function objects because as far\
      \ as I know ucc will give you compile errors whenever you try to use a delegate\
      \ as a function parameter. Perhaps this is a bug? It'd be really useful to be\
      \ able to pass functions or delegates as parameters.\n\n'''Xian:''' If you can't\
      \ quit picture Wormbo's description, I think you could rather imagine it as\
      \ virtually moving a function body in another class without actually modifying\
      \ it or subclassing it... \n\n==Related Topics==\n* [[Legacy:UnrealScript|UnrealScript]]\n\
      ** [[Legacy:Function Syntax|Function Syntax]]\n** [[Legacy:Destroying Objects|Destroying\
      \ Objects]]\n* [[udn2:UnrealScriptDelegates]]"
  properties: []
  revId: 2752
name: "Legacy:Delegate"
revision:
  revid: 2752
  parentid: 2753
  user: "Xian"
  timestamp: 1174846288.000000000
  comment: "added one more example :-)"
timestamp: 1668785331.910804000
