---
parse:
  title: "Legacy:Variables With Vectors"
  text:
    text: "<p>To use a variable in a vector use the following method;-</p>\n<p>Example;\
      \ Spawning an actor at different hights;</p>\n<p>Spawn (TheActor, Owner,,Location+Vect(0,0,1)*Myfloat);</p>\n\
      <p>The numbers inside the () represent X,Y and Z vectors.</p>\n<p>Im not to\
      \ sure about the correct way to go about having more than 1 vector assigned\
      \ to a variable</p>\n<p>but i guess you could try this method;-</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> spawnactor<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \   <span class=\"kw1\">local</span> <span class=\"kw9\">actor</span> SpawnedActor;\n\
      \    SpawnedActor<span class=\"sy0\">=</span><span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span>TheActor, <span class=\"kw7\">Owner</span>,,<span class=\"\
      kw7\">Location</span><span class=\"sy0\">+</span><span class=\"kw3\">Vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>MyZValuefloat<span\
      \ class=\"br0\">)</span>; \n    SpawnedActor.<span class=\"kw4\">setlocation</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>MyYValueFloat;\n\
      \    SpawnedActor.<span class=\"kw4\">setlocation</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>MyXValueFloat;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>But this is off the top\
      \ of my head please feel free to correct the code</p>\n<p>Also how do you tell\
      \ if a vector variable is empty or not?</p>\n<p>rather than check each componant\
      \ of the vector one at a time we can simply create a local(temporary) blank\
      \ variable and compair the two;-</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">Function</span> Spawnfx<span class=\"br0\">(</span>class<span\
      \ class=\"sy0\">&lt;</span>emitter<span class=\"sy0\">&gt;</span> fx,<span class=\"\
      kw1\">optional</span> <span class=\"kw5\">vector</span> spawnloc<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> checkVect;\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">emitter</span> spawnedfx;\n<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> spawnloc <span class=\"sy0\">!=</span> checkVect<span\
      \ class=\"br0\">)</span>\n   <span class=\"br0\">{</span>\n    spawnloc <span\
      \ class=\"sy0\">=</span> <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> spawnloc ;\n   <span class=\"br0\">}</span>\nspawnedfx<span class=\"\
      sy0\">=</span><span class=\"kw4\">spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'ONSSkyMine'</span>,<span class=\"\
      kw6\">self</span>,,spawnloc<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>-Vitaloverdose-</p>\n<p><b>Foxpaw:</b> This\
      \ should possibly be added to <a href=\"/Legacy:Vector\" title=\"Legacy:Vector\"\
      >Vector</a>, rather than being it's own page. It's not very long to have it's\
      \ own page. To set members of the vector inline you can use the format: Location\
      \ + Vect(1,0,0)*whateverX + Vect(0,1,0)*whateverY + Vect(0,0,1)*whateverZ.</p>\n\
      <p>However, setting up a vector in this fashion is rather inefficient, as you\
      \ then have three multiplications per vector, times 3 vectors, plus 3 additions\
      \ per vector, times three vectors, for a total of 9 multiplications and 9 additions.</p>\n\
      <p>Setting up the vector ahead of time is more efficient and simpler to read\
      \ too, like so:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> spawnactor<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> V;\n  <span class=\"kw1\">local</span> <span\
      \ class=\"kw9\">actor</span>  A;\n \n  V.<span class=\"me0\">X</span> <span\
      \ class=\"sy0\">=</span> MyXValueFloat;\n  V.<span class=\"me0\">Y</span> <span\
      \ class=\"sy0\">=</span> MyYValueFloat;\n  V.<span class=\"me0\">Z</span> <span\
      \ class=\"sy0\">=</span> MyZValueFloat;\n \n  A <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span>TheActor, <span\
      \ class=\"kw7\">Owner</span>,, <span class=\"kw7\">Location</span> <span class=\"\
      sy0\">+</span> V<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>VitalOverdose</b>Thanks. I can see how hats a much more efficiant\
      \ way of doing it.</p>\n<p><b>SuperApe:</b> Isn't comparing the \"checkVect\"\
      \ the same as this?</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">   <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> spawnloc <span class=\"sy0\">!=</span>\
      \ <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span></pre></div>\n</div>\n\
      <p>I agree that this is probably a discussion that belongs on <a href=\"/Legacy:Vector\"\
      \ title=\"Legacy:Vector\">Vector</a>.</p>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.063 seconds\nReal time usage: 0.131 seconds\nPreprocessor visited\
      \ node count: 13/1000000\nPreprocessor generated node count: 84/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3618-0!*!0!*!*!*!*\
      \ and timestamp 20221118160646 and revision id 9239\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Variables With Vectors"
  iwlinks: []
  wikitext:
    text: "To use a variable in a vector use the following method;-\n\nExample; Spawning\
      \ an actor at different hights;\n\nSpawn (TheActor, Owner,,Location+Vect(0,0,1)*Myfloat);\n\
      \nThe numbers inside the () represent X,Y and Z vectors.\n\nIm not to sure about\
      \ the correct way to go about having more than 1 vector assigned to a variable\n\
      \nbut i guess you could try this method;-\n\n<uscript>function spawnactor()\n\
      {\n    local actor SpawnedActor;\n    SpawnedActor=Spawn(TheActor, Owner,,Location+Vect(0,0,1)*MyZValuefloat);\
      \ \n    SpawnedActor.setlocation(0,1,0)*MyYValueFloat;\n    SpawnedActor.setlocation(1,0,0)*MyXValueFloat;\n\
      }</uscript>\n\nBut this is off the top of my head please feel free to correct\
      \ the code\n\nAlso how do you tell if a vector variable is empty or not?\n\n\
      rather than check each componant of the vector one at a time we can simply create\
      \ a local(temporary) blank variable and compair the two;-\n\n<uscript>\nFunction\
      \ Spawnfx(class<emitter> fx,optional vector spawnloc)\n{\nlocal vector checkVect;\n\
      local emitter spawnedfx;\nif ( spawnloc != checkVect)\n   {\n    spawnloc =\
      \ Location + spawnloc ;\n   }\nspawnedfx=spawn(class'ONSSkyMine',self,,spawnloc);\n\
      }\n</uscript>\n\n-Vitaloverdose-\n\n'''Foxpaw:''' This should possibly be added\
      \ to [[Legacy:Vector|Vector]], rather than being it's own page. It's not very\
      \ long to have it's own page. To set members of the vector inline you can use\
      \ the format: Location + Vect(1,0,0)*whateverX + Vect(0,1,0)*whateverY + Vect(0,0,1)*whateverZ.\n\
      \nHowever, setting up a vector in this fashion is rather inefficient, as you\
      \ then have three multiplications per vector, times 3 vectors, plus 3 additions\
      \ per vector, times three vectors, for a total of 9 multiplications and 9 additions.\n\
      \nSetting up the vector ahead of time is more efficient and simpler to read\
      \ too, like so:\n\n<uscript>\nfunction spawnactor()\n{\n  local vector V;\n\
      \  local actor  A;\n\n  V.X = MyXValueFloat;\n  V.Y = MyYValueFloat;\n  V.Z\
      \ = MyZValueFloat;\n\n  A = Spawn(TheActor, Owner,, Location + V);\n}\n</uscript>\n\
      \n'''VitalOverdose'''Thanks. I can see how hats a much more efficiant way of\
      \ doing it.\n\n'''SuperApe:''' Isn't comparing the \"checkVect\" the same as\
      \ this? <uscript>   if ( spawnloc != vect(0,0,0) )</uscript>I agree that this\
      \ is probably a discussion that belongs on [[Legacy:Vector|Vector]]."
  properties: []
  revId: 9239
name: "Legacy:Variables With Vectors"
revision:
  revid: 9239
  parentid: 9240
  user: "SuperApe"
  timestamp: 1137714746.000000000
  comment: "*"
timestamp: 1668787454.649900000
