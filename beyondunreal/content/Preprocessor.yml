---
parse:
  title: "Preprocessor"
  text:
    text: "<p>Starting with <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\"\
      >Unreal Engine 3</a> The UnrealScript compiler now supports a <a href=\"http://en.wikipedia.org/wiki/preprocessor\"\
      \ class=\"extiw\" title=\"wp:preprocessor\">preprocessor</a>.</p>\n<p>The preprocessor\
      \ works much like the C++ preprocessor and is perfect for supporting conditional\
      \ compilation via macros. Macros are file-scope, meaning a macro defined on\
      \ line X of the script class (<a href=\"/edit/.uc?redlink=1\" class=\"new\"\
      \ title=\".uc (page does not exist)\">.uc</a>) file is only usable on lines\
      \ X+n in that file and not in any other files (unless it is included in another\
      \ .uc file). However, you can create a <a href=\"/edit/.uci?redlink=1\" class=\"\
      new\" title=\".uci (page does not exist)\">.uci</a> file to include macros in\
      \ your .uc file.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Command-line_Switches\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Command-line Switches</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#-debug\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >-debug</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#-final_release\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">-final_release</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#-nopreprocess\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">-nopreprocess</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#-intermediate\"><span class=\"\
      tocnumber\">1.4</span> <span class=\"toctext\">-intermediate</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Using_Macros\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Using Macros</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#.60define\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">`define</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-8\"><a href=\"#.60if_.2F_.60else_.2F_.60endif\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">`if / `else /\
      \ `endif</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"#.60include\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">`include</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#.60isdefined_.2F_.60notdefined\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">`isdefined / `notdefined</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#.60undefine\"><span class=\"\
      tocnumber\">2.5</span> <span class=\"toctext\">`undefine</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"#Predefined_Macros_for_Logging\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Predefined Macros\
      \ for Logging</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"\
      #.60log_.2F_.60warn\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\"\
      >`log / `warn</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"\
      #.60logd\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">`logd</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#.60assert\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">`assert</span></a></li>\n</ul>\n\
      </li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Command-line_Switches\"\
      >Command-line Switches</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=1\" title=\"Edit section: Command-line\
      \ Switches\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"-debug\">-debug</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=2\"\
      \ title=\"Edit section: -debug\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Using a -debug command line option causes a <i>`debug</i>\
      \ macro to be defined.</p>\n<h3><span class=\"mw-headline\" id=\"-final_release\"\
      >-final_release</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=3\" title=\"Edit section: -final\
      \ release\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Using a -final-release command line option causes UPP to define the macro\
      \ <i>`final_release</i>, as well as disable all wrapper macros (<i>`log</i>,\
      \ <i>`logd</i>, <i>`warn</i>, <i>`assert</i>). (see below).</p>\n<h3><span class=\"\
      mw-headline\" id=\"-nopreprocess\">-nopreprocess</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=4\"\
      \ title=\"Edit section: -nopreprocess\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Using a -nopreprocess command line option turns off\
      \ all macro and comment preprocessing.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"-intermediate\">-intermediate</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=5\"\
      \ title=\"Edit section: -intermediate\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Using a -intermediate command line option will save\
      \ the processed versions of the files compiled (for tracking down errors in\
      \ macros) to &lt;My Documents&gt;\\PreprocessedFiles\\&lt;package&gt;\\&lt;class&gt;.uc</p>\n\
      <h2><span class=\"mw-headline\" id=\"Using_Macros\">Using Macros</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Preprocessor?section=6\" title=\"Edit section: Using Macros\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span\
      \ class=\"mw-headline\" id=\".60define\">`define</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=7\"\
      \ title=\"Edit section: `define\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><i>`define &lt;macroname&gt;[&lt;(paramA[,paramB...])&gt;]\
      \ [&lt;macrodefinition&gt;]</i><br />\nDefines the named macro to expand to\
      \ the given definition. Parameters for the macro are specified in a typeless\
      \ function parameter list immediately after the name of the macro. In the macro\
      \ definition, the parameters are referenced by name and prefixed with a backtick.\
      \ Although I have not yet verified, my research indicated that you can also\
      \ use the the special macro <i>`#</i> to represent the number of parameters\
      \ specified, although I have not verified this though. If you don't give the\
      \ macro a definition, the macro is still defined but expands to an empty string.\
      \ You can also define a macro to represent a constant value.</p>\n<p>Equivalently,\
      \ the name of the macro can be enclosed in { } after the tick as in <i>`{hello}</i>.\
      \ This makes it possible to \"insert\" the expansion of a macro into the middle\
      \ of text that does not have conveniently placed whitespace.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">hippo<span class=\"sy0\">`</span><span class=\"br0\">{</span>hello<span\
      \ class=\"br0\">}</span>potamus</pre></div>\n</div>\n<p>Other examples:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">`</span>define SOME_CONST\
      \ <span class=\"nu0\">1</span>\n \n<span class=\"sy0\">`</span>define   hello\
      \   <span class=\"st0\">\"Hello, World!\"</span>\n \n<span class=\"sy0\">`</span>define\
      \ SomeMacro<span class=\"br0\">(</span>param1, param2<span class=\"br0\">)</span>\
      \ CallMyFunction<span class=\"br0\">(</span><span class=\"sy0\">`</span>param1,\
      \ <span class=\"sy0\">`</span>param2<span class=\"br0\">)</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\".60if_.2F_.60else_.2F_.60endif\"\
      >`if / `else / `endif</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=8\" title=\"Edit section: `if\
      \ / `else / `endif\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><i>`if(&lt;string&gt;)</i></p>\n<p><i>`else</i></p>\n<p><i>`endif</i><br\
      \ />\nBasically, this is conditional compilation. The text between <i>`if</i>\
      \ and either <i>`else</i> (if present) or <i>`endif</i> are emitted into the\
      \ processed output if the condition is true (if it is expanded to a non-empty\
      \ string); if the condition is not true, only the end-of-line characters are\
      \ emitted so that the line numbers in the processed text match up with those\
      \ in the original text. The text between the (optional) <i>`else</i> and <i>`endif</i>\
      \ are emitted if the original condition is false.</p>\n<p>This may be obvious,\
      \ but any macros used in the non-emitted code (in the <i>`else</i> if the statement\
      \ is true, or before the <i>`else</i> if the statement is true) are not evaluated\
      \ (except for nested <i>`if</i> blocks).</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"sy0\">`</span><span class=\"kw2\">if</span><span class=\"\
      br0\">(</span><span class=\"sy0\">`</span>isdefined<span class=\"br0\">(</span>SOME_CONST<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n     <span class=\"co1\"\
      >// do some code here if SOME_CONST can be expanded to a non-empty string...</span>\n\
      <span class=\"sy0\">`</span>endif\n \n<span class=\"sy0\">`</span><span class=\"\
      kw2\">if</span><span class=\"br0\">(</span><span class=\"sy0\">`</span>isdefined<span\
      \ class=\"br0\">(</span>SOME_OTHER_CONST<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n     <span class=\"co1\">// do some code here if SOME_CONST\
      \ can be expanded to a non-empty string...</span>\n<span class=\"sy0\">`</span><span\
      \ class=\"kw2\">else</span>\n     <span class=\"co1\">//do some code here if\
      \ SOME_CONST can NOT be expanded to a non-empty string...</span>\n<span class=\"\
      sy0\">`</span>endif</pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"\
      .60include\">`include</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=9\" title=\"Edit section: `include\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><i>`include(&lt;filename&gt;)</i><br\
      \ />\nIncludes the text within the file &lt;filename&gt; at the macro's location\
      \ in the code. By default, &lt;filename&gt; is relative to the directory specified\
      \ by the <b>EditPackagesInPath</b> of the <code>[Editor.EditorEngine]</code>\
      \ section of <code>UTGame.ini</code> file. If you specify only the filename\
      \ (no directory), it will search for the include file in the classes directory\
      \ for the package being compiled.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"sy0\">`</span>include<span class=\"br0\">(</span> MyStuff.<span\
      \ class=\"me0\">uci</span> <span class=\"br0\">)</span>\n \n<span class=\"sy0\"\
      >`</span>include<span class=\"br0\">(</span> MyPackage<span class=\"sy0\">/</span>Classes<span\
      \ class=\"sy0\">/</span>MyGlobals.<span class=\"me0\">uci</span> <span class=\"\
      br0\">)</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\".60isdefined_.2F_.60notdefined\"\
      >`isdefined / `notdefined</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=10\" title=\"\
      Edit section: `isdefined / `notdefined\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><i>`isdefined(&lt;macroname&gt;)</i><br />\n<i>`notdefined(&lt;macroname&gt;)</i><br\
      \ />\nEvaluates to the string \"1\" if the macro is (<i>`isdefined</i>) or is\
      \ not (<i>`notdefined</i>) defined, regardless of the macros definition. This\
      \ useful for conditional compilation. You can include code only in debug or\
      \ release builds, or based on other defined constants.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"sy0\">`</span><span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span><span class=\"sy0\">`</span>isdefined<span class=\"\
      br0\">(</span>SOME_CONST<span class=\"br0\">)</span><span class=\"br0\">)</span>\n\
      \     <span class=\"co1\">// do some code here if SOME_CONST is defined...</span>\n\
      <span class=\"sy0\">`</span>endif\n \n<span class=\"sy0\">`</span><span class=\"\
      kw2\">if</span><span class=\"br0\">(</span><span class=\"sy0\">`</span>notdefined<span\
      \ class=\"br0\">(</span>SOME_CONST<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n     <span class=\"co1\">// do some code here if SOME_CONST\
      \ is NOT defined...</span>\n<span class=\"sy0\">`</span>endif</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\".60undefine\">`undefine</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Preprocessor?section=11\" title=\"Edit section: `undefine\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><i>undefine(&lt;macroname&gt;)</i><br\
      \ />\nRemove the current definition of &lt;macroname&gt;.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"sy0\">`</span>undefine<span class=\"br0\"\
      >(</span>SOME_CONST<span class=\"br0\">)</span></pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Predefined_Macros_for_Logging\">Predefined Macros\
      \ for Logging</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=12\" title=\"Edit section: Predefined\
      \ Macros for Logging\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>There is a good reason to use the <i>`log</i> and <i>`warn</i> macros instead\
      \ of <b>LogInternal()</b> and <b>WarnInternal()</b> functions. If you use the\
      \ -final_release command line option when you \"make\", it will turn off all\
      \ logging because <i>`log</i> and <i>`warn</i> are empty defines when using\
      \ -final_release. However, the <b>LogInternal()</b> and <b>WarnInternal()</b>\
      \ function(s) will still be called if you use them directly. Using the macro\
      \ to write to the log for debug info will not incur a function call overhead\
      \ in a release build.</p>\n<p>More importantly, it also appears that calls to\
      \ <b>LogInternal</b> (or anything *Internal) generate <a href=\"/Compiler_errors\"\
      \ title=\"Compiler errors\" class=\"mw-redirect\">compiler errors</a> when using\
      \ -final_release.</p>\n<h3><span class=\"mw-headline\" id=\".60log_.2F_.60warn\"\
      >`log / `warn</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=13\" title=\"Edit section: `log\
      \ / `warn\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div class=\"code block\" style=\"font-family:monospace;padding-left:4em;text-indent:-4em\"\
      >`log(<a href=\"/String\" title=\"String\">string</a> OutputString, <a href=\"\
      /Optional\" title=\"Optional\" class=\"mw-redirect\">optional</a> <a href=\"\
      /Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a> bRequiredCondition, <a\
      \ href=\"/Optional\" title=\"Optional\" class=\"mw-redirect\">optional</a> <a\
      \ href=\"/Name\" title=\"Name\" class=\"mw-redirect\">name</a> LogTag)</div>\n\
      <div class=\"code block\" style=\"font-family:monospace;padding-left:4em;text-indent:-4em\"\
      >`warn(<a href=\"/String\" title=\"String\">string</a> OutputString, <a href=\"\
      /Optional\" title=\"Optional\" class=\"mw-redirect\">optional</a> <a href=\"\
      /Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a> bRequiredCondition)</div>\n\
      <p>Wrapper macros for the <b>LogInternal</b> and <b>WarnInternal</b> functions\
      \ declared in Object.uc. If <b>bRequiredCondition</b> is specified, the message\
      \ will only be logged if the condition is true.</p>\n<p>Both macros are disabled\
      \ if scripts are compiled with the -final_release command line option.</p>\n\
      <h3><span class=\"mw-headline\" id=\".60logd\">`logd</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Preprocessor?section=14\"\
      \ title=\"Edit section: `logd\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div class=\"code block\" style=\"font-family:monospace;padding-left:4em;text-indent:-4em\"\
      >`logd(<a href=\"/String\" title=\"String\">string</a> OutputString, <a href=\"\
      /Optional\" title=\"Optional\" class=\"mw-redirect\">optional</a> <a href=\"\
      /Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a> bRequiredCondition, <a\
      \ href=\"/Optional\" title=\"Optional\" class=\"mw-redirect\">optional</a> <a\
      \ href=\"/Name\" title=\"Name\" class=\"mw-redirect\">name</a> LogTag)</div>\n\
      <p>Identical to the `log macro, except that it is only enabled if scripts are\
      \ compiled in debug mode.</p>\n<p>This macro is disabled if scripts are compiled\
      \ with the -final_release switch.</p>\n<h3><span class=\"mw-headline\" id=\"\
      .60assert\">`assert</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Preprocessor?section=15\" title=\"Edit section: `assert\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<div class=\"\
      code block\" style=\"font-family:monospace;padding-left:4em;text-indent:-4em\"\
      >`assert(<a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a> bCondition)</div>\n\
      <p>Wrapper macro for the Assert intrinsic expression.</p>\n<p>This macro is\
      \ disabled if scripts are compiled with the -final_release switch.</p>\n<table\
      \ class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\">\n<th\
      \ colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><strong class=\"selflink\">Preprocessor</strong>&#160;• <a href=\"/Classes\"\
      \ title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\" title=\"Interfaces\"\
      >Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;•\
      \ <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n</tr>\n\
      <tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"\
      /Literals\" title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.220 seconds\nReal time usage: 0.625 seconds\nPreprocessor\
      \ visited node count: 301/1000000\nPreprocessor generated node count: 1133/1000000\n\
      Post‐expand include size: 11309/2097152 bytes\nTemplate argument size: 4498/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  104.833      1 - -total\n 88.32%   92.590      1 - Template:Navbox_unrealscript\n\
      \ 68.02%   71.311      1 - Template:Navbox\n 15.16%   15.890      1 - Template:Tnavbar\n\
      \  9.88%   10.358      4 - Template:Code\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:23746-0!*!0!!en!*!* and timestamp 20221118064857\
      \ and revision id 44366\n -->\n"
  categories:
  - sortkey: "Preprocessor"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Compiler errors"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Optional"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: false
    name: ".uc"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: false
    name: ".uci"
  templates:
  - ns: 10
    exists: true
    name: "Template:Code"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Command-line Switches"
    number: "1"
    index: "1"
    fromtitle: "Preprocessor"
    byteoffset: 513
    anchor: "Command-line_Switches"
  - toclevel: 2
    level: "3"
    line: "-debug"
    number: "1.1"
    index: "2"
    fromtitle: "Preprocessor"
    byteoffset: 539
    anchor: "-debug"
  - toclevel: 2
    level: "3"
    line: "-final_release"
    number: "1.2"
    index: "3"
    fromtitle: "Preprocessor"
    byteoffset: 628
    anchor: "-final_release"
  - toclevel: 2
    level: "3"
    line: "-nopreprocess"
    number: "1.3"
    index: "4"
    fromtitle: "Preprocessor"
    byteoffset: 841
    anchor: "-nopreprocess"
  - toclevel: 2
    level: "3"
    line: "-intermediate"
    number: "1.4"
    index: "5"
    fromtitle: "Preprocessor"
    byteoffset: 950
    anchor: "-intermediate"
  - toclevel: 1
    level: "2"
    line: "Using Macros"
    number: "2"
    index: "6"
    fromtitle: "Preprocessor"
    byteoffset: 1162
    anchor: "Using_Macros"
  - toclevel: 2
    level: "3"
    line: "`define"
    number: "2.1"
    index: "7"
    fromtitle: "Preprocessor"
    byteoffset: 1180
    anchor: ".60define"
  - toclevel: 2
    level: "3"
    line: "`if / `else / `endif"
    number: "2.2"
    index: "8"
    fromtitle: "Preprocessor"
    byteoffset: 2328
    anchor: ".60if_.2F_.60else_.2F_.60endif"
  - toclevel: 2
    level: "3"
    line: "`include"
    number: "2.3"
    index: "9"
    fromtitle: "Preprocessor"
    byteoffset: 3456
    anchor: ".60include"
  - toclevel: 2
    level: "3"
    line: "`isdefined / `notdefined"
    number: "2.4"
    index: "10"
    fromtitle: "Preprocessor"
    byteoffset: 3992
    anchor: ".60isdefined_.2F_.60notdefined"
  - toclevel: 2
    level: "3"
    line: "`undefine"
    number: "2.5"
    index: "11"
    fromtitle: "Preprocessor"
    byteoffset: 4561
    anchor: ".60undefine"
  - toclevel: 1
    level: "2"
    line: "Predefined Macros for Logging"
    number: "3"
    index: "12"
    fromtitle: "Preprocessor"
    byteoffset: 4695
    anchor: "Predefined_Macros_for_Logging"
  - toclevel: 2
    level: "3"
    line: "`log / `warn"
    number: "3.1"
    index: "13"
    fromtitle: "Preprocessor"
    byteoffset: 5409
    anchor: ".60log_.2F_.60warn"
  - toclevel: 2
    level: "3"
    line: "`logd"
    number: "3.2"
    index: "14"
    fromtitle: "Preprocessor"
    byteoffset: 5914
    anchor: ".60logd"
  - toclevel: 2
    level: "3"
    line: "`assert"
    number: "3.3"
    index: "15"
    fromtitle: "Preprocessor"
    byteoffset: 6219
    anchor: ".60assert"
  displaytitle: "Preprocessor"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/preprocessor"
    name: "wp:preprocessor"
  wikitext:
    text: "Starting with [[Unreal Engine 3]] The UnrealScript compiler now supports\
      \ a [[wp:preprocessor|preprocessor]]. \n\nThe preprocessor works much like the\
      \ C++ preprocessor and is perfect for supporting conditional compilation via\
      \ macros.\nMacros are file-scope, meaning a macro defined on line X of the script\
      \ class ([[.uc]]) file is only usable on lines X+n in that file and not in any\
      \ other files (unless it is included in another .uc file). However, you can\
      \ create a [[.uci]] file to include macros in your .uc file.\n\n==Command-line\
      \ Switches==\n===-debug===\nUsing a -debug command line option causes a ''`debug''\
      \ macro to be defined.\n===-final_release===\nUsing a -final-release command\
      \ line option causes UPP to define the macro ''`final_release'', as well as\
      \ disable all wrapper macros (''`log'', ''`logd'', ''`warn'', ''`assert'').\
      \ (see below).\n===-nopreprocess===\nUsing a -nopreprocess command line option\
      \ turns off all macro and comment preprocessing.\n===-intermediate===\nUsing\
      \ a -intermediate command line option will save the processed versions of the\
      \ files compiled (for tracking down errors in macros) to <My Documents>\\PreprocessedFiles\\\
      <package>\\<class>.uc\n\n==Using Macros==\n\n===`define===\n''`define <macroname>[<(paramA[,paramB...])>]\
      \ [<macrodefinition>]''<br>\nDefines the named macro to expand to the given\
      \ definition. Parameters for the macro are specified in a typeless function\
      \ parameter list immediately after the name of the macro. In the macro definition,\
      \ the parameters are referenced by name and prefixed with a backtick. Although\
      \ I have not yet verified, my research indicated that you can also use the the\
      \ special macro ''`#'' to represent the number of parameters specified, although\
      \ I have not verified this though. If you don't give the macro a definition,\
      \ the macro is still defined but expands to an empty string. You can also define\
      \ a macro to represent a constant value.  \n\nEquivalently, the name of the\
      \ macro can be enclosed in { } after the tick as in ''`{hello}''. This makes\
      \ it possible to \"insert\" the expansion of a macro into the middle of text\
      \ that does not have conveniently placed whitespace. \n<uscript>hippo`{hello}potamus\n\
      </uscript>\nOther examples:\n<uscript>`define SOME_CONST 1\n\n`define   hello\
      \   \"Hello, World!\"\n\n`define SomeMacro(param1, param2) CallMyFunction(`param1,\
      \ `param2)</uscript>\n\n===`if / `else / `endif===\n''`if(<string>)''\n\n''`else''\n\
      \n''`endif''<br>\nBasically, this is conditional compilation. The text between\
      \ ''`if'' and either ''`else'' (if present) or ''`endif'' are emitted into the\
      \ processed output if the condition is true (if it is expanded to a non-empty\
      \ string); if the condition is not true, only the end-of-line characters are\
      \ emitted so that the line numbers in the processed text match up with those\
      \ in the original text.  The text between the (optional) ''`else'' and ''`endif''\
      \ are emitted if the original condition is false. \n \nThis may be obvious,\
      \ but any macros used in the non-emitted code (in the ''`else'' if the statement\
      \ is true, or before the ''`else'' if the statement is true) are not evaluated\
      \ (except for nested ''`if'' blocks).\n<uscript>`if(`isdefined(SOME_CONST))\n\
      \     // do some code here if SOME_CONST can be expanded to a non-empty string...\n\
      `endif\n\n`if(`isdefined(SOME_OTHER_CONST))\n     // do some code here if SOME_CONST\
      \ can be expanded to a non-empty string...\n`else\n     //do some code here\
      \ if SOME_CONST can NOT be expanded to a non-empty string...\n`endif</uscript>\n\
      ===`include===\n''`include(<filename>)''<br>\nIncludes the text within the file\
      \ <filename> at the macro's location in the code. By default, <filename> is\
      \ relative to the directory specified by the '''EditPackagesInPath''' of the\
      \ <code>[Editor.EditorEngine]</code> section of <code>UTGame.ini</code> file.\
      \ If you specify only the filename (no directory), it will search for the include\
      \ file in the classes directory for the package being compiled.  \n<uscript>`include(\
      \ MyStuff.uci )\n\n`include( MyPackage/Classes/MyGlobals.uci )\n</uscript>\n\
      ===`isdefined / `notdefined===\n''`isdefined(<macroname>)''<br>\n''`notdefined(<macroname>)''<br>\n\
      Evaluates to the string \"1\" if the macro is (''`isdefined'') or is not (''`notdefined'')\
      \ defined, regardless of the macros definition.  This useful for conditional\
      \ compilation.  You can include code only in debug or release builds, or based\
      \ on other defined constants.\n<uscript>`if(`isdefined(SOME_CONST))\n     //\
      \ do some code here if SOME_CONST is defined...\n`endif\n\n`if(`notdefined(SOME_CONST))\n\
      \     // do some code here if SOME_CONST is NOT defined...\n`endif\n</uscript>\n\
      ===`undefine===\n''undefine(<macroname>)''<br>\nRemove the current definition\
      \ of <macroname>. \n<uscript>`undefine(SOME_CONST)</uscript>\n==Predefined Macros\
      \ for Logging==\nThere is a good reason to use the ''`log'' and ''`warn'' macros\
      \ instead of '''LogInternal()''' and '''WarnInternal()''' functions. If you\
      \ use the -final_release command line option when you \"make\", it will turn\
      \ off all logging because ''`log'' and ''`warn'' are empty defines when using\
      \ -final_release. However, the '''LogInternal()''' and '''WarnInternal()'''\
      \ function(s) will still be called if you use them directly.  Using the macro\
      \ to write to the log for debug info will not incur a function call overhead\
      \ in a release build. \n\nMore importantly, it also appears that calls to '''LogInternal'''\
      \ (or anything *Internal) generate [[compiler errors]] when using -final_release.\n\
      ===`log / `warn===\n{{code|`log([[string]] OutputString, [[optional]] [[bool]]\
      \ bRequiredCondition, [[optional]] [[name]] LogTag)}}\n{{code|`warn([[string]]\
      \ OutputString, [[optional]] [[bool]] bRequiredCondition)}}\nWrapper macros\
      \ for the '''LogInternal''' and '''WarnInternal''' functions declared in Object.uc.\
      \ If '''bRequiredCondition''' is specified, the message will only be logged\
      \ if the condition is true.\n\nBoth macros are disabled if scripts are compiled\
      \ with the -final_release command line option. \n===`logd===\n{{code|`logd([[string]]\
      \ OutputString, [[optional]] [[bool]] bRequiredCondition, [[optional]] [[name]]\
      \ LogTag)}}\nIdentical to the `log macro, except that it is only enabled if\
      \ scripts are compiled in debug mode. \n\nThis macro is disabled if scripts\
      \ are compiled with the -final_release switch. \n===`assert===\n{{code|`assert([[bool]]\
      \ bCondition)}}\nWrapper macro for the Assert intrinsic expression. \n\nThis\
      \ macro is disabled if scripts are compiled with the -final_release switch.\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 44366
name: "Preprocessor"
revision:
  revid: 44366
  parentid: 43915
  user: "113.22.250.67"
  timestamp: 1302133638.000000000
  comment: "At the end of the first paragraph, changed \"to to\" to \"to\" only."
timestamp: 1668754138.225585000
