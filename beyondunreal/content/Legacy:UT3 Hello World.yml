---
parse:
  title: "Legacy:UT3 Hello World"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Getting_Ready\">Getting Ready</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UT3_Hello_World?section=1\" title=\"Edit section: Getting\
      \ Ready\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Assuming you have read the first UT3 lesson on <a href=\"/Legacy:UT3_Whats_What\"\
      \ title=\"Legacy:UT3 Whats What\">UT3 Whats What</a>, You should be ready to\
      \ make your first mod.</p>\n<p>The simplest of mods is the \"Hello World\" mutator.</p>\n\
      <p>Go to \"C:\\Users\\&lt;username&gt;\\Documents\\My Games\\Unreal Tournament\
      \ 3\\UTGame\\Src\" (or equivelent) and create a new folder. The Folder name\
      \ will be the package name for your mod. For this tutorial, name the folder\
      \ \"HelloWorld\". In this folder, create another folder called classes.</p>\n\
      <pre>  The classes folder is where all your source files will go.\n</pre>\n\
      <p>Open up \"..\\UTGame\\Config\\UTEditor.ini\" and find the [ModPackages] section,\
      \ and add to it a line that reads \"ModPackages=HelloWorld\"</p>\n<p>Save and\
      \ close the file.</p>\n<p>Create a file in this folder and name it \"HW_Mutator.uc\"\
      \ and open it for editing.</p>\n<p>Either open notepad and Save As, or create\
      \ a new .txt document and rename it, making sure that it has the correct file\
      \ extension. (By default, windows hides known file extensions. This can be disabled\
      \ in Tool&gt;Folder Options...&gt;View.)</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"The_Code\">The Code</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UT3_Hello_World?section=2\"\
      \ title=\"Edit section: The Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> HW_Mutator <span class=\"kw1\">extends</span> UTMutator;\n\
      \ \n<span class=\"kw1\">function</span> InitMutator<span class=\"br0\">(</span><span\
      \ class=\"kw5\">string</span> Options, <span class=\"kw1\">out</span> <span\
      \ class=\"kw5\">string</span> ErrorMessage<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n     loginternal<span class=\"br0\">(</span> <span\
      \ class=\"st0\">\"Hello World\"</span> <span class=\"br0\">)</span>;\n \n<span\
      \ class=\"kw6\">Super</span>.<span class=\"me0\">InitMutator</span><span class=\"\
      br0\">(</span>Options, ErrorMessage<span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Note: the class name must be the same\
      \ as the file name.</p>\n<p><b>Sandymac</b>: I think you need to run 'UT3 make'\
      \ before you launch the game to test the mutator.</p>\n<p>Now, run UT3 -useunpublished\
      \ and start a game with your mutator. When the mutator is loaded \"Hello World\"\
      \ will be outputted to a log file.</p>\n<p>The log file will be in \"..\\UTGame\\\
      Logs\\\"</p>\n<p><b>Vaptor</b>: i don't think you tried useunpublished cause\
      \ it keeps crashing with not recognized</p>\n<p><b>Rye</b>: Pretty simple mod.\
      \ As i am still getting my head around UScript myself, my advice to people new\
      \ to scripting is you should search and search and search. Dont post on forums\
      \ the instant you get stuck. Try looking at other pieces of source code and\
      \ see if you can figure it out. Aside from it being more satisfying, you will\
      \ also learn UScript faster.</p>\n<p><b>Raven</b>: I have noticed that when\
      \ you reverse engineer the script using UnrealEd that is does not include any\
      \ embedded objects. This is particularly important for UT3, as that all components\
      \ are now exactly that. An example of this is the StaticMeshActor class:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> StaticMeshActor\
      \ <span class=\"kw1\">extends</span> StaticMeshActorBase\n\t<span class=\"kw1\"\
      >native</span>\n\t<span class=\"kw1\">placeable</span>;\n \n<span class=\"kw1\"\
      >var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      kw1\">const</span> editconst StaticMeshComponent   StaticMeshComponent;\n \n\
      <span class=\"kw1\">event</span> <span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n   StaticMeshComponent<span class=\"sy0\">=</span>StaticMeshComponent0\n\
      \   Components<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span>StaticMeshComponent0\n \
      \  BlockRigidBody<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      \   CollisionComponent<span class=\"sy0\">=</span>StaticMeshComponent0\n   CollisionType<span\
      \ class=\"sy0\">=</span>COLLIDE_BlockAll\n   <span class=\"kw5\">Name</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"Default__StaticMeshActor\"</span>\n\
      \   ObjectArchetype<span class=\"sy0\">=</span>StaticMeshActorBase<span class=\"\
      st0\">'Engine.Default__StaticMeshActorBase'</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>The reference to StaticMeshComponent0 should be included in the default\
      \ properties, but is not extracted during reverse engineering. It should have\
      \ something like:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">Begin</span> <span class=\"kw8\">Object</span> <span class=\"kw1\">Class</span><span\
      \ class=\"sy0\">=</span>StaticMeshComponent <span class=\"kw5\">Name</span><span\
      \ class=\"sy0\">=</span>StaticMeshComponent0\n   bAllowApproximateOcclusion<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">TRUE</span>\n   bCastDynamicShadow<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">FALSE</span>\n   bForceDirectLightMap<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">TRUE</span>\nEnd <span class=\"\
      kw8\">Object</span></pre></div>\n</div>\n<p><b>Raven</b>: Probably should also\
      \ mention that it is a good idea to download the scripts from UDN: <a rel=\"\
      nofollow\" class=\"external free\" href=\"http://udn.epicgames.com/Three/UT3ModHome.html\"\
      >http://udn.epicgames.com/Three/UT3ModHome.html</a></p>\n<p><b>EricBlade</b>:\
      \ I am not having Raven's problem with the exported script not having the objects,\
      \ although I did definitely have that problem with older Unreal games. I would\
      \ like to note that in Object.uc, directly above the LogInternal() function,\
      \ it says that you should never call that function directly, rather use the\
      \ log() macro .. Apparently this is done by doing `log(\"message\"); .. and\
      \ as an aside, anyone know what the ` does, and is this 'macro' functionality\
      \ available to us as coders somewhere? ...</p>\n<p><b>EricBlade</b>: More related\
      \ to the topic at hand, after doing UT3 Make, I do UT3 -useunpublished, and\
      \ it starts to start, but then gives me a VC++ crash window, and my CPU usage\
      \ skyrockets to 100% and stays there until i managed to click OK to get rid\
      \ of the window, and UT3 closes. The log dosen't look especially useful here,\
      \ either. In fact, running \"ut3\" with any arguments except \"make\" now gives\
      \ me a VC++ crash window. ugh.</p>\n<p><b>Raven</b>: I had that problem happen\
      \ as well. For me it seemed to be a directX conflict, went away when I rebooted\
      \ the computer. You should also use the -log command, as this will give you\
      \ a chance to see the log messages in real time.</p>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.073 seconds\nReal time usage: 0.229 seconds\nPreprocessor\
      \ visited node count: 15/1000000\nPreprocessor generated node count: 72/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3571-0!*!0!!*!*!*\
      \ and timestamp 20221117131756 and revision id 9139\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT3 Whats What"
  templates: []
  images: []
  externallinks:
  - "http://udn.epicgames.com/Three/UT3ModHome.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "Getting Ready"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UT3_Hello_World"
    byteoffset: 0
    anchor: "Getting_Ready"
  - toclevel: 1
    level: "2"
    line: "The Code"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UT3_Hello_World"
    byteoffset: 1023
    anchor: "The_Code"
  displaytitle: "Legacy:UT3 Hello World"
  iwlinks: []
  wikitext:
    text: "==Getting Ready==\n\nAssuming you have read the first UT3 lesson on [[Legacy:UT3\
      \ Whats What|UT3 Whats What]], You should be ready to make your first mod.\n\
      \nThe simplest of mods is the \"Hello World\" mutator.\n\nGo to \"C:\\Users\\\
      <username>\\Documents\\My Games\\Unreal Tournament 3\\UTGame\\Src\" (or equivelent)\
      \ and create a new folder. The Folder name will be the package name for your\
      \ mod. For this tutorial, name the folder \"HelloWorld\". In this folder, create\
      \ another folder called classes.\n   The classes folder is where all your source\
      \ files will go.\n\nOpen up \"..\\UTGame\\Config\\UTEditor.ini\" and find the\
      \ [ModPackages] section, and add to it a line that reads \"ModPackages=HelloWorld\"\
      \n\nSave and close the file.\n\nCreate a file in this folder and name it \"\
      HW_Mutator.uc\" and open it for editing.\n\nEither open notepad and Save As,\
      \ or create a new .txt document and rename it, making sure that it has the correct\
      \ file extension. (By default, windows hides known file extensions. This can\
      \ be disabled in Tool>Folder Options...>View.)\n\n==The Code==\n\n<uscript>\n\
      class HW_Mutator extends UTMutator;\n\nfunction InitMutator(string Options,\
      \ out string ErrorMessage)\n{\n     loginternal( \"Hello World\" );\n\nSuper.InitMutator(Options,\
      \ ErrorMessage);\n}\n\n</uscript>\n\nNote: the class name must be the same as\
      \ the file name.\n\n'''Sandymac''': I think you need to run 'UT3 make' before\
      \ you launch the game to test the mutator.\n\nNow, run UT3 -useunpublished and\
      \ start a game with your mutator. When the mutator is loaded \"Hello World\"\
      \ will be outputted to a log file.\n\nThe log file will be in \"..\\UTGame\\\
      Logs\\\"\n\n'''Vaptor''': i don't think you tried useunpublished cause it keeps\
      \ crashing with not recognized\n\n'''Rye''':  Pretty simple mod. As i am still\
      \ getting my head around UScript myself, my advice to people new to scripting\
      \ is you should search and search and search. Dont post on forums the instant\
      \ you get stuck. Try looking at other pieces of source code and see if you can\
      \ figure it out. Aside from it being more satisfying, you will also learn UScript\
      \ faster.\n\n'''Raven''': I have noticed that when you reverse engineer the\
      \ script using UnrealEd that is does not include any embedded objects. This\
      \ is particularly important for UT3, as that all components are now exactly\
      \ that. An example of this is the StaticMeshActor class:\n\n<uscript>\nclass\
      \ StaticMeshActor extends StaticMeshActorBase\n\tnative\n\tplaceable;\n\nvar()\
      \ const editconst StaticMeshComponent   StaticMeshComponent;\n\nevent PreBeginPlay()\
      \ {}\n\ndefaultproperties\n{\n   StaticMeshComponent=StaticMeshComponent0\n\
      \   Components(0)=StaticMeshComponent0\n   BlockRigidBody=True\n   CollisionComponent=StaticMeshComponent0\n\
      \   CollisionType=COLLIDE_BlockAll\n   Name=\"Default__StaticMeshActor\"\n \
      \  ObjectArchetype=StaticMeshActorBase'Engine.Default__StaticMeshActorBase'\n\
      }\n</uscript>\n\nThe reference to StaticMeshComponent0 should be included in\
      \ the default properties, but is not extracted during reverse engineering. It\
      \ should have something like:\n\n<uscript>\nBegin Object Class=StaticMeshComponent\
      \ Name=StaticMeshComponent0\n   bAllowApproximateOcclusion=TRUE\n   bCastDynamicShadow=FALSE\n\
      \   bForceDirectLightMap=TRUE\nEnd Object\n</uscript>\n\n'''Raven''': Probably\
      \ should also mention that it is a good idea to download the scripts from UDN:\
      \ http://udn.epicgames.com/Three/UT3ModHome.html\n\n'''EricBlade''': I am not\
      \ having Raven's problem with the exported script not having the objects, although\
      \ I did definitely have that problem with older Unreal games.  I would like\
      \ to note that in Object.uc, directly above the LogInternal() function, it says\
      \ that you should never call that function directly, rather use the log() macro\
      \ .. Apparently this is done by doing `log(\"message\"); ..  and as an aside,\
      \ anyone know what the ` does, and is this 'macro' functionality available to\
      \ us as coders somewhere? ... \n\n'''EricBlade''': More related to the topic\
      \ at hand, after doing UT3 Make, I do UT3 -useunpublished, and it starts to\
      \ start, but then gives me a VC++ crash window, and my CPU usage skyrockets\
      \ to 100% and stays there until i managed to click OK to get rid of the window,\
      \ and UT3 closes.  The log dosen't look especially useful here, either.  In\
      \ fact, running \"ut3\" with any arguments except \"make\" now gives me a VC++\
      \ crash window. ugh.\n\n'''Raven''': I had that problem happen as well. For\
      \ me it seemed to be a directX conflict, went away when I rebooted the computer.\
      \ You should also use the -log command, as this will give you a chance to see\
      \ the log messages in real time."
  properties: []
  revId: 9139
name: "Legacy:UT3 Hello World"
revision:
  revid: 9139
  parentid: 9140
  user: "Raven"
  timestamp: 1199771669.000000000
  comment: "*"
timestamp: 1668764298.897281000
