---
parse:
  title: "Legacy:UnrealScript For CPlusPlus Programmers"
  text:
    text: "<p><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ was expressly designed to give <a href=\"http://en.wikipedia.org/wiki/C_Plus_Plus\"\
      \ class=\"extiw\" title=\"wikipedia:C Plus Plus\">C++</a> and Java programmers\
      \ a warm feeling of familiarity. If anything Unreal Script is more similar to\
      \ Java than C++ (see <a href=\"/Legacy:UnrealScript_For_Java_Programmers\" title=\"\
      Legacy:UnrealScript For Java Programmers\">UnrealScript For Java Programmers</a>).\
      \ The main differences between C++ and UnrealScript are summarised below.</p>\n\
      <p>Just like C++, Unreal Script is an object-oriented language. The notions\
      \ of classes, inheritence, objects, and overriding (redefining in a subclass)\
      \ methods apply. The main differences in the behaviour of objects are listed\
      \ below.</p>\n<ul>\n<li>Multiple inheritance is not supported. A class may only\
      \ have a single superclass.</li>\n<li>All methods are virtual.</li>\n<li>All\
      \ objects are created on the heap and handled only via references. So every\
      \ variable that points to an instance of an object is a pointer to that object\
      \ (a reference if you perfer).</li>\n<li>There is no <i>delete</i> operator.\
      \ Deleting objects is automatically handled by a <a href=\"/Legacy:Garbage_Collection\"\
      \ title=\"Legacy:Garbage Collection\">garbage collector</a>; objects of class\
      \ <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">actor</a> and below must\
      \ be manually removed from the <a href=\"/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament\"\
      \ title=\"Legacy:Linked List/Existing Lists In Unreal Tournament\">Actor list</a>\
      \ by calling their <a href=\"/Legacy:Destroying_Objects\" title=\"Legacy:Destroying\
      \ Objects\">Destroy</a> method before they are discarded. Objects are only garbage\
      \ collected when the total number of references to them reaches zero.</li>\n\
      <li>Regular methods cannot be overloaded although operators can. However, it\
      \ is possible to make any or all of the parameter(s) of a method <a href=\"\
      /Legacy:Function_Syntax\" title=\"Legacy:Function Syntax\">optional</a>.</li>\n\
      <li>Unlike C++, UnrealScript is a case-insensitive language (\"Function\" equals\
      \ \"function\", \"LOG\" equals \"log\", and so on).</li>\n</ul>\n<p>Other differences\
      \ between UnrealScript and C++ are:</p>\n<ul>\n<li>Structures created with the\
      \ <code>struct</code> keyword and classes are fundamentally different concepts\
      \ in UnrealScript. Structures are always handled by value. Classes are always\
      \ handled by reference.</li>\n<li>All variables in UnrealScript <i>must</i>\
      \ be explicitly scoped:\n<ul>\n<li>Instance variables are available from anywhere\
      \ within the object after their declaration (ie. object scope) and are declared\
      \ with the <tt>var</tt> keyword</li>\n<li>Local variables are available from\
      \ anywhere within the function in which they're declared, after their declaration,\
      \ and are preceded with the <tt>local</tt> keyword</li>\n</ul>\n</li>\n<li>Templates\
      \ do not exist.</li>\n<li>There's no main function that is automatically executed\
      \ when your mod is started; instead, the engine instantiates a (specific) class\
      \ from your mod package (a <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\"\
      >Mutator</a> subclass for mutators, or a <a href=\"/Legacy:GameInfo_(UT)\" title=\"\
      Legacy:GameInfo (UT)\">GameInfo (UT)</a> subclass for game type mods, as specified\
      \ by you in your mod's <a href=\"/Legacy:INT_File\" title=\"Legacy:INT File\"\
      >INT File</a>) and executes its \"event\" methods as they apply.</li>\n<li>Related\
      \ classes (and other resources) are stored in <a href=\"/Legacy:Package\" title=\"\
      Legacy:Package\">packages</a>. Classes contained in a package are dynamically\
      \ bound to the class tree when the package is loaded.</li>\n</ul>\n<p>The <a\
      \ href=\"/Legacy:Operators\" title=\"Legacy:Operators\">operators</a> available\
      \ in UnrealScript are similar to the ones of C++. <a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">Global Function</a> available in all subclasses\
      \ of <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a> (that is,\
      \ everywhere) provide generic functionality for handling UnrealScript's built-in\
      \ <a href=\"/Legacy:Variable_Syntax\" title=\"Legacy:Variable Syntax\">data\
      \ types</a>.</p>\n<p>UnrealScript source code needs to be <a href=\"/Legacy:Compiling_With_UCC\"\
      \ title=\"Legacy:Compiling With UCC\">compiled</a> before it can be used in\
      \ the game. The compiler takes source code and any other resources referenced\
      \ from your source code (like textures and sounds) and creates a code package.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Note\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Note</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Related_Topics_2\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#Comments\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Comments</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_CPlusPlus_Programmers?section=1\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a></li>\n<li><a href=\"\
      /Legacy:UnrealScript_Language_Reference\" title=\"Legacy:UnrealScript Language\
      \ Reference\">UnrealScript Language Reference</a></li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Note\">Note</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_CPlusPlus_Programmers?section=2\"\
      \ title=\"Edit section: Note\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The name of this page is a result of the limitations\
      \ of the UseModWiki script. Both [[Legacy:UnrealScript For CPlusPlus Programmers|UnrealScript\
      \ for CPlusPlus Programmers]] and [[Legacy:UnrealScript For C++ Programmers|UnrealScript\
      \ for C++ Programmers]] are valid links to it.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics_2\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_CPlusPlus_Programmers?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a></li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_CPlusPlus_Programmers?section=4\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Mychaeel:</b> Just some notes so far. Feel free\
      \ to rearrange and elaborate.</p>\n<p><b>Heinz57:</b> I edited the previous\
      \ version of this page to elaborate on the scope of variables and functions.\
      \ Correct me if I'm wrong, but, as far as I can tell it is possible to have\
      \ variables and functions whose scope is <i>global</i> in UnrealScript. See\
      \ the <a href=\"/Legacy:UnrealScript_Language_Reference\" title=\"Legacy:UnrealScript\
      \ Language Reference\">UnrealScript Language Reference</a> under Variables&#160;:-).\
      \ Also, in terms of global scope, keep in mind that I used the term Object,\
      \ rather than Class in describing scope, because a global variable can be declared\
      \ within a <tt>struct</tt> that same as within a Class.</p>\n<p><b>Wormbo:</b>\
      \ Actually you can declare functions and class variables as private or protected\
      \ if you don't want them to be public.</p>\n<p><b>Heinz57:</b> My mistake. I\
      \ was actually just editing this page to make the correction, and got a conflict,\
      \ because of your edit. Thanks Wormbo! Also, another thing I shouldn't have\
      \ spoke so soon about: The term <i>Global</i> can be interpreted a couple of\
      \ ways (in general OO terms): a function or variable could be said to be Global\
      \ to a particular Object (the one it was declared in), or to all objects. It\
      \ appears that, according to the <a href=\"/Legacy:Global_Function\" title=\"\
      Legacy:Global Function\">Global Function</a> page, in UnrealScript Global is\
      \ thought of as the latter. Mychaeel had previously hinted that functions and\
      \ variables could not be global. Could you elaborate?</p>\n<p><b>Mychaeel:</b>\
      \ On <a href=\"/Legacy:UnrealScript_Language_Reference/Introduction\" title=\"\
      Legacy:UnrealScript Language Reference/Introduction\">UnrealScript Language\
      \ Reference/Introduction</a> Tim Sweeney himself says \"There are no system-\
      \ wide global functions or variables.\" That is exactly what I am referring\
      \ to – any variable you declare in UnrealScript is actually just a property\
      \ of a certain object. The only way to \"fake\" global variables is instantiating\
      \ an object and making it more or less globally known (like a map's <a href=\"\
      /Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">LevelInfo</a> that's known to\
      \ all actors via the \"Level\" reference declared in <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>).</p>\n<p>I don't understand the sentence\
      \ \"Variables must be declared for what they are\" in the text above, by the\
      \ way. I can only guess its meaning from the examples given directly following\
      \ it (so it basically boils down to \"Variables are explicitly scoped,\" but\
      \ in fact the use of \"local\" or \"var\" in UnrealScript variable declarations\
      \ is completely redundant with the <i>place</i> of a variable declaration).</p>\n\
      <p><b>Foxpaw:</b> I believe in C++ is is possible to make a pointer that is\
      \ just a pointer.. the type of thing is going to point to does not need to be\
      \ declared and it can change if the programming dictates it. (I think that is\
      \ the case. It has been YEARS since I've even looked at a program in C++, but\
      \ I used to use it a lot.) PS: I also changed the bit about optional variables..\
      \ any parameter can be optional, not just the last ones. To opt out of an optional\
      \ variable while setting the mandatory ones just put the two commas together,\
      \ like AFunction( Other,, Instigator,,, X ) In this example, three total parameters\
      \ have been skipped.</p>\n<p><b>Mychaeel:</b> So the following would compile?:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ MyOptionalParamTest<span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ iFirst, <span class=\"kw1\">optional</span> <span class=\"kw5\">int</span>\
      \ iSecond, <span class=\"kw5\">int</span> iThird<span class=\"br0\">)</span>;\n\
      <span class=\"co1\">//...</span>\nMyOptionalParamTest<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span>, , <span class=\"nu0\">3</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p>You're right that in C++ you can have an\
      \ untyped pointer; but in UnrealScript you strictly speaking don't even have\
      \ the notion of a pointer at all, merely object references (which certainly\
      \ are implemented as pointers internally). The closest equivalent to an untyped\
      \ pointer in UnrealScript would probably be an <a href=\"/Legacy:Object\" title=\"\
      Legacy:Object\">Object</a> reference since Object is among the ancestors of\
      \ any UnrealScript class. (Then you can <a href=\"/Legacy:Typecasting\" title=\"\
      Legacy:Typecasting\">typecast</a> that reference to whatever you like, as you\
      \ could with a C++ pointer.)</p>\n<p><b>Foxpaw:</b> I expected it would, after\
      \ testing it under UT2003 it doesn't seem that it will. I could have sworn that\
      \ I freely intermixed optional and regular variables in UT though.</p>\n\n<!--\
      \ \nNewPP limit report\nCPU time usage: 0.069 seconds\nReal time usage: 0.233\
      \ seconds\nPreprocessor visited node count: 27/1000000\nPreprocessor generated\
      \ node count: 60/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3354-0!*!0!!en!*!* and timestamp 20221117145509 and revision\
      \ id 40398\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:Garbage Collection"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Java Programmers"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference"
  - ns: 100
    exists: true
    name: "Legacy:Compiling With UCC"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Introduction"
  - ns: 100
    exists: true
    name: "Legacy:INT File"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Destroying Objects"
  - ns: 100
    exists: true
    name: "Legacy:Linked List/Existing Lists In Unreal Tournament"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:GameInfo (UT)"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_CPlusPlus_Programmers"
    byteoffset: 3499
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Note"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_CPlusPlus_Programmers"
    byteoffset: 3653
    anchor: "Note"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_CPlusPlus_Programmers"
    byteoffset: 3959
    anchor: "Related_Topics_2"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "4"
    index: "4"
    fromtitle: "Legacy:UnrealScript_For_CPlusPlus_Programmers"
    byteoffset: 4034
    anchor: "Comments"
  displaytitle: "Legacy:UnrealScript For CPlusPlus Programmers"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/C_Plus_Plus"
    name: "wikipedia:C Plus Plus"
  wikitext:
    text: "[[Legacy:UnrealScript|UnrealScript]] was expressly designed to give [[Wikipedia:C\
      \ Plus Plus|C++]] and Java programmers a warm feeling of familiarity. If anything\
      \ Unreal Script is more similar to Java than C++ (see [[Legacy:UnrealScript\
      \ For Java Programmers|UnrealScript For Java Programmers]]). The main differences\
      \ between C++ and UnrealScript are summarised below.\n\nJust like C++, Unreal\
      \ Script is an object-oriented language.  The notions of classes, inheritence,\
      \ objects, and overriding (redefining in a subclass) methods apply.  The main\
      \ differences in the behaviour of objects are listed below.\n* Multiple inheritance\
      \ is not supported.  A class may only have a single superclass.\n* All methods\
      \ are virtual.\n* All objects are created on the heap and handled only via references.\
      \  So every variable that points to an instance of an object is a pointer to\
      \ that object (a reference if you perfer).\n* There is no ''delete'' operator.\
      \  Deleting objects is automatically handled by a [[Legacy:Garbage Collection|garbage\
      \ collector]]; objects of class [[Legacy:Actor|actor]] and below must be manually\
      \ removed from the [[Legacy:Linked List/Existing Lists In Unreal Tournament|Actor\
      \ list]] by calling their [[Legacy:Destroying Objects|Destroy]] method before\
      \ they are discarded.  Objects are only garbage collected when the total number\
      \ of references to them reaches zero.\n* Regular methods cannot be overloaded\
      \ although operators can.  However, it is possible to make any or all of the\
      \ parameter(s) of a method [[Legacy:Function Syntax|optional]].\n* Unlike C++,\
      \ UnrealScript is a case-insensitive language (\"Function\" equals \"function\"\
      , \"LOG\" equals \"log\", and so on).\n\nOther differences between UnrealScript\
      \ and C++ are:\n* Structures created with the <code>struct</code> keyword and\
      \ classes are fundamentally different concepts in UnrealScript.  Structures\
      \ are always handled by value.  Classes are always handled by reference.\n*\
      \ All variables in UnrealScript ''must'' be explicitly scoped:\n** Instance\
      \ variables are available from anywhere within the object after their declaration\
      \ (ie. object scope) and are declared with the <tt>var</tt> keyword\n** Local\
      \ variables are available from anywhere within the function in which they're\
      \ declared, after their declaration, and are preceded with the <tt>local</tt>\
      \ keyword\n* Templates do not exist.\n* There's no main function that is automatically\
      \ executed when your mod is started; instead, the engine instantiates a (specific)\
      \ class from your mod package (a [[Legacy:Mutator|Mutator]] subclass for mutators,\
      \ or a [[Legacy:GameInfo (UT)|GameInfo (UT)]] subclass for game type mods, as\
      \ specified by you in your mod's [[Legacy:INT File|INT File]]) and executes\
      \ its \"event\" methods as they apply.\n* Related classes (and other resources)\
      \ are stored in [[Legacy:Package|package]]s.  Classes contained in a package\
      \ are dynamically bound to the class tree when the package is loaded.\n\nThe\
      \ [[Legacy:Operators|operators]] available in UnrealScript are similar to the\
      \ ones of C++.  [[Legacy:Global Function|Global Function]] available in all\
      \ subclasses of [[Legacy:Object|Object]] (that is, everywhere) provide generic\
      \ functionality for handling UnrealScript's built-in [[Legacy:Variable Syntax|data\
      \ types]].\n\nUnrealScript source code needs to be [[Legacy:Compiling With UCC|compiled]]\
      \ before it can be used in the game.  The compiler takes source code and any\
      \ other resources referenced from your source code (like textures and sounds)\
      \ and creates a code package.\n\n==Related Topics ==\n\n* [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]]\n* [[Legacy:UnrealScript Language Reference|UnrealScript\
      \ Language Reference]]\n\n==Note ==\n\nThe name of this page is a result of\
      \ the limitations of the UseModWiki script. Both <nowiki>[[Legacy:UnrealScript\
      \ For CPlusPlus Programmers|UnrealScript for CPlusPlus Programmers]] and [[Legacy:UnrealScript\
      \ For C++ Programmers|UnrealScript for C++ Programmers]]</nowiki> are valid\
      \ links to it.\n\n==Related Topics==\n* [[Legacy:UnrealScript Lessons|UnrealScript\
      \ Lessons]]\n\n==Comments==\n\n'''Mychaeel:'''  Just some notes so far.  Feel\
      \ free to rearrange and elaborate.\n\n'''Heinz57:'''  I edited the previous\
      \ version of this page to elaborate on the scope of variables and functions.\
      \  Correct me if I'm wrong, but, as far as I can tell it is possible to have\
      \ variables and functions whose scope is ''global'' in UnrealScript.  See the\
      \ [[Legacy:UnrealScript Language Reference|UnrealScript Language Reference]]\
      \ under Variables :-). Also, in terms of global scope, keep in mind that I used\
      \ the term Object, rather than Class in describing scope, because a global variable\
      \ can be declared within a <tt>struct</tt> that same as within a Class.\n\n\
      '''Wormbo:''' Actually you can declare functions and class variables as private\
      \ or protected if you don't want them to be public.\n\n'''Heinz57:'''  My mistake.\
      \  I was actually just editing this page to make the correction, and got a conflict,\
      \ because of your edit.  Thanks Wormbo!  Also, another thing I shouldn't have\
      \ spoke so soon about: The term ''Global'' can be interpreted a couple of ways\
      \ (in general OO terms): a function or variable could be said to be Global to\
      \ a particular Object (the one it was declared in), or to all objects.  It appears\
      \ that, according to the [[Legacy:Global Function|Global Function]] page, in\
      \ UnrealScript Global is thought of as the latter.  Mychaeel had previously\
      \ hinted that functions and variables could not be global.  Could you elaborate?\n\
      \n'''Mychaeel:''' On [[Legacy:UnrealScript Language Reference/Introduction|UnrealScript\
      \ Language Reference/Introduction]] Tim Sweeney himself says \"There are no\
      \ system- wide global functions or variables.\"  That is exactly what I am referring\
      \ to &ndash; any variable you declare in UnrealScript is actually just a property\
      \ of a certain object.  The only way to \"fake\" global variables is instantiating\
      \ an object and making it more or less globally known (like a map's [[Legacy:LevelInfo|LevelInfo]]\
      \ that's known to all actors via the \"Level\" reference declared in [[Legacy:Actor|Actor]]).\n\
      \nI don't understand the sentence \"Variables must be declared for what they\
      \ are\" in the text above, by the way.  I can only guess its meaning from the\
      \ examples given directly following it (so it basically boils down to \"Variables\
      \ are explicitly scoped,\" but in fact the use of \"local\" or \"var\" in UnrealScript\
      \ variable declarations is completely redundant with the ''place'' of a variable\
      \ declaration).\n\n'''Foxpaw:''' I believe in C++ is is possible to make a pointer\
      \ that is just a pointer.. the type of thing is going to point to does not need\
      \ to be declared and it can change if the programming dictates it. (I think\
      \ that is the case. It has been YEARS since I've even looked at a program in\
      \ C++, but I used to use it a lot.) PS: I also changed the bit about optional\
      \ variables.. any parameter can be optional, not just the last ones. To opt\
      \ out of an optional variable while setting the mandatory ones just put the\
      \ two commas together, like AFunction( Other,, Instigator,,, X ) In this example,\
      \ three total parameters have been skipped.\n\n'''Mychaeel:''' So the following\
      \ would compile?:\n\n<uscript>\nfunction MyOptionalParamTest(int iFirst, optional\
      \ int iSecond, int iThird);\n//...\nMyOptionalParamTest(1, , 3);\n</uscript>\n\
      \nYou're right that in C++ you can have an untyped pointer; but in UnrealScript\
      \ you strictly speaking don't even have the notion of a pointer at all, merely\
      \ object references (which certainly are implemented as pointers internally).\
      \  The closest equivalent to an untyped pointer in UnrealScript would probably\
      \ be an [[Legacy:Object|Object]] reference since Object is among the ancestors\
      \ of any UnrealScript class.  (Then you can [[Legacy:Typecasting|typecast]]\
      \ that reference to whatever you like, as you could with a C++ pointer.)\n\n\
      '''Foxpaw:''' I expected it would, after testing it under UT2003 it doesn't\
      \ seem that it will. I could have sworn that I freely intermixed optional and\
      \ regular variables in UT though."
  properties: []
  revId: 40398
name: "Legacy:UnrealScript For CPlusPlus Programmers"
revision:
  revid: 40398
  parentid: 40397
  user: "Unrealomega"
  timestamp: 1262816221.000000000
  comment: "Misread."
timestamp: 1668764388.145702000
