---
parse:
  title: "Legacy:UnrealScript For Java Programmers"
  text:
    text: "<p>Notes for <a href=\"http://en.wikipedia.org/wiki/Java_programming_language\"\
      \ class=\"extiw\" title=\"wikipedia:Java programming language\">Java</a> developers:</p>\n\
      <h2><span class=\"mw-headline\" id=\"Basics\">Basics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Java_Programmers?section=1\"\
      \ title=\"Edit section: Basics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li>UnrealScript is not case sensitive (except\
      \ for the content of string variables)</li>\n<li>Variables are implicitly initialized\
      \ with a null value (e.g. 0, \"\", None or the first element of an enum) and\
      \ cannot be initialized explicitely except for class variables. (see <a href=\"\
      /Legacy:Default_Properties\" title=\"Legacy:Default Properties\">Default Properties</a>)</li>\n\
      <li>There are no Object versions of the primitive <a href=\"/Legacy:Variable_Type\"\
      \ title=\"Legacy:Variable Type\">variable types</a></li>\n<li>String is a primitive\
      \ type, not an Object</li>\n<li>Arrays, whether static or dynamic, and structs\
      \ are always passed by value, i.e. copied</li>\n<li>Enums are \"glorified bytes\"\
      , not special objects like in Java 5.0</li>\n<li><a href=\"/Legacy:Function_Syntax\"\
      \ title=\"Legacy:Function Syntax\">Function</a> parameters and variable assignment\
      \ work by value, like in Java. (Not even the 'out' parameter modifier changes\
      \ this! It merely copies the parameter's new value back after the function returns.)</li>\n\
      <li>Function parameters can be optional if they are the last parameter or are\
      \ only followed by optional parameters.</li>\n<li>Class variables, enums and\
      \ structs must be declared above any function declarations.</li>\n<li>Local\
      \ variables must be declared at the beginning of a function before any executable\
      \ code statements.</li>\n<li>No Java 5.0 features like generics, annotations\
      \ or the '...' syntax for function parameters</li>\n<li>UnrealScript is strictly\
      \ single inheritance without interface classes, it does have a way to declare\
      \ nested classes, though. (see <a href=\"/Legacy:Within\" title=\"Legacy:Within\"\
      >Within</a> and <a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\"\
      >Class Syntax</a>)</li>\n<li><a href=\"/Legacy:State\" title=\"Legacy:State\"\
      >States</a> and state code</li>\n<li>Functions cannot be overloaded, only overridden</li>\n\
      <li>Calls to super class functions can be used anywhere within a class and may\
      \ not only point to the direct super class, but also to any of its ancestors,\
      \ as long as the specified class implements or inherits the function to call.</li>\n\
      <li>\"Abstract\" functions are identical to functions with and empty code block\
      \ and are allowed in non-abstract classes.</li>\n<li><code>vect(x,y,z)</code>\
      \ and <code>rot(p,y,r)</code> are <i>literals</i> for vector and rotator structs\
      \ respectively. They are not function calls and only accept float and int literals\
      \ respectively as parameters.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"\
      Initialization\">Initialization</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Java_Programmers?section=2\"\
      \ title=\"Edit section: Initialization\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Unlike most java libraries, there is no true initialization\
      \ hook outside of the <a href=\"/Legacy:Default_Properties\" title=\"Legacy:Default\
      \ Properties\">default properties</a> section for Actor classes. DefaultProperties\
      \ initialization works for primitives and passed-by-value complex objects only.\
      \ You cannot configure complex class instances there and pass them by reference.\
      \ If you need to initialize a complex object, you can do so in Pre/Post begin\
      \ play–but those methods are not called in the editor, so they can't be used\
      \ to setup editable defaults.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Java_Programmers?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a></li>\n</ul>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.024 seconds\nReal time usage: 0.025 seconds\n\
      Preprocessor visited node count: 11/1000000\nPreprocessor generated node count:\
      \ 16/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size:\
      \ 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3456-0!*!0!!*!*!* and timestamp 20221118015255 and revision\
      \ id 8886\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: true
    name: "Legacy:Within"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Basics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_Java_Programmers"
    byteoffset: 68
    anchor: "Basics"
  - toclevel: 1
    level: "2"
    line: "Initialization"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_Java_Programmers"
    byteoffset: 2161
    anchor: "Initialization"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_Java_Programmers"
    byteoffset: 2699
    anchor: "Related_Topics"
  displaytitle: "Legacy:UnrealScript For Java Programmers"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Java_programming_language"
    name: "wikipedia:Java programming language"
  wikitext:
    text: "Notes for [[Wikipedia:Java programming language|Java]] developers:\n\n\
      ==Basics==\n\n* UnrealScript is not case sensitive (except for the content of\
      \ string variables)\n* Variables are implicitly initialized with a null value\
      \ (e.g. 0, \"\", None or the first element of an enum) and cannot be initialized\
      \ explicitely except for class variables. (see [[Legacy:Default Properties|Default\
      \ Properties]])\n* There are no Object versions of the primitive [[Legacy:Variable\
      \ Type|variable type]]s\n* String is a primitive type, not an Object\n* Arrays,\
      \ whether static or dynamic, and structs are always passed by value, i.e. copied\n\
      * Enums are \"glorified bytes\", not special objects like in Java 5.0\n* [[Legacy:Function_Syntax|Function]]\
      \ parameters and variable assignment work by value, like in Java. (Not even\
      \ the 'out' parameter modifier changes this! It merely copies the parameter's\
      \ new value back after the function returns.)\n* Function parameters can be\
      \ optional if they are the last parameter or are only followed by optional parameters.\n\
      * Class variables, enums and structs must be declared above any function declarations.\n\
      * Local variables must be declared at the beginning of a function before any\
      \ executable code statements.\n* No Java 5.0 features like generics, annotations\
      \ or the '...' syntax for function parameters\n* UnrealScript is strictly single\
      \ inheritance without interface classes, it does have a way to declare nested\
      \ classes, though. (see [[Legacy:Within|Within]] and [[Legacy:Class Syntax|Class\
      \ Syntax]])\n* [[Legacy:State|State]]s and state code\n* Functions cannot be\
      \ overloaded, only overridden\n* Calls to super class functions can be used\
      \ anywhere within a class and may not only point to the direct super class,\
      \ but also to any of its ancestors, as long as the specified class implements\
      \ or inherits the function to call.\n* \"Abstract\" functions are identical\
      \ to functions with and empty code block and are allowed in non-abstract classes.\n\
      * <code>vect(x,y,z)</code> and <code>rot(p,y,r)</code> are ''literals'' for\
      \ vector and rotator structs respectively. They are not function calls and only\
      \ accept float and int literals respectively as parameters.\n\n==Initialization==\n\
      \nUnlike most java libraries, there is no true initialization hook outside of\
      \ the [[Legacy:Default Properties|default properties]] section for Actor classes.\
      \  DefaultProperties initialization works for primitives and passed-by-value\
      \ complex objects only. You cannot configure complex class instances there and\
      \ pass them by reference. If you need to initialize a complex object, you can\
      \ do so in Pre/Post begin play&ndash;but those methods are not called in the\
      \ editor, so they can't be used to setup editable defaults.\n\n==Related Topics==\n\
      * [[Legacy:UnrealScript Lessons|UnrealScript Lessons]]"
  properties: []
  revId: 8886
name: "Legacy:UnrealScript For Java Programmers"
revision:
  revid: 8886
  parentid: 8887
  user: "El Muerte"
  timestamp: 1144361266.000000000
  comment: "*revert"
timestamp: 1668764326.730455000
