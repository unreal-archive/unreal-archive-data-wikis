---
parse:
  title: "Legacy:Base64"
  text:
    text: "<p><a href=\"http://en.wikipedia.org/wiki/Base64\" class=\"extiw\" title=\"\
      wikipedia:Base64\">Wikipedia:Base64</a> is a data encoding scheme whereby binary-encoded\
      \ data is converted to printable ASCII characters. It is defined as a MIME content\
      \ transfer encoding for use in internet e-mail. The only characters used are\
      \ the upper- and lower-case Roman alphabet characters (A-Z, a-z), the numerals\
      \ (0-9), and the \"+\" and \"/\" symbols, with the \"=\" symbol as a special\
      \ suffix code.</p>\n<p>Base64 is used in emails but also for basic HTTP authentication.\
      \ However, base64 is not even close to anything secure. In other words, don't\
      \ use it for securing information.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Code\">Code</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Base64?section=1\" title=\"Edit section: Code\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"coMULTI\">/**\n\tbase64 encode an input\
      \ array\n*/</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">function</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ Base64Encode<span class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>string<span\
      \ class=\"sy0\">&gt;</span> indata, <span class=\"kw1\">out</span> array<span\
      \ class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> B64Lookup<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span> array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\"\
      >&gt;</span> result;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\"\
      >int</span> i, dl, n;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\"\
      >string</span> res;\n\t<span class=\"kw1\">local</span> array<span class=\"\
      sy0\">&lt;</span>byte<span class=\"sy0\">&gt;</span> inp;\n\t<span class=\"\
      kw1\">local</span> array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> outp;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>B64Lookup.<span class=\"me0\">length</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"nu0\">64</span><span class=\"br0\">)</span> Base64EncodeLookupTable<span\
      \ class=\"br0\">(</span>B64Lookup<span class=\"br0\">)</span>;\n \n\t<span class=\"\
      co1\">// convert string to byte array</span>\n\t<span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>; n <span class=\"sy0\">&lt;</span> indata.<span class=\"me0\"\
      >length</span>; n<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\tres <span class=\"sy0\">=</span> indata<span\
      \ class=\"br0\">[</span>n<span class=\"br0\">]</span>;\n\t\toutp.<span class=\"\
      me0\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \t\tinp.<span class=\"me0\">length</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0</span>;\n\t\t<span class=\"kw2\">for</span> <span class=\"\
      br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i\
      \ <span class=\"sy0\">&lt;</span> <span class=\"kw3\">len</span><span class=\"\
      br0\">(</span>res<span class=\"br0\">)</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tinp<span class=\"\
      br0\">[</span>inp.<span class=\"me0\">length</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Asc</span><span class=\"\
      br0\">(</span><span class=\"kw3\">Mid</span><span class=\"br0\">(</span>res,\
      \ i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>;\n\t\t<span class=\"br0\">}</span>\n \n\t\tdl <span class=\"\
      sy0\">=</span> inp.<span class=\"me0\">length</span>;\n\t\t<span class=\"co1\"\
      >// fix byte array</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>dl<span class=\"sy0\">%</span>3<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tinp<span class=\"\
      br0\">[</span>inp.<span class=\"me0\">length</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t\tinp<span\
      \ class=\"br0\">[</span>inp.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\
      \t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>dl<span class=\"sy0\">%</span>3<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tinp<span class=\"\
      br0\">[</span>inp.<span class=\"me0\">length</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t<span class=\"\
      br0\">}</span>\n\t\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \t\t<span class=\"kw2\">while</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">&lt;</span> dl<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\toutp<span class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> B64Lookup<span class=\"\
      br0\">[</span><span class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"\
      nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;\n\t\t\
      \toutp<span class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> B64Lookup<span class=\"\
      br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span>inp<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&amp;</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span\
      \ class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span>\
      \ <span class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span class=\"\
      sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">4</span><span class=\"br0\"\
      >)</span><span class=\"br0\">]</span>;\n\t\t\toutp<span class=\"br0\">[</span>outp.<span\
      \ class=\"me0\">length</span><span class=\"br0\">]</span> <span class=\"sy0\"\
      >=</span> B64Lookup<span class=\"br0\">[</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span class=\"sy0\"\
      >+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"\
      sy0\">&amp;</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">2</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>inp<span\
      \ class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\"\
      >6</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;\n\t\t\toutp<span\
      \ class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> B64Lookup<span class=\"br0\">[</span><span\
      \ class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span class=\"sy0\"\
      >+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"\
      sy0\">&amp;</span><span class=\"nu0\">63</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">]</span>;\n\t\t\ti <span class=\"sy0\">+=</span> <span class=\"\
      nu0\">3</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"co1\">//\
      \ pad result</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>dl<span class=\"sy0\">%</span>3<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\toutp<span class=\"br0\">[</span>outp.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\"\
      >1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"=\"</span>;\n\t\t\toutp<span class=\"br0\">[</span>outp.<span class=\"\
      me0\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\
      =\"</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>dl<span class=\"sy0\"\
      >%</span>3<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"\
      nu0\">2</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\toutp<span class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">\"=\"</span>;\n\t\t<span\
      \ class=\"br0\">}</span>\n \n\t\tres <span class=\"sy0\">=</span> <span class=\"\
      st0\">\"\"</span>;\n\t\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"\
      sy0\">&lt;</span> outp.<span class=\"me0\">length</span>; i<span class=\"sy0\"\
      >++</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\
      \t\tres <span class=\"sy0\">=</span> res<span class=\"sy0\">$</span>outp<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n\t\t<span class=\"br0\"\
      >}</span>\n\t\tresult<span class=\"br0\">[</span>result.<span class=\"me0\"\
      >length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> res;\n\
      \t<span class=\"br0\">}</span>\n \n\t<span class=\"kw2\">return</span> result;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/**\n\tDecode a base64\
      \ encoded string\n*/</span>\n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">function</span> array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> Base64Decode<span class=\"br0\">(</span>array<span class=\"\
      sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> indata<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ result;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i, dl, n, padded;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\"\
      >string</span> res;\n\t<span class=\"kw1\">local</span> array<span class=\"\
      sy0\">&lt;</span>byte<span class=\"sy0\">&gt;</span> inp;\n\t<span class=\"\
      kw1\">local</span> array<span class=\"sy0\">&lt;</span>string<span class=\"\
      sy0\">&gt;</span> outp;\n \n\t<span class=\"co1\">// convert string to byte\
      \ array</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>n\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; n <span class=\"\
      sy0\">&lt;</span> indata.<span class=\"me0\">length</span>; n<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\tres <span class=\"sy0\">=</span> indata<span class=\"br0\">[</span>n<span\
      \ class=\"br0\">]</span>;\n\t\toutp.<span class=\"me0\">length</span> <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\tinp.<span class=\"\
      me0\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \t\tpadded <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t\
      <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ <span class=\"kw3\">len</span><span class=\"br0\">(</span>res<span class=\"\
      br0\">)</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \t\t<span class=\"br0\">{</span>\n\t\t\tdl <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">Asc</span><span class=\"br0\">(</span><span class=\"kw3\">Mid</span><span\
      \ class=\"br0\">(</span>res, i, <span class=\"nu0\">1</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n\t\t\t<span class=\"co1\">// convert\
      \ base64 ascii to base64 index</span>\n\t\t\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"br0\">(</span>dl <span class=\"sy0\">&gt;=</span>\
      \ <span class=\"nu0\">65</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span>dl <span class=\"sy0\">&lt;=</span>\
      \ <span class=\"nu0\">90</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> dl <span class=\"sy0\">-=</span> <span class=\"nu0\">65</span>; <span\
      \ class=\"co1\">// cap alpha</span>\n\t\t\t<span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dl\
      \ <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">97</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>dl\
      \ <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">122</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span> dl <span class=\"sy0\">-=</span>\
      \ <span class=\"nu0\">71</span>; <span class=\"co1\">// low alpha</span>\n\t\
      \t\t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span>dl <span class=\"sy0\">&gt;=</span>\
      \ <span class=\"nu0\">48</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span>dl <span class=\"sy0\">&lt;=</span>\
      \ <span class=\"nu0\">57</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> dl <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span>; <span\
      \ class=\"co1\">// digits</span>\n\t\t\t<span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>dl <span class=\"sy0\"\
      >==</span> <span class=\"nu0\">43</span><span class=\"br0\">)</span> dl <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">62</span>;\n\t\t\t<span class=\"\
      kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"br0\">(</span>dl\
      \ <span class=\"sy0\">==</span> <span class=\"nu0\">47</span><span class=\"\
      br0\">)</span> dl <span class=\"sy0\">=</span> <span class=\"nu0\">63</span>;\n\
      \t\t\t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>dl <span class=\"sy0\">==</span> <span class=\"nu0\">61</span><span\
      \ class=\"br0\">)</span> padded<span class=\"sy0\">++</span>;\n\t\t\tinp<span\
      \ class=\"br0\">[</span>inp.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> dl;\n\t\t<span class=\"br0\">}</span>\n\
      \ \n\t\tdl <span class=\"sy0\">=</span> inp.<span class=\"me0\">length</span>;\n\
      \t\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t<span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\"\
      >&lt;</span> dl<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\toutp<span class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">Chr</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"\
      nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span\
      \ class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span class=\"sy0\"\
      >+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"\
      sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n\t\t\toutp<span class=\"br0\">[</span>outp.<span\
      \ class=\"me0\">length</span><span class=\"br0\">]</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Chr</span><span class=\"br0\">(</span><span class=\"\
      br0\">(</span><span class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span\
      \ class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span\
      \ class=\"sy0\">&amp;</span><span class=\"nu0\">15</span><span class=\"br0\"\
      >)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">4</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>inp<span\
      \ class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\"\
      >2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\toutp<span\
      \ class=\"br0\">[</span>outp.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">Chr</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>inp<span\
      \ class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span\
      \ class=\"br0\">]</span><span class=\"sy0\">&amp;</span><span class=\"nu0\"\
      >3</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span\
      \ class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span>\
      \ <span class=\"br0\">(</span>inp<span class=\"br0\">[</span>i<span class=\"\
      sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\ti <span class=\"\
      sy0\">+=</span> <span class=\"nu0\">4</span>;\n\t\t<span class=\"br0\">}</span>\n\
      \t\toutp.<span class=\"me0\">length</span> <span class=\"sy0\">=</span> outp.<span\
      \ class=\"me0\">length</span><span class=\"sy0\">-</span>padded;\n \n\t\tres\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>;\n\t\t<span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> outp.<span\
      \ class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tres <span class=\"sy0\"\
      >=</span> res<span class=\"sy0\">$</span>outp<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>;\n\t\t<span class=\"br0\">}</span>\n\t\tresult<span\
      \ class=\"br0\">[</span>result.<span class=\"me0\">length</span><span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> res;\n\t<span class=\"br0\">}</span>\n\
      \ \n\t<span class=\"kw2\">return</span> result;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"coMULTI\">/**\n\tGenerate the base 64 encode lookup table\n\
      */</span>\n<span class=\"kw1\">static</span> <span class=\"kw1\">function</span>\
      \ Base64EncodeLookupTable<span class=\"br0\">(</span><span class=\"kw1\">out</span>\
      \ array<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span>\
      \ LookupTable<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n\t<span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> <span\
      \ class=\"nu0\">26</span>; i<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t\tLookupTable<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Chr</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span\
      \ class=\"nu0\">65</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\"\
      >}</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\"\
      >&lt;</span> <span class=\"nu0\">26</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tLookupTable<span\
      \ class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">26</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">Chr</span><span\
      \ class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">97</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\t<span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">10</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\tLookupTable<span class=\"br0\">[</span>i<span\
      \ class=\"sy0\">+</span><span class=\"nu0\">52</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Chr</span><span class=\"\
      br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">48</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"br0\">}</span>\n\tLookupTable<span\
      \ class=\"br0\">[</span><span class=\"nu0\">62</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span>;\n\tLookupTable<span\
      \ class=\"br0\">[</span><span class=\"nu0\">63</span><span class=\"br0\">]</span>\
      \ <span class=\"sy0\">=</span> <span class=\"st0\">\"/\"</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"License\"\
      >License</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Base64?section=2\" title=\"Edit section: License\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>This\
      \ code is part of the <a href=\"/Legacy:LibHTTP\" title=\"Legacy:LibHTTP\">LibHTTP</a>\
      \ package which is released under the <a href=\"/Legacy:LesserOpenUnrealModLicense\"\
      \ title=\"Legacy:LesserOpenUnrealModLicense\">LesserOpenUnrealModLicense</a></p>\n\
      <p>Copyright 2003/2004 Michiel \"<a href=\"/Legacy:El_Muerte\" title=\"Legacy:El\
      \ Muerte\" class=\"mw-redirect\">El Muerte</a>\" Hendriks</p>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Articles\">Related Articles</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Base64?section=3\"\
      \ title=\"Edit section: Related Articles\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.ietf.org/rfc/rfc1341.txt\">RFC 1341</a> → the MIME rfc explains\
      \ the base64 encoding algorithm</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.071 seconds\nReal time usage: 0.073 seconds\nPreprocessor visited\
      \ node count: 21/1000000\nPreprocessor generated node count: 44/1000000\nPost‐\
      expand include size: 6/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:648-0!*!0!!*!*!*\
      \ and timestamp 20221120203132 and revision id 1920\n -->\n"
  categories:
  - sortkey: "Base64"
    name: "Legacy_Algorithm"
  links:
  - ns: 100
    exists: true
    name: "Legacy:LesserOpenUnrealModLicense"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP"
  - ns: 100
    exists: true
    name: "Legacy:El Muerte"
  templates: []
  images: []
  externallinks:
  - "http://www.ietf.org/rfc/rfc1341.txt"
  sections:
  - toclevel: 1
    level: "2"
    line: "Code"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Base64"
    byteoffset: 561
    anchor: "Code"
  - toclevel: 1
    level: "2"
    line: "License"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Base64"
    byteoffset: 3446
    anchor: "License"
  - toclevel: 1
    level: "2"
    line: "Related Articles"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Base64"
    byteoffset: 3684
    anchor: "Related_Articles"
  displaytitle: "Legacy:Base64"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Base64"
    name: "wikipedia:Base64"
  wikitext:
    text: "[[Wikipedia:Base64]] is a data encoding scheme whereby binary-encoded data\
      \ is converted to printable ASCII characters. It is defined as a MIME content\
      \ transfer encoding for use in internet e-mail. The only characters used are\
      \ the upper- and lower-case Roman alphabet characters (A-Z, a-z), the numerals\
      \ (0-9), and the \"+\" and \"/\" symbols, with the \"=\" symbol as a special\
      \ suffix code.\n\nBase64 is used in emails but also for basic HTTP authentication.\
      \ However, base64 is not even close to anything secure. In other words, don't\
      \ use it for securing information.\n\n==Code==\n\n<uscript>\n/**\n\tbase64 encode\
      \ an input array\n*/\nstatic function array<string> Base64Encode(array<string>\
      \ indata, out array<string> B64Lookup)\n{\n\tlocal array<string> result;\n\t\
      local int i, dl, n;\n\tlocal string res;\n\tlocal array<byte> inp;\n\tlocal\
      \ array<string> outp;\n\n\tif (B64Lookup.length != 64) Base64EncodeLookupTable(B64Lookup);\n\
      \n\t// convert string to byte array\n\tfor (n = 0; n < indata.length; n++)\n\
      \t{\n\t\tres = indata[n];\n\t\toutp.length = 0;\n\t\tinp.length = 0;\n\t\tfor\
      \ (i = 0; i < len(res); i++)\n\t\t{\n\t\t\tinp[inp.length] = Asc(Mid(res, i,\
      \ 1));\n\t\t}\n\n\t\tdl = inp.length;\n\t\t// fix byte array\n\t\tif ((dl%3)\
      \ == 1)\n\t\t{\n\t\t\tinp[inp.length] = 0;\n\t\t\tinp[inp.length] = 0;\n\t\t\
      }\n\t\tif ((dl%3) == 2)\n\t\t{\n\t\t\tinp[inp.length] = 0;\n\t\t}\n\t\ti = 0;\n\
      \t\twhile (i < dl)\n\t\t{\n\t\t\toutp[outp.length] = B64Lookup[(inp[i] >> 2)];\n\
      \t\t\toutp[outp.length] = B64Lookup[((inp[i]&3)<<4) | (inp[i+1]>>4)];\n\t\t\t\
      outp[outp.length] = B64Lookup[((inp[i+1]&15)<<2) | (inp[i+2]>>6)];\n\t\t\toutp[outp.length]\
      \ = B64Lookup[(inp[i+2]&63)];\n\t\t\ti += 3;\n\t\t}\n\t\t// pad result\n\t\t\
      if ((dl%3) == 1)\n\t\t{\n\t\t\toutp[outp.length-1] = \"=\";\n\t\t\toutp[outp.length-2]\
      \ = \"=\";\n\t\t}\n\t\tif ((dl%3) == 2)\n\t\t{\n\t\t\toutp[outp.length-1] =\
      \ \"=\";\n\t\t}\n\n\t\tres = \"\";\n\t\tfor (i = 0; i < outp.length; i++)\n\t\
      \t{\n\t\t\tres = res$outp[i];\n\t\t}\n\t\tresult[result.length] = res;\n\t}\n\
      \n\treturn result;\n}\n\n/**\n\tDecode a base64 encoded string\n*/\nstatic function\
      \ array<string> Base64Decode(array<string> indata)\n{\n\tlocal array<string>\
      \ result;\n\tlocal int i, dl, n, padded;\n\tlocal string res;\n\tlocal array<byte>\
      \ inp;\n\tlocal array<string> outp;\n\n\t// convert string to byte array\n\t\
      for (n = 0; n < indata.length; n++)\n\t{\n\t\tres = indata[n];\n\t\toutp.length\
      \ = 0;\n\t\tinp.length = 0;\n\t\tpadded = 0;\n\t\tfor (i = 0; i < len(res);\
      \ i++)\n\t\t{\n\t\t\tdl = Asc(Mid(res, i, 1));\n\t\t\t// convert base64 ascii\
      \ to base64 index\n\t\t\tif ((dl >= 65) && (dl <= 90)) dl -= 65; // cap alpha\n\
      \t\t\telse if ((dl >= 97) && (dl <= 122)) dl -= 71; // low alpha\n\t\t\telse\
      \ if ((dl >= 48) && (dl <= 57)) dl += 4; // digits\n\t\t\telse if (dl == 43)\
      \ dl = 62;\n\t\t\telse if (dl == 47) dl = 63;\n\t\t\telse if (dl == 61) padded++;\n\
      \t\t\tinp[inp.length] = dl;\n\t\t}\n\n\t\tdl = inp.length;\n\t\ti = 0;\n\t\t\
      while (i < dl)\n\t\t{\n\t\t\toutp[outp.length] = Chr((inp[i] << 2) | (inp[i+1]\
      \ >> 4));\n\t\t\toutp[outp.length] = Chr(((inp[i+1]&15)<<4) | (inp[i+2]>>2));\n\
      \t\t\toutp[outp.length] = Chr(((inp[i+2]&3)<<6) | (inp[i+3]));\n\t\t\ti += 4;\n\
      \t\t}\n\t\toutp.length = outp.length-padded;\n\n\t\tres = \"\";\n\t\tfor (i\
      \ = 0; i < outp.length; i++)\n\t\t{\n\t\t\tres = res$outp[i];\n\t\t}\n\t\tresult[result.length]\
      \ = res;\n\t}\n\n\treturn result;\n}\n\n/**\n\tGenerate the base 64 encode lookup\
      \ table\n*/\nstatic function Base64EncodeLookupTable(out array<string> LookupTable)\n\
      {\n\tlocal int i;\n\tfor (i = 0; i < 26; i++)\n\t{\n\t\tLookupTable[i] = Chr(i+65);\n\
      \t}\n\tfor (i = 0; i < 26; i++)\n\t{\n\t\tLookupTable[i+26] = Chr(i+97);\n\t\
      }\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tLookupTable[i+52] = Chr(i+48);\n\t}\n\
      \tLookupTable[62] = \"+\";\n\tLookupTable[63] = \"/\";\n}\n</uscript>\n\n==License==\n\
      \nThis code is part of the [[Legacy:LibHTTP|LibHTTP]] package which is released\
      \ under the [[Legacy:LesserOpenUnrealModLicense|LesserOpenUnrealModLicense]]\n\
      \nCopyright 2003/2004 Michiel \"[[Legacy:El Muerte|El Muerte]]\" Hendriks\n\n\
      ==Related Articles==\n* [http://www.ietf.org/rfc/rfc1341.txt RFC 1341] &rarr;\
      \ the MIME rfc explains the base64 encoding algorithm\n\n[[Category:Legacy Algorithm|{{PAGENAME}}]]"
  properties: []
  revId: 1920
name: "Legacy:Base64"
revision:
  revid: 1920
  parentid: 0
  user: "El Muerte"
  timestamp: 1095783557.000000000
  comment: "*"
timestamp: 1668976032.814016000
