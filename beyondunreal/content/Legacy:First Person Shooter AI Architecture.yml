---
parse:
  title: "Legacy:First Person Shooter AI Architecture"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Preliminary_Description_and_Basic_Concepts\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Preliminary Description\
      \ and Basic Concepts</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Introduction\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">Introduction</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"\
      ><a href=\"#Overview:\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">Overview:</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#Principal_Game_AI_Components:\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Principal Game AI Components:</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-5\"><a href=\"#Pathfinding_and_the_Bot_Navigation_System:\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Pathfinding and\
      \ the Bot Navigation System:</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"\
      ><a href=\"#Realistic_Interaction_with_Moving_Objects_and_the_Physics_System:\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Realistic Interaction\
      \ with Moving Objects and the Physics System:</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-7\"><a href=\"#The_Agent_Movement_Control_Component:\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">The Agent Movement\
      \ Control Component:</span></a></li>\n<li class=\"toclevel-1 tocsection-8\"\
      ><a href=\"#The_Combat_Control_Component:\"><span class=\"tocnumber\">6</span>\
      \ <span class=\"toctext\">The Combat Control Component:</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-9\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Preliminary_Description_and_Basic_Concepts\"\
      >Preliminary Description and Basic Concepts</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=1\"\
      \ title=\"Edit section: Preliminary Description and Basic Concepts\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"\
      mw-headline\" id=\"Introduction\">Introduction</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=2\"\
      \ title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The information in this article is adapted from a\
      \ chapter in the recently published book, <b>\"AI Game Programming Wisdom\"\
      </b>, published 2002. It was written by Paul Tozour, and entitled, \"First-Person\
      \ Shooter AI Archtecture\". The author prefaces the article with this statement:</p>\n\
      <p>This article describes a generic AI architecture for the typical first-person\
      \ shooter (\"FPS\") game such as any of the titles associated with the <i>Quake</i>,\
      \ <i>Unreal</i>, or <i>Half-Life</i> engines.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Overview:\">Overview:</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=3\"\
      \ title=\"Edit section: Overview:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Legacy:Artificial_Intelligence\" title=\"\
      Legacy:Artificial Intelligence\">Artificial Intelligence</a> (AI) in First Person\
      \ Shooter (FPS) game architectures tends be organized and controlled as seperate,\
      \ individual agents, rather than coordinated teams that are synchronized to\
      \ the same strategy playbook. The FPS Artificial Intelligence architecture is\
      \ organized into a hierarchy with four major integrated components: <b>Behavior</b>,\
      \ <b>Movement</b>, <b>Animation</b>, and <b>Combat</b>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Principal_Game_AI_Components:\">Principal Game AI Components:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=4\" title=\"\
      Edit section: Principal Game AI Components:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <b>movement</b> component is tasked with determining\
      \ how the character should move in the game world. The movement AI is what makes\
      \ the character avoid obstacles, follow navigation system nodes, and find paths\
      \ through the complex environments to reach its destination. The movement subsystem\
      \ never determines where to move, only how to do so. It simply receives commands\
      \ from other components telling it where to move, and it is responsible for\
      \ making sure the character moves to that point in an appropriate manner.</p>\n\
      <p>The <b>animation</b> component is responsible for controlling the game bot’\
      s skeletal articulation and display appearance during gameplay. Its major role\
      \ is selecting, parameterizing, and playing character animation sequences. It\
      \ is also responsible for generating animations that cannot be played from pre-assembled\
      \ animation sequences. Since we can’t tell in advance in what direction a character\
      \ will face in a given scene, we need a method of integrated control over the\
      \ real-time animation to ensure that the character behaves correctly.</p>\n\
      <p><br />\nThe <b>combat</b> component is assigned the role of assessing the\
      \ character’s current tactical situation, selecting tactics in combat, aiming\
      \ and firing at opponents, deciding when to pick up a new weapon, and so on.\
      \ Since combat is the core gameplay dynamic in most FPS games, the performance\
      \ of this subsystem will be crucial to the player’s perception of the AI.</p>\n\
      <p>The <b>behavior</b> component is the integrating framework that determines\
      \ the character’s current goal, orders, state, and immediate destination, and\
      \ communicates with the other subsystems to coordinate physical motion towards\
      \ a determined staging area. It is the highest-level AI subsystem and sits on\
      \ top of all the other subsystems.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Pathfinding_and_the_Bot_Navigation_System:\">Pathfinding and the Bot Navigation\
      \ System:</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=5\"\
      \ title=\"Edit section: Pathfinding and the Bot Navigation System:\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Fundamental to the\
      \ movement AI system is the pathfinding component. This system is responsible\
      \ for finding a Bot path from any coordinate location in the level to any other.\
      \ Given a starting point, a state designation, and a goal or destination, it\
      \ will find a series of waypoints that comprise an optimal path to some intermediate\
      \ destination. It is possible that it will report that no path can be found,\
      \ or will generate an apparent error in its repertoire of simulated human motion.\
      \ The game AI pathfinder in <i>Unreal Tournament</i> uses a pre-computed data\
      \ structure for guiding movement. This is a complex algorithm-controlled assemblage\
      \ of linked lists, <a href=\"/Legacy:NavigationPoint\" title=\"Legacy:NavigationPoint\"\
      >NavigationPoints</a>, and Binary Space Partitioning (<a href=\"/Legacy:BSP_Tree\"\
      \ title=\"Legacy:BSP Tree\">BSP</a>) collision data. The FPS game world is relatively\
      \ static, so it makes sense to pre-generate a database that is highly optimized\
      \ for performing fast pathfinding in a particular section of the game world.\
      \ At runtime, the pathfinding database is initialized and parameterized. The\
      \ performance of this directed navigation system search is highly correlated\
      \ with how appropriately the pathfinding database is optimized.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Realistic_Interaction_with_Moving_Objects_and_the_Physics_System:\"\
      >Realistic Interaction with Moving Objects and the Physics System:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=6\" title=\"\
      Edit section: Realistic Interaction with Moving Objects and the Physics System:\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ obvious weakness with the global pathfinding system is that it does not correctly\
      \ interact with dynamic obstacles. Practical solutions to the problem of efficient\
      \ in-game agent avoidance of moving obstacles are built on communication between\
      \ the physics system and the local pathfinding system. Since dynamic obstacles\
      \ can be moved at any time, the AI needs to continually query the physics system\
      \ for the presence of dynamic obstacles in any area it intends to move through.\
      \ This designated the local pathfinding system, and is an essential quality\
      \ of any object capable of three dimensional movement in the level.</p>\n<p>A\
      \ local pathfinder does not replace a global pathfinder; the two are integrated\
      \ and each subsystem is optimized for a different part of the problem. The local\
      \ pathfinding system is built on top of the global pathfinder. When an AI needs\
      \ to move from point A to point B, its movement AI first queries the global\
      \ pathfinding system, and if it’s successful, the global pathfinder will return\
      \ an ordered list of points that constitute a path from A to B. The AI can then\
      \ use the global path as a guideline, and use the local pathfinding system to\
      \ find a path to each successive waypoint in that global path, avoiding any\
      \ obstacles that it might happen to interact with along the way.</p>\n<p>Fundamentally,\
      \ a local pathfinder needs to be based on a search algorithm which constrains\
      \ possible initial directions to the immediate area near the origin of the search.\
      \ This technique will ensure that the optimal path is found if such a path exists.\
      \ A good way to do this is to perform sampling (for example, querying the physics\
      \ system for the presence of obstacles) using a fixed size grid oriented toward\
      \ the destination point. However, keep in mind that sampling can be computationally\
      \ expensive if it’s performed too often, so it’s very important to take steps\
      \ to minimize the amount of sampling that the system needs to perform in any\
      \ given local search.</p>\n<h2><span class=\"mw-headline\" id=\"The_Agent_Movement_Control_Component:\"\
      >The Agent Movement Control Component:</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=7\"\
      \ title=\"Edit section: The Agent Movement Control Component:\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The movement AI\
      \ acts as the client of all the other parts of the AI; that is, it is a subsystem\
      \ that performs arbitrary tasks assigned to it by higher-level components. Those\
      \ tasks are issued in the form of discrete movement commands, such as, “move\
      \ to point (X,Y,Z)”, “move to object B”, “turn to face point (X,Y,Z)”, or “\
      stop moving”.</p>\n<p>The movement AI will be executing exactly one of those\
      \ movement commands at any given moment. We describe the movement component\
      \ as the object that “owns” the current movement command.</p>\n<p>Once we have\
      \ done this, we can design the appropriate algorithms to execute the movement\
      \ commands into the individual movement command objects themselves. A command\
      \ such as, “move to (X,Y,Z)”, for example, will be responsible for using the\
      \ global and local pathfinding systems to find and execute a path to (X,Y,Z),\
      \ and making the appropriate engine calls to ensure that the character moves\
      \ along the specified path. If no path is available, or when the AI entity reaches\
      \ the end of its path, the movement command reports back to the movement controller\
      \ so that it can be garbage-collected.</p>\n<p>This technique is also useful\
      \ for handling different types of movement. Different types of movement commands\
      \ can handle tasks such as walking, running, swimming, and dying, with appropriate\
      \ parameters to determine the AI agent’s acceleration, movement range, turn\
      \ rate, animations, and other movement characteristics.</p>\n<h2><span class=\"\
      mw-headline\" id=\"The_Combat_Control_Component:\">The Combat Control Component:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=8\" title=\"\
      Edit section: The Combat Control Component:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>When an AI initiates combat, control for the majority\
      \ of its behaviors is transferred to a combat control component. The combat\
      \ controller is responsible for all combat-related tasks, such as selecting\
      \ an opponent, selecting a weapon, maneuvering, firing, and searching for additional\
      \ weapons and ammo.</p>\n<p>The most difficult part of the combat problem is\
      \ determining how to intelligently assess the current situation, and select\
      \ and execute an appropriate tactic in response.</p>\n<p>The challenge comes\
      \ from the extraordinary difficulty of getting an AI entity to understand the\
      \ significance of the spatial configuration of any given area. Any human can\
      \ glance at his current surroundings and immediately form an assessment of the\
      \ space.</p>\n<hr />\n<p>Go on to the next part: <a href=\"/Legacy:FPS_AI_Architecture,_Continued\"\
      \ title=\"Legacy:FPS AI Architecture, Continued\">FPS AI Architecture, Continued</a></p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:First_Person_Shooter_AI_Architecture?section=9\" title=\"\
      Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Artificial_Intelligence\"\
      \ title=\"Legacy:Artificial Intelligence\">Artificial Intelligence</a> – Super\
      \ Topic for all AI (bots, Monsters, NPCs, etc)</li>\n<li><a href=\"/Legacy:Introduction_To_Game_AI\"\
      \ title=\"Legacy:Introduction To Game AI\">Introduction to Game AI</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.035 seconds\nReal time\
      \ usage: 0.036 seconds\nPreprocessor visited node count: 34/1000000\nPreprocessor\
      \ generated node count: 40/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:1227-0!*!0!!en!*!* and timestamp\
      \ 20221118024656 and revision id 3170\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:NavigationPoint"
  - ns: 100
    exists: true
    name: "Legacy:FPS AI Architecture, Continued"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Game AI"
  - ns: 100
    exists: true
    name: "Legacy:BSP Tree"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Preliminary Description and Basic Concepts"
    number: "1"
    index: "1"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 0
    anchor: "Preliminary_Description_and_Basic_Concepts"
  - toclevel: 2
    level: "3"
    line: "Introduction"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 48
    anchor: "Introduction"
  - toclevel: 2
    level: "3"
    line: "Overview:"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 544
    anchor: "Overview:"
  - toclevel: 1
    level: "2"
    line: "Principal Game AI Components:"
    number: "2"
    index: "4"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 1006
    anchor: "Principal_Game_AI_Components:"
  - toclevel: 1
    level: "2"
    line: "Pathfinding and the Bot Navigation System:"
    number: "3"
    index: "5"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 2810
    anchor: "Pathfinding_and_the_Bot_Navigation_System:"
  - toclevel: 1
    level: "2"
    line: "Realistic Interaction with Moving Objects and the Physics System:"
    number: "4"
    index: "6"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 4034
    anchor: "Realistic_Interaction_with_Moving_Objects_and_the_Physics_System:"
  - toclevel: 1
    level: "2"
    line: "The Agent Movement Control Component:"
    number: "5"
    index: "7"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 6072
    anchor: "The_Agent_Movement_Control_Component:"
  - toclevel: 1
    level: "2"
    line: "The Combat Control Component:"
    number: "6"
    index: "8"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 7551
    anchor: "The_Combat_Control_Component:"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "7"
    index: "9"
    fromtitle: "Legacy:First_Person_Shooter_AI_Architecture"
    byteoffset: 8421
    anchor: "Related_Topics"
  displaytitle: "Legacy:First Person Shooter AI Architecture"
  iwlinks: []
  wikitext:
    text: "==Preliminary Description and Basic Concepts==\n\n===Introduction===\n\n\
      The information in this article is adapted from a chapter in the recently published\
      \ book, '''\"AI Game Programming Wisdom\"''', published 2002. It was written\
      \ by Paul Tozour, and entitled, \"First-Person Shooter AI Archtecture\". The\
      \ author prefaces the article with this statement: \n\nThis article describes\
      \ a generic AI architecture for the typical first-person shooter (\"FPS\") game\
      \ such as any of the titles associated with the ''Quake'', ''Unreal'', or ''Half-Life''\
      \ engines.\n\n===Overview:===\n\n[[Legacy:Artificial Intelligence|Artificial\
      \ Intelligence]] (AI) in First Person Shooter (FPS) game architectures tends\
      \ be organized and controlled as seperate, individual agents, rather than coordinated\
      \ teams that are synchronized to the same strategy playbook. The FPS Artificial\
      \ Intelligence architecture is organized into a hierarchy with four major integrated\
      \ components: '''Behavior''', '''Movement''', '''Animation''', and '''Combat'''.\
      \ \n\n==Principal Game AI Components:==\n\nThe '''movement''' component is tasked\
      \ with determining how the character should move in the game world. The movement\
      \ AI is what makes the character avoid obstacles, follow navigation system nodes,\
      \ and find paths through the complex environments to reach its destination.\
      \ The movement subsystem never determines where to move, only how to do so.\
      \ It simply receives commands from other components telling it where to move,\
      \ and it is responsible for making sure the character moves to that point in\
      \ an appropriate manner.\n\nThe '''animation''' component is responsible for\
      \ controlling the game bot’s skeletal articulation and display appearance during\
      \ gameplay. Its major role is selecting, parameterizing, and playing character\
      \ animation sequences. It is also responsible for generating animations that\
      \ cannot be played from pre-assembled animation sequences. Since we can’t tell\
      \ in advance in what direction a character will face in a given scene, we need\
      \ a method of integrated control over the real-time animation to ensure that\
      \ the character behaves correctly.\n \n\nThe '''combat''' component is assigned\
      \ the role of assessing the character’s current tactical situation, selecting\
      \ tactics in combat, aiming and firing at opponents, deciding when to pick up\
      \ a new weapon, and so on. Since combat is the core gameplay dynamic in most\
      \ FPS games, the performance of this subsystem will be crucial to the player’\
      s perception of the AI.\n\nThe '''behavior''' component is the integrating framework\
      \ that determines the character’s current goal, orders, state, and immediate\
      \ destination, and communicates with the other subsystems to coordinate physical\
      \ motion towards a determined staging area. It is the highest-level AI subsystem\
      \ and sits on top of all the other subsystems.\n\n==Pathfinding and the Bot\
      \ Navigation System:==\n\nFundamental to the movement AI system is the pathfinding\
      \ component. This system is responsible for finding a Bot path from any coordinate\
      \ location in the level to any other. Given a starting point, a state designation,\
      \ and a goal or destination, it will find a series of waypoints that comprise\
      \ an optimal path to some intermediate destination. It is possible that it will\
      \ report that no path can be found, or will generate an apparent error in its\
      \ repertoire of simulated human motion. The game AI pathfinder in ''Unreal Tournament''\
      \ uses a pre-computed data structure for guiding movement. This is a complex\
      \ algorithm-controlled assemblage of linked lists, [[Legacy:NavigationPoint|NavigationPoint]]s,\
      \ and Binary Space Partitioning ([[Legacy:BSP Tree|BSP]]) collision data. The\
      \ FPS game world is relatively static, so it makes sense to pre-generate a database\
      \ that is highly optimized for performing fast pathfinding in a particular section\
      \ of the game world. At runtime, the pathfinding database is initialized and\
      \ parameterized. The performance of this directed navigation system search is\
      \ highly correlated with how appropriately the pathfinding database is optimized.\
      \ \n\n==Realistic Interaction with Moving Objects and the Physics System:==\n\
      \nThe obvious weakness with the global pathfinding system is that it does not\
      \ correctly interact with dynamic obstacles. Practical solutions to the problem\
      \ of efficient in-game agent avoidance of moving obstacles are built on communication\
      \ between the physics system and the local pathfinding system. Since dynamic\
      \ obstacles can be moved at any time, the AI needs to continually query the\
      \ physics system for the presence of dynamic obstacles in any area it intends\
      \ to move through. This designated the local pathfinding system, and is an essential\
      \ quality of any object capable of three dimensional movement in the level.\n\
      \nA local pathfinder does not replace a global pathfinder; the two are integrated\
      \ and each subsystem is optimized for a different part of the problem. The local\
      \ pathfinding system is built on top of the global pathfinder. When an AI needs\
      \ to move from point A to point B, its movement AI first queries the global\
      \ pathfinding system, and if it’s successful, the global pathfinder will return\
      \ an ordered list of points that constitute a path from A to B. The AI can then\
      \ use the global path as a guideline, and use the local pathfinding system to\
      \ find a path to each successive waypoint in that global path, avoiding any\
      \ obstacles that it might happen to interact with along the way.\n\nFundamentally,\
      \ a local pathfinder needs to be based on a search algorithm which constrains\
      \ possible initial directions to the immediate area near the origin of the search.\
      \ This technique will ensure that the optimal path is found if such a path exists.\
      \ A good way to do this is to perform sampling (for example, querying the physics\
      \ system for the presence of obstacles) using a fixed size grid oriented toward\
      \ the destination point. However, keep in mind that sampling can be computationally\
      \ expensive if it’s performed too often, so it’s very important to take steps\
      \ to minimize the amount of sampling that the system needs to perform in any\
      \ given local search.\n\n==The Agent Movement Control Component:==\n\nThe movement\
      \ AI acts as the client of all the other parts of the AI; that is, it is a subsystem\
      \ that performs arbitrary tasks assigned to it by higher-level components. Those\
      \ tasks are issued in the form of discrete movement commands, such as, “move\
      \ to point (X,Y,Z)”, “move to object B”, “turn to face point (X,Y,Z)”, or “\
      stop moving”.\n\nThe movement AI will be executing exactly one of those movement\
      \ commands at any given moment. We describe the movement component as the object\
      \ that “owns” the current movement command.\n\nOnce we have done this, we can\
      \ design the appropriate algorithms to execute the movement commands into the\
      \ individual movement command objects themselves. A command such as, “move to\
      \ (X,Y,Z)”, for example, will be responsible for using the global and local\
      \ pathfinding systems to find and execute a path to (X,Y,Z), and making the\
      \ appropriate engine calls to ensure that the character moves along the specified\
      \ path. If no path is available, or when the AI entity reaches the end of its\
      \ path, the movement command reports back to the movement controller so that\
      \ it can be garbage-collected.\n\nThis technique is also useful for handling\
      \ different types of movement. Different types of movement commands can handle\
      \ tasks such as walking, running, swimming, and dying, with appropriate parameters\
      \ to determine the AI agent’s acceleration, movement range, turn rate, animations,\
      \ and other movement characteristics. \n\n==The Combat Control Component:==\n\
      \nWhen an AI initiates combat, control for the majority of its behaviors is\
      \ transferred to a combat control component. The combat controller is responsible\
      \ for all combat-related tasks, such as selecting an opponent, selecting a weapon,\
      \ maneuvering, firing, and searching for additional weapons and ammo.\n\nThe\
      \ most difficult part of the combat problem is determining how to intelligently\
      \ assess the current situation, and select and execute an appropriate tactic\
      \ in response.\n\nThe challenge comes from the extraordinary difficulty of getting\
      \ an AI entity to understand the significance of the spatial configuration of\
      \ any given area. Any human can glance at his current surroundings and immediately\
      \ form an assessment of the space.\n\n----\n\nGo on to the next part: [[Legacy:FPS\
      \ AI Architecture, Continued|FPS AI Architecture, Continued]]\n\n==Related Topics==\n\
      * [[Legacy:Artificial Intelligence|Artificial Intelligence]] &ndash; Super Topic\
      \ for all AI (bots, Monsters, NPCs, etc)\n* [[Legacy:Introduction To Game AI|Introduction\
      \ to Game AI]]"
  properties: []
  revId: 3170
name: "Legacy:First Person Shooter AI Architecture"
revision:
  revid: 3170
  parentid: 3171
  user: "193.195.126.253"
  timestamp: 1160573298.000000000
  comment: "* typo"
timestamp: 1668766744.600986000
