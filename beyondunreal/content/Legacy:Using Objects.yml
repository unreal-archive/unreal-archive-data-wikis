---
parse:
  title: "Legacy:Using Objects"
  text:
    text: "<p>This follows on from the <a href=\"/Legacy:Object_Oriented_Programming_Overview\"\
      \ title=\"Legacy:Object Oriented Programming Overview\">Object Oriented Programming\
      \ Overview</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Object_References\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Object References</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#What_can_object_references_be_used_for.3F\"><span class=\"tocnumber\"\
      >1.1</span> <span class=\"toctext\">What can object references be used for?</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Getting_a_Reference_to_an_Object\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Getting a Reference\
      \ to an Object</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Casting_References\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\"\
      >Casting References</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a\
      \ href=\"#IsA_and_ClassIsChildOf\"><span class=\"tocnumber\">1.4</span> <span\
      \ class=\"toctext\">IsA and ClassIsChildOf</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#References_to_Classes\"><span class=\"tocnumber\"\
      >1.5</span> <span class=\"toctext\">References to Classes</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#Discussion_Topics\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Discussion Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Object_References\"\
      >Object References</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_Objects?section=1\" title=\"Edit section:\
      \ Object References\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"What_can_object_references_be_used_for.3F\"\
      >What can object references be used for?</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Objects?section=2\"\
      \ title=\"Edit section: What can object references be used for?\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Remember in the\
      \ overview when we made up a recipe (class) for a simple and a better pizza\
      \ and created (spawned) actual pizzas?</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">local</span> Pizza MyPizza;             <span class=\"\
      co1\">// That's where I'm going to hold the pizza.  Like a dish.</span>\n \n\
      MyPizza <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span> <span class=\"st0\">'Pizza'</span><span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">// Hooray!  Pizza's ready!</span></pre></div>\n\
      </div>\n<p>Just like we could define variables such as bHasSauce to store information,\
      \ we can define variables that will store a reference to an object. This is\
      \ how we can refer to other objects and interact with them. In the example above,\
      \ the \"MyPizza\" variable was a reference to the pizza we spawned. Once we\
      \ have a reference to an object, we can interact with it, like we did before:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">MyPizza.<span class=\"me0\">EatParts</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>This breaks down fairly simply. The first part, \"MyPizza,\" is our\
      \ reference variable. It specifies <b>what</b> we want to interact with. The\
      \ second part, \"EatParts(2),\" specifies <b>how</b> we want to interact with\
      \ it.</p>\n<p>You can call functions on another thing when you have a reference\
      \ to it. EatParts was a function, as you may recall, and by using the reference\
      \ we can call that function on the pizza. Some more examples: (not examples\
      \ of actual UT2003 code, but for illustrative purposes)</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">  TheGun.<span class=\"me0\">Fire</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n  ThatButton.<span class=\"me0\"\
      >Press</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n  APie.<span\
      \ class=\"me0\">ThrowAtClown</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n  MyPizza.<span class=\"me0\">AddSauce</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>We can also\
      \ use a reference to an object to find out information about it. For instance,\
      \ suppose we wanted to find out whether the pizza still has sauce on it. The\
      \ \"MyPizza\" variable refers to the pizza, so we can clearly state <b>what</b>\
      \ we want to know about, then we need only specify what we want to know about\
      \ it, like so:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> MyPizza.<span class=\"me0\">bHasSauce</span>\
      \ <span class=\"br0\">)</span>     <span class=\"co1\">// If MyPizza still has\
      \ sauce on it...</span>\n    MyPizza.<span class=\"me0\">EatSauce</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;        <span class=\"\
      co1\">// ... then eat the aforementioned sauce.</span></pre></div>\n</div>\n\
      <p>We can also use the variables in our referenced object for anything we could\
      \ use our own variables for, and we can even change them:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">  <span class=\"kw1\">local</span> <span class=\"kw5\"\
      >float</span> HalfThePieces;\n  HalfThePieces <span class=\"sy0\">=</span> MyPizza.<span\
      \ class=\"me0\">NumberOfParts</span> <span class=\"sy0\">/</span> <span class=\"\
      nu0\">2</span>;\n \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ TheGun.<span class=\"me0\">Bullets</span> <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    TheGun.<span class=\"me0\">Fire</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n    TheGun.<span class=\"me0\">Bullets</span>\
      \ <span class=\"sy0\">=</span> TheGun.<span class=\"me0\">Bullets</span> <span\
      \ class=\"sy0\">-</span> <span class=\"nu0\">1</span>;\n  <span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Getting_a_Reference_to_an_Object\"\
      >Getting a Reference to an Object</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_Objects?section=3\"\
      \ title=\"Edit section: Getting a Reference to an Object\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>In order to call functions\
      \ on an object or to access it's variables, we must first obtain a valid reference\
      \ to it. When we first declare the reference, it is empty. Before we can use\
      \ it for anything productive we must assign an object to it. Remember this line?</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">MyPizza <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span> <span class=\"st0\">'Pizza'</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// Hooray!  Pizza's ready!</span></pre></div>\n</div>\n\
      <p>The <b>spawn</b> function not only creates the object you specify, but returns\
      \ a reference to it. This is an easy way to obtain a reference to an object.\
      \ Just as you would assign a number to a numeric variable, you can assign an\
      \ object to an object reference. Generally an object reference is set by setting\
      \ it equal to another object reference, either obtained through Spawn or through\
      \ another function call. Sometimes, however, you want a reference to an object\
      \ that is already in the game but is not currently interacting in any way with\
      \ your class. To find a reference to it you will generally have to use an <a\
      \ href=\"/Legacy:Iterator\" title=\"Legacy:Iterator\">iterator</a>.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Casting_References\">Casting References</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Objects?section=4\" title=\"Edit section: Casting\
      \ References\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Remember when we made the BetterPizza from before? It had properties and\
      \ functions that the regular pizza did not. However, we can still use a regular\
      \ pizza reference to hold it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> Pizza MyPizza;\n \nMyPizza <span class=\"\
      sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span> <span class=\"st0\">'BetterPizza'</span><span class=\"\
      br0\">)</span>;  <span class=\"co1\">// Hooray!  Pizza's ready!</span></pre></div>\n\
      </div>\n<p>Similarly, we could use something even lower level to hold the pizza,\
      \ such as the Meal class that the pizza was derived from. You can hold a more\
      \ complex class in a reference to simpler class, but you cannot store a simpler\
      \ class in a reference to a more complex class. For instance, we can use a reference\
      \ to Meal or Pizza to refer to a BetterPizza, but we cannot use a reference\
      \ to a BetterPizza to store a regular Pizza. This is because a BetterPizza is\
      \ a special type of Pizza, but it's still a Pizza. A BetterPizza is a special\
      \ type of Meal too, because it's a special type of Pizza and a Pizza is a special\
      \ type of Meal. However, a Pizza is not a special type of BetterPizza, so we\
      \ can't use a BetterPizza to refer to a Pizza.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">local</span> Meal        AMeal;\n<span\
      \ class=\"kw1\">local</span> Pizza       MyPizza;\n<span class=\"kw1\">local</span>\
      \ BetterPizza MyBetterPizza;\n \nAMeal   <span class=\"sy0\">=</span> <span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\"\
      >class</span> <span class=\"st0\">'BetterPizza'</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">// A BetterPizza is a type of meal.</span>\nMyPizza <span\
      \ class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span> <span class=\"st0\">'BetterPizza'</span><span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">// It's also a type of Pizza.</span>\n\
      MyBetterPizza <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span> <span class=\"st0\"\
      >'Meal'</span><span class=\"br0\">)</span>;   <span class=\"co1\">// This won't\
      \ work. A Meal is not a type of BetterPizza.</span></pre></div>\n</div>\n<p>Now,\
      \ this all seems fine and dandy, but what's the catch? When you store a reference\
      \ to an object you can only call functions and access variables that are in\
      \ the class to which that reference was defined. So, for instance, you can't\
      \ do the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> Meal AMeal;\n \nAMeal <span class=\"sy0\">=</span> <span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\"\
      >class</span> <span class=\"st0\">'BetterPizza'</span><span class=\"br0\">)</span>;\n\
      AMeal.<span class=\"me0\">EatSauce</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;                      <span class=\"co1\">// This won't work.\
      \ Meals don't have sauce, and although</span>\n                            \
      \           <span class=\"co1\">// this meal happens to be a Pizza, which does\
      \ have</span>\n                                       <span class=\"co1\">//\
      \ sauce, the game has no way of knowing when it</span>\n                   \
      \                    <span class=\"co1\">// compiles that there is indeed a\
      \ pizza in that meal</span>\n                                       <span class=\"\
      co1\">// reference, so it goes to the lowest common</span>\n               \
      \                        <span class=\"co1\">// denominator: the meal.</span></pre></div>\n\
      </div>\n<p>However, there is a way around this: If you know ahead of time that\
      \ a reference to a certain class actually contains a subclass of it, you can\
      \ <b>cast</b> it to let the game know just to take your word for it. The cast\
      \ lets you temporarily access the functions and variables of a class just as\
      \ if the reference was actually one to the subclass you specify. It makes no\
      \ permanent change to the reference itself, though, so you must cast the reference\
      \ every time you want to access it's subclasses' special functions. This is\
      \ best illustrated by examples. This is done like so:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> Meal AMeal;\n \nAMeal\
      \ <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span> <span class=\"st0\">'Pizza'</span><span\
      \ class=\"br0\">)</span>;\nPizza<span class=\"br0\">(</span> AMeal <span class=\"\
      br0\">)</span>.<span class=\"me0\">EatSauce</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;             <span class=\"co1\">// This one works.\
      \ We have told the compiler that</span>\n                                  \
      \     <span class=\"co1\">// although the reference is to a meal, the reference</span>\n\
      \                                       <span class=\"co1\">// actually points\
      \ to a special type of meal that has</span>\n                              \
      \         <span class=\"co1\">// some added functions. By doing this, we can\
      \ access</span>\n                                       <span class=\"co1\"\
      >// that subclasses special variables and functions.</span></pre></div>\n</div>\n\
      <p>If you try to cast something into a class that it is not, or a class that\
      \ it is not a subclass of, it will return an empty reference. In the above example,\
      \ we can cast the meal to a pizza, but not to a BetterPizza because it doesn't\
      \ actually store a BetterPizza, it only stores a Pizza. The compiler will let\
      \ you cast to any subclass, but it will cause problems in-game if you cast a\
      \ reference to a class that it does not actually point to. As shown above, the\
      \ syntax for casting is to put the name of the class as if it were a function,\
      \ with the argument being the reference that you are casting. Some more examples:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Owner</span> <span class=\"br0\"\
      >)</span>.<span class=\"me0\">Health</span> <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">100</span>;            <span class=\"co1\">// Owner is an actor\
      \ reference to a pawn object. We have casted it to</span>\n                \
      \                       <span class=\"co1\">// Pawn so we can access it's health,\
      \ which is declared</span>\n                                       <span class=\"\
      co1\">// in pawn, not in actor.</span>\n \n<span class=\"kw9\">AIController</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Controller</span> <span class=\"\
      br0\">)</span>.<span class=\"kw9\">AIScript</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>;    <span class=\"co1\">// Controller's don't\
      \ have AIScripts, only</span>\n                                            \
      \   <span class=\"co1\">// AIControllers do. But, if we know for sure</span>\n\
      \                                               <span class=\"co1\">// that\
      \ a Pawns controller is an AIController,</span>\n                          \
      \                     <span class=\"co1\">// we can cast it to access the AIScript\
      \ anyway.</span>\n \n<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ BetterPizza<span class=\"br0\">(</span> MyPizza <span class=\"br0\">)</span>.<span\
      \ class=\"me0\">bHasEgg</span> <span class=\"br0\">)</span>    <span class=\"\
      co1\">// Only BetterPizzas have eggs.</span>\n<span class=\"br0\">{</span>\n\
      \  BetterPizza<span class=\"br0\">(</span> MyPizza <span class=\"br0\">)</span>.<span\
      \ class=\"me0\">bHasEgg</span> <span class=\"sy0\">=</span> <span class=\"kw6\"\
      >false</span>;<span class=\"co1\">// I don't like egg on pizza. Pick it off.</span>\n\
      \  MyPizza.<span class=\"me0\">EatSauce</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;                    <span class=\"co1\">// Note that\
      \ although I'm not calling the betterpizzas</span>\n                       \
      \                  <span class=\"co1\">// EatSauce directly, it will still get\
      \ the call and</span>\n                                         <span class=\"\
      co1\">// still call the betterpizzas EatSauce. You only have</span>\n      \
      \                                   <span class=\"co1\">// to cast for things\
      \ that didn't exist in the</span>\n                                        \
      \ <span class=\"co1\">// superclass. You don't have to cast to use functions</span>\n\
      \                                         <span class=\"co1\">// that were only\
      \ overridden.</span>\n  MyPizza.<span class=\"me0\">EatParts</span><span class=\"\
      br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;  \
      \               <span class=\"co1\">// But all pizzas can have parts eaten,\
      \ no cast is</span>\n                                         <span class=\"\
      co1\">// required.</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"IsA_and_ClassIsChildOf\">IsA and ClassIsChildOf</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Objects?section=5\" title=\"Edit section: IsA and\
      \ ClassIsChildOf\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Now you know how to cast a class, in circumstances where you already know\
      \ for sure that a reference points to a certain subclass. However, what about\
      \ situations where you don't know for sure? Suppose you had a function like\
      \ the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// Called to determine what type of food something is.</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> TypeOfMeal<span class=\"\
      br0\">(</span> Meal M <span class=\"br0\">)</span></pre></div>\n</div>\n<p>This\
      \ function takes a meal as a parameter, and returns a string describing what\
      \ type of food it is. We want to return \"Spicy\" if it is a pizza with sauce,\
      \ \"Bland\" if it is a pizza without sauce. Otherwise, we want to return \"\
      Unknown.\"</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >// Called to determine what type of food something is.</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> TypeOfMeal<span class=\"\
      br0\">(</span> Meal M <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \       <span class=\"kw2\">if</span> <span class=\"br0\">(</span>  Pizza<span\
      \ class=\"br0\">(</span> M <span class=\"br0\">)</span>.<span class=\"me0\"\
      >bHasSauce</span> <span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ <span class=\"st0\">\"Spicy\"</span>;\n  <span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>Pizza<span\
      \ class=\"br0\">(</span> M <span class=\"br0\">)</span>.<span class=\"me0\"\
      >bHasSauce</span> <span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ <span class=\"st0\">\"Bland\"</span>;\n  <span class=\"kw2\">else</span> <span\
      \ class=\"kw2\">return</span> <span class=\"st0\">\"Unknown\"</span>;\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>This seems like it would work,\
      \ but it does not. If the pizza has sauce, it returns \"Spicy.\" If the pizza\
      \ does not have sauce, it returns \"Bland.\" This is what we want, so far. However,\
      \ if the meal is not a pizza at all, we want to return \"Unknown.\" This function\
      \ will return \"Bland\" in that situation. Here's why: If M is not a pizza,\
      \ then Pizza( M ) returns None. None.bHasSauce will always evaluate as false,\
      \ as well as generating an error message in the log. Before we can safely cast\
      \ to the Pizza, we need to know for sure whether or not the meal M actually\
      \ is a Pizza. There are four ways to do this:</p>\n<ul>\n<li>As mentioned, a\
      \ cast to something that isn't that class will always return None. We can test\
      \ this to see if it really is a Pizza or not. If Pizza( M ) == None, then M\
      \ is either an empty reference, or it isn't a reference to a pizza.</li>\n<li>There\
      \ is a native function called IsA that does basically the same thing. IsA takes\
      \ a name argument, like 'Pizza'. To find out if M is a pizza, just call M.IsA(\
      \ 'Pizza' ); It will return true if M is a pizza, or false if M is not a pizza.</li>\n\
      <li>Every object has a class variable that holds it's own class. We can check\
      \ this to determine if a class is a pizza or not. However, this method is not\
      \ ideal because it will not catch subclasses. A pizza checked in this manner\
      \ will not register as a pizza if it is a BetterPizza.</li>\n<li>ClassIsChildOf\
      \ is another native function that allows us to investigate the class tree. However,\
      \ like the above method, ClassIsChildOf is less than ideal for this application\
      \ as it will return only subclasses of the specified class, not that class itself.\
      \ It can be combined with the above methods to get the same results as either\
      \ of the top two methods. It's syntax is below.</li>\n</ul>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ Pizza<span class=\"br0\">(</span> M <span class=\"br0\">)</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\
      \ <span class=\"kw2\">return</span> <span class=\"st0\">\"Unknown\"</span>;\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span> M.<span class=\"\
      kw3\">IsA</span><span class=\"br0\">(</span> <span class=\"st0\">'Pizza'</span>\
      \ <span class=\"br0\">)</span> <span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n         <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \  Pizza<span class=\"br0\">(</span> M <span class=\"br0\">)</span>.<span class=\"\
      me0\">bHasSauce</span> <span class=\"br0\">)</span> <span class=\"kw2\">return</span>\
      \ <span class=\"st0\">\"Spicy\"</span>;\n    <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      sy0\">!</span>Pizza<span class=\"br0\">(</span> M <span class=\"br0\">)</span>.<span\
      \ class=\"me0\">bHasSauce</span> <span class=\"br0\">)</span> <span class=\"\
      kw2\">return</span> <span class=\"st0\">\"Bland\"</span>;\n  <span class=\"\
      br0\">}</span>\n \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw1\">Class</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw1\">class</span><span class=\"st0\">'Pizza'</span>\n  <span class=\"sy0\"\
      >&amp;&amp;</span>  <span class=\"sy0\">!</span><span class=\"kw3\">ClassIsChildOf</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">'Pizza'</span> <span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>\n    <span class=\"kw2\">return</span>\
      \ <span class=\"st0\">\"Unknown\"</span>;</pre></div>\n</div>\n<h3><span class=\"\
      mw-headline\" id=\"References_to_Classes\">References to Classes</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_Objects?section=6\" title=\"Edit section: References\
      \ to Classes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>As you may have noticed, the class comparing and ClassIsChildOf both use\
      \ a \"class\" notation. This is a special type of variable, somewhere between\
      \ a reference and a primitive. It holds the class name of an object. Remember\
      \ how we spawned the Pizza?</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\">class</span>\
      \ <span class=\"st0\">'Pizza'</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>Note that the class designation was used there as well. In those\
      \ cases, a variable is not used, just an absolute value. For instance, the number\
      \ 5 is not the same as a variable holding the number 5, but both can be used\
      \ interchangeably. Similarly, a class variable and the constant version (as\
      \ illustrated above) can be used interchangeably. You can set a class variable\
      \ in the same way you would set any other variable:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">local</span> class<span class=\"sy0\"\
      >&lt;</span>Meal<span class=\"sy0\">&gt;</span> Pizza<span class=\"re0\">Class</span>&lt;\
      \ SEMI &gt;        <span class=\"co1\">// The triangle brackets in the declaration\
      \ narrow down what type</span>\n                                     <span class=\"\
      co1\">// of class this can point to, but it is not necessary.</span>\n<span\
      \ class=\"kw1\">local</span> Pizza MyPizza;\n<span class=\"kw1\">local</span>\
      \ Pizza AnotherPizza;\n \nMyPizza <span class=\"sy0\">=</span> <span class=\"\
      kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Pizza'</span><span class=\"br0\">)</span>;\n \nPizzaClass <span\
      \ class=\"sy0\">=</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'Pizza'</span>;\nAnotherPizza <span class=\"sy0\">=</span> <span class=\"kw4\"\
      >Spawn</span><span class=\"br0\">(</span> PizzaClass <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The constant syntax should be obvious, it is simply the word class,\
      \ followed by a single quote, followed by the name of the class, followed by\
      \ another single quote. It is useful in cases where you do not know at compile\
      \ time what the class is going to be. For instance, weapons use this for their\
      \ projectiles. Instead of having to change every reference to the projectile\
      \ class in the code, you can change it all by modifying one simple variable.\
      \ In other cases, that may not even be an option, and a class variable is required.\
      \ Here's an example: Let's say we were making a duplicator gun. Whenever it\
      \ hit something, it spawns a duplicate of that thing. The code for the duplication\
      \ function might look something like the following:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> Duplicate<span class=\"\
      br0\">(</span> <span class=\"kw9\">actor</span> Other <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> class<span\
      \ class=\"sy0\">&lt;</span>actor<span class=\"sy0\">&gt;</span> Other<span class=\"\
      re0\">Class</span>&lt; SEMI &gt;\n \n  OtherClass <span class=\"sy0\">=</span>\
      \ Other.<span class=\"kw1\">Class</span>;\n  <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span> OtherClass <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_Objects?section=7\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>These pages cover the above in more detail:</p>\n<ul>\n<li><a href=\"/Legacy:Peppers_And_Pepper_Grinders\"\
      \ title=\"Legacy:Peppers And Pepper Grinders\">Peppers And Pepper Grinders</a></li>\n\
      <li><a href=\"/Legacy:Typecasting\" title=\"Legacy:Typecasting\">Typecasting</a></li>\n\
      </ul>\n<hr />\n<h2><span class=\"mw-headline\" id=\"Discussion_Topics\">Discussion\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_Objects?section=8\" title=\"Edit section:\
      \ Discussion Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Sobiwan:</b> I dont 'remember when we spawned a pizza'. The previous section\
      \ only defined a pizza (the class), but there was no mention of spawning or\
      \ what spawning is. Hence, I am confused until this first sentence is clearer.</p>\n\
      <p><b>Tarquin:</b> we spawned one in the section 'Where's My Pizza?'. But it\
      \ could be clearer. I'll work on it.</p>\n<p><b>Don:</b> Forgive the professor\
      \ mode here, but I'd suggest changing the example that includes \"TheGun.Fire();\
      \ TheGun.Bullets = TheGun.Bullets - 1;\" - it may just be an example but it\
      \ completely disregards proper encapsulation.</p>\n<p><b>Tarquin:</b> Good point.\
      \ Change it&#160;:)</p>\n<p><b>n8:</b> Looks like Don copped out. Did he mean\
      \ change to: \"TheGun.Fire(); TheGun.Bullets -= 1;\"?</p>\n<p><b>Pachacutec:</b>\
      \ Hmmm. I want to alter an object reference in a class post its initialization\
      \ instead to one of its subclasses. This way, all existing calls to that reference\
      \ can stay the same, the functionality is updated with no hassle. I think this\
      \ is called protoyping in javascript. I can do this here with Spawn? I'm not\
      \ adding new function NAMES, but one of the functions will have extra commands\
      \ in the new sub. Is this possible?</p>\n<p><b>Pachacutec:</b> \"You don't have\
      \ to cast to use functions that were only overridden.\" Sorry, missed that comment.\
      \ thanks for this great page&#160;:)</p>\n<p><b>HoMeRS}i{MpSoN:</b> It looks\
      \ to me like the ClassIsChildOf function has changed in UT2k4 (and I am guessing\
      \ 2k3 before it):</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">native</span><span class=\"br0\">(</span><span class=\"nu0\">258</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ <span class=\"kw3\">ClassIsChildOf</span><span class=\"br0\">(</span> <span\
      \ class=\"kw1\">class</span> TestClass, <span class=\"kw1\">class</span> ParentClass\
      \ <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>This requires a statement\
      \ such as:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw3\">ClassIsChildOf</span><span\
      \ class=\"br0\">(</span>V.<span class=\"kw1\">Class</span>, <span class=\"kw1\"\
      >class</span><span class=\"st0\">'Volume'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n    ...<span class=\"me0\">blah</span> blah</pre></div>\n\
      </div>\n<p>instead of the examples above.</p>\n<p><b>SuperApe:</b> This <i>restaurant</i>\
      \ family of beginner UScripting pages should be linked from the Modding pages.\
      \ Currently, <a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making\
      \ Mods</a> and <a href=\"/Legacy:Mutator_Topics\" title=\"Legacy:Mutator Topics\"\
      >Mutator Topics</a> are the ones that get the most foot traffic.</p>\n<p><b>Stelcontar:</b>\
      \ In UT2004 the ChildIsClassOf function returns true if the test class is a\
      \ child of the \"parent\" class OR is the same as the parent class. Example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//the following\
      \ return true in UT2004</span>\n<span class=\"kw3\">ClassIsChildOf</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'ShockRifle'</span>,<span class=\"kw1\">class</span><span class=\"st0\">'ShockRifle'</span><span\
      \ class=\"br0\">)</span> \n<span class=\"kw3\">ClassIsChildOf</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'ShockRifle'</span>,<span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Weapon'</span><span class=\"\
      br0\">)</span>\n<span class=\"kw3\">ClassIsChildOf</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'ShockRifle'</span>,<span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Inventory'</span><span class=\"\
      br0\">)</span></pre></div>\n</div>\n<p><b>KewlAzMe</b> For the <i>Duplicate</i>\
      \ function example, do you always need to make a variable for that class? Wouldn't\
      \ this work:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> Duplicate<span class=\"br0\">(</span> <span class=\"kw9\"\
      >actor</span> Other <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span> Other <span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>???</p>\n<p><b>Vertex</b> i am a noob and just learning uscript, this helped\
      \ more than ALL the tutorials</p>\n<p><b>Sweavo:</b> yeah, this really is a\
      \ great tut for noobs</p>\n<hr />\n<p><b>OlympusMons:</b> Okay so I didnt want\
      \ to mess up the Typecasting page with discussion so I thought I would put this\
      \ here instead.</p>\n<dl>\n<dd><i>ThingToGetObjectFrom</i> <b>.</b> <i>PropertyToAccess</i>\
      \ <b>.</b> <i>PropertyToAccess</i></dd>\n</dl>\n<p>so what if the first property\
      \ to access is a class and you want to cast it?</p>\n<p>The first PropertyToAccess\
      \ being ObjectToTypecast would be like this:</p>\n<p>This:</p>\n<dl>\n<dd><i>ClassToTypecastTo</i>\
      \ <b>(</b> <i>ThingToGetObjectFrom</i> <b>.</b> <i>ObjectToTypecast</i> <b>)\
      \ .</b> <i>PropertyToAccess</i></dd>\n</dl>\n<p>Not:</p>\n<dl>\n<dd><strike><i>ThingToGetObjectFrom</i>\
      \ <b>.</b> <i>ClassToTypecastTo</i> <b>(</b> <i>ObjectToTypecast</i> <b>) .</b>\
      \ <i>PropertyToAccess</i></strike></dd>\n</dl>\n<p>Or:</p>\n<dl>\n<dd><strike><i>ThingToGetObjectFrom</i>\
      \ <b>.</b> <i>ObjectToTypecast</i> <b>(</b> <i>ClassToTypecastTo</i> <b>) .</b>\
      \ <i>PropertyToAccess</i></strike></dd>\n</dl>\n<p>Okay so this is a common\
      \ mistake I make but on the typecasting page is only says how you should do\
      \ it, I suggest putting a section on what doesnt work also. This way people\
      \ can compare and see what they are doing wrong, from here though I needed to\
      \ casr the second PropertyToAccess which would be like:</p>\n<dl>\n<dd><i>ClassToTypecastTo</i>\
      \ <b>(</b> <i>ClassToTypecastTo</i> <b>(</b> <i>ThingToGetObjectFrom</i> <b>.</b>\
      \ <i>ObjectToTypecast</i> <b>) .</b> <i>ObjectToTypecast</i> <b>)</b></dd>\n\
      </dl>\n<p>Which I think shows nesting alittle better and how it works, obviously\
      \ its only an extension on the first but sometimes I try to just full stop my\
      \ way through adding brackets till I get it right which isnt the best method.\
      \ So this would provide a quick reference for those who might need to go deeper\
      \ into the cast. Usually though I break these up using local variables to keep\
      \ it neater but it is possible to put it all on one line.</p>\n<p>And to access\
      \ a property all the way through, so:</p>\n<dl>\n<dd><i>ThingToGetObjectFrom</i>\
      \ <b>.</b> <i>ObjectToTypecast</i> <b>.</b> <i>ObjectToTypecast</i> <b>.</b>\
      \ <i>PropertyToAccess</i></dd>\n</dl>\n<p>Would look like:</p>\n<dl>\n<dd><i>ClassToTypecastTo</i>\
      \ <b>(</b> <i>ClassToTypecastTo</i> <b>(</b> <i>ThingToGetObjectFrom</i> <b>.</b>\
      \ <i>ObjectToTypecast</i> <b>) .</b> <i>ObjectToTypecast</i> <b>) .</b> <i>PropertyToAccess</i></dd>\n\
      </dl>\n<p>Not:</p>\n<dl>\n<dd><strike><i>ThingToGetObjectFrom</i> <b>.</b> <i>ClassToTypecastTo</i>\
      \ <b>(</b> <i>ObjectToTypecast</i> <b>) .</b> <i>ClassToTypecastTo</i> <b>(</b>\
      \ <i>ObjectToTypecast</i> <b>) .</b> <i>PropertyToAccess</i></strike></dd>\n\
      </dl>\n<p>Or:</p>\n<dl>\n<dd><strike><i>ClassToTypecastTo</i> <b>(</b> <i>ThingToGetObjectFrom</i>\
      \ <b>.</b> <i>ObjectToTypecast</i> <b>) .</b> <i>ClassToTypecastTo</i> <b>(</b>\
      \ <i>ObjectToTypecast</i> <b>) .</b> <i>PropertyToAccess</i></strike></dd>\n\
      </dl>\n<p>Anyways alot of people already know this but yeah perhaps this could\
      \ be added in some form to the typecasting page. I'll leave it here though so\
      \ people can read my findings, cool.</p>\n<p><b>Solid Snake:</b> The best way\
      \ I can explain this, is to think of it like a nested tree, and to use only\
      \ two terms, WHAT and SOURCE. WHAT stands for what you want, and SOURCE is where\
      \ the WHAT comes from. Lets present a fairly nested statement.</p>\n<p>WHAT_4(WHAT_3(WHAT_2(SOURCE_1.SOURCE_2).SOURCE_3).SOURCE_4).SOURCE_5</p>\n\
      <p>Essentially SOURCE_5 is what you want at the end of the day (if SOURCE_5\
      \ is absent, then you'll be wanting WHAT_4). Let's dissect that, first of all\
      \ there is no WHAT_1. I deliberately set the numbers so people could see the\
      \ pairing of WHAT and SOURCE. Let me first start by presenting a tree topology\
      \ of the class structure</p>\n<p>SOURCE_1 contains SOURCE_2</p>\n<p>WHAT_2 is\
      \ a child class of SOURCE_2</p>\n<p>WHAT_3 is a child class of SOURCE_3</p>\n\
      <p>WHAT_4 is a child class of SOURCE_4</p>\n<p>WHAT_2 contains SOURCE_3</p>\n\
      <p>WHAT_3 contains SOURCE_4</p>\n<p>You find that WHAT_4 contains SOURCE_5.\
      \ In order to get WHAT_4, you need to find WHAT_2 and WHAT_3. You see that SOURCE_2\
      \ is actually a child class to WHAT_2, which contains a reference to WHAT_3,\
      \ which contains a reference to WHAT_4.</p>\n<p>So you first type cast SOURCE_2\
      \ to WHAT_2. [ WHAT_2(SOURCE_1.SOURCE_2) ].</p>\n<p>You now have a reference\
      \ to WHAT_2.</p>\n<p>WHAT_2 contains a reference to WHAT_3, so you type cast\
      \ the reference found within WHAT_2, into WHAT_3. [ WHAT_3(WHAT_2(SOURCE_1.SOURCE_2).SOURCE_4)\
      \ ]</p>\n<p>WHAT_3 contains a reference to WHAT_4, so you type cast the reference\
      \ found within WHAT_3 (which is the result of the two type casts) and result\
      \ with the above code.</p>\n<p>It can still be confusing but think backwards\
      \ and sometimes you just have to learn you class trees better to get the results\
      \ you want. Hope that helps a little.</p>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.375 seconds\nReal time usage: 0.709 seconds\nPreprocessor visited\
      \ node count: 197/1000000\nPreprocessor generated node count: 464/1000000\n\
      Post‐expand include size: 13/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3382-0!*!0!!en!*!*\
      \ and timestamp 20221117172341 and revision id 8722\n -->\n"
  categories:
  - sortkey: "Using Objects"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:Peppers And Pepper Grinders"
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Object References"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 112
    anchor: "Object_References"
  - toclevel: 2
    level: "3"
    line: "What can object references be used for?"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 135
    anchor: "What_can_object_references_be_used_for.3F"
  - toclevel: 2
    level: "3"
    line: "Getting a Reference to an Object"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 2338
    anchor: "Getting_a_Reference_to_an_Object"
  - toclevel: 2
    level: "3"
    line: "Casting References"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 3366
    anchor: "Casting_References"
  - toclevel: 2
    level: "3"
    line: "IsA and ClassIsChildOf"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 8852
    anchor: "IsA_and_ClassIsChildOf"
  - toclevel: 2
    level: "3"
    line: "References to Classes"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 11759
    anchor: "References_to_Classes"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "7"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 13745
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion Topics"
    number: "3"
    index: "8"
    fromtitle: "Legacy:Using_Objects"
    byteoffset: 13923
    anchor: "Discussion_Topics"
  displaytitle: "Legacy:Using Objects"
  iwlinks: []
  wikitext:
    text: "This follows on from the [[Legacy:Object Oriented Programming Overview|Object\
      \ Oriented Programming Overview]].\n\n==Object References==\n\n===What can object\
      \ references be used for?===\n\nRemember in the overview when we made up a recipe\
      \ (class) for a simple and a better pizza and created (spawned) actual pizzas?\n\
      \n<uscript>\nlocal Pizza MyPizza;             // That's where I'm going to hold\
      \ the pizza.  Like a dish.\n\nMyPizza = Spawn(class 'Pizza');  // Hooray!  Pizza's\
      \ ready!\n</uscript>\n\nJust like we could define variables such as bHasSauce\
      \ to store information, we can define variables that will store a reference\
      \ to an object. This is how we can refer to other objects and interact with\
      \ them. In the example above, the \"MyPizza\" variable was a reference to the\
      \ pizza we spawned. Once we have a reference to an object, we can interact with\
      \ it, like we did before:\n\n<uscript>\nMyPizza.EatParts(2);             \n\
      </uscript>\n\nThis breaks down fairly simply. The first part, \"MyPizza,\" is\
      \ our reference variable. It specifies '''what''' we want to interact with.\
      \ The second part, \"EatParts(2),\" specifies '''how''' we want to interact\
      \ with it.\n\nYou can call functions on another thing when you have a reference\
      \ to it. EatParts was a function, as you may recall, and by using the reference\
      \ we can call that function on the pizza. Some more examples: (not examples\
      \ of actual UT2003 code, but for illustrative purposes)\n\n<uscript>\n  TheGun.Fire();\n\
      \  ThatButton.Press();\n  APie.ThrowAtClown();\n  MyPizza.AddSauce();\n</uscript>\n\
      \nWe can also use a reference to an object to find out information about it.\
      \ For instance, suppose we wanted to find out whether the pizza still has sauce\
      \ on it. The \"MyPizza\" variable refers to the pizza, so we can clearly state\
      \ '''what''' we want to know about, then we need only specify what we want to\
      \ know about it, like so:\n\n<uscript>\n  if ( MyPizza.bHasSauce )     // If\
      \ MyPizza still has sauce on it...\n    MyPizza.EatSauce();        // ... then\
      \ eat the aforementioned sauce.\n</uscript>\n\nWe can also use the variables\
      \ in our referenced object for anything we could use our own variables for,\
      \ and we can even change them:\n\n<uscript>\n  local float HalfThePieces;\n\
      \  HalfThePieces = MyPizza.NumberOfParts / 2;\n\n  if ( TheGun.Bullets > 0 )\n\
      \  {\n    TheGun.Fire();\n    TheGun.Bullets = TheGun.Bullets - 1;\n  }\n</uscript>\n\
      \n===Getting a Reference to an Object===\n\nIn order to call functions on an\
      \ object or to access it's variables, we must first obtain a valid reference\
      \ to it. When we first declare the reference, it is empty. Before we can use\
      \ it for anything productive we must assign an object to it. Remember this line?\n\
      \n<uscript>\nMyPizza = Spawn(class 'Pizza');  // Hooray!  Pizza's ready!\n</uscript>\n\
      \nThe '''spawn''' function not only creates the object you specify, but returns\
      \ a reference to it. This is an easy way to obtain a reference to an object.\
      \ Just as you would assign a number to a numeric variable, you can assign an\
      \ object to an object reference. Generally an object reference is set by setting\
      \ it equal to another object reference, either obtained through Spawn or through\
      \ another function call. Sometimes, however, you want a reference to an object\
      \ that is already in the game but is not currently interacting in any way with\
      \ your class. To find a reference to it you will generally have to use an [[Legacy:Iterator|iterator]].\n\
      \n===Casting References===\n\nRemember when we made the BetterPizza from before?\
      \ It had properties and functions that the regular pizza did not. However, we\
      \ can still use a regular pizza reference to hold it.\n\n<uscript>\nlocal Pizza\
      \ MyPizza;\n\nMyPizza = Spawn(class 'BetterPizza');  // Hooray!  Pizza's ready!\n\
      </uscript>\n\nSimilarly, we could use something even lower level to hold the\
      \ pizza, such as the Meal class that the pizza was derived from. You can hold\
      \ a more complex class in a reference to simpler class, but you cannot store\
      \ a simpler class in a reference to a more complex class. For instance, we can\
      \ use a reference to Meal or Pizza to refer to a BetterPizza, but we cannot\
      \ use a reference to a BetterPizza to store a regular Pizza. This is because\
      \ a BetterPizza is a special type of Pizza, but it's still a Pizza. A BetterPizza\
      \ is a special type of Meal too, because  it's a special type of Pizza and a\
      \ Pizza is a special type of Meal. However, a Pizza is not a special type of\
      \ BetterPizza, so we can't use a BetterPizza to refer to a Pizza.\n\n<uscript>\n\
      local Meal        AMeal;\nlocal Pizza       MyPizza;\nlocal BetterPizza MyBetterPizza;\n\
      \nAMeal   = Spawn(class 'BetterPizza');  // A BetterPizza is a type of meal.\n\
      MyPizza = Spawn(class 'BetterPizza');  // It's also a type of Pizza.\nMyBetterPizza\
      \ = Spawn(class 'Meal');   // This won't work. A Meal is not a type of BetterPizza.\n\
      </uscript>\n\nNow, this all seems fine and dandy, but what's the catch? When\
      \ you store a reference to an object you can only call functions and access\
      \ variables that are in the class to which that reference was defined. So, for\
      \ instance, you can't do the following:\n\n<uscript>\nlocal Meal AMeal;\n\n\
      AMeal = Spawn(class 'BetterPizza');\nAMeal.EatSauce();                     \
      \ // This won't work. Meals don't have sauce, and although\n               \
      \                        // this meal happens to be a Pizza, which does have\n\
      \                                       // sauce, the game has no way of knowing\
      \ when it\n                                       // compiles that there is\
      \ indeed a pizza in that meal\n                                       // reference,\
      \ so it goes to the lowest common\n                                       //\
      \ denominator: the meal.\n</uscript>\n\nHowever, there is a way around this:\
      \ If you know ahead of time that a reference to a certain class actually contains\
      \ a subclass of it, you can '''cast''' it to let the game know just to take\
      \ your word for it. The cast lets you temporarily access the functions and variables\
      \ of a class just as if the reference was actually one to the subclass you specify.\
      \ It makes no permanent change to the reference itself, though, so you must\
      \ cast the reference every time you want to access it's subclasses' special\
      \ functions. This is best illustrated by examples. This is done like so:\n\n\
      <uscript>\nlocal Meal AMeal;\n\nAMeal = Spawn(class 'Pizza');\nPizza( AMeal\
      \ ).EatSauce();             // This one works. We have told the compiler that\n\
      \                                       // although the reference is to a meal,\
      \ the reference\n                                       // actually points to\
      \ a special type of meal that has\n                                       //\
      \ some added functions. By doing this, we can access\n                     \
      \                  // that subclasses special variables and functions.\n</uscript>\n\
      \nIf you try to cast something into a class that it is not, or a class that\
      \ it is not a subclass of, it will return an empty reference. In the above example,\
      \ we can cast the meal to a pizza, but not to a BetterPizza because it doesn't\
      \ actually store a BetterPizza, it only stores a Pizza. The compiler will let\
      \ you cast to any subclass, but it will cause problems in-game if you cast a\
      \ reference to a class that it does not actually point to. As shown above, the\
      \ syntax for casting is to put the name of the class as if it were a function,\
      \ with the argument being the reference that you are casting. Some more examples:\n\
      \n<uscript>\nPawn( Owner ).Health = 100;            // Owner is an actor reference\
      \ to a pawn object. We have casted it to\n                                 \
      \      // Pawn so we can access it's health, which is declared\n           \
      \                            // in pawn, not in actor.\n\nAIController( Controller\
      \ ).AIScript = None;    // Controller's don't have AIScripts, only\n       \
      \                                        // AIControllers do. But, if we know\
      \ for sure\n                                               // that a Pawns controller\
      \ is an AIController,\n                                               // we\
      \ can cast it to access the AIScript anyway.\n\nif ( BetterPizza( MyPizza ).bHasEgg\
      \ )    // Only BetterPizzas have eggs.\n{\n  BetterPizza( MyPizza ).bHasEgg\
      \ = false;// I don't like egg on pizza. Pick it off.\n  MyPizza.EatSauce();\
      \                    // Note that although I'm not calling the betterpizzas\n\
      \                                         // EatSauce directly, it will still\
      \ get the call and\n                                         // still call the\
      \ betterpizzas EatSauce. You only have\n                                   \
      \      // to cast for things that didn't exist in the\n                    \
      \                     // superclass. You don't have to cast to use functions\n\
      \                                         // that were only overridden.\n  MyPizza.EatParts(\
      \ 2 );                 // But all pizzas can have parts eaten, no cast is\n\
      \                                         // required.\n}\n</uscript>\n\n===IsA\
      \ and ClassIsChildOf===\n\nNow you know how to cast a class, in circumstances\
      \ where you already know for sure that a reference points to a certain subclass.\
      \ However, what about situations where you don't know for sure? Suppose you\
      \ had a function like the following:\n\n<uscript>\n// Called to determine what\
      \ type of food something is.\nfunction string TypeOfMeal( Meal M )\n</uscript>\n\
      \nThis function takes a meal as a parameter, and returns a string describing\
      \ what type of food it is. We want to return \"Spicy\" if it is a pizza with\
      \ sauce, \"Bland\" if it is a pizza without sauce. Otherwise, we want to return\
      \ \"Unknown.\"\n\n<uscript>\n// Called to determine what type of food something\
      \ is.\nfunction string TypeOfMeal( Meal M )\n{\n       if (  Pizza( M ).bHasSauce\
      \ ) return \"Spicy\";\n  else if ( !Pizza( M ).bHasSauce ) return \"Bland\"\
      ;\n  else return \"Unknown\";\n}\n</uscript>\n\nThis seems like it would work,\
      \ but it does not. If the pizza has sauce, it returns \"Spicy.\" If the pizza\
      \ does not have sauce, it returns \"Bland.\" This is what we want, so far. However,\
      \ if the meal is not a pizza at all, we want to return \"Unknown.\" This function\
      \ will return \"Bland\" in that situation. Here's why: If M is not a pizza,\
      \ then Pizza( M ) returns None. None.bHasSauce will always evaluate as false,\
      \ as well as generating an error message in the log. Before we can safely cast\
      \ to the Pizza, we need to know for sure whether or not the meal M actually\
      \ is a Pizza. There are four ways to do this:\n* As mentioned, a cast to something\
      \ that isn't that class will always return None. We can test this to see if\
      \ it really is a Pizza or not. If Pizza( M ) == None, then M is either an empty\
      \ reference, or it isn't a reference to a pizza.\n* There is a native function\
      \ called IsA that does basically the same thing. IsA takes a name argument,\
      \ like 'Pizza'. To find out if M is a pizza, just call M.IsA( 'Pizza' ); It\
      \ will return true if M is a pizza, or false if M is not a pizza.\n* Every object\
      \ has a class variable that holds it's own class. We can check this to determine\
      \ if a class is a pizza or not. However, this method is not ideal because it\
      \ will not catch subclasses. A pizza checked in this manner will not register\
      \ as a pizza if it is a BetterPizza.\n* ClassIsChildOf is another native function\
      \ that allows us to investigate the class tree. However, like the above method,\
      \ ClassIsChildOf is less than ideal for this application as it will return only\
      \ subclasses of the specified class, not that class itself. It can be combined\
      \ with the above methods to get the same results as either of the top two methods.\
      \ It's syntax is below.\n\n<uscript>\n  if ( Pizza( M ) == None ) return \"\
      Unknown\";\n  if ( M.IsA( 'Pizza' ) )\n  {\n         if (  Pizza( M ).bHasSauce\
      \ ) return \"Spicy\";\n    else if ( !Pizza( M ).bHasSauce ) return \"Bland\"\
      ;\n  }\n\n  if ( Class != class'Pizza'\n  &&  !ClassIsChildOf( 'Pizza' ) )\n\
      \    return \"Unknown\";\n</uscript>\n\n===References to Classes===\n\nAs you\
      \ may have noticed, the class comparing and ClassIsChildOf both use a \"class\"\
      \ notation. This is a special type of variable, somewhere between a reference\
      \ and a primitive. It holds the class name of an object. Remember how we spawned\
      \ the Pizza?\n\n<uscript>\nSpawn(class 'Pizza');\n</uscript>\n\nNote that the\
      \ class designation was used there as well. In those cases, a variable is not\
      \ used, just an absolute value. For instance, the number 5 is not the same as\
      \ a variable holding the number 5, but both can be used interchangeably. Similarly,\
      \ a class variable and the constant version (as illustrated above) can be used\
      \ interchangeably. You can set a class variable in the same way you would set\
      \ any other variable:\n\n<uscript>\nlocal class<Meal> PizzaClass;        //\
      \ The triangle brackets in the declaration narrow down what type\n         \
      \                            // of class this can point to, but it is not necessary.\n\
      local Pizza MyPizza;\nlocal Pizza AnotherPizza;\n\nMyPizza = Spawn(class'Pizza');\n\
      \nPizzaClass = class'Pizza';\nAnotherPizza = Spawn( PizzaClass );\n</uscript>\n\
      \nThe constant syntax should be obvious, it is simply the word class, followed\
      \ by a single quote, followed by the name of the class, followed by another\
      \ single quote. It is useful in cases where you do not know at compile time\
      \ what the class is going to be. For instance, weapons use this for their projectiles.\
      \ Instead of having to change every reference to the projectile class in the\
      \ code, you can change it all by modifying one simple variable. In other cases,\
      \ that may not even be an option, and a class variable is required. Here's an\
      \ example: Let's say we were making a duplicator gun. Whenever it hit something,\
      \ it spawns a duplicate of that thing. The code for the duplication function\
      \ might look something like the following:\n\n<uscript>\nfunction Duplicate(\
      \ actor Other )\n{\n  local class<actor> OtherClass;\n\n  OtherClass = Other.Class;\n\
      \  Spawn( OtherClass );\n}\n</uscript>\n\n==Related Topics==\n\nThese pages\
      \ cover the above in more detail:\n* [[Legacy:Peppers And Pepper Grinders|Peppers\
      \ And Pepper Grinders]] \n* [[Legacy:Typecasting|Typecasting]]\n\n----\n\n==Discussion\
      \ Topics==\n\n'''Sobiwan:''' I dont 'remember when we spawned a pizza'.  The\
      \ previous section only defined a pizza (the class), but there was no mention\
      \ of spawning or what spawning is.  Hence, I am confused until this first sentence\
      \ is clearer.\n\n'''Tarquin:''' we spawned one in the section 'Where's My Pizza?'.\
      \ But it could be clearer. I'll work on it.\n\n'''Don:''' Forgive the professor\
      \ mode here, but I'd suggest changing the example that includes \"TheGun.Fire();\
      \ TheGun.Bullets = TheGun.Bullets - 1;\" - it may just be an example but it\
      \ completely disregards proper encapsulation.\n\n'''Tarquin:''' Good point.\
      \ Change it :)\n\n'''n8:''' Looks like Don copped out.  Did he mean change to:\
      \ \"TheGun.Fire(); TheGun.Bullets -= 1;\"?\n\n'''Pachacutec:''' Hmmm. I want\
      \ to alter an object reference in a class post its initialization instead to\
      \ one of its subclasses.  This way, all existing calls to that reference can\
      \ stay the same, the functionality is updated with no hassle.  I think this\
      \ is called protoyping in javascript.  I can do this here with Spawn?  I'm not\
      \ adding new function NAMES, but one of the functions will have extra commands\
      \ in the new sub.  Is this possible?\n\n'''Pachacutec:''' \"You don't have to\
      \ cast to use functions that were only overridden.\" Sorry, missed that comment.\
      \  thanks for this great page :)\n\n'''HoMeRS}i{MpSoN:''' It looks to me like\
      \ the ClassIsChildOf function has changed in UT2k4 (and I am guessing 2k3 before\
      \ it): \n\n<uscript>\nnative(258) static final function bool ClassIsChildOf(\
      \ class TestClass, class ParentClass );\n</uscript>\n\nThis requires a statement\
      \ such as:\n\n<uscript>\nif (ClassIsChildOf(V.Class, class'Volume'))\n    ...blah\
      \ blah\n</uscript>\n\ninstead of the examples above.\n\n'''SuperApe:''' This\
      \ ''restaurant'' family of beginner UScripting pages should be linked from the\
      \ Modding pages.  Currently, [[Legacy:Making Mods|Making Mods]] and [[Legacy:Mutator\
      \ Topics|Mutator Topics]] are the ones that get the most foot traffic.\n\n'''Stelcontar:'''\
      \ In UT2004 the ChildIsClassOf function returns true if the test class is a\
      \ child of the \"parent\" class OR is the same as the parent class. Example:\n\
      \n<uscript>\n//the following return true in UT2004\nClassIsChildOf(class'ShockRifle',class'ShockRifle')\
      \ \nClassIsChildOf(class'ShockRifle',class'Weapon')\nClassIsChildOf(class'ShockRifle',class'Inventory')\n\
      </uscript>\n\n'''KewlAzMe''' For the ''Duplicate'' function example, do you\
      \ always need to make a variable for that class? Wouldn't this work:\n\n<uscript>\n\
      function Duplicate( actor Other )\n{\n  Spawn( Other );\n}\n</uscript>\n\n???\n\
      \n'''Vertex''' i am a noob and just learning uscript, this helped more than\
      \ ALL the tutorials\n\n'''Sweavo:''' yeah, this really is a great tut for noobs\n\
      \n----\n\n'''OlympusMons:''' Okay so I didnt want to mess up the Typecasting\
      \ page with discussion so I thought I would put this here instead.\n\n:''ThingToGetObjectFrom''\
      \ '''.''' ''PropertyToAccess'' '''.''' ''PropertyToAccess''\n\nso what if the\
      \ first property to access is a class and you want to cast it?\n\nThe first\
      \ PropertyToAccess being ObjectToTypecast would be like this:\n\nThis:\n:''ClassToTypecastTo''\
      \ '''(''' ''ThingToGetObjectFrom'' '''.''' ''ObjectToTypecast'' ''') .''' ''PropertyToAccess''\n\
      \nNot:\n:<strike>''ThingToGetObjectFrom'' '''.''' ''ClassToTypecastTo'' '''('''\
      \ ''ObjectToTypecast'' ''') .''' ''PropertyToAccess''</strike>\n\nOr:\n:<strike>''ThingToGetObjectFrom''\
      \ '''.''' ''ObjectToTypecast'' '''(''' ''ClassToTypecastTo'' ''') .''' ''PropertyToAccess''</strike>\n\
      \nOkay so this is a common mistake I make but on the typecasting page is only\
      \ says how you should do it, I suggest putting a section on what doesnt work\
      \ also. This way people can compare and see what they are doing wrong, from\
      \ here though I needed to casr the second PropertyToAccess which would be like:\n\
      \n:''ClassToTypecastTo'' '''(''' ''ClassToTypecastTo'' '''( ''' ''ThingToGetObjectFrom''\
      \ '''.''' ''ObjectToTypecast'' ''') .''' ''ObjectToTypecast'' ''')'''\n\nWhich\
      \ I think shows nesting alittle better and how it works, obviously its only\
      \ an extension on the first but sometimes I try to just full stop my way through\
      \ adding brackets till I get it right which isnt the best method. So this would\
      \ provide a quick reference for those who might need to go deeper into the cast.\
      \ Usually though I break these up using local variables to keep it neater but\
      \ it is possible to put it all on one line.\n\nAnd to access a property all\
      \ the way through, so:\n:''ThingToGetObjectFrom'' '''.''' ''ObjectToTypecast''\
      \ '''.''' ''ObjectToTypecast'' '''.''' ''PropertyToAccess''\n\nWould look like:\
      \ \n:''ClassToTypecastTo'' '''(''' ''ClassToTypecastTo'' '''( ''' ''ThingToGetObjectFrom''\
      \ '''.''' ''ObjectToTypecast'' ''') .''' ''ObjectToTypecast'' ''') .''' ''PropertyToAccess''\n\
      \nNot:\n:<strike>''ThingToGetObjectFrom'' '''.''' ''ClassToTypecastTo'' '''('''\
      \ ''ObjectToTypecast'' ''') .''' ''ClassToTypecastTo'' '''(''' ''ObjectToTypecast''\
      \ ''') .''' ''PropertyToAccess''</strike>\n\nOr:\n: <strike>''ClassToTypecastTo''\
      \ '''(''' ''ThingToGetObjectFrom'' '''.''' ''ObjectToTypecast'' ''') .''' ''ClassToTypecastTo''\
      \ '''(''' ''ObjectToTypecast'' ''') .''' ''PropertyToAccess''</strike>\n\nAnyways\
      \ alot of people already know this but yeah perhaps this could be added in some\
      \ form to the typecasting page. I'll leave it here though so people can read\
      \ my findings, cool.\n\n'''Solid Snake:''' The best way I can explain this,\
      \ is to think of it like a nested tree, and to use only two terms, WHAT and\
      \ SOURCE. WHAT stands for what you want, and SOURCE is where the WHAT comes\
      \ from. Lets present a fairly nested statement.\n\nWHAT_4(WHAT_3(WHAT_2(SOURCE_1.SOURCE_2).SOURCE_3).SOURCE_4).SOURCE_5\n\
      \nEssentially SOURCE_5 is what you want at the end of the day (if SOURCE_5 is\
      \ absent, then you'll be wanting WHAT_4). Let's dissect that, first of all there\
      \ is no WHAT_1. I deliberately set the numbers so people could see the pairing\
      \ of WHAT and SOURCE. Let me first start by presenting a tree topology of the\
      \ class structure\n\nSOURCE_1 contains SOURCE_2\n\nWHAT_2 is a child class of\
      \ SOURCE_2\n\nWHAT_3 is a child class of SOURCE_3\n\nWHAT_4 is a child class\
      \ of SOURCE_4\n\nWHAT_2 contains SOURCE_3\n\nWHAT_3 contains SOURCE_4\n\nYou\
      \ find that WHAT_4 contains SOURCE_5. In order to get WHAT_4, you need to find\
      \ WHAT_2 and WHAT_3. You see that SOURCE_2 is actually a child class to WHAT_2,\
      \ which contains a reference to WHAT_3, which contains a reference to WHAT_4.\
      \ \n\nSo you first type cast SOURCE_2 to WHAT_2. [ WHAT_2(SOURCE_1.SOURCE_2)\
      \ ].\n\nYou now have a reference to WHAT_2.\n\nWHAT_2 contains a reference to\
      \ WHAT_3, so you type cast the reference found within WHAT_2, into WHAT_3. [\
      \ WHAT_3(WHAT_2(SOURCE_1.SOURCE_2).SOURCE_4) ]\n\nWHAT_3 contains a reference\
      \ to WHAT_4, so you type cast the reference found within WHAT_3 (which is the\
      \ result of the two type casts) and result with the above code.\n\nIt can still\
      \ be confusing but think backwards and sometimes you just have to learn you\
      \ class trees better to get the results you want. Hope that helps a little.\n\
      \n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 8722
name: "Legacy:Using Objects"
revision:
  revid: 8722
  parentid: 8724
  user: "222-152-135-40.jetstream.xtra.co.nz"
  timestamp: 1196583150.000000000
  comment: "*"
timestamp: 1668755531.013195000
