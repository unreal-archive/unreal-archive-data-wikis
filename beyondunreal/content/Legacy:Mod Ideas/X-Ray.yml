---
parse:
  title: "Legacy:Mod Ideas/X-Ray"
  text:
    text: "<p>An adrenaline combo that lets the player see all other players, even\
      \ through walls. Maybe as skeletons.</p>\n<p><b>Haral:</b> Sure. You'd either\
      \ use the map-&gt;screen function or just find the distance from your viewrotation\
      \ (not too hard) to know where they are \"on your screen.\" Then you'd just\
      \ draw a widget scaled to the distance between your pawn and the other pawn\
      \ for the whole \"skeleton\" thing. An infrared view is on my todo and that's\
      \ what I had in mind.</p>\n<p><b>Mosquito:</b> How about having the player's\
      \ transpartent and have skeletons inside them, But what about custom models?</p>\n\
      <p><b>Foxpaw:</b> The problem with drawing a widget is that it won't be in the\
      \ same frame of animation as the actual pawn is. Canvas.Drawactor or Canvas.Drawscreenactor\
      \ (One of these would work, I think) would work a lot better. I don't think\
      \ you can even draw a mesh widget anyway, though I could be wrong about that.\
      \ I like the idea of having the player's transparent, that would satisfy pretty\
      \ much all custom models, as well. Technically a person COULD write their own\
      \ skeleton and make all of the skeletal animations for it, and if it were radical\
      \ enough compared to the built-in ones it might look a bit wierd, but so far\
      \ I haven't seen anyone go to those lengths to make a new model. (This would\
      \ only be necessary for things like quadrapedal models, etc.)</p>\n<p><b>Haral:</b>\
      \ Err right. I didn't look at it that closely yet. Still, rather than doing\
      \ anything so crazy as working with the skeleton or making a new one, you could\
      \ just make a new texture that looks like an x-ray skeleton. If you were going\
      \ for the low-budget approach anyway... you'd probably need to enforce the mesh\
      \ on the pawns as well. Would alleviate work, anyway.</p>\n<p><b>Foxpaw:</b>\
      \ Hold on, I had another idea. All species code has a skeleton variable that\
      \ stores what mesh it should turn into if it gets skeletized, which I think\
      \ only happens if you fall in lava or possibly from the ion cannon as well.\
      \ LinkMesh is simulated, so you could have clients force them to change to that\
      \ skeleton mesh without having actually been skeletized, without the server\
      \ losing track of what the actual meshes are. This would also allow each client\
      \ to see skeletons only when applicable. Canvas.Drawactor could be used to draw\
      \ pawns on the screen maintaining their proper frame of animation.. that should\
      \ satisfy all criteria. Remembering the skeletons from when you get skeletized\
      \ was a real epiphany for me on this one.&#160;:P I hope that's descriptive\
      \ enough, I think that actually solves all of the problems that I thought of\
      \ before, even replication! I'll summarize in point form:</p>\n<ul>\n<li>Server\
      \ spawns an actor at the beginning of the game to manage the X-Ray-ness.</li>\n\
      <li>When the andrenaline combo is activated, the server sets some variables\
      \ in an an array to tell all clients who just engaged the andrenaline combo.\
      \ All pawns are also set to bAlwaysRelevant=true. (just in case)</li>\n<li>Upon\
      \ reciept of this new element in the \"X-Ray array,\" each client scans the\
      \ array to see if their name is in it.</li>\n<li>If a client does not find their\
      \ name in the list, return and don't check again until the next time the list\
      \ is updated.</li>\n<li>If we do find our name in the list, then:\n<ul>\n<li>Store\
      \ the meshes of all pawns in the game in a dynamic array, along with a pointer\
      \ to that pawn.</li>\n<li>Link all pawn's mesh to the skeleton mesh of their\
      \ respective speciestype class. If they have no speciestype or a skeleton is\
      \ not specified, use default (male jugg) skeleton.</li>\n<li>Spawn an interaction\
      \ and link it to the local interaction list of the local player.</li>\n<li>Said\
      \ interaction will call C.DrawActor on every pawn, except itself, every tick.</li>\n\
      </ul>\n</li>\n<li>When andrenaline combo/pickup/whatever expires, the server\
      \ updates the array and removes the applicable name from the array.</li>\n<li>Since\
      \ the array has changed, all clients check the list again. If they are in X-Ray\
      \ mode and their name is not on the list:\n<ul>\n<li>Restore the original meshes\
      \ from the dynamic array and remove the elements in said array.</li>\n<li>Destroy\
      \ the interaction and remove it from the list.</li>\n</ul>\n</li>\n<li>Return\
      \ to the second bullet point.</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.012 seconds\nReal time usage: 0.012 seconds\nPreprocessor visited\
      \ node count: 1/1000000\nPreprocessor generated node count: 4/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 1/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1955-0!*!*!*!*!*!*\
      \ and timestamp 20221118031548 and revision id 4787\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Mod Ideas/X-Ray"
  iwlinks: []
  wikitext:
    text: "An adrenaline combo that lets the player see all other players, even through\
      \ walls. Maybe as skeletons.\n\n'''Haral:''' Sure.  You'd either use the map->screen\
      \ function or just find the distance from your viewrotation (not too hard) to\
      \ know where they are \"on your screen.\"  Then you'd just draw a widget scaled\
      \ to the distance between your pawn and the other pawn for the whole \"skeleton\"\
      \ thing.  An infrared view is on my todo and that's what I had in mind.\n\n\
      '''Mosquito:''' How about having the player's transpartent and have skeletons\
      \ inside them, But what about custom models?\n\n'''Foxpaw:''' The problem with\
      \ drawing a widget is that it won't be in the same frame of animation as the\
      \ actual pawn is. Canvas.Drawactor or Canvas.Drawscreenactor (One of these would\
      \ work, I think) would work a lot better. I don't think you can even draw a\
      \ mesh widget anyway, though I could be wrong about that. I like the idea of\
      \ having the player's transparent, that would satisfy pretty much all custom\
      \ models, as well. Technically a person COULD write their own skeleton and make\
      \ all of the skeletal animations for it, and if it were radical enough compared\
      \ to the built-in ones it might look a bit wierd, but so far I haven't seen\
      \ anyone go to those lengths to make a new model. (This would only be necessary\
      \ for things like quadrapedal models, etc.)\n\n'''Haral:''' Err right.  I didn't\
      \ look at it that closely yet.  Still, rather than doing anything so crazy as\
      \ working with the skeleton or making a new one, you could just make a new texture\
      \ that looks like an x-ray skeleton.  If you were going for the low-budget approach\
      \ anyway... you'd probably need to enforce the mesh on the pawns as well.  Would\
      \ alleviate work, anyway.\n\n'''Foxpaw:''' Hold on, I had another idea. All\
      \ species code has a skeleton variable that stores what mesh it should turn\
      \ into if it gets skeletized, which I think only happens if you fall in lava\
      \ or possibly from the ion cannon as well. LinkMesh is simulated, so you could\
      \ have clients force them to change to that skeleton mesh without having actually\
      \ been skeletized, without the server losing track of what the actual meshes\
      \ are. This would also allow each client to see skeletons only when applicable.\
      \ Canvas.Drawactor could be used to draw pawns on the screen maintaining their\
      \ proper frame of animation.. that should satisfy all criteria. Remembering\
      \ the skeletons from when you get skeletized was a real epiphany for me on this\
      \ one. :P I hope that's descriptive enough, I think that actually solves all\
      \ of the problems that I thought of before, even replication! I'll summarize\
      \ in point form:\n\n* Server spawns an actor at the beginning of the game to\
      \ manage the X-Ray-ness.\n* When the andrenaline combo is activated, the server\
      \ sets some variables in an an array to tell all clients who just engaged the\
      \ andrenaline combo. All pawns are also set to bAlwaysRelevant=true. (just in\
      \ case)\n* Upon reciept of this new element in the \"X-Ray array,\" each client\
      \ scans the array to see if their name is in it.\n* If a client does not find\
      \ their name in the list, return and don't check again until the next time the\
      \ list is updated.\n* If we do find our name in the list, then:\n** Store the\
      \ meshes of all pawns in the game in a dynamic array, along with a pointer to\
      \ that pawn.\n** Link all pawn's mesh to the skeleton mesh of their respective\
      \ speciestype class. If they have no speciestype or a skeleton is not specified,\
      \ use default (male jugg) skeleton.\n** Spawn an interaction and link it to\
      \ the local interaction list of the local player.\n** Said interaction will\
      \ call C.DrawActor on every pawn, except itself, every tick.\n* When andrenaline\
      \ combo/pickup/whatever expires, the server updates the array and removes the\
      \ applicable name from the array.\n* Since the array has changed, all clients\
      \ check the list again. If they are in X-Ray mode and their name is not on the\
      \ list:\n** Restore the original meshes from the dynamic array and remove the\
      \ elements in said array.\n** Destroy the interaction and remove it from the\
      \ list.\n* Return to the second bullet point."
  properties: []
  revId: 4787
name: "Legacy:Mod Ideas/X-Ray"
revision:
  revid: 4787
  parentid: 4788
  user: "Foxpaw"
  timestamp: 1059889404.000000000
  comment: "Proposed Implementation."
timestamp: 1668765503.869975000
