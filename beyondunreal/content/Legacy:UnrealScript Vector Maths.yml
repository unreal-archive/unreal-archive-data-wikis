---
parse:
  title: "Legacy:UnrealScript Vector Maths"
  text:
    text: "<p>This is a page of \"how to I do foo\" sort of things, for values of\
      \ \"foo\" involving points, <a href=\"/Legacy:Vector\" title=\"Legacy:Vector\"\
      >vectors</a>, <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\">rotators</a>,\
      \ <a href=\"/Legacy:Quaternion\" title=\"Legacy:Quaternion\">quaternions</a>,\
      \ etc. Add question, post pseudocode / <a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a> code.</p>\n<p>And as we sometimes say...\
      \ \"it's not rocket science!\". Except in this case, it is&#160;;).</p>\n<p>In\
      \ the following:</p>\n<ul>\n<li><b>A</b> and <b>B</b> are points in space. These\
      \ could be Actors.</li>\n<li><b>a</b> and <b>b</b> are vectors for the positions\
      \ of these points respectively (e.g. <code>A.Location</code>)</li>\n</ul>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Some_basic_work_with_locations\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Some basic work\
      \ with locations</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a\
      \ href=\"#A_vector_that_points_from_A_to_B\"><span class=\"tocnumber\">1.1</span>\
      \ <span class=\"toctext\">A vector that points from <b>A</b> to <b>B</b></span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#A_unit_vector_pointing_from_A_to_B\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">A unit vector\
      \ pointing from <b>A</b> to <b>B</b></span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#The_distance_between_A_and_B\"><span class=\"tocnumber\"\
      >1.3</span> <span class=\"toctext\">The distance between <b>A</b> and <b>B</b></span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Orientations\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Orientations</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#A_unit_vector_pointing_in_the_direction_a_player_is_looking\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">A unit vector\
      \ pointing in the direction a player is looking</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-7\"><a href=\"#Rotate_Actor_A_to_face_point_B\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Rotate Actor <b>A</b>\
      \ to face point <b>B</b></span></a></li>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Rotate_Rotator_A_towards_Rotator_B\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Rotate Rotator <b>A</b> towards Rotator <b>B</b></span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#...find_where_B_is_in_relation_to_A\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">...find where\
      \ <b>B</b> is in relation to <b>A</b></span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-10\"><a href=\"#...find_where_Actor_A_is_in_relation_to_Pawn_B.2C_taking_into_account_B.27s_ViewRotation\"\
      ><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">...find where\
      \ Actor A is in relation to Pawn B, taking into account B's ViewRotation</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#...find_a_point_that.27s_at_a_certain_distance_from_a_starting_point_in_a_given_direction\"\
      ><span class=\"tocnumber\">2.6</span> <span class=\"toctext\">...find a point\
      \ that's at a certain distance from a starting point in a given direction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#...find_the_.28smallest.29_angle_between_A_and_B\"\
      ><span class=\"tocnumber\">2.7</span> <span class=\"toctext\">...find the (smallest)\
      \ angle between <b>A</b> and <b>B</b></span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-13\"><a href=\"#...point_to_my_left_or_right.3F\"><span class=\"\
      tocnumber\">2.8</span> <span class=\"toctext\">...point to my left or right?</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-14\"><a href=\"#...find_out_vector_B_that_points_x_degrees_to_the_left_or_right_of_vector_A\"\
      ><span class=\"tocnumber\">2.9</span> <span class=\"toctext\">...find out vector\
      \ B that points x degrees to the left or right of vector A</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#Rotate_a_rotator_by_another_rotator\"\
      ><span class=\"tocnumber\">2.10</span> <span class=\"toctext\">Rotate a rotator\
      \ by another rotator</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"\
      ><a href=\"#...damp_a_velocity_vector_toward_a_surface\"><span class=\"tocnumber\"\
      >2.11</span> <span class=\"toctext\">...damp a velocity vector toward a surface</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#...find_point_Q_where_a_normal_from_point_P_to_a_line_from_A_to_B_meets_the_line\"\
      ><span class=\"tocnumber\">2.12</span> <span class=\"toctext\">...find point\
      \ Q where a normal from point P to a line from A to B meets the line</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-18\"><a href=\"#...only_affect_certain_components_of_a_vector\"\
      ><span class=\"tocnumber\">2.13</span> <span class=\"toctext\">...only affect\
      \ certain components of a vector</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-19\"><a href=\"#What_does_this_do.3F\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">What does this do?</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-20\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Some_basic_work_with_locations\"\
      >Some basic work with locations</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=1\"\
      \ title=\"Edit section: Some basic work with locations\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>In these diagrams, vectors\
      \ that represent:</p>\n<ul>\n<li>positions are shown in blue</li>\n<li>orientations\
      \ are shown in green</li>\n</ul>\n<p>The vector you're after is usually in black.</p>\n\
      <h3><span class=\"mw-headline\" id=\"A_vector_that_points_from_A_to_B\">A vector\
      \ that points from <b>A</b> to <b>B</b></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=2\"\
      \ title=\"Edit section: A vector that points from A to B\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw5\">vector</span> <span class=\"sy0\">=</span> b <span\
      \ class=\"sy0\">-</span> a;</pre></div>\n</div>\n<div class=\"center\">\n<div\
      \ class=\"floatnone\"><a href=\"/File:Legacy_vectors-AtoB.png\" class=\"image\"\
      ><img alt=\"Legacy vectors-AtoB.png\" src=\"/w/images/Legacy_vectors-AtoB.png\"\
      \ width=\"242\" height=\"242\" /></a></div>\n</div>\n<p>The simple way to visualize\
      \ this is to imagine you want to travel from point A to point B, using the vectors\
      \ you already have. You travel along a backwards, so -a and then along b. This\
      \ gives -a + b, which is equal to b - a.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"A_unit_vector_pointing_from_A_to_B\">A unit vector pointing from <b>A</b>\
      \ to <b>B</b></span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=3\" title=\"\
      Edit section: A unit vector pointing from A to B\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Take the expression from above and normalize it:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw5\">vector</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"br0\"\
      >(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"The_distance_between_A_and_B\"\
      >The distance between <b>A</b> and <b>B</b></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=4\"\
      \ title=\"Edit section: The distance between A and B\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Simply find the length of\
      \ the vector:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">distance <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">VSize</span><span class=\"br0\"\
      >(</span>a <span class=\"sy0\">-</span> b<span class=\"br0\">)</span>;\ndistance\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The order doesn't matter here, since the length of a vector is always\
      \ positive.</p>\n<p><b>Devi:</b></p>\n<p>Note that the VSize function is relatively\
      \ slow since it involves a square root (it uses pythagoras theorem: L^2 = X^2\
      \ + Y^2 + Z^2). If you just want to compare the distance between two points\
      \ to another length (i.e. you want to say \"Is the distance between A and B\
      \ less than 100 units?\") then you can speed up the operation by using VSizeSq,\
      \ which returns the squared length of a vector (it does the same as VSize but\
      \ leaves out the final square root operation) and by squaring the distance you're\
      \ comparing to as well. So \"Is the length less than 100?\" becomes \"Is the\
      \ squared length less than 100 squared?\" for example:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> DistanceLessThanOneHundred<span\
      \ class=\"br0\">(</span><span class=\"kw5\">vector</span> a, <span class=\"\
      kw5\">vector</span> b<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \   <span class=\"kw2\">if</span> <span class=\"br0\">(</span>VSizeSq<span class=\"\
      br0\">(</span>a<span class=\"sy0\">-</span>b<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"br0\"\
      >)</span>\n   <span class=\"br0\">{</span>\n      <span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n   <span class=\"br0\">}</span>\n   <span\
      \ class=\"kw2\">else</span>\n   <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">return</span> <span class=\"kw6\">false</span>;\n   <span class=\"br0\"\
      >}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>or even</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> IsDistanceLessThan<span class=\"br0\">(</span><span\
      \ class=\"kw5\">vector</span> a, <span class=\"kw5\">vector</span> b, <span\
      \ class=\"kw5\">float</span> distance<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n   <span class=\"kw2\">return</span> <span class=\"br0\">(</span>VSizeSq<span\
      \ class=\"br0\">(</span>a<span class=\"sy0\">-</span>b<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&lt;</span> distance<span class=\"sy0\">**</span><span\
      \ class=\"nu0\">2</span> <span class=\"br0\">)</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Wormbo:</b> This just calls for a little optimization warning.\
      \ Your \"VSizeSq\" function does not exist in UT2004 and would have to be written\
      \ in UnrealScript, like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> VSizeSq<span class=\"\
      br0\">(</span><span class=\"kw5\">vector</span> A<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      kw3\">Square</span><span class=\"br0\">(</span>A.<span class=\"me0\">X</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Square</span><span\
      \ class=\"br0\">(</span>A.<span class=\"me0\">Y</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">+</span> <span class=\"kw3\">Square</span><span class=\"\
      br0\">(</span>A.<span class=\"me0\">Z</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>The problem with this is:\
      \ it's an UnrealScript function. That means, it's already slower than the corresponding\
      \ native implementation. When using this function, there's one UnrealScript\
      \ function call (the function itself) as well as 5 native function calls (three\
      \ times the Square function and twice the operator +). I dare to say that this\
      \ eats up the benefits of not performing the square root operation on the result.</p>\n\
      <p><b>Devi:</b> I'm working with the Unreal 2.X engine, maybe VSizeSq only exists\
      \ in that version, apologies for any confusion...</p>\n<p>Anyhows, if you want\
      \ to make your own version of VSizeSQ then the fastest way to do it in UScript\
      \ is to do the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> VSizeSq<span class=\"\
      br0\">(</span><span class=\"kw5\">Vector</span> a<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> a dot a;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Which is only one native\
      \ operator call, hurrah&#160;:D As you say with functions being slow to call,\
      \ you may want to just directly insert \"myVector dot myVector\" into your code\
      \ rather than putting it into a seperate function...</p>\n<p>(Wormbo, hope you\
      \ don't mind but I corrected your code sample and comments so that your version\
      \ of VSizeSq worked with only one vector as it should, rather than working with\
      \ two)</p>\n<p><b>Wormbo:</b> Oh right, thanks.&#160;:) BTW: I've just tested\
      \ the execution speed of <tt>x dot x</tt> versus <tt>VSize(x)</tt>:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> Main<span class=\"br0\">(</span><span class=\"\
      kw5\">string</span> Args<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> v;\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">float</span> f;\n  <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i, j;\n \n  <span\
      \ class=\"kw2\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0</span>; j <span class=\"sy0\">&lt;</span> <span\
      \ class=\"nu0\">3</span>; j<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"Test \"</span> <span class=\"\
      sy0\">$</span> j<span class=\"br0\">)</span>;\n    i <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">int</span><span class=\"br0\">(</span>Args<span class=\"\
      br0\">)</span>;\n    <span class=\"kw3\">StopWatch</span><span class=\"br0\"\
      >(</span><span class=\"kw6\">false</span><span class=\"br0\">)</span>;\n   \
      \ <span class=\"kw2\">while</span> <span class=\"br0\">(</span>i<span class=\"\
      sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n      v <span class=\"\
      sy0\">=</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span>\
      \ <span class=\"kw3\">VRand</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n      f <span class=\"sy0\">=</span> <span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span>v<span class=\"br0\">)</span>;\n    <span class=\"br0\"\
      >}</span>\n    <span class=\"kw3\">StopWatch</span><span class=\"br0\">(</span><span\
      \ class=\"kw6\">true</span><span class=\"br0\">)</span>;\n \n    i <span class=\"\
      sy0\">=</span> <span class=\"kw5\">int</span><span class=\"br0\">(</span>Args<span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw3\">StopWatch</span><span class=\"\
      br0\">(</span><span class=\"kw6\">false</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">while</span> <span class=\"br0\">(</span>i<span class=\"\
      sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n      v <span class=\"\
      sy0\">=</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span>\
      \ <span class=\"kw3\">VRand</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n      f <span class=\"sy0\">=</span> v Dot v;\n    <span class=\"\
      br0\">}</span>\n    <span class=\"kw3\">StopWatch</span><span class=\"br0\"\
      >(</span><span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n  <span\
      \ class=\"br0\">}</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      nu0\">0</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Output:</p>\n\
      <table>\n<tr>\n<td>\n<pre>\nD:\\UT2004\\System&gt;ucc test.test 100000\nExecuting\
      \ Class test.TestCommandlet\nTest 0\nTime=55.081175 ms\nTime=61.303065 ms\n\
      Test 1\nTime=54.837094 ms\nTime=60.095937 ms\nTest 2\nTime=54.314674 ms\nTime=60.696120\
      \ ms\n\nD:\\UT2004\\System&gt;ucc test.test 10000\nExecuting Class test.TestCommandlet\n\
      Test 0\nTime=5.410266 ms\nTime=5.997695 ms\nTest 1\nTime=5.466540 ms\nTime=7.278457\
      \ ms\nTest 2\nTime=5.332435 ms\nTime=6.241699 ms\n\nD:\\UT2004\\System&gt;ucc\
      \ test.test 1000\nExecuting Class test.TestCommandlet\nTest 0\nTime=0.573987\
      \ ms\nTime=0.569542 ms\nTest 1\nTime=0.529024 ms\nTime=0.590087 ms\nTest 2\n\
      Time=0.557979 ms\nTime=0.596532 ms\n\nD:\\UT2004\\System&gt;ucc test.test 100\n\
      Executing Class test.TestCommandlet\nTest 0\nTime=0.068894 ms\nTime=0.062653\
      \ ms\nTest 1\nTime=0.051611 ms\nTime=0.060420 ms\nTest 2\nTime=0.053945 ms\n\
      Time=0.061406 ms\n\nD:\\UT2004\\System&gt;ucc test.test 10\nExecuting Class\
      \ test.TestCommandlet\nTest 0\nTime=0.020546 ms\nTime=0.006913 ms\nTest 1\n\
      Time=0.014280 ms\nTime=0.006459 ms\nTest 2\nTime=0.005833 ms\nTime=0.005924\
      \ ms\n\nD:\\UT2004\\System&gt;ucc test.test 1\nExecuting Class test.TestCommandlet\n\
      Test 0\nTime=0.015603 ms\nTime=0.001598 ms\nTest 1\nTime=0.001807 ms\nTime=0.001216\
      \ ms\nTest 2\nTime=0.001130 ms\nTime=0.001585 ms\n\nD:\\UT2004\\System&gt;\n\
      </pre></td>\n</tr>\n</table>\n<p>Interestingly, loop execution seems to become\
      \ faster after the first iteration.</p>\n<p><b>Devi:</b> lol, my old boss would\
      \ be proud of you, he always said you should *always* do timings on things if\
      \ you're having arguments about optimisations&#160;:)</p>\n<p>Anyhows, I've\
      \ only been using UScript for a week or so (I'm a C++ programmer by training)\
      \ and I can give no explanation at all for the results you get from that test.\
      \ The fact that when you did the operation once you found that VSize was about\
      \ 10 times slower than Dot is what I would have expected, but the fact that\
      \ the more you do it, the faster VSize gets compared to Dot (even overtaking\
      \ it in speed) implies something very odd must be happening under the hood of\
      \ the UC virtual machine...</p>\n<p><b>Switch:</b> The fastest square dist method\
      \ I found was bit slower than VSize. BTW, some category for pages on profiling\
      \ would be welcome, putting this in comments adds a lot of noise to the document.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ Profile<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ a,b;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">vector</span>\
      \ va,vb;\n \n\tva <span class=\"sy0\">=</span> <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1234.5678</span>,<span class=\"\
      sy0\">-</span><span class=\"nu0\">9012.3456</span>,<span class=\"nu0\">7890.1234</span><span\
      \ class=\"br0\">)</span>; \n\tvb <span class=\"sy0\">=</span> <span class=\"\
      kw3\">vect</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span\
      \ class=\"nu0\">5678.9012</span>,<span class=\"nu0\">3456.7890</span>,<span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1234.5678</span><span class=\"br0\"\
      >)</span>;\n \n\t<span class=\"kw2\">for</span><span class=\"br0\">(</span>a<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>; a<span class=\"sy0\">&lt;</span><span\
      \ class=\"nu0\">20</span>; <span class=\"sy0\">++</span>a<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span> <span class=\"kw3\">stopwatch</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">false</span><span class=\"br0\"\
      >)</span>;\n\t\t<span class=\"co1\">//for(b=0; b&lt;10000; ++b) {\t\t\t</span>\n\
      \t\t<span class=\"co1\">//if( ((va-vb)dot(va-vb)) &lt; 1000000 ){}</span>\n\t\
      \t<span class=\"co1\">//if( VSize(va-vb) &lt; 1000 ){}\t\t\t</span>\n\t\t<span\
      \ class=\"co1\">//}\t\t\t\t\t\t\t\t\t\t</span>\n\t<span class=\"kw3\">stopwatch</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">true</span><span class=\"br0\">)</span>;\
      \ <span class=\"br0\">}</span>\t\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<pre>\nBuild: 3355 commandlet\nCommandline: start /REALTIME /B ucc sandbox.sandbox\n\
      \nLOOP 20x1, ((va-vb)dot(va-vb)) &lt; 1000000\nTime=0.008693 ms\nTime=0.001483\
      \ ms\nTime=0.001213 ms ...\n\nLOOP 20x1, VSize(va-vb) &lt; 1000\nTime=0.008144\
      \ ms\nTime=0.001159 ms\nTime=0.001023 ms ...\n\nLOOP 20x10000, ((va-vb)dot(va-vb))\
      \ &lt; 1000000\nTime=7.056599 ms\nTime=6.996057 ms\nTime=6.992126 ms ...\n\n\
      LOOP 20x10000, VSize(va-vb) &lt; 1000\nTime=4.834834 ms\nTime=4.831398 ms\n\
      Time=4.831604 ms ...\n</pre>\n<p><b>Foxpaw:</b> Loops get faster with a greater\
      \ number of iterations because of CPU caching and an increased probability of\
      \ TLB hits. For this reason I always \"precache\" things when I profile them,\
      \ IE running the test twice and keeping the second result. (Unless I need \"\
      real world numbers\" and it's time consuming enough to be measured on a single\
      \ iteration.) Ideally you could test with a clean cache every time, but manually\
      \ flushing the cache and TLB can't really be done from within an operating system\
      \ such as Windows or Linux, (let alone from within UScript) so I run my tests\
      \ fully cached.</p>\n<h2><span class=\"mw-headline\" id=\"Orientations\">Orientations</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=5\" title=\"Edit section:\
      \ Orientations\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"A_unit_vector_pointing_in_the_direction_a_player_is_looking\"\
      >A unit vector pointing in the direction a player is looking</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=6\"\
      \ title=\"Edit section: A unit vector pointing in the direction a player is\
      \ looking\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw5\">vector</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">vector</span><span class=\"br0\"\
      >(</span>myPlayerController.<span class=\"me0\">GetViewRotation</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Rotate_Actor_A_to_face_point_B\"\
      >Rotate Actor <b>A</b> to face point <b>B</b></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=7\"\
      \ title=\"Edit section: Rotate Actor A to face point B\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">a <span class=\"sy0\">=</span> A.<span class=\"kw7\">location</span>;\n\
      b <span class=\"sy0\">=</span> B.<span class=\"kw7\">location</span>\nA.<span\
      \ class=\"kw4\">SetRotation</span><span class=\"br0\">(</span><span class=\"\
      kw5\">rotator</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span>\
      \ a<span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <div class=\"center\">\n<div class=\"floatnone\"><a href=\"/File:Legacy_vectors-AorienttoB.png\"\
      \ class=\"image\"><img alt=\"Legacy vectors-AorienttoB.png\" src=\"/w/images/Legacy_vectors-AorienttoB.png\"\
      \ width=\"242\" height=\"242\" /></a></div>\n</div>\n<p><br /></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Rotate_Rotator_A_towards_Rotator_B\">Rotate Rotator\
      \ <b>A</b> towards Rotator <b>B</b></span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=8\"\
      \ title=\"Edit section: Rotate Rotator A towards Rotator B\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> <span class=\"kw5\">Rotator</span>\
      \ RotatorSlerp<span class=\"br0\">(</span><span class=\"kw5\">Rotator</span>\
      \ a, <span class=\"kw5\">Rotator</span> b, <span class=\"kw5\">float</span>\
      \ f<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw2\">return</span> <span class=\"kw3\">QuatToRotator</span><span class=\"br0\"\
      >(</span><span class=\"kw3\">QuatSlerp</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">QuatFromRotator</span><span class=\"br0\">(</span>a<span class=\"\
      br0\">)</span>, <span class=\"kw3\">QuatFromRotator</span><span class=\"br0\"\
      >(</span>b<span class=\"br0\">)</span>, f<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Rotates\
      \ <b>a</b> towards <b>b</b> with <b>f</b> percentage (ranging from 0.0 to 1.0).\
      \ If f == 1.0 then a becomes b.</p>\n<p><br /></p>\n<hr />\n<p>Things from below\
      \ here need clarifying....</p>\n<h3><span class=\"mw-headline\" id=\"...find_where_B_is_in_relation_to_A\"\
      >...find where <b>B</b> is in relation to <b>A</b></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=9\"\
      \ title=\"Edit section: ...find where B is in relation to A\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw9\">actor</span> A, B;\n<span class=\"kw5\"\
      >vector</span> aFacing,aToB;\n \n<span class=\"co1\">// What direction is A\
      \ facing in?</span>\naFacing<span class=\"sy0\">=</span><span class=\"kw3\"\
      >Normal</span><span class=\"br0\">(</span><span class=\"kw5\">Vector</span><span\
      \ class=\"br0\">(</span>A.<span class=\"kw7\">Rotation</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"co1\">// Get the\
      \ vector from A to B</span>\naToB<span class=\"sy0\">=</span>B.<span class=\"\
      me0\">Location</span><span class=\"sy0\">-</span>A.<span class=\"kw7\">Location</span>;\n\
      \ \norientation <span class=\"sy0\">=</span> aFacing dot aToB;\n  <span class=\"\
      co1\">// &gt; 0.0  B is in front of A</span>\n  <span class=\"co1\">// = 0.0\
      \  B is exactly to the right/left of A </span>\n  <span class=\"co1\">// &lt;\
      \ 0.0  B is behind A</span></pre></div>\n</div>\n<p>The code above functions\
      \ using the mathematic law that states that if you dot product a normalised\
      \ vector (which I'll call N) with another vector (which I'll V), the result\
      \ will be the length of V along direction N. We work out a normal vector that\
      \ points in the same direction as A is facing, then for V we calculate the vector\
      \ that leads from A to B. Now, if the result is positive then we know that V\
      \ must be travelling at least a little in the same direction as N (therefore\
      \ B is in front of A). If the result is 0 then V isn't travelling along N at\
      \ all (i.e. it must be at right angles to it). Finally if the result is negative\
      \ then we know that V must be travelling at least a little in the opposite direction\
      \ of N (meaning B is behind A).</p>\n<h3><span class=\"mw-headline\" id=\"...find_where_Actor_A_is_in_relation_to_Pawn_B.2C_taking_into_account_B.27s_ViewRotation\"\
      >...find where Actor A is in relation to Pawn B, taking into account B's ViewRotation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=10\" title=\"Edit section:\
      \ ...find where Actor A is in relation to Pawn B, taking into account B's ViewRotation\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><i>(make\
      \ sure Pawn B has a Controller)</i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >orientation <span class=\"sy0\">=</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span>B.<span class=\"kw9\">Controller</span>.<span class=\"\
      me0\">GetViewRotation</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span> dot <span class=\"kw3\">Normal</span><span\
      \ class=\"br0\">(</span>A.<span class=\"kw7\">Location</span> <span class=\"\
      sy0\">-</span> B.<span class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"co1\">// &gt; 0.0  A points forwards in relation to B (up to\
      \ 90° apart)</span>\n  <span class=\"co1\">// = 0.0  A is perpendicular to B\
      \ (exactly 90° between A and B)</span>\n  <span class=\"co1\">// &lt; 0.0  A\
      \ points backwards in relation to B (more than 90° apart)</span></pre></div>\n\
      </div>\n<p><b>Question:</b> How do I know if its to the Left or Right?</p>\n\
      <p><b>Devi:</b> This code works exactly the same way as the code in the previous\
      \ section. Now, if you think about it, the question: Is it to the left or right?\
      \ Can be solved in the same way as the question: Is it in front of me or behind\
      \ me? You just need to use a vector that points left/right instead of one that\
      \ points forwards:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw5\">vector</span> lateral;\n \n<span class=\"\
      co1\">// Get facing vector</span>\nlateral<span class=\"sy0\">=</span><span\
      \ class=\"kw5\">vector</span><span class=\"br0\">(</span>B.<span class=\"kw9\"\
      >Controller</span>.<span class=\"me0\">GetViewRotation</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"co1\">// Rotate 90 degrees in XZ, I'm going to assume (probably wrongly)\
      \ that this lateral vector will point to the left of the facing, but it COULD\
      \ be facing to the right</span>\n<span class=\"co1\">// in which case the answers\
      \ below are the wrong way round...</span>\nlateral<span class=\"sy0\">=</span>lateral\
      \ cross <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n \norientation <span class=\"sy0\">=</span> lateral\
      \ dot <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>A.<span class=\"\
      kw7\">Location</span> <span class=\"sy0\">-</span> B.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"co1\">// &gt; 0.0  A sits to the\
      \ left of B</span>\n  <span class=\"co1\">// = 0.0  A is in front of/behind\
      \ B (exactly 90° between A and B)</span>\n  <span class=\"co1\">// &lt; 0.0\
      \  A sits to the right of B</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"...find_a_point_that.27s_at_a_certain_distance_from_a_starting_point_in_a_given_direction\"\
      >...find a point that's at a certain distance from a starting point in a given\
      \ direction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=11\" title=\"\
      Edit section: ...find a point that's at a certain distance from a starting point\
      \ in a given direction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">LocationTarget <span class=\"sy0\">=</span>\
      \ LocationStart <span class=\"sy0\">+</span> <span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Rotation</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> Distance;</pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"...find_the_.28smallest.29_angle_between_A_and_B\"\
      >...find the (smallest) angle between <b>A</b> and <b>B</b></span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=12\"\
      \ title=\"Edit section: ...find the (smallest) angle between A and B\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><b>Note:</b> Acos\
      \ is a built-in function in <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a>. It is not present in <a href=\"/Legacy:UT\"\
      \ title=\"Legacy:UT\" class=\"mw-redirect\">UT</a>, see <a href=\"/Legacy:Useful_Maths_Functions\"\
      \ title=\"Legacy:Useful Maths Functions\">Useful Maths Functions</a>.<br />\n\
      This assumes A and B are normalized (are unit vectors). If either of them is\
      \ not normalized you need to wrap them in a Normal().<br /></p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">angle_radians <span class=\"sy0\">=</span> <span class=\"\
      kw3\">Acos</span><span class=\"br0\">(</span>A dot B<span class=\"br0\">)</span>;\n\
      angle_degrees <span class=\"sy0\">=</span> <span class=\"kw3\">Acos</span><span\
      \ class=\"br0\">(</span>A dot B<span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> <span class=\"nu0\">180</span><span class=\"sy0\">/</span><span class=\"\
      kw6\">pi</span>;</pre></div>\n</div>\n<p><b>DemonThing:</b> Just wanted to point\
      \ out that the vector <b>A</b> dot <b>B</b> is defined as</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">A dot B <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >VSize</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">*</span> <span class=\"kw3\">VSize</span><span class=\"br0\"\
      >(</span>B<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"\
      kw3\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span>\n\
      <span class=\"co1\">//or</span>\nA dot B <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">vect</span><span class=\"br0\">(</span>A.<span class=\"me0\"\
      >x</span> <span class=\"sy0\">*</span> B.<span class=\"me0\">x</span>, A.<span\
      \ class=\"me0\">y</span> <span class=\"sy0\">*</span> B.<span class=\"me0\"\
      >y</span>, A.<span class=\"me0\">z</span> <span class=\"sy0\">*</span> B.<span\
      \ class=\"me0\">z</span><span class=\"br0\">)</span></pre></div>\n</div>\n<p>if\
      \ I remember correctly. Don't try this code out – it won't work!!!&#160;:D</p>\n\
      <p><b>Devi:</b> Umm, the result of <b>A</b> dot <b>B</b> is a float, not a vector.\
      \ It's defined as:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">A dot B <span\
      \ class=\"sy0\">=</span> <span class=\"br0\">(</span>A.<span class=\"me0\">x</span><span\
      \ class=\"sy0\">*</span>B.<span class=\"me0\">x</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">+</span> <span class=\"br0\">(</span>A.<span class=\"\
      me0\">y</span><span class=\"sy0\">*</span>B.<span class=\"me0\">y</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>A.<span\
      \ class=\"me0\">z</span><span class=\"sy0\">*</span>B.<span class=\"me0\">z</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p>See <a href=\"http://en.wikipedia.org/wiki/Dot_product\"\
      \ class=\"extiw\" title=\"wikipedia:Dot product\">Wikipedia:Dot product</a>.</p>\n\
      <h3><span class=\"mw-headline\" id=\"...point_to_my_left_or_right.3F\">...point\
      \ to my left or right?</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=13\" title=\"\
      Edit section: ...point to my left or right?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A vector that points at 90 degrees to the way you're\
      \ looking can be given by the following. Note that it is horizontal; in the\
      \ XY plane. (So for a rolling aeroplane, this <i>won't</i> point along the wing\
      \ which will be slanted)</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"> resultingVector\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span><span class=\"kw5\">vector</span> cross <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"...find_out_vector_B_that_points_x_degrees_to_the_left_or_right_of_vector_A\"\
      >...find out vector B that points x degrees to the left or right of vector A</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=14\" title=\"Edit section:\
      \ ...find out vector B that points x degrees to the left or right of vector\
      \ A\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>Foxpaw:</b> I believe there are multiple vectors that could satisfy this.\
      \ Can you be more specific?</p>\n<p><b>Tarquin:</b> It depends on what you want\
      \ – 'left' and 'right' doesn't mean much in 3D, it has to be on a plane. We\
      \ can assume the horizontal though, as above.</p>\n<p><b>smattbac:</b> Like\
      \ in the example above this one, but instead of 90 degrees, any angle (or less\
      \ than 90).</p>\n<p><b>Tarquin:</b> Get a normal of the direction you're pointing\
      \ in. Call it <b>i</b>. Get the 90 degrees to the left one. Call it <b>j</b>.\
      \ Do some sine and cosine mojo with them.</p>\n<p><b>Foxpaw:</b> I think it\
      \ would be something along the lines of:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">  <span class=\"kw3\">Normal</span><span class=\"br0\">(</span><span class=\"\
      br0\">(</span><span class=\"kw3\">Normal</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">vector</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"\
      sy0\">-</span> <span class=\"br0\">(</span>AngleInDegrees <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span\
      \ class=\"br0\">(</span><span class=\"kw3\">Normal</span><span class=\"br0\"\
      >(</span><span class=\"kw5\">vector</span> cross <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>AngleInDegrees\
      \ <span class=\"sy0\">/</span> <span class=\"nu0\">90</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>I'm not sure if that would work or not. It seems to work for 0 degrees,\
      \ 90 degrees, and 45 degrees, but I don't know if it will work for other ones\
      \ or not.</p>\n<p><b>Tarquin:</b> eek. What you need is this: i*cos(alpha) +\
      \ j*sin(alpha). Alpha is angle in radians, obviously</p>\n<h3><span class=\"\
      mw-headline\" id=\"Rotate_a_rotator_by_another_rotator\">Rotate a rotator by\
      \ another rotator</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=15\" title=\"\
      Edit section: Rotate a rotator by another rotator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Dirk Fist:</b> Ok, I have a demo (UT) map that\
      \ shows arbitrary rotation in object coordinates, Its 10k</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw5\"\
      >rotator</span> rTurn<span class=\"br0\">(</span><span class=\"kw5\">rotator</span>\
      \ rHeading,<span class=\"kw5\">rotator</span> rTurnAngle<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n    <span class=\"co1\">// Generate\
      \ a turn in object coordinates </span>\n    <span class=\"co1\">//     this\
      \ should handle any gymbal lock issues</span>\n \n    <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> vForward,vRight,vUpward;\n    <span class=\"\
      kw1\">local</span> <span class=\"kw5\">vector</span> vForward2,vRight2,vUpward2;\n\
      \    <span class=\"kw1\">local</span> <span class=\"kw5\">rotator</span> T;\n\
      \    <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span>  V;\n\
      \ \n    <span class=\"kw3\">GetAxes</span><span class=\"br0\">(</span>rHeading,vForward,vRight,vUpward<span\
      \ class=\"br0\">)</span>;\n    <span class=\"co1\">//  rotate in plane that\
      \ contains vForward&amp;vRight</span>\n    T.<span class=\"me0\">Yaw</span><span\
      \ class=\"sy0\">=</span>rTurnAngle.<span class=\"me0\">Yaw</span>; V<span class=\"\
      sy0\">=</span><span class=\"kw5\">vector</span><span class=\"br0\">(</span>T<span\
      \ class=\"br0\">)</span>;\n    vForward2<span class=\"sy0\">=</span>V.<span\
      \ class=\"me0\">X</span><span class=\"sy0\">*</span>vForward <span class=\"\
      sy0\">+</span> V.<span class=\"me0\">Y</span><span class=\"sy0\">*</span>vRight;\n\
      \    vRight2<span class=\"sy0\">=</span>V.<span class=\"me0\">X</span><span\
      \ class=\"sy0\">*</span>vRight <span class=\"sy0\">-</span> V.<span class=\"\
      me0\">Y</span><span class=\"sy0\">*</span>vForward;\n    vUpward2<span class=\"\
      sy0\">=</span>vUpward;\n \n    <span class=\"co1\">// rotate in plane that contains\
      \ vForward&amp;vUpward</span>\n    T.<span class=\"me0\">Yaw</span><span class=\"\
      sy0\">=</span>rTurnAngle.<span class=\"me0\">Pitch</span>; V<span class=\"sy0\"\
      >=</span><span class=\"kw5\">vector</span><span class=\"br0\">(</span>T<span\
      \ class=\"br0\">)</span>;\n    vForward<span class=\"sy0\">=</span>V.<span class=\"\
      me0\">X</span><span class=\"sy0\">*</span>vForward2 <span class=\"sy0\">+</span>\
      \ V.<span class=\"me0\">Y</span><span class=\"sy0\">*</span>vUpward2;\n    vRight<span\
      \ class=\"sy0\">=</span>vRight2;\n    vUpward<span class=\"sy0\">=</span>V.<span\
      \ class=\"me0\">X</span><span class=\"sy0\">*</span>vUpward2 <span class=\"\
      sy0\">-</span> V.<span class=\"me0\">Y</span><span class=\"sy0\">*</span>vForward2;\n\
      \ \n    <span class=\"co1\">// rotate in plane that contains vUpward&amp;vRight</span>\n\
      \    T.<span class=\"me0\">Yaw</span><span class=\"sy0\">=</span>rTurnAngle.<span\
      \ class=\"me0\">Roll</span>; V<span class=\"sy0\">=</span><span class=\"kw5\"\
      >vector</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span>;\n \
      \   vForward2<span class=\"sy0\">=</span>vForward;\n    vRight2<span class=\"\
      sy0\">=</span>V.<span class=\"me0\">X</span><span class=\"sy0\">*</span>vRight\
      \ <span class=\"sy0\">+</span> V.<span class=\"me0\">Y</span><span class=\"\
      sy0\">*</span>vUpward;\n    vUpward2<span class=\"sy0\">=</span>V.<span class=\"\
      me0\">X</span><span class=\"sy0\">*</span>vUpward <span class=\"sy0\">-</span>\
      \ V.<span class=\"me0\">Y</span><span class=\"sy0\">*</span>vRight;\n \n   \
      \ T<span class=\"sy0\">=</span><span class=\"kw3\">OrthoRotation</span><span\
      \ class=\"br0\">(</span>vForward2,vRight2,vUpward2<span class=\"br0\">)</span>;\n\
      \ \n   <span class=\"kw2\">return</span><span class=\"br0\">(</span>T<span class=\"\
      br0\">)</span>;    \n<span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"...damp_a_velocity_vector_toward_a_surface\">...damp\
      \ a velocity vector toward a surface</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=16\"\
      \ title=\"Edit section: ...damp a velocity vector toward a surface\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw7\">Velocity</span> <span class=\"sy0\">+=</span>\
      \ SurfaceNormal <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">Normal</span><span class=\"br0\">(</span><span class=\"kw7\"\
      >Velocity</span><span class=\"br0\">)</span> dot SurfaceNormal<span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> DampFactor;</pre></div>\n</div>\n\
      <p>Useful DampFactor is &gt;=-1, where -1 will make Velocity parallel to the\
      \ surface, 0 will do nothing, and positive values will give a \"pop up\" effect\
      \ by making the Velocity vector point further from the plane of the surface.</p>\n\
      <h3><span class=\"mw-headline\" id=\"...find_point_Q_where_a_normal_from_point_P_to_a_line_from_A_to_B_meets_the_line\"\
      >...find point Q where a normal from point P to a line from A to B meets the\
      \ line</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=17\" title=\"\
      Edit section: ...find point Q where a normal from point P to a line from A to\
      \ B meets the line\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Given a line AB and a point P, we want to find a point Q on that line such\
      \ that PQ and AB are perpendicular.</p>\n<p><a href=\"/File:Legacy_normal_to_a_line_01.png\"\
      \ class=\"image\" title=\"Legacy_normal_to_a_line_01.png\"><img alt=\"Legacy_normal_to_a_line_01.png\"\
      \ src=\"/w/images/Legacy_normal_to_a_line_01.png\" width=\"264\" height=\"192\"\
      \ /></a></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\">Q <span class=\"\
      sy0\">=</span> A <span class=\"sy0\">+</span> <span class=\"kw3\">Normal</span><span\
      \ class=\"br0\">(</span> B <span class=\"sy0\">-</span> A <span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"\
      br0\">(</span><span class=\"br0\">(</span> B <span class=\"sy0\">-</span> A\
      \ <span class=\"br0\">)</span> dot <span class=\"br0\">(</span> P <span class=\"\
      sy0\">-</span> A <span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">/</span> <span class=\"kw3\">VSize</span><span class=\"br0\"\
      >(</span> A <span class=\"sy0\">-</span> B <span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p>This is perfect for that railgun\
      \ with shockwave damage you always wanted:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw2\">for</span> <span class=\"br0\">(</span>P <span class=\"\
      sy0\">=</span> <span class=\"kw7\">Level</span>.<span class=\"me0\">PawnList</span>;\
      \ P <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>; P <span class=\"\
      sy0\">=</span> P.<span class=\"me0\">NextPawn</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    Q <span class=\"sy0\">=</span> StartTrace\
      \ <span class=\"sy0\">+</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span> HitLocation <span class=\"sy0\">-</span> StartTrace <span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">(</span> HitLocation <span class=\"\
      sy0\">-</span> StartTrace <span class=\"br0\">)</span>\n    dot <span class=\"\
      br0\">(</span> P.<span class=\"kw7\">Location</span> <span class=\"sy0\">-</span>\
      \ StartTrace <span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">/</span> <span class=\"kw3\">VSize</span><span class=\"br0\"\
      >(</span> StartTrace <span class=\"sy0\">-</span> HitLocation <span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span> P.<span class=\"kw7\">Location</span> <span class=\"sy0\">-</span>\
      \ Q <span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> ShockwaveRadius<span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"\
      co1\">// Pawn is within ShockwaveRadius, do your mojo!</span>\n    <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Note: Point\
      \ Q is not restricted to the length of line AB, so remember to check that the\
      \ victims are in front of StartTrace and behind HitLocation for that railgun\
      \ (unless you want it to go through the whole level in either direction, ofcourse...)</p>\n\
      <p><b>DemonThing:</b> Q is relative to the origin, assuming A, B, and P are\
      \ as well. Observe:</p>\n<p>See my definition of dot product above (the first\
      \ one). You will see that (B - A) dot (P - A) is equal to VSize(B - A) * VSize(P\
      \ - A) * cos(angle). Divide that by VSize(A - B) (which is equal to VSize(B\
      \ - A)) and you get VSize(P - A) * cos(angle). If you know a bit of trigonometry,\
      \ you will see that this is equal to VSize(Q - A). When you multiply that by\
      \ Normal(B - A) (which is equal to Normal(Q - A), since A, B, and Q are collinear),\
      \ you get Q - A. We add A to that and we get Q, which is a location vector.</p>\n\
      <h3><span class=\"mw-headline\" id=\"...only_affect_certain_components_of_a_vector\"\
      >...only affect certain components of a vector</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=18\"\
      \ title=\"Edit section: ...only affect certain components of a vector\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In UnrealScript\
      \ there's a component-by-component vector multiplication. You can use it to\
      \ either only use two components of a vector for an operation and/or ignore\
      \ certain components of the result.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">// do something with A but don't change the Z component\
      \ of it</span>\n<span class=\"kw5\">vector</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> DoSomethingWith<span class=\"\
      br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span\
      \ class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> A;\n \n<span class=\"co1\">// do something with\
      \ the X and Z components of A</span>\n<span class=\"kw5\">vector</span> <span\
      \ class=\"sy0\">=</span> DoSomethingWith<span class=\"br0\">(</span><span class=\"\
      kw3\">vect</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> A<span class=\"br0\">)</span>;\n \n<span class=\"\
      co1\">// do something with the Y and Z components of a vector and use its original\
      \ X component</span>\n<span class=\"kw5\">vector</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> DoSomethingWith<span class=\"\
      br0\">(</span><span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> A<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">+</span> <span class=\"kw3\">vect</span><span class=\"\
      br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ A;</pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"What_does_this_do.3F\"\
      >What does this do?</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=19\" title=\"\
      Edit section: What does this do?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"> resultingVector\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span><span class=\"kw5\">vector</span> cross <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p>The cross product of two vectors is perpendicular\
      \ to both. Which means that (vector cross vect(0, 0, 1)) is a vector pependicular\
      \ to the given vector AND the z-axis. Something perp to z is horizontal – it's\
      \ confined to the XY plane. So it's a horizontal vector that is also perp to\
      \ the given vector. It's then normalized. I can't remember <i>which</i> way\
      \ the cross product points in Unreal. So it's either a unit vector that points\
      \ to your right or left.</p>\n<p><b>Devi</b> As an aside, if you want to rotate\
      \ a 3D vector by 90 degrees on the XZ plane you can also do this:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">float</span> t;\n<span class=\"kw1\">local</span> <span class=\"\
      kw5\">vector</span> v;\n \nt<span class=\"sy0\">=</span>v.<span class=\"me0\"\
      >x</span>;\nv.<span class=\"me0\">x</span><span class=\"sy0\">=</span>v.<span\
      \ class=\"me0\">y</span>;\nv.<span class=\"me0\">y</span><span class=\"sy0\"\
      >=-</span>t;</pre></div>\n</div>\n<p>The output vector is identical in length\
      \ to the ingoing one (i.e. If it was normal when it went in, it'll be normal\
      \ when it came out) In C this would be far faster that the example beforehand,\
      \ though whether it's faster in UScript is another matter...</p>\n<p><b>AlphaOne:</b>\
      \ What about this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"> <span class=\"\
      kw5\">vector</span> <span class=\"sy0\">=</span> <span class=\"kw3\">vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&gt;&gt;</span> <span class=\"kw7\">Rotation</span>;</pre></div>\n</div>\n\
      <p>I believe that Rotation is also a vector (not a rotator). Is it?</p>\n<p><b>Tarquin:</b>\
      \ Be pretty cruddy coding if it were. &gt;&gt; is a rotator / vector operator.</p>\n\
      <p><b>Dade:</b> How would i go about modifying only the \"XY\" coordinates of\
      \ a vector? I.E. Changes the vector's</p>\n<p>location, but not its height.\
      \ Or is this even possible? (haven't studied vectors yet)</p>\n<p><b>VonStrohmen:</b>\
      \ I'm not quite sure what you're asking, but if you mean can you change the\
      \ X and Y components of a vector without modifying its Z, then sure.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw5\">Vector</span> A,B;\n\
      B <span class=\"sy0\">=</span> <span class=\"kw3\">vect</span><span class=\"\
      br0\">(</span>A.<span class=\"me0\">X</span> <span class=\"sy0\">+</span><span\
      \ class=\"nu0\">50</span>, A.<span class=\"me0\">Y</span> <span class=\"sy0\"\
      >+</span> <span class=\"nu0\">100</span>, A.<span class=\"me0\">Z</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p><b>Dade:</b> Ah Ha! Thank\
      \ you. That was exactly what i needed.</p>\n<p><b>Wormbo:</b> Note that vect(x,y,z)\
      \ and rot(p,y,r) are more like \"a string\" or 'aName', in other words a constant.\
      \ Also note that you can \"multiply\" vectors in UnrealScript, i.e. vect(1,2,3)\
      \ * vect(2,3,4) = vect(2,6,12). This is neither dot product nor cross product,\
      \ it just multiplies the corresponding parts of the vector.</p>\n<p><b>Mortal\
      \ Monkey:</b> Hello good people! I just added the \"...find vector Q\" part,\
      \ feel free to improve it.</p>\n<p><b>Foxpaw:</b> What do &lt;&lt; and &gt;&gt;\
      \ do with regards to vectors? One of them appears to do a coordinate rotation\
      \ of the vector given that the rotator points along the X Axis of the target\
      \ coordinate system, but what does the other one do?</p>\n<p><b>inio:</b> I\
      \ thought they rotated a vector by a rotator, and the reverse a of a rotator\
      \ ((theVec &lt;&lt; theRot) &gt;&gt; theRot == theVec)</p>\n<p><b>Foxpaw:</b>\
      \ That may be. I know that one of them does the coordinate rotation, which is\
      \ basically what you said. It is possible that the other just does it by the\
      \ reverse of that rotator.</p>\n<p><b>Sir_Brizz:</b> Is it too much to ask that\
      \ someone PLEASE put some pictures up showing precisely how these all work?\
      \ Imaginary directions and all are way too confusing to leave to the brain.</p>\n\
      <p><b>Tarquin:</b> Care to nominate some that need a picture particularly badly?</p>\n\
      <p><b>Sir_Brizz:</b> Well, I think there should at least be one explaining several\
      \ at a time. I'm trying to figure out exactly how \"...find where <b>A</b> is\
      \ in relation to <b>B</b>?\" works exactly.</p>\n<p><b>Devi:</b> I just rewrote\
      \ that section so it actually (at least to me&#160;;) ) makes sense, by, you\
      \ know, explaining what A and B actually are&#160;:) Hope that helps... (Sorry,\
      \ I'm a bit pants at making diagrams)</p>\n<p><b>Devi:</b> heheh, just realised\
      \ that both mine and the other guys example was finding where B was in relation\
      \ to A, rather than vice-versa&#160;:) Just renamed the subject title...</p>\n\
      <p><b>Unrealed:</b> Cool, it helped me a lot =). It was simple and I didnt know\
      \ how: SetRotation(rotator(NextEnemy.Location-Location));</p>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Vector_Maths?section=20\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Vector\" title=\"Legacy:Vector\"\
      >Vector</a></li>\n<li><a href=\"/Legacy:Built-In_Struct\" title=\"Legacy:Built-In\
      \ Struct\">Built-In Struct</a></li>\n<li><a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">Global Function</a></li>\n<li><a href=\"\
      /Legacy:Operators\" title=\"Legacy:Operators\">Operators</a></li>\n<li><a href=\"\
      /Legacy:Useful_Maths_Functions\" title=\"Legacy:Useful Maths Functions\">Useful\
      \ Maths Functions</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.581 seconds\nReal time usage: 2.326 seconds\nPreprocessor visited node count:\
      \ 370/1000000\nPreprocessor generated node count: 736/1000000\nPost‐expand include\
      \ size: 25/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3323-0!*!0!!en!5!*\
      \ and timestamp 20221117184744 and revision id 45182\n -->\n"
  categories:
  - sortkey: "UnrealScript Vector Maths"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Built-In Struct"
  - ns: 100
    exists: true
    name: "Legacy:Useful Maths Functions"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Quaternion"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  templates: []
  images:
  - "Legacy_vectors-AtoB.png"
  - "Legacy_vectors-AorienttoB.png"
  - "Legacy_normal_to_a_line_01.png"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Some basic work with locations"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 547
    anchor: "Some_basic_work_with_locations"
  - toclevel: 2
    level: "3"
    line: "A vector that points from <b>A</b> to <b>B</b>"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 737
    anchor: "A_vector_that_points_from_A_to_B"
  - toclevel: 2
    level: "3"
    line: "A unit vector pointing from <b>A</b> to <b>B</b>"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 1094
    anchor: "A_unit_vector_pointing_from_A_to_B"
  - toclevel: 2
    level: "3"
    line: "The distance between <b>A</b> and <b>B</b>"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 1242
    anchor: "The_distance_between_A_and_B"
  - toclevel: 1
    level: "2"
    line: "Orientations"
    number: "2"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 8064
    anchor: "Orientations"
  - toclevel: 2
    level: "3"
    line: "A unit vector pointing in the direction a player is looking"
    number: "2.1"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 8082
    anchor: "A_unit_vector_pointing_in_the_direction_a_player_is_looking"
  - toclevel: 2
    level: "3"
    line: "Rotate Actor <b>A</b> to face point <b>B</b>"
    number: "2.2"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 8224
    anchor: "Rotate_Actor_A_to_face_point_B"
  - toclevel: 2
    level: "3"
    line: "Rotate Rotator <b>A</b> towards Rotator <b>B</b>"
    number: "2.3"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 8408
    anchor: "Rotate_Rotator_A_towards_Rotator_B"
  - toclevel: 2
    level: "3"
    line: "...find where <b>B</b> is in relation to <b>A</b>"
    number: "2.4"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 8794
    anchor: "...find_where_B_is_in_relation_to_A"
  - toclevel: 2
    level: "3"
    line: "...find where Actor A is in relation to Pawn B, taking into account B's\
      \ ViewRotation"
    number: "2.5"
    index: "10"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 9919
    anchor: "...find_where_Actor_A_is_in_relation_to_Pawn_B.2C_taking_into_account_B.27s_ViewRotation"
  - toclevel: 2
    level: "3"
    line: "...find a point that's at a certain distance from a starting point in a\
      \ given direction"
    number: "2.6"
    index: "11"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 11333
    anchor: "...find_a_point_that.27s_at_a_certain_distance_from_a_starting_point_in_a_given_direction"
  - toclevel: 2
    level: "3"
    line: "...find the (smallest) angle between <b>A</b> and <b>B</b>"
    number: "2.7"
    index: "12"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 11512
    anchor: "...find_the_.28smallest.29_angle_between_A_and_B"
  - toclevel: 2
    level: "3"
    line: "...point to my left or right?"
    number: "2.8"
    index: "13"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 12462
    anchor: "...point_to_my_left_or_right.3F"
  - toclevel: 2
    level: "3"
    line: "...find out vector B that points x degrees to the left or right of vector\
      \ A"
    number: "2.9"
    index: "14"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 12802
    anchor: "...find_out_vector_B_that_points_x_degrees_to_the_left_or_right_of_vector_A"
  - toclevel: 2
    level: "3"
    line: "Rotate a rotator by another rotator"
    number: "2.10"
    index: "15"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 13918
    anchor: "Rotate_a_rotator_by_another_rotator"
  - toclevel: 2
    level: "3"
    line: "...damp a velocity vector toward a surface"
    number: "2.11"
    index: "16"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 15094
    anchor: "...damp_a_velocity_vector_toward_a_surface"
  - toclevel: 2
    level: "3"
    line: "...find point Q where a normal from point P to a line from A to B meets\
      \ the line"
    number: "2.12"
    index: "17"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 15468
    anchor: "...find_point_Q_where_a_normal_from_point_P_to_a_line_from_A_to_B_meets_the_line"
  - toclevel: 2
    level: "3"
    line: "...only affect certain components of a vector"
    number: "2.13"
    index: "18"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 17125
    anchor: "...only_affect_certain_components_of_a_vector"
  - toclevel: 1
    level: "2"
    line: "What does this do?"
    number: "3"
    index: "19"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 17780
    anchor: "What_does_this_do.3F"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "20"
    fromtitle: "Legacy:UnrealScript_Vector_Maths"
    byteoffset: 21498
    anchor: "Related_Topics"
  displaytitle: "Legacy:UnrealScript Vector Maths"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Dot_product"
    name: "wikipedia:Dot product"
  wikitext:
    text: "This is a page of \"how to I do foo\" sort of things, for values of \"\
      foo\" involving points, [[Legacy:Vector|vector]]s, [[Legacy:Rotator|rotator]]s,\
      \ [[Legacy:Quaternion|quaternion]]s, etc. Add question, post pseudocode / [[Legacy:UnrealScript|UnrealScript]]\
      \ code.\n\nAnd as we sometimes say... \"it's not rocket science!\". Except in\
      \ this case, it is ;).\n\nIn the following:\n* '''A''' and '''B''' are points\
      \ in space. These could be Actors.\n* '''a''' and '''b''' are vectors for the\
      \ positions of these points respectively (e.g. <code>A.Location</code>) \n\n\
      ==Some basic work with locations==\n\nIn these diagrams, vectors that represent:\n\
      * positions are shown in blue\n* orientations are shown in green\n\nThe vector\
      \ you're after is usually in black.\n\n===A vector that points from '''A'''\
      \ to '''B'''===\n\n<uscript>vector = b - a;</uscript>\n\n[[Image:Legacy_vectors-AtoB.png|center|]]\n\
      \nThe simple way to visualize this is to imagine you want to travel from point\
      \ A to point B, using the vectors you already have. You travel along a backwards,\
      \ so -a and then along b. This gives -a + b, which is equal to b - a.\n\n===A\
      \ unit vector pointing from '''A''' to '''B'''===\n\nTake the expression from\
      \ above and normalize it:\n\n<uscript>vector = Normal(b - a);</uscript>\n\n\
      ===The distance between '''A''' and '''B'''===\n\nSimply find the length of\
      \ the vector:\n\n<uscript>\ndistance = VSize(a - b);\ndistance = VSize(b - a);\n\
      </uscript>\n\nThe order doesn't matter here, since the length of a vector is\
      \ always positive.\n\n'''Devi:'''\n\nNote that the VSize function is relatively\
      \ slow since it involves a square root (it uses pythagoras theorem: L^2 = X^2\
      \ + Y^2 + Z^2). If you just want to compare the distance between two points\
      \ to another length (i.e. you want to say \"Is the distance between A and B\
      \ less than 100 units?\") then you can speed up the operation by using VSizeSq,\
      \ which returns the squared length of a vector (it does the same as VSize but\
      \ leaves out the final square root operation) and by squaring the distance you're\
      \ comparing to as well. So \"Is the length less than 100?\" becomes \"Is the\
      \ squared length less than 100 squared?\" for example:\n\n<uscript>\nfunction\
      \ DistanceLessThanOneHundred(vector a, vector b)\n{\n   if (VSizeSq(a-b) < 10000)\n\
      \   {\n      return true;\n   }\n   else\n   {\n      return false;\n   }\n\
      }\n</uscript>\n\nor even \n\n<uscript>\nfunction bool IsDistanceLessThan(vector\
      \ a, vector b, float distance)\n{\n   return (VSizeSq(a-b) < distance**2 )\n\
      }\n</uscript>\n\n'''Wormbo:''' This just calls for a little optimization warning.\
      \ Your \"VSizeSq\" function does not exist in UT2004 and would have to be written\
      \ in UnrealScript, like this:\n\n<uscript>\nstatic final function float VSizeSq(vector\
      \ A)\n{\n  return Square(A.X) + Square(A.Y) + Square(A.Z);\n}\n</uscript>\n\n\
      The problem with this is: it's an UnrealScript function. That means, it's already\
      \ slower than the corresponding native implementation. When using this function,\
      \ there's one UnrealScript function call (the function itself) as well as 5\
      \ native function calls (three times the Square function and twice the operator\
      \ +). I dare to say that this eats up the benefits of not performing the square\
      \ root operation on the result.\n\n'''Devi:''' I'm working with the Unreal 2.X\
      \ engine, maybe VSizeSq only exists in that version, apologies for any confusion...\n\
      \nAnyhows, if you want to make your own version of VSizeSQ then the fastest\
      \ way to do it in UScript is to do the following:\n\n<uscript>\nfunction float\
      \ VSizeSq(Vector a)\n{\n  return a dot a;\n}\n</uscript>\n\nWhich is only one\
      \ native operator call, hurrah :D As you say with functions being slow to call,\
      \ you may want to just directly insert \"myVector dot myVector\" into your code\
      \ rather than putting it into a seperate function...\n\n(Wormbo, hope you don't\
      \ mind but I corrected your code sample and comments so that your version of\
      \ VSizeSq worked with only one vector as it should, rather than working with\
      \ two)\n\n'''Wormbo:''' Oh right, thanks. :) BTW: I've just tested the execution\
      \ speed of <tt>x dot x</tt> versus <tt>VSize(x)</tt>:\n\n<uscript>\nfunction\
      \ int Main(string Args)\n{\n  local vector v;\n  local float f;\n  local int\
      \ i, j;\n  \n  for (j = 0; j < 3; j++) {\n    log(\"Test \" $ j);\n    i = int(Args);\n\
      \    StopWatch(false);\n    while (i-- > 0) {\n      v = 1000 * VRand();\n \
      \     f = VSize(v);\n    }\n    StopWatch(true);\n    \n    i = int(Args);\n\
      \    StopWatch(false);\n    while (i-- > 0) {\n      v = 1000 * VRand();\n \
      \     f = v Dot v;\n    }\n    StopWatch(true);\n  }\n  return 0;\n}\n</uscript>\n\
      \nOutput:\n\n{|\n\n|-\n|<pre>\nD:\\UT2004\\System>ucc test.test 100000\nExecuting\
      \ Class test.TestCommandlet\nTest 0\nTime=55.081175 ms\nTime=61.303065 ms\n\
      Test 1\nTime=54.837094 ms\nTime=60.095937 ms\nTest 2\nTime=54.314674 ms\nTime=60.696120\
      \ ms\n\nD:\\UT2004\\System>ucc test.test 10000\nExecuting Class test.TestCommandlet\n\
      Test 0\nTime=5.410266 ms\nTime=5.997695 ms\nTest 1\nTime=5.466540 ms\nTime=7.278457\
      \ ms\nTest 2\nTime=5.332435 ms\nTime=6.241699 ms\n\nD:\\UT2004\\System>ucc test.test\
      \ 1000\nExecuting Class test.TestCommandlet\nTest 0\nTime=0.573987 ms\nTime=0.569542\
      \ ms\nTest 1\nTime=0.529024 ms\nTime=0.590087 ms\nTest 2\nTime=0.557979 ms\n\
      Time=0.596532 ms\n\nD:\\UT2004\\System>ucc test.test 100\nExecuting Class test.TestCommandlet\n\
      Test 0\nTime=0.068894 ms\nTime=0.062653 ms\nTest 1\nTime=0.051611 ms\nTime=0.060420\
      \ ms\nTest 2\nTime=0.053945 ms\nTime=0.061406 ms\n\nD:\\UT2004\\System>ucc test.test\
      \ 10\nExecuting Class test.TestCommandlet\nTest 0\nTime=0.020546 ms\nTime=0.006913\
      \ ms\nTest 1\nTime=0.014280 ms\nTime=0.006459 ms\nTest 2\nTime=0.005833 ms\n\
      Time=0.005924 ms\n\nD:\\UT2004\\System>ucc test.test 1\nExecuting Class test.TestCommandlet\n\
      Test 0\nTime=0.015603 ms\nTime=0.001598 ms\nTest 1\nTime=0.001807 ms\nTime=0.001216\
      \ ms\nTest 2\nTime=0.001130 ms\nTime=0.001585 ms\n\nD:\\UT2004\\System>\n</pre>\n\
      |}\n\nInterestingly, loop execution seems to become faster after the first iteration.\n\
      \n'''Devi:''' lol, my old boss would be proud of you, he always said you should\
      \ *always* do timings on things if you're having arguments about optimisations\
      \ :) \n\nAnyhows, I've only been using UScript for a week or so (I'm a C++ programmer\
      \ by training) and I can give no explanation at all for the results you get\
      \ from that test. The fact that when you did the operation once you found that\
      \ VSize was about 10 times slower than Dot is what I would have expected, but\
      \ the fact that the more you do it, the faster VSize gets compared to Dot (even\
      \ overtaking it in speed) implies something very odd must be happening under\
      \ the hood of the UC virtual machine...\n\n'''Switch:''' The fastest square\
      \ dist method I found was bit slower than VSize. BTW, some category for pages\
      \ on profiling would be welcome, putting this in comments adds a lot of noise\
      \ to the document.\n\n<uscript>\nfunction Profile()\n{\n\tlocal int a,b;\n\t\
      local vector va,vb;\n\t\n\tva = vect(1234.5678,-9012.3456,7890.1234); \n\tvb\
      \ = vect(-5678.9012,3456.7890,-1234.5678);\n\t\n\tfor(a=0; a<20; ++a) { stopwatch(false);\n\
      \t\t//for(b=0; b<10000; ++b) {\t\t\t\n\t\t//if( ((va-vb)dot(va-vb)) < 1000000\
      \ ){}\n\t\t//if( VSize(va-vb) < 1000 ){}\t\t\t\n\t\t//}\t\t\t\t\t\t\t\t\t\t\n\
      \tstopwatch(true); }\t\n}\n</uscript>\n\n<pre>\nBuild: 3355 commandlet\nCommandline:\
      \ start /REALTIME /B ucc sandbox.sandbox\n\nLOOP 20x1, ((va-vb)dot(va-vb)) <\
      \ 1000000\nTime=0.008693 ms\nTime=0.001483 ms\nTime=0.001213 ms ...\n\nLOOP\
      \ 20x1, VSize(va-vb) < 1000\nTime=0.008144 ms\nTime=0.001159 ms\nTime=0.001023\
      \ ms ...\n\nLOOP 20x10000, ((va-vb)dot(va-vb)) < 1000000\nTime=7.056599 ms\n\
      Time=6.996057 ms\nTime=6.992126 ms ...\n\nLOOP 20x10000, VSize(va-vb) < 1000\n\
      Time=4.834834 ms\nTime=4.831398 ms\nTime=4.831604 ms ...\n</pre>\n\n'''Foxpaw:'''\
      \ Loops get faster with a greater number of iterations because of CPU caching\
      \ and an increased probability of TLB hits. For this reason I always \"precache\"\
      \ things when I profile them, IE running the test twice and keeping the second\
      \ result. (Unless I need \"real world numbers\" and it's time consuming enough\
      \ to be measured on a single iteration.) Ideally you could test with a clean\
      \ cache every time, but manually flushing the cache and TLB can't really be\
      \ done from within an operating system such as Windows or Linux, (let alone\
      \ from within UScript) so I run my tests fully cached.\n\n==Orientations==\n\
      \n===A unit vector pointing in the direction a player is looking===\n\n<uscript>vector\
      \ = vector(myPlayerController.GetViewRotation());</uscript>\n\n===Rotate Actor\
      \ '''A''' to face point '''B'''===\n\n<uscript>\na = A.location;\nb = B.location\n\
      A.SetRotation(rotator(b - a));\n</uscript>\n\n[[Image:Legacy_vectors-AorienttoB.png|center|]]\n\
      \n\n===Rotate Rotator '''A''' towards Rotator '''B'''===\n\n<uscript>\nfunction\
      \ Rotator RotatorSlerp(Rotator a, Rotator b, float f)\n{\n    return QuatToRotator(QuatSlerp(QuatFromRotator(a),\
      \ QuatFromRotator(b), f));\n}\n</uscript>\n\nRotates '''a''' towards '''b'''\
      \ with '''f''' percentage (ranging from 0.0 to 1.0). If f == 1.0 then a becomes\
      \ b.\n\n\n----\n\nThings from below here need clarifying....\n\n===...find where\
      \ '''B''' is in relation to '''A'''===\n\n<uscript>\nactor A, B;\nvector aFacing,aToB;\n\
      \n// What direction is A facing in?\naFacing=Normal(Vector(A.Rotation));\n//\
      \ Get the vector from A to B\naToB=B.Location-A.Location;\n\norientation = aFacing\
      \ dot aToB;\n  // > 0.0  B is in front of A\n  // = 0.0  B is exactly to the\
      \ right/left of A \n  // < 0.0  B is behind A\n</uscript>\n\nThe code above\
      \ functions using the mathematic law that states that if you dot product a normalised\
      \ vector (which I'll call N) with another vector (which I'll V), the result\
      \ will be the length of V along direction N. We work out a normal vector that\
      \ points in the same direction as A is facing, then for V we calculate the vector\
      \ that leads from A to B. Now, if the result is positive then we know that V\
      \ must be travelling at least a little in the same direction as N (therefore\
      \ B is in front of A). If the result is 0 then V isn't travelling along N at\
      \ all (i.e. it must be at right angles to it). Finally if the result is negative\
      \ then we know that V must be travelling at least a little in the opposite direction\
      \ of N (meaning B is behind A).\n\n===...find where Actor A is in relation to\
      \ Pawn B, taking into account B's ViewRotation===\n\n''(make sure Pawn B has\
      \ a Controller)''\n\n<uscript>\norientation = vector(B.Controller.GetViewRotation())\
      \ dot Normal(A.Location - B.Location);\n  // > 0.0  A points forwards in relation\
      \ to B (up to 90° apart)\n  // = 0.0  A is perpendicular to B (exactly 90° between\
      \ A and B)\n  // < 0.0  A points backwards in relation to B (more than 90° apart)\n\
      </uscript>\n\n'''Question:''' How do I know if its to the Left or Right?\n\n\
      '''Devi:''' This code works exactly the same way as the code in the previous\
      \ section. Now, if you think about it, the question: Is it to the left or right?\
      \ Can be solved in the same way as the question: Is it in front of me or behind\
      \ me? You just need to use a vector that points left/right instead of one that\
      \ points forwards:\n\n<uscript>\nlocal vector lateral;\n\n// Get facing vector\n\
      lateral=vector(B.Controller.GetViewRotation());\n// Rotate 90 degrees in XZ,\
      \ I'm going to assume (probably wrongly) that this lateral vector will point\
      \ to the left of the facing, but it COULD be facing to the right\n// in which\
      \ case the answers below are the wrong way round...\nlateral=lateral cross vect(0,0,1);\n\
      \norientation = lateral dot Normal(A.Location - B.Location);\n  // > 0.0  A\
      \ sits to the left of B\n  // = 0.0  A is in front of/behind B (exactly 90°\
      \ between A and B)\n  // < 0.0  A sits to the right of B\n\n</uscript>\n\n===...find\
      \ a point that's at a certain distance from a starting point in a given direction===\n\
      \n<uscript>\nLocationTarget = LocationStart + vector(Rotation) * Distance;\n\
      </uscript>\n\n===...find the (smallest) angle between '''A''' and '''B'''===\n\
      \n'''Note:''' Acos is a built-in function in [[Legacy:UT2003|UT2003]]. It is\
      \ not present in [[Legacy:UT|UT]], see [[Legacy:Useful Maths Functions|Useful\
      \ Maths Functions]].<br />This assumes A and B are normalized (are unit vectors).\
      \  If either of them is not normalized you need to wrap them in a Normal().<br\
      \ /><uscript>\nangle_radians = Acos(A dot B);\nangle_degrees = Acos(A dot B)\
      \ * 180/pi;\n</uscript>\n\n'''DemonThing:''' Just wanted to point out that the\
      \ vector '''A''' dot '''B''' is defined as\n\n<uscript>\nA dot B = VSize(A)\
      \ * VSize(B) * cos(angle)\n//or\nA dot B = vect(A.x * B.x, A.y * B.y, A.z *\
      \ B.z)\n</uscript>\n\nif I remember correctly. Don't try this code out &ndash;\
      \ it won't work!!! :D\n\n'''Devi:''' Umm, the result of '''A''' dot '''B'''\
      \ is a float, not a vector. It's defined as:\n\n<uscript>\nA dot B = (A.x*B.x)\
      \ + (A.y*B.y) + (A.z*B.z)\n</uscript>\n\nSee [[Wikipedia:Dot product]].\n\n\
      ===...point to my left or right?===\n\nA vector that points at 90 degrees to\
      \ the way you're looking can be given by the following. Note that it is horizontal;\
      \ in the XY plane. (So for a rolling aeroplane, this ''won't'' point along the\
      \ wing which will be slanted)\n\n<uscript>\n resultingVector = Normal(vector\
      \ cross vect(0, 0, 1));\n</uscript>\n\n===...find out vector B that points x\
      \ degrees to the left or right of vector A===\n\n'''Foxpaw:''' I believe there\
      \ are multiple vectors that could satisfy this. Can you be more specific?\n\n\
      '''Tarquin:''' It depends on what you want &ndash; 'left' and 'right' doesn't\
      \ mean much in 3D, it has to be on a plane. We can assume the horizontal though,\
      \ as above.\n\n'''smattbac:''' Like in the example above this one, but instead\
      \ of 90 degrees, any angle (or less than 90).\n\n'''Tarquin:''' Get a normal\
      \ of the direction you're pointing in. Call it '''i'''. Get the 90 degrees to\
      \ the left one. Call it '''j'''. Do some sine and cosine mojo with them.\n\n\
      '''Foxpaw:''' I think it would be something along the lines of:\n\n<uscript>\n\
      \  Normal((Normal(vector) * (1 - (AngleInDegrees / 90) ) ) + (Normal(vector\
      \ cross vect(0, 0, 1)) * (AngleInDegrees / 90)));\n</uscript>\n\nI'm not sure\
      \ if that would work or not. It seems to work for 0 degrees, 90 degrees, and\
      \ 45 degrees, but I don't know if it will work for other ones or not.\n\n'''Tarquin:'''\
      \ eek. What you need is this: i*cos(alpha) + j*sin(alpha). Alpha is angle in\
      \ radians, obviously\n\n===Rotate a rotator by another rotator===\n\n'''Dirk\
      \ Fist:''' Ok, I have a demo (UT) map that shows arbitrary rotation in object\
      \ coordinates, Its 10k \n\n<uscript>\nfunction rotator rTurn(rotator rHeading,rotator\
      \ rTurnAngle)\n{\n    // Generate a turn in object coordinates \n    //    \
      \ this should handle any gymbal lock issues\n\n    local vector vForward,vRight,vUpward;\n\
      \    local vector vForward2,vRight2,vUpward2;\n    local rotator T;\n    local\
      \ vector  V;\n\n    GetAxes(rHeading,vForward,vRight,vUpward);\n    //  rotate\
      \ in plane that contains vForward&vRight\n    T.Yaw=rTurnAngle.Yaw; V=vector(T);\n\
      \    vForward2=V.X*vForward + V.Y*vRight;\n    vRight2=V.X*vRight - V.Y*vForward;\n\
      \    vUpward2=vUpward;\n\n    // rotate in plane that contains vForward&vUpward\n\
      \    T.Yaw=rTurnAngle.Pitch; V=vector(T);\n    vForward=V.X*vForward2 + V.Y*vUpward2;\n\
      \    vRight=vRight2;\n    vUpward=V.X*vUpward2 - V.Y*vForward2;\n\n    // rotate\
      \ in plane that contains vUpward&vRight\n    T.Yaw=rTurnAngle.Roll; V=vector(T);\n\
      \    vForward2=vForward;\n    vRight2=V.X*vRight + V.Y*vUpward;\n    vUpward2=V.X*vUpward\
      \ - V.Y*vRight;\n    \n    T=OrthoRotation(vForward2,vRight2,vUpward2);\n\n\
      \   return(T);    \n}\n</uscript>\n\n===...damp a velocity vector toward a surface===\n\
      \n<uscript>\nVelocity += SurfaceNormal * (Normal(Velocity) dot SurfaceNormal)\
      \ * DampFactor;\n</uscript>\n\nUseful DampFactor is >=-1, where -1 will make\
      \ Velocity parallel to the surface, 0 will do nothing, and positive values will\
      \ give a \"pop up\" effect by making the Velocity vector point further from\
      \ the plane of the surface.\n\n===...find point Q where a normal from point\
      \ P to a line from A to B meets the line===\n\nGiven a line AB and a point P,\
      \ we want to find a point Q on that line such that PQ and AB are perpendicular.\n\
      \n[[Image:Legacy_normal_to_a_line_01.png|Legacy_normal_to_a_line_01.png]]\n\n\
      <uscript>\nQ = A + Normal( B - A ) * ((( B - A ) dot ( P - A )) / VSize( A -\
      \ B ));\n</uscript>\n\nThis is perfect for that railgun with shockwave damage\
      \ you always wanted:\n\n<uscript>\nfor (P = Level.PawnList; P != None; P = P.NextPawn)\n\
      {\n    Q = StartTrace + Normal( HitLocation - StartTrace ) * ((( HitLocation\
      \ - StartTrace )\n    dot ( P.Location - StartTrace )) / VSize( StartTrace -\
      \ HitLocation ));\n\n    if (VSize( P.Location - Q ) < ShockwaveRadius)\n  \
      \  {\n        // Pawn is within ShockwaveRadius, do your mojo!\n    }\n}\n</uscript>\n\
      \nNote: Point Q is not restricted to the length of line AB, so remember to check\
      \ that the victims are in front of StartTrace and behind HitLocation for that\
      \ railgun (unless you want it to go through the whole level in either direction,\
      \ ofcourse...)\n\n'''DemonThing:''' Q is relative to the origin, assuming A,\
      \ B, and P are as well. Observe:\n\nSee my definition of dot product above (the\
      \ first one). You will see that (B - A) dot (P - A) is equal to VSize(B - A)\
      \ * VSize(P - A) * cos(angle). Divide that by VSize(A - B) (which is equal to\
      \ VSize(B - A)) and you get VSize(P - A) * cos(angle). If you know a bit of\
      \ trigonometry, you will see that this is equal to VSize(Q - A). When you multiply\
      \ that by Normal(B - A) (which is equal to Normal(Q - A), since A, B, and Q\
      \ are collinear), you get Q - A. We add A to that and we get Q, which is a location\
      \ vector.\n\n===...only affect certain components of a vector===\n\nIn UnrealScript\
      \ there's a component-by-component vector multiplication. You can use it to\
      \ either only use two components of a vector for an operation and/or ignore\
      \ certain components of the result.\n\n<uscript>\n// do something with A but\
      \ don't change the Z component of it\nvector = vect(1,1,0) * DoSomethingWith(A)\
      \ + vect(0,0,1) * A;\n\n// do something with the X and Z components of A\nvector\
      \ = DoSomethingWith(vect(1,0,1) * A);\n\n// do something with the Y and Z components\
      \ of a vector and use its original X component\nvector = vect(0,1,1) * DoSomethingWith(vect(0,1,1)\
      \ * A) + vect(1,0,0) * A;\n</uscript>\n\n==What does this do? ==\n\n<uscript>\n\
      \ resultingVector = Normal(vector cross vect(0, 0, 1));\n</uscript>\n\nThe cross\
      \ product of two vectors is perpendicular to both. Which means that (vector\
      \ cross vect(0, 0, 1)) is a vector pependicular to the given vector AND the\
      \ z-axis. Something perp to z is horizontal &ndash; it's confined to the XY\
      \ plane. So it's a horizontal vector that is also perp to the given vector.\
      \ It's then normalized. I can't remember ''which'' way the cross product points\
      \ in Unreal. So it's either a unit vector that points to your right or left.\
      \ \n\n'''Devi''' As an aside, if you want to rotate a 3D vector by 90 degrees\
      \ on the XZ plane you can also do this:\n\n<uscript>\nlocal float t;\nlocal\
      \ vector v;\n\nt=v.x;\nv.x=v.y;\nv.y=-t;\n</uscript>\n\nThe output vector is\
      \ identical in length to the ingoing one (i.e. If it was normal when it went\
      \ in, it'll be normal when it came out) In C this would be far faster that the\
      \ example beforehand, though whether it's faster in UScript is another matter...\n\
      \n'''AlphaOne:''' What about this:\n\n<uscript>\n vector = vect(0, 0, 1) >>\
      \ Rotation;\n</uscript>\n\nI believe that Rotation is also a vector (not a rotator).\
      \ Is it?\n\n'''Tarquin:''' Be pretty cruddy coding if it were. >> is a rotator\
      \ / vector operator. \n\n'''Dade:''' How would i go about modifying only the\
      \ \"XY\" coordinates of a vector? I.E. Changes the vector's\n\nlocation, but\
      \ not its height. Or is this even possible? (haven't studied vectors yet) \n\
      \n'''VonStrohmen:''' I'm not quite sure what you're asking, but if you mean\
      \ can you change the X and Y components of a vector without modifying its Z,\
      \ then sure. \n\n<uscript>\nVector A,B;\nB = vect(A.X +50, A.Y + 100, A.Z);\n\
      </uscript>\n\n'''Dade:''' Ah Ha! Thank you. That was exactly what i needed.\n\
      \n'''Wormbo:''' Note that vect(x,y,z) and rot(p,y,r) are more like \"a string\"\
      \ or 'aName', in other words a constant. Also note that you can \"multiply\"\
      \ vectors in UnrealScript, i.e. vect(1,2,3) * vect(2,3,4) = vect(2,6,12). This\
      \ is neither dot product nor cross product, it just multiplies the corresponding\
      \ parts of the vector.\n\n'''Mortal Monkey:''' Hello good people! I just added\
      \ the \"...find vector Q\" part, feel free to improve it.\n\n'''Foxpaw:''' What\
      \ do << and >> do with regards to vectors? One of them appears to do a coordinate\
      \ rotation of the vector given that the rotator points along the X Axis of the\
      \ target coordinate system, but what does the other one do?\n\n'''inio:''' I\
      \ thought they rotated a vector by a rotator, and the reverse a of a rotator\
      \ ((theVec << theRot) >> theRot == theVec)\n\n'''Foxpaw:''' That may be. I know\
      \ that one of them does the coordinate rotation, which is basically what you\
      \ said. It is possible that the other just does it by the reverse of that rotator.\n\
      \n'''Sir_Brizz:''' Is it too much to ask that someone PLEASE put some pictures\
      \ up showing precisely how these all work? Imaginary directions and all are\
      \ way too confusing to leave to the brain.\n\n'''Tarquin:''' Care to nominate\
      \ some that need a picture particularly badly?\n\n'''Sir_Brizz:''' Well, I think\
      \ there should at least be one explaining several at a time. I'm trying to figure\
      \ out exactly how \"...find where '''A''' is in relation to '''B'''?\" works\
      \ exactly.\n\n'''Devi:''' I just rewrote that section so it actually (at least\
      \ to me ;) ) makes sense, by, you know, explaining what A and B actually are\
      \ :) Hope that helps... (Sorry, I'm a bit pants at making diagrams)\n\n'''Devi:'''\
      \ heheh, just realised that both mine and the other guys example was finding\
      \ where B was in relation to A, rather than vice-versa :) Just renamed the subject\
      \ title...\n\n'''Unrealed:''' Cool, it helped me a lot =). It was simple and\
      \ I didnt know how: SetRotation(rotator(NextEnemy.Location-Location));\n\n==Related\
      \ Topics ==\n* [[Legacy:Vector|Vector]]\n* [[Legacy:Built-In Struct|Built-In\
      \ Struct]]\n* [[Legacy:Global Function|Global Function]]\n* [[Legacy:Operators|Operators]]\n\
      * [[Legacy:Useful Maths Functions|Useful Maths Functions]]\n\n[[Category:Legacy\
      \ Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 45182
name: "Legacy:UnrealScript Vector Maths"
revision:
  revid: 45182
  parentid: 34671
  user: "130.225.243.116"
  timestamp: 1343849337.000000000
  comment: "Hope this is a useful addition. It took me a while to find this solution\
    \ and I hope my discovery will be useful to others."
timestamp: 1668763309.580403000
