---
parse:
  title: "Legacy:Engine Concept"
  text:
    text: "<p>This page covers key concepts of the <a href=\"/Legacy:Unreal_Engine\"\
      \ title=\"Legacy:Unreal Engine\">Unreal Engine</a>.</p>\n<p>No building meant\
      \ to last is built without a foundation. We begin working with foundations before\
      \ we can speak; our first foundation in the world is reality itself, watching\
      \ others and attempting to imitate what they do or sound like. These foundations\
      \ are still built on every day by us as we continue to observe the world, causes,\
      \ and effects.</p>\n<p><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> is the heart of Unreal Tournament 2003 (hereafter referred\
      \ to as <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> or UT2K3). The language itself is powerful but elegant and simple.\
      \ Much like learning C++ is easy, learning UnrealScript is easy. Applying C++\
      \ requires a knowledge of your underlying operating system, and applying UnrealScript\
      \ requires an underlying knowledge of UT2K3.</p>\n<p>This section is going to\
      \ cover terms that will be used throughout the rest of the overview. The definitions\
      \ here will be vague but hopefully enough that you will have a grasp of what's\
      \ going on when you're reading the remainder of the chapters.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Unreal_Tournament_2003_Terms\">Unreal Tournament\
      \ 2003 Terms</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Engine_Concept?section=1\" title=\"Edit section:\
      \ Unreal Tournament 2003 Terms\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dt>Authority&#160;</dt>\n<dd>The authority of\
      \ a piece of information has final say in what the information should be. In\
      \ the case of UT2K3 the server is almost always the authority as to what information\
      \ is authentic, or what values a variable will hold. If you compare your checking\
      \ account to a variable, you are a client, and the server is the bank. The bank\
      \ has the ultimate say in how much money you have in your account, no matter\
      \ how much you argue.</dd>\n</dl>\n<dl>\n<dt>Client&#160;</dt>\n<dd>Generally\
      \ speaking this is the player's copy of UT2K3. The client requests information\
      \ from the server and displays it for the local player but it also passes the\
      \ local player's choices back to the server.</dd>\n</dl>\n<dl>\n<dt>Controller&#160;</dt>\n\
      <dd>A controller is used to control a pawn. Using the chess example from Pawn\
      \ below you are the controller. If you're playing Battle Chess (tm) then there\
      \ are two controllers: one, an artificial intelligence controlled by the computer,\
      \ and two, you. A controller, at its most basic, is simply a class designed\
      \ to receive input and pass that input on to the game in whatever way, shape,\
      \ or form is deemed necessary. More: <a href=\"/Legacy:Controller_Overview\"\
      \ title=\"Legacy:Controller Overview\">Controller Overview</a>.</dd>\n</dl>\n\
      <dl>\n<dt>Event&#160;</dt>\n<dd>An event is just that: something that occurs\
      \ outside of the control of the class the event happens in. Windows 95, 98,\
      \ 2000, etc., are all event driven. Events are notated in UnrealScript with\
      \ the keyword <i>event.</i> This basically means that at some point in time\
      \ the Unreal Engine will call this function as a result of something that has\
      \ occurred. Events can be compared to driving. In non-event driven programming\
      \ you control the car the entire time you're in it, holding the steering wheel\
      \ steady and always able to react to any information you manually gather. In\
      \ event driven programming you would only receive control of the car when a\
      \ prespecified event occurred, i.e. if a deer runs across the road the onboard\
      \ car computer would beep you and turn control over to you after passing you\
      \ some basic information about the deer including its location, speed, and size.\
      \ More: <a href=\"/Legacy:Event\" title=\"Legacy:Event\">Event</a>.</dd>\n</dl>\n\
      <dl>\n<dt>Native&#160;</dt>\n<dd>The term native is used in the UT2K3 environment\
      \ to indicate code that is not written in UnrealScript but is instead written\
      \ in C/C++ and compiled by Epic. Native items are usually made so because UnrealScript\
      \ is roughly twenty times slower than C/C++. Crucial pieces of UT2K3 or often\
      \ used pieces of code are made native to optimize the game. Quite often you'll\
      \ see the term <i>native magic</i> thrown about: this is usually indicative\
      \ of a process that is not completely understood. Processes like this are assumed\
      \ to be handled, at least partially, in native code. More: <a href=\"/Legacy:Native_Coding\"\
      \ title=\"Legacy:Native Coding\">Native Coding</a>.</dd>\n</dl>\n<dl>\n<dt>Package&#160;</dt>\n\
      <dd>A mod, mutator, map, or any other item meant to be used in UT2K3 is compiled\
      \ and placed into what's known as a <i>package.</i> These files will usually\
      \ have a file extension of .u, .utx, .ut2, .usx, or .ukx. A little known fact\
      \ about UT2K3 is that all of those packages with the different extensions are\
      \ actually the same: An UT2K3 package. The reason for differing extensions is\
      \ to help separate out which primarily contain maps, static meshes, animations,\
      \ or other data. Technically, however, an animation package (official extension:\
      \ ukx) has nothing stopping it from holding a map (extension: ut2). More: <a\
      \ href=\"/Legacy:Package\" title=\"Legacy:Package\">Package</a></dd>\n</dl>\n\
      <dl>\n<dt>Pawn&#160;</dt>\n<dd>If you were playing chess instead of UT2K3 the\
      \ meaning of this word would be obvious. A pawn is any of the pieces you control\
      \ whether that is a knight, a bishop, a queen, or the namesake of the Pawn:\
      \ a pawn. A pawn can be moved, controlled, killed, destroyed, manipulated. It\
      \ is your basic unit of control as a player.</dd>\n</dl>\n<dl>\n<dt>Replication&#160;</dt>\n\
      <dd>Replication is a fancy term for taking information from either a client\
      \ or a server and passing it to the other. Consider this fabricated situation:\
      \ the server knows that there are four players out of six connected, and it\
      \ knows about their currently selected weapon, their current ammunition count,\
      \ their current health, powerups, and any other relevant information about said\
      \ players. In this particular case it knows this information because it is the\
      \ authority. How does a client learn about it's current situation? The server\
      \ tells the client. The method of telling the client the current situation is\
      \ known as replication. Replication is one of the scariest and most complicated\
      \ issues surrounding UT2K3 and we will spend a great deal of time on this issue\
      \ later. More: <a href=\"/Legacy:Replication\" title=\"Legacy:Replication\"\
      >Replication</a>.</dd>\n</dl>\n<blockquote class=\"legacyquote\">\n<p><b>Replication</b></p>\n\
      <p>A copy or reproduction; the act or process of duplicating or reproducing\
      \ something.</p>\n</blockquote>\n<dl>\n<dt>Server&#160;</dt>\n<dd>This is the\
      \ machine running the server for UT2K3. This can be either a dedicated or non\
      \ dedicated server; a non dedicated server can also be used as a client although\
      \ performance will suffer. The server has complete control over the game and\
      \ its variables. It decides what information is final and what can be negotiated.</dd>\n\
      </dl>\n<p><i>Please add to this list.</i></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Engine_Concept?section=2\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Terminology\" title=\"Legacy:Terminology\"\
      >Terminology</a> - the Unreal dictionary</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Engine_Concept?section=3\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Tarquin:</b> What is the role of this page? It's\
      \ too advanced to be a tutorial. It seems to be duplicating <a href=\"/Legacy:Terminology\"\
      \ title=\"Legacy:Terminology\">Terminology</a>. I suggest the short definitions\
      \ be folded into <a href=\"/Legacy:Terminology\" title=\"Legacy:Terminology\"\
      >Terminology</a>, and longer ones maybe get a page of their own.</p>\n<p><b>GRAF1K:</b>\
      \ Agreed. I think <a href=\"/Legacy:Terminology\" title=\"Legacy:Terminology\"\
      >Terminology</a> should get more prominence, perhaps on <a href=\"/Legacy:Home_Page\"\
      \ title=\"Legacy:Home Page\">Home Page</a>.</p>\n<p><b>OP:</b> \"learning C++\
      \ is easy\"&#160;?? You must be joking. C++ is one of the hardest languages\
      \ to master (including PROLOG, I would personally say). Learning JAVA is easy,\
      \ for example. Not C++.</p>\n<p><b>Foxpaw:</b> Perhaps the author of the page\
      \ considered C++ to be easy to learn.. it is actually a very straightforward\
      \ language if you have a thorough background in computer science, in my opinion.\
      \ I could see how some people would struggle with it if they were coming from\
      \ a different background.</p>\n<p><b>Solid Snake:</b> I think it largely depends\
      \ on the person. I find C++ ok and not too hard. I guess some people find C++\
      \ hard if they came from a graphical area only for example. It depends on your\
      \ background and how 'intelligent' you are in terms of being able to understand\
      \ a coding language. Some people will find it harder/easier than others when\
      \ it comes to learning a new language.</p>\n<p><b>Sweavo:</b> First rule of\
      \ writing is to know your audience ... in the context of a wiki, it's probably\
      \ worth inserting a paragraph at the start stating who the page is supposed\
      \ to help and maybe a little of what it's NOT meant to be... that way the many\
      \ people who come by, who may edit it, will know the intended direction of the\
      \ page. OTOH you have players, mappers, artists, modelers, modders, and servermodders.\
      \ Ok that's a general point, not especially about THIS page...</p>\n<p><b>T1:</b>\
      \ Why does this page refer to UT2003, not the engine?</p>\n<p><b>Tarquin:</b>\
      \ My suggestion: move the intro of this page to a new page, <a href=\"/edit/Legacy:Unreal_Engine_Basics?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Unreal Engine Basics (page does not exist)\"\
      >Unreal Engine Basics</a>. Move the definitions to <a href=\"/Legacy:Terminology\"\
      \ title=\"Legacy:Terminology\">Terminology</a> ir subject pages such as <a href=\"\
      /Legacy:Package\" title=\"Legacy:Package\">Package</a> or <a href=\"/Legacy:Replication\"\
      \ title=\"Legacy:Replication\">Replication</a>. This page can then be deleted.</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.043 seconds\nReal time usage:\
      \ 0.045 seconds\nPreprocessor visited node count: 23/1000000\nPreprocessor generated\
      \ node count: 77/1000000\nPost‐expand include size: 318/2097152 bytes\nTemplate\
      \ argument size: 104/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    4.935      1 - -total\n100.00%    4.935\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1161-0!*!0!!*!*!*\
      \ and timestamp 20221117190805 and revision id 3038\n -->\n"
  categories:
  - sortkey: "Engine Concept"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: false
    name: "Legacy:Unreal Engine Basics"
  - ns: 100
    exists: true
    name: "Legacy:Terminology"
  - ns: 100
    exists: true
    name: "Legacy:Home Page"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Event"
  - ns: 100
    exists: true
    name: "Legacy:Controller Overview"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  - ns: 100
    exists: true
    name: "Legacy:Native Coding"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Unreal Tournament 2003 Terms"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Engine_Concept"
    byteoffset: 1075
    anchor: "Unreal_Tournament_2003_Terms"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Engine_Concept"
    byteoffset: 6119
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Engine_Concept"
    byteoffset: 6201
    anchor: "Discussion"
  displaytitle: "Legacy:Engine Concept"
  iwlinks: []
  wikitext:
    text: "This page covers key concepts of the [[Legacy:Unreal Engine|Unreal Engine]].\n\
      \nNo building meant to last is built without a foundation.  We begin working\
      \ with foundations before we can speak; our first foundation in the world is\
      \ reality itself, watching others and attempting to imitate what they do or\
      \ sound like.  These foundations are still built on every day by us as we continue\
      \ to observe the world, causes, and effects.\n\n[[Legacy:UnrealScript|UnrealScript]]\
      \ is the heart of Unreal Tournament 2003 (hereafter referred to as [[Legacy:UT2003|UT2003]]\
      \ or UT2K3).  The language itself is powerful but elegant and simple.  Much\
      \ like learning C++ is easy, learning UnrealScript is easy.  Applying C++ requires\
      \ a knowledge of your underlying operating system, and applying UnrealScript\
      \ requires an underlying knowledge of UT2K3.\n\nThis section is going to cover\
      \ terms that will be used throughout the rest of the overview.  The definitions\
      \ here will be vague but hopefully enough that you will have a grasp of what's\
      \ going on when you're reading the remainder of the chapters.\n\n==Unreal Tournament\
      \ 2003 Terms==\n; Authority : The authority of a piece of information has final\
      \ say in what the information should be.  In the case of UT2K3 the server is\
      \ almost always the authority as to what information is authentic, or what values\
      \ a variable will hold.  If you compare your checking account to a variable,\
      \ you are a client, and the server is the bank.  The bank has the ultimate say\
      \ in how much money you have in your account, no matter how much you argue.\n\
      \n; Client : Generally speaking this is the player's copy of UT2K3.  The client\
      \ requests information from the server and displays it for the local player\
      \ but it also passes the local player's choices back to the server.\n\n; Controller\
      \ : A controller is used to control a pawn.  Using the chess example from Pawn\
      \ below you are the controller.  If you're playing Battle Chess (tm) then there\
      \ are two controllers:  one, an artificial intelligence controlled by the computer,\
      \ and two, you.  A controller, at its most basic, is simply a class designed\
      \ to receive input and pass that input on to the game in whatever way, shape,\
      \ or form is deemed necessary. More: [[Legacy:Controller Overview|Controller\
      \ Overview]].\n\n; Event : An event is just that:  something that occurs outside\
      \ of the control of the class the event happens in.  Windows 95, 98, 2000, etc.,\
      \ are all event driven.  Events are notated in UnrealScript with the keyword\
      \ ''event.''  This basically means that at some point in time the Unreal Engine\
      \ will call this function as a result of something that has occurred.  Events\
      \ can be compared to driving.  In non-event driven programming you control the\
      \ car the entire time you're in it, holding the steering wheel steady and always\
      \ able to react to any information you manually gather.  In event driven programming\
      \ you would only receive control of the car when a prespecified event occurred,\
      \ i.e. if a deer runs across the road the onboard car computer would beep you\
      \ and turn control over to you after passing you some basic information about\
      \ the deer including its location, speed, and size. More: [[Legacy:Event|Event]].\n\
      \n; Native : The term native is used in the UT2K3 environment to indicate code\
      \ that is not written in UnrealScript but is instead written in C/C++ and compiled\
      \ by Epic.  Native items are usually made so because UnrealScript is roughly\
      \ twenty times slower than C/C++.  Crucial pieces of UT2K3 or often used pieces\
      \ of code are made native to optimize the game.  Quite often you'll see the\
      \ term ''native magic'' thrown about:  this is usually indicative of a process\
      \ that is not completely understood.  Processes like this are assumed to be\
      \ handled, at least partially, in native code. More: [[Legacy:Native Coding|Native\
      \ Coding]].\n\n; Package : A mod, mutator, map, or any other item meant to be\
      \ used in UT2K3 is compiled and placed into what's known as a ''package.'' \
      \ These files will usually have a file extension of .u, .utx, .ut2, .usx, or\
      \ .ukx.  A little known fact about UT2K3 is that all of those packages with\
      \ the different extensions are actually the same:  An UT2K3 package.  The reason\
      \ for differing extensions is to help separate out which primarily contain maps,\
      \ static meshes, animations, or other data.  Technically, however, an animation\
      \ package (official extension:  ukx) has nothing stopping it from holding a\
      \ map (extension:  ut2). More: [[Legacy:Package|Package]]\n\n; Pawn : If you\
      \ were playing chess instead of UT2K3 the meaning of this word would be obvious.\
      \  A pawn is any of the pieces you control whether that is a knight, a bishop,\
      \ a queen, or the namesake of the Pawn: a pawn.  A pawn can be moved, controlled,\
      \ killed, destroyed, manipulated.  It is your basic unit of control as a player.\n\
      \n; Replication : Replication is a fancy term for taking information from either\
      \ a client or a server and passing it to the other.  Consider this fabricated\
      \ situation:  the server knows that there are four players out of six connected,\
      \ and it knows about their currently selected weapon, their current ammunition\
      \ count, their current health, powerups, and any other relevant information\
      \ about said players.  In this particular case it knows this information because\
      \ it is the authority.  How does a client learn about it's current situation?\
      \  The server tells the client.  The method of telling the client the current\
      \ situation is known as replication.  Replication is one of the scariest and\
      \ most complicated issues surrounding UT2K3 and we will spend a great deal of\
      \ time on this issue later. More: [[Legacy:Replication|Replication]].\n\n{{innerbox|'''Replication'''\n\
      \nA copy or reproduction; the act or process of duplicating or reproducing something.\n\
      \n}}\n\n; Server : This is the machine running the server for UT2K3.  This can\
      \ be either a dedicated or non dedicated server; a non dedicated server can\
      \ also be used as a client although performance will suffer.  The server has\
      \ complete control over the game and its variables.  It decides what information\
      \ is final and what can be negotiated.\n\n''Please add to this list.''\n\n==Related\
      \ Topics ==\n* [[Legacy:Terminology|Terminology]] - the Unreal dictionary\n\n\
      ==Discussion==\n\n'''Tarquin:''' What is the role of this page? It's too advanced\
      \ to be a tutorial. It seems to be duplicating [[Legacy:Terminology|Terminology]].\
      \ I suggest the short definitions be folded into [[Legacy:Terminology|Terminology]],\
      \ and longer ones maybe get a page of their own.\n\n'''GRAF1K:''' Agreed. I\
      \ think [[Legacy:Terminology|Terminology]] should get more prominence, perhaps\
      \ on [[Legacy:Home Page|Home Page]].\n\n'''OP:''' \"learning C++ is easy\" ??\
      \ You must be joking. C++ is one of the hardest languages to master (including\
      \ PROLOG, I would personally say). Learning JAVA is easy, for example. Not C++.\n\
      \n'''Foxpaw:''' Perhaps the author of the page considered C++ to be easy to\
      \ learn.. it is actually a very straightforward language if you have a thorough\
      \ background in computer science, in my opinion. I could see how some people\
      \ would struggle with it if they were coming from a different background.\n\n\
      '''Solid Snake:''' I think it largely depends on the person. I find C++ ok and\
      \ not too hard. I guess some people find C++ hard if they came from a graphical\
      \ area only for example. It depends on your background and how 'intelligent'\
      \ you are in terms of being able to understand a coding language. Some people\
      \ will find it harder/easier than others when it comes to learning a new language.\n\
      \n'''Sweavo:''' First rule of writing is to know your audience ... in the context\
      \ of a wiki, it's probably worth inserting a paragraph at the start stating\
      \ who the page is supposed to help and maybe a little of what it's NOT meant\
      \ to be... that way the many people who come by, who may edit it, will know\
      \ the intended direction of the page.  OTOH you have players, mappers, artists,\
      \ modelers, modders, and servermodders.  Ok that's a general point, not especially\
      \ about THIS page...\n\n'''T1:''' Why does this page refer to UT2003, not the\
      \ engine?\n\n'''Tarquin:''' My suggestion: move the intro of this page to a\
      \ new page, [[Legacy:Unreal Engine Basics|Unreal Engine Basics]]. Move the definitions\
      \ to [[Legacy:Terminology|Terminology]] ir subject pages such as [[Legacy:Package|Package]]\
      \ or [[Legacy:Replication|Replication]]. This page can then be deleted.\n\n\
      [[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 3038
name: "Legacy:Engine Concept"
revision:
  revid: 3038
  parentid: 3039
  user: "Tarquin"
  timestamp: 1133169758.000000000
  comment: "*"
timestamp: 1668767087.847852000
