---
parse:
  title: "Multi-dimensional arrays"
  text:
    text: "<p>Multidimensional <a href=\"/Static_arrays\" title=\"Static arrays\"\
      >static</a> or <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">dynamic\
      \ arrays</a> are not possible in UnrealScript. Neither are dynamic arrays of\
      \ static arrays or vice versa.</p>\n<h2><span class=\"mw-headline\" id=\"Workaround_1:_Array_of_structs\"\
      >Workaround 1: Array of structs</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Multi-dimensional_arrays?section=1\"\
      \ title=\"Edit section: Workaround 1: Array of structs\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>A good substitute are arrays\
      \ of <a href=\"/Structs\" title=\"Structs\">structs</a> that contain an array\
      \ as the only member. Such a declaration for a 10x10 two-dimensional static\
      \ array might look as follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">var</span> <span class=\"kw1\">struct</span> <span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ Y<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\"\
      >]</span>;\n<span class=\"br0\">}</span> X<span class=\"br0\">[</span><span\
      \ class=\"nu0\">10</span><span class=\"br0\">]</span>;</pre></div>\n</div>\n\
      <p>You would access individual elements through an expression that first accesses\
      \ an element in the outer array of structs, and from there access an element\
      \ of the struct member:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">X<span class=\"\
      br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">Y</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">23</span>;</pre></div>\n\
      </div>\n<p>Of course you can also use dynamic arrays for the same example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> array<span\
      \ class=\"sy0\">&lt;</span><span class=\"kw1\">struct</span> <span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">var</span> array<span class=\"sy0\">&lt;</span>int<span\
      \ class=\"sy0\">&gt;</span> Y;\n<span class=\"br0\">}</span><span class=\"sy0\"\
      >&gt;</span> X;</pre></div>\n</div>\n<p>However, be careful when accessing elements.\
      \ Accessing a struct member of an element in a dynamic array is a <i>read</i>\
      \ access to the array. As a result, you cannot use the simple assignment as\
      \ above, unless you know the outer array is already long enough. You need to\
      \ ensure the array length is sufficient first:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>X.<span\
      \ class=\"me0\">Length</span> <span class=\"sy0\">&lt;=</span> <span class=\"\
      nu0\">3</span><span class=\"br0\">)</span>\n  X.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>;\n \nX<span class=\"\
      br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">Y</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">23</span>;</pre></div>\n\
      </div>\n<p>The inner array access is a write operation, so that array is resized\
      \ as usual. This type of array is sometimes called a \"jagged array\", because\
      \ the inner arrays usually have different lengths.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Workaround_2:_Manual_index_arithmetics\">Workaround 2: Manual index arithmetics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Multi-dimensional_arrays?section=2\" title=\"Edit section: Workaround\
      \ 2: Manual index arithmetics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Another way to store and access data as if it was\
      \ arranged in multiple dimensions are index arithmetics on a one-dimensional\
      \ array. Whether you use static or dynamic arrays doesn't matter here, as both\
      \ use the same element access syntax.</p>\n<p>To calculate the total size of\
      \ the array, simply multiply the sizes of all dimensions. If you want a three-dimensional\
      \ array with dimensions 5, 2 and 3, you need to declare an array of length <code>5\
      \ * 2 * 3 = 30</code>. To access specific elements, you might want to use a\
      \ macro or function that performs the necessary calculations:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">const</span> SIZE1 <span class=\"\
      sy0\">=</span> <span class=\"nu0\">5</span>;\n<span class=\"kw1\">const</span>\
      \ SIZE2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>;\n<span class=\"\
      kw1\">const</span> SIZE3 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">int</span> CalcIndex<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> index1, <span class=\"\
      kw5\">int</span> index2, <span class=\"kw5\">int</span> index3<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"br0\">(</span>index1 <span class=\"sy0\">*</span> SIZE1 <span\
      \ class=\"sy0\">+</span> index2<span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> SIZE2 <span class=\"sy0\">+</span> index3;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Zong</b>: Looks like this is not going to work if we have a size\
      \ const bigger than the previous one. Consider a two-dimensional array:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">const</span> SIZE1\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>;\n<span class=\"\
      kw1\">const</span> SIZE2 <span class=\"sy0\">=</span> <span class=\"nu0\">15</span>;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">int</span> CalcIndex<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> index1, <span class=\"\
      kw5\">int</span> index2<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">return</span> index1 <span class=\"sy0\">*</span> SIZE1\
      \ <span class=\"sy0\">+</span> index2;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><code>CalcIndex()</code> will return 24 for both indexes <code>[1].[14]</code>\
      \ and <code>[2].[4]</code>. Similar thing happens for <code>[0,1, ...4].[10,11,\
      \ ...14]</code> &amp; <code>[1,2, ...5].[0,1, ...4]</code> with results of 10,\
      \ 21, 32... etc. Or it can be represented like this: <code>[x].[y] = [x+1].[y-10]</code>\
      \ for every <code>y &gt; 9</code>.</p>\n<p><b>Arkless</b>: Probably because\
      \ the formula is wrong. It should be:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">const</span> SIZE1 <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">10</span>;\n<span class=\"kw1\">const</span> SIZE2 <span class=\"\
      sy0\">=</span> <span class=\"nu0\">15</span>;\n.\n.\n.\n<span class=\"kw1\"\
      >const</span> SIZEN <span class=\"sy0\">=</span> <span class=\"nu0\">1337</span>;\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw5\">int</span> CalcIndex<span\
      \ class=\"br0\">(</span><span class=\"kw5\">int</span> index1, <span class=\"\
      kw5\">int</span> index2, ..., <span class=\"kw5\">int</span> indexN<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">return</span>\
      \ <span class=\"br0\">(</span>...<span class=\"br0\">(</span><span class=\"\
      br0\">(</span>index1 <span class=\"sy0\">*</span> SIZE2 <span class=\"sy0\"\
      >+</span> index2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> SIZE3\
      \ <span class=\"sy0\">+</span> index3<span class=\"br0\">)</span>...<span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> SIZEN <span class=\"sy0\">+</span>\
      \ indexN;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Just saying...</p>\n\
      <table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n</tr>\n\
      <tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"\
      /Literals\" title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.177 seconds\nReal time usage: 0.298 seconds\nPreprocessor\
      \ visited node count: 214/1000000\nPreprocessor generated node count: 1013/1000000\n\
      Post‐expand include size: 10678/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   60.616      1 - -total\n100.00%   60.616      1 - Template:Navbox_unrealscript\n\
      \ 77.57%   47.018      1 - Template:Navbox\n 14.55%    8.817      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:29417-0!*!0!!*!*!*\
      \ and timestamp 20221117193626 and revision id 46175\n -->\n"
  categories:
  - sortkey: "Multi-dimensional arrays"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "None"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Stop statement"
  templates:
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Workaround 1: Array of structs"
    number: "1"
    index: "1"
    fromtitle: "Multi-dimensional_arrays"
    byteoffset: 158
    anchor: "Workaround_1:_Array_of_structs"
  - toclevel: 1
    level: "2"
    line: "Workaround 2: Manual index arithmetics"
    number: "2"
    index: "2"
    fromtitle: "Multi-dimensional_arrays"
    byteoffset: 1346
    anchor: "Workaround_2:_Manual_index_arithmetics"
  displaytitle: "Multi-dimensional arrays"
  iwlinks: []
  wikitext:
    text: "Multidimensional [[static arrays|static]] or [[dynamic arrays]] are not\
      \ possible in UnrealScript. Neither are dynamic arrays of static arrays or vice\
      \ versa.\n\n==Workaround 1: Array of structs==\nA good substitute are arrays\
      \ of [[structs]] that contain an array as the only member. Such a declaration\
      \ for a 10x10 two-dimensional static array might look as follows:\n<uscript>\n\
      var struct {\n  var int Y[10];\n} X[10];\n</uscript>\nYou would access individual\
      \ elements through an expression that first accesses an element in the outer\
      \ array of structs, and from there access an element of the struct member:\n\
      <uscript>\nX[3].Y[5] = 23;\n</uscript>\n\nOf course you can also use dynamic\
      \ arrays for the same example:\n<uscript>\nvar array<struct {\n  var array<int>\
      \ Y;\n}> X;\n</uscript>\nHowever, be careful when accessing elements. Accessing\
      \ a struct member of an element in a dynamic array is a ''read'' access to the\
      \ array. As a result, you cannot use the simple assignment as above, unless\
      \ you know the outer array is already long enough. You need to ensure the array\
      \ length is sufficient first:\n<uscript>\nif (X.Length <= 3)\n  X.Length = 4;\n\
      \nX[3].Y[5] = 23;\n</uscript>\nThe inner array access is a write operation,\
      \ so that array is resized as usual. This type of array is sometimes called\
      \ a \"jagged array\", because the inner arrays usually have different lengths.\n\
      \n==Workaround 2: Manual index arithmetics==\nAnother way to store and access\
      \ data as if it was arranged in multiple dimensions are index arithmetics on\
      \ a one-dimensional array. Whether you use static or dynamic arrays doesn't\
      \ matter here, as both use the same element access syntax.\n\nTo calculate the\
      \ total size of the array, simply multiply the sizes of all dimensions. If you\
      \ want a three-dimensional array with dimensions 5, 2 and 3, you need to declare\
      \ an array of length <code>5 * 2 * 3 = 30</code>. To access specific elements,\
      \ you might want to use a macro or function that performs the necessary calculations:\n\
      <uscript>\nconst SIZE1 = 5;\nconst SIZE2 = 2;\nconst SIZE3 = 3;\n\nfunction\
      \ int CalcIndex(int index1, int index2, int index3)\n{\n  return (index1 * SIZE1\
      \ + index2) * SIZE2 + index3;\n}\n</uscript>\n'''Zong''': Looks like this is\
      \ not going to work if we have a size const bigger than the previous one. Consider\
      \ a two-dimensional array:\n<uscript>\nconst SIZE1 = 10;\nconst SIZE2 = 15;\n\
      \nfunction int CalcIndex(int index1, int index2)\n{\n  return index1 * SIZE1\
      \ + index2;\n}\n</uscript>\n<code>CalcIndex()</code> will return 24 for both\
      \ indexes <code>[1].[14]</code> and <code>[2].[4]</code>. Similar thing happens\
      \ for <code>[0,1, ...4].[10,11, ...14]</code> & <code>[1,2, ...5].[0,1, ...4]</code>\
      \ with results of 10, 21, 32... etc. Or it can be represented like this: <code>[x].[y]\
      \ = [x+1].[y-10]</code> for every <code>y > 9</code>.\n\n'''Arkless''': Probably\
      \ because the formula is wrong. It should be:\n<uscript>\nconst SIZE1 = 10;\n\
      const SIZE2 = 15;\n.\n.\n.\nconst SIZEN = 1337;\n\nfunction int CalcIndex(int\
      \ index1, int index2, ..., int indexN) {\n    return (...((index1 * SIZE2 +\
      \ index2) * SIZE3 + index3)...) * SIZEN + indexN;\n}\n</uscript>\nJust saying...\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 46175
name: "Multi-dimensional arrays"
revision:
  revid: 46175
  parentid: 45939
  user: "79.197.220.49"
  timestamp: 1435729549.000000000
  comment: "/* Workaround 2: Manual index arithmetics */"
timestamp: 1668760829.946934000
