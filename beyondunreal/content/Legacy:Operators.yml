---
parse:
  title: "Legacy:Operators"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Basics\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Basics</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-2\"><a href=\"#Preoperators_.2F_Postoperators\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Preoperators /\
      \ Postoperators</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #Precedence_of_operators\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">Precedence of operators</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-4\"><a href=\"#Boolean_Operators\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Boolean Operators</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-5\"><a href=\"#Comparison_Operators\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Comparison Operators</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#Conditional_Operator\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Conditional Operator</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Numeric_Operators\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Numeric Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#Bitwise_Operators\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Bitwise Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#Vector_Operators\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Vector Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Rotator_Operators\"><span\
      \ class=\"tocnumber\">8</span> <span class=\"toctext\">Rotator Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#String_Operators\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">String Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-12\"><a href=\"#Color_Operators\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Color Operators</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-13\"><a href=\"#Complete_Table_Of_Precedences\"\
      ><span class=\"tocnumber\">11</span> <span class=\"toctext\">Complete Table\
      \ Of Precedences</span></a></li>\n<li class=\"toclevel-1 tocsection-14\"><a\
      \ href=\"#Related_Topics\"><span class=\"tocnumber\">12</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Basics\">Basics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Operators?section=1\"\
      \ title=\"Edit section: Basics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Preoperators_.2F_Postoperators\"\
      >Preoperators / Postoperators</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Operators?section=2\"\
      \ title=\"Edit section: Preoperators / Postoperators\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>If any operator is available\
      \ as pre- <b>and</b> postoperator both versions basically have the same effect\
      \ on the variable. The only difference is what they return: Preoperators return\
      \ the variable's new value (after the operator's effect) while postoperators\
      \ return the old value (the value before the operator did something).</p>\n\
      <h3><span class=\"mw-headline\" id=\"Precedence_of_operators\">Precedence of\
      \ operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Operators?section=3\" title=\"Edit section:\
      \ Precedence of operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The precedence of operators is used to group expressions.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ a,b,c,d,e;\n \na<span class=\"sy0\">=</span><span class=\"nu0\">2</span>;\
      \ b<span class=\"sy0\">=</span><span class=\"nu0\">3</span>; c<span class=\"\
      sy0\">=</span><span class=\"nu0\">4</span>; d<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">2</span>; e<span class=\"sy0\">=</span><span class=\"nu0\">5</span>;\n\
      \ \n                    <span class=\"co1\">// log output:</span>\n<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span>a<span class=\"sy0\">@</span>b<span\
      \ class=\"sy0\">@</span>c<span class=\"sy0\">@</span>d<span class=\"sy0\">@</span>e<span\
      \ class=\"br0\">)</span>;     <span class=\"co1\">// 2 3 4 2 5</span>\n<span\
      \ class=\"kw3\">log</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>b<span\
      \ class=\"sy0\">+++</span>c<span class=\"sy0\">**</span>d<span class=\"sy0\"\
      >*</span>e<span class=\"br0\">)</span>;  <span class=\"co1\">// 86.000000</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span>a<span class=\"sy0\"\
      >@</span>b<span class=\"sy0\">@</span>c<span class=\"sy0\">@</span>d<span class=\"\
      sy0\">@</span>e<span class=\"br0\">)</span>;     <span class=\"co1\">// 2 4\
      \ 4 2 5</span></pre></div>\n</div>\n<p>UnrealScript actually evaluates the expression\
      \ like this:</p>\n<pre>(a * (b++)) + ((c ** d) * e)\n</pre>\n<p>You should use\
      \ a form that uses some spaces and only few (or no) parentheses. This helps\
      \ understanding the expression a lot when you look at it again after some time:</p>\n\
      <pre>a * b++ + c**d * e\n</pre>\n<h2><span class=\"mw-headline\" id=\"Boolean_Operators\"\
      >Boolean Operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Operators?section=4\" title=\"Edit section:\
      \ Boolean Operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <dl>\n<dt>iff (if and only if)&#160;</dt>\n<dd>The word \"iff\" means \"if and\
      \ only if,\" implying that if the given condition isn't met, the operation will\
      \ yield a different (the opposite) result. (This is maths and logic jargon,\
      \ <i>not</i> an UnrealScript operator.)</dd>\n</dl>\n<dl>\n<dt>short-circuit&#160;</dt>\n\
      <dd>Some binary boolean operators only evaluate their right operand if the result\
      \ of the entire expression isn't already defined by the result of the first\
      \ operand. In this case, the right operand is <i>skipped</i>, which is a particularly\
      \ handy feature if evaluation of that right operand has non-trivial side effects\
      \ (like a function call) or relies on the left operand's result.\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>bAlreadyConfirmed\
      \ <span class=\"sy0\">||</span> ShowMessageBox<span class=\"br0\">(</span><span\
      \ class=\"st0\">\"Are you sure?\"</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span> ...  <span class=\"co1\">// show message only when needed</span></pre></div>\n\
      </div>\n</dd>\n</dl>\n<p><span class=\"kw2\">if</span> <span class=\"br0\">(</span>ThisPawn\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      sy0\">&amp;&amp;</span> ThisPawn.<span class=\"me0\">bIsPlayer</span><span class=\"\
      br0\">)</span> ... <span class=\"co1\">// prevent \"Accessed None\"s</span></p>\n\
      <table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n<td><b>Short-circuit</b></td>\n</tr>\n<tr>\n<td>Negation</td>\n\
      <td style=\"text-align: center\"><code>!</code></td>\n<td>Unary</td>\n<td>Negates\
      \ a boolean expression</td>\n<td></td>\n</tr>\n<tr>\n<td>And</td>\n<td style=\"\
      text-align: center\"><code>&amp;&amp;</code></td>\n<td style=\"text-align: right\"\
      >30</td>\n<td>True iff both operands are true</td>\n<td>First operand <i>false</i>\
      \ -&gt; expression <i>false</i></td>\n</tr>\n<tr>\n<td>Exclusive Or</td>\n<td\
      \ style=\"text-align: center\"><code>^^</code></td>\n<td style=\"text-align:\
      \ right\">30</td>\n<td>True iff one of the operands is true (but not both)</td>\n\
      <td></td>\n</tr>\n<tr>\n<td>Inclusive Or</td>\n<td style=\"text-align: center\"\
      ><code>||</code></td>\n<td style=\"text-align: right\">32</td>\n<td>True iff\
      \ one or both of the operands are true</td>\n<td>First operand <i>true</i> -&gt;\
      \ expression <i>true</i></td>\n</tr>\n</table>\n<h2><span class=\"mw-headline\"\
      \ id=\"Comparison_Operators\">Comparison Operators</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Operators?section=5\"\
      \ title=\"Edit section: Comparison Operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Comparison operators apply to values of all types.\
      \ Only compatible types can be compared (numbers with numbers, strings with\
      \ strings and so on). <i>Object</i> (classes, actors, textures, etc.) and <i>Name</i>\
      \ properties can only be compared using <i>Equal</i> or <i>Unequal</i>.</p>\n\
      <table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Remarks</b></td>\n</tr>\n<tr>\n<td>Equal</td>\n<td style=\"text-align:\
      \ center\"><code>==</code></td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>Approximately\
      \ Equal</td>\n<td style=\"text-align: center\"><code>~=</code></td>\n<td>24</td>\n\
      <td>Equality within 0.0001 (numbers)<br />\nCase-insensitve equality (strings)</td>\n\
      </tr>\n<tr>\n<td>Less</td>\n<td style=\"text-align: center\"><code>&lt;</code></td>\n\
      <td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>Less or Equal</td>\n<td style=\"text-align:\
      \ center\"><code>&lt;=</code></td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>Greater</td>\n\
      <td style=\"text-align: center\"><code>&gt;</code></td>\n<td>24</td>\n<td></td>\n\
      </tr>\n<tr>\n<td>Greater or Equal</td>\n<td style=\"text-align: center\"><code>&gt;=</code></td>\n\
      <td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>Not Equal</td>\n<td style=\"text-align:\
      \ center\"><code>!=</code></td>\n<td>26</td>\n<td></td>\n</tr>\n</table>\n<h2><span\
      \ class=\"mw-headline\" id=\"Conditional_Operator\">Conditional Operator</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Operators?section=6\" title=\"Edit section: Conditional\
      \ Operator\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The conditional operator is a ternary operator in <a href=\"/Legacy:Devastation\"\
      \ title=\"Legacy:Devastation\">Devastation</a> and UnrealEngine 3 games. In\
      \ UnrealEngine 3 it has the following syntax:</p>\n<pre><i>condition</i> <b>?</b>\
      \ <i>expression1</i> <b>:</b> <i>expression2</i>\n</pre>\n<p>In Devastation\
      \ the syntax is as follows:</p>\n<pre><i>condition</i> <b>??</b> <i>expression1</i>\
      \ <b>:</b> <i>expression2</i>\n</pre>\n<p>In both cases it works similar to\
      \ the <b>If/Else</b> statement, but returns the value of one of the two expressions.\
      \ If the condition evaluates to <code>True</code>, then the first expression\
      \ is evaluated, otherwise the second expression is evaluated.</p>\n<p>Let's\
      \ consider an UnrealScript implementation of the <a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">global function</a> Max(). In UnrealEngine\
      \ 1 or 2 you would have to implement it as something like the following:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">int</span> <span class=\"kw3\">Max</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> A, <span class=\"kw5\">int</span> B<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>A <span class=\"sy0\">&gt;</span> B<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">return</span>\
      \ A;\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">else</span> <span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">return</span> B;\n  <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>In UnrealEngine 3 you can now express the same feature in a much more compact\
      \ form:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> <span class=\"kw3\">Max</span><span class=\"\
      br0\">(</span><span class=\"kw5\">int</span> A, <span class=\"kw5\">int</span>\
      \ B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> A <span class=\"sy0\">&gt;</span> B ? A : B;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Very pleasing to the eye and exactly\
      \ what you mean: Depending on a condition, this function is supposed to return\
      \ one of two values, not execute one of two statements.</p>\n<p>Note that the\
      \ conditional operator is no general replacement for the <b>If</b> statement!\
      \ The <b>If</b> statement selects statements to be executed, while the conditional\
      \ operator selects values to be returned. In fact, you get a compiler error\
      \ if any of the three operands is a statement that doesn't return a value.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Numeric_Operators\">Numeric Operators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Operators?section=7\" title=\"Edit section: Numeric Operators\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Numeric\
      \ operators apply to values of type int, float and byte.</p>\n<table class=\"\
      wikitable\">\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n</tr>\n<tr>\n<td>Negation</td>\n<td style=\"text-align:\
      \ center\"><code>-</code></td>\n<td>Preoperator</td>\n<td>Returns the negative\
      \ value of the operand</td>\n</tr>\n<tr>\n<td>Increment</td>\n<td style=\"text-align:\
      \ center\"><code>++</code></td>\n<td>Pre-/Postoperator</td>\n<td>Increments\
      \ the variable operand by 1</td>\n</tr>\n<tr>\n<td>Decrement</td>\n<td style=\"\
      text-align: center\"><code>--</code></td>\n<td>Pre-/Postoperator</td>\n<td>Decrements\
      \ the variable operand by 1</td>\n</tr>\n<tr>\n<td>Exponentiation</td>\n<td\
      \ style=\"text-align: center\"><code>**</code></td>\n<td style=\"text-align:\
      \ right\">12</td>\n<td>Puts the first operand to the power of the second operand</td>\n\
      </tr>\n<tr>\n<td>Multiplication</td>\n<td style=\"text-align: center\"><code>*</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>Multiplies both operands</td>\n\
      </tr>\n<tr>\n<td>Division</td>\n<td style=\"text-align: center\"><code>/</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>Divides the first operand by the\
      \ second operand</td>\n</tr>\n<tr>\n<td>Modulo</td>\n<td style=\"text-align:\
      \ center\"><code>%</code></td>\n<td style=\"text-align: right\">18</td>\n<td>Divides\
      \ the first operand by the second and returns the remainder</td>\n</tr>\n<tr>\n\
      <td>Addition</td>\n<td style=\"text-align: center\"><code>+</code></td>\n<td\
      \ style=\"text-align: right\">20</td>\n<td>Adds both operands</td>\n</tr>\n\
      <tr>\n<td>Subtraction</td>\n<td style=\"text-align: center\"><code>-</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Subtracts the second operand from\
      \ the first operand</td>\n</tr>\n</table>\n<p>The modulo operator follows the\
      \ computer science definition of modulus rather than the mathematical one::</p>\n\
      <pre>-8 % 10 = -8 (and not 2)\n</pre>\n<p>This results from differing interpretations\
      \ of whether&#160;% should be a \"modulo\" or \"remainder\" operator (which\
      \ is not the same thing), as well as differing results of what the integer division\
      \ operation returns for negative numbers in different programming languages.\
      \ UnrealScript's definition is consistent with what (most) C/C++ does, which\
      \ is probably appropriate considering that the language is similar in many other\
      \ ways. See <a href=\"/Legacy:Useful_Maths_Functions\" title=\"Legacy:Useful\
      \ Maths Functions\">Useful Maths Functions</a> for the alternative.</p>\n<p>The\
      \ assignment operator <code>=</code> can be combined with <code>+</code>, <code>-</code>,\
      \ <code>*</code> and <code>/</code>. These combined operators <code>+=</code>,\
      \ <code>-=</code>, <code>*=</code> and <code>/=</code> assign the result of\
      \ the operation to the first operand (which must be a variable). These combined\
      \ assignment operators also return the new value of the variable, so</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">b <span class=\"sy0\">+=</span> c; \
      \     <span class=\"co1\">// equivalent to  b = b + c;</span>\na <span class=\"\
      sy0\">=</span> b <span class=\"sy0\">+=</span> c;  <span class=\"co1\">// equivalent\
      \ to  b = b + c;  a = b;  or  a = (b = b + c);</span></pre></div>\n</div>\n\
      <p>will add <i>b</i> and <i>c</i> and assign the result to <i>a</i> and <i>b</i>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Bitwise_Operators\">Bitwise Operators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Operators?section=8\" title=\"Edit section: Bitwise Operators\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<table>\n\
      <tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n</tr>\n<tr>\n<td>Inversion</td>\n<td style=\"text-align:\
      \ center\"><code>~</code></td>\n<td>Preoperator</td>\n<td>Performs a bitwise\
      \ inversion of the operand</td>\n</tr>\n<tr>\n<td>Shift Left</td>\n<td style=\"\
      text-align: center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align: right\"\
      >22</td>\n<td>Shifts the bits of the first operand to the left</td>\n</tr>\n\
      <tr>\n<td>Shift Right (Arithmetic)</td>\n<td style=\"text-align: center\"><code>&gt;&gt;</code></td>\n\
      <td style=\"text-align: right\">22</td>\n<td>Shifts the bits of the first operand\
      \ right, maintaining its signum</td>\n</tr>\n<tr>\n<td>Shift Right</td>\n<td\
      \ style=\"text-align: center\"><code>&gt;&gt;&gt;</code></td>\n<td style=\"\
      text-align: right\">22</td>\n<td>Shifts the bits of the first operand right,\
      \ filling with zeroes</td>\n</tr>\n<tr>\n<td>And</td>\n<td style=\"text-align:\
      \ center\"><code>&amp;</code></td>\n<td style=\"text-align: right\">28</td>\n\
      <td>Bitwise <i>and</i></td>\n</tr>\n<tr>\n<td>Or</td>\n<td style=\"text-align:\
      \ center\"><code>|</code></td>\n<td style=\"text-align: right\">28</td>\n<td>Bitwise\
      \ <i>or</i></td>\n</tr>\n<tr>\n<td>Exclusive Or</td>\n<td style=\"text-align:\
      \ center\"><code>^</code></td>\n<td style=\"text-align: right\">28</td>\n<td>Bitwise\
      \ <i>exclusive or</i></td>\n</tr>\n</table>\n<p>For the shift operators, only\
      \ the 5 least significant bits of the second operand are used.<br />\nWhat does\
      \ that mean? Well, it's a neat feature that allows you to specify, how many\
      \ bits you want to <i>stay</i> instead of how many you want to get rid of:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// IntToHex() is\
      \ a custom function that converts an integer into its hexadecimal string representation</span>\n\
      \ \n<span class=\"co1\">// -12 = 0xfffffff4 -&gt; five least significant bits:\
      \ 0xfffffff4 &amp; 0x0000001f = 0x00000014 = 20</span>\n<span class=\"co1\"\
      >// 12 bits = 3 hex digits; 20 bits = 5 hex digits</span>\n \n<span class=\"\
      co1\">// shift positive ints                 log output</span>\n<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span>IntToHex<span class=\"br0\">(</span>0x02468ace\
      \ <span class=\"sy0\">&lt;&lt;</span>   <span class=\"nu0\">12</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">//  68ace000</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span class=\"\
      br0\">(</span>0x02468ace <span class=\"sy0\">&lt;&lt;</span>  <span class=\"\
      sy0\">-</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">//  ace00000 = same as 0x02468ace\
      \ &lt;&lt;  20</span>\n<span class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span\
      \ class=\"br0\">(</span>0x02468ace <span class=\"sy0\">&gt;&gt;</span>   <span\
      \ class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\
      \  <span class=\"co1\">//  00002468</span>\n<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span>IntToHex<span class=\"br0\">(</span>0x02468ace <span\
      \ class=\"sy0\">&gt;&gt;</span>  <span class=\"sy0\">-</span><span class=\"\
      nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span\
      \ class=\"co1\">//  00000024 = same as 0x02468ace &gt;&gt;  20</span>\n<span\
      \ class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span class=\"\
      br0\">(</span>0x02468ace <span class=\"sy0\">&gt;&gt;&gt;</span>  <span class=\"\
      nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span\
      \ class=\"co1\">//  00002468</span>\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>IntToHex<span class=\"br0\">(</span>0x02468ace <span class=\"\
      sy0\">&gt;&gt;&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">//\
      \  00000024 = same as 0x02468ace &gt;&gt;&gt; 20</span>\n \n<span class=\"co1\"\
      >// shift negative ints (to prove there's no difference from the usual behavior)</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span class=\"\
      br0\">(</span>0xfdb97531 <span class=\"sy0\">&lt;&lt;</span>   <span class=\"\
      nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span\
      \ class=\"co1\">//  97531000</span>\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>IntToHex<span class=\"br0\">(</span>0xfdb97531 <span class=\"\
      sy0\">&lt;&lt;</span>  <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">//\
      \  53100000 = same as 0xfdb97531 &lt;&lt;  20</span>\n<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span>IntToHex<span class=\"br0\">(</span>0xfdb97531 <span\
      \ class=\"sy0\">&gt;&gt;</span>   <span class=\"nu0\">12</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">//  ffffdb97</span>\n\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span class=\"\
      br0\">(</span>0xfdb97531 <span class=\"sy0\">&gt;&gt;</span>  <span class=\"\
      sy0\">-</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">//  ffffffdb = same as 0xfdb97531\
      \ &gt;&gt;  20</span>\n<span class=\"kw3\">log</span><span class=\"br0\">(</span>IntToHex<span\
      \ class=\"br0\">(</span>0xfdb97531 <span class=\"sy0\">&gt;&gt;&gt;</span> \
      \ <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;  <span class=\"co1\">//  000fdb97</span>\n<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span>IntToHex<span class=\"br0\">(</span>0xfdb97531 <span\
      \ class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span\
      \ class=\"co1\">//  00000fdb = same as 0xfdb97531 &gt;&gt;&gt; 20</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Vector_Operators\">Vector Operators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Operators?section=9\" title=\"Edit section: Vector Operators\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>See\
      \ also <a href=\"/Legacy:Vector\" title=\"Legacy:Vector\">vector</a>.</p>\n\
      <table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n</tr>\n<tr>\n<td>Reverse</td>\n<td style=\"text-align:\
      \ center\"><code>-</code></td>\n<td>Preoperator</td>\n<td>Returns the negative\
      \ value of the operand</td>\n</tr>\n<tr>\n<td>Multiply components</td>\n<td\
      \ style=\"text-align: center\"><code>*</code></td>\n<td style=\"text-align:\
      \ right\">16</td>\n<td>Multiplies the corresponding components of both vectors</td>\n\
      </tr>\n<tr>\n<td>Multiply by scalar</td>\n<td style=\"text-align: center\"><code>*</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>(vector * float or float * vector)</td>\n\
      </tr>\n<tr>\n<td>Divide by scalar</td>\n<td style=\"text-align: center\"><code>/</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>(vector / float)</td>\n</tr>\n\
      <tr>\n<td>Dot product</td>\n<td style=\"text-align: center\"><code>Dot</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>Calculates the dot product (inner\
      \ product) of the vectors</td>\n</tr>\n<tr>\n<td>Cross product</td>\n<td style=\"\
      text-align: center\"><code>Cross</code></td>\n<td style=\"text-align: right\"\
      >16</td>\n<td>Calculates the cross product (outer product) of the vectors</td>\n\
      </tr>\n<tr>\n<td>Addition</td>\n<td style=\"text-align: center\"><code>+</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Adds both vectors</td>\n</tr>\n\
      <tr>\n<td>Subtraction</td>\n<td style=\"text-align: center\"><code>-</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Reverses the second vector and\
      \ adds it to the first one</td>\n</tr>\n</table>\n<p>Here the assignment operator\
      \ <code>=</code> can also be combined with <code>+</code>, <code>-</code>, <code>*</code>\
      \ and <code>/</code>. All combined assignment operators have a precedence of\
      \ 34, so be careful when combining them with the string operators <tt>$</tt>\
      \ and <tt>@</tt> since those have a precedence of 40.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Rotator_Operators\">Rotator Operators</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Operators?section=10\"\
      \ title=\"Edit section: Rotator Operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>See also <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\"\
      >rotator</a>.</p>\n<table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n\
      <td><b>Precedence</b></td>\n<td><b>Description</b></td>\n</tr>\n<tr>\n<td>Multiplication</td>\n\
      <td style=\"text-align: center\"><code>*</code></td>\n<td style=\"text-align:\
      \ right\">16</td>\n<td>Multiplies all components of the rotator</td>\n</tr>\n\
      <tr>\n<td>Division</td>\n<td style=\"text-align: center\"><code>/</code></td>\n\
      <td style=\"text-align: right\">16</td>\n<td>Divides all components</td>\n</tr>\n\
      <tr>\n<td>Addition</td>\n<td style=\"text-align: center\"><code>+</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Adds the rotations</td>\n</tr>\n\
      <tr>\n<td>Subtraction</td>\n<td style=\"text-align: center\"><code>-</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Reverses the second rotator and\
      \ adds it to the first one</td>\n</tr>\n<tr>\n<td>Rotate vector (reversed)</td>\n\
      <td style=\"text-align: center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:\
      \ right\">22</td>\n<td>Rotates the vector in the way described by the rotator</td>\n\
      </tr>\n<tr>\n<td>Rotate vector</td>\n<td style=\"text-align: center\"><code>&gt;&gt;</code></td>\n\
      <td style=\"text-align: right\">22</td>\n<td>Rotates the vector in the way described\
      \ by the rotator, but in reversed direction</td>\n</tr>\n<tr>\n<td>Check for\
      \ clockwise rotation (UnrealEngine 2 and above)</td>\n<td style=\"text-align:\
      \ center\"><code>ClockwiseFrom</code></td>\n<td style=\"text-align: right\"\
      >24</td>\n<td>Pass the same components from different rotators to this operator\
      \ and it returns, whether the rotation was clockwise or not.</td>\n</tr>\n</table>\n\
      <p>Again, the assignment operator <code>=</code> can be combined with <code>+</code>,\
      \ <code>-</code>, <code>*</code> and <code>/</code>.</p>\n<p>Note that rotators\
      \ can't be inverted with the <tt>-</tt> preoperator. You will have to use <code>-1\
      \ * theRotator-</code> for this operation.</p>\n<p>The effect of the rotator/vector\
      \ operators &lt;&lt; and &gt;&gt; can be explained using the result of the <a\
      \ href=\"/Legacy:Global_Function\" title=\"Legacy:Global Function\">global functions</a>\
      \ GetAxes() and GetUnAxes() function:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >22</span><span class=\"br0\">)</span> <span class=\"kw5\">vector</span> <span\
      \ class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw5\"\
      >vector</span> A, <span class=\"kw5\">rotator</span> B<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">vector</span> X, Y, Z;\n  <span class=\"kw3\">GetAxes</span><span class=\"\
      br0\">(</span>B, X, Y, Z<span class=\"br0\">)</span>;\n  <span class=\"kw2\"\
      >return</span> X <span class=\"sy0\">*</span> A.<span class=\"me0\">X</span>\
      \ <span class=\"sy0\">+</span> Y <span class=\"sy0\">*</span> A.<span class=\"\
      me0\">Y</span> <span class=\"sy0\">+</span> Z <span class=\"sy0\">*</span> A.<span\
      \ class=\"me0\">Z</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"br0\">)</span>\
      \ <span class=\"kw5\">vector</span> <span class=\"sy0\">&gt;&gt;</span> <span\
      \ class=\"br0\">(</span><span class=\"kw5\">vector</span> A, <span class=\"\
      kw5\">rotator</span> B<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> X, Y,\
      \ Z;\n  <span class=\"kw3\">GetUnAxes</span><span class=\"br0\">(</span>B, X,\
      \ Y, Z<span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> X <span\
      \ class=\"sy0\">*</span> A.<span class=\"me0\">X</span> <span class=\"sy0\"\
      >+</span> Y <span class=\"sy0\">*</span> A.<span class=\"me0\">Y</span> <span\
      \ class=\"sy0\">+</span> Z <span class=\"sy0\">*</span> A.<span class=\"me0\"\
      >Z</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>The &lt;&lt;\
      \ operator performs exactly the calculations required to position a player's\
      \ weapon in first person view based on a constant view offset vector and the\
      \ player's view rotation.</p>\n<h2><span class=\"mw-headline\" id=\"String_Operators\"\
      >String Operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Operators?section=11\" title=\"Edit section:\
      \ String Operators\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n</tr>\n<tr>\n<td>String Concatenation</td>\n<td\
      \ style=\"text-align: center\"><code>@</code></td>\n<td style=\"text-align:\
      \ right\">40</td>\n<td>The two strings are put together with a space in between.</td>\n\
      </tr>\n<tr>\n<td>String Concatenation</td>\n<td style=\"text-align: center\"\
      ><code>$</code></td>\n<td style=\"text-align: right\">40</td>\n<td>The two strings\
      \ are put together without any space in between.</td>\n</tr>\n<tr>\n<td>String\
      \ Concatenation and Assign</td>\n<td style=\"text-align: center\"><code>@=</code></td>\n\
      <td style=\"text-align: right\">44</td>\n<td>The two strings are put together\
      \ with a space in between and the result is assigned to the first variable and\
      \ returned.</td>\n</tr>\n<tr>\n<td>String Concatenation and Assign</td>\n<td\
      \ style=\"text-align: center\"><code>$=</code></td>\n<td style=\"text-align:\
      \ right\">44</td>\n<td>The two strings are put together without any space in\
      \ between and the result is assigned to the first variable and returned.</td>\n\
      </tr>\n<tr>\n<td>Remove ocurances and Assign</td>\n<td style=\"text-align: center\"\
      ><code>-=-</code></td>\n<td style=\"text-align: right\">45</td>\n<td>Removes\
      \ all occurances of the second string from the first string.</td>\n</tr>\n</table>\n\
      <p>Aside from the string operators, there are other things that you can do with\
      \ strings that have been implemented as <a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">Global Functions</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Color_Operators\">Color Operators</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Operators?section=12\"\
      \ title=\"Edit section: Color Operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Color operators are only available in subclasses of\
      \ <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> in UnrealEngine\
      \ 1 and 2. Starting with UnrealEngine 3, they are defined as \"global\" operators\
      \ in the <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a> class.</p>\n\
      <table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n<td><b>Precedence</b></td>\n\
      <td><b>Description</b></td>\n</tr>\n<tr>\n<td>Multiplication</td>\n<td style=\"\
      text-align: center\"><code>*</code></td>\n<td style=\"text-align: right\">16</td>\n\
      <td>Multiplies all components of the color by a float</td>\n</tr>\n<tr>\n<td>Addition</td>\n\
      <td style=\"text-align: center\"><code>+</code></td>\n<td style=\"text-align:\
      \ right\">20</td>\n<td>Adds the colors</td>\n</tr>\n<tr>\n<td>Subtraction</td>\n\
      <td style=\"text-align: center\"><code>-</code></td>\n<td style=\"text-align:\
      \ right\">20</td>\n<td>Subtracts the colors (what happens if the RH component\
      \ is bigger than the LH?)</td>\n</tr>\n</table>\n<p>There are no combined assignment\
      \ operators for colors.</p>\n<p>UnrealEngine 3 also features the \"LinearColor\"\
      \ type, which is a color expressed in floating point values. Two operators exist\
      \ for this type:</p>\n<table>\n<tr>\n<td><b>Operation</b></td>\n<td><b>Operator</b></td>\n\
      <td><b>Precedence</b></td>\n<td><b>Description</b></td>\n</tr>\n<tr>\n<td>Multiplication</td>\n\
      <td style=\"text-align: center\"><code>*</code></td>\n<td style=\"text-align:\
      \ right\">16</td>\n<td>Multiplies all components of the linear color by a float</td>\n\
      </tr>\n<tr>\n<td>Addition</td>\n<td style=\"text-align: center\"><code>+</code></td>\n\
      <td style=\"text-align: right\">20</td>\n<td>Adds the linear colors</td>\n</tr>\n\
      </table>\n<p>Linear colors don't have combined assignment operators either.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Complete_Table_Of_Precedences\">Complete\
      \ Table Of Precedences</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Operators?section=13\" title=\"Edit section:\
      \ Complete Table Of Precedences\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The higher an operator is in this table the more tightly\
      \ it binds.</p>\n<table class=\"wikitable\">\n<tr>\n<td style=\"text-align:\
      \ center\"><b>Operator class</b></td>\n<td style=\"text-align: center\"><b>Examples</b></td>\n\
      </tr>\n<tr>\n<td>Parentheses</td>\n<td><code>( )</code></td>\n</tr>\n<tr>\n\
      <td>Unary preoperators</td>\n<td><code>-&#160;! ~ ++ --</code></td>\n</tr>\n\
      <tr>\n<td>Unary postoperators</td>\n<td><code>++ --</code></td>\n</tr>\n<tr>\n\
      <td>Exponentiation</td>\n<td><code>**</code></td>\n</tr>\n<tr>\n<td>Multiplicative\
      \ operators</td>\n<td><code>* / Cross Dot</code></td>\n</tr>\n<tr>\n<td>Additive\
      \ operators</td>\n<td><code>+ -</code></td>\n</tr>\n<tr>\n<td>Bit shifting and\
      \ vector rotating operators</td>\n<td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n\
      </tr>\n<tr>\n<td>Comparison operators (except inequality)</td>\n<td><code>&lt;\
      \ &gt; &lt;= &gt;= ~= == ClockwiseFrom</code></td>\n</tr>\n<tr>\n<td>Inequality</td>\n\
      <td><code>!=</code></td>\n</tr>\n<tr>\n<td>Bitwise Integer operators</td>\n\
      <td>^</td>\n</tr>\n<tr>\n<td>Logical AND, logical XOR</td>\n<td><code>&amp;&amp;\
      \ ^^</code></td>\n</tr>\n<tr>\n<td>Logical OR</td>\n<td><code>|</code></td>\n\
      </tr>\n<tr>\n<td>Combined assignment operators</td>\n<td><code>+= -= *= /=</code></td>\n\
      </tr>\n<tr>\n<td>String concatenation</td>\n<td><code>@ $</code></td>\n</tr>\n\
      <tr>\n<td>String concatenation and assign</td>\n<td><code>@= $=</code></td>\n\
      </tr>\n<tr>\n<td>String removal and assign</td>\n<td><code>-=-</code></td>\n\
      </tr>\n<tr>\n<td>Conditional operator</td>\n<td><code>?:&#160;??:</code></td>\n\
      </tr>\n<tr>\n<td>Assignment (actually a statement!)</td>\n<td><code>=</code></td>\n\
      </tr>\n</table>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Operators?section=14\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ main topic page</li>\n<li><a href=\"/Legacy:Global_Function\" title=\"Legacy:Global\
      \ Function\">Global Function</a></li>\n<li><a href=\"/Legacy:Scripting_Operators\"\
      \ title=\"Legacy:Scripting Operators\">Scripting Operators</a></li>\n<li><a\
      \ href=\"/Legacy:Operators/Discuss\" title=\"Legacy:Operators/Discuss\">Legacy:Operators/Discuss</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.243 seconds\nReal time\
      \ usage: 0.447 seconds\nPreprocessor visited node count: 121/1000000\nPreprocessor\
      \ generated node count: 220/1000000\nPost‐expand include size: 15/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2320-0!*!0!!en!*!* and timestamp\
      \ 20221118071130 and revision id 46331\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 100
    exists: true
    name: "Legacy:Devastation"
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Operators/Discuss"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Useful Maths Functions"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Scripting Operators"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Basics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Operators"
    byteoffset: 0
    anchor: "Basics"
  - toclevel: 2
    level: "3"
    line: "Preoperators / Postoperators"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Operators"
    byteoffset: 13
    anchor: "Preoperators_.2F_Postoperators"
  - toclevel: 2
    level: "3"
    line: "Precedence of operators"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Operators"
    byteoffset: 377
    anchor: "Precedence_of_operators"
  - toclevel: 1
    level: "2"
    line: "Boolean Operators"
    number: "2"
    index: "4"
    fromtitle: "Legacy:Operators"
    byteoffset: 949
    anchor: "Boolean_Operators"
  - toclevel: 1
    level: "2"
    line: "Comparison Operators"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Operators"
    byteoffset: 2539
    anchor: "Comparison_Operators"
  - toclevel: 1
    level: "2"
    line: "Conditional Operator"
    number: "4"
    index: "6"
    fromtitle: "Legacy:Operators"
    byteoffset: 3455
    anchor: "Conditional_Operator"
  - toclevel: 1
    level: "2"
    line: "Numeric Operators"
    number: "5"
    index: "7"
    fromtitle: "Legacy:Operators"
    byteoffset: 5047
    anchor: "Numeric_Operators"
  - toclevel: 1
    level: "2"
    line: "Bitwise Operators"
    number: "6"
    index: "8"
    fromtitle: "Legacy:Operators"
    byteoffset: 7648
    anchor: "Bitwise_Operators"
  - toclevel: 1
    level: "2"
    line: "Vector Operators"
    number: "7"
    index: "9"
    fromtitle: "Legacy:Operators"
    byteoffset: 10089
    anchor: "Vector_Operators"
  - toclevel: 1
    level: "2"
    line: "Rotator Operators"
    number: "8"
    index: "10"
    fromtitle: "Legacy:Operators"
    byteoffset: 11646
    anchor: "Rotator_Operators"
  - toclevel: 1
    level: "2"
    line: "String Operators"
    number: "9"
    index: "11"
    fromtitle: "Legacy:Operators"
    byteoffset: 13873
    anchor: "String_Operators"
  - toclevel: 1
    level: "2"
    line: "Color Operators"
    number: "10"
    index: "12"
    fromtitle: "Legacy:Operators"
    byteoffset: 15120
    anchor: "Color_Operators"
  - toclevel: 1
    level: "2"
    line: "Complete Table Of Precedences"
    number: "11"
    index: "13"
    fromtitle: "Legacy:Operators"
    byteoffset: 16472
    anchor: "Complete_Table_Of_Precedences"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "12"
    index: "14"
    fromtitle: "Legacy:Operators"
    byteoffset: 17597
    anchor: "Related_Topics"
  displaytitle: "Legacy:Operators"
  iwlinks: []
  wikitext:
    text: "==Basics ==\n\n===Preoperators / Postoperators ===\n\nIf any operator is\
      \ available as pre- '''and''' postoperator both versions basically have the\
      \ same effect on the variable. The only difference is what they return: Preoperators\
      \ return the variable's new value (after the operator's effect) while postoperators\
      \ return the old value (the value before the operator did something).\n\n===Precedence\
      \ of operators ===\n\nThe precedence of operators is used to group expressions.\n\
      \n<uscript>\nlocal int a,b,c,d,e;\n\na=2; b=3; c=4; d=2; e=5;\n\n          \
      \          // log output:\nlog(a@b@c@d@e);     // 2 3 4 2 5\nlog(a*b+++c**d*e);\
      \  // 86.000000\nlog(a@b@c@d@e);     // 2 4 4 2 5\n</uscript>\n\nUnrealScript\
      \ actually evaluates the expression like this:\n (a * (b++)) + ((c ** d) * e)\n\
      \nYou should use a form that uses some spaces and only few (or no) parentheses.\
      \ This helps understanding the expression a lot when you look at it again after\
      \ some time:\n a * b++ + c**d * e\n\n==Boolean Operators ==\n\n; iff (if and\
      \ only if) : The word \"iff\" means \"if and only if,\" implying that if the\
      \ given condition isn't met, the operation will yield a different (the opposite)\
      \ result.  (This is maths and logic jargon, ''not'' an UnrealScript operator.)\n\
      \n; short-circuit : Some binary boolean operators only evaluate their right\
      \ operand if the result of the entire expression isn't already defined by the\
      \ result of the first operand.  In this case, the right operand is ''skipped'',\
      \ which is a particularly handy feature if evaluation of that right operand\
      \ has non-trivial side effects (like a function call) or relies on the left\
      \ operand's result.<uscript>\nif (bAlreadyConfirmed || ShowMessageBox(\"Are\
      \ you sure?\")) ...  // show message only when needed\nif (ThisPawn != None\
      \ && ThisPawn.bIsPlayer) ...                // prevent \"Accessed None\"s\n\
      </uscript>\n\n{|\n\n|-\n|'''Operation'''\n|'''Operator'''\n|'''Precedence'''\n\
      |'''Description'''\n|'''Short-circuit''' \n|-\n|Negation\n| style=\"text-align:\
      \ center\" |<code>!</code>\n|Unary\n|Negates a boolean expression\n|\n|-\n|And\n\
      | style=\"text-align: center\" |<code>&&</code>\n| style=\"text-align: right\"\
      \ |30\n|True iff both operands are true\n|First operand ''false'' -> expression\
      \ ''false'' \n|-\n|Exclusive Or\n| style=\"text-align: center\" |<code>^^</code>\n\
      | style=\"text-align: right\" |30\n|True iff one of the operands is true (but\
      \ not both)\n|\n|-\n|Inclusive Or\n| style=\"text-align: center\" |<code>&#124;&#124;</code>\n\
      | style=\"text-align: right\" |32\n|True iff one or both of the operands are\
      \ true\n|First operand ''true'' -> expression ''true'' \n|-\n|}\n\n==Comparison\
      \ Operators ==\n\nComparison operators apply to values of all types.  Only compatible\
      \ types can be compared (numbers with numbers, strings with strings and so on).\
      \ ''Object'' (classes, actors, textures, etc.) and ''Name'' properties can only\
      \ be compared using ''Equal'' or ''Unequal''.\n\n{|\n\n|-\n|'''Operation'''\n\
      |'''Operator'''\n|'''Precedence'''\n|'''Remarks''' \n|-\n|Equal\n| style=\"\
      text-align: center\" |<code>==</code>\n|24\n|\n|-\n|Approximately Equal\n| style=\"\
      text-align: center\" |<code>~=</code>\n|24\n|Equality within 0.0001 (numbers)<br\
      \ />Case-insensitve equality (strings)\n|-\n|Less\n| style=\"text-align: center\"\
      \ |<code><</code>\n|24\n|\n|-\n|Less or Equal\n| style=\"text-align: center\"\
      \ |<code><=</code>\n|24\n|\n|-\n|Greater\n| style=\"text-align: center\" |<code>></code>\n\
      |24\n|\n|-\n|Greater or Equal\n| style=\"text-align: center\" |<code>>=</code>\n\
      |24\n|\n|-\n|Not Equal\n| style=\"text-align: center\" |<code>!=</code>\n|26\n\
      |\n|}\n\n==Conditional Operator==\n\nThe conditional operator is a ternary operator\
      \ in [[Legacy:Devastation|Devastation]] and UnrealEngine 3 games. In UnrealEngine\
      \ 3 it has the following syntax:\n ''condition'' '''?''' ''expression1'' ''':'''\
      \ ''expression2''\n\nIn Devastation the syntax is as follows:\n ''condition''\
      \ '''??''' ''expression1'' ''':''' ''expression2''\n\nIn both cases it works\
      \ similar to the '''If/Else''' statement, but returns the value of one of the\
      \ two expressions. If the condition evaluates to <code>True</code>, then the\
      \ first expression is evaluated, otherwise the second expression is evaluated.\n\
      \nLet's consider an UnrealScript implementation of the [[Legacy:Global Function|global\
      \ function]] Max(). In UnrealEngine 1 or 2 you would have to implement it as\
      \ something like the following:\n\n<uscript>\nstatic final function int Max(int\
      \ A, int B)\n{\n  if (A > B) {\n    return A;\n  }\n  else {\n    return B;\n\
      \  }\n}\n</uscript>\n\nIn UnrealEngine 3 you can now express the same feature\
      \ in a much more compact form:\n\n<uscript>\nstatic final function int Max(int\
      \ A, int B)\n{\n  return A > B ? A : B;\n}\n</uscript>\n\nVery pleasing to the\
      \ eye and exactly what you mean: Depending on a condition, this function is\
      \ supposed to return one of two values, not execute one of two statements.\n\
      \nNote that the conditional operator is no general replacement for the '''If'''\
      \ statement! The '''If''' statement selects statements to be executed, while\
      \ the conditional operator selects values to be returned. In fact, you get a\
      \ compiler error if any of the three operands is a statement that doesn't return\
      \ a value.\n\n== Numeric Operators ==\n\nNumeric operators apply to values of\
      \ type int, float and byte.\n\n{|class=\"wikitable\"\n\n|-\n|'''Operation'''\n\
      |'''Operator'''\n|'''Precedence'''\n|'''Description''' \n|-\n|Negation\n| style=\"\
      text-align: center\" |<code>-</code>\n|Preoperator\n|Returns the negative value\
      \ of the operand\n|-\n|Increment\n| style=\"text-align: center\" |<code>++</code>\n\
      |Pre-/Postoperator\n|Increments the variable operand by 1\n|-\n|Decrement\n\
      | style=\"text-align: center\" |<code>--</code>\n|Pre-/Postoperator\n|Decrements\
      \ the variable operand by 1\n|-\n|Exponentiation\n| style=\"text-align: center\"\
      \ |<code>**</code>\n| style=\"text-align: right\" |12\n|Puts the first operand\
      \ to the power of the second operand\n|-\n|Multiplication\n| style=\"text-align:\
      \ center\" |<code>*</code>\n| style=\"text-align: right\" |16\n|Multiplies both\
      \ operands\n|-\n|Division\n| style=\"text-align: center\" |<code>/</code>\n\
      | style=\"text-align: right\" |16\n|Divides the first operand by the second\
      \ operand\n|-\n|Modulo\n| style=\"text-align: center\" |<code>%</code>\n| style=\"\
      text-align: right\" |18\n|Divides the first operand by the second and returns\
      \ the remainder\n|-\n|Addition\n| style=\"text-align: center\" |<code>+</code>\n\
      | style=\"text-align: right\" |20\n|Adds both operands\n|-\n|Subtraction\n|\
      \ style=\"text-align: center\" |<code>-</code>\n| style=\"text-align: right\"\
      \ |20\n|Subtracts the second operand from the first operand\n|}\n\nThe modulo\
      \ operator follows the computer science definition of modulus rather than the\
      \ mathematical one::\n -8 % 10 = -8 (and not 2)\n\nThis results from differing\
      \ interpretations of whether % should be a \"modulo\" or \"remainder\" operator\
      \ (which is not the same thing), as well as differing results of what the integer\
      \ division operation returns for negative numbers in different programming languages.\
      \  UnrealScript's definition is consistent with what (most) C/C++ does, which\
      \ is probably appropriate considering that the language is similar in many other\
      \ ways. See [[Legacy:Useful Maths Functions|Useful Maths Functions]] for the\
      \ alternative.\n\nThe assignment operator <code>=</code> can be combined with\
      \ <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>.  These\
      \ combined operators <code>+=</code>, <code>-=</code>, <code>*=</code> and <code>/=</code>\
      \ assign the result of the operation to the first operand (which must be a variable).\
      \ These combined assignment operators also return the new value of the variable,\
      \ so\n\n<uscript>\nb += c;      // equivalent to  b = b + c;\na = b += c;  //\
      \ equivalent to  b = b + c;  a = b;  or  a = (b = b + c);\n</uscript>\n\nwill\
      \ add ''b'' and ''c'' and assign the result to ''a'' and ''b''.\n\n==Bitwise\
      \ Operators ==\n\n{|\n\n|-\n|'''Operation'''\n|'''Operator'''\n|'''Precedence'''\n\
      |'''Description''' \n|-\n|Inversion\n| style=\"text-align: center\" |<code>~</code>\n\
      |Preoperator\n|Performs a bitwise inversion of the operand\n|-\n|Shift Left\n\
      | style=\"text-align: center\" |<code><<</code>\n| style=\"text-align: right\"\
      \ |22\n|Shifts the bits of the first operand to the left\n|-\n|Shift Right (Arithmetic)\n\
      | style=\"text-align: center\" |<code>>></code>\n| style=\"text-align: right\"\
      \ |22\n|Shifts the bits of the first operand right, maintaining its signum\n\
      |-\n|Shift Right\n| style=\"text-align: center\" |<code>>>></code>\n| style=\"\
      text-align: right\" |22\n|Shifts the bits of the first operand right, filling\
      \ with zeroes\n|-\n|And\n| style=\"text-align: center\" |<code>&</code>\n| style=\"\
      text-align: right\" |28\n|Bitwise ''and''\n|-\n|Or\n| style=\"text-align: center\"\
      \ |<code>&#124;</code>\n| style=\"text-align: right\" |28\n|Bitwise ''or''\n\
      |-\n|Exclusive Or\n| style=\"text-align: center\" |<code>^</code>\n| style=\"\
      text-align: right\" |28\n|Bitwise ''exclusive or''\n|}\n\nFor the shift operators,\
      \ only the 5 least significant bits of the second operand are used.<br />What\
      \ does that mean? Well, it's a neat feature that allows you to specify, how\
      \ many bits you want to ''stay'' instead of how many you want to get rid of:\n\
      \n<uscript>\n// IntToHex() is a custom function that converts an integer into\
      \ its hexadecimal string representation\n\n// -12 = 0xfffffff4 -> five least\
      \ significant bits: 0xfffffff4 & 0x0000001f = 0x00000014 = 20\n// 12 bits =\
      \ 3 hex digits; 20 bits = 5 hex digits\n  \n// shift positive ints         \
      \        log output\nlog(IntToHex(0x02468ace <<   12));  //  68ace000\nlog(IntToHex(0x02468ace\
      \ <<  -12));  //  ace00000 = same as 0x02468ace <<  20\nlog(IntToHex(0x02468ace\
      \ >>   12));  //  00002468\nlog(IntToHex(0x02468ace >>  -12));  //  00000024\
      \ = same as 0x02468ace >>  20\nlog(IntToHex(0x02468ace >>>  12));  //  00002468\n\
      log(IntToHex(0x02468ace >>> -12));  //  00000024 = same as 0x02468ace >>> 20\n\
      \  \n// shift negative ints (to prove there's no difference from the usual behavior)\n\
      log(IntToHex(0xfdb97531 <<   12));  //  97531000\nlog(IntToHex(0xfdb97531 <<\
      \  -12));  //  53100000 = same as 0xfdb97531 <<  20\nlog(IntToHex(0xfdb97531\
      \ >>   12));  //  ffffdb97\nlog(IntToHex(0xfdb97531 >>  -12));  //  ffffffdb\
      \ = same as 0xfdb97531 >>  20\nlog(IntToHex(0xfdb97531 >>>  12));  //  000fdb97\n\
      log(IntToHex(0xfdb97531 >>> -12));  //  00000fdb = same as 0xfdb97531 >>> 20\n\
      </uscript>\n\n==Vector Operators ==\n\nSee also [[Legacy:Vector|vector]].\n\n\
      {|\n\n|-\n|'''Operation'''\n|'''Operator'''\n|'''Precedence'''\n|'''Description'''\
      \ \n|-\n|Reverse\n| style=\"text-align: center\" |<code>-</code>\n|Preoperator\n\
      |Returns the negative value of the operand\n|-\n|Multiply components\n| style=\"\
      text-align: center\" |<code>*</code>\n| style=\"text-align: right\" |16\n|Multiplies\
      \ the corresponding components of both vectors\n|-\n|Multiply by scalar\n| style=\"\
      text-align: center\" |<code>*</code>\n| style=\"text-align: right\" |16\n|(vector\
      \ * float or float * vector)\n|-\n|Divide by scalar\n| style=\"text-align: center\"\
      \ |<code>/</code>\n| style=\"text-align: right\" |16\n|(vector / float)\n|-\n\
      |Dot product\n| style=\"text-align: center\" |<code>Dot</code>\n| style=\"text-align:\
      \ right\" |16\n|Calculates the dot product (inner product) of the vectors\n\
      |-\n|Cross product\n| style=\"text-align: center\" |<code>Cross</code>\n| style=\"\
      text-align: right\" |16\n|Calculates the cross product (outer product) of the\
      \ vectors\n|-\n|Addition\n| style=\"text-align: center\" |<code>+</code>\n|\
      \ style=\"text-align: right\" |20\n|Adds both vectors\n|-\n|Subtraction\n| style=\"\
      text-align: center\" |<code>-</code>\n| style=\"text-align: right\" |20\n|Reverses\
      \ the second vector and adds it to the first one\n|}\n\nHere the assignment\
      \ operator <code>=</code> can also be combined with <code>+</code>, <code>-</code>,\
      \ <code>*</code> and <code>/</code>. All combined assignment operators have\
      \ a precedence of 34, so be careful when combining them with the string operators\
      \ <tt>$</tt> and <tt>@</tt> since those have a precedence of 40.\n\n==Rotator\
      \ Operators ==\n\nSee also [[Legacy:Rotator|rotator]].\n\n{|\n\n|-\n|'''Operation'''\n\
      |'''Operator'''\n|'''Precedence'''\n|'''Description''' \n|-\n|Multiplication\n\
      | style=\"text-align: center\" |<code>*</code>\n| style=\"text-align: right\"\
      \ |16\n|Multiplies all components of the rotator\n|-\n|Division\n| style=\"\
      text-align: center\" |<code>/</code>\n| style=\"text-align: right\" |16\n|Divides\
      \ all components\n|-\n|Addition\n| style=\"text-align: center\" |<code>+</code>\n\
      | style=\"text-align: right\" |20\n|Adds the rotations\n|-\n|Subtraction\n|\
      \ style=\"text-align: center\" |<code>-</code>\n| style=\"text-align: right\"\
      \ |20\n|Reverses the second rotator and adds it to the first one\n|-\n|Rotate\
      \ vector (reversed)\n| style=\"text-align: center\" |<code><<</code>\n| style=\"\
      text-align: right\" |22\n|Rotates the vector in the way described by the rotator\n\
      |-\n|Rotate vector\n| style=\"text-align: center\" |<code>>></code>\n| style=\"\
      text-align: right\" |22\n|Rotates the vector in the way described by the rotator,\
      \ but in reversed direction\n|-\n|Check for clockwise rotation (UnrealEngine\
      \ 2 and above)\n| style=\"text-align: center\" |<code>ClockwiseFrom</code>\n\
      | style=\"text-align: right\" |24\n|Pass the same components from different\
      \ rotators to this operator and it returns, whether the rotation was clockwise\
      \ or not.\n|}\n\nAgain, the assignment operator <code>=</code> can be combined\
      \ with <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>.\n\n\
      Note that rotators can't be inverted with the <tt>-</tt> preoperator. You will\
      \ have to use <code>-1 * theRotator-</code> for this operation.\n\nThe effect\
      \ of the rotator/vector operators << and >> can be explained using the result\
      \ of the [[Legacy:Global Function|global function]]s GetAxes() and GetUnAxes()\
      \ function:\n\n<uscript>\nstatic final operator(22) vector << (vector A, rotator\
      \ B)\n{\n  local vector X, Y, Z;\n  GetAxes(B, X, Y, Z);\n  return X * A.X +\
      \ Y * A.Y + Z * A.Z;\n}\n\nstatic final operator(22) vector >> (vector A, rotator\
      \ B)\n{\n  local vector X, Y, Z;\n  GetUnAxes(B, X, Y, Z);\n  return X * A.X\
      \ + Y * A.Y + Z * A.Z;\n}\n</uscript>\n\nThe << operator performs exactly the\
      \ calculations required to position a player's weapon in first person view based\
      \ on a constant view offset vector and the player's view rotation.\n\n==String\
      \ Operators ==\n\n{|\n\n|-\n|'''Operation'''\n|'''Operator'''\n|'''Precedence'''\n\
      |'''Description''' \n|-\n|String Concatenation\n| style=\"text-align: center\"\
      \ |<code>@</code>\n| style=\"text-align: right\" |40\n|The two strings are put\
      \ together with a space in between.\n|-\n|String Concatenation\n| style=\"text-align:\
      \ center\" |<code>$</code>\n| style=\"text-align: right\" |40\n|The two strings\
      \ are put together without any space in between.\n|-\n|String Concatenation\
      \ and Assign\n| style=\"text-align: center\" |<code>@=</code>\n| style=\"text-align:\
      \ right\" |44\n|The two strings are put together with a space in between and\
      \ the result is assigned to the first variable and returned.\n|-\n|String Concatenation\
      \ and Assign\n| style=\"text-align: center\" |<code>$=</code>\n| style=\"text-align:\
      \ right\" |44\n|The two strings are put together without any space in between\
      \ and the result is assigned to the first variable and returned.\n|-\n|Remove\
      \ ocurances and Assign\n| style=\"text-align: center\" |<code>-=-</code>\n|\
      \ style=\"text-align: right\" |45\n|Removes all occurances of the second string\
      \ from the first string.\n|}\n\nAside from the string operators, there are other\
      \ things that you can do with strings that have been implemented as [[Legacy:Global\
      \ Function|Global Function]]s.\n\n==Color Operators ==\n\nColor operators are\
      \ only available in subclasses of [[Legacy:Actor|Actor]] in UnrealEngine 1 and\
      \ 2. Starting with UnrealEngine 3, they are defined as \"global\" operators\
      \ in the [[Legacy:Object|Object]] class.\n\n{|\n\n|-\n|'''Operation'''\n|'''Operator'''\n\
      |'''Precedence'''\n|'''Description''' \n|-\n|Multiplication\n| style=\"text-align:\
      \ center\" |<code>*</code>\n| style=\"text-align: right\" |16\n|Multiplies all\
      \ components of the color by a float\n|-\n|Addition\n| style=\"text-align: center\"\
      \ |<code>+</code>\n| style=\"text-align: right\" |20\n|Adds the colors\n|-\n\
      |Subtraction\n| style=\"text-align: center\" |<code>-</code>\n| style=\"text-align:\
      \ right\" |20\n|Subtracts the colors (what happens if the RH component is bigger\
      \ than the LH?)\n|}\n\nThere are no combined assignment operators for colors.\n\
      \nUnrealEngine 3 also features the \"LinearColor\" type, which is a color expressed\
      \ in floating point values. Two operators exist for this type:\n\n{|\n\n|-\n\
      |'''Operation'''\n|'''Operator'''\n|'''Precedence'''\n|'''Description''' \n\
      |-\n|Multiplication\n| style=\"text-align: center\" |<code>*</code>\n| style=\"\
      text-align: right\" |16\n|Multiplies all components of the linear color by a\
      \ float\n|-\n|Addition\n| style=\"text-align: center\" |<code>+</code>\n| style=\"\
      text-align: right\" |20\n|Adds the linear colors\n|}\n\nLinear colors don't\
      \ have combined assignment operators either.\n\n==Complete Table Of Precedences\
      \ ==\n\nThe higher an operator is in this table the more tightly it binds.\n\
      \n{| class=\"wikitable\"\n\n|-\n| style=\"text-align: center\" |'''Operator\
      \ class'''\n| style=\"text-align: center\" |'''Examples''' \n|-\n|Parentheses\n\
      |<code>( )</code>\n|-\n|Unary preoperators\n|<code>- ! ~ ++ --</code>\n|-\n\
      |Unary postoperators\n|<code>++ --</code>\n|-\n|Exponentiation\n|<code>**</code>\n\
      |-\n|Multiplicative operators\n|<code>* / Cross Dot</code>\n|-\n|Additive operators\n\
      |<code>+ -</code>\n|-\n|Bit shifting and vector rotating operators\n|<code><<\
      \ >> >>></code>\n|-\n|Comparison operators (except inequality)\n|<code>< > <=\
      \ >= ~= == ClockwiseFrom</code>\n|-\n|Inequality\n|<code>!=</code>\n|-\n|Bitwise\
      \ Integer operators\n|<code>& | ^</code>\n|-\n|Logical AND, logical XOR\n|<code>&&\
      \ ^^</code>\n|-\n|Logical OR\n|<code>&#124;<code>\n|-\n|Combined assignment\
      \ operators\n|<code>+= -= *= /=</code>\n|-\n|String concatenation\n|<code>@\
      \ $</code>\n|-\n|String concatenation and assign\n|<code>@= $=</code>\n|-\n\
      |String removal and assign\n|<code>-=-</code>\n|-\n|Conditional operator\n|<code>?:\
      \ ??:</code>\n|-\n|Assignment (actually a statement!)\n|<code>=</code>\n|}\n\
      \n==Related Topics==\n* [[Legacy:UnrealScript|UnrealScript]] main topic page\n\
      * [[Legacy:Global Function|Global Function]]\n* [[Legacy:Scripting Operators|Scripting\
      \ Operators]]\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Discuss]]"
  properties: []
  revId: 46331
name: "Legacy:Operators"
revision:
  revid: 46331
  parentid: 46330
  user: "SeriousBarbie"
  timestamp: 1462849845.000000000
  comment: "+class=\"wikitable\""
timestamp: 1668755491.336412000
