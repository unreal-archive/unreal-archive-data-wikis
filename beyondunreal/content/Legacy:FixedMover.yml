---
parse:
  title: "Legacy:FixedMover"
  text:
    text: "<p>Movers that rotate in the process of opening or closing (doors, for\
      \ instance) don't work well in network games; clients may see those movers rotated\
      \ in ways that don't match their actual rotation on the server. The following\
      \ class, presumptuously called <b>FixedMover</b>, fixes that problem. (See <a\
      \ href=\"/Legacy:Embedding_Code\" title=\"Legacy:Embedding Code\">Embedding\
      \ Code</a> for how to use it in your maps.)</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> FixedMover <span class=\"kw1\">extends</span>\
      \ Mover;\n \n \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ RealRotationYaw;\n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ RealRotationPitch;\n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ RealRotationRoll;\n \n \n<span class=\"kw1\">replication</span> <span class=\"\
      br0\">{</span>\n \n  <span class=\"kw1\">reliable</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw7\">Role</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">ROLE_Authority</span><span class=\"\
      br0\">)</span>\n    RealRotationYaw, RealRotationPitch, RealRotationRoll;\n\
      \  <span class=\"br0\">}</span>\n \n \n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">event</span> <span class=\"kw4\">Timer</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n\
      \  <span class=\"co1\">// first problem: rotators not replicated correctly</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      kw7\">Role</span> <span class=\"sy0\">&lt;</span> <span class=\"kw7\">ROLE_Authority</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    RealRotation.<span\
      \ class=\"me0\">Yaw</span>   <span class=\"sy0\">=</span> RealRotationYaw;\n\
      \    RealRotation.<span class=\"me0\">Pitch</span> <span class=\"sy0\">=</span>\
      \ RealRotationPitch;\n    RealRotation.<span class=\"me0\">Roll</span>  <span\
      \ class=\"sy0\">=</span> RealRotationRoll;\n    <span class=\"br0\">}</span>\n\
      \ \n  <span class=\"co1\">// second problem: rotation not taken into account\
      \ when updating position</span>\n  <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>RealRotation <span class=\"sy0\">!=</span> <span class=\"kw7\"\
      >Rotation</span><span class=\"br0\">)</span>\n    bClientPause <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n \n  <span class=\"kw6\">Super</span>.<span\
      \ class=\"kw4\">Timer</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw7\">Role</span> <span class=\"sy0\">==</span> <span class=\"kw7\"\
      >ROLE_Authority</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \    RealRotationYaw   <span class=\"sy0\">=</span> RealRotation.<span class=\"\
      me0\">Yaw</span>;\n    RealRotationPitch <span class=\"sy0\">=</span> RealRotation.<span\
      \ class=\"me0\">Pitch</span>;\n    RealRotationRoll  <span class=\"sy0\">=</span>\
      \ RealRotation.<span class=\"me0\">Roll</span>;\n    <span class=\"br0\">}</span>\n\
      \  <span class=\"br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.033 seconds\nReal time usage: 0.045 seconds\nPreprocessor\
      \ visited node count: 4/1000000\nPreprocessor generated node count: 24/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1268-0!*!0!*!*!*!*\
      \ and timestamp 20221118100218 and revision id 3261\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Embedding Code"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:FixedMover"
  iwlinks: []
  wikitext:
    text: "Movers that rotate in the process of opening or closing (doors, for instance)\
      \ don't work well in network games; clients may see those movers rotated in\
      \ ways that don't match their actual rotation on the server.  The following\
      \ class, presumptuously called '''FixedMover''', fixes that problem.  (See [[Legacy:Embedding\
      \ Code|Embedding Code]] for how to use it in your maps.)\n\n<uscript>\nclass\
      \ FixedMover extends Mover;\n\n\nvar int RealRotationYaw;\nvar int RealRotationPitch;\n\
      var int RealRotationRoll;\n\n\nreplication {\n\n  reliable if (Role == ROLE_Authority)\n\
      \    RealRotationYaw, RealRotationPitch, RealRotationRoll;\n  }\n\n\nsimulated\
      \ event Timer() {\n\n  // first problem: rotators not replicated correctly\n\
      \  if (Role < ROLE_Authority) {\n    RealRotation.Yaw   = RealRotationYaw;\n\
      \    RealRotation.Pitch = RealRotationPitch;\n    RealRotation.Roll  = RealRotationRoll;\n\
      \    }\n\n  // second problem: rotation not taken into account when updating\
      \ position\n  if (RealRotation != Rotation)\n    bClientPause = true;\n\n  Super.Timer();\n\
      \  \n  if (Role == ROLE_Authority) {\n    RealRotationYaw   = RealRotation.Yaw;\n\
      \    RealRotationPitch = RealRotation.Pitch;\n    RealRotationRoll  = RealRotation.Roll;\n\
      \    }\n  }\n</uscript>"
  properties: []
  revId: 3261
name: "Legacy:FixedMover"
revision:
  revid: 3261
  parentid: 0
  user: "Vty229a4.emba.uvm.edu"
  timestamp: 1084230425.000000000
  comment: "Moved class to separate page..."
timestamp: 1668799325.700066000
