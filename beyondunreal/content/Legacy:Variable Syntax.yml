---
parse:
  title: "Legacy:Variable Syntax"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Variable_Declaration\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Variable Declaration</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Class_variables\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Class variables</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Constants\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Constants</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-4\"><a href=\"#Local_Variables\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Local Variables</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Function_Parameters\"><span\
      \ class=\"tocnumber\">1.4</span> <span class=\"toctext\">Function Parameters</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Arrays\"><span class=\"tocnumber\"\
      >1.5</span> <span class=\"toctext\">Arrays</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-7\"><a href=\"#Static_Arrays\"><span class=\"tocnumber\">1.5.1</span>\
      \ <span class=\"toctext\">Static Arrays</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-8\"><a href=\"#Dynamic_Arrays\"><span class=\"tocnumber\">1.5.2</span>\
      \ <span class=\"toctext\">Dynamic Arrays</span></a></li>\n</ul>\n</li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Variable_Modifiers\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Variable Modifiers</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Variable_Declaration\"\
      >Variable Declaration</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Variable_Syntax?section=1\" title=\"Edit section:\
      \ Variable Declaration\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Class_variables\">Class variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Syntax?section=2\" title=\"Edit section: Class\
      \ variables\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The <i>var</i> keyword is used after the <a href=\"/Legacy:Class_Syntax\"\
      \ title=\"Legacy:Class Syntax\">class</a> declaration to declare class variables.\
      \ Using parentheses after the keyword <i>var</i> makes the variable appear in\
      \ the <a href=\"/Legacy:Actor_Properties_Window\" title=\"Legacy:Actor Properties\
      \ Window\">Actor properties window</a> for objects of that class. Using <i>group</i>\
      \ makes them appear in a certain group like <i>Display</i>. If group is not\
      \ specified the class name is used as group. See <a href=\"/Legacy:Displaying_Variables_In_UnrealEd\"\
      \ title=\"Legacy:Displaying Variables In UnrealEd\">Displaying variables in\
      \ UnrealEd</a>.</p>\n<pre>var(<i>group</i>) <i>modifiers</i> <i>type</i> <i>name</i>,\
      \ <i>name</i>, ...;\nvar() <i>modifiers</i> <i>type</i> <i>name</i>, <i>name</i>,\
      \ ...;\nvar <i>modifiers</i> <i>type</i> <i>name</i>, <i>name</i>, ...;\n</pre>\n\
      <p>Default values of variables are set in the <a href=\"/Legacy:Default_Properties\"\
      \ title=\"Legacy:Default Properties\">Default Properties</a> block. For the\
      \ possible values of the <i>type</i>, see <a href=\"/Legacy:Variable_Type\"\
      \ title=\"Legacy:Variable Type\">Variable Type</a>.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Constants\">Constants</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Syntax?section=3\"\
      \ title=\"Edit section: Constants\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Constants are just names for certain values and can\
      \ be changed neither from <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> nor from native code. Constants can be declared anywhere in\
      \ a class, even inside functions, but they are always available in the whole\
      \ class.</p>\n<pre>const <i>name</i> = <i>value</i>;\n</pre>\n<p><b>Note:</b>\
      \ Constants will not be evaluated in the <a href=\"/Legacy:Default_Properties\"\
      \ title=\"Legacy:Default Properties\">default properties</a> block. You will\
      \ have to use literal values there.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Local_Variables\">Local Variables</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Syntax?section=4\"\
      \ title=\"Edit section: Local Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Local variables are only available in the function\
      \ they were declared in.</p>\n<pre>local <i>type</i> <i>name</i>, <i>name</i>,\
      \ ...;\n</pre>\n<h3><span class=\"mw-headline\" id=\"Function_Parameters\">Function\
      \ Parameters</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Variable_Syntax?section=5\" title=\"Edit section:\
      \ Function Parameters\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>See <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function Syntax\"\
      >Function Syntax</a>.</p>\n<h3><span class=\"mw-headline\" id=\"Arrays\">Arrays</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Syntax?section=6\" title=\"Edit section: Arrays\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<h4><span\
      \ class=\"mw-headline\" id=\"Static_Arrays\">Static Arrays</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Syntax?section=7\"\
      \ title=\"Edit section: Static Arrays\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>A static array has a length known at compile time\
      \ and is not resizeable.</p>\n<p>To create an array just specify its length\
      \ in brackets behind the variable's name:</p>\n<pre>var<i>/</i>local <i>type</i>\
      \ <i>name</i>[<i>length</i>], ...;\n</pre>\n<p>Type can be any of the built-in\
      \ types (except bool) or a struct or an object. <i>(Enums?)</i> The length needs\
      \ to be a constant integer value greater than 0, i.e. you can also use a constant\
      \ instead of a number here. The array's size cannot be changed once the array\
      \ has been declared. All elements are initialized to their null values. (see\
      \ Built-In Types below)</p>\n<p>Array values are accessed via <tt><i>name</i>[0]</tt>\
      \ to <tt><i>name</i>[<i>length</i> - 1]</tt>. If you need to get the length\
      \ of the array use <tt>ArrayCount(<i>name</i>)</tt>.</p>\n<p><b>Note:</b> UnrealScript\
      \ doesn't support multi-dimentional arrays of any kind. To fake multi-dimensional\
      \ arrays you either have to use a larger array and write accessor functions\
      \ for it that transform multiple indices to a the actual array index or use\
      \ a declaration like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">struct</span> TMultiArray <span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">var</span> <span class=\"kw5\">int</span> Y<span class=\"br0\">[</span><span\
      \ class=\"nu0\">100</span><span class=\"br0\">]</span>;\n<span class=\"br0\"\
      >}</span>;\n<span class=\"kw1\">var</span> TMultiArray X<span class=\"br0\"\
      >[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span>;</pre></div>\n\
      </div>\n<p>Later, in a function you can access this fake multi-dimensional array\
      \ with this syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">X<span class=\"\
      br0\">[</span><span class=\"nu0\">50</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">Y</span><span class=\"br0\">[</span><span class=\"nu0\">50</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">31337</span>;</pre></div>\n\
      </div>\n<p><b>Note on replication:</b> The elements of a static array count\
      \ as indvidual variables with identical replication conditions, so you can replicates\
      \ arrays of any size you want as long as the individual elements obey replication\
      \ restrictions.<br />\nHowever, as parameter of a replicated function only the\
      \ first array element will arrive at the remote machine. To get around that,\
      \ make the array part of a struct and use that as the function parameter.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Dynamic_Arrays\">Dynamic Arrays</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Syntax?section=8\" title=\"Edit section: Dynamic\
      \ Arrays\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>A dynamic array is an array that can be lengthened or shortened to accomodate\
      \ the number of elements in the array.</p>\n<p>See <a href=\"/Legacy:Dynamic_Array\"\
      \ title=\"Legacy:Dynamic Array\">Dynamic Array</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Variable_Modifiers\">Variable Modifiers</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Variable_Syntax?section=9\"\
      \ title=\"Edit section: Variable Modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Modifier keywords come between the <i>var</i> keyword\
      \ and the type keyword. Any number of modifiers can be used, including zero.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//Example</span>\n\
      \ <span class=\"kw1\">var</span> <span class=\"kw1\">transient</span> <span\
      \ class=\"kw5\">int</span> MyVar;</pre></div>\n</div>\n<dl>\n<dt>config&#160;</dt>\n\
      <dd>The value of this variable can be saved to a *.ini file and is class specific.\
      \ (see <a href=\"/Legacy:Config_Vars_And_.Ini_Files\" title=\"Legacy:Config\
      \ Vars And .Ini Files\">Config Vars And .Ini Files</a>)</dd>\n<dt>const&#160;</dt>\n\
      <dd>The variable cannot be changed from UnrealScript, but only through native\
      \ code.</dd>\n<dt>deprecated&#160;</dt>\n<dd>(Only in v600+ builds of the Unreal\
      \ Engine.) The compiler prints the warning \"Reference to deprecated property\
      \ <i>variable name</i>.\" when a variable marked as \"deprecated\" is used in\
      \ the code.</dd>\n<dt>edfindable&#160;</dt>\n<dd>(Only in v600+ builds of the\
      \ Unreal Engine.) Can be read as 'Editor Findable.' If this property is selected\
      \ in the actor properties window within UnrealEd, there will be a \"find\" button\
      \ beside the property in question. If you click the \"find\" button, the cursor\
      \ will change to the \"finder\" cursor. If an actor is clicked while the \"\
      finder\" cursor is displayed, the currently selected property (in the actor\
      \ properties window) will be set to the actor clicked upon. For an example,\
      \ see <a href=\"/Legacy:Volume\" title=\"Legacy:Volume\">Volume</a>.DecorationList</dd>\n\
      <dt>editconst&#160;</dt>\n<dd>The variable cannot be changed in UnrealEd, even\
      \ though it might be displayed there.</dd>\n<dt>editconstarray&#160;</dt>\n\
      <dd>Prevents users from changing a dynamic array's length in the properties\
      \ window.</dd>\n<dt>editinline&#160;</dt>\n<dd>(Only in v600+ builds of the\
      \ Unreal Engine.) Allowes UnrealEd users to edit the object referenced by this\
      \ variable within the property window of the object this variable belongs to.\
      \ See <a href=\"/Legacy:Editinline\" title=\"Legacy:Editinline\">editinline</a>\
      \ for details.</dd>\n<dt>(no)export&#160;</dt>\n<dd>Whether or not this property\
      \ should be displayed in the default properties of classes exported with UnrealEd\
      \ or the <a href=\"/Legacy:BatchExportCommandlet\" title=\"Legacy:BatchExportCommandlet\"\
      >BatchExportCommandlet</a>. Just a guess, but <b>export</b> probably overrides\
      \ a class' noexport declaration for subobject exporting.</dd>\n<dt>globalconfig&#160;</dt>\n\
      <dd>The value of this variable can be saved to a *.ini file and is also used\
      \ for all subclasses. (see <a href=\"/Legacy:Config_Vars_And_.Ini_Files\" title=\"\
      Legacy:Config Vars And .Ini Files\">Config Vars And .Ini Files</a>)</dd>\n<dt>input&#160;</dt>\n\
      <dd>&lt;wiki&gt;\"Input\" variables can be mapped to the console, by binding\
      \ a key to a special console command. Only byte or float variables can be input\
      \ variables. The appropriate console commands to bind an input variable to a\
      \ keyboard/mouse/joystick input are:</dd>\n</dl>\n<ul>\n<li>Button <i>&lt;variable\
      \ name&gt;</i>: The input variable is 1 if the button is pressed, 0 otherwise.\
      \ Should be a byte variable.</li>\n<li>Count <i>&lt;variable name&gt;</i>: This\
      \ variable will increment every time the button is pressed. If it is an axis,\
      \ this will increment every time a new input is recieved. This can be useful\
      \ for checking to see if an input has changed since it was last checked. It\
      \ will wrap around when it reaches 255. This should use a byte variable.</li>\n\
      <li>Axis <i>&lt;variable name&gt; &lt;arguments&gt;</i> The only one that takes\
      \ arguments is also the only one meant for use with floats. This captures axis\
      \ movement. Depending on the axis in question, this may be an absolute value\
      \ (as with joysticks) or it may be a relative value. (as with mice) Arguments\
      \ are specified in the format <i>argument name</i>=<i>value</i> and the valid\
      \ arguments are:\n<ul>\n<li>Speed: Appears to be a simple multiplier for the\
      \ input. Seems to be useful on mice.</li>\n<li>SpeedBase: Appears to be an exponential\
      \ multiplier for the input. Seems to be useful on joysticks.</li>\n<li>Deadzone:\
      \ Inputs within this amount of zero are not set into the axis variable and are\
      \ registered as 0. This appears to be applied BEFORE speed or speedbase.</li>\n\
      <li>Invert: Interestingly, this appears to be a simple multiplier. Set to <b>-1</b>\
      \ to invert the axis.</li>\n</ul>\n</li>\n</ul>\n<p>Note that <a href=\"/Legacy:Interaction\"\
      \ title=\"Legacy:Interaction\">Interactions</a> are better for most input capturing,\
      \ as input variables require subclassing <a href=\"/Legacy:PlayerController\"\
      \ title=\"Legacy:PlayerController\">PlayerController</a>. (or <a href=\"/Legacy:PlayerPawn\"\
      \ title=\"Legacy:PlayerPawn\">PlayerPawn</a> in the case of UnrealEngine1) Axis\
      \ input variables can also only be accessed within the PlayerTick function -\
      \ outside of this function they will always be zero. (though the variable can\
      \ be stored in another variable that will be accessible anytime.) The only real\
      \ reason to use input variables in UnrealEngine2 is because <a href=\"/Legacy:Interactions\"\
      \ title=\"Legacy:Interactions\">Interactions</a> do not capture joystick axis\
      \ movement.</p>\n<p>&lt;/wiki&gt;</p>\n<dl>\n<dt>localized&#160;</dt>\n<dd>The\
      \ default value of this variable can be located in a <a href=\"/Legacy:Localization\"\
      \ title=\"Legacy:Localization\">localization</a> file (*.int, etc.).</dd>\n\
      <dt>native&#160;</dt>\n<dd>This variable is set by native code.</dd>\n<dt>private&#160;</dt>\n\
      <dd>The variable is only visible from the class it was declared in, but not\
      \ from any of its subclasses.</dd>\n<dt>protected&#160;</dt>\n<dd>The variable\
      \ is only visible from the class it was declared in and all subclasses.</dd>\n\
      <dt>transient&#160;</dt>\n<dd>This variable will not be included when saving\
      \ the current game. (in Unreal)</dd>\n<dt>travel&#160;</dt>\n<dd>The value of\
      \ this variable does not change when traveling between levels.</dd>\n</dl>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Variable_Syntax?section=10\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\n\
      <ul>\n<li><a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable Type\">Variable\
      \ Types</a></li>\n<li><a href=\"/Legacy:Typecasting\" title=\"Legacy:Typecasting\"\
      >Typecasting</a></li>\n</ul>\n</li>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference/Variables\"\
      \ title=\"Legacy:UnrealScript Language Reference/Variables\">UnrealScript Language\
      \ Reference/Variables</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.082 seconds\nReal time usage: 0.083 seconds\nPreprocessor visited\
      \ node count: 67/1000000\nPreprocessor generated node count: 114/1000000\nPost‐\
      expand include size: 15/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3579-0!*!0!!en!*!*\
      \ and timestamp 20221118000740 and revision id 46437\n -->\n"
  categories:
  - sortkey: "Variable Syntax"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Volume"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Localization"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:PlayerPawn"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:Config Vars And .Ini Files"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:BatchExportCommandlet"
  - ns: 100
    exists: true
    name: "Legacy:Editinline"
  - ns: 100
    exists: true
    name: "Legacy:Interactions"
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Array"
  - ns: 100
    exists: true
    name: "Legacy:Actor Properties Window"
  - ns: 100
    exists: true
    name: "Legacy:Displaying Variables In UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Variable Declaration"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 0
    anchor: "Variable_Declaration"
  - toclevel: 2
    level: "3"
    line: "Class variables"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 27
    anchor: "Class_variables"
  - toclevel: 2
    level: "3"
    line: "Constants"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 892
    anchor: "Constants"
  - toclevel: 2
    level: "3"
    line: "Local Variables"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 1346
    anchor: "Local_Variables"
  - toclevel: 2
    level: "3"
    line: "Function Parameters"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 1486
    anchor: "Function_Parameters"
  - toclevel: 2
    level: "3"
    line: "Arrays"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 1563
    anchor: "Arrays"
  - toclevel: 3
    level: "4"
    line: "Static Arrays"
    number: "1.5.1"
    index: "7"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 1577
    anchor: "Static_Arrays"
  - toclevel: 3
    level: "4"
    line: "Dynamic Arrays"
    number: "1.5.2"
    index: "8"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 3289
    anchor: "Dynamic_Arrays"
  - toclevel: 1
    level: "2"
    line: "Variable Modifiers"
    number: "2"
    index: "9"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 3474
    anchor: "Variable_Modifiers"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Variable_Syntax"
    byteoffset: 8314
    anchor: "Related_Topics"
  displaytitle: "Legacy:Variable Syntax"
  iwlinks: []
  wikitext:
    text: "==Variable Declaration ==\n\n===Class variables ===\n\nThe ''var'' keyword\
      \ is used after the [[Legacy:Class Syntax|class]] declaration to declare class\
      \ variables. Using parentheses after the keyword ''var'' makes the variable\
      \ appear in the [[Legacy:Actor Properties Window|Actor properties window]] for\
      \ objects of that class. Using ''group'' makes them appear in a certain group\
      \ like ''Display''. If group is not specified the class name is used as group.\
      \ See [[Legacy:Displaying Variables In UnrealEd|Displaying variables in UnrealEd]].\n\
      \ var(''group'') ''modifiers'' ''type'' ''name'', ''name'', ...;\n var() ''modifiers''\
      \ ''type'' ''name'', ''name'', ...;\n var ''modifiers'' ''type'' ''name'', ''name'',\
      \ ...;\n\nDefault values of variables are set in the [[Legacy:Default Properties|Default\
      \ Properties]] block. For the possible values of the ''type'', see [[Legacy:Variable\
      \ Type|Variable Type]].\n\n===Constants ===\n\nConstants are just names for\
      \ certain values and can be changed neither from [[Legacy:UnrealScript|UnrealScript]]\
      \ nor from native code. Constants can be declared anywhere in a class, even\
      \ inside functions, but they are always available in the whole class.\n const\
      \ ''name'' = ''value'';\n\n'''Note:''' Constants will not be evaluated in the\
      \ [[Legacy:Default Properties|default properties]] block. You will have to use\
      \ literal values there.\n\n===Local Variables ===\n\nLocal variables are only\
      \ available in the function they were declared in.\n local ''type'' ''name'',\
      \ ''name'', ...;\n\n===Function Parameters ===\n\nSee [[Legacy:Function Syntax|Function\
      \ Syntax]].\n\n===Arrays===\n\n====Static Arrays====\n\nA static array has a\
      \ length known at compile time and is not resizeable.\n\nTo create an array\
      \ just specify its length in brackets behind the variable's name:\n var''/''local\
      \ ''type'' ''name''[''length''], ...;\n\nType can be any of the built-in types\
      \ (except bool) or a struct or an object. ''(Enums?)'' The length needs to be\
      \ a constant integer value greater than 0, i.e. you can also use a constant\
      \ instead of a number here. The array's size cannot be changed once the array\
      \ has been declared. All elements are initialized to their null values. (see\
      \ Built-In Types below)\n\nArray values are accessed via <tt>''name''[0]</tt>\
      \ to <tt>''name''[''length'' - 1]</tt>. If you need to get the length of the\
      \ array use <tt>ArrayCount(''name'')</tt>.\n\n'''Note:''' UnrealScript doesn't\
      \ support multi-dimentional arrays of any kind. To fake multi-dimensional arrays\
      \ you either have to use a larger array and write accessor functions for it\
      \ that transform multiple indices to a the actual array index or use a declaration\
      \ like this:\n\n<uscript>\nstruct TMultiArray {\n  var int Y[100];\n};\nvar\
      \ TMultiArray X[100];\n</uscript>\n\nLater, in a function you can access this\
      \ fake multi-dimensional array with this syntax:\n\n<uscript>\nX[50].Y[50] =\
      \ 31337;\n</uscript>\n\n'''Note on replication:''' The elements of a static\
      \ array count as indvidual variables with identical replication conditions,\
      \ so you can replicates arrays of any size you want as long as the individual\
      \ elements obey replication restrictions.<br />However, as parameter of a replicated\
      \ function only the first array element will arrive at the remote machine. To\
      \ get around that, make the array part of a struct and use that as the function\
      \ parameter.\n\n====Dynamic Arrays====\n\nA dynamic array is an array that can\
      \ be lengthened or shortened to accomodate the number of elements in the array.\n\
      \nSee [[Legacy:Dynamic Array|Dynamic Array]].\n\n==Variable Modifiers ==\n\n\
      Modifier keywords come between the ''var'' keyword and the type keyword. Any\
      \ number of modifiers can be used, including zero.\n\n<uscript>\n//Example\n\
      \ var transient int MyVar;\n</uscript>\n\n; config : The value of this variable\
      \ can be saved to a *.ini file and is class specific. (see [[Legacy:Config Vars\
      \ And .Ini Files|Config Vars And .Ini Files]])\n; const : The variable cannot\
      \ be changed from UnrealScript, but only through native code.\n; deprecated\
      \ : (Only in v600+ builds of the Unreal Engine.) The compiler prints the warning\
      \ \"Reference to deprecated property ''variable name''.\" when a variable marked\
      \ as \"deprecated\" is used in the code.\n; edfindable : (Only in v600+ builds\
      \ of the Unreal Engine.) Can be read as 'Editor Findable.' If this property\
      \ is selected in the actor properties window within UnrealEd, there will be\
      \ a \"find\" button beside the property in question. If you click the \"find\"\
      \ button, the cursor will change to the \"finder\" cursor. If an actor is clicked\
      \ while the \"finder\" cursor is displayed, the currently selected property\
      \ (in the actor properties window) will be set to the actor clicked upon. For\
      \ an example, see [[Legacy:Volume|Volume]].DecorationList\n; editconst : The\
      \ variable cannot be changed in UnrealEd, even though it might be displayed\
      \ there.\n; editconstarray : Prevents users from changing a dynamic array's\
      \ length in the properties window.\n; editinline : (Only in v600+ builds of\
      \ the Unreal Engine.) Allowes UnrealEd users to edit the object referenced by\
      \ this variable within the property window of the object this variable belongs\
      \ to. See [[Legacy:Editinline|editinline]] for details. \n; (no)export : Whether\
      \ or not this property should be displayed in the default properties of classes\
      \ exported with UnrealEd or the [[Legacy:BatchExportCommandlet|BatchExportCommandlet]].\
      \ Just a guess, but '''export''' probably overrides a class' noexport declaration\
      \ for subobject exporting.\n; globalconfig : The value of this variable can\
      \ be saved to a *.ini file and is also used for all subclasses. (see [[Legacy:Config\
      \ Vars And .Ini Files|Config Vars And .Ini Files]])\n; input : <wiki>\"Input\"\
      \ variables can be mapped to the console, by binding a key to a special console\
      \ command. Only byte or float variables can be input variables. The appropriate\
      \ console commands to bind an input variable to a keyboard/mouse/joystick input\
      \ are:\n* Button ''<variable name>'': The input variable is 1 if the button\
      \ is pressed, 0 otherwise. Should be a byte variable.\n* Count ''<variable name>'':\
      \ This variable will increment every time the button is pressed. If it is an\
      \ axis, this will increment every time a new input is recieved. This can be\
      \ useful for checking to see if an input has changed since it was last checked.\
      \ It will wrap around when it reaches 255. This should use a byte variable.\n\
      * Axis ''<variable name> <arguments>'' The only one that takes arguments is\
      \ also the only one meant for use with floats. This captures axis movement.\
      \ Depending on the axis in question, this may be an absolute value (as with\
      \ joysticks) or it may be a relative value. (as with mice) Arguments are specified\
      \ in the format ''argument name''=''value'' and the valid arguments are:\n**\
      \ Speed: Appears to be a simple multiplier for the input. Seems to be useful\
      \ on mice.\n** SpeedBase: Appears to be an exponential multiplier for the input.\
      \ Seems to be useful on joysticks.\n** Deadzone: Inputs within this amount of\
      \ zero are not set into the axis variable and are registered as 0. This appears\
      \ to be applied BEFORE speed or speedbase.\n** Invert: Interestingly, this appears\
      \ to be a simple multiplier. Set to '''-1''' to invert the axis.\n\nNote that\
      \ [[Legacy:Interaction|Interaction]]s are better for most input capturing, as\
      \ input variables require subclassing [[Legacy:PlayerController|PlayerController]].\
      \ (or [[Legacy:PlayerPawn|PlayerPawn]] in the case of UnrealEngine1) Axis input\
      \ variables can also only be accessed within the PlayerTick function - outside\
      \ of this function they will always be zero. (though the variable can be stored\
      \ in another variable that will be accessible anytime.) The only real reason\
      \ to use input variables in UnrealEngine2 is because [[Legacy:Interactions|Interactions]]\
      \ do not capture joystick axis movement.\n\n</wiki>\n; localized : The default\
      \ value of this variable can be located in a [[Legacy:Localization|localization]]\
      \ file (*.int, etc.).\n; native : This variable is set by native code.\n; private\
      \ : The variable is only visible from the class it was declared in, but not\
      \ from any of its subclasses.\n; protected : The variable is only visible from\
      \ the class it was declared in and all subclasses.\n; transient : This variable\
      \ will not be included when saving the current game. (in Unreal)\n; travel :\
      \ The value of this variable does not change when traveling between levels.\n\
      \n==Related Topics ==\n* [[Legacy:UnrealScript|UnrealScript]]\n** [[Legacy:Variable\
      \ Type|Variable Type]]s\n** [[Legacy:Typecasting|Typecasting]]\n* [[Legacy:UnrealScript\
      \ Language Reference/Variables|UnrealScript Language Reference/Variables]]\n\
      \n\n[[Category:Legacy Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 46437
name: "Legacy:Variable Syntax"
revision:
  revid: 46437
  parentid: 32883
  user: "SeriousBarbie"
  timestamp: 1633127015.000000000
  comment: "typo fix"
timestamp: 1668763427.920135000
