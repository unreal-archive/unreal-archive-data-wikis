---
parse:
  title: "UE1:UE1PreProcessorCommandlet"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#About\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">About</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Install\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Install</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Download\"><span class=\"tocnumber\">3</span> <span\
      \ class=\"toctext\">Download</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Unreal_Tournament\"><span class=\"tocnumber\">3.1</span> <span class=\"\
      toctext\">Unreal Tournament</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#Rune\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\"\
      >Rune</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Unreal\"\
      ><span class=\"tocnumber\">3.3</span> <span class=\"toctext\">Unreal</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Usage\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Usage</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Parameters\"><span class=\"\
      tocnumber\">4.1</span> <span class=\"toctext\">Parameters</span></a>\n<ul>\n\
      <li class=\"toclevel-3 tocsection-9\"><a href=\"#Options\"><span class=\"tocnumber\"\
      >4.1.1</span> <span class=\"toctext\">Options</span></a></li>\n<li class=\"\
      toclevel-3 tocsection-10\"><a href=\"#Globals\"><span class=\"tocnumber\">4.1.2</span>\
      \ <span class=\"toctext\">Globals</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-11\"><a href=\"#Directives\"><span class=\"tocnumber\"\
      >4.2</span> <span class=\"toctext\">Directives</span></a>\n<ul>\n<li class=\"\
      toclevel-3 tocsection-12\"><a href=\"#.60import_details:\"><span class=\"tocnumber\"\
      >4.2.1</span> <span class=\"toctext\">`import details:</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-13\"><a href=\"#.60namespace_details:\"><span\
      \ class=\"tocnumber\">4.2.2</span> <span class=\"toctext\">`namespace details:</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-14\"><a href=\"#Operators_in_conditional_statement_and_write_directive\"\
      ><span class=\"tocnumber\">4.2.3</span> <span class=\"toctext\">Operators in\
      \ conditional statement and write directive</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-15\"><a href=\"#Unreal_Engine_version\"><span class=\"tocnumber\"\
      >4.2.4</span> <span class=\"toctext\">Unreal Engine version</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"#Macros\"><span\
      \ class=\"tocnumber\">4.3</span> <span class=\"toctext\">Macros</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#Functions\"><span class=\"\
      tocnumber\">4.4</span> <span class=\"toctext\">Functions</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-18\"><a href=\"#Project_file\"><span class=\"\
      tocnumber\">4.5</span> <span class=\"toctext\">Project file</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-19\"><a href=\"#Example\"><span class=\"tocnumber\"\
      >4.6</span> <span class=\"toctext\">Example</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-20\"><a href=\"#Changelog\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Changelog</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"About\">About</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=1\" title=\"Edit section:\
      \ About\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This is a preprocessor in the form of a ucc commandlet. Right now it's only\
      \ available for UT1, but I'm working on a version for Unreal 1. For unknown\
      \ reasons it gives me lots of errors on Unreal 1 224 sources.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Install\">Install</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=2\"\
      \ title=\"Edit section: Install\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Copy files in the archive to your &lt;UTdir&gt; folder.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Download\">Download</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=3\"\
      \ title=\"Edit section: Download\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>As always source code is included in zip file.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Unreal_Tournament\">Unreal Tournament</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=4\" title=\"Edit section:\
      \ Unreal Tournament\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>link:</b> <a rel=\"nofollow\" class=\"external text\" href=\"http://turniej.unreal.pl/files/UEnginePPC.zip\"\
      >UEnginePPC v. 0.5.296 for UT(~103kb)</a></p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Rune\">Rune</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=5\" title=\"\
      Edit section: Rune\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>link:</b> <a rel=\"nofollow\" class=\"external text\" href=\"http://turniej.unreal.pl/files/UEnginePPC_Rune.zip\"\
      >UEnginePPC v. 0.3.168 for Rune (~633kb)</a></p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Unreal\">Unreal</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=6\" title=\"\
      Edit section: Unreal\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Preprocessor is already included in patch 227 for Unreal 1.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Usage\">Usage</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=7\"\
      \ title=\"Edit section: Usage\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>In order to use the preprocessor you have to call\
      \ ucc with the following parameters:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">ucc uengineppc.<span class=\"me0\">parse</span> project<span class=\"\
      sy0\">=</span><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>project_dir<span\
      \ class=\"sy0\">&gt;/&lt;</span>project_file<span class=\"sy0\">&gt;</span><span\
      \ class=\"br0\">]</span>  <span class=\"br0\">[</span><span class=\"sy0\">-</span>option...<span\
      \ class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span>globals...<span\
      \ class=\"br0\">]</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Parameters\">Parameters</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=8\"\
      \ title=\"Edit section: Parameters\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>&lt;project_dir&gt; - relative project directory.</li>\n\
      <li>&lt;project_file&gt; - file (.upc extension) containing all options. If\
      \ file is detected, no further modifiers are checked</li>\n</ul>\n<h4><span\
      \ class=\"mw-headline\" id=\"Options\">Options</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=9\"\
      \ title=\"Edit section: Options\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<table class=\"wikitable\">\n<tr>\n<td><b>option</b></td>\n\
      <td><b>description</b></td>\n<td><b>override by project file</b></td>\n</tr>\n\
      <tr>\n<td>-clean</td>\n<td>deletes preprocessor directives from .uc file</td>\n\
      <td>yes</td>\n</tr>\n<tr>\n<td>-debug</td>\n<td>turns on debug mode (prints\
      \ every operation on parsed .uc file)</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>-printglobals</td>\n\
      <td>prints all global variables</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>-normalizeeol</td>\n\
      <td>tries to find \\r and \\n and change them into \\r\\n</td>\n<td>yes</td>\n\
      </tr>\n<tr>\n<td>-bIsPackage</td>\n<td>when defining &lt;project_dir&gt; you\
      \ may type only the package name. Path will be detected automatically.</td>\n\
      <td>yes</td>\n</tr>\n<tr>\n<td>-bIniVersion</td>\n<td>macro __UENGINEVERSION__\
      \ will return uengine version saved in INI (FirstRun param), if false, it'll\
      \ return version saved in engine.</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>-deletelog</td>\n\
      <td>scans UScript source for log functions and deletes it</td>\n<td>yes</td>\n\
      </tr>\n<tr>\n<td>-force</td>\n<td>forces all source .uc files to be parsed</td>\n\
      <td>yes</td>\n</tr>\n</table>\n<h4><span class=\"mw-headline\" id=\"Globals\"\
      >Globals</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=10\" title=\"\
      Edit section: Globals\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>All other parameters will be considered to be global variables. If <b>=</b>\
      \ is not detected, global variable is equal null. Example:</p>\n<pre>   val1=1\
      \ val val2=3 \n</pre>\n<h3><span class=\"mw-headline\" id=\"Directives\">Directives</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=11\" title=\"Edit section:\
      \ Directives\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Currently supported directives are:</p>\n<table class=\"wikitable\">\n<tr>\n\
      <td><b>directive</b></td>\n<td><b>description</b></td>\n</tr>\n<tr>\n<td>`process</td>\n\
      <td>should be in the first line of .uc file. Tells preprocessor to parse file</td>\n\
      </tr>\n<tr>\n<td>`include(file)</td>\n<td>embed file in the currently opened\
      \ .uc (do not parse it)</td>\n</tr>\n<tr>\n<td>`include(file,false)</td>\n<td>embed\
      \ file in the currently opened .uc (do not parse it)</td>\n</tr>\n<tr>\n<td>`include(file,true)</td>\n\
      <td>embed file in the currently opened .uc and parses it</td>\n</tr>\n<tr>\n\
      <td>`require(file)</td>\n<td>embed file in the currently opened .uc (do not\
      \ parse it). If required file doesn't exist, it stops parsing current file and\
      \ produce error.</td>\n</tr>\n<tr>\n<td>`require(file,false)</td>\n<td>embed\
      \ file in the currently opened .uc (do not parse it). If required file doesn't\
      \ exist, it stops parsing current file and produce error.</td>\n</tr>\n<tr>\n\
      <td>`require(file,true)</td>\n<td>embed file in the currently opened .uc and\
      \ parses it. If required file doesn't exist, it stops parsing current file and\
      \ produce error.</td>\n</tr>\n<tr>\n<td>`define(name)</td>\n<td>defines variable\
      \ name (used in `ifdef and `ifndef directives)</td>\n</tr>\n<tr>\n<td>`define(name,value)</td>\n\
      <td>defines variable name with specified value (used in `if and ternary operation)</td>\n\
      </tr>\n<tr>\n<td>`undef(name)</td>\n<td>removes name from local definitions</td>\n\
      </tr>\n<tr>\n<td>`error(name1,true)</td>\n<td>produces error message and exits\
      \ commandlet</td>\n</tr>\n<tr>\n<td>`error(name1)</td>\n<td>produces error message\
      \ and stops parsing current file</td>\n</tr>\n<tr>\n<td>`warn(name1)</td>\n\
      <td>produces warning message</td>\n</tr>\n<tr>\n<td>`log(name1)</td>\n<td>produces\
      \ message</td>\n</tr>\n<tr>\n<td>`ifdef(name)</td>\n<td>evaluates to true if\
      \ variable name is defined</td>\n</tr>\n<tr>\n<td>`ifndef(name)</td>\n<td>evaluates\
      \ to true if variable name is not defined</td>\n</tr>\n<tr>\n<td>`if ([expression1]\
      \ [operator] [expression2])</td>\n<td>checks to see if the first condition is\
      \ true by comparing expression1 to expression2 using the operator.</td>\n</tr>\n\
      <tr>\n<td>`else if ([expression1] [operator] [expression2])</td>\n<td>checks\
      \ to see if the first condition is true by comparing expression1 to expression2\
      \ using the operator, only if first condition is false..</td>\n</tr>\n<tr>\n\
      <td>`else</td>\n<td>part of conditional statement</td>\n</tr>\n<tr>\n<td>`endif</td>\n\
      <td>ends conditional statement</td>\n</tr>\n<tr>\n<td>`write(name)</td>\n<td>writes\
      \ defined variable name</td>\n</tr>\n<tr>\n<td>`write(name1==name2option1:option2)</td>\n\
      <td>if statement evaluates to true (variable name1 equals variable name2) writes\
      \ option1 otherwise writes option 2</td>\n</tr>\n<tr>\n<td>`write(name1&lt;&gt;name2?option1:option2)</td>\n\
      <td>if statement evaluates to true (variable name1 does not match variable name2)\
      \ writes option1 otherwise writes option 2</td>\n</tr>\n<tr>\n<td>`write(name1&gt;name2?option1:option2)</td>\n\
      <td>if statement evaluates to true (variable name1 is greater then variable\
      \ name2) writes option1 otherwise writes option 2</td>\n</tr>\n<tr>\n<td>`write(name1&lt;name2?option1:option2)</td>\n\
      <td>if statement evaluates to true (variable name1 is less than variable name2)\
      \ writes option1 otherwise writes option 2</td>\n</tr>\n<tr>\n<td>`write(name1?option1:option2)</td>\n\
      <td>if statement evaluates to true (variable name1 is defined) writes option1\
      \ otherwise writes option 2</td>\n</tr>\n<tr>\n<td>`import(directory,extension,type,group,lodset,flags,package)</td>\n\
      <td>can be used to import textures/sounds from chosen directory</td>\n</tr>\n\
      <tr>\n<td>`namespace(name,value)</td>\n<td>defines namespace name with specified\
      \ value. It's a combination of `define and `write. If namespace is detected,\
      \ it'll be replaced by value, without need of using `write</td>\n</tr>\n<tr>\n\
      <td>`remove.start</td>\n<td>everything below this directive will be deleted</td>\n\
      </tr>\n<tr>\n<td>`remove.end</td>\n<td>disables `remove.start</td>\n</tr>\n\
      </table>\n<p>Notice that all variables used in directive `if and ternary operation\
      \ are parsed in the following order:</p>\n<ol>\n<li>Returns value from global\
      \ variables if correct name is found, otherwise...</li>\n<li>Returns value from\
      \ local variables if correct name is found, otherwise...</li>\n<li>Assumes that\
      \ name is value.</li>\n</ol>\n<h4><span class=\"mw-headline\" id=\".60import_details:\"\
      >`import details:</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=12\" title=\"\
      Edit section: `import details:\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>As <b>type</b> you can use only <b>TEXTURE</b> and\
      \ <b>SOUND</b>. If the extension is <b>uax</b> or <b>utx</b> the preprocessor\
      \ will create <b>#exec obj load</b> instead of <b>#exec type import</b>. For\
      \ example code below:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">`</span><span class=\"kw1\">import</span><span class=\"br0\">(</span>tex,pcx,<span\
      \ class=\"kw5\">TEXTURE</span>,<span class=\"kw9\">HUD</span><span class=\"\
      br0\">)</span></pre></div>\n</div>\n<p>will make the preprocessor iterate through\
      \ all files in folder &lt;UT&gt;/&lt;Project&gt;/tex in search for all *.pcx\
      \ files. When a file with extension pcx is found, the preprocessor will create\
      \ a UScript #exec directive to import texture into group HUD. Group, LodStet,\
      \ Flags and Package parameters are optional. Result will look like:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#exec TEXTURE IMPORT\
      \ NAME=Tex001 FILE=\"tex/Tex001.pcx\"</span>\n<span class=\"co2\">#exec TEXTURE\
      \ IMPORT NAME=Tex002 FILE=\"tex/Tex002.pcx\"</span>\n<span class=\"co2\">#exec\
      \ TEXTURE IMPORT NAME=Tex003 FILE=\"tex/Tex003.pcx\"</span></pre></div>\n</div>\n\
      <h4><span class=\"mw-headline\" id=\".60namespace_details:\">`namespace details:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=13\" title=\"Edit section:\
      \ `namespace details:\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Namespace can be useful to replace large parts of text, without need of use\
      \ `write and `define directives. For example if you write directive:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">`</span>namespace<span\
      \ class=\"br0\">(</span>__SOMECLASS__,<span class=\"kw1\">class</span><span\
      \ class=\"st0\">'SomeClass'</span>.<span class=\"kw1\">static</span><span class=\"\
      br0\">)</span></pre></div>\n</div>\n<p>and use it in code:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">__SOMECLASS__.<span class=\"me0\">SomeFunction</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>parsed code will change to:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">class</span><span class=\"st0\">'SomeClass'</span>.<span\
      \ class=\"kw1\">static</span>.<span class=\"me0\">SomeFunction</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>You can\
      \ also use macros:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">`</span>namespace<span class=\"br0\">(</span>__SOMECLASS__,<span class=\"\
      kw1\">class</span><span class=\"st0\">'__SELF__.SomeClass'</span>.<span class=\"\
      kw1\">static</span><span class=\"br0\">)</span></pre></div>\n</div>\n<p>assuming\
      \ that your package is MyPackege this directive means:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"sy0\">`</span>namespace<span class=\"br0\"\
      >(</span>__SOMECLASS__,<span class=\"kw1\">class</span><span class=\"st0\">'MyPackege.SomeClass'</span>.<span\
      \ class=\"kw1\">static</span><span class=\"br0\">)</span></pre></div>\n</div>\n\
      <p>Namespace works also in `require and `include directive.</p>\n<h4><span class=\"\
      mw-headline\" id=\"Operators_in_conditional_statement_and_write_directive\"\
      >Operators in conditional statement and write directive</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=14\"\
      \ title=\"Edit section: Operators in conditional statement and write directive\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<table\
      \ class=\"wikitable\">\n<tr>\n<td><b>operator</b></td>\n<td><b>description</b></td>\n\
      <td><b>type</b></td>\n</tr>\n<tr>\n<td><b>==</b></td>\n<td>equal</td>\n<td>string,\
      \ float, integer, bool</td>\n</tr>\n<tr>\n<td><b>&lt;&gt;</b></td>\n<td>not\
      \ equal</td>\n<td>string, float, integer, bool</td>\n</tr>\n<tr>\n<td><b>&gt;=</b></td>\n\
      <td>greater or equal</td>\n<td>float, integer</td>\n</tr>\n<tr>\n<td><b>&lt;=</b></td>\n\
      <td>less or equal</td>\n<td>float, integer</td>\n</tr>\n<tr>\n<td><b>&lt;</b></td>\n\
      <td>less</td>\n<td>float, integer</td>\n</tr>\n<tr>\n<td><b>&gt;</b></td>\n\
      <td>greater</td>\n<td>float, integer</td>\n</tr>\n<tr>\n<td><b>!</b></td>\n\
      <td>negation, works as `ifndef</td>\n<td></td>\n</tr>\n</table>\n<h4><span class=\"\
      mw-headline\" id=\"Unreal_Engine_version\">Unreal Engine version</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=15\" title=\"Edit section:\
      \ Unreal Engine version\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Since 0.2.106 UE1PreProcessorCommandlet can check the Unreal Engine version.\
      \ This will be useful once the preprocessor is stable and compiled to U1.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">`</span><span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>__UENGINEVERSION__<span class=\"\
      sy0\">==</span><span class=\"nu0\">436</span><span class=\"br0\">)</span>\n\
      <span class=\"co1\">//some UT436 specific code</span>\n<span class=\"sy0\">`</span>endif</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Macros\">Macros</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=16\"\
      \ title=\"Edit section: Macros\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Macros are in fact hardcoded constants. Each macro\
      \ will write something in the currently parsed .uc file. Currently supported\
      \ macros are:</p>\n<ul>\n<li>__FILE__ - will write name of currently parsed\
      \ file, usable in conditional statements</li>\n<li>__CLASS__ - will write name\
      \ of currently parsed class, usable in conditional statements</li>\n<li>__DATE__\
      \ - will write time</li>\n<li>__SELF__ - will write current package, usable\
      \ in conditional statements</li>\n<li>__UENGINEVERSION__ - will write Unreal\
      \ Engine version, usable in conditional statements</li>\n<li>__NUMERATE_CPP__\
      \ - replaces itself with a number and increments a counter (used in native functions).\
      \ It's value depends on <b>native_offset</b></li>\n<li>__LINE__ - will write\
      \ current line (parsed output)</li>\n<li>__RELATIVE_LINE__ - will write current\
      \ line (unparsed input)</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"Functions\"\
      >Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=17\" title=\"\
      Edit section: Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>You can also define functions in new section of project file, eg.:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"br0\">[</span>functions<span\
      \ class=\"br0\">]</span>\n<span class=\"sy0\">`</span><span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"sy0\">$</span>value<span class=\"br0\"\
      >)</span><span class=\"sy0\">=</span><span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"sy0\">$</span>value,<span class=\"st0\">'ResidualDecay'</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p>Now when you call in code:</p>\n\
      <p>`log(\"Log message\");</p>\n<p>the parser will change it to:</p>\n<p>log(\"\
      Log message\",'ResidualDecay');</p>\n<p><b>Tips:</b></p>\n<ul>\n<li>Avoid using\
      \ functions with similar names - eg.: `log and `logx will screw up result code.</li>\n\
      <li>Avoid using parameters with similar names in one function - eg.: `log($value1,\
      \ $value2); will not work too good&#160;:).</li>\n<li>Functions can only be\
      \ defined in project file.</li>\n</ul>\n<p>Eventually all bugs listed above\
      \ will be eliminated (current implementation was written in ~5-10 minutes).</p>\n\
      <h3><span class=\"mw-headline\" id=\"Project_file\">Project file</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessorCommandlet?section=18\" title=\"Edit section:\
      \ Project file\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Project file must have upc extension, and 'path' must be relative to ucc.exe\
      \ location. Default location for files with preprocessor Unreal Script files\
      \ is:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\"\
      >&lt;</span>project_folder<span class=\"sy0\">&gt;/</span>classes<span class=\"\
      sy0\">/</span>preprocessor</pre></div>\n</div>\n<p>parsed .uc files will be\
      \ stored in:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">&lt;</span>project_folder<span class=\"sy0\">&gt;/</span>classes</pre></div>\n\
      </div>\n<p>Here's all commands for project file.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"br0\">[</span>project<span class=\"br0\">]</span>\
      \                 <span class=\"sy0\">-</span> project information\npath<span\
      \ class=\"sy0\">=</span>path                 <span class=\"sy0\">-</span> path\
      \ to project\ndebug<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\
      \                <span class=\"sy0\">-</span> turns on debug mode <span class=\"\
      br0\">(</span>prints every operation on parsed .<span class=\"me0\">uc</span><span\
      \ class=\"br0\">)</span>\nmake<span class=\"sy0\">=</span><span class=\"kw6\"\
      >true</span>                 <span class=\"sy0\">-</span> <span class=\"kw2\"\
      >if</span> <span class=\"kw6\">true</span>, ucc <span class=\"kw8\">commandlet</span>\
      \ will run make after parsing all files\nmake_ini<span class=\"sy0\">=</span>make.<span\
      \ class=\"me0\">ini</span>         <span class=\"sy0\">-</span> ini used in\
      \ ucc make <span class=\"kw8\">commandlet</span>\nclean<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">true</span>                <span class=\"sy0\">-</span> <span\
      \ class=\"kw2\">if</span> <span class=\"kw6\">true</span>, will delete preprocessor\
      \ directives\noutput<span class=\"sy0\">=</span>folder             <span class=\"\
      sy0\">-</span> override <span class=\"kw1\">default</span> output folder where\
      \ parsed .<span class=\"me0\">uc</span> files are written\ninput<span class=\"\
      sy0\">=</span>folder              <span class=\"sy0\">-</span> override <span\
      \ class=\"kw1\">default</span> input folder where parsed .<span class=\"me0\"\
      >uc</span> files are stored\nbIsPackage<span class=\"sy0\">=</span><span class=\"\
      kw6\">true</span>           <span class=\"sy0\">-</span> when defining path\
      \ you may type only <span class=\"kw5\">name</span> of package. <span class=\"\
      me0\">Path</span> will be detected automatically.\n<span class=\"me0\">bIniVersion</span><span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>          <span class=\"\
      sy0\">-</span> <span class=\"kw2\">if</span> <span class=\"kw6\">true</span>,\
      \ macro __UENGINEVERSION__ will <span class=\"kw2\">return</span> uengine version\
      \ saved in INI <span class=\"br0\">(</span>FirstRun param<span class=\"br0\"\
      >)</span>, <span class=\"kw2\">if</span> <span class=\"kw6\">false</span>, it<span\
      \ class=\"st0\">'ll return version saved in engine.\nbDeleteLog=true       \
      \    - scans UScript source for log functions and deletes it\nnative_offset\
      \             - offset for __NUMERATE_CPP__ macro (starting number)\nbForce=true\
      \               - if true forces all source .uc files to be parsed\nprintnamespace=true\
      \       - will print global namespace if true\nbClearOutput=true         - will\
      \ delete all output files before parsing input\nprintmacros=true          -\
      \ will print all global macros if true\nnative_offset=1600        - offset when\
      \ using __NUMERATE_CPP__ macro\n \n[globals]                 - group containing\
      \ global variables for whole project\nsomeglobal=somevalue      - global variable\
      \ (sample)\n \n[namespace]\nsome_namespace=some_value - declares namespace '</span>some_namespace<span\
      \ class=\"st0\">' with value equal '</span>some_value<span class=\"st0\">' (for\
      \ usage see `namespace details)\n \n[functions]\n`some_function($some_value)=log($some_value,'</span>ResidualDecay<span\
      \ class=\"st0\">') - declares function `some_function</span></pre></div>\n</div>\n\
      <p>example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      br0\">[</span>project<span class=\"br0\">]</span>\npath<span class=\"sy0\">=</span>..<span\
      \ class=\"sy0\">/</span>MyProject<span class=\"sy0\">/</span>\ndebug<span class=\"\
      sy0\">=</span><span class=\"kw6\">true</span>\nmake<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">true</span>\nmake_ini<span class=\"sy0\">=</span>make.<span\
      \ class=\"me0\">ini</span>\nclean<span class=\"sy0\">=</span><span class=\"\
      kw6\">true</span>\noutput<span class=\"sy0\">=</span>classes\ninput<span class=\"\
      sy0\">=</span>classes<span class=\"sy0\">/</span>preprocessor\nbIsPackage<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">false</span>\n \n<span class=\"\
      br0\">[</span>globals<span class=\"br0\">]</span>\nglobal_value1<span class=\"\
      sy0\">=</span>test1\nglobal_value2<span class=\"sy0\">=</span>test2</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Example\">Example</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=19\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Let's say you have project file in &lt;UDir&gt;/system\
      \ called REmitter.upc with content:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"br0\">[</span>project<span class=\"br0\">]</span>\npath<span\
      \ class=\"sy0\">=</span>..<span class=\"sy0\">/</span>REmitter<span class=\"\
      sy0\">/</span>\ndebug<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      make<span class=\"sy0\">=</span><span class=\"kw6\">false</span>\nmake_ini<span\
      \ class=\"sy0\">=</span>make.<span class=\"me0\">ini</span>\nclean<span class=\"\
      sy0\">=</span><span class=\"kw6\">true</span>\noutput<span class=\"sy0\">=</span>classes\n\
      input<span class=\"sy0\">=</span>classes<span class=\"sy0\">/</span>preprocessor\n\
      printglobals<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n \n\
      <span class=\"br0\">[</span>globals<span class=\"br0\">]</span>\n__NUM_NATIVES__<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1</span></pre></div>\n</div>\n<p>and\
      \ classes:</p>\n<p>REmitterBase.uc</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"sy0\">`</span>process\n<span class=\"sy0\">`</span>include<span\
      \ class=\"br0\">(</span>classes<span class=\"sy0\">/</span>includes<span class=\"\
      sy0\">/</span>default_header.<span class=\"me0\">uc</span>,<span class=\"kw6\"\
      >true</span><span class=\"br0\">)</span>\n<span class=\"co1\">// Base class\
      \ for emitter related actors.</span>\n<span class=\"co1\">// Quaternion implementation\
      \ originally written by UsAaR33.</span>\n<span class=\"kw1\">class</span> REmitterBase\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Actor</span> <span\
      \ class=\"kw1\">native</span>;\n \n<span class=\"kw1\">struct</span> <span class=\"\
      kw5\">Quat</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">config</span>\
      \ <span class=\"kw5\">float</span> W, X, Y, Z;\n<span class=\"br0\">}</span>;\n\
      <span class=\"co1\">//converts rotator to quaternion</span>\n<span class=\"\
      kw1\">native</span><span class=\"sy0\">`</span>write<span class=\"br0\">(</span>__NUM_NATIVES__<span\
      \ class=\"sy0\">==</span><span class=\"nu0\">1</span>?<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2330</span><span class=\"br0\">)</span>:<span class=\"br0\"\
      >)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw5\">Quat</span> RotationToQuat<span\
      \ class=\"br0\">(</span> <span class=\"kw5\">rotator</span> R, <span class=\"\
      kw5\">bool</span> bHighPrecision<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>default_header.uc</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Copyright 2005-2008 Dead Cow Studios. All Rights Reserved.</span>\n\
      <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Coder: Raven</span>\n<span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Last revision: __DATE__</span>\n<span class=\"co1\">//\
      \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></pre></div>\n\
      </div>\n<p>You run preprocessor and:</p>\n<ol>\n<li>directive `process is found,\
      \ so preprocessor knows that this class has to be parsed.</li>\n<li>directive\
      \ `include is found. Preprocessor embeds file default_header.uc and parses it</li>\n\
      <li>macro __DATE__ is found and current date is inserted at its place</li>\n\
      <li>directive `write is found. Because expression evaluates to true, first value\
      \ - (2330) - is inserted at it's place</li>\n</ol>\n<p>output .uc file will\
      \ look like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Copyright 2005-2008 Dead Cow Studios. All Rights Reserved.</span>\n\
      <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Coder: Raven</span>\n<span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Last revision: 21-9-2008 20:1</span>\n<span class=\"\
      co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n\
      <span class=\"co1\">// Base class for emitter related actors.</span>\n<span\
      \ class=\"co1\">// Quaternion implementation originally written by UsAaR33.</span>\n\
      <span class=\"kw1\">class</span> REmitterBase <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Actor</span> <span class=\"kw1\">native</span>;\n \n<span\
      \ class=\"kw1\">struct</span> <span class=\"kw5\">Quat</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">config</span> <span class=\"kw5\"\
      >float</span> W, X, Y, Z;\n<span class=\"br0\">}</span>;\n<span class=\"co1\"\
      >//converts rotator to quaternion</span>\n<span class=\"kw1\">native</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">2330</span><span class=\"br0\">)</span>\
      \ <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">Quat</span> RotationToQuat<span class=\"\
      br0\">(</span> <span class=\"kw5\">rotator</span> R, <span class=\"kw5\">bool</span>\
      \ bHighPrecision<span class=\"br0\">)</span>;</pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Changelog\">Changelog</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessorCommandlet?section=20\"\
      \ title=\"Edit section: Changelog\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><b>v 0.5.296</b>\n<ul>\n<li>Added two new macros</li>\n\
      </ul>\n</li>\n<li><b>v 0.5.262</b>\n<ul>\n<li>Added new advanced functions to\
      \ define in new section of project file</li>\n</ul>\n</li>\n<li><b>v 0.4.194</b>\n\
      <ul>\n<li>Added new `remove.start and `remove.end directives to remove larger\
      \ parts of code</li>\n<li>Namespaces are now usable in `include and `require\
      \ directives</li>\n</ul>\n</li>\n<li><b>v 0.4.194</b>\n<ul>\n<li>Added new global\
      \ namespace</li>\n</ul>\n</li>\n<li><b>v 0.3.185</b>\n<ul>\n<li>Added new __NUMERATE_CPP__\
      \ macro</li>\n<li>Added new commadline option -force</li>\n<li>Added new project\
      \ option bForce</li>\n<li>Various updates and fixes</li>\n</ul>\n</li>\n<li><b>v\
      \ 0.3.168</b>\n<ul>\n<li>Fixed bug in GetVariable function. Variable search\
      \ is aborted if name is NULL.</li>\n</ul>\n</li>\n<li><b>v 0.3.150</b>\n<ul>\n\
      <li>added option to delete log calls out of UScript source</li>\n</ul>\n</li>\n\
      <li><b>v 0.3.144</b>\n<ul>\n<li>added bIniVersion to commandline and project\
      \ file (changes the way macro __UENGINEVERSION__ works)</li>\n</ul>\n</li>\n\
      <li><b>v 0.2.123</b>\n<ul>\n<li>new directive `else if</li>\n</ul>\n</li>\n\
      <li><b>v 0.2.106</b>\n<ul>\n<li>new directive `namespace</li>\n<li>new macro\
      \ __UENGINEVERSION__</li>\n<li>new macro __SELF__</li>\n<li>macros can be used\
      \ in conditional statements</li>\n</ul>\n</li>\n<li><b>v 0.2.56</b>\n<ul>\n\
      <li>new directive `import used to create #exec directive for large number of\
      \ textures/sounds</li>\n</ul>\n</li>\n<li><b>v 0.1.35</b>\n<ul>\n<li>fixed directive\
      \ `write bug (now it doesn't ignore defined variables)</li>\n</ul>\n</li>\n\
      <li><b>v 0.1.5</b>\n<ul>\n<li>added new option bIsPackage</li>\n</ul>\n</li>\n\
      <li><b>v 0.1.4</b>\n<ul>\n<li>fixed bug with inline `write directive</li>\n\
      </ul>\n</li>\n<li><b>v 0.1.1</b>\n<ul>\n<li>initial release</li>\n</ul>\n</li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.367 seconds\nReal time\
      \ usage: 0.493 seconds\nPreprocessor visited node count: 241/1000000\nPreprocessor\
      \ generated node count: 444/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:23768-0!*!*!!en!*!* and timestamp\
      \ 20221207102126 and revision id 46327\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks:
  - "http://turniej.unreal.pl/files/UEnginePPC_Rune.zip"
  - "http://turniej.unreal.pl/files/UEnginePPC.zip"
  sections:
  - toclevel: 1
    level: "2"
    line: "About"
    number: "1"
    index: "1"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 8
    anchor: "About"
  - toclevel: 1
    level: "2"
    line: "Install"
    number: "2"
    index: "2"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 229
    anchor: "Install"
  - toclevel: 1
    level: "2"
    line: "Download"
    number: "3"
    index: "3"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 292
    anchor: "Download"
  - toclevel: 2
    level: "3"
    line: "Unreal Tournament"
    number: "3.1"
    index: "4"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 353
    anchor: "Unreal_Tournament"
  - toclevel: 2
    level: "3"
    line: "Rune"
    number: "3.2"
    index: "5"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 475
    anchor: "Rune"
  - toclevel: 2
    level: "3"
    line: "Unreal"
    number: "3.3"
    index: "6"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 592
    anchor: "Unreal"
  - toclevel: 1
    level: "2"
    line: "Usage"
    number: "4"
    index: "7"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 666
    anchor: "Usage"
  - toclevel: 2
    level: "3"
    line: "Parameters"
    number: "4.1"
    index: "8"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 873
    anchor: "Parameters"
  - toclevel: 3
    level: "4"
    line: "Options"
    number: "4.1.1"
    index: "9"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 1053
    anchor: "Options"
  - toclevel: 3
    level: "4"
    line: "Globals"
    number: "4.1.2"
    index: "10"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 1874
    anchor: "Globals"
  - toclevel: 2
    level: "3"
    line: "Directives"
    number: "4.2"
    index: "11"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 2051
    anchor: "Directives"
  - toclevel: 3
    level: "4"
    line: "`import details:"
    number: "4.2.1"
    index: "12"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 5628
    anchor: ".60import_details:"
  - toclevel: 3
    level: "4"
    line: "`namespace details:"
    number: "4.2.2"
    index: "13"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 6431
    anchor: ".60namespace_details:"
  - toclevel: 3
    level: "4"
    line: "Operators in conditional statement and write directive"
    number: "4.2.3"
    index: "14"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 7140
    anchor: "Operators_in_conditional_statement_and_write_directive"
  - toclevel: 3
    level: "4"
    line: "Unreal Engine version"
    number: "4.2.4"
    index: "15"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 7614
    anchor: "Unreal_Engine_version"
  - toclevel: 2
    level: "3"
    line: "Macros"
    number: "4.3"
    index: "16"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 7878
    anchor: "Macros"
  - toclevel: 2
    level: "3"
    line: "Functions"
    number: "4.4"
    index: "17"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 8656
    anchor: "Functions"
  - toclevel: 2
    level: "3"
    line: "Project file"
    number: "4.5"
    index: "18"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 9315
    anchor: "Project_file"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "4.6"
    index: "19"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 11686
    anchor: "Example"
  - toclevel: 1
    level: "2"
    line: "Changelog"
    number: "5"
    index: "20"
    fromtitle: "UE1:UE1PreProcessorCommandlet"
    byteoffset: 13932
    anchor: "Changelog"
  displaytitle: "UE1:UE1PreProcessorCommandlet"
  iwlinks: []
  wikitext:
    text: "__TOC__\n==About==\nThis is a preprocessor in the form of a ucc commandlet.\
      \ Right now it's only available for UT1, but I'm working on a version for Unreal\
      \ 1. For unknown reasons it gives me lots of errors on Unreal 1 224 sources.\n\
      \n==Install==\nCopy files in the archive to your <UTdir> folder.\n\n==Download==\n\
      As always source code is included in zip file.\n\n===Unreal Tournament===\n\
      '''link:''' [http://turniej.unreal.pl/files/UEnginePPC.zip UEnginePPC v. 0.5.296\
      \ for UT(~103kb)]\n\n===Rune===\n'''link:''' [http://turniej.unreal.pl/files/UEnginePPC_Rune.zip\
      \ UEnginePPC v. 0.3.168 for Rune (~633kb)]\n\n===Unreal===\nPreprocessor is\
      \ already included in patch 227 for Unreal 1.\n\n==Usage==\nIn order to use\
      \ the preprocessor you have to call ucc with the following parameters:\n<uscript>ucc\
      \ uengineppc.parse project=[<project_dir>/<project_file>]  [-option...] [-globals...]</uscript>\n\
      \    \n===Parameters===\n*<project_dir> - relative project directory.\n*<project_file>\
      \ - file (.upc extension) containing all options. If file is detected, no further\
      \ modifiers are checked\n====Options====\n{| class=\"wikitable\"\n\n|-\n| '''option'''\n\
      | '''description''' \n| '''override by project file'''\n|-\n| -clean\n| deletes\
      \ preprocessor directives from .uc file\n| yes\n|-\n| -debug\n| turns on debug\
      \ mode (prints every operation on parsed .uc file)\n| yes\n|-\n| -printglobals\n\
      | prints all global variables\n| yes\n|-\n| -normalizeeol\n| tries to find \\\
      r and \\n and change them into \\r\\n\n| yes\n|-\n| -bIsPackage\n| when defining\
      \ <project_dir> you may type only the package name. Path will be detected automatically.\n\
      | yes\n|-\n| -bIniVersion\n| macro __UENGINEVERSION__ will return uengine version\
      \ saved in INI (FirstRun param), if false, it'll return version saved in engine.\n\
      | yes\n|- \n| -deletelog\n| scans UScript source for log functions and deletes\
      \ it\n| yes\n|- \n| -force\n| forces all source .uc files to be parsed\n| yes\n\
      |}\n\n====Globals====\nAll other parameters will be considered to be global\
      \ variables. If '''=''' is not detected, global variable is equal null. Example:\n\
      \    \n    val1=1 val val2=3 \n\n===Directives===\nCurrently supported directives\
      \ are:\n{| class=\"wikitable\"\n\n|-\n| '''directive'''\n| '''description'''\
      \ \n|-\n| `process\n| should be in the first line of .uc file. Tells preprocessor\
      \ to parse file\n|-\n|`include(file)\n|embed file in the currently opened .uc\
      \ (do not parse it)\n|-\n|`include(file,false)\t\t\t\n| embed file in the currently\
      \ opened .uc (do not parse it)\n|-\n|`include(file,true)\t\t\t\n| embed file\
      \ in the currently opened .uc and parses it\n|-\n|`require(file)\t\t\t\t\n|\
      \ embed file in the currently opened .uc (do not parse it). If required file\
      \ doesn't exist, it stops parsing current file and produce error.\n|-\n|`require(file,false)\t\
      \t\t\n| embed file in the currently opened .uc (do not parse it). If required\
      \ file doesn't exist, it stops parsing current file and produce error.\n|-\n\
      |`require(file,true)\t\t\t\n| embed file in the currently opened .uc and parses\
      \ it. If required file doesn't exist, it stops parsing current file and produce\
      \ error.\n|-\n|`define(name)\t\t\t\t\n| defines variable name (used in `ifdef\
      \ and `ifndef directives)\n|-\n|`define(name,value)\t\t\t\n| defines variable\
      \ name with specified value (used in `if and ternary operation)\n|-\n|`undef(name)\t\
      \t\t\t\n| removes name from local definitions\n|-\n|`error(name1,true)\t\t\t\
      \n| produces error message and exits commandlet\n|-\n|`error(name1)\t\t\t\t\n\
      | produces error message and stops parsing current file\n|-\n|`warn(name1)\t\
      \t\t\t\n| produces warning message\n|-\n|`log(name1)\t\t\t\t\n| produces message\n\
      |-\n|`ifdef(name)\t\t\t\t\n| evaluates to true if variable name is defined\n\
      |-\n|`ifndef(name)\t\t\t\t\n| evaluates to true if variable name is not defined\n\
      |-\n|`if ([expression1] [operator] [expression2])\n| checks to see if the first\
      \ condition is true by comparing expression1 to expression2 using the operator.\n\
      |-\n|`else if ([expression1] [operator] [expression2])\n| checks to see if the\
      \ first condition is true by comparing expression1 to expression2 using the\
      \ operator, only if first condition is false..\n|-\n|`else\t\t\t\t\t\n| part\
      \ of conditional statement\n|-\n|`endif\t\t\t\t\t\n| ends conditional statement\n\
      |-\n|`write(name)\t\t\t\t\n| writes defined variable name\n|-\n|`write(name1==name2option1:option2)\t\
      \n| if statement evaluates to true (variable name1 equals variable name2) writes\
      \ option1 otherwise writes option 2\n|-\n|`write(name1<>name2?option1:option2)\n\
      | if statement evaluates to true (variable name1 does not match variable name2)\
      \ writes option1 otherwise writes option 2\n|-\n|`write(name1>name2?option1:option2)\n\
      | if statement evaluates to true (variable name1 is greater then variable name2)\
      \ writes option1 otherwise writes option 2\n|-\n|`write(name1<name2?option1:option2)\n\
      | if statement evaluates to true (variable name1 is less than variable name2)\
      \ writes option1 otherwise writes option 2\n|-\n|`write(name1?option1:option2)\n\
      | if statement evaluates to true (variable name1 is defined) writes option1\
      \ otherwise writes option 2\n|-\n|`import(directory,extension,type,group,lodset,flags,package)\n\
      | can be used to import textures/sounds from chosen directory\n|-\n|`namespace(name,value)\n\
      |defines namespace name with specified value. It's a combination of `define\
      \ and `write. If namespace is detected, it'll be replaced by value, without\
      \ need of using `write\n|-\n|`remove.start\n| everything below this directive\
      \ will be deleted\n|-\n|`remove.end\n| disables `remove.start\n|}\n\nNotice\
      \ that all variables used in directive `if and ternary operation are parsed\
      \ in the following order:\n\n#Returns value from global variables if correct\
      \ name is found, otherwise...\n#Returns value from local variables if correct\
      \ name is found, otherwise...\n#Assumes that name is value.\n\n====`import details:====\n\
      \nAs '''type''' you can use only '''TEXTURE''' and '''SOUND'''. If the extension\
      \ is '''uax''' or '''utx''' the preprocessor will create '''#exec obj load'''\
      \ instead of '''#exec type import'''. For example code below:\n\n<uscript>`import(tex,pcx,TEXTURE,HUD)</uscript>\n\
      \nwill make the preprocessor iterate through all files in folder <UT>/<Project>/tex\
      \ in search for all *.pcx files. When a file with extension pcx is found, the\
      \ preprocessor will create a UScript #exec directive to import texture into\
      \ group HUD. Group, LodStet, Flags  and Package parameters are optional. Result\
      \ will look like:\n\n<uscript>#exec TEXTURE IMPORT NAME=Tex001 FILE=\"tex/Tex001.pcx\"\
      \n#exec TEXTURE IMPORT NAME=Tex002 FILE=\"tex/Tex002.pcx\"\n#exec TEXTURE IMPORT\
      \ NAME=Tex003 FILE=\"tex/Tex003.pcx\"</uscript>\n\n====`namespace details:====\n\
      \nNamespace can be useful to replace large parts of text, without need of use\
      \ `write and `define directives. For example if you write directive:\n\n<uscript>`namespace(__SOMECLASS__,class'SomeClass'.static)</uscript>\n\
      \nand use it in code:\n\n<uscript>__SOMECLASS__.SomeFunction();</uscript>\n\n\
      parsed code will change to:\n\n<uscript>class'SomeClass'.static.SomeFunction();</uscript>\n\
      \nYou can also use macros:\n\n<uscript>`namespace(__SOMECLASS__,class'__SELF__.SomeClass'.static)</uscript>\n\
      \nassuming that your package is MyPackege this directive means:\n\n<uscript>`namespace(__SOMECLASS__,class'MyPackege.SomeClass'.static)</uscript>\n\
      \nNamespace works also in `require and `include directive.\n\n====Operators\
      \ in conditional statement and write directive====\n\n{| class=\"wikitable\"\
      \n\n|-\n| '''operator'''\n| '''description''' \n| '''type''' \n|-\n| '''=='''\n\
      | equal\n| string, float, integer, bool\n|-\n| '''<>'''\n| not equal\n| string,\
      \ float, integer, bool\n|-\n| '''>='''\n| greater or equal\n| float, integer\n\
      |-\n| '''<='''\n| less or equal\n| float, integer\n|-\n| '''<'''\n| less\n|\
      \ float, integer\n|-\n| '''>'''\n| greater\n| float, integer\n|-\n| '''!'''\n\
      | negation, works as `ifndef\n| \n|}\n\n====Unreal Engine version====\n\nSince\
      \ 0.2.106 UE1PreProcessorCommandlet can check the Unreal Engine version. This\
      \ will be useful once the preprocessor is stable and compiled to U1.\n\n<uscript>`if(__UENGINEVERSION__==436)\n\
      //some UT436 specific code\n`endif</uscript>\n\n===Macros===\nMacros are in\
      \ fact hardcoded constants. Each macro will write something in the currently\
      \ parsed .uc file. Currently supported macros are:\n\n*__FILE__ - will write\
      \ name of currently parsed file, usable in conditional statements\n*__CLASS__\
      \ - will write name of currently parsed class, usable in conditional statements\n\
      *__DATE__ - will write time\n*__SELF__ - will write current package, usable\
      \ in conditional statements\n*__UENGINEVERSION__ - will write Unreal Engine\
      \ version, usable in conditional statements\n*__NUMERATE_CPP__ - replaces itself\
      \ with a number and increments a counter (used in native functions). It's value\
      \ depends on '''native_offset'''\n*__LINE__ - will write current line (parsed\
      \ output)\n*__RELATIVE_LINE__ - will write current line (unparsed input)\n\n\
      ===Functions===\n\nYou can also define functions in new section of project file,\
      \ eg.:\n\n<uscript>\n[functions]\n`log($value)=log($value,'ResidualDecay')\n\
      </uscript>\n\nNow when you call in code:\n\n`log(\"Log message\");\n\nthe parser\
      \ will change it to:\n\nlog(\"Log message\",'ResidualDecay');\n\n'''Tips:'''\n\
      \n* Avoid using functions with similar names - eg.: `log and `logx will screw\
      \ up result code.\n* Avoid using parameters with similar names in one function\
      \ - eg.: `log($value1, $value2); will not work too good :).\n* Functions can\
      \ only be defined in project file.\n\nEventually all bugs listed above will\
      \ be eliminated (current implementation was written in ~5-10 minutes).\n\n===Project\
      \ file===\nProject file must have upc extension, and 'path' must be relative\
      \ to ucc.exe location. Default location for files with preprocessor Unreal Script\
      \ files is:\n\n<uscript><project_folder>/classes/preprocessor</uscript>\n\n\
      parsed .uc files will be stored in:\n\n<uscript><project_folder>/classes</uscript>\n\
      \nHere's all commands for project file.\n\n<uscript>[project]              \
      \   - project information\npath=path                 - path to project\ndebug=true\
      \                - turns on debug mode (prints every operation on parsed .uc)\n\
      make=true                 - if true, ucc commandlet will run make after parsing\
      \ all files\nmake_ini=make.ini         - ini used in ucc make commandlet\nclean=true\
      \                - if true, will delete preprocessor directives\noutput=folder\
      \             - override default output folder where parsed .uc files are written\n\
      input=folder              - override default input folder where parsed .uc files\
      \ are stored\nbIsPackage=true           - when defining path you may type only\
      \ name of package. Path will be detected automatically.\nbIniVersion=true  \
      \        - if true, macro __UENGINEVERSION__ will return uengine version saved\
      \ in INI (FirstRun param), if false, it'll return version saved in engine.\n\
      bDeleteLog=true           - scans UScript source for log functions and deletes\
      \ it\nnative_offset             - offset for __NUMERATE_CPP__ macro (starting\
      \ number)\nbForce=true               - if true forces all source .uc files to\
      \ be parsed\nprintnamespace=true       - will print global namespace if true\n\
      bClearOutput=true         - will delete all output files before parsing input\n\
      printmacros=true          - will print all global macros if true\nnative_offset=1600\
      \        - offset when using __NUMERATE_CPP__ macro\n\n[globals]           \
      \      - group containing global variables for whole project\nsomeglobal=somevalue\
      \      - global variable (sample)\n\n[namespace]\nsome_namespace=some_value\
      \ - declares namespace 'some_namespace' with value equal 'some_value' (for usage\
      \ see `namespace details)\n\n[functions]\n`some_function($some_value)=log($some_value,'ResidualDecay')\
      \ - declares function `some_function\n</uscript>\n\nexample:\n\n<uscript>[project]\n\
      path=../MyProject/\ndebug=true\nmake=true\nmake_ini=make.ini\nclean=true\noutput=classes\n\
      input=classes/preprocessor\nbIsPackage=false\n\n[globals]\nglobal_value1=test1\n\
      global_value2=test2</uscript>\n\n===Example===\n\nLet's say you have project\
      \ file in <UDir>/system called REmitter.upc with content:\n\n<uscript>[project]\n\
      path=../REmitter/\ndebug=true\nmake=false\nmake_ini=make.ini\nclean=true\noutput=classes\n\
      input=classes/preprocessor\nprintglobals=true\n\n[globals]\n__NUM_NATIVES__=1</uscript>\n\
      \nand classes:\n\nREmitterBase.uc\n<uscript>`process\n`include(classes/includes/default_header.uc,true)\n\
      // Base class for emitter related actors.\n// Quaternion implementation originally\
      \ written by UsAaR33.\nclass REmitterBase extends Actor native;\n\nstruct Quat\n\
      {\n\tvar() config float W, X, Y, Z;\n};\n//converts rotator to quaternion\n\
      native`write(__NUM_NATIVES__==1?(2330):) static final function Quat RotationToQuat(\
      \ rotator R, bool bHighPrecision);</uscript>\n\ndefault_header.uc\n<uscript>//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Copyright 2005-2008 Dead Cow Studios. All Rights Reserved.\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Coder: Raven\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Last revision: __DATE__\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</uscript>\n\
      \nYou run preprocessor and:\n\n#directive `process  is found, so preprocessor\
      \ knows that this class has to be parsed.\n#directive `include is found. Preprocessor\
      \ embeds file default_header.uc and parses it\n#macro __DATE__ is found and\
      \ current date is inserted at its place\n#directive `write is found. Because\
      \ expression evaluates to true, first value - (2330) - is inserted at it's place\n\
      \noutput .uc file will look like this:\n\n<uscript>//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Copyright 2005-2008 Dead Cow Studios. All Rights Reserved.\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Coder: Raven\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Last revision: 21-9-2008 20:1\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
      // Base class for emitter related actors.\n// Quaternion implementation originally\
      \ written by UsAaR33.\nclass REmitterBase extends Actor native;\n\nstruct Quat\n\
      {\n\tvar() config float W, X, Y, Z;\n};\n//converts rotator to quaternion\n\
      native(2330) static final function Quat RotationToQuat( rotator R, bool bHighPrecision);</uscript>\n\
      \n==Changelog==\n*'''v 0.5.296'''\n** Added two new macros\n*'''v 0.5.262'''\n\
      ** Added new advanced functions to define in new section of project file\n*'''v\
      \ 0.4.194'''\n** Added new `remove.start and `remove.end directives to remove\
      \ larger parts of code\n** Namespaces are now usable in `include and `require\
      \ directives\n*'''v 0.4.194'''\n** Added new global namespace\n*'''v 0.3.185'''\n\
      ** Added new __NUMERATE_CPP__ macro\n** Added new commadline option -force\n\
      ** Added new project option bForce\n** Various updates and fixes\n*'''v 0.3.168'''\n\
      ** Fixed bug in GetVariable function. Variable search is aborted if name is\
      \ NULL.\n*'''v 0.3.150'''\n** added option to delete log calls out of UScript\
      \ source\n*'''v 0.3.144'''\n** added bIniVersion to commandline and project\
      \ file (changes the way macro __UENGINEVERSION__ works)\n*'''v 0.2.123'''\n\
      **new directive `else if\n*'''v 0.2.106'''\n**new directive `namespace\n**new\
      \ macro __UENGINEVERSION__\n**new macro __SELF__\n**macros can be used in conditional\
      \ statements\n*'''v 0.2.56'''\n**new directive `import used to create #exec\
      \ directive for large number of textures/sounds\n*'''v 0.1.35'''\n**fixed directive\
      \ `write bug (now it doesn't ignore defined variables)\n*'''v 0.1.5'''\n**added\
      \ new option bIsPackage\n*'''v 0.1.4'''\n**fixed bug with inline `write directive\n\
      *'''v 0.1.1'''\n**initial release"
  properties: []
  revId: 46327
name: "UE1:UE1PreProcessorCommandlet"
revision:
  revid: 46327
  parentid: 40349
  user: "Torin"
  timestamp: 1461337355.000000000
  comment: "spelling and grammar fixes"
timestamp: 1670408487.729776000
