---
parse:
  title: "Template talk:Navbox unrealscript"
  text:
    text: "<p>Are you sure about that <a href=\"/User:Wormbo\" title=\"User:Wormbo\"\
      >Wormbo</a>? Self.Function() if the function is declared private/protected is\
      \ much the same as Global/Super.Function(). Self.Variable is the variable is\
      \ declared private/protected is much the same as Default.Variable. Though Self\
      \ is not limited to these cases, it can be used also as in Self.Class, Self.Name,\
      \ Self.Class.Name. Anyways just curious as to why it only gets the narrow Object\
      \ Literal specification when obviously it does more then some specifiers. --<a\
      \ href=\"/User:00zX\" title=\"User:00zX\">00zX</a> 16:49, 16 May 2010 (UTC)</p>\n\
      <dl>\n<dd>Yes, I am very sure about that. \"Self\" acts very much like a \"\
      magically-typed\" variable pointing to the object executing the current code.\
      \ Most notably can you use \"Self\" as standalone keyword, unlike default, super\
      \ or global. Calling it an object literal is as close to reality as you can\
      \ get, because you can also do stuff like <code>Material'WhiteTexture'.Class</code>,\
      \ which most likely returns the value <code>class'Texture'</code> in UE1/2 games.\
      \ Doing stuff like Self.Name is identical to just Name, unless you declare local\
      \ variables that hide the class variables. And if you look at UnrealScript bytecode,\
      \ you will find that, unlike Super, Global and Default, access via \"Self\"\
      \ has the same format as access via an object reference returned by a variable\
      \ or function call, with Self being represented by a single-byte token like\
      \ True, False, 0, 1 and None. —<a href=\"/User:Wormbo\" title=\"User:Wormbo\"\
      >Wormbo</a> 18:22, 16 May 2010 (UTC)</dd>\n</dl>\n<dl>\n<dd>\n<dl>\n<dd>Fair\
      \ enough, I was just curious as to your reasonings. I havent seen the bytecode\
      \ because I rarely pay attention on that level, I could however. What you are\
      \ saying does makes sense now Ive heard it and Im pretty sure this relationship\
      \ between Self and True/False, 1/0 and None has been mentioned in other discussions\
      \ we've had. No doubt you could try to use name or class but they are ambiguous\
      \ so I always use self. object reference prefix as it explains what that variable\
      \ does more precisely. As one example (going alittle off the topic) class =\
      \ class'class', is actually incorrect self on the other hand gives a frame of\
      \ reference (like super/global/default) which is why I thought what I did. To\
      \ extent this function that sets class = class'class' and call super on it which\
      \ class are we then talking about? SuperClass.Function() or Class.Function()\
      \ using self would cause SuperClass.Function() to always call, SuperClass.Class\
      \ = class'class' wouldnt it&#160;! Class.Class = class'class' --<a href=\"/User:00zX\"\
      \ title=\"User:00zX\">00zX</a> 04:00, 17 May 2010 (UTC)</dd>\n</dl>\n</dd>\n\
      </dl>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.017 seconds\nReal time\
      \ usage: 0.032 seconds\nPreprocessor visited node count: 1/1000000\nPreprocessor\
      \ generated node count: 4/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 1/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:5067-0!*!0!*!*!*!* and timestamp\
      \ 20221117232818 and revision id 43263\n -->\n"
  categories: []
  links:
  - ns: 2
    exists: true
    name: "User:Wormbo"
  - ns: 2
    exists: true
    name: "User:00zX"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Template talk:Navbox unrealscript"
  iwlinks: []
  wikitext:
    text: "Are you sure about that [[User:Wormbo|Wormbo]]? Self.Function() if the\
      \ function is declared private/protected is much the same as Global/Super.Function().\
      \ Self.Variable is the variable is declared private/protected is much the same\
      \ as Default.Variable. Though Self is not limited to these cases, it can be\
      \ used also as in Self.Class, Self.Name, Self.Class.Name. Anyways just curious\
      \ as to why it only gets the narrow Object Literal specification when obviously\
      \ it does more then some specifiers. --[[User:00zX|00zX]] 16:49, 16 May 2010\
      \ (UTC)\n\n:Yes, I am very sure about that. \"Self\" acts very much like a \"\
      magically-typed\" variable pointing to the object executing the current code.\
      \ Most notably can you use \"Self\" as standalone keyword, unlike default, super\
      \ or global. Calling it an object literal is as close to reality as you can\
      \ get, because you can also do stuff like <code>Material'WhiteTexture'.Class</code>,\
      \ which most likely returns the value <code>class'Texture'</code> in UE1/2 games.\
      \ Doing stuff like Self.Name is identical to just Name, unless you declare local\
      \ variables that hide the class variables. And if you look at UnrealScript bytecode,\
      \ you will find that, unlike Super, Global and Default, access via \"Self\"\
      \ has the same format as access via an object reference returned by a variable\
      \ or function call, with Self being represented by a single-byte token like\
      \ True, False, 0, 1 and None. —[[User:Wormbo|Wormbo]] 18:22, 16 May 2010 (UTC)\n\
      \n::Fair enough, I was just curious as to your reasonings. I havent seen the\
      \ bytecode because I rarely pay attention on that level, I could however. What\
      \ you are saying does makes sense now Ive heard it and Im pretty sure this relationship\
      \ between Self and True/False, 1/0 and None has been mentioned in other discussions\
      \ we've had. No doubt you could try to use name or class but they are ambiguous\
      \ so I always use self. object reference prefix as it explains what that variable\
      \ does more precisely. As one example (going alittle off the topic) class =\
      \ class'class', is actually incorrect self on the other hand gives a frame of\
      \ reference (like super/global/default) which is why I thought what I did. To\
      \ extent this function that sets class = class'class' and call super on it which\
      \ class are we then talking about? SuperClass.Function() or Class.Function()\
      \ using self would cause SuperClass.Function() to always call, SuperClass.Class\
      \ = class'class' wouldnt it ! Class.Class = class'class' --[[User:00zX|00zX]]\
      \ 04:00, 17 May 2010 (UTC)"
  properties: []
  revId: 43263
name: "Template talk:Navbox unrealscript"
revision:
  revid: 43263
  parentid: 43262
  user: "00zX"
  timestamp: 1274068809.000000000
  comment: ""
timestamp: 1668754744.786585000
