---
parse:
  title: "Legacy:ConTEXT/UnrealScript"
  text:
    text: "<p>Copy paste the contents to a file, name it UScript.chl (or something)\
      \ and put it in the <i>Highlighters</i> directory of ConTEXT.</p>\n<p>See <a\
      \ href=\"/Legacy:UnrealScript_Keywords\" title=\"Legacy:UnrealScript Keywords\"\
      >UnrealScript Keywords</a> for a full list of UnrealScript keywords.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Language name\
      \ (user language name)</span>\nLanguage:            UnrealScript\n \n<span class=\"\
      co1\">// default file filter</span>\n<span class=\"co1\">// note: if more than\
      \ one extension is associated, eg:</span>\n<span class=\"co1\">// C/C++ files\
      \ (*.c,*.cpp,*.h,*.hpp)|*.c;*.cpp;*.h;*.hpp</span>\nFilter:                \
      \ UnrealScript <span class=\"br0\">(</span><span class=\"sy0\">*</span>.<span\
      \ class=\"me0\">uc</span><span class=\"br0\">)</span><span class=\"sy0\">|*</span>.<span\
      \ class=\"me0\">uc</span>\n \n<span class=\"co1\">// help file which will be\
      \ invokend when F1 is pressed</span>\nHelpFile:\n \n<span class=\"co1\">// language\
      \ case sensitivity</span>\n<span class=\"co1\">//                   0  - no</span>\n\
      <span class=\"co1\">//                   1  - yes</span>\nCaseSensitive:   \
      \    <span class=\"nu0\">0</span>\n \n<span class=\"co1\">// comment type:</span>\n\
      <span class=\"co1\">// LineComment - comment to the end of line</span>\n<span\
      \ class=\"co1\">// BlockCommentBeg - block comment begin, it could be multiline</span>\n\
      <span class=\"co1\">// BlockCommentEnd - block comment end</span>\nLineComment:\
      \         <span class=\"co1\">//</span>\nBlockCommentBeg:     <span class=\"\
      coMULTI\">/*\nBlockCommentEnd:     */</span>\n \n<span class=\"co1\">// identifier\
      \ characters</span>\n<span class=\"co1\">// note: characters shouldn't be delimited,\
      \ except arrays</span>\n<span class=\"co1\">// array of chars could be defined\
      \ as from_char..to_char</span>\n<span class=\"co1\">// IdentifierBegChar - Identifier\
      \ begin characters</span>\nIdentifierBegChars:  a..<span class=\"me0\">z</span>\
      \ A..<span class=\"me0\">Z</span> _\nIdentifierChars:     a..<span class=\"\
      me0\">z</span> A..<span class=\"me0\">Z</span> _ <span class=\"nu0\">0</span>..<span\
      \ class=\"nu0\">9</span>\n \n<span class=\"co1\">// numeric constants begin\
      \ characters</span>\n<span class=\"co1\">// note: characters shouldn't be delimited,\
      \ except arrays</span>\n<span class=\"co1\">// array of chars could be defined\
      \ as from_char..to_char</span>\n<span class=\"co1\">// number always starts\
      \ with 0..9 except when NumConstBeg</span>\n<span class=\"co1\">// defines other</span>\n\
      NumConstBegChars:    <span class=\"nu0\">0</span>..<span class=\"nu0\">9</span>\n\
      \ \n<span class=\"co1\">// numeric constants characters</span>\n<span class=\"\
      co1\">// note: characters shouldn't be delimited, except arrays</span>\n<span\
      \ class=\"co1\">// array of chars could be defined as from_char..to_char</span>\n\
      <span class=\"co1\">// number always starts with 0..9 except when NumConstBeg</span>\n\
      <span class=\"co1\">// defines other</span>\nNumConstChars:       <span class=\"\
      nu0\">0</span>..<span class=\"nu0\">9</span> .<span class=\"me0\">abcdefhABCDEFH</span>\n\
      \ \n<span class=\"co1\">// escape character</span>\nEscapeChar:          \\\n\
      \ \n<span class=\"co1\">// keyword table</span>\n<span class=\"co1\">// note:\
      \ delimited with spaces, lines could be wrapped</span>\n<span class=\"co1\"\
      >// you may divide keywords into tree groups which can be</span>\n<span class=\"\
      co1\">// highlighted differently</span>\nKeyWords1:\n \n<span class=\"kw1\"\
      >abstract</span>\narray\narraycount\n<span class=\"kw2\">assert</span>\n<span\
      \ class=\"kw1\">auto</span>\n<span class=\"kw5\">bool</span>\n<span class=\"\
      kw2\">break</span>\n<span class=\"kw5\">byte</span>\n<span class=\"kw2\">case</span>\n\
      <span class=\"kw1\">class</span>\n<span class=\"kw1\">coerce</span>\ncollapsecategories\n\
      <span class=\"kw1\">config</span>\n<span class=\"kw1\">const</span>\n<span class=\"\
      kw2\">continue</span>\n<span class=\"kw1\">default</span>\n<span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"kw1\">delegate</span>\ndependson\n\
      deprecated\n<span class=\"kw2\">do</span>\ndontcollapsecategories\nedfindable\n\
      editconst\neditinline\neditinlinenew\neditinlinenotify\neditinlineuse\n<span\
      \ class=\"kw2\">else</span>\n<span class=\"kw1\">enum</span>\nenumcount\n<span\
      \ class=\"kw1\">event</span>\n<span class=\"kw1\">exec</span>\n<span class=\"\
      kw1\">expands</span>\nexport\n<span class=\"kw1\">exportstructs</span>\n<span\
      \ class=\"kw1\">extends</span>\n<span class=\"kw6\">false</span>\n<span class=\"\
      kw1\">final</span>\n<span class=\"kw5\">float</span>\n<span class=\"kw2\">for</span>\n\
      <span class=\"kw2\">foreach</span>\n<span class=\"kw1\">function</span>\nglobal\n\
      <span class=\"kw1\">globalconfig</span>\ngoto\n<span class=\"kw1\">guid</span>\n\
      hidecategories\n<span class=\"kw2\">if</span>\n<span class=\"kw1\">ignores</span>\n\
      <span class=\"kw1\">import</span>\ninput\ninsert\n<span class=\"kw5\">int</span>\n\
      intrinsic\n<span class=\"kw5\">iterator</span>\n<span class=\"kw1\">latent</span>\n\
      length\n<span class=\"kw1\">local</span>\n<span class=\"kw1\">localized</span>\n\
      <span class=\"kw5\">name</span>\n<span class=\"kw1\">native</span>\n<span class=\"\
      kw1\">nativereplication</span>\n<span class=\"kw1\">new</span>\n<span class=\"\
      kw1\">noexport</span>\n<span class=\"kw5\">none</span>\nnoteditinlinenew\nnotplaceable\n\
      nousercreate\n<span class=\"kw1\">operator</span>\n<span class=\"kw1\">optional</span>\n\
      <span class=\"kw1\">out</span>\nperobjectconfig\n<span class=\"kw1\">placeable</span>\n\
      pointer\npostoperator\n<span class=\"kw1\">preoperator</span>\n<span class=\"\
      kw1\">private</span>\n<span class=\"kw1\">protected</span>\n<span class=\"kw1\"\
      >reliable</span>\nremove\n<span class=\"kw1\">replication</span>\n<span class=\"\
      kw2\">return</span>\nsafereplace\n<span class=\"kw6\">self</span>\nshowcategories\n\
      <span class=\"kw1\">simulated</span>\n<span class=\"kw1\">singular</span>\n\
      skip\n<span class=\"kw1\">state</span>\n<span class=\"kw1\">static</span>\n\
      stop\n<span class=\"kw5\">string</span>\n<span class=\"kw1\">struct</span>\n\
      <span class=\"kw6\">super</span>\n<span class=\"kw2\">switch</span>\n<span class=\"\
      kw1\">transient</span>\ntravel\n<span class=\"kw6\">true</span>\n<span class=\"\
      kw1\">unreliable</span>\nuntil\n<span class=\"kw1\">var</span>\n<span class=\"\
      kw2\">while</span>\nwithin\n \n \n<span class=\"co1\">//KeyWords2:</span>\n\
      <span class=\"co1\">//KeyWords3:</span>\n \n<span class=\"co1\">// string delimiter:</span>\n\
      <span class=\"co1\">// StringBegChar - string begin char</span>\n<span class=\"\
      co1\">// StringEndChar - string end char</span>\n<span class=\"co1\">// MultilineStrings\
      \ - enables multiline strings,</span>\n<span class=\"co1\">// as perl has it</span>\n\
      StringBegChar:       <span class=\"st0\">\"\nStringEndChar:       \"</span>\n\
      MultilineStrings:    <span class=\"nu0\">0</span>\n \n<span class=\"co1\">//\
      \ use preprocessor:</span>\n<span class=\"co1\">// 0 - no</span>\n<span class=\"\
      co1\">// 1 - yes</span>\n<span class=\"co1\">// note: if yes, '#' and statements\
      \ after it will be</span>\n<span class=\"co1\">// highlighted with Preprocessor\
      \ defined colors</span>\nUsePreprocessor:     <span class=\"nu0\">1</span>\n\
      \ \n<span class=\"co1\">// highlight line:</span>\n<span class=\"co1\">// 0\
      \ - no</span>\n<span class=\"co1\">// 1 - yes</span>\n<span class=\"co1\">//\
      \ note: if yes, current line will be highlighted</span>\nCurrLineHighlighted:\
      \    <span class=\"nu0\">0</span>\n \n<span class=\"co1\">// colors</span>\n\
      <span class=\"co1\">// note:             first value is foreground, second is</span>\n\
      <span class=\"co1\">//                   background color</span>\n<span class=\"\
      co1\">//                     and third (optional) is font attribute:</span>\n\
      <span class=\"co1\">//                     B - bold</span>\n<span class=\"co1\"\
      >//                     I - italic</span>\n<span class=\"co1\">//          \
      \           U - underline</span>\n<span class=\"co1\">//                   \
      \  S - strike out</span>\n<span class=\"co1\">//                     attributes\
      \ can be combined: eg. B or BI</span>\n<span class=\"co1\">//              \
      \     as value, it could be used any standard</span>\n<span class=\"co1\">//\
      \                   windows color:</span>\n<span class=\"co1\">//          \
      \           clBlack, clMaroon, clGreen, clOlive,</span>\n<span class=\"co1\"\
      >//                     clNavy, clPurple, clTeal, clGray,</span>\n<span class=\"\
      co1\">//                     clSilver, clRed, clLime, clYellow,</span>\n<span\
      \ class=\"co1\">//                     clBlue, clFuchsia, clAqua, clLtGray,</span>\n\
      <span class=\"co1\">//                     clDkGray, clWhite, clScrollBar,</span>\n\
      <span class=\"co1\">//                     clBackground, clActiveCaption,</span>\n\
      <span class=\"co1\">//                     clInactiveCaption, clMenu, clWindow,</span>\n\
      <span class=\"co1\">//                     clWindowFrame, clMenuText, clWindowText,</span>\n\
      <span class=\"co1\">//                     clCaptionText, clActiveBorder,</span>\n\
      <span class=\"co1\">//                     clInactiveBorder, clAppWorkSpace,</span>\n\
      <span class=\"co1\">//                     clHighlight, clHighlightText, clBtnFace,</span>\n\
      <span class=\"co1\">//                     clBtnShadow, clGrayText, lBtnText,</span>\n\
      <span class=\"co1\">//                     clInactiveCaptionText, clBtnHighlight,</span>\n\
      <span class=\"co1\">//                     cl3DDkShadow, cl3DLight, clInfoText,</span>\n\
      <span class=\"co1\">//                     clInfoBk</span>\n<span class=\"co1\"\
      >//                   as value, it could be used hex numeric</span>\n<span class=\"\
      co1\">//                   constant too:</span>\n<span class=\"co1\">//    \
      \                 $BBGGRR - BB: blue, GG: green, RR: red,</span>\n<span class=\"\
      co1\">//                               eg: $FF6A00</span>\nSpaceCol:       \
      \        clWindowText clWindow\nKeyword1Col:            clBlue clWindow B\n\
      Keyword2Col:            clPurple clWindow\nKeyword3Col:            <span class=\"\
      sy0\">$</span>004080FF clWindow\nIdentifierCol:          clWindowText clWindow\n\
      CommentCol:             clGreen clWindow\nNumberCol:              clFuchsia\
      \ clWindow\nStringCol:              clFuchsia clWindow\nSymbolCol:         \
      \     clBlack clWindow\nPreprocessorCol:        <span class=\"sy0\">$</span>0000C000\
      \ clWindow I\nSelectionCol:           clWhite clNavy\n \n<span class=\"co1\"\
      >// If CurrLineHighlighted: 1</span>\nCurrentLineCol:         clBlack clYellow\n\
      \ \nOverrideTxtFgColor:     <span class=\"nu0\">0</span>\nBlockAutoindent: \
      \       <span class=\"nu0\">1</span>\nBlockBegStr:            <span class=\"\
      br0\">{</span>\nBlockEndStr:            <span class=\"br0\">}</span>\nMatchedBracesCol:\
      \       clWindowText clWindow</pre></div>\n</div>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.073 seconds\nReal time usage: 0.074 seconds\nPreprocessor\
      \ visited node count: 4/1000000\nPreprocessor generated node count: 24/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:791-0!*!0!*!*!*!*\
      \ and timestamp 20221118190125 and revision id 2240\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Keywords"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:ConTEXT/UnrealScript"
  iwlinks: []
  wikitext:
    text: "Copy paste the contents to a file, name it UScript.chl (or something) and\
      \ put it in the ''Highlighters'' directory of ConTEXT.\n\nSee [[Legacy:UnrealScript\
      \ Keywords|UnrealScript Keywords]] for a full list of UnrealScript keywords.\n\
      \n<uscript>\n// Language name (user language name)\nLanguage:            UnrealScript\n\
      \n// default file filter\n// note: if more than one extension is associated,\
      \ eg:\n// C/C++ files (*.c,*.cpp,*.h,*.hpp)|*.c;*.cpp;*.h;*.hpp\nFilter:   \
      \              UnrealScript (*.uc)|*.uc\n\n// help file which will be invokend\
      \ when F1 is pressed\nHelpFile:\n\n// language case sensitivity\n//        \
      \           0  - no\n//                   1  - yes\nCaseSensitive:       0\n\
      \n// comment type:\n// LineComment - comment to the end of line\n// BlockCommentBeg\
      \ - block comment begin, it could be multiline\n// BlockCommentEnd - block comment\
      \ end\nLineComment:         //\nBlockCommentBeg:     /*\nBlockCommentEnd:  \
      \   */\n\n// identifier characters\n// note: characters shouldn't be delimited,\
      \ except arrays\n// array of chars could be defined as from_char..to_char\n\
      // IdentifierBegChar - Identifier begin characters\nIdentifierBegChars:  a..z\
      \ A..Z _\nIdentifierChars:     a..z A..Z _ 0..9\n\n// numeric constants begin\
      \ characters\n// note: characters shouldn't be delimited, except arrays\n//\
      \ array of chars could be defined as from_char..to_char\n// number always starts\
      \ with 0..9 except when NumConstBeg\n// defines other\nNumConstBegChars:   \
      \ 0..9\n\n// numeric constants characters\n// note: characters shouldn't be\
      \ delimited, except arrays\n// array of chars could be defined as from_char..to_char\n\
      // number always starts with 0..9 except when NumConstBeg\n// defines other\n\
      NumConstChars:       0..9 .abcdefhABCDEFH\n\n// escape character\nEscapeChar:\
      \          \\\n\n// keyword table\n// note: delimited with spaces, lines could\
      \ be wrapped\n// you may divide keywords into tree groups which can be\n// highlighted\
      \ differently\nKeyWords1:\n\nabstract\narray\narraycount\nassert\nauto\nbool\n\
      break\nbyte\ncase\nclass\ncoerce\ncollapsecategories\nconfig\nconst\ncontinue\n\
      default\ndefaultproperties\ndelegate\ndependson\ndeprecated\ndo\ndontcollapsecategories\n\
      edfindable\neditconst\neditinline\neditinlinenew\neditinlinenotify\neditinlineuse\n\
      else\nenum\nenumcount\nevent\nexec\nexpands\nexport\nexportstructs\nextends\n\
      false\nfinal\nfloat\nfor\nforeach\nfunction\nglobal\nglobalconfig\ngoto\nguid\n\
      hidecategories\nif\nignores\nimport\ninput\ninsert\nint\nintrinsic\niterator\n\
      latent\nlength\nlocal\nlocalized\nname\nnative\nnativereplication\nnew\nnoexport\n\
      none\nnoteditinlinenew\nnotplaceable\nnousercreate\noperator\noptional\nout\n\
      perobjectconfig\nplaceable\npointer\npostoperator\npreoperator\nprivate\nprotected\n\
      reliable\nremove\nreplication\nreturn\nsafereplace\nself\nshowcategories\nsimulated\n\
      singular\nskip\nstate\nstatic\nstop\nstring\nstruct\nsuper\nswitch\ntransient\n\
      travel\ntrue\nunreliable\nuntil\nvar\nwhile\nwithin\n\n\n//KeyWords2:\n//KeyWords3:\n\
      \n// string delimiter:\n// StringBegChar - string begin char\n// StringEndChar\
      \ - string end char\n// MultilineStrings - enables multiline strings,\n// as\
      \ perl has it\nStringBegChar:       \"\nStringEndChar:       \"\nMultilineStrings:\
      \    0\n\n// use preprocessor:\n// 0 - no\n// 1 - yes\n// note: if yes, '#'\
      \ and statements after it will be\n// highlighted with Preprocessor defined\
      \ colors\nUsePreprocessor:     1\n\n// highlight line:\n// 0 - no\n// 1 - yes\n\
      // note: if yes, current line will be highlighted\nCurrLineHighlighted:    0\n\
      \n// colors\n// note:             first value is foreground, second is\n// \
      \                  background color\n//                     and third (optional)\
      \ is font attribute:\n//                     B - bold\n//                  \
      \   I - italic\n//                     U - underline\n//                   \
      \  S - strike out\n//                     attributes can be combined: eg. B\
      \ or BI\n//                   as value, it could be used any standard\n//  \
      \                 windows color:\n//                     clBlack, clMaroon,\
      \ clGreen, clOlive,\n//                     clNavy, clPurple, clTeal, clGray,\n\
      //                     clSilver, clRed, clLime, clYellow,\n//              \
      \       clBlue, clFuchsia, clAqua, clLtGray,\n//                     clDkGray,\
      \ clWhite, clScrollBar,\n//                     clBackground, clActiveCaption,\n\
      //                     clInactiveCaption, clMenu, clWindow,\n//            \
      \         clWindowFrame, clMenuText, clWindowText,\n//                     clCaptionText,\
      \ clActiveBorder,\n//                     clInactiveBorder, clAppWorkSpace,\n\
      //                     clHighlight, clHighlightText, clBtnFace,\n//        \
      \             clBtnShadow, clGrayText, lBtnText,\n//                     clInactiveCaptionText,\
      \ clBtnHighlight,\n//                     cl3DDkShadow, cl3DLight, clInfoText,\n\
      //                     clInfoBk\n//                   as value, it could be\
      \ used hex numeric\n//                   constant too:\n//                 \
      \    $BBGGRR - BB: blue, GG: green, RR: red,\n//                           \
      \    eg: $FF6A00\nSpaceCol:               clWindowText clWindow\nKeyword1Col:\
      \            clBlue clWindow B\nKeyword2Col:            clPurple clWindow\n\
      Keyword3Col:            $004080FF clWindow\nIdentifierCol:          clWindowText\
      \ clWindow\nCommentCol:             clGreen clWindow\nNumberCol:           \
      \   clFuchsia clWindow\nStringCol:              clFuchsia clWindow\nSymbolCol:\
      \              clBlack clWindow\nPreprocessorCol:        $0000C000 clWindow\
      \ I\nSelectionCol:           clWhite clNavy\n\n// If CurrLineHighlighted: 1\n\
      CurrentLineCol:         clBlack clYellow\n\nOverrideTxtFgColor:     0\nBlockAutoindent:\
      \        1\nBlockBegStr:            {\nBlockEndStr:            }\nMatchedBracesCol:\
      \       clWindowText clWindow\n</uscript>"
  properties: []
  revId: 2240
name: "Legacy:ConTEXT/UnrealScript"
revision:
  revid: 2240
  parentid: 2242
  user: "Cpe.atm2-0-1041193.0x50a63582.bynxx14.customer.tele.dk"
  timestamp: 1182172975.000000000
  comment: "* Added delegate keyword"
timestamp: 1668797864.206084000
