---
parse:
  title: "Legacy:Extending States"
  text:
    text: "<p><a href=\"/Legacy:State\" title=\"Legacy:State\">States</a> can be extended\
      \ in the same way as classes. A state that extends another inherits functions\
      \ of its parent state, and can of course override them or add new ones.</p>\n\
      <p>Extending states is probably most useful within a single class. With a child\
      \ class, there is already inheritance: the Child's state Foo inherits the Parent's\
      \ state Foo anyway. Extending states is useful if you have a state Foo and you\
      \ also want a state FooSpecialCase, perhaps.</p>\n<p></p>\n<div id=\"toc\" class=\"\
      toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"\
      toclevel-1 tocsection-1\"><a href=\"#Example\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">Example</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Add_to_an_Inherited_State\"><span class=\"tocnumber\">1.1</span>\
      \ <span class=\"toctext\">Add to an Inherited State</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-3\"><a href=\"#Add_a_New_State\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Add a New State</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-4\"><a href=\"#Extend_a_State\"><span class=\"tocnumber\"\
      >1.3</span> <span class=\"toctext\">Extend a State</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Examples\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Examples</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-6\"><a href=\"#Base_state_function_overriding_and_extended_states\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Base state function\
      \ overriding and extended states</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-7\"\
      ><a href=\"#Workarounds:\"><span class=\"tocnumber\">3.1</span> <span class=\"\
      toctext\">Workarounds:</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-8\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-9\"><a href=\"#Discussion\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Example\">Example</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Extending_States?section=1\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>(needs to be rewritten, as is overly complex...)</p>\n\
      <p>Suppose we have a class Monster and a subclass BugEyedMonster.</p>\n<p>Monster\
      \ has the following states:</p>\n<ul>\n<li>Idle</li>\n<li>Attacking</li>\n</ul>\n\
      <p>BugEyedMonster inherits these states. We can do the following:</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Add_to_an_Inherited_State\">Add to an Inherited\
      \ State</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Extending_States?section=2\" title=\"Edit section:\
      \ Add to an Inherited State\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>e.g. Add a function RollEyes to the Attacking state.\
      \ (though I'm not sure what happens to label code outside of functions. help!)</p>\n\
      <dl>\n<dd>AFAIK label code outside of functions are simply executed when control\
      \ is passed there via the Goto() command. Epic pretty much always have a set\
      \ of function calls after the label which invariably change the state of the\
      \ object to make it do more stuff. When defining a state they place all of the\
      \ functions within the state first and then have a series of labels after the\
      \ functions that do appropriate \"stuff\". In subclasses it <i>looks</i> like\
      \ you can redefine labels to \"override them\" but you can never call up to\
      \ the label defined in the superclass once it has been overidden in the subclass's\
      \ state. – <a href=\"/Legacy:EntropicLqd\" title=\"Legacy:EntropicLqd\">EntropicLqd</a></dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Add_a_New_State\">Add a New State</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Extending_States?section=3\" title=\"Edit section: Add\
      \ a New State\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>e.g. RunningAway (because BugEyedMonsters are very cowardly)</p>\n<p>This\
      \ state will inherit functions from BugEyedMonster's null state</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Extend_a_State\">Extend a State</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Extending_States?section=4\"\
      \ title=\"Edit section: Extend a State\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>e.g. ScratchingButt extends Idle. We'd want most of\
      \ the functionality of Idle, but with an extra occasional animation. We'd also\
      \ have to add to our inherited Idle state to sometimes switch to ScratchingButt\
      \ depending on circumstances.</p>\n<dl>\n<dd><i>I've probably got it all wrong,\
      \ but if it makes Mych laugh enough he may fix it.&#160;:-) – Tarquin</i></dd>\n\
      </dl>\n<p>So if we consider a function present in Monster, eg Trigger, we now\
      \ have this in several flavours:</p>\n<p>In Monster we have:</p>\n<ul>\n<li>Trigger()\
      \ in null state\n<ul>\n<li>Idle.Trigger() inherits null.Trigger unless we override</li>\n\
      <li>Atacking.Trigger() inherits null.Trigger unless we override</li>\n</ul>\n\
      </li>\n</ul>\n<p>In BugEyedMonster we have</p>\n<ul>\n<li>Trigger() in null\
      \ state, inherits Monster.Trigger unless we override\n<ul>\n<li>Idle.Trigger()\
      \ – this is the confusing one. see below</li>\n<li>Atacking.Trigger()</li>\n\
      <li>ScratchingButt.Trigger() inherits Idle.Trigger() unless we override</li>\n\
      </ul>\n</li>\n</ul>\n<blockquote class=\"legacyquote\">\n<p>from <a href=\"\
      /Legacy:UnrealScript_Language_Reference/States\" title=\"Legacy:UnrealScript\
      \ Language Reference/States\">UnrealScript Language Reference/States</a></p>\n\
      <p>The scoping rules, which resolves these complex situations, are:</p>\n<ul>\n\
      <li>If the object is in a state, and an implementation of the function exists\
      \ somewhere in that state (either in the actor?s class or in some parent class),\
      \ the most-derived state version of the function is called.</li>\n<li>Otherwise,\
      \ the most-derived non-state version of the function is called.</li>\n</ul>\n\
      <p><br /></p>\n</blockquote>\n<h2><span class=\"mw-headline\" id=\"Examples\"\
      >Examples</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Extending_States?section=5\" title=\"Edit section:\
      \ Examples\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><i>Taken from a Discussion on UnrealScript Language Test:</i></p>\n<p><b>Wormbo:</b>\
      \ What I mean with \"super states\" is:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> SomeClass <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">Actor</span>;\n \n<span class=\"co1\">// Super() compiler\
      \ bug:</span>\n<span class=\"kw1\">function</span> A<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\"\
      >// super call to sibling class function that doesn't exist in this or the super\
      \ class</span>\n  <span class=\"kw6\">Super</span><span class=\"br0\">(</span>DestroyableTrigger<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">SpawnEffects</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>; <span class=\"co1\">// compiles\
      \ and even executes! (spawns some visual effects)</span>\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Super states:</span>\n \n<span class=\"\
      co1\">// new function, does not exist in Actor</span>\n<span class=\"kw1\">function</span>\
      \ X<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"SomeClass global X\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// new state, does not\
      \ exist in Actor</span>\n<span class=\"kw1\">state</span> BaseState\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">function</span> X<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"SomeClass\
      \ BaseState X\"</span><span class=\"br0\">)</span>;\n    <span class=\"co1\"\
      >// Super.X() -&gt; \"Error, Unknown Function 'X' in 'Class Engine.Actor'\"\
      </span>\n    Global.<span class=\"me0\">X</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// logs the same</span>\n  <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >state</span> ExtendedState <span class=\"kw1\">extends</span> BaseState\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">function</span> X<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n\
      \    <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"SomeClass ExtendedState X\"</span><span class=\"br0\">)</span>;\n  \
      \  <span class=\"kw6\">Super</span>.<span class=\"me0\">X</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;  <span class=\"co1\">// \"SomeClass\
      \ BaseState X\"</span>\n    Global.<span class=\"me0\">X</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>; <span class=\"co1\">// \"SomeClass\
      \ global X\"</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">state</span> AnotherExtendedState <span class=\"kw1\"\
      >extends</span> ExtendedState\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">function</span> X<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"SomeClass AnotherExtendedState X\"</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw6\">Super</span>.<span class=\"\
      me0\">X</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  <span\
      \ class=\"co1\">// \"SomeClass ExtendedState X\"</span>\n    <span class=\"\
      co1\">// it's not possible to call \"SomeClass BaseState X\" directly through\
      \ a Super(Something).X() construction:</span>\n    <span class=\"co1\">// Super(BaseState).X()\
      \ -&gt; \"Error, Bad class name 'BaseState'\"</span>\n    <span class=\"co1\"\
      >// Super(SomeClass.BaseState).X() -&gt; \"Error, Missing ')' in 'super(classname)'\"\
      </span>\n    Global.<span class=\"me0\">X</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// \"SomeClass global X\"</span>\n\
      \  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>If the object is in state AnotherExtendedState, it will log the following\
      \ when X is called:</p>\n<pre>SomeClass AnotherExtendedState X\nSomeClass ExtendedState\
      \ X\nSomeClass BaseState X\nSomeClass global X\nSomeClass global X\nSomeClass\
      \ global X\n</pre>\n<p>The calling structure looks like this:</p>\n<div style=\"\
      font-family: monospace; white-space: preserve; line-height: 1em;\">AnotherExtendedState.X()<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_2__ExtendedState.X()<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_0____TREETAG_2__BaseState.X()<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_0____TREETAG_0____TREETAG_2__global X()<br /></div>\n<div\
      \ style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >__TREETAG_0____TREETAG_2__global X()<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_2__global\
      \ X()<br /></div>\n<p><b>OlympusMons:</b> Ahh yes thats very, very clever wormbo&#160;:D\
      \ How did you ever come up with that concept, might be handy for some AI or\
      \ something.</p>\n<p><b>Wormbo:</b> PlayerController already uses the concept\
      \ of extending states within the sme class with BaseSpectating being the base\
      \ state for Spectating, AttractMode and WaitingForPawn. The Bot class makes\
      \ extensive use of extending states as well:</p>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">MoveToGoal<br /></div>\n\
      <div style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >__TREETAG_2__MoveToGoalWithEnemy<br /></div>\n<div style=\"font-family: monospace;\
      \ white-space: preserve; line-height: 1em;\">__TREETAG_0____TREETAG_2__Fallback<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_0____TREETAG_0____TREETAG_2__Retreating<br /></div>\n<div\
      \ style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >__TREETAG_0____TREETAG_2__Charging<br /></div>\n<div style=\"font-family: monospace;\
      \ white-space: preserve; line-height: 1em;\">__TREETAG_0____TREETAG_2__VehicleCharging<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_0____TREETAG_2__Hunting<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_2__MoveToGoalNoEnemy<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_0____TREETAG_2__Roaming<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">NoGoal<br /></div>\n\
      <div style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >__TREETAG_2__RestFormation<br /></div>\n<h2><span class=\"mw-headline\" id=\"\
      Base_state_function_overriding_and_extended_states\">Base state function overriding\
      \ and extended states</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Extending_States?section=6\" title=\"Edit section:\
      \ Base state function overriding and extended states\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>There's a catch with behaviour\
      \ of extended states when a base state function in subclass is overriden. Suppose\
      \ we have class like this one:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<ol>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> SbA <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Actor</span>;</pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\"> </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> Test<span class=\"br0\">(</span><span class=\"\
      br0\">)</span></pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"\
      br0\">{</span></pre></li>\n<li class=\"li2\">\n<pre class=\"de2\">\t<span class=\"\
      kw3\">Log</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span>\
      \ <span class=\"sy0\">@</span><span class=\"kw3\">GetStateName</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> ,<span class=\"kw5\">name</span><span\
      \ class=\"br0\">)</span>;</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      ><span class=\"br0\">}</span></pre></li>\n<li class=\"li1\">\n<pre class=\"\
      de1\"> </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span></pre></li>\n<li class=\"li1\">\n<pre class=\"\
      de1\"><span class=\"br0\">{</span></pre></li>\n<li class=\"li2\">\n<pre class=\"\
      de2\">\tTest<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'SBase'</span><span class=\"br0\"\
      >)</span>; Test<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"kw3\">GotoState</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'SExtended'</span><span class=\"\
      br0\">)</span>; Test<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;</pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"br0\">}</span></pre></li>\n<li class=\"\
      li2\">\n<pre class=\"de2\"> </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">state</span> SBase</pre></li>\n<li class=\"li1\">\n<pre\
      \ class=\"de1\"><span class=\"br0\">{</span></pre></li>\n<li class=\"li1\">\n\
      <pre class=\"de1\">\t<span class=\"kw1\">function</span> Test<span class=\"\
      br0\">(</span><span class=\"br0\">)</span></pre></li>\n<li class=\"li1\">\n\
      <pre class=\"de1\">\t<span class=\"br0\">{</span></pre></li>\n<li class=\"li2\"\
      >\n<pre class=\"de2\">\t\t<span class=\"kw3\">Log</span><span class=\"br0\"\
      >(</span><span class=\"st0\">\"A.Base\"</span> <span class=\"sy0\">@</span><span\
      \ class=\"kw3\">GetStateName</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span> ,<span class=\"kw5\">name</span><span class=\"br0\">)</span>;</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"br0\">}</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"> </pre></li>\n<li class=\"li1\">\n<pre\
      \ class=\"de1\"><span class=\"br0\">}</span></pre></li>\n<li class=\"li1\">\n\
      <pre class=\"de1\"> </pre></li>\n<li class=\"li2\">\n<pre class=\"de2\"><span\
      \ class=\"kw1\">state</span> SExtended <span class=\"kw1\">extends</span> SBase</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"br0\">{</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"br0\">}</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"> </pre></li>\n<li class=\"li1\">\n<pre\
      \ class=\"de1\"><span class=\"coMULTI\">/*</span></pre></li>\n<li class=\"li2\"\
      >\n<pre class=\"de2\"><span class=\"coMULTI\">Log:</span></pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbA: A SbA</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbA: A.Base SBase</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbA: A.Base SExtended</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">*/</span></pre></li>\n\
      </ol>\n</div>\n</div>\n<p>This actor behaves as expected.</p>\n<p>Lets override\
      \ the test function in a subclass:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<ol>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> SbB <span class=\"\
      kw1\">extends</span> SbA;</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"\
      > </pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"kw1\">state</span>\
      \ SBase</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"br0\"\
      >{</span></pre></li>\n<li class=\"li2\">\n<pre class=\"de2\">\t<span class=\"\
      kw1\">function</span> Test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"br0\">{</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\">\t\t<span class=\"kw3\">Log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"B.Base\"</span> <span class=\"\
      sy0\">@</span><span class=\"kw3\">GetStateName</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> ,<span class=\"kw5\">name</span><span class=\"br0\"\
      >)</span>;</pre></li>\n<li class=\"li1\">\n<pre class=\"de1\">\t<span class=\"\
      br0\">}</span></pre></li>\n<li class=\"li1\">\n<pre class=\"de1\"><span class=\"\
      br0\">}</span></pre></li>\n<li class=\"li2\">\n<pre class=\"de2\"> </pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"kw1\">state</span> SExtended</pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"br0\">{</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"br0\">}</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"> </pre></li>\n<li class=\"li2\">\n<pre\
      \ class=\"de2\"><span class=\"coMULTI\">/*</span></pre></li>\n<li class=\"li1\"\
      >\n<pre class=\"de1\"><span class=\"coMULTI\">Log:</span></pre></li>\n<li class=\"\
      li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbB: A SbB</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbB: B.Base SBase</span></pre></li>\n\
      <li class=\"li1\">\n<pre class=\"de1\"><span class=\"coMULTI\">SbB: A.Base SExtended</span></pre></li>\n\
      <li class=\"li2\">\n<pre class=\"de2\"><span class=\"coMULTI\">*/</span></pre></li>\n\
      </ol>\n</div>\n</div>\n<p>Notice that in SExtended state SbB.SBase.Test() wasn't\
      \ called.</p>\n<h3><span class=\"mw-headline\" id=\"Workarounds:\">Workarounds:</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Extending_States?section=7\" title=\"Edit section: Workarounds:\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Duplicate\
      \ the function so it's in SbB.SBase and SbB.SExtended?</p>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Extending_States?section=8\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:State\" title=\"Legacy:State\"\
      >State</a></li>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a></li>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a></li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Extending_States?section=9\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<hr />\n<p><a href=\"/Category:Legacy_Tutorial\" title=\"\
      Category:Legacy Tutorial\">Category:Legacy Tutorial</a></p>\n<p><a href=\"/Category:Legacy_To_Do\"\
      \ title=\"Category:Legacy To Do\">Category:Legacy To Do</a> – Revise tutorial\
      \ fill in with uscript examples.</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.075 seconds\nReal time usage: 0.077 seconds\nPreprocessor visited\
      \ node count: 75/1000000\nPreprocessor generated node count: 169/1000000\nPost‐\
      expand include size: 1034/2097152 bytes\nTemplate argument size: 453/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    4.514      1 - -total\n100.00%    4.514      1 - Template:Innerbox\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1096-0!*!0!!en!*!*\
      \ and timestamp 20221117133238 and revision id 2897\n -->\n"
  categories:
  - sortkey: "Extending States"
    name: "Legacy_Tutorial"
  - sortkey: "Extending States"
    name: "Legacy_To_Do"
  links:
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/States"
  - ns: 100
    exists: true
    name: "Legacy:EntropicLqd"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 14
    exists: true
    name: "Category:Legacy Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Example"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 466
    anchor: "Example"
  - toclevel: 2
    level: "3"
    line: "Add to an Inherited State"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 712
    anchor: "Add_to_an_Inherited_State"
  - toclevel: 2
    level: "3"
    line: "Add a New State"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 1529
    anchor: "Add_a_New_State"
  - toclevel: 2
    level: "3"
    line: "Extend a State"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 1682
    anchor: "Extend_a_State"
  - toclevel: 1
    level: "2"
    line: "Examples"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 3048
    anchor: "Examples"
  - toclevel: 1
    level: "2"
    line: "Base state function overriding and extended states"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 5402
    anchor: "Base_state_function_overriding_and_extended_states"
  - toclevel: 2
    level: "3"
    line: "Workarounds:"
    number: "3.1"
    index: "7"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 6353
    anchor: "Workarounds:"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 6437
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Extending_States"
    byteoffset: 6576
    anchor: "Discussion"
  displaytitle: "Legacy:Extending States"
  iwlinks: []
  wikitext:
    text: "[[Legacy:State|State]]s can be extended in the same way as classes. A state\
      \ that extends another inherits functions of its parent state, and can of course\
      \ override them or add new ones.\n\nExtending states is probably most useful\
      \ within a single class. With a child class, there is already inheritance: the\
      \ Child's state Foo inherits the Parent's state Foo anyway. Extending states\
      \ is useful if you have a state Foo and you also want a state FooSpecialCase,\
      \ perhaps.\n\n==Example==\n\n(needs to be rewritten, as is overly complex...)\n\
      \nSuppose we have a class Monster and a subclass BugEyedMonster. \n\nMonster\
      \ has the following states:\n* Idle\n* Attacking\n\nBugEyedMonster inherits\
      \ these states. We can do the following:\n\n===Add to an Inherited State===\n\
      \ne.g. Add a function RollEyes to the Attacking state. (though I'm not sure\
      \ what happens to label code outside of functions. help!)\n: AFAIK label code\
      \ outside of functions are simply executed when control is passed there via\
      \ the Goto() command.  Epic pretty much always have a set of function calls\
      \ after the label which invariably change the state of the object to make it\
      \ do more stuff.  When defining a state they place all of the functions within\
      \ the state first and then have a series of labels after the functions that\
      \ do appropriate \"stuff\".  In subclasses it ''looks'' like you can redefine\
      \ labels to \"override them\" but you can never call up to the label defined\
      \ in the superclass once it has been overidden in the subclass's state. &ndash;\
      \ [[Legacy:EntropicLqd|EntropicLqd]]\n\n===Add a New State===\n\ne.g. RunningAway\
      \ (because BugEyedMonsters are very cowardly)\n\nThis state will inherit functions\
      \ from BugEyedMonster's null state\n\n===Extend a State===\n\ne.g. ScratchingButt\
      \ extends Idle. We'd want most of the functionality of Idle, but with an extra\
      \ occasional animation. We'd also have to add to our inherited Idle state to\
      \ sometimes switch to ScratchingButt depending on circumstances.\n\n: <i>I've\
      \ probably got it all wrong, but if it makes Mych laugh enough he may fix it.\
      \ :-)  &ndash; ''Tarquin''</i> \n\nSo if we consider a function present in Monster,\
      \ eg Trigger, we now have this in several flavours:\n\nIn Monster we have:\n\
      * Trigger() in null state\n** Idle.Trigger() inherits null.Trigger unless we\
      \ override\n** Atacking.Trigger() inherits null.Trigger unless we override\n\
      \nIn BugEyedMonster we have\n* Trigger() in null state, inherits Monster.Trigger\
      \ unless we override\n** Idle.Trigger() &ndash; this is the confusing one. see\
      \ below\n** Atacking.Trigger()\n** ScratchingButt.Trigger() inherits Idle.Trigger()\
      \ unless we override\n\n{{innerbox|\nfrom [[Legacy:UnrealScript Language Reference/States|UnrealScript\
      \ Language Reference/States]]\n\nThe scoping rules, which resolves these complex\
      \ situations, are:\n* If the object is in a state, and an implementation of\
      \ the function exists somewhere in that state (either in the actor?s class or\
      \ in some parent class), the most-derived state version of the function is called.\n\
      * Otherwise, the most-derived non-state version of the function is called. \n\
      \n\n\n}}\n\n==Examples==\n\n''Taken from a Discussion on UnrealScript Language\
      \ Test:''\n\n'''Wormbo:''' What I mean with \"super states\" is:\n\n<uscript>\n\
      class SomeClass extends Actor;\n\n// Super() compiler bug:\nfunction A()\n{\n\
      \  // super call to sibling class function that doesn't exist in this or the\
      \ super class\n  Super(DestroyableTrigger).SpawnEffects(); // compiles and even\
      \ executes! (spawns some visual effects)\n}\n\n// Super states:\n\n// new function,\
      \ does not exist in Actor\nfunction X()\n{\n  log(\"SomeClass global X\");\n\
      }\n\n// new state, does not exist in Actor\nstate BaseState\n{\n  function X()\n\
      \  {\n    log(\"SomeClass BaseState X\");\n    // Super.X() -> \"Error, Unknown\
      \ Function 'X' in 'Class Engine.Actor'\"\n    Global.X(); // logs the same\n\
      \  }\n}\n\nstate ExtendedState extends BaseState\n{\n  function X()\n  {\n \
      \   log(\"SomeClass ExtendedState X\");\n    Super.X();  // \"SomeClass BaseState\
      \ X\"\n    Global.X(); // \"SomeClass global X\"\n  }\n}\n\nstate AnotherExtendedState\
      \ extends ExtendedState\n{\n  function X()\n  {\n    log(\"SomeClass AnotherExtendedState\
      \ X\");\n    Super.X();  // \"SomeClass ExtendedState X\"\n    // it's not possible\
      \ to call \"SomeClass BaseState X\" directly through a Super(Something).X()\
      \ construction:\n    // Super(BaseState).X() -> \"Error, Bad class name 'BaseState'\"\
      \n    // Super(SomeClass.BaseState).X() -> \"Error, Missing ')' in 'super(classname)'\"\
      \n    Global.X(); // \"SomeClass global X\"\n  }\n}\n</uscript>\n\nIf the object\
      \ is in state AnotherExtendedState, it will log the following when X is called:\n\
      \ SomeClass AnotherExtendedState X\n SomeClass ExtendedState X\n SomeClass BaseState\
      \ X\n SomeClass global X\n SomeClass global X\n SomeClass global X\n\nThe calling\
      \ structure looks like this:\n\n+AnotherExtendedState.X()\n\n++ExtendedState.X()\n\
      \n+++BaseState.X()\n\n++++global X()\n\n+++global X()\n\n++global X()\n\n'''OlympusMons:'''\
      \ Ahh yes thats very, very clever wormbo :D How did you ever come up with that\
      \ concept, might be handy for some AI or something.\n\n'''Wormbo:''' PlayerController\
      \ already uses the concept of extending states within the sme class with BaseSpectating\
      \ being the base state for Spectating, AttractMode and WaitingForPawn. The Bot\
      \ class makes extensive use of extending states as well:\n\n+MoveToGoal\n\n\
      ++MoveToGoalWithEnemy\n\n+++Fallback\n\n++++Retreating\n\n+++Charging\n\n+++VehicleCharging\n\
      \n+++Hunting\n\n++MoveToGoalNoEnemy\n\n+++Roaming\n\n+NoGoal\n\n++RestFormation\n\
      \n==Base state function overriding and extended states==\n\nThere's a catch\
      \ with behaviour of extended states when a base state function in subclass is\
      \ overriden. Suppose we have class like this one:\n\n<uscript line>\nclass SbA\
      \ extends Actor;\n\nfunction Test()\n{\n\tLog(\"A\" @GetStateName() ,name);\n\
      }\n\nfunction PostBeginPlay()\n{\n\tTest();\n\tGotoState('SBase'); Test();\n\
      \tGotoState('SExtended'); Test();\n\tDestroy();\n}\n\nstate SBase\n{\n\tfunction\
      \ Test()\n\t{\n\t\tLog(\"A.Base\" @GetStateName() ,name);\n\t}\n\t\n}\n\nstate\
      \ SExtended extends SBase\n{\n}\n\n/*\nLog:\nSbA: A SbA\nSbA: A.Base SBase\n\
      SbA: A.Base SExtended\n*/\n</uscript>This actor behaves as expected.\n\nLets\
      \ override the test function in a subclass:\n\n<uscript line>\nclass SbB extends\
      \ SbA;\n\nstate SBase\n{\n\tfunction Test()\n\t{\n\t\tLog(\"B.Base\" @GetStateName()\
      \ ,name);\n\t}\n}\n\nstate SExtended\n{\n}\n\n/*\nLog:\nSbB: A SbB\nSbB: B.Base\
      \ SBase\nSbB: A.Base SExtended\n*/\n</uscript>\n\nNotice that in SExtended state\
      \ SbB.SBase.Test() wasn't called.\n\n===Workarounds:===\n\nDuplicate the function\
      \ so it's in SbB.SBase and SbB.SExtended?\n\n==Related Topics==\n* [[Legacy:State|State]]\n\
      * [[Legacy:UnrealScript|UnrealScript]]\n* [[Legacy:UnrealScript Lessons|UnrealScript\
      \ Lessons]]\n\n==Discussion==\n\n----\n\n[[:Category:Legacy Tutorial]]\n\n[[:Category:Legacy\
      \ To Do]] &ndash; Revise tutorial fill in with uscript examples.\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]\n[[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 2897
name: "Legacy:Extending States"
revision:
  revid: 2897
  parentid: 2898
  user: "Switch"
  timestamp: 1145894200.000000000
  comment: "typo"
timestamp: 1668763569.848278000
