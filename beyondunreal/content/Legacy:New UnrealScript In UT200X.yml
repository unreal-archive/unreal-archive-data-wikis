---
parse:
  title: "Legacy:New UnrealScript In UT200X"
  text:
    text: "<p>See also:</p>\n<ul>\n<li><a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a></li>\n<li><a href=\"/Legacy:New_Features_In_UT200X\"\
      \ title=\"Legacy:New Features In UT200X\">New Features In UT200X</a></li>\n\
      <li><a href=\"/Legacy:New_UnrealEd_Interface_In_UT200X\" title=\"Legacy:New\
      \ UnrealEd Interface In UT200X\">New UnrealEd Interface In UT200X</a></li>\n\
      </ul>\n<dl>\n<dt>UnrealEd&#160;</dt>\n<dd>More control over <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">actors</a>' representation in UnrealEd.</dd>\n</dl>\n\
      <dl>\n<dt>Syntax extension to class declarations to hide (inherited) editable\
      \ property categories from the property sheet in UnrealEd</dt>\n<dd>\n<ul>\n\
      <li><code>hidecategories(category names)</code></li>\n<li>The previously existing\
      \ <code>nousercreate</code> class attribute seems to have been renamed to <code>notplaceable</code>,\
      \ and there's a new (redundant?) <code>placeable</code> class attribute. Placeable\
      \ classes are marked with an asterisk in the new <a href=\"/Legacy:Actor_Browser\"\
      \ title=\"Legacy:Actor Browser\" class=\"mw-redirect\">actor browser</a>.</li>\n\
      <li>Classes and objects can be marked as <code>editinline</code>, which allows\
      \ their use and creation directly in another object's property sheet.</li>\n\
      </ul>\n</dd>\n</dl>\n<dl>\n<dt>Artificial Intelligence&#160;</dt>\n<dd></dd>\n\
      </dl>\n<dl>\n<dt>The class-level distinction between bots and players has shifted</dt>\n\
      <dd>\n<ul>\n<li>You'll have models with plug-in \"controllers\" which can either\
      \ be players (local or remote) or bot brains – that's going to make modding\
      \ bot behavior very much easier. Not forgetting the ability to write a custom\
      \ playerpawn and have it support all (including custom) models. You can also\
      \ plug in controllers at will, allowing you to possess bots for example during\
      \ a game.</li>\n<li>Bot AI is at higher levels split in team AI and squad AI.\
      \ Each team is built of one or more squads which contain one or more bots.</li>\n\
      </ul>\n</dd>\n</dl>\n<dl>\n<dd>\n<dl>\n<dd><b>See Also:</b> <a href=\"/Legacy:Controller_Overview\"\
      \ title=\"Legacy:Controller Overview\">Controller Overview</a></dd>\n</dl>\n\
      </dd>\n</dl>\n<dl>\n<dt>Dynamic Array Support&#160;</dt>\n<dd>Are accessed like\
      \ regular arrays, but provide a <code>Length</code> property (read/write) to\
      \ set their size dynamically and various methods to add, insert and remove items.</dd>\n\
      </dl>\n<dl>\n<dt>Weapon Split</dt>\n<dd>Weapons have been split into various\
      \ actors for handling firing, pickup view, muzzleflash?, etc.</dd>\n<dt>AccessControl&#160;</dt>\n\
      <dd>does servery, adminy things, such as handle bans, kicks, cheats, etc.</dd>\n\
      <dt>BroadcastHandler&#160;</dt>\n<dd>controls whether the player can say anything,\
      \ recives any sort of ingame message, etc.</dd>\n</dl>\n<dl>\n<dt>New Iterators&#160;</dt>\n\
      <dd></dd>\n</dl>\n<dl>\n<dd>\n<ul>\n<li><b>DynamicActors</b>, loops over all\
      \ actors that have been dynamically added since the game started (as opposed\
      \ to \"were statically present in the loaded map\"). According to Mongo, all\
      \ bStatic actors are \"sorted\" placed at the beginning of the actor list; all\
      \ non-bStatic ones are placed after. The interator starts at the non-bStatic\
      \ ones.</li>\n<li><b>AllObjects</b>. The Garbage Collection array has been opened\
      \ up to UnrealScript.</li>\n</ul>\n</dd>\n</dl>\n<dl>\n<dt>More new native functions\
      \ (besides Iterators)&#160;</dt>\n<dd></dd>\n</dl>\n<dl>\n<dd>\n<ul>\n<li>Hud\
      \ drawing is simplified in the <a href=\"/Legacy:HUDBase\" title=\"Legacy:HUDBase\"\
      >HUDBase</a> class, with the DrawSpriteWidget and DrawNumericWidget functions.</li>\n\
      </ul>\n</dd>\n</dl>\n<dl>\n<dt>Created</dt>\n<dd>All <a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Objects</a> now receive notification when they are\
      \ created (similar to <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>.(Pre/Post)BeginPlay())</dd>\n\
      </dl>\n<dl>\n<dt>Trig functions</dt>\n<dd>Asin(), Acos(), and Atan2() (the more\
      \ exact atan) are open to unrealscript.</dd>\n</dl>\n<dl>\n<dt>DrawScale3D</dt>\n\
      <dd>Can now scale by height, length, and width, as opposed to raw drawscale\
      \ and fatness.</dd>\n</dl>\n<dl>\n<dt>Delegated Functions&#160;</dt>\n<dd>Basically\
      \ method pointers, to be used in OnEvent-style events. See <a href=\"/Legacy:Delegate\"\
      \ title=\"Legacy:Delegate\">Delegate</a>, <a href=\"http://udn.epicgames.com/Two/UnrealScriptDelegates\"\
      \ class=\"extiw\" title=\"udn2:UnrealScriptDelegates\">udn2:UnrealScriptDelegates</a>.</dd>\n\
      </dl>\n<dl>\n<dt>Animation Control&#160;</dt>\n<dd>Coders will have a lot of\
      \ control over animations, apparently. For instance, you can instruct an animation\
      \ to only play for a certain bone (and its sub-bones), and a different animation\
      \ on other bones. In other words, you can combine a running animation (for the\
      \ legs) with a shooting animation (for the torso) and a talking or head turning\
      \ animation (for the head). Source: <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.rps.net/NE/\">Nights Edge</a></dd>\n</dl>\n<dl>\n<dt>Exec\
      \ Directive&#160;</dt>\n<dd>new stuff in <a href=\"/Legacy:Exec_Directive\"\
      \ title=\"Legacy:Exec Directive\">Exec Directive</a></dd>\n</dl>\n<dl>\n<dt>Class\
      \ definition&#160;</dt>\n<dd>New modifier keywords and you can't use <i>expands</i>\
      \ anymore. Always use <i>extends</i> now. (see <a href=\"/Legacy:Class_Syntax\"\
      \ title=\"Legacy:Class Syntax\">Class_Syntax</a>)</dd>\n</dl>\n<dl>\n<dt>Actor\
      \ names&#160;</dt>\n<dd>You'll find that actors you spawn will not have sequentially\
      \ numbered names by default, instead they'll just have the name of their class\
      \ which can make debugging tricky. Run UT2K3 with the \"-makenames\" switch\
      \ and they'll be numbered just like in UT.</dd>\n</dl>\n<hr />\n<p><b>Mychaeel:</b>\
      \ I noticed an interesting new UnrealScript keyword in class <a href=\"/Legacy:ConstantColor\"\
      \ title=\"Legacy:ConstantColor\">ConstantColor</a> (might be elsewhere too):\
      \ <code>cpptext { ... }</code>. Any ideas on that one?</p>\n<p><b>EntropicLqd:</b>\
      \ Case-sensitive function delcarations that hook directly to C++ equivalents\
      \ by the looks of it. Used in a fair number of places as well. Only used in\
      \ native functions and only used to declare functions.</p>\n<p><b>Mychaeel:</b>\
      \ I figured that much out myself. What I'm interested in is: What purpose does\
      \ it serve? Does it directly output arbitrary C++ code into the C++ headers\
      \ generated from the UnrealScript sources?</p>\n<p><b>Trystan:</b> I'm assuming\
      \ you're working with the Epic sources and not the UnrealEd extracted sources.\
      \ In the UnrealEd extracted sources each line of a cpptext indicator is simply\
      \ <tt>// (cpptext)</tt>, so apparently UnrealEd doesn't know what to do with\
      \ it. A Google cached page showing it is at <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://216.239.39.100/search?q=cache:pP3sM2uVC7oC:udn.epicgames.com/pub/Technical/AnimNotifies/+cpptext&amp;hl=en&amp;ie=UTF-8\"\
      >http://216.239.39.100/search?q=cache:pP3sM2uVC7oC:udn.epicgames.com/pub/Technical/AnimNotifies/+cpptext&amp;hl=en&amp;ie=UTF-8</a>\
      \ - perhaps that will shed some light for your more experienced guys. (Er, the\
      \ content isn't available straight from the Epic site since it's for licensees\
      \ only, so I guess Mychaeel may want to delete this..) Looks like it's always\
      \ used for virtual functions.. dunno, I'm sure you guys know all this.&#160;:)</p>\n\
      <p><b>Wormbo:</b> I think I heared it in #unrealscript that the compiler comments\
      \ out those lines to ensure the sources can be exported properly. Something\
      \ with line numbers getting messed up.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:New_UnrealScript_In_UT200X?section=1\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>DJPaul:</b> Need explanation/example of delegated\
      \ functions quick sharp.</p>\n<p><b>Wormbo:</b> They are explained on the UDN:\
      \ <a href=\"http://udn.epicgames.com/Two/UnrealScriptDelegates\" class=\"extiw\"\
      \ title=\"udn2:UnrealScriptDelegates\">udn2:UnrealScriptDelegates</a></p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.036 seconds\nReal time usage: 0.133\
      \ seconds\nPreprocessor visited node count: 3/1000000\nPreprocessor generated\
      \ node count: 8/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2302-0!*!0!*!*!*!* and timestamp 20221118024916 and revision\
      \ id 5557\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Delegate"
  - ns: 100
    exists: true
    name: "Legacy:ConstantColor"
  - ns: 100
    exists: true
    name: "Legacy:New UnrealEd Interface In UT200X"
  - ns: 100
    exists: true
    name: "Legacy:Controller Overview"
  - ns: 100
    exists: true
    name: "Legacy:New Features In UT200X"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:HUDBase"
  - ns: 100
    exists: true
    name: "Legacy:Actor Browser"
  - ns: 100
    exists: true
    name: "Legacy:Exec Directive"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  templates: []
  images: []
  externallinks:
  - "http://216.239.39.100/search?q=cache:pP3sM2uVC7oC:udn.epicgames.com/pub/Technical/AnimNotifies/+cpptext&hl=en&ie=UTF-8"
  - "http://www.rps.net/NE/"
  sections:
  - toclevel: 1
    level: "3"
    line: "Discussion"
    number: "1"
    index: "1"
    fromtitle: "Legacy:New_UnrealScript_In_UT200X"
    byteoffset: 5679
    anchor: "Discussion"
  displaytitle: "Legacy:New UnrealScript In UT200X"
  iwlinks:
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/UnrealScriptDelegates"
    name: "udn2:UnrealScriptDelegates"
  wikitext:
    text: "See also:\n\n* [[Legacy:UT2003|UT2003]]\n* [[Legacy:New Features In UT200X|New\
      \ Features In UT200X]]\n* [[Legacy:New UnrealEd Interface In UT200X|New UnrealEd\
      \ Interface In UT200X]]\n\n; UnrealEd : More control over [[Legacy:Actor|actor]]s'\
      \ representation in UnrealEd.\n;* Syntax extension to class declarations to\
      \ hide (inherited) editable property categories from the property sheet in UnrealEd:\
      \ <code>hidecategories(category names)</code>\n;* The previously existing <code>nousercreate</code>\
      \ class attribute seems to have been renamed to <code>notplaceable</code>, and\
      \ there's a new (redundant?) <code>placeable</code> class attribute.  Placeable\
      \ classes are marked with an asterisk in the new [[Legacy:Actor Browser|actor\
      \ browser]].\n;* Classes and objects can be marked as <code>editinline</code>,\
      \ which allows their use and creation directly in another object's property\
      \ sheet.\n\n; Artificial Intelligence :\n;* The class-level distinction between\
      \ bots and players has shifted: You'll have models with plug-in \"controllers\"\
      \ which can either be players (local or remote) or bot brains &ndash; that's\
      \ going to make modding bot behavior very much easier. Not forgetting the ability\
      \ to write a custom playerpawn and have it support all (including custom) models.\
      \ You can also plug in controllers at will, allowing you to possess bots for\
      \ example during a game.\n;* Bot AI is at higher levels split in team AI and\
      \ squad AI.  Each team is built of one or more squads which contain one or more\
      \ bots.\n\n;:'''See Also:''' [[Legacy:Controller Overview|Controller Overview]]\n\
      \n; Dynamic Array Support : Are accessed like regular arrays, but provide a\
      \ <code>Length</code> property (read/write) to set their size dynamically and\
      \ various methods to add, insert and remove items.\n\n; Weapon Split: Weapons\
      \ have been split into various actors for handling firing, pickup view, muzzleflash?,\
      \ etc.\n; AccessControl : does servery, adminy things, such as handle bans,\
      \ kicks, cheats, etc.\n; BroadcastHandler : controls whether the player can\
      \ say anything, recives any sort of ingame message, etc.\n\n; New Iterators\
      \ :\n;* '''DynamicActors''', loops over all actors that have been dynamically\
      \ added since the game started (as opposed to \"were statically present in the\
      \ loaded map\").  According to Mongo, all bStatic actors are \"sorted\" placed\
      \ at the beginning of the actor list; all non-bStatic ones are placed after.\
      \  The interator starts at the non-bStatic ones.\n;* '''AllObjects'''. The Garbage\
      \ Collection array has been opened up to UnrealScript.\n\n; More new native\
      \ functions (besides Iterators) :\n;*Hud drawing is simplified in the [[Legacy:HUDBase|HUDBase]]\
      \ class, with the DrawSpriteWidget and DrawNumericWidget functions.\n\n; Created:\
      \ All [[Legacy:Object|Object]]s now receive notification when they are created\
      \ (similar to [[Legacy:Actor|Actor]].(Pre/Post)BeginPlay())\n\n; Trig functions:\
      \ Asin(), Acos(), and Atan2() (the more exact atan) are open to unrealscript.\n\
      \n; DrawScale3D: Can now scale by height, length, and width, as opposed to raw\
      \ drawscale and fatness.\n\n; Delegated Functions : Basically method pointers,\
      \ to be used in OnEvent-style events. See [[Legacy:Delegate|Delegate]], [[udn2:UnrealScriptDelegates]].\n\
      \n; Animation Control : Coders will have a lot of control over animations, apparently.\
      \ For instance, you can instruct an animation to only play for a certain bone\
      \ (and its sub-bones), and a different animation on other bones. In other words,\
      \ you can combine a running animation (for the legs) with a shooting animation\
      \ (for the torso) and a talking or head turning animation (for the head). Source:\
      \ [http://www.rps.net/NE/ Nights Edge]\n\n; Exec Directive : new stuff in [[Legacy:Exec\
      \ Directive|Exec Directive]]\n\n; Class definition : New modifier keywords and\
      \ you can't use ''expands'' anymore. Always use ''extends'' now. (see [[Legacy:Class_Syntax|Class_Syntax]])\n\
      \n; Actor names : You'll find that actors you spawn will not have sequentially\
      \ numbered names by default, instead they'll just have the name of their class\
      \ which can make debugging tricky.  Run UT2K3 with the \"-makenames\" switch\
      \ and they'll be numbered just like in UT.\n\n----\n\n'''Mychaeel:''' I noticed\
      \ an interesting new UnrealScript keyword in class [[Legacy:ConstantColor|ConstantColor]]\
      \ (might be elsewhere too):  <code>cpptext { ... }</code>.  Any ideas on that\
      \ one? \n\n'''EntropicLqd:''' Case-sensitive function delcarations that hook\
      \ directly to C++ equivalents by the looks of it.  Used in a fair number of\
      \ places as well.  Only used in native functions and only used to declare functions.\n\
      \n'''Mychaeel:''' I figured that much out myself.  What I'm interested in is:\
      \  What purpose does it serve?  Does it directly output arbitrary C++ code into\
      \ the C++ headers generated from the UnrealScript sources?\n\n'''Trystan:'''\
      \ I'm assuming you're working with the Epic sources and not the UnrealEd extracted\
      \ sources.  In the UnrealEd extracted sources each line of a cpptext indicator\
      \ is simply <tt>// (cpptext)</tt>, so apparently UnrealEd doesn't know what\
      \ to do with it.  A Google cached page showing it is at http://216.239.39.100/search?q=cache:pP3sM2uVC7oC:udn.epicgames.com/pub/Technical/AnimNotifies/+cpptext&hl=en&ie=UTF-8\
      \ - perhaps that will shed some light for your more experienced guys.  (Er,\
      \ the content isn't available straight from the Epic site since it's for licensees\
      \ only, so I guess Mychaeel may want to delete this..)  Looks like it's always\
      \ used for virtual functions.. dunno, I'm sure you guys know all this. :)\n\n\
      '''Wormbo:''' I think I heared it in #unrealscript that the compiler comments\
      \ out those lines to ensure the sources can be exported properly. Something\
      \ with line numbers getting messed up.\n\n===Discussion ===\n\n'''DJPaul:'''\
      \ Need explanation/example of delegated functions quick sharp.\n\n'''Wormbo:'''\
      \ They are explained on the UDN: [[udn2:UnrealScriptDelegates]]"
  properties: []
  revId: 5557
name: "Legacy:New UnrealScript In UT200X"
revision:
  revid: 5557
  parentid: 5558
  user: "Defx666"
  timestamp: 1117555162.000000000
  comment: "*removed a useless comment in the middle of the text"
timestamp: 1668766627.233473000
