---
parse:
  title: "Legacy:LibHTTP"
  text:
    text: "<p><a rel=\"nofollow\" class=\"external text\" href=\"http://ut2004.elmuerte.com/LibHTTP3\"\
      >LibHTTP</a> is a general purpose code package for UnrealEngine2 (developed\
      \ by <a href=\"/Legacy:El_Muerte\" title=\"Legacy:El Muerte\" class=\"mw-redirect\"\
      >El Muerte</a>). It makes it easier to perform HTTP requests to retrieve data\
      \ stored on webservers. It takes into account most of the aspects that come\
      \ into the picture when doing correct HTTP requests.</p>\n<p>LibHTTP has the\
      \ following features</p>\n<ul>\n<li>Support for HTTP version 1.0 and 1.1</li>\n\
      <li>Support for GET/POST/HEAD/TRACE request methods</li>\n<li>Normal and accelerated\
      \ transfer modes (accelerated mode creates a performance hit)</li>\n<li>Response\
      \ and Request Header managent</li>\n<li>Cookie management</li>\n<li>Authentication\
      \ supports (both Basic and Digest methods are supported)</li>\n<li>Support for\
      \ HTTP proxies</li>\n<li>Gracefull handling of connection timeouts</li>\n<li>Automatic\
      \ decoding of chunked data</li>\n<li>Automatically follows redirections (creates\
      \ a redirection history)</li>\n<li>Support for multipart/form-data POST data\
      \ (prefered form)</li>\n</ul>\n<p>Version 2, 3 and 4 have been released under\
      \ the <a href=\"/Legacy:LesserOpenUnrealModLicense\" title=\"Legacy:LesserOpenUnrealModLicense\"\
      >LesserOpenUnrealModLicense</a>.</p>\n<p>Version 1 was relesed under the Lesser\
      \ GPL.</p>\n<p>The documentation on the UnrealWiki has been changed to reflect\
      \ Version 2.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Classes\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Classes</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Examples\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Examples</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Releases\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Releases</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#Custom_builds_.5C_subclassing_HttpSock\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">Custom builds \\ subclassing\
      \ HttpSock</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Version_3_release_notes\"><span class=\"tocnumber\">3.2</span> <span class=\"\
      toctext\">Version 3 release notes</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Version_3.5_release_notes\"><span class=\"tocnumber\">3.3</span>\
      \ <span class=\"toctext\">Version 3.5 release notes</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-7\"><a href=\"#Version_4_release_notes\"><span class=\"\
      tocnumber\">3.4</span> <span class=\"toctext\">Version 4 release notes</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Discussion\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Classes\">Classes</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:LibHTTP?section=1\" title=\"Edit section: Classes\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<ul>\n<li><a href=\"\
      /Legacy:LibHTTP/HttpCache\" title=\"Legacy:LibHTTP/HttpCache\">Legacy:LibHTTP/HttpCache</a>\
      \ - experimental cache manager</li>\n<li><a href=\"/Legacy:LibHTTP/HttpCacheObject\"\
      \ title=\"Legacy:LibHTTP/HttpCacheObject\">Legacy:LibHTTP/HttpCacheObject</a>\
      \ - cache document, created by <a href=\"/Legacy:LibHTTP/HttpCache\" title=\"\
      Legacy:LibHTTP/HttpCache\">Legacy:LibHTTP/HttpCache</a></li>\n<li><a href=\"\
      /Legacy:LibHTTP/HttpCookies\" title=\"Legacy:LibHTTP/HttpCookies\">Legacy:LibHTTP/HttpCookies</a>\
      \ - Cookie management class</li>\n<li><a href=\"/Legacy:LibHTTP/HttpLink\" title=\"\
      Legacy:LibHTTP/HttpLink\">Legacy:LibHTTP/HttpLink</a> - the actual TCP Link\
      \ to retrieve the data (dummy class)</li>\n<li><a href=\"/Legacy:LibHTTP/HttpResolveCache\"\
      \ title=\"Legacy:LibHTTP/HttpResolveCache\">Legacy:LibHTTP/HttpResolveCache</a>\
      \ - hostname resolve cache</li>\n<li><a href=\"/Legacy:LibHTTP/HttpSock\" title=\"\
      Legacy:LibHTTP/HttpSock\">Legacy:LibHTTP/HttpSock</a> - HTTP client for retreiving\
      \ data from webservers</li>\n<li><a href=\"/Legacy:LibHTTP/HttpUtil\" title=\"\
      Legacy:LibHTTP/HttpUtil\">Legacy:LibHTTP/HttpUtil</a> - static miscelaneous\
      \ functions</li>\n<li><a href=\"/Legacy:NewsFeed\" title=\"Legacy:NewsFeed\"\
      >NewsFeed</a> - a RSS\\RDF Parser</li>\n</ul>\n<p><i>Note:</i> the class documentation\
      \ on the wiki is not up to date for version 4 yet.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Examples\">Examples</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=2\"\
      \ title=\"Edit section: Examples\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:LibHTTP/Example\" title=\"\
      Legacy:LibHTTP/Example\">Legacy:LibHTTP/Example</a> - a simple example on how\
      \ to use this package.</li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://ut2004.elmuerte.com/ServerExt\">ServerExt</a> - the MutRSS packages\
      \ uses this library to fetch it's data</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Releases\">Releases</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=3\"\
      \ title=\"Edit section: Releases\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><b><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://ut2004.elmuerte.com/files/LibHTTP4.zip\">version 401</a></b></li>\n\
      </ul>\n<ul>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"http://ut2004.elmuerte.com/files/LibHTTP3_5.zip\"\
      >version 350</a> (UT2004)</li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://ut2004.elmuerte.com/files/LibHTTP3.zip\">version 300</a> (UT2004)</li>\n\
      <li><a rel=\"nofollow\" class=\"external text\" href=\"http://ut2004.elmuerte.com/files/LibHTTP2.zip\"\
      >version 200</a> (UT2004)</li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://ut2004.elmuerte.com/files/LibHTTP2x3.zip\">version 200</a> (UT2003)</li>\n\
      <li><a rel=\"nofollow\" class=\"external text\" href=\"http://www.drunksnipers.com/files/ut2003/LibHTTPv100.zip\"\
      >version 100</a> (UT2003)</li>\n</ul>\n<p>The bleeding edge is always available\
      \ from my <a href=\"/Legacy:CVS\" title=\"Legacy:CVS\">CVS</a> repository.</p>\n\
      <dl>\n<dt>CVS Root for anonymous access&#160;</dt>\n<dd>:pserver:anonymous@el-muerte.student.utwente.nl:/usr/local/cvsroot/UT2004<br\
      \ />\nmodule name: LibHTTP<br />\ntag: v400</dd>\n</dl>\n<h3><span class=\"\
      mw-headline\" id=\"Custom_builds_.5C_subclassing_HttpSock\">Custom builds \\\
      \ subclassing HttpSock</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:LibHTTP?section=4\" title=\"Edit section: Custom\
      \ builds \\ subclassing HttpSock\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You are allowed to create custom builds of this package\
      \ (read the license for requirements of custom builds). If you create a custom\
      \ build you should use a different name for the package so it can be distinguished\
      \ from the original released (e.g. <code>LibHTTP_MyBuild</code>). Don't use\
      \ my current scheme of <code>LibHTTP<i>version number</i></code>.</p>\n<p>Also\
      \ if you are creating a custom build you might want to checkout the code from\
      \ the CVS (note, leave the tag field empty), so you'll start of with the latest\
      \ changes.</p>\n<p>When you do a custom build (and in the future subclass) make\
      \ sure you set a value for the EXTENTION variable. This variable is used in\
      \ the UserAgent string. So instead of</p>\n<pre> LibHTTP/400 (UnrealEngine2;\
      \ build 3323; <a rel=\"nofollow\" class=\"external free\" href=\"http://wiki.beyondunreal.com/wiki/LibHTTP\"\
      >http://wiki.beyondunreal.com/wiki/LibHTTP</a> )\n</pre>\n<p>You will get</p>\n\
      <pre> LibHTTP/040 (UnrealEngine2; build 3323; <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://wiki.beyondunreal.com/wiki/LibHTTP\">http://wiki.beyondunreal.com/wiki/LibHTTP</a>\
      \ ; MyExtention )\n</pre>\n<h3><span class=\"mw-headline\" id=\"Version_3_release_notes\"\
      >Version 3 release notes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=5\"\
      \ title=\"Edit section: Version 3 release notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This version isn't a drop-in replacement for version\
      \ 2. Although the changes you have to make might be minimal.</p>\n<ul>\n<li>Improved\
      \ easy of use: get(), post(), head()</li>\n<li>Support for multipart/form-data\
      \ POST data</li>\n<li>Two different transfer modes: Normal and Fast (tries to\
      \ download as much data as allowed within a single tick)</li>\n<li>Support for\
      \ proxy authentication, you get the best performance by setting the right user/pass\
      \ in the beginning. Otherwise the code using this library will have to do additional\
      \ processing when the proxy user and pass are not accepted.</li>\n<li>Better\
      \ support for various authentication methods</li>\n<li>Support for digest authentication\
      \ (more secure HTTP authentication). When digest is used instead of basic the\
      \ client has to make 2 requests. With the first request the server will send\
      \ information needed to construct the response. Basic authentication doesn't\
      \ have this issue.</li>\n<li>Cookie storage class will automatically be created\
      \ when bProcCookies or bSendCookies is set to true (and the cookies hasn't been\
      \ set)</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"Version_3.5_release_notes\"\
      >Version 3.5 release notes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=6\"\
      \ title=\"Edit section: Version 3.5 release notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>All delegates contains a HttpSock Sender argument</li>\n\
      <li>New function string randString(optional int length, optional coerce string\
      \ prefix)</li>\n<li>MultiPart divider string is now more unique (prevents potential\
      \ issues with the content data)</li>\n<li>Empty multipart items are never added</li>\n\
      <li>Made more support functions public</li>\n<li>New utility function string\
      \ timestampToString(int timestamp, optional string Timezone, optional string\
      \ format) that will convert a UNIX timestamp to a string (<a class=\"external\
      \ mw-magiclink-rfc\" rel=\"nofollow\" href=\"//tools.ietf.org/html/rfc1123\"\
      >RFC 1123</a>, <a class=\"external mw-magiclink-rfc\" rel=\"nofollow\" href=\"\
      //tools.ietf.org/html/rfc1036\">RFC 1036</a>, <a class=\"external mw-magiclink-rfc\"\
      \ rel=\"nofollow\" href=\"//tools.ietf.org/html/rfc2822\">RFC 2822</a>, ANSI\
      \ C asctime formats supported)</li>\n<li>Fixed potentional issues with timestamps\
      \ and cookies</li>\n</ul>\n<h3><span class=\"mw-headline\" id=\"Version_4_release_notes\"\
      >Version 4 release notes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=7\"\
      \ title=\"Edit section: Version 4 release notes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>Various small bugfixes</li>\n<li>Redone the\
      \ redirection processing, now with better support for each redirection type</li>\n\
      <li>New variable HttpSock.bRfcCompliantRedirect, set this to false for the old,\
      \ and bad, redirection handling on 301/302 headers (e.g. transform POST into\
      \ GET)</li>\n<li>Moved DNS caching to a global object, multiple HttpSock classes\
      \ now use the same cache data</li>\n<li>Added automatic retrying when authentication\
      \ data is provided in the url, the prefered method for using authenticated locations\
      \ is to provide the username and password in the url or set them in the currenturl\
      \ after the OnRequireAuthorization() was received. Can be disabled by setting\
      \ HttpSock.bAutoAuthenticate to false</li>\n<li>HttpSock.ClearRequestData()\
      \ will now automatically clear authentication information</li>\n<li>NewsFeed\
      \ properly reads CDATA</li>\n<li>NewsFeed description fields are truncated to\
      \ 512 bytes (because of a bug in the engine). Set NewsFeed.bSizeBugFix to false\
      \ to disable it.</li>\n<li>URL parsing is now done by HttpUtil and stores it\
      \ in a new xURL struct, all old references to storage of the location and host\
      \ have been changed to xURL.</li>\n<li>Fixed a couple of bugs in cookie handler,\
      \ the first cookie was never properly unset</li>\n<li>Fixed a bug where the\
      \ last line of data may not be properly added to the result array</li>\n<li>Moved\
      \ the HttpTest class to a UsUnit test suite</li>\n<li>Fixed HttpSock.GetReturnHeader()</li>\n\
      <li>Added a new class HttpCache that manages cached requests, this is somewhat\
      \ experimental</li>\n<li>Usernames and passwords on the URL are now properly\
      \ decoded before they're used.</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:LibHTTP?section=8\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>MythOpus:</b>El Muerte, how reliable would LipHTTP\
      \ be for downloading/saving LOTS of information at a given time?</p>\n<p><b>El\
      \ Muerte:</b> define lots? LibHTTP is reliable as in, it downloads all the data\
      \ and stores each line into the result array. So, it's more of an issue how\
      \ reliable a dynamic array is. And there might be an issue with string length\
      \ (e.g. &gt;4k strings) but I guess you'll have to test that yourself. Anyway,\
      \ there is a delegate in HttpSock that'll allow you do process the result data\
      \ before it's stored in the array (see <tt>OnResponseBody</tt>).</p>\n<p><b>MythOpus:</b>\
      \ Well, I did do a few tests and found that it doesn't handle my blog very well\
      \ lol. I am thinking about starting a new project that will require all players\
      \ to get lots of data from the server. This data might include usernames and\
      \ passwords, game stats, current game status, as well as journal entries, poems,\
      \ stories and, if I can get it to download it properly, pictures. Most players\
      \ would have to download a good portion of this data when they first connect\
      \ to the server. At that point they would probably have to login.</p>\n<p><b>El\
      \ Muerte:</b> Pictures? You are aware that you can't do much with binary data\
      \ right?</p>\n<p><b>MythOpus:</b> Well, I was just thinking that perhaps I could\
      \ make a picture system. A player could 'draw' a picture in the game and save\
      \ it and it would save the picture data to a server and when the player wanted\
      \ to look at it, it would call up that data later and organize it and then display\
      \ it. A serious of number to show pixel location/color etc.</p>\n<p><b>MythOpus:</b>\
      \ I've been messing around a bit with the NewsFeed class and I can't see to\
      \ figure out how to get the actual content in the RSS out and display it in\
      \ something like a text field.</p>\n<p><b>El Muerte:</b> check out the code\
      \ of MutRSS ( <a rel=\"nofollow\" class=\"external text\" href=\"http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExtClientB/Classes/RSSFeedRecord.uc?rev=1.3\"\
      >1</a> and <a rel=\"nofollow\" class=\"external text\" href=\"http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExt/Classes/MutRSS.uc?rev=1.27\"\
      >2</a> )</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.055 seconds\nReal\
      \ time usage: 0.109 seconds\nPreprocessor visited node count: 97/1000000\nPreprocessor\
      \ generated node count: 212/1000000\nPost‐expand include size: 124/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:1712-0!*!0!!en!*!* and timestamp\
      \ 20221118025041 and revision id 4224\n -->\n"
  categories:
  - sortkey: "LibHTTP"
    name: "Legacy_Custom_Class_(UT2004)"
  links:
  - ns: 100
    exists: true
    name: "Legacy:El Muerte"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpLink"
  - ns: 100
    exists: true
    name: "Legacy:LesserOpenUnrealModLicense"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpCache"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpUtil"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpCacheObject"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpCookies"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpSock"
  - ns: 100
    exists: true
    name: "Legacy:CVS"
  - ns: 100
    exists: true
    name: "Legacy:NewsFeed"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/HttpResolveCache"
  - ns: 100
    exists: true
    name: "Legacy:LibHTTP/Example"
  templates: []
  images: []
  externallinks:
  - "http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExtClientB/Classes/RSSFeedRecord.uc?rev=1.3"
  - "http://ut2004.elmuerte.com/files/LibHTTP4.zip"
  - "http://ut2004.elmuerte.com/files/LibHTTP3.zip"
  - "http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExt/Classes/MutRSS.uc?rev=1.27"
  - "http://ut2004.elmuerte.com/files/LibHTTP2x3.zip"
  - "http://www.drunksnipers.com/files/ut2003/LibHTTPv100.zip"
  - "http://wiki.beyondunreal.com/wiki/LibHTTP"
  - "http://ut2004.elmuerte.com/LibHTTP3"
  - "http://ut2004.elmuerte.com/files/LibHTTP3_5.zip"
  - "http://ut2004.elmuerte.com/files/LibHTTP2.zip"
  - "http://ut2004.elmuerte.com/ServerExt"
  sections:
  - toclevel: 1
    level: "2"
    line: "Classes"
    number: "1"
    index: "1"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 1146
    anchor: "Classes"
  - toclevel: 1
    level: "2"
    line: "Examples"
    number: "2"
    index: "2"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 1959
    anchor: "Examples"
  - toclevel: 1
    level: "2"
    line: "Releases"
    number: "3"
    index: "3"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 2179
    anchor: "Releases"
  - toclevel: 2
    level: "3"
    line: "Custom builds \\ subclassing HttpSock"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 2878
    anchor: "Custom_builds_.5C_subclassing_HttpSock"
  - toclevel: 2
    level: "3"
    line: "Version 3 release notes"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 3813
    anchor: "Version_3_release_notes"
  - toclevel: 2
    level: "3"
    line: "Version 3.5 release notes"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 4865
    anchor: "Version_3.5_release_notes"
  - toclevel: 2
    level: "3"
    line: "Version 4 release notes"
    number: "3.4"
    index: "7"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 5488
    anchor: "Version_4_release_notes"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "8"
    fromtitle: "Legacy:LibHTTP"
    byteoffset: 7053
    anchor: "Discussion"
  displaytitle: "Legacy:LibHTTP"
  iwlinks: []
  wikitext:
    text: "[http://ut2004.elmuerte.com/LibHTTP3 LibHTTP] is a general purpose code\
      \ package for UnrealEngine2 (developed by [[Legacy:El Muerte|El Muerte]]). It\
      \ makes it easier to perform HTTP requests to retrieve data stored on webservers.\
      \ It takes into account most of the aspects that come into the picture when\
      \ doing correct HTTP requests.\n\nLibHTTP has the following features\n* Support\
      \ for HTTP version 1.0 and 1.1\n* Support for GET/POST/HEAD/TRACE request methods\n\
      * Normal and accelerated transfer modes (accelerated mode creates a performance\
      \ hit)\n* Response and Request Header managent\n* Cookie management\n* Authentication\
      \ supports (both Basic and Digest methods are supported)\n* Support for HTTP\
      \ proxies\n* Gracefull handling of connection timeouts\n* Automatic decoding\
      \ of chunked data\n* Automatically follows redirections (creates a redirection\
      \ history)\n* Support for multipart/form-data POST data (prefered form)\n\n\
      Version 2, 3 and 4 have been released under the [[Legacy:LesserOpenUnrealModLicense|LesserOpenUnrealModLicense]].\n\
      \nVersion 1 was relesed under the Lesser GPL.\n\nThe documentation on the UnrealWiki\
      \ has been changed to reflect Version 2.\n\n==Classes==\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpCache]]\
      \ - experimental cache manager\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpCacheObject]]\
      \ - cache document, created by [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpCache]]\n\
      * [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpCookies]] - Cookie management class\n\
      * [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpLink]] - the actual TCP Link to retrieve\
      \ the data (dummy class)\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpResolveCache]]\
      \ - hostname resolve cache\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpSock]]\
      \ - HTTP client for retreiving data from webservers\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/HttpUtil]]\
      \ - static miscelaneous functions\n* [[Legacy:NewsFeed|NewsFeed]] - a RSS\\\
      RDF Parser\n\n''Note:'' the class documentation on the wiki is not up to date\
      \ for version 4 yet.\n\n==Examples==\n* [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Example]]\
      \ - a simple example on how to use this package.\n* [http://ut2004.elmuerte.com/ServerExt\
      \ ServerExt] - the MutRSS packages uses this library to fetch it's data\n\n\
      ==Releases==\n* '''[http://ut2004.elmuerte.com/files/LibHTTP4.zip version 401]'''\n\
      \n* [http://ut2004.elmuerte.com/files/LibHTTP3_5.zip version 350] (UT2004)\n\
      * [http://ut2004.elmuerte.com/files/LibHTTP3.zip version 300] (UT2004)\n* [http://ut2004.elmuerte.com/files/LibHTTP2.zip\
      \ version 200] (UT2004)\n* [http://ut2004.elmuerte.com/files/LibHTTP2x3.zip\
      \ version 200] (UT2003)\n* [http://www.drunksnipers.com/files/ut2003/LibHTTPv100.zip\
      \ version 100] (UT2003)\n\nThe bleeding edge is always available from my [[Legacy:CVS|CVS]]\
      \ repository.\n\n; CVS Root for anonymous access : <nowiki>:pserver:anonymous@el-muerte.student.utwente.nl:/usr/local/cvsroot/UT2004</nowiki>\
      \ <br />module name: LibHTTP<br />tag: v400\n\n===Custom builds \\ subclassing\
      \ HttpSock===\n\nYou are allowed to create custom builds of this package (read\
      \ the license for requirements of custom builds). If you create a custom build\
      \ you should use a different name for the package so it can be distinguished\
      \ from the original released (e.g. <code>LibHTTP_MyBuild</code>). Don't use\
      \ my current scheme of <code>LibHTTP''version number''</code>.\n\nAlso if you\
      \ are creating a custom build you might want to checkout the code from the CVS\
      \ (note, leave the tag field empty), so you'll start of with the latest changes.\n\
      \nWhen you do a custom build (and in the future subclass) make sure you set\
      \ a value for the EXTENTION variable. This variable is used in the UserAgent\
      \ string. So instead of\n  LibHTTP/400 (UnrealEngine2; build 3323; http://wiki.beyondunreal.com/wiki/LibHTTP\
      \ )\n\nYou will get\n  LibHTTP/040 (UnrealEngine2; build 3323; http://wiki.beyondunreal.com/wiki/LibHTTP\
      \ ; MyExtention )\n\n===Version 3 release notes===\n\nThis version isn't a drop-in\
      \ replacement for version 2. Although the changes you have to make might be\
      \ minimal.\n\n* Improved easy of use: get(), post(), head()\n* Support for multipart/form-data\
      \ POST data\n* Two different transfer modes: Normal and Fast (tries to download\
      \ as much data as allowed within a single tick)\n* Support for proxy authentication,\
      \ you get the best performance by setting the right user/pass in the beginning.\
      \ Otherwise the code using this library will have to do additional processing\
      \ when the proxy user and pass are not accepted.\n* Better support for various\
      \ authentication methods\n* Support for digest authentication (more secure HTTP\
      \ authentication). When digest is used instead of basic the client has to make\
      \ 2 requests. With the first request the server will send information needed\
      \ to construct the response. Basic authentication doesn't have this issue.\n\
      * Cookie storage class will automatically be created when bProcCookies or bSendCookies\
      \ is set to true (and the cookies hasn't been set)\n\n===Version 3.5 release\
      \ notes===\n* All delegates contains a HttpSock Sender argument\n* New function\
      \ string randString(optional int length, optional coerce string prefix)\n* MultiPart\
      \ divider string is now more unique (prevents potential issues with the content\
      \ data)\n* Empty multipart items are never added\n* Made more support functions\
      \ public\n* New utility function string timestampToString(int timestamp, optional\
      \ string Timezone, optional string format) that will convert a UNIX timestamp\
      \ to a string (RFC 1123, RFC 1036, RFC 2822, ANSI C asctime formats supported)\n\
      * Fixed potentional issues with timestamps and cookies\n\n===Version 4 release\
      \ notes===\n*  Various small bugfixes\n* Redone the redirection processing,\
      \ now with better support for each redirection type\n* New variable HttpSock.bRfcCompliantRedirect,\
      \ set this to false for the old, and bad, redirection handling on 301/302 headers\
      \ (e.g. transform POST into GET)\n* Moved DNS caching to a global object, multiple\
      \ HttpSock classes now use the same cache data\n* Added automatic retrying when\
      \ authentication data is provided in the url, the prefered method for using\
      \ authenticated locations is to provide the username and password in the url\
      \ or set them in the currenturl after the OnRequireAuthorization() was received.\
      \ Can be disabled by setting HttpSock.bAutoAuthenticate to false\n* HttpSock.ClearRequestData()\
      \ will now automatically clear authentication information\n* NewsFeed properly\
      \ reads CDATA\n* NewsFeed description fields are truncated to 512 bytes (because\
      \ of a bug in the engine). Set NewsFeed.bSizeBugFix to false to disable it.\n\
      * URL parsing is now done by HttpUtil and stores it in a new xURL struct, all\
      \ old references to storage of the location and host have been changed to xURL.\n\
      * Fixed a couple of bugs in cookie handler, the first cookie was never properly\
      \ unset\n* Fixed a bug where the last line of data may not be properly added\
      \ to the result array\n* Moved the HttpTest class to a UsUnit test suite\n*\
      \ Fixed HttpSock.GetReturnHeader()\n* Added a new class HttpCache that manages\
      \ cached requests, this is somewhat experimental\n* Usernames and passwords\
      \ on the URL are now properly decoded before they're used.\n\n==Discussion==\n\
      \n'''MythOpus:'''El Muerte, how reliable would LipHTTP be for downloading/saving\
      \ LOTS of information at a given time?\n\n'''El Muerte:''' define lots? LibHTTP\
      \ is reliable as in, it downloads all the data and stores each line into the\
      \ result array. So, it's more of an issue how reliable a dynamic array is. And\
      \ there might be an issue with string length (e.g. >4k strings) but I guess\
      \ you'll have to test that yourself. Anyway, there is a delegate in HttpSock\
      \ that'll allow you do process the result data before it's stored in the array\
      \ (see <tt>OnResponseBody</tt>).\n\n'''MythOpus:''' Well, I did do a few tests\
      \ and found that it doesn't handle my blog very well lol.  I am thinking about\
      \ starting a new project that will require all players to get lots of data from\
      \ the server.  This data might include usernames and passwords, game stats,\
      \ current game status, as well as journal entries, poems, stories and, if I\
      \ can get it to download it properly, pictures.  Most players would have to\
      \ download a good portion of this data when they first connect to the server.\
      \  At that point they would probably have to login.\n\n'''El Muerte:''' Pictures?\
      \ You are aware that you can't do much with binary data right?\n\n'''MythOpus:'''\
      \ Well, I was just thinking that perhaps I could make a picture system.  A player\
      \ could 'draw' a picture in the game and save it and it would save the picture\
      \ data to a server and when the player wanted to look at it, it would call up\
      \ that data later and organize it and then display it.  A serious of number\
      \ to show pixel location/color etc.\n\n'''MythOpus:''' I've been messing around\
      \ a bit with the NewsFeed class and I can't see to figure out how to get the\
      \ actual content in the RSS out and display it in something like a text field.\n\
      \n'''El Muerte:''' check out the code of MutRSS ( [http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExtClientB/Classes/RSSFeedRecord.uc?rev=1.3\
      \ 1] and [http://el-muerte.student.utwente.nl/cgi-bin/cvsweb/UT2004/ServerExt/Classes/MutRSS.uc?rev=1.27\
      \ 2] )\n\n[[Category:Legacy Custom Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 4224
name: "Legacy:LibHTTP"
revision:
  revid: 4224
  parentid: 4225
  user: "Sweavo"
  timestamp: 1195485234.000000000
  comment: "*"
timestamp: 1668764772.255011000
