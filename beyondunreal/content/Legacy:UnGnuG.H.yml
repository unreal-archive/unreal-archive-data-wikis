---
parse:
  title: "Legacy:UnGnuG.H"
  text:
    text: "<p>See <a href=\"/Legacy:Native_Coding_On_Linux\" title=\"Legacy:Native\
      \ Coding On Linux\">Native Coding On Linux</a> for information on how to use\
      \ this headerfile.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      coMULTI\">/*=============================================================================\n\
      \tUnGnuG.h: Unreal definitions for Gnu G++. Unfinished. Unsupported.\n\tCopyright\
      \ 1997-1999 Epic Games, Inc. All Rights Reserved.\n=============================================================================*/</span>\n\
      \ \n<span class=\"coMULTI\">/*----------------------------------------------------------------------------\n\
      \tPlatform compiler definitions.\n----------------------------------------------------------------------------*/</span>\n\
      \ \n<span class=\"co2\">#ifdef __LINUX_X86__</span>\n\t<span class=\"co2\">#define\
      \ __UNIX__  1</span>\n\t<span class=\"co2\">#define __LINUX__ 1</span>\n\t<span\
      \ class=\"co2\">#define __INTEL__ 1</span>\n\t<span class=\"co2\">#define __INTEL_BYTE_ORDER__\
      \ 1</span>\n\t<span class=\"co2\">#undef ASM</span>\n\t<span class=\"co2\">#undef\
      \ ASM3DNOW</span>\n\t<span class=\"co2\">#undef ASMKNI</span>\n\t<span class=\"\
      co2\">#define ASMLINUX 1</span>\n<span class=\"co2\">#else</span>\n\t<span class=\"\
      co2\">#error Unsupported platform.</span>\n<span class=\"co2\">#endif</span>\n\
      \ \n<span class=\"co1\">// Stack control.</span>\n<span class=\"co2\">#include\
      \ &lt;sys/wait.h&gt;</span>\n<span class=\"co2\">#include &lt;signal.h&gt;</span>\n\
      <span class=\"co2\">#include &lt;setjmp.h&gt;</span>\n<span class=\"kw1\">class</span>\
      \ __Context\n<span class=\"br0\">{</span>\n<span class=\"kw1\">public</span>:\n\
      \t__Context<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      br0\">{</span> Last <span class=\"sy0\">=</span> Env; <span class=\"br0\">}</span>\n\
      \t~__Context<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      br0\">{</span> Env <span class=\"sy0\">=</span> Last; <span class=\"br0\">}</span>\n\
      \t<span class=\"kw1\">static</span> void StaticInit<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw1\">static</span> jmp_buf Env;\n\
      \ \n<span class=\"kw1\">protected</span>:\n\t<span class=\"kw1\">static</span>\
      \ void HandleSignal<span class=\"br0\">(</span> <span class=\"kw5\">int</span>\
      \ Sig <span class=\"br0\">)</span>;\n\t<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">struct</span> sigaction Act_SIGHUP;\n\t<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">struct</span> sigaction Act_SIGQUIT;\n\t<span class=\"\
      kw1\">static</span> <span class=\"kw1\">struct</span> sigaction Act_SIGILL;\n\
      \t<span class=\"kw1\">static</span> <span class=\"kw1\">struct</span> sigaction\
      \ Act_SIGTRAP;\n\t<span class=\"kw1\">static</span> <span class=\"kw1\">struct</span>\
      \ sigaction Act_SIGIOT;\n\t<span class=\"kw1\">static</span> <span class=\"\
      kw1\">struct</span> sigaction Act_SIGBUS;\n\t<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">struct</span> sigaction Act_SIGFPE;\n\t<span class=\"\
      kw1\">static</span> <span class=\"kw1\">struct</span> sigaction Act_SIGSEGV;\n\
      \t<span class=\"kw1\">static</span> <span class=\"kw1\">struct</span> sigaction\
      \ Act_SIGTERM;\n\tjmp_buf Last;\n<span class=\"br0\">}</span>;\n \n<span class=\"\
      coMULTI\">/*----------------------------------------------------------------------------\n\
      \tPlatform specifics types and defines.\n----------------------------------------------------------------------------*/</span>\n\
      \ \n<span class=\"co1\">// Undo any Windows defines.</span>\n<span class=\"\
      co2\">#undef BYTE</span>\n<span class=\"co2\">#undef WORD</span>\n<span class=\"\
      co2\">#undef DWORD</span>\n<span class=\"co2\">#undef INT</span>\n<span class=\"\
      co2\">#undef FLOAT</span>\n<span class=\"co2\">#undef MAXBYTE</span>\n<span\
      \ class=\"co2\">#undef MAXWORD</span>\n<span class=\"co2\">#undef MAXDWORD</span>\n\
      <span class=\"co2\">#undef MAXINT</span>\n<span class=\"co2\">#undef VOID</span>\n\
      <span class=\"co2\">#undef CDECL</span>\n \n<span class=\"co1\">// Make sure\
      \ HANDLE is defined.</span>\n<span class=\"co2\">#define HANDLE DWORD</span>\n\
      <span class=\"co2\">#define HINSTANCE DWORD</span>\n \n<span class=\"co1\">//\
      \ Sizes.</span>\n<span class=\"kw1\">enum</span> <span class=\"br0\">{</span>DEFAULT_ALIGNMENT\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> <span class=\"br0\"\
      >}</span>; <span class=\"co1\">// Default boundary to align memory allocations\
      \ on.</span>\n<span class=\"kw1\">enum</span> <span class=\"br0\">{</span>CACHE_LINE_SIZE\
      \   <span class=\"sy0\">=</span> <span class=\"nu0\">32</span><span class=\"\
      br0\">}</span>; <span class=\"co1\">// Cache line size.</span>\n<span class=\"\
      co2\">#define GCC_PACK(n) __attribute__((packed,aligned(n)))</span>\n \n<span\
      \ class=\"co1\">// Optimization macros</span>\n<span class=\"co2\">#define DISABLE_OPTIMIZATION</span>\n\
      <span class=\"co2\">#define ENABLE_OPTIMIZATION</span>\n \n<span class=\"co1\"\
      >// Function type macros.</span>\n<span class=\"co2\">#define DLL_IMPORT</span>\n\
      <span class=\"co2\">#define DLL_EXPORT\t\t\textern \"C\"</span>\n<span class=\"\
      co2\">#define DLL_EXPORT_CLASS</span>\n<span class=\"co2\">#define VARARGS</span>\n\
      <span class=\"co2\">#define CDECL</span>\n<span class=\"co2\">#define STDCALL</span>\n\
      <span class=\"co2\">#define FORCEINLINE /* Force code to be inline */</span>\n\
      <span class=\"co2\">#define ZEROARRAY 0 /* Zero-length arrays in structs */</span>\n\
      <span class=\"co2\">#define __cdecl</span>\n \n<span class=\"co1\">// Variable\
      \ arguments.</span>\n<span class=\"co2\">#define GET_VARARGS(msg,len,fmt)\t\\\
      </span>\n<span class=\"br0\">{</span>\t\\\n\tva_list ArgPtr;\t\\\n\tva_start<span\
      \ class=\"br0\">(</span> ArgPtr, fmt <span class=\"br0\">)</span>;\t\\\n\tvsprintf<span\
      \ class=\"br0\">(</span> msg, fmt, ArgPtr <span class=\"br0\">)</span>;\t\\\n\
      \tva_end<span class=\"br0\">(</span> ArgPtr <span class=\"br0\">)</span>;\t\\\
      \n<span class=\"br0\">}</span>\n \n<span class=\"co2\">#define GET_VARARGS_RESULT(msg,len,fmt,result)\t\
      \\</span>\n<span class=\"br0\">{</span>\t\\\n\tva_list ArgPtr;\t\\\n\tva_start<span\
      \ class=\"br0\">(</span> ArgPtr, fmt <span class=\"br0\">)</span>;\t\\\n\tresult\
      \ <span class=\"sy0\">=</span> vsprintf<span class=\"br0\">(</span> msg, fmt,\
      \ ArgPtr <span class=\"br0\">)</span>;\t\\\n\tva_end<span class=\"br0\">(</span>\
      \ ArgPtr <span class=\"br0\">)</span>;\t\\\n<span class=\"br0\">}</span>\n \n\
      <span class=\"co1\">// Compiler name.</span>\n<span class=\"co2\">#define COMPILER\
      \ \"Compiled with GNU g++ (\"__VERSION__\")\"</span>\n \n<span class=\"co1\"\
      >// Unsigned base types.</span>\ntypedef unsigned <span class=\"kw5\">char</span>\t\
      \t<span class=\"kw5\">BYTE</span>;\t\t<span class=\"co1\">// 8-bit  unsigned.</span>\n\
      typedef unsigned short\t\t_WORD;\t\t<span class=\"co1\">// 16-bit unsigned.</span>\n\
      typedef unsigned <span class=\"kw5\">int</span>\t\tDWORD;\t\t<span class=\"\
      co1\">// 32-bit unsigned.</span>\ntypedef unsigned long long\tQWORD;\t\t<span\
      \ class=\"co1\">// 64-bit unsigned.</span>\n \n<span class=\"co1\">// Signed\
      \ base types.</span>\ntypedef\tsigned <span class=\"kw5\">char</span>\t\t\t\
      SBYTE;\t\t<span class=\"co1\">// 8-bit  signed.</span>\ntypedef signed short\t\
      \tSWORD;\t\t<span class=\"co1\">// 16-bit signed.</span>\ntypedef signed <span\
      \ class=\"kw5\">int</span>  \t\t<span class=\"kw5\">INT</span>;\t\t<span class=\"\
      co1\">// 32-bit signed.</span>\ntypedef signed long long\tSQWORD;\t\t<span class=\"\
      co1\">// 64-bit signed.</span>\n \n<span class=\"co1\">// Character types.</span>\n\
      typedef <span class=\"kw5\">char</span>\t\t\t    ANSICHAR;\t<span class=\"co1\"\
      >// An ANSI character.</span>\ntypedef unsigned short      UNICHAR;\t<span class=\"\
      co1\">// A unicode character.</span>\ntypedef unsigned <span class=\"kw5\">char</span>\t\
      \tANSICHARU;\t<span class=\"co1\">// An ANSI character.</span>\ntypedef unsigned\
      \ short      UNICHARU;\t<span class=\"co1\">// A unicode character.</span>\n\
      \ \n<span class=\"co1\">// Other base types.</span>\ntypedef signed <span class=\"\
      kw5\">int</span>\t\t\tUBOOL;\t\t<span class=\"co1\">// Boolean 0 (false) or\
      \ 1 (true).</span>\ntypedef <span class=\"kw5\">float</span>\t\t\t\t<span class=\"\
      kw5\">FLOAT</span>;\t\t<span class=\"co1\">// 32-bit IEEE floating point.</span>\n\
      typedef <span class=\"kw5\">double</span>\t\t\t\t<span class=\"kw5\">DOUBLE</span>;\t\
      \t<span class=\"co1\">// 64-bit IEEE double.</span>\ntypedef unsigned <span\
      \ class=\"kw5\">int</span>        SIZE_T;     <span class=\"co1\">// Corresponds\
      \ to C SIZE_T.</span>\n \n<span class=\"co1\">// Bitfield type.</span>\ntypedef\
      \ unsigned <span class=\"kw5\">int</span>\t\tBITFIELD;\t<span class=\"co1\"\
      >// For bitfields.</span>\n \ntypedef unsigned <span class=\"kw5\">int</span>\
      \ size_t;\n \n<span class=\"co1\">// Make sure characters are unsigned.</span>\n\
      <span class=\"co2\">#ifdef __CHAR_UNSIGNED__</span>\n\t<span class=\"co2\">#error\
      \ \"Bad compiler option: Characters must be signed\"</span>\n<span class=\"\
      co2\">#endif</span>\n \n<span class=\"co1\">// Strings.</span>\n<span class=\"\
      co2\">#if __UNIX__</span>\n<span class=\"co2\">#define LINE_TERMINATOR TEXT(\"\
      \\n\")</span>\n<span class=\"co2\">#define PATH_SEPARATOR TEXT(\"/\")</span>\n\
      <span class=\"co2\">#define DLLEXT TEXT(\".so\")</span>\n<span class=\"co2\"\
      >#else</span>\n<span class=\"co2\">#define LINE_TERMINATOR TEXT(\"\\r\\n\")</span>\n\
      <span class=\"co2\">#define PATH_SEPARATOR TEXT(\"\\\\\")</span>\n<span class=\"\
      co2\">#define DLLEXT TEXT(\".dll\")</span>\n<span class=\"co2\">#endif</span>\n\
      \ \n<span class=\"co1\">// NULL.</span>\n<span class=\"co2\">#undef NULL</span>\n\
      <span class=\"co2\">#define NULL 0</span>\n \n<span class=\"co1\">// Package\
      \ implementation.</span>\n<span class=\"co2\">#define IMPLEMENT_PACKAGE_PLATFORM(pkgname)\
      \ \\</span>\n\textern <span class=\"st0\">\"C\"</span> <span class=\"br0\">{</span>HINSTANCE\
      \ hInstance;<span class=\"br0\">}</span> \\\n\t<span class=\"kw5\">BYTE</span>\
      \ GLoaded<span class=\"co2\">##pkgname;</span>\n \n<span class=\"co1\">// Platform\
      \ support options.</span>\n<span class=\"co2\">#define PLATFORM_NEEDS_ARRAY_NEW\
      \ 1</span>\n<span class=\"co2\">#define FORCE_ANSI_LOG           0</span>\n\
      \ \n<span class=\"co1\">// OS unicode function calling.</span>\n<span class=\"\
      co2\">#define TCHAR_CALL_OS(funcW,funcA) (funcA)</span>\n<span class=\"co2\"\
      >#define TCHAR_TO_ANSI(str) str</span>\n<span class=\"co2\">#define ANSI_TO_TCHAR(str)\
      \ str</span>\n \n<span class=\"co1\">// !! Fixme: This is a workaround.</span>\n\
      <span class=\"co2\">#define GCC_OPT_INLINE</span>\n \n<span class=\"co1\">//\
      \ Memory</span>\n<span class=\"co2\">#define appAlloca(size) alloca((size+7)&amp;~7)</span>\n\
      \ \nextern CORE_API UBOOL GTimestamp;\nCORE_API extern\t<span class=\"kw5\"\
      >FLOAT</span> GSecondsPerCycle;\n \n<span class=\"co1\">//</span>\n<span class=\"\
      co1\">// Round a floating point number to an integer.</span>\n<span class=\"\
      co1\">// Note that (int+.5) is rounded to (int+1).</span>\n<span class=\"co1\"\
      >//</span>\n<span class=\"co2\">#define DEFINED_appRound 1</span>\ninline <span\
      \ class=\"kw5\">INT</span> appRound<span class=\"br0\">(</span> <span class=\"\
      kw5\">FLOAT</span> F <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw2\">return</span> <span class=\"br0\">(</span><span class=\"\
      kw5\">INT</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"co1\"\
      >//</span>\n<span class=\"co1\">// Converts to integer equal to or less than.</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co2\">#define DEFINED_appFloor\
      \ 1</span>\ninline <span class=\"kw5\">INT</span> appFloor<span class=\"br0\"\
      >(</span> <span class=\"kw5\">FLOAT</span> F <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">static</span> <span class=\"\
      kw5\">FLOAT</span> Half<span class=\"sy0\">=</span><span class=\"nu0\">0.5</span>;\n\
      \t<span class=\"kw2\">return</span> <span class=\"br0\">(</span><span class=\"\
      kw5\">INT</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F <span\
      \ class=\"sy0\">-</span> Half<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">//</span>\n<span class=\"co1\">// CPU cycles,\
      \ related to GSecondsPerCycle.</span>\n<span class=\"co1\">//</span>\n<span\
      \ class=\"co2\">#define DEFINED_appCycles 1</span>\ninline DWORD appCycles<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw2\">if</span><span class=\"br0\">(</span> GTimestamp <span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tDWORD r;\n\t\t\
      asm<span class=\"br0\">(</span><span class=\"st0\">\"rdtsc\"</span> : <span\
      \ class=\"st0\">\"=a\"</span> <span class=\"br0\">(</span>r<span class=\"br0\"\
      >)</span> : <span class=\"st0\">\"d\"</span> <span class=\"br0\">(</span>r<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\"\
      >return</span> r;\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">//</span>\n<span class=\"co1\">// Memory copy.</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co2\">#define DEFINED_appMemcpy\
      \ 1</span>\ninline void appMemcpy<span class=\"br0\">(</span> void<span class=\"\
      sy0\">*</span> Dest, <span class=\"kw1\">const</span> void<span class=\"sy0\"\
      >*</span> Src, <span class=\"kw5\">INT</span> Count <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\tasm volatile<span class=\"br0\">(</span><span\
      \ class=\"st0\">\"\n\t\tpushl %%ebx;\n\t\tpushl %%ecx;\n\t\tpushl %%esi;\n\t\
      \tpushl %%edi;\n\t\tmov %%ecx, %%ebx;\n\t\tshr $2, %%ecx;\n\t\tand $3, %%ebx;\n\
      \t\trep;\n\t\tmovsl;\n\t\tmov %%ebx, %%ecx;\n\t\trep;\n\t\tmovsb;\n\t\tpopl\
      \ %%edi;\n\t\tpopl %%esi;\n\t\tpopl %%ecx;\n\t\tpopl %%ebx;\n\t\"</span>\n\t\
      :\n\t: <span class=\"st0\">\"S\"</span> <span class=\"br0\">(</span>Src<span\
      \ class=\"br0\">)</span>,\n\t  <span class=\"st0\">\"D\"</span> <span class=\"\
      br0\">(</span>Dest<span class=\"br0\">)</span>,\n\t  <span class=\"st0\">\"\
      c\"</span> <span class=\"br0\">(</span>Count<span class=\"br0\">)</span>\n\t\
      <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">//</span>\n<span class=\"co1\">// Memory zero.</span>\n<span class=\"\
      co1\">//</span>\n<span class=\"co2\">#define DEFINED_appMemzero 1</span>\ninline\
      \ void appMemzero<span class=\"br0\">(</span> void<span class=\"sy0\">*</span>\
      \ Dest, <span class=\"kw5\">INT</span> Count <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\tmemset<span class=\"br0\">(</span> Dest, <span\
      \ class=\"nu0\">0</span>, Count <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"coMULTI\">/*----------------------------------------------------------------------------\n\
      \tGlobals.\n----------------------------------------------------------------------------*/</span>\n\
      \ \n<span class=\"co1\">// System identification.</span>\nextern <span class=\"\
      st0\">\"C\"</span>\n<span class=\"br0\">{</span>\n\textern HINSTANCE      hInstance;\n\
      \textern CORE_API UBOOL GIsMMX;\n\textern CORE_API UBOOL GIsPentiumPro;\n\t\
      extern CORE_API UBOOL GIsKatmai;\n\textern CORE_API UBOOL GIsK6;\n\textern CORE_API\
      \ UBOOL GIs3DNow;\n\textern CORE_API UBOOL GTimestamp;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"co1\">// Module name</span>\nextern ANSICHAR GModule<span\
      \ class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span>;\n\
      \ \n<span class=\"coMULTI\">/*----------------------------------------------------------------------------\n\
      \ \n\tThe End.\n----------------------------------------------------------------------------*/</span></pre></div>\n\
      </div>\n<hr />\n<p><b>El Muerte TDS:</b> Intresting header, but why here&#160;?</p>\n\
      <p><b>Mr.Mitchell:</b> It is related to <a href=\"/Legacy:Native_Coding_On_Linux\"\
      \ title=\"Legacy:Native Coding On Linux\">Native Coding On Linux</a>, as far\
      \ as I understand you need it to compile UT native mods on Linux</p>\n\n<!--\
      \ \nNewPP limit report\nCPU time usage: 0.093 seconds\nReal time usage: 0.449\
      \ seconds\nPreprocessor visited node count: 4/1000000\nPreprocessor generated\
      \ node count: 24/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3376-0!*!0!*!*!*!* and timestamp 20221118160727 and revision\
      \ id 8708\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Native Coding On Linux"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:UnGnuG.H"
  iwlinks: []
  wikitext:
    text: "See [[Legacy:Native Coding On Linux|Native Coding On Linux]] for information\
      \ on how to use this headerfile.\n\n<uscript>\n/*=============================================================================\n\
      \tUnGnuG.h: Unreal definitions for Gnu G++. Unfinished. Unsupported.\n\tCopyright\
      \ 1997-1999 Epic Games, Inc. All Rights Reserved.\n=============================================================================*/\n\
      \n/*----------------------------------------------------------------------------\n\
      \tPlatform compiler definitions.\n----------------------------------------------------------------------------*/\n\
      \n#ifdef __LINUX_X86__\n\t#define __UNIX__  1\n\t#define __LINUX__ 1\n\t#define\
      \ __INTEL__ 1\n\t#define __INTEL_BYTE_ORDER__ 1\n\t#undef ASM\n\t#undef ASM3DNOW\n\
      \t#undef ASMKNI\n\t#define ASMLINUX 1\n#else\n\t#error Unsupported platform.\n\
      #endif\n\n// Stack control.\n#include <sys/wait.h>\n#include <signal.h>\n#include\
      \ <setjmp.h>\nclass __Context\n{\npublic:\n\t__Context() { Last = Env; }\n\t\
      ~__Context() { Env = Last; }\n\tstatic void StaticInit();\n\tstatic jmp_buf\
      \ Env;\n\nprotected:\n\tstatic void HandleSignal( int Sig );\n\tstatic struct\
      \ sigaction Act_SIGHUP;\n\tstatic struct sigaction Act_SIGQUIT;\n\tstatic struct\
      \ sigaction Act_SIGILL;\n\tstatic struct sigaction Act_SIGTRAP;\n\tstatic struct\
      \ sigaction Act_SIGIOT;\n\tstatic struct sigaction Act_SIGBUS;\n\tstatic struct\
      \ sigaction Act_SIGFPE;\n\tstatic struct sigaction Act_SIGSEGV;\n\tstatic struct\
      \ sigaction Act_SIGTERM;\n\tjmp_buf Last;\n};\n\n/*----------------------------------------------------------------------------\n\
      \tPlatform specifics types and defines.\n----------------------------------------------------------------------------*/\n\
      \n// Undo any Windows defines.\n#undef BYTE\n#undef WORD\n#undef DWORD\n#undef\
      \ INT\n#undef FLOAT\n#undef MAXBYTE\n#undef MAXWORD\n#undef MAXDWORD\n#undef\
      \ MAXINT\n#undef VOID\n#undef CDECL\n\n// Make sure HANDLE is defined.\n#define\
      \ HANDLE DWORD\n#define HINSTANCE DWORD\n\n// Sizes.\nenum {DEFAULT_ALIGNMENT\
      \ = 8 }; // Default boundary to align memory allocations on.\nenum {CACHE_LINE_SIZE\
      \   = 32}; // Cache line size.\n#define GCC_PACK(n) __attribute__((packed,aligned(n)))\n\
      \n// Optimization macros\n#define DISABLE_OPTIMIZATION\n#define ENABLE_OPTIMIZATION\n\
      \n// Function type macros.\n#define DLL_IMPORT\n#define DLL_EXPORT\t\t\textern\
      \ \"C\"\n#define DLL_EXPORT_CLASS\n#define VARARGS\n#define CDECL\n#define STDCALL\n\
      #define FORCEINLINE /* Force code to be inline */\n#define ZEROARRAY 0 /* Zero-length\
      \ arrays in structs */\n#define __cdecl\n\n// Variable arguments.\n#define GET_VARARGS(msg,len,fmt)\t\
      \\\n{\t\\\n\tva_list ArgPtr;\t\\\n\tva_start( ArgPtr, fmt );\t\\\n\tvsprintf(\
      \ msg, fmt, ArgPtr );\t\\\n\tva_end( ArgPtr );\t\\\n}\n\n#define GET_VARARGS_RESULT(msg,len,fmt,result)\t\
      \\\n{\t\\\n\tva_list ArgPtr;\t\\\n\tva_start( ArgPtr, fmt );\t\\\n\tresult =\
      \ vsprintf( msg, fmt, ArgPtr );\t\\\n\tva_end( ArgPtr );\t\\\n}\n\n// Compiler\
      \ name.\n#define COMPILER \"Compiled with GNU g++ (\"__VERSION__\")\"\n\n//\
      \ Unsigned base types.\ntypedef unsigned char\t\tBYTE;\t\t// 8-bit  unsigned.\n\
      typedef unsigned short\t\t_WORD;\t\t// 16-bit unsigned.\ntypedef unsigned int\t\
      \tDWORD;\t\t// 32-bit unsigned.\ntypedef unsigned long long\tQWORD;\t\t// 64-bit\
      \ unsigned.\n\n// Signed base types.\ntypedef\tsigned char\t\t\tSBYTE;\t\t//\
      \ 8-bit  signed.\ntypedef signed short\t\tSWORD;\t\t// 16-bit signed.\ntypedef\
      \ signed int  \t\tINT;\t\t// 32-bit signed.\ntypedef signed long long\tSQWORD;\t\
      \t// 64-bit signed.\n\n// Character types.\ntypedef char\t\t\t    ANSICHAR;\t\
      // An ANSI character.\ntypedef unsigned short      UNICHAR;\t// A unicode character.\n\
      typedef unsigned char\t\tANSICHARU;\t// An ANSI character.\ntypedef unsigned\
      \ short      UNICHARU;\t// A unicode character.\n\n// Other base types.\ntypedef\
      \ signed int\t\t\tUBOOL;\t\t// Boolean 0 (false) or 1 (true).\ntypedef float\t\
      \t\t\tFLOAT;\t\t// 32-bit IEEE floating point.\ntypedef double\t\t\t\tDOUBLE;\t\
      \t// 64-bit IEEE double.\ntypedef unsigned int        SIZE_T;     // Corresponds\
      \ to C SIZE_T.\n\n// Bitfield type.\ntypedef unsigned int\t\tBITFIELD;\t// For\
      \ bitfields.\n\ntypedef unsigned int size_t;\n\n// Make sure characters are\
      \ unsigned.\n#ifdef __CHAR_UNSIGNED__\n\t#error \"Bad compiler option: Characters\
      \ must be signed\"\n#endif\n\n// Strings.\n#if __UNIX__\n#define LINE_TERMINATOR\
      \ TEXT(\"\\n\")\n#define PATH_SEPARATOR TEXT(\"/\")\n#define DLLEXT TEXT(\"\
      .so\")\n#else\n#define LINE_TERMINATOR TEXT(\"\\r\\n\")\n#define PATH_SEPARATOR\
      \ TEXT(\"\\\\\")\n#define DLLEXT TEXT(\".dll\")\n#endif\n\n// NULL.\n#undef\
      \ NULL\n#define NULL 0\n\n// Package implementation.\n#define IMPLEMENT_PACKAGE_PLATFORM(pkgname)\
      \ \\\n\textern \"C\" {HINSTANCE hInstance;} \\\n\tBYTE GLoaded##pkgname;\n\n\
      // Platform support options.\n#define PLATFORM_NEEDS_ARRAY_NEW 1\n#define FORCE_ANSI_LOG\
      \           0\n\n// OS unicode function calling.\n#define TCHAR_CALL_OS(funcW,funcA)\
      \ (funcA)\n#define TCHAR_TO_ANSI(str) str\n#define ANSI_TO_TCHAR(str) str\n\n\
      // !! Fixme: This is a workaround.\n#define GCC_OPT_INLINE\n\n// Memory\n#define\
      \ appAlloca(size) alloca((size+7)&~7)\n\nextern CORE_API UBOOL GTimestamp;\n\
      CORE_API extern\tFLOAT GSecondsPerCycle;\n\n//\n// Round a floating point number\
      \ to an integer.\n// Note that (int+.5) is rounded to (int+1).\n//\n#define\
      \ DEFINED_appRound 1\ninline INT appRound( FLOAT F )\n{\n\treturn (INT)(F);\n\
      }\n\n//\n// Converts to integer equal to or less than.\n//\n#define DEFINED_appFloor\
      \ 1\ninline INT appFloor( FLOAT F )\n{\n\tstatic FLOAT Half=0.5;\n\treturn (INT)(F\
      \ - Half);\n}\n\n//\n// CPU cycles, related to GSecondsPerCycle.\n//\n#define\
      \ DEFINED_appCycles 1\ninline DWORD appCycles()\n{\n\tif( GTimestamp )\n\t{\n\
      \t\tDWORD r;\n\t\tasm(\"rdtsc\" : \"=a\" (r) : \"d\" (r));\n\t\treturn r;\n\t\
      }\n}\n\n//\n// Memory copy.\n//\n#define DEFINED_appMemcpy 1\ninline void appMemcpy(\
      \ void* Dest, const void* Src, INT Count )\n{\n\tasm volatile(\"\n\t\tpushl\
      \ %%ebx;\n\t\tpushl %%ecx;\n\t\tpushl %%esi;\n\t\tpushl %%edi;\n\t\tmov %%ecx,\
      \ %%ebx;\n\t\tshr $2, %%ecx;\n\t\tand $3, %%ebx;\n\t\trep;\n\t\tmovsl;\n\t\t\
      mov %%ebx, %%ecx;\n\t\trep;\n\t\tmovsb;\n\t\tpopl %%edi;\n\t\tpopl %%esi;\n\t\
      \tpopl %%ecx;\n\t\tpopl %%ebx;\n\t\"\n\t:\n\t: \"S\" (Src),\n\t  \"D\" (Dest),\n\
      \t  \"c\" (Count)\n\t);\n}\n\n//\n// Memory zero.\n//\n#define DEFINED_appMemzero\
      \ 1\ninline void appMemzero( void* Dest, INT Count )\n{\n\tmemset( Dest, 0,\
      \ Count );\n}\n\n/*----------------------------------------------------------------------------\n\
      \tGlobals.\n----------------------------------------------------------------------------*/\n\
      \n// System identification.\nextern \"C\"\n{\n\textern HINSTANCE      hInstance;\n\
      \textern CORE_API UBOOL GIsMMX;\n\textern CORE_API UBOOL GIsPentiumPro;\n\t\
      extern CORE_API UBOOL GIsKatmai;\n\textern CORE_API UBOOL GIsK6;\n\textern CORE_API\
      \ UBOOL GIs3DNow;\n\textern CORE_API UBOOL GTimestamp;\n}\n\n// Module name\n\
      extern ANSICHAR GModule[32];\n\n/*----------------------------------------------------------------------------\n\
      \n\tThe End.\n----------------------------------------------------------------------------*/\n\
      </uscript>\n\n----\n\n'''El Muerte TDS:''' Intresting header, but why here ?\n\
      \n'''Mr.Mitchell:''' It is related to [[Legacy:Native Coding On Linux|Native\
      \ Coding On Linux]], as far as I understand you need it to compile UT native\
      \ mods on Linux"
  properties: []
  revId: 8708
name: "Legacy:UnGnuG.H"
revision:
  revid: 8708
  parentid: 8709
  user: "Mr.Mitchell"
  timestamp: 1065799515.000000000
  comment: "*"
timestamp: 1668787496.868178000
