---
parse:
  title: "Legacy:UnrealScript Lessons"
  text:
    text: "<p>This is a page aimed at newcomers to UnrealScript. Head over to <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a> for a\
      \ full reference. Readers of this page are invited to create pages, suggest\
      \ ideas for topics or expand on what is already here.</p>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#Introductions\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Introductions</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Tutorials_.28UT3.29\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Tutorials (UT3)</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Tutorials_.282003.2F2004.29\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Tutorials (2003/2004)</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#UnrealScript_Installation\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">UnrealScript Installation</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Simple_mutators\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">Simple mutators</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#More_complex_mutators\"><span\
      \ class=\"tocnumber\">3.3</span> <span class=\"toctext\">More complex mutators</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Class-based_mutators.2Fgametypes\"\
      ><span class=\"tocnumber\">3.4</span> <span class=\"toctext\">Class-based mutators/gametypes</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Replication\"><span class=\"\
      tocnumber\">3.5</span> <span class=\"toctext\">Replication</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Other\"><span class=\"tocnumber\"\
      >3.6</span> <span class=\"toctext\">Other</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-10\"><a href=\"#Tutorials_.28UT.29\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Tutorials (UT)</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#1._Mutators\"><span class=\"\
      tocnumber\">4.1</span> <span class=\"toctext\">1. Mutators</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#2._Weapons\"><span class=\"\
      tocnumber\">4.2</span> <span class=\"toctext\">2. Weapons</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-13\"><a href=\"#Class_tutorials\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">Class tutorials</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-14\"><a href=\"#Understanding_Existing_Unreal_Code\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Understanding Existing\
      \ Unreal Code</span></a></li>\n<li class=\"toclevel-1 tocsection-15\"><a href=\"\
      #Unreal_Specific_Objects\"><span class=\"tocnumber\">7</span> <span class=\"\
      toctext\">Unreal Specific Objects</span></a></li>\n<li class=\"toclevel-1 tocsection-16\"\
      ><a href=\"#When_You_Get_Stuck\"><span class=\"tocnumber\">8</span> <span class=\"\
      toctext\">When You Get Stuck</span></a></li>\n<li class=\"toclevel-1 tocsection-17\"\
      ><a href=\"#Building_on_Previous_Experience\"><span class=\"tocnumber\">9</span>\
      \ <span class=\"toctext\">Building on Previous Experience</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-18\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-19\"><a href=\"#Lessons_in_progress\"><span\
      \ class=\"tocnumber\">11</span> <span class=\"toctext\">Lessons in progress</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-20\"><a href=\"#Requests\"><span class=\"\
      tocnumber\">12</span> <span class=\"toctext\">Requests</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-21\"><a href=\"#Powerups\"><span class=\"tocnumber\"\
      >12.1</span> <span class=\"toctext\">Powerups</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-22\"><a href=\"#Grudge_Mutator\"><span class=\"tocnumber\"\
      >12.2</span> <span class=\"toctext\">Grudge Mutator</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-23\"><a href=\"#Discussion\"><span\
      \ class=\"tocnumber\">13</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Introductions\"\
      >Introductions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=1\" title=\"Edit\
      \ section: Introductions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>These pages cover some of background knowledge you'll need before you begin.</p>\n\
      <ul>\n<li><a href=\"/Legacy:Unreal_Engine_Core\" title=\"Legacy:Unreal Engine\
      \ Core\">Unreal Engine Core</a> – Describes how Unreal is setup so it can be\
      \ modified</li>\n<li><a href=\"/Legacy:Object_Oriented_Programming_Overview\"\
      \ title=\"Legacy:Object Oriented Programming Overview\">Object Oriented Programming\
      \ Overview</a> – Describes OOP as the method used to modify and control all\
      \ aspects of Unreal. You should read this if you never used an OOP language\
      \ (like Java).</li>\n<li><a href=\"/Legacy:Unreal_Object_Oriented_Programming\"\
      \ title=\"Legacy:Unreal Object Oriented Programming\">Unreal Object Oriented\
      \ Programming</a> – How Unreal specifically defines OOP. This is where the rubber\
      \ meets the road.</li>\n<li><a href=\"/Legacy:UnrealScript_For_Non-Programmers\"\
      \ title=\"Legacy:UnrealScript For Non-Programmers\">UnrealScript For Non-Programmers</a>\
      \ – Never programmed before? You need to start somewhere. Start here.</li>\n\
      <li><a href=\"/Legacy:New_UnrealScript_In_UT3\" title=\"Legacy:New UnrealScript\
      \ In UT3\" class=\"mw-redirect\">New UnrealScript in UT3</a> – Read this if\
      \ you already used UnrealScript in UnrealEngine 2 games and now want to code\
      \ for <a href=\"/Legacy:UT3\" title=\"Legacy:UT3\" class=\"mw-redirect\">UT3</a>\
      \ or other UnrealEngine 3 games.</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Tutorials_.28UT3.29\">Tutorials (UT3)</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=2\"\
      \ title=\"Edit section: Tutorials (UT3)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>These tutorials are strictly for use with UT3. Generally,\
      \ scripting is pretty much the same as previous versions of the engine, but\
      \ there are a few differences.</p>\n<ol>\n<li><a href=\"/Legacy:UT3_Whats_What\"\
      \ title=\"Legacy:UT3 Whats What\">UT3 Whats What</a> – Getting ready to code\
      \ for UT3</li>\n<li><a href=\"/Legacy:UT3_Hello_World\" title=\"Legacy:UT3 Hello\
      \ World\">UT3 Hello World</a> – First Mutator in UT3</li>\n</ol>\n<h2><span\
      \ class=\"mw-headline\" id=\"Tutorials_.282003.2F2004.29\">Tutorials (2003/2004)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=3\" title=\"Edit section:\
      \ Tutorials (2003/2004)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This is a sequence of tutorials for Unreal Tournament 2003/2004. They're\
      \ arranged in order of increasing complexity, starting from the very first steps\
      \ in scripting. UT scripting tutorials are farther down.</p>\n<h3><span class=\"\
      mw-headline\" id=\"UnrealScript_Installation\">UnrealScript Installation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=4\" title=\"Edit section:\
      \ UnrealScript Installation\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li><a href=\"/Legacy:Setting_Up_UnrealScript\"\
      \ title=\"Legacy:Setting Up UnrealScript\">Setting Up UnrealScript</a> – Getting\
      \ everything set up ready to begin coding in Windows OS.</li>\n<li><a href=\"\
      /Legacy:Using_UCC_Under_Linux\" title=\"Legacy:Using UCC Under Linux\">Using\
      \ UCC Under Linux</a> – How to setup a friendly Unreal scripting environment\
      \ in Linux. (Unsupported)</li>\n</ol>\n<h3><span class=\"mw-headline\" id=\"\
      Simple_mutators\">Simple mutators</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=5\"\
      \ title=\"Edit section: Simple mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These start with the <i>extremely</i> simple. These\
      \ are all single classes, but there is considerable scope for modifying the\
      \ game once we get started.</p>\n<ol>\n<li><a href=\"/Legacy:UnrealScript_Hello_World\"\
      \ title=\"Legacy:UnrealScript Hello World\">UnrealScript Hello World</a> – The\
      \ absolute simplest piece of UnrealScript we could think of.</li>\n<li><a href=\"\
      /Legacy:MutTutorial\" title=\"Legacy:MutTutorial\">MutTutorial</a> – A simple\
      \ player jump boost mutator.</li>\n<li><a href=\"/Legacy:Modifying_Vehicle_Weapons\"\
      \ title=\"Legacy:Modifying Vehicle Weapons\">Modifying Vehicle Weapons</a> –\
      \ How to change the weapons on a vehicle.</li>\n<li><a href=\"/Legacy:Regen_Mutator\"\
      \ title=\"Legacy:Regen Mutator\">Regen Mutator</a> – A simple regenerating mutator\
      \ for UT2003 &amp; UT2004.</li>\n<li><a href=\"/Legacy:Modify_Mutator_Tutorial\"\
      \ title=\"Legacy:Modify Mutator Tutorial\">Modify Mutator Tutorial</a> – The\
      \ Cooler for UT2003.</li>\n<li><a href=\"/Legacy:Super_Arena_Mutator\" title=\"\
      Legacy:Super Arena Mutator\">Super Arena Mutator</a> – An intermediate gameplay\
      \ mutator for UT2003.</li>\n<li><a href=\"/Legacy:TheHealer\" title=\"Legacy:TheHealer\"\
      >TheHealer</a> – The Healer for UT2003.</li>\n<li><a href=\"/Legacy:Bulldog_Player\"\
      \ title=\"Legacy:Bulldog Player\">Bulldog Player</a> – A UT2003 tutorial for\
      \ creating a player that is a vehicle instead of a normal character.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"More_complex_mutators\">More complex\
      \ mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=6\" title=\"Edit\
      \ section: More complex mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These require more than a single class to implement.</p>\n\
      <ol>\n<li><a href=\"/Legacy:Power_Core_Volume_Control_Mutator\" title=\"Legacy:Power\
      \ Core Volume Control Mutator\">Power Core Volume Control Mutator</a> – A tutorial\
      \ on changing volume levels.</li>\n<li><a href=\"/Legacy:Weapon_Mutator_Tutorial\"\
      \ title=\"Legacy:Weapon Mutator Tutorial\">Weapon Mutator Tutorial</a> – Minigun\
      \ HE mutator.</li>\n<li><a href=\"/Legacy:MiceMenGrav_Mutator\" title=\"Legacy:MiceMenGrav\
      \ Mutator\">MiceMenGrav Mutator</a> – Uses Config and Gamerules.</li>\n<li><a\
      \ href=\"/Legacy:Adding_An_Adrenaline_Combo_With_A_Mutator\" title=\"Legacy:Adding\
      \ An Adrenaline Combo With A Mutator\">Adding an Adrenaline Combo With A Mutator</a>\
      \ – Tutorial on adding adrenaline combos in UT2004.</li>\n<li><a href=\"/Legacy:Fire_And_Forget_Self-Guided_Missile\"\
      \ title=\"Legacy:Fire And Forget Self-Guided Missile\">Fire and Forget Self-Guided\
      \ Missile</a> - Not a complete mutator, but contains a real working code.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"Class-based_mutators.2Fgametypes\"\
      >Class-based mutators/gametypes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=7\"\
      \ title=\"Edit section: Class-based mutators/gametypes\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<ol>\n<li><a href=\"/Legacy:RegularEngine/Player_Classes\"\
      \ title=\"Legacy:RegularEngine/Player Classes\">RegularEngine/Player_Classes</a>\
      \ – Overview of how Player Classes work within the <a href=\"/Legacy:RegularEngine\"\
      \ title=\"Legacy:RegularEngine\">RegularEngine</a> framework for UT2004. For\
      \ an older or alternate tutorial, see <a href=\"/Legacy:Making_A_Class-Based_Mod\"\
      \ title=\"Legacy:Making A Class-Based Mod\">Making A Class-Based Mod</a>.</li>\n\
      <li><a href=\"/Legacy:Spawning_Your_Own_Bot\" title=\"Legacy:Spawning Your Own\
      \ Bot\">Spawning Your Own Bot</a> – A intro to show you how to spawn and get\
      \ control of a bot. So that you can write your own customized AI-Controller</li>\n\
      <li><a href=\"/Legacy:Basic_AI_Scripting_Tutorial\" title=\"Legacy:Basic AI\
      \ Scripting Tutorial\">Basic AI Scripting Tutorial</a> – Recreating the NaliCow\
      \ NPC for UT2004, focusing on the custom AI.</li>\n</ol>\n<h3><span class=\"\
      mw-headline\" id=\"Replication\">Replication</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=8\"\
      \ title=\"Edit section: Replication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li><a href=\"/Legacy:Introduction_To_Replication\"\
      \ title=\"Legacy:Introduction To Replication\">Introduction To Replication</a>\
      \ – How objects sync with each other in online games.</li>\n<li><a href=\"/Legacy:ProjectileDestroyerVolume\"\
      \ title=\"Legacy:ProjectileDestroyerVolume\">ProjectileDestroyerVolume</a> –\
      \ (Needs description!).</li>\n</ol>\n<h3><span class=\"mw-headline\" id=\"Other\"\
      >Other</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=9\" title=\"Edit\
      \ section: Other\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <ol>\n<li><a href=\"/Legacy:Stat_Points_System\" title=\"Legacy:Stat Points\
      \ System\">Stat Points System</a> – Shows how to use stat points to change a\
      \ gun speed, ammo held, etc.</li>\n<li><a href=\"/Legacy:Using_The_Mod_System_In_UT2004\"\
      \ title=\"Legacy:Using The Mod System In UT2004\" class=\"mw-redirect\">Using\
      \ The Mod System In UT2004</a> – Shows how to use the mod system in ut2004 by\
      \ guiding you through a series of <a href=\"/Legacy:Basic_Procedure\" title=\"\
      Legacy:Basic Procedure\" class=\"mw-redirect\">basic procedure</a> type pages.</li>\n\
      </ol>\n<h2><span class=\"mw-headline\" id=\"Tutorials_.28UT.29\">Tutorials (UT)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=10\" title=\"Edit section:\
      \ Tutorials (UT)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This is a sequence of tutorials for UT. The are arranged in order of increasing\
      \ complexity, starting from the very first steps in scripting. Unreal Tournament\
      \ 2003/2004 scripting tutorials are farther up.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"1._Mutators\">1. Mutators</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=11\"\
      \ title=\"Edit section: 1. Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li><a href=\"/Legacy:UT_Low_Gravity_Mutator\"\
      \ title=\"Legacy:UT Low Gravity Mutator\">UT Low Gravity Mutator</a> – A simple\
      \ gravity mutator.</li>\n<li><a href=\"/Legacy:Changing_The_Enforcer_(UT)\"\
      \ title=\"Legacy:Changing The Enforcer (UT)\">Changing the Enforcer (UT)</a>\
      \ – A mutator that modifies the Enforcer.</li>\n</ol>\n<h3><span class=\"mw-headline\"\
      \ id=\"2._Weapons\">2. Weapons</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=12\"\
      \ title=\"Edit section: 2. Weapons\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>computergod666:</b> Anyone want to help me write\
      \ this section? (UT Only)</p>\n<ol>\n<li><a href=\"/Legacy:Basic_Weapon_Class\"\
      \ title=\"Legacy:Basic Weapon Class\">Basic Weapon Class</a> – How to create\
      \ a simple projectile-firing weapon.</li>\n<li><a href=\"/Legacy:Hitscan_Weapons\"\
      \ title=\"Legacy:Hitscan Weapons\">Hitscan weapons</a> – (like ShockRifle)</li>\n\
      </ol>\n<p>Outline: This section also needs at least the following:</p>\n<ol>\n\
      <li><a href=\"/edit/Legacy:Rapid-Fire_Weapons?redlink=1\" class=\"new\" title=\"\
      Legacy:Rapid-Fire Weapons (page does not exist)\">Rapid-fire weapons</a> – how\
      \ to change the firing speed.</li>\n</ol>\n<p>I would also like to see the following:\
      \ (These are just interesting advanced topics)</p>\n<ol>\n<li><a href=\"/edit/Legacy:Steerable_Projectiles?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Steerable Projectiles (page does not exist)\"\
      >Steerable projectiles</a> – one way to implement a Redeemer-like missile.</li>\n\
      <li><a href=\"/edit/Legacy:Delayed-Action_Projectiles?redlink=1\" class=\"new\"\
      \ title=\"Legacy:Delayed-Action Projectiles (page does not exist)\">Delayed-action\
      \ projectiles</a> – things like sticky grenades, flechettes, and portals.</li>\n\
      <li><a href=\"/edit/Legacy:Chainguns_And_Shotguns?redlink=1\" class=\"new\"\
      \ title=\"Legacy:Chainguns And Shotguns (page does not exist)\">Chainguns and\
      \ Shotguns</a> – how to make weapons that spin up/down or need to be pumped.</li>\n\
      </ol>\n<h2><span class=\"mw-headline\" id=\"Class_tutorials\">Class tutorials</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=13\" title=\"Edit section:\
      \ Class tutorials\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>These tutorials look at single classes. They are in no particular order (for\
      \ now).</p>\n<ul>\n<li><a href=\"/Legacy:TriggerJumpPad\" title=\"Legacy:TriggerJumpPad\"\
      >TriggerJumpPad</a> – Using states.</li>\n<li><a href=\"/Legacy:Barrel\" title=\"\
      Legacy:Barrel\">Barrel</a> – Using states (more complex).</li>\n<li><a href=\"\
      /Legacy:Tab_Controls\" title=\"Legacy:Tab Controls\">Tab Controls</a> – Using\
      \ a tab control in a mutator.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"\
      Understanding_Existing_Unreal_Code\">Understanding Existing Unreal Code</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=14\" title=\"Edit section:\
      \ Understanding Existing Unreal Code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li>UT2003: <a href=\"/Legacy:Creating_A_New_Weapontype\"\
      \ title=\"Legacy:Creating A New Weapontype\">Creating a new Weapontype</a> –\
      \ Create a new weapon based off a pre-existing (built-in) weapon's code.</li>\n\
      <li>UT and UT2003: <a href=\"/Legacy:Using_LocalMessages\" title=\"Legacy:Using\
      \ LocalMessages\">Using LocalMessages</a> – (Needs description!).</li>\n<li>UT2003:\
      \ The <a href=\"/Legacy:Code_References\" title=\"Legacy:Code References\">Code\
      \ References</a> Page – Several classes have been posted and heavily commented\
      \ for learning. Other classes are upcoming.</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Unreal_Specific_Objects\">Unreal Specific Objects</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=15\" title=\"Edit section:\
      \ Unreal Specific Objects\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>Classes and Objects\n<ul>\n<li><a href=\"/Legacy:Package\" title=\"\
      Legacy:Package\">Package</a> – Introduction to UT's code packaging system.</li>\n\
      <li><a href=\"/Legacy:Traversing_Classes\" title=\"Legacy:Traversing Classes\"\
      >Traversing Classes</a> – Introduction to interacting and manipulating variables,\
      \ functions, and values that exist in other classes.</li>\n<li><a href=\"/Legacy:Input_Keys\"\
      \ title=\"Legacy:Input Keys\">Input keys</a> – Introduction to creating classes\
      \ that allow user-inputted keys, and I include a trigger I made to use an Activate\
      \ key (For original UT).</li>\n</ul>\n</li>\n<li><a href=\"/Legacy:UnrealScript_Vector_Maths\"\
      \ title=\"Legacy:UnrealScript Vector Maths\">UnrealScript Vector Maths</a> –\
      \ Guide to using <a href=\"/Legacy:Vector\" title=\"Legacy:Vector\">vectors</a>.</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"When_You_Get_Stuck\">When You Get\
      \ Stuck</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=16\" title=\"Edit\
      \ section: When You Get Stuck\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Compiler_Errors\" title=\"\
      Legacy:Compiler Errors\">Compiler Errors</a></li>\n<li><a href=\"/Legacy:Log_Warnings\"\
      \ title=\"Legacy:Log Warnings\">Log Warnings</a></li>\n<li><a href=\"/Legacy:Unreal_Coding_FAQ\"\
      \ title=\"Legacy:Unreal Coding FAQ\">Unreal Coding FAQ</a></li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Building_on_Previous_Experience\">Building on Previous\
      \ Experience</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=17\" title=\"Edit\
      \ section: Building on Previous Experience\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you already have programming experience in a different\
      \ language, the following topics will help you find out the similarities and\
      \ differences between the languages you know and <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a>.</p>\n<ul>\n<li><a href=\"\
      /Legacy:UnrealScript_For_CPlusPlus_Programmers\" title=\"Legacy:UnrealScript\
      \ For CPlusPlus Programmers\">UnrealScript for C++ Programmers</a></li>\n<li><a\
      \ href=\"/Legacy:UnrealScript_For_Visual_Basic_Programmers\" title=\"Legacy:UnrealScript\
      \ For Visual Basic Programmers\">UnrealScript for Visual Basic Programmers</a></li>\n\
      <li><a href=\"/Legacy:UnrealScript_For_Java_Programmers\" title=\"Legacy:UnrealScript\
      \ For Java Programmers\">UnrealScript for Java Programmers</a></li>\n</ul>\n\
      <p><i>Please add pages for other languages. Just add UnrealScript questions\
      \ and insights you gathered during your own learning process there as they come\
      \ in.</i></p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=18\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ reference pages</li>\n<li><a href=\"/Legacy:Mod_Authoring\" title=\"Legacy:Mod\
      \ Authoring\">Mod Authoring</a> (old UT version), and <a href=\"/Legacy:Making_Mods\"\
      \ title=\"Legacy:Making Mods\">Making Mods</a>.</li>\n<li>The <a href=\"/Legacy:UnrealScript_Language_Reference\"\
      \ title=\"Legacy:UnrealScript Language Reference\">UnrealScript Language Reference</a>\
      \ by Tim Sweeney</li>\n<li><a rel=\"nofollow\" class=\"external free\" href=\"\
      http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm\">http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm</a></li>\n\
      <li>UnrealScript video tutorials are available from <a rel=\"nofollow\" class=\"\
      external text\" href=\"http://sv2.3dbuzz.com/vbforum/uunr_vtmlist.php?c=13\"\
      >3D Buzz</a> (requires registration and a <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://dl1.3dbuzz.com/msg.php\">star</a> to download)</li>\n\
      <li><a href=\"/Legacy:Testing_Lab\" title=\"Legacy:Testing Lab\">Testing Lab</a>\
      \ Get others to help test your code</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Lessons_in_progress\">Lessons in progress</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=19\"\
      \ title=\"Edit section: Lessons in progress\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h2><span class=\"mw-headline\" id=\"Requests\">Requests</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=20\" title=\"Edit section:\
      \ Requests\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>computergod666:</b> I need a tutorial on key bindings in UT. I know how\
      \ to bind keys with UTExtraKeyBindings so you can have a mutator that does something\
      \ when you press a key, but I want to know how to make a key binding that works\
      \ like the Pawn.bFire variable: it is in one state when the key is down, and\
      \ another state when the key is not pressed. I'm asking because I am making\
      \ a user-controllable turret for UT, and I want to know how to bind other keys\
      \ like this. Alternatively, I would like to know how to temporarily change the\
      \ behavior of the default key bindings, so pressing Fire would make the turret\
      \ fire, not the player's weapon.</p>\n<p><b>Raven:</b> <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://wiki.beyondunreal.com/wiki/Keypress_Interactions\"\
      >http://wiki.beyondunreal.com/wiki/Keypress_Interactions</a></p>\n<p><b>computergod666:</b>\
      \ Thanks. That was extremely helpful to understanding the low-level parts of\
      \ keypresses. I also found a way to change the default behavior of certain key\
      \ bindings. For example, if I wanted to bind Forward, Backward, Strafe Left\
      \ and Strafe Right so they would also be available to control the motion of\
      \ a vehicle, I could modify the aliases for those keys in User.ini so they read\
      \ something like: Command=\"Axis aBaseY Speed=+300.0 | mutate vehicle_goforward\"\
      ,Alias=...\" etc. This wouldn't change the default behavior, because I want\
      \ the player to be able to run around when he's not in a vehicle. However, if\
      \ the player is in a vehicle, the Mutate function will receive the vehicle_goforward\
      \ message and temporarily disable player movement and move the vehicle instead.</p>\n\
      <p><b>Lizardman6:</b> I would like to see a stat points system for UT2004...&#160;:-)</p>\n\
      <p><b>Unknown:</b> I have a idea for a tutorial: how to change the main menu\
      \ of ut2004</p>\n<p><b>UnReally:</b> I am making a weapon which has a unique\
      \ secondary firemode: it fires a projectile that i would like to do the following:\
      \ upon striking another player, NOT a wall etc., the player hit takes damage,\
      \ AND the projectile forks out to nearby players like chain lightning (whether\
      \ this splitting is instanthit or further projectiles does not matter), just\
      \ as long as there is some sort of chain-lightning style thing going on. If\
      \ neone has any ideas how to script this, please help out.</p>\n<p><b>Craze:</b>\
      \ Hey, how about some UT weapon tutorials, please make a weapon from scratch\
      \ tutorial and a more advanced weapon tutorial and a instant hit weapon tutorial.</p>\n\
      <p><b>computergod666:</b> Working on it. Please check this page closer to the\
      \ top.</p>\n<p><b>Tarquin:</b> I would really like a basic tutorial on replication:\
      \ maybe something like a Trigger actor that does something to all players when\
      \ touched.</p>\n<p><b>NickR:</b> I wouldn't mind some small replication examples\
      \ just showing one type replication related code. Like when the simulated key\
      \ word should be used or if static functions can be called from either the client\
      \ or server and run on either.</p>\n<p><b>Foxpaw:</b> I'm not sure about tutorials,\
      \ but those are (fairly) easily explained. Simulated functions run on actors\
      \ with ROLE_SimulatedProxy or better. However, only if they are called from\
      \ another simulated function. Entry points like Tick can be declared as simulated\
      \ when you override them to facilitate this. A short example:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">simulated</span> <span class=\"kw1\"\
      >function</span> <span class=\"kw4\">Tick</span><span class=\"br0\">(</span>\
      \ <span class=\"kw5\">float</span> Delta <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n  <span class=\"kw6\">Super</span>.<span class=\"\
      kw4\">Tick</span><span class=\"br0\">(</span> Delta <span class=\"br0\">)</span>;\n\
      \ \n  DoStuffOnServerOnly<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \  DoStuffOnBoth<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// Called from a simulated\
      \ function, but not simulated itself,</span>\n<span class=\"co1\">// the engine\
      \ skips over this function on clients. (or rather,</span>\n<span class=\"co1\"\
      >// the non-authority version, which is usually the client)</span>\n<span class=\"\
      kw1\">function</span> DoStuffOnServerOnly<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  DoStuffOnClient<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// A simulated function getting called from another\
      \ simulated</span>\n<span class=\"co1\">// function. This gets called on both\
      \ machines.</span>\n<span class=\"kw1\">simulated</span> <span class=\"kw1\"\
      >function</span> DoStuffOnBoth<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"co1\">// Oops! This is a simulated function, but gets called from\
      \ a</span>\n<span class=\"co1\">// non-simulated function, so although it COULD\
      \ run on a client</span>\n<span class=\"co1\">// (because it's simulated) the\
      \ code that calls it doesn't run</span>\n<span class=\"co1\">// on the client\
      \ and so this won't ever get called.</span>\n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> DoStuffOnClient<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Static functions on the other hand, have no\
      \ relation to replication and are functions that exist outside the context of\
      \ an object. Static functions can't get replicated, obviously, because they\
      \ aren't associated with any particular instance of an object. They can access\
      \ only default variables and stuff. See <a href=\"/Legacy:Static_Function\"\
      \ title=\"Legacy:Static Function\">Static Function</a> and <a href=\"/Legacy:Simulated_Function\"\
      \ title=\"Legacy:Simulated Function\">Simulated Function</a>.</p>\n<p>Also,\
      \ feel free to refactor this somewhere or expand it into a full tutorial.. it's\
      \ more a demonstration at the moment.</p>\n<p><b>Tarquin:</b> Thanks... but\
      \ see, you've alreayd lost RepliN00bs with this: <i>run on actors with ROLE_SimulatedProxy\
      \ or better</i>.... how does Replication actually WORK? Should we imagine multiple\
      \ facets of the same actor on different machines, or many actors on different\
      \ machines that somehow correspond to each other?</p>\n<p><b>Foxpaw:</b> Well,\
      \ they're different actors, but they have a unique identifier so they \"correspond\"\
      \ to each other. An actors Role variable determines it's replication behaviour.\
      \ ROLE_Authority is usually the one on the server, and it runs all functions,\
      \ simulated or not. ROLE_SimulatedProxy is usually on the client, and runs only\
      \ simulated functions. ROLE_DumbProxy runs no functions, but still replicates\
      \ variables. ROLE_None replicates nothing.</p>\n<p><b>WheatPuppet:</b> Can we\
      \ cram this stuff into a tutorial somewhere!? I hate having code on a Tutorial\
      \ frontpage.</p>\n<p><b>Tarquin:</b> maybe create <a href=\"/Legacy:Introduction_To_Replication\"\
      \ title=\"Legacy:Introduction To Replication\">Introduction to Replication</a>?</p>\n\
      <p><b>WheatPuppet:</b> Sounds good to me... I'm not particularly qualified to\
      \ write a tute or doc on replication, though. I wonder if anyone but Tim Sweeny\
      \ is.&#160;;) It seems to me that replication is the single least-understood\
      \ aspect of UScript. I'd be willing to throw together a page as a starter in\
      \ a few days (a.k.a. after final exams).</p>\n<p><b>Tarquin:</b> actually, I\
      \ just meant throw the stuff we don't want here onto that page and leave it\
      \ to fester&#160;:) Maybe someone more qualified will come along and clean up.\
      \ At least this page will be tidier.</p>\n<p><b>JimRimya:</b> How about a simple\
      \ weapons mod, like increasing the firing rate of the rocket launcher. Or maybe\
      \ making all weapon spawn points be rocket launchers. What I'm getting at is\
      \ something like rocket arena in Q3. Thanks!</p>\n<p><b>M.r.bob:</b> The GUI\
      \ for UT2004 is very different from the GUI for UT2003, someone needs to make\
      \ a tutorial for a UT2004 mutator with a GUI. Like one that lets you change\
      \ the amount of health the pawns have, that would be a cool and simple mutator,\
      \ and would teach people who only have 2004 how to make a decent mutator. Please\
      \ Please Please&#160;:D</p>\n<hr />\n<p><b>Bob_The_Beheader:</b> I'd really\
      \ like to see a tutorial for making heat-seeking or homing projectiles.</p>\n\
      <p><b>SuperApe:</b> That's a good one. I just helped someone with that on BUF\
      \ by using some code borrowed from BulldogRocket. That already has an Actor\
      \ (Pawn) property defined for target, you just set it at launch to any (non-teammate)\
      \ controlled Pawn. For the purposes making a lesson out of it, you'd want to\
      \ set up <i>how</i> the projectile is fired. (i.e., make a new hand-held weapon?\
      \ replace an existing vehicle weapon?)</p>\n<p><b>Bob_The_Beheader:</b> Cool.\
      \ It does seem to me that the projectile of the heat-seeking weapon is more\
      \ important then the code for the weapon itself. All you'd need to do for the\
      \ weapon code in the tutorial would be to change an existing weapon's properties\
      \ to fire your new heat-seeking projectile. Wait... I take that back. The weapon\
      \ would need to contain code for aquiring the target, probably. Unless you wanted\
      \ the projectile to aquire a target on it's own. This might make it a really\
      \ difficult weapon to use, which I don't think is a characteristic of heat-seeking\
      \ weapons&#160;;). I think maybe the existing code for the Rocket Launcher and\
      \ it's projectile would do nicely for this tutorial. You could just reduce the\
      \ time required for a target lock, and up the manuverability of the rocket projectile,\
      \ to make it move more like an AVRIL. Also probably reduce the damage the rocket\
      \ deals and maybe the max ammo count of the launcher, in order to keep gameplay\
      \ balanced. I've never seen the Bulldog at work, so I'm not sure how it's weapon\
      \ works, but the target property does sound useful for this. You could just\
      \ have it be set to the enemy Pawn closest to your crosshair (?? I think...&#160;:confused:)\
      \ I think making this a hand-held weapon would be better suited for a tutorial,\
      \ because then you could test it in a small, quick-loading 1v1 DM map instead\
      \ of some monster long-loading ONS map.</p>\n<p><b>computergod666:</b> Now that\
      \ we're on the topic of projectiles, is there a way to make a projectile stick\
      \ to a player or bot in UT? I know it can be done with bones in UT2kX, but there\
      \ is no GetClosestBone() in UT. Any ideas? A friend of mine who codes for Doom\
      \ suggested that I make a fast-response homing projectile, but that would mean\
      \ that it wouldn't necessarily be attached to the player, it would simply stay\
      \ close by.</p>\n<p><b>EntropicLqd:</b> I can't answer your question directly,\
      \ but, could you fake it by using an inventory item that behaves in a similar\
      \ way to the CTF flag? ie. When the projectile hits the player is given the\
      \ \"sticky thing\" as an inventory item with a Timer that fires to do damage\
      \ (or whatever you want). Failing that, see if you can track down a copy of\
      \ Nerf Arena Blast (or whatever it was called). I'm sure the nerf balls in that\
      \ used to stick to players.</p>\n<p><b>EricBlade:</b> Of course it's possible.\
      \ Instead of having the Projectile actually blow up when it contacts, have it\
      \ set bHardAttach=True, SetBase() to the pawn it hit, turn off collision (so\
      \ it doesn't get stuck on things the pawn brushes by)</p>\n<p><b>computergod666:</b>\
      \ Thanks! I did get it to work (sort of) so that as soon as the projectile touched\
      \ its target, it would go to a state where the projectile's velocity was set\
      \ to the velocity of the target every time Tick() was called. It looks good\
      \ until the target turns. What's the syntax for SetBase()?</p>\n<p><b>EricBlade:</b>\
      \ Don't forget to SetPhysics(PHYS_NONE) too. SetBase(Actor) should stick it\
      \ to the given Actor. Something like... SetPhysics(PHYS_NONE); bHardAttach=True;\
      \ SetBase(WhatImStickingTo); you could even attach it to a bone, if you're using\
      \ like UT04</p>\n<p><b>computergod666:</b> Thanks again. Do you know if I set\
      \ the base of an object to be a player, is it supposed to hurt the player? I'm\
      \ asking because I just made a gravity gun for UT that is meant to be able to\
      \ pick up and throw decorations and projectiles. Every time I pick up a decoration\
      \ with it, it sets the decorations base to me, sets its physics to PHYS_None,\
      \ and then enables a Tick() function that keeps the object a certain distance\
      \ and rotation away from me. Whenever I do this, it deals me one point of damage!\
      \ Why? Also, I did finish the projectile question. I've implemented it for toxin\
      \ darts (flechette cannon), sticky grenades, and my Shrink Ray / Microwave Expander\
      \ (see my personal page for more details.)</p>\n<hr />\n<h3><span class=\"mw-headline\"\
      \ id=\"Powerups\">Powerups</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=21\"\
      \ title=\"Edit section: Powerups\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>computergod666:</b> I just made a few of my own\
      \ powerups for UT. They work similarly to relics, in that only one person can\
      \ pick them up at a time, they can drop it by throwing it or dying, and you\
      \ can't pick up another powerup or a relic if you have either already. I want\
      \ to make a stealth powerup that makes you invisible to Bots as well as to other\
      \ players. Is there a way to make bots have a harder time seeing you? Also,\
      \ I would like to make it silence player noises like footsteps and weapon firing\
      \ sounds. Does anyone know how to do something like that?</p>\n<hr />\n<p><b>Bob_The_Beheader:</b>\
      \ Does anyone out there know how to code a melee weapon?... I guess I could\
      \ just look at the code for the melee weapons in the ChaosUT mod...</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Grudge_Mutator\">Grudge Mutator</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_Lessons?section=22\"\
      \ title=\"Edit section: Grudge Mutator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Tarquin:</b> This is an idea I've had for some\
      \ time for a simple mutator, and it strikes me that it could serve as a simple\
      \ tute for netcode. It's called Grudge, and it would implement a few extra announcements\
      \ to do with who is killing who. This is how it works:</p>\n<ul>\n<li>Suppose\
      \ Player Bob kills you, and after you respawn your first kill is Bob: it's a\
      \ \"Revenge\" (cue announcement and screen message)</li>\n<li>If you get killed\
      \ by Bob, and then after respawning Bob kills you AGAIN (and you've not managed\
      \ to kill him), then it's a \"Grudge\". If that happens again, there could be\
      \ further announcements...</li>\n</ul>\n<p><b>Bob_The_Beheader:</b> I'm not\
      \ sure I understand you here, Tarquin. At first I thought you were talking about\
      \ something like the Revenge Rune, but are you saying that all this would do\
      \ is display the message \"Revenge\" and later possibly \"Grudge\" onscreen?\
      \ This sounds like the mutator on the UTAN clan's gibzilla CTF server, I forget\
      \ what it's called.</p>\n<p><b>Tarquin:</b> I've actually made a start on this.\
      \ A beta version is available.</p>\n<p><b>Bob_The_Beheader:</b> By the way,\
      \ I'm not good enough to kill ANYONE twice in a row, not unless I'm very lucky&#160;:D.</p>\n\
      <p><b>Guest:</b>(TurkeyFromHell) Tarq, I'm just started trying to make a mutator\
      \ to <i>prevent</i> revenge killing (for a camping server), and the only way\
      \ I can see to go about it (being so unfamiliar with the majority of the Engine's\
      \ class system as I am) is to extend off of Pawn and redefine the TakeDamage\
      \ function. Is there an easier/less... drastic way to do this?</p>\n<p><b>Eliot:</b>\
      \ try extending GameRules it contains a function for damage too.</p>\n<p><b>Guest:</b>(TurkeyFromHell)\
      \ Yes lol I just decompiled an existing revenge mutator to see how it worked&#160;:P,\
      \ ty.</p>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_Lessons?section=23\" title=\"Edit section:\
      \ Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>DUc0N:</b>Thought it might be nice to mention semi-up-front that mod authoring\
      \ under Linux is NOT supported as of yet. Stay tuned though, I for one plan\
      \ to gripe&#160;:)</p>\n<p><b>Mr.Bob/his brother:</b> these pages really need\
      \ to be updated for 2004 im trying to figure out how to make a High gravity\
      \ mutator.&#160;:cheesy:</p>\n<p><b>EntropicLqd:</b> Well, you could start by\
      \ looking at the code for the low gravity mutator that gets shipped with UT2004,\
      \ and then rather than make the gravity less, make it more. Seems like a good\
      \ place to start to me.</p>\n<p><b>Tarquin:</b> I decided that Instant Start\
      \ wasn't really suitable as a lesson.</p>\n<p><b>Mr.bob:</b> KEWL!&#160;;D my\
      \ thingy is finally at the top, and i didn't even have to put it there!</p>\n\
      <p><b>Fearless:</b> It would be nice to have a subject about modifying a standard\
      \ UT weapons as this is what someone beginning in Uscript would like to do.</p>\n\
      <p><b>Prospero:</b> A tutorial on the finer points of coding for networking\
      \ would be rad. There are a lot of comments to the effect of \"this isn't coded\
      \ for networking\", but why it is wrong is rarely explained.</p>\n<p><b>Bob_The_Beheader:</b>\
      \ Fearless: first UScript thing I did at least was modify an original weapon.\
      \ I kind of integrated this into learning how to make models and textures for\
      \ UT. Now the link gun has a new model and shoots yellow glowing exploding rings!&#160;:cheesy:</p>\n\
      <p><b>OlympusMons:</b> Added link to using the mod system in ut2004 but the\
      \ page itself is ruff, if anyone could lend a hand with suggestions or give\
      \ me feedback on how well it works for them Id greatly appreciate it.</p>\n\
      <p>Ace Ulimited: Can you make weapons for Killing Floor using Unreal Editor\
      \ or using this Unreal Script Tutorial? I have no idea where to start because\
      \ im new at this and I have no knowledge what so ever on any of this.</p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.087 seconds\nReal time usage: 0.090\
      \ seconds\nPreprocessor visited node count: 100/1000000\nPreprocessor generated\
      \ node count: 116/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3338-0!*!0!!en!*!* and timestamp 20221117173218 and revision\
      \ id 46032\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Input Keys"
  - ns: 100
    exists: true
    name: "Legacy:Spawning Your Own Bot"
  - ns: 100
    exists: true
    name: "Legacy:Barrel"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:MiceMenGrav Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Tab Controls"
  - ns: 100
    exists: true
    name: "Legacy:Adding An Adrenaline Combo With A Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Basic Procedure"
  - ns: 100
    exists: true
    name: "Legacy:Creating A New Weapontype"
  - ns: 100
    exists: true
    name: "Legacy:Using UCC Under Linux"
  - ns: 100
    exists: true
    name: "Legacy:Making A Class-Based Mod"
  - ns: 100
    exists: true
    name: "Legacy:RegularEngine"
  - ns: 100
    exists: true
    name: "Legacy:RegularEngine/Player Classes"
  - ns: 100
    exists: false
    name: "Legacy:Delayed-Action Projectiles"
  - ns: 100
    exists: true
    name: "Legacy:UT3 Hello World"
  - ns: 100
    exists: true
    name: "Legacy:Bulldog Player"
  - ns: 100
    exists: true
    name: "Legacy:Basic AI Scripting Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine Core"
  - ns: 100
    exists: true
    name: "Legacy:New UnrealScript In UT3"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For CPlusPlus Programmers"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Replication"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Visual Basic Programmers"
  - ns: 100
    exists: true
    name: "Legacy:UT3"
  - ns: 100
    exists: true
    name: "Legacy:Traversing Classes"
  - ns: 100
    exists: true
    name: "Legacy:Regen Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Fire And Forget Self-Guided Missile"
  - ns: 100
    exists: true
    name: "Legacy:Power Core Volume Control Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Object Oriented Programming"
  - ns: 100
    exists: true
    name: "Legacy:Compiler Errors"
  - ns: 100
    exists: true
    name: "Legacy:Code References"
  - ns: 100
    exists: true
    name: "Legacy:Super Arena Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Coding FAQ"
  - ns: 100
    exists: true
    name: "Legacy:Changing The Enforcer (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Modifying Vehicle Weapons"
  - ns: 100
    exists: true
    name: "Legacy:Stat Points System"
  - ns: 100
    exists: true
    name: "Legacy:UT3 Whats What"
  - ns: 100
    exists: true
    name: "Legacy:TheHealer"
  - ns: 100
    exists: false
    name: "Legacy:Steerable Projectiles"
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  - ns: 100
    exists: true
    name: "Legacy:Hitscan Weapons"
  - ns: 100
    exists: true
    name: "Legacy:Modify Mutator Tutorial"
  - ns: 100
    exists: false
    name: "Legacy:Rapid-Fire Weapons"
  - ns: 100
    exists: true
    name: "Legacy:TriggerJumpPad"
  - ns: 100
    exists: true
    name: "Legacy:Using LocalMessages"
  - ns: 100
    exists: true
    name: "Legacy:Basic Weapon Class"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Vector Maths"
  - ns: 100
    exists: true
    name: "Legacy:Setting Up UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Java Programmers"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript For Non-Programmers"
  - ns: 100
    exists: true
    name: "Legacy:ProjectileDestroyerVolume"
  - ns: 100
    exists: true
    name: "Legacy:Weapon Mutator Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring"
  - ns: 100
    exists: true
    name: "Legacy:Using The Mod System In UT2004"
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Static Function"
  - ns: 100
    exists: true
    name: "Legacy:Log Warnings"
  - ns: 100
    exists: false
    name: "Legacy:Chainguns And Shotguns"
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Hello World"
  - ns: 100
    exists: true
    name: "Legacy:UT Low Gravity Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Testing Lab"
  - ns: 100
    exists: true
    name: "Legacy:MutTutorial"
  templates: []
  images: []
  externallinks:
  - "http://sv2.3dbuzz.com/vbforum/uunr_vtmlist.php?c=13"
  - "http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm"
  - "http://wiki.beyondunreal.com/wiki/Keypress_Interactions"
  - "http://dl1.3dbuzz.com/msg.php"
  sections:
  - toclevel: 1
    level: "2"
    line: "Introductions"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 235
    anchor: "Introductions"
  - toclevel: 1
    level: "2"
    line: "Tutorials (UT3)"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 1220
    anchor: "Tutorials_.28UT3.29"
  - toclevel: 1
    level: "2"
    line: "Tutorials (2003/2004)"
    number: "3"
    index: "3"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 1559
    anchor: "Tutorials_.282003.2F2004.29"
  - toclevel: 2
    level: "3"
    line: "UnrealScript Installation"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 1795
    anchor: "UnrealScript_Installation"
  - toclevel: 2
    level: "3"
    line: "Simple mutators"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 2102
    anchor: "Simple_mutators"
  - toclevel: 2
    level: "3"
    line: "More complex mutators"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 3106
    anchor: "More_complex_mutators"
  - toclevel: 2
    level: "3"
    line: "Class-based mutators/gametypes"
    number: "3.4"
    index: "7"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 3791
    anchor: "Class-based_mutators.2Fgametypes"
  - toclevel: 2
    level: "3"
    line: "Replication"
    number: "3.5"
    index: "8"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 4442
    anchor: "Replication"
  - toclevel: 2
    level: "3"
    line: "Other"
    number: "3.6"
    index: "9"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 4683
    anchor: "Other"
  - toclevel: 1
    level: "2"
    line: "Tutorials (UT)"
    number: "4"
    index: "10"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 5036
    anchor: "Tutorials_.28UT.29"
  - toclevel: 2
    level: "3"
    line: "1. Mutators"
    number: "4.1"
    index: "11"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 5264
    anchor: "1._Mutators"
  - toclevel: 2
    level: "3"
    line: "2. Weapons"
    number: "4.2"
    index: "12"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 5489
    anchor: "2._Weapons"
  - toclevel: 1
    level: "2"
    line: "Class tutorials"
    number: "5"
    index: "13"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 6364
    anchor: "Class_tutorials"
  - toclevel: 1
    level: "2"
    line: "Understanding Existing Unreal Code"
    number: "6"
    index: "14"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 6680
    anchor: "Understanding_Existing_Unreal_Code"
  - toclevel: 1
    level: "2"
    line: "Unreal Specific Objects"
    number: "7"
    index: "15"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 7137
    anchor: "Unreal_Specific_Objects"
  - toclevel: 1
    level: "2"
    line: "When You Get Stuck"
    number: "8"
    index: "16"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 7734
    anchor: "When_You_Get_Stuck"
  - toclevel: 1
    level: "2"
    line: "Building on Previous Experience"
    number: "9"
    index: "17"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 7891
    anchor: "Building_on_Previous_Experience"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "10"
    index: "18"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 8567
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Lessons in progress"
    number: "11"
    index: "19"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 9147
    anchor: "Lessons_in_progress"
  - toclevel: 1
    level: "2"
    line: "Requests"
    number: "12"
    index: "20"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 9172
    anchor: "Requests"
  - toclevel: 2
    level: "3"
    line: "Powerups"
    number: "12.1"
    index: "21"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 20163
    anchor: "Powerups"
  - toclevel: 2
    level: "3"
    line: "Grudge Mutator"
    number: "12.2"
    index: "22"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 20915
    anchor: "Grudge_Mutator"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "13"
    index: "23"
    fromtitle: "Legacy:UnrealScript_Lessons"
    byteoffset: 22643
    anchor: "Discussion"
  displaytitle: "Legacy:UnrealScript Lessons"
  iwlinks: []
  wikitext:
    text: "This is a page aimed at newcomers to UnrealScript. Head over to [[Legacy:UnrealScript|UnrealScript]]\
      \ for a full reference.  Readers of this page are invited to create pages, suggest\
      \ ideas for topics or expand on what is already here.\n\n==Introductions==\n\
      \nThese pages cover some of background knowledge you'll need before you begin.\n\
      * [[Legacy:Unreal Engine Core|Unreal Engine Core]] &ndash; Describes how Unreal\
      \ is setup so it can be modified\n* [[Legacy:Object Oriented Programming Overview|\
      \ Object Oriented Programming Overview]] &ndash; Describes OOP as the method\
      \ used to modify and control all aspects of Unreal.  You should read this if\
      \ you never used an OOP language (like Java).\n* [[Legacy:Unreal Object Oriented\
      \ Programming|Unreal Object Oriented Programming]] &ndash; How Unreal specifically\
      \ defines OOP.  This is where the rubber meets the road.\n* [[Legacy:UnrealScript\
      \ For Non-Programmers|UnrealScript For Non-Programmers]] &ndash; Never programmed\
      \ before? You need to start somewhere. Start here.\n* [[Legacy:New UnrealScript\
      \ In UT3|New UnrealScript in UT3]] &ndash; Read this if you already used UnrealScript\
      \ in UnrealEngine 2 games and now want to code for [[Legacy:UT3|UT3]] or other\
      \ UnrealEngine 3 games.\n\n==Tutorials (UT3)==\n\nThese tutorials are strictly\
      \ for use with UT3. Generally, scripting is pretty much the same as previous\
      \ versions of the engine, but there are a few differences.\n\n# [[Legacy:UT3\
      \ Whats What|UT3 Whats What]] &ndash; Getting ready to code for UT3\n# [[Legacy:UT3\
      \ Hello World|UT3 Hello World]] &ndash; First Mutator in UT3\n\n==Tutorials\
      \ (2003/2004)==\n\nThis is a sequence of tutorials for Unreal Tournament 2003/2004.\
      \ They're arranged in order of increasing complexity, starting from the very\
      \ first steps in scripting.  UT scripting tutorials are farther down.\n\n===UnrealScript\
      \ Installation===\n# [[Legacy:Setting Up UnrealScript|Setting Up UnrealScript]]\
      \ &ndash; Getting everything set up ready to begin coding in Windows OS.\n#\
      \ [[Legacy:Using_UCC_Under_Linux|Using UCC Under Linux]] &ndash; How to setup\
      \ a friendly Unreal scripting environment in Linux. (Unsupported)\n\n===Simple\
      \ mutators===\n\nThese start with the ''extremely'' simple. These are all single\
      \ classes, but there is considerable scope for modifying the game once we get\
      \ started.\n\n# [[Legacy:UnrealScript Hello World|UnrealScript Hello World]]\
      \ &ndash; The absolute simplest piece of UnrealScript we could think of.\n#\
      \ [[Legacy:MutTutorial|MutTutorial]] &ndash; A simple player jump boost mutator.\n\
      # [[Legacy:Modifying Vehicle Weapons|Modifying Vehicle Weapons]] &ndash; How\
      \ to change the weapons on a vehicle.\n# [[Legacy:Regen Mutator|Regen Mutator]]\
      \ &ndash; A simple regenerating mutator for UT2003 & UT2004.\n# [[Legacy:Modify\
      \ Mutator Tutorial|Modify Mutator Tutorial]] &ndash; The Cooler for UT2003.\n\
      # [[Legacy:Super Arena Mutator|Super Arena Mutator]] &ndash; An intermediate\
      \ gameplay mutator for UT2003.\n# [[Legacy:TheHealer|TheHealer]] &ndash; The\
      \ Healer for UT2003.\n# [[Legacy:Bulldog Player|Bulldog Player]] &ndash; A UT2003\
      \ tutorial for creating a player that is a vehicle instead of a normal character.\n\
      \n===More complex mutators===\n\nThese require more than a single class to implement.\n\
      # [[Legacy:Power Core Volume Control Mutator|Power Core Volume Control Mutator]]\
      \ &ndash; A tutorial on changing volume levels.\n# [[Legacy:Weapon Mutator Tutorial|Weapon\
      \ Mutator Tutorial]] &ndash; Minigun HE mutator.\n# [[Legacy:MiceMenGrav Mutator|MiceMenGrav\
      \ Mutator]] &ndash; Uses Config and Gamerules.\n# [[Legacy:Adding An Adrenaline\
      \ Combo With A Mutator|Adding an Adrenaline Combo With A Mutator]] &ndash; Tutorial\
      \ on adding adrenaline combos in UT2004.\n# [[Legacy:Fire And Forget Self-Guided\
      \ Missile|Fire and Forget Self-Guided Missile]] - Not a complete mutator, but\
      \ contains a real working code.\n\n===Class-based mutators/gametypes===\n# [[Legacy:RegularEngine/Player_Classes|RegularEngine/Player_Classes]]\
      \ &ndash; Overview of how Player Classes work within the [[Legacy:RegularEngine|RegularEngine]]\
      \ framework for UT2004.  For an older or alternate tutorial, see [[Legacy:Making\
      \ A Class-Based Mod|Making A Class-Based Mod]].\n# [[Legacy:Spawning Your Own\
      \ Bot|Spawning Your Own Bot]] &ndash; A intro to show you how to spawn and get\
      \ control of a bot. So that you can write your own customized AI-Controller\n\
      # [[Legacy:Basic AI Scripting Tutorial|Basic AI Scripting Tutorial]] &ndash;\
      \ Recreating the NaliCow NPC for UT2004, focusing on the custom AI.\n\n===Replication===\n\
      # [[Legacy:Introduction To Replication|Introduction To Replication]] &ndash;\
      \ How objects sync with each other in online games.\n# [[Legacy:ProjectileDestroyerVolume|ProjectileDestroyerVolume]]\
      \ &ndash; (Needs description!).\n\n===Other===\n#[[Legacy:Stat Points System|Stat\
      \ Points System]] &ndash; Shows how to use stat points to change a gun speed,\
      \ ammo held, etc.\n#[[Legacy:Using The Mod System In UT2004|Using The Mod System\
      \ In UT2004]] &ndash; Shows how to use the mod system in ut2004 by guiding you\
      \ through a series of [[Legacy:Basic Procedure|basic procedure]] type pages.\n\
      \n==Tutorials (UT)==\n\nThis is a sequence of tutorials for UT.  The are arranged\
      \ in order of increasing complexity, starting from the very first steps in scripting.\
      \  Unreal Tournament 2003/2004 scripting tutorials are farther up.\n\n===1.\
      \ Mutators===\n# [[Legacy:UT Low Gravity Mutator|UT Low Gravity Mutator]] &ndash;\
      \ A simple gravity mutator.\n# [[Legacy:Changing The Enforcer (UT)|Changing\
      \ the Enforcer (UT)]] &ndash; A mutator that modifies the Enforcer.\n\n===2.\
      \ Weapons===\n\n'''computergod666:''' Anyone want to help me write this section?\
      \ (UT Only)\n# [[Legacy:Basic Weapon Class|Basic Weapon Class]] &ndash; How\
      \ to create a simple projectile-firing weapon.\n# [[Legacy:Hitscan Weapons|Hitscan\
      \ weapons]] &ndash; (like ShockRifle)\n\nOutline: This section also needs at\
      \ least the following:\n# [[Legacy:Rapid-Fire Weapons|Rapid-fire weapons]] &ndash;\
      \ how to change the firing speed.\n\nI would also like to see the following:\
      \ (These are just interesting advanced topics)\n# [[Legacy:Steerable Projectiles|Steerable\
      \ projectiles]] &ndash; one way to implement a Redeemer-like missile.\n# [[Legacy:Delayed-Action\
      \ Projectiles|Delayed-action projectiles]] &ndash; things like sticky grenades,\
      \ flechettes, and portals.\n# [[Legacy:Chainguns And Shotguns|Chainguns and\
      \ Shotguns]] &ndash; how to make weapons that spin up/down or need to be pumped.\n\
      \n==Class tutorials==\n\nThese tutorials look at single classes. They are in\
      \ no particular order (for now).\n\n* [[Legacy:TriggerJumpPad|TriggerJumpPad]]\
      \ &ndash; Using states.\n* [[Legacy:Barrel|Barrel]] &ndash; Using states (more\
      \ complex).\n* [[Legacy:Tab Controls|Tab Controls]] &ndash; Using a tab control\
      \ in a mutator.\n\n==Understanding Existing Unreal Code==\n* UT2003: [[Legacy:Creating\
      \ A New Weapontype|Creating a new Weapontype]] &ndash; Create a new weapon based\
      \ off a pre-existing (built-in) weapon's code.\n* UT and UT2003: [[Legacy:Using\
      \ LocalMessages|Using LocalMessages]] &ndash; (Needs description!).\n* UT2003:\
      \ The [[Legacy:Code References|Code References]] Page &ndash; Several classes\
      \ have been posted and heavily commented for learning. Other classes are upcoming.\n\
      \n==Unreal Specific Objects==\n* Classes and Objects \n** [[Legacy:Package|Package]]\
      \ &ndash; Introduction to UT's code packaging system.\n** [[Legacy:Traversing\
      \ Classes|Traversing Classes]] &ndash; Introduction to interacting and manipulating\
      \ variables, functions, and values that exist in other classes.\n** [[Legacy:Input\
      \ Keys|Input keys]] &ndash; Introduction to creating classes that allow user-inputted\
      \ keys, and I include a trigger I made to use an Activate key (For original\
      \ UT).\n* [[Legacy:UnrealScript Vector Maths|UnrealScript Vector Maths]] &ndash;\
      \ Guide to using [[Legacy:Vector|vector]]s.\n\n==When You Get Stuck==\n* [[Legacy:Compiler\
      \ Errors|Compiler Errors]]\n* [[Legacy:Log Warnings|Log Warnings]]\n* [[Legacy:Unreal\
      \ Coding FAQ|Unreal Coding FAQ]]\n\n==Building on Previous Experience ==\n\n\
      If you already have programming experience in a different language, the following\
      \ topics will help you find out the similarities and differences between the\
      \ languages you know and [[Legacy:UnrealScript|UnrealScript]].\n\n* [[Legacy:UnrealScript\
      \ For CPlusPlus Programmers|UnrealScript for C++ Programmers]]\n* [[Legacy:UnrealScript\
      \ For Visual Basic Programmers|UnrealScript for Visual Basic Programmers]]\n\
      * [[Legacy:UnrealScript For Java Programmers|UnrealScript for Java Programmers]]\n\
      \n''Please add pages for other languages. Just add UnrealScript questions and\
      \ insights you gathered during your own learning process there as they come\
      \ in.\n\n==Related Topics==\n* [[Legacy:UnrealScript|UnrealScript]] reference\
      \ pages\n* [[Legacy:Mod Authoring|Mod Authoring]] (old UT version), and [[Legacy:Making\
      \ Mods|Making Mods]].\n* The [[Legacy:UnrealScript Language Reference|UnrealScript\
      \ Language Reference]] by Tim Sweeney\n* http://mimesis.csc.ncsu.edu/Unreal/Syntax.htm\n\
      * UnrealScript video tutorials are available from [http://sv2.3dbuzz.com/vbforum/uunr_vtmlist.php?c=13\
      \ 3D Buzz] (requires registration and a [http://dl1.3dbuzz.com/msg.php star]\
      \ to download)\n* [[Legacy:Testing Lab|Testing Lab]] Get others to help test\
      \ your code\n\n==Lessons in progress==\n\n==Requests==\n\n'''computergod666:'''\
      \ I need a tutorial on key bindings in UT. I know how to bind keys with UTExtraKeyBindings\
      \ so you can have a mutator that does something when you press a key, but I\
      \ want to know how to make a key binding that works like the Pawn.bFire variable:\
      \ it is in one state when the key is down, and another state when the key is\
      \ not pressed. I'm asking because I am making a user-controllable turret for\
      \ UT, and I want to know how to bind other keys like this. Alternatively, I\
      \ would like to know how to temporarily change the behavior of the default key\
      \ bindings, so pressing Fire would make the turret fire, not the player's weapon.\n\
      \n'''Raven:''' http://wiki.beyondunreal.com/wiki/Keypress_Interactions\n\n'''computergod666:'''\
      \ Thanks. That was extremely helpful to understanding the low-level parts of\
      \ keypresses. I also found a way to change the default behavior of certain key\
      \ bindings. For example, if I wanted to bind Forward, Backward, Strafe Left\
      \ and Strafe Right so they would also be available to control the motion of\
      \ a vehicle, I could modify the aliases for those keys in User.ini so they read\
      \ something like: Command=\"Axis aBaseY Speed=+300.0 | mutate vehicle_goforward\"\
      ,Alias=...\" etc. This wouldn't change the default behavior, because I want\
      \ the player to be able to run around when he's not in a vehicle. However, if\
      \ the player is in a vehicle, the Mutate function will receive the vehicle_goforward\
      \ message and temporarily disable player movement and move the vehicle instead.\n\
      \n'''Lizardman6:''' I would like to see a stat points system for UT2004... :-)\n\
      \n'''Unknown:''' I have a idea for a tutorial: how to change the main menu of\
      \ ut2004\n\n'''UnReally:''' I am making a weapon which has a unique secondary\
      \ firemode: it fires a projectile that i would like to do the following: upon\
      \ striking another player, NOT a wall etc., the player hit takes damage, AND\
      \ the projectile forks out to nearby players like chain lightning (whether this\
      \ splitting is instanthit or further projectiles does not matter), just as long\
      \ as there is some sort of chain-lightning style thing going on. If neone has\
      \ any ideas how to script this, please help out.\n\n'''Craze:''' Hey, how about\
      \ some UT weapon tutorials, please make a weapon from scratch tutorial and a\
      \ more advanced weapon tutorial and a instant hit weapon tutorial.\n\n'''computergod666:'''\
      \ Working on it. Please check this page closer to the top.\n\n'''Tarquin:'''\
      \ I would really like a basic tutorial on replication: maybe something like\
      \ a Trigger actor that does something to all players when touched.\n\n'''NickR:'''\
      \ I wouldn't mind some small replication examples just showing one type replication\
      \ related code. Like when the simulated key word should be used or if static\
      \ functions can be called from either the client or server and run on either.\n\
      \n'''Foxpaw:''' I'm not sure about tutorials, but those are (fairly) easily\
      \ explained. Simulated functions run on actors with ROLE_SimulatedProxy or better.\
      \ However, only if they are called from another simulated function. Entry points\
      \ like Tick can be declared as simulated when you override them to facilitate\
      \ this. A short example:\n\n<uscript>\nsimulated function Tick( float Delta\
      \ )\n{\n  Super.Tick( Delta );\n\n  DoStuffOnServerOnly();\n  DoStuffOnBoth();\n\
      }\n\n// Called from a simulated function, but not simulated itself,\n// the\
      \ engine skips over this function on clients. (or rather,\n// the non-authority\
      \ version, which is usually the client)\nfunction DoStuffOnServerOnly()\n{\n\
      \  DoStuffOnClient();\n}\n\n// A simulated function getting called from another\
      \ simulated\n// function. This gets called on both machines.\nsimulated function\
      \ DoStuffOnBoth()\n{\n}\n\n// Oops! This is a simulated function, but gets called\
      \ from a\n// non-simulated function, so although it COULD run on a client\n\
      // (because it's simulated) the code that calls it doesn't run\n// on the client\
      \ and so this won't ever get called.\nsimulated function DoStuffOnClient()\n\
      {\n}\n</uscript>\n\nStatic functions on the other hand, have no relation to\
      \ replication and are functions that exist outside the context of an object.\
      \ Static functions can't get replicated, obviously, because they aren't associated\
      \ with any particular instance of an object. They can access only default variables\
      \ and stuff. See [[Legacy:Static Function|Static Function]] and [[Legacy:Simulated\
      \ Function|Simulated Function]].\n\nAlso, feel free to refactor this somewhere\
      \ or expand it into a full tutorial.. it's more a demonstration at the moment.\n\
      \n'''Tarquin:''' Thanks... but see, you've alreayd lost RepliN00bs with this:\
      \ '' run on actors with ROLE_SimulatedProxy or better''.... how does Replication\
      \ actually WORK? Should we imagine multiple facets of the same actor on different\
      \ machines, or many actors on different machines that somehow correspond to\
      \ each other?\n\n'''Foxpaw:''' Well, they're different actors, but they have\
      \ a unique identifier so they \"correspond\" to each other. An actors Role variable\
      \ determines it's replication behaviour. ROLE_Authority is usually the one on\
      \ the server, and it runs all functions, simulated or not. ROLE_SimulatedProxy\
      \ is usually on the client, and runs only simulated functions. ROLE_DumbProxy\
      \ runs no functions, but still replicates variables. ROLE_None replicates nothing.\n\
      \n'''WheatPuppet:''' Can we cram this stuff into a tutorial somewhere!? I hate\
      \ having code on a Tutorial frontpage.\n\n'''Tarquin:''' maybe create [[Legacy:Introduction\
      \ To Replication|Introduction to Replication]]?\n\n'''WheatPuppet:''' Sounds\
      \ good to me... I'm not particularly qualified to write a tute or doc on replication,\
      \ though. I wonder if anyone but Tim Sweeny is. ;) It seems to me that replication\
      \ is the single least-understood aspect of UScript. I'd be willing to throw\
      \ together a page as a starter in a few days (a.k.a. after final exams).\n\n\
      '''Tarquin:''' actually, I just meant throw the stuff we don't want here onto\
      \ that page and leave it to fester :) Maybe someone more qualified will come\
      \ along and clean up. At least this page will be tidier.\n\n'''JimRimya:'''\
      \ How about a simple weapons mod, like increasing the firing rate of the rocket\
      \ launcher. Or maybe making all weapon spawn points be rocket launchers. What\
      \ I'm getting at is something like rocket arena in Q3. Thanks!\n\n'''M.r.bob:'''\
      \ The GUI for UT2004 is very different from the GUI for UT2003, someone needs\
      \ to make a tutorial for a UT2004 mutator with a GUI. Like one that lets you\
      \ change the amount of health the pawns have, that would be a cool and simple\
      \ mutator, and would teach people who only have 2004 how to make a decent mutator.\
      \ Please Please Please :D\n\n----\n\n'''Bob_The_Beheader:''' I'd really like\
      \ to see a tutorial for making heat-seeking or homing projectiles.\n\n'''SuperApe:'''\
      \ That's a good one.  I just helped someone with that on BUF by using some code\
      \ borrowed from BulldogRocket.  That already has an Actor (Pawn) property defined\
      \ for target, you just set it at launch to any (non-teammate) controlled Pawn.\
      \  For the purposes making a lesson out of it, you'd want to set up ''how''\
      \ the projectile is fired. (i.e., make a new hand-held weapon?  replace an existing\
      \ vehicle weapon?)\n\n'''Bob_The_Beheader:''' Cool. It does seem to me that\
      \ the projectile of the heat-seeking weapon is more important then the code\
      \ for the weapon itself. All you'd need to do for the weapon code in the tutorial\
      \ would be to change an existing weapon's properties to fire your new heat-seeking\
      \ projectile. Wait... I take that back. The weapon would need to contain code\
      \ for aquiring the target, probably. Unless you wanted the projectile to aquire\
      \ a target on it's own. This might make it a really difficult weapon to use,\
      \ which I don't think is a characteristic of heat-seeking weapons ;). I think\
      \ maybe the existing code for the Rocket Launcher and it's projectile would\
      \ do nicely for this tutorial. You could just reduce the time required for a\
      \ target lock, and up the manuverability of the rocket projectile, to make it\
      \ move more like an AVRIL. Also probably reduce the damage the rocket deals\
      \ and maybe the max ammo count of the launcher, in order to keep gameplay balanced.\
      \ I've never seen the Bulldog at work, so I'm not sure how it's weapon works,\
      \ but the target property does sound useful for this. You could just have it\
      \ be set to the enemy Pawn closest to your crosshair (?? I think... :confused:)\
      \ I think making this a hand-held weapon would be better suited for a tutorial,\
      \ because then you could test it in a small, quick-loading 1v1 DM map instead\
      \ of some monster long-loading ONS map. \n\n'''computergod666:''' Now that we're\
      \ on the topic of projectiles, is there a way to make a projectile stick to\
      \ a player or bot in UT? I know it can be done with bones in UT2kX, but there\
      \ is no GetClosestBone() in UT. Any ideas? A friend of mine who codes for Doom\
      \ suggested that I make a fast-response homing projectile, but that would mean\
      \ that it wouldn't necessarily be attached to the player, it would simply stay\
      \ close by.\n\n'''EntropicLqd:''' I can't answer your question directly, but,\
      \ could you fake it by using an inventory item that behaves in a similar way\
      \ to the CTF flag?  ie. When the projectile hits the player is given the \"\
      sticky thing\" as an inventory item with a Timer that fires to do damage (or\
      \ whatever you want).  Failing that, see if you can track down a copy of Nerf\
      \ Arena Blast (or whatever it was called).  I'm sure the nerf balls in that\
      \ used to stick to players.\n\n'''EricBlade:''' Of course it's possible. Instead\
      \ of having the Projectile actually blow up when it contacts, have it set bHardAttach=True,\
      \ SetBase() to the pawn it hit, turn off collision (so it doesn't get stuck\
      \ on things the pawn brushes by) \n\n'''computergod666:''' Thanks! I did get\
      \ it to work (sort of) so that as soon as the projectile touched its target,\
      \ it would go to a state where the projectile's velocity was set to the velocity\
      \ of the target every time Tick() was called. It looks good until the target\
      \ turns. What's the syntax for SetBase()?\n\n'''EricBlade:''' Don't forget to\
      \ SetPhysics(PHYS_NONE) too.  SetBase(Actor) should stick it to the given Actor.\
      \  Something like... SetPhysics(PHYS_NONE); bHardAttach=True; SetBase(WhatImStickingTo);\
      \  you could even attach it to a bone, if you're using like UT04\n\n'''computergod666:'''\
      \ Thanks again. Do you know if I set the base of an object to be a player, is\
      \ it supposed to hurt the player? I'm asking because I just made a gravity gun\
      \ for UT that is meant to be able to pick up and throw decorations and projectiles.\
      \ Every time I pick up a decoration with it, it sets the decorations base to\
      \ me, sets its physics to PHYS_None, and then enables a Tick() function that\
      \ keeps the object a certain distance and rotation away from me. Whenever I\
      \ do this, it deals me one point of damage! Why? Also, I did finish the projectile\
      \ question. I've implemented it for toxin darts (flechette cannon), sticky grenades,\
      \ and my Shrink Ray / Microwave Expander (see my personal page for more details.)\n\
      \n----\n\n===Powerups===\n\n'''computergod666:''' I just made a few of my own\
      \ powerups for UT. They work similarly to relics, in that only one person can\
      \ pick them up at a time, they can drop it by throwing it or dying, and you\
      \ can't pick up another powerup or a relic if you have either already. I want\
      \ to make a stealth powerup that makes you invisible to Bots as well as to other\
      \ players. Is there a way to make bots have a harder time seeing you? Also,\
      \ I would like to make it silence player noises like footsteps and weapon firing\
      \ sounds. Does anyone know how to do something like that?\n\n----\n\n'''Bob_The_Beheader:'''\
      \ Does anyone out there know how to code a melee weapon?... I guess I could\
      \ just look at the code for the melee weapons in the ChaosUT mod...\n\n===Grudge\
      \ Mutator===\n\n'''Tarquin:''' This is an idea I've had for some time for a\
      \ simple mutator, and it strikes me that it could serve as a simple tute for\
      \ netcode. It's called Grudge, and it would implement a few extra announcements\
      \ to do with who is killing who. This is how it works:\n* Suppose Player Bob\
      \ kills you, and after you respawn your first kill is Bob: it's a \"Revenge\"\
      \ (cue announcement and screen message)\n* If you get killed by Bob, and then\
      \ after respawning Bob kills you AGAIN (and you've not managed to kill him),\
      \ then it's a \"Grudge\". If that happens again, there could be further announcements...\n\
      \n'''Bob_The_Beheader:''' I'm not sure I understand you here, Tarquin. At first\
      \ I thought you were talking about something like the Revenge Rune, but are\
      \ you saying that all this would do is display the message \"Revenge\" and later\
      \ possibly \"Grudge\" onscreen? This sounds like the mutator on the UTAN clan's\
      \ gibzilla CTF server, I forget what it's called.\n\n'''Tarquin:''' I've actually\
      \ made a start on this. A beta version is available.\n\n'''Bob_The_Beheader:'''\
      \ By the way, I'm not good enough to kill ANYONE twice in a row, not unless\
      \ I'm very lucky :D.\n\n'''Guest:'''(TurkeyFromHell) Tarq, I'm just started\
      \ trying to make a mutator to ''prevent'' revenge killing (for a camping server),\
      \ and the only way I can see to go about it (being so unfamiliar with the majority\
      \ of the Engine's class system as I am) is to extend off of Pawn and redefine\
      \ the TakeDamage function. Is there an easier/less... drastic way to do this?\n\
      \n'''Eliot:''' try extending GameRules it contains a function for damage too.\n\
      \n'''Guest:'''(TurkeyFromHell) Yes lol I just decompiled an existing revenge\
      \ mutator to see how it worked :P, ty.\n\n==Discussion==\n\n'''DUc0N:'''Thought\
      \ it might be nice to mention semi-up-front that mod authoring under Linux is\
      \ NOT supported as of yet. Stay tuned though, I for one plan to gripe :)\n\n\
      '''Mr.Bob/his brother:''' these pages really need to be updated for 2004 im\
      \ trying to figure out how to make a High gravity mutator. :cheesy:\n\n'''EntropicLqd:'''\
      \ Well, you could start by looking at the code for the low gravity mutator that\
      \ gets shipped with UT2004, and then rather than make the gravity less, make\
      \ it more.  Seems like a good place to start to me.\n\n'''Tarquin:''' I decided\
      \ that Instant Start wasn't really suitable as a lesson. \n\n'''Mr.bob:''' KEWL!\
      \ ;D my thingy is finally at the top, and i didn't even have to put it there!\n\
      \n'''Fearless:''' It would be nice to have a subject about modifying a standard\
      \ UT weapons as this is what someone beginning in Uscript would like to do.\n\
      \n'''Prospero:''' A tutorial on the finer points of coding for networking would\
      \ be rad. There are a lot of comments to the effect of \"this isn't coded for\
      \ networking\", but why it is wrong is rarely explained.\n\n'''Bob_The_Beheader:'''\
      \ Fearless: first UScript thing I did at least was modify an original weapon.\
      \ I kind of integrated this into learning how to make models and textures for\
      \ UT. Now the link gun has a new model and shoots yellow glowing exploding rings!\
      \ :cheesy:\n\n'''OlympusMons:''' Added link to using the mod system in ut2004\
      \ but the page itself is ruff, if anyone could lend a hand with suggestions\
      \ or give me feedback on how well it works for them Id greatly appreciate it.\n\
      \nAce Ulimited: Can you make weapons for Killing Floor using Unreal Editor or\
      \ using this Unreal Script Tutorial? I have no idea where to start because im\
      \ new at this and I have no knowledge what so ever on any of this."
  properties: []
  revId: 46032
name: "Legacy:UnrealScript Lessons"
revision:
  revid: 46032
  parentid: 43210
  user: "50.160.32.117"
  timestamp: 1406785109.000000000
  comment: ""
timestamp: 1668753155.882290000
