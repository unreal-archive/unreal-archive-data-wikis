---
parse:
  title: "Legacy:UnDox Revisited"
  text:
    text: "<p><i>some discussion from <a href=\"/Legacy:Dma\" title=\"Legacy:Dma\"\
      >Dma</a>:</i></p>\n<p><b>Dma:</b> I might be a bit bold for saying this, but\
      \ we REALLY should make our own UnDox with some of the code from Wookee. UnDox\
      \ has more errors than I can count. We can make one that has the option of directly\
      \ reading from the TextBuffer objects that are part of most .U files (or allow\
      \ the user to use .UC files). Perl should work for this. I for one am sick of\
      \ centered UnrealScript source code!</p>\n<p><b>Mychaeel:</b> Sounds good to\
      \ me. <a href=\"/Legacy:Wookee\" title=\"Legacy:Wookee\">Wookee</a> is Perl\
      \ though, and even though I think Perl would be best suited for a task like\
      \ this, a tool like this will gain much more attention if it doesn't require\
      \ users to install Perl on their computers first. So I think using Delphi or\
      \ C++ would be a better choice, if only for that. Supporting .u files sounds\
      \ good; we could either use <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://www.acordero.org\">Antonio Cordero</a>'s Delphi unit or <a href=\"/Legacy:UnrVarpu\"\
      \ title=\"Legacy:UnrVarpu\">UnrVarpu</a>, provided we don't feel like reinventing\
      \ a wheel. (By the way, I hear that UnDox's creator was employed by Epic later\
      \ thanks to him creating UnDox...)</p>\n<p><b>Tarquin:</b> Was Dma's suggestion\
      \ maybe that Undox2 could output Wiki markup, ready to become Wiki pages that\
      \ can then be annotated?</p>\n<p><b>Mychaeel:</b> No, I think he's talking about\
      \ something like UnDox implemented in Perl. (I must admit that I had accidentally\
      \ skipped over dma's mention of Perl in his statement when I wrote my answer\
      \ – that's why I'm so needlessly expressly pointing out that Wookee is Perl...)</p>\n\
      <p><b>Bcladd:</b> Okay, is there a published source for the grammar for UnrealScript?\
      \ I am particularly interested in UT2003. I am inherently a tool builder and\
      \ I would like to play at manipulating .uc files. If I have to I can start trying\
      \ to extract the grammar from the wonderful UnrealScrip reference here but that\
      \ seems like real work. The grammar would make it possible to use some thing\
      \ like Perl's Parse::RecDescent or LLg or even bison (I can get my head around\
      \ recursive descent parsers much better than I can shift-reduce, but with a\
      \ parser generator all that stuff can be automated).</p>\n<p>The grammar could\
      \ be applied to making an open-source documentation generator <a href=\"/Legacy:UnDox\"\
      \ title=\"Legacy:UnDox\">UnDox</a>, a <a href=\"/Legacy:Class_Wikifier\" title=\"\
      Legacy:Class Wikifier\">Class_Wikifier</a>, or even a preprocessor-based profiler\
      \ (intrusive profiling). Just thinking out loud. Still trying to finish an entire\
      \ Mutator so I am new at UnrealScript; I know a thing or two about programming\
      \ languages, however.</p>\n<p><b>Tarquin:</b> not as far as I know. but it's\
      \ the sort of thing that could be worked on here – start a page on <a href=\"\
      /Legacy:UnrealScript_Grammar\" title=\"Legacy:UnrealScript Grammar\">UnrealScript\
      \ Grammar</a> or something&#160;:)</p>\n<p><b>El Muerte TDS:</b> hmm... intresting,\
      \ defining the grammar would be very usefull. I wonder if Epic has a grammar\
      \ specification, that would make it much easier.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnDox_Revisited?section=1\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li>Other <a href=\"/Legacy:Application\" title=\"\
      Legacy:Application\">applications</a></li>\n</ul>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.021 seconds\nReal time usage: 0.049 seconds\nPreprocessor\
      \ visited node count: 3/1000000\nPreprocessor generated node count: 8/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3335-0!*!0!*!*!*!*\
      \ and timestamp 20221117235344 and revision id 8615\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Wookee"
  - ns: 100
    exists: true
    name: "Legacy:UnrVarpu"
  - ns: 100
    exists: true
    name: "Legacy:Application"
  - ns: 100
    exists: true
    name: "Legacy:UnDox"
  - ns: 100
    exists: true
    name: "Legacy:Dma"
  - ns: 100
    exists: true
    name: "Legacy:Class Wikifier"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Grammar"
  templates: []
  images: []
  externallinks:
  - "http://www.acordero.org"
  sections:
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnDox_Revisited"
    byteoffset: 2821
    anchor: "Related_Topics"
  displaytitle: "Legacy:UnDox Revisited"
  iwlinks: []
  wikitext:
    text: "''some discussion from [[Legacy:Dma|Dma]]:''\n\n'''Dma:''' I might be a\
      \ bit bold for saying this, but we REALLY should make our own UnDox with some\
      \ of the code from Wookee.  UnDox has more errors than I can count.  We can\
      \ make one that has the option of directly reading from the TextBuffer objects\
      \ that are part of most .U files (or allow the user to use .UC files).  Perl\
      \ should work for this.  I for one am sick of centered UnrealScript source code!\n\
      \n'''Mychaeel:'''  Sounds good to me.  [[Legacy:Wookee|Wookee]] is Perl though,\
      \ and even though I think Perl would be best suited for a task like this, a\
      \ tool like this will gain much more attention if it doesn't require users to\
      \ install Perl on their computers first.  So I think using Delphi or C++ would\
      \ be a better choice, if only for that.  Supporting .u files sounds good; we\
      \ could either use [http://www.acordero.org Antonio Cordero]'s Delphi unit or\
      \ [[Legacy:UnrVarpu|UnrVarpu]], provided we don't feel like reinventing a wheel.\
      \  (By the way, I hear that UnDox's creator was employed by Epic later thanks\
      \ to him creating UnDox...)\n\n'''Tarquin:'''  Was Dma's suggestion maybe that\
      \ Undox2 could output Wiki markup, ready to become Wiki pages that can then\
      \ be annotated?\n\n'''Mychaeel:'''  No, I think he's talking about something\
      \ like UnDox implemented in Perl.  (I must admit that I had accidentally skipped\
      \ over dma's mention of Perl in his statement when I wrote my answer &ndash;\
      \ that's why I'm so needlessly expressly pointing out that Wookee is Perl...)\n\
      \n'''Bcladd:''' Okay, is there a published source for the grammar for UnrealScript?\
      \ I am particularly interested in UT2003. I am inherently a tool builder and\
      \ I would like to play at manipulating .uc files. If I have to I can start trying\
      \ to extract the grammar from the wonderful UnrealScrip reference here but that\
      \ seems like real work. The grammar would make it possible to use some thing\
      \ like Perl's Parse::RecDescent or LLg or even bison (I can get my head around\
      \ recursive descent parsers much better than I can shift-reduce, but with a\
      \ parser generator all that stuff can be automated).\n\nThe grammar could be\
      \ applied to making an open-source documentation generator [[Legacy:UnDox|UnDox]],\
      \ a [[Legacy:Class_Wikifier|Class_Wikifier]], or even a preprocessor-based profiler\
      \ (intrusive profiling). Just thinking out loud. Still trying to finish an entire\
      \ Mutator so I am new at UnrealScript; I know a thing or two about programming\
      \ languages, however.\n\n'''Tarquin:''' not as far as I know. but it's the sort\
      \ of thing that could be worked on here &ndash; start a page on [[Legacy:UnrealScript\
      \ Grammar|UnrealScript Grammar]] or something :)\n\n'''El Muerte TDS:''' hmm...\
      \ intresting, defining the grammar would be very usefull. I wonder if Epic has\
      \ a grammar specification, that would make it much easier.\n\n==Related Topics\
      \ ==\n* Other [[Legacy:Application|application]]s"
  properties: []
  revId: 8615
name: "Legacy:UnDox Revisited"
revision:
  revid: 8615
  parentid: 8616
  user: "El Muerte TDS"
  timestamp: 1052213864.000000000
  comment: "*"
timestamp: 1668766329.894105000
