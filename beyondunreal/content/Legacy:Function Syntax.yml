---
parse:
  title: "Legacy:Function Syntax"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Function_Declaration\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Function Declaration</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Function_Calls\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Function Calls</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Function_vs_Event\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Function vs Event</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Delegates\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Delegates</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-5\"><a href=\"#Function_Modifiers\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Function Modifiers</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Parameter_Types\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Parameter Types</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Parameter_Modifiers\"><span\
      \ class=\"tocnumber\">7</span> <span class=\"toctext\">Parameter Modifiers</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#Empty_Functions\"><span class=\"\
      tocnumber\">8</span> <span class=\"toctext\">Empty Functions</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Function_Declaration\"\
      >Function Declaration</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Function_Syntax?section=1\" title=\"Edit section:\
      \ Function Declaration\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The general function declaration looks like this:</p>\n<pre>&lt;<i>function\
      \ modifiers</i>&gt; <b>function</b>/<b>event</b>/<b>delegate</b> &lt;<i>return\
      \ type</i>&gt; &lt;<i>function name</i>&gt; \n <b>(</b>&lt;<i>parameter modifier</i>&gt;\
      \ &lt;<i>type</i>&gt; &lt;<i>parameter name</i>&gt;<b>,</b> ...<b>)</b>\n  \
      \   <b>{</b>\n      ...\n     <b>}</b>\n</pre>\n<dl>\n<dt>&lt;function modifiers&gt;&#160;</dt>\n\
      <dd>Keywords that specify aspects of the function's overall nature and behaviour.</dd>\n\
      <dt>&lt;return type&gt;&#160;</dt>\n<dd>The <a href=\"/Legacy:Variable_Type\"\
      \ title=\"Legacy:Variable Type\">variable type</a> the function returns. You\
      \ can't return static arrays due to the way they have to be declared. However,\
      \ you can use an <i>out</i> variable in this case. See Parameter Modifiers further\
      \ down this page.</dd>\n<dt>&lt;function name&gt;&#160;</dt>\n<dd>The name of\
      \ the function, chosen by the coder. For advice on naming conventions see <a\
      \ href=\"/Legacy:Coding_Guidelines\" title=\"Legacy:Coding Guidelines\">Coding\
      \ Guidelines</a>.</dd>\n<dt>&lt;parameter modifier&gt;&#160;</dt>\n<dd>Changes\
      \ the nature of individual parameters.</dd>\n<dt>&lt;type&gt;&#160;</dt>\n<dd>The\
      \ type of each parameter.</dd>\n</dl>\n<p>Example:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> MyFunction<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">bool</span> FirstParam , <span class=\"kw1\">out</span> <span\
      \ class=\"kw5\">int</span> SecondParam, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">string</span> ThirdParam <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n <span class=\"co1\">// function code</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>You can declare up to 16\
      \ parameters for each function. If you need to pass more variables or values\
      \ you might consider putting those in a struct or array and pass that to the\
      \ function.</p>\n<h2><span class=\"mw-headline\" id=\"Function_Calls\">Function\
      \ Calls</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Function_Syntax?section=2\" title=\"Edit section:\
      \ Function Calls\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>There are different ways of calling a function:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">bool</span>\
      \ bReturn, bHaveIt;\n<span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ Number;\n \nMyFunction<span class=\"br0\">(</span><span class=\"kw6\">True</span>,\
      \ <span class=\"nu0\">34</span>, <span class=\"st0\">\"Hello World!\"</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// parameters passed as literals</span>\n\
      MyFunction<span class=\"br0\">(</span>bHaveIt, Number<span class=\"br0\">)</span>;\
      \          <span class=\"co1\">// parameters passed as variables</span>\nbReturn\
      \ <span class=\"sy0\">=</span> MyFunction<span class=\"br0\">(</span><span class=\"\
      kw6\">False</span>, Number, <span class=\"st0\">\"Hi there!\"</span><span class=\"\
      br0\">)</span>; <span class=\"co1\">// save function's return value in another\
      \ variable</span></pre></div>\n</div>\n<p>The third version is only allowed\
      \ when the function has a return value. Note, that any return value you don't\
      \ save in a variable will be thrown away. For (non-actor) objects this means\
      \ they are lost and will be garbage collected.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Function_vs_Event\">Function vs Event</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Function_Syntax?section=3\"\
      \ title=\"Edit section: Function vs Event\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <b>event</b> keyword is similar to function, but\
      \ it creates a C++ header so you can call the function from C++ code. See <a\
      \ href=\"/Legacy:UnrealScript_Language_Reference/Functions\" title=\"Legacy:UnrealScript\
      \ Language Reference/Functions\">UnrealScript Language Reference/Functions</a>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Delegates\">Delegates</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Function_Syntax?section=4\"\
      \ title=\"Edit section: Delegates\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Delegates could be described as a mixture between\
      \ a function and a class variable. Delegates can be called like functions, but\
      \ you can also assign \"something\" to them. This \"something would be another\
      \ function, but see <a href=\"/Legacy:Delegate\" title=\"Legacy:Delegate\">Delegate</a>\
      \ for details since this topic is worth a whole new page.</p>\n<p>The delegate\
      \ keyword also includes the effect of the <b>event</b> keyword.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Function_Modifiers\">Function Modifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Function_Syntax?section=5\" title=\"Edit section: Function\
      \ Modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <dl>\n<dt>final&#160;</dt>\n<dd>This function can't be overridden in subclasses\
      \ or states of this class. Functions that are <i>static</i> and <i>final</i>\
      \ are automatically <i>simulated</i> as well.</dd>\n</dl>\n<dl>\n<dt>iterator&#160;</dt>\n\
      <dd>This function is an <a href=\"/Legacy:Iterator\" title=\"Legacy:Iterator\"\
      >iterator</a> function for the use with <i>ForEach</i>. Only native functions\
      \ can be iterator functions.</dd>\n</dl>\n<dl>\n<dt>latent&#160;</dt>\n<dd>Latent\
      \ functions require some time to be executed. Typical examples are <i>Sleep</i>\
      \ which waits for the specified amount of time before returning and <i>FinishAnim</i>\
      \ which returns when the current animation has finished.<br />\nLatent functions\
      \ can only be called from state code and may not be called from within ForEach\
      \ loops. Latent functions have to be native.<br />\nSee <a href=\"/Legacy:Latent_Function\"\
      \ title=\"Legacy:Latent Function\">Latent Function</a>.</dd>\n</dl>\n<dl>\n\
      <dt>native (or intrinsic in older Unreal versions)&#160;</dt>\n<dd>The function\
      \ is written in native C++ code.</dd>\n<dt>native(<i>&lt;number&gt;</i>)&#160;</dt>\n\
      <dd>The number is a unique identifier for the function. Functions in UScript\
      \ get numbers automatically, except for native functions, which can \"reserve\"\
      \ a function number with this syntax. This is useful because this number must\
      \ appear in the native code, and if it is not fixed in this fashion it could\
      \ fluctuate with different builds.</dd>\n</dl>\n<dl>\n<dt>simulated&#160;</dt>\n\
      <dd>The function can be executed on the server or a client in a network game.\
      \ Any function not declared simulated is ignored on the client.<br />\nSee <a\
      \ href=\"/Legacy:Simulated_Function\" title=\"Legacy:Simulated Function\">Simulated\
      \ Function</a>.<br />\n<b>Note:</b> Simulated functions are not automatically\
      \ executed on the server and all clients. See <a href=\"/Legacy:Replication\"\
      \ title=\"Legacy:Replication\">Replication</a> for details.</dd>\n<dt>singular&#160;</dt>\n\
      <dd>prevents reentrancy (recursively calling the same function, in the same\
      \ object). It can be very useful to prevent certain types of 'endless recursion\
      \ loop' crashes, but it usefulness is limited by a few caveats. When an object\
      \ enters a singular function, a flag is set <b>on the object itself</b> that\
      \ prevents it from re-entering a singular function. This means that any other\
      \ singular functions that are called on that object will not be executed until\
      \ the initial singular function has returned, and the 'i'm in a singular function'\
      \ flag has been unset on the object. This includes base versions of the same\
      \ function declared in super classes. For example:</dd>\n</dl>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> <span class=\"kw7\">Base</span>\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span>;\n<span\
      \ class=\"kw1\">singular</span> <span class=\"kw1\">function</span> DoSomething<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\
      \ <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\"\
      >\"blah\"</span><span class=\"br0\">)</span>; <span class=\"br0\">}</span>\n\
      ...\n...\n<span class=\"kw1\">class</span> Derived <span class=\"kw1\">extends</span>\
      \ <span class=\"kw7\">Base</span>;\n<span class=\"kw1\">singular</span> <span\
      \ class=\"kw1\">function</span> DoSomething<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">DoSomething</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>; <span class=\"br0\">}</span></pre></div>\n</div>\n<p>When Derived.DoSomething()\
      \ is called, Super.DoSomething() will not be called, since the object already\
      \ has a 'singular' function in its call stack.</p>\n<dl>\n<dt>static&#160;</dt>\n\
      <dd>Declares the function as static. See <a href=\"/Legacy:Static_Function\"\
      \ title=\"Legacy:Static Function\">Static Function</a>.</dd>\n<dt>exec&#160;</dt>\n\
      <dd>The function can be called from the console.</dd>\n<dt>protected&#160;</dt>\n\
      <dd>The function is only visible from the class it was declared in and in all\
      \ subclasses.</dd>\n<dt>private&#160;</dt>\n<dd>The function is only visible\
      \ from the class it was declared in, but not in any of its subclasses.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Parameter_Types\">Parameter Types</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Function_Syntax?section=6\" title=\"Edit section: Parameter\
      \ Types\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>You can use any built-in <a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable\
      \ Type\">variable types</a>, structs, enums, static and dynamic arrays or objects\
      \ as type. However, you can't use <i>out</i> bool or <i>optional</i> dynamic\
      \ arrays. See Parameter Modifiers below.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Parameter_Modifiers\">Parameter Modifiers</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Function_Syntax?section=7\"\
      \ title=\"Edit section: Parameter Modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dt>out&#160;</dt>\n<dd></dd>\n</dl>\n<p>When you\
      \ pass a variable to a function, its value is copied to a local variable in\
      \ that function. The <b>out</b> modifier will copy the modified local value\
      \ back to the original variable when the function returns.</p>\n<p>You can use\
      \ this modifier when you want a function to return more than one variable. Don't\
      \ try to use it as performance improvement, though. Especially with larger variable\
      \ types like dynamic arrays it tends to actually slow things down.</p>\n<p>Here's\
      \ a simple test case to demonstrate how the <b>out</b> modifier works:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> TestCommandlet\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Commandlet</span>;\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span> i;\n \n<span\
      \ class=\"kw1\">function</span> <span class=\"kw5\">int</span> Main<span class=\"\
      br0\">(</span><span class=\"kw5\">string</span> Args<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  i <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>;\n  <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span\
      \ class=\"br0\">)</span>;\n  testout<span class=\"br0\">(</span>i<span class=\"\
      br0\">)</span>;\n  <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> <span class=\"\
      nu0\">0</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ testout<span class=\"br0\">(</span><span class=\"kw1\">out</span> <span class=\"\
      kw5\">int</span> j<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span class=\"\
      sy0\">@</span>j<span class=\"br0\">)</span>;\n  j<span class=\"sy0\">++</span>;\n\
      \  <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span class=\"\
      sy0\">@</span>j<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Call <code>UCC YourPackage.Test</code> at the command line and you\
      \ get:</p>\n<pre>1\n1 1\n1 2\n2</pre>\n<p>As you can see, the global variable\
      \ didn't change while the <code>testout</code> function was executed. But it\
      \ changed right after the function returned.</p>\n<dl>\n<dt>optional&#160;</dt>\n\
      <dd>This parameter may be skipped in a call. If a parameter should be skipped\
      \ add commas as normal. If the skipped parameter is the last one the comma can\
      \ be left out as well. This modifier is ignored for dynamic arrays.</dd>\n<dt>coerce&#160;</dt>\n\
      <dd>Automatically casts the parameter to the specified type. (see <a href=\"\
      /Legacy:Typecasting\" title=\"Legacy:Typecasting\">Typecasting</a> for details)</dd>\n\
      <dt>skip&#160;</dt>\n<dd>Only valid as modifier of the second parameter of a\
      \ native operator. If the first parameter already is enough to decide the operators\
      \ return value then the second one will not be evaluated. This is used for the\
      \ <code>{|</code></dd>\n</dl>\n<p><code>|- | |}</code> and <code>&amp;&amp;</code>\
      \ operators.</p>\n<h2><span class=\"mw-headline\" id=\"Empty_Functions\">Empty\
      \ Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Function_Syntax?section=8\" title=\"Edit section:\
      \ Empty Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Two reasons to declare an 'empty' function:</p>\n<ul>\n<li>declare an \"\
      abstract\" empty function that can then be \"specialised\" in a subclass or\
      \ a state</li>\n<li>override a function with one that does nothing, in a subclass\
      \ or state</li>\n</ul>\n<p>Both of the following types of syntax work for both\
      \ applications:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> Foo<span class=\"br0\">(</span> <span class=\"kw5\">float</span>\
      \ MyParam <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"\
      br0\">}</span>\n<span class=\"kw1\">function</span> Foo<span class=\"br0\">(</span>\
      \ <span class=\"kw5\">float</span> MyParam <span class=\"br0\">)</span> ;</pre></div>\n\
      </div>\n<p>When such a function is called, it does nothing. If it is declared\
      \ to return a value, that value is the respective data type's \"empty\" value\
      \ (0, \"\", None or the like).</p>\n<p><b>Note:</b> There's not much use in\
      \ making an empty function simulated. The simulated keyword (like most other\
      \ function modifiers) isn't inherited and when there's no code, there's nothing\
      \ to be executed on a client.&#160;;)</p>\n<p><b>Vitaloverdose</b> I cant seem\
      \ to find any example of how to overwrite a function with a return value. Can\
      \ this be done without recieving a warning in the log?</p>\n<p><b>Wormbo:</b>\
      \ What do you mean? UT is full of overridden functions that have a return value\
      \ and use the super version's return value in some way as well.</p>\n<p><b>Sweavo:</b>\
      \ @vital: do you mean overriding a function that hasn't got a return value with\
      \ one that has? (I don't have the answer, I just thought that was a version\
      \ of the question that might make sense!)</p>\n<p><b>Wormbo:</b> That'd involve\
      \ changing the function prototype, which is not allowed in UnrealScript.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Function_Syntax?section=9\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\n\
      <ul>\n<li><a href=\"/Legacy:Delegate\" title=\"Legacy:Delegate\">Delegate</a></li>\n\
      <li><a href=\"/Legacy:Exec_Function\" title=\"Legacy:Exec Function\">Exec Function</a></li>\n\
      <li><a href=\"/Legacy:Latent_Function\" title=\"Legacy:Latent Function\">Latent\
      \ Function</a></li>\n<li><a href=\"/Legacy:Global_Function\" title=\"Legacy:Global\
      \ Function\">Global Function</a></li>\n<li><a href=\"/Legacy:Replicated_Function\"\
      \ title=\"Legacy:Replicated Function\">Replicated Function</a></li>\n<li><a\
      \ href=\"/Legacy:Scripting_Operators\" title=\"Legacy:Scripting Operators\"\
      >Scripting Operators</a></li>\n<li><a href=\"/Legacy:Simulated_Function\" title=\"\
      Legacy:Simulated Function\">Simulated Function</a></li>\n<li><a href=\"/Legacy:Static_Function\"\
      \ title=\"Legacy:Static Function\">Static Function</a></li>\n</ul>\n</li>\n\
      <li><a href=\"/Legacy:UnrealScript_Language_Reference/Functions\" title=\"Legacy:UnrealScript\
      \ Language Reference/Functions\">UnrealScript Language Reference/Functions</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.110 seconds\nReal time\
      \ usage: 0.229 seconds\nPreprocessor visited node count: 110/1000000\nPreprocessor\
      \ generated node count: 208/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:1226-0!*!0!!en!*!* and timestamp\
      \ 20221118092602 and revision id 3168\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Exec Function"
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:Replicated Function"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:Static Function"
  - ns: 100
    exists: true
    name: "Legacy:Coding Guidelines"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Functions"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Latent Function"
  - ns: 100
    exists: true
    name: "Legacy:Delegate"
  - ns: 100
    exists: true
    name: "Legacy:Scripting Operators"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Function Declaration"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 0
    anchor: "Function_Declaration"
  - toclevel: 1
    level: "2"
    line: "Function Calls"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 1272
    anchor: "Function_Calls"
  - toclevel: 1
    level: "2"
    line: "Function vs Event"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 1887
    anchor: "Function_vs_Event"
  - toclevel: 1
    level: "2"
    line: "Delegates"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 2132
    anchor: "Delegates"
  - toclevel: 1
    level: "2"
    line: "Function Modifiers"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 2527
    anchor: "Function_Modifiers"
  - toclevel: 1
    level: "2"
    line: "Parameter Types"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 5520
    anchor: "Parameter_Types"
  - toclevel: 1
    level: "2"
    line: "Parameter Modifiers"
    number: "7"
    index: "7"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 5771
    anchor: "Parameter_Modifiers"
  - toclevel: 1
    level: "2"
    line: "Empty Functions"
    number: "8"
    index: "8"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 7440
    anchor: "Empty_Functions"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "9"
    index: "9"
    fromtitle: "Legacy:Function_Syntax"
    byteoffset: 8845
    anchor: "Related_Topics"
  displaytitle: "Legacy:Function Syntax"
  iwlinks: []
  wikitext:
    text: "==Function Declaration ==\n\nThe general function declaration looks like\
      \ this:\n\n <''function modifiers''> '''function'''/'''event'''/'''delegate'''\
      \ <''return type''> <''function name''> \n  '''('''<''parameter modifier''>\
      \ <''type''> <''parameter name''>''',''' ...''')'''\n      '''{'''\n       ...\n\
      \      '''}'''\n\n; <function modifiers> : Keywords that specify aspects of\
      \ the function's overall nature and behaviour.\n; <return type> : The [[Legacy:Variable\
      \ Type|variable type]] the function returns. You can't return static arrays\
      \ due to the way they have to be declared. However, you can use an ''out'' variable\
      \ in this case. See Parameter Modifiers further down this page.\n; <function\
      \ name> : The name of the function, chosen by the coder. For advice on naming\
      \ conventions see [[Legacy:Coding Guidelines|Coding Guidelines]].\n; <parameter\
      \ modifier> : Changes the nature of individual parameters.\n; <type> : The type\
      \ of each parameter.\n\nExample:\n\n<uscript>\nfinal function bool MyFunction(\
      \ bool FirstParam , out int SecondParam, optional string ThirdParam )\n{\n //\
      \ function code\n}\n</uscript>\n\nYou can declare up to 16 parameters for each\
      \ function. If you need to pass more variables or values you might consider\
      \ putting those in a struct or array and pass that to the function.\n\n==Function\
      \ Calls==\n\nThere are different ways of calling a function:\n\n<uscript>\n\
      local bool bReturn, bHaveIt;\nlocal int Number;\n\nMyFunction(True, 34, \"Hello\
      \ World!\"); // parameters passed as literals\nMyFunction(bHaveIt, Number);\
      \          // parameters passed as variables\nbReturn = MyFunction(False, Number,\
      \ \"Hi there!\"); // save function's return value in another variable\n</uscript>\n\
      \nThe third version is only allowed when the function has a return value. Note,\
      \ that any return value you don't save in a variable will be thrown away. For\
      \ (non-actor) objects this means they are lost and will be garbage collected.\n\
      \n==Function vs Event==\n\nThe '''event''' keyword is similar to function, but\
      \ it creates a C++ header so you can call the function from C++ code.  See [[Legacy:UnrealScript\
      \ Language Reference/Functions|UnrealScript Language Reference/Functions]].\n\
      \n==Delegates==\n\nDelegates could be described as a mixture between a function\
      \ and a class variable. Delegates can be called like functions, but you can\
      \ also assign \"something\" to them. This \"something would be another function,\
      \ but see [[Legacy:Delegate|Delegate]] for details since this topic is worth\
      \ a whole new page.\n\nThe delegate keyword also includes the effect of the\
      \ '''event''' keyword.\n\n==Function Modifiers ==\n; final : This function can't\
      \ be overridden in subclasses or states of this class. Functions that are ''static''\
      \ and ''final'' are automatically ''simulated'' as well.\n\n; iterator : This\
      \ function is an [[Legacy:Iterator|iterator]] function for the use with ''ForEach''.\
      \ Only native functions can be iterator functions.\n\n; latent : Latent functions\
      \ require some time to be executed. Typical examples are ''Sleep'' which waits\
      \ for the specified amount of time before returning and ''FinishAnim'' which\
      \ returns when the current animation has finished.<br />Latent functions can\
      \ only be called from state code and may not be called from within ForEach loops.\
      \ Latent functions have to be native. <br />See [[Legacy:Latent Function|Latent\
      \ Function]].\n\n; native (or intrinsic in older Unreal versions) : The function\
      \ is written in native C++ code.\n; native(''<number>'') : The number is a unique\
      \ identifier for the function. Functions in UScript get numbers automatically,\
      \ except for native functions, which can \"reserve\" a function number with\
      \ this syntax. This is useful because this number must appear in the native\
      \ code, and if it is not fixed in this fashion it could fluctuate with different\
      \ builds.\n\n; simulated : The function can be executed on the server or a client\
      \ in a network game. Any function not declared simulated is ignored on the client.<br\
      \ />See [[Legacy:Simulated Function|Simulated Function]].<br />'''Note:''' Simulated\
      \ functions are not automatically executed on the server and all clients. See\
      \ [[Legacy:Replication|Replication]] for details.\n; singular : prevents reentrancy\
      \ (recursively calling the same function, in the same object).  It can be very\
      \ useful to prevent certain types of 'endless recursion loop' crashes, but it\
      \ usefulness is limited by a few caveats.  When an object enters a singular\
      \ function, a flag is set <b>on the object itself</b> that prevents it from\
      \ re-entering a singular function.  This means that any other singular functions\
      \ that are called on that object will not be executed until the initial singular\
      \ function has returned, and the 'i'm in a singular function' flag has been\
      \ unset on the object.  This includes base versions of the same function declared\
      \ in super classes.  For example<nowiki>:</nowiki>\n\n<uscript>\nclass Base\
      \ extends Object;\nsingular function DoSomething() { log(\"blah\"); }\n...\n\
      ...\nclass Derived extends Base;\nsingular function DoSomething() { Super.DoSomething();\
      \ }\n</uscript>\n\nWhen Derived.DoSomething() is called, Super.DoSomething()\
      \ will not be called, since the object already has a <nowiki>'singular'</nowiki>\
      \ function in its call stack.\n; static : Declares the function as static. See\
      \ [[Legacy:Static Function|Static Function]].\n; exec : The function can be\
      \ called from the console.\n; protected : The function is only visible from\
      \ the class it was declared in and in all subclasses.\n; private : The function\
      \ is only visible from the class it was declared in, but not in any of its subclasses.\n\
      \n==Parameter Types ==\n\nYou can use any built-in [[Legacy:Variable Type|variable\
      \ type]]s, structs, enums, static and dynamic arrays or objects as type.  However,\
      \ you can't use ''out'' bool or ''optional'' dynamic arrays. See Parameter Modifiers\
      \ below.\n\n==Parameter Modifiers ==\n; out :\nWhen you pass a variable to a\
      \ function, its value is copied to a local variable in that function. The '''out'''\
      \ modifier will copy the modified local value back to the original variable\
      \ when the function returns.\n\nYou can use this modifier when you want a function\
      \ to return more than one variable. Don't try to use it as performance improvement,\
      \ though. Especially with larger variable types like dynamic arrays it tends\
      \ to actually slow things down.\n\nHere's a simple test case to demonstrate\
      \ how the '''out''' modifier works:\n\n<uscript>\nclass TestCommandlet extends\
      \ Commandlet;\n\nvar int i;\n\nfunction int Main(string Args)\n{\n  i = 1;\n\
      \  log(i);\n  testout(i);\n  log(i);\n  return 0;\n}\n\nfunction testout(out\
      \ int j)\n{\n  log(i@j);\n  j++;\n  log(i@j);\n}\n</uscript>\n\nCall <code>UCC\
      \ YourPackage.Test</code> at the command line and you get:<pre>1\n1 1\n1 2\n\
      2</pre>As you can see, the global variable didn't change while the <code>testout</code>\
      \ function was executed. But it changed right after the function returned.\n\
      \n; optional : This parameter may be skipped in a call. If a parameter should\
      \ be skipped add commas as normal. If the skipped parameter is the last one\
      \ the comma can be left out as well. This modifier is ignored for dynamic arrays.\n\
      ; coerce : Automatically casts the parameter to the specified type. (see [[Legacy:Typecasting|Typecasting]]\
      \ for details)\n; skip : Only valid as modifier of the second parameter of a\
      \ native operator. If the first parameter already is enough to decide the operators\
      \ return value then the second one will not be evaluated. This is used for the\
      \ <code>{|\n\n|-\n|\n|}\n</code> and <code>&&</code> operators.\n\n==Empty Functions\
      \ ==\n\nTwo reasons to declare an 'empty' function:\n* declare an \"abstract\"\
      \ empty function that can then be \"specialised\" in a subclass or a state\n\
      * override a function with one that does nothing, in a subclass or state\n\n\
      Both of the following types of syntax work for both applications:\n\n<uscript>\n\
      function Foo( float MyParam ) {}\nfunction Foo( float MyParam ) ;\n</uscript>\n\
      \nWhen such a function is called, it does nothing.  If it is declared to return\
      \ a value, that value is the respective data type's \"empty\" value (0, \"\"\
      , None or the like).\n\n'''Note:''' There's not much use in making an empty\
      \ function simulated. The simulated keyword (like most other function modifiers)\
      \ isn't inherited and when there's no code, there's nothing to be executed on\
      \ a client. ;)\n\n'''Vitaloverdose''' I cant seem to find any example of how\
      \ to overwrite a function with a return value. Can this be done without recieving\
      \ a warning in the log?\n\n'''Wormbo:''' What do you mean? UT is full of overridden\
      \ functions that have a return value and use the super version's return value\
      \ in some way as well.\n\n'''Sweavo:''' @vital: do you mean overriding a function\
      \ that hasn't got a return value with one that has? (I don't have the answer,\
      \ I just thought that was a version of the question that might make sense!)\n\
      \n'''Wormbo:''' That'd involve changing the function prototype, which is not\
      \ allowed in UnrealScript.\n\n==Related Topics ==\n* [[Legacy:UnrealScript|UnrealScript]]\n\
      ** [[Legacy:Delegate|Delegate]]\n** [[Legacy:Exec Function|Exec Function]]\n\
      ** [[Legacy:Latent Function|Latent Function]]\n** [[Legacy:Global Function|Global\
      \ Function]]\n** [[Legacy:Replicated Function|Replicated Function]]\n** [[Legacy:Scripting\
      \ Operators|Scripting Operators]]\n** [[Legacy:Simulated Function|Simulated\
      \ Function]]\n** [[Legacy:Static Function|Static Function]]\n* [[Legacy:UnrealScript\
      \ Language Reference/Functions|UnrealScript Language Reference/Functions]]"
  properties: []
  revId: 3168
name: "Legacy:Function Syntax"
revision:
  revid: 3168
  parentid: 3169
  user: "Wormbo"
  timestamp: 1148393456.000000000
  comment: "*"
timestamp: 1668763563.581874000
