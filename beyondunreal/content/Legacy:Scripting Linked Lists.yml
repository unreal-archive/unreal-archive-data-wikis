---
parse:
  title: "Legacy:Scripting Linked Lists"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#How_a_List_Is_Set_Up\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">How a List Is Set\
      \ Up</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Navigating_through_a_List\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Navigating through\
      \ a List</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Adding_to_Lists\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Adding to Lists</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#At_the_Beginning\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">At the Beginning</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#At_the_End\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">At the End</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#In_the_Middle\"><span class=\"\
      tocnumber\">3.3</span> <span class=\"toctext\">In the Middle</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Removing_Items\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Removing Items</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Removing_the_whole_list\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Removing the whole\
      \ list</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#Advanced_Lists\"><span class=\"tocnumber\">5</span> <span class=\"\
      toctext\">Advanced Lists</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#Related_Topics\"><span class=\"tocnumber\">6</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">7</span> <span class=\"toctext\"\
      >Comments</span></a></li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"\
      #About_this_page\"><span class=\"tocnumber\">8</span> <span class=\"toctext\"\
      >About this page</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"\
      mw-headline\" id=\"How_a_List_Is_Set_Up\">How a List Is Set Up</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=1\"\
      \ title=\"Edit section: How a List Is Set Up\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A <a href=\"/Legacy:Linked_List\" title=\"Legacy:Linked\
      \ List\">linked list</a> requires two things:</p>\n<ul>\n<li>a base object that\
      \ has pointer to first member of the list. This is the \"way in\" to the list.\
      \ It doesn't necessarily have to point to the first member (but it does in this\
      \ tutorial) and under strange circumstances this may be omitted.</li>\n<li>a\
      \ pointer in <i>every</i> list element to another element</li>\n</ul>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">Class</span> ListElement\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">object</span>;\n<span\
      \ class=\"kw1\">Var</span> ListElement Next; <span class=\"co1\">// the next\
      \ list element.</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">Class</span> SomeImportantActor <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">actor</span>;\n<span class=\"kw1\">Var</span>\
      \ ListElement FirstElement; <span class=\"co1\">// the first element in the\
      \ list</span></pre></div>\n</div>\n<p>SomeImportantActor should be some critical\
      \ actor in your mod. As an example, Unreal uses the <a href=\"/Legacy:LevelInfo\"\
      \ title=\"Legacy:LevelInfo\">LevelInfo</a> to hold the pointer to the first\
      \ Pawn and NavigationPoint in the PawnList and NavigationPointList, respectively.\
      \ The first inventory item of a player is connected by a pointer residing inside\
      \ of that player. If you're coding a mutator, then your mutator class could\
      \ be a good place to put the first pointer. Alternatively, you can store the\
      \ first pointer in the <a href=\"/Legacy:Default_Properties\" title=\"Legacy:Default\
      \ Properties\">default properties</a> of ListElement.</p>\n<p>The Next pointer\
      \ points to the next element of the list. The list terminates when Next==None.</p>\n\
      <p>A third part of the list also exists; contents. This is simply whatever the\
      \ list elements are supposed to do or store.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Navigating_through_a_List\">Navigating through a List</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=2\"\
      \ title=\"Edit section: Navigating through a List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The easiest to move through the list is simply to\
      \ use the For loop.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// this is run inside the SomeImportantActor class.</span>\n<span class=\"\
      kw1\">Local</span> ListElement Element;\n<span class=\"kw2\">For</span> <span\
      \ class=\"br0\">(</span>Element<span class=\"sy0\">=</span>FirstElement; Element<span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">none</span>; Element<span class=\"\
      sy0\">=</span>Element.<span class=\"me0\">Next</span><span class=\"br0\">)</span>\n\
      \  <span class=\"co1\">//here each element's variables can be read, edited,\
      \ or have functions called on it.</span></pre></div>\n</div>\n<p>Note how the\
      \ above works. First the temporary Element pointer is set to the base element.\
      \ At the end of each loop, the Element pointer is set to its Next pointer. This\
      \ continues until no more elements are present (i.e. the Element pointer equals\
      \ None).</p>\n<h2><span class=\"mw-headline\" id=\"Adding_to_Lists\">Adding\
      \ to Lists</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=3\" title=\"\
      Edit section: Adding to Lists\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are three ways of adding to a list; at the beginning,\
      \ at the end, or in the middle.</p>\n<p><b>Note:</b> In this example the ListElement\
      \ class is only an object, but not an actor. If you make a subclass of actor\
      \ then you should replace <code>new (none) class'ListElement';</code> with <code>spawn\
      \ (class'ListElement');</code>.</p>\n<p>[b]Note:[/b] If your list is replicated,\
      \ it is best to add the new item to the end of the list. Every item in the list\
      \ after the new item has to be replicated.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"At_the_Beginning\">At the Beginning</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=4\"\
      \ title=\"Edit section: At the Beginning\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Simply instantiate an object, set its Next pointer\
      \ to the current base (the ListElement pointer), and then set it as the base:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">TempElement<span class=\"sy0\">=</span><span\
      \ class=\"kw1\">New</span> <span class=\"br0\">(</span><span class=\"kw5\">none</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'ListElement'</span>;\nTempElement.<span class=\"me0\">next</span><span class=\"\
      sy0\">=</span>FirstElement;\nFirstElement<span class=\"sy0\">=</span>TempElement;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"At_the_End\">At the End</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Scripting_Linked_Lists?section=5\" title=\"Edit section:\
      \ At the End\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>There are two ways that a new element can be added at the end of a list.\
      \ The loop method inside the SomeImportantActor:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">Local</span> ListElement Element;\nElement<span\
      \ class=\"sy0\">=</span>FirstElement;\n<span class=\"kw2\">While</span> <span\
      \ class=\"br0\">(</span>Element.<span class=\"me0\">next</span><span class=\"\
      sy0\">!=</span><span class=\"kw5\">none</span><span class=\"br0\">)</span>\n\
      \  Element<span class=\"sy0\">=</span>Element.<span class=\"me0\">next</span>;\n\
      Element.<span class=\"me0\">Next</span><span class=\"sy0\">=</span><span class=\"\
      kw1\">new</span> <span class=\"br0\">(</span><span class=\"kw5\">none</span><span\
      \ class=\"br0\">)</span> <span class=\"kw1\">class</span><span class=\"st0\"\
      >'ListElement'</span>;</pre></div>\n</div>\n<p>Note that this loop terminates\
      \ not when Element is none, but when an <b>Element's next pointer</b> is none.\
      \ This allows a pointer to the last element of the list to exist when the loop\
      \ has completed.</p>\n<p><b>The \"1337 function in each element\" method:</b>\
      \ I do not know of the \"official\" name of this method. Nonetheless, this is\
      \ the simpler method, which is used to add mutators. Remember that list elements\
      \ are true objects and CAN have functions called on them. This allows for very\
      \ simple code to exist. Inside SomeImportantActor:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">ListElement.<span class=\"me0\">AddElement</span><span class=\"\
      br0\">(</span><span class=\"kw1\">new</span> <span class=\"br0\">(</span><span\
      \ class=\"kw5\">none</span><span class=\"br0\">)</span> <span class=\"kw1\"\
      >class</span><span class=\"st0\">'ListElement'</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The class ListElement has the following function:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">Function</span> AddElement <span class=\"\
      br0\">(</span>ListElement NewElement<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">If</span> <span class=\"br0\">(</span>Next<span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n    Next.<span class=\"me0\">AddElement</span><span class=\"br0\"\
      >(</span>NewElement<span class=\"br0\">)</span>;\n  <span class=\"kw2\">Else</span>\n\
      \    Next<span class=\"sy0\">=</span>NewElement;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>First a ListElement is instantiated. Then the ListElement's AddElement\
      \ function is called with a pointer to the new ListElement. If there is another\
      \ element in the list, it then calls the AddElement function on that element.\
      \ Eventually, the end of the list is reached, where Next is none. Now Next is\
      \ set to point to the new ListElement.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"In_the_Middle\">In the Middle</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=6\"\
      \ title=\"Edit section: In the Middle\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Adding an element into the middle of any list obviously\
      \ requires a pointer to the item one wishes to add after. Assume that Element\
      \ is some element inside the list:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >TempElement<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span\
      \ class=\"kw1\">class</span><span class=\"st0\">'listelement'</span>;\nTempElement.<span\
      \ class=\"me0\">Next</span><span class=\"sy0\">=</span>Element.<span class=\"\
      me0\">Next</span>;\nElement.<span class=\"me0\">Next</span><span class=\"sy0\"\
      >=</span>TempElement;</pre></div>\n</div>\n<p>Again an element is created. Its\
      \ Next var is set to whatever the Next var is of the element that this one is\
      \ being added in front of. Finally, the element that is going to have the new\
      \ element added after it has its Next var set to the new element.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Removing_Items\">Removing Items</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=7\"\
      \ title=\"Edit section: Removing Items\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>In the case of actor lists, it is not safe to simply\
      \ destroy an actor that is part of the list (objects do not apply as they cannot\
      \ be manually destroyed). This causes any list elements after it to become unlinked.\
      \ To remove any list item (it is safe to do this in actor.destroyed()), one\
      \ must do the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// in the SomeImportantActor class</span>\n<span class=\"kw1\">Function</span>\
      \ RemoveElement<span class=\"br0\">(</span>ListElement Element<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">Local</span>\
      \ ListElement List;\n  <span class=\"kw2\">If</span> <span class=\"br0\">(</span>Element<span\
      \ class=\"sy0\">==</span>FirstElement<span class=\"br0\">)</span>\n    FirstElement<span\
      \ class=\"sy0\">=</span>Element.<span class=\"me0\">Next</span>;\n  <span class=\"\
      kw2\">Else</span>\n    <span class=\"kw2\">For</span> <span class=\"br0\">(</span>List<span\
      \ class=\"sy0\">=</span>FirstElement;List<span class=\"sy0\">!=</span><span\
      \ class=\"kw5\">none</span>;List<span class=\"sy0\">=</span>List.<span class=\"\
      me0\">Next</span><span class=\"br0\">)</span>\n      <span class=\"kw2\">If</span>\
      \ <span class=\"br0\">(</span>List.<span class=\"me0\">Next</span><span class=\"\
      sy0\">==</span>Element<span class=\"br0\">)</span>\n      <span class=\"br0\"\
      >{</span>\n        List.<span class=\"me0\">Next</span><span class=\"sy0\">=</span>Element.<span\
      \ class=\"me0\">Next</span>;\n        <span class=\"kw2\">Break</span>;\n  \
      \    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>First and foremost, a check must be performed to see if the element\
      \ to be removed is the base pointer. If it is, then the base is simply set to\
      \ whatever that element's next is. Yet, if this is not the case, the code must\
      \ go looking for that doomed object. A loop is performed which goes through\
      \ all the elements. With each loop, it is checked if the temporary List pointer's\
      \ Next pointer is the item that should be removed. If this is the case, that\
      \ element's next pointer is set to the to-be-deleted element's next. The loop\
      \ can then be terminated.</p>\n<p>You can synthesize the above information to\
      \ conduct some exciting list manipulation. For instance to move a list item,\
      \ you can simply remove it and then insert it in the middle of something else.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Removing_the_whole_list\">Removing the\
      \ whole list</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=8\" title=\"\
      Edit section: Removing the whole list\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>To remove the whole linked list (eg when an actor\
      \ is destroyed), you can do the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">local</span> ListElement NextElement\n \n<span class=\"\
      kw2\">while</span> <span class=\"br0\">(</span> FirstElement <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">none</span> <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    NextElement <span class=\"sy0\">=</span> FirstElement.<span\
      \ class=\"me0\">Next</span>;\n    FirstElement <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">none</span>;\n    FirstElement <span class=\"sy0\">=</span>\
      \ NextElement;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span\
      \ class=\"mw-headline\" id=\"Advanced_Lists\">Advanced Lists</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=9\"\
      \ title=\"Edit section: Advanced Lists\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The above is only the basics of how a list is constructed.\
      \ Many other pointers however may exist in a list. For instance, a two-way list\
      \ can be created by having each item not only have a pointer to the next, but\
      \ also to the previous. There can also be a pointer in every element to the\
      \ base or even to the end. While this does mean execution can be faster and\
      \ frankly easier to set up, it does mean more needs to be done when adding or\
      \ removing elements. Also note that more pointers allow greater flexibility.\
      \ For instance, with a pointer to the first or previous element, this allows\
      \ for the link to the list to be at any element, rather than the first. As an\
      \ example, in Operation: Na Pali, the translator has a history of all previous\
      \ messages. I simply have a pointer to the TranslatorHistoryList that holds\
      \ the current message. If a user wishes to read older or newer messages, the\
      \ pointer to the TranslatorHistoryList simply changes to the current pointer's\
      \ Next or Prev pointers, respectfully. This allows for simple and fast executing\
      \ code.</p>\n<p><b>Note:</b> When variables exist that apply to the list as\
      \ a whole, rather than a per element basis, they should be placed in the actor\
      \ that links to the list or the first element. In the latter case, this often\
      \ means having a pointer to the first element in all elements.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=10\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Linked_List\" title=\"Legacy:Linked\
      \ List\">Linked List</a></li>\n<li><a href=\"/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament\"\
      \ title=\"Legacy:Linked List/Existing Lists In Unreal Tournament\">Linked List/Existing\
      \ Lists In Unreal Tournament</a></li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=11\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h2><span class=\"mw-headline\" id=\"About_this_page\"\
      >About this page</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Scripting_Linked_Lists?section=12\" title=\"\
      Edit section: About this page\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This page is based on a tutorial by <a href=\"/Legacy:UsAaR33\"\
      \ title=\"Legacy:UsAaR33\">UsAaR33</a>. Mad propz to <a rel=\"nofollow\" class=\"\
      external text\" href=\"http://chimeric.beyondunreal.com\">CHiMERiC</a>.</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.195 seconds\nReal time usage:\
      \ 0.198 seconds\nPreprocessor visited node count: 136/1000000\nPreprocessor\
      \ generated node count: 252/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2963-0!*!0!!en!*!* and timestamp\
      \ 20221118154933 and revision id 33987\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Linked List"
  - ns: 100
    exists: true
    name: "Legacy:Linked List/Existing Lists In Unreal Tournament"
  - ns: 100
    exists: true
    name: "Legacy:UsAaR33"
  templates: []
  images: []
  externallinks:
  - "http://chimeric.beyondunreal.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "How a List Is Set Up"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 0
    anchor: "How_a_List_Is_Set_Up"
  - toclevel: 1
    level: "2"
    line: "Navigating through a List"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 1376
    anchor: "Navigating_through_a_List"
  - toclevel: 1
    level: "2"
    line: "Adding to Lists"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 1982
    anchor: "Adding_to_Lists"
  - toclevel: 2
    level: "3"
    line: "At the Beginning"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 2490
    anchor: "At_the_Beginning"
  - toclevel: 2
    level: "3"
    line: "At the End"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 2764
    anchor: "At_the_End"
  - toclevel: 2
    level: "3"
    line: "In the Middle"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 4218
    anchor: "In_the_Middle"
  - toclevel: 1
    level: "2"
    line: "Removing Items"
    number: "4"
    index: "7"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 4771
    anchor: "Removing_Items"
  - toclevel: 2
    level: "3"
    line: "Removing the whole list"
    number: "4.1"
    index: "8"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 6197
    anchor: "Removing_the_whole_list"
  - toclevel: 1
    level: "2"
    line: "Advanced Lists"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 6502
    anchor: "Advanced_Lists"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "6"
    index: "10"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 7848
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "7"
    index: "11"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 8014
    anchor: "Comments"
  - toclevel: 1
    level: "2"
    line: "About this page"
    number: "8"
    index: "12"
    fromtitle: "Legacy:Scripting_Linked_Lists"
    byteoffset: 8028
    anchor: "About_this_page"
  displaytitle: "Legacy:Scripting Linked Lists"
  iwlinks: []
  wikitext:
    text: "==How a List Is Set Up==\n\nA [[Legacy:Linked List|linked list]] requires\
      \ two things:\n* a base object that has pointer to first member of the list.\
      \ This is the \"way in\" to the list.  It doesn't necessarily have to point\
      \ to the first member (but it does in this tutorial) and under strange circumstances\
      \ this may be omitted.\n* a pointer in ''every'' list element to another element\n\
      \n<uscript>\nClass ListElement extends object;\nVar ListElement Next; // the\
      \ next list element.\n</uscript>\n\n<uscript>\nClass SomeImportantActor extends\
      \ actor;\nVar ListElement FirstElement; // the first element in the list\n</uscript>\n\
      \nSomeImportantActor should be some critical actor in your mod. As an example,\
      \ Unreal uses the [[Legacy:LevelInfo|LevelInfo]] to hold the pointer to the\
      \ first Pawn and NavigationPoint in the PawnList and NavigationPointList, respectively.\
      \ The first inventory item of a player is connected by a pointer residing inside\
      \ of that player. If you're coding a mutator, then your mutator class could\
      \ be a good place to put the first pointer. Alternatively, you can store the\
      \ first pointer in the [[Legacy:Default Properties|default properties]] of ListElement.\n\
      \nThe Next pointer points to the next element of the list. The list terminates\
      \ when Next==None.\n\nA third part of the list also exists; contents. This is\
      \ simply whatever the list elements are supposed to do or store.\n\n==Navigating\
      \ through a List==\n\nThe easiest to move through the list is simply to use\
      \ the For loop.\n\n<uscript>\n// this is run inside the SomeImportantActor class.\n\
      Local ListElement Element;\nFor (Element=FirstElement; Element!=none; Element=Element.Next)\n\
      \  //here each element's variables can be read, edited, or have functions called\
      \ on it.\n</uscript>\n\nNote how the above works. First the temporary Element\
      \ pointer is set to the base element. At the end of each loop, the Element pointer\
      \ is set to its Next pointer. This continues until no more elements are present\
      \ (i.e. the Element pointer equals None).\n\n==Adding to Lists==\n\nThere are\
      \ three ways of adding to a list; at the beginning, at the end, or in the middle.\n\
      \n'''Note:''' In this example the ListElement class is only an object, but not\
      \ an actor. If you make a subclass of actor then you should replace <code>new\
      \ (none) class'ListElement';</code> with <code>spawn (class'ListElement');</code>.\n\
      \n[b]Note:[/b] If your list is replicated, it is best to add the new item to\
      \ the end of the list. Every item in the list after the new item has to be replicated.\n\
      \n===At the Beginning===\n\nSimply instantiate an object, set its Next pointer\
      \ to the current base (the ListElement pointer), and then set it as the base:\n\
      \n<uscript>\nTempElement=New (none) class'ListElement';\nTempElement.next=FirstElement;\n\
      FirstElement=TempElement;\n</uscript>\n\n===At the End===\n\nThere are two ways\
      \ that a new element can be added at the end of a list. The loop method inside\
      \ the SomeImportantActor:\n\n<uscript>\nLocal ListElement Element;\nElement=FirstElement;\n\
      While (Element.next!=none)\n  Element=Element.next;\nElement.Next=new (none)\
      \ class'ListElement';\n</uscript>\n\nNote that this loop terminates not when\
      \ Element is none, but when an '''Element's next pointer''' is none. This allows\
      \ a pointer to the last element of the list to exist when the loop has completed.\n\
      \n'''The \"1337 function in each element\" method:'''  I do not know of the\
      \ \"official\" name of this method. Nonetheless, this is the simpler method,\
      \ which is used to add mutators. Remember that list elements are true objects\
      \ and CAN have functions called on them. This allows for very simple code to\
      \ exist.  Inside SomeImportantActor:\n\n<uscript>\nListElement.AddElement(new\
      \ (none) class'ListElement');\n</uscript>\n\nThe class ListElement has the following\
      \ function:\n\n<uscript>\nFunction AddElement (ListElement NewElement)\n{\n\
      \  If (Next!=None)\n    Next.AddElement(NewElement);\n  Else\n    Next=NewElement;\n\
      }\n</uscript>\n\nFirst a ListElement is instantiated. Then the ListElement's\
      \ AddElement function is called with a pointer to the new ListElement. If there\
      \ is another element in the list, it then calls the AddElement function on that\
      \ element. Eventually, the end of the list is reached, where Next is none. Now\
      \ Next is set to point to the new ListElement.\n\n===In the Middle===\n\nAdding\
      \ an element into the middle of any list obviously requires a pointer to the\
      \ item one wishes to add after.  Assume that Element is some element inside\
      \ the list:\n\n<uscript>\nTempElement=new class'listelement';\nTempElement.Next=Element.Next;\n\
      Element.Next=TempElement;\n</uscript>\n\nAgain an element is created. Its Next\
      \ var is set to whatever the Next var is of the element that this one is being\
      \ added in front of. Finally, the element that is going to have the new element\
      \ added after it has its Next var set to the new element.\n\n==Removing Items==\n\
      \nIn the case of actor lists, it is not safe to simply destroy an actor that\
      \ is part of the list (objects do not apply as they cannot be manually destroyed).\
      \ This causes any list elements after it to become unlinked. To remove any list\
      \ item (it is safe to do this in actor.destroyed()), one must do the following:\n\
      \n<uscript>\n// in the SomeImportantActor class\nFunction RemoveElement(ListElement\
      \ Element)\n{\n  Local ListElement List;\n  If (Element==FirstElement)\n   \
      \ FirstElement=Element.Next;\n  Else\n    For (List=FirstElement;List!=none;List=List.Next)\n\
      \      If (List.Next==Element)\n      {\n        List.Next=Element.Next;\n \
      \       Break;\n      }\n}\n</uscript>\n\nFirst and foremost, a check must be\
      \ performed to see if the element to be removed is the base pointer. If it is,\
      \ then the base is simply set to whatever that element's next is. Yet, if this\
      \ is not the case, the code must go looking for that doomed object. A loop is\
      \ performed which goes through all the elements. With each loop, it is checked\
      \ if the temporary List pointer's Next pointer is the item that should be removed.\
      \ If this is the case, that element's next pointer is set to the to-be-deleted\
      \ element's next. The loop can then be terminated.\n\nYou can synthesize the\
      \ above information to conduct some exciting list manipulation. For instance\
      \ to move a list item, you can simply remove it and then insert it in the middle\
      \ of something else.\n\n===Removing the whole list===\n\nTo remove the whole\
      \ linked list (eg when an actor is destroyed), you can do the following:\n\n\
      <uscript>\nlocal ListElement NextElement\n\nwhile ( FirstElement != none )\n\
      {\n    NextElement = FirstElement.Next;\n    FirstElement = none;\n    FirstElement\
      \ = NextElement;\n}\n</uscript>\n\n==Advanced Lists==\n\nThe above is only the\
      \ basics of how a list is constructed. Many other pointers however may exist\
      \ in a list. For instance, a two-way list can be created by having each item\
      \ not only have a pointer to the next, but also to the previous. There can also\
      \ be a pointer in every element to the base or even to the end. While this does\
      \ mean execution can be faster and frankly easier to set up, it does mean more\
      \ needs to be done when adding or removing elements. Also note that more pointers\
      \ allow greater flexibility. For instance, with a pointer to the first or previous\
      \ element, this allows for the link to the list to be at any element, rather\
      \ than the first. As an example, in Operation: Na Pali, the translator has a\
      \ history of all previous messages. I simply have a pointer to the TranslatorHistoryList\
      \ that holds the current message. If a user wishes to read older or newer messages,\
      \ the pointer to the TranslatorHistoryList simply changes to the current pointer's\
      \ Next or Prev pointers, respectfully. This allows for simple and fast executing\
      \ code.\n\n'''Note:''' When variables exist that apply to the list as a whole,\
      \ rather than a per element basis, they should be placed in the actor that links\
      \ to the list or the first element. In the latter case, this often means having\
      \ a pointer to the first element in all elements.\n\n==Related Topics==\n* [[Legacy:Linked\
      \ List|Linked List]]\n* [[Legacy:Linked List/Existing Lists In Unreal Tournament|Linked\
      \ List/Existing Lists In Unreal Tournament]]\n\n==Comments==\n\n==About this\
      \ page==\n\nThis page is based on a tutorial by [[Legacy:UsAaR33|UsAaR33]].\
      \  Mad propz to [http://chimeric.beyondunreal.com CHiMERiC]."
  properties: []
  revId: 33987
name: "Legacy:Scripting Linked Lists"
revision:
  revid: 33987
  parentid: 7843
  user: "Claudius"
  timestamp: 1233871613.000000000
  comment: ""
timestamp: 1668786497.573191000
