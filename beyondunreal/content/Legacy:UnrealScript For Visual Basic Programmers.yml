---
parse:
  title: "Legacy:UnrealScript For Visual Basic Programmers"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Familiar_Concepts\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Familiar Concepts</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Variables\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Variables</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-4\"><a href=\"#Structured_Programming\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Structured Programming</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-5\"><a href=\"#User-defined_Data_Types\"\
      ><span class=\"tocnumber\">2.2.1</span> <span class=\"toctext\">User-defined\
      \ Data Types</span></a></li>\n<li class=\"toclevel-3 tocsection-6\"><a href=\"\
      #Comments\"><span class=\"tocnumber\">2.2.2</span> <span class=\"toctext\">Comments</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-7\"><a href=\"#Conditionals\"><span class=\"\
      tocnumber\">2.2.3</span> <span class=\"toctext\">Conditionals</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-8\"><a href=\"#Loops\"><span class=\"tocnumber\"\
      >2.2.4</span> <span class=\"toctext\">Loops</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-9\"><a href=\"#Subs_and_Functions\"><span class=\"tocnumber\">2.2.5</span>\
      \ <span class=\"toctext\">Subs and Functions</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-10\"><a href=\"#Arrays\"><span class=\"tocnumber\">2.2.6</span>\
      \ <span class=\"toctext\">Arrays</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-11\"><a href=\"#Event-Driven_Architecture\"><span class=\"\
      tocnumber\">2.3</span> <span class=\"toctext\">Event-Driven Architecture</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Introduction\"\
      >Introduction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=1\"\
      \ title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>If you've ever programmed in <a href=\"http://en.wikipedia.org/wiki/Visual_Basic\"\
      \ class=\"extiw\" title=\"wikipedia:Visual Basic\">Wikipedia:Visual Basic</a>,\
      \ you already know a lot of the basic concepts of coding (no pun intended).\
      \ <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ is a pretty full-fledged object-oriented language though, while Visual Basic's\
      \ <a href=\"/Legacy:OOP\" title=\"Legacy:OOP\" class=\"mw-redirect\">OOP</a>\
      \ support is more or less limited to the notion of having pre-defined objects\
      \ (for instance, user interface elements) with some properties and methods.\
      \ You <i>can</i> create and use your own classes in Visual Basic (in form of\
      \ \"class modules\"), but the average Visual Basic programmer hardly ever will\
      \ feel the need to do so.</p>\n<p>A good read for getting into the notion of\
      \ Object-Oriented Programming (OOP) is <a href=\"/Legacy:Object_Oriented_Programming_Overview\"\
      \ title=\"Legacy:Object Oriented Programming Overview\">Object Oriented Programming\
      \ Overview</a>.</p>\n<h2><span class=\"mw-headline\" id=\"Familiar_Concepts\"\
      >Familiar Concepts</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=2\"\
      \ title=\"Edit section: Familiar Concepts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Variables\">Variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=3\"\
      \ title=\"Edit section: Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In UnrealScript, all variables need to be predeclared\
      \ using either <code>var</code> (for class-level variables) or <code>local</code>\
      \ (for function-level variables). Variables declared on class level are globally\
      \ accessible in that class. See <a href=\"/Legacy:UnrealScript_Language_Reference/Variables\"\
      \ title=\"Legacy:UnrealScript Language Reference/Variables\">UnrealScript Language\
      \ Reference/Variables</a> for details.</p>\n<p>There's no \"Variant\" type in\
      \ UnrealScript for variables that can hold any sort of data; variables are strongly\
      \ typed, and you have to <a href=\"/Legacy:Typecasting\" title=\"Legacy:Typecasting\"\
      >typecast</a> them in most cases if you want to assign the value of a variable\
      \ of one type to a variable of a different type.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Structured_Programming\">Structured Programming</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=4\"\
      \ title=\"Edit section: Structured Programming\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealScript provides very similar means for structured\
      \ programming (conditionals, loops) as Visual Basic. The following table lists\
      \ corresponding idioms; see <a href=\"/Legacy:UnrealScript_Language_Reference/Program_Structure\"\
      \ title=\"Legacy:UnrealScript Language Reference/Program Structure\">UnrealScript\
      \ Language Reference/Program Structure</a> for details of their syntax.</p>\n\
      <p>Statements in UnrealScript always end with a semicolon (<code>;</code>),\
      \ not (like in Visual Basic) with an end-of-line. You can therefore continue\
      \ a statement in the next physical line just by not ending it with a semicolon;\
      \ there's no need of an explicit line-continuation character like Visual Basic's\
      \ underscore (<code>_</code>).</p>\n<table>\n<tr>\n<td colspan=\"2\">\n<h4><span\
      \ class=\"mw-headline\" id=\"User-defined_Data_Types\">User-defined Data Types</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=5\"\
      \ title=\"Edit section: User-defined Data Types\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td colspan=\"2\"><i>VB6 and below:</i></td>\n\
      </tr>\n<tr>\n<td><tt>Type <i>Name</i><br />\n&#160;&#160;<i>Var1</i> As <i>DataType1</i><br\
      \ />\n&#160;&#160;<i>Var2</i> As <i>DataType1</i><br />\n&#160;&#160;<i>Var3</i>\
      \ As <i>DataType2</i><br />\nEnd Type</tt></td>\n<td><tt>struct <i>Name</i>\
      \ {<br />\n&#160;&#160;var <i>DataType1</i> <i>Var1</i>;<br />\n&#160;&#160;var\
      \ <i>DataType1</i> <i>Var2</i>;<br />\n&#160;&#160;var <i>DataType2</i> <i>Var3</i>;<br\
      \ />\n};</tt></td>\n<td><tt>struct <i>Name</i> {<br />\n&#160;&#160;var <i>DataType1</i>\
      \ <i>Var1</i>, <i>Var2</i>;<br />\n<br />\n&#160;&#160;var <i>DataType2</i>\
      \ <i>Var3</i>;<br />\n};</tt></td>\n</tr>\n<tr>\n<td colspan=\"2\"><i>VB7 and\
      \ above:</i></td>\n</tr>\n<tr>\n<td><tt>Structure <i>Name</i><br />\n&#160;&#160;<i>Var1</i>\
      \ As <i>DataType1</i><br />\n&#160;&#160;<i>Var2</i> As <i>DataType1</i><br\
      \ />\n&#160;&#160;<i>Var3</i> As <i>DataType2</i><br />\nEnd Structure</tt></td>\n\
      <td><tt>struct <i>Name</i> {<br />\n&#160;&#160;var <i>DataType1</i> <i>Var1</i>;<br\
      \ />\n&#160;&#160;var <i>DataType1</i> <i>Var2</i>;<br />\n&#160;&#160;var <i>DataType2</i>\
      \ <i>Var3</i>;<br />\n};</tt></td>\n<td><tt>struct <i>Name</i> {<br />\n&#160;&#160;var\
      \ <i>DataType1</i> <i>Var1</i>, <i>Var2</i>;<br />\n<br />\n&#160;&#160;var\
      \ <i>DataType2</i> <i>Var3</i>;<br />\n};</tt></td>\n</tr>\n<tr>\n<td colspan=\"\
      2\">\n<h4><span class=\"mw-headline\" id=\"Comments\">Comments</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=6\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td><tt>Rem <i>Comment</i></tt><br\
      \ />\n<tt>' <i>Comment</i></tt></td>\n<td><tt>/* <i>Multi-Line Comment</i> */<br\
      \ />\n// <i>Comment</i></tt></td>\n</tr>\n<tr>\n<td colspan=\"2\">\n<h4><span\
      \ class=\"mw-headline\" id=\"Conditionals\">Conditionals</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=7\"\
      \ title=\"Edit section: Conditionals\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td><tt>If <i>condition</i> Then<br\
      \ />\nElseIf <i>condition</i> Then<br />\nElse<br />\nEnd If</tt></td>\n<td><tt>if\
      \ (<i>condition</i>) {<br />\n} else if (<i>condition</i>) {<br />\n} else {<br\
      \ />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>Select Case <i>expression</i><br />\n\
      &#160;&#160;Case <i>value1</i><br />\n&#160;&#160;&#160;&#160;DoSomething<br\
      \ />\n<br />\n&#160;&#160;Case <i>value2</i>, <i>value3</i><br />\n&#160;&#160;&#160;&#160;DoSomethingElse<br\
      \ />\n<br />\n<br />\n&#160;&#160;Case Else<br />\n&#160;&#160;&#160;&#160;DoDefaultSomething<br\
      \ />\nEnd Select</tt></td>\n<td><tt>switch (<i>expression</i>) {<br />\n&#160;&#160;case\
      \ <i>value1</i>:<br />\n&#160;&#160;&#160;&#160;DoSomething();<br />\n&#160;&#160;&#160;&#160;break;<br\
      \ />\n&#160;&#160;case <i>value2</i>:<br />\n&#160;&#160;case <i>value3</i>:<br\
      \ />\n&#160;&#160;&#160;&#160;DoSomethingElse();<br />\n&#160;&#160;&#160;&#160;break;<br\
      \ />\n&#160;&#160;default:<br />\n&#160;&#160;&#160;&#160;DoDefaultSomething();<br\
      \ />\n}</tt></td>\n</tr>\n<tr>\n<td colspan=\"2\">\n<h4><span class=\"mw-headline\"\
      \ id=\"Loops\">Loops</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=8\"\
      \ title=\"Edit section: Loops\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td><tt>For <i>var</i> = <i>start</i>\
      \ To <i>end</i><br />\nNext</tt></td>\n<td><tt>for (<i>var</i> = <i>start</i>;\
      \ <i>var</i> &lt;= <i>end</i>; <i>var</i>++) {<br />\n}</tt></td>\n</tr>\n<tr>\n\
      <td><tt>For <i>var</i> = 1 To <i>number_of_times</i><br />\nNext</tt></td>\n\
      <td><tt>for (<i>var</i> = 0; <i>var</i> &lt; <i>number_of_times</i>; <i>var</i>++)\
      \ {<br />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>For <i>var</i> = <i>start</i> To\
      \ <i>end</i> Step <i>step</i><br />\nNext</tt></td>\n<td><tt>for (<i>var</i>\
      \ = <i>start</i>; <i>var</i> &lt;= <i>end</i>; <i>var</i> += <i>step</i>) {<br\
      \ />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>Do<br />\n&#160;&#160;If <i>condition</i>\
      \ Then Exit Do<br />\nLoop</tt></td>\n<td><tt>for (;;) {<br />\n&#160;&#160;if\
      \ (<i>condition</i>) break;<br />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>Do While\
      \ <i>condition</i><br />\nLoop</tt></td>\n<td><tt>while (<i>condition</i>) {<br\
      \ />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>Do<br />\nLoop Until <i>condition</i></tt></td>\n\
      <td><tt>do {<br />\n} until (<i>condition</i>);</tt></td>\n</tr>\n</table>\n\
      <p>You can make your UScript more readable with the <tt>continue</tt> keyword.\
      \ With it, it makes easier (thus, a good practice) to go to the next loop item\
      \ if a certain condition is not met.</p>\n<table>\n<tr>\n<td colspan=\"2\">\n\
      <h4><span class=\"mw-headline\" id=\"Subs_and_Functions\">Subs and Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=9\"\
      \ title=\"Edit section: Subs and Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n</td>\n</tr>\n<tr>\n<td><tt>Sub <i>subname</i> (<i>param1</i>\
      \ As Integer, <i>param2</i> As String)<br />\n&#160;&#160;If <i>condition</i>\
      \ Then Exit Sub<br />\nEnd Sub</tt></td>\n<td><tt>function <i>subname</i> (int\
      \ <i>param1</i>, string <i>param2</i>) {<br />\n&#160;&#160;if (<i>condition</i>)\
      \ return;<br />\n}</tt></td>\n</tr>\n<tr>\n<td><tt>Function <i>funcname</i>\
      \ (...) As Double<br />\n&#160;&#160;If <i>condition</i> Then funcname = <i>value</i>&#160;:\
      \ Exit Function<br />\n&#160;&#160;<i>funcname</i> = <i>value</i><br />\nEnd\
      \ Function</tt></td>\n<td><tt>function float <i>funcname</i> (...) {<br />\n\
      &#160;&#160;if (<i>condition</i>) return <i>value</i>;<br />\n&#160;&#160;return\
      \ <i>value</i>;<br />\n}</tt></td>\n</tr>\n</table>\n<h4><span class=\"mw-headline\"\
      \ id=\"Arrays\">Arrays</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=10\"\
      \ title=\"Edit section: Arrays\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Arrays in UScript are easy, there is just 1 major\
      \ thing to remember. Arrays start at 0! always. No wierd:</p>\n<blockquote class=\"\
      legacyquote\">\n<p>Dim SomeArray(2042 to 35930) AS Integer</p>\n</blockquote>\n\
      <p>just a simple:</p>\n<blockquote class=\"legacyquote\">\n<p>var int SomeArray[420];</p>\n\
      </blockquote>\n<p>There are also <a href=\"/Legacy:Dynamic_Array\" title=\"\
      Legacy:Dynamic Array\">Dynamic Arrays</a> (they also ALWAYS start at 0).</p>\n\
      <h3><span class=\"mw-headline\" id=\"Event-Driven_Architecture\">Event-Driven\
      \ Architecture</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=11\"\
      \ title=\"Edit section: Event-Driven Architecture\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Everything in UnrealScript is driven by engine events,\
      \ very similar to Visual Basic. The <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> class declares a variety of events that are inherited by <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> subclasses and called by the\
      \ engine for every object of those classes. Sometimes you can even control how\
      \ and when events are called; the Timer event, for instance, is controlled by\
      \ the SetTimer function.</p>\n<p>To have objects of your class <i>do</i> something,\
      \ implement some or all of its events. You can, of course, also call functions\
      \ from code executed for other objects, including objects of different classes.\
      \ The functions of the <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\"\
      >Mutator</a> class, for example, are actually called by other UnrealScript code.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UnrealScript_For_Visual_Basic_Programmers?section=12\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript_Lessons\" title=\"\
      Legacy:UnrealScript Lessons\">UnrealScript Lessons</a></li>\n</ul>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.076 seconds\nReal time usage: 0.079 seconds\n\
      Preprocessor visited node count: 153/1000000\nPreprocessor generated node count:\
      \ 297/1000000\nPost‐expand include size: 324/2097152 bytes\nTemplate argument\
      \ size: 66/2097152 bytes\nHighest expansion depth: 3/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    6.504      1 - -total\n 92.73%    6.031      2 - Template:Innerbox\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3348-0!*!0!!en!*!*\
      \ and timestamp 20221118015252 and revision id 8645\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Dynamic Array"
  - ns: 100
    exists: true
    name: "Legacy:OOP"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Lessons"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Program Structure"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 0
    anchor: "Introduction"
  - toclevel: 1
    level: "2"
    line: "Familiar Concepts"
    number: "2"
    index: "2"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 775
    anchor: "Familiar_Concepts"
  - toclevel: 2
    level: "3"
    line: "Variables"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 798
    anchor: "Variables"
  - toclevel: 2
    level: "3"
    line: "Structured Programming"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 1448
    anchor: "Structured_Programming"
  - toclevel: 3
    level: "4"
    line: "User-defined Data Types"
    number: "2.2.1"
    index: "5"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 2138
    anchor: "User-defined_Data_Types"
  - toclevel: 3
    level: "4"
    line: "Comments"
    number: "2.2.2"
    index: "6"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 3240
    anchor: "Comments"
  - toclevel: 3
    level: "4"
    line: "Conditionals"
    number: "2.2.3"
    index: "7"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 3395
    anchor: "Conditionals"
  - toclevel: 3
    level: "4"
    line: "Loops"
    number: "2.2.4"
    index: "8"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 4331
    anchor: "Loops"
  - toclevel: 3
    level: "4"
    line: "Subs and Functions"
    number: "2.2.5"
    index: "9"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 5348
    anchor: "Subs_and_Functions"
  - toclevel: 3
    level: "4"
    line: "Arrays"
    number: "2.2.6"
    index: "10"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 5975
    anchor: "Arrays"
  - toclevel: 2
    level: "3"
    line: "Event-Driven Architecture"
    number: "2.3"
    index: "11"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 6297
    anchor: "Event-Driven_Architecture"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "12"
    fromtitle: "Legacy:UnrealScript_For_Visual_Basic_Programmers"
    byteoffset: 7052
    anchor: "Related_Topics"
  displaytitle: "Legacy:UnrealScript For Visual Basic Programmers"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Visual_Basic"
    name: "wikipedia:Visual Basic"
  wikitext:
    text: "==Introduction==\n\nIf you've ever programmed in [[Wikipedia:Visual Basic]],\
      \ you already know a lot of the basic concepts of coding (no pun intended).\
      \  [[Legacy:UnrealScript|UnrealScript]] is a pretty full-fledged object-oriented\
      \ language though, while Visual Basic's [[Legacy:OOP|OOP]] support is more or\
      \ less limited to the notion of having pre-defined objects (for instance, user\
      \ interface elements) with some properties and methods.  You ''can'' create\
      \ and use your own classes in Visual Basic (in form of \"class modules\"), but\
      \ the average Visual Basic programmer hardly ever will feel the need to do so.\n\
      \nA good read for getting into the notion of Object-Oriented Programming (OOP)\
      \ is [[Legacy:Object Oriented Programming Overview|Object Oriented Programming\
      \ Overview]].\n\n==Familiar Concepts==\n\n===Variables===\n\nIn UnrealScript,\
      \ all variables need to be predeclared using either <code>var</code> (for class-level\
      \ variables) or <code>local</code> (for function-level variables).  Variables\
      \ declared on class level are globally accessible in that class.  See [[Legacy:UnrealScript\
      \ Language Reference/Variables|UnrealScript Language Reference/Variables]] for\
      \ details.\n\nThere's no \"Variant\" type in UnrealScript for variables that\
      \ can hold any sort of data; variables are strongly typed, and you have to [[Legacy:Typecasting|typecast]]\
      \ them in most cases if you want to assign the value of a variable of one type\
      \ to a variable of a different type.\n\n===Structured Programming===\n\nUnrealScript\
      \ provides very similar means for structured programming (conditionals, loops)\
      \ as Visual Basic.  The following table lists corresponding idioms; see [[Legacy:UnrealScript\
      \ Language Reference/Program Structure|UnrealScript Language Reference/Program\
      \ Structure]] for details of their syntax.\n\nStatements in UnrealScript always\
      \ end with a semicolon (<code>;</code>), not (like in Visual Basic) with an\
      \ end-of-line.  You can therefore continue a statement in the next physical\
      \ line just by not ending it with a semicolon; there's no need of an explicit\
      \ line-continuation character like Visual Basic's underscore (<code>_</code>).\n\
      \n{|\n\n|-\n| colspan=\"2\" |\n====User-defined Data Types====\n\n|-\n| colspan=\"\
      2\" |''VB6 and below:''\n|-\n|<tt>Type ''Name''<br />&nbsp;&nbsp;''Var1'' As\
      \ ''DataType1''<br />&nbsp;&nbsp;''Var2'' As ''DataType1''<br />&nbsp;&nbsp;''Var3''\
      \ As ''DataType2''<br />End Type</tt>\n|<tt>struct ''Name'' {<br />&nbsp;&nbsp;var\
      \ ''DataType1'' ''Var1'';<br />&nbsp;&nbsp;var ''DataType1'' ''Var2'';<br />&nbsp;&nbsp;var\
      \ ''DataType2'' ''Var3'';<br />};</tt>\n|<tt>struct ''Name'' {<br />&nbsp;&nbsp;var\
      \ ''DataType1'' ''Var1'', ''Var2'';<br /><br />&nbsp;&nbsp;var ''DataType2''\
      \ ''Var3'';<br />};</tt>\n|-\n| colspan=\"2\" |''VB7 and above:''\n|-\n|<tt>Structure\
      \ ''Name''<br />&nbsp;&nbsp;''Var1'' As ''DataType1''<br />&nbsp;&nbsp;''Var2''\
      \ As ''DataType1''<br />&nbsp;&nbsp;''Var3'' As ''DataType2''<br />End Structure</tt>\n\
      |<tt>struct ''Name'' {<br />&nbsp;&nbsp;var ''DataType1'' ''Var1'';<br />&nbsp;&nbsp;var\
      \ ''DataType1'' ''Var2'';<br />&nbsp;&nbsp;var ''DataType2'' ''Var3'';<br />};</tt>\n\
      |<tt>struct ''Name'' {<br />&nbsp;&nbsp;var ''DataType1'' ''Var1'', ''Var2'';<br\
      \ /><br />&nbsp;&nbsp;var ''DataType2'' ''Var3'';<br />};</tt>\n|-\n| colspan=\"\
      2\" |\n====Comments====\n\n|-\n|<tt>Rem ''Comment''</tt> <br /><tt>' ''Comment''</tt>\n\
      |<tt>/* ''Multi-Line Comment'' */ <br />// ''Comment''</tt>\n|-\n| colspan=\"\
      2\" |\n====Conditionals====\n\n|-\n|<tt>If ''condition'' Then <br />ElseIf ''condition''\
      \ Then <br />Else <br />End If</tt>\n|<tt>if (''condition'') { <br />} else\
      \ if (''condition'') { <br />} else { <br />}</tt>\n|-\n|<tt>Select Case ''expression''\
      \ <br />&nbsp;&nbsp;Case ''value1'' <br />&nbsp;&nbsp;&nbsp;&nbsp;DoSomething\
      \ <br /><br />&nbsp;&nbsp;Case ''value2'', ''value3'' <br />&nbsp;&nbsp;&nbsp;&nbsp;DoSomethingElse\
      \ <br /><br /><br />&nbsp;&nbsp;Case Else <br />&nbsp;&nbsp;&nbsp;&nbsp;DoDefaultSomething\
      \ <br />End Select</tt>\n|<tt>switch (''expression'') { <br />&nbsp;&nbsp;case\
      \ ''value1'': <br />&nbsp;&nbsp;&nbsp;&nbsp;DoSomething(); <br />&nbsp;&nbsp;&nbsp;&nbsp;break;\
      \ <br />&nbsp;&nbsp;case ''value2'': <br />&nbsp;&nbsp;case ''value3'': <br\
      \ />&nbsp;&nbsp;&nbsp;&nbsp;DoSomethingElse(); <br />&nbsp;&nbsp;&nbsp;&nbsp;break;\
      \ <br />&nbsp;&nbsp;default: <br />&nbsp;&nbsp;&nbsp;&nbsp;DoDefaultSomething();\
      \ <br />}</tt>\n|-\n| colspan=\"2\" |\n====Loops====\n\n|-\n|<tt>For ''var''\
      \ = ''start'' To ''end'' <br />Next</tt>\n|<tt>for (''var'' = ''start''; ''var''\
      \ <= ''end''; ''var''++) { <br />}</tt>\n|-\n|<tt>For ''var'' = 1 To ''number_of_times''\
      \ <br />Next</tt>\n|<tt>for (''var'' = 0; ''var'' < ''number_of_times''; ''var''++)\
      \ { <br />}</tt>\n|-\n|<tt>For ''var'' = ''start'' To ''end'' Step ''step''\
      \ <br />Next</tt>\n|<tt>for (''var'' = ''start''; ''var'' <= ''end''; ''var''\
      \ += ''step'') { <br />}</tt>\n|-\n|<tt>Do <br />&nbsp;&nbsp;If ''condition''\
      \ Then Exit Do <br />Loop</tt>\n|<tt>for <nowiki>(;;)</nowiki> { <br />&nbsp;&nbsp;if\
      \ (''condition'') break; <br />}</tt>\n|-\n|<tt>Do While ''condition'' <br />Loop</tt>\n\
      |<tt>while (''condition'') { <br />}</tt>\n|-\n|<tt>Do <br />Loop Until ''condition''</tt>\n\
      |<tt>do { <br />} until (''condition'');</tt>\n|}\n\nYou can make your UScript\
      \ more readable with the <tt>continue</tt> keyword. With it, it makes easier\
      \ (thus, a good practice) to go to the next loop item if a certain condition\
      \ is not met.\n\n{|\n\n|-\n| colspan=\"2\" |\n====Subs and Functions====\n\n\
      |-\n|<tt>Sub ''subname'' (''param1'' As Integer, ''param2'' As String) <br />&nbsp;&nbsp;If\
      \ ''condition'' Then Exit Sub <br />End Sub</tt>\n|<tt>function ''subname''\
      \ (int ''param1'', string ''param2'') { <br />&nbsp;&nbsp;if (''condition'')\
      \ return; <br />}</tt>\n|-\n|<tt>Function ''funcname'' (...) As Double <br />&nbsp;&nbsp;If\
      \ ''condition'' Then funcname = ''value'' : Exit Function <br />&nbsp;&nbsp;''funcname''\
      \ = ''value'' <br />End Function</tt>\n|<tt>function float ''funcname'' (...)\
      \ { <br />&nbsp;&nbsp;if (''condition'') return ''value''; <br />&nbsp;&nbsp;return\
      \ ''value''; <br />}</tt>\n|}\n\n====Arrays====\n\nArrays in UScript are easy,\
      \ there is just 1 major thing to remember. Arrays start at 0! always. No wierd:\n\
      \n{{innerbox|Dim SomeArray(2042 to 35930) AS Integer\n\n}}\n\njust a simple:\n\
      \n{{innerbox|var int SomeArray[420];\n\n}}\n\nThere are also [[Legacy:Dynamic\
      \ Array|Dynamic Array]]s (they also ALWAYS start at 0).\n\n===Event-Driven Architecture===\n\
      \nEverything in UnrealScript is driven by engine events, very similar to Visual\
      \ Basic.  The [[Legacy:Actor|Actor]] class declares a variety of events that\
      \ are inherited by [[Legacy:Actor|Actor]] subclasses and called by the engine\
      \ for every object of those classes.  Sometimes you can even control how and\
      \ when events are called; the Timer event, for instance, is controlled by the\
      \ SetTimer function.\n\nTo have objects of your class ''do'' something, implement\
      \ some or all of its events.  You can, of course, also call functions from code\
      \ executed for other objects, including objects of different classes.  The functions\
      \ of the [[Legacy:Mutator|Mutator]] class, for example, are actually called\
      \ by other UnrealScript code.\n\n==Related Topics==\n* [[Legacy:UnrealScript\
      \ Lessons|UnrealScript Lessons]]"
  properties: []
  revId: 8645
name: "Legacy:UnrealScript For Visual Basic Programmers"
revision:
  revid: 8645
  parentid: 8646
  user: "Wormbo"
  timestamp: 1096897069.000000000
  comment: "*"
timestamp: 1668764291.621402000
