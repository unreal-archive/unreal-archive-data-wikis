---
parse:
  title: "Legacy:Typecasting"
  text:
    text: "<table style=\"\" class=\"metadata plainlinks ambox ambox-notice\">\n<tr>\n\
      <td class=\"ambox-image\">\n<div style=\"width:52px;\"><a href=\"/File:Oldwikilogo.png\"\
      \ class=\"image\" title=\"Legacy content notice\"><img alt=\"Legacy content\
      \ notice\" src=\"/w/images/thumb/Oldwikilogo.png/52px-Oldwikilogo.png\" width=\"\
      52\" height=\"37\" srcset=\"/w/images/Oldwikilogo.png 1.5x, /w/images/Oldwikilogo.png\
      \ 2x\" /></a></div>\n</td>\n<td class=\"ambox-text\">\n<p><b>This is a <a href=\"\
      /Unreal_Wiki:Namespaces#Legacy\" title=\"Unreal Wiki:Namespaces\">legacy</a>\
      \ page <a href=\"/Unreal_Wiki:MediaWiki_conversion\" title=\"Unreal Wiki:MediaWiki\
      \ conversion\">imported</a> from the old Unreal Wiki.</b></p>\n<p><i>Please\
      \ avoid editing or moving it and improve <a href=\"/Typecasting\" title=\"Typecasting\"\
      >Typecasting</a> instead.</i></p>\n</td>\n</tr>\n</table>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#What_is_Typecasting.3F\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">What is Typecasting?</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Why_Do_I_Need_That.3F\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Why Do I Need That?</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Example_1:_Owners\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Example 1: Owners</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Example_2\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Example 2</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-5\"><a href=\"#Example_3:_Typecasting_to_a_Custom_Pawn\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Example 3: Typecasting\
      \ to a Custom Pawn</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a\
      \ href=\"#So.....3F\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\"\
      >So....?</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"\
      ><a href=\"#Conversions\"><span class=\"tocnumber\">3</span> <span class=\"\
      toctext\">Conversions</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-8\"\
      ><a href=\"#Byte.2FInt.2FFloat...\"><span class=\"tocnumber\">3.1</span> <span\
      \ class=\"toctext\">Byte/Int/Float...</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-9\"><a href=\"#to_String\"><span class=\"tocnumber\">3.1.1</span>\
      \ <span class=\"toctext\">to String</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-10\"><a href=\"#to_Boolean\"><span class=\"tocnumber\">3.1.2</span>\
      \ <span class=\"toctext\">to Boolean</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-11\"><a href=\"#to_Enum\"><span class=\"tocnumber\">3.1.3</span>\
      \ <span class=\"toctext\">to Enum</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-12\"><a href=\"#Enum...\"><span class=\"tocnumber\">3.2</span>\
      \ <span class=\"toctext\">Enum...</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-13\"\
      ><a href=\"#to_String_2\"><span class=\"tocnumber\">3.2.1</span> <span class=\"\
      toctext\">to String</span></a></li>\n<li class=\"toclevel-3 tocsection-14\"\
      ><a href=\"#to_Name\"><span class=\"tocnumber\">3.2.2</span> <span class=\"\
      toctext\">to Name</span></a></li>\n<li class=\"toclevel-3 tocsection-15\"><a\
      \ href=\"#to_Boolean_2\"><span class=\"tocnumber\">3.2.3</span> <span class=\"\
      toctext\">to Boolean</span></a></li>\n<li class=\"toclevel-3 tocsection-16\"\
      ><a href=\"#to_Byte.2FInt\"><span class=\"tocnumber\">3.2.4</span> <span class=\"\
      toctext\">to Byte/Int</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2\
      \ tocsection-17\"><a href=\"#Boolean...\"><span class=\"tocnumber\">3.3</span>\
      \ <span class=\"toctext\">Boolean...</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-18\"><a href=\"#to_Byte.2FInt.2FFloat\"><span class=\"tocnumber\"\
      >3.3.1</span> <span class=\"toctext\">to Byte/Int/Float</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-19\"><a href=\"#to_String_3\"><span class=\"\
      tocnumber\">3.3.2</span> <span class=\"toctext\">to String</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-20\"><a href=\"#Name...\"><span\
      \ class=\"tocnumber\">3.4</span> <span class=\"toctext\">Name...</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-21\"><a href=\"#to_String_4\"><span\
      \ class=\"tocnumber\">3.4.1</span> <span class=\"toctext\">to String</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-22\"><a href=\"#Object...\"\
      ><span class=\"tocnumber\">3.5</span> <span class=\"toctext\">Object...</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-23\"><a href=\"#to_String_5\"><span\
      \ class=\"tocnumber\">3.5.1</span> <span class=\"toctext\">to String</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-24\"><a href=\"#to_Boolean_3\"><span class=\"\
      tocnumber\">3.5.2</span> <span class=\"toctext\">to Boolean</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-25\"><a href=\"#Struct...\"\
      ><span class=\"tocnumber\">3.6</span> <span class=\"toctext\">Struct...</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-26\"><a href=\"#to_String_6\"><span\
      \ class=\"tocnumber\">3.6.1</span> <span class=\"toctext\">to String</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-27\"><a href=\"#to_Boolean_4\"><span class=\"\
      tocnumber\">3.6.2</span> <span class=\"toctext\">to Boolean</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-28\"><a href=\"#String...\"\
      ><span class=\"tocnumber\">3.7</span> <span class=\"toctext\">String...</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-29\"><a href=\"#to_Byte.2FInt_2\"><span\
      \ class=\"tocnumber\">3.7.1</span> <span class=\"toctext\">to Byte/Int</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-30\"><a href=\"#to_Float\"><span class=\"\
      tocnumber\">3.7.2</span> <span class=\"toctext\">to Float</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-31\"><a href=\"#to_Boolean_5\"><span class=\"\
      tocnumber\">3.7.3</span> <span class=\"toctext\">to Boolean</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-32\"><a href=\"#to_Struct\"><span class=\"\
      tocnumber\">3.7.4</span> <span class=\"toctext\">to Struct</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-33\"><a href=\"#to_Name_2\"><span class=\"\
      tocnumber\">3.7.5</span> <span class=\"toctext\">to Name</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-34\"><a href=\"#to_Object\"><span class=\"tocnumber\"\
      >3.7.6</span> <span class=\"toctext\">to Object</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-2 tocsection-35\"><a href=\"#Vector...\"><span class=\"\
      tocnumber\">3.8</span> <span class=\"toctext\">Vector...</span></a>\n<ul>\n\
      <li class=\"toclevel-3 tocsection-36\"><a href=\"#to_Rotator\"><span class=\"\
      tocnumber\">3.8.1</span> <span class=\"toctext\">to Rotator</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-37\"><a href=\"#Rotator...\"\
      ><span class=\"tocnumber\">3.9</span> <span class=\"toctext\">Rotator...</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-38\"><a href=\"#to_Vector\"><span class=\"\
      tocnumber\">3.9.1</span> <span class=\"toctext\">to Vector</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-39\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"\
      mw-headline\" id=\"What_is_Typecasting.3F\">What is Typecasting?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=1\" title=\"Edit section: What is\
      \ Typecasting?\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>For an overview of typecasting, please read the indroduction to Typecasting\
      \ located at <a href=\"/Legacy:Using_Objects\" title=\"Legacy:Using Objects\"\
      >Using Objects</a>.</p>\n<p><i><b>Syntax:</b></i></p>\n<p>This is the basic\
      \ typecasting syntax:</p>\n<dl>\n<dd><i>desiredType</i> <b>(</b> <i>expression</i>\
      \ <b>)</b></dd>\n</dl>\n<p>Often you typecast objects to access certain properties,\
      \ so here are two more specialized explainations for that case:</p>\n<dl>\n\
      <dd><i>ClassToTypecastTo</i> <b>(</b> <i>ObjectToTypecast</i> <b>) .</b> <i>PropertyToAccess</i></dd>\n\
      <dd><i>ClassToTypecastTo</i> <b>(</b> <i>ThingToGetObjectFrom</i> <b>.</b> <i>ObjectToTypecast</i>\
      \ <b>) .</b> <i>PropertyToAccess</i></dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Why_Do_I_Need_That.3F\">Why Do I Need That?</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=2\"\
      \ title=\"Edit section: Why Do I Need That?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Example_1:_Owners\"\
      >Example 1: Owners</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=3\" title=\"Edit section:\
      \ Example 1: Owners\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Imagine you have a weapon class and you need to access properties or functions\
      \ of its owner (a Pawn class). The most obvious way is to use the weapon's Owner\
      \ property, but there's a small problem with that:</p>\n<p>The weapon has inherited\
      \ the Owner property from the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> class, and it's defined there using this line:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span class=\"kw1\">const</span>\
      \ <span class=\"kw9\">Actor</span> <span class=\"kw7\">Owner</span>;   <span\
      \ class=\"co1\">// Owner actor.</span></pre></div>\n</div>\n<p>That means no\
      \ matter what you specified as the actor's owner, the compiler will always think\
      \ of it as an object of class Actor. If you want to access the Health property\
      \ of the player holding the weapon, the compiler will tell you that there isn't\
      \ a Health property in the actor class. This happens quite often and therefore\
      \ UnrealScript provides a way around these errors:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw9\">Pawn</span>\
      \ MyPawn; \nMyPawn <span class=\"sy0\">=</span> <span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Owner</span><span class=\"br0\"\
      >)</span>; \n<span class=\"kw3\">log</span><span class=\"br0\">(</span>MyPawn.<span\
      \ class=\"me0\">Health</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>This logs the health of the pawn owning this actor. We've typecast the Owner\
      \ (an actor) into a Pawn, and we can then access a property of the Pawn class.\
      \ It works most of the time, but sometimes Owner can be <a href=\"/Legacy:Special_UnrealScript_Keywords\"\
      \ title=\"Legacy:Special UnrealScript Keywords\">None</a> or at least not a\
      \ Pawn. In that case an Accessed None error is logged at runtime. Accessing\
      \ None can have unpredictable effects, so it should be avoided by adding some\
      \ extra code:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw9\">Pawn</span> MyPawn;\nMyPawn <span class=\"\
      sy0\">=</span> <span class=\"kw9\">Pawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Owner</span><span class=\"br0\">)</span>;\n<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> MyPawn <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n  <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span>MyPawn.<span class=\"me0\">Health</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"kw2\">else</span>\n  <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Owner is not\
      \ a Pawn!\"</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>You\
      \ can also do the same thing without an additional variable:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw9\">Pawn</span><span class=\"br0\">(</span><span class=\"\
      kw7\">Owner</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n  <span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Owner</span><span class=\"br0\"\
      >)</span>.<span class=\"me0\">Health</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"kw2\">else</span>\n  <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Owner is not a Pawn!\"</span><span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Example_2\"\
      >Example 2</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=4\" title=\"Edit section:\
      \ Example 2\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>In a gametype you want to send a message to a player when he kills someone.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw9\">PlayerController</span>.<span\
      \ class=\"kw4\">ClientMessage</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"message\"</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p>will do fine for that, but the Killed function of GameInfo doesn't give PlayerController,\
      \ but Controller. So you have to typecast:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw9\">PlayerController</span><span class=\"br0\">(</span>Killed<span\
      \ class=\"br0\">)</span>.<span class=\"kw4\">ClientMessage</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Message\"</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>would work fine, but what if the Controller isn't a PlayerController,\
      \ but a AIController for example, then nothing would happen, except that it\
      \ shows an \"Accessed None\" error in the log. That's not so good. You can use\
      \ the IsA function to stop that.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw2\">if</span> <span class=\"br0\">(</span>Killer.<span class=\"\
      kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'PlayerController'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw9\">PlayerController</span><span class=\"br0\">(</span>Killer<span\
      \ class=\"br0\">)</span>.<span class=\"kw4\">ClientMessage</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Message\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Example_3:_Typecasting_to_a_Custom_Pawn\">Example 3: Typecasting to a\
      \ Custom Pawn</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=5\" title=\"Edit section:\
      \ Example 3: Typecasting to a Custom Pawn\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you have a custom controller and a custom pawn\
      \ and you wish you access properties on your custom pawn, a natural way to do\
      \ it would be like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">CustomController<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Controller</span><span class=\"\
      br0\">)</span>.<span class=\"me0\">CustomPawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">Controller</span>.<span class=\"kw9\">Pawn</span><span class=\"\
      br0\">)</span>.<span class=\"me0\">Variable</span>;</pre></div>\n</div>\n<p>That\
      \ however, will not work. Instead, simplify things. You don't need to typecast\
      \ the controller because you aren't really accessing anything from your custom\
      \ controller. You are only accessing a variable in your custom pawn. Therefore\
      \ this should work:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">CustomPawn<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Controller</span>.<span class=\"\
      kw9\">Pawn</span><span class=\"br0\">)</span>.<span class=\"me0\">Variable</span>;\
      \ <span class=\"co1\">//Accesses the variable of your custom pawn</span></pre></div>\n\
      </div>\n<p>If for some reason you need to typecast your custom controller also,\
      \ you can use this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">CustomPawn<span\
      \ class=\"br0\">(</span> CustomController<span class=\"br0\">(</span><span class=\"\
      kw9\">Controller</span><span class=\"br0\">)</span>.<span class=\"kw9\">Pawn</span>\
      \ <span class=\"br0\">)</span>.<span class=\"me0\">Variable</span>; <span class=\"\
      co1\">//Accesses the variable of your custom controller's custom pawn</span></pre></div>\n\
      </div>\n<p>Typecasting the custom controller won't really be neccesary in this\
      \ case as the controller has a direct reference to it's controlled pawn so no\
      \ matter what type of Controller you are, the previous example will usually\
      \ work.</p>\n<h3><span class=\"mw-headline\" id=\"So.....3F\">So....?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=6\" title=\"Edit section: So....?\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>You\
      \ can also typecast classes to other classes:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">var</span> class<span class=\"sy0\">&lt;</span>actor<span\
      \ class=\"sy0\">&gt;</span> ActorType;\nActorType <span class=\"sy0\">=</span>\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'Foo'</span>;\nclass<span\
      \ class=\"sy0\">&lt;</span>Foo<span class=\"sy0\">&gt;</span><span class=\"\
      br0\">(</span>ActorType<span class=\"br0\">)</span>.<span class=\"kw1\">Default</span>.<span\
      \ class=\"me0\">Bar</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0</span>;</pre></div>\n</div>\n<p>A lot of casting is automatic (e.g. int -&gt;\
      \ float, byte -&gt; int) and other types can be converted using regular casting\
      \ syntax (e.g. vector -&gt; rotator, numbers/names/objects -&gt; string), but\
      \ there are also some types which need special treatment.<br />\n(Some of these\
      \ conversions might not be very useful.)</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Conversions\">Conversions</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=7\"\
      \ title=\"Edit section: Conversions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Byte.2FInt.2FFloat...\"\
      >Byte/Int/Float...</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=8\" title=\"Edit section:\
      \ Byte/Int/Float...\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <h4><span class=\"mw-headline\" id=\"to_String\">to String</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=9\"\
      \ title=\"Edit section: to String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Numbers are converted to their actual string representation.\
      \ Float values always have six digits after the decimal point in <a href=\"\
      /Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a> and two in <a\
      \ href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>.\
      \ (They are rounded.)</p>\n<h4><span class=\"mw-headline\" id=\"to_Boolean\"\
      >to Boolean</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=10\" title=\"Edit section:\
      \ to Boolean\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Zero (or first item of the enumeration) results in <i>False</i>, anything\
      \ else is <i>True</i>.</p>\n<h4><span class=\"mw-headline\" id=\"to_Enum\">to\
      \ Enum</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=11\" title=\"Edit section:\
      \ to Enum\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>The following appears to work. No idea what happens if your int or float\
      \ is out of the bounds of the enum.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >EnumVar <span class=\"sy0\">=</span> EMyEnum<span class=\"br0\">(</span> myInt\
      \ <span class=\"br0\">)</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Enum...\">Enum...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=12\"\
      \ title=\"Edit section: Enum...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Note that for typecasting enums you always have to\
      \ give an enum property or a fully qualified enum value, e.g. <tt>MyActor.Physics</tt>\
      \ or <tt>Level.ENetMode.NM_ListenServer</tt>.</p>\n<h4><span class=\"mw-headline\"\
      \ id=\"to_String_2\">to String</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=13\"\
      \ title=\"Edit section: to String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>When typecasting enum properties, the enum items are\
      \ represented by their corresponing number. (first item = 0, second item = 1,...;\
      \ e.g. PHYS_Falling = 2, ROLE_Authority = 4) You need to convert the enum item\
      \ to Name and cast that to String if you want a string representation. (see\
      \ below)</p>\n<h4><span class=\"mw-headline\" id=\"to_Name\">to Name</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=14\" title=\"Edit section: to Name\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>To\
      \ get the name of an enum item you have to use the GetEnum function like this:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">name</span> EnumName;\nEnumName <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">GetEnum</span><span class=\"br0\">(</span><span class=\"\
      kw1\">enum</span><span class=\"st0\">'ENetRole'</span>, <span class=\"nu0\"\
      >2</span><span class=\"br0\">)</span>;\n<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span>EnumName<span class=\"br0\">)</span>; <span class=\"\
      co1\">// logs 'ROLE_SimulatedProxy'</span></pre></div>\n</div>\n<h4><span class=\"\
      mw-headline\" id=\"to_Boolean_2\">to Boolean</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=15\"\
      \ title=\"Edit section: to Boolean\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The first enum item results in False, anything else\
      \ in True.</p>\n<h4><span class=\"mw-headline\" id=\"to_Byte.2FInt\">to Byte/Int</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=16\" title=\"Edit section: to Byte/Int\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>This\
      \ conversion happens automatically in assignments.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Boolean...\">Boolean...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=17\"\
      \ title=\"Edit section: Boolean...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"to_Byte.2FInt.2FFloat\"\
      >to Byte/Int/Float</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=18\" title=\"Edit section:\
      \ to Byte/Int/Float\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p><i>True</i> results in 1, <i>False</i> results in 0.</p>\n<h4><span class=\"\
      mw-headline\" id=\"to_String_3\">to String</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=19\"\
      \ title=\"Edit section: to String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>You get either \"True\" or \"False\".</p>\n<p>Keep\
      \ in mind this is a special case variable. The difference is that it is localized,\
      \ stored in Core.&lt;localized&gt;, where &lt;localized&gt; can be int, det,\
      \ itt etc. (see <a href=\"/Legacy:Localization\" title=\"Legacy:Localization\"\
      >Localization</a> for some info).</p>\n<p>This is how the Engine knows what\
      \ and how to use it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      br0\">[</span>General<span class=\"br0\">]</span>\n<span class=\"kw6\">True</span><span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n<span class=\"kw6\"\
      >False</span><span class=\"sy0\">=</span><span class=\"kw6\">False</span></pre></div>\n\
      </div>\n<p>Therefore, a code like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> StatusCheck <span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">bool</span> Boolean;\n \n    Boolean <span\
      \ class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\n    CheckMe<span\
      \ class=\"br0\">(</span><span class=\"kw5\">string</span><span class=\"br0\"\
      >(</span>Boolean<span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CheckMe\
      \ <span class=\"br0\">(</span><span class=\"kw5\">string</span> Check<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Check <span class=\"sy0\">==</span> <span class=\"\
      st0\">\"True\"</span><span class=\"br0\">)</span>\n        <span class=\"kw3\"\
      >Log</span><span class=\"br0\">(</span><span class=\"st0\">\"You're right, it's\
      \ true...\"</span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span>\n\
      \        <span class=\"kw3\">Log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"Sorry... the argument is false\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>... is very unreliable.\
      \ The reason is, that on a frt localized install (French language), \"True\"\
      \ would correspond to \"Vrai\", on a det install (German) it would correspond\
      \ to \"Wahr\" etc. The best (and most secure) way is to use byte typecasting.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Name...\">Name...</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=20\"\
      \ title=\"Edit section: Name...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"to_String_4\">to\
      \ String</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=21\" title=\"Edit section:\
      \ to String\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>The <i>name</i> is converted to the string used in the source code. Since\
      \ names are not case-sensitive the first appearance of the name within the complete\
      \ source is used. <i>(This might be an answer to the question why the name of\
      \ the <a href=\"/Legacy:LocationID\" title=\"Legacy:LocationID\">LocationID</a>\
      \ actor is completely lowercase while its script says \"LocationID\".)</i></p>\n\
      <h3><span class=\"mw-headline\" id=\"Object...\">Object...</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=22\"\
      \ title=\"Edit section: Object...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>\"Object\" can be any <a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a>, <a href=\"/Legacy:Object\" title=\"Legacy:Object\"\
      >Object</a>, class, <a href=\"/Legacy:Texture\" title=\"Legacy:Texture\">Texture</a>,\
      \ mesh, <a href=\"/Legacy:Sound\" title=\"Legacy:Sound\">Sound</a>, etc.</p>\n\
      <h4><span class=\"mw-headline\" id=\"to_String_5\">to String</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=23\"\
      \ title=\"Edit section: to String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>For classes, textures, meshes, sounds and some other\
      \ objects the string usually looks like \"Package.ObjectName\". Actors are usually\
      \ represented by \"MapName.ActorClass<i>&lt;number&gt;</i>\", but in <a href=\"\
      /Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a> objects\
      \ created at runtime (i.e. not in the editor) don't get a number added to their\
      \ name by default. In general objects are represented as \"RootObject.FirstChild.<i>(...)</i>.ThisObject\"\
      . Examples for this are UWindow objects in UT and objects embedded in the default\
      \ properties of UT2003 classes. For some objects (like <a href=\"/Legacy:Commandlet\"\
      \ title=\"Legacy:Commandlet\">Commandlets</a> or the UWindow objects) <i>RootObject</i>\
      \ is \"Transient\" in UT and \"Package\" in UT2003.</p>\n<h4><span class=\"\
      mw-headline\" id=\"to_Boolean_3\">to Boolean</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=24\"\
      \ title=\"Edit section: to Boolean\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The boolean will be <i>False</i> if the object, class,\
      \ etc. is <i>None</i> and <i>True</i> otherwise.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Struct...\">Struct...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=25\"\
      \ title=\"Edit section: Struct...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Note:</b> Vectors and rotators are structs, too.</p>\n\
      <h4><span class=\"mw-headline\" id=\"to_String_6\">to String</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=26\"\
      \ title=\"Edit section: to String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Every part of the struct is converted separately and\
      \ all values are separated by commas. This might only work for certain <a href=\"\
      /Legacy:Built-In_Struct\" title=\"Legacy:Built-In Struct\">Built-In Struct</a>.</p>\n\
      <h4><span class=\"mw-headline\" id=\"to_Boolean_4\">to Boolean</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=27\"\
      \ title=\"Edit section: to Boolean\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Results in <i>False</i> if all parts of the struct\
      \ are null values, i.e. <i>0</i>, empty strings or <i>None</i>. Anything else\
      \ results in <i>True</i>.</p>\n<h3><span class=\"mw-headline\" id=\"String...\"\
      >String...</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=28\" title=\"Edit section:\
      \ String...\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <h4><span class=\"mw-headline\" id=\"to_Byte.2FInt_2\">to Byte/Int</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=29\" title=\"Edit section: to Byte/Int\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>The\
      \ string has to start with a number which must not be negative for <i>byte</i>.\
      \ The string is cut off at the first non-numerical character. Any other string\
      \ results in 0.</p>\n<h4><span class=\"mw-headline\" id=\"to_Float\">to Float</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=30\" title=\"Edit section: to Float\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Similar\
      \ to integer conversion, but the value can use a much more complex format. \"\
      -12.3e-2\" will be converted to -1.23, \"1e4\" is 10000 and \"12.3\" is (guess\
      \ what) 12.3.</p>\n<h4><span class=\"mw-headline\" id=\"to_Boolean_5\">to Boolean</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=31\" title=\"Edit section: to Boolean\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>The\
      \ conversion returns <i>True</i> if the string starts either with the characters\
      \ \"true\" (not case-sensitive) or results in a non-zero number (see string\
      \ to integer/float above). It returns <i>False</i> in all other cases.</p>\n\
      <h4><span class=\"mw-headline\" id=\"to_Struct\">to Struct</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=32\"\
      \ title=\"Edit section: to Struct\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The components of the struct have to be in the same\
      \ order the struct -&gt; string cast uses and also have to be separated by commas.\
      \ All components that are not present in the string are set to 0, <i>False</i>,\
      \ empty strings, etc. This might only work for certain <a href=\"/Legacy:Built-In_Struct\"\
      \ title=\"Legacy:Built-In Struct\">Built-In Struct</a>.</p>\n<h4><span class=\"\
      mw-headline\" id=\"to_Name_2\">to Name</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=33\"\
      \ title=\"Edit section: to Name\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Names refuse to be set with expressions or from string\
      \ variables. They only like something like this:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">MyName <span class=\"sy0\">=</span> <span class=\"st0\">'thisStringIsHardcoded'</span>;\
      \          <span class=\"co1\">// This works.</span>\n<span class=\"kw3\">SetPropertyText</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyName\"</span>, MyStringValue<span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">// Workaround, see below</span></pre></div>\n\
      </div>\n<p>The workaround by using SetPropertyText to assign a calculated value\
      \ to a name variable works reasonably well, but there's a reason to the fact\
      \ that it's not possible to directly assign strings to names. Doing so creates\
      \ a new name table entry which isn't communicated to remote machines in network\
      \ games, which can in turn lead to many sorts of ugly inconsistency problems\
      \ if it's involved in replication.</p>\n<h4><span class=\"mw-headline\" id=\"\
      to_Object\">to Object</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=34\" title=\"Edit section:\
      \ to Object\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Strings can't be casted to objects directly. Instead use the <a href=\"/Legacy:DynamicLoadObject\"\
      \ title=\"Legacy:DynamicLoadObject\">DynamicLoadObject</a> method to load the\
      \ specified object and then cast it to the desired class.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> class<span class=\"sy0\"\
      >&lt;</span>Actor<span class=\"sy0\">&gt;</span> ActorType;\n<span class=\"\
      kw1\">local</span> <span class=\"kw9\">Actor</span> A;\n \nActorType <span class=\"\
      sy0\">=</span> class<span class=\"sy0\">&lt;</span>Actor<span class=\"sy0\"\
      >&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyPackage.MyActorClass\"</span>,\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'Class'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\nA <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span>ActorType<span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">local</span> class<span class=\"sy0\">&lt;</span>UWindowList<span\
      \ class=\"sy0\">&gt;</span> ListType;\n<span class=\"kw1\">local</span> UWindowList\
      \ L;\n \nListType <span class=\"sy0\">=</span> class<span class=\"sy0\">&lt;</span>UWindowList<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyPackage.MyList\"</span>, <span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Class'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\nL <span class=\"sy0\">=</span>\
      \ <span class=\"kw1\">New</span> ListType;</pre></div>\n</div>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">Texture</span>\
      \ T;\n \nT <span class=\"sy0\">=</span> <span class=\"kw5\">Texture</span><span\
      \ class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"MyPackage.MyTexture\"</span>, <span class=\"\
      kw1\">class</span><span class=\"st0\">'Texture'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<p><b>Dimension4:</b> You can\
      \ load objects from maps too! Example:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">IterLI<span class=\"sy0\">=</span>LevelInfo<span class=\"br0\">(</span><span\
      \ class=\"kw3\">DynamicLoadObject</span><span class=\"br0\">(</span>IteratedMap<span\
      \ class=\"sy0\">$</span><span class=\"st0\">\".LevelInfo0\"</span>, <span class=\"\
      kw1\">class</span><span class=\"st0\">'Actor'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;</pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Vector...\">Vector...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=35\"\
      \ title=\"Edit section: Vector...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"to_Rotator\">to\
      \ Rotator</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=36\" title=\"Edit section:\
      \ to Rotator\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Vectors and Rotators can automatically be casted to each other. Vector -&gt;\
      \ Rotator returns a rotator with the roll component set to 0, while Rotator\
      \ -&gt; Vector returns a vector with length 1.</p>\n<p>See <a href=\"/Legacy:Rotator\"\
      \ title=\"Legacy:Rotator\">rotator</a> for more.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Rotator...\">Rotator...</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Typecasting?section=37\"\
      \ title=\"Edit section: Rotator...\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"to_Vector\">to Vector</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Typecasting?section=38\" title=\"Edit section: to Vector\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>Rotators\
      \ represent three angles of rotation. A rotator in itself does not necessarily\
      \ represent a direction until it is used in conjunction with a vector. For instance,\
      \ a Yaw += 16384 will rotate an arbitrary vector 90 degrees but if you do not\
      \ know the direction of the arbitrary vector, you cannot say what the direction\
      \ of the new rotated vector is. The best you can say is that the new vector\
      \ is 90 degrees rotated.</p>\n<p>However, the vector(rotator) typecast returns\
      \ a vector given only a rotator (without any other explicit vector information).\
      \ It is assumed that the source vector is vect(1,0,0) so that the returned value\
      \ is a vector rotated from vect(1,0,0). This makes sense since vect(1,0,0) is\
      \ the vector used to represent the forward direction.</p>\n<p>Examples:</p>\n\
      <table class=\"wikitable\">\n<tr>\n<td colspan=\"3\" style=\"text-align: center\"\
      ><b>Rotator</b></td>\n</tr>\n<tr>\n<td colspan=\"3\" style=\"text-align: center\"\
      ><b>Vector</b></td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><b>Pitch</b></td>\n\
      <td style=\"text-align: center\"><b>Yaw</b></td>\n<td style=\"text-align: center\"\
      ><b>Roll</b></td>\n</tr>\n<tr>\n<td style=\"text-align: center\"><b>X</b></td>\n\
      <td style=\"text-align: center\"><b>Y</b></td>\n<td style=\"text-align: center\"\
      ><b>Z</b></td>\n</tr>\n<tr>\n<td style=\"text-align: right\">0</td>\n<td style=\"\
      text-align: right\">0</td>\n<td style=\"text-align: right\">any</td>\n</tr>\n\
      <tr>\n<td style=\"text-align: right\">1</td>\n<td style=\"text-align: right\"\
      >0</td>\n<td style=\"text-align: right\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ right\">0</td>\n<td style=\"text-align: right\">-32768</td>\n<td style=\"\
      text-align: right\">any</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">-1</td>\n\
      <td style=\"text-align: right\">0</td>\n<td style=\"text-align: right\">0</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">0</td>\n<td style=\"text-align:\
      \ right\">16384</td>\n<td style=\"text-align: right\">any</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: right\">0</td>\n<td style=\"text-align: right\">1</td>\n\
      <td style=\"text-align: right\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ right\">0</td>\n<td style=\"text-align: right\">-16384</td>\n<td style=\"\
      text-align: right\">any</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">0</td>\n\
      <td style=\"text-align: right\">-1</td>\n<td style=\"text-align: right\">0</td>\n\
      </tr>\n<tr>\n<td style=\"text-align: right\">16384</td>\n<td style=\"text-align:\
      \ right\">any</td>\n<td style=\"text-align: right\">any</td>\n</tr>\n<tr>\n\
      <td style=\"text-align: right\">0</td>\n<td style=\"text-align: right\">0</td>\n\
      <td style=\"text-align: right\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:\
      \ right\">49151</td>\n<td style=\"text-align: right\">any</td>\n<td style=\"\
      text-align: right\">any</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">0</td>\n\
      <td style=\"text-align: right\">0</td>\n<td style=\"text-align: right\">-1</td>\n\
      </tr>\n</table>\n<p>See <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\"\
      >rotator</a> for more.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Typecasting?section=39\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ topic page</li>\n<li><a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable\
      \ Type\">Variable Type</a></li>\n<li><a href=\"/Legacy:Function_Syntax\" title=\"\
      Legacy:Function Syntax\">Function Syntax</a></li>\n</ul>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.457 seconds\nReal time usage: 1.005 seconds\nPreprocessor\
      \ visited node count: 370/1000000\nPreprocessor generated node count: 726/1000000\n\
      Post‐expand include size: 975/2097152 bytes\nTemplate argument size: 338/2097152\
      \ bytes\nHighest expansion depth: 4/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   18.636      1 - -total\n100.00%   18.636      1 - Template:Legacy_page\n\
      \ 50.62%    9.433      1 - Template:Ambox\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:3088-0!*!0!!en!5!* and timestamp 20221117104152\
      \ and revision id 46237\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Localization"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  - ns: 4
    exists: true
    name: "Unreal Wiki:Namespaces"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Special UnrealScript Keywords"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Texture"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:DynamicLoadObject"
  - ns: 4
    exists: true
    name: "Unreal Wiki:MediaWiki conversion"
  - ns: 100
    exists: true
    name: "Legacy:Commandlet"
  - ns: 100
    exists: true
    name: "Legacy:Using Objects"
  - ns: 100
    exists: true
    name: "Legacy:Built-In Struct"
  - ns: 100
    exists: true
    name: "Legacy:LocationID"
  - ns: 100
    exists: true
    name: "Legacy:Sound"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  templates:
  - ns: 10
    exists: true
    name: "Template:Ambox"
  - ns: 10
    exists: true
    name: "Template:Legacy page"
  images:
  - "Oldwikilogo.png"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "What is Typecasting?"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 36
    anchor: "What_is_Typecasting.3F"
  - toclevel: 1
    level: "2"
    line: "Why Do I Need That?"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 615
    anchor: "Why_Do_I_Need_That.3F"
  - toclevel: 2
    level: "3"
    line: "Example 1: Owners"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 640
    anchor: "Example_1:_Owners"
  - toclevel: 2
    level: "3"
    line: "Example 2"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 2274
    anchor: "Example_2"
  - toclevel: 2
    level: "3"
    line: "Example 3: Typecasting to a Custom Pawn"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 3001
    anchor: "Example_3:_Typecasting_to_a_Custom_Pawn"
  - toclevel: 2
    level: "3"
    line: "So....?"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4107
    anchor: "So.....3F"
  - toclevel: 1
    level: "2"
    line: "Conversions"
    number: "3"
    index: "7"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4588
    anchor: "Conversions"
  - toclevel: 2
    level: "3"
    line: "Byte/Int/Float..."
    number: "3.1"
    index: "8"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4606
    anchor: "Byte.2FInt.2FFloat..."
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.1.1"
    index: "9"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4632
    anchor: "to_String"
  - toclevel: 3
    level: "4"
    line: "to Boolean"
    number: "3.1.2"
    index: "10"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4851
    anchor: "to_Boolean"
  - toclevel: 3
    level: "4"
    line: "to Enum"
    number: "3.1.3"
    index: "11"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 4962
    anchor: "to_Enum"
  - toclevel: 2
    level: "3"
    line: "Enum..."
    number: "3.2"
    index: "12"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 5136
    anchor: "Enum..."
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.2.1"
    index: "13"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 5333
    anchor: "to_String_2"
  - toclevel: 3
    level: "4"
    line: "to Name"
    number: "3.2.2"
    index: "14"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 5645
    anchor: "to_Name"
  - toclevel: 3
    level: "4"
    line: "to Boolean"
    number: "3.2.3"
    index: "15"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 5871
    anchor: "to_Boolean_2"
  - toclevel: 3
    level: "4"
    line: "to Byte/Int"
    number: "3.2.4"
    index: "16"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 5954
    anchor: "to_Byte.2FInt"
  - toclevel: 2
    level: "3"
    line: "Boolean..."
    number: "3.3"
    index: "17"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 6031
    anchor: "Boolean..."
  - toclevel: 3
    level: "4"
    line: "to Byte/Int/Float"
    number: "3.3.1"
    index: "18"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 6050
    anchor: "to_Byte.2FInt.2FFloat"
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.3.2"
    index: "19"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 6126
    anchor: "to_String_3"
  - toclevel: 2
    level: "3"
    line: "Name..."
    number: "3.4"
    index: "20"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 7066
    anchor: "Name..."
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.4.1"
    index: "21"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 7081
    anchor: "to_String_4"
  - toclevel: 2
    level: "3"
    line: "Object..."
    number: "3.5"
    index: "22"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 7435
    anchor: "Object..."
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.5.1"
    index: "23"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 7593
    anchor: "to_String_5"
  - toclevel: 3
    level: "4"
    line: "to Boolean"
    number: "3.5.2"
    index: "24"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8265
    anchor: "to_Boolean_3"
  - toclevel: 2
    level: "3"
    line: "Struct..."
    number: "3.6"
    index: "25"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8380
    anchor: "Struct..."
  - toclevel: 3
    level: "4"
    line: "to String"
    number: "3.6.1"
    index: "26"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8450
    anchor: "to_String_6"
  - toclevel: 3
    level: "4"
    line: "to Boolean"
    number: "3.6.2"
    index: "27"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8637
    anchor: "to_Boolean_4"
  - toclevel: 2
    level: "3"
    line: "String..."
    number: "3.7"
    index: "28"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8798
    anchor: "String..."
  - toclevel: 3
    level: "4"
    line: "to Byte/Int"
    number: "3.7.1"
    index: "29"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 8816
    anchor: "to_Byte.2FInt_2"
  - toclevel: 3
    level: "4"
    line: "to Float"
    number: "3.7.2"
    index: "30"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 9009
    anchor: "to_Float"
  - toclevel: 3
    level: "4"
    line: "to Boolean"
    number: "3.7.3"
    index: "31"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 9197
    anchor: "to_Boolean_5"
  - toclevel: 3
    level: "4"
    line: "to Struct"
    number: "3.7.4"
    index: "32"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 9437
    anchor: "to_Struct"
  - toclevel: 3
    level: "4"
    line: "to Name"
    number: "3.7.5"
    index: "33"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 9760
    anchor: "to_Name_2"
  - toclevel: 3
    level: "4"
    line: "to Object"
    number: "3.7.6"
    index: "34"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 10438
    anchor: "to_Object"
  - toclevel: 2
    level: "3"
    line: "Vector..."
    number: "3.8"
    index: "35"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 11270
    anchor: "Vector..."
  - toclevel: 3
    level: "4"
    line: "to Rotator"
    number: "3.8.1"
    index: "36"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 11288
    anchor: "to_Rotator"
  - toclevel: 2
    level: "3"
    line: "Rotator..."
    number: "3.9"
    index: "37"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 11542
    anchor: "Rotator..."
  - toclevel: 3
    level: "4"
    line: "to Vector"
    number: "3.9.1"
    index: "38"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 11561
    anchor: "to_Vector"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "39"
    fromtitle: "Legacy:Typecasting"
    byteoffset: 13975
    anchor: "Related_Topics"
  displaytitle: "Legacy:Typecasting"
  iwlinks: []
  wikitext:
    text: "{{Legacy page|new=[[Typecasting]]}}\n==What is Typecasting?==\n\nFor an\
      \ overview of typecasting, please read the indroduction to Typecasting located\
      \ at [[Legacy:Using Objects|Using Objects]].\n\n'''''Syntax:'''''\n\nThis is\
      \ the basic typecasting syntax:\n:''desiredType'' '''(''' ''expression'' ''')'''\n\
      \nOften you typecast objects to access certain properties, so here are two more\
      \ specialized explainations for that case:\n:''ClassToTypecastTo'' '''(''' ''ObjectToTypecast''\
      \ ''') .''' ''PropertyToAccess''\n:''ClassToTypecastTo'' '''(''' ''ThingToGetObjectFrom''\
      \ '''.''' ''ObjectToTypecast'' ''') .''' ''PropertyToAccess''\n\n==Why Do I\
      \ Need That?==\n\n===Example 1: Owners===\n\nImagine you have a weapon class\
      \ and you need to access properties or functions of its owner (a Pawn class).\
      \ The most obvious way is to use the weapon's Owner property, but there's a\
      \ small problem with that:\n\nThe weapon has inherited the Owner property from\
      \ the [[Legacy:Actor|Actor]] class, and it's defined there using this line:\n\
      \n<uscript>\nvar const Actor Owner;   // Owner actor.\n</uscript>\n\nThat means\
      \ no matter what you specified as the actor's owner, the compiler will always\
      \ think of it as an object of class Actor. If you want to access the Health\
      \ property of the player holding the weapon, the compiler will tell you that\
      \ there isn't a Health property in the actor class. This happens quite often\
      \ and therefore UnrealScript provides a way around these errors:\n\n<uscript>\n\
      local Pawn MyPawn; \nMyPawn = Pawn(Owner); \nlog(MyPawn.Health);\n</uscript>\n\
      \nThis logs the health of the pawn owning this actor. We've typecast the Owner\
      \ (an actor) into a Pawn, and we can then access a property of the Pawn class.\
      \ It works most of the time, but sometimes Owner can be [[Legacy:Special UnrealScript\
      \ Keywords|None]] or at least not a Pawn. In that case an Accessed None error\
      \ is logged at runtime. Accessing None can have unpredictable effects, so it\
      \ should be avoided by adding some extra code:\n\n<uscript>\nlocal Pawn MyPawn;\n\
      MyPawn = Pawn(Owner);\nif ( MyPawn != None )\n  log(MyPawn.Health);\nelse\n\
      \  log(\"Owner is not a Pawn!\");\n</uscript>\n\nYou can also do the same thing\
      \ without an additional variable:\n\n<uscript>\nif ( Pawn(Owner) != None )\n\
      \  log(Pawn(Owner).Health);\nelse\n  log(\"Owner is not a Pawn!\");\n</uscript>\n\
      \n===Example 2===\n\nIn a gametype you want to send a message to a player when\
      \ he kills someone.\n\n<uscript>PlayerController.ClientMessage(\"message\");</uscript>\n\
      \nwill do fine for that, but the Killed function of GameInfo doesn't give PlayerController,\
      \ but Controller. So you have to typecast:\n\n<uscript>PlayerController(Killed).ClientMessage(\"\
      Message\");</uscript>\n\nwould work fine, but what if the Controller isn't a\
      \ PlayerController, but a AIController for example, then nothing would happen,\
      \ except that it shows an \"Accessed None\" error in the log. That's not so\
      \ good. You can use the IsA function to stop that.\n\n<uscript>if (Killer.IsA('PlayerController'))\n\
      {\n    PlayerController(Killer).ClientMessage(\"Message\");\n}\n</uscript>\n\
      \n===Example 3: Typecasting to a Custom Pawn===\n\nIf you have a custom controller\
      \ and a custom pawn and you wish you access properties on your custom pawn,\
      \ a natural way to do it would be like this:\n\n<uscript>\nCustomController(Controller).CustomPawn(Controller.Pawn).Variable;\n\
      </uscript>\n\nThat however, will not work.  Instead, simplify things.  You don't\
      \ need to typecast the controller because you aren't really accessing anything\
      \ from your custom controller.  You are only accessing a variable in your custom\
      \ pawn.  Therefore this should work:\n\n<uscript>\nCustomPawn(Controller.Pawn).Variable;\
      \ //Accesses the variable of your custom pawn\n</uscript>\n\nIf for some reason\
      \ you need to typecast your custom controller also, you can use this:\n\n<uscript>\n\
      CustomPawn( CustomController(Controller).Pawn ).Variable; //Accesses the variable\
      \ of your custom controller's custom pawn\n</uscript>\n\nTypecasting the custom\
      \ controller won't really be neccesary in this case as the controller has a\
      \ direct reference to it's controlled pawn so no matter what type of Controller\
      \ you are, the previous example will usually work.\n\n===So....?===\n\nYou can\
      \ also typecast classes to other classes:\n\n<uscript>\nvar class<actor> ActorType;\n\
      ActorType = class'Foo';\nclass<Foo>(ActorType).Default.Bar = 0;\n</uscript>\n\
      \nA lot of casting is automatic (e.g. int -> float, byte -> int) and other types\
      \ can be converted using regular casting syntax (e.g. vector -> rotator, numbers/names/objects\
      \ -> string), but there are also some types which need special treatment.<br\
      \ />(Some of these conversions might not be very useful.)\n\n==Conversions ==\n\
      \n===Byte/Int/Float... ===\n\n====to String ====\n\nNumbers are converted to\
      \ their actual string representation. Float values always have six digits after\
      \ the decimal point in [[Legacy:UT|UT]] and two in [[Legacy:UT2003|UT2003]].\
      \ (They are rounded.)\n\n====to Boolean ====\n\nZero (or first item of the enumeration)\
      \ results in ''False'', anything else is ''True''.\n\n====to Enum====\n\nThe\
      \ following appears to work. No idea what happens if your int or float is out\
      \ of the bounds of the enum.\n\n<uscript>\nEnumVar = EMyEnum( myInt )\n</uscript>\n\
      \n===Enum... ===\n\nNote that for typecasting enums you always have to give\
      \ an enum property or a fully qualified enum value, e.g. <tt>MyActor.Physics</tt>\
      \ or <tt>Level.ENetMode.NM_ListenServer</tt>.\n\n====to String ====\n\nWhen\
      \ typecasting enum properties, the enum items are represented by their corresponing\
      \ number. (first item = 0, second item = 1,...; e.g. PHYS_Falling = 2, ROLE_Authority\
      \ = 4) You need to convert the enum item to Name and cast that to String if\
      \ you want a string representation. (see below)\n\n====to Name ====\n\nTo get\
      \ the name of an enum item you have to use the GetEnum function like this:\n\
      \n<uscript>\nlocal name EnumName;\nEnumName = GetEnum(enum'ENetRole', 2);\n\
      log(EnumName); // logs 'ROLE_SimulatedProxy'\n</uscript>\n\n====to Boolean ====\n\
      \nThe first enum item results in False, anything else in True.\n\n====to Byte/Int\
      \ ====\n\nThis conversion happens automatically in assignments.\n\n===Boolean...\
      \ ===\n\n====to Byte/Int/Float ====\n\n''True'' results in 1, ''False'' results\
      \ in 0.\n\n====to String ====\n\nYou get either \"True\" or \"False\". \n\n\
      Keep in mind this is a special case variable. The difference is that it is localized,\
      \ stored in Core.<localized>, where <localized> can be int, det, itt etc. (see\
      \ [[Legacy:Localization|Localization]] for some info).\n\nThis is how the Engine\
      \ knows what and how to use it:\n\n<uscript>[General]\nTrue=True\nFalse=False</uscript>\n\
      \nTherefore, a code like this:\n\n<uscript>\nfunction StatusCheck ()\n{\n  \
      \  local bool Boolean;\n\n    Boolean = True;\n    CheckMe(string(Boolean));\n\
      }\n\nfunction CheckMe (string Check)\n{\n    if (Check == \"True\")\n      \
      \  Log(\"You're right, it's true...\");\n    else\n        Log(\"Sorry... the\
      \ argument is false\");\n}</uscript>\n\n... is very unreliable. The reason is,\
      \ that on a frt localized install (French language), \"True\" would correspond\
      \ to \"Vrai\", on a det install (German) it would correspond to \"Wahr\" etc.\
      \ The best (and most secure) way is to use byte typecasting.\n\n===Name...===\n\
      \n====to String====\n\nThe ''name'' is converted to the string used in the source\
      \ code. Since names are not case-sensitive the first appearance of the name\
      \ within the complete source is used. ''(This might be an answer to the question\
      \ why the name of the [[Legacy:LocationID|LocationID]] actor is completely lowercase\
      \ while its script says \"LocationID\".)''\n\n===Object...===\n\n\"Object\"\
      \ can be any [[Legacy:Actor|Actor]], [[Legacy:Object|Object]], class, [[Legacy:Texture|Texture]],\
      \ mesh, [[Legacy:Sound|Sound]], etc.\n\n====to String====\n\nFor classes, textures,\
      \ meshes, sounds and some other objects the string usually looks like \"Package.ObjectName\"\
      . Actors are usually represented by \"MapName.ActorClass''<number>''\", but\
      \ in [[Legacy:UT2003|UT2003]] objects created at runtime (i.e. not in the editor)\
      \ don't get a number added to their name by default. In general objects are\
      \ represented as \"RootObject.FirstChild.''(...)''.ThisObject\". Examples for\
      \ this are UWindow objects in UT and objects embedded in the default properties\
      \ of UT2003 classes. For some objects (like [[Legacy:Commandlet|Commandlet]]s\
      \ or the UWindow objects) ''RootObject'' is \"Transient\" in UT and \"Package\"\
      \ in UT2003.\n\n====to Boolean ====\n\nThe boolean will be ''False'' if the\
      \ object, class, etc. is ''None'' and ''True'' otherwise.\n\n===Struct... ===\n\
      \n'''Note:''' Vectors and rotators are structs, too.\n\n====to String ====\n\
      \nEvery part of the struct is converted separately and all values are separated\
      \ by commas. This might only work for certain [[Legacy:Built-In Struct|Built-In\
      \ Struct]].\n\n====to Boolean ====\n\nResults in ''False'' if all parts of the\
      \ struct are null values, i.e. ''0'', empty strings or ''None''. Anything else\
      \ results in ''True''.\n\n===String... ===\n\n====to Byte/Int ====\n\nThe string\
      \ has to start with a number which must not be negative for ''byte''. The string\
      \ is cut off at the first non-numerical character. Any other string results\
      \ in 0.\n\n====to Float ====\n\nSimilar to integer conversion, but the value\
      \ can use a much more complex format. \"-12.3e-2\" will be converted to -1.23,\
      \ \"1e4\" is 10000 and \"12.3\" is (guess what) 12.3.\n\n====to Boolean ====\n\
      \nThe conversion returns ''True'' if the string starts either with the characters\
      \ \"true\" (not case-sensitive) or results in a non-zero number (see string\
      \ to integer/float above). It returns ''False'' in all other cases.\n\n====to\
      \ Struct ====\n\nThe components of the struct have to be in the same order the\
      \ struct -> string cast uses and also have to be separated by commas. All components\
      \ that are not present in the string are set to 0, ''False'', empty strings,\
      \ etc. This might only work for certain [[Legacy:Built-In Struct|Built-In Struct]].\n\
      \n====to Name ====\n\nNames refuse to be set with expressions or from string\
      \ variables. They only like something like this:\n\n<uscript>\nMyName = 'thisStringIsHardcoded';\
      \          // This works.\nSetPropertyText(\"MyName\", MyStringValue);  // Workaround,\
      \ see below\n</uscript>\n\nThe workaround by using SetPropertyText to assign\
      \ a calculated value to a name variable works reasonably well, but there's a\
      \ reason to the fact that it's not possible to directly assign strings to names.\
      \  Doing so creates a new name table entry which isn't communicated to remote\
      \ machines in network games, which can in turn lead to many sorts of ugly inconsistency\
      \ problems if it's involved in replication.\n\n====to Object ====\n\nStrings\
      \ can't be casted to objects directly. Instead use the [[Legacy:DynamicLoadObject|DynamicLoadObject]]\
      \ method to load the specified object and then cast it to the desired class.\n\
      \n<uscript>\nlocal class<Actor> ActorType;\nlocal Actor A;\n\nActorType = class<Actor>(DynamicLoadObject(\"\
      MyPackage.MyActorClass\", class'Class'));\nA = Spawn(ActorType);\n</uscript>\n\
      \n<uscript>\nlocal class<UWindowList> ListType;\nlocal UWindowList L;\n\nListType\
      \ = class<UWindowList>(DynamicLoadObject(\"MyPackage.MyList\", class'Class'));\n\
      L = New ListType;\n</uscript>\n\n<uscript>\nlocal Texture T;\n\nT = Texture(DynamicLoadObject(\"\
      MyPackage.MyTexture\", class'Texture'));\n</uscript>\n\n'''Dimension4:''' You\
      \ can load objects from maps too! Example: <uscript>IterLI=LevelInfo(DynamicLoadObject(IteratedMap$\"\
      .LevelInfo0\", class'Actor'));</uscript>\n\n===Vector... ===\n\n====to Rotator\
      \ ====\n\nVectors and Rotators can automatically be casted to each other. Vector\
      \ -> Rotator returns a rotator with the roll component set to 0, while Rotator\
      \ -> Vector returns a vector with length 1.\n\nSee [[Legacy:Rotator|rotator]]\
      \ for more.\n\n===Rotator... ===\n\n====to Vector ====\n\nRotators represent\
      \ three angles of rotation. A rotator in itself does not necessarily represent\
      \ a direction until it is used in conjunction with a vector. For instance, a\
      \ Yaw += 16384 will rotate an arbitrary vector 90 degrees but if you do not\
      \ know the direction of the arbitrary vector, you cannot say what the direction\
      \ of the new rotated vector is. The best you can say is that the new vector\
      \ is 90 degrees rotated.\n\nHowever, the vector(rotator) typecast returns a\
      \ vector given only a rotator (without any other explicit vector information).\
      \ It is assumed that the source vector is vect(1,0,0) so that the returned value\
      \ is a vector rotated from vect(1,0,0). This makes sense since vect(1,0,0) is\
      \ the vector used to represent the forward direction.\n\nExamples:\n\n{| class=\"\
      wikitable\"\n\n|-\n| colspan=\"3\" style=\"text-align: center\" |'''Rotator'''\n\
      |->\n| colspan=\"3\" style=\"text-align: center\" |'''Vector'''\n|-\n| style=\"\
      text-align: center\" |'''Pitch'''\n| style=\"text-align: center\" |'''Yaw'''\n\
      | style=\"text-align: center\" |'''Roll'''\n|->\n| style=\"text-align: center\"\
      \ |'''X'''\n| style=\"text-align: center\" |'''Y'''\n| style=\"text-align: center\"\
      \ |'''Z'''\n|-\n| style=\"text-align: right\" |0\n| style=\"text-align: right\"\
      \ |0\n| style=\"text-align: right\" |any\n|->\n| style=\"text-align: right\"\
      \ |1\n| style=\"text-align: right\" |0\n| style=\"text-align: right\" |0\n|-\n\
      | style=\"text-align: right\" |0\n| style=\"text-align: right\" |-32768\n| style=\"\
      text-align: right\" |any\n|->\n| style=\"text-align: right\" |-1\n| style=\"\
      text-align: right\" |0\n| style=\"text-align: right\" |0\n|-\n| style=\"text-align:\
      \ right\" |0\n| style=\"text-align: right\" |16384\n| style=\"text-align: right\"\
      \ |any\n|->\n| style=\"text-align: right\" |0\n| style=\"text-align: right\"\
      \ |1\n| style=\"text-align: right\" |0\n|-\n| style=\"text-align: right\" |0\n\
      | style=\"text-align: right\" |-16384\n| style=\"text-align: right\" |any\n\
      |->\n| style=\"text-align: right\" |0\n| style=\"text-align: right\" |-1\n|\
      \ style=\"text-align: right\" |0\n|-\n| style=\"text-align: right\" |16384\n\
      | style=\"text-align: right\" |any\n| style=\"text-align: right\" |any\n|->\n\
      | style=\"text-align: right\" |0\n| style=\"text-align: right\" |0\n| style=\"\
      text-align: right\" |1\n|-\n| style=\"text-align: right\" |49151\n| style=\"\
      text-align: right\" |any\n| style=\"text-align: right\" |any\n|->\n| style=\"\
      text-align: right\" |0\n| style=\"text-align: right\" |0\n| style=\"text-align:\
      \ right\" |-1\n|}\n\nSee [[Legacy:Rotator|rotator]] for more.\n\n==Related Topics\
      \ ==\n* [[Legacy:UnrealScript|UnrealScript]] topic page\n* [[Legacy:Variable\
      \ Type|Variable Type]]\n* [[Legacy:Function Syntax|Function Syntax]]"
  properties: []
  revId: 46237
name: "Legacy:Typecasting"
revision:
  revid: 46237
  parentid: 34459
  user: "207.47.206.75"
  timestamp: 1445042063.000000000
  comment: "Renamed code segments that erroneously led uscript parser into printing\
    \ \"< SEMI >\" in place of semicolons."
timestamp: 1668763383.137082000
