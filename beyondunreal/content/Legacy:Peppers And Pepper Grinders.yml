---
parse:
  title: "Legacy:Peppers And Pepper Grinders"
  text:
    text: "<blockquote class=\"legacyquote\">\n<p>To give a really shaky analogy,\
      \ a class is like a pepper grinder, and an object is like pepper. You can use\
      \ the pepper grinder (the class) to create pepper (objects of that class) by\
      \ turning the crank (calling the Spawn function)... but, a pepper grinder (a\
      \ class) is not pepper (an object belonging to the class), so you must not try\
      \ to eat it! – Tim Sweeney in the <a href=\"/Legacy:UnrealScript_Language_Reference/Variables\"\
      \ title=\"Legacy:UnrealScript Language Reference/Variables\">UnrealScript Language\
      \ Reference</a></p>\n</blockquote>\n<p><a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a>'s <a href=\"/Legacy:Variable_Syntax\"\
      \ title=\"Legacy:Variable Syntax\">Variable Syntax</a> lets you define variables\
      \ to hold numbers, strings, vectors and so on. It also lets you define variables\
      \ that \"point to\" objects and classes. At this point, like Tim Sweeney says,\
      \ it's important not to get confused between the two.</p>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#Referring_to_an_object\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Referring to an object</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Referring_to_a_class\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Referring to a class</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Referring_to_a_resource\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Referring to a resource</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Useful_functions\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Useful functions</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Referring_to_an_object\"\
      >Referring to an object</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=1\"\
      \ title=\"Edit section: Referring to an object\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>You're probably comfortable with the idea of giving\
      \ a <a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable Type\">variable\
      \ type</a>, like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw5\">float</span> theNumber;</pre></div>\n</div>\n\
      <p>That just says theNumber is a variable that holds a number. But you can also\
      \ do things like:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">var</span> <span class=\"kw9\">Actor</span> theThing;</pre></div>\n</div>\n\
      <p>This variable is an actor. Now comes the tricky part: it might be a specific\
      \ actor that exists in the game, or it might not. One specific actor in the\
      \ game can have lots of variables that indicate it – this is no different from\
      \ having many float variables all set to '3', if you think about it.</p>\n<p>For\
      \ a specific actor, you might have something like this:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// from UT2003's Actor:</span>\n<span\
      \ class=\"kw1\">event</span> <span class=\"kw4\">ZoneChange</span><span class=\"\
      br0\">(</span> ZoneInfo NewZone <span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The NewZone variable is of class ZoneInfo – it <i>is</i> a ZoneInfo,\
      \ and you can expect to access any ZoneInfo properties by saying NewZone.property.\
      \ It's a specific ZoneInfo in the current game, namely, the one that the actor\
      \ has just entered.</p>\n<p>On the other hand, when using <a href=\"/Legacy:Iterator\"\
      \ title=\"Legacy:Iterator\">Iterators</a>, this construction is common:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">PostBeginPlay</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\"\
      >local</span> <span class=\"kw9\">Pawn</span> OnlyThisPawn;\n \n    <span class=\"\
      kw2\">foreach</span> <span class=\"kw2\">AllActors</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Pawn'</span>,\
      \ OnlyThisPawn<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \        <span class=\"kw2\">break</span>;\n    <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>The variable OnlyThisPawn\
      \ is a Pawn. When we declare it, is doesn't actually hold anything – it doesn't\
      \ point to a real Pawn in the game. But within the foreach loop, we'll be successively\
      \ making it point to actual Pawns in the game. This is no different to setting\
      \ a numerical variable to many different values. Of course, when you set theNumber\
      \ to 387, you can't do much with that apart from know that it's 387. But when\
      \ OnlyThisPawn points to a particular pawn in the game, you can then access\
      \ that particular pawn's properties and methods.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Referring_to_a_class\">Referring to a class</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=2\"\
      \ title=\"Edit section: Referring to a class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// from UT2003's Actor:</span>\n<span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span> <span class=\"\
      kw5\">int</span> Damage, <span class=\"kw9\">Pawn</span> EventInstigator, <span\
      \ class=\"kw5\">vector</span> HitLocation, <span class=\"kw5\">vector</span>\
      \ Momentum, \n  class<span class=\"sy0\">&lt;</span>DamageType<span class=\"\
      sy0\">&gt;</span> <span class=\"kw9\">DamageType</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>The last variable, DamageType is a class variable. Because the word\
      \ \"DamageType\" is used twice, this is going to get confusing, so let's alter\
      \ this slightly:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">// from UT2003's Actor:</span>\n<span class=\"kw1\">event</span> <span\
      \ class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span> class<span class=\"\
      sy0\">&lt;</span>DamageType<span class=\"sy0\">&gt;</span> Ouch<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>Now Ouch is a variable that indicates\
      \ a class. The &lt;DamageType&gt; part is a \"limiter\": it tells us that Ouch\
      \ must be a DamageType, or a subclass of DamageType.</p>\n<p>But the variable\
      \ Ouch is still empty. How might we put an actual class in there?</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> class<span\
      \ class=\"sy0\">&lt;</span>DamageType<span class=\"sy0\">&gt;</span> Ouch;\n\
      Ouch <span class=\"sy0\">=</span> <span class=\"kw1\">class</span><span class=\"\
      st0\">'BiteMe'</span>;</pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Referring_to_a_resource\">Referring to a resource</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=3\"\
      \ title=\"Edit section: Referring to a resource\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw5\">Sound</span><span class=\"st0\">'WeaponSounds.LinkGun.SwitchToLinkGun'</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Useful_functions\">Useful functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=4\" title=\"Edit section:\
      \ Useful functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>See <a href=\"/Legacy:Global_Function\" title=\"Legacy:Global Function\"\
      >Global Functions</a>:</p>\n<ul>\n<li>IsA</li>\n<li>ClassIsChildOf</li>\n</ul>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=5\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Object_Oriented_Programming_Overview\" title=\"\
      Legacy:Object Oriented Programming Overview\">Object Oriented Programming Overview</a></li>\n\
      <li><a href=\"/Legacy:Typecasting\" title=\"Legacy:Typecasting\">Typecasting</a></li>\n\
      <li><a href=\"/Legacy:Variable_Type\" title=\"Legacy:Variable Type\">Variable\
      \ Type</a></li>\n<li><a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\"\
      >Class Syntax</a></li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\"\
      >Discussion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Peppers_And_Pepper_Grinders?section=6\" title=\"\
      Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>SuperApe:</b> Part of the <i>restaurant</i> or <i>food prep</i> family\
      \ of beginning UScript pages.&#160;:) Needs linkages from relevant hubs for\
      \ more use.</p>\n<p><b>T-1:</b> This probably needs a merge with <a href=\"\
      /Legacy:Object_Oriented_Programming_Overview\" title=\"Legacy:Object Oriented\
      \ Programming Overview\">Object Oriented Programming Overview</a></p>\n\n<!--\
      \ \nNewPP limit report\nCPU time usage: 0.155 seconds\nReal time usage: 0.158\
      \ seconds\nPreprocessor visited node count: 106/1000000\nPreprocessor generated\
      \ node count: 249/1000000\nPost‐expand include size: 1043/2097152 bytes\nTemplate\
      \ argument size: 460/2097152 bytes\nHighest expansion depth: 3/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    5.235      1 - -total\n100.00%    5.235\
      \      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2503-0!*!0!!en!*!*\
      \ and timestamp 20221118130409 and revision id 44436\n -->\n"
  categories:
  - sortkey: "Peppers And Pepper Grinders"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Variables"
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Variable Type"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Referring to an object"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 790
    anchor: "Referring_to_an_object"
  - toclevel: 1
    level: "2"
    line: "Referring to a class"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 2598
    anchor: "Referring_to_a_class"
  - toclevel: 1
    level: "2"
    line: "Referring to a resource"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 3354
    anchor: "Referring_to_a_resource"
  - toclevel: 1
    level: "2"
    line: "Useful functions"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 3449
    anchor: "Useful_functions"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 3544
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "6"
    index: "6"
    fromtitle: "Legacy:Peppers_And_Pepper_Grinders"
    byteoffset: 3768
    anchor: "Discussion"
  displaytitle: "Legacy:Peppers And Pepper Grinders"
  iwlinks: []
  wikitext:
    text: "{{innerbox| To give a really shaky analogy, a class is like a pepper grinder,\
      \ and an object is like pepper. You can use the pepper grinder (the class) to\
      \ create pepper (objects of that class) by turning the crank (calling the Spawn\
      \ function)... but, a pepper grinder (a class) is not pepper (an object belonging\
      \ to the class), so you must not try to eat it! &ndash; Tim Sweeney in the [[Legacy:UnrealScript\
      \ Language Reference/Variables|UnrealScript Language Reference]]\n\n}}\n\n[[Legacy:UnrealScript|UnrealScript]]'s\
      \ [[Legacy:Variable Syntax|Variable Syntax]] lets you define variables to hold\
      \ numbers, strings, vectors and so on. It also lets you define variables that\
      \ \"point to\" objects and classes. At this point, like Tim Sweeney says, it's\
      \ important not to get confused between the two.\n\n==Referring to an object\
      \ ==\n\nYou're probably comfortable with the idea of giving a [[Legacy:Variable\
      \ Type|variable type]], like this:\n\n<uscript>\nvar float theNumber;\n</uscript>\n\
      \nThat just says theNumber is a variable that holds a number. But you can also\
      \ do things like:\n\n<uscript>\nvar Actor theThing;\n</uscript>\n\nThis variable\
      \ is an actor. Now comes the tricky part: it might be a specific actor that\
      \ exists in the game, or it might not. One specific actor in the game can have\
      \ lots of variables that indicate it &ndash; this is no different from having\
      \ many float variables all set to '3', if you think about it.\n\nFor a specific\
      \ actor, you might have something like this:\n\n<uscript>\n// from UT2003's\
      \ Actor:\nevent ZoneChange( ZoneInfo NewZone );\n</uscript>\n\nThe NewZone variable\
      \ is of class ZoneInfo &ndash; it ''is'' a ZoneInfo, and you can expect to access\
      \ any ZoneInfo properties by saying NewZone.property. It's a specific ZoneInfo\
      \  in the current game, namely, the one that the actor has just entered.\n\n\
      On the other hand, when using [[Legacy:Iterator|Iterator]]s, this construction\
      \ is common:\n\n<uscript>\nfunction PostBeginPlay()\n{\n    local Pawn OnlyThisPawn;\n\
      \n    foreach AllActors(class'Pawn', OnlyThisPawn)\n    {\n        break;\n\
      \    }\n}\n</uscript>\n\nThe variable OnlyThisPawn is a Pawn. When we declare\
      \ it, is doesn't actually hold anything &ndash; it doesn't point to a real Pawn\
      \ in the game. But within the foreach loop, we'll be successively making it\
      \ point to actual Pawns in the game. This is no different to setting a numerical\
      \ variable to many different values. Of course, when you set theNumber to 387,\
      \ you can't do much with that apart from know that it's 387. But when OnlyThisPawn\
      \ points to a particular pawn in the game, you can then access that particular\
      \ pawn's properties and methods.\n\n==Referring to a class==\n\n<uscript>\n\
      // from UT2003's Actor:\nevent TakeDamage( int Damage, Pawn EventInstigator,\
      \ vector HitLocation, vector Momentum, \n  class<DamageType> DamageType);\n\
      </uscript>\n\nThe last variable, DamageType is a class variable. Because the\
      \ word \"DamageType\" is used twice, this is going to get confusing, so let's\
      \ alter this slightly:\n\n<uscript>\n// from UT2003's Actor:\nevent TakeDamage(\
      \ class<DamageType> Ouch);\n</uscript>\n\nNow Ouch is a variable that indicates\
      \ a class. The <DamageType> part is a \"limiter\": it tells us that Ouch must\
      \ be a DamageType, or a subclass of DamageType.\n\nBut the variable Ouch is\
      \ still empty. How might we put an actual class in there?\n\n<uscript>\nvar\
      \ class<DamageType> Ouch;\nOuch = class'BiteMe';\n</uscript>\n\n==Referring\
      \ to a resource==\n\n<uscript>\nSound'WeaponSounds.LinkGun.SwitchToLinkGun'\n\
      </uscript>\n\n==Useful functions==\n\nSee [[Legacy:Global Function|Global Function]]s:\n\
      * IsA\n* ClassIsChildOf\n\n==Related Topics==\n* [[Legacy:Object Oriented Programming\
      \ Overview|Object Oriented Programming Overview]]\n* [[Legacy:Typecasting|Typecasting]]\n\
      * [[Legacy:Variable Type|Variable Type]]\n* [[Legacy:Class Syntax|Class Syntax]]\n\
      \n==Discussion==\n\n'''SuperApe:''' Part of the ''restaurant'' or ''food prep''\
      \ family of beginning UScript pages. :)  Needs linkages from relevant hubs for\
      \ more use.\n\n'''T-1:''' This probably needs a merge with [[Legacy:Object Oriented\
      \ Programming Overview|Object Oriented Programming Overview]]\n\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 44436
name: "Legacy:Peppers And Pepper Grinders"
revision:
  revid: 44436
  parentid: 44435
  user: "Wormbo"
  timestamp: 1305568503.000000000
  comment: "Reverted edits by [[Special:Contributions/82.114.82.198|82.114.82.198]]\
    \ ([[User talk:82.114.82.198|Talk]]) to last revision by [[User:T1|T1]]"
timestamp: 1668776649.775426000
