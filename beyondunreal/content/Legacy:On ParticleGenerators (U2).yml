---
parse:
  title: "Legacy:On ParticleGenerators (U2)"
  text:
    text: "<p>This page concerns <a href=\"/Legacy:Particle_System\" title=\"Legacy:Particle\
      \ System\">Particle Systems</a> in <a href=\"/Legacy:Unreal_2\" title=\"Legacy:Unreal\
      \ 2\">Unreal 2</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"\
      toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"\
      ><a href=\"#SCOTT_DALTON.27S_Basic_Particle_Generator_Tutorial\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">SCOTT DALTON'S Basic Particle Generator\
      \ Tutorial</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #Example\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Example</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#AARON_LEIBY.27S_Quick_Rundown_of_Particle_Templates_in_Unreal2\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">AARON LEIBY'S Quick\
      \ Rundown of Particle Templates in Unreal2</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#Discussion\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"SCOTT_DALTON.27S_Basic_Particle_Generator_Tutorial\"\
      >SCOTT DALTON'S Basic Particle Generator Tutorial</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:On_ParticleGenerators_(U2)?section=1\"\
      \ title=\"Edit section: SCOTT DALTON'S Basic Particle Generator Tutorial\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>While I haven't\
      \ had time to write up a full tutorial for particles, I thought I'd take a moment\
      \ to describe some of the basics of particle generators in Unreal 2. Particle\
      \ Salamanders and Particle Radiators are powerful tools and can be used for\
      \ a variety of effects and functions within the game. We've only scratched the\
      \ surface of the possibilities with the effects in Unreal 2.</p>\n<p>The particle\
      \ setup within UnrealEd is all controlled through editing properties. We chose\
      \ to put our time into functionality rather than making it pretty, so there\
      \ is very little idiot proofing in the system. What this means is when you're\
      \ first learning your way around - save often when working with particles. Certain\
      \ actions you may take may not be compatible, so things may crash if you do\
      \ something \"bad\".</p>\n<p>You'll quickly learn what can be used with what,\
      \ and I'll give a brief list of what can and can't be used. The system has been\
      \ in place for a number of years and there are a few legacy components in there\
      \ which no longer are terribly useful.</p>\n<p>Okay, so now that I've got that\
      \ disclaimer out of the way, on to making cool stuff. Once you've learned a\
      \ few of the basics, you can edit existing systems to get the effects you want\
      \ or whip up your own effects from scratch.</p>\n<p>First a few basics&#160;:</p>\n\
      <dl>\n<dt>Particle Salamanders&#160;</dt>\n<dd>these generators emit in a cone\
      \ that can be specified up to a full sphere (360 degrees).</dd>\n</dl>\n<dl>\n\
      <dt>Particle Radiators&#160;</dt>\n<dd>these generators emit from the surface\
      \ of a <a href=\"/Legacy:Golem\" title=\"Legacy:Golem\">Golem</a> mesh. They\
      \ can emit randomly, linearly, or from a certain index of triangles on the mesh\
      \ and can come out from the center of the triangle or a random position on the\
      \ triangle.</dd>\n</dl>\n<p>The Unreal 2 particle system works by combining\
      \ Templates (basic particle types) with Forces (things that control what the\
      \ particles do). You can have any number of templates within a single system,\
      \ and any number of forces affecting those templates. This allows you to stack\
      \ as many parts to a system as you need within a single generator.</p>\n<dl>\n\
      <dt>Templates&#160;</dt>\n<dd>templates are a basic particle type. The most\
      \ common are rotating particles (a sprite with a controllable rotation), textured\
      \ streaks (a ribbon type of particle with a texture applied along its length),\
      \ View Velocity Particles (a single quad particle that stretches depending on\
      \ its velocity relative to the players view), and particle decals (a flat plane\
      \ particle, often used for decals where it derives its name). There are many\
      \ other types of particles, but these are the basic types used for many effects.</dd>\n\
      </dl>\n<dl>\n<dt>Forces&#160;</dt>\n<dd>forces control what a particle does.\
      \ Forces can be just about anything from a resize force, to gravity, friction,\
      \ collision, damage, color, rotation, fade, etc. Many forces have a \"phase.\"\
      \ The phase determines how many times it moves back and forth within a particles\
      \ lifespan. For example you can resize a particle to make it grow. With a phase\
      \ of one it will always grow. With a phase of two it will grow until half of\
      \ its life is over then begin to shrink at the same rate. A phase of three will\
      \ make it grow, then shrink, then grow again, etc. Multiple forces of the same\
      \ type can be applied to a template to achieve interesting effects, especially\
      \ when combined with each using different phases.</dd>\n</dl>\n<dl>\n<dt>Ranges&#160;</dt>\n\
      <dd>almost every variable within the particle system allows for a range. This\
      \ means that when determining how something will behave, it will randomly choose\
      \ a number in the range between what you supply it with. For example a particle\
      \ can have a lifespan range of 1 and 5 seconds. Any variable that allows for\
      \ ranges will have an A and B component. There is no Max and Min, it is simply\
      \ a number between the two values, so it makes no difference which is which.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Example\">Example</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:On_ParticleGenerators_(U2)?section=2\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Okay - now jumping into our first particle. Go to\
      \ <a href=\"/Legacy:UnrealEd\" title=\"Legacy:UnrealEd\" class=\"mw-redirect\"\
      >UnrealEd</a> and call up a level or COD (Cube Of Death - empty cube). Right\
      \ click in the world and select the \"add particlesalamander\" option. You'll\
      \ see the icon for the <a href=\"/edit/Legacy:ParticleSalamander?redlink=1\"\
      \ class=\"new\" title=\"Legacy:ParticleSalamander (page does not exist)\">ParticleSalamander</a>\
      \ appear. Right click on it and bring up its properties.</p>\n<p>First go to\
      \ ParticleSalamander tab. You'll note the Spread defaults to zero. This means\
      \ that particles will fire out in a straight line from the direction the arrow\
      \ is pointing. Lets make them shoot at a 30 degree arc, so change that number\
      \ to 30. Now we don't have any particles yet, but you'll also notice a volume\
      \ here. Volume is the number of particles spawned per second. Let's set that\
      \ to 25 to start.</p>\n<p>Now click on the ParticleGenerator Tab. You'll notice\
      \ that there are forces and particletemplates. Click on the '...' to the right\
      \ of ParticleTemplates. A dropdown box will appear, underwhich you can select\
      \ a template type. Open the dropdown and select Rotating Particle Template.\
      \ This will add a rotating particle template to your template list. Click to\
      \ the left of the Rotating Particle template box. You'll see three boxes pop\
      \ up Edit, Duplicate, and Delete. These may cover up the in-line editing + box,\
      \ in which can you can simply slide the divider bar to the right. Now either\
      \ click on the Edit button (which will bring up a seperate window) or click\
      \ on the + box (which will in-line the properties into the same window.</p>\n\
      <p>You'll see a variety of possibilties here, but first things first, we want\
      \ to supply it with a texture so we can see the sprite. Open up the texture\
      \ browser, select the SpecialFX package, and go to the Glows group. Here, select\
      \ flare_01.</p>\n<p>Now open the Rotating Particle Template tab for the template\
      \ you just added. Click on the field for sprite and hit \"Use\" to set your\
      \ previously selected texture onto your template.</p>\n<p>Now click on the Rotating\
      \ Particles tab and you'll see a range for the Initial Rotation. We'll want\
      \ our flare to be able to start at any rotation, so we'll set A to 0 and B to\
      \ 360. Now if you go to your 3D window and enable realtime mode (click on the\
      \ joystick or hit P), you'll see the beginnings of our system - a glowing orb.</p>\n\
      <p>Particles are blinking on and off rather jarringly so far, so let's make\
      \ them fade in and out. For this example let's have them rapidly fade in and\
      \ slowly fade away. For this, we'll need to add some forces to our system. Click\
      \ on the rotating particles name (RotatingParticleTemplate'MyLevel.ParticleSalamander0.RotatingParticleTemplate0').\
      \ You'll see a list a dropdown box appear - this allows you to add a force to\
      \ this particular particle template. Drop down the box and select FadeInForce.</p>\n\
      <p>You'll see a window pop up. Click on the FadeInForce tab. By default, the\
      \ range is set to one second. Change the range to be between .1 and .2 seconds.\
      \ Close the window and go back to your 3D view in realtime. You'll see the flares\
      \ are now fading in, but still blinking out. We want them to slowly fade out,\
      \ so go click on the template again and this time add a fadeout force.</p>\n\
      <p>Let's set the range on the Fadeout Force to be between .4 and .7. Now close\
      \ the window and you'll see our orb taking on more of a gentle pulsing in appearance.\
      \ However, it doesn't really have quite the right look yet. Let's make it appear\
      \ to be pulsing outward by having each particle start small and grow. So let's\
      \ return to the templates properties and find the SpriteParticleTemplate -&gt;\
      \ Initial Size range. Let's set that to .1 and .2.</p>\n<p>Now we'll add a resize\
      \ force to make it grow. Repeat the force adding steps above, but select a resize\
      \ force. Set the range to be .6 and .75 and return to the 3d view. Ah, much\
      \ better outwards pulsation.</p>\n<p>Now let's give them a bit of rotation,\
      \ so go and add a RotationForce to the template (Note&#160;: unfortunately Rotation\
      \ force -only- works on rotating particles. Trying to add it to other template\
      \ types may cause problems). Let's go for a subtle rotation here, so set the\
      \ range to 50 and -50 to make them move between 50 degrees clockwise and 50\
      \ degrees counter clockwise over a second.</p>\n<p>Now would be a good time\
      \ to save.</p>\n<p>Okay, so we've got a basic effect going, now let's spiff\
      \ it up a bit with some textured streaks. Click to the right of the ParticleTemplates\
      \ tab again and bring up the drop-down box. Select the TexturedStreak template\
      \ type. You'll see it appear below your rotating particle template in the list.</p>\n\
      <p>Open up its properties. Textured streaks come with a default texture assigned,\
      \ so for now we'll leave that. Let's instead go to its ParticleTemplate Tab\
      \ (This tab is under all particle types, so what you use here can be applied\
      \ elsewhere). Let's open up the InitialSpeed range and set it between 100 and\
      \ 400.</p>\n<p>Looking back at our 3D window, you'll see streaks shooting out\
      \ of the system, in a 30 degree cone. Let's up the cone to 360 so we can see\
      \ the streaks fly out in every direction. Better, but we can do some more to\
      \ make it interesting. Let's give this textured streak some gravity. For this\
      \ we can use a variety of forces such as a global accelerator (which allows\
      \ for X, Y or Z acceleration) or perhaps a per-particle gravity force (which\
      \ allows a range of per-particle gravity). Let's use a PerParticleGravity here.\
      \ Select the TexturedStreak name to open its force drop-down box and select\
      \ the PerParticleGravity Force. Let's set the range to be 700-1200 for now.\
      \ Now let's give it some collision, but first we should save.</p>\n<p>Add a\
      \ GeometryCollider force to your textured streak. If your particle salamander\
      \ is near a wall or floor, you'll see the streaks begin to bounce around. Geometry\
      \ colliders have a lot of fun properties you can play with. You can give them\
      \ a range of bounciness (Elasticity), make them stop on contact, make the bounce\
      \ angle random (bDiffuse), delete the particles on contact, make the particles\
      \ play a sound when they hit, make them spawn new particle templates (Impact\
      \ Effects), collide with actors, or only apply the above factors at certain\
      \ angles (MinIncidence).</p>\n<p>Let's make our streaks leave a little mark\
      \ every time they hit a surface, so click to the right of ImpactEffects in the\
      \ geometry collider. Note - if you try to do this from within the Inline editing\
      \ properties, it will crash (this is a known bug with the inline code - sorry!).\
      \ So be sure to be working in a seperate window when you add this new template\
      \ (do this by clicking on the force's edit button rather than the inline + box).\
      \ Let's select a ParticleDecal from the list of templates so we can leave a\
      \ decal behind.</p>\n<p>Okay, for our little decals, lets select the lensflare7a1_tw128\
      \ in the glows catagory of the SpecialFX texture package. Like most particle\
      \ templates, the texture goes under the SpriteParticleTemplate tab of the ParticleDecalTemplate.\
      \ They're going to be a bit big to start, so let'set their size. Decals are\
      \ in absolute world size, so lets make ours 3 to 4 units in size.</p>\n<p>We\
      \ want them to last longer than their default 1 second, so lets go to the ParticleTemplate\
      \ section and set their InitialLifeSpan to 10-15 seconds. To make them fade\
      \ out, repeat the fadeout force adding steps above, but give it a much higher\
      \ time, say 9 or 10 seconds. Let's also make them grow slightly as they fade\
      \ out so also give the decals a resize force of about 1.</p>\n<p>Now our streaks\
      \ are leaving little blue puddles of color behind that melt away. Let's save\
      \ it before we continue. How about we make it a bit more dangerous? Let's add\
      \ a particle damage force to the textured streak. We can leave it weak for now.\
      \ Under the particle damage force you'll notice momentum settings. These can\
      \ be used to knock around damaged characters. Note that Unreal's momentum settings\
      \ tend to have to be quite high, so you'll usually have to set a number in the\
      \ thousands to achieve the effect you want. You'll also notice a damagetype\
      \ setting. This is used for all the various kinds of damage in the game. Let's\
      \ make these guys light people on fire when they hit them - so set the damage\
      \ type to be Thermal.</p>\n<p>You may notice that the streaks some times make\
      \ it outside the world and fall away, leaving decals as they go. Some times\
      \ due to the physics, a particle can make it through a wall completely before\
      \ it registers that it has hit the surface. In this case we simply wish to remove\
      \ the particle from existance. To do this, add a VoidDestroyer force to the\
      \ textured streak. This simply prevents any unnecessary overhead.</p>\n<p>Okay,\
      \ so now let's test the fruits of our labor. Save the map and fire it up. You'll\
      \ see that as you touch the streaks in game they cause you to take damage as\
      \ well as light on fire. You'll notice that the particles don't bounce off of\
      \ you or get destroyed when they hit you. These are options you can of course\
      \ change (for actor collision set bCollideActors under the GeometryCollider\
      \ force, for having the particles be destroyed when they hit someone, which\
      \ is good for bullets and such, set bDeleteOnContact to true under ParticleDamage's\
      \ ActorCollisionNotifier tab)...</p>\n<p>To edit any of the existing forces\
      \ on a template, you can find the forces under the ParticleTemplate -&gt; Affecting\
      \ Forces array. You can also find them under the forces list, which lists all\
      \ forces for all templates, but for complex systems this can get to be a big\
      \ list of forces to find the one you need in.</p>\n<p>I've only scratched the\
      \ surface of what is possible with particles here, but this should at least\
      \ give you an eye into how they work. I hope to have time to do a full blown\
      \ tutorial and reference of particle types, forces, and variables that can be\
      \ used.</p>\n<p>As another note - you can also globally apply forces to all\
      \ current templates by adding them under the forces tab (much like you'd add\
      \ a new template type). This will add the force to all current templates, but\
      \ no templates added after the force was added. You can apply any existing force\
      \ to all existing templates by going to the Forces Force tab and setting bIterateAll\
      \ to true. Generally, the best procedure is to add forces to individual templates\
      \ as you need to. This allows you the most control over the particles themselves\
      \ and generally is not a performance cost.</p>\n<p>When deleting particles,\
      \ you should clean up their forces by first deleting the forces from the forces\
      \ array and then deleting the template itself. This prevents forces from hanging\
      \ around which are no longer effecting any templates.</p>\n<p>More to come.\
      \ This first primer was just to take you through a few of the different template\
      \ and force types with no real end purpose for the system. If people have requests\
      \ for some particular sort of effect, post a suggestion and I'll see what I\
      \ can do to demonstrate the effects and make sample maps available.</p>\n<p>Scott</p>\n\
      <h2><span class=\"mw-headline\" id=\"AARON_LEIBY.27S_Quick_Rundown_of_Particle_Templates_in_Unreal2\"\
      >AARON LEIBY'S Quick Rundown of Particle Templates in Unreal2</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:On_ParticleGenerators_(U2)?section=3\"\
      \ title=\"Edit section: AARON LEIBY'S Quick Rundown of Particle Templates in\
      \ Unreal2\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <dl>\n<dt>ActorParticleTemplate&#160;</dt>\n<dd>no longer works</dd>\n<dt>BendiBeamTemplate&#160;</dt>\n\
      <dd>only used by bendibeams, don't add manually</dd>\n<dt>LineManagerTemplate&#160;</dt>\n\
      <dd>used by linemanager, don't add manually</dd>\n<dt>ParticleDecalTemplate&#160;</dt>\n\
      <dd>a sprite that's oriented to the hit normal rather than facing the screen\
      \ (like what's left behind when you fire the shotgun), though there's other\
      \ cool uses for this too – like the teleporter effect.</dd>\n<dt>PointParticleTemplate&#160;</dt>\n\
      <dd>simple d3d points (like what quake used)</dd>\n<dt>PulseLineTemplate&#160;</dt>\n\
      <dd>used with pulselinegenerator only, don't add manually</dd>\n<dt>RecursiveParticleTemplate&#160;</dt>\n\
      <dd>I don't think this works any longer.</dd>\n<dt>RotatingParticleTemplate&#160;</dt>\n\
      <dd>a 3d sprite that can rotate (a bit slower than sprite3d)</dd>\n<dt>Sprite3DParticleTemplate&#160;</dt>\n\
      <dd>a 3d sprite (or billboard)</dd>\n<dt>SpriteParticleTemplate&#160;</dt>\n\
      <dd>a simple sprite (always the same screen size so it acts like a corona)</dd>\n\
      <dt>StrandParticleTemplate&#160;</dt>\n<dd>for use with BarbieHareDesigner only&#160;:\
      \ I don't think this works any more.</dd>\n<dt>StreakParticleTemplate&#160;</dt>\n\
      <dd>line segments drawn between the last n positions of the particle (basically\
      \ a point particle with history)</dd>\n<dt>TarpBuilderTemplate&#160;</dt>\n\
      <dd>used by tarpbuilder only&#160;: rudamentary cloth engine (I don't think\
      \ this works any more)</dd>\n<dt>TextureStreakParticleTemplate&#160;</dt>\n\
      <dd>What the EnergyRifle primary fire bolts use – basically a textured version\
      \ of the</dd>\n<dt>StreakParticleTemplate (thus its name)</dt>\n<dt>TriParticleTemplate\
      \ / TriangleParticleTemplate&#160;</dt>\n<dd>only one of these works I think.\
      \ It's what the plastic bits when you shot the assault rifle into certain surfaces\
      \ used. It spawns triangular particles – actually sets of three particles that\
      \ are held together by a TriForce (no really) – that way you get per particle\
      \ collision on each corner if used with a GeometryCollider, etc.</dd>\n<dt>ViewVelocityScaledParticleTemplate&#160;</dt>\n\
      <dd>Useful for waterfalls or lock em for lights. A sprite that stretches based\
      \ on its screen velocity. So if you look at a waterfall from the side the individual\
      \ sprites can stretch out, but if you stand in it and look up, then they're\
      \ nice and round (makes em feel real 3d if used correctly).</dd>\n<dt>WetWindshieldParticleTemplate&#160;</dt>\n\
      <dd>sprite that rotates based on view angle – like coronas on streetlamps while\
      \ driving in the rain.</dd>\n</dl>\n<p>Some forces can have their own subtemplates.\
      \ Examples include GeometryColliders (that can spawn more particles - or maybe\
      \ that's OnDestroyForces) and ParticleSalamanderForces (that can leave trails\
      \ of particles behind). This is where your ghost templates come from. They usually\
      \ have a SelectionWeight of 0.0 so they aren't selected by the normal process\
      \ of generated particles. The Force will generally have a drop down box of particle\
      \ templates that you can select from to add the sub templates.</p>\n<p>Aaron</p>\n\
      <h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:On_ParticleGenerators_(U2)?section=4\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Dangler:</b> Since there is virtually nothing on\
      \ this topic for Unreal2 Particle Generators which are a little different</p>\n\
      <p>than UT2k3 Emitters, I've posted what info I have obtained.</p>\n<p>Particle\
      \ Generators in Unreal2 were written by Aaron Leiby as far back as 2000, and\
      \ are the precursor to UT2k3 Particle Emitters.</p>\n<p>With the demise of Legend\
      \ Entertainment, this may be all we get.</p>\n<p><b>Tarquin:</b> Do you have\
      \ permission to include these in the Unreal Wiki?</p>\n<p><b>Dangler:</b> Yes,\
      \ I asked Aaron, this was from a post he answered for me. Thanks for cleaning\
      \ it up:) I didn't know how to add the bold text and whatnot.</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.056 seconds\nReal time usage: 0.057 seconds\n\
      Preprocessor visited node count: 15/1000000\nPreprocessor generated node count:\
      \ 20/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size:\
      \ 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2350-0!*!0!!en!*!* and timestamp 20221118015938 and revision\
      \ id 5657\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: false
    name: "Legacy:ParticleSalamander"
  - ns: 100
    exists: true
    name: "Legacy:Unreal 2"
  - ns: 100
    exists: true
    name: "Legacy:Particle System"
  - ns: 100
    exists: true
    name: "Legacy:Golem"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "SCOTT DALTON'S Basic Particle Generator Tutorial"
    number: "1"
    index: "1"
    fromtitle: "Legacy:On_ParticleGenerators_(U2)"
    byteoffset: 97
    anchor: "SCOTT_DALTON.27S_Basic_Particle_Generator_Tutorial"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:On_ParticleGenerators_(U2)"
    byteoffset: 3882
    anchor: "Example"
  - toclevel: 1
    level: "2"
    line: "AARON LEIBY'S Quick Rundown of Particle Templates in Unreal2"
    number: "2"
    index: "3"
    fromtitle: "Legacy:On_ParticleGenerators_(U2)"
    byteoffset: 14674
    anchor: "AARON_LEIBY.27S_Quick_Rundown_of_Particle_Templates_in_Unreal2"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "4"
    fromtitle: "Legacy:On_ParticleGenerators_(U2)"
    byteoffset: 17470
    anchor: "Discussion"
  displaytitle: "Legacy:On ParticleGenerators (U2)"
  iwlinks: []
  wikitext:
    text: "This page concerns [[Legacy:Particle System|Particle System]]s in [[Legacy:Unreal\
      \ 2|Unreal 2]].\n\n==SCOTT DALTON'S Basic Particle Generator Tutorial==\n\n\
      While I haven't had time to write up a full tutorial for particles, I thought\
      \ I'd take a moment to describe some of the basics of particle generators in\
      \ Unreal 2. Particle Salamanders and Particle Radiators are powerful tools and\
      \ can be used for a variety of effects and functions within the game. We've\
      \ only scratched the surface of the possibilities with the effects in Unreal\
      \ 2. \n\nThe particle setup within UnrealEd is all controlled through editing\
      \ properties. We chose to put our time into functionality rather than making\
      \ it pretty, so there is very little idiot proofing in the system. What this\
      \ means is when you're first learning your way around - save often when working\
      \ with particles. Certain actions you may take may not be compatible, so things\
      \ may crash if you do something \"bad\". \n\nYou'll quickly learn what can be\
      \ used with what, and I'll give a brief list of what can and can't be used.\
      \ The system has been in place for a number of years and there are a few legacy\
      \ components in there which no longer are terribly useful. \n\nOkay, so now\
      \ that I've got that disclaimer out of the way, on to making cool stuff. Once\
      \ you've learned a few of the basics, you can edit existing systems to get the\
      \ effects you want or whip up your own effects from scratch. \n\nFirst a few\
      \ basics : \n\n; Particle Salamanders : these generators emit in a cone that\
      \ can be specified up to a full sphere (360 degrees). \n\n; Particle Radiators\
      \ : these generators emit from the surface of a [[Legacy:Golem|Golem]] mesh.\
      \ They can emit randomly, linearly, or from a certain index of triangles on\
      \ the mesh and can come out from the center of the triangle or a random position\
      \ on the triangle. \n\nThe Unreal 2 particle system works by combining Templates\
      \ (basic particle types) with Forces (things that control what the particles\
      \ do). You can have any number of templates within a single system, and any\
      \ number of forces affecting those templates. This allows you to stack as many\
      \ parts to a system as you need within a single generator. \n\n; Templates :\
      \ templates are a basic particle type. The most common are rotating particles\
      \ (a sprite with a controllable rotation), textured streaks (a ribbon type of\
      \ particle with a texture applied along its length), View Velocity Particles\
      \ (a single quad particle that stretches depending on its velocity relative\
      \ to the players view), and particle decals (a flat plane particle, often used\
      \ for decals where it derives its name). There are many other types of particles,\
      \ but these are the basic types used for many effects. \n\n; Forces : forces\
      \ control what a particle does. Forces can be just about anything from a resize\
      \ force, to gravity, friction, collision, damage, color, rotation, fade, etc.\
      \ Many forces have a \"phase.\" The phase determines how many times it moves\
      \ back and forth within a particles lifespan. For example you can resize a particle\
      \ to make it grow. With a phase of one it will always grow. With a phase of\
      \ two it will grow until half of its life is over then begin to shrink at the\
      \ same rate. A phase of three will make it grow, then shrink, then grow again,\
      \ etc. Multiple forces of the same type can be applied to a template to achieve\
      \ interesting effects, especially when combined with each using different phases.\
      \ \n\n; Ranges : almost every variable within the particle system allows for\
      \ a range. This means that when determining how something will behave, it will\
      \ randomly choose a number in the range between what you supply it with. For\
      \ example a particle can have a lifespan range of 1 and 5 seconds. Any variable\
      \ that allows for ranges will have an A and B component. There is no Max and\
      \ Min, it is simply a number between the two values, so it makes no difference\
      \ which is which. \n\n===Example===\n\nOkay - now jumping into our first particle.\
      \ Go to [[Legacy:UnrealEd|UnrealEd]] and call up a level or COD (Cube Of Death\
      \ - empty cube). Right click in the world and select the \"add particlesalamander\"\
      \ option. You'll see the icon for the [[Legacy:ParticleSalamander|ParticleSalamander]]\
      \ appear. Right click on it and bring up its properties. \n\nFirst go to ParticleSalamander\
      \ tab. You'll note the Spread defaults to zero. This means that particles will\
      \ fire out in a straight line from the direction the arrow is pointing. Lets\
      \ make them shoot at a 30 degree arc, so change that number to 30. Now we don't\
      \ have any particles yet, but you'll also notice a volume here. Volume is the\
      \ number of particles spawned per second. Let's set that to 25 to start. \n\n\
      Now click on the ParticleGenerator Tab. You'll notice that there are forces\
      \ and particletemplates. Click on the '...' to the right of ParticleTemplates.\
      \ A dropdown box will appear, underwhich you can select a template type. Open\
      \ the dropdown and select Rotating Particle Template. This will add a rotating\
      \ particle template to your template list. Click to the left of the Rotating\
      \ Particle template box. You'll see three boxes pop up Edit, Duplicate, and\
      \ Delete. These may cover up the in-line editing + box, in which can you can\
      \ simply slide the divider bar to the right. Now either click on the Edit button\
      \ (which will bring up a seperate window) or click on the + box (which will\
      \ in-line the properties into the same window. \n\nYou'll see a variety of possibilties\
      \ here, but first things first, we want to supply it with a texture so we can\
      \ see the sprite. Open up the texture browser, select the SpecialFX package,\
      \ and go to the Glows group. Here, select flare_01. \n\nNow open the Rotating\
      \ Particle Template tab for the template you just added. Click on the field\
      \ for sprite and hit \"Use\" to set your previously selected texture onto your\
      \ template.\n\nNow click on the Rotating Particles tab and you'll see a range\
      \ for the Initial Rotation. We'll want our flare to be able to start at any\
      \ rotation, so we'll set A to 0 and B to 360. Now if you go to your 3D window\
      \ and enable realtime mode (click on the joystick or hit P), you'll see the\
      \ beginnings of our system - a glowing orb. \n\nParticles are blinking on and\
      \ off rather jarringly so far, so let's make them fade in and out. For this\
      \ example let's have them rapidly fade in and slowly fade away. For this, we'll\
      \ need to add some forces to our system. Click on the rotating particles name\
      \ (RotatingParticleTemplate'MyLevel.ParticleSalamander0.RotatingParticleTemplate0').\
      \ You'll see a list a dropdown box appear - this allows you to add a force to\
      \ this particular particle template. Drop down the box and select FadeInForce.\
      \ \n\nYou'll see a window pop up. Click on the FadeInForce tab. By default,\
      \ the range is set to one second. Change the range to be between .1 and .2 seconds.\
      \ Close the window and go back to your 3D view in realtime. You'll see the flares\
      \ are now fading in, but still blinking out. We want them to slowly fade out,\
      \ so go click on the template again and this time add a fadeout force. \n\n\
      Let's set the range on the Fadeout Force to be between .4 and .7. Now close\
      \ the window and you'll see our orb taking on more of a gentle pulsing in appearance.\
      \ However, it doesn't really have quite the right look yet. Let's make it appear\
      \ to be pulsing outward by having each particle start small and grow. So let's\
      \ return to the templates properties and find the SpriteParticleTemplate ->\
      \ Initial Size range. Let's set that to .1 and .2. \n\nNow we'll add a resize\
      \ force to make it grow. Repeat the force adding steps above, but select a resize\
      \ force. Set the range to be .6 and .75 and return to the 3d view. Ah, much\
      \ better outwards pulsation. \n\nNow let's give them a bit of rotation, so go\
      \ and add a RotationForce to the template (Note : unfortunately Rotation force\
      \ -only- works on rotating particles. Trying to add it to other template types\
      \ may cause problems). Let's go for a subtle rotation here, so set the range\
      \ to 50 and -50 to make them move between 50 degrees clockwise and 50 degrees\
      \ counter clockwise over a second. \n\nNow would be a good time to save. \n\n\
      Okay, so we've got a basic effect going, now let's spiff it up a bit with some\
      \ textured streaks. Click to the right of the ParticleTemplates tab again and\
      \ bring up the drop-down box. Select the TexturedStreak template type. You'll\
      \ see it appear below your rotating particle template in the list. \n\nOpen\
      \ up its properties. Textured streaks come with a default texture assigned,\
      \ so for now we'll leave that. Let's instead go to its ParticleTemplate Tab\
      \ (This tab is under all particle types, so what you use here can be applied\
      \ elsewhere). Let's open up the InitialSpeed range and set it between 100 and\
      \ 400. \n\nLooking back at our 3D window, you'll see streaks shooting out of\
      \ the system, in a 30 degree cone. Let's up the cone to 360 so we can see the\
      \ streaks fly out in every direction. Better, but we can do some more to make\
      \ it interesting. Let's give this textured streak some gravity. For this we\
      \ can use a variety of forces such as a global accelerator (which allows for\
      \ X, Y or Z acceleration) or perhaps a per-particle gravity force (which allows\
      \ a range of per-particle gravity). Let's use a PerParticleGravity here. Select\
      \ the TexturedStreak name to open its force drop-down box and select the PerParticleGravity\
      \ Force. Let's set the range to be 700-1200 for now. Now let's give it some\
      \ collision, but first we should save. \n\nAdd a GeometryCollider force to your\
      \ textured streak. If your particle salamander is near a wall or floor, you'll\
      \ see the streaks begin to bounce around. Geometry colliders have a lot of fun\
      \ properties you can play with. You can give them a range of bounciness (Elasticity),\
      \ make them stop on contact, make the bounce angle random (bDiffuse), delete\
      \ the particles on contact, make the particles play a sound when they hit, make\
      \ them spawn new particle templates (Impact Effects), collide with actors, or\
      \ only apply the above factors at certain angles (MinIncidence). \n\nLet's make\
      \ our streaks leave a little mark every time they hit a surface, so click to\
      \ the right of ImpactEffects in the geometry collider. Note - if you try to\
      \ do this from within the Inline editing properties, it will crash (this is\
      \ a known bug with the inline code - sorry!). So be sure to be working in a\
      \ seperate window when you add this new template (do this by clicking on the\
      \ force's edit button rather than the inline + box). Let's select a ParticleDecal\
      \ from the list of templates so we can leave a decal behind. \n\nOkay, for our\
      \ little decals, lets select the lensflare7a1_tw128 in the glows catagory of\
      \ the SpecialFX texture package. Like most particle templates, the texture goes\
      \ under the SpriteParticleTemplate tab of the ParticleDecalTemplate. They're\
      \ going to be a bit big to start, so let'set their size. Decals are in absolute\
      \ world size, so lets make ours 3 to 4 units in size. \n\nWe want them to last\
      \ longer than their default 1 second, so lets go to the ParticleTemplate section\
      \ and set their InitialLifeSpan to 10-15 seconds. To make them fade out, repeat\
      \ the fadeout force adding steps above, but give it a much higher time, say\
      \ 9 or 10 seconds. Let's also make them grow slightly as they fade out so also\
      \ give the decals a resize force of about 1. \n\nNow our streaks are leaving\
      \ little blue puddles of color behind that melt away. Let's save it before we\
      \ continue. How about we make it a bit more dangerous? Let's add a particle\
      \ damage force to the textured streak. We can leave it weak for now. Under the\
      \ particle damage force you'll notice momentum settings. These can be used to\
      \ knock around damaged characters. Note that Unreal's momentum settings tend\
      \ to have to be quite high, so you'll usually have to set a number in the thousands\
      \ to achieve the effect you want. You'll also notice a damagetype setting. This\
      \ is used for all the various kinds of damage in the game. Let's make these\
      \ guys light people on fire when they hit them - so set the damage type to be\
      \ Thermal. \n\nYou may notice that the streaks some times make it outside the\
      \ world and fall away, leaving decals as they go. Some times due to the physics,\
      \ a particle can make it through a wall completely before it registers that\
      \ it has hit the surface. In this case we simply wish to remove the particle\
      \ from existance. To do this, add a VoidDestroyer force to the textured streak.\
      \ This simply prevents any unnecessary overhead. \n\nOkay, so now let's test\
      \ the fruits of our labor. Save the map and fire it up. You'll see that as you\
      \ touch the streaks in game they cause you to take damage as well as light on\
      \ fire. You'll notice that the particles don't bounce off of you or get destroyed\
      \ when they hit you. These are options you can of course change (for actor collision\
      \ set bCollideActors under the GeometryCollider force, for having the particles\
      \ be destroyed when they hit someone, which is good for bullets and such, set\
      \ bDeleteOnContact to true under ParticleDamage's ActorCollisionNotifier tab)...\
      \ \n\nTo edit any of the existing forces on a template, you can find the forces\
      \ under the ParticleTemplate -> Affecting Forces array. You can also find them\
      \ under the forces list, which lists all forces for all templates, but for complex\
      \ systems this can get to be a big list of forces to find the one you need in.\
      \ \n\nI've only scratched the surface of what is possible with particles here,\
      \ but this should at least give you an eye into how they work. I hope to have\
      \ time to do a full blown tutorial and reference of particle types, forces,\
      \ and variables that can be used. \n\nAs another note - you can also globally\
      \ apply forces to all current templates by adding them under the forces tab\
      \ (much like you'd add a new template type). This will add the force to all\
      \ current templates, but no templates added after the force was added. You can\
      \ apply any existing force to all existing templates by going to the Forces\
      \ Force tab and setting bIterateAll to true. Generally, the best procedure is\
      \ to add forces to individual templates as you need to. This allows you the\
      \ most control over the particles themselves and generally is not a performance\
      \ cost. \n\nWhen deleting particles, you should clean up their forces by first\
      \ deleting the forces from the forces array and then deleting the template itself.\
      \ This prevents forces from hanging around which are no longer effecting any\
      \ templates. \n\nMore to come. This first primer was just to take you through\
      \ a few of the different template and force types with no real end purpose for\
      \ the system. If people have requests for some particular sort of effect, post\
      \ a suggestion and I'll see what I can do to demonstrate the effects and make\
      \ sample maps available. \n\nScott\n\n==AARON LEIBY'S Quick Rundown of Particle\
      \ Templates in Unreal2==\n; ActorParticleTemplate : no longer works\n; BendiBeamTemplate\
      \ : only used by bendibeams, don't add manually\n; LineManagerTemplate : used\
      \ by linemanager, don't add manually\n; ParticleDecalTemplate : a sprite that's\
      \ oriented to the hit normal rather than facing the screen (like what's left\
      \ behind when you fire the shotgun), though there's other cool uses for this\
      \ too &ndash; like the teleporter effect.\n; PointParticleTemplate : simple\
      \ d3d points (like what quake used)\n; PulseLineTemplate : used with pulselinegenerator\
      \ only, don't add manually\n; RecursiveParticleTemplate : I don't think this\
      \ works any longer.\n; RotatingParticleTemplate : a 3d sprite that can rotate\
      \ (a bit slower than sprite3d)\n; Sprite3DParticleTemplate : a 3d sprite (or\
      \ billboard)\n; SpriteParticleTemplate : a simple sprite (always the same screen\
      \ size so it acts like a corona)\n; StrandParticleTemplate : for use with BarbieHareDesigner\
      \ only : I don't think this works any more.\n; StreakParticleTemplate : line\
      \ segments drawn between the last n positions of the particle (basically a point\
      \ particle with history)\n; TarpBuilderTemplate : used by tarpbuilder only :\
      \ rudamentary cloth engine (I don't think this works any more)\n; TextureStreakParticleTemplate\
      \ : What the EnergyRifle primary fire bolts use &ndash; basically a textured\
      \ version of the \n; StreakParticleTemplate (thus its name)\n; TriParticleTemplate\
      \ / TriangleParticleTemplate : only one of these works I think. It's what the\
      \ plastic bits when you shot the assault rifle into certain surfaces used. It\
      \ spawns triangular particles &ndash; actually sets of three particles that\
      \ are held together by a TriForce (no really) &ndash; that way you get per particle\
      \ collision on each corner if used with a GeometryCollider, etc.\n; ViewVelocityScaledParticleTemplate\
      \ : Useful for waterfalls or lock em for lights. A sprite that stretches based\
      \ on its screen velocity. So if you look at a waterfall from the side the individual\
      \ sprites can stretch out, but if you stand in it and look up, then they're\
      \ nice and round (makes em feel real 3d if used correctly).\n; WetWindshieldParticleTemplate\
      \ : sprite that rotates based on view angle &ndash; like coronas on streetlamps\
      \ while driving in the rain.\n\nSome forces can have their own subtemplates.\
      \ Examples include GeometryColliders (that can spawn more particles - or maybe\
      \ that's OnDestroyForces) and ParticleSalamanderForces (that can leave trails\
      \ of particles behind). This is where your ghost templates come from. They usually\
      \ have a SelectionWeight of 0.0 so they aren't selected by the normal process\
      \ of generated particles. The Force will generally have a drop down box of particle\
      \ templates that you can select from to add the sub templates.\n\nAaron\n\n\
      ==Discussion ==\n\n'''Dangler:''' Since there is virtually nothing on this topic\
      \ for Unreal2 Particle Generators which are a little different\n\nthan UT2k3\
      \ Emitters, I've posted what info I have obtained.\n\nParticle Generators in\
      \ Unreal2 were written by Aaron Leiby as far back as 2000, and are the precursor\
      \ to UT2k3 Particle Emitters.\n\nWith the demise of Legend Entertainment, this\
      \ may be all we get.\n\n'''Tarquin:''' Do you have permission to include these\
      \ in the Unreal Wiki?\n\n'''Dangler:''' Yes, I asked Aaron, this was from a\
      \ post he answered for me. Thanks for cleaning it up:) I didn't know how to\
      \ add the bold text and whatnot."
  properties: []
  revId: 5657
name: "Legacy:On ParticleGenerators (U2)"
revision:
  revid: 5657
  parentid: 5658
  user: "Adsl-67-121-219-208.dsl.sndg02.pacbell.net"
  timestamp: 1112473092.000000000
  comment: "*"
timestamp: 1668762564.167882000
