---
parse:
  title: "Legacy:Using LocalMessages"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#What_Are_LocalMessages.3F\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">What Are LocalMessages?</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Getting_to_know_LocalMessages\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Getting to know\
      \ LocalMessages</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #Setting_up_a_testing_environment\"><span class=\"tocnumber\">2.1</span> <span\
      \ class=\"toctext\">Setting up a testing environment</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-4\"><a href=\"#Broadcasting_a_LocalMessage\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Broadcasting a LocalMessage</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-5\"><a href=\"#The_Switch_Parameter\"\
      ><span class=\"tocnumber\">2.2.1</span> <span class=\"toctext\">The Switch Parameter</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-6\"><a href=\"#The_Related_PRIs\"><span class=\"\
      tocnumber\">2.2.2</span> <span class=\"toctext\">The Related PRIs</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-7\"><a href=\"#The_Optional_Object\"><span\
      \ class=\"tocnumber\">2.2.3</span> <span class=\"toctext\">The Optional Object</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Sending_Messages_To_Individual_Players\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Sending Messages\
      \ To Individual Players</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-9\"><a href=\"#Creating_New_LocalMessages\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Creating New LocalMessages</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#Related_Classes\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Related Classes</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"What_Are_LocalMessages.3F\"\
      >What Are LocalMessages?</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=1\"\
      \ title=\"Edit section: What Are LocalMessages?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The short description would be: All the messages in\
      \ the game (e.g. \"You have the flag, return to base!\") are LocalMessage classes.\
      \ LocalMessages have two important advantages over string messages: They use\
      \ less network bandwidth and they can be displayed in different languages, regardless\
      \ of the language the server uses. The classes can dynamically create the displayed\
      \ strings from the parameters that were passed to them.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Getting_to_know_LocalMessages\">Getting to know LocalMessages</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Using_LocalMessages?section=2\" title=\"Edit section:\
      \ Getting to know LocalMessages\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Setting_up_a_testing_environment\"\
      >Setting up a testing environment</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=3\"\
      \ title=\"Edit section: Setting up a testing environment\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>To get into LocalMessages\
      \ we'll try using some of the existing message classes from a simple <a href=\"\
      /Legacy:Mutator\" title=\"Legacy:Mutator\">mutator</a> first. Make a new mutator\
      \ like the one below and <a href=\"/Legacy:Create_An_INT_File\" title=\"Legacy:Create\
      \ An INT File\">create an INT File</a> for it, so it shows up in the game.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> MutLocalMessageTest\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n\
      <span class=\"kw1\">function</span> ModifyPlayer<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span> Other<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"co1\">// call next mutator's ModifyPlayer, so\
      \ we don't break other mutators</span>\n  <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;\n \n  <span class=\"co1\">// we'll put our code here soon</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// Default properties neccessary\
      \ for UT2003 mutators.</span>\n<span class=\"co1\">// Don't add this section\
      \ if you're coding for earlier engine versions,</span>\n<span class=\"co1\"\
      >// it'll only cause compiler warnings.</span>\n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n  FriendlyName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"LocalMessage Test\"</span>\n  Description<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Test mutator for LocalMessage classes.\"</span>\n\
      \  GroupName<span class=\"sy0\">=</span><span class=\"st0\">\"LocalMessage Test\"\
      </span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Now we have a\
      \ testing environment we can use to play with the features of LocalMessage classes.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Broadcasting_a_LocalMessage\">Broadcasting\
      \ a LocalMessage</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=4\" title=\"Edit\
      \ section: Broadcasting a LocalMessage\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The first method to send LocalMessages we'll try is\
      \ broadcasting them to all players. This sounds much more difficult than it\
      \ is, because every <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>\
      \ (e.g. our mutator) has a function which does exactly that.</p>\n<dl>\n<dt>BroadcastLocalizedMessage\
      \ (class&lt;<a href=\"/Legacy:LocalMessage\" title=\"Legacy:LocalMessage\">LocalMessage</a>&gt;\
      \ MessageClass, optional int Switch, optional <a href=\"/Legacy:PlayerReplicationInfo\"\
      \ title=\"Legacy:PlayerReplicationInfo\">PlayerReplicationInfo</a> RelatedPRI_1,\
      \ optional <a href=\"/Legacy:PlayerReplicationInfo\" title=\"Legacy:PlayerReplicationInfo\"\
      >PlayerReplicationInfo</a> RelatedPRI_2, optional <a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Object</a> OptionalObject)</dt>\n</dl>\n<p>The MessageClass\
      \ parameter specifies the LocalMessage class that should be broadcasted and\
      \ is the only required parameter. We'll get back to the optional parameters\
      \ later.</p>\n<p>Let's broadcast a simple message whenever a player respawns\
      \ by adding the following code to the mutator's ModifyPlayer function:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">BroadcastLocalizedMessage<span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'CTFHUDMessage'</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// in UT use CTFMessage2 instead</span></pre></div>\n\
      </div>\n<p>Compile the mutator, start a Practice Session/Instant Action game\
      \ and add the LocalMessage Test mutator. Now every time a player or bot respawns\
      \ you get the \"You have the flag, return to base!\" message. If you open the\
      \ UnrealGame.CTFHUDMessage (or Botpack.CTFMessage2) class you'll notice that\
      \ this string isn't hard-coded, but instead stored in a localized variable.\
      \ Localization happens client-side, so on a client with the German version the\
      \ message would appear as \"Sie haben die Flagge! Zurück zur Basis!\", while\
      \ the French version displays \"Vous avez le drapeau, regagnez la base&#160;!\"\
      \ even though both may be connected to a server that runs the Spanish version.\
      \ (which in case of a listen server would see \"Tienes la bandera, ¡regresa\
      \ a la base!\")&#160;:)</p>\n<h4><span class=\"mw-headline\" id=\"The_Switch_Parameter\"\
      >The Switch Parameter</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=5\" title=\"Edit\
      \ section: The Switch Parameter\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The CTFHUDMessage class also contains the \"The enemy\
      \ has your flag, recover it!\" message. To display it we have to use the first\
      \ optional parameter of the BroadcastLocalizedMessage function, the Switch parameter.\
      \ This is an integer value and by not specifying it the value 0 is used. Change\
      \ the BroadcastLocalizedMessage call to this:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">BroadcastLocalizedMessage<span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'CTFHUDMessage'</span>, <span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ in UT use CTFMessage2 instead</span></pre></div>\n</div>\n<p>After recompiling\
      \ you now see the new message each time somebody respawns.</p>\n<p>Most LocalMessage\
      \ classes use the Switch parameter for displaying completely different messages.\
      \ Some examples are the CTF messages (\"Player x picked up/dropped/captures/etc.\
      \ the flag\") or the game status messages. (\"Press FIRE to start!\", \"The\
      \ match is about to begin...3/2/1\", etc.) You could say the Switch parameter\
      \ specifies the type of message that should be displayed from a given class\
      \ of LocalMessages.</p>\n<h4><span class=\"mw-headline\" id=\"The_Related_PRIs\"\
      >The Related PRIs</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=6\" title=\"Edit\
      \ section: The Related PRIs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>PRI is short for <a href=\"/Legacy:PlayerReplicationInfo\"\
      \ title=\"Legacy:PlayerReplicationInfo\">PlayerReplicationInfo</a>. PRIs are\
      \ actors holding information about a player. LocalMessages build their display\
      \ strings client-side. However, due to optimization in the <a href=\"/Legacy:Replication\"\
      \ title=\"Legacy:Replication\">replication</a> code not every bit of information\
      \ about the players is sent to the clients in a network game. The things a client\
      \ might want to know about even if the player isn't visible are saved in a PRI\
      \ which is always available on all clients. (unlike the player's <a href=\"\
      /Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a> or <a href=\"/Legacy:Controller\"\
      \ title=\"Legacy:Controller\">Controller</a> actors)</p>\n<p>Some messages require\
      \ information about one or two players. This could be a player's name (think\
      \ \"A's killing spree was ended by B.\"), a player's team or other player-specific\
      \ information. The LocalMessages use their RelatedPRI_1 and RelatedPRI_2 parameters\
      \ to specify up to two PRIs.</p>\n<p>Let's try the \"You were killed by ...\"\
      \ message. This message uses the RelatedPRI_1 parameter to get the killer's\
      \ name. We will just let the respawned player be the \"killer\" here. Every\
      \ Pawn and Controller actor has a PlayerReplicationInfo property which can be\
      \ used to access the player's PRI. Change the broadcast line to this:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">BroadcastLocalizedMessage<span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'xVictimMessage'</span>,,\
      \ Other.<span class=\"me0\">PlayerReplicationInfo</span><span class=\"br0\"\
      >)</span>; <span class=\"co1\">// use class'VictimMessage' in UT</span></pre></div>\n\
      </div>\n<p>The victim message doesn't use the Switch parameter, that's why it\
      \ isn't specified here.</p>\n<h4><span class=\"mw-headline\" id=\"The_Optional_Object\"\
      >The Optional Object</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=7\" title=\"Edit\
      \ section: The Optional Object\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The fourth optional parameter when broadcasting LocalMessages\
      \ is of type Object. You can specify every kind of object here (Classes, Actors,\
      \ Textures, Sounds, etc.), but you have to make sure that the object exists\
      \ on all clients. This might only be a problem with Actors, since they have\
      \ to be replicated before they can be used as the optional object parameter\
      \ of a LocalMessage. In CTF and Bombing Run messages the optional object is\
      \ either the flag/ball or a <a href=\"/Legacy:TeamInfo\" title=\"Legacy:TeamInfo\"\
      >TeamInfo</a>.</p>\n<p>For this tutorial we will use the item pickup message.\
      \ The pickup message is stored in the PickupMessagePlus class (same name for\
      \ UT and UT2003) and only checks the <a href=\"/Legacy:Pickup\" title=\"Legacy:Pickup\"\
      >Pickup</a> class or <a href=\"/Legacy:Inventory_(UT)\" title=\"Legacy:Inventory\
      \ (UT)\">Inventory (UT)</a> class passed as the optional object. To get the\
      \ Sniper Rifle's/Lightning Gun's pickup message we use the following line:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">BroadcastLocalizedMessage<span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'PickupMessagePlus'</span>,,,\
      \ <span class=\"kw1\">class</span><span class=\"st0\">'SniperRiflePickup'</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// use just class'SniperRifle'\
      \ in UT</span></pre></div>\n</div>\n<p>This will display the message \"You got\
      \ the Lightning Gun.\" in UT2003 or \"You got a Sniper Rifle.\" in UT.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Sending_Messages_To_Individual_Players\"\
      >Sending Messages To Individual Players</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=8\"\
      \ title=\"Edit section: Sending Messages To Individual Players\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Sending messages\
      \ to individual players is a little more complicated (but not much) than broadcasting\
      \ it. All we need is a reference to a <a href=\"/Legacy:PlayerPawn\" title=\"\
      Legacy:PlayerPawn\">PlayerPawn</a> in UT or a <a href=\"/Legacy:PlayerController\"\
      \ title=\"Legacy:PlayerController\">PlayerController</a> in UT2003. The PlayerPawn\
      \ and PlayerController classes have a ReceiveLocalizedMessage function which\
      \ is also used by the BroadcastMessage function. BroadcastMessage calls all\
      \ players' ReceiveLocalizedMessage functions to broadcast the message, we'll\
      \ only call it for one player for now.</p>\n<dl>\n<dt>ReceiveLocalizedMessage\
      \ (class&lt;<a href=\"/Legacy:LocalMessage\" title=\"Legacy:LocalMessage\">LocalMessage</a>&gt;\
      \ Message, optional int Switch, optional <a href=\"/Legacy:PlayerReplicationInfo\"\
      \ title=\"Legacy:PlayerReplicationInfo\">PlayerReplicationInfo</a> RelatedPRI_1,\
      \ optional <a href=\"/Legacy:PlayerReplicationInfo\" title=\"Legacy:PlayerReplicationInfo\"\
      >PlayerReplicationInfo</a> RelatedPRI_2, optional <a href=\"/Legacy:Object\"\
      \ title=\"Legacy:Object\">Object</a> OptionalObject)</dt>\n</dl>\n<p>As you\
      \ can see ReceiveLocalizedMessage has the same parameters as BroadcastLocalizedMessage.\
      \ There's no need to explain scomething fundamentally new here, so let's jump\
      \ right into an example.</p>\n<p>For this example we will use the Mutate function\
      \ of our test mutator because it already gives us a reference to a player and\
      \ we don't have to go look for one. First we'll extend out testing environment.\
      \ Add the following code below the ModifyPlayer function or replace that function\
      \ with it.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >// in UT write PlayerPawn Sender instead</span>\n<span class=\"kw1\">function</span>\
      \ Mutate<span class=\"br0\">(</span><span class=\"kw5\">string</span> MutateString,\
      \ <span class=\"kw9\">PlayerController</span> Sender<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"co1\">// call next mutator's Mutate,\
      \ so we don't break other mutators</span>\n  <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">Mutate</span><span class=\"br0\">(</span>MutateString, Sender<span\
      \ class=\"br0\">)</span>;\n \n  <span class=\"co1\">// our code will go here</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Let's send a headshot announcement\
      \ to everyone who types \"mutate headshot\" at the console. Add the following\
      \ lines in the Mutate function:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  <span class=\"co1\">// case-insensitive</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> MutateString ~<span class=\"sy0\">=</span> <span\
      \ class=\"st0\">\"headshot\"</span> <span class=\"br0\">)</span>\n    Sender.<span\
      \ class=\"me0\">ReceiveLocalizedMessage</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'SpecialKillMessage'</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// use class'DecapitationMessage'\
      \ in UT</span></pre></div>\n</div>\n<p>The headshot message doesn't need any\
      \ parameters, it's always the same regardless of switch, related PRIs or optional\
      \ object.</p>\n<p>Now compile the mutator and start a game with it. Whenever\
      \ you type \"mutate headshot\" you will see (and hear) \"Headshot!\", and in\
      \ network games <i>only</i> the player who types it can see and hear it.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Creating_New_LocalMessages\">Creating New\
      \ LocalMessages</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=9\" title=\"Edit\
      \ section: Creating New LocalMessages\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>For scripters, an easy way to get into creating your\
      \ own localmessages is simply to steal an existing one. I wanted some onscreen\
      \ debug messages so I copied <a href=\"/Legacy:CTFHUDMessage\" title=\"Legacy:CTFHUDMessage\"\
      >CTFHUDMessage</a>, saved it into a file called MyScratchMessage.uc, and tweaked\
      \ it to return my required messages.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> MyScratchMessage <span class=\"kw1\"\
      >extends</span> LocalMessage;\n \n<span class=\"co1\">// Switch 0: Checkreset\
      \ said Die</span>\n<span class=\"co1\">// Switch 1: Checkreset said vehicle\
      \ not empty</span>\n<span class=\"co1\">// Switch 2: Checkreset found a collidingactor\
      \ required ten more seconds</span>\n<span class=\"co1\">// Switch 3: Checkreset\
      \ Destroyed!</span>\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span>Message<span\
      \ class=\"br0\">)</span> <span class=\"kw1\">localized</span> <span class=\"\
      kw5\">string</span> string0;\n<span class=\"kw1\">var</span><span class=\"br0\"\
      >(</span>Message<span class=\"br0\">)</span> <span class=\"kw1\">localized</span>\
      \ <span class=\"kw5\">string</span> string1;\n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span>Message<span class=\"br0\">)</span> <span class=\"kw1\"\
      >localized</span> <span class=\"kw5\">string</span> string2;\n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span>Message<span class=\"br0\">)</span>\
      \ <span class=\"kw1\">localized</span> <span class=\"kw5\">string</span> string3;\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span>Message<span class=\"\
      br0\">)</span> <span class=\"kw5\">color</span> YellowColor;\n \n<span class=\"\
      kw1\">static</span> <span class=\"kw1\">function</span> <span class=\"kw5\"\
      >color</span> GetColor<span class=\"br0\">(</span>\n\t<span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">int</span> <span class=\"kw2\">Switch</span>,\n\t<span\
      \ class=\"kw1\">optional</span> PlayerReplicationInfo RelatedPRI_1, \n\t<span\
      \ class=\"kw1\">optional</span> PlayerReplicationInfo RelatedPRI_2\n\t<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >return</span> <span class=\"kw1\">Default</span>.<span class=\"me0\">YellowColor</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">string</span> GetString<span class=\"\
      br0\">(</span>\n\t<span class=\"kw1\">optional</span> <span class=\"kw5\">int</span>\
      \ <span class=\"kw2\">Switch</span>,\n\t<span class=\"kw1\">optional</span>\
      \ PlayerReplicationInfo RelatedPRI_1, \n\t<span class=\"kw1\">optional</span>\
      \ PlayerReplicationInfo RelatedPRI_2,\n\t<span class=\"kw1\">optional</span>\
      \ <span class=\"kw8\">Object</span> OptionalObject\n\t<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw2\">Switch</span> <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t    <span class=\"\
      kw2\">return</span> <span class=\"kw1\">Default</span>.<span class=\"me0\">string0</span>;\n\
      \    \t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw2\">Switch</span> <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\t    <span class=\"\
      kw2\">return</span> <span class=\"kw1\">Default</span>.<span class=\"me0\">string1</span>;\n\
      \    \t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw2\">Switch</span> <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n\t    <span class=\"\
      kw2\">return</span> <span class=\"kw1\">Default</span>.<span class=\"me0\">string2</span>;\n\
      \    \t<span class=\"kw2\">else</span> \n\t    <span class=\"kw2\">return</span>\
      \ <span class=\"kw1\">Default</span>.<span class=\"me0\">string3</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n     string0<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Checkreset said Die\"</span>\n     string1<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Checkreset said vehicle not empty\"</span>\n\
      \     string2<span class=\"sy0\">=</span><span class=\"st0\">\"Checkreset found\
      \ a collidingactor required ten more seconds\"</span>\n     string3<span class=\"\
      sy0\">=</span><span class=\"st0\">\"Checkreset Destroyed!\"</span>\n \n    \
      \ YellowColor<span class=\"sy0\">=</span><span class=\"br0\">(</span>G<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">255</span>,R<span class=\"sy0\"\
      >=</span><span class=\"nu0\">255</span>,A<span class=\"sy0\">=</span><span class=\"\
      nu0\">255</span><span class=\"br0\">)</span>\n \n     bIsPartiallyUnique<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n     bIsConsoleMessage<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     bFadeMessage<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n     bBeep<span class=\"\
      sy0\">=</span><span class=\"kw6\">True</span>\n     Lifetime<span class=\"sy0\"\
      >=</span><span class=\"nu0\">2</span>\n     DrawColor<span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>G<span class=\"sy0\">=</span><span class=\"nu0\">160</span>,R<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\
      \     StackMode<span class=\"sy0\">=</span>SM_Down\n     PosY<span class=\"\
      sy0\">=</span><span class=\"nu0\">0.100000</span>\n     FontSize<span class=\"\
      sy0\">=</span><span class=\"nu0\">1</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>As a scripter, I found I could just compile that into my package\
      \ and it was available using <code>BroadcastLocalizedMessage(class'MyScratchMessage',1);</code></p>\n\
      <p><b>Sweavo:</b> I don't know how to then localize this for different regions,\
      \ though. I guess you need to have separate source codes that compile into classes\
      \ of the same name.</p>\n<p><b>Tarquin:</b> Suppose I create and embed a LocalMessage\
      \ class in <a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\">MyLevel</a>...\
      \ now how do I refer to it somewhere in the map so it's saved properly? Making\
      \ it placeable seems to work.&#160;:)</p>\n<h2><span class=\"mw-headline\" id=\"\
      Related_Topics\">Related Topics</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=10\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Localization\" title=\"Legacy:Localization\"\
      >Localization</a></li>\n<li><a href=\"/Legacy:INT_File\" title=\"Legacy:INT\
      \ File\">INT File</a></li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Related_Classes\"\
      >Related Classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Using_LocalMessages?section=11\" title=\"Edit\
      \ section: Related Classes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:LocalMessage\" title=\"Legacy:LocalMessage\"\
      >LocalMessage</a>, <a href=\"/Legacy:LocalMessage_(UT)\" title=\"Legacy:LocalMessage\
      \ (UT)\">LocalMessage (UT)</a></li>\n<li><a href=\"/Legacy:HUD\" title=\"Legacy:HUD\"\
      >HUD</a>, <a href=\"/Legacy:HUD_(UT)\" title=\"Legacy:HUD (UT)\">HUD (UT)</a></li>\n\
      <li><a href=\"/Legacy:Canvas\" title=\"Legacy:Canvas\">Canvas</a>, <a href=\"\
      /Legacy:Canvas_(UT)\" title=\"Legacy:Canvas (UT)\">Canvas (UT)</a></li>\n</ul>\n\
      <hr />\n<p><a href=\"/Category:Legacy_Tutorial\" title=\"Category:Legacy Tutorial\"\
      >Category:Legacy Tutorial</a><br />\n<a href=\"/Category:Legacy_To_Do\" title=\"\
      Category:Legacy To Do\">Category:Legacy To Do</a> → Add info about creating\
      \ new LocalMessage classes.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.181 seconds\nReal time usage: 0.184 seconds\nPreprocessor visited node count:\
      \ 117/1000000\nPreprocessor generated node count: 226/1000000\nPost‐expand include\
      \ size: 38/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3409-0!*!0!!en!*!*\
      \ and timestamp 20221117130944 and revision id 8785\n -->\n"
  categories:
  - sortkey: "Using LocalMessages"
    name: "Legacy_To_Do"
  - sortkey: "Using LocalMessages"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Canvas (UT)"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 14
    exists: true
    name: "Category:Legacy Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Canvas"
  - ns: 100
    exists: true
    name: "Legacy:PlayerReplicationInfo"
  - ns: 100
    exists: true
    name: "Legacy:INT File"
  - ns: 100
    exists: true
    name: "Legacy:Inventory (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Localization"
  - ns: 100
    exists: true
    name: "Legacy:MyLevel"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:HUD"
  - ns: 100
    exists: true
    name: "Legacy:Pickup"
  - ns: 100
    exists: true
    name: "Legacy:Create An INT File"
  - ns: 100
    exists: true
    name: "Legacy:PlayerPawn"
  - ns: 100
    exists: true
    name: "Legacy:LocalMessage"
  - ns: 100
    exists: true
    name: "Legacy:HUD (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:TeamInfo"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:CTFHUDMessage"
  - ns: 100
    exists: true
    name: "Legacy:LocalMessage (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Controller"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "What Are LocalMessages?"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 0
    anchor: "What_Are_LocalMessages.3F"
  - toclevel: 1
    level: "2"
    line: "Getting to know LocalMessages"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 456
    anchor: "Getting_to_know_LocalMessages"
  - toclevel: 2
    level: "3"
    line: "Setting up a testing environment"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 492
    anchor: "Setting_up_a_testing_environment"
  - toclevel: 2
    level: "3"
    line: "Broadcasting a LocalMessage"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 1437
    anchor: "Broadcasting_a_LocalMessage"
  - toclevel: 3
    level: "4"
    line: "The Switch Parameter"
    number: "2.2.1"
    index: "5"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 3177
    anchor: "The_Switch_Parameter"
  - toclevel: 3
    level: "4"
    line: "The Related PRIs"
    number: "2.2.2"
    index: "6"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 4140
    anchor: "The_Related_PRIs"
  - toclevel: 3
    level: "4"
    line: "The Optional Object"
    number: "2.2.3"
    index: "7"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 5580
    anchor: "The_Optional_Object"
  - toclevel: 2
    level: "3"
    line: "Sending Messages To Individual Players"
    number: "2.3"
    index: "8"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 6712
    anchor: "Sending_Messages_To_Individual_Players"
  - toclevel: 1
    level: "2"
    line: "Creating New LocalMessages"
    number: "3"
    index: "9"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 8978
    anchor: "Creating_New_LocalMessages"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "10"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 11321
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Related Classes"
    number: "5"
    index: "11"
    fromtitle: "Legacy:Using_LocalMessages"
    byteoffset: 11412
    anchor: "Related_Classes"
  displaytitle: "Legacy:Using LocalMessages"
  iwlinks: []
  wikitext:
    text: "==What Are LocalMessages?==\n\nThe short description would be: All the\
      \ messages in the game (e.g. \"You have the flag, return to base!\") are LocalMessage\
      \ classes. LocalMessages have two important advantages over string messages:\
      \ They use less network bandwidth and they can be displayed in different languages,\
      \ regardless of the language the server uses. The classes can dynamically create\
      \ the displayed strings from the parameters that were passed to them.\n\n==Getting\
      \ to know LocalMessages ==\n\n===Setting up a testing environment ===\n\nTo\
      \ get into LocalMessages we'll try using some of the existing message classes\
      \ from a simple [[Legacy:Mutator|mutator]] first. Make a new mutator like the\
      \ one below and [[Legacy:Create An INT File|create an INT File]] for it, so\
      \ it shows up in the game.\n\n<uscript>\nclass MutLocalMessageTest extends Mutator;\n\
      \nfunction ModifyPlayer(Pawn Other)\n{\n  // call next mutator's ModifyPlayer,\
      \ so we don't break other mutators\n  Super.ModifyPlayer(Other);\n  \n  // we'll\
      \ put our code here soon\n}\n\n// Default properties neccessary for UT2003 mutators.\n\
      // Don't add this section if you're coding for earlier engine versions,\n//\
      \ it'll only cause compiler warnings.\ndefaultproperties\n{\n  FriendlyName=\"\
      LocalMessage Test\"\n  Description=\"Test mutator for LocalMessage classes.\"\
      \n  GroupName=\"LocalMessage Test\"\n}\n</uscript>\n\nNow we have a testing\
      \ environment we can use to play with the features of LocalMessage classes.\n\
      \n===Broadcasting a LocalMessage ===\n\nThe first method to send LocalMessages\
      \ we'll try is broadcasting them to all players. This sounds much more difficult\
      \ than it is, because every [[Legacy:Actor|Actor]] (e.g. our mutator) has a\
      \ function which does exactly that.\n; BroadcastLocalizedMessage (class<[[Legacy:LocalMessage|LocalMessage]]>\
      \ MessageClass, optional int Switch, optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]]\
      \ RelatedPRI_1, optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]]\
      \ RelatedPRI_2, optional [[Legacy:Object|Object]] OptionalObject)\n\nThe MessageClass\
      \ parameter specifies the LocalMessage class that should be broadcasted and\
      \ is the only required parameter. We'll get back to the optional parameters\
      \ later.\n\nLet's broadcast a simple message whenever a player respawns by adding\
      \ the following code to the mutator's ModifyPlayer function:\n\n<uscript>\n\
      BroadcastLocalizedMessage(class'CTFHUDMessage'); // in UT use CTFMessage2 instead\n\
      </uscript>\n\nCompile the mutator, start a Practice Session/Instant Action game\
      \ and add the LocalMessage Test mutator. Now every time a player or bot respawns\
      \ you get the \"You have the flag, return to base!\" message. If you open the\
      \ UnrealGame.CTFHUDMessage (or Botpack.CTFMessage2) class you'll notice that\
      \ this string isn't hard-coded, but instead stored in a localized variable.\
      \ Localization happens client-side, so on a client with the German version the\
      \ message would appear as \"Sie haben die Flagge! Zurück zur Basis!\", while\
      \ the French version displays \"Vous avez le drapeau, regagnez la base !\" even\
      \ though both may be connected to a server that runs the Spanish version. (which\
      \ in case of a listen server would see \"Tienes la bandera, ¡regresa a la base!\"\
      ) :)\n\n====The Switch Parameter ====\n\nThe CTFHUDMessage class also contains\
      \ the \"The enemy has your flag, recover it!\" message. To display it we have\
      \ to use the first optional parameter of the BroadcastLocalizedMessage function,\
      \ the Switch parameter. This is an integer value and by not specifying it the\
      \ value 0 is used. Change the BroadcastLocalizedMessage call to this:\n\n<uscript>\n\
      BroadcastLocalizedMessage(class'CTFHUDMessage', 1); // in UT use CTFMessage2\
      \ instead\n</uscript>\n\nAfter recompiling you now see the new message each\
      \ time somebody respawns.\n\nMost LocalMessage classes use the Switch parameter\
      \ for displaying completely different messages. Some examples are the CTF messages\
      \ (\"Player x picked up/dropped/captures/etc. the flag\") or the game status\
      \ messages. (\"Press FIRE to start!\", \"The match is about to begin...3/2/1\"\
      , etc.) You could say the Switch parameter specifies the type of message that\
      \ should be displayed from a given class of LocalMessages.\n\n====The Related\
      \ PRIs ====\n\nPRI is short for [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]].\
      \ PRIs are actors holding information about a player. LocalMessages build their\
      \ display strings client-side. However, due to optimization in the [[Legacy:Replication|replication]]\
      \ code not every bit of information about the players is sent to the clients\
      \ in a network game. The things a client might want to know about even if the\
      \ player isn't visible are saved in a PRI which is always available on all clients.\
      \ (unlike the player's [[Legacy:Pawn|Pawn]] or [[Legacy:Controller|Controller]]\
      \ actors)\n\nSome messages require information about one or two players. This\
      \ could be a player's name (think \"A's killing spree was ended by B.\"), a\
      \ player's team or other player-specific information. The LocalMessages use\
      \ their RelatedPRI_1 and RelatedPRI_2 parameters to specify up to two PRIs.\n\
      \nLet's try the \"You were killed by ...\" message. This message uses the RelatedPRI_1\
      \ parameter to get the killer's name. We will just let the respawned player\
      \ be the \"killer\" here. Every Pawn and Controller actor has a PlayerReplicationInfo\
      \ property which can be used to access the player's PRI. Change the broadcast\
      \ line to this:\n\n<uscript>\nBroadcastLocalizedMessage(class'xVictimMessage',,\
      \ Other.PlayerReplicationInfo); // use class'VictimMessage' in UT\n</uscript>\n\
      \nThe victim message doesn't use the Switch parameter, that's why it isn't specified\
      \ here.\n\n====The Optional Object ====\n\nThe fourth optional parameter when\
      \ broadcasting LocalMessages is of type Object. You can specify every kind of\
      \ object here (Classes, Actors, Textures, Sounds, etc.), but you have to make\
      \ sure that the object exists on all clients. This might only be a problem with\
      \ Actors, since they have to be replicated before they can be used as the optional\
      \ object parameter of a LocalMessage. In CTF and Bombing Run messages the optional\
      \ object is either the flag/ball or a [[Legacy:TeamInfo|TeamInfo]].\n\nFor this\
      \ tutorial we will use the item pickup message. The pickup message is stored\
      \ in the PickupMessagePlus class (same name for UT and UT2003) and only checks\
      \ the [[Legacy:Pickup|Pickup]] class or [[Legacy:Inventory (UT)|Inventory (UT)]]\
      \ class passed as the optional object. To get the Sniper Rifle's/Lightning Gun's\
      \ pickup message we use the following line:\n\n<uscript>\nBroadcastLocalizedMessage(class'PickupMessagePlus',,,\
      \ class'SniperRiflePickup'); // use just class'SniperRifle' in UT\n</uscript>\n\
      \nThis will display the message \"You got the Lightning Gun.\" in UT2003 or\
      \ \"You got a Sniper Rifle.\" in UT.\n\n===Sending Messages To Individual Players\
      \ ===\n\nSending messages to individual players is a little more complicated\
      \ (but not much) than broadcasting it. All we need is a reference to a [[Legacy:PlayerPawn|PlayerPawn]]\
      \ in UT or a [[Legacy:PlayerController|PlayerController]] in UT2003. The PlayerPawn\
      \ and PlayerController classes have a ReceiveLocalizedMessage function which\
      \ is also used by the BroadcastMessage function. BroadcastMessage calls all\
      \ players' ReceiveLocalizedMessage functions to broadcast the message, we'll\
      \ only call it for one player for now.\n; ReceiveLocalizedMessage (class<[[Legacy:LocalMessage|LocalMessage]]>\
      \ Message, optional int Switch, optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]]\
      \ RelatedPRI_1, optional [[Legacy:PlayerReplicationInfo|PlayerReplicationInfo]]\
      \ RelatedPRI_2, optional [[Legacy:Object|Object]] OptionalObject)\n\nAs you\
      \ can see ReceiveLocalizedMessage has the same parameters as BroadcastLocalizedMessage.\
      \ There's no need to explain scomething fundamentally new here, so let's jump\
      \ right into an example.\n\nFor this example we will use the Mutate function\
      \ of our test mutator because it already gives us a reference to a player and\
      \ we don't have to go look for one. First we'll extend out testing environment.\
      \ Add the following code below the ModifyPlayer function or replace that function\
      \ with it.\n\n<uscript>\n// in UT write PlayerPawn Sender instead\nfunction\
      \ Mutate(string MutateString, PlayerController Sender)\n{\n  // call next mutator's\
      \ Mutate, so we don't break other mutators\n  Super.Mutate(MutateString, Sender);\n\
      \  \n  // our code will go here\n}\n</uscript>\n\nLet's send a headshot announcement\
      \ to everyone who types \"mutate headshot\" at the console. Add the following\
      \ lines in the Mutate function:\n\n<uscript>\n  // case-insensitive\n  if (\
      \ MutateString ~= \"headshot\" )\n    Sender.ReceiveLocalizedMessage(class'SpecialKillMessage');\
      \ // use class'DecapitationMessage' in UT\n</uscript>\n\nThe headshot message\
      \ doesn't need any parameters, it's always the same regardless of switch, related\
      \ PRIs or optional object.\n\nNow compile the mutator and start a game with\
      \ it. Whenever you type \"mutate headshot\" you will see (and hear) \"Headshot!\"\
      , and in network games ''only'' the player who types it can see and hear it.\n\
      \n==Creating New LocalMessages ==\n\nFor scripters, an easy way to get into\
      \ creating your own localmessages is simply to steal an existing one.  I wanted\
      \ some onscreen debug messages so I copied [[Legacy:CTFHUDMessage|CTFHUDMessage]],\
      \ saved it into a file called MyScratchMessage.uc, and tweaked it to return\
      \ my required messages.\n\n<uscript>\nclass MyScratchMessage extends LocalMessage;\n\
      \n// Switch 0: Checkreset said Die\n// Switch 1: Checkreset said vehicle not\
      \ empty\n// Switch 2: Checkreset found a collidingactor required ten more seconds\n\
      // Switch 3: Checkreset Destroyed!\n\nvar(Message) localized string string0;\n\
      var(Message) localized string string1;\nvar(Message) localized string string2;\n\
      var(Message) localized string string3;\nvar(Message) color YellowColor;\n\n\
      static function color GetColor(\n\toptional int Switch,\n\toptional PlayerReplicationInfo\
      \ RelatedPRI_1, \n\toptional PlayerReplicationInfo RelatedPRI_2\n\t)\n{\n\t\
      return Default.YellowColor;\n}\n\nstatic function string GetString(\n\toptional\
      \ int Switch,\n\toptional PlayerReplicationInfo RelatedPRI_1, \n\toptional PlayerReplicationInfo\
      \ RelatedPRI_2,\n\toptional Object OptionalObject\n\t)\n{\n\tif (Switch == 0)\n\
      \t    return Default.string0;\n    \telse if (Switch == 1)\n\t    return Default.string1;\n\
      \    \telse if (Switch == 2)\n\t    return Default.string2;\n    \telse \n\t\
      \    return Default.string3;\n}\n\ndefaultproperties\n{\n     string0=\"Checkreset\
      \ said Die\"\n     string1=\"Checkreset said vehicle not empty\"\n     string2=\"\
      Checkreset found a collidingactor required ten more seconds\"\n     string3=\"\
      Checkreset Destroyed!\"\n\n     YellowColor=(G=255,R=255,A=255)\n\n     bIsPartiallyUnique=True\n\
      \     bIsConsoleMessage=False\n     bFadeMessage=True\n     bBeep=True\n   \
      \  Lifetime=2\n     DrawColor=(G=160,R=0)\n     StackMode=SM_Down\n     PosY=0.100000\n\
      \     FontSize=1\n}\n\n</uscript>\n\nAs a scripter, I found I could just compile\
      \ that into my package and it was available using <code>BroadcastLocalizedMessage(class'MyScratchMessage',1);</code>\n\
      \n'''Sweavo:''' I don't know how to then localize this for different regions,\
      \ though.  I guess you need to have separate source codes that compile into\
      \ classes of the same name.\n\n'''Tarquin:''' Suppose I create and embed a LocalMessage\
      \ class in [[Legacy:MyLevel|MyLevel]]... now how do I refer to it somewhere\
      \ in the map so it's saved properly? Making it placeable seems to work. :)\n\
      \n==Related Topics ==\n* [[Legacy:Localization|Localization]]\n* [[Legacy:INT\
      \ File|INT File]]\n\n==Related Classes ==\n* [[Legacy:LocalMessage|LocalMessage]],\
      \ [[Legacy:LocalMessage (UT)|LocalMessage (UT)]]\n* [[Legacy:HUD|HUD]], [[Legacy:HUD\
      \ (UT)|HUD (UT)]]\n* [[Legacy:Canvas|Canvas]], [[Legacy:Canvas (UT)|Canvas (UT)]]\n\
      \n----\n\n[[:Category:Legacy Tutorial]]<br />[[:Category:Legacy To Do]] &rarr;\
      \ Add info about creating new LocalMessage classes.\n[[Category:Legacy Tutorial|{{PAGENAME}}]]\n\
      [[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 8785
name: "Legacy:Using LocalMessages"
revision:
  revid: 8785
  parentid: 8787
  user: "Tarquin"
  timestamp: 1125728673.000000000
  comment: "arg.. I forgot serverpackages"
timestamp: 1668764275.719719000
