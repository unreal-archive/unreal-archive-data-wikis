---
parse:
  title: "Legacy:Ucc Make Columns/1.4 Patching The Beta"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#ucc_make_.281.4.29\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">ucc make (1.4)</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Patching_the_Beta\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Patching the Beta</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Fixing_.22Patching_the_Beta.22_.28ucc_make_1.5.29\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Fixing \"Patching\
      \ the Beta\" (ucc make 1.5)</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#GuestBook\"><span class=\"tocnumber\">3.1</span> <span class=\"\
      toctext\">GuestBook</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n\
      <h3><span class=\"mw-headline\" id=\"ucc_make_.281.4.29\">ucc make (1.4)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta?section=1\" title=\"\
      Edit section: ucc make (1.4)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>part of the <a href=\"/Legacy:Ucc_make_columns\" title=\"\
      Legacy:Ucc make columns\" class=\"mw-redirect\">ucc_make_columns</a> series...</p>\n\
      <h2><span class=\"mw-headline\" id=\"Patching_the_Beta\">Patching the Beta</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta?section=2\" title=\"\
      Edit section: Patching the Beta\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Games, and well programs in general, have gotten fantastically\
      \ more complex in the last decade. Gone are the days of the 8-bits, the 16-bits,\
      \ the 640k limits, the time when you could fit multiple games on a single floppy.\
      \ This complexity has given rise to new genres (clearly the FPS genre couldn't\
      \ exist before 3D could really handle it), birth to online gaming, and an evolutionary\
      \ step in new and more powerful bugs.</p>\n<p>The term \"bug\" in conjunction\
      \ with computing comes from the old days when computers were behemoth machines\
      \ with rows of lights and pretty things to attract a creature such as a moth.\
      \ Indeed, at one point a moth flew into the computer, died, conflicted with\
      \ the delicate hardware and become the world's first real \"bug\" in computing.\
      \ These days the bugs are much less literal, but much more evil in nature. It\
      \ stands to figure that code that is thousands, if not millions, of lines long\
      \ is more vulnerable to weary days when three digits was more than enough to\
      \ count the program.</p>\n<p>Consider your average FPS mod. Most mods these\
      \ days are either interpreted code (such as UnrealScript) or native code (such\
      \ as C++) added on to a pre-existing engine. In the former, there are now two\
      \ languages at least and in either case their is usually some kind of interface\
      \ the mod is using. Move backwards from this point to the original game, it\
      \ has sections of code to handle 2D graphics such as textures and sprites, sections\
      \ to handle the 3D engine, sections to handle in-betweeners like effects and\
      \ particles, sections to handle the definitions of various actors within the\
      \ engine (weapons, armor, ammo, health), AI code, netcode, menu code, and so\
      \ on. Considering this is a commercial product, it's usually safe to assume\
      \ that it's fairly stable...although every modern game these days has at least\
      \ one - if not four or five or even ten - patches after release. By itself,\
      \ the game is a complicated network of subsystems which can have small flaws\
      \ and bugs which don't ruin or may not even be usually noticeable in the game.</p>\n\
      <p>Now enter the unsuspecting mod. The nice thing about mods is that a lot of\
      \ the real rocket scientist stuff, like particle systems, animation systems\
      \ and 3D rendering is done for you. The problem with mods is that as you add\
      \ your own sections of actors, AI, netcode, menu code, and so on - you are not\
      \ only opening the chances for new bugs but are also possibly weakened by existing\
      \ flaws in the system. While one programmers shortcut late in writing the spawn\
      \ routine for a weapon may have no impact in the commercial game, it may have\
      \ catastrophic events on the person who tries to subclass that weapon.</p>\n\
      <p>It's kinda like a reverse house of cards. You keep stacking more and more\
      \ on top and there is much greater chance of collapse. Worse, few mod teams\
      \ have the resources to have a hardcore beta testing staff. Beta testing is\
      \ one of those unsung arts of computing programming, because as my old Quality\
      \ Assurance Manager used to tell me, it should all be about prevention - not\
      \ fixing things at 3AM before handing stuff off to a client.</p>\n<p>Mods have\
      \ this odd tendency to use beta testing as a defense. Counter-Strike started\
      \ it, refusing to leave beta until was forced by Sierra when it commercialized.\
      \ Alpha and Beta's are (by definition) not supposed to be public. Alpha essentially\
      \ means work has begun. Nothing's really working, just getting things started.\
      \ Beta is supposed to be the testing right before a public release, meaning\
      \ the feature set is closed and you aren't adding any more cards to the stack.\
      \ Test, find bug, fix, rinse, wash, repeat.</p>\n<p>The problem is unless you\
      \ have a lot of dedicated testers, bugs these days can be hard to find. In fact,\
      \ in the many betas I had with Freehold , there were several bugs the testers\
      \ found that I didn't even know were bugs until I tried to reproduce them. Sometimes\
      \ they just sounded like weird quirks in the gameplay, or something I *knew*\
      \ I had fixed a version or two ago. Especially in object orientated code, bugs\
      \ can be like viruses - they'll mutate, hide, and arise again. A bug I just\
      \ found in the preview of Freehold just released this week was one I thought\
      \ I had fixed last week (don't worry - it's killed now in the internal release...I\
      \ swear...I think).</p>\n<p>Here are a few tips when trying to beta test with\
      \ a small team:</p>\n<p>-KISS stands for Keep It Simple, Stupid. It's a mantra\
      \ for coders to know when to hit themselves on the head and not overengineer\
      \ something. Out of all the problems with designing and coding an overly complicated\
      \ system, the chief one is that is opens up the possibility of conflicts and\
      \ makes problem resolution harder.-</p>\n<p>-Either don't test your own code\
      \ or take some time away before testing it. While a lot of coders will write,\
      \ compile, test, tweak, repeat for day to day work, it's not the best testing.\
      \ It's like trying to edit your own term paper right after writing it. You are\
      \ so familiar with the work that you'll glance right over the flaws. Another\
      \ pair of eyes is essential, or at least giving yours a break.-</p>\n<p>-Write\
      \ down the little things. Keep track of the tiny flaws as you notice them. It\
      \ might seem trivial now, but it could later cause a bigger problem.-</p>\n\
      <p>-Regression, regression, regression. Half the bugs I've caused in Freeholds\
      \ were fixes for something else (including the fore mentioned one). Test to\
      \ make sure that you have not only fixed the bug, but also test any code that\
      \ the fix might be coming into contact with. In the case of the sample bug,\
      \ I made a fix in the game's ReduceDamage function, but didn't completely test\
      \ the Killed function.-</p>\n<p>-When it comes to gameplay, majority rules.\
      \ This isn't a rule - but a suggestion. Especially for teams with only a couple\
      \ of coders. Listen to other people playing the game when it comes to non-programmatic\
      \ bugs but possible design flaws. What's easy for you may be completely impossible\
      \ for a new user. Thanks to beta testers, I changed buy rules, weapon features,\
      \ item features and more. All concepts which worked for me but probably would\
      \ have infuriated someone else.</p>\n<p>-Finally have fun. It's a game and a\
      \ hobby after all.-</p>\n<h2><span class=\"mw-headline\" id=\"Fixing_.22Patching_the_Beta.22_.28ucc_make_1.5.29\"\
      >Fixing \"Patching the Beta\" (ucc make 1.5)</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta?section=3\"\
      \ title=\"Edit section: Fixing &quot;Patching the Beta&quot; (ucc make 1.5)\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Column\
      \ Changelog July.03.2003</p>\n<p>-Added link to Mychaeel's excellent column\
      \ on beta testing and modding in general: <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://wiki.beyondunreal.com/wiki/Mychaeel/Modding_Etiquette.-\"\
      >http://wiki.beyondunreal.com/wiki/Mychaeel/Modding_Etiquette.-</a></p>\n<p>-Used\
      \ Mychaeel's ideas as a connection to Unreal Wiki (<a rel=\"nofollow\" class=\"\
      external free\" href=\"http://wiki.beyondunreal.com/wiki/HomePage\">http://wiki.beyondunreal.com/wiki/HomePage</a>)\
      \ in general, noting that a shared community is a more reliable community. Completely\
      \ independent programming projects are more likely to have unseen bugs and creating\
      \ a more \"foolproof\" mod community starts with sharing development ideas,\
      \ libraries, code.-</p>\n<p>-Realized \"bug\" intro was trite, overused ...\
      \ replaced with brief history of QA in general.-</p>\n<p>-Noted that the \"\
      other side\" to community beta testing and bug fixing the is the possibility\
      \ of inefficiency. Urge new coders to seek out existing material on problems,\
      \ bugs, ideas rather than asking fresh (and possibly redudant) questions.-</p>\n\
      <p>-Should question the current \"tone\" of UT mod community - the odd quiet\
      \ as everyone waits the next codebase, wonder if there will be a kind of void\
      \ for older UT efforts.</p>\n<p>-Use above note to connect to fact that the\
      \ new codebase may be elusive.-</p>\n<p>-It will bring new bugs, new features,\
      \ lose old ones ... language may be similar but warn developers looking to port\
      \ that it might not be so simple.-</p>\n<p>-Use converting LightSaber to Longblade\
      \ as a sample - different code for detecting bot users, processing trace hits,\
      \ animation routines ... end with \"what looks the same on the outside might\
      \ be a completely different beast on the inside. Upcoming gametypes might mirror\
      \ the classics (CTF, DM), but doesn't mean the code will be the same.</p>\n\
      <p>-Got rid shameless Freehold plug and replaced ending with acknowledgement\
      \ that the UT2k3 demo should (probably ... might?) be out in a couple of weeks,\
      \ and wonder how the removal of the original Unreal1 codebase will impact the\
      \ smaller mod projects.-</p>\n<p>-Put shameless Freehold plug back in anyway.\
      \ Note that the new preview will at least double the existing gametypes. Use\
      \ this to end with a teaser that next column will be all about evolution in\
      \ deathmatch gameplay.-</p>\n<p>Other <a href=\"/Legacy:Ucc_make_columns\" title=\"\
      Legacy:Ucc make columns\" class=\"mw-redirect\">ucc_make_columns</a></p>\n<p><i>please\
      \ reserve edits to minor changes and comments – RegularX</i></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"GuestBook\">GuestBook</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta?section=4\"\
      \ title=\"Edit section: GuestBook\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.030 seconds\n\
      Real time usage: 0.031 seconds\nPreprocessor visited node count: 14/1000000\n\
      Preprocessor generated node count: 20/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3502-0!*!0!!en!*!*\
      \ and timestamp 20221122021437 and revision id 8979\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Ucc make columns"
  templates: []
  images: []
  externallinks:
  - "http://wiki.beyondunreal.com/wiki/HomePage"
  - "http://wiki.beyondunreal.com/wiki/Mychaeel/Modding_Etiquette.-"
  sections:
  - toclevel: 1
    level: "3"
    line: "ucc make (1.4)"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta"
    byteoffset: 0
    anchor: "ucc_make_.281.4.29"
  - toclevel: 1
    level: "2"
    line: "Patching the Beta"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta"
    byteoffset: 90
    anchor: "Patching_the_Beta"
  - toclevel: 1
    level: "2"
    line: "Fixing \"Patching the Beta\" (ucc make 1.5)"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta"
    byteoffset: 6243
    anchor: "Fixing_.22Patching_the_Beta.22_.28ucc_make_1.5.29"
  - toclevel: 2
    level: "3"
    line: "GuestBook"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Ucc_Make_Columns/1.4_Patching_The_Beta"
    byteoffset: 8491
    anchor: "GuestBook"
  displaytitle: "Legacy:Ucc Make Columns/1.4 Patching The Beta"
  iwlinks: []
  wikitext:
    text: "===ucc make (1.4)===\n\npart of the [[Legacy:Ucc_make_columns|ucc_make_columns]]\
      \ series...\n\n==Patching the Beta==\n\nGames, and well programs in general,\
      \ have gotten fantastically more complex in the last decade. Gone are the days\
      \ of the 8-bits, the 16-bits, the 640k limits, the time when you could fit multiple\
      \ games on a single floppy. This complexity has given rise to new genres (clearly\
      \ the FPS genre couldn't exist before 3D could really handle it), birth to online\
      \ gaming, and an evolutionary step in new and more powerful bugs.\n\nThe term\
      \ \"bug\" in conjunction with computing comes from the old days when computers\
      \ were behemoth machines with rows of lights and pretty things to attract a\
      \ creature such as a moth. Indeed, at one point a moth flew into the computer,\
      \ died, conflicted with the delicate hardware and become the world's first real\
      \ \"bug\" in computing. These days the bugs are much less literal, but much\
      \ more evil in nature. It stands to figure that code that is thousands, if not\
      \ millions, of lines long is more vulnerable to weary days when three digits\
      \ was more than enough to count the program.\n\nConsider your average FPS mod.\
      \ Most mods these days are either interpreted code (such as UnrealScript) or\
      \ native code (such as C++) added on to a pre-existing engine. In the former,\
      \ there are now two languages at least and in either case their is usually some\
      \ kind of interface the mod is using. Move backwards from this point to the\
      \ original game, it has sections of code to handle 2D graphics such as textures\
      \ and sprites, sections to handle the 3D engine, sections to handle in-betweeners\
      \ like effects and particles, sections to handle the definitions of various\
      \ actors within the engine (weapons, armor, ammo, health), AI code, netcode,\
      \ menu code, and so on. Considering this is a commercial product, it's usually\
      \ safe to assume that it's fairly stable...although every modern game these\
      \ days has at least one - if not four or five or even ten - patches after release.\
      \ By itself, the game is a complicated network of subsystems which can have\
      \ small flaws and bugs which don't ruin or may not even be usually noticeable\
      \ in the game.\n\nNow enter the unsuspecting mod. The nice thing about mods\
      \ is that a lot of the real rocket scientist stuff, like particle systems, animation\
      \ systems and 3D rendering is done for you. The problem with mods is that as\
      \ you add your own sections of actors, AI, netcode, menu code, and so on - you\
      \ are not only opening the chances for new bugs but are also possibly weakened\
      \ by existing flaws in the system. While one programmers shortcut late in writing\
      \ the spawn routine for a weapon may have no impact in the commercial game,\
      \ it may have catastrophic events on the person who tries to subclass that weapon.\n\
      \nIt's kinda like a reverse house of cards. You keep stacking more and more\
      \ on top and there is much greater chance of collapse. Worse, few mod teams\
      \ have the resources to have a hardcore beta testing staff. Beta testing is\
      \ one of those unsung arts of computing programming, because as my old Quality\
      \ Assurance Manager used to tell me, it should all be about prevention - not\
      \ fixing things at 3AM before handing stuff off to a client.\n\nMods have this\
      \ odd tendency to use beta testing as a defense. Counter-Strike started it,\
      \ refusing to leave beta until was forced by Sierra when it commercialized.\
      \ Alpha and Beta's are (by definition) not supposed to be public. Alpha essentially\
      \ means work has begun. Nothing's really working, just getting things started.\
      \ Beta is supposed to be the testing right before a public release, meaning\
      \ the feature set is closed and you aren't adding any more cards to the stack.\
      \ Test, find bug, fix, rinse, wash, repeat.\n\nThe problem is unless you have\
      \ a lot of dedicated testers, bugs these days can be hard to find. In fact,\
      \ in the many betas I had with Freehold , there were several bugs the testers\
      \ found that I didn't even know were bugs until I tried to reproduce them. Sometimes\
      \ they just sounded like weird quirks in the gameplay, or something I *knew*\
      \ I had fixed a version or two ago. Especially in object orientated code, bugs\
      \ can be like viruses - they'll mutate, hide, and arise again. A bug I just\
      \ found in the preview of Freehold just released this week was one I thought\
      \ I had fixed last week (don't worry - it's killed now in the internal release...I\
      \ swear...I think).\n\nHere are a few tips when trying to beta test with a small\
      \ team:\n\n-KISS stands for Keep It Simple, Stupid. It's a mantra for coders\
      \ to know when to hit themselves on the head and not overengineer something.\
      \ Out of all the problems with designing and coding an overly complicated system,\
      \ the chief one is that is opens up the possibility of conflicts and makes problem\
      \ resolution harder.-\n\n-Either don't test your own code or take some time\
      \ away before testing it. While a lot of coders will write, compile, test, tweak,\
      \ repeat for day to day work, it's not the best testing. It's like trying to\
      \ edit your own term paper right after writing it. You are so familiar with\
      \ the work that you'll glance right over the flaws. Another pair of eyes is\
      \ essential, or at least giving yours a break.-\n\n-Write down the little things.\
      \ Keep track of the tiny flaws as you notice them. It might seem trivial now,\
      \ but it could later cause a bigger problem.-\n\n-Regression, regression, regression.\
      \ Half the bugs I've caused in Freeholds were fixes for something else (including\
      \ the fore mentioned one). Test to make sure that you have not only fixed the\
      \ bug, but also test any code that the fix might be coming into contact with.\
      \ In the case of the sample bug, I made a fix in the game's ReduceDamage function,\
      \ but didn't completely test the Killed function.-\n\n-When it comes to gameplay,\
      \ majority rules. This isn't a rule - but a suggestion. Especially for teams\
      \ with only a couple of coders. Listen to other people playing the game when\
      \ it comes to non-programmatic bugs but possible design flaws. What's easy for\
      \ you may be completely impossible for a new user. Thanks to beta testers, I\
      \ changed buy rules, weapon features, item features and more. All concepts which\
      \ worked for me but probably would have infuriated someone else.\n\n-Finally\
      \ have fun. It's a game and a hobby after all.-\n\n==Fixing \"Patching the Beta\"\
      \ (ucc make 1.5)==\n\nColumn Changelog July.03.2003\n\n-Added link to Mychaeel's\
      \ excellent column on beta testing and modding in general: http://wiki.beyondunreal.com/wiki/Mychaeel/Modding_Etiquette.-\n\
      \n-Used Mychaeel's ideas as a connection to Unreal Wiki (http://wiki.beyondunreal.com/wiki/HomePage)\
      \ in general, noting that a shared community is a more reliable community. Completely\
      \ independent programming projects are more likely to have unseen bugs and creating\
      \ a more \"foolproof\" mod community starts with sharing development ideas,\
      \ libraries, code.-\n\n-Realized \"bug\" intro was trite, overused ... replaced\
      \ with brief history of QA in general.-\n\n-Noted that the \"other side\" to\
      \ community beta testing and bug fixing the is the possibility of inefficiency.\
      \ Urge new coders to seek out existing material on problems, bugs, ideas rather\
      \ than asking fresh (and possibly redudant) questions.-\n\n-Should question\
      \ the current \"tone\" of UT mod community - the odd quiet as everyone waits\
      \ the next codebase, wonder if there will be a kind of void for older UT efforts.\n\
      \n-Use above note to connect to fact that the new codebase may be elusive.-\n\
      \n-It will bring new bugs, new features, lose old ones ... language may be similar\
      \ but warn developers looking to port that it might not be so simple.-\n\n-Use\
      \ converting LightSaber to Longblade as a sample - different code for detecting\
      \ bot users, processing trace hits, animation routines ... end with \"what looks\
      \ the same on the outside might be a completely different beast on the inside.\
      \ Upcoming gametypes might mirror the classics (CTF, DM), but doesn't mean the\
      \ code will be the same.\n\n-Got rid shameless Freehold plug and replaced ending\
      \ with acknowledgement that the UT2k3 demo should (probably ... might?) be out\
      \ in a couple of weeks, and wonder how the removal of the original Unreal1 codebase\
      \ will impact the smaller mod projects.-\n\n-Put shameless Freehold plug back\
      \ in anyway. Note that the new preview will at least double the existing gametypes.\
      \ Use this to end with a teaser that next column will be all about evolution\
      \ in deathmatch gameplay.-\n\nOther [[Legacy:Ucc_make_columns|ucc_make_columns]]\n\
      \n''please reserve edits to minor changes and comments &ndash; RegularX''\n\n\
      ===GuestBook==="
  properties: []
  revId: 8979
name: "Legacy:Ucc Make Columns/1.4 Patching The Beta"
revision:
  revid: 8979
  parentid: 8980
  user: "RegularX"
  timestamp: 1065197633.000000000
  comment: "*"
timestamp: 1669083278.527621000
