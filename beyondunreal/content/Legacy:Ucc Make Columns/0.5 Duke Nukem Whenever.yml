---
parse:
  title: "Legacy:Ucc Make Columns/0.5 Duke Nukem Whenever"
  text:
    text: "<h3><span class=\"mw-headline\" id=\"ucc_make_.280.5.29\">ucc make (0.5)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever?section=1\" title=\"\
      Edit section: ucc make (0.5)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>part of the <a href=\"/Legacy:Ucc_make_columns\" title=\"\
      Legacy:Ucc make columns\" class=\"mw-redirect\">ucc_make_columns</a> series...</p>\n\
      <h2><span class=\"mw-headline\" id=\"Duke_Nukem_Whenever\">Duke Nukem Whenever</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever?section=2\" title=\"\
      Edit section: Duke Nukem Whenever\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>DaiKatana has become a boogeyman for the gaming industry,\
      \ and especially for first person shooters. It is the portrait of a game that\
      \ becomes over-hyped and over-developed. Years in the making, Daikatana was\
      \ closely followed by the gaming media, and Ion Storm constantly made the stance\
      \ that they were making the \"next great thing\".</p>\n<p>id Software, of which\
      \ Daikatana's creator John Romero had left in something of a media frenzy, essentially\
      \ coined the term \"when it's done\" in reference to software release dates.\
      \ For the most part, they have a good track record of releasing games in a sensible\
      \ time frame. Quake, Quake II and Quake III Arena are practically calendar dates\
      \ for marking the evolution of 3D gaming. This development-orientated method\
      \ of releasing games has it's own hazards.</p>\n<p>Daikatana was supposed to\
      \ be the next logical step for FPS games. Romero, in a GameSpot interview, said\
      \ that the game would have \"a great storyline and plenty of hardcore action\
      \ to keep the most jaded FPS gamer happy\". Everyone knew that the genre's days\
      \ of running, gunning and finding keys were numbered, and who better to lead\
      \ the charge into lifting the games out of that muck than one of the men responsible\
      \ for the genre's popularity in the first place.</p>\n<p>Well, Valve for one.\
      \ Half-Life really gave us our taste of in-game story telling for an FPS. Half-Life\
      \ could be considered Daikatana's opposing force (no pun intended). Also delayed\
      \ well beyond it's original date, Half-Life was a heavily modified Quake (not\
      \ Quake II as often reported - though the two engines share some things) game\
      \ which had more in-depth characters, story and puzzles than any FPS proceeding.\
      \ Instantly, the bar was moved for the genre.</p>\n<p>Half-Life, though, had\
      \ an early start. Perhaps a better example of how Daikatana was trumped is Deus\
      \ Ex. This Unreal-powered game brought to bear the combination of role-playing\
      \ and action that Thief and System Shock had been building. For Deus Ex, Warren\
      \ Spector and some of the Looking Glass Studios, the original creators of the\
      \ Thief and System Shock games, had come to Ion Storm alongside John Romero.</p>\n\
      <p>Deus Ex was released (more or less) as scheduled, and became a critically\
      \ acclaimed game and a huge win for Ion Storm.</p>\n<p>Daikatana, running years\
      \ behind, was released to almost global panning, flaming and bargain bin destiny.</p>\n\
      <p>Duke Nukem Forever, running years late and having undergone multiple engine\
      \ shifts (now using a build of the Unreal engine, although nobody seem sure\
      \ of the feature set it's capable of), is expected to be released this year.\
      \ If Legend and Digital Extremes stay on their task, DNF sure better.</p>\n\
      <p>In the post-Medal of Honor landscape, Unreal II looks to be the shooter of\
      \ the coming year. Legend is promising a captivating story, ground breaking\
      \ graphics, and a solid multiplay. Digital Extremes is looking to bring us an\
      \ even more engaging multiplayer title in the form of Unreal Tournament II.</p>\n\
      <p>Can Duke Nukem Forever survive?</p>\n<p>What does this have to do with modding?</p>\n\
      <p>When it comes to the Unreal modding scene, and I'm guessing the Quake modding\
      \ scene as well, everyone is looking at the next great thing. Mods left and\
      \ right are postponing development until the material for the new engines are\
      \ released. Outright, there's nothing wrong with that ... particularly if the\
      \ mod knows they are relying on features which the new games will provide (vehicles\
      \ are an excellent example).</p>\n<p>DNF won't be using the latest engine, however,\
      \ and yes I think it can still survive. Gameplay is not always determined by\
      \ the engine. The engine provides a playing field, but within that field developers\
      \ are allowed to create their own rules.</p>\n<p>Duke Nukem 3D, which brought\
      \ Duke to the mass market, was not that technically advanced for it's time.\
      \ It did have a great lead character (Evil Dead controversy aside), a storyline\
      \ with serious comic book appeal, and some wonderful design elements to it.\
      \ The most popular mod ever, Counter-Strike, is still using the Half-Life engine,\
      \ and looks like it will be attached to it through the coming year at least\
      \ (unless the Team Fortress 2 engine emerges from the shadows, but that's another\
      \ column on it's own).</p>\n<p>If DNF provides compelling gameplay, people will\
      \ play it. Since it may not have the eye candy of Unreal II, it had better be\
      \ able to at least go toe to toe when it comes to the rest of the game design.\
      \ The longer it waits, the better it will need to be. If DNF comes out after\
      \ Unreal II with yesterday's engine and yesterday's gameplay, then the way of\
      \ the Daikatana it may go.</p>\n<p>Only the developers of a mod can decide when\
      \ to release it and how. The engine is one factor, but so is the gameplay. Develop\
      \ without the tools required, the mod runs the risk of never being completed.\
      \ Waiting too long to develop runs the risk never really getting started, or\
      \ becoming obsolete so fast it doesn't matter.</p>\n<p>My suggestion is to always\
      \ develop what you are reasonably able to. I plan on porting the Freehold code\
      \ to the new engine at some point, but I'm not waiting until later this year\
      \ to start coding, as much of the gameplay would remain anyway. Aside from coding,\
      \ there are conceptual designs that can be drawn up for weapons, characters,\
      \ items, etc. Sometimes it's best not to think about a game in terms of it's\
      \ technology, but just in terms of the game itself. Waiting for the next great\
      \ thing can be a long wait, and waiting can kill a mod.</p>\n<p>Let Daikatana\
      \ be your boogeyman. The timeline of development can have as much of an impact\
      \ on the game as the game itself.</p>\n<p>Other <a href=\"/Legacy:Ucc_make_columns\"\
      \ title=\"Legacy:Ucc make columns\" class=\"mw-redirect\">ucc_make_columns</a></p>\n\
      <p><i>please reserve edits to minor changes and comments – RegularX</i></p>\n\
      <h3><span class=\"mw-headline\" id=\"GuestBook\">GuestBook</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever?section=3\"\
      \ title=\"Edit section: GuestBook\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.029 seconds\n\
      Real time usage: 0.030 seconds\nPreprocessor visited node count: 10/1000000\n\
      Preprocessor generated node count: 16/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3500-0!*!0!!*!*!* and\
      \ timestamp 20221122021441 and revision id 8977\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Ucc make columns"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "3"
    line: "ucc make (0.5)"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever"
    byteoffset: 0
    anchor: "ucc_make_.280.5.29"
  - toclevel: 1
    level: "2"
    line: "Duke Nukem Whenever"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever"
    byteoffset: 90
    anchor: "Duke_Nukem_Whenever"
  - toclevel: 2
    level: "3"
    line: "GuestBook"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Ucc_Make_Columns/0.5_Duke_Nukem_Whenever"
    byteoffset: 5790
    anchor: "GuestBook"
  displaytitle: "Legacy:Ucc Make Columns/0.5 Duke Nukem Whenever"
  iwlinks: []
  wikitext:
    text: "===ucc make (0.5)===\n\npart of the [[Legacy:Ucc_make_columns|ucc_make_columns]]\
      \ series...\n\n==Duke Nukem Whenever==\n\nDaiKatana has become a boogeyman for\
      \ the gaming industry, and especially for first person shooters. It is the portrait\
      \ of a game that becomes over-hyped and over-developed. Years in the making,\
      \ Daikatana was closely followed by the gaming media, and Ion Storm constantly\
      \ made the stance that they were making the \"next great thing\".\n\nid Software,\
      \ of which Daikatana's creator John Romero had left in something of a media\
      \ frenzy, essentially coined the term \"when it's done\" in reference to software\
      \ release dates. For the most part, they have a good track record of releasing\
      \ games in a sensible time frame. Quake, Quake II and Quake III Arena are practically\
      \ calendar dates for marking the evolution of 3D gaming. This development-orientated\
      \ method of releasing games has it's own hazards.\n\nDaikatana was supposed\
      \ to be the next logical step for FPS games. Romero, in a GameSpot interview,\
      \ said that the game would have \"a great storyline and plenty of hardcore action\
      \ to keep the most jaded FPS gamer happy\". Everyone knew that the genre's days\
      \ of running, gunning and finding keys were numbered, and who better to lead\
      \ the charge into lifting the games out of that muck than one of the men responsible\
      \ for the genre's popularity in the first place.\n\nWell, Valve for one. Half-Life\
      \ really gave us our taste of in-game story telling for an FPS. Half-Life could\
      \ be considered Daikatana's opposing force (no pun intended). Also delayed well\
      \ beyond it's original date, Half-Life was a heavily modified Quake (not Quake\
      \ II as often reported - though the two engines share some things) game which\
      \ had more in-depth characters, story and puzzles than any FPS proceeding. Instantly,\
      \ the bar was moved for the genre.\n\nHalf-Life, though, had an early start.\
      \ Perhaps a better example of how Daikatana was trumped is Deus Ex. This Unreal-powered\
      \ game brought to bear the combination of role-playing and action that Thief\
      \ and System Shock had been building. For Deus Ex, Warren Spector and some of\
      \ the Looking Glass Studios, the original creators of the Thief and System Shock\
      \ games, had come to Ion Storm alongside John Romero.\n\nDeus Ex was released\
      \ (more or less) as scheduled, and became a critically acclaimed game and a\
      \ huge win for Ion Storm.\n\nDaikatana, running years behind, was released to\
      \ almost global panning, flaming and bargain bin destiny.\n\nDuke Nukem Forever,\
      \ running years late and having undergone multiple engine shifts (now using\
      \ a build of the Unreal engine, although nobody seem sure of the feature set\
      \ it's capable of), is expected to be released this year. If Legend and Digital\
      \ Extremes stay on their task, DNF sure better.\n\nIn the post-Medal of Honor\
      \ landscape, Unreal II looks to be the shooter of the coming year. Legend is\
      \ promising a captivating story, ground breaking graphics, and a solid multiplay.\
      \ Digital Extremes is looking to bring us an even more engaging multiplayer\
      \ title in the form of Unreal Tournament II.\n\nCan Duke Nukem Forever survive?\n\
      \nWhat does this have to do with modding?\n\nWhen it comes to the Unreal modding\
      \ scene, and I'm guessing the Quake modding scene as well, everyone is looking\
      \ at the next great thing. Mods left and right are postponing development until\
      \ the material for the new engines are released. Outright, there's nothing wrong\
      \ with that ... particularly if the mod knows they are relying on features which\
      \ the new games will provide (vehicles are an excellent example).\n\nDNF won't\
      \ be using the latest engine, however, and yes I think it can still survive.\
      \ Gameplay is not always determined by the engine. The engine provides a playing\
      \ field, but within that field developers are allowed to create their own rules.\n\
      \nDuke Nukem 3D, which brought Duke to the mass market, was not that technically\
      \ advanced for it's time. It did have a great lead character (Evil Dead controversy\
      \ aside), a storyline with serious comic book appeal, and some wonderful design\
      \ elements to it. The most popular mod ever, Counter-Strike, is still using\
      \ the Half-Life engine, and looks like it will be attached to it through the\
      \ coming year at least (unless the Team Fortress 2 engine emerges from the shadows,\
      \ but that's another column on it's own).\n\nIf DNF provides compelling gameplay,\
      \ people will play it. Since it may not have the eye candy of Unreal II, it\
      \ had better be able to at least go toe to toe when it comes to the rest of\
      \ the game design. The longer it waits, the better it will need to be. If DNF\
      \ comes out after Unreal II with yesterday's engine and yesterday's gameplay,\
      \ then the way of the Daikatana it may go.\n\nOnly the developers of a mod can\
      \ decide when to release it and how. The engine is one factor, but so is the\
      \ gameplay. Develop without the tools required, the mod runs the risk of never\
      \ being completed. Waiting too long to develop runs the risk never really getting\
      \ started, or becoming obsolete so fast it doesn't matter.\n\nMy suggestion\
      \ is to always develop what you are reasonably able to. I plan on porting the\
      \ Freehold code to the new engine at some point, but I'm not waiting until later\
      \ this year to start coding, as much of the gameplay would remain anyway. Aside\
      \ from coding, there are conceptual designs that can be drawn up for weapons,\
      \ characters, items, etc. Sometimes it's best not to think about a game in terms\
      \ of it's technology, but just in terms of the game itself. Waiting for the\
      \ next great thing can be a long wait, and waiting can kill a mod.\n\nLet Daikatana\
      \ be your boogeyman. The timeline of development can have as much of an impact\
      \ on the game as the game itself.\n\nOther [[Legacy:Ucc_make_columns|ucc_make_columns]]\n\
      \n''please reserve edits to minor changes and comments &ndash; RegularX''\n\n\
      ===GuestBook==="
  properties: []
  revId: 8977
name: "Legacy:Ucc Make Columns/0.5 Duke Nukem Whenever"
revision:
  revid: 8977
  parentid: 0
  user: "RegularX"
  timestamp: 1065196931.000000000
  comment: "added \"Duke Nukem Whenever\""
timestamp: 1669083282.110812000
