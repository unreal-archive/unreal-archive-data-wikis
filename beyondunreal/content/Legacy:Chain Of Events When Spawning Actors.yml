---
parse:
  title: "Legacy:Chain Of Events When Spawning Actors"
  text:
    text: "<p>This page describes what happens when an actor is created via the Spawn()\
      \ method on a server or client or replicated to a client in a network game.\
      \ It lists the engine events and the UnrealScript functions subsequently called\
      \ by those events and gives a short description how these events and functions\
      \ could be used.</p>\n<p><i>This page is based on a snipped of native UT2004\
      \ code posted on the UT2003Mods mailing list. Most parts will be similar in\
      \ older engine versions, but there might be important differences in the functions\
      \ called by these events.</i></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw4\">Spawn</span><span class=\"br0\">(</span> \n  SpawnClass,\
      \      <span class=\"co1\">// class of actor to spawn</span>\n  SpawnOwner,\
      \      <span class=\"co1\">// what to set the new actor's Owner to</span>\n\
      \  SpawnTag,        <span class=\"co1\">// what to set its Tag to</span>\n \
      \ SpawnLocation,   <span class=\"co1\">// new actor's Location</span>\n  SpawnRotation\
      \    <span class=\"co1\">// new actor's Rotation </span>\n<span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Before_The_Actor_Is_Created\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Before The Actor Is Created</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Chain_Of_Events\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Chain Of Events</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Initial_Properties\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Initial Properties</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Actor_Owner\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Actor Owner</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Karma_Physics_Initialization_.28UT2003.29\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Karma Physics\
      \ Initialization <i>(UT2003)</i></span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Actor.Spawned.28.29_.28UT.29\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">Actor.Spawned() <i>(UT)</i></span></a></li>\n<li class=\"\
      toclevel-2 tocsection-7\"><a href=\"#Actor.PreBeginPlay.28.29\"><span class=\"\
      tocnumber\">2.5</span> <span class=\"toctext\">Actor.PreBeginPlay()</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-8\"><a href=\"#...in_UT2003\"><span\
      \ class=\"tocnumber\">2.5.1</span> <span class=\"toctext\">...in UT2003</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-9\"><a href=\"#...in_UT\"><span class=\"tocnumber\"\
      >2.5.2</span> <span class=\"toctext\">...in UT</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Actor.BeginPlay.28.29\"><span\
      \ class=\"tocnumber\">2.6</span> <span class=\"toctext\">Actor.BeginPlay()</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#Actor_Zone_and_PhysicsVolume\"\
      ><span class=\"tocnumber\">2.7</span> <span class=\"toctext\">Actor Zone and\
      \ PhysicsVolume</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"\
      #Encroachment_Check\"><span class=\"tocnumber\">2.8</span> <span class=\"toctext\"\
      >Encroachment Check</span></a></li>\n<li class=\"toclevel-2 tocsection-13\"\
      ><a href=\"#Actor.PostBeginPlay.28.29\"><span class=\"tocnumber\">2.9</span>\
      \ <span class=\"toctext\">Actor.PostBeginPlay()</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-14\"><a href=\"#Actor.SetInitialState.28.29\"><span class=\"\
      tocnumber\">2.10</span> <span class=\"toctext\">Actor.SetInitialState()</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#Actor_Base\"><span class=\"\
      tocnumber\">2.11</span> <span class=\"toctext\">Actor Base</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-16\"><a href=\"#Actor.PostNetBeginPlay.28.29\"\
      ><span class=\"tocnumber\">2.12</span> <span class=\"toctext\">Actor.PostNetBeginPlay()</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#SpawnNotify.SpawnNotification.28.29_.28UT.29\"\
      ><span class=\"tocnumber\">2.13</span> <span class=\"toctext\">SpawnNotify.SpawnNotification()\
      \ <i>(UT)</i></span></a></li>\n<li class=\"toclevel-2 tocsection-18\"><a href=\"\
      #Actor.Tag\"><span class=\"tocnumber\">2.14</span> <span class=\"toctext\">Actor.Tag</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-19\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Before_The_Actor_Is_Created\"\
      >Before The Actor Is Created</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=1\"\
      \ title=\"Edit section: Before The Actor Is Created\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>Before an actual <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> object is created the native\
      \ ULevel::SpawnActor() function checks that a class was passed to it and that\
      \ the class is not abstract and a subclass of actor. Also this class may neither\
      \ have <tt>bStatic</tt> nor <tt>bNoDelete</tt> set to True. The class also won't\
      \ be spawned when its <tt>bHighDetail</tt> property is set to True and the <a\
      \ href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">LevelInfo</a>'s <tt>DetailMode</tt>\
      \ is set to <tt>DM_Low</tt> or the LevelInfo indicates a low framerate with\
      \ <tt>bDropDetail</tt> or the actor is spawned on a dedicated server.</p>\n\
      <p>The final check before creating the actor makes sure the actor fits in the\
      \ location it should be spawned at. This check will be run for actor classes\
      \ that collide with the world and for actors spawned on the server with <tt>bCollideWhenPlacing=True</tt>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Chain_Of_Events\">Chain Of Events</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=2\" title=\"\
      Edit section: Chain Of Events\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>These are the events directly called from native code\
      \ after the actor has been created. See the sections below for more details\
      \ about functions called by these events. For actors created with the Spawn()\
      \ function on this machine (i.e. not actors created because they were received\
      \ on a client) all these events are executed from the Spawn() function.</p>\n\
      <ol>\n<li>the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s initial\
      \ properties are set:\n<ul>\n<li>the actor's Tag is initialized with the actor's\
      \ class name</li>\n<li>the actor's Region property (especially its Zone) is\
      \ initialized with the level's <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\"\
      >LevelInfo</a> PointRegion</li>\n<li>the actor's Level property is set to the\
      \ level's <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">LevelInfo</a></li>\n\
      <li>the actor's XLevel property is set to the Level object itself</li>\n<li>if\
      \ this actor was replicated to a client, the actor's Role and RemoteRole are\
      \ exchanged</li>\n<li>the actor's Brush property is set to None if it has one,\
      \ \"because moving brushes are not duplicatable\"</li>\n<li>the actor's Location\
      \ and Rotation are set from the Spawn parameters</li>\n<li>the actor is added\
      \ to the collision hash if its <tt>bCollideActors</tt> is set to True (used\
      \ e.g. by the CollidingActors and VisibleCollidingActors <a href=\"/Legacy:Iterator\"\
      \ title=\"Legacy:Iterator\">iterator</a> functions) If the actor is touching\
      \ anything, its Touch() event is called</li>\n<li>the actor's PhysicsVolume\
      \ is set to the <a href=\"/Legacy:DefaultPhysicsVolume\" title=\"Legacy:DefaultPhysicsVolume\"\
      >DefaultPhysicsVolume</a></li>\n</ul>\n</li>\n<li>the <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>'s Owner is set from the Spawn parameters</li>\n\
      <li>the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s Instigator\
      \ is set to the spawning actor's Instigator</li>\n<li>Karma physics are initialized\
      \ for the actor</li>\n<li>(in UT the actor's Spawned() event is called, in later\
      \ engine versions this event is no longer available in UnrealScript)</li>\n\
      <li>the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s PreBeginPlay()\
      \ event is called</li>\n<li>the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a>'s BeginPlay() event is called</li>\n<li>the <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>'s actual zone and PhysicsVolume are set</li>\n\
      <li>encroachment (overlapping with other actors' collision cylinders) is checked\
      \ for the actor</li>\n<li>the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a>'s PostBeginPlay() event is called</li>\n<li>the <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a>'s SetInitialState() event is called</li>\n\
      <li>the actor's base is set if it's None and the actor has <tt>bCollideActors</tt>\
      \ and <tt>bShouldBaseAtStartup</tt> set to True and its Physics are set to either\
      \ PHYS_None or PHYS_Rotating</li>\n<li>the <a href=\"/Legacy:Actor\" title=\"\
      Legacy:Actor\">Actor</a>'s PostNetBeginPlay() event is called if this isn't\
      \ a replicated actor (i.e. it was created on this machine with the Spawn() function)</li>\n\
      <li>(in UT now all <a href=\"/Legacy:SpawnNotify\" title=\"Legacy:SpawnNotify\"\
      >SpawnNotify</a> actors receive a SpawnNotification() event if this actor's\
      \ class is a subclass of the class specified in their ActorClass property, in\
      \ later engine versions SpawnNotifies are no longer available)</li>\n<li>the\
      \ <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>'s actual Tag property\
      \ is set</li>\n</ol>\n<p>The chain of events is halted if the actor's <tt>bDeleteMe</tt>\
      \ property becomes True during the initialization, i.e. when any of the events\
      \ or subsequently called functions destroys the actor.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Initial_Properties\">Initial Properties</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=3\"\
      \ title=\"Edit section: Initial Properties\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The actor properties Tag, Region, Level, XLevel, Brush,\
      \ Location, Rotation and PhysicsVolume are set before any UnrealScript is executed.\
      \ Note that Region.Zone is set to the <a href=\"/Legacy:LevelInfo\" title=\"\
      Legacy:LevelInfo\">LevelInfo</a>, PhysicsVolume is set to the <a href=\"/Legacy:DefaultPhysicsVolume\"\
      \ title=\"Legacy:DefaultPhysicsVolume\">DefaultPhysicsVolume</a> and Tag is\
      \ set to the actor's class name.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Actor_Owner\">Actor Owner</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=4\"\
      \ title=\"Edit section: Actor Owner\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Before the spawned actor can execute any UnrealScript\
      \ code its Owner is set. This will call the new owner's GainedChild() event\
      \ which is the first piece of UnrealScript code executed after the actor was\
      \ created. At this point the actor's Owner is still None and also its GetStateName()\
      \ method returns 'None'.</p>\n<p>After GainedChild() returns the spawned actor's\
      \ Instigator is set to the spawning actor's Instigator. (Not the new Owner's\
      \ Instigator!)</p>\n<h3><span class=\"mw-headline\" id=\"Karma_Physics_Initialization_.28UT2003.29\"\
      >Karma Physics Initialization <i>(UT2003)</i></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=5\"\
      \ title=\"Edit section: Karma Physics Initialization (UT2003)\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><i>Does this call\
      \ any UnrealScript events?</i></p>\n<h3><span class=\"mw-headline\" id=\"Actor.Spawned.28.29_.28UT.29\"\
      >Actor.Spawned() <i>(UT)</i></span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=6\"\
      \ title=\"Edit section: Actor.Spawned() (UT)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In UT there is the Spawned() event which is called\
      \ only for actors created via the Spawn() function, not for actors placed by\
      \ mappers. This is the first UnrealScript event called for the newly spawned\
      \ actor and allows to execute code before the <a href=\"/Legacy:GameInfo\" title=\"\
      Legacy:GameInfo\">GameInfo</a> and the mutators can modify the actor.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Actor.PreBeginPlay.28.29\">Actor.PreBeginPlay()</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=7\" title=\"\
      Edit section: Actor.PreBeginPlay()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>At this point the Owner is properly set, but the actor's\
      \ GetStateName() method will return the actor's class name.</p>\n<h4><span class=\"\
      mw-headline\" id=\"...in_UT2003\">...in UT2003</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=8\"\
      \ title=\"Edit section: ...in UT2003\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>If the actor has <tt>bGameRelevant == False</tt> and\
      \ this event is not executed on a client, the game's base <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">mutator</a>'s CheckRelevance() function is called.</p>\n\
      <p>CheckRelevance() first calls the base mutator's AlwaysRelevant() function\
      \ which recursively calls the other mutators' AlwaysRelevant() functions. If\
      \ this function returns True the actor is concidered game relevant and CheckRelevance()\
      \ returns True resulting in the Actor continuing to exist.</p>\n<p>If AlwaysRelevant()\
      \ returns False, the base mutator's IsRelevant() function is called. This function\
      \ calls the mutator's CheckReplacement() function and returns its result if\
      \ it's False. Otherwise IsRelevant() returns the result of the next mutator's\
      \ IsRelevant() function.</p>\n<p>Finally the result of the base mutator's IsRelevant()\
      \ function is returned by CheckRelevance() and again, if that result is True\
      \ the actor will continue to exist, otherwise it will destroy itself.</p>\n\
      <h4><span class=\"mw-headline\" id=\"...in_UT\">...in UT</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=9\"\
      \ title=\"Edit section: ...in UT\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>If the actor has <tt>bGameRelevant == False</tt> and\
      \ this event is not executed on a client, the <a href=\"/Legacy:GameInfo\" title=\"\
      Legacy:GameInfo\">GameInfo</a>'s IsRelevant() function is called.</p>\n<p>IsRelevant()\
      \ first calls the base mutator's AlwaysKeep() function which recursively calls\
      \ the other mutators' AlwaysKeep() functions. If this function returns True\
      \ the actor is considered game relevant and GameInfo.IsRelevant() returns True\
      \ resulting in the Actor continuing to exist.</p>\n<p>If AlwaysKeep() returns\
      \ False, the base <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\">mutator</a>'s\
      \ IsRelevant() function is called. This function calls the mutator's CheckReplacement()\
      \ function and returns its result if it's False. Otherwise IsRelevant() returns\
      \ the result of the next mutator's IsRelevant() function.</p>\n<p>If the base\
      \ mutator's IsRelevant() function returns False the GameInfo's IsRelevant()\
      \ function also returns False and the actor destroys itself. Otherwise if the\
      \ bSuperRelevant property is set to 1 GameInfo.IsRelevant() returns True resulting\
      \ in the Actor continuing to exist.</p>\n<p>If the base mutator's IsRelevant()\
      \ function returns True but the bSuperRelevant property is not set to 1 the\
      \ GameInfo's IsRelevant() function checks whether the actor may appear in the\
      \ current difficulty level, if it's a \"monster\" (a non-player <a href=\"/Legacy:Pawn_(UT)\"\
      \ title=\"Legacy:Pawn (UT)\">Pawn (UT)</a>) and if there's a random chance for\
      \ the actor to not appear in the game (<tt>OddsOfAppearing</tt>). The GameInfo.IsRelevant()\
      \ function will also update the number of secret goals, item goals and kill\
      \ goals before returning True and allowing the actor to exist.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Actor.BeginPlay.28.29\">Actor.BeginPlay()</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=10\" title=\"\
      Edit section: Actor.BeginPlay()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This event is called after an Actor is concidered\
      \ \"relevant\" for this game, i.e. no <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\"\
      >Mutator</a> wanted to get rid of it.</p>\n<p>Most actors don't use this event,\
      \ but if you're looking for an event that is called before the actor is initialized,\
      \ but after the mutator checks are done, then this is the place for you.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Actor_Zone_and_PhysicsVolume\">Actor Zone\
      \ and PhysicsVolume</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=11\"\
      \ title=\"Edit section: Actor Zone and PhysicsVolume\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>At this point the <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>.Region.Zone value becomes valid.\
      \ This event also causes the ZoneChange() event to be called, which sees Region.Zone\
      \ still as the <a href=\"/Legacy:LevelInfo\" title=\"Legacy:LevelInfo\">LevelInfo</a>\
      \ and the actual zone is passed as the NewZone parameter.</p>\n<p>After the\
      \ zone the PhysicsVolume value becomes valid. This event also causes the PhysicsVolumeChange()\
      \ event to be called, which sees PhysicsVolume still as the <a href=\"/Legacy:DefaultPhysicsVolume\"\
      \ title=\"Legacy:DefaultPhysicsVolume\">DefaultPhysicsVolume</a> and the actual\
      \ PhysicsVolume is passed as the NewVolume parameter.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Encroachment_Check\">Encroachment Check</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=12\"\
      \ title=\"Edit section: Encroachment Check\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Encroachment is when two actors in the collision hash\
      \ overlap. In UnrealScript there is the EncroachingOn() event which returns\
      \ whether the overlapping collision hulls with another actor actually needs\
      \ to be handled and the EncroachedBy() event which is called for the other actor\
      \ when EncroachingOn() returned True. The newly spawned actor will be destroyed\
      \ if other colliding actors detect encroachment with this actor.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Actor.PostBeginPlay.28.29\">Actor.PostBeginPlay()</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=13\" title=\"\
      Edit section: Actor.PostBeginPlay()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Most actors use PostBeginPlay() to initialize their\
      \ UnrealScript values. The actor's PhysicsVolume and Zone are valid but the\
      \ actor is not yet in any state.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Actor.SetInitialState.28.29\">Actor.SetInitialState()</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=14\"\
      \ title=\"Edit section: Actor.SetInitialState()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>At this point the actor is concidered \"initialized\"\
      \ by the engine (bScriptInitialized is set to True in this event) and the actor's\
      \ initial state is set. If the <a href=\"/Legacy:InitialState\" title=\"Legacy:InitialState\"\
      >InitialState</a> property is set, it will be used, otherwise the actor goes\
      \ to its auto state. Since SetInitialState() is a <a href=\"/Legacy:Simulated_Function\"\
      \ title=\"Legacy:Simulated Function\">simulated function</a> by default this\
      \ happens on server and clients.</p>\n<p>This event uses GotoState to change\
      \ the state, so during its executing the initial state's BeginState() event\
      \ is called. The state's state code will however not yet start executing at\
      \ this point. This will happen after all the events described on this page have\
      \ finished doing their work.</p>\n<h3><span class=\"mw-headline\" id=\"Actor_Base\"\
      >Actor Base</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=15\"\
      \ title=\"Edit section: Actor Base\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Actors with without a Base, <tt>bCollideActors = true</tt>\
      \ and <tt>bShouldBaseAtStartup = true</tt> which use either PHYS_None or PHYS_Rotating\
      \ try to find a base for themselves.</p>\n<p>When a base is set the actor's\
      \ BaseChange() event will be called.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Actor.PostNetBeginPlay.28.29\">Actor.PostNetBeginPlay()</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=16\"\
      \ title=\"Edit section: Actor.PostNetBeginPlay()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>PostNetBeginPlay() will only be called for actors\
      \ created with the Spawn() function. For replicated actors this event will be\
      \ called (if it's marked as \"simulated\") by the netcode when the initial variables\
      \ have been replicated. That means you don't know when it'll happen... but eventually&#160;:)</p>\n\
      <h3><span class=\"mw-headline\" id=\"SpawnNotify.SpawnNotification.28.29_.28UT.29\"\
      >SpawnNotify.SpawnNotification() <i>(UT)</i></span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=17\"\
      \ title=\"Edit section: SpawnNotify.SpawnNotification() (UT)\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In UT there are\
      \ special <a href=\"/Legacy:SpawnNotify\" title=\"Legacy:SpawnNotify\">SpawnNotify</a>\
      \ actors which receive a SpawnNotification() event if the new actor is a subclass\
      \ of their configured ActorClass after the new actor has been initialized. The\
      \ <a href=\"/Legacy:SpawnNotify\" title=\"Legacy:SpawnNotify\">SpawnNotify</a>\
      \ can modify the actor or even spawn a completely different actor which will\
      \ be returned by the Spawn() function instead of this actor.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Actor.Tag\">Actor.Tag</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=18\"\
      \ title=\"Edit section: Actor.Tag\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The actor's <a href=\"/Legacy:Tag\" title=\"Legacy:Tag\"\
      >Tag</a> property is set to the value passed to the Spawn() function after all\
      \ initialization events have been executed. The first place where you can access\
      \ its final value is the code executed after the Spawn() function that created\
      \ this actor.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Chain_Of_Events_When_Spawning_Actors?section=19\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a></li>\n<li><a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">Creating Actors And Objects</a></li>\n\
      <li><a href=\"/Legacy:Chain_Of_Events_At_Level_Startup\" title=\"Legacy:Chain\
      \ Of Events At Level Startup\">Chain Of Events At Level Startup</a></li>\n<li><a\
      \ href=\"/Legacy:Destroying_Objects\" title=\"Legacy:Destroying Objects\">Destroying\
      \ Objects</a> (and Actors)</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.074 seconds\nReal time usage: 0.229 seconds\nPreprocessor visited\
      \ node count: 84/1000000\nPreprocessor generated node count: 100/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:844-0!*!0!!en!*!*\
      \ and timestamp 20221118003128 and revision id 46343\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:GameInfo"
  - ns: 100
    exists: true
    name: "Legacy:DefaultPhysicsVolume"
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:InitialState"
  - ns: 100
    exists: true
    name: "Legacy:Simulated Function"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:Destroying Objects"
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: true
    name: "Legacy:Chain Of Events At Level Startup"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Tag"
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:SpawnNotify"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Before The Actor Is Created"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 822
    anchor: "Before_The_Actor_Is_Created"
  - toclevel: 1
    level: "2"
    line: "Chain Of Events"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 1683
    anchor: "Chain_Of_Events"
  - toclevel: 2
    level: "3"
    line: "Initial Properties"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 4658
    anchor: "Initial_Properties"
  - toclevel: 2
    level: "3"
    line: "Actor Owner"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 5014
    anchor: "Actor_Owner"
  - toclevel: 2
    level: "3"
    line: "Karma Physics Initialization <i>(UT2003)</i>"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 5480
    anchor: "Karma_Physics_Initialization_.28UT2003.29"
  - toclevel: 2
    level: "3"
    line: "Actor.Spawned() <i>(UT)</i>"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 5575
    anchor: "Actor.Spawned.28.29_.28UT.29"
  - toclevel: 2
    level: "3"
    line: "Actor.PreBeginPlay()"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 5921
    anchor: "Actor.PreBeginPlay.28.29"
  - toclevel: 3
    level: "4"
    line: "...in UT2003"
    number: "2.5.1"
    index: "8"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 6065
    anchor: "...in_UT2003"
  - toclevel: 3
    level: "4"
    line: "...in UT"
    number: "2.5.2"
    index: "9"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 7029
    anchor: "...in_UT"
  - toclevel: 2
    level: "3"
    line: "Actor.BeginPlay()"
    number: "2.6"
    index: "10"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 8601
    anchor: "Actor.BeginPlay.28.29"
  - toclevel: 2
    level: "3"
    line: "Actor Zone and PhysicsVolume"
    number: "2.7"
    index: "11"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 8952
    anchor: "Actor_Zone_and_PhysicsVolume"
  - toclevel: 2
    level: "3"
    line: "Encroachment Check"
    number: "2.8"
    index: "12"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 9528
    anchor: "Encroachment_Check"
  - toclevel: 2
    level: "3"
    line: "Actor.PostBeginPlay()"
    number: "2.9"
    index: "13"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 9977
    anchor: "Actor.PostBeginPlay.28.29"
  - toclevel: 2
    level: "3"
    line: "Actor.SetInitialState()"
    number: "2.10"
    index: "14"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 10164
    anchor: "Actor.SetInitialState.28.29"
  - toclevel: 2
    level: "3"
    line: "Actor Base"
    number: "2.11"
    index: "15"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 10887
    anchor: "Actor_Base"
  - toclevel: 2
    level: "3"
    line: "Actor.PostNetBeginPlay()"
    number: "2.12"
    index: "16"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 11152
    anchor: "Actor.PostNetBeginPlay.28.29"
  - toclevel: 2
    level: "3"
    line: "SpawnNotify.SpawnNotification() <i>(UT)</i>"
    number: "2.13"
    index: "17"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 11479
    anchor: "SpawnNotify.SpawnNotification.28.29_.28UT.29"
  - toclevel: 2
    level: "3"
    line: "Actor.Tag"
    number: "2.14"
    index: "18"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 11913
    anchor: "Actor.Tag"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "19"
    fromtitle: "Legacy:Chain_Of_Events_When_Spawning_Actors"
    byteoffset: 12200
    anchor: "Related_Topics"
  displaytitle: "Legacy:Chain Of Events When Spawning Actors"
  iwlinks: []
  wikitext:
    text: "This page describes what happens when an actor is created via the Spawn()\
      \ method on a server or client or replicated to a client in a network game.\
      \ It lists the engine events and the UnrealScript functions subsequently called\
      \ by those events and gives a short description how these events and functions\
      \ could be used.\n\n''This page is based on a snipped of native UT2004 code\
      \ posted on the UT2003Mods mailing list. Most parts will be similar in older\
      \ engine versions, but there might be important differences in the functions\
      \ called by these events.''\n\n<uscript>\nSpawn( \n  SpawnClass,      // class\
      \ of actor to spawn\n  SpawnOwner,      // what to set the new actor's Owner\
      \ to\n  SpawnTag,        // what to set its Tag to\n  SpawnLocation,   // new\
      \ actor's Location\n  SpawnRotation    // new actor's Rotation \n);\n</uscript>\n\
      \n==Before The Actor Is Created==\n\nBefore an actual [[Legacy:Actor|Actor]]\
      \ object is created the native ULevel::SpawnActor() function checks that a class\
      \ was passed to it and that the class is not abstract and a subclass of actor.\
      \ Also this class may neither have <tt>bStatic</tt> nor <tt>bNoDelete</tt> set\
      \ to True. The class also won't be spawned when its <tt>bHighDetail</tt> property\
      \ is set to True and the [[Legacy:LevelInfo|LevelInfo]]'s <tt>DetailMode</tt>\
      \ is set to <tt>DM_Low</tt> or the LevelInfo indicates a low framerate with\
      \ <tt>bDropDetail</tt> or the actor is spawned on a dedicated server.\n\nThe\
      \ final check before creating the actor makes sure the actor fits in the location\
      \ it should be spawned at. This check will be run for actor classes that collide\
      \ with the world and for actors spawned on the server with <tt>bCollideWhenPlacing=True</tt>.\n\
      \n==Chain Of Events==\n\nThese are the events directly called from native code\
      \ after the actor has been created. See the sections below for more details\
      \ about functions called by these events. For actors created with the Spawn()\
      \ function on this machine (i.e. not actors created because they were received\
      \ on a client) all these events are executed from the Spawn() function.\n# the\
      \ [[Legacy:Actor|Actor]]'s initial properties are set:\n#* the actor's Tag is\
      \ initialized with the actor's class name\n#* the actor's Region property (especially\
      \ its Zone) is initialized with the level's [[Legacy:LevelInfo|LevelInfo]] PointRegion\n\
      #* the actor's Level property is set to the level's [[Legacy:LevelInfo|LevelInfo]]\n\
      #* the actor's XLevel property is set to the Level object itself\n#* if this\
      \ actor was replicated to a client, the actor's Role and RemoteRole are exchanged\n\
      #* the actor's Brush property is set to None if it has one, \"because moving\
      \ brushes are not duplicatable\"\n#* the actor's Location and Rotation are set\
      \ from the Spawn parameters\n#* the actor is added to the collision hash if\
      \ its <tt>bCollideActors</tt> is set to True (used e.g. by the CollidingActors\
      \ and VisibleCollidingActors [[Legacy:Iterator|iterator]] functions) If the\
      \ actor is touching anything, its Touch() event is called\n#* the actor's PhysicsVolume\
      \ is set to the [[Legacy:DefaultPhysicsVolume|DefaultPhysicsVolume]]\n# the\
      \ [[Legacy:Actor|Actor]]'s Owner is set from the Spawn parameters\n# the [[Legacy:Actor|Actor]]'s\
      \ Instigator is set to the spawning actor's Instigator\n# Karma physics are\
      \ initialized for the actor\n# (in UT the actor's Spawned() event is called,\
      \ in later engine versions this event is no longer available in UnrealScript)\n\
      # the [[Legacy:Actor|Actor]]'s PreBeginPlay() event is called\n# the [[Legacy:Actor|Actor]]'s\
      \ BeginPlay() event is called\n# the [[Legacy:Actor|Actor]]'s actual zone and\
      \ PhysicsVolume are set\n# encroachment (overlapping with other actors' collision\
      \ cylinders) is checked for the actor\n# the [[Legacy:Actor|Actor]]'s PostBeginPlay()\
      \ event is called\n# the [[Legacy:Actor|Actor]]'s SetInitialState() event is\
      \ called\n# the actor's base is set if it's None and the actor has <tt>bCollideActors</tt>\
      \ and <tt>bShouldBaseAtStartup</tt> set to True and its Physics are set to either\
      \ PHYS_None or PHYS_Rotating\n# the [[Legacy:Actor|Actor]]'s PostNetBeginPlay()\
      \ event is called if this isn't a replicated actor (i.e. it was created on this\
      \ machine with the Spawn() function)\n# (in UT now all [[Legacy:SpawnNotify|SpawnNotify]]\
      \ actors receive a SpawnNotification() event if this actor's class is a subclass\
      \ of the class specified in their ActorClass property, in later engine versions\
      \ SpawnNotifies are no longer available)\n# the [[Legacy:Actor|Actor]]'s actual\
      \ Tag property is set\n\nThe chain of events is halted if the actor's <tt>bDeleteMe</tt>\
      \ property becomes True during the initialization, i.e. when any of the events\
      \ or subsequently called functions destroys the actor.\n\n===Initial Properties===\n\
      \nThe actor properties Tag, Region, Level, XLevel, Brush, Location, Rotation\
      \ and PhysicsVolume are set before any UnrealScript is executed. Note that Region.Zone\
      \ is set to the [[Legacy:LevelInfo|LevelInfo]], PhysicsVolume is set to the\
      \ [[Legacy:DefaultPhysicsVolume|DefaultPhysicsVolume]] and Tag is set to the\
      \ actor's class name.\n\n===Actor Owner===\n\nBefore the spawned actor can execute\
      \ any UnrealScript code its Owner is set. This will call the new owner's GainedChild()\
      \ event which is the first piece of UnrealScript code executed after the actor\
      \ was created. At this point the actor's Owner is still None and also its GetStateName()\
      \ method returns 'None'.\n\nAfter GainedChild() returns the spawned actor's\
      \ Instigator is set to the spawning actor's Instigator. (Not the new Owner's\
      \ Instigator!)\n\n===Karma Physics Initialization ''(UT2003)''===\n\n'' Does\
      \ this call any UnrealScript events?''\n\n===Actor.Spawned() ''(UT)''===\n\n\
      In UT there is the Spawned() event which is called only for actors created via\
      \ the Spawn() function, not for actors placed by mappers. This is the first\
      \ UnrealScript event called for the newly spawned actor and allows to execute\
      \ code before the [[Legacy:GameInfo|GameInfo]] and the mutators can modify the\
      \ actor.\n\n===Actor.PreBeginPlay()===\n\nAt this point the Owner is properly\
      \ set, but the actor's GetStateName() method will return the actor's class name.\n\
      \n====...in UT2003====\n\nIf the actor has <tt>bGameRelevant == False</tt> and\
      \ this event is not executed on a client, the game's base [[Legacy:Mutator|mutator]]'s\
      \ CheckRelevance() function is called.\n\nCheckRelevance() first calls the base\
      \ mutator's AlwaysRelevant() function which recursively calls the other mutators'\
      \ AlwaysRelevant() functions. If this function returns True the actor is concidered\
      \ game relevant and CheckRelevance() returns True resulting in the Actor continuing\
      \ to exist.\n\nIf AlwaysRelevant() returns False, the base mutator's IsRelevant()\
      \ function is called. This function calls the mutator's CheckReplacement() function\
      \ and returns its result if it's False. Otherwise IsRelevant() returns the result\
      \ of the next mutator's IsRelevant() function.\n\nFinally the result of the\
      \ base mutator's IsRelevant() function is returned by CheckRelevance() and again,\
      \ if that result is True the actor will continue to exist, otherwise it will\
      \ destroy itself.\n\n====...in UT====\n\nIf the actor has <tt>bGameRelevant\
      \ == False</tt> and this event is not executed on a client, the [[Legacy:GameInfo|GameInfo]]'s\
      \ IsRelevant() function is called.\n\nIsRelevant() first calls the base mutator's\
      \ AlwaysKeep() function which recursively calls the other mutators' AlwaysKeep()\
      \ functions. If this function returns True the actor is considered game relevant\
      \ and GameInfo.IsRelevant() returns True resulting in the Actor continuing to\
      \ exist.\n\nIf AlwaysKeep() returns False, the base [[Legacy:Mutator|mutator]]'s\
      \ IsRelevant() function is called. This function calls the mutator's CheckReplacement()\
      \ function and returns its result if it's False. Otherwise IsRelevant() returns\
      \ the result of the next mutator's IsRelevant() function.\n\nIf the base mutator's\
      \ IsRelevant() function returns False the GameInfo's IsRelevant() function also\
      \ returns False and the actor destroys itself. Otherwise if the bSuperRelevant\
      \ property is set to 1 GameInfo.IsRelevant() returns True resulting in the Actor\
      \ continuing to exist.\n\nIf the base mutator's IsRelevant() function returns\
      \ True but the bSuperRelevant property is not set to 1 the GameInfo's IsRelevant()\
      \ function checks whether the actor may appear in the current difficulty level,\
      \ if it's a \"monster\" (a non-player [[Legacy:Pawn (UT)|Pawn (UT)]]) and if\
      \ there's a random chance for the actor to not appear in the game (<tt>OddsOfAppearing</tt>).\
      \ The GameInfo.IsRelevant() function will also update the number of secret goals,\
      \ item goals and kill goals before returning True and allowing the actor to\
      \ exist.\n\n===Actor.BeginPlay()===\n\nThis event is called after an Actor is\
      \ concidered \"relevant\" for this game, i.e. no [[Legacy:Mutator|Mutator]]\
      \ wanted to get rid of it.\n\nMost actors don't use this event, but if you're\
      \ looking for an event that is called before the actor is initialized, but after\
      \ the mutator checks are done, then this is the place for you.\n\n===Actor Zone\
      \ and PhysicsVolume===\n\nAt this point the [[Legacy:Actor|Actor]].Region.Zone\
      \ value becomes valid. This event also causes the ZoneChange() event to be called,\
      \ which sees Region.Zone still as the [[Legacy:LevelInfo|LevelInfo]] and the\
      \ actual zone is passed as the NewZone parameter.\n\nAfter the zone the PhysicsVolume\
      \ value becomes valid. This event also causes the PhysicsVolumeChange() event\
      \ to be called, which sees PhysicsVolume still as the [[Legacy:DefaultPhysicsVolume|DefaultPhysicsVolume]]\
      \ and the actual PhysicsVolume is passed as the NewVolume parameter.\n\n===Encroachment\
      \ Check===\n\nEncroachment is when two actors in the collision hash overlap.\
      \ In UnrealScript there is the EncroachingOn() event which returns whether the\
      \ overlapping collision hulls with another actor actually needs to be handled\
      \ and the EncroachedBy() event which is called for the other actor when EncroachingOn()\
      \ returned True. The newly spawned actor will be destroyed if other colliding\
      \ actors detect encroachment with this actor.\n\n===Actor.PostBeginPlay()===\n\
      \nMost actors use PostBeginPlay() to initialize their UnrealScript values. The\
      \ actor's PhysicsVolume and Zone are valid but the actor is not yet in any state.\n\
      \n===Actor.SetInitialState()===\n\nAt this point the actor is concidered \"\
      initialized\" by the engine (bScriptInitialized is set to True in this event)\
      \ and the actor's initial state is set. If the [[Legacy:InitialState|InitialState]]\
      \ property is set, it will be used, otherwise the actor goes to its auto state.\
      \ Since SetInitialState() is a [[Legacy:Simulated Function|simulated function]]\
      \ by default this happens on server and clients.\n\nThis event uses GotoState\
      \ to change the state, so during its executing the initial state's BeginState()\
      \ event is called. The state's state code will however not yet start executing\
      \ at this point. This will happen after all the events described on this page\
      \ have finished doing their work.\n\n===Actor Base===\n\nActors with without\
      \ a Base, <tt>bCollideActors = true</tt> and <tt>bShouldBaseAtStartup = true</tt>\
      \ which use either PHYS_None or PHYS_Rotating try to find a base for themselves.\n\
      \nWhen a base is set the actor's BaseChange() event will be called.\n\n===Actor.PostNetBeginPlay()===\n\
      \nPostNetBeginPlay() will only be called for actors created with the Spawn()\
      \ function. For replicated actors this event will be called (if it's marked\
      \ as \"simulated\") by the netcode when the initial variables have been replicated.\
      \ That means you don't know when it'll happen... but eventually :)\n\n===SpawnNotify.SpawnNotification()\
      \ ''(UT)''===\n\nIn UT there are special [[Legacy:SpawnNotify|SpawnNotify]]\
      \ actors which receive a SpawnNotification() event if the new actor is a subclass\
      \ of their configured ActorClass after the new actor has been initialized. The\
      \ [[Legacy:SpawnNotify|SpawnNotify]] can modify the actor or even spawn a completely\
      \ different actor which will be returned by the Spawn() function instead of\
      \ this actor.\n\n===Actor.Tag===\n\nThe actor's [[Legacy:Tag|Tag]] property\
      \ is set to the value passed to the Spawn() function after all initialization\
      \ events have been executed. The first place where you can access its final\
      \ value is the code executed after the Spawn() function that created this actor.\n\
      \n==Related Topics==\n* [[Legacy:UnrealScript|UnrealScript]]\n* [[Legacy:Creating\
      \ Actors And Objects|Creating Actors And Objects]]\n* [[Legacy:Chain Of Events\
      \ At Level Startup|Chain Of Events At Level Startup]]\n* [[Legacy:Destroying\
      \ Objects|Destroying Objects]] (and Actors)"
  properties: []
  revId: 46343
name: "Legacy:Chain Of Events When Spawning Actors"
revision:
  revid: 46343
  parentid: 2357
  user: "SeriousBarbie"
  timestamp: 1466695041.000000000
  comment: "AlwaysRelevant() -> AlwaysKeep()"
timestamp: 1668763501.854880000
