---
parse:
  title: "UnrealScript compared with other languages"
  text:
    text: "<table style=\"\" class=\"metadata plainlinks ambox ambox-content\">\n\
      <tr>\n<td class=\"ambox-image\"></td>\n<td class=\"ambox-text\">Please help\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"https://wiki.beyondunreal.com/edit/UnrealScript_compared_with_other_languages\"\
      >improve this article or section</a> by expanding it.<br />\n<i><sup>Further\
      \ information might be found on the <a href=\"/Talk:UnrealScript_compared_with_other_languages\"\
      \ title=\"Talk:UnrealScript compared with other languages\">talk page</a>.</sup></i></td>\n\
      </tr>\n</table>\n<p>UnrealScript is a <a href=\"http://en.wikipedia.org/wiki/curly_bracket_programming_language\"\
      \ class=\"extiw\" title=\"wp:curly bracket programming language\">curly bracket\
      \ programming language</a>, so its syntax should look familiar to you if you\
      \ already know other languages such as C++, Java, PHP or any ECMAScript dialect,\
      \ such as JavaScript or ActionScript. This article will shed some light on the\
      \ differences between UnrealScript and other languages, especially the ones\
      \ mentioned above.</p>\n<h2><span class=\"mw-headline\" id=\"Unique_UnrealScript_features\"\
      >Unique UnrealScript features</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/UnrealScript_compared_with_other_languages?section=1\"\
      \ title=\"Edit section: Unique UnrealScript features\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>One of the unique language\
      \ features in UnrealScript are <a href=\"/States\" title=\"States\">states</a>,\
      \ which can be used to implement different behavior in the same class, depending\
      \ on the current situation.</p>\n<p>Another feature is the <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">defaultproperties</a> block, which specifies the\
      \ initial values for newly-declared and inherited variables alike. Starting\
      \ with <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal\
      \ Engine 2 (page does not exist)\">Unreal Engine 2</a> this defaults block can\
      \ be used to create object instances at compile time.</p>\n<p>UnrealScript also\
      \ allows (and requires) you to define server-client communication (<a href=\"\
      /Replication\" title=\"Replication\" class=\"mw-redirect\">replication</a>)\
      \ at the language level.</p>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_vs._Java\"\
      >UnrealScript vs. Java</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UnrealScript_compared_with_other_languages?section=2\"\
      \ title=\"Edit section: UnrealScript vs. Java\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>UnrealScript's entire design was originally based\
      \ on <a href=\"http://en.wikipedia.org/wiki/Java_(programming_language)\" class=\"\
      extiw\" title=\"wp:Java (programming language)\">Java</a>, so it's not surprising\
      \ that both languages are quite similar.</p>\n<p>Main differences:</p>\n<ul>\n\
      <li>UnrealScript is a completely case-insensitive language: Identifiers (variable/function/class\
      \ names) and keywords make no difference between upper- and lower-case letters.</li>\n\
      <li>Only exactly one class definition is allowed per UnrealScript source file.\
      \ The declared class name and the file name (without extension) must match.</li>\n\
      <li>There is only a single \"layer\" of packages and all classes must be contained\
      \ in a named package. Unreal packages can also contain other objects, such as\
      \ textures and sounds, or even entire levels. Packages are always compiled as\
      \ a whole and end up being a single file.</li>\n<li>There are no \"import\"\
      \ statements in UnrealScript. If another package is required by a class in the\
      \ package to compile, that package must be loaded at compile time, which is\
      \ usually done through the <a href=\"/edit/INI_file?redlink=1\" class=\"new\"\
      \ title=\"INI file (page does not exist)\">INI file</a> entry \"EditPackages\"\
      \ or ModPackages\".</li>\n<li>Classes must specify which parent class they extend,\
      \ even if it's just the Object class itself. Interfaces are only available starting\
      \ with <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine\
      \ 3</a>.</li>\n<li>The type <a href=\"/String\" title=\"String\">string</a>\
      \ is a primitive data type, while in Java strings are actually instances of\
      \ the <i>java.lang.String</i> class. Also, there are no object versions of the\
      \ primitive UnrealScript data types.</li>\n<li>UnrealScript does not allow method\
      \ overloading, only overriding. When overriding UnrealScript methods, it is\
      \ not allowed to \"narrow\" the return type to a more derived class. You can\
      \ declare and overload <a href=\"/Operators\" title=\"Operators\">operators</a>\
      \ in UnrealScript, though.</li>\n<li>UnrealScript knows two array types, <a\
      \ href=\"/Static_arrays\" title=\"Static arrays\">static arrays</a> and <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">dynamic arrays</a>. The length of\
      \ static arrays is defined at compile time and cannot be changed at runtime.\
      \ Dynamic arrays on the other hand are much like Java's <i>java.util.ArrayList</i>\
      \ class, except that dynamic arrays are no objects, but can also be used with\
      \ a primitive inner type. UnrealScript does not allow arrays of type <a href=\"\
      /Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a> and does not support multi-dimensional\
      \ arrays.</li>\n<li>UnrealScript doesn't support generics, annotations or exception\
      \ handling. Things like <i>NullPointerException</i> or <i>IndexOutOfBoundsException</i>\
      \ are handled gracefully in UnrealScript by just returning null values after\
      \ writing a warning message to the log file. <a href=\"/Typecasting\" title=\"\
      Typecasting\">Typecasting</a> object references is safe and also works for empty\
      \ references.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"UnrealScript_vs._C.2B.2B\"\
      >UnrealScript vs. C++</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UnrealScript_compared_with_other_languages?section=3\"\
      \ title=\"Edit section: UnrealScript vs. C++\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Apart from the many Java-like features, UnrealScript\
      \ also borrows some features from <a href=\"http://en.wikipedia.org/wiki/C%2B%2B\"\
      \ class=\"extiw\" title=\"wp:C++\">C++</a>, for example operator definitions.</p>\n\
      <ul>\n<li>All UnrealScript code must be contained in classes. There are no global\
      \ functions, variables or constants.</li>\n<li>Up to <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> there is no built-in preprocessor support in UnrealScript. There are\
      \ a few third-party preprocessor tools, though.</li>\n<li>UnrealScript only\
      \ supports single inheritance and all classes <i>must</i> have a parent class,\
      \ except for class Object, the upper-most class in the hierarchy. In <a href=\"\
      /Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal Engine 3</a> you can define\
      \ and implement common <a href=\"/Interfaces\" title=\"Interfaces\">interfaces</a>\
      \ for otherwise unrelated classes to declare common function prototypes.</li>\n\
      <li>Functions can only be overridden, not overloaded. They are virtual by default,\
      \ unless declared <i>final</i>.</li>\n<li>Operators can be overloaded, but not\
      \ overridden. Only a fixed set of operator symbols are available, but operators\
      \ can also be identifiers. Regular operators must have exactly two parameters\
      \ and are always used in <a href=\"http://en.wikipedia.org/wiki/infix_notation\"\
      \ class=\"extiw\" title=\"wp:infix notation\">infix notation</a> (i.e. like\
      \ \"a + b\"), prefix and postfix operators always have exactly one parameter.</li>\n\
      <li>UnrealScript has no constructor or destructor methods. Object initialization\
      \ happens automatically and in most cases certain special methods are called\
      \ automatically. Object destruction happens implicitly through the garbage collector.\
      \ Actor subclasses are destroyed explicitly during the game and implicitly at\
      \ map change. Before explicit destruction, the Destroyed() method of the destroyed\
      \ Actor instance is called.</li>\n<li>UnrealScript doesn't provide pointers.\
      \ The memory addresses of values are not accessible. Arrays are explicitly declared\
      \ as <a href=\"/Static_array\" title=\"Static array\" class=\"mw-redirect\"\
      >static</a> or <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">dynamic\
      \ arrays</a>. Multi-dimensional arrays are not supported, but can be faked by\
      \ using arrays or structs containing array members.</li>\n<li>The conditions\
      \ in <a href=\"/If_statement\" title=\"If statement\">If statements</a> and\
      \ <a href=\"/While_loop\" title=\"While loop\">While loops</a> are required\
      \ to be of the type <a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>.\
      \ Other types are <i>not</i> converted to boolean values automatically.</li>\n\
      <li><a href=\"/Structs\" title=\"Structs\">Structs</a> are not public classes,\
      \ they are really just collections of variables.</li>\n<li>The values of enum\
      \ constants are hidden in UnrealScript. Implicitly they correspond to the byte\
      \ values 0, 1, 2, ... in the same order as they were defined.</li>\n</ul>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.050 seconds\nReal time usage: 0.053\
      \ seconds\nPreprocessor visited node count: 42/1000000\nPreprocessor generated\
      \ node count: 195/1000000\nPost‐expand include size: 1291/2097152 bytes\nTemplate\
      \ argument size: 271/2097152 bytes\nHighest expansion depth: 5/40\nExpensive\
      \ parser function count: 1/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%   11.911      1 - -total\n100.00%   11.911\
      \      1 - Template:Expand\n 66.59%    7.932      1 - Template:Ambox\n-->\n\n\
      <!-- Saved in parser cache with key wiki:pcache:idhash:24149-0!*!0!!*!*!* and\
      \ timestamp 20221117194346 and revision id 42516\n -->\n"
  categories:
  - sortkey: "UnrealScript compared with other languages"
    name: "Articles_to_be_expanded"
  - sortkey: ""
    name: "Programming_articles"
  links:
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: false
    name: "INI file"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Static array"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Replication"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "States"
  - ns: 1
    exists: true
    name: "Talk:UnrealScript compared with other languages"
  - ns: 0
    exists: true
    name: "Structs"
  templates:
  - ns: 10
    exists: true
    name: "Template:Ambox"
  - ns: 10
    exists: true
    name: "Template:Expand"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Unique UnrealScript features"
    number: "1"
    index: "1"
    fromtitle: "UnrealScript_compared_with_other_languages"
    byteoffset: 404
    anchor: "Unique_UnrealScript_features"
  - toclevel: 1
    level: "2"
    line: "UnrealScript vs. Java"
    number: "2"
    index: "2"
    fromtitle: "UnrealScript_compared_with_other_languages"
    byteoffset: 983
    anchor: "UnrealScript_vs._Java"
  - toclevel: 1
    level: "2"
    line: "UnrealScript vs. C++"
    number: "3"
    index: "3"
    fromtitle: "UnrealScript_compared_with_other_languages"
    byteoffset: 3432
    anchor: "UnrealScript_vs._C.2B.2B"
  displaytitle: "UnrealScript compared with other languages"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/C%2B%2B"
    name: "wp:C++"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/curly_bracket_programming_language"
    name: "wp:curly bracket programming language"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Java_(programming_language)"
    name: "wp:Java (programming language)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/infix_notation"
    name: "wp:infix notation"
  wikitext:
    text: "{{expand}}\nUnrealScript is a [[wp:curly bracket programming language|curly\
      \ bracket programming language]], so its syntax should look familiar to you\
      \ if you already know other languages such as C++, Java, PHP or any ECMAScript\
      \ dialect, such as JavaScript or ActionScript.\nThis article will shed some\
      \ light on the differences between UnrealScript and other languages, especially\
      \ the ones mentioned above.\n\n==Unique UnrealScript features==\nOne of the\
      \ unique language features in UnrealScript are [[states]], which can be used\
      \ to implement different behavior in the same class, depending on the current\
      \ situation.\n\nAnother feature is the [[defaultproperties]] block, which specifies\
      \ the initial values for newly-declared and inherited variables alike. Starting\
      \ with [[Unreal Engine 2]] this defaults block can be used to create object\
      \ instances at compile time.\n\nUnrealScript also allows (and requires) you\
      \ to define server-client communication ([[replication]]) at the language level.\n\
      \n==UnrealScript vs. Java==\nUnrealScript's entire design was originally based\
      \ on [[wp:Java (programming language)|Java]], so it's not surprising that both\
      \ languages are quite similar.\n\nMain differences:\n* UnrealScript is a completely\
      \ case-insensitive language: Identifiers (variable/function/class names) and\
      \ keywords make no difference between upper- and lower-case letters.\n* Only\
      \ exactly one class definition is allowed per UnrealScript source file. The\
      \ declared class name and the file name (without extension) must match.\n* There\
      \ is only a single \"layer\" of packages and all classes must be contained in\
      \ a named package. Unreal packages can also contain other objects, such as textures\
      \ and sounds, or even entire levels. Packages are always compiled as a whole\
      \ and end up being a single file.\n* There are no \"import\" statements in UnrealScript.\
      \ If another package is required by a class in the package to compile, that\
      \ package must be loaded at compile time, which is usually done through the\
      \ [[INI file]] entry \"EditPackages\" or ModPackages\".\n* Classes must specify\
      \ which parent class they extend, even if it's just the Object class itself.\
      \ Interfaces are only available starting with [[Unreal Engine 3]].\n* The type\
      \ [[string]] is a primitive data type, while in Java strings are actually instances\
      \ of the ''java.lang.String'' class. Also, there are no object versions of the\
      \ primitive UnrealScript data types.\n* UnrealScript does not allow method overloading,\
      \ only overriding. When overriding UnrealScript methods, it is not allowed to\
      \ \"narrow\" the return type to a more derived class. You can declare and overload\
      \ [[operators]] in UnrealScript, though.\n* UnrealScript knows two array types,\
      \ [[static arrays]] and [[dynamic arrays]]. The length of static arrays is defined\
      \ at compile time and cannot be changed at runtime. Dynamic arrays on the other\
      \ hand are much like Java's ''java.util.ArrayList'' class, except that dynamic\
      \ arrays are no objects, but can also be used with a primitive inner type. UnrealScript\
      \ does not allow arrays of type [[bool]] and does not support multi-dimensional\
      \ arrays.\n* UnrealScript doesn't support generics, annotations or exception\
      \ handling. Things like ''NullPointerException'' or ''IndexOutOfBoundsException''\
      \ are handled gracefully in UnrealScript by just returning null values after\
      \ writing a warning message to the log file. [[Typecasting]] object references\
      \ is safe and also works for empty references.\n\n==UnrealScript vs. C++==\n\
      Apart from the many Java-like features, UnrealScript also borrows some features\
      \ from [[wp:C++|C++]], for example operator definitions.\n* All UnrealScript\
      \ code must be contained in classes. There are no global functions, variables\
      \ or constants.\n* Up to [[Unreal Engine 2]] there is no built-in preprocessor\
      \ support in UnrealScript. There are a few third-party preprocessor tools, though.\n\
      * UnrealScript only supports single inheritance and all classes ''must'' have\
      \ a parent class, except for class Object, the upper-most class in the hierarchy.\
      \ In [[Unreal Engine 3]] you can define and implement common [[interfaces]]\
      \ for otherwise unrelated classes to declare common function prototypes.\n*\
      \ Functions can only be overridden, not overloaded. They are virtual by default,\
      \ unless declared ''final''.\n* Operators can be overloaded, but not overridden.\
      \ Only a fixed set of operator symbols are available, but operators can also\
      \ be identifiers. Regular operators must have exactly two parameters and are\
      \ always used in [[wp:infix notation|infix notation]] (i.e. like \"a + b\"),\
      \ prefix and postfix operators always have exactly one parameter.\n* UnrealScript\
      \ has no constructor or destructor methods. Object initialization happens automatically\
      \ and in most cases certain special methods are called automatically. Object\
      \ destruction happens implicitly through the garbage collector. Actor subclasses\
      \ are destroyed explicitly during the game and implicitly at map change. Before\
      \ explicit destruction, the Destroyed() method of the destroyed Actor instance\
      \ is called.\n* UnrealScript doesn't provide pointers. The memory addresses\
      \ of values are not accessible. Arrays are explicitly declared as [[static array|static]]\
      \ or [[dynamic arrays]]. Multi-dimensional arrays are not supported, but can\
      \ be faked by using arrays or structs containing array members.\n* The conditions\
      \ in [[If statement]]s and [[While loop]]s are required to be of the type [[bool]].\
      \ Other types are ''not'' converted to boolean values automatically.\n* [[Structs]]\
      \ are not public classes, they are really just collections of variables.\n*\
      \ The values of enum constants are hidden in UnrealScript. Implicitly they correspond\
      \ to the byte values 0, 1, 2, ... in the same order as they were defined.\n\n\
      [[Category:Programming articles]]"
  properties: []
  revId: 42516
name: "UnrealScript compared with other languages"
revision:
  revid: 42516
  parentid: 34379
  user: "Wormbo"
  timestamp: 1265326126.000000000
  comment: "/* UnrealScript vs. C++ */ functions are virtual by default"
timestamp: 1668754097.317820000
