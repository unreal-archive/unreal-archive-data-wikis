---
parse:
  title: "Legacy:GUI Overview"
  text:
    text: "<p>Not sure where this should be linked in from, or if there's another\
      \ page that would provide a better home for this information. If someone knows\
      \ of a better place for this page, please feel free to move it, rename it, refactor\
      \ it, whatever. In its present form it's basically just raw data.</p>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#What_is_the_relationship_between_the_Canvas.2C_Interactions.2C_GUI_and_HUD.3F\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">What is the relationship\
      \ between the Canvas, Interactions, GUI and HUD?</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-2\"><a href=\"#How_do_I_make_a_new_GUI.3F\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">How do I make a new GUI?</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#How_do_I_change_the_GUI_look-and-feel.3F\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">How do I change\
      \ the GUI look-and-feel?</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#How_do_I_use_a_new_font.3F\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">How do I use a new font?</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-5\"><a href=\"#How_do_I_use_the_UT2004_GUI_animation_system.3F\"\
      ><span class=\"tocnumber\">5</span> <span class=\"toctext\">How do I use the\
      \ UT2004 GUI animation system?</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"\
      ><a href=\"#Is_the_GUI_animation_system_related_to_drag-n-drop.3F\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Is the GUI animation system related\
      \ to drag-n-drop?</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"><a\
      \ href=\"#How_do_I_handle_mouse_click_events.3F\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">How do I handle mouse click events?</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#How_do_I_handle_mouseover_events.3F\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">How do I handle\
      \ mouseover events?</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"><a\
      \ href=\"#Related_Topics\"><span class=\"tocnumber\">9</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"What_is_the_relationship_between_the_Canvas.2C_Interactions.2C_GUI_and_HUD.3F\"\
      >What is the relationship between the <a href=\"/Legacy:Canvas\" title=\"Legacy:Canvas\"\
      >Canvas</a>, <a href=\"/Legacy:Interactions\" title=\"Legacy:Interactions\"\
      >Interactions</a>, <a href=\"/Legacy:GUI\" title=\"Legacy:GUI\">GUI</a> and\
      \ <a href=\"/Legacy:HUD\" title=\"Legacy:HUD\">HUD</a>?</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=1\"\
      \ title=\"Edit section: What is the relationship between the Canvas, Interactions,\
      \ GUI and HUD?\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Canvas is the mid-level interface that handles rendering to the screen (that\
      \ is, rendering things that are not part of the world). Anything that needs\
      \ to be rendered directly to the screen (GUI, HUD, etc.) will render to the\
      \ Canvas object.</p>\n<p>Interactions are objects that are solely used for the\
      \ purpose of interacting with the player - they [typically] don't really care\
      \ what's going on in the world, and are not bound to the GUI. The GUI is simply\
      \ the most prominent usage of the Interaction system.</p>\n<p>Some interactions:</p>\n\
      <dl>\n<dt>GUIController</dt>\n<dd>it takes input from the player, passes that\
      \ input to various GUI objects, and tells GUI objects when and how to render</dd>\n\
      <dt>Console</dt>\n<dd>it takes input (in the form of text commands) from the\
      \ player, and renders the results of those commands onscreen</dd>\n<dt>StreamInteraction\
      \ (UT2004)</dt>\n<dd>responsible for sending/receiving messages with the low-level\
      \ audio code to play MP3/OGG files, according to playlists configured by the\
      \ user.</dd>\n</dl>\n<p>GUI objects are the graphical tools that the GUIController\
      \ uses to interact with the player.</p>\n<p>The HUD is used by the game to communicate\
      \ game state information to the player. It is not an Interaction - it cannot\
      \ process input from the player.</p>\n<h2><span class=\"mw-headline\" id=\"\
      How_do_I_make_a_new_GUI.3F\">How do I make a new GUI?</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=2\"\
      \ title=\"Edit section: How do I make a new GUI?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The best way to understand how to make a new GUI is\
      \ to read <a rel=\"nofollow\" class=\"external free\" href=\"http://udn.epicgames.com/Two/GuiReference\"\
      >http://udn.epicgames.com/Two/GuiReference</a>, browse the <a href=\"/Legacy:GUI_Class_Hierarchy\"\
      \ title=\"Legacy:GUI Class Hierarchy\">GUI Class Hierarchy</a> and look at the\
      \ <a href=\"/Legacy:UnrealScript_Source\" title=\"Legacy:UnrealScript Source\"\
      >UnrealScript source</a>. You will probably find the best documentation is in\
      \ the source code itself.</p>\n<p>Generally speaking, every GUI \"widget\" is\
      \ a subclass of <a href=\"/Legacy:GUIComponent\" title=\"Legacy:GUIComponent\"\
      >GUIComponent</a>. GUIComponent's that consist of or contain other GUIComponents\
      \ are subclasses of <a href=\"/Legacy:GUIMultiComponent\" title=\"Legacy:GUIMultiComponent\"\
      >GUIMultiComponent</a>. There is an <a href=\"/Legacy:Interactive_GUI\" title=\"\
      Legacy:Interactive GUI\">Interactive GUI</a> mode for interactive GUI design,\
      \ which will dump out to a file the specified components and properties, or\
      \ you can code it in UnrealScript from scratch.</p>\n<p>Typically, you would\
      \ define your own subclass of <a href=\"/Legacy:GUIPage\" title=\"Legacy:GUIPage\"\
      >GUIPage</a>, for example, specify each subcomponent as an <a href=\"/Legacy:Automated_Component\"\
      \ title=\"Legacy:Automated Component\">Automated Component</a> and specify the\
      \ properties, including position, size, appearance, and whether it's scaled\
      \ and positioned according to its parent component, in the <a href=\"/Legacy:Default_Properties\"\
      \ title=\"Legacy:Default Properties\">default properties</a> section.</p>\n\
      <p>If you do need to directly instantiate a <a href=\"/Legacy:GUIComponent\"\
      \ title=\"Legacy:GUIComponent\">GUIComponent</a>, e.g. <code>button = new class'GUIButton'</code>,\
      \ you would have to set the properties on the object and then add it to the\
      \ parent component by calling AppendComponent.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"How_do_I_change_the_GUI_look-and-feel.3F\">How do I change the GUI look-and-feel?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:GUI_Overview?section=3\" title=\"Edit section: How do\
      \ I change the GUI look-and-feel?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Each <a href=\"/Legacy:GUIComponent\" title=\"Legacy:GUIComponent\"\
      >GUIComponent</a> has a styleName variable associated with a <a href=\"/Legacy:GUIStyles\"\
      \ title=\"Legacy:GUIStyles\">GUIStyles</a> object that specifies the component\
      \ appearance. See <a rel=\"nofollow\" class=\"external free\" href=\"http://udn.epicgames.com/Two/GUIStylesExample\"\
      >http://udn.epicgames.com/Two/GUIStylesExample</a> for detail on how to construct\
      \ one.</p>\n<p>Note that the GUIStyles affect some components differently, e.g.\
      \ <a href=\"/Legacy:GUILabel\" title=\"Legacy:GUILabel\">GUILabel</a> has member\
      \ variables that explicitly set transparency, background color, and so forth.\
      \ And a <a href=\"/Legacy:GUIMultiComponent\" title=\"Legacy:GUIMultiComponent\"\
      >GUIMultiComponent</a> does not automatically propagate its styleName to its\
      \ subcomponents - you will have to set those explicitly on a case by case basis.</p>\n\
      <p>To use a <a href=\"/Legacy:GUIStyles\" title=\"Legacy:GUIStyles\">GUIStyles</a>\
      \ object, it has to be registered with the <a href=\"/Legacy:GUIController\"\
      \ title=\"Legacy:GUIController\">GUIController</a> , e.g. in the InitComponent\
      \ function of the enclosing <a href=\"/Legacy:GUIPage\" title=\"Legacy:GUIPage\"\
      >GUIPage</a></p>\n<h2><span class=\"mw-headline\" id=\"How_do_I_use_a_new_font.3F\"\
      >How do I use a new font?</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=4\"\
      \ title=\"Edit section: How do I use a new font?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The font used in each <a href=\"/Legacy:GUIComponent\"\
      \ title=\"Legacy:GUIComponent\">GUIComponent</a> is specified in its <a href=\"\
      /Legacy:GUIStyles\" title=\"Legacy:GUIStyles\">GUIStyles</a> object. A <a href=\"\
      /Legacy:GUIStyles\" title=\"Legacy:GUIStyles\">GUIStyles</a> object has a 15-element\
      \ string array called FontArrayNames, each entry identifying a <a href=\"/Legacy:GUIFont\"\
      \ title=\"Legacy:GUIFont\">GUIFont</a> object. A <a href=\"/Legacy:GUIFont\"\
      \ title=\"Legacy:GUIFont\">GUIFont</a> in turn has a dynamic array that references\
      \ <a href=\"/Legacy:Font\" title=\"Legacy:Font\">Font</a> objects. A new <a\
      \ href=\"/Legacy:Font\" title=\"Legacy:Font\">Font</a> can be loaded using the\
      \ <a href=\"/Legacy:TrueTypeFontFactory\" title=\"Legacy:TrueTypeFontFactory\"\
      >TrueTypeFontFactory</a> <a href=\"/Legacy:Exec_Directive\" title=\"Legacy:Exec\
      \ Directive\">Exec Directive</a>. The new <a href=\"/Legacy:GUIFont\" title=\"\
      Legacy:GUIFont\">GUIFont</a> must be added to the <a href=\"/Legacy:GUIController\"\
      \ title=\"Legacy:GUIController\">GUIController</a> font stack, typically by\
      \ subclassing <a href=\"/Legacy:GUIController\" title=\"Legacy:GUIController\"\
      >GUIController</a> (and then specifying the new <a href=\"/Legacy:GUIController\"\
      \ title=\"Legacy:GUIController\">GUIController</a> in the game .ini file.</p>\n\
      <h2><span class=\"mw-headline\" id=\"How_do_I_use_the_UT2004_GUI_animation_system.3F\"\
      >How do I use the UT2004 GUI animation system?</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=5\"\
      \ title=\"Edit section: How do I use the UT2004 GUI animation system?\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>GUI animation is\
      \ fairly simplistic. Each GUIComponent stores keyframe data using an array of\
      \ vectors for each type of animation supported, where the X and Y components\
      \ are dependent on the type of animation, and the Z component represents the\
      \ remaining interpolation time. GUIComponent.MotionFrame tracks position keyframes,\
      \ whereas GUIComponent.SizeFrame tracks dimension keyframes.</p>\n<p>Interpolation\
      \ is strictly linear - each frame, UGUIComponent::PreDraw adjusts the component's\
      \ position/dimension based on the time remaining for the first keyframe, and\
      \ decrements that keyframe's counter. Once the counter for that keyframe reaches\
      \ 0, it is removed from the list of keyframes, the component is notified via\
      \ delegateOnArrival (see below), and the process continues using the next keyframe,\
      \ if it exists.</p>\n<p>Script-side, position keyframes are added by calling\
      \ Animate(), and dimension keyframes are added by calling Resize(). For the\
      \ most part, you'll want to use these functions to add keyframes, rather than\
      \ modifying the keyframe arrays directly, so that all of the various notifications\
      \ are called in the correct order. There are several events and delegates related\
      \ to GUI animation:</p>\n<dl>\n<dt>event BeginAnimation()</dt>\n<dd>indicates\
      \ that this component has started an animation sequence. Called from Animate/Resize\
      \ when there are no existing keyframes, and will be propagated up the MenuOwner\
      \ chain.</dd>\n<dt>event EndAnimation()</dt>\n<dd>indicates that this component\
      \ has ended an animation sequence. Called from UGUIComponent::PreDraw(), after\
      \ removing a keyframe when there are no additionl keyframes, and is propagated\
      \ up the MenuOwner chain.</dd>\n<dt>function KillAnimation()</dt>\n<dd>immediately\
      \ removes all keyframes and ends all animation for the component. This function\
      \ would be called by client code to force animation sequences to end.</dd>\n\
      <dt>delegate OnArrival()</dt>\n<dd>indicates that this component has arrived\
      \ at a keypoint. Called from UGUIComponent::PreDraw(), each time a keyframe\
      \ is removed from the current sequence.</dd>\n<dt>delegate OnEndAnimation()</dt>\n\
      <dd>indicates that this component has ended an animation sequence. Called from\
      \ GUIComponent.EndAnimation. While EndAnimation event would be called on each\
      \ component in the MenuOwner chain, OnEndAnimation would only be called on the\
      \ component that was animating.</dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Is_the_GUI_animation_system_related_to_drag-n-drop.3F\">Is the GUI animation\
      \ system related to drag-n-drop?</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=6\"\
      \ title=\"Edit section: Is the GUI animation system related to drag-n-drop?\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>No,\
      \ drag-n-drop is completely separate from the GUI animation code. Here is an\
      \ overview of the drag-n-drop system. The following properties are related to\
      \ drag-n-drop:</p>\n<dl>\n<dt>GUIController.DropSource</dt>\n<dd>Pointer to\
      \ the GUIComponent that is the source of the drag-n-drop, or NULL if not currently\
      \ performing a drag-n-drop. Generally, the DropSource will have the first opportunity\
      \ to handle input events, such as mouse clicks, releases, and movement.</dd>\n\
      <dt>GUIController.DropTarget</dt>\n<dd>Pointer to the GUIComponent that will\
      \ receive the drag-n-drop - generally the component that the mouse is currently\
      \ hovering over (the GUIController's ActiveControl), or NULL if no valid target\
      \ exists (if we're not performing a drag-n-drop, or the ActiveControl does not\
      \ support drag-n-drop</dd>\n<dt>GUIComponent.bDropSource</dt>\n<dd>Must be true\
      \ in order for a component to be the source of a drag-n-drop operation.</dd>\n\
      <dt>GUIComponent.bDropTarget</dt>\n<dd>Must be true in order for the component\
      \ to be the target of a drag-n-drop. (Note: it is perfectly acceptable for a\
      \ GUIComponent to be a valid drop-source, but not a drop-target, or vice-versa)</dd>\n\
      <dt>GUIComponent.DropState</dt>\n<dd>The current drag-n-drop state of the component</dd>\n\
      </dl>\n<p>The following events and delegates are related to drag-n-drop (all\
      \ located in GUIComponent.uc):</p>\n<dl>\n<dt>event DropStateChange(eDropState\
      \ NewState)</dt>\n<dd>Called when the drag-n-drop state of the component changes,\
      \ e.g. the component becomes the GUIController's DropSource (beginning a drag-n-drop),\
      \ the component becomes the GUIController's DropTarget (moused over while a\
      \ drag-n-drop operation is in progress), etc.</dd>\n<dt>delegate bool OnBeginDrag(GUIComponent\
      \ Sender)</dt>\n<dd>Called once on a component when it becomes the DropSource.\
      \ Return false to prevent the drag-n-drop operation from beginning.</dd>\n<dt>delegate\
      \ OnEndDrag(GUIComponent Sender, bool bAccepted)</dt>\n<dd>Called on the DropSource\
      \ when the user releases the mouse during a drag-n-drop operation. Accepted\
      \ indicates whether the drag-n-drop operation was successful. A false value\
      \ indicates that there was no valid DropTarget (if Sender == None), or that\
      \ the DropTarget didn't want to receive the drag-n-drop for any reason.</dd>\n\
      <dt>delegate bool OnDragDrop(GUIComponent Sender)</dt>\n<dd>Called once on the\
      \ DropTarget when the user releases the mouse. The return value of this delegate\
      \ is used as the value for bAccepted in OnEndDrag.</dd>\n<dt>delegate OnDragEnter(GUIComponent\
      \ Sender)</dt>\n<dd>Called once on a component that is a valid DropTarget (that\
      \ is, bDropTarget is true), when the mouse enters that component's bounds.</dd>\n\
      <dt>delegate OnDragLeave(GUIComponent Sender)</dt>\n<dd>Similar to the above,\
      \ for leaving the component's Bounds.</dd>\n<dt>delegate OnDragOver(GUIComponent\
      \ Sender)</dt>\n<dd>Called on the DropTarget once each cycle.</dd>\n</dl>\n\
      <p>In most cases, the actual work of a drag-n-drop operation will be performed\
      \ from OnEndDrag (for the dropsource) and OnDragDrop (for the droptarget), and\
      \ depending on exactly what you're doing, may be the only delegates you'll need\
      \ to hook up.</p>\n<p>For a working example, see the GUIListBase class. It contains\
      \ all functionality necessary to enable drag-n-drop operations to and from lists.\
      \ It is structured so that child classes of GUIListBase need only implement\
      \ the two delegates I mentioned above - OnEndDrag and OnDragDrop, which have\
      \ been assigned in GUIListBase to InternalOnEndDrag and InternalOnDragDrop,\
      \ repectively, to simplify overriding the default behavior in child classes.</p>\n\
      <h2><span class=\"mw-headline\" id=\"How_do_I_handle_mouse_click_events.3F\"\
      >How do I handle mouse click events?</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=7\"\
      \ title=\"Edit section: How do I handle mouse click events?\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>GUI mouse clicks\
      \ are handled by UGUIController::MousePressed and UGUIController::MouseReleased.\
      \ For most input events (including mouse clicks), the general order in which\
      \ components will receive notification of the input event is:</p>\n<ol>\n<li>GUIController.ActiveControl\
      \ (which is updated natively each tick)</li>\n<li>GUIController.ActivePage (the\
      \ last opened menu)</li>\n<li>each page in the GUIController's menustack, starting\
      \ with the most recently opened menu</li>\n</ol>\n<p>GUIComponents indicate\
      \ that they've handled the input by returning true from the appropriate input\
      \ function. Once that happens, the input chain stops. For mouse input, this\
      \ function is UGUIComponent::MousePressed and UGUIComponent::MouseReleased.\
      \ For example, if the ActiveControl returns true from its MousePressed function,\
      \ then the ActivePage and MenuStack would not be notified of the mouse press.</p>\n\
      <p>When a component receives a call to MousePressed/MouseReleased, it notifies\
      \ unrealscript by calling delegates. To have unrealscript do something when\
      \ mouse input is received, you should assign these delegates and perform whatever\
      \ logic you want to do from there. Here's an overview of the mouse-related delegates:</p>\n\
      <dl>\n<dt>delegate OnMousePressed()</dt>\n<dd>called from UGUIComponent::MousePressed,\
      \ when the left mouse button is pressed or held.</dd>\n<dt>delegate OnMouseReleased()</dt>\n\
      <dd>called from UGUIComponent::MouseReleased, when the left mouse button is\
      \ released</dd>\n<dt>delegate OnClick</dt>\n<dd>This is the primary mouse input\
      \ function; called immediately after OnMouseReleased. The return value from\
      \ this delegate is used as the return value for the native MouseRelease().</dd>\n\
      <dt>delegate OnDblClick</dt>\n<dd>when the user double-clicks on a component</dd>\n\
      <dt>delegate OnRightClick</dt>\n<dd>when the right mouse button is released</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"How_do_I_handle_mouseover_events.3F\"\
      >How do I handle mouseover events?</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=8\"\
      \ title=\"Edit section: How do I handle mouseover events?\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<dl>\n<dt>delegate OnHover</dt>\n\
      <dd>when the mouse is moved over a component</dd>\n</dl>\n<hr />\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:GUI_Overview?section=9\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Interactive_GUI\" title=\"\
      Legacy:Interactive GUI\">Interactive GUI Design Mode</a></li>\n<li><a href=\"\
      /Legacy:Automated_Component\" title=\"Legacy:Automated Component\">Automated\
      \ Components in UT2004</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.060 seconds\nReal time usage: 0.062 seconds\nPreprocessor visited\
      \ node count: 99/1000000\nPreprocessor generated node count: 188/1000000\nPost‐\
      expand include size: 12/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1378-0!*!0!!en!*!*\
      \ and timestamp 20221118021907 and revision id 45206\n -->\n"
  categories:
  - sortkey: "GUI Overview"
    name: "Legacy_FAQ"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Exec Directive"
  - ns: 100
    exists: true
    name: "Legacy:GUIFont"
  - ns: 100
    exists: true
    name: "Legacy:GUILabel"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Interactions"
  - ns: 100
    exists: true
    name: "Legacy:TrueTypeFontFactory"
  - ns: 100
    exists: true
    name: "Legacy:GUIPage"
  - ns: 100
    exists: true
    name: "Legacy:HUD"
  - ns: 100
    exists: true
    name: "Legacy:Automated Component"
  - ns: 100
    exists: true
    name: "Legacy:GUIMultiComponent"
  - ns: 100
    exists: true
    name: "Legacy:GUI"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Source"
  - ns: 100
    exists: true
    name: "Legacy:GUIComponent"
  - ns: 100
    exists: true
    name: "Legacy:Font"
  - ns: 100
    exists: true
    name: "Legacy:Canvas"
  - ns: 100
    exists: true
    name: "Legacy:GUIController"
  - ns: 100
    exists: true
    name: "Legacy:GUI Class Hierarchy"
  - ns: 100
    exists: true
    name: "Legacy:GUIStyles"
  - ns: 100
    exists: true
    name: "Legacy:Interactive GUI"
  templates: []
  images: []
  externallinks:
  - "http://udn.epicgames.com/Two/GUIStylesExample"
  - "http://udn.epicgames.com/Two/GuiReference"
  sections:
  - toclevel: 1
    level: "2"
    line: "What is the relationship between the Canvas, Interactions, GUI and HUD?"
    number: "1"
    index: "1"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 294
    anchor: "What_is_the_relationship_between_the_Canvas.2C_Interactions.2C_GUI_and_HUD.3F"
  - toclevel: 1
    level: "2"
    line: "How do I make a new GUI?"
    number: "2"
    index: "2"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 1643
    anchor: "How_do_I_make_a_new_GUI.3F"
  - toclevel: 1
    level: "2"
    line: "How do I change the GUI look-and-feel?"
    number: "3"
    index: "3"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 3042
    anchor: "How_do_I_change_the_GUI_look-and-feel.3F"
  - toclevel: 1
    level: "2"
    line: "How do I use a new font?"
    number: "4"
    index: "4"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 3927
    anchor: "How_do_I_use_a_new_font.3F"
  - toclevel: 1
    level: "2"
    line: "How do I use the UT2004 GUI animation system?"
    number: "5"
    index: "5"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 4739
    anchor: "How_do_I_use_the_UT2004_GUI_animation_system.3F"
  - toclevel: 1
    level: "2"
    line: "Is the GUI animation system related to drag-n-drop?"
    number: "6"
    index: "6"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 7115
    anchor: "Is_the_GUI_animation_system_related_to_drag-n-drop.3F"
  - toclevel: 1
    level: "2"
    line: "How do I handle mouse click events?"
    number: "7"
    index: "7"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 10554
    anchor: "How_do_I_handle_mouse_click_events.3F"
  - toclevel: 1
    level: "2"
    line: "How do I handle mouseover events?"
    number: "8"
    index: "8"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 12382
    anchor: "How_do_I_handle_mouseover_events.3F"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "9"
    index: "9"
    fromtitle: "Legacy:GUI_Overview"
    byteoffset: 12489
    anchor: "Related_Topics"
  displaytitle: "Legacy:GUI Overview"
  iwlinks: []
  wikitext:
    text: "Not sure where this should be linked in from, or if there's another page\
      \ that would provide a better home for this information.  If someone knows of\
      \ a better place for this page, please feel free to move it, rename it, refactor\
      \ it, whatever.  In its present form it's basically just raw data.\n\n==What\
      \ is the relationship between the [[Legacy:Canvas|Canvas]], [[Legacy:Interactions|Interactions]],\
      \ [[Legacy:GUI|GUI]] and [[Legacy:HUD|HUD]]?==\n\nCanvas is the mid-level interface\
      \ that handles rendering to the screen (that is, rendering things that are not\
      \ part of the world). Anything that needs to be rendered directly to the screen\
      \ (GUI, HUD, etc.) will render to the Canvas object.\n\nInteractions are objects\
      \ that are solely used for the purpose of interacting with the player - they\
      \ [typically] don't really care what's going on in the world, and are not bound\
      \ to the GUI. The GUI is simply the most prominent usage of the Interaction\
      \ system.\n\nSome interactions:\n; GUIController: it takes input from the player,\
      \ passes that input to various GUI objects, and tells GUI objects when and how\
      \ to render\n; Console: it takes input (in the form of text commands) from the\
      \ player, and renders the results of those commands onscreen\n; StreamInteraction\
      \ (UT2004): responsible for sending/receiving messages with the low-level audio\
      \ code to play MP3/OGG files, according to playlists configured by the user.\n\
      \nGUI objects are the graphical tools that the GUIController uses to interact\
      \ with the player.\n\nThe HUD is used by the game to communicate game state\
      \ information to the player. It is not an Interaction - it cannot process input\
      \ from the player.\n\n==How do I make a new GUI? ==\n\nThe best way to understand\
      \ how to make a new GUI is to read http://udn.epicgames.com/Two/GuiReference,\
      \ browse the [[Legacy:GUI Class Hierarchy|GUI Class Hierarchy]] and look at\
      \ the [[Legacy:UnrealScript Source|UnrealScript source]]. You will probably\
      \ find the best documentation is in the source code itself.\n\nGenerally speaking,\
      \ every GUI \"widget\" is a subclass of [[Legacy:GUIComponent|GUIComponent]].\
      \ GUIComponent's that consist of or contain other GUIComponents are subclasses\
      \ of [[Legacy:GUIMultiComponent|GUIMultiComponent]]. There is an [[Legacy:Interactive\
      \ GUI|Interactive GUI]] mode for interactive GUI design, which will dump out\
      \ to a file the specified components and properties, or you can code it in UnrealScript\
      \ from scratch.\n\nTypically, you would define your own subclass of [[Legacy:GUIPage|GUIPage]],\
      \ for example, specify each subcomponent as an [[Legacy:Automated Component|Automated\
      \ Component]] and specify the properties, including position, size, appearance,\
      \ and whether it's scaled and positioned according to its parent component,\
      \ in the [[Legacy:Default Properties|default properties]] section.\n\nIf you\
      \ do need to directly instantiate a [[Legacy:GUIComponent|GUIComponent]], e.g.\
      \ <code>button = new class'GUIButton'</code>, you would have to set the properties\
      \ on the object and then add it to the parent component by calling AppendComponent.\n\
      \n==How do I change the GUI look-and-feel? ==\n\nEach [[Legacy: GUIComponent\
      \ | GUIComponent ]] has a styleName variable associated with a [[Legacy:GUIStyles|GUIStyles]]\
      \ object that specifies the component appearance. See http://udn.epicgames.com/Two/GUIStylesExample\
      \ for detail on how to construct one.\n\nNote that the GUIStyles affect some\
      \ components differently, e.g. [[Legacy: GUILabel | GUILabel ]] has member variables\
      \ that explicitly set transparency, background color, and so forth. And a [[Legacy:\
      \ GUIMultiComponent | GUIMultiComponent ]] does not automatically propagate\
      \ its styleName to its subcomponents - you will have to set those explicitly\
      \ on a case by case basis.\n\nTo use a [[Legacy:GUIStyles|GUIStyles]] object,\
      \ it has to be registered with the [[Legacy: GUIController | GUIController ]],\
      \ e.g. in the InitComponent function of the enclosing [[Legacy: GUIPage | GUIPage\
      \ ]]\n\n==How do I use a new font? ==\n\nThe font used in each [[Legacy:GUIComponent|GUIComponent]]\
      \ is specified in its [[Legacy:GUIStyles|GUIStyles]] object. A [[Legacy:GUIStyles|GUIStyles]]\
      \ object has a 15-element string array called FontArrayNames, each entry identifying\
      \ a [[Legacy:GUIFont|GUIFont]] object. A [[Legacy:GUIFont|GUIFont]] in turn\
      \ has a dynamic array that references [[Legacy:Font|Font]] objects. A new [[Legacy:Font|Font]]\
      \ can be loaded using the [[Legacy:TrueTypeFontFactory|TrueTypeFontFactory]]\
      \ [[Legacy:Exec Directive|Exec Directive]]. The new [[Legacy:GUIFont|GUIFont]]\
      \ must be added to the [[Legacy:GUIController|GUIController]] font stack, typically\
      \ by subclassing [[Legacy:GUIController|GUIController]] (and then specifying\
      \ the new [[Legacy:GUIController|GUIController]] in the game .ini file.\n\n\
      ==How do I use the UT2004 GUI animation system?==\n\nGUI animation is fairly\
      \ simplistic. Each GUIComponent stores keyframe data using an array of vectors\
      \ for each type of animation supported, where the X and Y components are dependent\
      \ on the type of animation, and the Z component represents the remaining interpolation\
      \ time. GUIComponent.MotionFrame tracks position keyframes, whereas GUIComponent.SizeFrame\
      \ tracks dimension keyframes.\n\nInterpolation is strictly linear - each frame,\
      \ <nowiki>UGUIComponent::PreDraw</nowiki> adjusts the component's position/dimension\
      \ based on the time remaining for the first keyframe, and decrements that keyframe's\
      \ counter. Once the counter for that keyframe reaches 0, it is removed from\
      \ the list of keyframes, the component is notified via delegateOnArrival (see\
      \ below), and the process continues using the next keyframe, if it exists.\n\
      \nScript-side, position keyframes are added by calling Animate(), and dimension\
      \ keyframes are added by calling Resize(). For the most part, you'll want to\
      \ use these functions to add keyframes, rather than modifying the keyframe arrays\
      \ directly, so that all of the various notifications are called in the correct\
      \ order. There are several events and delegates related to GUI animation:\n\
      ; event BeginAnimation(): indicates that this component has started an animation\
      \ sequence. Called from Animate/Resize when there are no existing keyframes,\
      \ and will be propagated up the MenuOwner chain.\n; event EndAnimation(): indicates\
      \ that this component has ended an animation sequence. Called from <nowiki>UGUIComponent::PreDraw</nowiki>(),\
      \ after removing a keyframe when there are no additionl keyframes, and is propagated\
      \ up the MenuOwner chain.\n; function KillAnimation(): immediately removes all\
      \ keyframes and ends all animation for the component. This function would be\
      \ called by client code to force animation sequences to end.\n; delegate OnArrival():\
      \ indicates that this component has arrived at a keypoint. Called from <nowiki>UGUIComponent::PreDraw</nowiki>(),\
      \ each time a keyframe is removed from the current sequence.\n; delegate OnEndAnimation():\
      \ indicates that this component has ended an animation sequence. Called from\
      \ GUIComponent.EndAnimation. While EndAnimation event would be called on each\
      \ component in the MenuOwner chain, OnEndAnimation would only be called on the\
      \ component that was animating.\n\n==Is the GUI animation system related to\
      \ drag-n-drop?==\n\nNo, drag-n-drop is completely separate from the GUI animation\
      \ code. Here is an overview of the drag-n-drop system. The following properties\
      \ are related to drag-n-drop:\n\n; GUIController.DropSource: Pointer to the\
      \ GUIComponent that is the source of the drag-n-drop, or NULL if not currently\
      \ performing a drag-n-drop.  Generally, the DropSource will have the first opportunity\
      \ to handle input events, such as mouse clicks, releases, and movement. \n;\
      \ GUIController.DropTarget: Pointer to the GUIComponent that will receive the\
      \ drag-n-drop - generally the component that the mouse is currently hovering\
      \ over (the GUIController's ActiveControl), or NULL if no valid target exists\
      \ (if we're not performing a drag-n-drop, or the ActiveControl does not support\
      \ drag-n-drop\n; GUIComponent.bDropSource: Must be true in order for a component\
      \ to be the source of a drag-n-drop operation.\n; GUIComponent.bDropTarget:\
      \ Must be true in order for the component to be the target of a drag-n-drop.\
      \ (Note: it is perfectly acceptable for a  GUIComponent to be a valid drop-source,\
      \ but not a drop-target, or vice-versa)\n; GUIComponent.DropState: The current\
      \ drag-n-drop state of the component \n\nThe following events and delegates\
      \ are related to drag-n-drop (all located in GUIComponent.uc):\n; event DropStateChange(eDropState\
      \ NewState): Called when the drag-n-drop state of the component changes, e.g.\
      \ the component becomes the GUIController's DropSource (beginning a drag-n-drop),\
      \ the component becomes the GUIController's DropTarget (moused over while a\
      \ drag-n-drop operation is in progress), etc.\n; delegate bool OnBeginDrag(GUIComponent\
      \ Sender): Called once on a component when it becomes the DropSource. Return\
      \ false to prevent the drag-n-drop operation from beginning.\n; delegate OnEndDrag(GUIComponent\
      \ Sender, bool bAccepted): Called on the DropSource when the user releases the\
      \ mouse during a drag-n-drop operation.  Accepted indicates whether the drag-n-drop\
      \ operation was successful. A false value indicates that there was no valid\
      \ DropTarget (if Sender == None), or that the DropTarget didn't want to receive\
      \ the drag-n-drop for any reason.\n; delegate bool OnDragDrop(GUIComponent Sender):\
      \ Called once on the DropTarget when the user releases the mouse. The return\
      \ value of this delegate is used as the value for bAccepted in OnEndDrag.\n\
      ; delegate OnDragEnter(GUIComponent Sender): Called once on a component that\
      \ is a valid DropTarget (that is, bDropTarget is true), when the mouse enters\
      \ that component's bounds. \n; delegate OnDragLeave(GUIComponent Sender): Similar\
      \ to the above, for leaving the component's Bounds. \n; delegate OnDragOver(GUIComponent\
      \ Sender): Called on the DropTarget once each cycle. \n\nIn most cases, the\
      \ actual work of a drag-n-drop operation will be performed from OnEndDrag (for\
      \ the dropsource) and OnDragDrop (for the droptarget), and depending on exactly\
      \ what you're doing, may be the only delegates you'll need to hook up. \n\n\
      For a working example, see the GUIListBase class. It contains all functionality\
      \ necessary to enable drag-n-drop operations to and from lists. It is structured\
      \ so that child classes of GUIListBase need only implement the two delegates\
      \ I mentioned above - OnEndDrag and OnDragDrop, which have been assigned in\
      \ GUIListBase to InternalOnEndDrag and InternalOnDragDrop, repectively, to simplify\
      \ overriding the default behavior in child classes.\n\n==How do I handle mouse\
      \ click events?==\n\nGUI mouse clicks are handled by <nowiki>UGUIController::MousePressed\
      \ and UGUIController::MouseReleased</nowiki>. For most input events (including\
      \ mouse clicks), the general order in which components will receive notification\
      \ of the input event is:\n# GUIController.ActiveControl (which is updated natively\
      \ each tick)\n# GUIController.ActivePage (the last opened menu)\n# each page\
      \ in the GUIController's menustack, starting with the most recently opened menu\n\
      \nGUIComponents indicate that they've handled the input by returning true from\
      \ the appropriate input function. Once that happens, the input chain stops.\
      \ For mouse input, this function is <nowiki>UGUIComponent::MousePressed and\
      \ UGUIComponent::MouseReleased</nowiki>. For example, if the ActiveControl returns\
      \ true from its MousePressed function, then the ActivePage and MenuStack would\
      \ not be notified of the mouse press.\n\nWhen a component receives a call to\
      \ MousePressed/MouseReleased, it notifies unrealscript by calling delegates.\
      \ To have unrealscript do something when mouse input is received, you should\
      \ assign these delegates and perform whatever logic you want to do from there.\
      \ Here's an overview of the mouse-related delegates:\n\n; delegate OnMousePressed():\
      \ called from <nowiki>UGUIComponent::MousePressed</nowiki>, when the left mouse\
      \ button is pressed or held. \n; delegate OnMouseReleased(): called from <nowiki>UGUIComponent::MouseReleased</nowiki>,\
      \ when the left mouse button is released\n; delegate OnClick: This is the primary\
      \ mouse input function; called immediately after OnMouseReleased. The return\
      \ value from this delegate is used as the return value for the native MouseRelease().\
      \ \n; delegate OnDblClick: when the user double-clicks on a component\n; delegate\
      \ OnRightClick: when the right mouse button is released\n\n==How do I handle\
      \ mouseover events?==\n\n; delegate OnHover: when the mouse is moved over a\
      \ component\n\n----\n\n==Related Topics ==\n* [[Legacy:Interactive GUI|Interactive\
      \ GUI Design Mode]]\n* [[Legacy:Automated Component|Automated Components in\
      \ UT2004]]\n[[Category:Legacy FAQ|{{PAGENAME}}]]"
  properties: []
  revId: 45206
name: "Legacy:GUI Overview"
revision:
  revid: 45206
  parentid: 3493
  user: "LiKeMiKeS"
  timestamp: 1346534649.000000000
  comment: "spelling edit"
timestamp: 1668763441.179185000
