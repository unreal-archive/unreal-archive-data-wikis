---
parse:
  title: "Legacy:UCPP"
  text:
    text: "<p>UnrealScript Class PreProcessor (UCPP) is a commandline utility intended\
      \ to be executed before <code>ucc make</code>. It adds some preprocessor features\
      \ that are not possible with <a href=\"/Legacy:Ucc\" title=\"Legacy:Ucc\">Ucc</a>.\
      \ UCPP takes special class files with a <code>.puc</code> extention, processes\
      \ them and generates a <code>.uc</code>.</p>\n<p><a href=\"/Legacy:El_Muerte\"\
      \ title=\"Legacy:El Muerte\" class=\"mw-redirect\">El Muerte</a> started on\
      \ this tool to add some more magic to an upcoming UnrealScript unit testing\
      \ framework (<a href=\"/Legacy:UsUnit\" title=\"Legacy:UsUnit\">UsUnit</a>).\
      \ This tool is currently in development; any help (like testing) would be greatly\
      \ appreciated.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Features\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Features</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #Directives\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Directives</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-3\"><a href=\"#Expression_syntax\"><span\
      \ class=\"tocnumber\">1.1.1</span> <span class=\"toctext\">Expression syntax</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-4\"><a href=\"#Examples:_defined.28name.29\"\
      ><span class=\"tocnumber\">1.1.2</span> <span class=\"toctext\">Examples: defined(<i>name</i>)</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-5\"><a href=\"#Examples:_strcmp.28arg1.2C_arg2.29\"\
      ><span class=\"tocnumber\">1.1.3</span> <span class=\"toctext\">Examples: strcmp(<i>arg1</i>,\
      \ <i>arg2</i>)</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Macros.5CIdentifiers\"><span class=\"tocnumber\">1.2</span> <span\
      \ class=\"toctext\">Macros\\Identifiers</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-7\"><a href=\"#Pre-defined_macros\"><span class=\"tocnumber\">1.2.1</span>\
      \ <span class=\"toctext\">Pre-defined macros</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Function_Defines\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Function Defines</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#Commandline_options\"><span\
      \ class=\"tocnumber\">1.4</span> <span class=\"toctext\">Commandline options</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"#Configuration\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Configuration</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#UnrealEngine_Licensee_Notice\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">UnrealEngine Licensee\
      \ Notice</span></a></li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"\
      #Downloads\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Downloads</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-13\"><a href=\"#Known_bugs.5Cissues\"><span\
      \ class=\"tocnumber\">5</span> <span class=\"toctext\">Known bugs\\issues</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-14\"><a href=\"#Feature_requests\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Feature requests</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-15\"><a href=\"#Tips_and_Tricks\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Tips and Tricks</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-16\"><a href=\"#Mixing_defines_and_actual_functions\"\
      ><span class=\"tocnumber\">7.1</span> <span class=\"toctext\">Mixing defines\
      \ and actual functions</span></a></li>\n<li class=\"toclevel-2 tocsection-17\"\
      ><a href=\"#Using_the_current_working_directory\"><span class=\"tocnumber\"\
      >7.2</span> <span class=\"toctext\">Using the current working directory</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-18\"><a href=\"#Comments\"><span\
      \ class=\"tocnumber\">8</span> <span class=\"toctext\">Comments</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Features\">Features</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UCPP?section=1\" title=\"Edit section: Features\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"\
      mw-headline\" id=\"Directives\">Directives</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=2\"\
      \ title=\"Edit section: Directives\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<table class=\"wikitable\">\n<tr>\n<td colspan=\"2\"\
      \ style=\"text-align: center\"><b>directive</b></td>\n<td style=\"text-align:\
      \ center\"><b>description</b></td>\n</tr>\n<tr>\n<td colspan=\"2\"><tt>#define&#160;<i>name</i>&#160;<i>something&#160;...</i></tt></td>\n\
      <td>adds\\overrides an definition <i>name</i> (case insensitive) with the value\
      \ <i>something ...</i> (till the end of the line)</td>\n</tr>\n<tr>\n<td colspan=\"\
      2\"><tt>#undef <i>name</i></tt></td>\n<td>removed <i>name</i> from the definition\
      \ list (for this file only)</td>\n</tr>\n<tr>\n<td colspan=\"2\"><tt>#if <i>expresion</i></tt><br\
      \ />\n...<br />\n<tt>#elif <i>expresion</i></tt><br />\n...<br />\n<tt>#else</tt><br\
      \ />\n...<br />\n<tt>#endif</tt></td>\n<td><i>expression</i> contains an expression\
      \ constructed from numbers or defined names. The <code>#else</code> is optional.\
      \ <tt>#elif</tt> (since version 009) is short of \"else if\", you can have as\
      \ many of these as you want. You can nest these.</td>\n</tr>\n<tr>\n<td colspan=\"\
      2\"><tt>#ifdef <i>name</i></tt></td>\n<td>evaluates to true if <i>name</i> is\
      \ defined. Can also be used to check if function definitions have been made:\
      \ <tt>#ifdef MYFUNC/2</tt>.</td>\n</tr>\n<tr>\n<td colspan=\"2\"><tt>#ifndef\
      \ <i>name</i></tt></td>\n<td>the opposite of <tt>#ifdef</tt></td>\n</tr>\n<tr>\n\
      <td colspan=\"2\"><tt>#include <i>filename</i></tt></td>\n<td>include the file\
      \ in the output file, this does the same as the #include directive in UE2. By\
      \ default this directive is disabled, you can enable it in the config file.</td>\n\
      </tr>\n<tr>\n<td colspan=\"2\"><tt>#ucpp <i>command</i></tt></td>\n<td>various\
      \ UCPP related items; usually these will be replaced with comments. The following\
      \ commands are accepted.</td>\n</tr>\n<tr>\n<td></td>\n<td><tt>notice</tt></td>\n\
      <td>this will add a notice that the <i>uc</i> file was generated by UCPP, everything\
      \ after this command is ignored.</td>\n</tr>\n<tr>\n<td></td>\n<td><tt>version</tt></td>\n\
      <td>this will add a comment with the UCPP version info and homepage link.</td>\n\
      </tr>\n<tr>\n<td></td>\n<td><tt>include <i>filename</i></tt></td>\n<td>include\
      \ <i>filename</i> to be processed for macros, nothing else will be done with\
      \ the file. It has the same effect as using the command argument <i>-imacros\
      \ filename</i>. The filename is relative to the currently being processed file.</td>\n\
      </tr>\n<tr>\n<td></td>\n<td><tt>error <i>message</i></tt></td>\n<td>produces\
      \ a preprocessor error.</td>\n</tr>\n<tr>\n<td></td>\n<td><tt>warning <i>message</i></tt></td>\n\
      <td>produces a preprocessor warning. If the message is <i>off</i> warning reporting\
      \ will be turned off, and on again if it is <i>on</i> (and nothing more),</td>\n\
      </tr>\n<tr>\n<td></td>\n<td><tt>rename <i>filename</i></tt></td>\n<td>renames\
      \ the resulting file to <i>filename</i>. This can be useful to use UCPP to create\
      \ include files to be used with the UnrealEngine's <tt>#include</tt> directive</td>\n\
      </tr>\n<tr>\n<td></td>\n<td><tt>config <i>variable value</i></tt></td>\n<td>this\
      \ will override certain configuration variables for <i>this</i> file only. Variable\
      \ can be one of the following: <i>supportIf</i>, <i>supportDefine</i>, <i>supportPreDefine</i>,\
      \ <i>supportInclude</i>, <i>stripCode</i>. Value can be <i>true</i>, <i>false</i>,\
      \ <i>0</i>, <i>1</i> or empty to reset to the default value.</td>\n</tr>\n<tr>\n\
      <td colspan=\"2\"><tt>#pragma ucpp <i>command</i></tt></td>\n<td>Accepts the\
      \ same commands as the normal <tt>#ucpp</tt> directive except that using <tt>#pragma\
      \ ucpp</tt> is more portable (in case you ever switch preprocessors).</td>\n\
      </tr>\n</table>\n<p>All macros that UCPP processed will simply be commented\
      \ out.</p>\n<p>Most macros allow comments on the same line; everything after\
      \ the comment start token (<code>//</code> or <code>/*</code>) will be removed.\
      \ The macro <code>#define</code> <b>does not</b> support comments. For example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#if 1 // always\
      \ evaluates to 'true'</span>\n<span class=\"co2\">#endif /* this comment is\
      \ also ignored */</span>\n \n<span class=\"co2\">#define INC_COMMENT log(\"\
      Bogus\"); // this comment is included with the definition</span>\n \n<span class=\"\
      co2\">#ifdef 1 /* always evaluates to false */ &amp;&amp; 0</span></pre></div>\n\
      </div>\n<p><b>Note:</b> in UCPP version 1.3 and earlier you could not have spaces\
      \ between <tt>#</tt> and the directive. Also block everything was removed from\
      \ the start of a block comment.</p>\n<p><b>Note 2:</b> Do not start a block\
      \ comment in a macro and end it on an other line. This will break your code\
      \ even tho UCPP accepts it. For example, the following is <i><b>bad</b></i>:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co2\">#if 1 /*</span>\n\
      \    a block comment\n<span class=\"sy0\">*/</span>\n<span class=\"co2\">#endif</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Expression_syntax\">Expression\
      \ syntax</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UCPP?section=3\" title=\"Edit section: Expression\
      \ syntax\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Grammar:</p>\n<pre> EXPR      ::= CMPX\n CMPX      ::= ORX ( CMPOP CMPX )*\n\
      \ ORX       ::= ACCUM ( '||' ORX )*\n ACCUMX    ::= ANDX ( '+'|'-' ACCUM )*\n\
      \ ANDX      ::= MULTX ( '&amp;&amp;' ANDX )*\n MULTX     ::= UNARYX ( '*'|'/'\
      \ MULTX )*\n UNARYX    ::= ( '!' )? OPERAND\n OPERAND   ::= LVALUE | '(' EXPR\
      \ ')'\n LVALUE    ::= integer | BUILTIN '(' EXPR ')' | IDENTIFIER\n</pre>\n\
      <pre> CMPOP     ::= '&lt;' | '&lt;=' | '=&lt;' | '=&gt;' | '&gt;=' | '&gt;'\
      \ | '==' | '!='\n BUILTIN   ::= 'defined' | 'strcmp' | 'stricmp' | ... \n</pre>\n\
      <table class=\"wikitable\">\n<tr>\n<td style=\"text-align: center\"><b>Operator\
      \ precedence – from top to bottom</b></td>\n</tr>\n<tr>\n<td>!</td>\n</tr>\n\
      <tr>\n<td>/, *</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n</tr>\n<caption>, -</caption>\n\
      <tr>\n<td>{| |- | |}</td>\n</tr>\n<tr>\n<td>&lt;, &lt;=, =&lt;, =&gt;, &gt;=,\
      \ &gt;, ==,&#160;!=</td>\n</tr>\n</table>\n<p><b>Note:</b> <tt>&lt;=</tt> and\
      \ <tt>=&lt;=</tt> are the same, and so are <tt>&gt;=</tt> and <tt>=&gt;=</tt></p>\n\
      <p><code>IDENTIFIER</code> is resolved in the definition table. If it is not\
      \ defined, the entire expression will fail (e.g. the result is false). An empty\
      \ definition (<code>#define DEBUG</code>) will evaluate to <code>1</code>.</p>\n\
      <p>The following examples are valid expressions:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co2\">#if DEBUG &amp;&amp; UNSTABLE_CODE</span>\n\
      <span class=\"co2\">#endif</span>\n \n<span class=\"co2\">#if !DEBUG || (STABLE_TEST_CODE\
      \ &amp;&amp; COOKIES)</span>\n<span class=\"co2\">#endif</span></pre></div>\n\
      </div>\n<p>There are a couple of functions that can be used in an expression:</p>\n\
      <table class=\"wikitable\">\n<tr>\n<td style=\"text-align: center\"><b>function</b></td>\n\
      <td style=\"text-align: center\"><b>description</b></td>\n</tr>\n<tr>\n<td><tt>defined(<i>name</i>)</tt></td>\n\
      <td>Returns 1 if <i>name</i> is defined, 0 otherwise</td>\n</tr>\n<tr>\n<td><tt>strcmp(<i>name\
      \ or string</i>, <i>name or string</i>)</tt></td>\n<td>Returns 0 if both strings\
      \ are equal, you can use an identifier or a string constant. (v103 and up)</td>\n\
      </tr>\n<tr>\n<td><tt>stricmp(<i>name or string</i>, <i>name or string</i>)</tt></td>\n\
      <td>Identical as <tt>strcmp</tt> but case insensitive. (v103 and up)</td>\n\
      </tr>\n</table>\n<h4><span class=\"mw-headline\" id=\"Examples:_defined.28name.29\"\
      >Examples: defined(<i>name</i>)</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=4\" title=\"\
      Edit section: Examples: defined(name)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#undef DEBUG</span>\n \n<span class=\"co2\">#if defined(DEBUG)</span>\n\
      \  <span class=\"co1\">// this is accepted</span>\n<span class=\"co2\">#endif</span>\n\
      \ \n<span class=\"co2\">#if DEBUG</span>\n  <span class=\"co1\">// this will\
      \ produce a preprocessor error</span>\n<span class=\"co2\">#endif</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Examples:_strcmp.28arg1.2C_arg2.29\"\
      >Examples: strcmp(<i>arg1</i>, <i>arg2</i>)</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=5\"\
      \ title=\"Edit section: Examples: strcmp(arg1, arg2)\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h4>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co2\">#define TEST1 \"This is a test\"</span>\n<span class=\"\
      co2\">#define TEST2 \"This is a test\"</span>\n \n<span class=\"co2\">#if strcmp(TEST1,\
      \ TEST2) == 0</span>\n  evaluates to <span class=\"kw6\">true</span>\n<span\
      \ class=\"co2\">#endif</span>\n \n<span class=\"co2\">#if strcmp(TEST1, TEST2)</span>\n\
      \  result is <span class=\"nu0\">0</span> so it evaluates to <span class=\"\
      kw6\">false</span>\n<span class=\"co2\">#endif</span>\n \n<span class=\"co2\"\
      >#if stricmp(TEST1, \"This Is A Test\") == 0</span>\n  evaluates to <span class=\"\
      kw6\">true</span>\n<span class=\"co2\">#endif</span>\n \n<span class=\"co2\"\
      >#define TEST4 12345</span>\n<span class=\"co2\">#if strcmp(TEST4, 12345) ==\
      \ 0</span>\n  because of a side effect this also evaluates to <span class=\"\
      kw6\">true</span>\n<span class=\"co2\">#endif</span>\n \n<span class=\"co2\"\
      >#define TEST5 thisIsATest</span>\n<span class=\"co2\">#if strcmp(TEST5, \"\
      thisIsATest\") == 0</span>\n  not the same, one is a <span class=\"kw5\">string</span>,\
      \ the other isn<span class=\"st0\">'t, so -&gt; false\n#endif</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Macros.5CIdentifiers\">Macros\\\
      Identifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UCPP?section=6\" title=\"Edit section: Macros\\\
      Identifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>All source code will be parsed for uppercase identifiers (like <code>SOMETHING</code>\
      \ or <code>SOMETHING_ELSE</code>). These will then be replaced by their definition\
      \ (if defined) AS IS. This means that <code>\"this is a value of a definition\"\
      </code> will be inserted into the code like that.</p>\n<p>You can add new definitions\
      \ via the macro <code>#define</code> on the commandline or in the config file.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Pre-defined_macros\">Pre-defined macros</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UCPP?section=7\" title=\"Edit section: Pre-defined macros\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>The\
      \ following names are always defined; some have some additional magic (with\
      \ the name <tt>__<i>NAME</i>__</tt>). You can never override these magic definitions,\
      \ however you can disable them by using the <code>-undef-</code> commandline\
      \ argument.</p>\n<table>\n<tr>\n<td><tt>__FILE__</tt></td>\n<td>The full filename\
      \ of the current file surrounded by double quotes (the generated <code>.uc</code>\
      \ files).</td>\n</tr>\n<tr>\n<td><tt>__FILE_BASE__</tt></td>\n<td>Just the filename\
      \ without the directory name, also surrounded by double quotes.</td>\n</tr>\n\
      <tr>\n<td><tt>__CLASS__</tt></td>\n<td>The filename without an extention, should\
      \ be equal to the class name. This isn't quoted. (006 and up)</td>\n</tr>\n\
      <tr>\n<td><tt>__LINE__</tt></td>\n<td>The current line in the code, starting\
      \ from 1.</td>\n</tr>\n<tr>\n<td><tt>__DATE__</tt></td>\n<td>Returns the current\
      \ date in the long format (as a string), as defined by the current locale settings.</td>\n\
      </tr>\n<tr>\n<td><tt>__TIME__</tt></td>\n<td>Returns the current time in the\
      \ long format (as a string), as defined by the current locale settings.</td>\n\
      </tr>\n<tr>\n<td><tt>UCPP_VERSION</tt></td>\n<td>The UCPP version number.</td>\n\
      </tr>\n<tr>\n<td><tt>UCPP_HOMEPAGE</tt></td>\n<td>The UCPP homepage, the URL\
      \ of this page.</td>\n</tr>\n<tr>\n<td><tt>CLASS_<i>classname</i></tt></td>\n\
      <td>Where <i>classname</i> is the name of the current class. This is an <i>empty</i>\
      \ define, it can be useful in include files. (007 and up)</td>\n</tr>\n</table>\n\
      <h3><span class=\"mw-headline\" id=\"Function_Defines\">Function Defines</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UCPP?section=8\" title=\"Edit section: Function Defines\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>As\
      \ of version 006 beta it is possible to define macro functions.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co2\">#define FUNC(a,b,c) log(a$__FILE__,\
      \ c); a = b;</span>\n<span class=\"co1\">//      ^           ^- implementation</span>\n\
      <span class=\"co1\">//      \\- definition</span></pre></div>\n</div>\n<p>The\
      \ above is a definition of the function <code>FUNC/3</code> Note that this is\
      \ the so called footprint of the function, the number reflects the number of\
      \ arguments. It's a function with the name <code>FUNC</code> that accepts 3\
      \ arguments. The definition part may not contain any spaces, since the space\
      \ defines where the implementation part starts.</p>\n<p>Function arguments must\
      \ be seperated by commas. Each argument must have an unique name. The implementation\
      \ part is an unrealscript code snippet that contains the function arguments\
      \ or anything else (except preprocessor commands). The resulting implementation\
      \ is parsed again to process all defines used in the implementation.</p>\n<p>Function\
      \ definitions are unique by their number of arguments. <code>FUNC/2</code> does\
      \ not replace <code>FUNC/3</code>. In this way you will be able to overload\
      \ functions. The following definitions have the same footprint, thus the last\
      \ one will be come effective:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co2\">#define FUNC(a,b,c) log(a$__FILE__, c); a = b;</span>\n\
      <span class=\"co2\">#define FUNC(foo,bar,quux) // every call will be replaced\
      \ by this comment</span></pre></div>\n</div>\n<p>There are two special tokens\
      \ you can use in the implementation part:</p>\n<table class=\"wikitable\">\n\
      <tr>\n<td style=\"text-align: center\"><b>token</b></td>\n<td style=\"text-align:\
      \ center\"><b>meaning</b></td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td>Quote\
      \ the next function argument (make it an valid unrealscript string): <code>#\
      \ a -&gt; \"a\"</code>. This only affects function arguments, if the next token\
      \ isn't a argument it will not be quoted: <code># NotAnArgument -&gt; # NotAnArgument</code>\
      \ (no substitution at all).</td>\n</tr>\n<tr>\n<td><code>##</code></td>\n<td>This\
      \ will concat the previous argument with the next part: <code>a ## b -&gt; ab</code>\
      \ and <code>a ## NotAnArgument -&gt; aNotAnArgument</code>, but also <code>NotAnArgument\
      \ ## a -&gt; NotAnArgumenta</code>. <i>Note:</i> in 006 beta this doesn't work\
      \ as it should, it is fixed in version 007.</td>\n</tr>\n</table>\n<p>In order\
      \ to check if a certain function is defined use the footprint:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co2\">#ifndef FUNC/3</span>\n  <span class=\"\
      co2\">#define FUNC(a,b,c) log(a$__FILE__, c); a = b;</span>\n<span class=\"\
      co2\">#endif</span></pre></div>\n</div>\n<p>You can not use these functions\
      \ in an <code>#if</code> expression.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Commandline_options\">Commandline options</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=9\"\
      \ title=\"Edit section: Commandline options\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<pre>Usage:\n  ucpp.exe [switches] [settings] &lt;name&gt;\
      \ &lt;name&gt; ...\n\n  &lt;name&gt; is the name of a file or package, depeding\
      \ on the mode.\n\nSwitches (case sensitive):\n  -?    This message\n  -D&lt;name&gt;=&lt;value&gt;\n\
      \        Define a &lt;name&gt; with a &lt;value&gt;. This overrides the standards\
      \ as\n        defined in the configuration file\n  -env  Import environment\
      \ variables as declarations\n  -imacros &lt;filename&gt;\n        Process &lt;filename&gt;\
      \ for macros. This will be done for every file\n        that needs to be processed\n\
      \  -include &lt;filename&gt;\n        Alias for -imacros\n  -L    Print the\
      \ program's license\n  -undef\n        Do not use predefinitions (like __FILE__)\n\
      \  -P    Enable package mode. The provided names are package names.\n      \
      \  In package mode the base directory must be defined using\n        either\
      \ the SYSTEM or BASE setting\n  -pipe\n        Read from the stdin and write\
      \ to the stdout. Only works for\n        single files and not in package mode.\n\
      \  -q    Be quite, only show errors\\warnings\n  -stdout\n        Similar to\
      \ -pipe except that the file is not read from the\n        standard in, but\
      \ from the file provided on the commandline.\n        So it will just write\
      \ to the standard output.\n  -strip\n        Strip the code instead of commenting\
      \ it out\n  -U&lt;name&gt;\n        Undefine &lt;name&gt;. Note: this has a\
      \ lower precedence than\n        definitions made in the file\n  -V    Show\
      \ the program version\n  -wait Pause at the end of executiong when there where\
      \ errors\n  -WAIT Always pause at the end of processing\n\nSettings are always\
      \ in the format \"&lt;Key&gt;=&lt;Value&gt;\". The following\nkeys are accepted:\n\
      \  BASE          The base directory of the game. Required in\n             \
      \   Package Mode, unless SYSTEM is already given.\n  CONFIG        Alternate\
      \ configuration file to use.\n  MOD           The mod name, as used in the enhanced\
      \ mod\n                architecture.\n  SYSTEM        The \"System\" directory\
      \ of the game. Required in\n                Package Mode, unless BASE is already\
      \ given.\n</pre>\n<p>If an error was produced the exit value will be not zero.</p>\n\
      <p>It's easy to configure <a href=\"/Legacy:WOTgreal\" title=\"Legacy:WOTgreal\"\
      >WOTgreal</a> to execute the preprocessor before compiling the selected packages.\
      \ The commandline you should use is:</p>\n<pre>ucpp.exe SYSTEM=%SYSTEMDIR% MOD=%CURRENTMOD%\
      \ -DDEBUG=%DEBUGCOMPILE% -P %SELECTEDPACKAGES%\n</pre>\n<p>This will automatically\
      \ define the identifier DEBUG either set to 0 or 1 depending on if you made\
      \ a debug compile in WOTgreal. Note: with this <code>DEBUG</code> is always\
      \ defined, use it with <code>#if</code> not with <code>#ifdef</code>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Configuration\">Configuration</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UCPP?section=10\" title=\"Edit section: Configuration\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>UCPP\
      \ has a few configurable options. Unless <tt>CONFIG=<i>filename</i></tt> is\
      \ specified the program will load <tt>ucpp.ini</tt> in the same directory as\
      \ the location oc <tt>ucpp.exe</tt>. You can set the following items:</p>\n\
      <pre>[Options]\nsupportIf=1\nsupportDefine=1\nsupportPreDefine=1\nsupportInclude=0\n\
      stripCode=0\nstripMessage=// UCPP: code stripped\nnoticeMessage=// NOTICE: This\
      \ file was automatically generated by UCPP; do not edit this file manualy.\n\
      </pre>\n<dl>\n<dt>supportIf (<b>*</b>)</dt>\n<dd>toggles the support for <tt>#if\
      \ ... #elif ... #else ... #endif</tt> and <tt>#ifdef</tt> directives. This way\
      \ the original compiler should take care of these directives (Only useful for\
      \ the games of Irrational: Tribes: Vengeance and SWAT4).</dd>\n<dt>supportDefine\
      \ (<b>*</b>)</dt>\n<dd>toggles support for <tt>#define</tt> and <tt>#undef</tt></dd>\n\
      <dt>supportPreDefine (<b>*</b>)</dt>\n<dd>when turned off it has the same effect\
      \ as <tt>-undef-</tt> on the commandline (commandline will override this)</dd>\n\
      <dt>supportInclude (<b>*</b>)</dt>\n<dd>enable support for the <tt>#include</tt>\
      \ macro.</dd>\n<dt>stripCode (<b>*</b>)</dt>\n<dd>instead of commenting out\
      \ the code it will be removed, works the same as the <tt>-strip-</tt> commandline\
      \ options (commandline will override this)</dd>\n<dt>stripMessage</dt>\n<dd>the\
      \ message to use when stripping the code, if you leave it blank it only the\
      \ whitespace will remain.</dd>\n<dt>noticeMessage</dt>\n<dd>the message to use\
      \ when the <tt>#ucpp notice</tt> directive is used.</dd>\n</dl>\n<p>(<b>*</b>):\
      \ these settings can be changed through the <tt>#pragma ucpp config</tt> directive.</p>\n\
      <pre>[Defines]\nNAME=Value\n</pre>\n<p>The same as <tt>#define NAME Value</tt>.\
      \ You can use this for global definitions, although using an include file has\
      \ more possibilities.</p>\n<h2><span class=\"mw-headline\" id=\"UnrealEngine_Licensee_Notice\"\
      >UnrealEngine Licensee Notice</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=11\" title=\"\
      Edit section: UnrealEngine Licensee Notice\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Since version 1.4 there is a new feature that allows\
      \ you to pipe the source file through UCPP. With this feature it is possible\
      \ to hook up UCPP with the UnrealScript compiler. This way you don't need special\
      \ <tt>.puc</tt> files, when the engine imports the code from the <tt>.uc</tt>\
      \ file it can pipe it through UCPP. This way the preprocessing will be done\
      \ on the fly.</p>\n<p>For more information on how to add external preprocessor\
      \ support to the UnrealEngine you can contact me through the <a rel=\"nofollow\"\
      \ class=\"external text\" href=\"https://udn.epicgames.com/Two/UnDevIRC\">UDN\
      \ IRC Server</a>, my nickname is <i>elmuerte</i> (obviously).</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Downloads\">Downloads</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=12\"\
      \ title=\"Edit section: Downloads\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><b><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://prdownloads.sourceforge.net/uncodex/ucpp-v1.6.zip\">Version\
      \ 1.6</a></b> - <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=366364\"\
      >release notes</a></li>\n</ul>\n<ul>\n<li><a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://prdownloads.sourceforge.net/uncodex/ucpp-v1.5.zip\">Version\
      \ 1.5</a> - <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=364785\"\
      >release notes</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-v1.4.zip\">Version 1.4</a> -\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=350093\"\
      >release notes</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-v1.3.zip\">Version 1.3</a> -\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=346922\"\
      >release notes</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-v1.2.zip\">Version 1.2</a> -\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=346648\"\
      >release notes</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-v1.1.zip\">Version 1.1</a> -\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/project/shownotes.php?release_id=345429\"\
      >release notes</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-v1.0.zip\">Version 1.0</a></li>\n\
      <li><a rel=\"nofollow\" class=\"external text\" href=\"http://prdownloads.sourceforge.net/uncodex/ucpp-008beta.zip\"\
      >Version 008 beta</a></li>\n<li><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://prdownloads.sourceforge.net/uncodex/ucpp-007beta.zip\">Version\
      \ 007 beta</a></li>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"\
      http://prdownloads.sourceforge.net/uncodex/ucpp-006beta.zip\">Version 006 beta</a></li>\n\
      <li><a rel=\"nofollow\" class=\"external text\" href=\"http://prdownloads.sourceforge.net/uncodex/ucpp-005beta.zip\"\
      >Version 005 beta</a></li>\n</ul>\n<p>Since UCPP uses some parts of <a href=\"\
      /Legacy:UnCodeX\" title=\"Legacy:UnCodeX\">UnCodeX</a> it is included with the\
      \ UnCodeX project on <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/projects/uncodex/\"\
      >SourceForge</a>. UCPP's source code is available in the UnCodeX source in the\
      \ directory <code>src\\ucpp</code>.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Known_bugs.5Cissues\">Known bugs\\issues</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=13\"\
      \ title=\"Edit section: Known bugs\\issues\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<dl>\n<dt>Newlines are not supported&#160;</dt>\n<dd>There\
      \ is no way to insert a newline via definitions or macros. The reason for this\
      \ is simple: the line numbers of the <i>puc</i> and <i>uc</i> file won't be\
      \ skewed. This way it's easier to find compiler errors.</dd>\n</dl>\n<dl>\n\
      <dt>#include files not processed&#160;</dt>\n<dd>Files included via the UnrealEngine\
      \ built-in #include macro are not processed for macros. Use <tt>#ucpp include\
      \ <i>filename</i></tt> to include preprocessor directives. It is possible to\
      \ enable support for include directives, in this case the <tt>#include</tt>\
      \ line is replaced with the actual file during rewriting. So the actual unrealscript\
      \ compiler won't have to include it.</dd>\n</dl>\n<dl>\n<dt>Code obliviousness&#160;</dt>\n\
      <dd>the preprocessor is completely oblivious about the actual unrealscript source\
      \ code it preprocesses. This means definitions made in super classes do not\
      \ exist in subclasses. For global definitions you should use other means like\
      \ the configuration file, the commandline or an include file (<tt>#ucpp include\
      \ <i>file</i></tt>).</dd>\n</dl>\n<dl>\n<dt>Recursive defines will break&#160;</dt>\n\
      <dd><code>#define A(x) B(x) #define B(x) A(x)</code> will break. In 007 and\
      \ later an error will be generated.</dd>\n</dl>\n<dl>\n<dt>Function defines\
      \ can not be used in expressions&#160;</dt>\n<dd>You can not use function defines\
      \ in <code>#if</code> expressions, however you can use them in <code>#ifdef</code>,\
      \ but you will need to reference them by their footprint: <code>FUNC(a,b,c)</code>\
      \ has the footprint <code>FUNC/3</code></dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Feature_requests\">Feature requests</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=14\"\
      \ title=\"Edit section: Feature requests\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>Please add your feature requests here, or on the\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://sourceforge.net/projects/uncodex/\"\
      >SourceForge</a> project page</i></p>\n<p><b>Xian:</b> Maybe add __USER__ and\
      \ __PROJECT__, them being config-ed in the INI. Maybe if user is empty, use\
      \ the current windows user, if the project macro is empty, use the Folder we're\
      \ working in (not the package foler, i.e. C:\\MyMod\\MyPkg\\Classes, it will\
      \ use \"MyMod\"). Perhaps some code support too, such as checking if a var/func\
      \ is replicated and/or if a var name/function are defined in the .uc file (unless\
      \ #ifdef MYFUNC/2 does this and I misunderstood). And last but not least, an\
      \ option to comment out only parts (and remove the other code if stripping is\
      \ enabled) with some possible custom comment macros.</p>\n<p><b>El Muerte:</b>\
      \ if you need a __USER__ and __PROJECT__ then use the standard define functionality\
      \ already provided. Additionally you can import all evironment variables as\
      \ defines using the -env commandline argument. In that case USERNAME will expand\
      \ to the current username. PreProcessors are oblivious to the actual code, it\
      \ doesn't know about anything related to replication. The #ifdef MYFUNC/2 tests\
      \ if there is a macro defined with that signature, it has nothing to do with\
      \ the unrealscript code.</p>\n<p><b>Xian:</b> Thanks for the reply. I see, I'll\
      \ check the environ define. Ah, so it's basically just generation occurring,\
      \ not parsing at all (of the UScript code, that is). Well, not so bad me thinks\
      \ sine that might complicate things due to inheritance... Thanks for the tool,\
      \ though, it's amazing&#160;:)</p>\n<h2><span class=\"mw-headline\" id=\"Tips_and_Tricks\"\
      >Tips and Tricks</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UCPP?section=15\" title=\"Edit section: Tips\
      \ and Tricks\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Mixing_defines_and_actual_functions\">Mixing\
      \ defines and actual functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UCPP?section=16\" title=\"\
      Edit section: Mixing defines and actual functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Since only uppercase identifiers will be replaced\
      \ and because unrealscript is case insensitive you can mix them to add extra\
      \ functionality.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co2\">#define LOG(a,b) log(a$chr(10)$__FILE__$\":\"$string(__LINE__), b)</span>\n\
      <span class=\"co2\">#define LOG(a) LOG(a, name)</span></pre></div>\n</div>\n\
      <p>Now if you use the <code>LOG</code> (in uppercase) function it will append\
      \ the source file and the line number. If the file isn't processed by UCPP it\
      \ will still work (taking into account that the above macros where defined somewhere\
      \ else than in the source file).</p>\n<h3><span class=\"mw-headline\" id=\"\
      Using_the_current_working_directory\">Using the current working directory</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UCPP?section=17\" title=\"Edit section: Using the current\
      \ working directory\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>If you want to use the current working directory as BASE or SYSTEM just use\
      \ a \".\". BASE and SYSTEM take relative paths, and \".\" means the current\
      \ directory. So for example:</p>\n<pre>c:\\UT2004\\System&gt;ucpp -P SYSTEM=.\
      \ MyPackage\n</pre>\n<p>The following does the same</p>\n<pre>c:\\UT2004\\System&gt;ucpp\
      \ -P BASE=.. MyPackage\n</pre>\n<h2><span class=\"mw-headline\" id=\"Comments\"\
      >Comments</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UCPP?section=18\" title=\"Edit section: Comments\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Tarquin:</b>\
      \ Sounds interesting!</p>\n<p><b>El Muerte:</b> Aargh, about 30 minutes after\
      \ I released 007 I found a minor yet stupid bug. Backslashes are not properly\
      \ escaped. Not a major thing, but just annoying.</p>\n<p><b>El Muerte:</b> There,\
      \ another release. Implemented pretty much every feature I wanted. Still have\
      \ to document how to use the config file. But for the rest if this release holds\
      \ up I think a stable release is close.</p>\n<p><b>El Muerte:</b> ok, here's\
      \ version 1.0, did quite some testing a found a few minor bugs, also new in\
      \ the release is support for <code>#elif</code>. I'm delaying the press release\
      \ a bit, just in case of an serious bug.</p>\n<p><b>Guest:</b> Featured on BU's\
      \ news page.&#160;:) <a rel=\"nofollow\" class=\"external free\" href=\"http://www.beyondunreal.com/daedalus/singlepost.php?id=8449\"\
      >http://www.beyondunreal.com/daedalus/singlepost.php?id=8449</a></p>\n<p><b>razialx:</b>\
      \ El Muerte, you are amazing. Now I feel like starting up coding in UScript\
      \ again.</p>\n<p><b>Devi:</b> We've just started using this on the game my company\
      \ is working on (I'm under an NDA, so I can say no more I'm afraid) and I'd\
      \ just like to say: \"Thankyouthankyouthankyouthankthankyou, you have made our\
      \ lives SO much easier\"&#160;:)</p>\n<p><b>Jon:</b> Soon you'll be speaking\
      \ in binary code and taking over all our satellites.&#160;:)</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.255 seconds\nReal time usage: 0.515 seconds\n\
      Preprocessor visited node count: 177/1000000\nPreprocessor generated node count:\
      \ 316/1000000\nPost‐expand include size: 4/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:3514-0!*!0!!en!*!* and timestamp 20221118014213 and revision\
      \ id 9003\n -->\n"
  categories:
  - sortkey: "UCPP"
    name: "Legacy_Application"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnCodeX"
  - ns: 100
    exists: true
    name: "Legacy:WOTgreal"
  - ns: 100
    exists: true
    name: "Legacy:UsUnit"
  - ns: 100
    exists: true
    name: "Legacy:El Muerte"
  - ns: 100
    exists: true
    name: "Legacy:Ucc"
  templates: []
  images: []
  externallinks:
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.5.zip"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.0.zip"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-008beta.zip"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-007beta.zip"
  - "http://sourceforge.net/project/shownotes.php?release_id=350093"
  - "http://sourceforge.net/project/shownotes.php?release_id=366364"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.2.zip"
  - "http://sourceforge.net/project/shownotes.php?release_id=364785"
  - "http://www.beyondunreal.com/daedalus/singlepost.php?id=8449"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.4.zip"
  - "http://sourceforge.net/project/shownotes.php?release_id=346922"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.6.zip"
  - "http://sourceforge.net/project/shownotes.php?release_id=346648"
  - "http://sourceforge.net/projects/uncodex/"
  - "http://sourceforge.net/project/shownotes.php?release_id=345429"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-005beta.zip"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.3.zip"
  - "https://udn.epicgames.com/Two/UnDevIRC"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-v1.1.zip"
  - "http://prdownloads.sourceforge.net/uncodex/ucpp-006beta.zip"
  sections:
  - toclevel: 1
    level: "2"
    line: "Features"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UCPP"
    byteoffset: 565
    anchor: "Features"
  - toclevel: 2
    level: "3"
    line: "Directives"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UCPP"
    byteoffset: 579
    anchor: "Directives"
  - toclevel: 3
    level: "4"
    line: "Expression syntax"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:UCPP"
    byteoffset: 4489
    anchor: "Expression_syntax"
  - toclevel: 3
    level: "4"
    line: "Examples: defined(<i>name</i>)"
    number: "1.1.2"
    index: "4"
    fromtitle: "Legacy:UCPP"
    byteoffset: 6248
    anchor: "Examples:_defined.28name.29"
  - toclevel: 3
    level: "4"
    line: "Examples: strcmp(<i>arg1</i>, <i>arg2</i>)"
    number: "1.1.3"
    index: "5"
    fromtitle: "Legacy:UCPP"
    byteoffset: 6431
    anchor: "Examples:_strcmp.28arg1.2C_arg2.29"
  - toclevel: 2
    level: "3"
    line: "Macros\\Identifiers"
    number: "1.2"
    index: "6"
    fromtitle: "Legacy:UCPP"
    byteoffset: 7008
    anchor: "Macros.5CIdentifiers"
  - toclevel: 3
    level: "4"
    line: "Pre-defined macros"
    number: "1.2.1"
    index: "7"
    fromtitle: "Legacy:UCPP"
    byteoffset: 7433
    anchor: "Pre-defined_macros"
  - toclevel: 2
    level: "3"
    line: "Function Defines"
    number: "1.3"
    index: "8"
    fromtitle: "Legacy:UCPP"
    byteoffset: 8692
    anchor: "Function_Defines"
  - toclevel: 2
    level: "3"
    line: "Commandline options"
    number: "1.4"
    index: "9"
    fromtitle: "Legacy:UCPP"
    byteoffset: 11009
    anchor: "Commandline_options"
  - toclevel: 1
    level: "2"
    line: "Configuration"
    number: "2"
    index: "10"
    fromtitle: "Legacy:UCPP"
    byteoffset: 13590
    anchor: "Configuration"
  - toclevel: 1
    level: "2"
    line: "UnrealEngine Licensee Notice"
    number: "3"
    index: "11"
    fromtitle: "Legacy:UCPP"
    byteoffset: 15251
    anchor: "UnrealEngine_Licensee_Notice"
  - toclevel: 1
    level: "2"
    line: "Downloads"
    number: "4"
    index: "12"
    fromtitle: "Legacy:UCPP"
    byteoffset: 15871
    anchor: "Downloads"
  - toclevel: 1
    level: "2"
    line: "Known bugs\\issues"
    number: "5"
    index: "13"
    fromtitle: "Legacy:UCPP"
    byteoffset: 17465
    anchor: "Known_bugs.5Cissues"
  - toclevel: 1
    level: "2"
    line: "Feature requests"
    number: "6"
    index: "14"
    fromtitle: "Legacy:UCPP"
    byteoffset: 18925
    anchor: "Feature_requests"
  - toclevel: 1
    level: "2"
    line: "Tips and Tricks"
    number: "7"
    index: "15"
    fromtitle: "Legacy:UCPP"
    byteoffset: 20493
    anchor: "Tips_and_Tricks"
  - toclevel: 2
    level: "3"
    line: "Mixing defines and actual functions"
    number: "7.1"
    index: "16"
    fromtitle: "Legacy:UCPP"
    byteoffset: 20514
    anchor: "Mixing_defines_and_actual_functions"
  - toclevel: 2
    level: "3"
    line: "Using the current working directory"
    number: "7.2"
    index: "17"
    fromtitle: "Legacy:UCPP"
    byteoffset: 21079
    anchor: "Using_the_current_working_directory"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "8"
    index: "18"
    fromtitle: "Legacy:UCPP"
    byteoffset: 21414
    anchor: "Comments"
  displaytitle: "Legacy:UCPP"
  iwlinks: []
  wikitext:
    text: "UnrealScript Class PreProcessor (UCPP) is a commandline utility intended\
      \ to be executed before <code>ucc make</code>. It adds some preprocessor features\
      \ that are not possible with [[Legacy:Ucc|Ucc]]. UCPP takes special class files\
      \ with a <code>.puc</code> extention, processes them and generates a <code>.uc</code>.\n\
      \n[[Legacy:El Muerte|El Muerte]] started on this tool to add some more magic\
      \ to an upcoming UnrealScript unit testing framework ([[Legacy:UsUnit|UsUnit]]).\
      \ This tool is currently in development; any help (like testing) would be greatly\
      \ appreciated.\n\n==Features==\n\n===Directives===\n\n{| class=\"wikitable\"\
      \n\n|-\n| colspan=\"2\" style=\"text-align: center\" |'''directive'''\n| style=\"\
      text-align: center\" |'''description''' \n|-\n| colspan=\"2\" |<tt>#define&nbsp;''name''&nbsp;''something&nbsp;...''</tt>\n\
      |adds\\overrides an definition ''name'' (case insensitive) with the value ''something\
      \ ...'' (till the end of the line) \n|-\n| colspan=\"2\" |<tt>#undef ''name''</tt>\n\
      |removed ''name'' from the definition list (for this file only) \n|-\n| colspan=\"\
      2\" |<tt>#if ''expresion ''</tt> <br />... <br /><tt>#elif ''expresion ''</tt>\
      \ <br />... <br /><tt>#else</tt> <br />... <br /><tt>#endif</tt>\n|''expression''\
      \ contains an expression constructed from numbers or defined names. The <code>#else</code>\
      \ is optional. <tt>#elif</tt> (since version 009) is short of \"else if\", you\
      \ can have as many of these as you want. You can nest these. \n|-\n| colspan=\"\
      2\" |<tt>#ifdef ''name''</tt>\n|evaluates to true if ''name'' is defined. Can\
      \ also be used to check if function definitions have been made: <tt>#ifdef MYFUNC/2</tt>.\
      \ \n|-\n| colspan=\"2\" |<tt>#ifndef ''name''</tt>\n|the opposite of <tt>#ifdef</tt>\
      \ \n|-\n| colspan=\"2\" |<tt>#include ''filename''</tt>\n|include the file in\
      \ the output file, this does the same as the #include directive in UE2. By default\
      \ this directive is disabled, you can enable it in the config file. \n|-\n|\
      \ colspan=\"2\" |<tt>#ucpp ''command''</tt>\n|various UCPP related items; usually\
      \ these will be replaced with comments. The following commands are accepted.\
      \ \n|-\n|\n|<tt>notice</tt>\n|this will add a notice that the ''uc'' file was\
      \ generated by UCPP, everything after this command is ignored. \n|-\n|\n|<tt>version</tt>\n\
      |this will add a comment with the UCPP version info and homepage link. \n|-\n\
      |\n|<tt>include ''filename''</tt>\n|include ''filename'' to be processed for\
      \ macros, nothing else will be done with the file. It has the same effect as\
      \ using the command argument ''-imacros filename''. The filename is relative\
      \ to the currently being processed file. \n|-\n|\n|<tt>error ''message''</tt>\n\
      |produces a preprocessor error. \n|-\n|\n|<tt>warning ''message''</tt>\n|produces\
      \ a preprocessor warning. If the message is ''off'' warning reporting will be\
      \ turned off, and on again if it is ''on'' (and nothing more), \n|-\n|\n|<tt>rename\
      \ ''filename''</tt>\n|renames the resulting file to ''filename''. This can be\
      \ useful to use UCPP to create include files to be used with the UnrealEngine's\
      \ <tt>#include</tt> directive \n|-\n|\n|<tt>config ''variable value''</tt>\n\
      |this will override certain configuration variables for ''this'' file only.\
      \ Variable can be one of the following: ''supportIf'', ''supportDefine'', ''supportPreDefine'',\
      \ ''supportInclude'', ''stripCode''. Value can be ''true'', ''false'', ''0'',\
      \ ''1'' or empty to reset to the default value.\n|-\n| colspan=\"2\" |<tt>#pragma\
      \ ucpp ''command''</tt>\n|Accepts the same commands as the normal <tt>#ucpp</tt>\
      \ directive except that using <tt>#pragma ucpp</tt> is more portable (in case\
      \ you ever switch preprocessors). \n|}\n\nAll macros that UCPP processed will\
      \ simply be commented out.\n\nMost macros allow comments on the same line; everything\
      \ after the comment start token (<code>//</code> or <code>/*</code>) will be\
      \ removed. The macro <code>#define</code> '''does not''' support comments. For\
      \ example:\n\n<uscript>\n#if 1 // always evaluates to 'true'\n#endif /* this\
      \ comment is also ignored */\n\n#define INC_COMMENT log(\"Bogus\"); // this\
      \ comment is included with the definition\n\n#ifdef 1 /* always evaluates to\
      \ false */ && 0\n</uscript>\n\n'''Note:''' in UCPP version 1.3 and earlier you\
      \ could not have spaces between <tt>#</tt> and the directive. Also block everything\
      \ was removed from the start of a block comment.\n\n'''Note 2:''' Do not start\
      \ a block comment in a macro and end it on an other line. This will break your\
      \ code even tho UCPP accepts it. For example, the following is '''''bad''''':\n\
      \n<uscript>\n#if 1 /*\n    a block comment\n*/\n#endif\n</uscript>\n\n====Expression\
      \ syntax====\n\nGrammar:\n\n  EXPR      ::= CMPX\n  CMPX      ::= ORX ( CMPOP\
      \ CMPX )*\n  ORX       ::= ACCUM ( '||' ORX )*\n  ACCUMX    ::= ANDX ( '+'|'-'\
      \ ACCUM )*\n  ANDX      ::= MULTX ( '&&' ANDX )*\n  MULTX     ::= UNARYX ( '*'|'/'\
      \ MULTX )*\n  UNARYX    ::= ( '!' )? OPERAND\n  OPERAND   ::= LVALUE | '(' EXPR\
      \ ')'\n  LVALUE    ::= integer | BUILTIN '(' EXPR ')' | IDENTIFIER\n\n  CMPOP\
      \     ::= '<' | '<=' | '=<' | '=>' | '>=' | '>' | '==' | '!='\n  BUILTIN   ::=\
      \ 'defined' | 'strcmp' | 'stricmp' | ... \n\n{| class=\"wikitable\"\n\n|-\n\
      | style=\"text-align: center\" |'''Operator precedence &ndash; from top to bottom'''\
      \ \n|-\n|! \n|-\n|/, * \n|-\n|&& \n|-\n|+, - \n|-\n|<nowiki>{|\n\n|-\n|\n|}\n\
      </nowiki> \n|-\n|<, <=, =<, =>, >=, >, ==, != \n|}\n\n'''Note:''' <tt><=</tt>\
      \ and <tt>=<=</tt> are the same, and so are <tt>>=</tt> and <tt>=>=</tt>\n\n\
      <code>IDENTIFIER</code> is resolved in the definition table. If it is not defined,\
      \ the entire expression will fail (e.g. the result is false). An empty definition\
      \ (<code>#define DEBUG</code>) will evaluate to <code>1</code>.\n\nThe following\
      \ examples are valid expressions:\n\n<uscript>\n#if DEBUG && UNSTABLE_CODE\n\
      #endif\n\n#if !DEBUG || (STABLE_TEST_CODE && COOKIES)\n#endif\n</uscript>\n\n\
      There are a couple of functions that can be used in an expression:\n\n{| class=\"\
      wikitable\"\n\n|-\n| style=\"text-align: center\" |'''function'''\n| style=\"\
      text-align: center\" |'''description''' \n|-\n|<tt>defined(''name'')</tt>\n\
      |Returns 1 if ''name'' is defined, 0 otherwise \n|-\n|<tt>strcmp(''name or string'',\
      \ ''name or string'')</tt>\n|Returns 0 if both strings are equal, you can use\
      \ an identifier or a string constant. (v103 and up) \n|-\n|<tt>stricmp(''name\
      \ or string'', ''name or string'')</tt>\n|Identical as <tt>strcmp</tt> but case\
      \ insensitive. (v103 and up) \n|}\n\n====Examples: defined(''name'')====\n\n\
      <uscript>\n#undef DEBUG\n\n#if defined(DEBUG)\n  // this is accepted\n#endif\n\
      \n#if DEBUG\n  // this will produce a preprocessor error\n#endif\n</uscript>\n\
      \n====Examples: strcmp(''arg1'', ''arg2'')====\n\n<uscript>\n#define TEST1 \"\
      This is a test\"\n#define TEST2 \"This is a test\"\n\n#if strcmp(TEST1, TEST2)\
      \ == 0\n  evaluates to true\n#endif\n\n#if strcmp(TEST1, TEST2)\n  result is\
      \ 0 so it evaluates to false\n#endif\n\n#if stricmp(TEST1, \"This Is A Test\"\
      ) == 0\n  evaluates to true\n#endif\n\n#define TEST4 12345\n#if strcmp(TEST4,\
      \ 12345) == 0\n  because of a side effect this also evaluates to true\n#endif\n\
      \n#define TEST5 thisIsATest\n#if strcmp(TEST5, \"thisIsATest\") == 0\n  not\
      \ the same, one is a string, the other isn't, so -> false\n#endif\n</uscript>\n\
      \n===Macros\\Identifiers===\n\nAll source code will be parsed for uppercase\
      \ identifiers (like <code>SOMETHING</code> or <code>SOMETHING_ELSE</code>).\
      \ These will then be replaced by their definition (if defined) AS IS. This means\
      \ that <code>\"this is a value of a definition\"</code> will be inserted into\
      \ the code like that.\n\nYou can add new definitions via the macro <code>#define</code>\
      \ on the commandline or in the config file.\n\n====Pre-defined macros====\n\n\
      The following names are always defined; some have some additional magic (with\
      \ the name <tt>__''NAME''__</tt>). You can never override these magic definitions,\
      \ however you can disable them by using the <code>-undef-</code> commandline\
      \ argument.\n\n{|\n\n|-\n|<tt>__FILE__</tt>\n|The full filename of the current\
      \ file surrounded by double quotes (the generated <code>.uc</code> files). \n\
      |-\n|<tt>__FILE_BASE__</tt>\n|Just the filename without the directory name,\
      \ also surrounded by double quotes. \n|-\n|<tt>__CLASS__</tt>\n|The filename\
      \ without an extention, should be equal to the class name. This isn't quoted.\
      \ (006 and up) \n|-\n|<tt>__LINE__</tt>\n|The current line in the code, starting\
      \ from 1. \n|-\n|<tt>__DATE__</tt>\n|Returns the current date in the long format\
      \ (as a string), as defined by the current locale settings. \n|-\n|<tt>__TIME__</tt>\n\
      |Returns the current time in the long format (as a string), as defined by the\
      \ current locale settings. \n|-\n|<tt>UCPP_VERSION</tt>\n|The UCPP version number.\
      \ \n|-\n|<tt>UCPP_HOMEPAGE</tt>\n|The UCPP homepage, the URL of this page. \n\
      |-\n|<tt>CLASS_''classname''</tt>\n|Where ''classname'' is the name of the current\
      \ class. This is an ''empty'' define, it can be useful in include files. (007\
      \ and up) \n|}\n\n===Function Defines===\n\nAs of version 006 beta it is possible\
      \ to define macro functions.\n\n<uscript>\n#define FUNC(a,b,c) log(a$__FILE__,\
      \ c); a = b;\n//      ^           ^- implementation\n//      \\- definition\n\
      </uscript>\n\nThe above is a definition of the function <code>FUNC/3</code>\
      \ Note that this is the so called footprint of the function, the number reflects\
      \ the number of arguments. It's a function with the name <code>FUNC</code> that\
      \ accepts 3 arguments. The definition part may not contain any spaces, since\
      \ the space defines where the implementation part starts. \n\nFunction arguments\
      \ must be seperated by commas. Each argument must have an unique name. The implementation\
      \ part is an unrealscript code snippet that contains the function arguments\
      \ or anything else (except preprocessor commands). The resulting implementation\
      \ is parsed again to process all defines used in the implementation.\n\nFunction\
      \ definitions are unique by their number of arguments. <code>FUNC/2</code> does\
      \ not replace <code>FUNC/3</code>. In this way you will be able to overload\
      \ functions. The following definitions have the same footprint, thus the last\
      \ one will be come effective:\n\n<uscript>\n#define FUNC(a,b,c) log(a$__FILE__,\
      \ c); a = b;\n#define FUNC(foo,bar,quux) // every call will be replaced by this\
      \ comment\n</uscript>\n\nThere are two special tokens you can use in the implementation\
      \ part:\n\n{| class=\"wikitable\"\n\n|-\n| style=\"text-align: center\" |'''token'''\n\
      | style=\"text-align: center\" |'''meaning''' \n|-\n|<code>#</code>\n|Quote\
      \ the next function argument (make it an valid unrealscript string): <code>#\
      \ a -> \"a\"</code>. This only affects function arguments, if the next token\
      \ isn't a argument it will not be quoted: <code># NotAnArgument -> # NotAnArgument</code>\
      \ (no substitution at all).\n|-\n|<code>##</code>\n|This will concat the previous\
      \ argument with the next part: <code>a ## b -> ab</code> and <code>a ## NotAnArgument\
      \ -> aNotAnArgument</code>, but also <code>NotAnArgument ## a -> NotAnArgumenta</code>.\
      \ ''Note:'' in 006 beta this doesn't work as it should, it is fixed in version\
      \ 007. \n|}\n\nIn order to check if a certain function is defined use the footprint:\n\
      \n<uscript>\n#ifndef FUNC/3\n  #define FUNC(a,b,c) log(a$__FILE__, c); a = b;\n\
      #endif\n</uscript>\n\nYou can not use these functions in an <code>#if</code>\
      \ expression.\n\n===Commandline options===\n\n Usage:\n   ucpp.exe [switches]\
      \ [settings] <name> <name> ...\n \n   <name> is the name of a file or package,\
      \ depeding on the mode.\n \n Switches (case sensitive):\n   -?    This message\n\
      \   -D<name>=<value>\n         Define a <name> with a <value>. This overrides\
      \ the standards as\n         defined in the configuration file\n   -env  Import\
      \ environment variables as declarations\n   -imacros <filename>\n         Process\
      \ <filename> for macros. This will be done for every file\n         that needs\
      \ to be processed\n   -include <filename>\n         Alias for -imacros\n   -L\
      \    Print the program's license\n   -undef\n         Do not use predefinitions\
      \ (like __FILE__)\n   -P    Enable package mode. The provided names are package\
      \ names.\n         In package mode the base directory must be defined using\n\
      \         either the SYSTEM or BASE setting\n   -pipe\n         Read from the\
      \ stdin and write to the stdout. Only works for\n         single files and not\
      \ in package mode.\n   -q    Be quite, only show errors\\warnings\n   -stdout\n\
      \         Similar to -pipe except that the file is not read from the\n     \
      \    standard in, but from the file provided on the commandline.\n         So\
      \ it will just write to the standard output.\n   -strip\n         Strip the\
      \ code instead of commenting it out\n   -U<name>\n         Undefine <name>.\
      \ Note: this has a lower precedence than\n         definitions made in the file\n\
      \   -V    Show the program version\n   -wait Pause at the end of executiong\
      \ when there where errors\n   -WAIT Always pause at the end of processing\n\
      \ \n Settings are always in the format \"<Key>=<Value>\". The following\n keys\
      \ are accepted:\n   BASE          The base directory of the game. Required in\n\
      \                 Package Mode, unless SYSTEM is already given.\n   CONFIG \
      \       Alternate configuration file to use.\n   MOD           The mod name,\
      \ as used in the enhanced mod\n                 architecture.\n   SYSTEM   \
      \     The \"System\" directory of the game. Required in\n                 Package\
      \ Mode, unless BASE is already given.\n\nIf an error was produced the exit value\
      \ will be not zero.\n\nIt's easy to configure [[Legacy:WOTgreal|WOTgreal]] to\
      \ execute the preprocessor before compiling the selected packages. The commandline\
      \ you should use is:\n ucpp.exe SYSTEM=%SYSTEMDIR% MOD=%CURRENTMOD% -DDEBUG=%DEBUGCOMPILE%\
      \ -P %SELECTEDPACKAGES%\n\nThis will automatically define the identifier DEBUG\
      \ either set to 0 or 1 depending on if you made a debug compile in WOTgreal.\
      \ Note: with this <code>DEBUG</code> is always defined, use it with <code>#if</code>\
      \ not with <code>#ifdef</code>.\n\n==Configuration==\n\nUCPP has a few configurable\
      \ options. Unless <tt>CONFIG=''filename''</tt> is specified the program will\
      \ load <tt>ucpp.ini</tt> in the same directory as the location oc <tt>ucpp.exe</tt>.\
      \ You can set the following items:\n\n [Options]\n supportIf=1\n supportDefine=1\n\
      \ supportPreDefine=1\n supportInclude=0\n stripCode=0\n stripMessage=// UCPP:\
      \ code stripped\n noticeMessage=// NOTICE: This file was automatically generated\
      \ by UCPP; do not edit this file manualy.\n\n;supportIf ('''*'''): toggles the\
      \ support for <tt>#if ... #elif ... #else ... #endif</tt> and <tt>#ifdef</tt>\
      \ directives. This way the original compiler should take care of these directives\
      \ (Only useful for the games of Irrational: Tribes: Vengeance and SWAT4).\n\
      ;supportDefine ('''*'''): toggles support for <tt>#define</tt> and <tt>#undef</tt>\n\
      ;supportPreDefine ('''*'''): when turned off it has the same effect as <tt>-undef-</tt>\
      \ on the commandline (commandline will override this)\n;supportInclude ('''*'''):\
      \ enable support for the <tt>#include</tt> macro.\n;stripCode ('''*'''): instead\
      \ of commenting out the code it will be removed, works the same as the <tt>-strip-</tt>\
      \ commandline options (commandline will override this)\n;stripMessage: the message\
      \ to use when stripping the code, if you leave it blank it only the whitespace\
      \ will remain.\n;noticeMessage: the message to use when the <tt>#ucpp notice</tt>\
      \ directive is used.\n\n('''*'''): these settings can be changed through the\
      \ <tt>#pragma ucpp config</tt> directive.\n\n [Defines]\n NAME=Value\n\nThe\
      \ same as <tt>#define NAME Value</tt>. You can use this for global definitions,\
      \ although using an include file has more possibilities.\n\n==UnrealEngine Licensee\
      \ Notice==\n\nSince version 1.4 there is a new feature that allows you to pipe\
      \ the source file through UCPP. With this feature it is possible to hook up\
      \ UCPP with the UnrealScript compiler. This way you don't need special <tt>.puc</tt>\
      \ files, when the engine imports the code from the <tt>.uc</tt> file it can\
      \ pipe it through UCPP. This way the preprocessing will be done on the fly.\n\
      \nFor more information on how to add external preprocessor support to the UnrealEngine\
      \ you can contact me through the [https://udn.epicgames.com/Two/UnDevIRC UDN\
      \ IRC Server], my nickname is ''elmuerte'' (obviously).\n\n==Downloads==\n*\
      \ '''[http://prdownloads.sourceforge.net/uncodex/ucpp-v1.6.zip Version 1.6]'''\
      \ - [http://sourceforge.net/project/shownotes.php?release_id=366364 release\
      \ notes]\n\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.5.zip Version\
      \ 1.5] - [http://sourceforge.net/project/shownotes.php?release_id=364785 release\
      \ notes]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.4.zip Version\
      \ 1.4] - [http://sourceforge.net/project/shownotes.php?release_id=350093 release\
      \ notes]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.3.zip Version\
      \ 1.3] - [http://sourceforge.net/project/shownotes.php?release_id=346922 release\
      \ notes]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.2.zip Version\
      \ 1.2] - [http://sourceforge.net/project/shownotes.php?release_id=346648 release\
      \ notes]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.1.zip Version\
      \ 1.1] - [http://sourceforge.net/project/shownotes.php?release_id=345429 release\
      \ notes]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-v1.0.zip Version\
      \ 1.0]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-008beta.zip Version\
      \ 008 beta]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-007beta.zip\
      \ Version 007 beta]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-006beta.zip\
      \ Version 006 beta]\n* [http://prdownloads.sourceforge.net/uncodex/ucpp-005beta.zip\
      \ Version 005 beta]\n\nSince UCPP uses some parts of [[Legacy:UnCodeX|UnCodeX]]\
      \ it is included with the UnCodeX project on [http://sourceforge.net/projects/uncodex/\
      \ SourceForge]. UCPP's source code is available in the UnCodeX source in the\
      \ directory <code>src\\ucpp</code>.\n\n==Known bugs\\issues==\n\n; Newlines\
      \ are not supported : There is no way to insert a newline via definitions or\
      \ macros. The reason for this is simple: the line numbers of the ''puc'' and\
      \ ''uc'' file won't be skewed. This way it's easier to find compiler errors.\n\
      \n; <nowiki>#include</nowiki> files not processed : Files included via the UnrealEngine\
      \ built-in #include macro are not processed for macros. Use <tt>#ucpp include\
      \ ''filename''</tt> to include preprocessor directives. It is possible to enable\
      \ support for include directives, in this case the <tt>#include</tt> line is\
      \ replaced with the actual file during rewriting. So the actual unrealscript\
      \ compiler won't have to include it.\n\n; Code obliviousness : the preprocessor\
      \ is completely oblivious about the actual unrealscript source code it preprocesses.\
      \ This means definitions made in super classes do not exist in subclasses. For\
      \ global definitions you should use other means like the configuration file,\
      \ the commandline or an include file (<tt>#ucpp include ''file''</tt>).\n\n\
      ; Recursive defines will break : <code>#define A(x) B(x) #define B(x) A(x)</code>\
      \ will break. In 007 and later an error will be generated.\n\n; Function defines\
      \ can not be used in expressions : You can not use function defines in <code>#if</code>\
      \ expressions, however you can use them in <code>#ifdef</code>, but you will\
      \ need to reference them by their footprint: <code>FUNC(a,b,c)</code> has the\
      \ footprint <code>FUNC/3</code>\n\n==Feature requests==\n\n''Please add your\
      \ feature requests here, or on the [http://sourceforge.net/projects/uncodex/\
      \ SourceForge] project page''\n\n'''Xian:''' Maybe add __USER__ and __PROJECT__,\
      \ them being config-ed in the INI. Maybe if user is empty, use the current windows\
      \ user, if the project macro is empty, use the Folder we're working in (not\
      \ the package foler, i.e. C:\\MyMod\\MyPkg\\Classes, it will use \"MyMod\").\
      \ Perhaps some code support too, such as checking if a var/func is replicated\
      \ and/or if a var name/function are defined in the .uc file (unless #ifdef MYFUNC/2\
      \ does this and I misunderstood). And last but not least, an option to comment\
      \ out only parts (and remove the other code if stripping is enabled) with some\
      \ possible custom comment macros.\n\n'''El Muerte:''' if you need a __USER__\
      \ and __PROJECT__ then use the standard define functionality already provided.\
      \ Additionally you can import all evironment variables as defines using the\
      \ -env commandline argument. In that case USERNAME will expand to the current\
      \ username. PreProcessors are oblivious to the actual code, it doesn't know\
      \ about anything related to replication. The #ifdef MYFUNC/2 tests if there\
      \ is a macro defined with that signature, it has nothing to do with the unrealscript\
      \ code.\n\n'''Xian:''' Thanks for the reply. I see, I'll check the environ define.\
      \ Ah, so it's basically just generation occurring, not parsing at all (of the\
      \ UScript code, that is). Well, not so bad me thinks sine that might complicate\
      \ things due to inheritance... Thanks for the tool, though, it's amazing :)\n\
      \n==Tips and Tricks==\n\n===Mixing defines and actual functions===\n\nSince\
      \ only uppercase identifiers will be replaced and because unrealscript is case\
      \ insensitive you can mix them to add extra functionality.\n\n<uscript>\n#define\
      \ LOG(a,b) log(a$chr(10)$__FILE__$\":\"$string(__LINE__), b)\n#define LOG(a)\
      \ LOG(a, name)\n</uscript>\n\nNow if you use the <code>LOG</code> (in uppercase)\
      \ function it will append the source file and the line number. If the file isn't\
      \ processed by UCPP it will still work (taking into account that the above macros\
      \ where defined somewhere else than in the source file).\n\n===Using the current\
      \ working directory===\n\nIf you want to use the current working directory as\
      \ BASE or SYSTEM just use a \".\". BASE and SYSTEM take relative paths, and\
      \ \".\" means the current directory. So for example:\n c:\\UT2004\\System>ucpp\
      \ -P SYSTEM=. MyPackage\n\nThe following does the same\n c:\\UT2004\\System>ucpp\
      \ -P BASE=.. MyPackage\n\n==Comments==\n\n'''Tarquin:''' Sounds interesting!\n\
      \n'''El Muerte:''' Aargh, about 30 minutes after I released 007 I found a minor\
      \ yet stupid bug. Backslashes are not properly escaped. Not a major thing, but\
      \ just annoying.\n\n'''El Muerte:''' There, another release. Implemented pretty\
      \ much every feature I wanted. Still have to document how to use the config\
      \ file. But for the rest if this release holds up I think a stable release is\
      \ close.\n\n'''El Muerte:''' ok, here's version 1.0, did quite some testing\
      \ a found a few minor bugs, also new in the release is support for <code>#elif</code>.\
      \ I'm delaying the press release a bit, just in case of an serious bug.\n\n\
      '''Guest:''' Featured on BU's news page. :) http://www.beyondunreal.com/daedalus/singlepost.php?id=8449\n\
      \n'''razialx:''' El Muerte, you are amazing. Now I feel like starting up coding\
      \ in UScript again. \n\n'''Devi:''' We've just started using this on the game\
      \ my company is working on (I'm under an NDA, so I can say no more I'm afraid)\
      \ and I'd just like to say: \"Thankyouthankyouthankyouthankthankyou, you have\
      \ made our lives SO much easier\" :)\n\n'''Jon:''' Soon you'll be speaking in\
      \ binary code and taking over all our satellites. :)\n\n[[Category:Legacy Application|{{PAGENAME}}]]"
  properties: []
  revId: 9003
name: "Legacy:UCPP"
revision:
  revid: 9003
  parentid: 9004
  user: "89.122.244.15"
  timestamp: 1201428798.000000000
  comment: "(thanks for the clearing up... feel free to delete my suggestion/comments\
    \ ElMuerte)"
timestamp: 1668763831.608422000
