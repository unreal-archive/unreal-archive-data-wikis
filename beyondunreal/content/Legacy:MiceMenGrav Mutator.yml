---
parse:
  title: "Legacy:MiceMenGrav Mutator"
  text:
    text: "<p>MiceMenGrav: A Mutator Tutorial for <a href=\"/Legacy:UT2003\" title=\"\
      Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>.</p>\n<ul>\n<li>Coders: Wedge,\
      \ <a href=\"/Legacy:ThePelkus\" title=\"Legacy:ThePelkus\">ThePelkus</a></li>\n\
      <li>Author: <a href=\"/Legacy:ThePelkus\" title=\"Legacy:ThePelkus\">ThePelkus</a></li>\n\
      </ul>\n<p>This is a beginner level mutator development tutorial. The reader\
      \ should have a basic knowledge of UnrealScript and should be able to make a\
      \ basic mutator. This tutorial will help the reader understand potential uses\
      \ for the following classes:</p>\n<ul>\n<li><a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">Mutator</a></li>\n<li><a href=\"/Legacy:GameRules\" title=\"\
      Legacy:GameRules\">GameRules</a></li>\n<li><a href=\"/Legacy:GUIPage\" title=\"\
      Legacy:GUIPage\">GUIPage</a></li>\n<li><a href=\"/Legacy:Inventory\" title=\"\
      Legacy:Inventory\">Inventory</a></li>\n</ul>\n<p>This mutator was implemented\
      \ in UT2003. We have no development experience on other versions of Unreal,\
      \ so we are not sure how specific this code is to UT2003.</p>\n<p></p>\n<div\
      \ id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Conceptual_Origins\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Conceptual Origins</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Code_Download\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Code Download</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Making_your_own_GameRules\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Making your own\
      \ GameRules</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #Placing_your_rules_in_your_project\"><span class=\"tocnumber\">3.1</span> <span\
      \ class=\"toctext\">Placing your rules in your project</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-5\"><a href=\"#Building_GravShot_into_our_custom_rules\"\
      ><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">Building GravShot\
      \ into our custom rules</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Building_MiceMen_into_our_custom_rules\"><span class=\"tocnumber\"\
      >3.3</span> <span class=\"toctext\">Building MiceMen into our custom rules</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Making_your_own_Mutator.2C_briefly\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Making your own\
      \ Mutator, briefly</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-8\"><a\
      \ href=\"#PostBeginPlay.28.29\"><span class=\"tocnumber\">4.1</span> <span class=\"\
      toctext\">PostBeginPlay()</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"\
      ><a href=\"#ModifyPlayer.28.29\"><span class=\"tocnumber\">4.2</span> <span\
      \ class=\"toctext\">ModifyPlayer()</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-10\"><a href=\"#Making_your_own_Inventory_items\"><span\
      \ class=\"tocnumber\">5</span> <span class=\"toctext\">Making your own Inventory\
      \ items</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"#Using_GUIPage_to_configure_your_muator.2C_super_briefly.21\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Using GUIPage to\
      \ configure your muator, super briefly!</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-12\"><a href=\"#Problems\"><span class=\"tocnumber\">7</span> <span\
      \ class=\"toctext\">Problems</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-13\"\
      ><a href=\"#Levitating_players\"><span class=\"tocnumber\">7.1</span> <span\
      \ class=\"toctext\">Levitating players</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-14\"><a href=\"#Funny_skeletons\"><span class=\"tocnumber\">7.2</span>\
      \ <span class=\"toctext\">Funny skeletons</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-15\"><a href=\"#About_this_mutator\"><span class=\"\
      tocnumber\">8</span> <span class=\"toctext\">About this mutator</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Conceptual_Origins\"\
      >Conceptual Origins</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=1\" title=\"Edit\
      \ section: Conceptual Origins\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This mutator is the combination of two other mutators:</p>\n\
      <ul>\n<li><i>MiceMen</i>, coded by Wedge, affects the player size based on the\
      \ current configuration and the number of player kills.</li>\n</ul>\n<ul>\n\
      <li><i>GravMod</i>, coded by ThePelkus, draws players together when they attack\
      \ each other.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Code_Download\"\
      >Code Download</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=2\" title=\"Edit\
      \ section: Code Download\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>While snippets of the source are shown below when relevant, the full source\
      \ is available <a rel=\"nofollow\" class=\"external text\" href=\"http://kai.curtisforhire.com/downloads/micemengrav.zip\"\
      >here</a>. While there is no candy surprise, there are plenty of comments to\
      \ keep you in the know.</p>\n<h2><span class=\"mw-headline\" id=\"Making_your_own_GameRules\"\
      >Making your own GameRules</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=3\"\
      \ title=\"Edit section: Making your own GameRules\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <a href=\"/Legacy:GameRules\" title=\"Legacy:GameRules\"\
      >GameRules</a> class is easy to bend to your purposes. Like the <a href=\"/Legacy:Mutator\"\
      \ title=\"Legacy:Mutator\">Mutator</a> objects, the <a href=\"/Legacy:GameRules\"\
      \ title=\"Legacy:GameRules\">GameRules</a> objects live in a linked list. When\
      \ the game needs to do something using the <a href=\"/Legacy:GameRules\" title=\"\
      Legacy:GameRules\">GameRules</a> objects, it recurses through the list, giving\
      \ each object a chance to do its thing. Technically speaking, the game is not\
      \ responsible for making sure that every object in the list gets its turn at\
      \ bat – that's why you'll need lines like this one:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">\t<span class=\"coMULTI\">/* Sampled from a ModifyPlayer\
      \ definition in a custom mutator */</span>\n\t<span class=\"co1\">// If there\
      \ is another mutator in the chain</span>\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> NextMutator <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"co1\">// Call\
      \ this method in the next mutator; pass the same parameters</span>\n\t\tNextMutator.<span\
      \ class=\"me0\">ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<p>Keeping this list structure in mind,\
      \ all we need to do to have a little fun is derive our own rules and override\
      \ some of the member functions!</p>\n<h3><span class=\"mw-headline\" id=\"Placing_your_rules_in_your_project\"\
      >Placing your rules in your project</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=4\"\
      \ title=\"Edit section: Placing your rules in your project\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Before you go overriding functions\
      \ left and right, you want to incorporate your custom rules into your mutator\
      \ so that you can check changes as you make them. As we just said, the hook\
      \ for the engine is a chain of <a href=\"/Legacy:GameRules\" title=\"Legacy:GameRules\"\
      >GameRules</a> objects that lives somewhere in the system. Specifically, this\
      \ chain is accessed as <b>Level.Game.GameRulesModifiers</b> from any <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> class. How convenient, then,\
      \ that <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\">Mutator</a> is a\
      \ subclass of <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>!</p>\n\
      <p>To add your rules to the chain, just add the following code to PostBeginPlay()\
      \ in the mutator that you derived from the <a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">Mutator</a> class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"coMULTI\">/* The following code assumes that you have a variable\
      \ called myRules representing your rules; see MutMiceMen.uc for an example.\
      \ */</span>\n \n\t<span class=\"co1\">// Add the rules object to the list of\
      \ GameRules in the game</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> <span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span\
      \ class=\"me0\">GameRulesModifiers</span> <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"me0\">GameRulesModifiers</span>\
      \ <span class=\"sy0\">=</span> myRules;\n\t<span class=\"kw2\">else</span>\n\
      \t\t<span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"\
      me0\">GameRulesModifiers</span>.<span class=\"me0\">AddGameRules</span><span\
      \ class=\"br0\">(</span>myRules<span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Building_GravShot_into_our_custom_rules\"\
      >Building GravShot into our custom rules</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=5\"\
      \ title=\"Edit section: Building GravShot into our custom rules\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>We derived a class\
      \ called MiceMenRules from <a href=\"/Legacy:GameRules\" title=\"Legacy:GameRules\"\
      >GameRules</a> so that we could take advantage of some of the built-in functionality.\
      \ In fact, almost all of the GravShot functionality lives in the NetDamage function\
      \ of our custom rules.</p>\n<p>As stated in the <a href=\"/Legacy:GameRules\"\
      \ title=\"Legacy:GameRules\">GameRules</a> page, the NetDamage function \"<i>allows\
      \ the GameRules to modify the damage (return value) and momentum. The OriginalDamage\
      \ parameter should be passed to the next GameRules without any modifications.</i>\"\
      \ Technically, GravShot doesn't alter either of these values. But NetDamage\
      \ also takes as parameters the attacking pawn (InstigatedBy) and the target\
      \ pawn (Injureed). Using these two pawns, our rules:</p>\n<ul>\n<li>Calculate\
      \ the normalized vector from the victim to the instigator</li>\n</ul>\n<dl>\n\
      <dd>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\">            <span class=\"co1\"\
      >// Get normalized vector from target to shooter</span></pre></div>\n</div>\n\
      </dd>\n</dl>\n<p>myVec <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span\
      \ class=\"br0\">(</span>InstigatedBy.<span class=\"kw7\">Location</span> <span\
      \ class=\"sy0\">-</span> Injured.<span class=\"kw7\">Location</span><span class=\"\
      br0\">)</span>;</p>\n<ul>\n<li>Scale that vector</li>\n</ul>\n<dl>\n<dd>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">\t\t    <span class=\"co1\">// Set up\
      \ multiplier vector</span></pre></div>\n</div>\n</dd>\n</dl>\n<p>multVec.<span\
      \ class=\"me0\">x</span> <span class=\"sy0\">=</span> mutInstance.<span class=\"\
      me0\">MovementMultiplier</span> <span class=\"sy0\">*</span> <span class=\"\
      nu0\">100</span>; \t\t multVec.<span class=\"me0\">y</span> <span class=\"sy0\"\
      >=</span> mutInstance.<span class=\"me0\">MovementMultiplier</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">100</span>; \t\t multVec.<span class=\"me0\"\
      >z</span> <span class=\"sy0\">=</span> mutInstance.<span class=\"me0\">MovementMultiplier</span>\
      \ <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>; &#160; \t\t <span\
      \ class=\"co1\">// scale normalized vector; better way?</span></p>\n<p>myVec\
      \ <span class=\"sy0\">=</span> myVec <span class=\"sy0\">*</span> multVec;</p>\n\
      <ul>\n<li>Add the scaled vector to the victim's velocity.</li>\n</ul>\n<dl>\n\
      <dd>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\">    \t\tInjured.<span class=\"\
      me0\">AddVelocity</span><span class=\"br0\">(</span>myVec<span class=\"br0\"\
      >)</span>;</pre></div>\n</div>\n</dd>\n</dl>\n<p>Note once again that, after\
      \ all of the GravShot code, the NetDamage member of the next <a href=\"/Legacy:GameRules\"\
      \ title=\"Legacy:GameRules\">GameRules</a> object (if it exists) is called with\
      \ the same parameters.</p>\n<p>With this mutator active, the Injured pawn is\
      \ moved towards the InstigatedBy pawn by some fixed amount. We'll see where\
      \ this amount is set later when we look at the config menu. For practice you\
      \ might try making the scaling factor situational e.g. scale based on distance\
      \ or damage inflicted.</p>\n<h3><span class=\"mw-headline\" id=\"Building_MiceMen_into_our_custom_rules\"\
      >Building MiceMen into our custom rules</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=6\"\
      \ title=\"Edit section: Building MiceMen into our custom rules\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The MiceMen part\
      \ of the mutator overrides the ScoreKill member of the rules. From the <a href=\"\
      /Legacy:GameRules\" title=\"Legacy:GameRules\">GameRules</a> page, we know that\
      \ the ScoreKill function \"<i>Augements the action taken when a player scores\
      \ a kill. Not the score itself, but having to do with the Controllers involved\
      \ in the Kill.</i>\"</p>\n<p>The following two lines of code are all that we\
      \ added to the ScoreKill method:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      br0\">(</span>Killer <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span>Killer.<span class=\"kw9\">Pawn</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n\t\tmutInstance.<span class=\"me0\">ChangePlayerSize</span><span\
      \ class=\"br0\">(</span>Killer.<span class=\"kw9\">Pawn</span>, mutInstance.<span\
      \ class=\"me0\">GetScaleFor</span><span class=\"br0\">(</span>Killer.<span class=\"\
      kw9\">Pawn</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>In this case, the Killer parameter (a <a href=\"/Legacy:Controller\"\
      \ title=\"Legacy:Controller\">Controller</a>) is used for its associated pawn.\
      \ This pawn is passed to ChangePlayerSize(), a custom function in our mutator,\
      \ along with a scaling factor. The scaling factor is calculated using GetScaleFor(),\
      \ yet another custom function in our mutator, which also takes the pawn associated\
      \ with Killer as a parameter. Again, after our code is called, ScoreKill is\
      \ called in the next <a href=\"/Legacy:GameRules\" title=\"Legacy:GameRules\"\
      >GameRules</a> object.</p>\n<p>Clearly a lot of the logic for MiceMen is included\
      \ in the mutator, so let's take a look at that now!</p>\n<h2><span class=\"\
      mw-headline\" id=\"Making_your_own_Mutator.2C_briefly\">Making your own Mutator,\
      \ briefly</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=7\" title=\"Edit\
      \ section: Making your own Mutator, briefly\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Presumably you already have the basics of making a\
      \ mutator down, so we're just going to show you what we did with ours.</p>\n\
      <h3><span class=\"mw-headline\" id=\"PostBeginPlay.28.29\">PostBeginPlay()</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:MiceMenGrav_Mutator?section=8\" title=\"Edit section:\
      \ PostBeginPlay()\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Our PostBeginPlay() code is pretty standard, going through the following\
      \ steps:</p>\n<ol>\n<li>Call method in parent class</li>\n<li>Instantiate derived\
      \ <a href=\"/Legacy:GameRules\" title=\"Legacy:GameRules\">GameRules</a></li>\n\
      <li>Initialize mutator instance in derived <a href=\"/Legacy:GameRules\" title=\"\
      Legacy:GameRules\">GameRules</a></li>\n<li>Add <a href=\"/Legacy:GameRules\"\
      \ title=\"Legacy:GameRules\">GameRules</a> to GameRulesModifiers linked list</li>\n\
      </ol>\n<p>The only really odd step in there is Step 3. Because the mutator class\
      \ contains functions and data needed for the MiceMen scaling in the rules, the\
      \ rules contain an instance of the mutator. It may seem a little circular, but\
      \ it works out fine.</p>\n<h3><span class=\"mw-headline\" id=\"ModifyPlayer.28.29\"\
      >ModifyPlayer()</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=9\" title=\"Edit\
      \ section: ModifyPlayer()\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\">Mutator</a> page\
      \ lists the following description for the ModifyPlayer() function:</p>\n<blockquote\
      \ class=\"legacyquote\">\n<p>This function can be used to update the player's\
      \ inventory, speed, and other attributes. this function should always call ModifyPlayer()\
      \ on the next mutator in the chain (a call to the superclass method would do\
      \ the trick).</p>\n</blockquote>\n<p>We used ModifyPlayer() to do the following:</p>\n\
      <dl>\n<dt>Scale the player&#160;</dt>\n<dd>Player scaling is handled in our\
      \ custom functions called <i>ChangePlayerSize()</i> and <i>GetScaleFor()</i>.\
      \ The comments included in the code make the function self-explanatory. Unfortunately,\
      \ we're uncertain as to whether certain functions are necessary.</dd>\n</dl>\n\
      <dl>\n<dt>Create a custom <a href=\"/Legacy:Inventory\" title=\"Legacy:Inventory\"\
      >Inventory</a> item to scale the player's weapon&#160;</dt>\n<dd>In order to\
      \ make sure that the player's weapon model scales properly when weapons are\
      \ switched, the player is given a WeaponScaler, a custom class we derived from\
      \ <a href=\"/Legacy:Inventory\" title=\"Legacy:Inventory\">Inventory</a>.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Making_your_own_Inventory_items\"\
      >Making your own Inventory items</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=10\"\
      \ title=\"Edit section: Making your own Inventory items\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>In earlier revisions of this\
      \ mutator, the player weapon would not resize to match the player scale when\
      \ the player switched weapons. Our solution: we derived a class from <a href=\"\
      /Legacy:Inventory\" title=\"Legacy:Inventory\">Inventory</a> that would handle\
      \ the resizing for us.</p>\n<p>Our use of <a href=\"/Legacy:Inventory\" title=\"\
      Legacy:Inventory\">Inventory</a>-related functionality was very minimal. The\
      \ <a href=\"/Legacy:Inventory\" title=\"Legacy:Inventory\">Inventory</a> class\
      \ has a method called <i>OwnerEvent</i>. This method is called - surprise, surprise\
      \ - whenever an event is triggered in owner. Since we wanted to change the rescale\
      \ the player weapon whenever the weapon was changed, we watched for an event\
      \ called 'ChangedWeapon':</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> OwnerEvent<span class=\"br0\">(</span><span class=\"kw5\"\
      >name</span> EventName<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw2\">if</span><span class=\"br0\">(</span>EventName <span class=\"\
      sy0\">==</span> <span class=\"st0\">'ChangedWeapon'</span><span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t <span class=\"kw9\">WeaponAttachment</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Instigator</span>.<span class=\"\
      kw9\">Weapon</span>.<span class=\"me0\">ThirdPersonActor</span><span class=\"\
      br0\">)</span>.<span class=\"kw4\">SetCollisionSize</span><span class=\"br0\"\
      >(</span><span class=\"kw9\">WeaponAttachment</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Instigator</span>.<span class=\"kw9\">Weapon</span>.<span class=\"\
      me0\">ThirdPersonActor</span><span class=\"br0\">)</span>.<span class=\"kw1\"\
      >Default</span>.<span class=\"kw7\">CollisionRadius</span> <span class=\"sy0\"\
      >*</span> <span class=\"kw7\">Instigator</span>.<span class=\"kw7\">DrawScale</span>,\
      \ <span class=\"kw9\">WeaponAttachment</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Instigator</span>.<span class=\"kw9\">Weapon</span>.<span class=\"\
      me0\">ThirdPersonActor</span><span class=\"br0\">)</span>.<span class=\"kw1\"\
      >Default</span>.<span class=\"kw7\">CollisionHeight</span> <span class=\"sy0\"\
      >*</span> <span class=\"kw7\">Instigator</span>.<span class=\"kw7\">DrawScale</span><span\
      \ class=\"br0\">)</span>;\n\t <span class=\"kw9\">WeaponAttachment</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Instigator</span>.<span class=\"\
      kw9\">Weapon</span>.<span class=\"me0\">ThirdPersonActor</span><span class=\"\
      br0\">)</span>.<span class=\"kw4\">SetDrawScale</span><span class=\"br0\">(</span><span\
      \ class=\"kw9\">WeaponAttachment</span><span class=\"br0\">(</span><span class=\"\
      kw7\">Instigator</span>.<span class=\"kw9\">Weapon</span>.<span class=\"me0\"\
      >ThirdPersonActor</span><span class=\"br0\">)</span>.<span class=\"kw1\">Default</span>.<span\
      \ class=\"kw7\">DrawScale</span> <span class=\"sy0\">*</span> <span class=\"\
      kw7\">Instigator</span>.<span class=\"kw7\">DrawScale</span><span class=\"br0\"\
      >)</span>;\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>When this event occurred, the collision and draw size were rescaled\
      \ based on the player's DrawScale. Note that these properties were only set\
      \ on the third person mesh as indicated by the use of <a href=\"/Legacy:WeaponAttachment\"\
      \ title=\"Legacy:WeaponAttachment\">WeaponAttachment</a> and <i>ThirdPersonActor</i>\
      \ above. Also note that the player is referred to as <i>Instigator</i> since\
      \ we need a <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a> to get a\
      \ <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\">weapon</a>.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Using_GUIPage_to_configure_your_muator.2C_super_briefly.21\"\
      >Using GUIPage to configure your muator, super briefly!</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=11\"\
      \ title=\"Edit section: Using GUIPage to configure your muator, super briefly!\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>This\
      \ section is unnecessary as the information that would go here is explained\
      \ perfectly well over in <a href=\"/Legacy:Mutator_Config_GUI_(UT2003)\" title=\"\
      Legacy:Mutator Config GUI (UT2003)\">Mutator Config GUI (UT2003)</a>. In fact,\
      \ most of the config code for this mutator was taken straight from the provided\
      \ example code.</p>\n<p>While <a href=\"/Legacy:Mutator_Config_GUI_(UT2003)\"\
      \ title=\"Legacy:Mutator Config GUI (UT2003)\">Mutator Config GUI (UT2003)</a>\
      \ is fairly complete in terms of explaining the connection between GUI items\
      \ and mutator variables, it's also a good idea to look through the documentation\
      \ on other classes in the <a href=\"/Legacy:GUI_Class_Hierarchy\" title=\"Legacy:GUI\
      \ Class Hierarchy\">GUI_Class_Hierarchy</a> to make sure you don't fall victim\
      \ to the old problems of giant checkboxes and the like.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Problems\">Problems</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=12\"\
      \ title=\"Edit section: Problems\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>It's true - we're not perfect, which makes this problematic\
      \ as a tutorial. Help us make this tutorial more useful for beginners by helping\
      \ us catch the following bugs:</p>\n<h3><span class=\"mw-headline\" id=\"Levitating_players\"\
      >Levitating players</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=13\" title=\"Edit\
      \ section: Levitating players\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Just run around for a little while and it won't take\
      \ long until you'll see some of the other players flying around in midair. It's\
      \ been hard for us to establish exactly when this happens, so even figuring\
      \ that out would be very useful.</p>\n<p><b>Tricadex</b> - I think this is caused\
      \ by problems with the collision box and crouching</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Funny_skeletons\">Funny skeletons</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=14\"\
      \ title=\"Edit section: Funny skeletons\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Resizing players seems to do funny things to their\
      \ corpses. We attempted to fix this problem using the <i>BoneRefresh()</i> method\
      \ of the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> class, but\
      \ it's not clear whether there are still funny effects.</p>\n<p>Feel free to\
      \ add comments to this page to help us fix these problems!</p>\n<h2><span class=\"\
      mw-headline\" id=\"About_this_mutator\">About this mutator</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:MiceMenGrav_Mutator?section=15\"\
      \ title=\"Edit section: About this mutator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The MiceMenGrav mutator is a class project from the\
      \ <a rel=\"nofollow\" class=\"external text\" href=\"http://www.bcc.ctc.edu\"\
      >Bellevue Community College</a> <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://gaming.bcc.ctc.edu\">gaming curriculum</a> in Bellevue, WA.\
      \ This program is also responsible for the <a href=\"/Legacy:VampireShoppers\"\
      \ title=\"Legacy:VampireShoppers\">VampireShoppers</a> mutator.</p>\n<hr />\n\
      <pre><a href=\"/Category:Legacy_Tutorial\" title=\"Category:Legacy Tutorial\"\
      >Category:Legacy Tutorial</a>\n</pre>\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.137 seconds\nReal time usage: 0.140 seconds\nPreprocessor visited node count:\
      \ 134/1000000\nPreprocessor generated node count: 265/1000000\nPost‐expand include\
      \ size: 567/2097152 bytes\nTemplate argument size: 226/2097152 bytes\nHighest\
      \ expansion depth: 3/40\nExpensive parser function count: 0/100\n-->\n\n<!--\
      \ \nTransclusion expansion time report (%,ms,calls,template)\n100.00%    5.080\
      \      1 - -total\n100.00%    5.080      1 - Template:Innerbox\n-->\n\n<!--\
      \ Saved in parser cache with key wiki:pcache:idhash:2221-0!*!0!!en!*!* and timestamp\
      \ 20221117173237 and revision id 5376\n -->\n"
  categories:
  - sortkey: "MiceMenGrav Mutator"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Config GUI (UT2003)"
  - ns: 100
    exists: true
    name: "Legacy:Controller"
  - ns: 100
    exists: true
    name: "Legacy:Inventory"
  - ns: 100
    exists: true
    name: "Legacy:GUIPage"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Weapon"
  - ns: 100
    exists: true
    name: "Legacy:VampireShoppers"
  - ns: 14
    exists: true
    name: "Category:Legacy Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:GameRules"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:ThePelkus"
  - ns: 100
    exists: true
    name: "Legacy:WeaponAttachment"
  - ns: 100
    exists: true
    name: "Legacy:GUI Class Hierarchy"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://kai.curtisforhire.com/downloads/micemengrav.zip"
  - "http://www.bcc.ctc.edu"
  - "http://gaming.bcc.ctc.edu"
  sections:
  - toclevel: 1
    level: "2"
    line: "Conceptual Origins"
    number: "1"
    index: "1"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 682
    anchor: "Conceptual_Origins"
  - toclevel: 1
    level: "2"
    line: "Code Download"
    number: "2"
    index: "2"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 973
    anchor: "Code_Download"
  - toclevel: 1
    level: "2"
    line: "Making your own GameRules"
    number: "3"
    index: "3"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 1233
    anchor: "Making_your_own_GameRules"
  - toclevel: 2
    level: "3"
    line: "Placing your rules in your project"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 2189
    anchor: "Placing_your_rules_in_your_project"
  - toclevel: 2
    level: "3"
    line: "Building GravShot into our custom rules"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 3253
    anchor: "Building_GravShot_into_our_custom_rules"
  - toclevel: 2
    level: "3"
    line: "Building MiceMen into our custom rules"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 5118
    anchor: "Building_MiceMen_into_our_custom_rules"
  - toclevel: 1
    level: "2"
    line: "Making your own Mutator, briefly"
    number: "4"
    index: "7"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 6284
    anchor: "Making_your_own_Mutator.2C_briefly"
  - toclevel: 2
    level: "3"
    line: "PostBeginPlay()"
    number: "4.1"
    index: "8"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 6443
    anchor: "PostBeginPlay.28.29"
  - toclevel: 2
    level: "3"
    line: "ModifyPlayer()"
    number: "4.2"
    index: "9"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 7019
    anchor: "ModifyPlayer.28.29"
  - toclevel: 1
    level: "2"
    line: "Making your own Inventory items"
    number: "5"
    index: "10"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 7982
    anchor: "Making_your_own_Inventory_items"
  - toclevel: 1
    level: "2"
    line: "Using GUIPage to configure your muator, super briefly!"
    number: "6"
    index: "11"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 9591
    anchor: "Using_GUIPage_to_configure_your_muator.2C_super_briefly.21"
  - toclevel: 1
    level: "2"
    line: "Problems"
    number: "7"
    index: "12"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 10315
    anchor: "Problems"
  - toclevel: 2
    level: "3"
    line: "Levitating players"
    number: "7.1"
    index: "13"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 10498
    anchor: "Levitating_players"
  - toclevel: 2
    level: "3"
    line: "Funny skeletons"
    number: "7.2"
    index: "14"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 10851
    anchor: "Funny_skeletons"
  - toclevel: 1
    level: "2"
    line: "About this mutator"
    number: "8"
    index: "15"
    fromtitle: "Legacy:MiceMenGrav_Mutator"
    byteoffset: 11169
    anchor: "About_this_mutator"
  displaytitle: "Legacy:MiceMenGrav Mutator"
  iwlinks: []
  wikitext:
    text: "MiceMenGrav: A Mutator Tutorial for [[Legacy:UT2003|UT2003]].\n\n* Coders:\
      \ Wedge, [[Legacy:ThePelkus|ThePelkus]]\n* Author: [[Legacy:ThePelkus|ThePelkus]]\n\
      \nThis is a beginner level mutator development tutorial. The reader should have\
      \ a basic knowledge of UnrealScript and should be able to make a basic mutator.\
      \ This tutorial will help the reader understand potential uses for the following\
      \ classes:\n* [[Legacy:Mutator|Mutator]]\n* [[Legacy:GameRules|GameRules]]\n\
      * [[Legacy:GUIPage|GUIPage]]\n* [[Legacy:Inventory|Inventory]]\n\nThis mutator\
      \ was implemented in UT2003. We have no development experience on other versions\
      \ of Unreal, so we are not sure how specific this code is to UT2003.\n\n==Conceptual\
      \ Origins==\n\nThis mutator is the combination of two other mutators:\n\n* ''MiceMen'',\
      \ coded by Wedge, affects the player size based on the current configuration\
      \ and the number of player kills.\n\n* ''GravMod'', coded by ThePelkus, draws\
      \ players together when they attack each other.\n\n==Code Download==\n\nWhile\
      \ snippets of the source are shown below when relevant, the full source is available\
      \ [http://kai.curtisforhire.com/downloads/micemengrav.zip here]. While there\
      \ is no candy surprise, there are plenty of comments to keep you in the know.\n\
      \n==Making your own GameRules==\n\nThe [[Legacy:GameRules|GameRules]] class\
      \ is easy to bend to your purposes. Like the [[Legacy:Mutator|Mutator]] objects,\
      \ the [[Legacy:GameRules|GameRules]] objects live in a linked list. When the\
      \ game needs to do something using the [[Legacy:GameRules|GameRules]] objects,\
      \ it recurses through the list, giving each object a chance to do its thing.\
      \ Technically speaking, the game is not responsible for making sure that every\
      \ object in the list gets its turn at bat &ndash; that's why you'll need lines\
      \ like this one:\n\n<uscript>\n\t/* Sampled from a ModifyPlayer definition in\
      \ a custom mutator */\n\t// If there is another mutator in the chain\n\tif (\
      \ NextMutator != None )\n\t\t// Call this method in the next mutator; pass the\
      \ same parameters\n\t\tNextMutator.ModifyPlayer(Other);\n</uscript>\n\nKeeping\
      \ this list structure in mind, all we need to do to have a little fun is derive\
      \ our own rules and override some of the member functions!\n\n===Placing your\
      \ rules in your project===\n\nBefore you go overriding functions left and right,\
      \ you want to incorporate your custom rules into your mutator so that you can\
      \ check changes as you make them. As we just said, the hook for the engine is\
      \ a chain of [[Legacy:GameRules|GameRules]] objects that lives somewhere in\
      \ the system. Specifically, this chain is accessed as '''Level.Game.GameRulesModifiers'''\
      \ from any [[Legacy:Actor|Actor]] class. How convenient, then, that [[Legacy:Mutator|Mutator]]\
      \ is a subclass of [[Legacy:Actor|Actor]]!\n\nTo add your rules to the chain,\
      \ just add the following code to PostBeginPlay() in the mutator that you derived\
      \ from the [[Legacy:Mutator|Mutator]] class:\n\n<uscript>\n/* The following\
      \ code assumes that you have a variable called myRules representing your rules;\
      \ see MutMiceMen.uc for an example. */\n\n\t// Add the rules object to the list\
      \ of GameRules in the game\n\tif ( Level.Game.GameRulesModifiers == None )\n\
      \t\tLevel.Game.GameRulesModifiers = myRules;\n\telse\n\t\tLevel.Game.GameRulesModifiers.AddGameRules(myRules);\n\
      </uscript>\n\n===Building GravShot into our custom rules===\n\nWe derived a\
      \ class called MiceMenRules from [[Legacy:GameRules|GameRules]] so that we could\
      \ take advantage of some of the built-in functionality. In fact, almost all\
      \ of the GravShot functionality lives in the NetDamage function of our custom\
      \ rules.\n\nAs stated in the [[Legacy:GameRules|GameRules]] page, the NetDamage\
      \ function \"''allows the GameRules to modify the damage (return value) and\
      \ momentum. The OriginalDamage parameter should be passed to the next GameRules\
      \ without any modifications.''\" Technically, GravShot doesn't alter either\
      \ of these values. But NetDamage also takes as parameters the attacking pawn\
      \ (InstigatedBy) and the target pawn (Injureed). Using these two pawns, our\
      \ rules:\n\n* Calculate the normalized vector from the victim to the instigator\n\
      : <uscript>\n            // Get normalized vector from target to shooter\n\t\
      \t    myVec = Normal(InstigatedBy.Location - Injured.Location);\n</uscript>\n\
      \n* Scale that vector\n: <uscript>\n\t\t    // Set up multiplier vector\n\t\t\
      \    multVec.x = mutInstance.MovementMultiplier * 100;\n\t\t    multVec.y =\
      \ mutInstance.MovementMultiplier * 100;\n\t\t    multVec.z = mutInstance.MovementMultiplier\
      \ * 100;\n\n\t\t    // scale normalized vector; better way?\n\t\t    myVec =\
      \ myVec * multVec;\n</uscript>\n\n* Add the scaled vector to the victim's velocity.\n\
      : <uscript>\n    \t\tInjured.AddVelocity(myVec);\n</uscript>\n\nNote once again\
      \ that, after all of the GravShot code, the NetDamage member of the next [[Legacy:GameRules|GameRules]]\
      \ object (if it exists) is called with the same parameters.\n\nWith this mutator\
      \ active, the Injured pawn is moved towards the InstigatedBy pawn by some fixed\
      \ amount. We'll see where this amount is set later when we look at the config\
      \ menu. For practice you might try making the scaling factor situational e.g.\
      \ scale based on distance or damage inflicted.\n\n===Building MiceMen into our\
      \ custom rules===\n\nThe MiceMen part of the mutator overrides the ScoreKill\
      \ member of the rules. From the [[Legacy:GameRules|GameRules]] page, we know\
      \ that the ScoreKill function \"''Augements the action taken when a player scores\
      \ a kill. Not the score itself, but having to do with the Controllers involved\
      \ in the Kill.''\"\n\nThe following two lines of code are all that we added\
      \ to the ScoreKill method:\n\n<uscript>\n\tif ( (Killer != None) && (Killer.Pawn\
      \ != None) )\n\t\tmutInstance.ChangePlayerSize(Killer.Pawn, mutInstance.GetScaleFor(Killer.Pawn));\n\
      </uscript>\n\nIn this case, the Killer parameter (a [[Legacy:Controller|Controller]])\
      \ is used for its associated pawn. This pawn is passed to ChangePlayerSize(),\
      \ a custom function in our mutator, along with a scaling factor. The scaling\
      \ factor is calculated using GetScaleFor(), yet another custom function in our\
      \ mutator, which also takes the pawn associated with Killer as a parameter.\
      \ Again, after our code is called, ScoreKill is called in the next [[Legacy:GameRules|GameRules]]\
      \ object.\n\nClearly a lot of the logic for MiceMen is included in the mutator,\
      \ so let's take a look at that now!\n\n==Making your own Mutator, briefly==\n\
      \nPresumably you already have the basics of making a mutator down, so we're\
      \ just going to show you what we did with ours.\n\n===PostBeginPlay()===\n\n\
      Our PostBeginPlay() code is pretty standard, going through the following steps:\n\
      \n# Call method in parent class\n# Instantiate derived [[Legacy:GameRules|GameRules]]\n\
      # Initialize mutator instance in derived [[Legacy:GameRules|GameRules]]\n# Add\
      \ [[Legacy:GameRules|GameRules]] to GameRulesModifiers linked list\n\nThe only\
      \ really odd step in there is Step 3. Because the mutator class contains functions\
      \ and data needed for the MiceMen scaling in the rules, the rules contain an\
      \ instance of the mutator. It may seem a little circular, but it works out fine.\n\
      \n===ModifyPlayer()===\n\nThe [[Legacy:Mutator|Mutator]] page lists the following\
      \ description for the ModifyPlayer() function:\n\n{{innerbox| This function\
      \ can be used to update the player's inventory, speed, and other attributes.\
      \ this function should always call ModifyPlayer() on the next mutator in the\
      \ chain (a call to the superclass method would do the trick).\n\n}}\n\nWe used\
      \ ModifyPlayer() to do the following:\n; Scale the player : Player scaling is\
      \ handled in our custom functions called ''ChangePlayerSize()'' and ''GetScaleFor()''.\
      \ The comments included in the code make the function self-explanatory. Unfortunately,\
      \ we're uncertain as to whether certain functions are necessary.\n\n; Create\
      \ a custom [[Legacy:Inventory|Inventory]] item to scale the player's weapon\
      \ : In order to make sure that the player's weapon model scales properly when\
      \ weapons are switched, the player is given a WeaponScaler, a custom class we\
      \ derived from [[Legacy:Inventory|Inventory]].\n\n==Making your own Inventory\
      \ items==\n\nIn earlier revisions of this mutator, the player weapon would not\
      \ resize to match the player scale when the player switched weapons. Our solution:\
      \ we derived a class from [[Legacy:Inventory|Inventory]] that would handle the\
      \ resizing for us.\n\nOur use of [[Legacy:Inventory|Inventory]]-related functionality\
      \ was very minimal. The [[Legacy:Inventory|Inventory]] class has a method called\
      \ ''OwnerEvent''. This method is called - surprise, surprise - whenever an event\
      \ is triggered in owner. Since we wanted to change the rescale the player weapon\
      \ whenever the weapon was changed, we watched for an event called 'ChangedWeapon':\n\
      \n<uscript>\nfunction OwnerEvent(name EventName)\n{\n\tif(EventName == 'ChangedWeapon')\n\
      \t{\n\t WeaponAttachment(Instigator.Weapon.ThirdPersonActor).SetCollisionSize(WeaponAttachment(Instigator.Weapon.ThirdPersonActor).Default.CollisionRadius\
      \ * Instigator.DrawScale, WeaponAttachment(Instigator.Weapon.ThirdPersonActor).Default.CollisionHeight\
      \ * Instigator.DrawScale);\n\t WeaponAttachment(Instigator.Weapon.ThirdPersonActor).SetDrawScale(WeaponAttachment(Instigator.Weapon.ThirdPersonActor).Default.DrawScale\
      \ * Instigator.DrawScale);\n    }\n}\n</uscript>\n\nWhen this event occurred,\
      \ the collision and draw size were rescaled based on the player's DrawScale.\
      \ Note that these properties were only set on the third person mesh as indicated\
      \ by the use of [[Legacy:WeaponAttachment|WeaponAttachment]] and ''ThirdPersonActor''\
      \ above. Also note that the player is referred to as ''Instigator'' since we\
      \ need a [[Legacy:Pawn|Pawn]] to get a [[Legacy:Weapon|weapon]].\n\n==Using\
      \ GUIPage to configure your muator, super briefly!==\n\nThis section is unnecessary\
      \ as the information that would go here is explained perfectly well over in\
      \ [[Legacy:Mutator Config GUI (UT2003)|Mutator Config GUI (UT2003)]]. In fact,\
      \ most of the config code for this mutator was taken straight from the provided\
      \ example code.\n\nWhile [[Legacy:Mutator Config GUI (UT2003)|Mutator Config\
      \ GUI (UT2003)]] is fairly complete in terms of explaining the connection between\
      \ GUI items and mutator variables, it's also a good idea to look through the\
      \ documentation on other classes in the [[Legacy:GUI_Class_Hierarchy|GUI_Class_Hierarchy]]\
      \ to make sure you don't fall victim to the old problems of giant checkboxes\
      \ and the like.\n\n==Problems==\n\nIt's true - we're not perfect, which makes\
      \ this problematic as a tutorial. Help us make this tutorial more useful for\
      \ beginners by helping us catch the following bugs:\n\n===Levitating players===\n\
      \nJust run around for a little while and it won't take long until you'll see\
      \ some of the other players flying around in midair. It's been hard for us to\
      \ establish exactly when this happens, so even figuring that out would be very\
      \ useful.\n\n'''Tricadex''' - I think this is caused by problems with the collision\
      \ box and crouching\n\n===Funny skeletons===\n\nResizing players seems to do\
      \ funny things to their corpses. We attempted to fix this problem using the\
      \ ''BoneRefresh()'' method of the [[Legacy:Actor|Actor]] class, but it's not\
      \ clear whether there are still funny effects.\n\nFeel free to add comments\
      \ to this page to help us fix these problems!\n\n==About this mutator==\n\n\
      The MiceMenGrav mutator is a class project from the [http://www.bcc.ctc.edu\
      \ Bellevue Community College] [http://gaming.bcc.ctc.edu gaming curriculum]\
      \ in Bellevue, WA. This program is also responsible for the [[Legacy:VampireShoppers|VampireShoppers]]\
      \ mutator.\n\n----\n [[:Category:Legacy Tutorial]]\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 5376
name: "Legacy:MiceMenGrav Mutator"
revision:
  revid: 5376
  parentid: 5377
  user: "Tarquin"
  timestamp: 1125415841.000000000
  comment: "*"
timestamp: 1668764187.813215000
