---
parse:
  title: "Legacy:Package Naming"
  text:
    text: "<p>The <a href=\"/Legacy:Unreal_Engine\" title=\"Legacy:Unreal Engine\"\
      >Unreal Engine</a> has certain pitfalls to do with the naming of <a href=\"\
      /Legacy:Package\" title=\"Legacy:Package\">packages</a>...</p>\n<p></p>\n<div\
      \ id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Problem_1:_name_overlap\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Problem 1: name\
      \ overlap</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #The_reason_for_this\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >The reason for this</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-3\"\
      ><a href=\"#Problem_2:_spaces.2C_cases\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Problem 2: spaces, cases</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-4\"><a href=\"#Proposed_Naming_Convention\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Proposed Naming Convention</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#maps\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">maps</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-6\"><a href=\"#for_other_resource_packages\"><span class=\"\
      tocnumber\">3.2</span> <span class=\"toctext\">for other resource packages</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Mapper.2FModmaker_Makercode_Extension_System\"\
      ><span class=\"tocnumber\">3.3</span> <span class=\"toctext\">Mapper/Modmaker\
      \ Makercode Extension System</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-8\"><a href=\"#Conclusion\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Conclusion</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-9\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">5</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-10\"><a href=\"#Discussion\"><span class=\"tocnumber\">6</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Problem_1:_name_overlap\">Problem 1: name\
      \ overlap</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package_Naming?section=1\" title=\"Edit section:\
      \ Problem 1: name overlap\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>It has been noted many times, and complained about by experienced map collectors\
      \ countless times, that mappers and modders need to observe some conventions\
      \ when naming their creations. This is most important in regard to resource\
      \ files such as .utx, .usx, etc.</p>\n<p>This is the problem for those who are\
      \ unaware. The Unreal engine (in all PC versions as far as I am aware) requires\
      \ all package names (i.e. package file names) to be <b>unique WITHOUT the extension</b>.\
      \ The extension is disregarded. This means that City.ut2, City.utx, and City.uax\
      \ cannot coexist because the engine would try to treat them all as the same\
      \ package and generate an error. A level is just another package by the way.\
      \ You can MAKE all these and have them in your directories because the computer\
      \ doesn't think they are different (since as <b>files</b>, they have different\
      \ extensions), but if Unreal engine games try to use them there will be an <b>error</b>.</p>\n\
      <table>\n<tr>\n<td>How could you get such packages? Well, either different people\
      \ could have created different packages and given them the same first name but\
      \ different extensions and you downloaded them <b>or</b> you the mapper/modder\
      \ could have made different packages in various programs and given them the\
      \ same first name but different extensions. i.e. You made a texture package\
      \ and called it City and made a sound package and called it City.</td>\n</tr>\n\
      </table>\n<p>For example:</p>\n<dl>\n<dd>DM-City.ut2</dd>\n<dd>City.utx</dd>\n\
      </dl>\n<dl>\n<dd>\n<dl>\n<dd><b>OK</b>, because the first names are different.\
      \ \"DM-\" (or any other gametype moniker) is actually part of the package's\
      \ name. This makes the two different: the engine sees these as \"City\" and\
      \ \"DM-City\".</dd>\n</dl>\n</dd>\n</dl>\n<dl>\n<dd>City.unr</dd>\n<dd>City.utx</dd>\n\
      <dd>City.umx</dd>\n<dd>CITY.uax</dd>\n<dd>CiTy.usx</dd>\n</dl>\n<dl>\n<dd>\n\
      <dl>\n<dd><b>Wrong</b>, because the package name without extension is the same.\
      \ Upper and lower case do not matter. As far as the Unreal engine is concerned\
      \ they are packages and must have unnique names since package extensions are\
      \ irrelevant.</dd>\n</dl>\n</dd>\n</dl>\n<p>Finally there is the problem that\
      \ many mappers and modders tend to gravitate towards the same names when making\
      \ texture packages, etc. This additional problem means that different mappers\
      \ might all decide to name their city based texture packages City.utx, for instance.\
      \ Since neither files nor packages can have the same name <b>and</b> the same\
      \ extension, without overwriting each other if put them in the same directory,\
      \ you get this problem:</p>\n<dl>\n<dd>City.utx →&gt;mapper A's city textures\
      \ package</dd>\n<dd>City.utx →&gt;mapper B's city textures package</dd>\n<dd>City.utx\
      \ →&gt;mapper C's city textures package</dd>\n</dl>\n<p>These files might be\
      \ entirely different except for their names but they cannot be used together\
      \ in the same Unreal based game install (remember this includes UT2003, etc.).\
      \ Not only that they will overwrite each other just like ordinary files.</p>\n\
      <p>This has been a big problem in the past as everyone tries to use the same\
      \ name for a package or map, whether it is City, Urban, Forest, or any other\
      \ generic name. Some people have tried to combine packages with the same name\
      \ but different contents, but since the indexing is extremely complicated and\
      \ packages are not just zips or wads like other games, this rarely works. <b>It\
      \ is in no way recommended, since you can lose data!</b></p>\n<h3><span class=\"\
      mw-headline\" id=\"The_reason_for_this\">The reason for this</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=2\"\
      \ title=\"Edit section: The reason for this\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>As far as the Unreal engine is concerned (and I believe\
      \ this is true across all PC versions) all packages are the same and must have\
      \ unique names, regardless of extension.</p>\n<p>The reason is that the internal\
      \ format of all packages is the same no matter what the extension is. Any kind\
      \ of data can go into any kind of package. The extensions and the practice of\
      \ sorting packages is purely for the sake of us humans. Level packages, sound,\
      \ music (.umx packages, not .ogg files), textures, etc. are all stored in packages\
      \ in the same manner. This is what makes storing textures and stuff in your\
      \ map's package using \"<a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\"\
      >MyLevel</a>\" possible.</p>\n<p>i.e. a texture package could have sounds and\
      \ static mesh info in it IF someone wanted to put them in. The extension .utx\
      \ is merely a naming convention and the habit of putting only texture files\
      \ in .utx packages is again, only a convention.</p>\n<p>Another example are\
      \ the .u packages. They contain compiles UnrealScript code, but usally also\
      \ textures, sounds, meshes, etc., but the same things could be saved in the\
      \ map's package via <a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\">MyLevel</a>.\
      \ Don't confuse .uc files with .u packages, they are just plain ASCII text files\
      \ with hopefully compilable UnrealScript code.</p>\n<p>For an explantion beyond\
      \ that you have to ask Tim Sweeney, father of the Unreal engine.&#160;:P</p>\n\
      <h2><span class=\"mw-headline\" id=\"Problem_2:_spaces.2C_cases\">Problem 2:\
      \ spaces, cases</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Package_Naming?section=3\" title=\"Edit section:\
      \ Problem 2: spaces, cases\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Don't use spaces in package names</b>, there is\
      \ no useful reason why to use spaces in packages names anyway.</p>\n<p>The reason\
      \ not to use spaces is because a space needs to be escaped in many cases (on\
      \ command line, and in HTTP requests). Using spaces will only make it more difficult\
      \ for users of the package, HTTP redirect will simply fail (because the spaces\
      \ are not escaped), on Linux is often fails too.</p>\n<p>From UT version 447\
      \ and UT2003 version 2220 spaces in redirects will be replaced with the correct&#160;%20,\
      \ but that's no excuse to use spaces.</p>\n<p><b>Don't randomly mix cases</b>,\
      \ UNIX systems (and Mac) are case sensitive (yes Mac is too), Always use a logical\
      \ mixed case name: \"DM-SomeMap.ut2\" (<i>good</i>) and not \"dM-sOmEMap.Ut2\"\
      \ (<i>bad</i>), this is simply unreadable but can also causes problems because\
      \ it invites people to rename it. Cases are mostly important for HTTP redirection\
      \ because Unreal will use the same cases as used in the filename on the local\
      \ server. So the filename has to have the exact same case as on the HTTP server.</p>\n\
      <p>Also during releases preserve the cases used in the filename. On UNIX systems\
      \ you can have MyPackage.u and myPackage.u this will confuse Unreal. On UNIX\
      \ systems Unreal will perform a case insensitive lookup for the requested file\
      \ and the first result will be used.</p>\n<p><b>Only use alphanumeric characters\
      \ and '_', '-', '.'</b> , don't use any other characters. Package names are\
      \ not meant to look cool. Other characters often need to be escaped on UNIX\
      \ systems and might not work for HTTP redirecting.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Proposed_Naming_Convention\">Proposed Naming Convention</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=4\"\
      \ title=\"Edit section: Proposed Naming Convention\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>The following is a proposed\
      \ naming convention based on the system I (Githianki) use. It might seem a bit\
      \ akward but it works very well when trying to sort through hundreds of files.\
      \ It allows anyone to easily see what files are related to which map or mod.\
      \ That, in my opinion, makes it worth any slight awkwardness.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"maps\">maps</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=5\"\
      \ title=\"Edit section: maps\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><i>maptype-mapname.unr</i> <b>or</b> <i>maptype-mapname.ut2</i></p>\n\
      <p><b>or</b> <i>mapname.unr</i> <b>or</b> <i>mapname.ut2</i> for Single Player</p>\n\
      <dl>\n<dd>where <i>maptype</i> is DM or CTF, etc. <b>and</b></dd>\n<dd>where\
      \ <i>mapname</i> is unique among all package and map names.</dd>\n</dl>\n<p>For\
      \ example: DM-SuperMap.unr <b>or</b> SuperMap.ut2</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"for_other_resource_packages\">for other resource packages</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Package_Naming?section=6\" title=\"Edit section: for other\
      \ resource packages\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><i>mapname_extension.extension</i> <b>or</b></p>\n<p><i>modname_extension.extension</i></p>\n\
      <dl>\n<dd>\n<dl>\n<dd>where <i>extension</i> is the three letter extension for\
      \ the resource type <b>and</b></dd>\n<dd>where <i>mapname</i> MATCHES EXACTLY\
      \ the mapname of the map the resource is related to <b>or</b></dd>\n<dd>where\
      \ <i>modname</i> is EXACTLY the same for a related set of files and is unique\
      \ among all modnames</dd>\n</dl>\n</dd>\n</dl>\n<p>For example:</p>\n<dl>\n\
      <dd>DM-SuperMap.unr <b>or</b> DM-SuperMap.ut2</dd>\n<dd>SuperMap_utx.utx</dd>\n\
      <dd>SuperMap_usx.usx</dd>\n<dd>SuperMap_umx.umx <b>or</b></dd>\n<dd>LarryMod_utx_01.utx</dd>\n\
      <dd>LarryMod_utx_02.utx</dd>\n<dd>LarryMod_usx.usx</dd>\n</dl>\n<p>This allows\
      \ all packages related to SuperMap to be searched for (across directories) and\
      \ be unique with regard to each other, since even when the extension is stripped\
      \ the resource type remains part of the package name. Note LarryMod has two\
      \ texture packages and added a numerical extension to make sure the names were\
      \ unique yet still could be found easily by searching for LarryMod.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Mapper.2FModmaker_Makercode_Extension_System\"\
      >Mapper/Modmaker Makercode Extension System</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=7\"\
      \ title=\"Edit section: Mapper/Modmaker Makercode Extension System\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>There has also been\
      \ a makercode proposal that would allow each mapper or mod maker/team to identify\
      \ its content. It could be incorporated as follows:</p>\n<p><i>makercode_mapname_extension.extension</i>\
      \ <b>or</b></p>\n<p><i>makercode_modname_extension.extension</i></p>\n<dl>\n\
      <dd>\n<dl>\n<dd>where <i>makercode</i> is a three or four capital letter code\
      \ that a content maker chooses for him or herself and always uses <b>and</b></dd>\n\
      <dd>where <i>extension</i> is the three letter extension for the resource type\
      \ <b>and</b></dd>\n<dd>where <i>mapname</i> MATCHES EXACTLY the mapname of the\
      \ map the resource is related to <b>or</b></dd>\n<dd>where <i>modname</i> is\
      \ EXACTLY the same for a related set of files and is unique among all modnames</dd>\n\
      </dl>\n</dd>\n</dl>\n<p>For example:</p>\n<p>CTF-SuperMap.unr <b>or</b> CTF-SuperMap.ut2</p>\n\
      <p>JOE_SuperMap_utx.utx</p>\n<p>JOE_SuperMap_usx.usx</p>\n<p>JOE_SuperMap_umx.umx</p>\n\
      <table>\n<tr>\n<td>JOE is the three letter code for stuff made by JOE. There\
      \ might also be JOE_City_utx.utx which JOE uses for all her maps. With this\
      \ scheme BOB_City_utx.utx will never conflict.</td>\n</tr>\n</table>\n<p>A mod\
      \ example might be:</p>\n<p>MCTF-SuperMap.unr <b>or</b> MCTF-SuperMap.ut2</p>\n\
      <p>TMMK_MultiCTF_utx_01.utx</p>\n<p>TMMK_MultiCTF_utx_02.utx</p>\n<p>TMMK_MultiCTF_usx.usx</p>\n\
      <p>TMMK_MultiCTF_umx.umx</p>\n<table>\n<tr>\n<td>MCTF is the gametype code for\
      \ MultiCTF maps. MultiCTF is the name of the mod which is used on all MultiCTF\
      \ packages. TMMK stands for Team ModMaker who made this (fictional) mod. As\
      \ you can see they have two texture packages and added numerical extensions\
      \ to the package names to track their files.</td>\n</tr>\n</table>\n<h2><span\
      \ class=\"mw-headline\" id=\"Conclusion\">Conclusion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=8\"\
      \ title=\"Edit section: Conclusion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>As you can see, this system allows for neat organization\
      \ and prevents package name conflicts between all the various mappers and modders\
      \ out there, without everyone having to come up with tons of different names\
      \ for files that are related. Since three letters might not be enough for makercodes\
      \ people or teams could use four, as in the last example.</p>\n<p>The key thing\
      \ about any system is that people be consitent and use it. Some folks might\
      \ wish to be more descriptive about what a package contains than JOE_BlowMap_utx.utx.\
      \ That is fine as long as the makercode is unique and used. Say JOE_grassytextures_utx.utx,\
      \ instead of the map or mod name. This is fine. Remember the system is designed\
      \ to help avoid conflict with others (makercodes) and help organize your own\
      \ efforts (extensions in the package name) only. It isn't a rule or law but\
      \ I think everyone will benefit if we all stick as close to it as possible.</p>\n\
      <p>-Githianki-</p>\n<p>P.S.&gt; This system can be used for any Unreal engined\
      \ game. Simply use the appropriate extensions for the maps for that game and\
      \ any others which are appropriate to that game.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Package_Naming?section=9\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Package_Extension_Catalog\"\
      \ title=\"Legacy:Package Extension Catalog\">Package Extension Catalog</a></li>\n\
      </ul>\n<hr />\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Package_Naming?section=10\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Mysterial:</b>Packages\
      \ that are named the same without the extension DO NOT cause an error IF the\
      \ only time those packages are used is in DynamicLoadObject() calls. Not sure\
      \ why that is, and it certainly isn't a reason for ignoring package naming issues,\
      \ but I thought it was a quirk of the engine worth mentioning.</p>\n<p><b>Wormbo:</b>\
      \ The engine will search the [Core.System] Paths for matching package files.\
      \ Once a package file is found, the engine first tries to load a .DLL (Windows)\
      \ or .SO (Linux/Mac) from the System directory with the same name as the package\
      \ and then loads the first package file found. As several people have noticed\
      \ already, the DLL loading is done using Windows' LoadLibrary() function, which\
      \ goes through all the operating system search paths. This is neither a real\
      \ performance problem (after the first request the file system cache will speed\
      \ things up) nor a security issue (UT2004 properly specifies an absolute path\
      \ name so only DLLs from the game's System directory can be loaded), so it's\
      \ nothing to worry about.</p>\n<p><i><b>A note to Joeyz and {DDG}Vaptor:</b></i>\
      \ If you guys think this is a performance problem then please give us some hard\
      \ numbers. Keep in mind that logginbg all those file system accesses are a big\
      \ performance hit already, so make sure you gather your numbers without running\
      \ FileMon, if possible. You were asked for those numbers several times already\
      \ but still fail to deliver them. Instead you spread information and imply unproven\
      \ facts to... well, I don't really know what you are trying to achieve by posting\
      \ all this <i>several times</i>, always in a way which implies that there are\
      \ serious problems.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.048\
      \ seconds\nReal time usage: 0.103 seconds\nPreprocessor visited node count:\
      \ 40/1000000\nPreprocessor generated node count: 52/1000000\nPost‐expand include\
      \ size: 14/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2445-0!*!0!!en!*!*\
      \ and timestamp 20221118015114 and revision id 5874\n -->\n"
  categories:
  - sortkey: "Package Naming"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Package Extension Catalog"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine"
  - ns: 100
    exists: true
    name: "Legacy:MyLevel"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Problem 1: name overlap"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 121
    anchor: "Problem_1:_name_overlap"
  - toclevel: 2
    level: "3"
    line: "The reason for this"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 3351
    anchor: "The_reason_for_this"
  - toclevel: 1
    level: "2"
    line: "Problem 2: spaces, cases"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 4703
    anchor: "Problem_2:_spaces.2C_cases"
  - toclevel: 1
    level: "2"
    line: "Proposed Naming Convention"
    number: "3"
    index: "4"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 6271
    anchor: "Proposed_Naming_Convention"
  - toclevel: 2
    level: "3"
    line: "maps"
    number: "3.1"
    index: "5"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 6625
    anchor: "maps"
  - toclevel: 2
    level: "3"
    line: "for other resource packages"
    number: "3.2"
    index: "6"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 6940
    anchor: "for_other_resource_packages"
  - toclevel: 2
    level: "3"
    line: "Mapper/Modmaker Makercode Extension System"
    number: "3.3"
    index: "7"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 7903
    anchor: "Mapper.2FModmaker_Makercode_Extension_System"
  - toclevel: 1
    level: "2"
    line: "Conclusion"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 9421
    anchor: "Conclusion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 10551
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "6"
    index: "10"
    fromtitle: "Legacy:Package_Naming"
    byteoffset: 10643
    anchor: "Discussion"
  displaytitle: "Legacy:Package Naming"
  iwlinks: []
  wikitext:
    text: "The [[Legacy:Unreal Engine|Unreal Engine]] has certain pitfalls to do with\
      \ the naming of [[Legacy:Package|package]]s...\n\n==Problem 1: name overlap==\n\
      \nIt has been noted many times, and complained about by experienced map collectors\
      \ countless times, that mappers and modders need to observe some conventions\
      \ when naming their creations.  This is most important in regard to resource\
      \ files such as .utx, .usx, etc.\n\nThis is the problem for those who are unaware.\
      \  The Unreal engine (in all PC versions as far as I am aware) requires all\
      \ package names (i.e. package file names) to be '''unique WITHOUT the extension'''.\
      \  The extension is disregarded.  This means that City.ut2, City.utx, and City.uax\
      \ cannot coexist because the engine would try to treat them all as the same\
      \ package and generate an error. A level is just another package by the way.\
      \  You can MAKE all these and have them in your directories because the computer\
      \ doesn't think they are different (since as '''files''', they have different\
      \ extensions), but if Unreal engine games try to use them there will be an '''error'''.\
      \ \n\n{|\n\n|-\n|How could you get such packages?  Well, either different people\
      \ could have created different packages and given them the same first name but\
      \ different extensions and you downloaded them '''or''' you the mapper/modder\
      \ could have made different packages in various programs and given them the\
      \ same first name but different extensions. i.e. You made a texture package\
      \ and called it City and made a sound package and called it City.\n|}\n\nFor\
      \ example:\n: DM-City.ut2\n: City.utx\n\n:: '''OK''', because the first names\
      \ are different. \"DM-\" (or any other gametype moniker) is actually part of\
      \ the package's name.  This makes the two different: the engine sees these as\
      \ \"City\" and \"DM-City\".\n\n:City.unr\n:City.utx\n:City.umx\n:CITY.uax\n\
      :CiTy.usx\n\n:: '''Wrong''', because the package name without extension is the\
      \ same.  Upper and lower case do not matter.    As far as the Unreal engine\
      \ is concerned they are packages and must have unnique names since package extensions\
      \ are irrelevant.\n\nFinally there is the problem that many mappers and modders\
      \ tend to gravitate towards the same names when making texture packages, etc.\
      \  This additional problem means that different mappers might all decide to\
      \ name their city based texture packages City.utx, for instance.  Since neither\
      \ files nor packages can have the same name '''and''' the same extension, without\
      \ overwriting each other if put them in the same directory, you get this problem:\n\
      \n:City.utx &rarr;>mapper A's city textures package\n:City.utx &rarr;>mapper\
      \ B's city textures package\n:City.utx &rarr;>mapper C's city textures package\n\
      \nThese files might be entirely different except for their names but they cannot\
      \ be used together in the same Unreal based game install (remember this includes\
      \ UT2003, etc.).  Not only that they will overwrite each other just like ordinary\
      \ files.\n\nThis has been a big problem in the past as everyone tries to use\
      \ the same name for a package or map, whether it is City, Urban, Forest, or\
      \ any other generic name.  Some people have tried to combine packages with the\
      \ same name but different contents, but since the indexing is extremely complicated\
      \ and packages are not just zips or wads like other games, this rarely works.\
      \  '''It is in no way recommended, since you can lose data!'''\n\n===The reason\
      \ for this ===\n\nAs far as the Unreal engine is concerned (and I believe this\
      \ is true across all PC versions) all packages are the same and must have unique\
      \ names, regardless of extension.\n\nThe reason is that the internal format\
      \ of all packages is the same no matter what the extension is. Any kind of data\
      \ can go into any kind of package.  The extensions and the practice of sorting\
      \ packages is purely for the sake of us humans. Level packages, sound, music\
      \ (.umx packages, not .ogg files), textures, etc. are all stored in packages\
      \ in the same manner. This is what makes storing textures and stuff in your\
      \ map's package using \"[[Legacy:MyLevel|MyLevel]]\" possible.\n\ni.e. a texture\
      \ package could have sounds and static mesh info in it IF someone wanted to\
      \ put them in. The extension .utx is merely a naming convention and the habit\
      \ of putting only texture files in .utx packages is again, only a convention.\n\
      \nAnother example are the .u packages. They contain compiles UnrealScript code,\
      \ but usally also textures, sounds, meshes, etc., but the same things could\
      \ be saved in the map's package via [[Legacy:MyLevel|MyLevel]]. Don't confuse\
      \ .uc files with .u packages, they are just plain ASCII text files with hopefully\
      \ compilable UnrealScript code.\n\nFor an explantion beyond that you have to\
      \ ask Tim Sweeney, father of the Unreal engine. :P\n\n==Problem 2: spaces, cases==\n\
      \n'''Don't use spaces in package names''', there is no useful reason why to\
      \ use spaces in packages names anyway.\n\nThe reason not to use spaces is because\
      \ a space needs to be escaped in many cases (on command line, and in HTTP requests).\
      \ Using spaces will only make it more difficult for users of the package, HTTP\
      \ redirect will simply fail (because the spaces are not escaped), on Linux is\
      \ often fails too.\n\nFrom UT version 447 and UT2003 version 2220 spaces in\
      \ redirects will be replaced with the correct %20, but that's no excuse to use\
      \ spaces.\n\n'''Don't randomly mix cases''', UNIX systems (and Mac) are case\
      \ sensitive (yes Mac is too), Always use a logical mixed case name: \"DM-SomeMap.ut2\"\
      \ (''good'') and not \"dM-sOmEMap.Ut2\" (''bad''), this is simply unreadable\
      \ but can also causes problems because it invites people to rename it. Cases\
      \ are mostly important for HTTP redirection because Unreal will use the same\
      \ cases as used in the filename on the local server. So the filename has to\
      \ have the exact same case as on the HTTP server.\n\nAlso during releases preserve\
      \ the cases used in the filename. On UNIX systems you can have MyPackage.u and\
      \ myPackage.u this will confuse Unreal. On UNIX systems Unreal will perform\
      \ a case insensitive lookup for the requested file and the first result will\
      \ be used.\n\n'''Only use alphanumeric characters and '_', '-', '.' ''', don't\
      \ use any other characters. Package names are not meant to look cool. Other\
      \ characters often need to be escaped on UNIX systems and might not work for\
      \ HTTP redirecting.\n\n==Proposed Naming Convention ==\n\nThe following is a\
      \ proposed naming convention based on the system I (Githianki) use.  It might\
      \ seem a bit akward but it works very well when trying to sort through hundreds\
      \ of files.  It allows anyone to easily see what files are related to which\
      \ map or mod.  That, in my opinion, makes it worth any slight awkwardness.\n\
      \n===maps ===\n\n''maptype-mapname.unr''  '''or'''  ''maptype-mapname.ut2''\
      \ \n\n'''or''' ''mapname.unr''  '''or'''  ''mapname.ut2''      for Single Player\
      \ \n:where ''maptype'' is DM or CTF, etc. '''and'''\n:where ''mapname'' is unique\
      \ among all package and map names.\n\nFor example: DM-SuperMap.unr  '''or'''\
      \  SuperMap.ut2\n\n===for other resource packages ===\n\n''mapname_extension.extension''\
      \  '''or'''\n\n''modname_extension.extension''\n::where ''extension'' is the\
      \ three letter extension for the resource type  '''and'''  \n::where ''mapname''\
      \ MATCHES EXACTLY the mapname of the map the resource is related to  '''or'''\n\
      ::where ''modname'' is EXACTLY the same for a related set of files and is unique\
      \ among all modnames\n\nFor example:\n\n:DM-SuperMap.unr  '''or''' DM-SuperMap.ut2\n\
      :SuperMap_utx.utx\n:SuperMap_usx.usx\n:SuperMap_umx.umx '''or'''\n:LarryMod_utx_01.utx\n\
      :LarryMod_utx_02.utx\n:LarryMod_usx.usx\n\nThis allows all packages related\
      \ to SuperMap to be searched for (across directories) and be unique with regard\
      \ to each other, since even when the extension is stripped the resource type\
      \ remains part of the package name.  Note LarryMod has two texture packages\
      \ and added a numerical extension to make sure the names were unique yet still\
      \ could be found easily by searching for LarryMod.\n\n===Mapper/Modmaker Makercode\
      \ Extension System ===\n\nThere has also been a makercode proposal that would\
      \ allow each mapper or mod maker/team to identify its content.  It could be\
      \ incorporated as follows:\n\n''makercode_mapname_extension.extension''  '''or'''\n\
      \n''makercode_modname_extension.extension''  \n::where ''makercode'' is a three\
      \ or four capital letter code that a content maker chooses for him or herself\
      \ and always uses  '''and'''\n::where ''extension'' is the three letter extension\
      \ for the resource type  '''and'''  \n::where ''mapname'' MATCHES EXACTLY the\
      \ mapname of the map the resource is related to  '''or'''\n::where ''modname''\
      \ is EXACTLY the same for a related set of files and is unique among all modnames\n\
      \nFor example:\n\nCTF-SuperMap.unr  '''or''' CTF-SuperMap.ut2\n\nJOE_SuperMap_utx.utx\n\
      \nJOE_SuperMap_usx.usx\n\nJOE_SuperMap_umx.umx\n\n{|\n\n|-\n|JOE is the three\
      \ letter code for stuff made by JOE.  There might also be JOE_City_utx.utx which\
      \ JOE uses for all her maps. With this scheme BOB_City_utx.utx will never conflict.\n\
      |}\n\nA mod example might be:\n\nMCTF-SuperMap.unr  '''or''' MCTF-SuperMap.ut2\n\
      \nTMMK_MultiCTF_utx_01.utx\n\nTMMK_MultiCTF_utx_02.utx\n\nTMMK_MultiCTF_usx.usx\n\
      \nTMMK_MultiCTF_umx.umx\n\n{|\n\n|-\n|MCTF is the gametype code for MultiCTF\
      \ maps.  MultiCTF is the name of the mod which is used on all MultiCTF packages.\
      \  TMMK stands for Team ModMaker who made this (fictional) mod.  As you can\
      \ see they have two texture packages and added numerical extensions to the package\
      \ names to track their files.\n|}\n\n==Conclusion ==\n\nAs you can see, this\
      \ system allows for neat organization and prevents package name conflicts between\
      \ all the various mappers and modders out there, without everyone having to\
      \ come up with tons of different names for files that are related.  Since three\
      \ letters might not be enough for makercodes people or teams could use four,\
      \ as in the last example.\n\nThe key thing about any system is that people be\
      \ consitent and use it.  Some folks might wish to be more descriptive about\
      \ what a package contains than JOE_BlowMap_utx.utx.  That is fine as long as\
      \ the makercode is unique and used.  Say JOE_grassytextures_utx.utx, instead\
      \ of the map or mod name.  This is fine.  Remember the system is designed to\
      \ help avoid conflict with others (makercodes) and help organize your own efforts\
      \ (extensions in the package name) only.  It isn't a rule or law but I think\
      \ everyone will benefit if we all stick as close to it as possible.\n\n-Githianki-\n\
      \nP.S.> This system can be used for any Unreal engined game.  Simply use the\
      \ appropriate extensions for the maps for that game and any others which are\
      \ appropriate to that game.\n\n==Related Topics ==\n* [[Legacy:Package Extension\
      \ Catalog|Package Extension Catalog]]\n\n----\n\n==Discussion ==\n\n'''Mysterial:'''Packages\
      \ that are named the same without the extension DO NOT cause an error IF the\
      \ only time those packages are used is in DynamicLoadObject() calls. Not sure\
      \ why that is, and it certainly isn't a reason for ignoring package naming issues,\
      \ but I thought it was a quirk of the engine worth mentioning.\n\n'''Wormbo:'''\
      \ The engine will search the [Core.System] Paths for matching package files.\
      \ Once a package file is found, the engine first tries to load a .DLL (Windows)\
      \ or .SO (Linux/Mac) from the System directory with the same name as the package\
      \ and then loads the first package file found. As several people have noticed\
      \ already, the DLL loading is done using Windows' LoadLibrary() function, which\
      \ goes through all the operating system search paths. This is neither a real\
      \ performance problem (after the first request the file system cache will speed\
      \ things up) nor a security issue (UT2004 properly specifies an absolute path\
      \ name so only DLLs from the game's System directory can be loaded), so it's\
      \ nothing to worry about.\n\n'''''A note to Joeyz and {DDG}Vaptor:''''' If you\
      \ guys think this is a performance problem then please give us some hard numbers.\
      \ Keep in mind that logginbg all those file system accesses are a big performance\
      \ hit already, so make sure you gather your numbers without running FileMon,\
      \ if possible. You were asked for those numbers several times already but still\
      \ fail to deliver them. Instead you spread information and imply unproven facts\
      \ to... well, I don't really know what you are trying to achieve by posting\
      \ all this ''several times'', always in a way which implies that there are serious\
      \ problems.\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 5874
name: "Legacy:Package Naming"
revision:
  revid: 5874
  parentid: 5875
  user: "Wormbo"
  timestamp: 1187475165.000000000
  comment: "old news, you guys had your chance in the official forums"
timestamp: 1668762106.280278000
