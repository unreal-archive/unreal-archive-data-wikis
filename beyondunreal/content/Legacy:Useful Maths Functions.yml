---
parse:
  title: "Legacy:Useful Maths Functions"
  text:
    text: "<p>Some useful functions and operators to fill in some of UnrealScript's\
      \ gaps. See also:</p>\n<ul>\n<li><a href=\"/Legacy:Scripting_Operators\" title=\"\
      Legacy:Scripting Operators\">Scripting Operators</a> for more information and\
      \ other examples.</li>\n<li><a href=\"/Legacy:Global_Function\" title=\"Legacy:Global\
      \ Function\">Global Functions</a> for built-in maths functions</li>\n</ul>\n\
      <p>See <a href=\"/Legacy:Useful_Maths_Functions/Cleanup\" title=\"Legacy:Useful\
      \ Maths Functions/Cleanup\">Legacy:Useful Maths Functions/Cleanup</a></p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Number_functions_and_operators\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Number functions\
      \ and operators</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #divides\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">divides</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#sgn\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">sgn</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-4\"><a href=\"#Modulo_operator\"><span class=\"tocnumber\">1.3</span>\
      \ <span class=\"toctext\">Modulo operator</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Modulo_operator_for_Integers\"><span class=\"tocnumber\"\
      >1.4</span> <span class=\"toctext\">Modulo operator for Integers</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Log\"><span class=\"tocnumber\"\
      >1.5</span> <span class=\"toctext\">Log</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Next_power_of_2\"><span class=\"tocnumber\">1.6</span>\
      \ <span class=\"toctext\">Next power of 2</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Bitwise_Switch\"><span class=\"tocnumber\">1.7</span>\
      \ <span class=\"toctext\">Bitwise Switch</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-9\"><a href=\"#Trigonometic_functions\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Trigonometic functions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#arcSin_function\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">arcSin function</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#arcCos_funtion\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">arcCos funtion</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#aTan2_funtion\"><span class=\"\
      tocnumber\">2.3</span> <span class=\"toctext\">aTan2 funtion</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#aSin2_funtion\"><span class=\"\
      tocnumber\">2.4</span> <span class=\"toctext\">aSin2 funtion</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-14\"><a href=\"#aCos2_funtion\"><span class=\"\
      tocnumber\">2.5</span> <span class=\"toctext\">aCos2 funtion</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-15\"><a href=\"#Vector_operators\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Vector operators</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"#Rotate_vector\"><span\
      \ class=\"tocnumber\">3.1</span> <span class=\"toctext\">Rotate vector</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#Rotations_between_two_Vectors\"\
      ><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">Rotations between\
      \ two Vectors</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-18\"\
      ><a href=\"#Floating-point_maths\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Floating-point maths</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-19\"><a href=\"#frexp\"><span class=\"tocnumber\">4.1</span> <span\
      \ class=\"toctext\">frexp</span></a></li>\n<li class=\"toclevel-2 tocsection-20\"\
      ><a href=\"#ldexp\"><span class=\"tocnumber\">4.2</span> <span class=\"toctext\"\
      >ldexp</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"\
      mw-headline\" id=\"Number_functions_and_operators\">Number functions and operators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=1\" title=\"Edit section:\
      \ Number functions and operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"divides\">divides</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=2\" title=\"Edit section:\
      \ divides\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This is an operator that returns true if A is a divisor of B: for example:</p>\n\
      <pre>( 3 divides 5 ) is false\n( 3 divides 6 ) is true\n</pre>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw5\">bool</span>\
      \ divides <span class=\"br0\">(</span> <span class=\"kw5\">float</span> A ,\
      \ <span class=\"kw5\">float</span> B <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  B <span class=\"sy0\">/=</span> A;\n  <span class=\"kw2\"\
      >return</span> <span class=\"kw5\">int</span><span class=\"br0\">(</span>B<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> B;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p><b>Dante:</b> This won't work in most cases\
      \ because of precision issues with floats. It should \"return abs(int(B) - B)\
      \ &lt; EPS;\" with a small EPS value.</p>\n<p><b>Wormbo:</b> Or simply use the\
      \ ~= operator. (equality after rounding to only a few digits after the comma)</p>\n\
      <p><b>Tarquin:</b> Why would you use numbers with decimals here anyway? The\
      \ concept is only useful for whole numbers. The given B should be a whole number.</p>\n\
      <p><b>Wormbo:</b> In that case a simple check for <code>B&#160;% A == 0</code>\
      \ should do the trick, possibly after overriding the&#160;% operator for int\
      \ operands so the results are accurate for large values as well.</p>\n<p><b>Tarquin:</b>\
      \ True, but I wrote the divides operator because I wanted my code to be easily\
      \ legible&#160;:)</p>\n<h3><span class=\"mw-headline\" id=\"sgn\">sgn</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=3\" title=\"Edit section:\
      \ sgn\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This is a function that crops up in maths from time to time, that has proved\
      \ useful on occasion in UnrealScript. It returns -1, 0 or +1 depending on the\
      \ sign of the input.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> Sgn<span class=\"br0\"\
      >(</span> <span class=\"kw5\">float</span> theValue <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span> theValue <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>\
      \ <span class=\"br0\">)</span>\n    <span class=\"kw2\">return</span> <span\
      \ class=\"nu0\">0</span>;\n  <span class=\"kw2\">return</span> theValue <span\
      \ class=\"sy0\">/</span> <span class=\"kw3\">Abs</span><span class=\"br0\">(</span>theValue<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Modulo_operator\">Modulo operator</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=4\" title=\"Edit section:\
      \ Modulo operator\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>UnrealScript already has a modulus operator, <code>%</code> but its behaviour\
      \ with negative numbers is not consistent with the mathematical definition:</p>\n\
      <dl>\n<dd>UnrealScript says -8&#160;% 10 = -8</dd>\n<dd>Maths says -8&#160;%\
      \ 10 = 2</dd>\n</dl>\n<p>Interestingly enough, this also occurs with C's own&#160;%\
      \ operator, showing the source of the \"bug\".</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"\
      nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw5\">float</span>\
      \ mod  <span class=\"br0\">(</span> <span class=\"kw5\">float</span> A, <span\
      \ class=\"kw5\">float</span> B <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">if</span><span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">%</span> B <span class=\"sy0\">&gt;=</span> <span class=\"\
      nu0\">0</span> <span class=\"br0\">)</span>\n    <span class=\"kw2\">return</span>\
      \ A <span class=\"sy0\">%</span> B ;\n  <span class=\"kw2\">else</span>\n  \
      \  <span class=\"kw2\">return</span> <span class=\"br0\">(</span> A <span class=\"\
      sy0\">%</span> B <span class=\"br0\">)</span> <span class=\"sy0\">+</span> B\
      \ ;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>j3rky:</b> Sorry,\
      \ but this is complete nonsense. The modulo operator is defined as the remainder\
      \ after integer division of its first argument by its second argument. The integer\
      \ remainder of -8 divided by 10 is -8, the behaviour of UnrealScript and, of\
      \ course, all C and C++ compilers is correct. Your misunderstanding may be based\
      \ on the fact that the modulo operator for A&#160;% B, where A is a POSITIVE\
      \ integer, can be implemented as <i>while (A &gt;= B) { A -= B; }</i>. However,\
      \ this doesn't mean that for negative integers it has to be implemented as <i>while\
      \ (A + B &lt; B) { A += B }</i>.</p>\n<p><b>Chinju:</b> Well, actually, many\
      \ would consider the remainder after integer division of -8 divided by 10 to\
      \ be 2, thinking that -8 == -1 * 10 + 2. In fact, (-8)/10 can be implemented\
      \ as either -1 or 0 and (-8)%10 can be implemented as either -8 or 2 by a compliant\
      \ C compiler, so even the C standard allows us to use the proposed \"mathematical\"\
      \ definition of modulus. That having been said, there isn't one single mathematical\
      \ definition of the modulus operator, but it's fairly conventional to define\
      \ it in such a way that 0 &lt;= a mod n &lt; n (by sending a mod n to the equivalence\
      \ class of integers modulo n containing a, and then designating that class by\
      \ its unique member in the appropriate range).</p>\n<p><b>j3rky:</b> I think\
      \ we have to be more accurate here. First of all, there IS a mathematical definition\
      \ of the modulus operator which has been created a long time before computers\
      \ were invented. It is based on equivalence classes and can be written out as\
      \ <i>remainder = A - (B * q)</i>, where <i>q</i> is as large as possible without\
      \ exceeding the magnitude of the true quotient of <i>A / B</i>, and <i>q</i>\
      \ will have the same sign as <i>A / B</i>. This will always lead to positive\
      \ remainders, and in our case it would actually be <i>2</i> (the remainder can\
      \ be thought of as \"borrowed\" from <i>B * q</i>). In computational arithmetics,\
      \ however, the modulus operator is defined as the remainder of the integer division\
      \ of <i>A / B</i>, and therefore the remainder will be negative if <i>A &lt;\
      \ 0</i>. Now the ugly part begins when dealing with floating-point numbers because\
      \ the floating-point implementation of the modulus operator is not the same\
      \ as the so called \"remainder\" operation as defined by IEEE. In IEEE 754 the\
      \ remainder operation is a rounding division, not a truncating division, and\
      \ therefore complies with the historical definition based on equivalence classes.\
      \ In computational arithmetics on the other hand, the floating-point modulus\
      \ operator is usually implemented analogous to the integer remainder operation.\
      \ This is especially true for the floating-point&#160;% operator in Java and\
      \ various scripting languages, as well as the <i>fmod</i> function in C (which\
      \ is also used in UnrealScript).</p>\n<p><b>Foogod:</b> Heh.. Actually, j3rky,\
      \ I think you just said exactly the same thing as the original text above does:\
      \ <i>The typical definition of the \"modulo\" operator in computational arithmetics\
      \ (remainder) is not the same as the traditional mathematical definition of\
      \ a \"modulus\" (\"A - (B * q)\")</i> (so basically, you just agreed with what\
      \ you had called \"nonsense\" earlier). To be strictly clear, in programming,\
      \ the modulo operator for integers is typically defined by the equivalence:\
      \ A = (A / B) * B + (A&#160;% B). Thus the sign for negative operands depends\
      \ on what the result of integer division is for negative numbers, which varies\
      \ from language to language (and in some cases, from computer to computer for\
      \ the same language). As far as floating point numbers, the typical definition\
      \ of a modulo operator for floating point numbers derives from the equivalence:\
      \ A = floor(A / B) * B + (A&#160;% B), and thus depends on the definition of\
      \ the \"floor\" operation for negative numbers, which also varies from language\
      \ to language (hopefully, but not always, consistently with integer division).</p>\n\
      <p>Regardless of any of this discussion, however, the point remains that both\
      \ forms of \"modulo\" operation are useful in different contexts, and therefore\
      \ it is useful to have the alternative form available, which is why it's here.</p>\n\
      <p><b>Sweavo:</b> If have an integer input and you want to bound your value\
      \ to a nice binary number, e.g. [0..7] or [0..255] then you can do this efficiently\
      \ and elegantly using masking:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >val_5bits <span class=\"sy0\">&amp;=</span> 0x001f; \nval_6bits <span class=\"\
      sy0\">&amp;=</span> 0x003f; \nval_6bits <span class=\"sy0\">&amp;=</span> 0x007f;\
      \ \nval_8bits <span class=\"sy0\">&amp;=</span> 0x00ff;</pre></div>\n</div>\n\
      <p>Whatever val_5bits had in there before, it's had its more significant bits\
      \ thrown away. Great for keeping track of rotation for example, and has the\
      \ desirable properties described (as long as your mask value is all binary ones\
      \ from whenever it starts down till the end).</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Modulo_operator_for_Integers\">Modulo operator for Integers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=5\" title=\"Edit section:\
      \ Modulo operator for Integers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealScript's modulo operator <code>%</code> takes\
      \ float parameters, but this can cause precision errors for large integers.\
      \ The following implementation overrides the operator for integer parameters\
      \ and works exactly as the built-in float version:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\">final</span>\
      \ <span class=\"kw1\">operator</span><span class=\"br0\">(</span><span class=\"\
      nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw5\">int</span> <span\
      \ class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"kw5\">int</span>\
      \ A, <span class=\"kw5\">int</span> B<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">return</span> A <span class=\"sy0\">-</span>\
      \ <span class=\"br0\">(</span>A <span class=\"sy0\">/</span> B<span class=\"\
      br0\">)</span> <span class=\"sy0\">*</span> B;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Note that the implementation exhibits the same \"non-mathematical\"\
      \ behavior for negative numbers as the float version. See the previous section\
      \ for a potential fix.</p>\n<p><b>UArch</b> shouldnt this be A - (A / B) * B;?&#160;:P\
      \ ...fixed</p>\n<h3><span class=\"mw-headline\" id=\"Log\">Log</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=6\"\
      \ title=\"Edit section: Log\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealScript has a natural log (Loge) function, but\
      \ no log with a variable base. This function allows that. 10 is the default\
      \ if 0 or no base is passed:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> Logarithm <span class=\"\
      br0\">(</span><span class=\"kw5\">float</span> a, <span class=\"kw1\">optional</span>\
      \ <span class=\"kw5\">float</span> <span class=\"kw7\">Base</span><span class=\"\
      br0\">)</span><span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"kw7\">Base</span><span class=\"\
      sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  \
      \  <span class=\"kw7\">Base</span><span class=\"sy0\">=</span><span class=\"\
      nu0\">10</span>;\n  <span class=\"kw2\">return</span> <span class=\"kw3\">Loge</span><span\
      \ class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span\
      \ class=\"kw3\">Loge</span><span class=\"br0\">(</span><span class=\"kw7\">base</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Next_power_of_2\">Next power of 2</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=7\" title=\"Edit section:\
      \ Next power of 2\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Returns the next power of 2 or the input value if it is already a power of\
      \ 2:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">int</span> NextPowerOfTwo<span class=\"br0\">(</span>\
      \ <span class=\"kw1\">coerce</span> <span class=\"kw5\">int</span> in <span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\nin <span class=\"sy0\"\
      >-=</span> <span class=\"nu0\">1</span>;\nin <span class=\"sy0\">=</span> in\
      \ <span class=\"sy0\">|</span> <span class=\"br0\">(</span>in <span class=\"\
      sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span>;\n\
      in <span class=\"sy0\">=</span> in <span class=\"sy0\">|</span> <span class=\"\
      br0\">(</span>in <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span\
      \ class=\"br0\">)</span>;\nin <span class=\"sy0\">=</span> in <span class=\"\
      sy0\">|</span> <span class=\"br0\">(</span>in <span class=\"sy0\">&gt;&gt;</span>\
      \ <span class=\"nu0\">4</span><span class=\"br0\">)</span>;\nin <span class=\"\
      sy0\">=</span> in <span class=\"sy0\">|</span> <span class=\"br0\">(</span>in\
      \ <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">2</span><span class=\"\
      br0\">)</span>;\nin <span class=\"sy0\">=</span> in <span class=\"sy0\">|</span>\
      \ <span class=\"br0\">(</span>in <span class=\"sy0\">&gt;&gt;</span> <span class=\"\
      nu0\">1</span><span class=\"br0\">)</span>;\n<span class=\"kw2\">return</span>\
      \ in <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p><b>Tarquin:</b> Why not just use log?</p>\n\
      <p><b>Switch`:</b> True, log may be better. Do you mean something like this?</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">int</span> NextPowerOfTwo<span class=\"br0\">(</span> <span class=\"kw1\"\
      >coerce</span> <span class=\"kw5\">int</span> in <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw2\">return</span> <span class=\"\
      nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw5\">int</span><span\
      \ class=\"br0\">(</span><span class=\"kw3\">Loge</span><span class=\"br0\">(</span>in<span\
      \ class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">/</span> <span class=\"kw3\">Loge</span><span class=\"\
      br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n \n<span class=\"kw1\">final</span> <span class=\"\
      kw1\">static</span> <span class=\"kw1\">function</span> <span class=\"kw5\"\
      >int</span> PrevPowerOfTwo<span class=\"br0\">(</span> <span class=\"kw1\">coerce</span>\
      \ <span class=\"kw5\">int</span> in <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw2\">return</span> <span class=\"nu0\">1</span>\
      \ <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw5\">int</span><span class=\"\
      br0\">(</span><span class=\"kw3\">Loge</span><span class=\"br0\">(</span>in<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">Loge</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Log method is faster by about 30%.</p>\n<p><b>Foxpaw:</b> This is interesting.\
      \ Why is the log method faster? Shifting and or-ing seems like it should be\
      \ MUCH faster. Is the difference in the overhead from the Unrealscript interpreter?</p>\n\
      <p><b>Foogod:</b> In C I'm fairly certain that the bit-shifting approach would\
      \ be much faster, but in UnrealScript it's very likely that the interpreter\
      \ overhead would outweigh anything else. We are talking about (at least) 12\
      \ interpreter operations for the shifting version as opposed to 6 for the log\
      \ version, which means half as many runs through a potentially fairly complicated\
      \ (with OO and all) interpreter loop. The moral of this story: Do as little\
      \ as you can in UnrealScript and use native functions as much as possible, even\
      \ expensive natives are better than a bunch of cheap UnrealScript operations.</p>\n\
      <p><b>Sweavo:</b> have you actually tried that or are you theorising? Just interested\
      \ to know how sure we are of these findings!</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Bitwise_Switch\">Bitwise Switch</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=8\"\
      \ title=\"Edit section: Bitwise Switch\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><b>Kohan:</b> This was something I came up with when\
      \ trying to compare binary to chromosomes; when cells perform meiosis, their\
      \ chromosomes collide and switch chromatids at the point of collision. I decided\
      \ to port this to a bitwise function that I figured could be used for some sort\
      \ of breeding game, I don't know. I just think it's cool.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span class=\"kw1\"\
      >final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">int</span>\
      \ BitSwitch<span class=\"br0\">(</span> <span class=\"kw5\">int</span> A, <span\
      \ class=\"kw5\">int</span> B, <span class=\"kw5\">int</span> C <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw2\">return</span>\
      \ a <span class=\"sy0\">^</span> <span class=\"br0\">(</span>a <span class=\"\
      sy0\">^</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>\
      \ c;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Now, what this does\
      \ is it compares A and B and switches their bits when C's respective bit is\
      \ 1 (C represents random occurences of collision) and returns the resulting\
      \ A. Example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">01010100 A\n<span\
      \ class=\"nu0\">10101001</span> B\n<span class=\"nu0\">10101010</span> C\n<span\
      \ class=\"sy0\">--------</span> <span class=\"kw2\">Switch</span>\n<span class=\"\
      nu0\">11111100</span></pre></div>\n</div>\n<p>I guess those weren't the best\
      \ random numbers... Anyway, that's the idea. The human logic is that you are\
      \ switching bits. In computer terms, it is pretty pointless to switch a 1 and\
      \ a 1, or a 0 and a 0, so a XOR is performed on A and B, resulting in a list\
      \ of valid switching bits. Second, this list is ANDed with C, further decreasing\
      \ the number of bits to be flipped (usually). So, if you were to Switch an A\
      \ and B with a maximum-numerical-value C, you would effectively switch their\
      \ values, or, at least, return a value of B. Let us take the above example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">01010100 A\n<span class=\"nu0\">10101001</span>\
      \ B\n<span class=\"nu0\">11111111</span> C\n<span class=\"sy0\">--------</span>\
      \ <span class=\"kw2\">Switch</span>\n<span class=\"nu0\">10101001</span></pre></div>\n\
      </div>\n<p>Well, I do hope I'm not pointless, and I hope someone might someday\
      \ use this&#160;:).</p>\n<h2><span class=\"mw-headline\" id=\"Trigonometic_functions\"\
      >Trigonometic functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=9\"\
      \ title=\"Edit section: Trigonometic functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Unrealscript includes Sin, Cos, Tan, and arcTan functions,\
      \ defined in the <a href=\"/Legacy:Object\" title=\"Legacy:Object\">Object</a>\
      \ class. The sin, cos, and tan assume an angle in radians is passed and aTan\
      \ will return an angle in radians. Here are some const conversions:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">Const</span> RadianToDegree\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">57.2957795131</span>;\n<span\
      \ class=\"kw1\">Const</span> DegreeToRadian <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0.01745329252</span>;\n<span class=\"kw1\">Const</span> RadianToURot\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">10430.3783505</span>;\n<span\
      \ class=\"kw1\">Const</span> URotToRadian <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">0.000095873799</span>;</pre></div>\n</div>\n<p>Where URot is\
      \ an unreal rotation unit (used in <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\"\
      >rotators</a>).</p>\n<h3><span class=\"mw-headline\" id=\"arcSin_function\"\
      >arcSin function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=10\" title=\"\
      Edit section: arcSin function\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Inverse Sin function. Pass the sin of an angle, and\
      \ it returns the angle:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">float</span> <span class=\"kw3\">ASin</span>  <span class=\"\
      br0\">(</span> <span class=\"kw5\">float</span> A <span class=\"br0\">)</span><span\
      \ class=\"br0\">{</span>\n  <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>A<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"\
      sy0\">||</span>A<span class=\"sy0\">&lt;-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span> <span class=\"co1\">//outside domain!</span>\n    <span\
      \ class=\"kw2\">return</span> <span class=\"nu0\">0</span>;\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>A<span class=\"sy0\">==</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">//div\
      \ by 0 checks</span>\n    <span class=\"kw2\">return</span> <span class=\"kw6\"\
      >Pi</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>;\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>A<span class=\"sy0\">==-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>\n    <span class=\"kw2\"\
      >return</span> <span class=\"kw6\">Pi</span><span class=\"sy0\">/-</span><span\
      \ class=\"nu0\">2.0</span>;\n  <span class=\"kw2\">return</span> <span class=\"\
      kw3\">ATan</span><span class=\"br0\">(</span>A<span class=\"sy0\">/</span><span\
      \ class=\"kw3\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"sy0\">-</span><span class=\"kw3\">Square</span><span class=\"br0\"\
      >(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"arcCos_funtion\">arcCos funtion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=11\"\
      \ title=\"Edit section: arcCos funtion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Inverse Cosine funtion. Pass the cosine of an angle\
      \ and the angle is returned:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> <span class=\"kw3\">ACos</span>\
      \  <span class=\"br0\">(</span> <span class=\"kw5\">float</span> A <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>A<span class=\"sy0\">&gt;</span><span class=\"\
      nu0\">1</span><span class=\"sy0\">||</span>A<span class=\"sy0\">&lt;-</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">//outside\
      \ domain!</span>\n    <span class=\"kw2\">return</span> <span class=\"nu0\"\
      >0</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>A<span\
      \ class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\
      \ <span class=\"co1\">//div by 0 check</span>\n    <span class=\"kw2\">return</span>\
      \ <span class=\"br0\">(</span><span class=\"kw6\">Pi</span><span class=\"sy0\"\
      >/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span>;\n  A<span\
      \ class=\"sy0\">=</span><span class=\"kw3\">ATan</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span\
      \ class=\"sy0\">-</span><span class=\"kw3\">Square</span><span class=\"br0\"\
      >(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"\
      sy0\">/</span>A<span class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>A<span class=\"sy0\">&lt;</span><span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>\n    A<span class=\"sy0\">+=</span><span\
      \ class=\"kw6\">Pi</span>;\n  <span class=\"kw2\">Return</span> A;\n \n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"aTan2_funtion\">aTan2 funtion</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=12\"\
      \ title=\"Edit section: aTan2 funtion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>ArcTangent2. Pass the adjacent triangle leg as X and\
      \ the opposite leg as Y (or X compoent, Y compont of a triangle inscribed in\
      \ a unit circle).:</p>\n<p>Note that if Y and X are 0, it will return 0, although\
      \ in reality there is no answer (no line = no angle). The ratio allows for more\
      \ exact angles (i.e. anywhere on the unit circle, rather than just 1/2 of it).</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">float</span> ATan2<span class=\"br0\">(</span><span class=\"kw5\">float</span>\
      \ Y,<span class=\"kw5\">float</span> X<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ tempang;\n \n  <span class=\"kw2\">if</span><span class=\"br0\">(</span>X<span\
      \ class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span> <span class=\"co1\">//div by 0 checks.</span>\n\
      \    <span class=\"kw2\">if</span><span class=\"br0\">(</span>Y<span class=\"\
      sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\
      \      <span class=\"kw2\">return</span> <span class=\"sy0\">-</span><span class=\"\
      kw6\">pi</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>;\n\
      \    <span class=\"kw2\">else</span> <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span>Y<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n      <span class=\"kw2\">return</span> <span class=\"\
      kw6\">pi</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span>;\n\
      \    <span class=\"kw2\">else</span>\n      <span class=\"kw2\">return</span>\
      \ <span class=\"nu0\">0</span>; <span class=\"co1\">//technically impossible\
      \ (nothing exists)</span>\n  <span class=\"br0\">}</span>\n  tempang<span class=\"\
      sy0\">=</span><span class=\"kw3\">ATan</span><span class=\"br0\">(</span>Y<span\
      \ class=\"sy0\">/</span>X<span class=\"br0\">)</span>;\n \n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>X<span class=\"sy0\">&lt;</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n    tempang<span class=\"\
      sy0\">+=</span><span class=\"kw6\">pi</span>;  <span class=\"co1\">//1st/3rd\
      \ quad</span>\n \n  <span class=\"co1\">//normalize (from -pi to pi)</span>\n\
      \  <span class=\"kw2\">if</span><span class=\"br0\">(</span>tempang<span class=\"\
      sy0\">&gt;</span><span class=\"kw6\">pi</span><span class=\"br0\">)</span> \n\
      \    tempang<span class=\"sy0\">-=</span><span class=\"kw6\">pi</span><span\
      \ class=\"sy0\">*</span><span class=\"nu0\">2.0</span>;\n \n  <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>tempang<span class=\"sy0\">&lt;-</span><span\
      \ class=\"kw6\">pi</span><span class=\"br0\">)</span>\n    tempang<span class=\"\
      sy0\">+=</span><span class=\"kw6\">pi</span><span class=\"sy0\">*</span><span\
      \ class=\"nu0\">2.0</span>;\n \n  <span class=\"kw2\">return</span> tempang;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"aSin2_funtion\">aSin2 funtion</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=13\"\
      \ title=\"Edit section: aSin2 funtion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>ArcSin2: a more precise asin. Y=opposite leg, R=radius/hypotenuse.\
      \ Of course if R is 0, no line exists, so it will return 0. Note that this assumes\
      \ you put the asin code in your script.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw5\">float</span> ASin2<span\
      \ class=\"br0\">(</span><span class=\"kw5\">float</span> Y,<span class=\"kw5\"\
      >float</span> Rad<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">float</span> tempang;\n\
      \ \n  <span class=\"kw2\">if</span><span class=\"br0\">(</span>Rad<span class=\"\
      sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  \
      \   <span class=\"kw2\">return</span> <span class=\"nu0\">0</span>; <span class=\"\
      co1\">//technically impossible (no hypotenuse = nothing)</span>\n  tempang<span\
      \ class=\"sy0\">=</span><span class=\"kw3\">ASin</span><span class=\"br0\">(</span>Y<span\
      \ class=\"sy0\">/</span>Rad<span class=\"br0\">)</span>;\n \n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>Rad<span class=\"sy0\">&lt;</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n    tempang<span class=\"\
      sy0\">=</span>pi<span class=\"sy0\">-</span>tempang;  <span class=\"co1\">//lower\
      \ quads</span>\n \n  <span class=\"kw2\">return</span> tempang;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"aCos2_funtion\"\
      >aCos2 funtion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=14\" title=\"\
      Edit section: aCos2 funtion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>a more precise acos. X=adjecent leg, R=opposite. Other\
      \ rules are similar to ASin2:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> ACos2<span class=\"br0\"\
      >(</span><span class=\"kw5\">float</span> X,<span class=\"kw5\">float</span>\
      \ Rad<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw1\">local</span> <span class=\"kw5\">float</span> tempang;\n \n  <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>Rad<span class=\"sy0\">==</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n     <span class=\"kw2\"\
      >return</span> <span class=\"nu0\">0</span>; <span class=\"co1\">//no possible\
      \ angle</span>\n  tempang<span class=\"sy0\">=</span><span class=\"kw3\">ACos</span><span\
      \ class=\"br0\">(</span>X<span class=\"sy0\">/</span>Rad<span class=\"br0\"\
      >)</span>;\n \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>X<span\
      \ class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\
      \    tempang<span class=\"sy0\">*=-</span><span class=\"nu0\">1</span>;  <span\
      \ class=\"co1\">//left quads</span>\n \n  <span class=\"kw2\">return</span>\
      \ tempang;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"\
      mw-headline\" id=\"Vector_operators\">Vector operators</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=15\"\
      \ title=\"Edit section: Vector operators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Some simple vector operators, since most operators\
      \ that you could want for vector have already been defined.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Extend vector by an unit length</span>\n\
      <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">preoperator</span> <span class=\"kw5\">vector</span> <span class=\"sy0\"\
      >++</span> <span class=\"br0\">(</span> <span class=\"kw1\">out</span> <span\
      \ class=\"kw5\">vector</span> A <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw2\">return</span> A <span class=\"sy0\">+=</span>\
      \ <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>A<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n<span class=\"co1\">// Shrink\
      \ operator by an unit length</span>\n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">preoperator</span> <span class=\"\
      kw5\">vector</span> <span class=\"sy0\">--</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw1\">out</span> <span class=\"kw5\">vector</span> A <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ A <span class=\"sy0\">-=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>A<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// Same thing, but postop</span>\n<span class=\"kw1\"\
      >static</span> <span class=\"kw1\">final</span> postoperator <span class=\"\
      kw5\">vector</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span>\
      \ <span class=\"kw1\">out</span> <span class=\"kw5\">vector</span> A <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> B;\n  B <span class=\"sy0\">=</span> A;\n\
      \  A <span class=\"sy0\">+=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>A<span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span>\
      \ B;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> postoperator <span class=\"kw5\">vector</span>\
      \ <span class=\"sy0\">--</span> <span class=\"br0\">(</span> <span class=\"\
      kw1\">out</span> <span class=\"kw5\">vector</span> A <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw5\">vector</span> B;\n  B <span class=\"sy0\">=</span> A;\n  A <span class=\"\
      sy0\">+=</span> <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>A<span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> B;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Rotate_vector\"\
      >Rotate vector</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=16\" title=\"\
      Edit section: Rotate vector\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Rotate one vector towards another vector.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//Rotate vector\
      \ A towards vector B, an amount of degrees.</span>\n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> RotateVector<span\
      \ class=\"br0\">(</span> <span class=\"kw1\">out</span> <span class=\"kw5\"\
      >vector</span> A, <span class=\"kw5\">vector</span> B, <span class=\"kw5\">float</span>\
      \ Degree <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">float</span> Magnitude;\n\t\
      <span class=\"kw1\">local</span> <span class=\"kw5\">vector</span> C;\n \n\t\
      Degree <span class=\"sy0\">=</span> Degree <span class=\"sy0\">*</span> <span\
      \ class=\"kw6\">Pi</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span>;<span\
      \ class=\"co1\">//Convert to radians.</span>\n\tMagnitude <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">VSize</span><span class=\"br0\">(</span>A<span\
      \ class=\"br0\">)</span>;\n\tA <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >Normal</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span>;\n\t\
      B <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>B<span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> A Dot B <span class=\"sy0\">==</span> <span class=\"\
      sy0\">-</span><span class=\"nu0\">1.0</span> <span class=\"br0\">)</span><span\
      \ class=\"co1\">//Vectors are pointing in opposite directions.</span>\n\t\t\
      B.<span class=\"me0\">x</span> <span class=\"sy0\">+=</span> <span class=\"\
      nu0\">0.0001</span>;<span class=\"co1\">//fudge it a little</span>\n \n\tC <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"br0\"\
      >(</span>B <span class=\"sy0\">-</span> <span class=\"br0\">(</span>A Dot B<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> A<span class=\"br0\">)</span>;<span\
      \ class=\"co1\">//This forms a right angle with A</span>\n \n\tA <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>\
      \ A <span class=\"sy0\">*</span> <span class=\"kw3\">Cos</span><span class=\"\
      br0\">(</span>Degree<span class=\"br0\">)</span> <span class=\"sy0\">+</span>\
      \ C <span class=\"sy0\">*</span> <span class=\"kw3\">Sin</span><span class=\"\
      br0\">(</span>Degree<span class=\"br0\">)</span> <span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> Magnitude;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Example of RotateVector:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">class</span> MySeekingRocket <span class=\"kw1\">extends</span>\
      \ SeekingRocketProj;\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">float</span> TurnRate;<span class=\"\
      co1\">//in degrees</span>\n \n<span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">function</span> <span class=\"kw4\">Timer</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\"\
      >if</span><span class=\"br0\">(</span> Seeking <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span> Seeking\
      \ <span class=\"sy0\">!=</span> <span class=\"kw7\">Instigator</span> <span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tRotateVector<span\
      \ class=\"br0\">(</span> <span class=\"kw7\">Velocity</span>, Seeking.<span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">-</span> <span class=\"\
      kw7\">Location</span>, TurnRate <span class=\"sy0\">*</span> TimerRate <span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw4\">SetRotation</span><span class=\"\
      br0\">(</span> <span class=\"kw5\">rotator</span><span class=\"br0\">(</span>\
      \ <span class=\"kw7\">Velocity</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>;\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \tTurnRate<span class=\"sy0\">=</span><span class=\"nu0\">25.000000</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>Jon</b> You see the\
      \ rocket's velocity vector is being rotated toward its target direction</p>\n\
      <p>25 degrees per second.</p>\n<p><b>Swamy:</b> You may also find this function\
      \ usefull. It returns a Rotator with the Pitch and Yaw values between the given\
      \ Vectors</p>\n<h3><span class=\"mw-headline\" id=\"Rotations_between_two_Vectors\"\
      >Rotations between two Vectors</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=17\"\
      \ title=\"Edit section: Rotations between two Vectors\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"coMULTI\">/**\n * RotBetweenVect\n * \n * This function\
      \ returns a rotator with pitch and yaw values which \n * would be needed to\
      \ rotate the first passed vector to the second one\n * \n * @param A - First\
      \ vector\n * @param B - Second vector\n * @return DeltaRot - Pitch and Yaw rotation\
      \ between vector A and B\n */</span>\n<span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">Rotator</span> RotBetweenVect<span class=\"br0\">(</span><span\
      \ class=\"kw5\">Vector</span> A, <span class=\"kw5\">Vector</span> B<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">Rotator</span> DeltaRot;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">Vector</span>  ATop, BTop;   <span class=\"co1\">//Top\
      \ projections of the vectors</span>\n\t<span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">Vector</span>  ASide, BSide; <span class=\"co1\">//Side projections\
      \ of the vectors</span>\n \n\tATop <span class=\"sy0\">=</span> A;\n\tBTop <span\
      \ class=\"sy0\">=</span> B;\n\tATop.<span class=\"me0\">Z</span> <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>;\n\tBTop.<span class=\"me0\">Z</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n \n\tASide <span\
      \ class=\"sy0\">=</span> A;\n\tBSide <span class=\"sy0\">=</span> B;\n\tASide.<span\
      \ class=\"me0\">Y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \tBSide.<span class=\"me0\">Y</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">0</span>;\n \n\tDeltaRot.<span class=\"me0\">Yaw</span> <span class=\"\
      sy0\">=</span> <span class=\"kw3\">acos</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Normal</span><span class=\"br0\">(</span>ATop<span class=\"\
      br0\">)</span> dot <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>BTop<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ RadToUnrRot;\n\tDeltaRot.<span class=\"me0\">Pitch</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">acos</span><span class=\"br0\">(</span><span class=\"\
      kw3\">Normal</span><span class=\"br0\">(</span>ASide<span class=\"br0\">)</span>\
      \ dot <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>BSide<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\
      \ RadToUnrRot;\n\tDeltaRot.<span class=\"me0\">Roll</span> <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0</span>;\n \n\t<span class=\"kw2\">return</span>\
      \ DeltaRot;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"\
      mw-headline\" id=\"Floating-point_maths\">Floating-point maths</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=18\"\
      \ title=\"Edit section: Floating-point maths\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"frexp\">frexp</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Useful_Maths_Functions?section=19\" title=\"Edit section:\
      \ frexp\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Calculates mantissa (a floating-point value between 0.5 and 1) and exponent\
      \ (an integer value), such that:</p>\n<pre>   f = mantissa * 2<sup>exponent</sup>\n\
      </pre>\n<p>where f is parameter f, mantissa is the value returned by the function\
      \ and exponent is set by the function.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw5\">float</span> frexp<span\
      \ class=\"br0\">(</span> <span class=\"kw5\">float</span> f, <span class=\"\
      kw1\">out</span> <span class=\"kw5\">int</span> e <span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span> <span class=\"\
      kw5\">float</span> m,ex;\n\t<span class=\"kw1\">local</span> <span class=\"\
      kw5\">int</span> ei;\n \n\t<span class=\"kw2\">if</span><span class=\"br0\"\
      >(</span> f <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> <span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\te <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t<span class=\"kw2\">return</span>\
      \ <span class=\"nu0\">0</span>;\n\t<span class=\"br0\">}</span>\n\t<span class=\"\
      kw2\">else</span>\n\t<span class=\"br0\">{</span>\t\t\n\t\tex <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Ceil</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Loge</span><span class=\"br0\">(</span><span class=\"kw3\">Abs</span><span\
      \ class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">/</span> <span class=\"kw3\">Loge</span><span class=\"\
      br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n\t\tei <span class=\"sy0\">=</span> ex;\n\t\tm <span\
      \ class=\"sy0\">=</span> ldexp<span class=\"br0\">(</span>f, <span class=\"\
      sy0\">-</span>ei<span class=\"br0\">)</span>;\n \n\t\t<span class=\"kw2\">while</span><span\
      \ class=\"br0\">(</span> <span class=\"kw3\">Abs</span><span class=\"br0\">(</span>m<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\"\
      >1.0</span> <span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\tei<span class=\"sy0\">++</span>;\n\t\t\tm <span class=\"sy0\">/=</span>\
      \ <span class=\"nu0\">2.0</span>;\n\t\t<span class=\"br0\">}</span>\n \n\t\t\
      <span class=\"kw2\">while</span><span class=\"br0\">(</span> <span class=\"\
      kw3\">Abs</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span> <span class=\"br0\"\
      >)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tei<span class=\"sy0\">--</span>;\n\
      \t\t\tm <span class=\"sy0\">*=</span> <span class=\"nu0\">2.0</span>;\n\t\t\
      <span class=\"br0\">}</span>\n \n\t\te <span class=\"sy0\">=</span> ei;\n\t\t\
      <span class=\"kw2\">return</span> m;\n\t<span class=\"br0\">}</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"ldexp\">ldexp</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Useful_Maths_Functions?section=20\" title=\"\
      Edit section: ldexp\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Calculates the floating point value corresponding to the given mantissa and\
      \ exponent, such that:</p>\n<pre>   f = mantissa * 2<sup>exponent</sup>\n</pre>\n\
      <p>where f is the value returned by the function, mantissa is parameter m and\
      \ exponent is is parameter e.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> ldexp<span class=\"br0\"\
      >(</span> <span class=\"kw5\">float</span> m, <span class=\"kw5\">int</span>\
      \ e <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw2\">return</span> m <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"sy0\">**</span>e<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<hr />\n<p><i>Suggestions:\
      \ Firstly, don't use &lt;pre&gt;&lt;/pre&gt;. Indent your code lines by an arbitary\
      \ amount of blanks instead (two, for instance) – that'll make Wiki automatically\
      \ format them in a monospaced font and with linebreaks preserved, and it makes\
      \ the code samples stand out better. Secondly, avoid tabs – there's no standard\
      \ way for rendering tabs, so you'll be lucky if it comes out as you wish on\
      \ other people's computers; better use blanks instead. —<a href=\"/Legacy:Mychaeel\"\
      \ title=\"Legacy:Mychaeel\">Mychaeel</a></i></p>\n<dl>\n<dd><i>thanks&#160;:-)\
      \ these were a straight copy-paste from a posting I made in Buf-Coding – <a\
      \ href=\"/Legacy:Tarquin\" title=\"Legacy:Tarquin\">Tarquin</a></i></dd>\n</dl>\n\
      <dl>\n<dd><i>Using &lt;uscript&gt;&lt;/uscript&gt; is way better now.&#160;:-P\
      \ – <a href=\"/Legacy:Wormbo\" title=\"Legacy:Wormbo\">Wormbo</a></i></dd>\n\
      </dl>\n<dl>\n<dd><i>Indeed. &#160;:-) By the way, as a potentially useful trivia\
      \ about &lt;uscript&gt;: It expands tabs to spaces in four-character steps because\
      \ that's the setting I believe Epic's coders used (and UnrealEd's script editor\
      \ does as well). Best way is to avoid tabs altogether though and indent with\
      \ spaces... →<a href=\"/Legacy:Mychaeel\" title=\"Legacy:Mychaeel\">Mychaeel</a></i></dd>\n\
      </dl>\n<p><i>Personally, I don't see any use of unary vector operators. Perhaps\
      \ the author can explain their purpose? (though I admit it serves as a demonstration\
      \ of proper usage of pre/post operator defining)– <a href=\"/Legacy:UsAaR33\"\
      \ title=\"Legacy:UsAaR33\">UsAaR33</a></i></p>\n<p><b>Corran:</b> Does anyone\
      \ know what the abs() function does? In object.uc it's in the same section as\
      \ all the trig functions but I can't seem to work out whay it does.</p>\n<p><b>Tarquin:</b>\
      \ is it abs(float) or abs(vector)? you should move this to <a href=\"/Legacy:Global_Function\"\
      \ title=\"Legacy:Global Function\">Global Function</a>.</p>\n<p><b>Mychaeel:</b>\
      \ It returns the absolute value of its argument. That is, the positive value\
      \ of the given number. (And the trigonometric functions only happen to be close\
      \ to it because they also take a float as their arguments.)</p>\n<p><b>Ironblayde:</b>\
      \ For the Sgn() function, wouldn't it be better, if theValue turns out to be\
      \ nonzero, to simply check whether theValue &gt; 0, and then return 1 or -1\
      \ as appropriate? A comparison should be faster than a floating-point divide.\
      \ There are several little things like that in this page where it looks like\
      \ small, simple optimizations could be made, for example where things like divisions\
      \ or modulus operations are performed twice when they need only be done once.\
      \ Maybe those changes don't make a big enough difference in UnrealScript, I\
      \ don't know.</p>\n<p>Also, I don't know if the link might be useful, but this\
      \ is kind of a cool page that's got some quick little algorithms on it: <a rel=\"\
      nofollow\" class=\"external free\" href=\"http://aggregate.org/MAGIC/\">http://aggregate.org/MAGIC/</a></p>\n\
      <p><b>Birelli:</b> A greater than comparison vs. a floating point operation\
      \ being faster depends a lot on the context of the code. If the floating point\
      \ processor is just sitting idle, then the given method might literally take\
      \ no \"time\" at all to calculate. On the other hand comparison operators are\
      \ usually highly optimized so they're both probably quite fast depending on\
      \ the situation. In a general library definition like this though it's impossible\
      \ to take those things into account.</p>\n<p><b>Foxpaw:</b> Hrmm, you would\
      \ probrably have to test to find out. It's definately not accurate to say that\
      \ the floating point divide would take no time if the floating point processor\
      \ was idle. The FPU on an x86-based computer does not take a \"list\" of operations\
      \ to perform and output a list of results, acting asynchronously to the main\
      \ CPU.</p>\n<p>Of course, that's a moot point as a comparison in the x86 architechture\
      \ takes the form of a subtraction and then a logical test of the sign bit, so\
      \ with floating point numbers you're going to use the FPU either way. A floating\
      \ point subtraction is probrably faster than a floating point division, but\
      \ it's also possible that the time for the FPU to compute is based on a worst\
      \ case and is not different for different operations. (Unlikely, but possible.)</p>\n\
      <p>However, I would speculate that the comparison is almost definately faster\
      \ as you are not only doing a floating point divide, but also taking the absolute\
      \ value. This of course is most easily done by just masking off the sign bit,\
      \ but that still takes at the very least one operation.</p>\n<p>Hrm.. however,\
      \ it's worth noting that the most time consuming part of the entire Sgn() function\
      \ is the overhead involved in actually calling the function, especially in an\
      \ object oriented interpreted language like Unrealscript. (in which making a\
      \ function call is less trivial than it seems, and definately not \"free\" as\
      \ some people would have you believe&#160;;)) Putting the code in your function\
      \ directly instead of making it an operator would be faster.</p>\n<p>Hrrrrmmmm.\
      \ Now that I think about it, the theValue == 0 can probrably be optimized by\
      \ casting it to bool. In assembly lanuage that would work, but I don't know\
      \ if Unrealscript has any unnecessary overhead for such casting. I guess you'd\
      \ have to time it to find out.</p>\n<p>How's this:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw5\">float</span>\
      \ Sgn<span class=\"br0\">(</span> <span class=\"kw5\">float</span> theValue\
      \ <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span> <span class=\"kw5\">Bool</span><span\
      \ class=\"br0\">(</span>theValue<span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> theValue <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">0</span> <span class=\"br0\">)</span>\n      <span class=\"\
      kw2\">return</span> <span class=\"nu0\">1</span>;\n    <span class=\"kw2\">else</span>\n\
      \      <span class=\"kw2\">return</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span>;\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw2\">return</span>\
      \ <span class=\"nu0\">0</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Ah, you know it's optimized when it's no longer readable.&#160;;)</p>\n\
      <p><b>Foxpaw:</b> In response to the comment, (that you removed) floating point\
      \ numbers do have a sign bit and you are correct that that would be faster.\
      \ However, you cannot do a bitwise and on a floating point number to mask ioff\
      \ the sign bit like that in Unrealscript.&#160;:(</p>\n<p><b>Birelli:</b> I\
      \ know, that's why I removed it&#160;;). I was thinking in C (I do that a lot)&#160;:)</p>\n\
      <p><b>Matariel:</b> Umm guys, bit of a noobie question here but, how come you've\
      \ listed all of those custom arc functions? Why not just use the arc functions\
      \ defined in Object? I know that in ut2004 there are arc functions defined in\
      \ Object; not sure if there are any in UTor ut2003 though&#160;:p</p>\n<p><b>Wormbo:</b>\
      \ They are new to UnrealEngine2.</p>\n<p><b>Matariel:</b> I see. Alright then&#160;:D</p>\n\
      <p><b>Solid Snake:</b> See some of the function use a division by 2.0, I think\
      \ it is faster to simply multiply by 0.5. I've done that in a lot of my code,\
      \ but never really considered whether it was faster or not. Just as a rule I\
      \ do that.</p>\n<p><b>Xian:</b> I was curious how an URot unit is converted\
      \ to Rads (and viceversa). The only conversions I know of are Degs &lt;-&gt;\
      \ Rads.</p>\n<p><b>Wormbo:</b> See <a href=\"/Legacy:Rotator\" title=\"Legacy:Rotator\"\
      >Rotator</a>.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.470 seconds\n\
      Real time usage: 0.623 seconds\nPreprocessor visited node count: 298/1000000\n\
      Preprocessor generated node count: 640/1000000\nPost‐expand include size: 28/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:3297-0!*!0!!en!*!*\
      \ and timestamp 20221117120848 and revision id 44262\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Scripting Operators"
  - ns: 100
    exists: true
    name: "Legacy:Wormbo"
  - ns: 100
    exists: true
    name: "Legacy:Object"
  - ns: 100
    exists: true
    name: "Legacy:Useful Maths Functions/Cleanup"
  - ns: 100
    exists: true
    name: "Legacy:Mychaeel"
  - ns: 100
    exists: true
    name: "Legacy:Tarquin"
  - ns: 100
    exists: true
    name: "Legacy:UsAaR33"
  - ns: 100
    exists: true
    name: "Legacy:Global Function"
  - ns: 100
    exists: true
    name: "Legacy:Rotator"
  templates: []
  images: []
  externallinks:
  - "http://aggregate.org/MAGIC/"
  sections:
  - toclevel: 1
    level: "2"
    line: "Number functions and operators"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 308
    anchor: "Number_functions_and_operators"
  - toclevel: 2
    level: "3"
    line: "divides"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 345
    anchor: "divides"
  - toclevel: 2
    level: "3"
    line: "sgn"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 1329
    anchor: "sgn"
  - toclevel: 2
    level: "3"
    line: "Modulo operator"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 1648
    anchor: "Modulo_operator"
  - toclevel: 2
    level: "3"
    line: "Modulo operator for Integers"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 6799
    anchor: "Modulo_operator_for_Integers"
  - toclevel: 2
    level: "3"
    line: "Log"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 7410
    anchor: "Log"
  - toclevel: 2
    level: "3"
    line: "Next power of 2"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 7728
    anchor: "Next_power_of_2"
  - toclevel: 2
    level: "3"
    line: "Bitwise Switch"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 9351
    anchor: "Bitwise_Switch"
  - toclevel: 1
    level: "2"
    line: "Trigonometic functions"
    number: "2"
    index: "9"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 10820
    anchor: "Trigonometic_functions"
  - toclevel: 2
    level: "3"
    line: "arcSin function"
    number: "2.1"
    index: "10"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 11341
    anchor: "arcSin_function"
  - toclevel: 2
    level: "3"
    line: "arcCos funtion"
    number: "2.2"
    index: "11"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 11680
    anchor: "arcCos_funtion"
  - toclevel: 2
    level: "3"
    line: "aTan2 funtion"
    number: "2.3"
    index: "12"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 12023
    anchor: "aTan2_funtion"
  - toclevel: 2
    level: "3"
    line: "aSin2 funtion"
    number: "2.4"
    index: "13"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 12887
    anchor: "aSin2_funtion"
  - toclevel: 2
    level: "3"
    line: "aCos2 funtion"
    number: "2.5"
    index: "14"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 13380
    anchor: "aCos2_funtion"
  - toclevel: 1
    level: "2"
    line: "Vector operators"
    number: "3"
    index: "15"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 13729
    anchor: "Vector_operators"
  - toclevel: 2
    level: "3"
    line: "Rotate vector"
    number: "3.1"
    index: "16"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 14374
    anchor: "Rotate_vector"
  - toclevel: 2
    level: "3"
    line: "Rotations between two Vectors"
    number: "3.2"
    index: "17"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 15608
    anchor: "Rotations_between_two_Vectors"
  - toclevel: 1
    level: "2"
    line: "Floating-point maths"
    number: "4"
    index: "18"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 16449
    anchor: "Floating-point_maths"
  - toclevel: 2
    level: "3"
    line: "frexp"
    number: "4.1"
    index: "19"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 16476
    anchor: "frexp"
  - toclevel: 2
    level: "3"
    line: "ldexp"
    number: "4.2"
    index: "20"
    fromtitle: "Legacy:Useful_Maths_Functions"
    byteoffset: 17131
    anchor: "ldexp"
  displaytitle: "Legacy:Useful Maths Functions"
  iwlinks: []
  wikitext:
    text: "Some useful functions and operators to fill in some of UnrealScript's gaps.\
      \ See also:\n* [[Legacy:Scripting Operators|Scripting Operators]] for more information\
      \ and other examples.\n* [[Legacy:Global Function|Global Function]]s for built-in\
      \ maths functions\n\nSee [[:{{SUBJECTSPACE}}:{{BASEPAGENAME}}/Cleanup]]\n\n\
      ==Number functions and operators ==\n\n===divides ===\n\nThis is an operator\
      \ that returns true if A is a divisor of B: for example:\n ( 3 divides 5 ) is\
      \ false\n ( 3 divides 6 ) is true\n\n<uscript>\nstatic final operator(24) bool\
      \ divides ( float A , float B )\n{\n  B /= A;\n  return int(B) == B;\n}\n</uscript>\n\
      \n'''Dante:''' This won't work in most cases because of precision issues with\
      \ floats. It should \"return abs(int(B) - B) < EPS;\" with a small EPS value.\n\
      \n'''Wormbo:''' Or simply use the ~= operator. (equality after rounding to only\
      \ a few digits after the comma)\n\n'''Tarquin:''' Why would you use numbers\
      \ with decimals here anyway? The concept is only useful for whole numbers. The\
      \ given B should be a whole number. \n\n'''Wormbo:''' In that case a simple\
      \ check for <code>B % A == 0</code> should do the trick, possibly after overriding\
      \ the % operator for int operands so the results are accurate for large values\
      \ as well.\n\n'''Tarquin:''' True, but I wrote the divides operator because\
      \ I wanted my code to be easily legible :)\n\n===sgn ===\n\nThis is a function\
      \ that crops up in maths from time to time, that has proved useful on occasion\
      \ in UnrealScript. It returns -1, 0 or +1 depending on the sign of the input.\n\
      \n<uscript>\nfunction float Sgn( float theValue )\n{\n  if( theValue == 0 )\n\
      \    return 0;\n  return theValue / Abs(theValue);\n}\n</uscript>\n\n===Modulo\
      \ operator ===\n\nUnrealScript already has a modulus operator, <code>%</code>\
      \ but its behaviour with negative numbers is not consistent with the mathematical\
      \ definition:\n: UnrealScript says -8 % 10 = -8 \n: Maths says -8 % 10 = 2\n\
      \nInterestingly enough, this also occurs with C's own % operator, showing the\
      \ source of the \"bug\".\n\n<uscript>\nstatic final operator(18) float mod \
      \ ( float A, float B )\n{\n  if( A % B >= 0 )\n    return A % B ;\n  else\n\
      \    return ( A % B ) + B ;\n}\n</uscript>\n\n'''j3rky:''' Sorry, but this is\
      \ complete nonsense. The modulo operator is defined as the remainder after integer\
      \ division of its first argument by its second argument. The integer remainder\
      \ of -8 divided by 10 is -8, the behaviour of UnrealScript and, of course, all\
      \ C and C++ compilers is correct. Your misunderstanding may be based on the\
      \ fact that the modulo operator for A % B, where A is a POSITIVE integer, can\
      \ be implemented as ''while (A >= B) { A -= B; }''. However, this doesn't mean\
      \ that for negative integers it has to be implemented as ''while (A + B < B)\
      \ { A += B }''.\n\n'''Chinju:''' Well, actually, many would consider the remainder\
      \ after integer division of -8 divided by 10 to be 2, thinking that -8 == -1\
      \ * 10 + 2. In fact, (-8)/10 can be implemented as  either -1 or 0 and (-8)%10\
      \ can be implemented as either -8 or 2 by a compliant C compiler, so even the\
      \ C standard allows us to use the proposed \"mathematical\" definition of modulus.\
      \ That having been said, there isn't one single mathematical definition of the\
      \ modulus operator, but it's fairly conventional to define it in such a way\
      \ that 0 <= a mod n < n (by sending a mod n to the equivalence class of integers\
      \ modulo n containing a, and then designating that class by its unique member\
      \ in the appropriate range).\n\n'''j3rky:''' I think we have to be more accurate\
      \ here. First of all, there IS a mathematical definition of the modulus operator\
      \ which has been created a long time before computers were invented. It is based\
      \ on equivalence classes and can be written out as ''remainder = A - (B * q)'',\
      \ where ''q'' is as large as possible without exceeding the magnitude of the\
      \ true quotient of ''A / B'', and ''q'' will have the same sign as ''A / B''.\
      \ This will always lead to positive remainders, and in our case it would actually\
      \ be ''2'' (the remainder can be thought of as \"borrowed\" from ''B * q'').\
      \ In computational arithmetics, however, the modulus operator is defined as\
      \ the remainder of the integer division of ''A / B'', and therefore the remainder\
      \ will be negative if ''A < 0''. Now the ugly part begins when dealing with\
      \ floating-point numbers because the floating-point implementation of the modulus\
      \ operator is not the same as the so called \"remainder\" operation as defined\
      \ by IEEE. In IEEE 754 the remainder operation is a rounding division, not a\
      \ truncating division, and therefore complies with the historical definition\
      \ based on equivalence classes. In computational arithmetics on the other hand,\
      \ the floating-point modulus operator is usually implemented analogous to the\
      \ integer remainder operation. This is especially true for the floating-point\
      \ % operator in Java and various scripting languages, as well as the ''fmod''\
      \ function in C (which is also used in UnrealScript).\n\n'''Foogod:''' Heh..\
      \ Actually, j3rky, I think you just said exactly the same thing as the original\
      \ text above does:  ''The typical definition of the \"modulo\" operator in computational\
      \ arithmetics (remainder) is not the same as the traditional mathematical definition\
      \ of a \"modulus\" (\"A - (B * q)\")'' (so basically, you just agreed with what\
      \ you had called \"nonsense\" earlier).  To be strictly clear, in programming,\
      \ the modulo operator for integers is typically defined by the equivalence:\
      \ A = (A / B) * B + (A % B).  Thus the sign for negative operands depends on\
      \ what the result of integer division is for negative numbers, which varies\
      \ from language to language (and in some cases, from computer to computer for\
      \ the same language).  As far as floating point numbers, the typical definition\
      \ of a modulo operator for floating point numbers derives from the equivalence:\
      \ A = floor(A / B) * B + (A % B), and thus depends on the definition of the\
      \ \"floor\" operation for negative numbers, which also varies from language\
      \ to language (hopefully, but not always, consistently with integer division).\n\
      \nRegardless of any of this discussion, however, the point remains that both\
      \ forms of \"modulo\" operation are useful in different contexts, and therefore\
      \ it is useful to have the alternative form available, which is why it's here.\n\
      \n'''Sweavo:''' If have an integer input and you want to bound your value to\
      \ a nice binary number, e.g. [0..7] or [0..255] then you can do this efficiently\
      \ and elegantly using masking:\n\n<uscript>\n\nval_5bits &= 0x001f; \nval_6bits\
      \ &= 0x003f; \nval_6bits &= 0x007f; \nval_8bits &= 0x00ff;\n\n</uscript>\n\n\
      Whatever val_5bits had in there before, it's had its more significant bits thrown\
      \ away.  Great for keeping track of rotation for example, and has the desirable\
      \ properties described (as long as your mask value is all binary ones from whenever\
      \ it starts down till the end).\n\n===Modulo operator for Integers===\n\nUnrealScript's\
      \ modulo operator <code>%</code> takes float parameters, but this can cause\
      \ precision errors for large integers. The following implementation overrides\
      \ the operator for integer parameters and works exactly as the built-in float\
      \ version:\n\n<uscript>\nstatic final operator(18) int % (int A, int B)\n{\n\
      \  return A - (A / B) * B;\n}\n</uscript>\n\nNote that the implementation exhibits\
      \ the same \"non-mathematical\" behavior for negative numbers as the float version.\
      \ See the previous section for a potential fix.\n\n'''UArch''' shouldnt this\
      \ be A - (A / B) * B;? :P ...fixed\n\n===Log ===\n\nUnrealScript has a natural\
      \ log (Loge) function, but no log with a variable base.  This function allows\
      \ that. 10 is the default if 0 or no base is passed:\n\n<uscript>\nstatic final\
      \ function float Logarithm (float a, optional float Base){\n  if (Base==0)\n\
      \    Base=10;\n  return Loge(a)/Loge(base);\n}\n</uscript>\n\n===Next power\
      \ of 2 ===\n\nReturns the next power of 2 or the input value if it is already\
      \ a power of 2:\n\n<uscript>\nstatic final function int NextPowerOfTwo( coerce\
      \ int in )\n{\nin -= 1;\nin = in | (in >> 16);\nin = in | (in >> 8);\nin = in\
      \ | (in >> 4);\nin = in | (in >> 2);\nin = in | (in >> 1);\nreturn in + 1;\n\
      }\n</uscript>\n\n'''Tarquin:''' Why not just use log?\n\n'''Switch`:''' True,\
      \ log may be better. Do you mean something like this?\n\n<uscript>\nfinal static\
      \ function int NextPowerOfTwo( coerce int in )\n{\n\treturn 1 << int(Loge(in-1)\
      \ / Loge(2)+1);\n}\n\n\nfinal static function int PrevPowerOfTwo( coerce int\
      \ in )\n{\n\treturn 1 << int(Loge(in) / Loge(2));\n}\n</uscript>\n\nLog method\
      \ is faster by about 30%.\n\n'''Foxpaw:''' This is interesting. Why is the log\
      \ method faster? Shifting and or-ing seems like it should be MUCH faster. Is\
      \ the difference in the overhead from the Unrealscript interpreter?\n\n'''Foogod:'''\
      \ In C I'm fairly certain that the bit-shifting approach would be much faster,\
      \ but in UnrealScript it's very likely that the interpreter overhead would outweigh\
      \ anything else.  We are talking about (at least) 12 interpreter operations\
      \ for the shifting version as opposed to 6 for the log version, which means\
      \ half as many runs through a potentially fairly complicated (with OO and all)\
      \ interpreter loop.  The moral of this story:  Do as little as you can in UnrealScript\
      \ and use native functions as much as possible, even expensive natives are better\
      \ than a bunch of cheap UnrealScript operations.\n\n'''Sweavo:''' have you actually\
      \ tried that or are you theorising?  Just interested to know how sure we are\
      \ of these findings!\n\n===Bitwise Switch===\n\n'''Kohan:''' This was something\
      \ I came up with when trying to compare binary to chromosomes; when cells perform\
      \ meiosis, their chromosomes collide and switch chromatids at the point of collision.\
      \  I decided to port this to a bitwise function that I figured could be used\
      \ for some sort of breeding game, I don't know.  I just think it's cool.\n\n\
      <uscript>\nstatic final function int BitSwitch( int A, int B, int C )\n{\n \
      \   return a ^ (a ^ b) & c;\n}\n</uscript>\n\nNow, what this does is it compares\
      \ A and B and switches their bits when C's respective bit is 1 (C represents\
      \ random occurences of collision) and returns the resulting A.  Example:\n\n\
      <uscript>\n01010100 A\n10101001 B\n10101010 C\n-------- Switch\n11111100\n</uscript>\n\
      \nI guess those weren't the best random numbers...  Anyway, that's the idea.\
      \  The human logic is that you are switching bits.  In computer terms, it is\
      \ pretty pointless to switch a 1 and a 1, or a 0 and a 0, so a XOR is performed\
      \ on A and B, resulting in a list of valid switching bits.  Second, this list\
      \ is ANDed with C, further decreasing the number of bits to be flipped (usually).\
      \  So, if you were to Switch an A and B with a maximum-numerical-value C, you\
      \ would effectively switch their values, or, at least, return a value of B.\
      \  Let us take the above example:\n\n<uscript>\n01010100 A\n10101001 B\n11111111\
      \ C\n-------- Switch\n10101001\n</uscript>\n\nWell, I do hope I'm not pointless,\
      \ and I hope someone might someday use this :).\n\n==Trigonometic functions\
      \ ==\n\nUnrealscript includes Sin, Cos, Tan, and arcTan functions, defined in\
      \ the [[Legacy:Object|Object]] class.  The sin, cos, and tan assume an angle\
      \ in radians is passed and aTan will return an angle in radians.  Here are some\
      \ const conversions:\n\n<uscript>\nConst RadianToDegree = 57.2957795131;\nConst\
      \ DegreeToRadian = 0.01745329252;\nConst RadianToURot = 10430.3783505;\nConst\
      \ URotToRadian = 0.000095873799;\n</uscript>\n\nWhere URot is an unreal rotation\
      \ unit (used in [[Legacy:Rotator|rotator]]s).\n\n===arcSin function ===\n\n\
      Inverse Sin function. Pass the sin of an angle, and it returns the angle: \n\
      \n<uscript>\nstatic final function float ASin  ( float A ){\n  if (A>1||A<-1)\
      \ //outside domain!\n    return 0;\n  if (A==1)  //div by 0 checks\n    return\
      \ Pi/2.0;\n  if (A==-1)\n    return Pi/-2.0;\n  return ATan(A/Sqrt(1-Square(A)));\n\
      }\n</uscript>\n\n===arcCos funtion ===\n\nInverse Cosine funtion.  Pass the\
      \ cosine of an angle and the angle is returned:\n\n<uscript>\nstatic final function\
      \ float ACos  ( float A )\n{\n  if (A>1||A<-1) //outside domain!\n    return\
      \ 0;\n  if (A==0) //div by 0 check\n    return (Pi/2.0);\n  A=ATan(Sqrt(1.0-Square(A))/A);\n\
      \  if (A<0)\n    A+=Pi;\n  Return A;\n\n}\n</uscript>\n\n===aTan2 funtion ===\n\
      \nArcTangent2. Pass the adjacent triangle leg as X and the opposite leg as Y\
      \ (or X compoent, Y compont of a triangle inscribed in a unit circle).: \n\n\
      Note that if Y and X are 0, it will return 0, although in reality there is no\
      \ answer (no line = no angle).   The ratio allows for more exact angles (i.e.\
      \ anywhere on the unit circle, rather than just 1/2 of it).\n\n<uscript>\nfinal\
      \ static function float ATan2(float Y,float X)\n{\n  local float tempang;\n\
      \  \n  if(X==0) { //div by 0 checks.\n    if(Y<0)\n      return -pi/2.0;\n \
      \   else if(Y>0)\n      return pi/2.0;\n    else\n      return 0; //technically\
      \ impossible (nothing exists)\n  }\n  tempang=ATan(Y/X);\n  \n  if (X<0)\n \
      \   tempang+=pi;  //1st/3rd quad\n  \n  //normalize (from -pi to pi)\n  if(tempang>pi)\
      \ \n    tempang-=pi*2.0;\n  \n  if(tempang<-pi)\n    tempang+=pi*2.0;\n  \n\
      \  return tempang;\n}\n</uscript>\n\n===aSin2 funtion ===\n\nArcSin2: a more\
      \ precise asin. Y=opposite leg, R=radius/hypotenuse. Of course if R is 0, no\
      \ line exists, so it will return 0. Note that this assumes you put the asin\
      \ code in your script. \n\n<uscript>\nfinal static function float ASin2(float\
      \ Y,float Rad)\n{\n  local float tempang;\n  \n  if(Rad==0)\n     return 0;\
      \ //technically impossible (no hypotenuse = nothing)\n  tempang=ASin(Y/Rad);\n\
      \  \n  if (Rad<0)\n    tempang=pi-tempang;  //lower quads\n  \n  return tempang;\n\
      }\n</uscript>\n\n===aCos2 funtion ===\n\na more precise acos. X=adjecent leg,\
      \ R=opposite. Other rules are similar to ASin2: \n\n<uscript>\nfinal static\
      \ function float ACos2(float X,float Rad)\n{\n  local float tempang;\n  \n \
      \ if(Rad==0)\n     return 0; //no possible angle\n  tempang=ACos(X/Rad);\n \
      \ \n  if (X<0)\n    tempang*=-1;  //left quads\n  \n  return tempang;\n}\n</uscript>\n\
      \n==Vector operators ==\n\nSome simple vector operators, since most operators\
      \ that you could want for vector have already been defined.\n\n<uscript>\n//\
      \ Extend vector by an unit length\nstatic final preoperator vector ++ ( out\
      \ vector A )\n{\n  return A += Normal(A);\n}\n// Shrink operator by an unit\
      \ length\nstatic final preoperator vector -- ( out vector A )\n{\n  return A\
      \ -= Normal(A);\n}\n\n// Same thing, but postop\nstatic final postoperator vector\
      \ ++ ( out vector A )\n{\n  local vector B;\n  B = A;\n  A += Normal(A);\n \
      \ return B;\n}\n\nstatic final postoperator vector -- ( out vector A )\n{\n\
      \  local vector B;\n  B = A;\n  A += Normal(A);\n  return B;\n}\n</uscript>\n\
      \n===Rotate vector ===\n\nRotate one vector towards another vector. \n\n<uscript>\n\
      //Rotate vector A towards vector B, an amount of degrees.\nstatic final function\
      \ RotateVector( out vector A, vector B, float Degree )\n{\n\tlocal float Magnitude;\n\
      \tlocal vector C;\n\n\tDegree = Degree * Pi / 180.0;//Convert to radians.\n\t\
      Magnitude = VSize(A);\n\tA = Normal(A);\n\tB = Normal(B);\n\n\tif( A Dot B ==\
      \ -1.0 )//Vectors are pointing in opposite directions.\n\t\tB.x += 0.0001;//fudge\
      \ it a little\n\n\tC = Normal(B - (A Dot B) * A);//This forms a right angle\
      \ with A\n\n\tA = Normal( A * Cos(Degree) + C * Sin(Degree) ) * Magnitude;\n\
      }</uscript>\n\nExample of RotateVector:\n\n<uscript>\nclass MySeekingRocket\
      \ extends SeekingRocketProj;\n\nvar() float TurnRate;//in degrees\n\nsimulated\
      \ function Timer()\n{\n\tif( Seeking != None && Seeking != Instigator )\n\t\
      {\n\t\tRotateVector( Velocity, Seeking.Location - Location, TurnRate * TimerRate\
      \ );\n\t\tSetRotation( rotator( Velocity) );\n\t}\n}\n\ndefaultproperties\n\
      {\n\tTurnRate=25.000000\n}\n</uscript>\n\n'''Jon''' You see the rocket's velocity\
      \ vector is being rotated toward its target direction\n\n25 degrees per second.\n\
      \n'''Swamy:''' You may also find this function usefull. It returns a Rotator\
      \ with the Pitch and Yaw values between the given Vectors\n\n===Rotations between\
      \ two Vectors ===\n<uscript>\n/**\n * RotBetweenVect\n * \n * This function\
      \ returns a rotator with pitch and yaw values which \n * would be needed to\
      \ rotate the first passed vector to the second one\n * \n * @param A - First\
      \ vector\n * @param B - Second vector\n * @return DeltaRot - Pitch and Yaw rotation\
      \ between vector A and B\n */\nfunction Rotator RotBetweenVect(Vector A, Vector\
      \ B)\n{\n\tlocal Rotator DeltaRot;\n\tlocal Vector  ATop, BTop;   //Top projections\
      \ of the vectors\n\tlocal Vector  ASide, BSide; //Side projections of the vectors\n\
      \n\tATop = A;\n\tBTop = B;\n\tATop.Z = 0;\n\tBTop.Z = 0;\n\n\tASide = A;\n\t\
      BSide = B;\n\tASide.Y = 0;\n\tBSide.Y = 0;\n\n\tDeltaRot.Yaw = acos(Normal(ATop)\
      \ dot Normal(BTop)) * RadToUnrRot;\n\tDeltaRot.Pitch = acos(Normal(ASide) dot\
      \ Normal(BSide)) * RadToUnrRot;\n\tDeltaRot.Roll = 0;\n\n\treturn DeltaRot;\n\
      }\n</uscript>\n\n==Floating-point maths ==\n\n===frexp ===\n\nCalculates mantissa\
      \ (a floating-point value between 0.5 and 1) and exponent (an integer value),\
      \ such that:\n    f = mantissa * 2<sup>exponent</sup>\n\nwhere f is parameter\
      \ f, mantissa is the value returned by the function and exponent is set by the\
      \ function.\n\n<uscript>\nstatic final function float frexp( float f, out int\
      \ e )\n{\n\tlocal float m,ex;\n\tlocal int ei;\n\t\n\tif( f == 0.0 )\n\t{\n\t\
      \te = 0;\n\t\treturn 0;\n\t}\n\telse\n\t{\t\t\n\t\tex = Ceil(Loge(Abs(f)) /\
      \ Loge(2));\n\t\tei = ex;\n\t\tm = ldexp(f, -ei);\n\t\t\n\t\twhile( Abs(m) >=\
      \ 1.0 )\n\t\t{\n\t\t\tei++;\n\t\t\tm /= 2.0;\n\t\t}\n\t\t\n\t\twhile( Abs(m)\
      \ < 0.5 )\n\t\t{\n\t\t\tei--;\n\t\t\tm *= 2.0;\n\t\t}\n\t\t\n\t\te = ei;\n\t\
      \treturn m;\n\t}\n}\n</uscript>\n\n===ldexp ===\n\nCalculates the floating point\
      \ value corresponding to the given mantissa and exponent, such that:\n    f\
      \ = mantissa * 2<sup>exponent</sup>\n\nwhere f is the value returned by the\
      \ function, mantissa is parameter m and exponent is is parameter e.\n\n<uscript>\n\
      static final function float ldexp( float m, int e )\n{\n\treturn m * (2**e);\n\
      }\n</uscript>\n\n----\n\n<i>Suggestions:  Firstly, don't use <nowiki><pre></pre></nowiki>.\
      \  Indent your code lines by an arbitary amount of blanks instead (two, for\
      \ instance) &ndash; that'll make Wiki automatically format them in a monospaced\
      \ font and with linebreaks preserved, and it makes the code samples stand out\
      \ better.  Secondly, avoid tabs &ndash; there's no standard way for rendering\
      \ tabs, so you'll be lucky if it comes out as you wish on other people's computers;\
      \ better use blanks instead.  &mdash;[[Legacy:Mychaeel|Mychaeel]]\n:thanks :-)\
      \ these were a straight copy-paste from a posting I made in Buf-Coding &ndash;\
      \ [[Legacy:Tarquin|Tarquin]]</i>\n\n:''Using <nowiki><uscript></uscript></nowiki>\
      \ is way better now. :-P &ndash; [[Legacy:Wormbo|Wormbo]]''\n\n:''Indeed.  :-)\
      \  By the way, as a potentially useful trivia about <nowiki><uscript></nowiki>:\
      \  It expands tabs to spaces in four-character steps because that's the setting\
      \ I believe Epic's coders used (and UnrealEd's script editor does as well).\
      \  Best way is to avoid tabs altogether though and indent with spaces...  &rarr;[[Legacy:Mychaeel|Mychaeel]]''\n\
      \n<i>Personally, I don't see any use of unary vector operators. Perhaps the\
      \ author can explain their purpose? (though I admit it serves as a demonstration\
      \ of proper usage of pre/post operator defining)&ndash; [[Legacy:UsAaR33|UsAaR33]]</i>\n\
      \n'''Corran:''' Does anyone know what the abs() function does? In object.uc\
      \ it's in the same section as all the trig functions but I can't seem to work\
      \ out whay it does.\n\n'''Tarquin:''' is it abs(float) or abs(vector)? you should\
      \ move this to [[Legacy:Global Function|Global Function]].\n\n'''Mychaeel:'''\
      \ It returns the absolute value of its argument.  That is, the positive value\
      \ of the given number.  (And the trigonometric functions only happen to be close\
      \ to it because they also take a float as their arguments.)\n\n'''Ironblayde:'''\
      \ For the Sgn() function, wouldn't it be better, if theValue turns out to be\
      \ nonzero, to simply check whether theValue > 0, and then return 1 or -1 as\
      \ appropriate? A comparison should be faster than a floating-point divide. There\
      \ are several little things like that in this page where it looks like small,\
      \ simple optimizations could be made, for example where things like divisions\
      \ or modulus operations are performed twice when they need only be done once.\
      \ Maybe those changes don't make a big enough difference in UnrealScript, I\
      \ don't know.\n\nAlso, I don't know if the link might be useful, but this is\
      \ kind of a cool page that's got some quick little algorithms on it: http://aggregate.org/MAGIC/\n\
      \n'''Birelli:''' A greater than comparison vs. a floating point operation being\
      \ faster depends a lot on the context of the code. If the floating point processor\
      \ is just sitting idle, then the given method might literally take no \"time\"\
      \ at all to calculate. On the other hand comparison operators are usually highly\
      \ optimized so they're both probably quite fast depending on the situation.\
      \ In a general library definition like this though it's impossible to take those\
      \ things into account.\n\n'''Foxpaw:''' Hrmm, you would probrably have to test\
      \ to find out. It's definately not accurate to say that the floating point divide\
      \ would take no time if the floating point processor was idle. The FPU on an\
      \ x86-based computer does not take a \"list\" of operations to perform and output\
      \ a list of results, acting asynchronously to the main CPU.\n\nOf course, that's\
      \ a moot point as a comparison in the x86 architechture takes the form of a\
      \ subtraction and then a logical test of the sign bit, so with floating point\
      \ numbers you're going to use the FPU either way. A floating point subtraction\
      \ is probrably faster than a floating point division, but it's also possible\
      \ that the time for the FPU to compute is based on a worst case and is not different\
      \ for different operations. (Unlikely, but possible.)\n\nHowever, I would speculate\
      \ that the comparison is almost definately faster as you are not only doing\
      \ a floating point divide, but also taking the absolute value. This of course\
      \ is most easily done by just masking off the sign bit, but that still takes\
      \ at the very least one operation.\n\nHrm.. however, it's worth noting that\
      \ the most time consuming part of the entire Sgn() function is the overhead\
      \ involved in actually calling the function, especially in an object oriented\
      \ interpreted language like Unrealscript. (in which making a function call is\
      \ less trivial than it seems, and definately not \"free\" as some people would\
      \ have you believe ;)) Putting the code in your function directly instead of\
      \ making it an operator would be faster.\n\nHrrrrmmmm. Now that I think about\
      \ it, the theValue == 0 can probrably be optimized by casting it to bool. In\
      \ assembly lanuage that would work, but I don't know if Unrealscript has any\
      \ unnecessary overhead for such casting. I guess you'd have to time it to find\
      \ out.\n\nHow's this:\n\n<uscript>\nfunction float Sgn( float theValue )\n{\n\
      \  if( Bool(theValue) )\n  {\n    if ( theValue > 0 )\n      return 1;\n   \
      \ else\n      return -1;\n  }\n\n  return 0;\n}\n</uscript>\n\nAh, you know\
      \ it's optimized when it's no longer readable. ;)\n\n'''Foxpaw:''' In response\
      \ to the comment, (that you removed) floating point numbers do have a sign bit\
      \ and you are correct that that would be faster. However, you cannot do a bitwise\
      \ and on a floating point number to mask ioff the sign bit like that in Unrealscript.\
      \ :(\n\n'''Birelli:''' I know, that's why I removed it ;). I was thinking in\
      \ C (I do that a lot) :)\n\n'''Matariel:''' Umm guys, bit of a noobie question\
      \ here but, how come you've listed all of those custom arc functions? Why not\
      \ just use the arc functions defined in Object? I know that in ut2004 there\
      \ are arc functions defined in Object; not sure if there are any in UTor ut2003\
      \ though :p\n\n'''Wormbo:''' They are new to UnrealEngine2.\n\n'''Matariel:'''\
      \ I see. Alright then :D\n\n'''Solid Snake:''' See some of the function use\
      \ a division by 2.0, I think it is faster to simply multiply by 0.5. I've done\
      \ that in a lot of my code, but never really considered whether it was faster\
      \ or not. Just as a rule I do that.\n\n'''Xian:''' I was curious how an URot\
      \ unit is converted to Rads (and viceversa). The only conversions I know of\
      \ are Degs <-> Rads.\n\n'''Wormbo:''' See [[Legacy:Rotator|Rotator]]."
  properties: []
  revId: 44262
name: "Legacy:Useful Maths Functions"
revision:
  revid: 44262
  parentid: 44261
  user: "Wormbo"
  timestamp: 1297199202.000000000
  comment: "fixed some of the headings' formatting"
timestamp: 1668763336.420019000
