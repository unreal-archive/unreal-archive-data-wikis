---
parse:
  title: "Legacy:RegularEngine/Versatile Key Binds"
  text:
    text: "<p>At some point I wanted to add a reload function for a weapon and went\
      \ nearly insane. This was because I already had like four different keybinds\
      \ to three different reload execs or something similar. Unreal keeps keybinds\
      \ all in the same place, unless you're using a mod from within the mod menu\
      \ that has it's own setup. So every custom gametype and mutator within the normal\
      \ UT2004 has to share all the same keys.</p>\n<p>When I was writing something\
      \ like UXL, with lots of gametypes and mutators - it seems too constraining.\
      \ So I wrote Versatile Key Binds to solve the problem. Basically VKB's are just\
      \ an interaction which holds some arrays. These arrays are virtual keybinds\
      \ that the interaction waits patiently for and then executes.</p>\n<p>So, it\
      \ flows like this:</p>\n<ul>\n<li><a href=\"/Legacy:RegularEngine/RegularPlayer\"\
      \ title=\"Legacy:RegularEngine/RegularPlayer\">The player controller</a> sets\
      \ up the <a href=\"/Legacy:RegularEngine/RegularVersatileKeyBind\" title=\"\
      Legacy:RegularEngine/RegularVersatileKeyBind\">VKB interaction</a>.</li>\n<li>The\
      \ <a href=\"/Legacy:RegularEngine/RegularVersatileKeyBind\" title=\"Legacy:RegularEngine/RegularVersatileKeyBind\"\
      >VKB interaction</a> has a set of config vars which contain arrays the mod's\
      \ binding functions (key,command,description).</li>\n<li>At any time, the player\
      \ can open a <a href=\"/Legacy:RegularEngine/RegularVKBTrader\" title=\"Legacy:RegularEngine/RegularVKBTrader\"\
      >menu to alter the keybinds.</a></li>\n<li>The <a href=\"/Legacy:RegularEngine/RegularVersatileKeyBind\"\
      \ title=\"Legacy:RegularEngine/RegularVersatileKeyBind\">VKB interaction</a>\
      \ watches player input and executes commands if it registers that a key matches\
      \ on of it's arrays.</li>\n</ul>\n<p>The only real problem I've encountered\
      \ is that since VKB's run on top of the normal player input, any keybind that\
      \ is duplicated in a VKB will actually trigger both events. So if you have the\
      \ Speech Menu assigned to V and you assign your flashlight exec to a VKB and\
      \ use the V key, you'll flash your light anytime you tell Malcolm to go take\
      \ a hike.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.020 seconds\n\
      Real time usage: 0.065 seconds\nPreprocessor visited node count: 1/1000000\n\
      Preprocessor generated node count: 4/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 1/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:2675-0!*!0!*!*!*!*\
      \ and timestamp 20221118155823 and revision id 6364\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:RegularEngine/RegularVersatileKeyBind"
  - ns: 100
    exists: true
    name: "Legacy:RegularEngine/RegularVKBTrader"
  - ns: 100
    exists: true
    name: "Legacy:RegularEngine/RegularPlayer"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:RegularEngine/Versatile Key Binds"
  iwlinks: []
  wikitext:
    text: "At some point I wanted to add a reload function for a weapon and went nearly\
      \ insane.  This was because I already had like four different keybinds to three\
      \ different reload execs or something similar.  Unreal keeps keybinds all in\
      \ the same place, unless you're using a mod from within the mod menu that has\
      \ it's own setup.  So every custom gametype and mutator within the normal UT2004\
      \ has to share all the same keys.\n\nWhen I was writing something like UXL,\
      \ with lots of gametypes and mutators - it seems too constraining.  So I wrote\
      \ Versatile Key Binds to solve the problem.  Basically VKB's are just an interaction\
      \ which holds some arrays.  These arrays are virtual keybinds that the interaction\
      \ waits patiently for and then executes.\n\nSo, it flows like this:\n\n* [[Legacy:RegularEngine/RegularPlayer|The\
      \ player controller]] sets up the [[Legacy:RegularEngine/RegularVersatileKeyBind|VKB\
      \ interaction]].\n* The [[Legacy:RegularEngine/RegularVersatileKeyBind|VKB interaction]]\
      \ has a set of config vars which contain arrays the mod's binding functions\
      \ (key,command,description).\n* At any time, the player can open a [[Legacy:RegularEngine/RegularVKBTrader|menu\
      \ to alter the keybinds.]]\n* The [[Legacy:RegularEngine/RegularVersatileKeyBind|VKB\
      \ interaction]] watches player input and executes commands if it registers that\
      \ a key matches on of it's arrays.\n\nThe only real problem I've encountered\
      \ is that since VKB's run on top of the normal player input, any keybind that\
      \ is duplicated in a VKB will actually trigger both events.  So if you have\
      \ the Speech Menu assigned to V and you assign your flashlight exec to a VKB\
      \ and use the V key, you'll flash your light anytime you tell Malcolm to go\
      \ take a hike."
  properties: []
  revId: 6364
name: "Legacy:RegularEngine/Versatile Key Binds"
revision:
  revid: 6364
  parentid: 0
  user: "RegularX"
  timestamp: 1103733183.000000000
  comment: "*"
timestamp: 1668787027.029674000
