---
parse:
  title: "Legacy:Within"
  text:
    text: "<p>The <b>within</b> <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> keyword is used to forward class member access to another\
      \ containing class. The <a href=\"/Legacy:PlayerInput\" title=\"Legacy:PlayerInput\"\
      >PlayerInput</a> class is an example of this keyword used in UT2003.</p>\n<p>You\
      \ do not need to explicitly declare within for subclasses. That is, if class\
      \ A is <b>within</b> class B, all subclasses of A will also be <b>within</b>\
      \ class B.</p>\n<h3><span class=\"mw-headline\" id=\"Example\">Example</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Within?section=1\" title=\"Edit section: Example\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">//</span>\n<span class=\"co1\">// foo.uc</span>\n\
      <span class=\"co1\">//</span>\n \n<span class=\"kw1\">class</span> Foo <span\
      \ class=\"kw1\">extends</span> <span class=\"kw8\">Object</span> within Bar\n\
      \ \n<span class=\"kw1\">function</span> DoSomething<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\"\
      >// This is a member of the Bar class.</span>\n  <span class=\"sy0\">++</span>count;\
      \   \n<span class=\"br0\">}</span>\n \n \n<span class=\"co1\">//</span>\n<span\
      \ class=\"co1\">// bar.uc</span>\n<span class=\"co1\">//</span>\n \n<span class=\"\
      kw1\">class</span> Bar <span class=\"kw1\">extends</span> <span class=\"kw8\"\
      >Object</span>\n \n<span class=\"kw1\">var</span> <span class=\"kw5\">int</span>\
      \ count;\n<span class=\"kw1\">var</span> Foo MyFoo;\n \n<span class=\"kw1\"\
      >function</span> DoSomethingElse<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n  count <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>;\n  MyFoo.<span class=\"me0\">DoSomething</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"kw2\"\
      >assert</span><span class=\"br0\">(</span> count <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p><b>Foxpaw:</b> How does this work WRT\
      \ the instantiation of an object within another object? That is to say, how\
      \ does Foo determine what instance of Bar it is \"within?\" It is simply by\
      \ virtue of having the Foo variable in Bar? What happens if more than one instance\
      \ of an object has a reference to the same Foo? What happens if you try to access\
      \ properties of a Bar object from within the Foo object, but no Bar objects\
      \ contain any references to Foos?</p>\n<p><b>El Muerte:</b> within is mostly\
      \ a hint for the compiler (to resolve variables and functions). Foo can only\
      \ be a child of a single Bar. The owner of Foo has to be of type Bar and the\
      \ Bar functions and variables accessed are called on the owner.</p>\n<p><b>Foxpaw:</b>\
      \ So, within gives the same effect as prepending \"Bar(Owner).\" to all of the\
      \ properties of Bar?</p>\n<p><b>Wormbo:</b> More like \"Bar(Outer).\", since\
      \ we are talking about non-<a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> objects here. I've noticed, though, that this only applies to variables.\
      \ Functions still seem to require \"Outer.\", but it doesn't need to be typecasted\
      \ to Bar because the Within keyword already states that there can't be any other\
      \ Outer class.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Within?section=2\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\n\
      <ul>\n<li><a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\">Class\
      \ Syntax</a></li>\n</ul>\n</li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.030 seconds\nReal time usage: 0.032 seconds\nPreprocessor visited\
      \ node count: 16/1000000\nPreprocessor generated node count: 32/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3760-0!*!0!!*!*!*\
      \ and timestamp 20221118124818 and revision id 9534\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:PlayerInput"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "3"
    line: "Example"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Within"
    byteoffset: 385
    anchor: "Example"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Within"
    byteoffset: 1869
    anchor: "Related_Topics"
  displaytitle: "Legacy:Within"
  iwlinks: []
  wikitext:
    text: "The '''within''' [[Legacy:UnrealScript|UnrealScript]] keyword is used to\
      \ forward class member access to another containing class.  The [[Legacy:PlayerInput|PlayerInput]]\
      \ class is an example of this keyword used in UT2003.\n\nYou do not need to\
      \ explicitly declare within for subclasses. That is, if class A is '''within'''\
      \ class B, all subclasses of A will also be '''within''' class B.\n\n===Example===\n\
      \n<uscript>\n//\n// foo.uc\n//\n\nclass Foo extends Object within Bar\n\nfunction\
      \ DoSomething()\n{\n  // This is a member of the Bar class.\n  ++count;   \n\
      }\n\n\n//\n// bar.uc\n//\n\nclass Bar extends Object\n\nvar int count;\nvar\
      \ Foo MyFoo;\n\nfunction DoSomethingElse()\n{\n  count = 0;\n  MyFoo.DoSomething();\n\
      \  assert( count == 1 );\n}\n</uscript>\n\n'''Foxpaw:''' How does this work\
      \ WRT the instantiation of an object within another object? That is to say,\
      \ how does Foo determine what instance of Bar it is \"within?\" It is simply\
      \ by virtue of having the Foo variable in Bar? What happens if more than one\
      \ instance of an object has a reference to the same Foo? What happens if you\
      \ try to access properties of a Bar object from within the Foo object, but no\
      \ Bar objects contain any references to Foos?\n\n'''El Muerte:''' within is\
      \ mostly a hint for the compiler (to resolve variables and functions). Foo can\
      \ only be a child of a single Bar. The owner of Foo has to be of type Bar and\
      \ the Bar functions and variables accessed are called on the owner.\n\n'''Foxpaw:'''\
      \ So, within gives the same effect as prepending \"Bar(Owner).\" to all of the\
      \ properties of Bar?\n\n'''Wormbo:''' More like \"Bar(Outer).\", since we are\
      \ talking about non-[[Legacy:Actor|Actor]] objects here. I've noticed, though,\
      \ that this only applies to variables. Functions still seem to require \"Outer.\"\
      , but it doesn't need to be typecasted to Bar because the Within keyword already\
      \ states that there can't be any other Outer class.\n\n==Related Topics==\n\
      * [[Legacy:UnrealScript|UnrealScript]]\n** [[Legacy:Class Syntax|Class Syntax]]"
  properties: []
  revId: 9534
name: "Legacy:Within"
revision:
  revid: 9534
  parentid: 9535
  user: "Wormbo"
  timestamp: 1102842489.000000000
  comment: "*"
timestamp: 1668775699.191111000
