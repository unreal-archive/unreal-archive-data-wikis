---
parse:
  title: "Legacy:Plane"
  text:
    text: "<p>In 3d geometry, a <a href=\"http://en.wikipedia.org/wiki/Plane_(mathematics)\"\
      \ class=\"extiw\" title=\"wikipedia:Plane (mathematics)\">plane</a> is defined\
      \ as a flat surface with no thickness: it's the 3-dimensional analog to a line.\
      \ Imagine the top of a table. The top surface of the table is a plane. Any objects\
      \ lying on the table would be said to be \"in the plane\" of the tabletop.</p>\n\
      <p>A particular plane can be specified in several ways; in UnrealScript, this\
      \ is done with a vector and a float:</p>\n<ul>\n<li>the vector is the plane's\
      \ <b>normal vector</b>: a unit vector perpendicular to it. This gives the orientation\
      \ of the plane. Any one of an infinite number of parallel planes has this normal\
      \ vector.</li>\n<li>the float is the distance from the plane to the origin.\
      \ This picks out one particular plane.</li>\n</ul>\n<p>The Plane struct extends\
      \ <a href=\"/Legacy:Vector\" title=\"Legacy:Vector\">vector</a> in <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>, so <b>in\
      \ theory</b> all operations using vectors as parameters can be used with planes\
      \ as well. In practice it has been found that native functions like <code>dot</code>\
      \ crash <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> when used with a plane – this could be a bug, but the dot function\
      \ wouldn't make much sense on planes anyway. Other such peculiarities with the\
      \ use of planes may also exist.</p>\n<p>The plane struct can be used to describe\
      \ other types of things for which a vector + a number makes sense:</p>\n<ul>\n\
      <li>sphere (position vector of the centre + radius)</li>\n</ul>\n<p><b>Pingz:</b>\
      \ We need a more technical description maybe. How about some examples of uses\
      \ for planes and a nice graphic of one.</p>\n<p><b>Wormbo:</b> The <code>plane</code>\
      \ struct can also be used to describe spheres, so maybe some functions for that\
      \ would be a nice addition.</p>\n<p><b>Foxpaw:</b> I'm confused. How can you\
      \ specify a plane as only a distance from the origin and a normal describing\
      \ the facing of the plane? How does it know which direction the distance from\
      \ the origin is? Is the plane in these snippets required to be facing directly\
      \ away from the origin?</p>\n<p><b>Tarquin:</b> the direction of the distance\
      \ from the origin will be given by the normal vector – you'll get positive or\
      \ negative. I can write some more but I'm, not sure how technical I can get</p>\n\
      <p><b>Foxpaw:</b> So in other words the plane will always face directly toward/directly\
      \ away from the origin? Hmm, actually when I think about it I guess every plane\
      \ has to face the origin/face directly away from it at at least one point. I\
      \ guess that would work after all.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Built-In_Plane_Functions\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Built-In Plane Functions</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Other_Useful_Functions\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Other Useful Functions</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Plane_Creation_From_Point_And_Normal\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Plane Creation\
      \ From Point And Normal</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Normalize_Plane\"><span class=\"tocnumber\">2.2</span> <span class=\"\
      toctext\">Normalize Plane</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#Distance_To_Point\"><span class=\"tocnumber\">2.3</span> <span class=\"\
      toctext\">Distance To Point</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-7\"><a href=\"#Related_Links\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">Related Links</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Built-In_Plane_Functions\">Built-In Plane\
      \ Functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Plane?section=1\" title=\"Edit section: Built-In\
      \ Plane Functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>There are no native plane <a href=\"/Legacy:Operators\" title=\"Legacy:Operators\"\
      >operators</a> or functions in <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"\
      mw-redirect\">UT</a>, <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"\
      mw-redirect\">UT2003</a>, <a href=\"/Legacy:Unreal\" title=\"Legacy:Unreal\"\
      >Unreal</a>, or <a href=\"/Legacy:Unreal_2\" title=\"Legacy:Unreal 2\">Unreal\
      \ 2</a>.</p>\n<h2><span class=\"mw-headline\" id=\"Other_Useful_Functions\"\
      >Other Useful Functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Plane?section=2\" title=\"\
      Edit section: Other Useful Functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Plane_Creation_From_Point_And_Normal\"\
      >Plane Creation From Point And Normal</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Plane?section=3\"\
      \ title=\"Edit section: Plane Creation From Point And Normal\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>This function constructs\
      \ a plane from a normal vector and a point which lies on the desired plane.\
      \ If the normal is of unit length then the resulting plane with be normalized.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">plane</span> PlaneFromPointAndNormal<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">vector</span> <span class=\"kw3\">normal</span>, <span class=\"\
      kw5\">vector</span> point <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">plane</span>\
      \ result;\n\tresult.<span class=\"me0\">x</span>\t<span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">normal</span>.<span class=\"me0\">x</span>;\n\tresult.<span\
      \ class=\"me0\">y</span>\t<span class=\"sy0\">=</span> <span class=\"kw3\">normal</span>.<span\
      \ class=\"me0\">y</span>;\n\tresult.<span class=\"me0\">z</span>\t<span class=\"\
      sy0\">=</span> <span class=\"kw3\">normal</span>.<span class=\"me0\">z</span>;\n\
      \tresult.<span class=\"me0\">w</span>\t<span class=\"sy0\">=</span> <span class=\"\
      kw3\">normal</span> dot point;\n\t<span class=\"kw2\">return</span> result;\t\
      \n<span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Normalize_Plane\">Normalize Plane</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Plane?section=4\"\
      \ title=\"Edit section: Normalize Plane\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This function will normalize a plane which was not\
      \ created from a unit normal. This allows for the calculation of exact distance\
      \ to a point.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">plane</span> PlaneNormalize<span class=\"br0\">(</span>\
      \ <span class=\"kw5\">plane</span> p <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ inverse_length;\n \n\t<span class=\"co1\">// vsize(p) returns the length of\
      \ the vector </span>\n\t<span class=\"co1\">// part of the plane ( the normal\
      \ ), i.e. it</span>\n\t<span class=\"co1\">// completetly ignores the W component\
      \ of </span>\n\t<span class=\"co1\">// the plane.</span>\n\tinverse_length <span\
      \ class=\"sy0\">=</span> 1.0f <span class=\"sy0\">/</span> <span class=\"kw3\"\
      >vsize</span><span class=\"br0\">(</span> p <span class=\"br0\">)</span>;\n\
      \ \n    p.<span class=\"me0\">x</span> <span class=\"sy0\">*=</span> inverse_length;\n\
      \    p.<span class=\"me0\">y</span> <span class=\"sy0\">*=</span> inverse_length;\n\
      \    p.<span class=\"me0\">z</span> <span class=\"sy0\">*=</span> inverse_length;\n\
      \    p.<span class=\"me0\">w</span>\t<span class=\"sy0\">*=</span> inverse_length;\n\
      \t<span class=\"kw2\">return</span> p;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Distance_To_Point\">Distance To\
      \ Point</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Plane?section=5\" title=\"Edit section: Distance\
      \ To Point\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This will return the distance and the side which a point lies in relation\
      \ to a plane. If the distance is 0 the point lies exactly on the plane. If the\
      \ distance is positive the point lies in front of the plane. If the distance\
      \ is negative the point is behind the plane. Note that to get the correct distance\
      \ the plane must be normalized, else only the side will be accurate.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"\
      kw5\">float</span> PlaneDistanceToPoint<span class=\"br0\">(</span> <span class=\"\
      kw5\">plane</span> p, <span class=\"kw5\">vector</span> point <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> n;\n \n\t<span class=\"co1\">// Note:  We\
      \ have to use a temp here to hold</span>\n\t<span class=\"co1\">// the normal\
      \ part of the plane because calling </span>\n\t<span class=\"co1\">// 'plane\
      \ dot point', though the compiler</span>\n\t<span class=\"co1\">// allows it,\
      \ actually crashes UT2K3.</span>\n \n\tn <span class=\"sy0\">=</span> p;\n\t\
      <span class=\"kw2\">return</span> <span class=\"br0\">(</span> n dot point <span\
      \ class=\"br0\">)</span> <span class=\"sy0\">-</span> p.<span class=\"me0\"\
      >w</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Another technical\
      \ note:<br />\nHere <code>n = p</code> works in a similar way like assigning\
      \ e.g. a <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\">Pawn</a> to an <a href=\"\
      /Legacy:Actor\" title=\"Legacy:Actor\">Actor</a> variable, except that a struct\
      \ assignment copies the actual values while an object assignment only copies\
      \ references, not the objects themselves.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Plane?section=6\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Built-In_Struct\" title=\"\
      Legacy:Built-In Struct\">Built-In Struct</a></li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Links\">Related Links</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Plane?section=7\"\
      \ title=\"Edit section: Related Links\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Plane_(mathematics)\"\
      \ class=\"extiw\" title=\"wikipedia:Plane (mathematics)\">Wikipedia:Plane (mathematics)</a></li>\n\
      </ul>\n<hr />\n<p><b>Foxpaw:</b> Nifty. The PlaneDistancetoPoint function is\
      \ exactly what I've been looking for. Been scratching my head to try to remember\
      \ that stuff from high school.&#160;:P</p>\n\n<!-- \nNewPP limit report\nCPU\
      \ time usage: 0.102 seconds\nReal time usage: 0.117 seconds\nPreprocessor visited\
      \ node count: 55/1000000\nPreprocessor generated node count: 94/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2489-0!*!0!!en!*!*\
      \ and timestamp 20221118124943 and revision id 5972\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Unreal 2"
  - ns: 100
    exists: true
    name: "Legacy:Vector"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Built-In Struct"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Unreal"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Built-In Plane Functions"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Plane"
    byteoffset: 2369
    anchor: "Built-In_Plane_Functions"
  - toclevel: 1
    level: "2"
    line: "Other Useful Functions"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Plane"
    byteoffset: 2576
    anchor: "Other_Useful_Functions"
  - toclevel: 2
    level: "3"
    line: "Plane Creation From Point And Normal"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Plane"
    byteoffset: 2604
    anchor: "Plane_Creation_From_Point_And_Normal"
  - toclevel: 2
    level: "3"
    line: "Normalize Plane"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Plane"
    byteoffset: 3070
    anchor: "Normalize_Plane"
  - toclevel: 2
    level: "3"
    line: "Distance To Point"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Plane"
    byteoffset: 3656
    anchor: "Distance_To_Point"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Plane"
    byteoffset: 4692
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Related Links"
    number: "4"
    index: "7"
    fromtitle: "Legacy:Plane"
    byteoffset: 4758
    anchor: "Related_Links"
  displaytitle: "Legacy:Plane"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/Plane_(mathematics)"
    name: "wikipedia:Plane (mathematics)"
  wikitext:
    text: "In 3d geometry, a [[Wikipedia:Plane (mathematics)|plane]] is defined as\
      \ a flat surface with no thickness: it's the 3-dimensional analog to a line.\
      \ Imagine the top of a table. The top surface of the table is a plane. Any objects\
      \ lying on the table would be said to be \"in the plane\" of the tabletop.\n\
      \nA particular plane can be specified in several ways; in UnrealScript, this\
      \ is done with a vector and a float:\n* the vector is the plane's '''normal\
      \ vector''': a unit vector perpendicular to it. This gives the orientation of\
      \ the plane. Any one of an infinite number of parallel planes has this normal\
      \ vector.\n* the float is the distance from the plane to the origin. This picks\
      \ out one particular plane.\n\nThe Plane struct extends [[Legacy:Vector|vector]]\
      \ in [[Legacy:UnrealScript|UnrealScript]], so '''in theory''' all operations\
      \ using vectors as parameters can be used with planes as well.  In practice\
      \ it has been found that native functions like <code>dot</code> crash [[Legacy:UT2003|UT2003]]\
      \ when used with a plane &ndash; this could be a bug, but the dot function wouldn't\
      \ make much sense on planes anyway. Other such peculiarities with the use of\
      \ planes may also exist.\n\nThe plane struct can be used to describe other types\
      \ of things for which a vector + a number makes sense:\n* sphere (position vector\
      \ of the centre + radius)\n\n'''Pingz:''' We need a more technical description\
      \ maybe.  How about some examples of uses for planes and a nice graphic of one.\n\
      \n'''Wormbo:''' The <code>plane</code> struct can also be used to describe spheres,\
      \ so maybe some functions for that would be a nice addition.\n\n'''Foxpaw:'''\
      \ I'm confused. How can you specify a plane as only a distance from the origin\
      \ and a normal describing the facing of the plane? How does it know which direction\
      \ the distance from the origin is? Is the plane in these snippets required to\
      \ be facing directly away from the origin?\n\n'''Tarquin:''' the direction of\
      \ the distance from the origin will be given by the normal vector &ndash; you'll\
      \ get positive or negative. I can write some more but I'm, not sure how technical\
      \ I can get\n\n'''Foxpaw:''' So in other words the plane will always face directly\
      \ toward/directly away from the origin? Hmm, actually when I think about it\
      \ I guess every plane has to face the origin/face directly away from it at at\
      \ least one point. I guess that would work after all.\n\n==Built-In Plane Functions==\n\
      \nThere are no native plane [[Legacy:Operators|operators]] or functions in [[Legacy:UT|UT]],\
      \ [[Legacy:UT2003|UT2003]], [[Legacy:Unreal|Unreal]], or [[Legacy:Unreal 2|Unreal\
      \ 2]].\n\n==Other Useful Functions==\n\n===Plane Creation From Point And Normal\
      \ ===\n\nThis function constructs a plane from a normal vector and a point which\
      \ lies on the desired plane.  If the normal is of unit length then the resulting\
      \ plane with be normalized.\n\n<uscript>\nstatic final function plane PlaneFromPointAndNormal(\
      \ vector normal, vector point )\n{\n\tlocal plane result;\n\tresult.x\t= normal.x;\n\
      \tresult.y\t= normal.y;\n\tresult.z\t= normal.z;\n\tresult.w\t= normal dot point;\n\
      \treturn result;\t\n}\n</uscript>\n\n===Normalize Plane ===\n\nThis function\
      \ will normalize a plane which was not created from a unit normal.  This allows\
      \ for the calculation of exact distance to a point.\n\n<uscript>\nstatic final\
      \ function plane PlaneNormalize( plane p )\n{\n\tlocal float inverse_length;\n\
      \n\t// vsize(p) returns the length of the vector \n\t// part of the plane (\
      \ the normal ), i.e. it\n\t// completetly ignores the W component of \n\t//\
      \ the plane.\n\tinverse_length = 1.0f / vsize( p );\n\n    p.x *= inverse_length;\n\
      \    p.y *= inverse_length;\n    p.z *= inverse_length;\n    p.w\t*= inverse_length;\n\
      \treturn p;\n}\n</uscript>\n\n===Distance To Point ===\n\nThis will return the\
      \ distance and the side which a point lies in relation to a plane.  If the distance\
      \ is 0 the point lies exactly on the plane.  If the distance is positive the\
      \ point lies in front of the plane.  If the distance is negative the point is\
      \ behind the plane.  Note that to get the correct distance the plane must be\
      \ normalized, else only the side will be accurate.\n\n<uscript>\nstatic final\
      \ function float PlaneDistanceToPoint( plane p, vector point )\n{\n\tlocal vector\
      \ n;\n\n\t// Note:  We have to use a temp here to hold\n\t// the normal part\
      \ of the plane because calling \n\t// 'plane dot point', though the compiler\n\
      \t// allows it, actually crashes UT2K3.\n\n\tn = p;\n\treturn ( n dot point\
      \ ) - p.w;\n}\n</uscript>\n\nAnother technical note:<br />Here <code>n = p</code>\
      \ works in a similar way like assigning e.g. a [[Legacy:Pawn|Pawn]] to an [[Legacy:Actor|Actor]]\
      \ variable, except that a struct assignment copies the actual values while an\
      \ object assignment only copies references, not the objects themselves.\n\n\
      ==Related Topics ==\n* [[Legacy:Built-In Struct|Built-In Struct]]\n\n==Related\
      \ Links==\n* [[Wikipedia:Plane (mathematics)]]\n\n----\n\n'''Foxpaw:''' Nifty.\
      \ The PlaneDistancetoPoint function is exactly what I've been looking for. Been\
      \ scratching my head to try to remember that stuff from high school. :P"
  properties: []
  revId: 5972
name: "Legacy:Plane"
revision:
  revid: 5972
  parentid: 5973
  user: "Foxpaw"
  timestamp: 1061511698.000000000
  comment: "*"
timestamp: 1668775784.041614000
