---
parse:
  title: "UE1:UE1PreProcessor"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#About\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">About</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Install\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Install</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Download\"><span class=\"tocnumber\">3</span> <span\
      \ class=\"toctext\">Download</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#Usage\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Usage</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#Directives\"\
      ><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Directives</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Macros\"><span class=\"tocnumber\"\
      >4.2</span> <span class=\"toctext\">Macros</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Commandline_parameters\"><span class=\"tocnumber\"\
      >4.3</span> <span class=\"toctext\">Commandline parameters</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Project_file\"><span class=\"\
      tocnumber\">4.4</span> <span class=\"toctext\">Project file</span></a>\n<ul>\n\
      <li class=\"toclevel-3 tocsection-9\"><a href=\"#Date\"><span class=\"tocnumber\"\
      >4.4.1</span> <span class=\"toctext\">Date</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-2 tocsection-10\"><a href=\"#Example\"><span class=\"tocnumber\"\
      >4.5</span> <span class=\"toctext\">Example</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#Changelog\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Changelog</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"About\">About</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessor?section=1\" title=\"Edit section: About\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>This\
      \ is simple preprocessor for UnrealEngine 1. It was inspired by UnrealEngine\
      \ 3 build-in preprocessor.</p>\n<h2><span class=\"mw-headline\" id=\"Install\"\
      >Install</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessor?section=2\" title=\"Edit section:\
      \ Install\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Copy files in the archive to your &lt;Udir&gt;/system folder.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Download\">Download</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=3\"\
      \ title=\"Edit section: Download\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>link:</b> <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://turniej.unreal.pl/files/uenginepp.zip\">http://turniej.unreal.pl/files/uenginepp.zip</a>\
      \ (~570 kb)</p>\n<h2><span class=\"mw-headline\" id=\"Usage\">Usage</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/UE1:UE1PreProcessor?section=4\" title=\"Edit section: Usage\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<h3><span\
      \ class=\"mw-headline\" id=\"Directives\">Directives</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=5\"\
      \ title=\"Edit section: Directives\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Currently supported directives are:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"sy0\">`</span>process <span class=\"sy0\"\
      >-</span> should be in the first line of .<span class=\"me0\">uc</span> file.\
      \ <span class=\"me0\">Tells</span> preprocessor to parse file\n<span class=\"\
      sy0\">`</span>include file <span class=\"sy0\">-</span> embade file in the currently\
      \ opened .<span class=\"me0\">uc</span>\n<span class=\"sy0\">`</span>inc_process\
      \ file <span class=\"sy0\">-</span> embade file in the currently opened .<span\
      \ class=\"me0\">uc</span> and parses it\n<span class=\"sy0\">`</span>define\
      \ variable <span class=\"sy0\">-</span> defines empty variable <span class=\"\
      br0\">(</span>used in <span class=\"sy0\">`</span>ifdef and <span class=\"sy0\"\
      >`</span>ifndef directives<span class=\"br0\">)</span>\n<span class=\"sy0\"\
      >`</span>define variable<span class=\"sy0\">=</span>value <span class=\"sy0\"\
      >-</span> defines variable with specified value\n<span class=\"sy0\">`</span>write\
      \ variable <span class=\"sy0\">-</span> writes defined variable\n<span class=\"\
      sy0\">`</span>ifdef variable <span class=\"sy0\">-</span> evaluates to <span\
      \ class=\"kw6\">true</span> <span class=\"kw2\">if</span> variable is defined\n\
      <span class=\"sy0\">`</span>ifndef variable <span class=\"sy0\">-</span> evaluates\
      \ to <span class=\"kw6\">true</span> <span class=\"kw2\">if</span> variable\
      \ is not defined\n<span class=\"sy0\">`</span><span class=\"kw2\">else</span>\
      \  <span class=\"sy0\">-</span> part of conditional statement\n<span class=\"\
      sy0\">`</span>endif <span class=\"sy0\">-</span> ends conditional statement\n\
      <span class=\"sy0\">`</span>check definition<span class=\"sy0\">==</span>value\
      \ <span class=\"sy0\">-</span> evaluates to <span class=\"kw6\">true</span>\
      \ <span class=\"kw2\">if</span> defined variable <span class=\"br0\">(</span>definition<span\
      \ class=\"br0\">)</span> equals value. <span class=\"me0\">Used</span> in strings,\
      \ floats, integers.\n<span class=\"sy0\">`</span>check definition<span class=\"\
      sy0\">&lt;&gt;</span>value <span class=\"sy0\">-</span> evaluates to <span class=\"\
      kw6\">true</span> <span class=\"kw2\">if</span> defined variable <span class=\"\
      br0\">(</span>definition<span class=\"br0\">)</span> does not match value. <span\
      \ class=\"me0\">Used</span> in strings, floats, integers.\n<span class=\"sy0\"\
      >`</span>check definition<span class=\"sy0\">&gt;</span>value <span class=\"\
      sy0\">-</span> evaluates to <span class=\"kw6\">true</span> <span class=\"kw2\"\
      >if</span> defined variable <span class=\"br0\">(</span>definition<span class=\"\
      br0\">)</span> is greater then value. <span class=\"me0\">Used</span> in floats,\
      \ integers.\n<span class=\"sy0\">`</span>check definition<span class=\"sy0\"\
      >&lt;</span>value <span class=\"sy0\">-</span> evaluates to <span class=\"kw6\"\
      >true</span> <span class=\"kw2\">if</span> defined variable <span class=\"br0\"\
      >(</span>definition<span class=\"br0\">)</span> is less then value. <span class=\"\
      me0\">Used</span> in floats, integers.</pre></div>\n</div>\n<h3><span class=\"\
      mw-headline\" id=\"Macros\">Macros</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=6\"\
      \ title=\"Edit section: Macros\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Macros are in fact hardcoded constants. Each macro\
      \ will write something in currently parsed .uc file. Currently supported macros\
      \ are:</p>\n<p>__FILE__ - will write name of currently parsed file<br />\n__CLASS__\
      \ - will write name of currently parsed class<br />\n__DATE__ - will write time<br\
      \ /></p>\n<h3><span class=\"mw-headline\" id=\"Commandline_parameters\">Commandline\
      \ parameters</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/UE1:UE1PreProcessor?section=7\" title=\"Edit section:\
      \ Commandline parameters\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>You can use <b>uenginepp</b> by typing in console following command:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">uenginepp <span class=\"sy0\">&lt;</span>project_dir<span\
      \ class=\"sy0\">&gt;/&lt;</span>project_file<span class=\"sy0\">&gt;</span>\
      \ <span class=\"sy0\">&lt;</span>modifiers<span class=\"sy0\">&gt;</span></pre></div>\n\
      </div>\n<p>where:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">&lt;</span>project_dir<span class=\"sy0\">&gt;</span> <span class=\"sy0\"\
      >-</span> relative project directory.\n<span class=\"sy0\">&lt;</span>project_file<span\
      \ class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> file <span class=\"\
      br0\">(</span>.<span class=\"me0\">upc</span> extension<span class=\"br0\">)</span>\
      \ conaining all options. <span class=\"kw2\">If</span> file is detected, no\
      \ fuhrer modifiers are checked.</pre></div>\n</div>\n<p><br />\nmodifiers:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">-</span>clean <span\
      \ class=\"sy0\">-</span> deletes preprocessor directives from .<span class=\"\
      me0\">uc</span> file\n<span class=\"sy0\">-</span>debug <span class=\"sy0\"\
      >-</span> turns on debug mode <span class=\"br0\">(</span>prints every operation\
      \ on parsed .<span class=\"me0\">uc</span> file<span class=\"br0\">)</span>\n\
      <span class=\"sy0\">-</span>make <span class=\"sy0\">&lt;</span>ini file<span\
      \ class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span> runs ucc.<span class=\"\
      me0\">exe</span> with specified ini\n<span class=\"sy0\">-</span>h <span class=\"\
      sy0\">-</span> prints help\n<span class=\"sy0\">-</span>global someglobal<span\
      \ class=\"sy0\">=</span>somevalue <span class=\"sy0\">-</span> defines global\
      \ variable\n<span class=\"sy0\">-</span>printglobals <span class=\"sy0\">-</span>\
      \ show defined global variables</pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Project_file\">Project file</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=8\"\
      \ title=\"Edit section: Project file\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Project file must have upc extension, and 'path' must\
      \ be relative to uenginepp.exe location. Default location to files with preprocessor\
      \ headers is:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      sy0\">&lt;</span>project_folder<span class=\"sy0\">&gt;/</span>classes_ucp</pre></div>\n\
      </div>\n<p>parsed .uc files will be stored in:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"sy0\">&lt;</span>project_folder<span class=\"\
      sy0\">&gt;/</span>classes</pre></div>\n</div>\n<p>Here's all commands for project\
      \ file.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"br0\"\
      >[</span>project<span class=\"br0\">]</span>                 <span class=\"\
      sy0\">-</span> project informations\npath<span class=\"sy0\">=</span>path  \
      \               <span class=\"sy0\">-</span> path to project\ndebug<span class=\"\
      sy0\">=</span><span class=\"kw6\">true</span>                <span class=\"\
      sy0\">-</span> turns on debug mode <span class=\"br0\">(</span>prints every\
      \ operation on parsed .<span class=\"me0\">uc</span><span class=\"br0\">)</span>\n\
      make<span class=\"sy0\">=</span><span class=\"kw6\">true</span>            \
      \     <span class=\"sy0\">-</span> <span class=\"kw2\">if</span> <span class=\"\
      kw6\">true</span>, ucc will be executed\nmake_ini<span class=\"sy0\">=</span>ini_file.<span\
      \ class=\"me0\">ini</span>     <span class=\"sy0\">-</span> <span class=\"kw2\"\
      >if</span> present runs ucc.<span class=\"me0\">exe</span> with specified ini\n\
      clean<span class=\"sy0\">=</span><span class=\"kw6\">true</span>           \
      \     <span class=\"sy0\">-</span> <span class=\"kw2\">if</span> <span class=\"\
      kw6\">true</span> will delete preprocessor directives\noutput<span class=\"\
      sy0\">=</span>folder             <span class=\"sy0\">-</span> override <span\
      \ class=\"kw1\">default</span> output folder where parsed .<span class=\"me0\"\
      >uc</span> files are written\ninput<span class=\"sy0\">=</span>folder      \
      \        <span class=\"sy0\">-</span> override <span class=\"kw1\">default</span>\
      \ input folder where parsed .<span class=\"me0\">uc</span> files are stored\n\
      printglobals<span class=\"sy0\">=</span><span class=\"kw6\">true</span>    \
      \     <span class=\"sy0\">-</span> show defined global variables\ndateformat<span\
      \ class=\"sy0\">=</span>m.<span class=\"me0\">d</span>.<span class=\"me0\">y</span>\
      \          <span class=\"sy0\">-</span> date format <span class=\"br0\">(</span>look\
      \ below <span class=\"kw2\">for</span> all examples<span class=\"br0\">)</span>\n\
      \ \n<span class=\"br0\">[</span>globals<span class=\"br0\">]</span>        \
      \         <span class=\"sy0\">-</span> group contatin global variables <span\
      \ class=\"kw2\">for</span> whole project\nsomeglobal<span class=\"sy0\">=</span>somevalue\
      \      <span class=\"sy0\">-</span> global variable <span class=\"br0\">(</span>sample<span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p>example:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"br0\">[</span>project<span class=\"br0\"\
      >]</span>\npath<span class=\"sy0\">=</span>..<span class=\"sy0\">/</span>MyProject<span\
      \ class=\"sy0\">/</span>\ndebug<span class=\"sy0\">=</span><span class=\"kw6\"\
      >true</span>\nmake<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      make_ini<span class=\"sy0\">=</span>make.<span class=\"me0\">ini</span>\nclean<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>\noutput<span class=\"\
      sy0\">=</span>classes\ninput<span class=\"sy0\">=</span>classes_ucp\nprintglobals<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>\ndateformat<span class=\"\
      sy0\">=</span>m.<span class=\"me0\">d</span>.<span class=\"me0\">y</span>\n\
      \ \n<span class=\"br0\">[</span>globals<span class=\"br0\">]</span>\nglobal_value1<span\
      \ class=\"sy0\">=</span>test1\nglobal_value2<span class=\"sy0\">=</span>test2</pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Date\">Date</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=9\"\
      \ title=\"Edit section: Date\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>You can use following date formats:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// Assuming today is: February 12th,\
      \ 2008, 19:16:18</span>\nF j, Y, g:i a                   <span class=\"sy0\"\
      >-</span> February 12th, <span class=\"nu0\">2008</span>, <span class=\"nu0\"\
      >7</span>:<span class=\"nu0\">16</span> pm\nm.<span class=\"me0\">d</span>.<span\
      \ class=\"me0\">y</span>                           <span class=\"sy0\">-</span>\
      \ 01.12.08\nm<span class=\"sy0\">-</span>d<span class=\"sy0\">-</span>y, H:i:s\
      \                    <span class=\"sy0\">-</span> 01<span class=\"sy0\">-</span><span\
      \ class=\"nu0\">12</span><span class=\"sy0\">-</span>08, <span class=\"nu0\"\
      >17</span>:<span class=\"nu0\">16</span>:<span class=\"nu0\">17</span>\nj, n,\
      \ Y                         <span class=\"sy0\">-</span> <span class=\"nu0\"\
      >12</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2008</span>\n\
      D M j G:i:s T Y                 <span class=\"sy0\">-</span> Sat Feb <span class=\"\
      nu0\">12</span> <span class=\"nu0\">19</span>:<span class=\"nu0\">16</span>:08\
      \ MST <span class=\"nu0\">2008</span>\nH:i:s                           <span\
      \ class=\"sy0\">-</span> <span class=\"nu0\">17</span>:<span class=\"nu0\">16</span>:<span\
      \ class=\"nu0\">17</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"Example\">Example</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=10\"\
      \ title=\"Edit section: Example\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Let's say you have project file in &lt;UDir&gt;/system\
      \ called RUI.upc with content:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"br0\">[</span>project<span class=\"br0\">]</span>\npath<span\
      \ class=\"sy0\">=</span>..<span class=\"sy0\">/</span>RComputerUI<span class=\"\
      sy0\">/</span>\ndebug<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      make<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\nmake_ini<span\
      \ class=\"sy0\">=</span>make.<span class=\"me0\">ini</span>\nclean<span class=\"\
      sy0\">=</span><span class=\"kw6\">true</span>\noutput<span class=\"sy0\">=</span>classes\n\
      input<span class=\"sy0\">=</span>classes_ucp</pre></div>\n</div>\n<p>whe you'll\
      \ call uenginepp.exe RUI.upc parser will process all files in classes_ucp, and\
      \ generates output code in classes, which will be striped out (or not) from\
      \ preprocessor directives. Let's say you have class:</p>\n<p><br /></p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"sy0\">`</span>process\n\
      <span class=\"sy0\">`</span>define int1<span class=\"sy0\">=</span><span class=\"\
      nu0\">120</span>\n<span class=\"sy0\">`</span>define int2<span class=\"sy0\"\
      >=</span><span class=\"nu0\">123</span>\n<span class=\"sy0\">`</span>define\
      \ nc<span class=\"sy0\">=</span><span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> class<span class=\"sy0\">&lt;</span>actor<span\
      \ class=\"sy0\">&gt;</span> NewActor;\n<span class=\"kw1\">class</span> PreProcessorTest\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Actor</span>;\n \n\
      <span class=\"sy0\">`</span>check int1<span class=\"sy0\">&gt;</span>int2\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">int</span> test1;\n<span class=\"sy0\">`</span><span\
      \ class=\"kw2\">else</span>\n<span class=\"kw1\">var</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span> <span class=\"kw5\">int</span> test2;\n\
      <span class=\"sy0\">`</span>write nc\n<span class=\"sy0\">`</span>endif</pre></div>\n\
      </div>\n<p>You run preprocessor and:</p>\n<ol>\n<li>directive `process is found,\
      \ so preprocessor knows that this class has to be parsed.</li>\n<li>directive\
      \ `define is found. Preprocessor assign to const int1 value 120</li>\n<li>directive\
      \ `define is found. Preprocessor assign to const int1 value 123</li>\n<li>directive\
      \ `define is found. Preprocessor assign to const nc value var() class&lt;actor&gt;\
      \ NewActor;</li>\n<li>it detects `check directive and compare int1 and int2.\
      \ because int1 is smaller then int2, expression evaluates to false and all next\
      \ lines are skipped and deleted</li>\n<li>it detects `else directive. preprocessor\
      \ stops deleting lines and searches for next directives</li>\n<li>var() int\
      \ test2; is not detected as directive so it's left alone</li>\n<li>directive\
      \ `write is detected. preprocessor searches for variable named nc and (if found)\
      \ writes it in .uc file</li>\n<li>directive `endif stops conditional expression</li>\n\
      </ol>\n<p>output .uc file in classes will look like:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> PreProcessorTest <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Actor</span>;\n \n<span class=\"kw1\"\
      >var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      kw5\">int</span> test2;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> class<span class=\"sy0\">&lt;</span>actor<span class=\"\
      sy0\">&gt;</span> NewActor;</pre></div>\n</div>\n<p>Same output code with <b>clean</b>\
      \ turned off:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//`#process</span>\n<span class=\"co1\">//`#define int1=120</span>\n<span\
      \ class=\"co1\">//`#define int2=123</span>\n<span class=\"co1\">//`#define nc=var()\
      \ class&lt;actor&gt; NewActor;</span>\n<span class=\"kw1\">class</span> PreProcessorTest\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Actor</span>;\n \n\
      <span class=\"co1\">//`#check int1&gt;int2</span>\n<span class=\"co1\">//`#var()\
      \ int test1;</span>\n<span class=\"co1\">//`#else</span>\n<span class=\"kw1\"\
      >var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      kw5\">int</span> test2;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> class<span class=\"sy0\">&lt;</span>actor<span class=\"\
      sy0\">&gt;</span> NewActor; <span class=\"co1\">//`#write nc</span>\n<span class=\"\
      co1\">//`#endif</span></pre></div>\n</div>\n<p>Of course input file can look\
      \ different, but most important thing is to write <b>`process</b> in first line.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Changelog\">Changelog</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/UE1:UE1PreProcessor?section=11\"\
      \ title=\"Edit section: Changelog\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><b>v 0.1.2</b>\n<ul>\n<li>added new macros</li>\n\
      </ul>\n</li>\n<li><b>v 0.1.1</b>\n<ul>\n<li>fixed parser</li>\n</ul>\n</li>\n\
      <li><b>v 0.1.2</b>\n<ul>\n<li>initial release</li>\n</ul>\n</li>\n</ul>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.244 seconds\nReal time usage: 0.764\
      \ seconds\nPreprocessor visited node count: 160/1000000\nPreprocessor generated\
      \ node count: 308/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:23749-0!*!*!!en!*!* and timestamp 20221207102135 and revision\
      \ id 32920\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks:
  - "http://turniej.unreal.pl/files/uenginepp.zip"
  sections:
  - toclevel: 1
    level: "2"
    line: "About"
    number: "1"
    index: "1"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 8
    anchor: "About"
  - toclevel: 1
    level: "2"
    line: "Install"
    number: "2"
    index: "2"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 124
    anchor: "Install"
  - toclevel: 1
    level: "2"
    line: "Download"
    number: "3"
    index: "3"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 193
    anchor: "Download"
  - toclevel: 1
    level: "2"
    line: "Usage"
    number: "4"
    index: "4"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 274
    anchor: "Usage"
  - toclevel: 2
    level: "3"
    line: "Directives"
    number: "4.1"
    index: "5"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 285
    anchor: "Directives"
  - toclevel: 2
    level: "3"
    line: "Macros"
    number: "4.2"
    index: "6"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 1470
    anchor: "Macros"
  - toclevel: 2
    level: "3"
    line: "Commandline parameters"
    number: "4.3"
    index: "7"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 1764
    anchor: "Commandline_parameters"
  - toclevel: 2
    level: "3"
    line: "Project file"
    number: "4.4"
    index: "8"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 2453
    anchor: "Project_file"
  - toclevel: 3
    level: "4"
    line: "Date"
    number: "4.4.1"
    index: "9"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 3868
    anchor: "Date"
  - toclevel: 2
    level: "3"
    line: "Example"
    number: "4.5"
    index: "10"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 4301
    anchor: "Example"
  - toclevel: 1
    level: "2"
    line: "Changelog"
    number: "5"
    index: "11"
    fromtitle: "UE1:UE1PreProcessor"
    byteoffset: 6380
    anchor: "Changelog"
  displaytitle: "UE1:UE1PreProcessor"
  iwlinks: []
  wikitext:
    text: "__TOC__\n==About==\nThis is simple preprocessor for UnrealEngine 1. It\
      \ was inspired by UnrealEngine 3 build-in preprocessor.\n\n==Install==\nCopy\
      \ files in the archive to your <Udir>/system folder.\n\n==Download==\n'''link:'''\
      \ http://turniej.unreal.pl/files/uenginepp.zip (~570 kb)\n\n==Usage==\n\n===Directives===\n\
      Currently supported directives are:\n\n<uscript>`process - should be in the\
      \ first line of .uc file. Tells preprocessor to parse file\n`include file -\
      \ embade file in the currently opened .uc\n`inc_process file - embade file in\
      \ the currently opened .uc and parses it\n`define variable - defines empty variable\
      \ (used in `ifdef and `ifndef directives)\n`define variable=value - defines\
      \ variable with specified value\n`write variable - writes defined variable\n\
      `ifdef variable - evaluates to true if variable is defined\n`ifndef variable\
      \ - evaluates to true if variable is not defined\n`else  - part of conditional\
      \ statement\n`endif - ends conditional statement\n`check definition==value -\
      \ evaluates to true if defined variable (definition) equals value. Used in strings,\
      \ floats, integers.\n`check definition<>value - evaluates to true if defined\
      \ variable (definition) does not match value. Used in strings, floats, integers.\n\
      `check definition>value - evaluates to true if defined variable (definition)\
      \ is greater then value. Used in floats, integers.\n`check definition<value\
      \ - evaluates to true if defined variable (definition) is less then value. Used\
      \ in floats, integers.</uscript>\n\n===Macros===\nMacros are in fact hardcoded\
      \ constants. Each macro will write something in currently parsed .uc file. Currently\
      \ supported macros are:\n\n__FILE__ - will write name of currently parsed file<br>\n\
      __CLASS__ - will write name of currently parsed class<br>\n__DATE__ - will write\
      \ time<br>\n\n===Commandline parameters===\nYou can use '''uenginepp''' by typing\
      \ in console following command:\n\n<uscript>uenginepp <project_dir>/<project_file>\
      \ <modifiers></uscript>\n\n\twhere:\n\n<uscript><project_dir> - relative project\
      \ directory.\n<project_file> - file (.upc extension) conaining all options.\
      \ If file is detected, no fuhrer modifiers are checked.</uscript>\n\n\n\tmodifiers:\n\
      \n<uscript>-clean - deletes preprocessor directives from .uc file\n-debug -\
      \ turns on debug mode (prints every operation on parsed .uc file)\n-make <ini\
      \ file> - runs ucc.exe with specified ini\n-h - prints help\n-global someglobal=somevalue\
      \ - defines global variable\n-printglobals - show defined global variables</uscript>\n\
      \n===Project file===\nProject file must have upc extension, and 'path' must\
      \ be relative to uenginepp.exe location. Default location to files with preprocessor\
      \ headers is:\n\n<uscript><project_folder>/classes_ucp</uscript>\n\nparsed .uc\
      \ files will be stored in:\n\n<uscript><project_folder>/classes</uscript>\n\n\
      Here's all commands for project file.\n\n<uscript>[project]                \
      \ - project informations\npath=path                 - path to project\ndebug=true\
      \                - turns on debug mode (prints every operation on parsed .uc)\n\
      make=true                 - if true, ucc will be executed\nmake_ini=ini_file.ini\
      \     - if present runs ucc.exe with specified ini\nclean=true             \
      \   - if true will delete preprocessor directives\noutput=folder           \
      \  - override default output folder where parsed .uc files are written\ninput=folder\
      \              - override default input folder where parsed .uc files are stored\n\
      printglobals=true         - show defined global variables\ndateformat=m.d.y\
      \          - date format (look below for all examples)\n\n[globals]        \
      \         - group contatin global variables for whole project\nsomeglobal=somevalue\
      \      - global variable (sample)</uscript>\n\nexample:\n\n<uscript>\n[project]\n\
      path=../MyProject/\ndebug=true\nmake=true\nmake_ini=make.ini\nclean=true\noutput=classes\n\
      input=classes_ucp\nprintglobals=true\ndateformat=m.d.y\n\n[globals]\nglobal_value1=test1\n\
      global_value2=test2</uscript>\n\n====Date====\nYou can use following date formats:\n\
      \n<uscript>// Assuming today is: February 12th, 2008, 19:16:18\nF j, Y, g:i\
      \ a                   - February 12th, 2008, 7:16 pm\nm.d.y                \
      \           - 01.12.08\nm-d-y, H:i:s                    - 01-12-08, 17:16:17\n\
      j, n, Y                         - 12, 1, 2008\nD M j G:i:s T Y             \
      \    - Sat Feb 12 19:16:08 MST 2008\nH:i:s                           - 17:16:17</uscript>\n\
      \n===Example===\n\nLet's say you have project file in <UDir>/system called RUI.upc\
      \ with content:\n\n<uscript>[project]\npath=../RComputerUI/\ndebug=true\nmake=true\n\
      make_ini=make.ini\nclean=true\noutput=classes\ninput=classes_ucp</uscript>\n\
      \nwhe you'll call uenginepp.exe RUI.upc parser will process all files in classes_ucp,\
      \ and generates output code in classes, which will be striped out (or not) from\
      \ preprocessor directives. Let's say you have class:\n\n\n<uscript>`process\n\
      `define int1=120\n`define int2=123\n`define nc=var() class<actor> NewActor;\n\
      class PreProcessorTest extends Actor;\n\n`check int1>int2\nvar() int test1;\n\
      `else\nvar() int test2;\n`write nc\n`endif</uscript>\n\nYou run preprocessor\
      \ and:\n\n#directive `process  is found, so preprocessor knows that this class\
      \ has to be parsed.\n#directive `define is found. Preprocessor assign to const\
      \ int1 value 120\n#directive `define is found. Preprocessor assign to const\
      \ int1 value 123\n#directive `define is found. Preprocessor assign to const\
      \ nc value var() class<actor> NewActor;\n#it detects `check directive and compare\
      \ int1 and int2. because int1 is smaller then int2, expression evaluates to\
      \ false and all next lines are skipped and deleted\n#it detects `else directive.\
      \ preprocessor stops deleting lines and searches for next directives\n#var()\
      \ int test2; is not detected as directive so it's left alone\n#directive `write\
      \ is detected. preprocessor searches for variable named nc and (if found) writes\
      \ it in .uc file\n#directive `endif stops conditional expression\n\noutput .uc\
      \ file in classes will look like:\n\n<uscript>class PreProcessorTest extends\
      \ Actor;\n\nvar() int test2;\nvar() class<actor> NewActor;</uscript>\n\nSame\
      \ output code with '''clean''' turned off:\n\n<uscript>//`#process\n//`#define\
      \ int1=120\n//`#define int2=123\n//`#define nc=var() class<actor> NewActor;\n\
      class PreProcessorTest extends Actor;\n\n//`#check int1>int2\n//`#var() int\
      \ test1;\n//`#else\nvar() int test2;\nvar() class<actor> NewActor; //`#write\
      \ nc\n//`#endif</uscript>\n\nOf course input file can look different, but most\
      \ important thing is to write '''`process''' in first line.\n\n==Changelog==\n\
      *'''v 0.1.2'''\n**added new macros\n*'''v 0.1.1'''\n**fixed parser\n*'''v 0.1.2'''\n\
      **initial release"
  properties: []
  revId: 32920
name: "UE1:UE1PreProcessor"
revision:
  revid: 32920
  parentid: 32919
  user: "Raven"
  timestamp: 1219855804.000000000
  comment: "/* Macros */"
timestamp: 1670408496.890351000
