---
parse:
  title: "String"
  text:
    text: "<p>UnrealScript has a character string data type called <b>string</b>.\
      \ Strings can contain any combination of <a href=\"http://en.wikipedia.org/wiki/Unicode\"\
      \ class=\"extiw\" title=\"wp:Unicode\">Unicode</a> characters. Note that the\
      \ internal representation uses UTF-16 characters. UTF-8 is not recognized by\
      \ the compiler or any of the built-in string operations.</p>\n<p>String values\
      \ are immutable and UnrealScript neither provides \"character\" type nor allows\
      \ direct access to individual string characters. There are, however, functions\
      \ for extracting substrings and returning the Unicode value of the first character\
      \ of a string. There's also a function for returning a string of length 1 containing\
      \ a character corresponding to a specified Unicode value.</p>\n<p>Very early\
      \ builds of <a href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"\
      Unreal Engine 1 (page does not exist)\">Unreal Engine 1</a> had a fixed-length\
      \ string type, which was declared with the syntax <code>string[<i>length</i>]</code>.\
      \ This type is no longer supported and only mentioned here in case you run into\
      \ its declaration in old code snippets.</p>\n<p>In <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> (or at least <a href=\"/UT2004\" title=\"UT2004\" class=\"mw-redirect\"\
      >UT2004</a>) there also is an undocumented type called <b>button</b> that is\
      \ an alias for the standard string type, but implies the <a href=\"/Cache\"\
      \ title=\"Cache\" class=\"mw-redirect\">Cache</a> variable modifier. It is not\
      \ actually used in stock code and there's no reason for you to ever declare\
      \ a variable with the <i>cache</i> modifier, so this is purely informative.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Literals\">Literals</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/String?section=1\"\
      \ title=\"Edit section: Literals\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>String literals start and end with double quotes.\
      \ Between these there may be any number of characters, except line breaks or\
      \ the null character. To include a double quote or backslash character in the\
      \ string, it must be \"escaped\" by a(nother) backslash character. Starting\
      \ with Unreal Engine 3, strings can also contain other escape sequences, such\
      \ as \\n for a newline character. In Unreal Engine 1 and 2 escaped letters only\
      \ stand for themselves, i.e. the string \"\\n\" is absolutely equal to the string\
      \ \"n\" there.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>\"abc\"</code></dd>\n\
      <dd><code>\"This is an \\\"example\\\".\"</code></dd>\n<dd><code><code>\"\"\
      </code> (the empty string and default string value)</code></dd>\n</dl>\n<p>Technically\
      \ string literals are allowed to have a length of up to 1023 characters. String\
      \ values generated at runtime may be longer. Internally strings are zero-terminated,\
      \ which means no string can contain the null character because it would be recognized\
      \ as the end of the string.</p>\n<h2><span class=\"mw-headline\" id=\"String_operators\"\
      >String operators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/String?section=2\" title=\"Edit section: String operators\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ following <a href=\"/Operators\" title=\"Operators\">operators</a> are commonly\
      \ declared in the <a href=\"/Object\" title=\"Object\">Object</a><sup>(<span><a\
      \ href=\"/UE1:Object_(RTNP)\" title=\"UE1:Object (RTNP)\">RTNP</a></span>, <span><a\
      \ href=\"/UE1:Object_(U1)\" title=\"UE1:Object (U1)\">U1</a></span>, <span><a\
      \ href=\"/UE1:Object_(UT)\" title=\"UE1:Object (UT)\">UT</a></span>, <span><a\
      \ href=\"/UE2:Object_(U2)\" title=\"UE2:Object (U2)\">U2</a></span>, <span><a\
      \ href=\"/UE2:Object_(U2XMP)\" title=\"UE2:Object (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:Object_(UE2Runtime)\" title=\"UE2:Object (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:Object_(UT2003)\" title=\"UE2:Object\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:Object_(UT2004)\" title=\"\
      UE2:Object (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:Object_(UDK)\"\
      \ title=\"UE3:Object (UDK)\">UDK</a></span>, <span><a href=\"/UE3:Object_(UT3)\"\
      \ title=\"UE3:Object (UT3)\">UT3</a></span>)</sup> class and thus are available\
      \ globally:</p>\n<dl>\n<dt><code>==</code></dt>\n<dd>Case-sensitive equality\
      \ comparison. Returns <i>true</i> <a href=\"http://en.wikipedia.org/wiki/iff\"\
      \ class=\"extiw\" title=\"wp:iff\">iff</a> the string expression on the left\
      \ and right are identical.</dd>\n<dt><code>~=</code></dt>\n<dd>Case-insensitive\
      \ equality comparison. Returns <i>true</i> iff the string expression on the\
      \ left and right are identical, ignoring any differences in the case of the\
      \ letters A-Z. Note that non-ASCII characters will be matched case-sensitively,\
      \ i.e. <code>\"a\" ~= \"A\"</code> is <i>true</i>, but <code>\"Ä\" ~= \"ä\"\
      </code> is <i>false</i>.</dd>\n<dt><code>&lt;</code></dt>\n<dd>Case-sensitive\
      \ lexicographical comparison. Returns <i>true</i> iff the string expression\
      \ on the left comes lexicographically before the string expression on the right.</dd>\n\
      <dt><code>&gt;</code></dt>\n<dd>Case-sensitive lexicographical comparison. Returns\
      \ <i>true</i> iff the string expression on the left comes lexicographically\
      \ after the string expression on the right.</dd>\n<dt><code>&lt;=</code></dt>\n\
      <dd>Case-sensitive lexicographical comparison. Returns <i>false</i> iff the\
      \ string expression on the left comes lexicographically after the string expression\
      \ on the right.</dd>\n<dt><code>&gt;=</code></dt>\n<dd>Case-sensitive lexicographical\
      \ comparison. Returns <i>false</i> iff the string expression on the left comes\
      \ lexicographically before the string expression on the right.</dd>\n<dt><code>!=</code></dt>\n\
      <dd>Case-sensitive inequality comparison. Returns <i>false</i> iff the string\
      \ expression on the left and right are identical.</dd>\n<dt><code>$</code></dt>\n\
      <dd>String concatenation. <code>\"abc\" $ \"def\"</code> evaluates to the value\
      \ <code>\"abcdef\"</code> at runtime. Note that the UnrealScript compiler will\
      \ not optimize this kind of expression. This operator will \"<a href=\"/Coerce\"\
      \ title=\"Coerce\" class=\"mw-redirect\">coerce</a>\" (i.e. automatically typecast)\
      \ its operands to type string.</dd>\n<dt><code>@</code></dt>\n<dd>Spaced string\
      \ concatenation. The expression <code>a @ b</code> essentially corresponds to\
      \ <code>a $ \" \" $ b</code>, except that it is slightly more efficient. Still\
      \ you may want to limit its use to concatinating two non-literal expressions,\
      \ as <code>\"abc \" $ d</code> is slightly more efficient than <code>\"abc\"\
      \ @ d</code>. This operator will \"coerce\" (i.e. automatically typecast) its\
      \ operands to type string.</dd>\n<dt><code>$=</code><sup>2+</sup></dt>\n<dd>Combined\
      \ concatenation and assignment. Left operand must be an assignable expression,\
      \ i.e. a variable, struct member or array element. This operator will \"coerce\"\
      \ (i.e. automatically typecast) the right operand to type string.</dd>\n<dt><code>@=</code><sup>2+</sup></dt>\n\
      <dd>Combined spaced concatenation and assignment. Left operand must be an assignable\
      \ expression, i.e. a variable, struct member or array element. Like for the\
      \ <code>@</code> operator, <code>foo $= \" bar\"</code> is slightly more efficient\
      \ than <code>foo @= \"bar\"</code>. This operator will \"coerce\" (i.e. automatically\
      \ typecast) the right operand to type string.</dd>\n<dt><code>-=</code><sup>2+</sup></dt>\n\
      <dd>Substring removal. This operator will remove all substrings from the variable,\
      \ struct member or array element on the left side that match the string expression\
      \ on the right side case-sensitively. <code>foo -= \"an\"</code> will turn the\
      \ string \"B<u>anan</u>a An<u>an</u>as\" into \"Ba Anas\". This operator will\
      \ \"coerce\" (i.e. automatically typecast) the right operand to type string.\
      \ Note that there is no operator <code>-</code> for strings. <code>a -= b;</code>\
      \ is essentially the same as <code>a = Repl(a, b, \"\", False);</code>.</dd>\n\
      <dt><code>=</code></dt>\n<dd>The build in assignment operator. Assigns the string\
      \ value of the right side operand to the variable, struct member or array element\
      \ represented by the left operand. Note that this operator does <i>not</i> \"\
      coerce\" any operands and unlike the combined operators also does not return\
      \ any value.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Global_string_functions\"\
      >Global string functions</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/String?section=3\" title=\"\
      Edit section: Global string functions\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The following <a href=\"/Static_functions\" title=\"\
      Static functions\" class=\"mw-redirect\">static</a> string functions are commonly\
      \ declared in the <a href=\"/Object\" title=\"Object\">Object</a><sup>(<span><a\
      \ href=\"/UE1:Object_(RTNP)\" title=\"UE1:Object (RTNP)\">RTNP</a></span>, <span><a\
      \ href=\"/UE1:Object_(U1)\" title=\"UE1:Object (U1)\">U1</a></span>, <span><a\
      \ href=\"/UE1:Object_(UT)\" title=\"UE1:Object (UT)\">UT</a></span>, <span><a\
      \ href=\"/UE2:Object_(U2)\" title=\"UE2:Object (U2)\">U2</a></span>, <span><a\
      \ href=\"/UE2:Object_(U2XMP)\" title=\"UE2:Object (U2XMP)\">U2XMP</a></span>,\
      \ <span><a href=\"/UE2:Object_(UE2Runtime)\" title=\"UE2:Object (UE2Runtime)\"\
      >UE2Runtime</a></span>, <span><a href=\"/UE2:Object_(UT2003)\" title=\"UE2:Object\
      \ (UT2003)\">UT2003</a></span>, <span><a href=\"/UE2:Object_(UT2004)\" title=\"\
      UE2:Object (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:Object_(UDK)\"\
      \ title=\"UE3:Object (UDK)\">UDK</a></span>, <span><a href=\"/UE3:Object_(UT3)\"\
      \ title=\"UE3:Object (UT3)\">UT3</a></span>)</sup> class and thus are available\
      \ globally:</p>\n<dl>\n<dt><code>int Len(coerce string S)</code></dt>\n<dd>Returns\
      \ the number of characters in the specified string value.</dd>\n<dt><code>int\
      \ InStr(coerce string S, coerce string T)</code></dt>\n<dd>Locates the first\
      \ case-sensitive match of <i>T</i> in <i>S</i> and returns its zero-based start\
      \ position. Returns -1 if <i>T</i> cannot be found in <i>S</i>.</dd>\n<dt><code>string\
      \ Mid(coerce string S, int start, optional int length)</code></dt>\n<dd>Returns\
      \ the substring of <i>S</i> starting at position <i>start</i>, including up\
      \ to <i>length</i> characters. If <i>length</i> is omitted, all characters up\
      \ to the end of the string are returned.</dd>\n<dt><code>string Left(coerce\
      \ string S, int i)</code></dt>\n<dd>Returns the first <i>i</i> (i.e. left-most)\
      \ characters from <i>S</i>.</dd>\n<dt><code>string Right(coerce string S, int\
      \ i)</code></dt>\n<dd>Returns the last <i>i</i> (i.e. right-most) characters\
      \ from <i>S</i>.</dd>\n<dt><code>string Caps(coerce string S)</code></dt>\n\
      <dd>Returns <i>S</i> with all lowercase ASCII letters (a-z) converted to their\
      \ uppercase forms (A-Z).</dd>\n<dt><code>string Locs(coerce string S)</code><sup>2+</sup></dt>\n\
      <dd>Returns <i>S</i> with all uppercase ASCII letters (A-Z) converted to their\
      \ lowercase forms (a-z).</dd>\n<dt><code>string Chr(int i)</code></dt>\n<dd>Returns\
      \ a string of length 1 containing the Unicode character with the specified character\
      \ code. Note that the empty string will be returned when specifying 0 as code.</dd>\n\
      <dt><code>int Asc(string S)</code></dt>\n<dd>Returns the Unicode character code\
      \ of the first character in <i>S</i>. This function will return 0 for the empty\
      \ string. Note that unlike most other global string function, <i>Asc</i> does\
      \ not \"<a href=\"/Coerce\" title=\"Coerce\" class=\"mw-redirect\">coerce</a>\"\
      \ (auto-convert) its parameter to type string.</dd>\n<dt><code>string Repl(coerce\
      \ string Src, coerce string Match, coerce string With, optional bool bCaseSensitive)</code><sup>2+</sup></dt>\n\
      <dd>Replaces every occurrence of <i>Match</i> in <i>Src</i> with <i>With</i>\
      \ using case-sensitive or case-insensitive (this is the default) matching.</dd>\n\
      </dl>\n<table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <strong class=\"selflink\">string</strong>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n</tr>\n\
      <tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"\
      /Literals\" title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.190 seconds\nReal time usage: 0.332 seconds\nPreprocessor\
      \ visited node count: 239/1000000\nPreprocessor generated node count: 1135/1000000\n\
      Post‐expand include size: 12258/2097152 bytes\nTemplate argument size: 4243/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 1/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  219.589      1 - -total\n 83.95%  184.341      2 - Template:Classgames\n\
      \ 15.68%   34.436      1 - Template:Navbox_unrealscript\n  9.60%   21.087  \
      \    1 - Template:Navbox\n  3.39%    7.452      2 - Template:Extension_DPL\n\
      \  1.79%    3.940      1 - Template:Tnavbar\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:5092-0!*!*!*!*!*!* and timestamp 20221117221514\
      \ and revision id 46203\n -->\n"
  categories:
  - sortkey: "String"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 106
    exists: true
    name: "UE3:Object (UDK)"
  - ns: 102
    exists: true
    name: "UE1:Object (UT)"
  - ns: 102
    exists: true
    name: "UE1:Object (U1)"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 104
    exists: true
    name: "UE2:Object (UT2003)"
  - ns: 102
    exists: true
    name: "UE1:Object (RTNP)"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 106
    exists: true
    name: "UE3:Object (UT3)"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 104
    exists: true
    name: "UE2:Object (U2XMP)"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 104
    exists: true
    name: "UE2:Object (U2)"
  - ns: 0
    exists: true
    name: "UT2004"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Object"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Cache"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 104
    exists: true
    name: "UE2:Object (UT2004)"
  - ns: 0
    exists: true
    name: "Static functions"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Coerce"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 104
    exists: true
    name: "UE2:Object (UE2Runtime)"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: false
    name: "Native coding"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Classgames"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Extension DPL"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Literals"
    number: "1"
    index: "1"
    fromtitle: "String"
    byteoffset: 1283
    anchor: "Literals"
  - toclevel: 1
    level: "2"
    line: "String operators"
    number: "2"
    index: "2"
    fromtitle: "String"
    byteoffset: 2226
    anchor: "String_operators"
  - toclevel: 1
    level: "2"
    line: "Global string functions"
    number: "3"
    index: "3"
    fromtitle: "String"
    byteoffset: 5944
    anchor: "Global_string_functions"
  displaytitle: "String"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/iff"
    name: "wp:iff"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Unicode"
    name: "wp:Unicode"
  wikitext:
    text: "UnrealScript has a character string data type called '''string'''. Strings\
      \ can contain any combination of [[wp:Unicode|Unicode]] characters. Note that\
      \ the internal representation uses UTF-16 characters. UTF-8 is not recognized\
      \ by the compiler or any of the built-in string operations.\n\nString values\
      \ are immutable and UnrealScript neither provides \"character\" type nor allows\
      \ direct access to individual string characters. There are, however, functions\
      \ for extracting substrings and returning the Unicode value of the first character\
      \ of a string. There's also a function for returning a string of length 1 containing\
      \ a character corresponding to a specified Unicode value.\n\nVery early builds\
      \ of [[Unreal Engine 1]] had a fixed-length string type, which was declared\
      \ with the syntax <code>string[''length'']</code>. This type is no longer supported\
      \ and only mentioned here in case you run into its declaration in old code snippets.\n\
      \nIn [[Unreal Engine 2]] (or at least [[UT2004]]) there also is an undocumented\
      \ type called '''button''' that is an alias for the standard string type, but\
      \ implies the [[Cache]] variable modifier. It is not actually used in stock\
      \ code and there's no reason for you to ever declare a variable with the ''cache''\
      \ modifier, so this is purely informative.\n\n==Literals==\nString literals\
      \ start and end with double quotes. Between these there may be any number of\
      \ characters, except line breaks or the null character. To include a double\
      \ quote or backslash character in the string, it must be \"escaped\" by a(nother)\
      \ backslash character. Starting with Unreal Engine 3, strings can also contain\
      \ other escape sequences, such as \\n for a newline character. In Unreal Engine\
      \ 1 and 2 escaped letters only stand for themselves, i.e. the string \"\\n\"\
      \ is absolutely equal to the string \"n\" there.\n\n'''Examples:'''\n:<code>\"\
      abc\"</code>\n:<code>\"This is an \\\"example\\\".\"\n:<code>\"\"</code> (the\
      \ empty string and default string value)\n\nTechnically string literals are\
      \ allowed to have a length of up to 1023 characters. String values generated\
      \ at runtime may be longer. Internally strings are zero-terminated, which means\
      \ no string can contain the null character because it would be recognized as\
      \ the end of the string.\n\n==String operators==\nThe following [[operators]]\
      \ are commonly declared in the {{classgames|Object}} class and thus are available\
      \ globally:\n\n;<code>==</code>:Case-sensitive equality comparison. Returns\
      \ ''true'' [[wp:iff|iff]] the string expression on the left and right are identical.\n\
      ;<code>~=</code>:Case-insensitive equality comparison. Returns ''true'' iff\
      \ the string expression on the left and right are identical, ignoring any differences\
      \ in the case of the letters A-Z. Note that non-ASCII characters will be matched\
      \ case-sensitively, i.e. <code>\"a\" ~= \"A\"</code> is ''true'', but <code>\"\
      Ä\" ~= \"ä\"</code> is ''false''.\n;<code><</code>:Case-sensitive lexicographical\
      \ comparison. Returns ''true'' iff the string expression on the left comes lexicographically\
      \ before the string expression on the right.\n;<code>></code>:Case-sensitive\
      \ lexicographical comparison. Returns ''true'' iff the string expression on\
      \ the left comes lexicographically after the string expression on the right.\n\
      ;<code><=</code>:Case-sensitive lexicographical comparison. Returns ''false''\
      \ iff the string expression on the left comes lexicographically after the string\
      \ expression on the right.\n;<code>>=</code>:Case-sensitive lexicographical\
      \ comparison. Returns ''false'' iff the string expression on the left comes\
      \ lexicographically before the string expression on the right.\n;<code>!=</code>:Case-sensitive\
      \ inequality comparison. Returns ''false'' iff the string expression on the\
      \ left and right are identical.\n;<code>$</code>:String concatenation. <code>\"\
      abc\" $ \"def\"</code> evaluates to the value <code>\"abcdef\"</code> at runtime.\
      \ Note that the UnrealScript compiler will not optimize this kind of expression.\
      \ This operator will \"[[coerce]]\" (i.e. automatically typecast) its operands\
      \ to type string.\n;<code>@</code>:Spaced string concatenation. The expression\
      \ <code>a @ b</code> essentially corresponds to <code>a $ \" \" $ b</code>,\
      \ except that it is slightly more efficient. Still you may want to limit its\
      \ use to concatinating two non-literal expressions, as <code>\"abc \" $ d</code>\
      \ is slightly more efficient than <code>\"abc\" @ d</code>. This operator will\
      \ \"coerce\" (i.e. automatically typecast) its operands to type string.\n;<code>$=</code><sup>2+</sup>:Combined\
      \ concatenation and assignment. Left operand must be an assignable expression,\
      \ i.e. a variable, struct member or array element. This operator will \"coerce\"\
      \ (i.e. automatically typecast) the right operand to type string.\n;<code>@=</code><sup>2+</sup>:Combined\
      \ spaced concatenation and assignment. Left operand must be an assignable expression,\
      \ i.e. a variable, struct member or array element. Like for the <code>@</code>\
      \ operator, <code>foo $= \" bar\"</code> is slightly more efficient than <code>foo\
      \ @= \"bar\"</code>. This operator will \"coerce\" (i.e. automatically typecast)\
      \ the right operand to type string.\n;<code>-=</code><sup>2+</sup>:Substring\
      \ removal. This operator will remove all substrings from the variable, struct\
      \ member or array element on the left side that match the string expression\
      \ on the right side case-sensitively. <code>foo -= \"an\"</code> will turn the\
      \ string \"B<u>anan</u>a An<u>an</u>as\" into \"Ba Anas\". This operator will\
      \ \"coerce\" (i.e. automatically typecast) the right operand to type string.\
      \ Note that there is no operator <code>-</code> for strings. <code>a -= b;</code>\
      \ is essentially the same as <code>a = Repl(a, b, \"\", False);</code>.\n;<code>=</code>:\
      \ The build in assignment operator. Assigns the string value of the right side\
      \ operand to the variable, struct member or array element represented by the\
      \ left operand. Note that this operator does ''not'' \"coerce\" any operands\
      \ and unlike the combined operators also does not return any value.\n\n==Global\
      \ string functions==\nThe following [[static functions|static]] string functions\
      \ are commonly declared in the {{classgames|Object}} class and thus are available\
      \ globally:\n\n;<code>int Len(coerce string S)</code>:Returns the number of\
      \ characters in the specified string value.\n;<code>int InStr(coerce string\
      \ S, coerce string T)</code>:Locates the first case-sensitive match of ''T''\
      \ in ''S'' and returns its zero-based start position. Returns -1 if ''T'' cannot\
      \ be found in ''S''.\n;<code>string Mid(coerce string S, int start, optional\
      \ int length)</code>:Returns the substring of ''S'' starting at position ''start'',\
      \ including up to ''length'' characters. If ''length'' is omitted, all characters\
      \ up to the end of the string are returned.\n;<code>string Left(coerce string\
      \ S, int i)</code>:Returns the first ''i'' (i.e. left-most) characters from\
      \ ''S''.\n;<code>string Right(coerce string S, int i)</code>:Returns the last\
      \ ''i'' (i.e. right-most) characters from ''S''.\n;<code>string Caps(coerce\
      \ string S)</code>:Returns ''S'' with all lowercase ASCII letters (a-z) converted\
      \ to their uppercase forms (A-Z).\n;<code>string Locs(coerce string S)</code><sup>2+</sup>:Returns\
      \ ''S'' with all uppercase ASCII letters (A-Z) converted to their lowercase\
      \ forms (a-z).\n;<code>string Chr(int i)</code>:Returns a string of length 1\
      \ containing the Unicode character with the specified character code. Note that\
      \ the empty string will be returned when specifying 0 as code.\n;<code>int Asc(string\
      \ S)</code>:Returns the Unicode character code of the first character in ''S''.\
      \ This function will return 0 for the empty string. Note that unlike most other\
      \ global string function, ''Asc'' does not \"[[coerce]]\" (auto-convert) its\
      \ parameter to type string.\n;<code>string Repl(coerce string Src, coerce string\
      \ Match, coerce string With, optional bool bCaseSensitive)</code><sup>2+</sup>:Replaces\
      \ every occurrence of ''Match'' in ''Src'' with ''With'' using case-sensitive\
      \ or case-insensitive (this is the default) matching.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 46203
name: "String"
revision:
  revid: 46203
  parentid: 11776
  user: "Wormbo"
  timestamp: 1440877871.000000000
  comment: "replaced redirect with actual information about the string type"
timestamp: 1668754673.141756000
