---
parse:
  title: "Legacy:Replication Block"
  text:
    text: "<p>In <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>\
      \ <a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class Syntax\">Class Syntax</a>,\
      \ the <a href=\"/Legacy:Replication\" title=\"Legacy:Replication\">replication</a>\
      \ block specifies which of the variables and/or functions declared in a class\
      \ are replicated. It is optional and only variables and functions mentioned\
      \ in this block are actually replicated. Variables of a class that aren't mentined\
      \ are initialized with their default values on clients.</p>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#Syntax\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Syntax</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-2\"><a href=\"#Replication_condition\"><span class=\"tocnumber\"\
      >1.1</span> <span class=\"toctext\">Replication condition</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Identifiers\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Identifiers</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Reliable_and_Unreliable\"><span\
      \ class=\"tocnumber\">1.3</span> <span class=\"toctext\">Reliable and Unreliable</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Examples\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Examples</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Useful_Replication_Properties\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Useful Replication\
      \ Properties</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"\
      #Variables_only_valid_during_replication\"><span class=\"tocnumber\">3.1</span>\
      \ <span class=\"toctext\">Variables only valid during replication</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-8\"><a href=\"#Only_UT\"><span class=\"\
      tocnumber\">3.1.1</span> <span class=\"toctext\">Only UT</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-9\"><a href=\"#Only_UT2003\"><span class=\"\
      tocnumber\">3.1.2</span> <span class=\"toctext\">Only UT2003</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#Other_Useful_Variables\"\
      ><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">Other Useful Variables</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-11\"><a href=\"#In_UT\"><span class=\"\
      tocnumber\">3.2.1</span> <span class=\"toctext\">In UT</span></a></li>\n<li\
      \ class=\"toclevel-3 tocsection-12\"><a href=\"#In_UT2003\"><span class=\"tocnumber\"\
      >3.2.2</span> <span class=\"toctext\">In UT2003</span></a></li>\n</ul>\n</li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-13\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-14\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Syntax\">Syntax</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=1\" title=\"Edit section: Syntax\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<pre><b>replication</b>\n\
      <b>{</b>\n  <i>reliable/unreliable</i> <b>if (</b> <i>replication condition</i>\
      \ <b>)</b>\n    <i>identifiers</i>;\n<b>}</b>\n</pre>\n<h3><span class=\"mw-headline\"\
      \ id=\"Replication_condition\">Replication condition</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=2\"\
      \ title=\"Edit section: Replication condition\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The replication condition is a boolean expression\
      \ which tells the engine when something should be replicated to a remote machine.\
      \ You can use functions in this expression, but it really isn't recommended\
      \ because it will slow things down and can cause undesireable results. Usually\
      \ the expressions are simple and based around the replication properties listed\
      \ below.</p>\n<h3><span class=\"mw-headline\" id=\"Identifiers\">Identifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=3\" title=\"Edit section: Identifiers\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The\
      \ <i>identifiers</i> part is a comma-separated list of variables or functions\
      \ for replication. An identifier can appear only once in the whole replication\
      \ block, so cannot have different replication properties based on some condition.\
      \ You cannot override replication conditions like you can functions and states.\
      \ This also applies to functions and properties that don't appear in the replication\
      \ block and thus have an empty replication condition.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Reliable_and_Unreliable\">Reliable and Unreliable</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=4\" title=\"Edit section: Reliable\
      \ and Unreliable\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Understanding this lets you optimize your network usage.</p>\n<p>All replicated\
      \ <i>variables</i> are reliable: They are all guaranteed to reach the client,\
      \ even if they may arrive in the wrong order.</p>\n<p><b>Note:</b> Pawns have\
      \ code that prevent them from appearing jumpy, although the effects of this\
      \ can still be seen at times when the player bounces back and forth in a somewhat\
      \ laggy game.....location updates are being received out of order.</p>\n<p>Replicated\
      \ <i>functions</i> exist in both reliable and unreliable forms:</p>\n<p>A reliable\
      \ function is guaranteed to reach the client. A reliable function is repeatedly\
      \ sent over the network until the client acknowledges it. This can lead to a\
      \ one second delay or more if it has to resend the message. Functions that are\
      \ not called very frequently, and which will cause the user's experience to\
      \ be unsatisfactory if missed, should be replicated reliably. BroadcastMessage\
      \ and BroadcastLocalizedMessage, for example, are reliable to ensure that the\
      \ user gets the message.</p>\n<p>An unreliable function simply results in a\
      \ network message being sent, then the server is done. This is a lot lighter\
      \ on network and server resources but if the network is heavily loaded the call\
      \ might not take place on the client. The client's update to the server about\
      \ its position is replicated unreliably: Since the client sends these updates\
      \ to the server every single tick (in ServerMove, if you're wondering), it does\
      \ not matter if some of them never reach the server. Since each update is timestamped,\
      \ the server knows which ones to discard if they are out of order due to lag.\
      \ In this scenario, the server can be assured of getting updates from the client,\
      \ while not requiring that they ALL be sent.</p>\n<p>Since you don't want to\
      \ bog down the network connection with reliable updates about where the client\
      \ is looking or moving, unreliable is best in this situation. The server only\
      \ needs to get <i>most</i> of them to work great.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Examples\">Examples</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=5\"\
      \ title=\"Edit section: Examples\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Let's have a look at a typical replication block:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">replication</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw1\">reliable</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw7\">Role</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw7\">ROLE_Authority</span> <span\
      \ class=\"br0\">)</span>\n    RemainingMinute, bStopCountDown, GameEndedComments,\n\
      \    NumPlayers;\n \n  <span class=\"kw1\">reliable</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> bNetInitial <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span><span class=\"kw7\">Role</span><span class=\"\
      sy0\">==</span><span class=\"kw7\">ROLE_Authority</span><span class=\"br0\"\
      >)</span> <span class=\"br0\">)</span>\n    GameName, GameClass, bTeamGame,\
      \ ServerName, ShortName, AdminName,\n    AdminEmail, Region, MOTDLine1, MOTDLine2,\
      \ \n    MOTDLine3, MOTDLine4,RemainingTime, ElapsedTime;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>This one defines two groups of replicated\
      \ variables in the <a href=\"/Legacy:GameReplicationInfo_(UT)\" title=\"Legacy:GameReplicationInfo\
      \ (UT)\">GameReplicationInfo (UT)</a> class. Here you can already see the most\
      \ important part of a replication condition, the actor's <a href=\"/Legacy:Role\"\
      \ title=\"Legacy:Role\">Role</a>. Either the Role or the RemoteRole is always\
      \ present in a replication condition.</p>\n<p>Variables can only be replicated\
      \ from the authorative version of an actor (i.e. from the server) to the clients.\
      \ These replication conditions can become quite complex if it helps saving bandwidth,\
      \ as this example from the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> (UT2003) class shows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  <span class=\"kw1\">unreliable</span> <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bSkipActorPropertyReplication\
      \ <span class=\"sy0\">||</span> bNetInitial<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> bReplicateMovement\n      <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">RemoteRole</span> <span class=\"\
      sy0\">==</span> <span class=\"kw7\">ROLE_AutonomousProxy</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> bNetInitial<span class=\"\
      br0\">)</span>\n          <span class=\"sy0\">||</span> <span class=\"br0\"\
      >(</span><span class=\"br0\">(</span><span class=\"kw7\">RemoteRole</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">ROLE_SimulatedProxy</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span>bNetInitial <span class=\"sy0\">||</span> bUpdateSimulatedPosition<span\
      \ class=\"br0\">)</span>\n              <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw7\"\
      >Base</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw7\">Base</span>.<span\
      \ class=\"me0\">bWorldGeometry</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n          <span class=\"sy0\">||</span> <span class=\"br0\"\
      >(</span><span class=\"br0\">(</span><span class=\"kw7\">RemoteRole</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">ROLE_DumbProxy</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Base</span> <span class=\"sy0\"\
      >==</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">||</span> <span class=\"kw7\">Base</span>.<span class=\"me0\"\
      >bWorldGeometry</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n    <span class=\"kw7\"\
      >Location</span>;</pre></div>\n</div>\n<p>So whether the location of an actor\
      \ is replicated depends on the actor's <a href=\"/Legacy:RemoteRole\" title=\"\
      Legacy:RemoteRole\" class=\"mw-redirect\">RemoteRole</a> and whether bReplicateMovement\
      \ is True. The bSkipActorPropertyReplication can be used to cut down replication\
      \ of actor class variables to only the initial replication.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Useful_Replication_Properties\">Useful Replication Properties</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=6\" title=\"Edit section: Useful\
      \ Replication Properties\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"Variables_only_valid_during_replication\"\
      >Variables only valid during replication</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=7\"\
      \ title=\"Edit section: Variables only valid during replication\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>bClientDemoNetFunc&#160;</dt>\n\
      <dd>True if we're client-side demo recording and this call originated from the\
      \ remote.</dd>\n<dt>bClientDemoRecording&#160;</dt>\n<dd>This machine is currently\
      \ recording a clientside demo.</dd>\n<dt>bDemoRecording&#160;</dt>\n<dd>This\
      \ machine is currently recording a demo.</dd>\n<dt>bNetInitial&#160;</dt>\n\
      <dd>True during the first time all variables are replicated for this actor.</dd>\n\
      <dt>bNetOwner&#160;</dt>\n<dd>True when the replication target is this actor's\
      \ Owner.</dd>\n</dl>\n<h4><span class=\"mw-headline\" id=\"Only_UT\">Only UT</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=8\" title=\"Edit section: Only\
      \ UT\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <dl>\n<dt>bNetFeel&#160;</dt>\n<dd>Player collides with/feels it in network\
      \ play.</dd>\n<dt>bNetHear&#160;</dt>\n<dd>Player hears it in network play.</dd>\n\
      <dt>bNetSee&#160;</dt>\n<dd>Player sees it in network play.</dd>\n<dt>bSimulatedPawn&#160;</dt>\n\
      <dd>True if this is a <a href=\"/Legacy:Pawn_(UT)\" title=\"Legacy:Pawn (UT)\"\
      >Pawn (UT)</a> and simulated proxy.</dd>\n</dl>\n<h4><span class=\"mw-headline\"\
      \ id=\"Only_UT2003\">Only UT2003</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=9\"\
      \ title=\"Edit section: Only UT2003\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<dl>\n<dt>bDemoOwner&#160;</dt>\n<dd>Demo recording driver\
      \ owns this actor.</dd>\n<dt>bNetDirty&#160;</dt>\n<dd>True when a property\
      \ was changes since the last time it was replicated.</dd>\n<dt>bNetRelevant&#160;</dt>\n\
      <dd>Actor is currently relevant. Only valid server side and only when replicating\
      \ variables.</dd>\n<dt>bRepClientDemo&#160;</dt>\n<dd>The remote machine is\
      \ currently recording a demo.</dd>\n<dt>Level.ReplicationViewer&#160;</dt>\n\
      <dd>during replication, set to the playercontroller to which actors are currently\
      \ being replicated</dd>\n<dt>Level.ReplicationViewTarget&#160;</dt>\n<dd>during\
      \ replication, set to the viewtarget to which actors are currently being replicated</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Other_Useful_Variables\">Other Useful\
      \ Variables</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Replication_Block?section=10\" title=\"Edit\
      \ section: Other Useful Variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"In_UT\">In UT</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication_Block?section=11\" title=\"Edit section: In\
      \ UT\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <dl>\n<dt>bClientAnim&#160;</dt>\n<dd>If True, AmbientSound and animations are\
      \ replicated also to the owning client.</dd>\n</dl>\n<h4><span class=\"mw-headline\"\
      \ id=\"In_UT2003\">In UT2003</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=12\"\
      \ title=\"Edit section: In UT2003\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>These properties are used in the Actor class replication\
      \ block.</p>\n<dl>\n<dt>bNoRepMesh&#160;</dt>\n<dd>Don't replicate the Mesh.</dd>\n\
      <dt>bReplicateAnimations&#160;</dt>\n<dd>Whether SimAnim should be replicated.</dd>\n\
      <dt>bReplicateInstigator&#160;</dt>\n<dd>Whether the Instigator should be replicated.</dd>\n\
      <dt>bReplicateMovement&#160;</dt>\n<dd>Whether properties relevant for movement\
      \ like Location, Rotation, Velocity, etc. should be replicated. Unlike bSkipActorPropertyReplication\
      \ this also affects the initial replication.</dd>\n<dt>bSkipActorPropertyReplication&#160;</dt>\n\
      <dd>Used by <a href=\"/Legacy:ReplicationInfo\" title=\"Legacy:ReplicationInfo\"\
      >ReplicationInfo</a> classes that don't need to know all the Actor class properties\
      \ on the clients. When set to True only the initial replication replicates the\
      \ Actor class properties.</dd>\n<dt>bUpdateSimulatedPosition&#160;</dt>\n<dd>Whether\
      \ the actor's Location, Rotation and Velocity should be updated for Simulated\
      \ Proxies.</dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Replication_Block?section=13\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Introduction_To_Replication\" title=\"Legacy:Introduction\
      \ To Replication\">Introduction to Replication</a></li>\n<li><a href=\"/Legacy:Replication\"\
      \ title=\"Legacy:Replication\">Replication</a></li>\n<li><a href=\"/Legacy:Role\"\
      \ title=\"Legacy:Role\">Role</a> and RemoteRole, and <a href=\"/Legacy:NetMode\"\
      \ title=\"Legacy:NetMode\">NetMode</a>.</li>\n<li><a href=\"/Legacy:Netcode_Idioms\"\
      \ title=\"Legacy:Netcode Idioms\">Netcode Idioms</a></li>\n<li><a href=\"/Legacy:Replicated_Function\"\
      \ title=\"Legacy:Replicated Function\">Replicated Function</a></li>\n</ul>\n\
      <h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication_Block?section=14\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>VitalOverdose</b> So are the first set of variables\
      \ in the list only valid for ut2004?</p>\n<p><b>EricBlade:</b> I think lack\
      \ of specific version means that they are valid for all versions..</p>\n<p><b>Wormbo:</b>\
      \ You could have answered that question with a short search through the source\
      \ code.</p>\n<p><b>Vitaloverdose</b> I thought it might need labling so the\
      \ next person wouldnt have to.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.090 seconds\nReal time usage: 0.191 seconds\nPreprocessor visited node count:\
      \ 74/1000000\nPreprocessor generated node count: 108/1000000\nPost‐expand include\
      \ size: 17/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2638-0!*!0!!en!*!*\
      \ and timestamp 20221118092311 and revision id 6289\n -->\n"
  categories:
  - sortkey: "Replication Block"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:GameReplicationInfo (UT)"
  - ns: 100
    exists: true
    name: "Legacy:RemoteRole"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Netcode Idioms"
  - ns: 100
    exists: true
    name: "Legacy:Role"
  - ns: 100
    exists: true
    name: "Legacy:ReplicationInfo"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:NetMode"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Replication"
  - ns: 100
    exists: true
    name: "Legacy:Replicated Function"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Syntax"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 403
    anchor: "Syntax"
  - toclevel: 2
    level: "3"
    line: "Replication condition"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 546
    anchor: "Replication_condition"
  - toclevel: 2
    level: "3"
    line: "Identifiers"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 943
    anchor: "Identifiers"
  - toclevel: 2
    level: "3"
    line: "Reliable and Unreliable"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 1413
    anchor: "Reliable_and_Unreliable"
  - toclevel: 1
    level: "2"
    line: "Examples"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 3390
    anchor: "Examples"
  - toclevel: 1
    level: "2"
    line: "Useful Replication Properties"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 5128
    anchor: "Useful_Replication_Properties"
  - toclevel: 2
    level: "3"
    line: "Variables only valid during replication"
    number: "3.1"
    index: "7"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 5163
    anchor: "Variables_only_valid_during_replication"
  - toclevel: 3
    level: "4"
    line: "Only UT"
    number: "3.1.1"
    index: "8"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 5617
    anchor: "Only_UT"
  - toclevel: 3
    level: "4"
    line: "Only UT2003"
    number: "3.1.2"
    index: "9"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 5873
    anchor: "Only_UT2003"
  - toclevel: 2
    level: "3"
    line: "Other Useful Variables"
    number: "3.2"
    index: "10"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 6453
    anchor: "Other_Useful_Variables"
  - toclevel: 3
    level: "4"
    line: "In UT"
    number: "3.2.1"
    index: "11"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 6483
    anchor: "In_UT"
  - toclevel: 3
    level: "4"
    line: "In UT2003"
    number: "3.2.2"
    index: "12"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 6593
    anchor: "In_UT2003"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "13"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 7428
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "14"
    fromtitle: "Legacy:Replication_Block"
    byteoffset: 7721
    anchor: "Discussion"
  displaytitle: "Legacy:Replication Block"
  iwlinks: []
  wikitext:
    text: "In [[Legacy:UnrealScript|UnrealScript]] [[Legacy:Class Syntax|Class Syntax]],\
      \ the [[Legacy:Replication|replication]] block specifies which of the variables\
      \ and/or functions declared in a class are replicated. It is optional and only\
      \ variables and functions mentioned in this block are actually replicated. Variables\
      \ of a class that aren't mentined are initialized with their default values\
      \ on clients.\n\n==Syntax==\n '''replication'''\n '''{'''\n   ''reliable/unreliable''\
      \ '''if (''' ''replication condition'' ''')'''\n     ''identifiers'';\n '''}'''\n\
      \n===Replication condition===\n\nThe replication condition is a boolean expression\
      \ which tells the engine when something should be replicated to a remote machine.\
      \ You can use functions in this expression, but it really isn't recommended\
      \ because it will slow things down and can cause undesireable results.  Usually\
      \ the expressions are simple and based around the replication properties listed\
      \ below.\n\n===Identifiers===\n\nThe ''identifiers'' part is a comma-separated\
      \ list of variables or functions for replication.  An identifier can appear\
      \ only once in the whole replication block, so cannot have different replication\
      \ properties based on some condition.  You cannot override replication conditions\
      \ like you can functions and states.  This also applies to functions and properties\
      \ that don't appear in the replication block and thus have an empty replication\
      \ condition.\n\n===Reliable and Unreliable===\n\nUnderstanding this lets you\
      \ optimize your network usage.  \n\nAll replicated ''variables'' are reliable:\
      \ They are all guaranteed to reach the client, even if they may arrive in the\
      \ wrong order.  \n\n'''Note:''' Pawns have code that prevent them from appearing\
      \ jumpy, although the effects of this can still be seen at times when the player\
      \ bounces back and forth in a somewhat laggy game.....location updates are being\
      \ received out of order.\n\nReplicated ''functions'' exist in both reliable\
      \ and unreliable forms:\n\nA reliable function is guaranteed to reach the client.\
      \  A reliable function is repeatedly sent over the network until the client\
      \ acknowledges it. This can lead to a one second delay or more if it has to\
      \ resend the message.  Functions that are not called very frequently, and which\
      \ will cause the user's experience to be unsatisfactory if missed, should be\
      \ replicated reliably.  BroadcastMessage and BroadcastLocalizedMessage, for\
      \ example, are reliable to ensure that the user gets the message.  \n\nAn unreliable\
      \ function simply results in a network message being sent, then the server is\
      \ done.  This is a lot lighter on network and server resources but if the network\
      \ is heavily loaded the call might not take place on the client.  The client's\
      \ update to the server about its position is replicated unreliably: Since the\
      \ client sends these updates to the server every single tick (in ServerMove,\
      \ if you're wondering), it does not matter if some of them never reach the server.\
      \  Since each update is timestamped, the server knows which ones to discard\
      \ if they are out of order due to lag.  In this scenario, the server can be\
      \ assured of getting updates from the client, while not requiring that they\
      \ ALL be sent. \n\nSince you don't want to bog down the network connection with\
      \ reliable updates about where the client is looking or moving, unreliable is\
      \ best in this situation.  The server only needs to get ''most'' of them to\
      \ work great.\n\n==Examples==\n\nLet's have a look at a typical replication\
      \ block:\n\n<uscript>\nreplication\n{\n  reliable if ( Role == ROLE_Authority\
      \ )\n    RemainingMinute, bStopCountDown, GameEndedComments,\n    NumPlayers;\n\
      \n  reliable if ( bNetInitial && (Role==ROLE_Authority) )\n    GameName, GameClass,\
      \ bTeamGame, ServerName, ShortName, AdminName,\n    AdminEmail, Region, MOTDLine1,\
      \ MOTDLine2, \n    MOTDLine3, MOTDLine4,RemainingTime, ElapsedTime;\n}\n</uscript>\n\
      \nThis one defines two groups of replicated variables in the [[Legacy:GameReplicationInfo\
      \ (UT)|GameReplicationInfo (UT)]] class. Here you can already see the most important\
      \ part of a replication condition, the actor's [[Legacy:Role|Role]]. Either\
      \ the Role or the RemoteRole is always present in a replication condition.\n\
      \nVariables can only be replicated from the authorative version of an actor\
      \ (i.e. from the server) to the clients. These replication conditions can become\
      \ quite complex if it helps saving bandwidth, as this example from the [[Legacy:Actor|Actor]]\
      \ (UT2003) class shows:\n\n<uscript>\n  unreliable if ( (!bSkipActorPropertyReplication\
      \ || bNetInitial) && bReplicateMovement\n      && (((RemoteRole == ROLE_AutonomousProxy)\
      \ && bNetInitial)\n          || ((RemoteRole == ROLE_SimulatedProxy) && (bNetInitial\
      \ || bUpdateSimulatedPosition)\n              && ((Base == None) || Base.bWorldGeometry))\n\
      \          || ((RemoteRole == ROLE_DumbProxy) && ((Base == None) || Base.bWorldGeometry)))\
      \ )\n    Location;\n</uscript>\n\nSo whether the location of an actor is replicated\
      \ depends on the actor's [[Legacy:RemoteRole|RemoteRole]] and whether bReplicateMovement\
      \ is True. The bSkipActorPropertyReplication can be used to cut down replication\
      \ of actor class variables to only the initial replication.\n\n==Useful Replication\
      \ Properties==\n\n===Variables only valid during replication===\n; bClientDemoNetFunc\
      \ : True if we're client-side demo recording and this call originated from the\
      \ remote.\n; bClientDemoRecording : This machine is currently recording a clientside\
      \ demo.\n; bDemoRecording : This machine is currently recording a demo.\n; bNetInitial\
      \ : True during the first time all variables are replicated for this actor.\n\
      ; bNetOwner : True when the replication target is this actor's Owner.\n\n====Only\
      \ UT====\n; bNetFeel : Player collides with/feels it in network play.\n; bNetHear\
      \ : Player hears it in network play.\n; bNetSee : Player sees it in network\
      \ play.\n; bSimulatedPawn : True if this is a [[Legacy:Pawn (UT)|Pawn (UT)]]\
      \ and simulated proxy.\n\n====Only UT2003====\n; bDemoOwner : Demo recording\
      \ driver owns this actor.\n; bNetDirty : True when a property was changes since\
      \ the last time it was replicated.\n; bNetRelevant : Actor is currently relevant.\
      \ Only valid server side and only when replicating variables.\n; bRepClientDemo\
      \ : The remote machine is currently recording a demo.\n; Level.ReplicationViewer\
      \ : during replication, set to the playercontroller to which actors are currently\
      \ being replicated\n; Level.ReplicationViewTarget : during replication, set\
      \ to the viewtarget to which actors are currently being replicated\n\n===Other\
      \ Useful Variables===\n\n====In UT====\n; bClientAnim : If True, AmbientSound\
      \ and animations are replicated also to the owning client.\n\n====In UT2003====\n\
      \nThese properties are used in the Actor class replication block.\n; bNoRepMesh\
      \ : Don't replicate the Mesh.\n; bReplicateAnimations : Whether SimAnim should\
      \ be replicated.\n; bReplicateInstigator : Whether the Instigator should be\
      \ replicated.\n; bReplicateMovement : Whether properties relevant for movement\
      \ like Location, Rotation, Velocity, etc. should be replicated. Unlike bSkipActorPropertyReplication\
      \ this also affects the initial replication.\n; bSkipActorPropertyReplication\
      \ : Used by [[Legacy:ReplicationInfo|ReplicationInfo]] classes that don't need\
      \ to know all the Actor class properties on the clients. When set to True only\
      \ the initial replication replicates the Actor class properties.\n; bUpdateSimulatedPosition\
      \ : Whether the actor's Location, Rotation and Velocity should be updated for\
      \ Simulated Proxies.\n\n==Related Topics==\n* [[Legacy:Introduction To Replication|Introduction\
      \ to Replication]]\n* [[Legacy:Replication|Replication]]\n* [[Legacy:Role|Role]]\
      \ and RemoteRole, and [[Legacy:NetMode|NetMode]].\n* [[Legacy:Netcode Idioms|Netcode\
      \ Idioms]]\n* [[Legacy:Replicated Function|Replicated Function]]\n\n==Discussion==\n\
      \n'''VitalOverdose''' So are the first set of variables in the list only valid\
      \ for ut2004?\n\n'''EricBlade:''' I think lack of specific version means that\
      \ they are valid for all versions..\n\n'''Wormbo:''' You could have answered\
      \ that question with a short search through the source code.\n\n'''Vitaloverdose'''\
      \ I thought it might need labling so the next person wouldnt have to.\n\n[[Category:Legacy\
      \ Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 6289
name: "Legacy:Replication Block"
revision:
  revid: 6289
  parentid: 6291
  user: "84-45-226-149.no-dns-yet.enta.net"
  timestamp: 1190350657.000000000
  comment: "*"
timestamp: 1668763392.060772000
