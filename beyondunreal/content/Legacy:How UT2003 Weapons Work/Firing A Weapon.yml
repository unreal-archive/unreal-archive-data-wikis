---
parse:
  title: "Legacy:How UT2003 Weapons Work/Firing A Weapon"
  text:
    text: "<p><a href=\"/Legacy:How_UT2003_Weapons_Work\" title=\"Legacy:How UT2003\
      \ Weapons Work\">How UT2003 Weapons Work</a>: Firing A Weapon</p>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Intro\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Intro</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-2\"><a href=\"#Flow_of_control\"><span class=\"tocnumber\"\
      >1.1</span> <span class=\"toctext\">Flow of control</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-3\"><a href=\"#In_English\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">In English</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Comments\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Comments</span></a></li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Intro\">Intro</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon?section=1\"\
      \ title=\"Edit section: Intro\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>While it's relatively easy to make a custom weapon\
      \ by taking an existing one and monkeying about with the parameters, it's much\
      \ harder to figure out the chain of events that cause a weapon to get fired.\
      \ The reason for this is twofold: first, much of the actual flow of control\
      \ is done natively, so is not visible to the person browsing the UnrealScript\
      \ code; secondly, there is a visible chain of method calls which looks right,\
      \ until the trail suddenly peters out.</p>\n<p>Trystan did excellent work deciphering\
      \ this in the case of projectile weapons. Although not originally intended to\
      \ show the general case, this diagram shows important steps missing from the\
      \ visible UnrealScript code:</p>\n<h3><span class=\"mw-headline\" id=\"Flow_of_control\"\
      >Flow of control</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon?section=2\"\
      \ title=\"Edit section: Flow of control\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<div class=\"center\">\n<div class=\"floatnone\"><a href=\"\
      /File:Legacy_projectilefireflow.jpeg\" class=\"image\" title=\"Projectile Fire\
      \ Flowchart\"><img alt=\"Projectile Fire Flowchart\" src=\"/w/images/Legacy_projectilefireflow.jpeg\"\
      \ width=\"817\" height=\"1057\" /></a></div>\n</div>\n<p><b>Note:</b> There's\
      \ a small error above. The ProcessTouch function isn't called by the engine.\
      \ Instead the engine calls the Touch function which calculates the exact hitlocation\
      \ and calls ProcessTouch.</p>\n<h3><span class=\"mw-headline\" id=\"In_English\"\
      >In English</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon?section=3\"\
      \ title=\"Edit section: In English\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The player hits the Fire button. The engine then executes\
      \ the alias attached to Fire. The alias fire is set to Button bFire, and the\
      \ exec command Fire(). Check <a href=\"/Legacy:Binding_Keys\" title=\"Legacy:Binding\
      \ Keys\">aliases</a> for more information on how this works but basically bFire\
      \ is a boolean variable that is automatically set by the engine to true when\
      \ the fire button is being held down, and false when the fire button is released.\
      \ The engine has a native event set such that when bFire is held down the Pawn.Weapons.WeaponFire.ModeDoFire()\
      \ is called. As well PlayerController.Fire() is called. It's important to note\
      \ that these are two distinctly separate chains of events.</p>\n<p>See <a href=\"\
      /edit/Legacy:How_Firing_Doesn%27T_Work?redlink=1\" class=\"new\" title=\"Legacy:How\
      \ Firing Doesn'T Work (page does not exist)\">How Firing Doesn't Work</a> for\
      \ an explanation of the \"decoy\" chain of events.</p>\n<p>The flow of control\
      \ is picked up at the <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a> class found in the weapon's array of fire\
      \ modes.</p>\n<p><a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a> is responsible for creating the visual\
      \ effects and applying damage. There are two main weapon fire types:</p>\n<ul>\n\
      <li><a href=\"/Legacy:ProjectileFire\" title=\"Legacy:ProjectileFire\">ProjectileFire</a>\
      \ - <a href=\"/Legacy:Firing_Projectile_Weapons\" title=\"Legacy:Firing Projectile\
      \ Weapons\">Firing Projectile weapons</a></li>\n<li><a href=\"/Legacy:InstantFire\"\
      \ title=\"Legacy:InstantFire\">InstantFire</a> - <a href=\"/Legacy:Firing_InstantFire_Weapons\"\
      \ title=\"Legacy:Firing InstantFire Weapons\">Firing InstantFire weapons</a></li>\n\
      </ul>\n<p>We will go on with the instant fire weapons; So, click that link!&#160;:)</p>\n\
      <h2><span class=\"mw-headline\" id=\"Comments\">Comments</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon?section=4\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>CDeath:</b> This is my first Wiki post. My appoligies\
      \ for any improper formatting.</p>\n<p>I have been looking at the engine. I\
      \ think I understand how the UT2K4 firing stuff works. Natively, what happens\
      \ is that the engine calls the native TickAuthoritiative() function for every\
      \ actor. For weapons, this native function is called AWeapon::TickAuthoritative().</p>\n\
      <p>AWeapon::TickAuthoritative() does several test to make sure that the weapon\
      \ should be ticked, is owned by a pawn, and stuff like that. If everything looks\
      \ good, then the native AWeapon::eventWeaponTick() is called. eventWeaponTick()\
      \ calls the uScript <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\">Weapon</a>.WeaponTick()\
      \ function.</p>\n<p>Next, AWeapon::TickAuthoritative() loops through the weapon’\
      s FireMode array (each FireMode is a <a href=\"/Legacy:WeaponFire_(UT2003)\"\
      \ title=\"Legacy:WeaponFire (UT2003)\">WeaponFire (UT2003)</a> object) and depending\
      \ on a lot of flags will call some of the following functions:</p>\n<ul>\n<li>UWeaponFire::ModeTick()\
      \ (a native function)</li>\n<li>AWeapon::eventServerStartFire() (calls uScript\
      \ <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\">Weapon</a>.ServerStartFire())</li>\n\
      <li>AWeapon::eventServerStopFire() (calls uScript <a href=\"/Legacy:Weapon\"\
      \ title=\"Legacy:Weapon\">Weapon</a>.ServerStopFire())</li>\n<li>AWeapon::eventClientStartFire()\
      \ (calls uScript <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\">Weapon</a>.ClientStartFire())</li>\n\
      <li>AWeapon::eventClientStopFire() (calls uScript <a href=\"/Legacy:Weapon\"\
      \ title=\"Legacy:Weapon\">Weapon</a>.ClientStopFire())</li>\n</ul>\n<p>The native\
      \ UWeaponFire::ModeTick() function calls UWeaponFire::eventTimer() (which calls\
      \ the uScript <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a>.Timer() function). Then based on a lot\
      \ of flags it will call some of the following functions:</p>\n<ul>\n<li>UWeaponFire::eventModeTick()\
      \ (calls uScript <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a>.ModeTick())</li>\n<li>UWeaponFire::eventModeDoFire()\
      \ (calls uScript <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a>.ModeDoFire())</li>\n<li>UWeaponFire::eventModeHoldFire()\
      \ (calls uScript <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire\
      \ (UT2003)\">WeaponFire (UT2003)</a>.ModeHoldFire())</li>\n</ul>\n<p>So for\
      \ a weapon, it looks like the sequence is:</p>\n<ul>\n<li>Weapon.WeaponTick();</li>\n\
      <li>Weapon.FireMode[0].Timer()</li>\n<li>Weapon.FireMode[0].ModeTick()</li>\n\
      <li>Weapon.FireMode[0].ModeDoFire()/ModeHoldFire()</li>\n<li>Weapon.FireMode[1].Timer()</li>\n\
      <li>Weapon.FireMode[1].ModeTick()</li>\n<li>Weapon.FireMode[1].ModeDoFire()/ModeHoldFire()</li>\n\
      <li>Weapon.ServerStartFire()/ServerStopFire()</li>\n<li>Weapon.ClientStartFire()/ClientStopFire()</li>\n\
      </ul>\n<p>What exactly gets called depends upon all sorts of things like your\
      \ Role, TimerInterval, NextTimerPop, TimeSeconds, bIsFiring, bInstantStop, bFireOnRelease,\
      \ HoldTime, MaxHoldTime, NextFireTime…</p>\n<p><b>Wormbo:</b> Thanks for the\
      \ insights. I'd like to add, that the native UWeaponFire class corresponds to\
      \ the <a href=\"/Legacy:WeaponFire_(UT2003)\" title=\"Legacy:WeaponFire (UT2003)\"\
      >WeaponFire (UT2003)</a> Unrealscript class and AWeapon corresponds to UnrealScript's\
      \ <a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\">Weapon</a> class. It's\
      \ kinda obvious, but just to prevent confusion...&#160;:)</p>\n<p><b>CDeath:</b>\
      \ Good catch. I changed AWeapon to Weapon. Internally, the engine prepends most\
      \ native objects with either an 'A' or a 'U'. The 'A' means that the object\
      \ descends from <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\">Actor</a>.</p>\n\
      <p><b>Sweavo:</b> refactored some, it still has a way to go, but that diagram\
      \ was the Holy Grail for me, and I agree with other contributors it needs to\
      \ be front and center!</p>\n<p><b>Tarquin:</b> If you want to do an editable\
      \ version of the diagram, tree markup might be useful:</p>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">User fires weapon<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_2__this happens<br /></div>\n<div style=\"font-family: monospace;\
      \ white-space: preserve; line-height: 1em;\">__TREETAG_0____TREETAG_2__and then\
      \ this<br /></div>\n<div style=\"font-family: monospace; white-space: preserve;\
      \ line-height: 1em;\">__TREETAG_2__that happens too<br /></div>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.081 seconds\nReal time usage: 0.083 seconds\n\
      Preprocessor visited node count: 16/1000000\nPreprocessor generated node count:\
      \ 28/1000000\nPost‐expand include size: 39/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1410-0!*!0!!en!5!* and timestamp 20221118160254 and revision\
      \ id 42577\n -->\n"
  categories:
  - sortkey: "How UT2003 Weapons Work/Firing A Weapon"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:ProjectileFire"
  - ns: 100
    exists: true
    name: "Legacy:Firing Projectile Weapons"
  - ns: 100
    exists: true
    name: "Legacy:Firing InstantFire Weapons"
  - ns: 100
    exists: true
    name: "Legacy:InstantFire"
  - ns: 100
    exists: false
    name: "Legacy:How Firing Doesn'T Work"
  - ns: 100
    exists: true
    name: "Legacy:WeaponFire (UT2003)"
  - ns: 100
    exists: true
    name: "Legacy:How UT2003 Weapons Work"
  - ns: 100
    exists: true
    name: "Legacy:Binding Keys"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Weapon"
  templates: []
  images:
  - "Legacy_projectilefireflow.jpeg"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Intro"
    number: "1"
    index: "1"
    fromtitle: "Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon"
    byteoffset: 77
    anchor: "Intro"
  - toclevel: 2
    level: "3"
    line: "Flow of control"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon"
    byteoffset: 775
    anchor: "Flow_of_control"
  - toclevel: 2
    level: "3"
    line: "In English"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon"
    byteoffset: 1077
    anchor: "In_English"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "2"
    index: "4"
    fromtitle: "Legacy:How_UT2003_Weapons_Work/Firing_A_Weapon"
    byteoffset: 2451
    anchor: "Comments"
  displaytitle: "Legacy:How UT2003 Weapons Work/Firing A Weapon"
  iwlinks: []
  wikitext:
    text: "[[Legacy:How UT2003 Weapons Work|How UT2003 Weapons Work]]: Firing A Weapon\n\
      \n==Intro==\n\nWhile it's relatively easy to make a custom weapon by taking\
      \ an existing one and monkeying about with the parameters, it's much harder\
      \ to figure out the chain of events that cause a weapon to get fired.  The reason\
      \ for this is twofold: first, much of the actual flow of control is done natively,\
      \ so is not visible to the person browsing the UnrealScript code; secondly,\
      \ there is a visible chain of method calls which looks right, until the trail\
      \ suddenly peters out.\n\nTrystan did excellent work deciphering this in the\
      \ case of projectile weapons.  Although not originally intended to show the\
      \ general case, this diagram shows important steps missing from the visible\
      \ UnrealScript code:\n\n===Flow of control===\n\n[[Image:Legacy_projectilefireflow.jpeg|center|Projectile\
      \ Fire Flowchart]]\n\n'''Note:''' There's a small error above.  The ProcessTouch\
      \ function isn't called by the engine. Instead the engine calls the Touch function\
      \ which calculates the exact hitlocation and calls ProcessTouch.\n\n===In English===\n\
      \nThe player hits the Fire button.  The engine then executes the alias attached\
      \ to Fire.  The alias fire is set to Button bFire, and the exec command Fire().\
      \  Check [[Legacy:Binding Keys|aliases]] for more information on how this works\
      \ but basically bFire is a boolean variable that is automatically set by the\
      \ engine to true when the fire button is being held down, and false when the\
      \ fire button is released.  The engine has a native event set such that when\
      \ bFire is held down the Pawn.Weapons.WeaponFire.ModeDoFire() is called.  As\
      \ well PlayerController.Fire() is called.  It's important to note that these\
      \ are two distinctly separate chains of events.  \n\nSee [[Legacy:How Firing\
      \ Doesn'T Work|How Firing Doesn't Work]] for an explanation of the \"decoy\"\
      \ chain of events.\n\nThe flow of control is picked up at the [[Legacy:WeaponFire\
      \ (UT2003)|WeaponFire (UT2003)]] class found in the weapon's array of fire modes.\
      \ \n\n[[Legacy:WeaponFire (UT2003)|WeaponFire (UT2003)]] is responsible for\
      \ creating the visual effects and applying damage. There are two main weapon\
      \ fire types:\n\n* [[Legacy:ProjectileFire|ProjectileFire]] - [[Legacy:Firing\
      \ Projectile Weapons|Firing Projectile weapons]]\n* [[Legacy:InstantFire|InstantFire]]\
      \ - [[Legacy:Firing InstantFire Weapons|Firing InstantFire weapons]]\n\nWe will\
      \ go on with the instant fire weapons; So, click that link! :)\n\n==Comments==\n\
      \n'''CDeath:''' This is my first Wiki post.  My appoligies for any improper\
      \ formatting.\n\nI have been looking at the engine.  I think I understand how\
      \ the UT2K4 firing stuff works.  Natively, what happens is that the engine calls\
      \ the native TickAuthoritiative() function for every actor.  For weapons, this\
      \ native function is called AWeapon::TickAuthoritative().\n\nAWeapon::TickAuthoritative()\
      \ does several test to make sure that the weapon should be ticked, is owned\
      \ by a pawn, and stuff like that.  If everything looks good, then the native\
      \ AWeapon::eventWeaponTick() is called.  eventWeaponTick() calls the uScript\
      \ [[Legacy:Weapon|Weapon]].WeaponTick() function.\n\nNext, AWeapon::TickAuthoritative()\
      \ loops through the weapon’s FireMode array (each FireMode is a [[Legacy:WeaponFire\
      \ (UT2003)|WeaponFire (UT2003)]] object) and depending on a lot of flags will\
      \ call some of the following functions:\n* UWeaponFire::ModeTick() (a native\
      \ function)\n* AWeapon::eventServerStartFire() (calls uScript [[Legacy:Weapon|Weapon]].ServerStartFire())\n\
      * AWeapon::eventServerStopFire() (calls uScript [[Legacy:Weapon|Weapon]].ServerStopFire())\n\
      * AWeapon::eventClientStartFire() (calls uScript [[Legacy:Weapon|Weapon]].ClientStartFire())\n\
      * AWeapon::eventClientStopFire() (calls uScript [[Legacy:Weapon|Weapon]].ClientStopFire())\n\
      \nThe native UWeaponFire::ModeTick() function calls UWeaponFire::eventTimer()\
      \ (which calls the uScript [[Legacy:WeaponFire (UT2003)|WeaponFire (UT2003)]].Timer()\
      \ function).  Then based on a lot of flags it will call some of the following\
      \ functions:\n* UWeaponFire::eventModeTick() (calls uScript [[Legacy:WeaponFire\
      \ (UT2003)|WeaponFire (UT2003)]].ModeTick())\n* UWeaponFire::eventModeDoFire()\
      \ (calls uScript [[Legacy:WeaponFire (UT2003)|WeaponFire (UT2003)]].ModeDoFire())\n\
      * UWeaponFire::eventModeHoldFire() (calls uScript [[Legacy:WeaponFire (UT2003)|WeaponFire\
      \ (UT2003)]].ModeHoldFire())\n\nSo for a weapon, it looks like the sequence\
      \ is:\n* Weapon.WeaponTick();\n* Weapon.FireMode[0].Timer()\n* Weapon.FireMode[0].ModeTick()\n\
      * Weapon.FireMode[0].ModeDoFire()/ModeHoldFire()\n* Weapon.FireMode[1].Timer()\n\
      * Weapon.FireMode[1].ModeTick()\n* Weapon.FireMode[1].ModeDoFire()/ModeHoldFire()\n\
      * Weapon.ServerStartFire()/ServerStopFire()\n* Weapon.ClientStartFire()/ClientStopFire()\n\
      \nWhat exactly gets called depends upon all sorts of things like your Role,\
      \ TimerInterval, NextTimerPop, TimeSeconds, bIsFiring, bInstantStop, bFireOnRelease,\
      \ HoldTime, MaxHoldTime, NextFireTime…\n\n'''Wormbo:''' Thanks for the insights.\
      \ I'd like to add, that the native UWeaponFire class corresponds to the [[Legacy:WeaponFire\
      \ (UT2003)|WeaponFire (UT2003)]] Unrealscript class and AWeapon corresponds\
      \ to UnrealScript's [[Legacy:Weapon|Weapon]] class. It's kinda obvious, but\
      \ just to prevent confusion... :)\n\n'''CDeath:''' Good catch.  I changed AWeapon\
      \ to Weapon.  Internally, the engine prepends most native objects with either\
      \ an 'A' or a 'U'.  The 'A' means that the object descends from [[Legacy:Actor|Actor]].\n\
      \n'''Sweavo:''' refactored some, it still has a way to go, but that diagram\
      \ was the Holy Grail for me, and I agree with other contributors it needs to\
      \ be front and center!\n\n'''Tarquin:''' If you want to do an editable version\
      \ of the diagram, tree markup might be useful:\n\n+ User fires weapon\n\n++\
      \ this happens\n\n+++ and then this\n\n++ that happens too\n\n[[Category:Legacy\
      \ Refactor Me|{{PAGENAME}}]]"
  properties: []
  revId: 42577
name: "Legacy:How UT2003 Weapons Work/Firing A Weapon"
revision:
  revid: 42577
  parentid: 42575
  user: "Wormbo"
  timestamp: 1267568999.000000000
  comment: "Reverted edits by [[Special:Contributions/Braina|Braina]] ([[User talk:Braina|Talk]])\
    \ to last revision by [[User:61.68.243.127|61.68.243.127]]"
timestamp: 1668787222.604504000
