---
parse:
  title: "Legacy:Semisolid Theories"
  text:
    text: "<p>Theories on how semisolids work &amp; why they sometimes go wrong. Add,\
      \ discuss &amp; mercilessly refactor.</p>\n<p>Tarquin's theory:</p>\n<p>Semisolids\
      \ are first split into pieces according to the BSP regions, so for example a\
      \ large beam that crosses several rooms is split between the subtracts.</p>\n\
      <p>Then the polys are added to the poly list of each BSP leaf.</p>\n<p>This\
      \ explains the following semisol problems:</p>\n<ul>\n<li>faces that vanish\
      \ at the edge of a region (presumably because the splitting code doesn't handle\
      \ a face that's on a boundary if there's no part of the semi within the region\
      \ where the boundary face is visible)</li>\n<li>collision errors</li>\n</ul>\n\
      <dl>\n<dt><i>EntropicLqd</i></dt>\n<dd>You could prove the theory by splitting\
      \ the single semi-solid beam into a few smaller semi-solids to see if the problem\
      \ still occurs. Of course – you can't see the semi-solids in the BSP view (I've\
      \ ordered every semi-solid brush to the end of the brush list in my level so\
      \ that might also be why I can't see them).<br />\nAnother possible way of proving\
      \ that would be to merge all of the co-planar ceiling brushes as this seems\
      \ to lessen the effect of polygon boundaries.</dd>\n</dl>\n<h2><span class=\"\
      mw-headline\" id=\"Snippet\">Snippet</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Semisolid_Theories?section=1\"\
      \ title=\"Edit section: Snippet\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>here's a plunder from one of my old forum posts:</p>\n\
      <p>My theory was that the polys of a semisolid are defined as belonging to a\
      \ particular BSP region. If the semisol brush isn't entirely within a region,\
      \ it's split by the BSP and polys are handled for each region.</p>\n<p>Problems\
      \ arise when the edge of a semisolid brush is flush with a plane that markes\
      \ a BSP cut.</p>\n<p>Let's say we have a room made of two subtracts, side by\
      \ side. (Maybe we've built it like that to get a T-shape floorplan or something...)</p>\n\
      <p>Now imagine a crate on the floor, positioned so one side of the crate is\
      \ flush with the join in the room.</p>\n<p>The crate has 5 visible polys. 3\
      \ sides and the top belong to BSP region A, which is the region in which the\
      \ semisol brush itself sits.</p>\n<p>The last poly is on the BSP cut. It's visible\
      \ from region B, but no part of its parent semisolid brush is in the region:\
      \ hence the vanishing poly.</p>\n<p>The geometry rebuild looks for semisolids\
      \ in each region and considers the relevant faces. It doesn't account for this\
      \ special case where a semisolid face is in a region but the brush isn't.</p>\n\
      <p>Now take a look at the picture:</p>\n<p>I was going through my level in zone\
      \ view, and the tops of those two semisolids had vanished on my latest rebuild.\
      \ As I moved around, I went out into solid space to get a better look, and the\
      \ polys appeared – but in the wrong zone colour!!&#160;:eek:</p>\n<p>I'm fairly\
      \ sure that this doesn't always happen with Semisolid Poly Vanish – I seem to\
      \ remember that usually the face is simply absent no matter where it's viewed\
      \ from (I'm not about to test that though!)</p>\n<p>This does raise an interesting\
      \ point, that on this occasion, the semisolid face is THERE... but it's been\
      \ listed as belonging to the wrong zone.</p>\n<p>I hereby name this phenomenon\
      \ the Semisolid Zone Error, a special case of SPV&#160;:D</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.013 seconds\nReal time usage: 0.014 seconds\n\
      Preprocessor visited node count: 5/1000000\nPreprocessor generated node count:\
      \ 18/1000000\nPost‐expand include size: 18/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2757-0!*!*!*!*!*!* and timestamp 20221117224059 and revision\
      \ id 7389\n -->\n"
  categories:
  - sortkey: "Semisolid Theories"
    name: "Legacy_Mapping"
  links: []
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Snippet"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Semisolid_Theories"
    byteoffset: 1115
    anchor: "Snippet"
  displaytitle: "Legacy:Semisolid Theories"
  iwlinks: []
  wikitext:
    text: "Theories on how semisolids work & why they sometimes go wrong. Add, discuss\
      \ & mercilessly refactor.\n\nTarquin's theory:\n\nSemisolids are first split\
      \ into pieces according to the BSP regions, so for example a large beam that\
      \ crosses several rooms is split between the subtracts. \n\nThen the polys are\
      \ added to the poly list of each BSP leaf. \n\nThis explains the following semisol\
      \ problems: \n* faces that vanish at the edge of a region (presumably because\
      \ the splitting code doesn't handle a face that's on a boundary if there's no\
      \ part of the semi within the region where the boundary face is visible) \n\
      * collision errors\n\n;''EntropicLqd'': You could prove the theory by splitting\
      \ the single semi-solid beam into a few smaller semi-solids to see if the problem\
      \ still occurs.  Of course &ndash; you can't see the semi-solids in the BSP\
      \ view (I've ordered every semi-solid brush to the end of the brush list in\
      \ my level so that might also be why I can't see them).<br />Another possible\
      \ way of proving that would be to merge all of the co-planar ceiling brushes\
      \ as this seems to lessen the effect of polygon boundaries.\n\n==Snippet ==\n\
      \nhere's a plunder from one of my old forum posts:\n\nMy theory was that the\
      \ polys of a semisolid are defined as belonging to a particular BSP region.\
      \ If the semisol brush isn't entirely within a region, it's split by the BSP\
      \ and polys are handled for each region.\n\nProblems arise when the edge of\
      \ a semisolid brush is flush with a plane that markes a BSP cut.\n\nLet's say\
      \ we have a room made of two subtracts, side by side. (Maybe we've built it\
      \ like that to get a T-shape floorplan or something...)\n\nNow imagine a crate\
      \ on the floor, positioned so one side of the crate is flush with the join in\
      \ the room.\n\nThe crate has 5 visible polys. 3 sides and the top belong to\
      \ BSP region A, which is the region in which the semisol brush itself sits.\n\
      \nThe last poly is on the BSP cut. It's visible from region B, but no part of\
      \ its parent semisolid brush is in the region: hence the vanishing poly. \n\n\
      The geometry rebuild looks for semisolids in each region and considers the relevant\
      \ faces. It doesn't account for this special case where a semisolid face is\
      \ in a region but the brush isn't.\n\nNow take a look at the picture:\n\nI was\
      \ going through my level in zone view, and the tops of those two semisolids\
      \ had vanished on my latest rebuild. As I moved around, I went out into solid\
      \ space to get a better look, and the polys appeared &ndash; but in the wrong\
      \ zone colour!! :eek:\n\nI'm fairly sure that this doesn't always happen with\
      \ Semisolid Poly Vanish &ndash; I seem to remember that usually the face is\
      \ simply absent no matter where it's viewed from (I'm not about to test that\
      \ though!)\n\nThis does raise an interesting point, that on this occasion, the\
      \ semisolid face is THERE... but it's been listed as belonging to the wrong\
      \ zone.\n\nI hereby name this phenomenon the Semisolid Zone Error, a special\
      \ case of SPV :D\n\n[[Category:Legacy Mapping|{{PAGENAME}}]]"
  properties: []
  revId: 7389
name: "Legacy:Semisolid Theories"
revision:
  revid: 7389
  parentid: 7391
  user: "Mychaeel"
  timestamp: 1053853393.000000000
  comment: "[[Category Mapping]]"
timestamp: 1668775217.864080000
