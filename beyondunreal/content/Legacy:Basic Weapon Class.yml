---
parse:
  title: "Legacy:Basic Weapon Class"
  text:
    text: "<p><b>PLEASE NOTE:</b> This page is finished, at least, <a href=\"/Legacy:Computergod666\"\
      \ title=\"Legacy:Computergod666\">computergod666</a> thinks so. You are free\
      \ to add content at any time if you find something's missing.</p>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Creating_Unreal_Weapons\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Creating Unreal\
      \ Weapons</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Creating_a_new_TournamentWeapon\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Creating a new TournamentWeapon</span></a>\n<ul>\n<li class=\"\
      toclevel-2 tocsection-3\"><a href=\"#The_firing_routines\"><span class=\"tocnumber\"\
      >2.1</span> <span class=\"toctext\">The firing routines</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-4\"><a href=\"#Ammo\"><span class=\"tocnumber\"\
      >2.2</span> <span class=\"toctext\">Ammo</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Adding_meshes\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Adding meshes</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-6\"><a href=\"#Animations\"><span class=\"tocnumber\">2.4</span>\
      \ <span class=\"toctext\">Animations</span></a></li>\n</ul>\n</li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Creating_Unreal_Weapons\"\
      >Creating Unreal Weapons</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_Weapon_Class?section=1\"\
      \ title=\"Edit section: Creating Unreal Weapons\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>As far as I know, everything is the same for Weapons\
      \ as TournamentWeapons (except for a few things like replication.)</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Creating_a_new_TournamentWeapon\">Creating a new\
      \ TournamentWeapon</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_Weapon_Class?section=2\" title=\"Edit\
      \ section: Creating a new TournamentWeapon\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"The_firing_routines\"\
      >The firing routines</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Basic_Weapon_Class?section=3\" title=\"Edit\
      \ section: The firing routines\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Every weapon needs at least two firing modes. These\
      \ are covered by two functions in the TournamentWeapon class:</p>\n<pre>function\
      \ Fire(float Value)</pre>\n<p>and</p>\n<pre>function AltFire(float Value)</pre>\n\
      <p>. These functions are set up so that you can simply specify whether the weapon\
      \ is an instant hit weapon or if it fires projectiles, and what the class for\
      \ Projectile and Alt Projectile are. These three values are specified by the\
      \ variables \"bInstantHit\", \"ProjectileClass\", and \"AltProjectileClass\"\
      . You can choose to use these functions and finish your weapon as is, but that's\
      \ never as interesting as writing these routines yourself.</p>\n<p>Fire looks\
      \ something like this in TournamentWeapon:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> Fire<span class=\"br0\">(</span> <span\
      \ class=\"kw5\">float</span> Value <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"br0\">(</span>AmmoType <span class=\"sy0\">==</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span>AmmoName <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \ <span class=\"br0\">{</span>\n  <span class=\"co1\">// ammocheck</span>\n\
      \  GiveAmmo<span class=\"br0\">(</span><span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Owner</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>AmmoType.<span class=\"\
      me0\">UseAmmo</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n\
      \  <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'NormalFire'</span><span class=\"br0\">)</span>;\n  bPointing<span class=\"\
      sy0\">=</span><span class=\"kw6\">True</span>;\n  bCanClientFire <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n  ClientFire<span class=\"\
      br0\">(</span>Value<span class=\"br0\">)</span>;\n  <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>bInstantHit <span class=\"sy0\">==</span> <span\
      \ class=\"kw6\">true</span><span class=\"br0\">)</span>\n   TraceFire<span class=\"\
      br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw2\">else</span>\n   ProjectileFire<span class=\"br0\">(</span>ProjectileClass,\
      \ ProjSpeed, <span class=\"kw6\">false</span><span class=\"br0\">)</span>;\n\
      \ <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>The ammocheck code is not really important right now. However, you can use\
      \ it for a weapon that is not supposed to run out of ammo, to give the player\
      \ more ammo.</p>\n<p>The line that says \"(if AmmoType.UseAmmo(1))\" attempts\
      \ to use 1 unit of ammunition. If you are out of ammo, this fails and the weapon\
      \ doesn't fire.</p>\n<p>The line that begins with GoToState('NormalFire'); tells\
      \ the weapon to activate that state. In TournamentWeapon, this state temporarily\
      \ disables forcing bots or players to fire, and allows the user to add handling\
      \ for things that need to happen before, during, or after firing. See <a href=\"\
      /edit/Legacy:Chainguns_And_Shotguns?redlink=1\" class=\"new\" title=\"Legacy:Chainguns\
      \ And Shotguns (page does not exist)\">Chainguns and Shotguns</a> for more on\
      \ using firing states.</p>\n<p>The next three lines starting after GoToState('NormalFire')\
      \ are for client/server interaction. We don't need to worry about them right\
      \ now.</p>\n<p>The TournamentWeapon class allows you to simply pick a projectile\
      \ class to fire. If your weapon is a projectile weapon, make sure you set bInstantHit\
      \ to False, and specify the ProjectileClass. Use of TraceFire will be covered\
      \ in <a href=\"/Legacy:Hitscan_Weapons\" title=\"Legacy:Hitscan Weapons\">Hitscan\
      \ weapons</a>. Alternatively, you can simply delete the code for the TraceFire()\
      \ call.</p>\n<p>Please note that setting the ProjSpeed value for ProjectileFire\
      \ will not change the speed of the projectile. This parameter is just for bots\
      \ to adjust their aim to compensate for moving targets.</p>\n<p>The same things\
      \ are true for AltFire.</p>\n<h3><span class=\"mw-headline\" id=\"Ammo\">Ammo</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Basic_Weapon_Class?section=4\" title=\"Edit section: Ammo\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>So\
      \ we made the weapon use 1 unit of ammo per shot. That ammo has to come from\
      \ somewhere! The AmmoName property is a class name that specifies what ammo\
      \ class to use. The maximum amount of ammo you can carry is determined by the\
      \ ammo class itself, but you can specify how much ammo you want to be in the\
      \ gun when you pick it up. That is set by the PickupAmmoCount property. This\
      \ can be any positive integer value, but if you try to pick up more than you\
      \ can carry, your ammo just tops off.</p>\n<p>So now, you can make a functioning\
      \ weapon. Create a subclass of TournamentWeapon. All you need to put in the\
      \ file are these lines:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyWeapon <span class=\"kw1\">extends</span> TournamentWeapon;\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \ ProjectileClass<span class=\"sy0\">=</span><span class=\"kw1\">Class</span><span\
      \ class=\"st0\">'Botpack.ShockProj'</span>\n AltProjectileClass<span class=\"\
      sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\">'Botpack.WarShell'</span>\n\
      \ bInstantHit<span class=\"sy0\">=</span><span class=\"kw6\">false</span>\n\
      \ AmmoName<span class=\"sy0\">=</span><span class=\"kw1\">Class</span><span\
      \ class=\"st0\">'Botpack.miniammo'</span>\n PickupAmmoCount<span class=\"sy0\"\
      >=</span><span class=\"nu0\">150</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Hehe. That is an extremely overpowered weapon with way too much ammunition.\
      \ Please don't do that: overpowered weapons get boring way too quickly. So pick\
      \ some slightly more sensible values, then compile.</p>\n<p>So now you should\
      \ have a functioning projectile weapon. However, if you put it in a map, you\
      \ will notice that you can't see it. Even if you do manage to pick it up, you\
      \ will not be able to see the first-person model. It will also be completely\
      \ silent when it fires. Now, we need to give it a mesh, then some routines to\
      \ animate it and play firing sounds.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Adding_meshes\">Adding meshes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_Weapon_Class?section=5\"\
      \ title=\"Edit section: Adding meshes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>There are three meshes for every weapon in Unreal\
      \ Tournament:</p>\n<ol>\n<li>The first-person mesh. This mesh is what you see\
      \ when you are using the weapon. It is usually the most detailed version, and\
      \ should include an animation for everything it does.</li>\n<li>The third-person\
      \ mesh. This is what everyone else sees when you are using the weapon. This\
      \ version is usually not as detailed as the first-person mesh, and it includes\
      \ only the animations that you would be able to see well from a distance, like\
      \ firing.</li>\n<li>The pickup mesh. This is what you see on the ground. It\
      \ has no animations because at the most, it is meant to revolve slowly.</li>\n\
      </ol>\n<p>These three meshes are specified by three default variables: PlayerViewMesh,\
      \ PickupMesh, and ThirdPersonMesh. You would specify them like this:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n <span class=\"co1\">//...</span>\n PlayerViewMesh<span\
      \ class=\"sy0\">=</span><span class=\"kw5\">LODMesh</span><span class=\"st0\"\
      >'UnrealI.QuadShotHeld'</span>\n PickupMesh<span class=\"sy0\">=</span><span\
      \ class=\"kw5\">LODMesh</span><span class=\"st0\">'UnrealI.QuadShotPickup'</span>\n\
      \ ThirdPersonMesh<span class=\"sy0\">=</span><span class=\"kw5\">LODMesh</span><span\
      \ class=\"st0\">'UnrealI.flakm'</span>\n <span class=\"co1\">//...</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Next, you need to specify\
      \ the distance the first-person mesh is from the center of the screen. This\
      \ is specified by a vector called PlayerViewOffset. For the vector's components,\
      \ positive X is vertical, toward the top of the screen (!), positive Y is horizontal\
      \ toward the right of the screen, and positive Z is toward yourself. You may\
      \ want to check the mesh itself, and this part usually requires some trial-and-error\
      \ unless you made the mesh yourself. In the example above, I was trying to give\
      \ the Quad Shot some code (It wasn't used in Unreal), but there weren't any\
      \ values for PlayerViewOffset, so I had to figure it out myself. Now you can\
      \ add this line to defaultproperties:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \ <span class=\"co1\">//...</span>\n PlayerViewMesh<span class=\"sy0\">=</span><span\
      \ class=\"kw5\">LODMesh</span><span class=\"st0\">'UnrealI.QuadShotHeld'</span>\n\
      \ PickupMesh<span class=\"sy0\">=</span><span class=\"kw5\">LODMesh</span><span\
      \ class=\"st0\">'UnrealI.QuadShotPickup'</span>\n ThirdPersonMesh<span class=\"\
      sy0\">=</span><span class=\"kw5\">LODMesh</span><span class=\"st0\">'UnrealI.flakm'</span>\n\
      \ PlayerViewOffset<span class=\"sy0\">=</span><span class=\"br0\">(</span>X<span\
      \ class=\"sy0\">=-</span><span class=\"nu0\">15.000</span>,Y<span class=\"sy0\"\
      >=</span><span class=\"nu0\">15.000</span>,Z<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">30.000</span><span class=\"br0\">)</span>\n <span class=\"co1\"\
      >//...</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>One other\
      \ thing you may want to change is a vector called FireOffset. This vector specifies\
      \ where the projectile (or trace) should show up relative to the center of your\
      \ screen, in first-person view. You may have to experiment with this, because\
      \ it will have to match up reasonably well with the muzzle of your weapon.</p>\n\
      <p>Now, you have some meshes for your weapon! Let's make them do something...</p>\n\
      <h3><span class=\"mw-headline\" id=\"Animations\">Animations</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Basic_Weapon_Class?section=6\"\
      \ title=\"Edit section: Animations\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Animation allows you to see the weapon in action.\
      \ Your weapon will need at least two functions to handle animation: PlayFiring()\
      \ and PlayAltFiring(). For most weapons, they contain code that plays an animation\
      \ and a sound. Here is a very generic set of routines:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> PlayFiring<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n <span\
      \ class=\"kw4\">PlayAnim</span><span class=\"br0\">(</span><span class=\"st0\"\
      >'Fire'</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.05</span><span\
      \ class=\"br0\">)</span>;\n <span class=\"kw4\">PlayOwnedSound</span><span class=\"\
      br0\">(</span>FireSound, <span class=\"kw7\">SLOT_Misc</span>, <span class=\"\
      nu0\">1.0</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> PlayAltFiring<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n <span class=\"kw4\"\
      >PlayAnim</span><span class=\"br0\">(</span><span class=\"st0\">'AltFire'</span>,\
      \ <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.05</span><span class=\"\
      br0\">)</span>;\n <span class=\"kw4\">PlayOwnedSound</span><span class=\"br0\"\
      >(</span>AltFireSound, <span class=\"kw7\">SLOT_Misc</span>, <span class=\"\
      nu0\">1.0</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>PlayAnim plays an animation from the mesh you have selected. The\
      \ first parameter is the name of the animation. You can figure this out in the\
      \ UnrealEd mesh browser if you are using an existing mesh, or you should know\
      \ it if you created the mesh yourself. The second parameter is the relative\
      \ playback speed of the animation. A value of 1.0 plays it at 'normal speed',\
      \ 2.0 plays it twice as fast, 0.5 plays it half as fast, etc. The third parameter\
      \ is the amount of time to tween from the previous animation to this one.</p>\n\
      <p>See <a href=\"/Legacy:Actor/Methods\" title=\"Legacy:Actor/Methods\">Actor/Methods</a>\
      \ for more information on PlayAnim and PlayOwnedSound.</p>\n<p><b>A note about\
      \ animation</b></p>\n<p>As I said earlier, there is a first-person and a third-person\
      \ mesh. Playing an animation will animate both meshes: you don't have to make\
      \ one call for each mesh. All you will need is these routines. Of course, you\
      \ can also write your own. The Flak Cannon has a PlayReloading() function which\
      \ it uses after it fires. This type of animation will be discussed in <a href=\"\
      /edit/Legacy:Chainguns_And_Shotguns?redlink=1\" class=\"new\" title=\"Legacy:Chainguns\
      \ And Shotguns (page does not exist)\">Chainguns and shotguns</a>.</p>\n<p>FireSound\
      \ and AltFireSound are defined for every TournamentWeapon. You can set these\
      \ to a sound resource in the defaultproperties section, like this:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n <span class=\"co1\">//...</span>\n PlayerViewMesh<span\
      \ class=\"sy0\">=</span><span class=\"kw5\">LODMesh</span><span class=\"st0\"\
      >'UnrealI.QuadShotHeld'</span>\n PickupMesh<span class=\"sy0\">=</span><span\
      \ class=\"kw5\">LODMesh</span><span class=\"st0\">'UnrealI.QuadShotPickup'</span>\n\
      \ ThirdPersonMesh<span class=\"sy0\">=</span><span class=\"kw5\">LODMesh</span><span\
      \ class=\"st0\">'UnrealI.flakm'</span>\n PlayerViewOffset<span class=\"sy0\"\
      >=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=-</span><span class=\"\
      nu0\">15.000</span>,Y<span class=\"sy0\">=</span><span class=\"nu0\">15.000</span>,Z<span\
      \ class=\"sy0\">=-</span><span class=\"nu0\">30.000</span><span class=\"br0\"\
      >)</span>\n <span class=\"co1\">//...</span>\n FireSound<span class=\"sy0\"\
      >=</span><span class=\"kw5\">Sound</span><span class=\"st0\">'Botpack.AMSD.ImpactAltFireRelease'</span>\n\
      \ AltFireSound<span class=\"sy0\">=</span><span class=\"kw5\">Sound</span><span\
      \ class=\"st0\">'MyPackage.Group1.altfire1'</span>\n <span class=\"co1\">//...</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>You can also define your\
      \ own sounds by adding a line at the top of the file like this:</p>\n<pre>var\
      \ Sound OverheatSound;\n</pre>\n<p>Now, you should have a functioning, firing\
      \ weapon that you can see and pick up ammo for. This is only a projectile weapon.\
      \ To make an instant-hit weapon, read <a href=\"/Legacy:Hitscan_Weapons\" title=\"\
      Legacy:Hitscan Weapons\">Hitscan weapons</a>.</p>\n<p><b>TkoDark</b> I need\
      \ help fixing this i put this weapon in my map and now i cant fix it or get\
      \ rid of it. can you e mail or im me computergod666? When i play the map i can\
      \ pick the weapon up and change to it but it doesnt shoot or do anything, i\
      \ messed up somewhere. I don't know how to fix it. In the editor (ued2.0) it\
      \ is in the search for actors and i can go to it, but i cant see it so i cant\
      \ click on it and delete it. thanks TKO</p>\n<p>Ps where do i get your grenade\
      \ launcher and vehicles? very cool! Email-tkodark@yahoo.com</p>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.131 seconds\nReal time usage: 0.133 seconds\n\
      Preprocessor visited node count: 83/1000000\nPreprocessor generated node count:\
      \ 188/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument\
      \ size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:667-0!*!0!!en!*!* and timestamp 20221118014952 and revision\
      \ id 1959\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Computergod666"
  - ns: 100
    exists: false
    name: "Legacy:Chainguns And Shotguns"
  - ns: 100
    exists: true
    name: "Legacy:Actor/Methods"
  - ns: 100
    exists: true
    name: "Legacy:Hitscan Weapons"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Creating Unreal Weapons"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 178
    anchor: "Creating_Unreal_Weapons"
  - toclevel: 1
    level: "2"
    line: "Creating a new TournamentWeapon"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 326
    anchor: "Creating_a_new_TournamentWeapon"
  - toclevel: 2
    level: "3"
    line: "The firing routines"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 363
    anchor: "The_firing_routines"
  - toclevel: 2
    level: "3"
    line: "Ammo"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 2858
    anchor: "Ammo"
  - toclevel: 2
    level: "3"
    line: "Adding meshes"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 4298
    anchor: "Adding_meshes"
  - toclevel: 2
    level: "3"
    line: "Animations"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Basic_Weapon_Class"
    byteoffset: 6590
    anchor: "Animations"
  displaytitle: "Legacy:Basic Weapon Class"
  iwlinks: []
  wikitext:
    text: "'''PLEASE NOTE:''' This page is finished, at least, [[Legacy:Computergod666|computergod666]]\
      \ thinks so. You are free to add content at any time if you find something's\
      \ missing.\n\n==Creating Unreal Weapons==\n\nAs far as I know, everything is\
      \ the same for Weapons as TournamentWeapons (except for a few things like replication.)\n\
      \n==Creating a new TournamentWeapon==\n\n===The firing routines===\n\nEvery\
      \ weapon needs at least two firing modes. These are covered by two functions\
      \ in the TournamentWeapon class: <pre>function Fire(float Value)</pre>and<pre>function\
      \ AltFire(float Value)</pre>. These functions are set up so that you can simply\
      \ specify whether the weapon is an instant hit weapon or if it fires projectiles,\
      \ and what the class for Projectile and Alt Projectile are. These three values\
      \ are specified by the variables \"bInstantHit\", \"ProjectileClass\", and \"\
      AltProjectileClass\". You can choose to use these functions and finish your\
      \ weapon as is, but that's never as interesting as writing these routines yourself.\n\
      \nFire looks something like this in TournamentWeapon:\n\n<uscript>\nfunction\
      \ Fire( float Value )\n{\n if ( (AmmoType == None) && (AmmoName != None) )\n\
      \ {\n  // ammocheck\n  GiveAmmo(Pawn(Owner));\n }\n if (AmmoType.UseAmmo(1))\n\
      \ {\n  GotoState('NormalFire');\n  bPointing=True;\n  bCanClientFire = true;\n\
      \  ClientFire(Value);\n  if (bInstantHit == true)\n   TraceFire(0.0);\n  else\n\
      \   ProjectileFire(ProjectileClass, ProjSpeed, false);\n }\n}</uscript>\n\n\
      The ammocheck code is not really important right now. However, you can use it\
      \ for a weapon that is not supposed to run out of ammo, to give the player more\
      \ ammo.\n\nThe line that says \"(if AmmoType.UseAmmo(1))\" attempts to use 1\
      \ unit of ammunition. If you are out of ammo, this fails and the weapon doesn't\
      \ fire.\n\nThe line that begins with GoToState('NormalFire'); tells the weapon\
      \ to activate that state. In TournamentWeapon, this state temporarily disables\
      \ forcing bots or players to fire, and allows the user to add handling for things\
      \ that need to happen before, during, or after firing. See [[Legacy:Chainguns\
      \ And Shotguns|Chainguns and Shotguns]] for more on using firing states.\n\n\
      The next three lines starting after GoToState('NormalFire') are for client/server\
      \ interaction. We don't need to worry about them right now.\n\nThe TournamentWeapon\
      \ class allows you to simply pick a projectile class to fire. If your weapon\
      \ is a projectile weapon, make sure you set bInstantHit to False, and specify\
      \ the ProjectileClass. Use of TraceFire will be covered in [[Legacy:Hitscan\
      \ Weapons|Hitscan weapons]]. Alternatively, you can simply delete the code for\
      \ the TraceFire() call.\n\nPlease note that setting the ProjSpeed value for\
      \ ProjectileFire will not change the speed of the projectile. This parameter\
      \ is just for bots to adjust their aim to compensate for moving targets.\n\n\
      The same things are true for AltFire.\n\n===Ammo===\n\nSo we made the weapon\
      \ use 1 unit of ammo per shot. That ammo has to come from somewhere! The AmmoName\
      \ property is a class name that specifies what ammo class to use. The maximum\
      \ amount of ammo you can carry is determined by the ammo class itself, but you\
      \ can specify how much ammo you want to be in the gun when you pick it up. That\
      \ is set by the PickupAmmoCount property. This can be any positive integer value,\
      \ but if you try to pick up more than you can carry, your ammo just tops off.\n\
      \nSo now, you can make a functioning weapon. Create a subclass of TournamentWeapon.\
      \ All you need to put in the file are these lines:\n\n<uscript>class MyWeapon\
      \ extends TournamentWeapon;\n\ndefaultproperties\n{\n ProjectileClass=Class'Botpack.ShockProj'\n\
      \ AltProjectileClass=Class'Botpack.WarShell'\n bInstantHit=false\n AmmoName=Class'Botpack.miniammo'\n\
      \ PickupAmmoCount=150\n}\n</uscript>\n\nHehe. That is an extremely overpowered\
      \ weapon with way too much ammunition. Please don't do that: overpowered weapons\
      \ get boring way too quickly. So pick some slightly more sensible values, then\
      \ compile.\n\nSo now you should have a functioning projectile weapon. However,\
      \ if you put it in a map, you will notice that you can't see it. Even if you\
      \ do manage to pick it up, you will not be able to see the first-person model.\
      \ It will also be completely silent when it fires. Now, we need to give it a\
      \ mesh, then some routines to animate it and play firing sounds.\n\n===Adding\
      \ meshes===\n\nThere are three meshes for every weapon in Unreal Tournament:\n\
      # The first-person mesh. This mesh is what you see when you are using the weapon.\
      \ It is usually the most detailed version, and should include an animation for\
      \ everything it does.\n# The third-person mesh. This is what everyone else sees\
      \ when you are using the weapon. This version is usually not as detailed as\
      \ the first-person mesh, and it includes only the animations that you would\
      \ be able to see well from a distance, like firing.\n# The pickup mesh. This\
      \ is what you see on the ground. It has no animations because at the most, it\
      \ is meant to revolve slowly.\n\nThese three meshes are specified by three default\
      \ variables: PlayerViewMesh, PickupMesh, and ThirdPersonMesh. You would specify\
      \ them like this:\n\n<uscript>defaultproperties\n{\n //...\n PlayerViewMesh=LODMesh'UnrealI.QuadShotHeld'\n\
      \ PickupMesh=LODMesh'UnrealI.QuadShotPickup'\n ThirdPersonMesh=LODMesh'UnrealI.flakm'\n\
      \ //...\n}</uscript>\n\nNext, you need to specify the distance the first-person\
      \ mesh is from the center of the screen. This is specified by a vector called\
      \ PlayerViewOffset. For the vector's components, positive X is vertical, toward\
      \ the top of the screen (!), positive Y is horizontal toward the right of the\
      \ screen, and positive Z is toward yourself. You may want to check the mesh\
      \ itself, and this part usually requires some trial-and-error unless you made\
      \ the mesh yourself. In the example above, I was trying to give the Quad Shot\
      \ some code (It wasn't used in Unreal), but there weren't any values for PlayerViewOffset,\
      \ so I had to figure it out myself. Now you can add this line to defaultproperties:\n\
      \n<uscript>defaultproperties\n{\n //...\n PlayerViewMesh=LODMesh'UnrealI.QuadShotHeld'\n\
      \ PickupMesh=LODMesh'UnrealI.QuadShotPickup'\n ThirdPersonMesh=LODMesh'UnrealI.flakm'\n\
      \ PlayerViewOffset=(X=-15.000,Y=15.000,Z=-30.000)\n //...\n}</uscript>\n\nOne\
      \ other thing you may want to change is a vector called FireOffset. This vector\
      \ specifies where the projectile (or trace) should show up relative to the center\
      \ of your screen, in first-person view. You may have to experiment with this,\
      \ because it will have to match up reasonably well with the muzzle of your weapon.\n\
      \nNow, you have some meshes for your weapon! Let's make them do something...\n\
      \n===Animations===\n\nAnimation allows you to see the weapon in action. Your\
      \ weapon will need at least two functions to handle animation: PlayFiring()\
      \ and PlayAltFiring(). For most weapons, they contain code that plays an animation\
      \ and a sound. Here is a very generic set of routines:\n\n<uscript>function\
      \ PlayFiring()\n{\n PlayAnim('Fire', 1.0, 0.05);\n PlayOwnedSound(FireSound,\
      \ SLOT_Misc, 1.0);\n}\n\nfunction PlayAltFiring()\n{\n PlayAnim('AltFire', 1.0,\
      \ 0.05);\n PlayOwnedSound(AltFireSound, SLOT_Misc, 1.0);\n}</uscript>\n\nPlayAnim\
      \ plays an animation from the mesh you have selected. The first parameter is\
      \ the name of the animation. You can figure this out in the UnrealEd mesh browser\
      \ if you are using an existing mesh, or you should know it if you created the\
      \ mesh yourself. The second parameter is the relative playback speed of the\
      \ animation. A value of 1.0 plays it at 'normal speed', 2.0 plays it twice as\
      \ fast, 0.5 plays it half as fast, etc. The third parameter is the amount of\
      \ time to tween from the previous animation to this one.\n\nSee [[Legacy:Actor/Methods|Actor/Methods]]\
      \ for more information on PlayAnim and PlayOwnedSound.\n\n'''A note about animation'''\n\
      \nAs I said earlier, there is a first-person and a third-person mesh. Playing\
      \ an animation will animate both meshes: you don't have to make one call for\
      \ each mesh. All you will need is these routines. Of course, you can also write\
      \ your own. The Flak Cannon has a PlayReloading() function which it uses after\
      \ it fires. This type of animation will be discussed in [[Legacy:Chainguns And\
      \ Shotguns|Chainguns and shotguns]].\n\nFireSound and AltFireSound are defined\
      \ for every TournamentWeapon. You can set these to a sound resource in the defaultproperties\
      \ section, like this:\n\n<uscript>defaultproperties\n{\n //...\n PlayerViewMesh=LODMesh'UnrealI.QuadShotHeld'\n\
      \ PickupMesh=LODMesh'UnrealI.QuadShotPickup'\n ThirdPersonMesh=LODMesh'UnrealI.flakm'\n\
      \ PlayerViewOffset=(X=-15.000,Y=15.000,Z=-30.000)\n //...\n FireSound=Sound'Botpack.AMSD.ImpactAltFireRelease'\n\
      \ AltFireSound=Sound'MyPackage.Group1.altfire1'\n //...\n}</uscript>\n\nYou\
      \ can also define your own sounds by adding a line at the top of the file like\
      \ this:\n var Sound OverheatSound;\n\nNow, you should have a functioning, firing\
      \ weapon that you can see and pick up ammo for. This is only a projectile weapon.\
      \ To make an instant-hit weapon, read [[Legacy:Hitscan Weapons|Hitscan weapons]].\n\
      \n'''TkoDark''' I need help fixing this i put this weapon in my map and now\
      \ i cant fix it or get rid of it. can you  e mail or im me computergod666? When\
      \ i play the map i can pick the weapon up and change to it but it doesnt shoot\
      \ or do anything, i messed up somewhere. I don't know how to fix it. In the\
      \ editor (ued2.0) it is in the search for actors and i can go to it, but i cant\
      \ see it so i cant click on it and delete it. thanks TKO \n\nPs where do i get\
      \ your grenade launcher and vehicles? very cool! Email-tkodark@yahoo.com"
  properties: []
  revId: 1959
name: "Legacy:Basic Weapon Class"
revision:
  revid: 1959
  parentid: 1962
  user: "Tkodark"
  timestamp: 1206423198.000000000
  comment: "*"
timestamp: 1668764283.064728000
