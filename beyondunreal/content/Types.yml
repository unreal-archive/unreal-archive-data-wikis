---
parse:
  title: "Types"
  text:
    text: "<p><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a> is\
      \ a strongly-typed language and has various built-in data types. UnrealScript\
      \ types can be divided in three general groups: primitive types, reference types\
      \ and composite types.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"\
      toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"\
      ><a href=\"#Primitive_types\"><span class=\"tocnumber\">1</span> <span class=\"\
      toctext\">Primitive types</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Int\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >Int</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Byte\"\
      ><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Byte</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Bool\"><span class=\"tocnumber\"\
      >1.3</span> <span class=\"toctext\">Bool</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Float\"><span class=\"tocnumber\">1.4</span> <span\
      \ class=\"toctext\">Float</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#String\"><span class=\"tocnumber\">1.5</span> <span class=\"toctext\"\
      >String</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Name\"\
      ><span class=\"tocnumber\">1.6</span> <span class=\"toctext\">Name</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Enum\"><span class=\"tocnumber\"\
      >1.7</span> <span class=\"toctext\">Enum</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-9\"><a href=\"#Reference_types\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Reference types</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Object\"><span class=\"tocnumber\"\
      >2.1</span> <span class=\"toctext\">Object</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Actor\"><span class=\"tocnumber\">2.2</span> <span\
      \ class=\"toctext\">Actor</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"\
      ><a href=\"#Interface\"><span class=\"tocnumber\">2.3</span> <span class=\"\
      toctext\">Interface</span></a></li>\n<li class=\"toclevel-2 tocsection-13\"\
      ><a href=\"#Class\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\"\
      >Class</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"#Delegate\"\
      ><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">Delegate</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#Pointer\"><span class=\"tocnumber\"\
      >2.6</span> <span class=\"toctext\">Pointer</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-16\"><a href=\"#Composite_types\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Composite types</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#Struct\"><span class=\"tocnumber\"\
      >3.1</span> <span class=\"toctext\">Struct</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-18\"><a href=\"#Static_array\"><span class=\"tocnumber\">3.2</span>\
      \ <span class=\"toctext\">Static array</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-19\"><a href=\"#Dynamic_array\"><span class=\"tocnumber\">3.3</span>\
      \ <span class=\"toctext\">Dynamic array</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-20\"><a href=\"#Multi-dimensional_arrays\"><span class=\"tocnumber\"\
      >3.4</span> <span class=\"toctext\">Multi-dimensional arrays</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-21\"><a href=\"#Map\"><span class=\"tocnumber\"\
      >3.5</span> <span class=\"toctext\">Map</span></a></li>\n</ul>\n</li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Primitive_types\">Primitive\
      \ types</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=1\" title=\"Edit section: Primitive types\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>A primitive\
      \ type only consists of a single and usually simple value. Variables declared\
      \ of a primitive type directly contain that value and when assigning that value\
      \ to another variable or passing it to a function call, a new copy of the value\
      \ is created. Modifications to that copy have absolutely no effect on the original\
      \ value still stored in the source variable.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Int\">Int</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=2\" title=\"Edit section: Int\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript has\
      \ two integer types and <b>int</b> is the larger of them. Int values are integer\
      \ numbers in the range -2147483648 to 2147483647, in other words signed 32 bit\
      \ values.</p>\n<p><a href=\"/Literals#Integer_numbers\" title=\"Literals\">Int\
      \ literals</a> can be specified in decimal or hexadecimal notation. Values exceeding\
      \ the allowed range are truncated to the least significant 32 bits. For example\
      \ the hexadecimal literal 0x100000005 actually represents the value 5.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Byte\">Byte</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=3\"\
      \ title=\"Edit section: Byte\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The smaller of UnrealScript's two integer types is\
      \ <b>byte</b>. Byte values are integer numbers in the range 0 to 255, in other\
      \ words unsigned 8 bit values.</p>\n<p>Any <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">int literal</a> can also be used in \"byte context\". If\
      \ the value is outside the allowed range it will be truncated to the 8 least\
      \ significant bits. For example the hexadecimal literal 0x100 (256) actually\
      \ represents the value 0 and the decimal literal -1 represents the value 255.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Bool\">Bool</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=4\"\
      \ title=\"Edit section: Bool\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealScript's <a href=\"http://en.wikipedia.org/wiki/boolean\"\
      \ class=\"extiw\" title=\"wp:boolean\">boolean</a> type is <b>bool</b> and allows\
      \ the values <i>true</i> and <i>false</i>. These are also the names of the <a\
      \ href=\"/Literals#Boolean_values\" title=\"Literals\">boolean literals</a>.</p>\n\
      <p>The bool type has some restrictions in UnrealScript. For example it's not\
      \ possible to declare <a href=\"#Static_array\">static</a> or <a href=\"#Dynamic_array\"\
      >dynamic arrays</a> of bool values in <a href=\"/Unreal_Engine\" title=\"Unreal\
      \ Engine\" class=\"mw-redirect\">Unreal Engine</a> generations 1 and 2 or to\
      \ use the parameter modifier \"out\" on bool parameters in <a href=\"/edit/Function_declaration?redlink=1\"\
      \ class=\"new\" title=\"Function declaration (page does not exist)\">function\
      \ declarations</a>. Starting with Unreal Engine 3 dynamic arrays of bool are\
      \ supported, even though the <a href=\"http://udn.epicgames.com/Three/UnrealScriptReference\"\
      \ class=\"extiw\" title=\"udn3:UnrealScriptReference\">UnrealScript reference\
      \ on UDN</a> disagrees.</p>\n<h3><span class=\"mw-headline\" id=\"Float\">Float</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=5\" title=\"Edit section: Float\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>UnrealScript has\
      \ a <a href=\"http://en.wikipedia.org/wiki/single_precision\" class=\"extiw\"\
      \ title=\"wp:single precision\">single precision</a> <a href=\"http://en.wikipedia.org/wiki/floating_point\"\
      \ class=\"extiw\" title=\"wp:floating point\">floating point</a> type called\
      \ <b>float</b>. The possible float values are distributed over the huge range\
      \ of about 3.403·10<sup>38</sup> to -3.403·10<sup>38</sup>. The smallest possible\
      \ value greater than 0 is about 1.175·10<sup>-38</sup>. Generally, float values\
      \ have a precision of about 6 or 7 decimal digits.</p>\n<p><a href=\"/Literals#Float_numbers\"\
      \ title=\"Literals\">Float literals</a> can either be specified in decimal or\
      \ scientific notation. For example the literal 1.2e3 means 1.2·10<sup>3</sup>\
      \ = 1200. Note that float literals must always contain the decimal point, even\
      \ when using scientific notation, and must always start with a number or with\
      \ the minus sign followed by a number. Unfortunately, negative exponents are\
      \ not allowed in scientific notation. A hexadecimal representation like in Java\
      \ is not supported.</p>\n<p>If a floating point operation has a result that\
      \ exceeds the highest or lowest possible number, the return value has the special\
      \ value of positive or negative infinity respectively. Invalid operations such\
      \ as division by zero or adding positive and negative infinity return the special\
      \ value <i>NaN</i>, \"Not a Number\". Be careful about those three special values\
      \ as they will propagate. That means, if you subtract, add, multiply or divide\
      \ infinity values, the result will be infinity again. If you perform an operation\
      \ with the <i>NaN</i> value, the result will either be <i>NaN</i> again or (for\
      \ comparison operators) something totally unexpected. For example if you perform\
      \ the operation <code>a = x / 0</code>, variable a will contain <i>NaN</i>.\
      \ Now the comparison <code>a == a</code> will actually return the value <i>false</i>!\
      \ Unlike <i>NaN</i>, infinity values will behave as expected if used in comparison\
      \ operations, that is positive infinity is greater than any other value, negative\
      \ infinity is smaller than any other value.</p>\n<p><i>Technical information:</i>\
      \ As specified in the <a href=\"http://en.wikipedia.org/wiki/IEEE_floating-point_standard\"\
      \ class=\"extiw\" title=\"wp:IEEE floating-point standard\">IEEE floating-point\
      \ standard</a>, the float type internally has a length of 32 bits and consists\
      \ of a 23 bit fraction part, an 8 bit exponent and one sign bit. Especially\
      \ the 23 bit fraction part (called the \"mantissa\") imposes a limit on floating\
      \ point precision. When large int values greater than 2<sup>23</sup> or smaller\
      \ than -2<sup>23</sup> are <a href=\"/Typecast\" title=\"Typecast\" class=\"\
      mw-redirect\">typecasted</a> to float, they may get rounded.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"String\">String</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=6\"\
      \ title=\"Edit section: String\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>UnrealScript has a character string data type called\
      \ <b>string</b>. Strings can contain any combination of <a href=\"http://en.wikipedia.org/wiki/Unicode\"\
      \ class=\"extiw\" title=\"wp:Unicode\">Unicode</a> characters.</p>\n<p><a href=\"\
      /Literals#Strings\" title=\"Literals\">String literals</a> are enclosed in double\
      \ quotes and may not extends past the end of a line. Technically string literals\
      \ (but not values) are allowed to have a length of up to 1023 characters. Internally\
      \ strings are zero-terminated, which means no string can contain the null character\
      \ because it would be recognized as the end of the string.</p>\n<p>String values\
      \ are immutable and UnrealScript neither provides \"character\" type nor allows\
      \ direct access to individual string characters. There are, however, functions\
      \ for extracting substrings and returning the Unicode value of the first character\
      \ of a string. There's also a function for returning a string of length 1 containing\
      \ a character corresponding to a specified Unicode value.</p>\n<p>Very early\
      \ builds of <a href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"\
      Unreal Engine 1 (page does not exist)\">Unreal Engine 1</a> had a fixed-length\
      \ string type, which was declared with the syntax <code>string[<i>length</i>]</code>.\
      \ This type is no longer supported and only mentioned here in case you run into\
      \ its declaration in old code snippets.</p>\n<p>In <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine\
      \ 2</a> (or at least <a href=\"/UT2004\" title=\"UT2004\" class=\"mw-redirect\"\
      >UT2004</a>) there also is an undocumented type called <b>button</b> that is\
      \ an alias for the standard string type, but implies the <a href=\"/Cache\"\
      \ title=\"Cache\" class=\"mw-redirect\">Cache</a> variable modifier. It is not\
      \ actually used in stock code and there's no reason for you to ever declare\
      \ a variable with the <i>cache</i> modifier, so this is purely informative.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Name\">Name</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=7\"\
      \ title=\"Edit section: Name\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The data type <b>name</b> is a very unusual one. To\
      \ the programmer it appears a lot like a case-insensitive string with very limited\
      \ character set. Every object and every class has a name, but names are also\
      \ used for a variety of other things, such as identifying <a href=\"/States\"\
      \ title=\"States\">states</a>, code <a href=\"/edit/Labels?redlink=1\" class=\"\
      new\" title=\"Labels (page does not exist)\">labels</a>, trigger events or bones\
      \ of a <a href=\"/edit/Skeletal_mesh?redlink=1\" class=\"new\" title=\"Skeletal\
      \ mesh (page does not exist)\">skeletal mesh</a>.</p>\n<p><a href=\"/Literals#Names\"\
      \ title=\"Literals\">Name literals</a> are enclosed in single quotes and may\
      \ contain the letters A to Z, both upper and lowercase, the numbers 0 to 9,\
      \ the underscore character _, the hyphen character -, and the space character.\
      \ This could be represented in <a href=\"http://en.wikipedia.org/wiki/regular_expression\"\
      \ class=\"extiw\" title=\"wp:regular expression\">regex</a> as <code>([a-zA-Z0-9_\\\
      - ]*)</code>. Names are limited to a length of up to 63 characters.</p>\n<p>Internally\
      \ names are represented as int values, which makes sense since names are used\
      \ in many places and would take up a lot of space if represented as strings.\
      \ At runtime, the first mentioned string representation of a name is stored\
      \ in the global name table. Whenever a name value is to a string through <a\
      \ href=\"/Typecasting\" title=\"Typecasting\">typecasting</a>, the string representation\
      \ from the name table is used. This means that even though you could use the\
      \ name literal <code>'cOnTrOlLeR'</code> in your code, it would most likely\
      \ be represented by the string <code>Controller</code> instead, because that's\
      \ the spelling used for the name of the class with that name.</p>\n<p>Newer\
      \ builds of the <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal\
      \ Engine 3</a> provides an additional way for specifying values of type name\
      \ via the <b>NameOf</b>() pseudo-function. Similar to the <a href=\"/ArrayCount\"\
      \ title=\"ArrayCount\" class=\"mw-redirect\">ArrayCount</a>() pseudo-function,\
      \ NameOf() is replaced with a name constant by the compiler. The parameter for\
      \ NameOf() is either a variable or function name for use in ReplicatedEvent()\
      \ or with the various Timer management functions.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Enum\">Enum</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=8\" title=\"Edit section: Enum\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dd><i>Main article:\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a></i></dd>\n</dl>\n<p>An <b>enum</b>\
      \ type is a named list of identifiers that act as <a href=\"/Literals#Enums\"\
      \ title=\"Literals\">literals</a> for the values of the enum type. UnrealScript's\
      \ enumerated types are a bit like \"glorified integer values\", similar to C++\
      \ enumerations. The first value of an enum type corresponds to 0, the second\
      \ value to 1, and so on.</p>\n<h2><span class=\"mw-headline\" id=\"Reference_types\"\
      >Reference types</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=9\" title=\"Edit section: Reference types\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Unlike\
      \ <a href=\"/Variables\" title=\"Variables\">variables</a> of primitive types,\
      \ variables declared as a reference type only contain a <a href=\"http://en.wikipedia.org/wiki/reference_(computer_science)\"\
      \ class=\"extiw\" title=\"wp:reference (computer science)\">reference</a> to\
      \ the actual data. When assigning a reference type value to a variable or passing\
      \ it to function calls, only the reference, not the referenced data, is copied.\
      \ As a result it is possible that two reference type variables point to the\
      \ same data and changes made to the data through one variable are immediately\
      \ visible through the other.</p>\n<h3><span class=\"mw-headline\" id=\"Object\"\
      >Object</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=10\" title=\"Edit section: Object\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>An object reference\
      \ does not contain an object, it only points to (i.e. \"reference\") an instance\
      \ of an object. That means the object reference's value actually is a pointer,\
      \ not an object. Different object references may point to the same object. An\
      \ object reference may also point to no object at all.</p>\n<p>Object references\
      \ can be restricted to instances of a certain class. For example, an object\
      \ reference might only accept instances of the class WebApplication, which also\
      \ includes instances of WebApplication subclasses like UTServerAdmin.</p>\n\
      <p><a href=\"/Literals#Objects\" title=\"Literals\">Object literals</a> start\
      \ with the name of the object's class, followed by the qualified or unqualified\
      \ name of the object instance to reference, enclosed in single quotes. It is\
      \ also possible to specify a literal for the empty object reference with the\
      \ keyword <code>None</code>. Another special object literal is the keyword <code>Self</code>,\
      \ which references the object instance executing the current function or state\
      \ code. It is not available in <a href=\"/Static_functions\" title=\"Static\
      \ functions\" class=\"mw-redirect\">static functions</a>, because those functions\
      \ are not executed in the context of an object instance but of an object class.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Actor\">Actor</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=11\"\
      \ title=\"Edit section: Actor\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Actor references are basically the same as object\
      \ references, just restricted to Actor or one of its subclasses. The only difference\
      \ to non-actor references is, that the Actor class provides a <i>Destroy</i>\
      \ method. This method not only gets rid of the actor instance it was called\
      \ on, but also implicitly sets all references to that actor instance to <i>none</i>.</p>\n\
      <p>Most of your object references will probably be actor references, but apart\
      \ from <i>None</i> and <i>Self</i> you will rarely encounter object literals\
      \ of type Actor or one of its subclasses. In fact, Actor-type object literals\
      \ are forbidden in UnrealScript code prior to <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a>. Mappers sometimes see actor literals\
      \ in the property window of various level objects, but UnrealScript programmers\
      \ usually won't use them. Most actor literals in Unreal Engine 3 source code\
      \ are <a href=\"/Archetypes\" title=\"Archetypes\" class=\"mw-redirect\">archetypes</a>\
      \ in exported <a href=\"/Defaultproperties\" title=\"Defaultproperties\">defaultproperties</a>\
      \ blocks.</p>\n<h3><span class=\"mw-headline\" id=\"Interface\">Interface</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=12\" title=\"Edit section: Interface\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dd><i>Main article:\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a></i></dd>\n</dl>\n\
      <p>Interface references are also object references, but restricted to an interface\
      \ type. This kind of reference can point to any object instance of a class <a\
      \ href=\"/Implements\" title=\"Implements\" class=\"mw-redirect\">implementing</a>\
      \ that interface.</p>\n<h3><span class=\"mw-headline\" id=\"Class\">Class</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=13\" title=\"Edit section: Class\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dd><i>Main article:\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a></i></dd>\n</dl>\n<p>A class\
      \ reference is very similar to an object reference, except that it is restricted\
      \ to the type Class. Class references can be further restricted to a certain\
      \ meta class, that means the type of referenced class. Such a restricted class\
      \ reference is called a <b>class limiter</b> and is denoted by the keyword <code>Class</code>\
      \ followed by the name of the meta class in angle brackets. For example <code>class&lt;Info&gt;</code>\
      \ denotes a reference that can point to the class Info or one of its subclasses.</p>\n\
      <p>Class literals are specified in the same way as other object literals. The\
      \ type of reference, here <i>class</i>, followed by the class name, optionally\
      \ qualified with the containing package name, and enclosed in single quotes.\
      \ For example <code>class'Info'</code> or <code>class'Engine.Info'</code> references\
      \ the Info class located in the Engine package. The special object literal <i>None</i>\
      \ can be used for class references and means \"no class\".</p>\n<p>One important\
      \ restriction of class references is the lack of interface support. Classes\
      \ implementing a certain interface can be anywhere in the class hierarchy, but\
      \ class limiters only support direct inheritance. This means, that if you want\
      \ a reference to classes implementing a certain interface, you need to use a\
      \ generic class reference or the class limiter <code>class&lt;Object&gt;</code>.\
      \ A reference of type <code>class&lt;Interface&gt;</code> would only allow references\
      \ to the interface class itself (or any of its subinterfaces), but not to any\
      \ class implementing the interface!</p>\n<h3><span class=\"mw-headline\" id=\"\
      Delegate\">Delegate</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=14\" title=\"Edit section: Delegate\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dd><i>Main article: <a href=\"/Delegates\" title=\"Delegates\">Delegates</a></i></dd>\n\
      </dl>\n<p>Delegates were introduced in Unreal Engine 2 and are <b>function references</b>.\
      \ In Unreal Engine 2, delegates could only be declared using function syntax\
      \ and replacing the keyword <i>Function</i> with the keyword <i>Delegate</i>.\
      \ Unreal Engine 3 also provides a notation similar to class limiters or dynamic\
      \ arrays that can be used as variable or parameter type. This notation starts\
      \ with the keyword <code>Delegate</code>, followed by the name of a prototype\
      \ delegate function declaration in angle brackets.</p>\n<p><a href=\"/Literals#Functions\"\
      \ title=\"Literals\">Function literals</a> are only used for delegate assignments\
      \ and look more like a variable access than a literal. Basically you reference\
      \ the object instance containing the function you want to assign to a delegate\
      \ property (unless, of course, the function is contained in the same object\
      \ instance as the code doing the assignment), followed by a dot and the pure\
      \ function name without anything afterwards. As with object references, the\
      \ keyword <i>None</i> means \"no function\". For delegate function declarations\
      \ this means the default body, if available, is executed when the delegate is\
      \ called.</p>\n<h3><span class=\"mw-headline\" id=\"Pointer\">Pointer</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=15\" title=\"Edit section: Pointer\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Also starting with\
      \ Unreal Engine 2, UnrealScript has a generic <a href=\"http://en.wikipedia.org/wiki/Pointer_(computing)\"\
      \ class=\"extiw\" title=\"wp:Pointer (computing)\">pointer</a> data type, but\
      \ it only serves as a placeholder for pointer variables in <a href=\"/edit/Native_code?redlink=1\"\
      \ class=\"new\" title=\"Native code (page does not exist)\">native code</a>.\
      \ UnrealScript itself provides no way to access or modify pointer properties.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Composite_types\">Composite types</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=16\" title=\"Edit section: Composite types\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Unlike all the other\
      \ types described above, a composite type can contain more than one value. The\
      \ composite types available in UnrealScript all work similar to primitive types:\
      \ assigning them to other variables or passing them in function calls creates\
      \ a copy of the data.</p>\n<h3><span class=\"mw-headline\" id=\"Struct\">Struct</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=17\" title=\"Edit section: Struct\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dd><i>Main article:\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a></i></dd>\n</dl>\n<p>Structs\
      \ (or structures) are a composition of a fixed number of values that may have\
      \ different types. Struct types are no reference types, that means they are\
      \ stored directly in the variable and copied as a whole when assigned to variables\
      \ or passed as function parameters or returned as function result. Struct values\
      \ are always replicated as a unit, but for a few structs like vector or rotator\
      \ replication is not accurate due to bandwidth optimizations. Struct values\
      \ may not be allowed for replication if the struct type is too large to fit\
      \ in one network packet.</p>\n<p>Except for <a href=\"/Literals#Vectors\" title=\"\
      Literals\">vectors</a> and <a href=\"/Literals#Rotators\" title=\"Literals\"\
      >rotators</a>, there is no way to specify a complete struct value directly in\
      \ code.</p>\n<h3><span class=\"mw-headline\" id=\"Static_array\">Static array</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Types?section=18\" title=\"Edit section: Static array\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dd><i>Main article:\
      \ <a href=\"/Static_arrays\" title=\"Static arrays\">Static arrays</a></i></dd>\n\
      </dl>\n<p>Static arrays are a composition of a fixed number of values with identical\
      \ type. Static arrays can be passed as a whole as function parameters, though\
      \ this will cause all values to be copied. They can't be assigned to variables\
      \ or returned as function results, though. For replication, each element is\
      \ considered separately. It is not possible to declare a static array of type\
      \ bool or of a dynamic array type. Static arrays of a struct type containing\
      \ bools or dynamic arrays are no problem, though. There are no literals for\
      \ static arrays.</p>\n<h3><span class=\"mw-headline\" id=\"Dynamic_array\">Dynamic\
      \ array</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=19\" title=\"Edit section: Dynamic array\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<dl>\n\
      <dd><i>Main article: <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a></i></dd>\n</dl>\n<p>Dynamic arrays are also a composition of multiple\
      \ values of the same type, but the actual number of values may change over time.\
      \ Dynamic arrays can be assigned to variables, passed as function parameters\
      \ and returned as function results, but every time the entire array is copied.\
      \ They do not support replication at all.</p>\n<p>In <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a>, dynamic arrays can be declared, but there's no way to access them.\
      \ Only starting with <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\"\
      >Unreal Engine 3</a>, dynamic arrays of type bool can be used. (You can declare\
      \ dynamic bool arrays in Unreal Engine 2, but they don't work.) It is not possible\
      \ to directly use a dynamic array type in other static or dynamic arrays. It\
      \ is possible to wrap other arrays or bool variables in a struct type and create\
      \ a dynamic array of that struct type, though. Function parameters that are\
      \ dynamic arrays may not be optional. There are no literals for dynamic arrays.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Multi-dimensional_arrays\">Multi-dimensional\
      \ arrays</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Types?section=20\" title=\"Edit section: Multi-dimensional\
      \ arrays\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dd><i>Main article: <a href=\"/Multi-dimensional_arrays\" title=\"Multi-dimensional\
      \ arrays\">multi-dimensional arrays</a></i></dd>\n</dl>\n<p>Multi-dimensional\
      \ and jagged arrays are not supported in UnrealScript. You can work around that\
      \ either by using an array of <a href=\"/Structs\" title=\"Structs\">structs</a>\
      \ that contain an array or by performing index arithmetics on any kind of one-dimensional\
      \ array.</p>\n<h3><span class=\"mw-headline\" id=\"Map\">Map</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Types?section=21\"\
      \ title=\"Edit section: Map\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>See <a href=\"http://en.wikipedia.org/wiki/Associative_array\"\
      \ class=\"extiw\" title=\"wp:Associative array\">Associative array</a>, <a href=\"\
      http://en.wikipedia.org/wiki/Map_(C%2B%2B)\" class=\"extiw\" title=\"wp:Map\
      \ (C++)\">C++ Map</a> and <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://www.google.be/search?q=c%23+dictionary\">C# Dictionary</a>.</p>\n<p>In\
      \ <a href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"Unreal Engine\
      \ 1 (page does not exist)\">Unreal Engine 1</a> and 2 you cannot use this feature\
      \ yet so says the compiler error (<i>Error, Map are not supported in UnrealScript\
      \ yet</i>).</p>\n<p>In <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\"\
      >Unreal Engine 3</a> you can declare maps however you cannot access them yet\
      \ with UnrealScript.</p>\n<table class=\"navbox nowraplinks\" style=\"\">\n\
      <tr class=\"navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\" style=\"\
      \">\n<div style=\"position:relative; width:100%; white-space:nowrap;\">\n<div\
      \ class=\"noprint plainlinks\" style=\"background-color:transparent; padding:0;\
      \ font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><strong class=\"selflink\">Types</strong></th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a\
      \ href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"\
      /Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\"\
      \ title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"\
      Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\" title=\"String\"\
      >string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"Types\">Object</a>&#160;•\
      \ <a href=\"/Class_limiter#Class\" title=\"Class limiter\" class=\"mw-redirect\"\
      >Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"\
      /Structs\" title=\"Structs\">Structs</a>&#160;(<a href=\"/Vector\" title=\"\
      Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅\
      \ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a\
      \ href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"/Static_arrays\"\
      \ title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"/Dynamic_arrays\"\
      \ title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"/Delegates\"\
      \ title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\" title=\"\
      Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body odd\">\n\
      <th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"Literals\"\
      >Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Literals#Boolean_values\"\
      \ title=\"Literals\">Boolean</a>&#160;• <a href=\"/Literals#Float_numbers\"\
      \ title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.152 seconds\nReal time usage: 0.158 seconds\nPreprocessor\
      \ visited node count: 352/1000000\nPreprocessor generated node count: 1196/1000000\n\
      Post‐expand include size: 10965/2097152 bytes\nTemplate argument size: 4373/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   38.405      1 - -total\n 63.44%   24.366      1 - Template:Navbox_unrealscript\n\
      \ 44.83%   17.217      1 - Template:Navbox\n 24.29%    9.330      8 - Template:Main\n\
      \  8.49%    3.260      1 - Template:Tnavbar\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:4791-0!*!0!!en!*!* and timestamp 20221118002558\
      \ and revision id 46197\n -->\n"
  categories:
  - sortkey: "Types"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: false
    name: "Native code"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Unreal Engine"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "UT2004"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: false
    name: "Function declaration"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Archetypes"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Implements"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "None"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: false
    name: "Labels"
  - ns: 0
    exists: true
    name: "Static functions"
  - ns: 0
    exists: true
    name: "Typecast"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Multi-dimensional arrays"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Cache"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "ArrayCount"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: false
    name: "Skeletal mesh"
  templates:
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Main"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  images: []
  externallinks:
  - "http://www.google.be/search?q=c%23+dictionary"
  sections:
  - toclevel: 1
    level: "2"
    line: "Primitive types"
    number: "1"
    index: "1"
    fromtitle: "Types"
    byteoffset: 197
    anchor: "Primitive_types"
  - toclevel: 2
    level: "3"
    line: "Int"
    number: "1.1"
    index: "2"
    fromtitle: "Types"
    byteoffset: 586
    anchor: "Int"
  - toclevel: 2
    level: "3"
    line: "Byte"
    number: "1.2"
    index: "3"
    fromtitle: "Types"
    byteoffset: 1037
    anchor: "Byte"
  - toclevel: 2
    level: "3"
    line: "Bool"
    number: "1.3"
    index: "4"
    fromtitle: "Types"
    byteoffset: 1516
    anchor: "Bool"
  - toclevel: 2
    level: "3"
    line: "Float"
    number: "1.4"
    index: "5"
    fromtitle: "Types"
    byteoffset: 2166
    anchor: "Float"
  - toclevel: 2
    level: "3"
    line: "String"
    number: "1.5"
    index: "6"
    fromtitle: "Types"
    byteoffset: 4550
    anchor: "String"
  - toclevel: 2
    level: "3"
    line: "Name"
    number: "1.6"
    index: "7"
    fromtitle: "Types"
    byteoffset: 6064
    anchor: "Name"
  - toclevel: 2
    level: "3"
    line: "Enum"
    number: "1.7"
    index: "8"
    fromtitle: "Types"
    byteoffset: 7820
    anchor: "Enum"
  - toclevel: 1
    level: "2"
    line: "Reference types"
    number: "2"
    index: "9"
    fromtitle: "Types"
    byteoffset: 8158
    anchor: "Reference_types"
  - toclevel: 2
    level: "3"
    line: "Object"
    number: "2.1"
    index: "10"
    fromtitle: "Types"
    byteoffset: 8658
    anchor: "Object"
  - toclevel: 2
    level: "3"
    line: "Actor"
    number: "2.2"
    index: "11"
    fromtitle: "Types"
    byteoffset: 9808
    anchor: "Actor"
  - toclevel: 2
    level: "3"
    line: "Interface"
    number: "2.3"
    index: "12"
    fromtitle: "Types"
    byteoffset: 10718
    anchor: "Interface"
  - toclevel: 2
    level: "3"
    line: "Class"
    number: "2.4"
    index: "13"
    fromtitle: "Types"
    byteoffset: 10952
    anchor: "Class"
  - toclevel: 2
    level: "3"
    line: "Delegate"
    number: "2.5"
    index: "14"
    fromtitle: "Types"
    byteoffset: 12561
    anchor: "Delegate"
  - toclevel: 2
    level: "3"
    line: "Pointer"
    number: "2.6"
    index: "15"
    fromtitle: "Types"
    byteoffset: 13715
    anchor: "Pointer"
  - toclevel: 1
    level: "2"
    line: "Composite types"
    number: "3"
    index: "16"
    fromtitle: "Types"
    byteoffset: 13993
    anchor: "Composite_types"
  - toclevel: 2
    level: "3"
    line: "Struct"
    number: "3.1"
    index: "17"
    fromtitle: "Types"
    byteoffset: 14287
    anchor: "Struct"
  - toclevel: 2
    level: "3"
    line: "Static array"
    number: "3.2"
    index: "18"
    fromtitle: "Types"
    byteoffset: 15031
    anchor: "Static_array"
  - toclevel: 2
    level: "3"
    line: "Dynamic array"
    number: "3.3"
    index: "19"
    fromtitle: "Types"
    byteoffset: 15616
    anchor: "Dynamic_array"
  - toclevel: 2
    level: "3"
    line: "Multi-dimensional arrays"
    number: "3.4"
    index: "20"
    fromtitle: "Types"
    byteoffset: 16559
    anchor: "Multi-dimensional_arrays"
  - toclevel: 2
    level: "3"
    line: "Map"
    number: "3.5"
    index: "21"
    fromtitle: "Types"
    byteoffset: 16856
    anchor: "Map"
  displaytitle: "Types"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/boolean"
    name: "wp:boolean"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/single_precision"
    name: "wp:single precision"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Unicode"
    name: "wp:Unicode"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Associative_array"
    name: "wp:Associative array"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/regular_expression"
    name: "wp:regular expression"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Pointer_(computing)"
    name: "wp:Pointer (computing)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/floating_point"
    name: "wp:floating point"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/reference_(computer_science)"
    name: "wp:reference (computer science)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Map_(C%2B%2B)"
    name: "wp:Map (C++)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/IEEE_floating-point_standard"
    name: "wp:IEEE floating-point standard"
  - prefix: "udn3"
    url: "http://udn.epicgames.com/Three/UnrealScriptReference"
    name: "udn3:UnrealScriptReference"
  wikitext:
    text: "[[UnrealScript]] is a strongly-typed language and has various built-in\
      \ data types. UnrealScript types can be divided in three general groups: primitive\
      \ types, reference types and composite types.\n\n==Primitive types==\nA primitive\
      \ type only consists of a single and usually simple value. Variables declared\
      \ of a primitive type directly contain that value and when assigning that value\
      \ to another variable or passing it to a function call, a new copy of the value\
      \ is created. Modifications to that copy have absolutely no effect on the original\
      \ value still stored in the source variable.\n\n===Int===\nUnrealScript has\
      \ two integer types and '''int''' is the larger of them. Int values are integer\
      \ numbers in the range -2147483648 to 2147483647, in other words signed 32 bit\
      \ values.\n\n[[Literals#Integer numbers|Int literals]] can be specified in decimal\
      \ or hexadecimal notation. Values exceeding the allowed range are truncated\
      \ to the least significant 32 bits. For example the hexadecimal literal 0x100000005\
      \ actually represents the value 5.\n\n===Byte===\nThe smaller of UnrealScript's\
      \ two integer types is '''byte'''. Byte values are integer numbers in the range\
      \ 0 to 255, in other words unsigned 8 bit values.\n\nAny [[Literals#Integer\
      \ numbers|int literal]] can also be used in \"byte context\". If the value is\
      \ outside the allowed range it will be truncated to the 8 least significant\
      \ bits. For example the hexadecimal literal 0x100 (256) actually represents\
      \ the value 0 and the decimal literal -1 represents the value 255.\n\n===Bool===\n\
      UnrealScript's [[wp:boolean|boolean]] type is '''bool''' and allows the values\
      \ ''true'' and ''false''. These are also the names of the [[Literals#Boolean\
      \ values|boolean literals]].\n\nThe bool type has some restrictions in UnrealScript.\
      \ For example it's not possible to declare [[#Static array|static]] or [[#Dynamic\
      \ array|dynamic arrays]] of bool values in [[Unreal Engine]] generations 1 and\
      \ 2 or to use the parameter modifier \"out\" on bool parameters in [[function\
      \ declaration]]s. Starting with Unreal Engine 3 dynamic arrays of bool are supported,\
      \ even though the [[udn3:UnrealScriptReference|UnrealScript reference on UDN]]\
      \ disagrees.\n\n===Float===\nUnrealScript has a [[wp:single precision|single\
      \ precision]] [[wp:floating point|floating point]] type called '''float'''.\
      \ The possible float values are distributed over the huge range of about 3.403·\
      10<sup>38</sup> to -3.403·10<sup>38</sup>. The smallest possible value greater\
      \ than 0 is about 1.175·10<sup>-38</sup>. Generally, float values have a precision\
      \ of about 6 or 7 decimal digits.\n\n[[Literals#Float numbers|Float literals]]\
      \ can either be specified in decimal or scientific notation. For example the\
      \ literal 1.2e3 means 1.2·10<sup>3</sup> = 1200. Note that float literals must\
      \ always contain the decimal point, even when using scientific notation, and\
      \ must always start with a number or with the minus sign followed by a number.\
      \ Unfortunately, negative exponents are not allowed in scientific notation.\
      \ A hexadecimal representation like in Java is not supported.\n\nIf a floating\
      \ point operation has a result that exceeds the highest or lowest possible number,\
      \ the return value has the special value of positive or negative infinity respectively.\
      \ Invalid operations such as division by zero or adding positive and negative\
      \ infinity return the special value ''NaN'', \"Not a Number\". Be careful about\
      \ those three special values as they will propagate. That means, if you subtract,\
      \ add, multiply or divide infinity values, the result will be infinity again.\
      \ If you perform an operation with the ''NaN'' value, the result will either\
      \ be ''NaN'' again or (for comparison operators) something totally unexpected.\
      \ For example if you perform the operation <code>a = x / 0</code>, variable\
      \ a will contain ''NaN''. Now the comparison <code>a == a</code> will actually\
      \ return the value ''false''! Unlike ''NaN'', infinity values will behave as\
      \ expected if used in comparison operations, that is positive infinity is greater\
      \ than any other value, negative infinity is smaller than any other value.\n\
      \n''Technical information:'' As specified in the [[wp:IEEE floating-point standard|IEEE\
      \ floating-point standard]], the float type internally has a length of 32 bits\
      \ and consists of a 23 bit fraction part, an 8 bit exponent and one sign bit.\
      \ Especially the 23 bit fraction part (called the \"mantissa\") imposes a limit\
      \ on floating point precision. When large int values greater than 2<sup>23</sup>\
      \ or smaller than -2<sup>23</sup> are [[typecast]]ed to float, they may get\
      \ rounded.\n\n===String===\nUnrealScript has a character string data type called\
      \ '''string'''. Strings can contain any combination of [[wp:Unicode|Unicode]]\
      \ characters.\n\n[[Literals#Strings|String literals]] are enclosed in double\
      \ quotes and may not extends past the end of a line. Technically string literals\
      \ (but not values) are allowed to have a length of up to 1023 characters. Internally\
      \ strings are zero-terminated, which means no string can contain the null character\
      \ because it would be recognized as the end of the string.\n\nString values\
      \ are immutable and UnrealScript neither provides \"character\" type nor allows\
      \ direct access to individual string characters. There are, however, functions\
      \ for extracting substrings and returning the Unicode value of the first character\
      \ of a string. There's also a function for returning a string of length 1 containing\
      \ a character corresponding to a specified Unicode value.\n\nVery early builds\
      \ of [[Unreal Engine 1]] had a fixed-length string type, which was declared\
      \ with the syntax <code>string[''length'']</code>. This type is no longer supported\
      \ and only mentioned here in case you run into its declaration in old code snippets.\n\
      \nIn [[Unreal Engine 2]] (or at least [[UT2004]]) there also is an undocumented\
      \ type called '''button''' that is an alias for the standard string type, but\
      \ implies the [[Cache]] variable modifier. It is not actually used in stock\
      \ code and there's no reason for you to ever declare a variable with the ''cache''\
      \ modifier, so this is purely informative.\n\n===Name===\nThe data type '''name'''\
      \ is a very unusual one. To the programmer it appears a lot like a case-insensitive\
      \ string with very limited character set. Every object and every class has a\
      \ name, but names are also used for a variety of other things, such as identifying\
      \ [[states]], code [[labels]], trigger events or bones of a [[skeletal mesh]].\n\
      \n[[Literals#Names|Name literals]] are enclosed in single quotes and may contain\
      \ the letters A to Z, both upper and lowercase, the numbers 0 to 9, the underscore\
      \ character _, the hyphen character -, and the space character. This could be\
      \ represented in [[wp:regular expression|regex]] as <code>([a-zA-Z0-9_\\- ]*)</code>.\
      \ Names are limited to a length of up to 63 characters.\n\nInternally names\
      \ are represented as int values, which makes sense since names are used in many\
      \ places and would take up a lot of space if represented as strings. At runtime,\
      \ the first mentioned string representation of a name is stored in the global\
      \ name table. Whenever a name value is to a string through [[typecasting]],\
      \ the string representation from the name table is used. This means that even\
      \ though you could use the name literal <code>'cOnTrOlLeR'</code> in your code,\
      \ it would most likely be represented by the string <code>Controller</code>\
      \ instead, because that's the spelling used for the name of the class with that\
      \ name.\n\nNewer builds of the [[Unreal Engine 3]] provides an additional way\
      \ for specifying values of type name via the '''NameOf'''() pseudo-function.\
      \ Similar to the [[ArrayCount]]() pseudo-function, NameOf() is replaced with\
      \ a name constant by the compiler. The parameter for NameOf() is either a variable\
      \ or function name for use in ReplicatedEvent() or with the various Timer management\
      \ functions.\n\n===Enum===\n{{main|Enums}}\nAn '''enum''' type is a named list\
      \ of identifiers that act as [[Literals#Enums|literals]] for the values of the\
      \ enum type. UnrealScript's enumerated types are a bit like \"glorified integer\
      \ values\", similar to C++ enumerations. The first value of an enum type corresponds\
      \ to 0, the second value to 1, and so on.\n\n==Reference types==\nUnlike [[variables]]\
      \ of primitive types, variables declared as a reference type only contain a\
      \ [[wp:reference (computer science)|reference]] to the actual data. When assigning\
      \ a reference type value to a variable or passing it to function calls, only\
      \ the reference, not the referenced data, is copied. As a result it is possible\
      \ that two reference type variables point to the same data and changes made\
      \ to the data through one variable are immediately visible through the other.\n\
      \n===Object===\nAn object reference does not contain an object, it only points\
      \ to (i.e. \"reference\") an instance of an object. That means the object reference's\
      \ value actually is a pointer, not an object. Different object references may\
      \ point to the same object. An object reference may also point to no object\
      \ at all.\n\nObject references can be restricted to instances of a certain class.\
      \ For example, an object reference might only accept instances of the class\
      \ WebApplication, which also includes instances of WebApplication subclasses\
      \ like UTServerAdmin.\n\n[[Literals#Objects|Object literals]] start with the\
      \ name of the object's class, followed by the qualified or unqualified name\
      \ of the object instance to reference, enclosed in single quotes. It is also\
      \ possible to specify a literal for the empty object reference with the keyword\
      \ <code>None</code>. Another special object literal is the keyword <code>Self</code>,\
      \ which references the object instance executing the current function or state\
      \ code. It is not available in [[static functions]], because those functions\
      \ are not executed in the context of an object instance but of an object class.\n\
      \n===Actor===\nActor references are basically the same as object references,\
      \ just restricted to Actor or one of its subclasses. The only difference to\
      \ non-actor references is, that the Actor class provides a ''Destroy'' method.\
      \ This method not only gets rid of the actor instance it was called on, but\
      \ also implicitly sets all references to that actor instance to ''none''.\n\n\
      Most of your object references will probably be actor references, but apart\
      \ from ''None'' and ''Self'' you will rarely encounter object literals of type\
      \ Actor or one of its subclasses. In fact, Actor-type object literals are forbidden\
      \ in UnrealScript code prior to [[Unreal Engine 3]]. Mappers sometimes see actor\
      \ literals in the property window of various level objects, but UnrealScript\
      \ programmers usually won't use them. Most actor literals in Unreal Engine 3\
      \ source code are [[archetypes]] in exported [[defaultproperties]] blocks.\n\
      \n===Interface===\n{{main|Interfaces}}\nInterface references are also object\
      \ references, but restricted to an interface type. This kind of reference can\
      \ point to any object instance of a class [[implements|implementing]] that interface.\n\
      \n===Class===\n{{main|Classes}}\nA class reference is very similar to an object\
      \ reference, except that it is restricted to the type Class. Class references\
      \ can be further restricted to a certain meta class, that means the type of\
      \ referenced class. Such a restricted class reference is called a '''class limiter'''\
      \ and is denoted by the keyword <code>Class</code> followed by the name of the\
      \ meta class in angle brackets. For example <code><nowiki>class<Info></nowiki></code>\
      \ denotes a reference that can point to the class Info or one of its subclasses.\n\
      \nClass literals are specified in the same way as other object literals. The\
      \ type of reference, here ''class'', followed by the class name, optionally\
      \ qualified with the containing package name, and enclosed in single quotes.\
      \ For example <code>class'Info'</code> or <code>class'Engine.Info'</code> references\
      \ the Info class located in the Engine package. The special object literal ''None''\
      \ can be used for class references and means \"no class\".\n\nOne important\
      \ restriction of class references is the lack of interface support. Classes\
      \ implementing a certain interface can be anywhere in the class hierarchy, but\
      \ class limiters only support direct inheritance. This means, that if you want\
      \ a reference to classes implementing a certain interface, you need to use a\
      \ generic class reference or the class limiter <code><nowiki>class<Object></nowiki></code>.\
      \ A reference of type <code><nowiki>class<Interface></nowiki></code> would only\
      \ allow references to the interface class itself (or any of its subinterfaces),\
      \ but not to any class implementing the interface!\n\n===Delegate===\n{{main|Delegates}}\n\
      Delegates were introduced in Unreal Engine 2 and are '''function references'''.\
      \ In Unreal Engine 2, delegates could only be declared using function syntax\
      \ and replacing the keyword ''Function'' with the keyword ''Delegate''. Unreal\
      \ Engine 3 also provides a notation similar to class limiters or dynamic arrays\
      \ that can be used as variable or parameter type. This notation starts with\
      \ the keyword <code>Delegate</code>, followed by the name of a prototype delegate\
      \ function declaration in angle brackets.\n\n[[Literals#Functions|Function literals]]\
      \ are only used for delegate assignments and look more like a variable access\
      \ than a literal. Basically you reference the object instance containing the\
      \ function you want to assign to a delegate property (unless, of course, the\
      \ function is contained in the same object instance as the code doing the assignment),\
      \ followed by a dot and the pure function name without anything afterwards.\
      \ As with object references, the keyword ''None'' means \"no function\". For\
      \ delegate function declarations this means the default body, if available,\
      \ is executed when the delegate is called.\n\n===Pointer===\nAlso starting with\
      \ Unreal Engine 2, UnrealScript has a generic [[wp:Pointer_(computing)|pointer]]\
      \ data type, but it only serves as a placeholder for pointer variables in [[native\
      \ code]]. UnrealScript itself provides no way to access or modify pointer properties.\n\
      \n==Composite types==\nUnlike all the other types described above, a composite\
      \ type can contain more than one value. The composite types available in UnrealScript\
      \ all work similar to primitive types: assigning them to other variables or\
      \ passing them in function calls creates a copy of the data.\n\n===Struct===\n\
      {{main|Structs}}\nStructs (or structures) are a composition of a fixed number\
      \ of values that may have different types. Struct types are no reference types,\
      \ that means they are stored directly in the variable and copied as a whole\
      \ when assigned to variables or passed as function parameters or returned as\
      \ function result. Struct values are always replicated as a unit, but for a\
      \ few structs like vector or rotator replication is not accurate due to bandwidth\
      \ optimizations. Struct values may not be allowed for replication if the struct\
      \ type is too large to fit in one network packet.\n\nExcept for [[Literals#Vectors|vectors]]\
      \ and [[Literals#Rotators|rotators]], there is no way to specify a complete\
      \ struct value directly in code.\n\n===Static array===\n{{main|Static arrays}}\n\
      Static arrays are a composition of a fixed number of values with identical type.\
      \ Static arrays can be passed as a whole as function parameters, though this\
      \ will cause all values to be copied. They can't be assigned to variables or\
      \ returned as function results, though. For replication, each element is considered\
      \ separately. It is not possible to declare a static array of type bool or of\
      \ a dynamic array type. Static arrays of a struct type containing bools or dynamic\
      \ arrays are no problem, though. There are no literals for static arrays.\n\n\
      ===Dynamic array===\n{{main|Dynamic arrays}}\nDynamic arrays are also a composition\
      \ of multiple values of the same type, but the actual number of values may change\
      \ over time. Dynamic arrays can be assigned to variables, passed as function\
      \ parameters and returned as function results, but every time the entire array\
      \ is copied. They do not support replication at all.\n\nIn [[Unreal Engine 1]],\
      \ dynamic arrays can be declared, but there's no way to access them. Only starting\
      \ with [[Unreal Engine 3]], dynamic arrays of type bool can be used. (You can\
      \ declare dynamic bool arrays in Unreal Engine 2, but they don't work.) It is\
      \ not possible to directly use a dynamic array type in other static or dynamic\
      \ arrays. It is possible to wrap other arrays or bool variables in a struct\
      \ type and create a dynamic array of that struct type, though. Function parameters\
      \ that are dynamic arrays may not be optional. There are no literals for dynamic\
      \ arrays.\n\n===Multi-dimensional arrays===\n{{main|multi-dimensional arrays}}\n\
      Multi-dimensional and jagged arrays are not supported in UnrealScript. You can\
      \ work around that either by using an array of [[structs]] that contain an array\
      \ or by performing index arithmetics on any kind of one-dimensional array.\n\
      \n===Map===\nSee [[wp:Associative_array|Associative array]], [[wp:Map_(C%2B%2B)|C++\
      \ Map]] and [http://www.google.be/search?q=c%23+dictionary C# Dictionary].\n\
      \nIn [[Unreal Engine 1]] and 2 you cannot use this feature yet so says the compiler\
      \ error (''Error, Map are not supported in UnrealScript yet'').\n\nIn [[Unreal\
      \ Engine 3]] you can declare maps however you cannot access them yet with UnrealScript.\n\
      \n{{navbox unrealscript}}"
  properties: []
  revId: 46197
name: "Types"
revision:
  revid: 46197
  parentid: 46196
  user: "Wormbo"
  timestamp: 1440827856.000000000
  comment: "Undo revision 46196 by [[Special:Contributions/SeriousBarbie|SeriousBarbie]]\
    \ ([[User talk:SeriousBarbie|talk]]) there's more than just @ to concatinate strings,\
    \ but this page isn't for operators"
timestamp: 1668754114.859827000
