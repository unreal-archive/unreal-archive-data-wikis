---
parse:
  title: "Legacy:Moo/Diary"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#6_July_2005\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">6 July 2005</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#HtmlPage_class\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">HtmlPage class</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#New_output_classes\"><span\
      \ class=\"tocnumber\">1.2</span> <span class=\"toctext\">New output classes</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#5_July_2005\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">5 July 2005</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#1_July_2005\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">1 July 2005</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-6\"><a href=\"#Old_stuff\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Old stuff</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-7\"><a href=\"#Admin_Pages\"><span class=\"tocnumber\">4.1</span>\
      \ <span class=\"toctext\">Admin Pages</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Home_Page\"><span class=\"tocnumber\">4.2</span>\
      \ <span class=\"toctext\">Home Page</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-9\"><a href=\"#Diff_.26_History\"><span class=\"tocnumber\">4.3</span>\
      \ <span class=\"toctext\">Diff &amp; History</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Main_function\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Main function</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#New.28.29\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">New()</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"6_July_2005\">6 July 2005</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Moo/Diary?section=1\" title=\"Edit section: 6 July 2005\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>I went\
      \ to take a look at <a href=\"http://www.usemod.com/cgi-bin/mb.pl?InfiniteMonkey\"\
      \ class=\"extiw\" title=\"meatball:InfiniteMonkey\">MeatBall:InfiniteMonkey</a>.\
      \ Funny how you can miss totally obvious features, eg RSS output. This really\
      \ amounts to a totally different output channel for the script. Then I read\
      \ the bit about working with Wiki Clients, which adds a potential third channel.</p>\n\
      <p>So... do I add a level of abstraction in my Page hierarchy, like this:</p>\n\
      <div style=\"font-family: monospace; white-space: preserve; line-height: 1em;\"\
      >Page<br /></div>\n<div style=\"font-family: monospace; white-space: preserve;\
      \ line-height: 1em;\">__TREETAG_2__HtmlPage<br /></div>\n<div style=\"font-family:\
      \ monospace; white-space: preserve; line-height: 1em;\">__TREETAG_0____TREETAG_2__WikiHtmlPage<br\
      \ /></div>\n<div style=\"font-family: monospace; white-space: preserve; line-height:\
      \ 1em;\">__TREETAG_0____TREETAG_0____TREETAG_2__usual classes<br /></div>\n\
      <p>Or do I introduce Yet Another orthogonal class system of \"Output modules\"\
      \ that provide wrapping to the Wiki output? These would be HTML and RSS initially,\
      \ and WikiClient could be a plug-in later.</p>\n<p>My gut instinct it to lean\
      \ towards the 2nd option, even though it's a big change in how the script works\
      \ and it's also a whole new class tree to think about.</p>\n<h3><span class=\"\
      mw-headline\" id=\"HtmlPage_class\">HtmlPage class</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moo/Diary?section=2\"\
      \ title=\"Edit section: HtmlPage class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Pro:</p>\n<ul>\n<li>Relatively simple</li>\n<li>RssPage\
      \ will have different children to a certain extent. Rss won't need things like\
      \ a Diff page, or an Edit page and so on. So having a new branch of the Page\
      \ class tree makes sense in this light. But...</li>\n</ul>\n<p>Con:</p>\n<ul>\n\
      <li>Some duplication of classes would occur: we'd basically have two RecentChangesPage\
      \ classes. Would any other classes find themselves repeated? Certainly the ClientOutput\
      \ would need things like old revisions and history list pages.</li>\n</ul>\n\
      <h3><span class=\"mw-headline\" id=\"New_output_classes\">New output classes</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Moo/Diary?section=3\" title=\"Edit section: New output\
      \ classes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Pro:</p>\n<ul>\n<li>Features such as site-wide linkbars or user-specific\
      \ custom linkbars could be added as a new Output class. I have no idea how these\
      \ could be plug-ins in current system.</li>\n</ul>\n<p>Con:</p>\n<ul>\n<li>RssPage\
      \ and other output methods will need some way of knowing that it can't do a\
      \ Diff page, for example. This will need to be expansion-proof.</li>\n<li>RSS\
      \ outputs a completely different kind of markup. It's not just a wrapping of\
      \ template and whatever around the formatted Wiki markup. Two RecentChangesPage\
      \ classes actually make sense here.</li>\n</ul>\n<p>Hmm....</p>\n<h2><span class=\"\
      mw-headline\" id=\"5_July_2005\">5 July 2005</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moo/Diary?section=4\"\
      \ title=\"Edit section: 5 July 2005\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The really big thing that's still missing is the database.\
      \ Things like edit conflict and diff too, but while these are core features,\
      \ they're not totally essential. With a database system and the basic UseMod\
      \ parser, Moo should at least be ok to run on a local system as a personal notepad.</p>\n\
      <p>Oh and a system for user registration!</p>\n<p>My To Do list at the moment\
      \ is mainly cleaning up tasks – making variable names consistent and standardizing\
      \ the way things are accessed.</p>\n<h2><span class=\"mw-headline\" id=\"1_July_2005\"\
      >1 July 2005</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Moo/Diary?section=5\" title=\"Edit section:\
      \ 1 July 2005\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>Tarquin:</b> Today I've taken a tentative look at the script for Moo.\
      \ It runs. It doesn't have a markup parser or a database, but you can edit and\
      \ save a page, and there's basic support in place for things like category page\
      \ listings. I need to spend some time getting reacquainted with the script so\
      \ I understand it again. Fortunately, I've caught Mych's habit of leaving LOTS\
      \ of comments. There's even POD too!</p>\n<h2><span class=\"mw-headline\" id=\"\
      Old_stuff\">Old stuff</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Moo/Diary?section=6\" title=\"Edit section:\
      \ Old stuff\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Rough notes for the class structure</p>\n<ul>\n<li>Page\n<ul>\n<li>PageWiki:\
      \ pages that open a page from the server\n<ul>\n<li>Edit\n<ul>\n<li>Edit Conflict</li>\n\
      </ul>\n</li>\n<li>Diff</li>\n<li>History</li>\n<li>PageWikiSpecial\n<ul>\n<li>RecentChanges\
      \ (maybe this &amp; below given a base class, SpecialPage)</li>\n<li>Search</li>\n\
      <li>Wanted Pages</li>\n<li>RandomPage</li>\n<li>Image Upload</li>\n</ul>\n</li>\n\
      </ul>\n</li>\n<li>Preferences</li>\n<li>Login</li>\n<li>List all pages</li>\n\
      <li>Admin-Only\n<ul>\n<li>Rename</li>\n<li>Ban IP</li>\n<li>Lock / unlock site</li>\n\
      <li>Lock / Unlock page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>I had an\
      \ idea to isolate behaviour for diff, edit, conflict, history in subclasses.\
      \ The problem is that PageWikiSpecial children need that behavour too.</p>\n\
      <p>Possible solution: treat SpecialPages as a seperate tree of plug-in behaviours.\
      \ (like bot brains).</p>\n<p>Aside: can a class's parent be set at runtime?\
      \ I suppose it can, since it's just</p>\n<pre>  our @ISA = Block;\n</pre>\n\
      <p>which sets parentage. Nothing stopping a</p>\n<pre>if( pants ) {\n our @ISA\
      \ = Block; }\nelse {\n our @ISA = NotBlock;}\n</pre>\n<p>and thus</p>\n<ol>\n\
      <li>indentify requirement as Browse, Edit, Diff, Etc</li>\n<li>determine if\
      \ SpecialPage</li>\n<li>spawn object of (desired SpecialPage) as child of requirement\
      \ in 1</li>\n</ol>\n<p>Would that count as REALLY twisted though?</p>\n<p><b>Mychaeel:</b>\
      \ It can be done and is even documented as doable (in that the method inheritance\
      \ namespace cache is documented to be cleared when it's done), but it's a last\
      \ resort at most... if you can avoid stuff like that, do it.</p>\n<p><b>Tarquin:</b>\
      \ Doh! Diff &amp; Edit etc dont need to load in the generated content... just\
      \ the saved wiki text. So if the object is if class \"Diff\" (say), then the\
      \ fact that it doesnt load the generated behaviour is irrelevant!</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Admin_Pages\">Admin Pages</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moo/Diary?section=7\"\
      \ title=\"Edit section: Admin Pages\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Maybe make a base class for Admin-only pages. Hmm.\
      \ maybe not, a simple Admin-only flag somewhere.</p>\n<dl>\n<dd><a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://c2.com/cgi/wiki?ShallowHierarchies\"\
      >http://c2.com/cgi/wiki?ShallowHierarchies</a> Let's have a class PageAdmin\
      \ which handles checking the viewer's admin status &amp; displaying a message.</dd>\n\
      </dl>\n<h4><span class=\"mw-headline\" id=\"Home_Page\">Home Page</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Moo/Diary?section=8\" title=\"Edit section: Home Page\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n<p>slightly\
      \ special because no page specified means go here... so not a class, but a special\
      \ case in PageWiki</p>\n<p>Actually, might as well make it a special case at\
      \ the class level. The class for HomePage could be as simple as reading a config\
      \ variable for which page to open.</p>\n<h4><span class=\"mw-headline\" id=\"\
      Diff_.26_History\">Diff &amp; History</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moo/Diary?section=9\"\
      \ title=\"Edit section: Diff &amp; History\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>not sure how to handle diff &amp; history. probably:</p>\n\
      <ul>\n<li>Page\n<ul>\n<li>PageWiki\n<ul>\n<li>History</li>\n<li>Diff</li>\n\
      </ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The really clever thing to do would be\
      \ to have History, Diff and EditConflict create a new PageWiki object that handles\
      \ opening the second page.</p>\n<p>This business that new() is non-special means\
      \ that a class can have <i>several</i> creation functions, I suppose.</p>\n\
      <dl>\n<dd><b>Mychaeel:</b> Absolutely. (Naming convention is C++-like, by the\
      \ way – start class names with capital letters, method names with lowercase\
      \ letters. You can structure either by using capital letters inbetween.)</dd>\n\
      </dl>\n<p>That means page classes could have a NewPage() and a NewNested() (or\
      \ whatever. names subject to improvement). If a nested page is needed for diff,\
      \ history, edit conflict, etc, create a new instance of PageWiki, but the NewNested\
      \ obviously doesn't need to make headers, it just needs to open a file &amp;\
      \ display text.</p>\n<h2><span class=\"mw-headline\" id=\"Main_function\">Main\
      \ function</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Moo/Diary?section=10\" title=\"Edit section:\
      \ Main function\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Pondering two approaches:</p>\n<p>method 1:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">sub doBrowse <span class=\"br0\">{</span>\n  print <span\
      \ class=\"sy0\">&amp;</span>getHttpHeader<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n  print <span class=\"sy0\">&amp;</span>getHtmlHeader<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  print <span class=\"\
      sy0\">&amp;</span>getPageHeader<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n  print <span class=\"sy0\">&amp;</span>getDocumentText<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n  <span class=\"co2\"># etc</span>\n\
      <span class=\"br0\">}</span>\n \n \nmethod <span class=\"nu0\">2</span>:\n \n\
      <span class=\"sy0\">&lt;</span>uscript<span class=\"sy0\">&gt;</span>\nsub doBrowse\
      \ <span class=\"br0\">{</span>\n  getHttpHeader<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  getHtmlHeader<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  getPageHeader<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  getDocumentText<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"co2\"># etc</span>\n<span class=\"\
      br0\">}</span>\n<span class=\"co2\"># each function handles its own printing.</span></pre></div>\n\
      </div>\n<p>As I see it, the advantage of (2) is that I can choose whether to\
      \ build up a $text and print in one go, or print pieces as it goes.</p>\n<p><b>Mychaeel:</b>\
      \ I strongly suggest you build the entire page in memory first, then print it\
      \ at once if appropriate. Just think of the <a href=\"/Legacy:Offline_Wiki\"\
      \ title=\"Legacy:Offline Wiki\">Offline Wiki</a> (plus, you can send a decent\
      \ \"Content-Length\" HTTP header so browsers know in advance how much content\
      \ to expect and can display working progress bars while loading).</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"New.28.29\">New()</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Moo/Diary?section=11\"\
      \ title=\"Edit section: New()\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>In wookee.pm, new() is only ever called with one argument.\
      \ Therefore, is the second line in sub new() useful:</p>\n<pre>\n    my $owner\
      \ = shift;\n</pre>\n<p>It's causing me problems as I'm calling new(&#160;%PageVariables\
      \ ) and the first piece of the hash gets eaten by it. Do i risk death or disaster\
      \ by removing it?</p>\n<p><b>Mychaeel:</b> At one place in Wookee, new() takes\
      \ a reference to an object's \"owner\" (to propagate information about embedded\
      \ links and headers up the block nesting hierarchy). That's not a Perl built-in,\
      \ it's merely my own design.</p>\n<hr />\n<p><b>Mychaeel:</b> Moo? I like the\
      \ name. &#160;:-D</p>\n<p><b>Tarquin:</b> &#160;:D</p>\n<p><b>ZxAnPhOrIaN:</b>\
      \ I like moo too.&#160;:D</p>\n<hr />\n<pre> sub Browse {\n   my $page     \
      \     = ' ';\n   # need to know:\n   # URL params\n   # User name and status\n\
      \   \n   my %browseParams  = ( page=&gt;'Home', action=&gt;'edit');\n   \n \
      \  # determine which class to set $page equal to...\n   foreach $subclass (\
      \ @registered ) {\n     $page = $subclass-&gt;ChildofPage($page, %browseParams\
      \ );\n     print \"checking... $page\\n\";\n     # Page\n     ## PageAdminTask\n\
      \     ## PageWiki\n     ## PageLogin\n     ## PagePreferences\n   }\n   print\
      \ $page-&gt;GenerateContent();\n   #print scalar @registered;\n }\n</pre>\n\
      <p>hmm.... not ideal. I'm trying to think if there's ever a situation where\
      \ different tasks might both want to perform, given the input, and one should\
      \ take precedence. If not, might as well have classes return nothing unless\
      \ they want to take on the task, and use some sort of a \"while ...\" construction\
      \ instead of \"foreach\".</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.071 seconds\nReal time usage: 0.211 seconds\nPreprocessor visited node count:\
      \ 54/1000000\nPreprocessor generated node count: 88/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2217-0!*!0!!en!*!*\
      \ and timestamp 20221120202825 and revision id 5367\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Offline Wiki"
  templates: []
  images: []
  externallinks:
  - "http://c2.com/cgi/wiki?ShallowHierarchies"
  sections:
  - toclevel: 1
    level: "2"
    line: "6 July 2005"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 0
    anchor: "6_July_2005"
  - toclevel: 2
    level: "3"
    line: "HtmlPage class"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 789
    anchor: "HtmlPage_class"
  - toclevel: 2
    level: "3"
    line: "New output classes"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 1282
    anchor: "New_output_classes"
  - toclevel: 1
    level: "2"
    line: "5 July 2005"
    number: "2"
    index: "4"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 1841
    anchor: "5_July_2005"
  - toclevel: 1
    level: "2"
    line: "1 July 2005"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 2336
    anchor: "1_July_2005"
  - toclevel: 1
    level: "2"
    line: "Old stuff"
    number: "4"
    index: "6"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 2769
    anchor: "Old_stuff"
  - toclevel: 2
    level: "4"
    line: "Admin Pages"
    number: "4.1"
    index: "7"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 4344
    anchor: "Admin_Pages"
  - toclevel: 2
    level: "4"
    line: "Home Page"
    number: "4.2"
    index: "8"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 4613
    anchor: "Home_Page"
  - toclevel: 2
    level: "4"
    line: "Diff & History"
    number: "4.3"
    index: "9"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 4903
    anchor: "Diff_.26_History"
  - toclevel: 1
    level: "2"
    line: "Main function"
    number: "5"
    index: "10"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 5814
    anchor: "Main_function"
  - toclevel: 1
    level: "2"
    line: "New()"
    number: "6"
    index: "11"
    fromtitle: "Legacy:Moo/Diary"
    byteoffset: 6667
    anchor: "New.28.29"
  displaytitle: "Legacy:Moo/Diary"
  iwlinks:
  - prefix: "meatball"
    url: "http://www.usemod.com/cgi-bin/mb.pl?InfiniteMonkey"
    name: "meatball:InfiniteMonkey"
  wikitext:
    text: "==6 July 2005==\n\nI went to take a look at [[MeatBall:InfiniteMonkey]].\
      \ Funny how you can miss totally obvious features, eg RSS output. This really\
      \ amounts to a totally different output channel for the script. Then I read\
      \ the bit about working with Wiki Clients, which adds a potential third channel.\n\
      \nSo... do I add a level of abstraction in my Page hierarchy, like this:\n\n\
      + Page\n\n++ HtmlPage\n\n+++ WikiHtmlPage\n\n++++ usual classes\n\nOr do I introduce\
      \ Yet Another orthogonal class system of \"Output modules\" that provide wrapping\
      \ to the Wiki output? These would be HTML and RSS initially, and WikiClient\
      \ could be a plug-in later.\n\nMy gut instinct it to lean towards the 2nd option,\
      \ even though it's a big change in how the script works and it's also a whole\
      \ new class tree to think about. \n\n===HtmlPage class===\n\nPro:\n* Relatively\
      \ simple\n* RssPage will have different children to a certain extent. Rss won't\
      \ need things like a Diff page, or an Edit page and so on. So having a new branch\
      \ of the Page class tree makes sense in this light. But...\n\nCon:\n* Some duplication\
      \ of classes would occur: we'd basically have two RecentChangesPage classes.\
      \ Would any other classes find themselves repeated? Certainly the ClientOutput\
      \ would need things like old revisions and history list pages.\n\n===New output\
      \ classes===\n\nPro:\n* Features such as site-wide linkbars or user-specific\
      \ custom linkbars could be added as a new Output class. I have no idea how these\
      \ could be plug-ins in current system.\n\nCon:\n* RssPage and other output methods\
      \ will need some way of knowing that it can't do a Diff page, for example. This\
      \ will need to be expansion-proof. \n* RSS outputs a completely different kind\
      \ of markup. It's not just a wrapping of template and whatever around the formatted\
      \ Wiki markup. Two RecentChangesPage classes actually make sense here.\n\nHmm....\
      \ \n\n==5 July 2005==\n\nThe really big thing that's still missing is the database.\
      \ Things like edit conflict and diff too, but while these are core features,\
      \ they're not totally essential. With a database system and the basic UseMod\
      \ parser, Moo should at least be ok to run on a local system as a personal notepad.\n\
      \nOh and a system for user registration!\n\nMy To Do list at the moment is mainly\
      \ cleaning up tasks &ndash; making variable names consistent and standardizing\
      \ the way things are accessed. \n\n==1 July 2005==\n\n'''Tarquin:''' Today I've\
      \ taken a tentative look at the script for Moo. It runs. It doesn't have a markup\
      \ parser or a database, but you can edit and save a page, and there's basic\
      \ support in place for things like category page listings. I need to spend some\
      \ time getting reacquainted with the script so I understand it again. Fortunately,\
      \ I've caught Mych's habit of leaving LOTS of comments. There's even POD too!\n\
      \n==Old stuff==\n\nRough notes for the class structure\n\n* Page\n** PageWiki:\
      \ pages that open a page from the server\n*** Edit\n**** Edit Conflict\n***\
      \ Diff\n*** History\n*** PageWikiSpecial\n**** RecentChanges (maybe this & below\
      \ given a base class, SpecialPage)\n**** Search\n**** Wanted Pages\n**** RandomPage\n\
      **** Image Upload\n** Preferences\n** Login\n** List all pages\n** Admin-Only\n\
      *** Rename\n*** Ban IP\n*** Lock / unlock site\n*** Lock / Unlock page\n\nI\
      \ had an idea to isolate behaviour for diff, edit, conflict, history in subclasses.\
      \ The problem is that PageWikiSpecial children need that behavour too.\n\nPossible\
      \ solution: treat SpecialPages as a seperate tree of plug-in behaviours. (like\
      \ bot brains). \n\nAside: can a class's parent be set at runtime? I suppose\
      \ it can, since it's just \n   our @ISA = Block;\n\nwhich sets parentage. Nothing\
      \ stopping a \n\n if( pants ) {\n  our @ISA = Block; }\n else {\n  our @ISA\
      \ = NotBlock;}\n\nand thus\n\n# indentify requirement as Browse, Edit, Diff,\
      \ Etc\n# determine if SpecialPage\n# spawn object of (desired SpecialPage) as\
      \ child of requirement in 1\n\nWould that count as REALLY twisted though?\n\n\
      '''Mychaeel:'''  It can be done and is even documented as doable (in that the\
      \ method inheritance namespace cache is documented to be cleared when it's done),\
      \ but it's a last resort at most... if you can avoid stuff like that, do it.\n\
      \n'''Tarquin:'''  Doh! Diff & Edit etc dont need to load in the generated content...\
      \ just the saved wiki text. So if the object is if class \"Diff\" (say), then\
      \ the fact that it doesnt load the generated behaviour is irrelevant!\n\n====Admin\
      \ Pages ====\n\nMaybe make a base class for Admin-only pages. Hmm. maybe not,\
      \ a simple Admin-only flag somewhere.\n\n: http://c2.com/cgi/wiki?ShallowHierarchies\
      \  Let's have a class PageAdmin which handles checking the viewer's admin status\
      \ & displaying a message.\n\n====Home Page====\n\nslightly special because no\
      \ page specified means go here... so not a class, but a special case in PageWiki\n\
      \nActually, might as well make it a special case at the class level. The class\
      \ for HomePage could be as simple as reading a config variable for which page\
      \ to open.\n\n====Diff & History ====\n\nnot sure how to handle diff & history.\
      \ probably:\n* Page\n** PageWiki\n*** History\n*** Diff\n\nThe really clever\
      \ thing to do would be to have History, Diff and EditConflict create a new PageWiki\
      \ object that handles opening the second page.\n\nThis business that new() is\
      \ non-special means that a class can have ''several'' creation functions, I\
      \ suppose.\n\n:'''Mychaeel:'''  Absolutely.  (Naming convention is C++-like,\
      \ by the way &ndash; start class names with capital letters, method names with\
      \ lowercase letters.  You can structure either by using capital letters inbetween.)\n\
      \nThat means page classes could have a NewPage() and a NewNested() (or whatever.\
      \ names subject to improvement). If a nested page is needed for diff, history,\
      \ edit conflict, etc, create a new instance of PageWiki, but the NewNested obviously\
      \ doesn't need to make headers, it just needs to open a file & display text.\n\
      \n==Main function ==\n\nPondering two approaches:\n\nmethod 1:\n\n<uscript>\n\
      sub doBrowse {\n  print &getHttpHeader();\n  print &getHtmlHeader();\n  print\
      \ &getPageHeader();\n  print &getDocumentText();\n  # etc\n}\n\n\nmethod 2:\n\
      \n<uscript>\nsub doBrowse {\n  getHttpHeader();\n  getHtmlHeader();\n  getPageHeader();\n\
      \  getDocumentText();\n  # etc\n}\n# each function handles its own printing.\n\
      </uscript>\n\nAs I see it, the advantage of (2) is that I can choose whether\
      \ to build up a $text and print in one go, or print pieces as it goes. \n\n\
      '''Mychaeel:''' I strongly suggest you build the entire page in memory first,\
      \ then print it at once if appropriate.  Just think of the [[Legacy:Offline\
      \ Wiki|Offline Wiki]] (plus, you can send a decent \"Content-Length\" HTTP header\
      \ so browsers know in advance how much content to expect and can display working\
      \ progress bars while loading).\n\n==New() ==\n\nIn wookee.pm, new() is only\
      \ ever called with one argument. Therefore, is the second line in sub new()\
      \ useful:\n\n<pre>\n    my $owner = shift;\n</pre>\n\nIt's causing me problems\
      \ as I'm calling new( %PageVariables ) and the first piece of the hash gets\
      \ eaten by it. Do i risk death or disaster by removing it?\n\n'''Mychaeel:'''\
      \ At one place in Wookee, new() takes a reference to an object's \"owner\" (to\
      \ propagate information about embedded links and headers up the block nesting\
      \ hierarchy).  That's not a Perl built-in, it's merely my own design.\n\n----\n\
      \n'''Mychaeel:'''  Moo?  I like the name.  :-D\n\n'''Tarquin:'''  :D\n\n'''ZxAnPhOrIaN:'''\
      \  I like moo too. :D\n\n----\n\n  sub Browse {\n    my $page          = ' ';\n\
      \    # need to know:\n    # URL params\n    # User name and status\n    \n \
      \   my %browseParams  = ( page=>'Home', action=>'edit');\n    \n    # determine\
      \ which class to set $page equal to...\n    foreach $subclass ( @registered\
      \ ) {\n      $page = $subclass->ChildofPage($page, %browseParams );\n      print\
      \ \"checking... $page\\n\";\n      # Page\n      ## PageAdminTask\n      ##\
      \ PageWiki\n      ## PageLogin\n      ## PagePreferences\n    }\n    print $page->GenerateContent();\n\
      \    #print scalar @registered;\n  }\n\nhmm.... not ideal. I'm trying to think\
      \ if there's ever a situation where different tasks might both want to perform,\
      \ given the input, and one should take precedence. If not, might as well have\
      \ classes return nothing unless they want to take on the task, and use some\
      \ sort of a \"while ...\" construction instead of \"foreach\"."
  properties: []
  revId: 5367
name: "Legacy:Moo/Diary"
revision:
  revid: 5367
  parentid: 5368
  user: "Tarquin"
  timestamp: 1120655946.000000000
  comment: "*"
timestamp: 1668975845.721340000
