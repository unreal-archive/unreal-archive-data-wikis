---
parse:
  title: "Legacy:Modular Mod"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Modularity\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Modularity</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Main_class\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Main class</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Base_Module_Class\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Base Module Class</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#A_module\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">A module</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Releasing_a_SDK\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Releasing a SDK</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Modularity\">Modularity</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Modular_Mod?section=1\" title=\"Edit section: Modularity\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ Unreal engine has been built modular, so you can extend the game with your\
      \ own creations. This is a great feature and ofcourse used a lot.</p>\n<p>So\
      \ why don't you make your mod modular, besides giving other people the power\
      \ to extend your mod without needing to recompile it completely, it will also\
      \ be quite handy to categorise some functionality within your mod.</p>\n<p>Not\
      \ every mod can be made modular, you have to find out yourself if your mod lends\
      \ itself to contain modules. Somethings that often can be build modular:</p>\n\
      <ul>\n<li>command handling</li>\n<li>power-ups/bonusses</li>\n<li>....</li>\n\
      </ul>\n<p>An example of a modular system in UT2003 is the new WebAdmin (module\
      \ system is broken in 2136 and earlier tho). It will allow you to add extra\
      \ pages to the system.</p>\n<h2><span class=\"mw-headline\" id=\"Main_class\"\
      >Main class</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Modular_Mod?section=2\" title=\"Edit section:\
      \ Main class\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>In the main class you have to load and call the modules.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyModMod <span class=\"\
      kw1\">extends</span> <span class=\"kw9\">Info</span> <span class=\"kw1\">config</span>;\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"kw1\">globalconfig</span> array<span\
      \ class=\"sy0\">&lt;</span>class<span class=\"sy0\">&lt;</span>MyModule<span\
      \ class=\"sy0\">&gt;&gt;</span> MyModuleClasses;\n<span class=\"kw1\">var</span>\
      \ array<span class=\"sy0\">&lt;</span>MyModule<span class=\"sy0\">&gt;</span>\
      \ MyModules;\n \n<span class=\"kw1\">function</span> LoadModules<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i, j, cnt;\n\
      \  <span class=\"kw1\">local</span> MyModule MMI;\n  <span class=\"kw1\">local</span>\
      \ class<span class=\"sy0\">&lt;</span>MyModule<span class=\"sy0\">&gt;</span>\
      \ MMC;\n \n  cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ MyModuleClasses.<span class=\"me0\">Length</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    MMC <span class=\"\
      sy0\">=</span> MyModuleClasses<span class=\"br0\">[</span>i<span class=\"br0\"\
      >]</span>;\n    <span class=\"co1\">// Skip invalid classes;</span>\n    <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>MMC <span class=\"sy0\"\
      >!=</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n   \
      \ <span class=\"br0\">{</span>\n      <span class=\"co1\">// Make sure we dont\
      \ have duplicate instance of the same class</span>\n      <span class=\"kw2\"\
      >for</span> <span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"\
      nu0\">0</span>;j<span class=\"sy0\">&lt;</span>TelnetHelpers.<span class=\"\
      me0\">Length</span>; j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n\
      \      <span class=\"br0\">{</span>\n        <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>MyModules<span class=\"br0\">[</span>j<span class=\"\
      br0\">]</span>.<span class=\"kw1\">Class</span> <span class=\"sy0\">==</span>\
      \ MMC<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n  \
      \        MMC <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\
      \          <span class=\"kw2\">break</span>;\n        <span class=\"br0\">}</span>\n\
      \      <span class=\"br0\">}</span>\n \n      <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>MMC <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span>\n      <span class=\"br0\">{</span>\n\
      \        MMI <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MMC;\n\
      \        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>MMI <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>MMI.<span class=\"me0\">Init</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\
      \          <span class=\"br0\">{</span>\n            MyModules.<span class=\"\
      me0\">Length</span> <span class=\"sy0\">=</span> MyModules.<span class=\"me0\"\
      >Length</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>;\n  \
      \          MyModules<span class=\"br0\">[</span>MyModules.<span class=\"me0\"\
      >Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> MMI;\n          <span\
      \ class=\"br0\">}</span>\n          <span class=\"kw2\">else</span>\n      \
      \    <span class=\"br0\">{</span>\n            <span class=\"kw3\">Log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyModule:\"</span><span class=\"\
      sy0\">@</span>MMC<span class=\"sy0\">@</span><span class=\"st0\">\"could not\
      \ be initialized\"</span><span class=\"br0\">)</span>;\n          <span class=\"\
      br0\">}</span>\n        <span class=\"br0\">}</span>\n      <span class=\"br0\"\
      >}</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p><b>MythOpus:</b> In the\
      \ code above, I think there is a slight typo and I'm not sure how to fix it.\
      \ I'm not sure how to fix it... anyways the typo is 'TelnetHelper' where you\
      \ check for the duplicates.</p>\n<p>As you can see above we have defined two\
      \ variables, one of them is configurable: MyModuleClasses. In the config file\
      \ we will define the Sub Classes of MyModule that we want to load:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"br0\">[</span>MyPackage.<span\
      \ class=\"me0\">MyModMod</span><span class=\"br0\">]</span>\nMyModuleClasses<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'MyFirstModule'</span>\nMyModuleClasses<span class=\"sy0\">=</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'MySecondModule'</span>\nMyModuleClasses<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'MyExtras.AnotherModule'</span>\netc...</pre></div>\n</div>\n<p>The method\
      \ LoadModules() will load all module classes defined in the variable MyModuleClasses\
      \ and place the instance handle in the var MyModules (this is what we use in\
      \ the rest of the system). For every instance of MyModule it will class a method\
      \ called Init() to allow the module to do some initialization. You should call\
      \ the method LoadModules when your Mod starts.</p>\n<p>Now we have loaded all\
      \ modules we should call them when it's needed, for example:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> SomethingHappend<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Controller</span> C, <span class=\"\
      kw5\">string</span> description<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>;  i <span class=\"sy0\">&lt;</span>\
      \ MyModules.<span class=\"me0\">length</span>; i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n  <span class=\"br0\">{</span> \n    <span class=\"\
      co1\">// break loop when handled</span>\n    <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>MyModules<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">DoSomething</span><span class=\"br0\">(</span>C,\
      \ description<span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"kw2\">break</span>;\n  <span class=\"br0\">}</span>\n  <span class=\"\
      co1\">// do some more</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>When this function is called it will loop through the MyModules list and\
      \ call the method DoSomething on every MyModule until it returns true. Breaking\
      \ the loop when a MyModule has handled the method is something you usualy want\
      \ to do. In some cases you want every module to perform some actions, like saving\
      \ stuff. But most of the time you want to ask a module if it wants to do something\
      \ with the currect aparameters or not.</p>\n<p>Now that this is defined you\
      \ need to program the Base Class of the Module.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Base_Module_Class\">Base Module Class</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Modular_Mod?section=3\"\
      \ title=\"Edit section: Base Module Class\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyModule <span class=\"kw1\">extends</span> <span class=\"\
      kw8\">Object</span> within MyModMod;\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> Init<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> DoSomething<span class=\"\
      br0\">(</span><span class=\"kw9\">Controller</span> C, <span class=\"kw5\">string</span>\
      \ description<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ DoSomethingElse<span class=\"br0\">(</span><span class=\"kw9\">Controller</span>\
      \ C1, <span class=\"kw9\">Controller</span> C2<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      kw6\">false</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ SaveStatus<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>The base class defines all methods that can be called on the module. The\
      \ base class should not contain a lot of code, only code that is realy common\
      \ to all modules.</p>\n<p>Also on methods that return a bool to define if they\
      \ handled it should return false by default. Init should return true by default.</p>\n\
      <p>The base class is defined to execute within the context of MyModMod, thus\
      \ it should extend Object since it's already a sub class of whatever MyModMod\
      \ is a subclass off.</p>\n<h3><span class=\"mw-headline\" id=\"A_module\">A\
      \ module</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Modular_Mod?section=4\" title=\"Edit section:\
      \ A module\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Now that we have defined a base class we can create the modules.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> MyFirstModule\
      \ <span class=\"kw1\">extends</span> MyModule;\n \n<span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">bool</span> Init<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"MyFirstModule loaded succesfully\"\
      </span><span class=\"br0\">)</span>;\n  <span class=\"kw2\">return</span> <span\
      \ class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> DoSomething<span class=\"\
      br0\">(</span><span class=\"kw9\">Controller</span> C, <span class=\"kw5\">string</span>\
      \ description<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>description <span class=\"\
      sy0\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\n\
      \  <span class=\"br0\">{</span>\n    <span class=\"kw3\">Log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"Dosomething called with an non empty description\"\
      </span><span class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n  <span class=\"br0\">}</span>\n  <span\
      \ class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>MyFirstModule implements the methods\
      \ Init and DoSomething, the other methods are left to it's default. In Init\
      \ we just say that we have loaded.</p>\n<p>In DoSomething we add a log line\
      \ when the description is not empty, and return true. Because we return true\
      \ we will prevent other Modules to be called. If description is not empty we\
      \ will return false and give other modules a chance.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Releasing_a_SDK\">Releasing a SDK</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Modular_Mod?section=5\"\
      \ title=\"Edit section: Releasing a SDK\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>When you release your mod it's very wise to provide\
      \ documentation on how the modules work and how somebody can extend them. Provide\
      \ the source of the base class(es) with this documentation, document every function\
      \ declared.</p>\n<p><b>Solid Snake:</b> This is what Chaos Engine is doing.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Modular_Mod?section=6\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Making_Mods\" title=\"Legacy:Making Mods\">Making\
      \ Mods</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.134 seconds\n\
      Real time usage: 0.136 seconds\nPreprocessor visited node count: 67/1000000\n\
      Preprocessor generated node count: 128/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:2052-0!*!0!!en!*!*\
      \ and timestamp 20221118194204 and revision id 5003\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Modularity"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 0
    anchor: "Modularity"
  - toclevel: 1
    level: "2"
    line: "Main class"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 748
    anchor: "Main_class"
  - toclevel: 1
    level: "2"
    line: "Base Module Class"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 3593
    anchor: "Base_Module_Class"
  - toclevel: 2
    level: "3"
    line: "A module"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 4385
    anchor: "A_module"
  - toclevel: 1
    level: "2"
    line: "Releasing a SDK"
    number: "4"
    index: "5"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 5185
    anchor: "Releasing_a_SDK"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "6"
    fromtitle: "Legacy:Modular_Mod"
    byteoffset: 5488
    anchor: "Related_Topics"
  displaytitle: "Legacy:Modular Mod"
  iwlinks: []
  wikitext:
    text: "==Modularity ==\n\nThe Unreal engine has been built modular, so you can\
      \ extend the game with your own creations. This is a great feature and ofcourse\
      \ used a lot.\n\nSo why don't you make your mod modular, besides giving other\
      \ people the power to extend your mod without needing to recompile it completely,\
      \ it will also be quite handy to categorise some functionality within your mod.\n\
      \nNot every mod can be made modular, you have to find out yourself if your mod\
      \ lends itself to contain modules. Somethings that often can be build modular:\n\
      * command handling\n* power-ups/bonusses\n* ....\n\nAn example of a modular\
      \ system in UT2003 is the new WebAdmin (module system is broken in 2136 and\
      \ earlier tho). It will allow you to add extra pages to the system.\n\n==Main\
      \ class ==\n\nIn the main class you have to load and call the modules.\n\n<uscript>\n\
      class MyModMod extends Info config;\n\nvar globalconfig array<class<MyModule>>\
      \ MyModuleClasses;\nvar array<MyModule> MyModules;\n\nfunction LoadModules()\n\
      {\n  local int i, j, cnt;\n  local MyModule MMI;\n  local class<MyModule> MMC;\n\
      \n  cnt = 0;\n  for (i=0; i < MyModuleClasses.Length; i++)\n  {\n    MMC = MyModuleClasses[i];\n\
      \    // Skip invalid classes;\n    if (MMC != None)\n    {\n      // Make sure\
      \ we dont have duplicate instance of the same class\n      for (j=0;j<TelnetHelpers.Length;\
      \ j++)\n      {\n        if (MyModules[j].Class == MMC)\n        {\n       \
      \   MMC = None;\n          break;\n        }\n      }\n      \n      if (MMC\
      \ != None)\n      {\n        MMI = new MMC;\n        if (MMI != None)\n    \
      \    {\n          if (MMI.Init())\n          {\n            MyModules.Length\
      \ = MyModules.Length+1;\n            MyModules[MyModules.Length - 1] = MMI;\n\
      \          }\n          else\n          {\n            Log(\"MyModule:\"@MMC@\"\
      could not be initialized\");\n          }\n        }\n      }\n    }\n  }\n\
      }\n</uscript>\n\n'''MythOpus:''' In the code above, I think there is a slight\
      \ typo and I'm not sure how to fix it.  I'm not sure how to fix it...  anyways\
      \ the typo is 'TelnetHelper' where you check for the duplicates.\n\nAs you can\
      \ see above we have defined two variables, one of them is configurable: MyModuleClasses.\
      \ In the config file we will define the Sub Classes of MyModule that we want\
      \ to load:\n\n<uscript>\n[MyPackage.MyModMod]\nMyModuleClasses=class'MyFirstModule'\n\
      MyModuleClasses=class'MySecondModule'\nMyModuleClasses=class'MyExtras.AnotherModule'\n\
      etc...\n</uscript>\n\nThe method LoadModules() will load all module classes\
      \ defined in the variable MyModuleClasses and place the instance handle in the\
      \ var MyModules (this is what we use in the rest of the system). For every instance\
      \ of MyModule it will class a method called Init() to allow the module to do\
      \ some initialization. You should call the method LoadModules when your Mod\
      \ starts.\n\nNow we have loaded all modules we should call them when it's needed,\
      \ for example:\n\n<uscript>\nfunction SomethingHappend(Controller C, string\
      \ description)\n{\n  local int i;\n  for (i = 0;  i < MyModules.length; i++)\n\
      \  { \n    // break loop when handled\n    if (MyModules[i].DoSomething(C, description))\
      \ break;\n  }\n  // do some more\n}\n</uscript>\n\nWhen this function is called\
      \ it will loop through the MyModules list and call the method DoSomething on\
      \ every MyModule until it returns true. Breaking the loop when a MyModule has\
      \ handled the method is something you usualy want to do. In some cases you want\
      \ every module to perform some actions, like saving stuff. But most of the time\
      \ you want to ask a module if it wants to do something with the currect aparameters\
      \ or not.\n\nNow that this is defined you need to program the Base Class of\
      \ the Module.\n\n==Base Module Class ==\n\n<uscript>\nclass MyModule extends\
      \ Object within MyModMod;\n\nfunction bool Init()\n{\n  return true;\n}\n\n\
      function bool DoSomething(Controller C, string description)\n{\n  return false;\n\
      }\n\nfunction bool DoSomethingElse(Controller C1, Controller C2)\n{\n  return\
      \ false;\n}\n\nfunction SaveStatus()\n{\n}\n</uscript>\n\nThe base class defines\
      \ all methods that can be called on the module. The base class should not contain\
      \ a lot of code, only code that is realy common to all modules.\n\nAlso on methods\
      \ that return a bool to define if they handled it should return false by default.\
      \ Init should return true by default.\n\nThe base class is defined to execute\
      \ within the context of MyModMod, thus it should extend Object since it's already\
      \ a sub class of whatever MyModMod is a subclass off.\n\n===A module ===\n\n\
      Now that we have defined a base class we can create the modules.\n\n<uscript>\n\
      class MyFirstModule extends MyModule;\n\nfunction bool Init()\n{\n  log(\"MyFirstModule\
      \ loaded succesfully\");\n  return true;\n}\n\nfunction bool DoSomething(Controller\
      \ C, string description)\n{\n  if (description != \"\")\n  {\n    Log(\"Dosomething\
      \ called with an non empty description\");\n    return true;\n  }\n  return\
      \ false;\n}\n</uscript>\n\nMyFirstModule implements the methods Init and DoSomething,\
      \ the other methods are left to it's default. In Init we just say that we have\
      \ loaded. \n\nIn DoSomething we add a log line when the description is not empty,\
      \ and return true. Because we return true we will prevent other Modules to be\
      \ called. If description is not empty we will return false and give other modules\
      \ a chance.\n\n==Releasing a SDK ==\n\nWhen you release your mod it's very wise\
      \ to provide documentation on how the modules work and how somebody can extend\
      \ them. Provide the source of the base class(es) with this documentation, document\
      \ every function declared.\n\n'''Solid Snake:''' This is what Chaos Engine is\
      \ doing.\n\n==Related Topics==\n* [[Legacy:Making Mods|Making Mods]]"
  properties: []
  revId: 5003
name: "Legacy:Modular Mod"
revision:
  revid: 5003
  parentid: 5005
  user: "192.251.69.54"
  timestamp: 1133577448.000000000
  comment: "*"
timestamp: 1668800304.022445000
