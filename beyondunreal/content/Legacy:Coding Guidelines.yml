---
parse:
  title: "Legacy:Coding Guidelines"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#General_Advice\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">General Advice</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Indentation\"><span class=\"\
      tocnumber\">2.1</span> <span class=\"toctext\">Indentation</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Expression_Syntax\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Expression Syntax</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-5\"><a href=\"#Comments\"><span class=\"tocnumber\"\
      >2.3</span> <span class=\"toctext\">Comments</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Class_Declaration\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Class Declaration</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Names\"><span class=\"tocnumber\"\
      >4</span> <span class=\"toctext\">Names</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-8\"><a href=\"#Name_Capitalization\"><span class=\"tocnumber\"\
      >4.1</span> <span class=\"toctext\">Name Capitalization</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-9\"><a href=\"#Names_are_Documentation\"><span\
      \ class=\"tocnumber\">4.2</span> <span class=\"toctext\">Names are Documentation</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Negatives\"><span class=\"\
      tocnumber\">4.3</span> <span class=\"toctext\">Negatives</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-11\"><a href=\"#Hungarian_Notation\"><span class=\"\
      tocnumber\">4.4</span> <span class=\"toctext\">Hungarian Notation</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"#Braces\"><span\
      \ class=\"tocnumber\">5</span> <span class=\"toctext\">Braces</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-13\"><a href=\"#Code_Duplication\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">Code Duplication</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-14\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=1\" title=\"Edit section: Introduction\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<blockquote\
      \ class=\"legacyquote\">\n<p>Code should be written to be read by humans first,\
      \ and machines second.</p>\n<p>: <i>Don Laabs</i></p>\n</blockquote>\n<p>It\
      \ can be very useful and safe a lot of time when all coders who are working\
      \ on the same project use the same style of coding. This document is meant to\
      \ be a good guideline.</p>\n<p><b>Get yourself a decent text editor.</b> Notepad\
      \ rarely crashes, but that's about the only thing to be said in its favor. A\
      \ decent <a href=\"/Legacy:Text_Editor\" title=\"Legacy:Text Editor\">text editor</a>\
      \ (in coding terms) supports:</p>\n<dl>\n<dt>Auto-indention&#160;</dt>\n<dd>After\
      \ pressing <code>Enter</code>, the inserted paragraph has the same indentation\
      \ as the paragraph you're coming from. Some editors will also change the indent\
      \ when you type opening or closing braces.</dd>\n<dt>Hard tabs&#160;</dt>\n\
      <dd>Pressing the <code>Tab</code> key (optionally) doesn't insert an actual\
      \ tab character but simply enough spaces to jump to the next tab position. Conversely,\
      \ if there is nothing but tab-equivalent spaces before the cursor position on\
      \ the line, <code>Backspace</code> will remove the equivalent of one tab. See\
      \ below.</dd>\n<dt>Powerful search&#160;</dt>\n<dd>Some means to search the\
      \ open document for strings; that's one of your primary means for navigation\
      \ in your source code. Some text editors even provide \"inline search\", which\
      \ searches the document as you type in your search string – that's probably\
      \ the most efficient way to implement a document search from a user's point\
      \ of view.</dd>\n</dl>\n<p>Syntax highlighting is frequently mentioned as a\
      \ crucial feature too, but it's more a nice-to-have (or even a <i>very</i> nice-to-have)\
      \ than a feature that actually enhances your productivity.</p>\n<h2><span class=\"\
      mw-headline\" id=\"General_Advice\">General Advice</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=2\"\
      \ title=\"Edit section: General Advice\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Indentation\">Indentation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=3\" title=\"Edit section: Indentation\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>Indent\
      \ code that's in a block. Whether you indent it using tabs or spaces is a matter\
      \ of personal preference to a degree, but here are some pointers:</p>\n<ul>\n\
      <li>Tabs are a <i>logical</i> way of indenting code. In theory, everybody who's\
      \ reading your code could just set their favorite tab width in their text editor\
      \ and view your code as they like to. In practice, tabs are used as a <i>physical</i>\
      \ means of indentation and happily mixed and merged with regular spaces though,\
      \ which completely messes up the source code layout if the reader doesn't happen\
      \ to use exactly the same tab width as the writer. (Epic uses four characters,\
      \ for instance, while most text editors default to eight characters.)</li>\n\
      </ul>\n<ul>\n<li>A decent text editor allows you to enter tabs either as an\
      \ actual tab character or as a row of spaces automatically after a single stroke\
      \ on the <code>Tab</code> key.</li>\n</ul>\n<h3><span class=\"mw-headline\"\
      \ id=\"Expression_Syntax\">Expression Syntax</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=4\"\
      \ title=\"Edit section: Expression Syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Make expressions readable:</p>\n<ul>\n<li>Put spaces\
      \ around operators.</li>\n</ul>\n<ul>\n<li>Don't use more parentheses than necessary\
      \ to understand the expression. Operator precedences aren't always obvious to\
      \ everyone (if they aren't obvious to you, look them up on the <a href=\"/Legacy:Operators\"\
      \ title=\"Legacy:Operators\">Operators</a> page), but it's at least commonly\
      \ known that comparison operators have a higher precedence than binary boolean\
      \ operators, for instance.</li>\n</ul>\n<ul>\n<li>If your parentheses are complex,\
      \ consider marking the nesting with line breaks and indentation.</li>\n</ul>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// Example:</span>\n\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\n    Foo <span class=\"\
      sy0\">==</span> Bar \n  <span class=\"sy0\">&amp;&amp;</span>\n    Biz <span\
      \ class=\"sy0\">==</span> Bax\n  <span class=\"br0\">)</span> \n<span class=\"\
      br0\">{</span>\n  <span class=\"co1\">// do stuff</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"Comments\"\
      >Comments</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=5\" title=\"Edit section:\
      \ Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <blockquote class=\"legacyquote\">\n<p>If the code and the comments disagree,\
      \ then both are probably wrong.</p>\n<p>: <i>Norm Schryer</i></p>\n</blockquote>\n\
      <p>Everybody has a different notion on how much commenting is \"just enough,\"\
      \ but <i>no comments at all</i> are universally considered too sparse. At the\
      \ very least, give your classes and its methods comment headers that explain\
      \ what the class and its methods are meant to do. It's also good practice to\
      \ put a comment at the end of a public object property declaration that's exposed\
      \ in <a href=\"/Legacy:UnrealEd\" title=\"Legacy:UnrealEd\" class=\"mw-redirect\"\
      >UnrealEd</a>'s <a href=\"/Legacy:Actor_Properties_Window\" title=\"Legacy:Actor\
      \ Properties Window\">Actor Properties Window</a> – that might even be directly\
      \ supported by future versions of UnrealEd that might display those comments\
      \ as tooltips for mappers' guidance.</p>\n<p>When creating comment headers for\
      \ classes and methods it's generally easier to use comment blocks than single\
      \ line comments – as there is less editing to do should you need to update the\
      \ comment block at a later date.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"coMULTI\">/*\n    This function is called whenever a player collides\
      \ with the flag.\n    The function performs the following operations: ...\n\
      */</span>\n \n<span class=\"kw1\">function</span> FlagCollision <span class=\"\
      br0\">(</span><span class=\"br0\">)</span></pre></div>\n</div>\n<dl>\n<dd><b>EntropicLqd:</b>\
      \ Sometimes the <i>what</i> in a comment is self evident from the code. The\
      \ <i>why</i> however may be far less obvious. It's also easier to comment small\
      \ blocks of code so it's worth creating reasonably atomic functions. I'll dig\
      \ out Code Complete tonight – that had some good thoughts on commenting code.</dd>\n\
      </dl>\n<dl>\n<dd><b>Mychaeel:</b> Concise code and variable names that are well\
      \ thought out will help a great deal already (both readers <i>and the writer</i>\
      \ of the code), but there's a natural limit to that. That's why I'm emphasizing\
      \ class and function comment headers – they allow the writer to summarize what\
      \ hundreds of lines of code do in a few comprehensible natural-language sentences,\
      \ and they serve to define a class's or a function's interface (which would\
      \ be the \"why\" you mentioned, I suppose).</dd>\n</dl>\n<dl>\n<dd><b>EntropicLqd:</b>\
      \ I would agree with that. I rarely add comment blocks within a given function\
      \ or method (unless I'm up to something particularly tortuous) but my function\
      \ and class headers are generally detailed works of art (well, detailed anyway).</dd>\n\
      </dl>\n<dl>\n<dd><b>Sweavo:</b> <a rel=\"nofollow\" class=\"external free\"\
      \ href=\"http://www.ooblick.com/text/comments.html\">http://www.ooblick.com/text/comments.html</a>\
      \ comments are about the PURPOSE of a piece of code. That's something that you\
      \ can't capture in the code. The code only captures what the code DOES.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Class_Declaration\">Class Declaration</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=6\" title=\"Edit section: Class\
      \ Declaration\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>If you use modifiers in your class declaration (see <a href=\"/Legacy:Class_Syntax\"\
      \ title=\"Legacy:Class Syntax\">Class Syntax</a>) place each modifier on an\
      \ indented new line.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> Child <span class=\"kw1\">extends</span> Parent\n\t<span\
      \ class=\"kw1\">abstract</span>\n\t<span class=\"kw1\">config</span>\n\t<span\
      \ class=\"kw1\">native</span>;</pre></div>\n</div>\n<p><b>[BWF]GrimReaper:</b>\
      \ Beware of using the word 'class' in preceding comments. The compiler will\
      \ error.</p>\n<p><b>El Muerte TDS:</b> that is not completely true, multi-line\
      \ comments are not ignored in the initial class parsing, so:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"coMULTI\">/* this class won't compile */</span>\n\
      <span class=\"kw1\">class</span> Child <span class=\"kw1\">extends</span> Parent\
      \ <span class=\"kw1\">abstract</span> <span class=\"kw1\">config</span>;</pre></div>\n\
      </div>\n<p>The initial parses recognizes this as a class called \"won\", there's\
      \ an easy work around for this at the moment:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"coMULTI\">/* \n  class Child extends Parent\n\
      \  this does compile, all it needs are the class and extends, the class modifiers\
      \ are not needed\n*/</span>\n<span class=\"kw1\">class</span> Child <span class=\"\
      kw1\">extends</span> Parent <span class=\"kw1\">abstract</span> <span class=\"\
      kw1\">config</span>;</pre></div>\n</div>\n<p><b>Foxpaw:</b> I believe you can\
      \ also use single-line comments, like so:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">// This Class does some junk.</span>\n<span class=\"\
      co1\">// I guess.</span>\n<span class=\"co1\">// I never use comments anyway.</span>\n\
      <span class=\"kw1\">class</span> AClass <span class=\"kw1\">extends</span> ASuper<span\
      \ class=\"re0\">Class</span>&lt; SEMI &gt;</pre></div>\n</div>\n<p><b>El Muerte\
      \ TDS:</b> that's what I implicated, only multi-line comments have problems\
      \ (also in defaultproperties)</p>\n<p><b>El Muerte:</b> maybe interesting to\
      \ note, all UE2.5 based games (like UT2004) have no issues with block comments,\
      \ you may use them anywhere you like. In fact, you can even nest them if you\
      \ want (although most editors do not get that).</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Names\">Names</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=7\" title=\"Edit section:\
      \ Names\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>See <a rel=\"nofollow\" class=\"external text\" href=\"http://www.objectmentor.com/resources/articles/naming.htm\"\
      >Ottinger's Rules for Variable and Class Naming</a> for a few very valuable\
      \ guidelines on naming.</p>\n<h3><span class=\"mw-headline\" id=\"Name_Capitalization\"\
      >Name Capitalization</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=8\" title=\"Edit section:\
      \ Name Capitalization\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Stick to the conventions used in UnrealScript for naming your class, function,\
      \ state and variable names.</p>\n<ul>\n<li>Write all UnrealScript keywords in\
      \ lowercase.</li>\n<li>Write all symbol names (variable, state, class names)\
      \ using the capitalization used in their declaration, even though UnrealScript\
      \ is case-insensitive.</li>\n<li>Name your functions, variables with the Pascal\
      \ notation (HelpMe, MyInteger, DoSomething()).</li>\n</ul>\n<h3><span class=\"\
      mw-headline\" id=\"Names_are_Documentation\">Names are Documentation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=9\" title=\"Edit section: Names\
      \ are Documentation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <blockquote class=\"legacyquote\">\n<p>Always, always, always use good, unabbreviated,\
      \ correctly-spelled meaningful names.</p>\n</blockquote>\n<blockquote class=\"\
      legacyquote\">\n<p>&#160;; \"I don't like typing that much!\"<b>&#160;: You're\
      \ really just admitting that you don't know how to type, which is really not\
      \ acceptable these days. Good editors help. Copy and paste if you have to. It's\
      \ not really that much to do. Typically, in a narrow system, a given symbol\
      \ won't be referenced more than 20 times anyway.</b></p>\n</blockquote>\n<blockquote\
      \ class=\"legacyquote\">\n<p>&#160;; \"It's difficult to come up with meaningful\
      \ names!\"&#160;: Agreed. Lambda functions are nice but aren't always available.\
      \ Perhaps you can more something more generic, or maybe you can scope a name.\
      \ Usually, though, if you can't come up with a good name for a thing, you probably\
      \ don't have a good idea what the thing is supposed to do.</p>\n</blockquote>\n\
      <blockquote class=\"legacyquote\">\n<p>Taken from <a href=\"http://c2.com/cgi/wiki?MeaningfulName\"\
      \ class=\"extiw\" title=\"wiki:MeaningfulName\">Wiki:MeaningfulName</a>.</p>\n\
      </blockquote>\n<p>Make sure you give your functions and variables names that\
      \ match their purpose (even if it's more typing). Avoid the use of abbreviations\
      \ unless they're immediately clear to <i>everyone</i> who's likely to read your\
      \ code (including yourself).</p>\n<h3><span class=\"mw-headline\" id=\"Negatives\"\
      >Negatives</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=10\" title=\"Edit\
      \ section: Negatives\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Avoid double negatives. Make boolean variable names positive statements.\
      \ Here's an example of what <b>not</b> to do from <a href=\"/Legacy:DynamicAmbientSound\"\
      \ title=\"Legacy:DynamicAmbientSound\">DynamicAmbientSound</a>:</p>\n<pre> bDontRepeat\n\
      </pre>\n<p>Care to work out what that is interpreted as when \"False\"? Now\
      \ try it at 02:00 with no coffee. \"bRepeat\" would be far easier to understand,\
      \ even if it means having to set a default value differently.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Hungarian_Notation\">Hungarian Notation</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=11\" title=\"Edit section: Hungarian\
      \ Notation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Hungarian notation uses a prefix to indicate the data type of a variable.\
      \ Epic use Hungarian notation for boolean variables (bStatic, for example),\
      \ but extending the usage to other simple variables can greatly improve the\
      \ readability and maintainability of your code. In the example below the lower\
      \ variable declaration uses hungarian notation to indicate that the variable\
      \ is an int.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw5\">int</span> Count; <span class=\"co1\">// No hungarian notation here</span>\n\
      <span class=\"kw5\">int</span> iCount; <span class=\"co1\">// Note the \"i\"\
      \ prefix - that's hungarian notation</span></pre></div>\n</div>\n<p>The prefixes\
      \ you use within your code are purely a matter of choice.</p>\n<ul>\n<li>Some\
      \ coders use the first character of the built-in data types as variable name\
      \ prefixes; but you can also use multi-letter prefixes and mark variables for\
      \ their intended use (for instance, <code>IndexFoo</code> or <code>idxFoo</code>\
      \ for integer variables used as array indices, <code>CountBar</code> or <code>cntBar</code>\
      \ or <code>nBar</code> for integers that hold a counter of something, and so\
      \ on).</li>\n</ul>\n<ul>\n<li>For object references, you could use the referenced\
      \ object's class name (or a reasonable abbreviation of it) as the variable name\
      \ prefix, for example <code>PawnPlayer</code> or <code>EffectExplosion</code>.</li>\n\
      </ul>\n<p>The aim of hungarian notation is to improve code comprehension. You're\
      \ not only doing that for other people reading your code but mainly for yourself.\
      \ It's much easier to write bugfree code if you don't constantly have to remember\
      \ what your variables are supposed to contain.</p>\n<p><b>Daid303:</b> I shouldn't\
      \ use this if I where you, it can make you lazy and make bad variable names.\
      \ The name itself sould make clear what the type is. \"BlaBlaCount\" (int maybe?)\
      \ the only thing that you could use it for is bools, there i find it usefull.\
      \ And a nice thing of this: see this common C code: <code>int main(int argc,\
      \ char** argv)</code>and now with hungarian notation: <code>int main(int iArgc,\
      \ char** papacArgv)</code> So when someone says \"hungarian notation\" to me\
      \ I say \"papac\"&#160;:)</p>\n<p><b>EntropicLqd:</b> You know that is the worst\
      \ argument I've ever seen against Hungarian notation - lazy variable names indeed\
      \ - your having a laugh. If someone is prepared to add the prefixes the notation\
      \ requires they are almost certainly going to name their variables appropriately.\
      \ Given a sensible variable name like <code>ItemCount</code> can you tell me\
      \ whether that's a byte, short, int, long, or any other type without looking\
      \ at the declaration? No. In C I've commonly seen null termianted strings referred\
      \ to as <code>sz</code>, and arrays as simply <code>a</code> as they are inherently\
      \ pointers. So your <code>papac</code> example simply becomes <code>asz</code>.\
      \ Still, I pretty much only use Hungarian notation when I'm coding in C and\
      \ I've not done that for a few years now.</p>\n<p><b>Foxpaw:</b> Just my two\
      \ cents, but I also think that the name of a variable should make it clear what\
      \ the variable is. I usually use the hungarian notation for boolean variables\
      \ but that is all. Most other variables it seems clear. I have a few conventions,\
      \ any single lowercase letter is an interator counter, and any single uppercase\
      \ letter is either an iterator reference variable or stores something to make\
      \ the code more optimal.</p>\n<p>Other that that, everything seems clear. \"\
      Relatives\" doesn't seem like it could possibly be anything other than a list\
      \ of relatives. \"MaxThrust\" is the maximum amount of thrust - as a scalar\
      \ quantity, it can't be anything BUT a numerical variable. Sure, it doesn't\
      \ specify int, float, byte, short, or what-have-you, but so what? It should\
      \ be pretty obvious. Thrust is a continuously variable quantity, so obviously\
      \ it's floating point. If it was a counter, obviously it would be an integral\
      \ variable. (The types of which, as far as I'm concerned, are interchangeable.)</p>\n\
      <p>However, I have to disagree with the iargc and papacargv above. Those are\
      \ sort of already in Hungarian notation, but the notation is at the end. (Argc\
      \ -&gt; cArg -&gt; A count of arguments, and Argv -&gt; vArg -&gt; a list (vector)\
      \ of arguments.)</p>\n<p><br /></p>\n<h2><span class=\"mw-headline\" id=\"Braces\"\
      >Braces</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=12\" title=\"Edit\
      \ section: Braces\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Where to put the braces that surround blocks of statements is largely a matter\
      \ of personal preference. There are a couple of different variants around.</p>\n\
      <p>The only thing that's universally agreed on is that you should by all means\
      \ indent all statements of a block. (Whether to indent them with blanks or tabs\
      \ and how many of them is a matter for an entirely different discussion.)</p>\n\
      <ul>\n<li>Note that block statements (like <code>if</code>, <code>for</code>\
      \ and so on) don't require braces if the code block they apply to consists of\
      \ a single statement. Without braces, it's customary to put that single statement\
      \ in a line of its own anyway and indent it as if it were a block – just the\
      \ opening and closing brace are missing.</li>\n</ul>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">if</span><span class=\"br0\">(</span>foo<span\
      \ class=\"br0\">)</span>\n  bar;</pre></div>\n</div>\n<p>Epic's programmers\
      \ put opening and closing braces in separate lines, indented as much as the\
      \ surrounding code, with the block within the braces indented one more level.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">if</span><span class=\"\
      br0\">(</span>foo<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  bar\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>You can also put\
      \ the opening brace in the same line as the statement starting the block; that\
      \ makes the code more compact (which may or may not be a good thing) and emphasizes\
      \ the relation of the block itself and the block statement it belongs to.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">if</span><span class=\"\
      br0\">(</span>foo<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  bar\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>And you can indent\
      \ the closing brace with the interior block, so the whole thing looks like a\
      \ single paragraph with a hanging indent:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw2\">if</span><span class=\"br0\">(</span>foo<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n  bar; \n  <span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Code_Duplication\"\
      >Code Duplication</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Coding_Guidelines?section=13\" title=\"Edit\
      \ section: Code Duplication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>It's very easy to copy blocks of code when you need\
      \ the same instructions more than once. It's usually better to create a function\
      \ because if you want to change the code you don't have to do it more than once.\
      \ A good example is found in <a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a>'s <i><b>Dead</b></i> state:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">    <span class=\"kw1\">exec</span> <span class=\"kw1\">function</span>\
      \ Fire<span class=\"br0\">(</span> <span class=\"kw1\">optional</span> <span\
      \ class=\"kw5\">float</span> F <span class=\"br0\">)</span>\n    <span class=\"\
      br0\">{</span>\n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ bFrozen <span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\
      \            <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"br0\">(</span>TimerRate <span class=\"sy0\">&lt;=</span> <span class=\"\
      nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span\
      \ class=\"br0\">(</span>TimerRate <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \                bFrozen <span class=\"sy0\">=</span> <span class=\"kw6\">false</span>;\n\
      \            <span class=\"kw2\">return</span>;\n        <span class=\"br0\"\
      >}</span>\n        LoadPlayers<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n        ServerReStartPlayer<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\"\
      >exec</span> <span class=\"kw1\">function</span> AltFire<span class=\"br0\"\
      >(</span> <span class=\"kw1\">optional</span> <span class=\"kw5\">float</span>\
      \ F <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n       \
      \  Fire<span class=\"br0\">(</span>F<span class=\"br0\">)</span>;\n    <span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Fire() and AltFire() may often\
      \ need to be the same, but it's silly to have the same code copied into both.\
      \ You can also be sure that the same thing happens in both cases, without having\
      \ to check.</p>\n<p>The problems of code duplication also arise when overriding\
      \ functions or states. It's easy just to copy the parent's function and change\
      \ it, but this is often a bad idea, especially if the parent gets updated at\
      \ some point in the future. Often you still want all of the parent code, so\
      \ it's far tidier to call the parent's function first:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> OverridedFunction<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n \n<span class=\"br0\"\
      >{</span>\n    <span class=\"kw6\">Super</span>.<span class=\"me0\">OverridedFunction</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n    <span class=\"\
      co1\">// additional instructions in child</span>\n \n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>It also makes it easier for you to keep track of what you've changed.</p>\n\
      <p>In the case of states, you have to remember that you inherit all of that\
      \ state's functions, so you don't need to copy all the parent code. Only copy\
      \ the functions you actually want to change, so you know later on for sure which\
      \ code is yours.</p>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Coding_Guidelines?section=14\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Wormbo:</b>\
      \ A little discussion from my page:</p>\n<dl>\n<dd><i>EntropicLqd</i> - I saw\
      \ you sneak in and change the formatting of the Relics page to not use the subheadings&#160;:P.\
      \ I bet you put your curly braces on the same line as your if statement too!&#160;:P&#160;:)&#160;;)\
      \ - I'll make my stuff consistent at some point if you don't beat me to it.</dd>\n\
      <dd>What's wrong with the brace on the same line? <i>Everything!&#160;;P</i>\
      \ I always put them there except for function, state, replication and defaultproperties.&#160;;-)\
      \ – <i>Wormbo</i><br />\n(Hey, this reminds me! We could make a page about good\
      \ coding style...)</dd>\n<dd><i>Uh yeah. Please, let's have a good, fun, utterly\
      \ pointless discussion about coding style – where to put braces and how to indent.\
      \ I have some pretty unorthodox notions of my own there. &#160;;-) —<a href=\"\
      /Legacy:Mychaeel\" title=\"Legacy:Mychaeel\">Mychaeel</a></i></dd>\n</dl>\n\
      <dl>\n<dd>That would rock - I've not had a decent flame war (aka religious discussion)\
      \ about coding style for ages. The problem with coding-style discussions is\
      \ that there is <i>no right answer</i>. In reality, consistency is more important\
      \ than form - but I'll save the rest for the discussion – <i>EntropicLqd</i></dd>\n\
      </dl>\n<dl>\n<dd><i>That, indeed, is something I heartily agree on. <b>Consistency</b>\
      \ is important, not where braces are located and how indention is done (obviously\
      \ everybody has grown attached to what he/she's doing him/herself, because I\
      \ doubt doing it otherwise simply didn't occur to anyone). &#160;:-) —<a href=\"\
      /Legacy:Mychaeel\" title=\"Legacy:Mychaeel\">Mychaeel</a></i></dd>\n</dl>\n\
      <dl>\n<dd>If only that were true. I've probably tried hundreds of different\
      \ combinations of styles in an attempt to find the \"perfect\" style. In practice\
      \ I've simply found a set of conventions for code that I find easiest to read.\
      \ The really ironic thing is that these conventions have changed over time (i.e\
      \ the last million years) and so the style I use now is very slightly different\
      \ to the style I was using a year ago. What I also find even worse is that some\
      \ elements of my coding style are influenced by whatever language I am developing\
      \ most in at the time.</dd>\n</dl>\n<dl>\n<dd><i>Actually, I don't find that\
      \ to be a problem... you can hardly keep a consistent style across different\
      \ languages simply due to the very different syntax of theirs. My source code\
      \ style in Delphi is very different from my source code style in UnrealScript,\
      \ but then again it's hard to compare because the languages simply <b>have</b>\
      \ different syntax. Then again, the way I indent braces and stuff like that\
      \ is consistent among languages that <b>use</b> braces. As for symbol naming\
      \ and capitalization conventions I've always found it most convenient to stick\
      \ with the conventions given by the language used, more or less at least. —\
      <a href=\"/Legacy:Mychaeel\" title=\"Legacy:Mychaeel\">Mychaeel</a></i></dd>\n\
      </dl>\n<dl>\n<dd>I agree about the indentation thing - that's something that\
      \ is completely consistent aross all languages - as is my bracing (for those\
      \ that use braces). Spacing after/before brackets is something I'm <i>almost</i>\
      \ (sigh) always consistent in, and my function declarations (when needed) and\
      \ commenting style is pretty much identical across all languages. Symbol naming\
      \ and capitalisation is something I prefer to be consistent with but in most\
      \ cases someone else has generally written the coding style guide before me.\
      \ It irritates me that I find symbol naming and capitalisation pretty much transparent\
      \ to code comprehension - I feel it should be more important than it actually\
      \ is in practice.</dd>\n</dl>\n<hr />\n<p><b>Mychaeel:</b> The problem with\
      \ such a page on a Wiki is that you will hardly be able to find something less\
      \ than ultra-generic that all people agree on. I, for instance, completely disagree\
      \ with the notion of using tabs instead of blanks for indentation, ironically\
      \ for precisely the reasons you're mentioning (non-standardized tab widths,\
      \ above all – and a decent text editor will let you use the <code>Tab</code>\
      \ key for inserting spaces to jump to the next tab position, so convenience\
      \ of use is not an issue).</p>\n<p>So brace yourself for a heated discussion\
      \ on what \"good coding style\" is, as everybody has a different notion of it.\
      \ (And at the end of it, there's nothing wrong with that – as long as, like\
      \ you say, a whole team agrees on a given set of conventions, it's pretty irrelevant\
      \ <i>what</i> conventions those are.)</p>\n<p><b>Tarquin:</b> we could outline\
      \ the different styles. You're right about tabs... they can look great in UnrealEd's\
      \ script window and then like dross in a different editor.&#160;:( Going beyond\
      \ typographical layout, we could mention conventions such as bSomething for\
      \ booleans, EOPtions for enumerations.</p>\n<p><b>2COOL4-U:</b> Well I really\
      \ am pro-tabs. No one has ever set a standard about how many spaces to use.\
      \ And all the editors I use(except 1st page 2000 for HTML editing) have a nice\
      \ good way of handling tabs. Also a good editor has an option to change the\
      \ number of spaces used for a tab.</p>\n<p>I am also trying to write coding\
      \ guidelines about how the classes coded by Epic Games are written. They use\
      \ tabs for example.</p>\n<p><b>Mychaeel:</b> Well... the lack of a common standard\
      \ for the number of characters per tabstop is, as I wrote, something that's\
      \ in my opinion the best argument <b>against</b> the usage of tabs for indentation\
      \ – Epic is apparently using four character widths per tabstop, while normal\
      \ text terminals and text editors default to eight. Looking at Epic's code with\
      \ a text editor that isn't set to those exact four characters makes it look\
      \ pretty messed up and incomprehensible.</p>\n<p>That's especially true since\
      \ coders are tempted to use tabs not only for indentation but also for horizontal\
      \ alignment of subsequent lines; and mixing lines with tabs and blanks is pure\
      \ horror. I can't see any of these disadvantages in using blanks and a decent\
      \ text editor that enters them when you press <code>Tab</code>.</p>\n<p>Incidentally,\
      \ every full-fledged programming environment like Microsoft Visual C++ or Delphi\
      \ makes either behavior optional and configurable. At the end of the day that\
      \ just proves once more that this is an item of personal preference (even though\
      \ everybody might have strong reasons for doing it this or another way), and\
      \ nobody is in the position to publicly claim that using tabs or not using tabs\
      \ is the one way to go. If anything we could, Wiki-like, list pros and cons\
      \ for both notions and be done with that.</p>\n<p><b>EntropicLqd</b> Ironically\
      \ the very reason cited by Mychaeel for using spaces instead of tabs is the\
      \ reason I prefer to use tabs. I tend to use tab stops of either 2 or 4 depending\
      \ on what language I am programming in. The text editor I use has a configurable\
      \ setting for the tab stops. This means that if I pick up some code from someone\
      \ who thinks a tab stop of 8 is great, if they have used tabs, it will get displayed\
      \ to my preference. If spaces are used I either have to remember to also use\
      \ spaces (so as not to break the indentation scheme when viewed by the original\
      \ author), or reformat all the code to use tabs (which would also irritate the\
      \ original author).</p>\n<p><b>TaoPaiPai:</b> The last thing I want is someone\
      \ to tell me how to indent my code&#160;:/&#160;:p</p>\n<p><b>Birelli:</b> My\
      \ attempt at a generic statement: \"Projects in which there are going to be\
      \ multiple editors used essentially require the use of spaces only and not tabs.\
      \ However, if there is no doubt at all that every member of the team working\
      \ on the project and every member that 'will <b>ever</b> work on it' is going\
      \ to use the same text editor then, if everyone agrees, tabs can be permissible\
      \ to use as a time-saver and an efficient way of lining up consecutive lines,\
      \ something that anyone who has made a block of slightly varying function calls\
      \ can attest to as critical.\" Ok, so it's a bit lengthy, but I think it satisfies\
      \ all the arguments presented. Personally, I always use tabs in my programming,\
      \ but if I was ever going to work with someone using a different editor, I think\
      \ it would be worth it to use spaces. &lt;/riding the fence&gt;&#160;;-)</p>\n\
      <p><b>Mychaeel:</b> The \"time saver\" argument really doesn't apply, unless\
      \ you're using a very simple text editor that doesn't allow you to use the <code>Tab</code>\
      \ key to jump to the next tab position with <i>spaces</i>. I wouldn't like to\
      \ have to hit the <code>Space</code> key either twice (or more) each time I\
      \ add an indentation level. (By the way: I'm <i>implying</i> the presence of\
      \ auto-indent in a decent text editor: When pressing <code>Enter</code>, the\
      \ new line is indented just as much as the one you were previously in.)</p>\n\
      <p><b>Tarquin:</b> absolutely. I used to think \"spaces... urg!\" until I switched\
      \ to TextPad. Spaces make sense for the saved document; using the tab key makes\
      \ sense for the actual coder. Auto-indent brings the two together&#160;:)</p>\n\
      <p><b>Birelli:</b> Aaaah, /me understands Mych now. I guess that does satisfy\
      \ everything involved.</p>\n<p><b>Mychaeel:</b> To my utter delight I just found\
      \ the following quote on <a rel=\"nofollow\" class=\"external text\" href=\"\
      http://mindprod.com/unmainobfuscation.html\">How To Write Unmaintainable Code:\
      \ Coding Obfuscation</a> (also linked from <a href=\"/Legacy:UnrealScript\"\
      \ title=\"Legacy:UnrealScript\">UnrealScript</a>, though not by me, I might\
      \ add): \"<b>Tabs From Hell</b> – Never underestimate how much havoc you can\
      \ create by indenting with tabs instead of spaces, especially when there is\
      \ no corporate standard on how much indenting a tab represents.\"</p>\n<p><b>Trystan:</b>\
      \ Nothing to do with tabs; everything to do with Hungarian notation. I've always\
      \ disagreed with it - in my mind your variable name and an idea of what the\
      \ code is doing, along with context, should be enough of a clue to a programmer\
      \ as to what your variable contains. I use bVariableName myself because I like\
      \ to know that a variable should only be compared to true/false, but I never\
      \ saw the point of lpszPointerToAString. I'm also a fan of CamelCase notation,\
      \ but not camelCase. Why not capitalize the first letter? It keeps things more\
      \ \"standard\"; you could either \"capitalize the first letter of every word\
      \ except the first\" or \"capitalize the first letter of every word.\" Anything\
      \ with an exception in it makes me think \"not standard.\" As further proof\
      \ of Hungarian notation's uselessness the .NET Framework - the framework of\
      \ the future (?) - discourages it's use and Microsoft has officially stopped\
      \ usage of the notation in it's corporate programming.</p>\n<p>As for tabs -\
      \ I'm a tab fanatic. I hate spaces. I hate spaces because we live in a mostly\
      \ WYSIWYG world and when you open up code inside an editor that defaults to\
      \ a proportional font spacing just gives up the ghost. I'm willing to wager\
      \ that's why most people use tabs: a tab will always take you a half inch in,\
      \ or whatever you have yours set to. (Should you use an editor that doesn't\
      \ default to a proportional font? Probably not. How many times have you been\
      \ on a machine who's only text editor is Wordpad when you want to take a gander\
      \ at someone else's code? My personal machine is tweaked out to my specifications,\
      \ but the other 325 machines at my company aren't.&#160;:P)</p>\n<p><b>Mychaeel:</b>\
      \ \"Hungarian notation\" isn't what I'm personally using for my variable names,\
      \ but I do use a prefix-based naming convention (that is thus \"reversed\" compared\
      \ to normal talking). Boolean values are prefixed with \"b\", counters with\
      \ \"n\", indices with \"i\". After that, a top-down list of terms describing\
      \ what the variable holds – for instance \"nPlayersJailed\", which would be\
      \ a variable that holds the number of jailed players. And \"nPlayersFree\" would\
      \ be the number of free players. When those two variable names are neatly horizontally\
      \ aligned (something you <b>cannot</b> do with proportional fonts), it's easy\
      \ to see at the first glance what's the same about them (count players) and\
      \ what's different (jailed/free). What's more important for anybody having to\
      \ maintain your code, you can pull all this information from the very variable\
      \ name itself at any time.</p>\n<p>Tabs in source code are something I, for\
      \ very practical reasons, loathe. They're neat in concept as you describe, but\
      \ I have yet to see anybody who actually uses them along their conceptual beauty.\
      \ Most people use them in a very thoughtless \"layout\" sense which breaks beyond\
      \ recognition as soon as somebody else looks at their code with another tab\
      \ setting, or another font, or just another editor. <i>Especially</i> if you're\
      \ dealing with 325 computers with 325 different editor preferences, that should\
      \ be important to you. If people <b>only</b> used tabs for block indention,\
      \ everything would be fine and even I would use them; but people also use tabs\
      \ to horizontally align corresponding items on subsequent lines, or comments\
      \ at the end of lines, and so on. What's even worse is if people use spaces\
      \ <i>and</i> tabs in the same source code, maybe even in the same block (just\
      \ look at Epic's code).</p>\n<p>Using spaces for indention and horizontal alignment\
      \ avoids <b>all</b> of those problems at the small expense of indentions not\
      \ being as wide as with tabs when used with proportional fonts; but at least\
      \ they're still recognizable. (And you can scratch the entire notion of horizontal\
      \ alignment anyway beyond mere block indention if you're using a proportional\
      \ font to start with, which is one more reason not to do that.)</p>\n<p><b>Trystan:</b>\
      \ True. I use tabs to line my code up underneath brackets and had never considered\
      \ it before. Eep. I may have to use that tabs to spaces option after all.. tab\
      \ once, logic block. Tab twice, code under logic block. Someone opens it up..\
      \ sigh.. time to go update our project's coding notes. (Ironically it's never\
      \ been a problem because I'm the only coder at my company.. heh.)</p>\n<p><b>Tarquin:</b>\
      \ best of both worlds is TextPad, which has Hard Tabs – <i>you</i> hit TAB,\
      \ but <i>it</i> inserts spaces&#160;:D</p>\n<p><b>Mychaeel:</b> I believe that's\
      \ a feature every decent text editor has (or ought to have, anyway) – mine can\
      \ even convert tabs to spaces on the fly when loading files or pasting text.</p>\n\
      <p><b>Trystan:</b> WOTGreal has it. Notepad doesn't..&#160;:) Wait, wait, that\
      \ doesn't qualify as a decent editor. I found another reason I enjoy tabs though\
      \ - if you've tabbed most editors will only require one cursor key movement\
      \ to go over the entire length of the tab. If you've used spaces you've got\
      \ to hit it that many times. Nothing serious, just trying to find stable ground\
      \ to stand on in tabs vs spaces.&#160;:P</p>\n<p><b>Mychaeel:</b> Of course\
      \ you would rather press Ctrl+LeftArrow or Ctrl+RightArrow to move from word\
      \ to word instead of pressing the same arrow key repeatedly. (Even Notepad supports\
      \ that.)</p>\n<p><b>Trystan:</b> BAH! I give up! /me putters off to code rather\
      \ than argue.&#160;:D</p>\n<p><b>EntropicLqd:</b> Since this discussion took\
      \ place I've moved to 2 <i>space</i> indents in all the code I write. I have\
      \ no idea why I've started doing things this way. It just happened about 3 months\
      \ ago. It doesn't even closely resemble the format I'm forced to use at work\
      \ (tabs set to 4 spaces). Maybe I'm rebelling&#160;:)</p>\n<p><b>Ryan:</b> Given\
      \ that I've not done any UnrealScript yet I suppose I should just shut up, but\
      \ never mind. I program in Java. I use tabs or spaces, depending on how I'm\
      \ feeling, I don't line code up always if I'm just bashing it into a function.\
      \ I certainly don't use proportional fonts - aargh. What I do is use a code\
      \ formatting tool - Jalopy, does a lovely job, straight into the format I want.\
      \ I tend to reformat after every 10 or 20 lines, or a function. This keeps the\
      \ whole thing neat and readable, inserts comment skeletons and copyright notices\
      \ etc. I wouldn't go back to having to rely on manual layout. If I'm going to\
      \ read a piece of \"foreign\" java code I tend to run it through the formatter.\
      \ I find it easier to read in the format I'm used to. My guess is that I'll\
      \ use the same layout for UnrealScript. Capitals at the start of a name always\
      \ make me think that it's a class name, oh well never mind.</p>\n<p>Does anyone\
      \ know of any code formatters that understand UnrealScript?</p>\n<p><b>Graphik:</b>\
      \ <a href=\"/Legacy:ConTEXT\" title=\"Legacy:ConTEXT\">ConTEXT</a></p>\n<p><b>El\
      \ Muerte:</b> A lot of text editors have a unrealscript syntax highlighter,\
      \ check the <a href=\"/Legacy:Text_Editor/Feature_Matrix\" title=\"Legacy:Text\
      \ Editor/Feature Matrix\">Text Editor/Feature Matrix</a></p>\n<p><b>Mychaeel:</b>\
      \ I think Ryan's asking about a code <i>formatter</i>, not a <i>highlighter</i>.\
      \ I've not seen an UnrealScript source code formatter yet, but then again, I've\
      \ never looked for one; the only case in which I needed one, I hacked it in\
      \ Perl myself when I changed my code indention conventions a while ago and had\
      \ to reformat a bunch of sources (Jailbreak, in fact).</p>\n<p>Speaking of comment\
      \ templates: Comment templates in code which have never been filled in are loathsome\
      \ – worse than no comments at all, actually, because they pretend the presence\
      \ of actual documentation when they're in fact just noise (such things like\
      \ \"Enter description of class here\" in the comment header at the top of a\
      \ class). I'm sure comment templates can be handy and useful in the right hands,\
      \ but just like soft tabs and other things they tend to encourage thoughtless\
      \ source code design even when used by seasoned programmers.</p>\n<p><b>Ryan:</b>\
      \ Mychaeel - you're right, I meant a formatter not a highlighter. To be useful\
      \ a formatter needs to understand the language and preferred layout of sections\
      \ of the code and the structures it uses. I'm not going to get into a rant about\
      \ the Unreal codebase - I haven't set up a rant page yet&#160;:), and I don't\
      \ have the experience with it to make the comments constructive. I've found\
      \ that although people are prepared to argue until the cows come home about\
      \ layout, if they are given a tool that lays the code out they will in general\
      \ use it.</p>\n<p>I will make a tentative suggestion (based on no authority\
      \ whatsoever) that it might be useful to find, build a tool for formatting UnrealScript.\
      \ I for one would happily use it with an agreed format. It would make make code\
      \ I write easier for others to read, if they have an inclination to do so. Pretty\
      \ well all of the points you make, with the exceptions of naming conventions,\
      \ negatives and code duplication could be handled.</p>\n<p>On the comments front,\
      \ you're right again, it takes a certain level of commitment to replace the\
      \ templates. I'm afraid I'm a bit anal and am not prepared to leave the stubs\
      \ until they've got useful comments in them.</p>\n<p><b>El Muerte:</b> oh, you\
      \ mean something like <a rel=\"nofollow\" class=\"external text\" href=\"http://www.gnu.org/software/indent/indent.html\"\
      >GNU indent</a>?</p>\n<p><b>Ryan:</b> Yep, that's more like it. I know of any\
      \ number for Java or C, but none that I've found for UnrealScript. I'd guess\
      \ that Java formatters are the closest, but UnrealScript seems to have some\
      \ extra bits - \"defaultproperties\" for example.</p>\n<hr />\n<p><a href=\"\
      /Category:Legacy_Refactor_Me\" title=\"Category:Legacy Refactor Me\">Category:Legacy\
      \ Refactor Me</a></p>\n<p><a href=\"/Category:Legacy_To_Do\" title=\"Category:Legacy\
      \ To Do\">Category:Legacy To Do</a> – Needs appropriate linkage to other modding\
      \ and guidline pages; a Related Topics section plus linkage to this page.</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.279 seconds\nReal time usage:\
      \ 0.282 seconds\nPreprocessor visited node count: 240/1000000\nPreprocessor\
      \ generated node count: 491/1000000\nPost‐expand include size: 2544/2097152\
      \ bytes\nTemplate argument size: 967/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%   69.184      1 - -total\n 12.17%\
      \    8.422      6 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:723-0!*!0!!en!*!* and timestamp 20221118022004 and\
      \ revision id 2088\n -->\n"
  categories:
  - sortkey: "Coding Guidelines"
    name: "Legacy_Refactor_Me"
  - sortkey: "Coding Guidelines"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:ConTEXT"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:Operators"
  - ns: 14
    exists: true
    name: "Category:Legacy Refactor Me"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:Text Editor"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Text Editor/Feature Matrix"
  - ns: 100
    exists: true
    name: "Legacy:DynamicAmbientSound"
  - ns: 100
    exists: true
    name: "Legacy:Mychaeel"
  - ns: 100
    exists: true
    name: "Legacy:Actor Properties Window"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://mindprod.com/unmainobfuscation.html"
  - "http://www.objectmentor.com/resources/articles/naming.htm"
  - "http://www.ooblick.com/text/comments.html"
  - "http://www.gnu.org/software/indent/indent.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 0
    anchor: "Introduction"
  - toclevel: 1
    level: "2"
    line: "General Advice"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 1599
    anchor: "General_Advice"
  - toclevel: 2
    level: "3"
    line: "Indentation"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 1620
    anchor: "Indentation"
  - toclevel: 2
    level: "3"
    line: "Expression Syntax"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 2503
    anchor: "Expression_Syntax"
  - toclevel: 2
    level: "3"
    line: "Comments"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 3136
    anchor: "Comments"
  - toclevel: 1
    level: "2"
    line: "Class Declaration"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 5575
    anchor: "Class_Declaration"
  - toclevel: 1
    level: "2"
    line: "Names"
    number: "4"
    index: "7"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 7002
    anchor: "Names"
  - toclevel: 2
    level: "3"
    line: "Name Capitalization"
    number: "4.1"
    index: "8"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 7172
    anchor: "Name_Capitalization"
  - toclevel: 2
    level: "3"
    line: "Names are Documentation"
    number: "4.2"
    index: "9"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 7603
    anchor: "Names_are_Documentation"
  - toclevel: 2
    level: "3"
    line: "Negatives"
    number: "4.3"
    index: "10"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 8720
    anchor: "Negatives"
  - toclevel: 2
    level: "3"
    line: "Hungarian Notation"
    number: "4.4"
    index: "11"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 9127
    anchor: "Hungarian_Notation"
  - toclevel: 1
    level: "2"
    line: "Braces"
    number: "5"
    index: "12"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 13177
    anchor: "Braces"
  - toclevel: 1
    level: "2"
    line: "Code Duplication"
    number: "6"
    index: "13"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 14634
    anchor: "Code_Duplication"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "7"
    index: "14"
    fromtitle: "Legacy:Coding_Guidelines"
    byteoffset: 16310
    anchor: "Discussion"
  displaytitle: "Legacy:Coding Guidelines"
  iwlinks:
  - prefix: "wiki"
    url: "http://c2.com/cgi/wiki?MeaningfulName"
    name: "wiki:MeaningfulName"
  wikitext:
    text: "==Introduction ==\n\n{{innerbox| Code should be written to be read by humans\
      \ first, and machines second.\n\n : ''Don Laabs''\n\n}}\n\nIt can be very useful\
      \ and safe a lot of time when all coders who are working on the same project\
      \ use the same style of coding. This document is meant to be a good guideline.\n\
      \n'''Get yourself a decent text editor.'''  Notepad rarely crashes, but that's\
      \ about the only thing to be said in its favor.  A decent [[Legacy:Text Editor|text\
      \ editor]] (in coding terms) supports:\n\n; Auto-indention : After pressing\
      \ <code>Enter</code>, the inserted paragraph has the same indentation as the\
      \ paragraph you're coming from. Some editors will also change the indent when\
      \ you type opening or closing braces.\n; Hard tabs : Pressing the <code>Tab</code>\
      \ key (optionally) doesn't insert an actual tab character but simply enough\
      \ spaces to jump to the next tab position. Conversely, if there is nothing but\
      \ tab-equivalent spaces before the cursor position on the line, <code>Backspace</code>\
      \ will remove the equivalent of one tab. See below.\n; Powerful search : Some\
      \ means to search the open document for strings; that's one of your primary\
      \ means for navigation in your source code. Some text editors even provide \"\
      inline search\", which searches the document as you type in your search string\
      \ &ndash; that's probably the most efficient way to implement a document search\
      \ from a user's point of view.\n\nSyntax highlighting is frequently mentioned\
      \ as a crucial feature too, but it's more a nice-to-have (or even a ''very''\
      \ nice-to-have) than a feature that actually enhances your productivity.\n\n\
      ==General Advice ==\n\n===Indentation ===\n\nIndent code that's in a block.\
      \  Whether you indent it using tabs or spaces is a matter of personal preference\
      \ to a degree, but here are some pointers:\n\n* Tabs are a ''logical'' way of\
      \ indenting code.  In theory, everybody who's reading your code could just set\
      \ their favorite tab width in their text editor and view your code as they like\
      \ to.  In practice, tabs are used as a ''physical'' means of indentation and\
      \ happily mixed and merged with regular spaces though, which completely messes\
      \ up the source code layout if the reader doesn't happen to use exactly the\
      \ same tab width as the writer.  (Epic uses four characters, for instance, while\
      \ most text editors default to eight characters.)\n\n* A decent text editor\
      \ allows you to enter tabs either as an actual tab character or as a row of\
      \ spaces automatically after a single stroke on the <code>Tab</code> key.\n\n\
      ===Expression Syntax ===\n\nMake expressions readable:\n\n* Put spaces around\
      \ operators.\n\n* Don't use more parentheses than necessary to understand the\
      \ expression.  Operator precedences aren't always obvious to everyone (if they\
      \ aren't obvious to you, look them up on the [[Legacy:Operators|Operators]]\
      \ page), but it's at least commonly known that comparison operators have a higher\
      \ precedence than binary boolean operators, for instance.\n\n* If your parentheses\
      \ are complex, consider marking the nesting with line breaks and indentation.\n\
      \n<uscript>\n// Example:\nif (\n    Foo == Bar \n  &&\n    Biz == Bax\n  ) \n\
      {\n  // do stuff\n}\n</uscript>\n\n===Comments ===\n\n{{innerbox| If the code\
      \ and the comments disagree, then both are probably wrong.\n\n : ''Norm Schryer''\n\
      \n}}\n\nEverybody has a different notion on how much commenting is \"just enough,\"\
      \ but ''no comments at all'' are universally considered too sparse.  At the\
      \ very least, give your classes and its methods comment headers that explain\
      \ what the class and its methods are meant to do.  It's also good practice to\
      \ put a comment at the end of a public object property declaration that's exposed\
      \ in [[Legacy:UnrealEd|UnrealEd]]'s [[Legacy:Actor Properties Window|Actor Properties\
      \ Window]] &ndash; that might even be directly supported by future versions\
      \ of UnrealEd that might display those comments as tooltips for mappers' guidance.\n\
      \nWhen creating comment headers for classes and methods it's generally easier\
      \ to use comment blocks than single line comments &ndash; as there is less editing\
      \ to do should you need to update the comment block at a later date.\n\n<uscript>\n\
      /*\n    This function is called whenever a player collides with the flag.\n\
      \    The function performs the following operations: ...\n*/\n\nfunction FlagCollision\
      \ ()\n</uscript>\n\n: '''EntropicLqd:'''  Sometimes the ''what'' in a comment\
      \ is self evident from the code.  The ''why'' however may be far less obvious.\
      \  It's also easier to comment small blocks of code so it's worth creating reasonably\
      \ atomic functions.  I'll dig out Code Complete tonight &ndash; that had some\
      \ good thoughts on commenting code.\n\n:'''Mychaeel:'''  Concise code and variable\
      \ names that are well thought out will help a great deal already (both readers\
      \ ''and the writer'' of the code), but there's a natural limit to that.  That's\
      \ why I'm emphasizing class and function comment headers &ndash; they allow\
      \ the writer to summarize what hundreds of lines of code do in a few comprehensible\
      \ natural-language sentences, and they serve to define a class's or a function's\
      \ interface (which would be the \"why\" you mentioned, I suppose).\n\n:'''EntropicLqd:'''\
      \ I would agree with that.  I rarely add comment blocks within a given function\
      \ or method (unless I'm up to something particularly tortuous) but my function\
      \ and class headers are generally detailed works of art (well, detailed anyway).\n\
      \n:'''Sweavo:''' http://www.ooblick.com/text/comments.html comments are about\
      \ the PURPOSE of a piece of code.  That's something that you can't capture in\
      \ the code.  The code only captures what the code DOES.\n\n==Class Declaration\
      \ ==\n\nIf you use modifiers in your class declaration (see [[Legacy:Class Syntax|Class\
      \ Syntax]]) place each modifier on an indented new line.\n\n<uscript>\nclass\
      \ Child extends Parent\n\tabstract\n\tconfig\n\tnative;\n</uscript>\n\n'''[BWF]GrimReaper:'''\
      \  Beware of using the word 'class' in preceding comments. The compiler will\
      \ error.\n\n'''El Muerte TDS:''' that is not completely true, multi-line comments\
      \ are not ignored in the initial class parsing, so:\n\n<uscript>\n/* this class\
      \ won't compile */\nclass Child extends Parent abstract config;\n</uscript>\n\
      \nThe initial parses recognizes this as a class called \"won\", there's an easy\
      \ work around for this at the moment:\n\n<uscript>\n/* \n  class Child extends\
      \ Parent\n  this does compile, all it needs are the class and extends, the class\
      \ modifiers are not needed\n*/\nclass Child extends Parent abstract config;\n\
      </uscript>\n\n'''Foxpaw:''' I believe you can also use single-line comments,\
      \ like so:\n\n<uscript>\n// This Class does some junk.\n// I guess.\n// I never\
      \ use comments anyway.\nclass AClass extends ASuperClass;\n</uscript>\n\n'''El\
      \ Muerte TDS:''' that's what I implicated, only multi-line comments have problems\
      \ (also in defaultproperties)\n\n'''El Muerte:''' maybe interesting to note,\
      \ all UE2.5 based games (like UT2004) have no issues with block comments, you\
      \ may use them anywhere you like. In fact, you can even nest them if you want\
      \ (although most editors do not get that).\n\n==Names ==\n\nSee [http://www.objectmentor.com/resources/articles/naming.htm\
      \ Ottinger's Rules for Variable and Class Naming] for a few very valuable guidelines\
      \ on naming.\n\n===Name Capitalization ===\n\nStick to the conventions used\
      \ in UnrealScript for naming your class, function, state and variable names.\n\
      \n* Write all UnrealScript keywords in lowercase.\n* Write all symbol names\
      \ (variable, state, class names) using the capitalization used in their declaration,\
      \ even though UnrealScript is case-insensitive.\n* Name your functions, variables\
      \ with the Pascal notation (HelpMe, MyInteger, DoSomething()).\n\n===Names are\
      \ Documentation ===\n\n{{innerbox| Always, always, always use good, unabbreviated,\
      \ correctly-spelled meaningful names.\n\n}}\n\n{{innerbox| ; \"I don't like\
      \ typing that much!\"''' : You're really just admitting that you don't know\
      \ how to type, which is really not acceptable these days. Good editors help.\
      \ Copy and paste if you have to. It's not really that much to do. Typically,\
      \ in a narrow system, a given symbol won't be referenced more than 20 times\
      \ anyway. \n\n}}\n\n{{innerbox| ; \"It's difficult to come up with meaningful\
      \ names!\" : Agreed. Lambda functions are nice but aren't always available.\
      \ Perhaps you can more something more generic, or maybe you can scope a name.\
      \ Usually, though, if you can't come up with a good name for a thing, you probably\
      \ don't have a good idea what the thing is supposed to do. \n\n}}\n\n{{innerbox|\
      \ Taken from [[Wiki:MeaningfulName]].\n\n}}\n\nMake sure you give your functions\
      \ and variables names that match their purpose (even if it's more typing). \
      \ Avoid the use of abbreviations unless they're immediately clear to ''everyone''\
      \ who's likely to read your code (including yourself).\n\n===Negatives ===\n\
      \nAvoid double negatives. Make boolean variable names positive statements. Here's\
      \ an example of what '''not''' to do from [[Legacy:DynamicAmbientSound|DynamicAmbientSound]]:\n\
      \n  bDontRepeat\n\nCare to work out what that is interpreted as when \"False\"\
      ? Now try it at 02:00 with no coffee. \"bRepeat\" would be far easier to understand,\
      \ even if it means having to set a default value differently.\n\n===Hungarian\
      \ Notation ===\n\nHungarian notation uses a prefix to indicate the data type\
      \ of a variable. Epic use Hungarian notation for boolean variables (bStatic,\
      \ for example), but extending the usage to other simple variables can greatly\
      \ improve the readability and maintainability of your code. In the example below\
      \ the lower variable declaration uses hungarian notation to indicate that the\
      \ variable is an int.\n\n<uscript>\nint Count; // No hungarian notation here\n\
      int iCount; // Note the \"i\" prefix - that's hungarian notation\n</uscript>\n\
      \nThe prefixes you use within your code are purely a matter of choice.\n\n*\
      \ Some coders use the first character of the built-in data types as variable\
      \ name prefixes; but you can also use multi-letter prefixes and mark variables\
      \ for their intended use (for instance, <code>IndexFoo</code> or <code>idxFoo</code>\
      \ for integer variables used as array indices, <code>CountBar</code> or <code>cntBar</code>\
      \ or <code>nBar</code> for integers that hold a counter of something, and so\
      \ on).\n\n* For object references, you could use the referenced object's class\
      \ name (or a reasonable abbreviation of it) as the variable name prefix, for\
      \ example <code>PawnPlayer</code> or <code>EffectExplosion</code>.\n\nThe aim\
      \ of hungarian notation is to improve code comprehension.  You're not only doing\
      \ that for other people reading your code but mainly for yourself.  It's much\
      \ easier to write bugfree code if you don't constantly have to remember what\
      \ your variables are supposed to contain.\n\n'''Daid303:''' I shouldn't use\
      \ this if I where you, it can make you lazy and make bad variable names. The\
      \ name itself sould make clear what the type is. \"BlaBlaCount\" (int maybe?)\
      \ the only thing that you could use it for is bools, there i find it usefull.\
      \ And a nice thing of this: see this common C code: <CODE>int main(int argc,\
      \ char** argv)</CODE>and now with hungarian notation: <CODE>int main(int iArgc,\
      \ char** papacArgv)</CODE> So when someone says \"hungarian notation\" to me\
      \ I say \"papac\" :)\n\n'''EntropicLqd:''' You know that is the worst argument\
      \ I've ever seen against Hungarian notation - lazy variable names indeed - your\
      \ having a laugh.  If someone is prepared to add the prefixes the notation requires\
      \ they are almost certainly going to name their variables appropriately.  Given\
      \ a sensible variable name like <CODE>ItemCount</CODE> can you tell me whether\
      \ that's a byte, short, int, long, or any other type without looking at the\
      \ declaration?  No.  In C I've commonly seen null termianted strings referred\
      \ to as <CODE>sz</CODE>, and arrays as simply <CODE>a</CODE> as they are inherently\
      \ pointers.  So your <CODE>papac</CODE> example simply becomes <CODE>asz</CODE>.\
      \  Still, I pretty much only use Hungarian notation when I'm coding in C and\
      \ I've not done that for a few years now.\n\n'''Foxpaw:''' Just my two cents,\
      \ but I also think that the name of a variable should make it clear what the\
      \ variable is. I usually use the hungarian notation for boolean variables but\
      \ that is all. Most other variables it seems clear. I have a few conventions,\
      \ any single lowercase letter is an interator counter, and any single uppercase\
      \ letter is either an iterator reference variable or stores something to make\
      \ the code more  optimal.\n\nOther that that, everything seems clear. \"Relatives\"\
      \ doesn't seem like it could possibly be anything other than a list of relatives.\
      \ \"MaxThrust\" is the maximum amount of thrust - as a scalar quantity, it can't\
      \ be anything BUT a numerical variable. Sure, it doesn't specify int, float,\
      \ byte, short, or what-have-you, but so what? It should be pretty obvious. Thrust\
      \ is a continuously variable quantity, so obviously it's floating point. If\
      \ it was a counter, obviously it would be an integral variable. (The types of\
      \ which, as far as I'm concerned, are interchangeable.)\n\nHowever, I have to\
      \ disagree with the iargc and papacargv above. Those are sort of already in\
      \ Hungarian notation, but the notation is at the end. (Argc -> cArg -> A count\
      \ of arguments, and Argv -> vArg -> a list (vector) of arguments.)\n \n\n==Braces\
      \ ==\n\nWhere to put the braces that surround blocks of statements is largely\
      \ a matter of personal preference.  There are a couple of different variants\
      \ around.\n\nThe only thing that's universally agreed on is that you should\
      \ by all means indent all statements of a block.  (Whether to indent them with\
      \ blanks or tabs and how many of them is a matter for an entirely different\
      \ discussion.)\n\n* Note that block statements (like <code>if</code>, <code>for</code>\
      \ and so on) don't require braces if the code block they apply to consists of\
      \ a single statement.  Without braces, it's customary to put that single statement\
      \ in a line of its own anyway and indent it as if it were a block &ndash; just\
      \ the opening and closing brace are missing.\n\n<uscript>\nif(foo)\n  bar;\n\
      </uscript>\n\nEpic's programmers put opening and closing braces in separate\
      \ lines, indented as much as the surrounding code, with the block within the\
      \ braces indented one more level.\n\n<uscript>\nif(foo)\n{\n  bar\n}\n</uscript>\n\
      \nYou can also put the opening brace in the same line as the statement starting\
      \ the block; that makes the code more compact (which may or may not be a good\
      \ thing) and emphasizes the relation of the block itself and the block statement\
      \ it belongs to.\n\n<uscript>\nif(foo) {\n  bar\n}\n</uscript>\n\nAnd you can\
      \ indent the closing brace with the interior block, so the whole thing looks\
      \ like a single paragraph with a hanging indent:\n\n<uscript>\nif(foo) {\n \
      \ bar; \n  }\n</uscript>\n\n==Code Duplication ==\n\nIt's very easy to copy\
      \ blocks of code when you need the same instructions more than once. It's usually\
      \ better to create a function because if you want to change the code you don't\
      \ have to do it more than once. A good example is found in [[Legacy:PlayerController|PlayerController]]'s\
      \ '''''Dead''''' state:\n\n<USCRIPT>\n    exec function Fire( optional float\
      \ F )\n    {\n        if ( bFrozen )\n        {\n            if ( (TimerRate\
      \ <= 0.0) || (TimerRate > 1.0) )\n                bFrozen = false;\n       \
      \     return;\n        }\n        LoadPlayers();\n        ServerReStartPlayer();\n\
      \    }\n\n    exec function AltFire( optional float F )\n    {\n         Fire(F);\n\
      \    }\n\n</USCRIPT>\n\nFire() and AltFire() may often need to be the same,\
      \ but it's silly to have the same code copied into both. You can also be sure\
      \ that the same thing happens in both cases, without having to check.\n\nThe\
      \ problems of code duplication also arise when overriding functions or states.\
      \ It's easy just to copy the parent's function and change it, but this is often\
      \ a bad idea, especially if the parent gets updated at some point in the future.\
      \ Often you still want all of the parent code, so it's far tidier to call the\
      \ parent's function first:\n\n<USCRIPT>\n\nfunction OverridedFunction()\n\n\
      {\n    Super.OverridedFunction();\n\n    // additional instructions in child\n\
      \n}\n</USCRIPT>\n\nIt also makes it easier for you to keep track of what you've\
      \ changed.\n\nIn the case of states, you have to remember that you inherit all\
      \ of that state's functions, so you don't need to copy all the parent code.\
      \ Only copy the functions you actually want to change, so you know later on\
      \ for sure which code is yours.\n\n==Discussion ==\n\n'''Wormbo:''' A little\
      \ discussion from my page:\n: ''EntropicLqd'' - I saw you sneak in and change\
      \ the formatting of the Relics page to not use the subheadings :P.  I bet you\
      \ put your curly braces on the same line as your if statement too! :P :) ;)\
      \ - I'll make my stuff consistent at some point if you don't beat me to it.\n\
      :What's wrong with the brace on the same line? ''<i>Everything! ;P</i>'' I always\
      \ put them there except for function, state, replication and defaultproperties.\
      \ ;-) &ndash; ''Wormbo''<br />(Hey, this reminds me! We could make a page about\
      \ good coding style...)\n:<i>Uh yeah.  Please, let's have a good, fun, utterly\
      \ pointless discussion about coding style &ndash; where to put braces and how\
      \ to indent.  I have some pretty unorthodox notions of my own there.  ;-)  &mdash;[[Legacy:Mychaeel|Mychaeel]]</i>\n\
      \n: That would rock - I've not had a decent flame war (aka religious discussion)\
      \ about coding style for ages.  The problem with coding-style discussions is\
      \ that there is ''no right answer''.  In reality, consistency is more important\
      \ than form - but I'll save the rest for the discussion &ndash; ''EntropicLqd''\n\
      \n:<i>That, indeed, is something I heartily agree on.  <b>Consistency</b> is\
      \ important, not where braces are located and how indention is done (obviously\
      \ everybody has grown attached to what he/she's doing him/herself, because I\
      \ doubt doing it otherwise simply didn't occur to anyone).  :-)  &mdash;[[Legacy:Mychaeel|Mychaeel]]</i>\n\
      \n: If only that were true.  I've probably tried hundreds of different combinations\
      \ of styles in an attempt to find the \"perfect\" style.  In practice I've simply\
      \ found a set of conventions for code that I find easiest to read.  The really\
      \ ironic thing is that these conventions have changed over time (i.e the last\
      \ million years) and so the style I use now is very slightly different to the\
      \ style I was using a year ago.  What I also find even worse is that some elements\
      \ of my coding style are influenced by whatever language I am developing most\
      \ in at the time.\n\n:<i>Actually, I don't find that to be a problem... you\
      \ can hardly keep a consistent style across different languages simply due to\
      \ the very different syntax of theirs.  My source code style in Delphi is very\
      \ different from my source code style in UnrealScript, but then again it's hard\
      \ to compare because the languages simply <b>have</b> different syntax.  Then\
      \ again, the way I indent braces and stuff like that is consistent among languages\
      \ that <b>use</b> braces.  As for symbol naming and capitalization conventions\
      \ I've always found it most convenient to stick with the conventions given by\
      \ the language used, more or less at least.  &mdash;[[Legacy:Mychaeel|Mychaeel]]</i>\n\
      \n: I agree about the indentation thing - that's something that is completely\
      \ consistent aross all languages - as is my bracing (for those that use braces).\
      \  Spacing after/before brackets is something I'm <i>almost</i> (sigh) always\
      \ consistent in, and my function declarations (when needed) and commenting style\
      \ is pretty much identical across all languages.  Symbol naming and capitalisation\
      \ is something I prefer to be consistent with but in most cases someone else\
      \ has generally written the coding style guide before me.  It irritates me that\
      \ I find symbol naming and capitalisation pretty much transparent to code comprehension\
      \ - I feel it should be more important than it actually is in practice.\n\n\
      ----\n\n'''Mychaeel:'''  The problem with such a page on a Wiki is that you\
      \ will hardly be able to find something less than ultra-generic that all people\
      \ agree on.  I, for instance, completely disagree with the notion of using tabs\
      \ instead of blanks for indentation, ironically for precisely the reasons you're\
      \ mentioning (non-standardized tab widths, above all &ndash; and a decent text\
      \ editor will let you use the <code>Tab</code> key for inserting spaces to jump\
      \ to the next tab position, so convenience of use is not an issue).\n\nSo brace\
      \ yourself for a heated discussion on what \"good coding style\" is, as everybody\
      \ has a different notion of it.  (And at the end of it, there's nothing wrong\
      \ with that &ndash; as long as, like you say, a whole team agrees on a given\
      \ set of conventions, it's pretty irrelevant ''what'' conventions those are.)\n\
      \n'''Tarquin:'''  we could outline the different styles. You're right about\
      \ tabs... they can look great in UnrealEd's script window and then like dross\
      \ in a different editor. :( Going beyond typographical layout, we could mention\
      \ conventions such as bSomething for booleans, EOPtions for enumerations.\n\n\
      '''2COOL4-U:''' Well I really am pro-tabs. No one has ever set a standard about\
      \ how many spaces to use. And all the editors I use(except 1st page 2000 for\
      \ HTML editing) have a nice good way of handling tabs. Also a good editor has\
      \ an option to change the number of spaces used for a tab.\n\nI am also trying\
      \ to write coding guidelines about how the classes coded by Epic Games are written.\
      \ They use tabs for example.\n\n'''Mychaeel:'''  Well... the lack of a common\
      \ standard for the number of characters per tabstop is, as I wrote, something\
      \ that's in my opinion the best argument '''against''' the usage of tabs for\
      \ indentation &ndash; Epic is apparently using four character widths per tabstop,\
      \ while normal text terminals and text editors default to eight.  Looking at\
      \ Epic's code with a text editor that isn't set to those exact four characters\
      \ makes it look pretty messed up and incomprehensible.\n\nThat's especially\
      \ true since coders are tempted to use tabs not only for indentation but also\
      \ for horizontal alignment of subsequent lines; and mixing lines with tabs and\
      \ blanks is pure horror.  I can't see any of these disadvantages in using blanks\
      \ and a decent text editor that enters them when you press <code>Tab</code>.\n\
      \nIncidentally, every full-fledged programming environment like Microsoft Visual\
      \ C++ or Delphi makes either behavior optional and configurable.  At the end\
      \ of the day that just proves once more that this is an item of personal preference\
      \ (even though everybody might have strong reasons for doing it this or another\
      \ way), and nobody is in the position to publicly claim that using tabs or not\
      \ using tabs is the one way to go.  If anything we could, Wiki-like, list pros\
      \ and cons for both notions and be done with that.\n\n'''EntropicLqd''' Ironically\
      \ the very reason cited by Mychaeel for using spaces instead of tabs is the\
      \ reason I prefer to use tabs.  I tend to use tab stops of either 2 or 4 depending\
      \ on what language I am programming in.  The text editor I use has a configurable\
      \ setting for the tab stops.  This means that if I pick up some code from someone\
      \ who thinks a tab stop of 8 is great, if they have used tabs, it will get displayed\
      \ to my preference.  If spaces are used I either have to remember to also use\
      \ spaces (so as not to break the indentation scheme when viewed by the original\
      \ author), or reformat all the code to use tabs (which would also irritate the\
      \ original author).\n\n'''TaoPaiPai:''' The last thing I want is someone to\
      \ tell me how to indent my code :/ :p\n\n'''Birelli:''' My attempt at a generic\
      \ statement: \"Projects in which there are going to be multiple editors used\
      \ essentially require the use of spaces only and not tabs. However, if there\
      \ is no doubt at all that every member of the team working on the project and\
      \ every member that 'will '''ever''' work on it' is going to use the same text\
      \ editor then, if everyone agrees, tabs can be permissible to use as a time-saver\
      \ and an efficient way of lining up consecutive lines, something that anyone\
      \ who has made a block of slightly varying function calls can attest to as critical.\"\
      \ Ok, so it's a bit lengthy, but I think it satisfies all the arguments presented.\
      \ Personally, I always use tabs in my programming, but if I was ever going to\
      \ work with someone using a different editor, I think it would be worth it to\
      \ use spaces. </riding the fence> ;-)\n\n'''Mychaeel:'''  The \"time saver\"\
      \ argument really doesn't apply, unless you're using a very simple text editor\
      \ that doesn't allow you to use the <code>Tab</code> key to jump to the next\
      \ tab position with ''spaces''.  I wouldn't like to have to hit the <code>Space</code>\
      \ key either twice (or more) each time I add an indentation level.  (By the\
      \ way:  I'm ''implying'' the presence of auto-indent in a decent text editor:\
      \  When pressing <code>Enter</code>, the new line is indented just as much as\
      \ the one you were previously in.)\n\n'''Tarquin:'''  absolutely. I used to\
      \ think \"spaces... urg!\" until I switched to TextPad. Spaces make sense for\
      \ the saved document; using the tab key makes sense for the actual coder. Auto-indent\
      \ brings the two together :)\n\n'''Birelli:''' Aaaah, /me understands Mych now.\
      \ I guess that does satisfy everything involved.\n\n'''Mychaeel:''' To my utter\
      \ delight I just found the following quote on [http://mindprod.com/unmainobfuscation.html\
      \ How To Write Unmaintainable Code: Coding Obfuscation] (also linked from [[Legacy:UnrealScript|UnrealScript]],\
      \ though not by me, I might add): \"'''Tabs From Hell''' &ndash; Never underestimate\
      \ how much havoc you can create by indenting with tabs instead of spaces, especially\
      \ when there is no corporate standard on how much indenting a tab represents.\"\
      \n\n'''Trystan:''' Nothing to do with tabs; everything to do with Hungarian\
      \ notation.  I've always disagreed with it - in my mind your variable name and\
      \ an idea of what the code is doing, along with context, should be enough of\
      \ a clue to a programmer as to what your variable contains.  I use bVariableName\
      \ myself because I like to know that a variable should only be compared to true/false,\
      \ but I never saw the point of lpszPointerToAString.  I'm also a fan of CamelCase\
      \ notation, but not camelCase.  Why not capitalize the first letter?  It keeps\
      \ things more \"standard\"; you could either \"capitalize the first letter of\
      \ every word except the first\" or \"capitalize the first letter of every word.\"\
      \  Anything with an exception in it makes me think \"not standard.\"  As further\
      \ proof of Hungarian notation's uselessness the .NET Framework - the framework\
      \ of the future (?) - discourages it's use and Microsoft has officially stopped\
      \ usage of the notation in it's corporate programming.\n\nAs for tabs - I'm\
      \ a tab fanatic.  I hate spaces.  I hate spaces because we live in a mostly\
      \ WYSIWYG world and when you open up code inside an editor that defaults to\
      \ a proportional font spacing just gives up the ghost.  I'm willing to wager\
      \ that's why most people use tabs:  a tab will always take you a half inch in,\
      \ or whatever you have yours set to.  (Should you use an editor that doesn't\
      \ default to a proportional font?  Probably not.  How many times have you been\
      \ on a machine who's only text editor is Wordpad when you want to take a gander\
      \ at someone else's code?  My personal machine is tweaked out to my specifications,\
      \ but the other 325 machines at my company aren't. :P)\n\n'''Mychaeel:''' \"\
      Hungarian notation\" isn't what I'm personally using for my variable names,\
      \ but I do use a prefix-based naming convention (that is thus \"reversed\" compared\
      \ to normal talking).  Boolean values are prefixed with \"b\", counters with\
      \ \"n\", indices with \"i\".  After that, a top-down list of terms describing\
      \ what the variable holds &ndash; for instance \"nPlayersJailed\", which would\
      \ be a variable that holds the number of jailed players.  And \"nPlayersFree\"\
      \ would be the number of free players.  When those two variable names are neatly\
      \ horizontally aligned (something you '''cannot''' do with proportional fonts),\
      \ it's easy to see at the first glance what's the same about them (count players)\
      \ and what's different (jailed/free).  What's more important for anybody having\
      \ to maintain your code, you can pull all this information from the very variable\
      \ name itself at any time.\n\nTabs in source code are something I, for very\
      \ practical reasons, loathe.  They're neat in concept as you describe, but I\
      \ have yet to see anybody who actually uses them along their conceptual beauty.\
      \  Most people use them in a very thoughtless \"layout\" sense which breaks\
      \ beyond recognition as soon as somebody else looks at their code with another\
      \ tab setting, or another font, or just another editor.  ''Especially'' if you're\
      \ dealing with 325 computers with 325 different editor preferences, that should\
      \ be important to you.  If people '''only''' used tabs for block indention,\
      \ everything would be fine and even I would use them; but people also use tabs\
      \ to horizontally align corresponding items on subsequent lines, or comments\
      \ at the end of lines, and so on.  What's even worse is if people use spaces\
      \ ''and'' tabs in the same source code, maybe even in the same block (just look\
      \ at Epic's code).\n\nUsing spaces for indention and horizontal alignment avoids\
      \ '''all''' of those problems at the small expense of indentions not being as\
      \ wide as with tabs when used with proportional fonts; but at least they're\
      \ still recognizable.  (And you can scratch the entire notion of horizontal\
      \ alignment anyway beyond mere block indention if you're using a proportional\
      \ font to start with, which is one more reason not to do that.)\n\n'''Trystan:'''\
      \ True.  I use tabs to line my code up underneath brackets and had never considered\
      \ it before.  Eep.  I may have to use that tabs to spaces option after all..\
      \ tab once, logic block.  Tab twice, code under logic block.  Someone opens\
      \ it up.. sigh.. time to go update our project's coding notes.  (Ironically\
      \ it's never been a problem because I'm the only coder at my company.. heh.)\n\
      \n'''Tarquin:''' best of both worlds is TextPad, which has Hard Tabs &ndash;\
      \ ''you'' hit TAB, but ''it'' inserts spaces :D\n\n'''Mychaeel:''' I believe\
      \ that's a feature every decent text editor has (or ought to have, anyway) &ndash;\
      \ mine can even convert tabs to spaces on the fly when loading files or pasting\
      \ text.\n\n'''Trystan:''' WOTGreal has it.  Notepad doesn't.. :)  Wait, wait,\
      \ that doesn't qualify as a decent editor.  I found another reason I enjoy tabs\
      \ though - if you've tabbed most editors will only require one cursor key movement\
      \ to go over the entire length of the tab.  If you've used spaces you've got\
      \ to hit it that many times.  Nothing serious, just trying to find stable ground\
      \ to stand on in tabs vs spaces. :P\n\n'''Mychaeel:''' Of course you would rather\
      \ press Ctrl+LeftArrow or Ctrl+RightArrow to move from word to word instead\
      \ of pressing the same arrow key repeatedly.  (Even Notepad supports that.)\n\
      \n'''Trystan:''' BAH!  I give up!  /me putters off to code rather than argue.\
      \ :D\n\n'''EntropicLqd:''' Since this discussion took place I've moved to 2\
      \ ''space'' indents in all the code I write.  I have no idea why I've started\
      \ doing things this way.  It just happened about 3 months ago.  It doesn't even\
      \ closely resemble the format I'm forced to use at work (tabs set to 4 spaces).\
      \  Maybe I'm rebelling :)\n\n'''Ryan:''' Given that I've not done any UnrealScript\
      \ yet I suppose I should just shut up, but never mind.  I program in Java. I\
      \ use tabs or spaces, depending on how I'm feeling, I don't line code up always\
      \ if I'm just bashing it into a function.  I certainly don't use proportional\
      \ fonts - aargh.    What I do is use a code formatting tool - Jalopy, does a\
      \ lovely job, straight into the format I want.  I tend to reformat after every\
      \ 10 or 20 lines, or a function.  This keeps the whole thing neat and readable,\
      \ inserts comment skeletons and copyright notices etc.  I wouldn't go back to\
      \ having to rely on manual layout.  If I'm going to read a piece of \"foreign\"\
      \ java code I tend to run it through the formatter.  I find it easier to read\
      \ in the format I'm used to.  My guess is that I'll use the same layout for\
      \ UnrealScript.  Capitals at the start of a name always make me think that it's\
      \ a class name, oh well never mind.\n\nDoes anyone know of any code formatters\
      \ that understand UnrealScript?\n\n'''Graphik:''' [[Legacy:ConTEXT|ConTEXT]]\n\
      \n'''El Muerte:''' A lot of text editors have a unrealscript syntax highlighter,\
      \ check the [[Legacy:Text Editor/Feature Matrix|Text Editor/Feature Matrix]]\n\
      \n'''Mychaeel:''' I think Ryan's asking about a code ''formatter'', not a ''highlighter''.\
      \  I've not seen an UnrealScript source code formatter yet, but then again,\
      \ I've never looked for one; the only case in which I needed one, I hacked it\
      \ in Perl myself when I changed my code indention conventions a while ago and\
      \ had to reformat a bunch of sources (Jailbreak, in fact).\n\nSpeaking of comment\
      \ templates:  Comment templates in code which have never been filled in are\
      \ loathsome &ndash; worse than no comments at all, actually, because they pretend\
      \ the presence of actual documentation when they're in fact just noise (such\
      \ things like \"Enter description of class here\" in the comment header at the\
      \ top of a class).  I'm sure comment templates can be handy and useful in the\
      \ right hands, but just like soft tabs and other things they tend to encourage\
      \ thoughtless source code design even when used by seasoned programmers.\n\n\
      '''Ryan:''' Mychaeel - you're right, I meant a formatter not a highlighter.\
      \  To be useful a formatter needs to understand the language and preferred layout\
      \ of sections of the code and the structures it uses.  I'm not going to get\
      \ into a rant about the Unreal codebase - I haven't set up a rant page yet :),\
      \ and I don't have the experience with it to make the comments constructive.\
      \  I've found that although people are prepared to argue until the cows come\
      \ home about layout, if they are given a tool that lays the code out they will\
      \ in general use it.\n\nI will make a tentative suggestion (based on no authority\
      \ whatsoever) that it might be useful to find, build a tool for formatting UnrealScript.\
      \  I for one would happily use it with an agreed format. It would make make\
      \ code I write easier for others to read, if they have an inclination to do\
      \ so.  Pretty well all of the points you make, with the exceptions of naming\
      \ conventions, negatives and code duplication could be handled.\n\nOn the comments\
      \ front, you're right again, it takes a certain level of commitment to replace\
      \ the templates.  I'm afraid I'm a bit anal and am not prepared to leave the\
      \ stubs until they've got useful comments in them.\n\n'''El Muerte:''' oh, you\
      \ mean something like [http://www.gnu.org/software/indent/indent.html GNU indent]?\
      \ \n\n'''Ryan:''' Yep, that's more like it.  I know of any number for Java or\
      \ C, but none that I've found for UnrealScript.  I'd guess that Java formatters\
      \ are the closest, but UnrealScript seems to have some extra bits - \"defaultproperties\"\
      \ for example.\n\n----\n\n[[:Category:Legacy Refactor Me]]\n\n[[:Category:Legacy\
      \ To Do]] &ndash; Needs appropriate linkage to other modding and guidline pages;\
      \ a Related Topics section plus linkage to this page.\n[[Category:Legacy Refactor\
      \ Me|{{PAGENAME}}]]\n[[Category:Legacy To Do|{{PAGENAME}}]]"
  properties: []
  revId: 2088
name: "Legacy:Coding Guidelines"
revision:
  revid: 2088
  parentid: 2089
  user: "213.68.15.100"
  timestamp: 1144423924.000000000
  comment: "added a linky about comments"
timestamp: 1668763552.950033000
