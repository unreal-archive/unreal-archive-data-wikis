---
parse:
  title: "Legacy:Native Coding On Linux"
  text:
    text: "<p>Here's how I (almost) managed to compile native code for Linux UT. <i><b>WARNING</b></i>:\
      \ this does not work for me, the final result segfaults - but then again, linux\
      \ ut likes to segfault anyway.</p>\n<p>Requirements: you need both a Linux and\
      \ Windows systems, with latest UT and source distribution. I find it easier\
      \ to use two machines, but if you can, you can try wine, Plex86 or (last resort)\
      \ dual-boot. In this text I'll assume you have two machines, if you don't, make\
      \ the necessary mental adjustments.</p>\n<p>I couldn't compile successfully\
      \ using Epic's source distribution; there were some problems with the Un*.h\
      \ header files. I fetched over <a href=\"/Legacy:UnGnuG.H\" title=\"Legacy:UnGnuG.H\"\
      >UnGnuG.h</a> from <a href=\"/Legacy:OpenUT\" title=\"Legacy:OpenUT\">OpenUT</a>\
      \ and fixed a few things, my file is at <a href=\"/Legacy:UnGnuG.H\" title=\"\
      Legacy:UnGnuG.H\">UnGnuG.h</a> if you need it. I believe you could try compiling\
      \ with the full <a href=\"/Legacy:OpenUT\" title=\"Legacy:OpenUT\">OpenUT</a>\
      \ sources instead of the source distribution, but it would probably segfault\
      \ if your UT binary is not built from <a href=\"/Legacy:OpenUT\" title=\"Legacy:OpenUT\"\
      >OpenUT</a> (some variables are double in one version and float in the other,\
      \ for example).</p>\n<p>I'm using the tutorial linked from <a href=\"/Legacy:Native_Coding\"\
      \ title=\"Legacy:Native Coding\">Native_Coding</a>, which builds a mod named\
      \ Hazard.</p>\n<ol>\n<li>first, create the directory tree as described in the\
      \ tutorial, in both machines. Alternatively, use some form of file sharing to\
      \ have a single source tree for both; in this case disregard all \"copy over\"\
      \ instructions</li>\n</ol>\n<ol>\n<li>create the .uc file in one machine and\
      \ copy it over to the other one</li>\n</ol>\n<ol>\n<li>run \"ucc make\" on the\
      \ *Windows* machine</li>\n</ol>\n<ol>\n<li>copy over the resulting HazardClasses.h\
      \ to Linux</li>\n</ol>\n<ol>\n<li>create the source files in Src</li>\n</ol>\n\
      <ol>\n<li>on a shell prompt, go to Hazard/Src</li>\n</ol>\n<ol>\n<li>compile:\
      \ gcc -c -O2 -Werror -fomit-frame-pointer -mpentium -D_REENTRANT -o Hazard.o\
      \ -I ../../Core/Inc -I ../../Engine/Inc -I ../Inc -D __LINUX_X86__ -D__STATIC_LINK=0\
      \ -fno-for-scope hzTest.cpp</li>\n</ol>\n<ol>\n<li>link: ld -shared -o ../../System/Hazard.so\
      \ Hazard.o ../../System/Core.so ../../System/Engine.so</li>\n</ol>\n<ol>\n<li>fabricate\
      \ the .dll file on Windows like the tutorial says, then run \"ucc make\" (on\
      \ Windows) again to bind the .u file to the dll.</li>\n</ol>\n<ol>\n<li>get\
      \ the bound .u file to Linux.</li>\n</ol>\n<ol>\n<li>test it as the tutorial\
      \ says. Should work. For me it segfaults&#160;:-(</li>\n</ol>\n<p><b>Foxpaw:</b>\
      \ Epic says that native coding under Linux doesn't work and to my knowledge\
      \ they don't plan to fix it it anytime soon. That may be why it's having a segmentation\
      \ fault.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.017 seconds\nReal\
      \ time usage: 0.035 seconds\nPreprocessor visited node count: 1/1000000\nPreprocessor\
      \ generated node count: 4/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 1/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:2272-0!*!0!*!*!*!* and timestamp\
      \ 20221118022531 and revision id 5495\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UnGnuG.H"
  - ns: 100
    exists: true
    name: "Legacy:Native Coding"
  - ns: 100
    exists: true
    name: "Legacy:OpenUT"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Native Coding On Linux"
  iwlinks: []
  wikitext:
    text: "Here's how I (almost) managed to compile native code for Linux UT. '''''WARNING''''':\
      \ this does not work for me, the final result segfaults - but then again, linux\
      \ ut likes to segfault anyway.\n\nRequirements: you need both a Linux and Windows\
      \ systems, with latest UT and source distribution. I find it easier to use two\
      \ machines, but if you can, you can try wine, Plex86 or (last resort) dual-boot.\
      \ In this text I'll assume you have two machines, if you don't, make the necessary\
      \ mental adjustments.\n\nI couldn't compile successfully using Epic's source\
      \ distribution; there were some problems with the Un*.h header files. I fetched\
      \ over [[Legacy:UnGnuG.H|UnGnuG.h]] from [[Legacy:OpenUT|OpenUT]] and fixed\
      \ a few things, my file is at [[Legacy:UnGnuG.H|UnGnuG.h]] if you need it. I\
      \ believe you could try compiling with the full [[Legacy:OpenUT|OpenUT]] sources\
      \ instead of the source distribution, but it would probably segfault if your\
      \ UT binary is not built from [[Legacy:OpenUT|OpenUT]] (some variables are double\
      \ in one version and float in the other, for example).\n\nI'm using the tutorial\
      \ linked from [[Legacy:Native_Coding|Native_Coding]], which builds a mod named\
      \ Hazard.\n\n# first, create the directory tree as described in the tutorial,\
      \ in both machines. Alternatively, use some form of file sharing to have a single\
      \ source tree for both; in this case disregard all \"copy over\" instructions\n\
      \n# create the .uc file in one machine and copy it over to the other one\n\n\
      # run \"ucc make\" on the *Windows* machine\n\n# copy over the resulting HazardClasses.h\
      \ to Linux\n\n# create the source files in Src\n\n# on a shell prompt, go to\
      \ Hazard/Src\n\n# compile: gcc -c -O2 -Werror -fomit-frame-pointer -mpentium\
      \ -D_REENTRANT -o Hazard.o -I  ../../Core/Inc -I ../../Engine/Inc -I ../Inc\
      \ -D __LINUX_X86__ -D__STATIC_LINK=0 -fno-for-scope hzTest.cpp\n\n# link: ld\
      \ -shared -o ../../System/Hazard.so Hazard.o ../../System/Core.so ../../System/Engine.so\n\
      \n# fabricate the .dll file on Windows like the tutorial says, then run \"ucc\
      \ make\" (on Windows) again to bind the .u file to the dll.\n\n# get the bound\
      \ .u file to Linux.\n\n# test it as the tutorial says. Should work. For me it\
      \ segfaults :-(\n\n'''Foxpaw:''' Epic says that native coding under Linux doesn't\
      \ work and to my knowledge they don't plan to fix it it anytime soon. That may\
      \ be why it's having a segmentation fault."
  properties: []
  revId: 5495
name: "Legacy:Native Coding On Linux"
revision:
  revid: 5495
  parentid: 5496
  user: "Strider"
  timestamp: 1105457095.000000000
  comment: "*"
timestamp: 1668767117.828801000
