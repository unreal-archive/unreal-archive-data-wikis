---
parse:
  title: "Legacy:Postal 2/Double Health Mutator"
  text:
    text: "<p>This is a tutorial geared at <a href=\"/Legacy:Postal_2\" title=\"Legacy:Postal\
      \ 2\">Postal 2</a> coders who wish to learn how to make mutators for <a href=\"\
      /Legacy:Postal_2\" title=\"Legacy:Postal 2\">Postal 2</a>.</p>\n<p>This tutorial\
      \ assumes you have already read the <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.gopostal.com/postal2support/code.php\">Postal 2 Code Tutorials</a>.</p>\n\
      <p>Let's say you're messing around with your SuperPack from the Code Tutorials.\
      \ You want to make a multiplayer mutator. We'll start with something simple,\
      \ a player modification. An easy mutator would be to double the player's starting\
      \ health. First, let's create a mutator class.</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">// MutDoubleHealth.uc</span>\n<span class=\"co1\">// blahblah@spamsite.com</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">// Doubles player health</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"kw1\">class</span> MutDoubleHealth <span class=\"kw1\">extends</span>\
      \ xMutator;\n \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"\
      br0\">{</span>\n    GroupName<span class=\"sy0\">=</span><span class=\"st0\"\
      >\"Health\"</span>\n    FriendlyName<span class=\"sy0\">=</span><span class=\"\
      st0\">\"Double Health\"</span>\n    Description<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Player starts with double health.\"</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Mutator is the base class for a simple\
      \ game mutator. You can mix and match mutators to customize your game. For example\
      \ you can combine Low Gravity with Always Gib. Let's have a look at the default\
      \ properties.</p>\n<dl>\n<dt>GroupName</dt>\n<dd>A Group Name is used to specify\
      \ which mutators are compatible with each other. This particular mutator's GroupName\
      \ is \"Health\". You can specify any group name you want. If two mutators have\
      \ the same GroupName, only one of them will be used. So if you were to create\
      \ a Half Health mutator, you should use \"Health\" for that mutator's GroupName\
      \ as well, because trying to use a Half Health and Double Health mutator would\
      \ just cancel each other out.</dd>\n</dl>\n<dl>\n<dt>FriendlyName</dt>\n<dd>This\
      \ is the string that shows up in the mutator selection listbox under the Modifiers\
      \ tab.</dd>\n</dl>\n<dl>\n<dt>Description</dt>\n<dd>And this is the string that\
      \ shows the mutator's description in the Modifiers tab. Use a pipe symbol \"\
      |\" for a line break.</dd>\n</dl>\n<p>Our mutator doesn't do anything yet, but\
      \ let's compile our SuperPack anyway and see if we can use our mutator in a\
      \ game. Build SuperPack with UCC and run Postal 2. Go to Multiplayer and host\
      \ a new game, then check the Modifiers tab.</p>\n<p>Hey, our mutator isn't there?!</p>\n\
      <p>Actually, there's something we forgot to do! Postal 2 doesn't know our mutator\
      \ exists because there isn't any reference to it. Fortunately, those clever\
      \ bastards at Epic came up with the idea of an .INT file. Creating an INT file\
      \ will let Postal 2 know what kind of mutators are in your package.</p>\n<p>Go\
      \ open up your favorite text editor and create a new file called SuperPack.int\
      \ (or whatever your package is called). Your INT file should consist of the\
      \ following:</p>\n<pre>[Public]\nObject=(Class=Class,MetaClass=Engine.Mutator,Name=SuperPack.MutDoubleHealth,Description=\"\
      Double Health\")\n</pre>\n<p>What does all this crap mean?! In order for Postal\
      \ 2 to know your mutator exists, it has to be spawned as an object. The only\
      \ two things you need to worry about for making other mutators are the Name=\
      \ and the Description=. Name= should be the full class name of your mutator,\
      \ in this case it's SuperPack.MutDoubleHealth. And the Description= should be\
      \ one or two words describing your mutator. This description will show up in\
      \ the server info page to people joining your server.</p>\n<p>Now save your\
      \ file and load Postal 2 again. You don't need to re-compile your SuperPack.\
      \ Lo and behold, Double Health shows up in the Modifiers tab!</p>\n<p>But our\
      \ Mutator won't do anything right now. We need to give it some functions so\
      \ that it'll do something when we play. There are different functions for Mutators\
      \ to do different things. For now the function we want to look at is called\
      \ ModifyPlayer.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> ModifyPlayer<span class=\"br0\">(</span><span class=\"\
      kw9\">Pawn</span> Other<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw6\">Super</span>.<span class=\"me0\">ModifyPlayer</span><span\
      \ class=\"br0\">(</span>Other<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>The ModifyPlayer function is called by the\
      \ Unreal engine whenever a new player enters the game. Other is the Pawn for\
      \ the player. Any changes you make to Other in ModifyPlayer passes back to the\
      \ new player. Before we do anything, know that it is imperative that the Super\
      \ version of ModifyPlayer is called after we make our modifications.</p>\n<p>Mutators\
      \ work in a chain. Each function in a mutator calls the same function of the\
      \ next mutator in the chain. This way all mutators get to do their stuff and\
      \ everyone's happy. If Super.ModifyPlayer isn't called, then the next mutator\
      \ in the chain won't get to do its stuff, nor will the rest of the mutators\
      \ in the chain. So if you leave that function out and your mutator happens to\
      \ be the first in the chain, guess what? You just broke all the other mutators.\
      \ Good job.</p>\n<p>Just remember to call Super.ModifyPlayer after (or before)\
      \ your modifiations.</p>\n<p>Now, what were we trying to do again? Oh yeah,\
      \ double health to all players. Here we go.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">function</span> ModifyPlayer<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Pawn</span> Other<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    Other.<span class=\"me0\">Health</span> <span class=\"sy0\"\
      >=</span> Other.<span class=\"me0\">Health</span> <span class=\"sy0\">*</span>\
      \ <span class=\"nu0\">2</span>;\n    <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>All good\
      \ to go, right?</p>\n<p>Wrong! This won't be good enough. All we're doing is\
      \ altering the player's CURRENT health. So the player will start with double\
      \ health, but if their health falls to below normal maximum health, they won't\
      \ be able to heal back up to double health. Now, if this is what you WANT for\
      \ your modifier, you are in fact good to go. But for our modifier we want the\
      \ player to be able to heal ALL of that health back. So one more line is necessary.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ ModifyPlayer<span class=\"br0\">(</span><span class=\"kw9\">Pawn</span> Other<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    Other.<span class=\"\
      me0\">Health</span> <span class=\"sy0\">=</span> Other.<span class=\"me0\">Health</span>\
      \ <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>;\n    FPSPawn<span\
      \ class=\"br0\">(</span>Other<span class=\"br0\">)</span>.<span class=\"me0\"\
      >HealthMax</span> <span class=\"sy0\">=</span> FPSPawn<span class=\"br0\">(</span>Other<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">HealthMax</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">2</span>;\n    <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>HealthMax\
      \ is a variable specified in the FPSPawn class, and does not exist in the base\
      \ Pawn class, so we must use FPSPawn(Other) instead of just Other.</p>\n<p>Now\
      \ let's compile our new mutator and try it...</p>\n<p>Hey, wait a damn minute!\
      \ Why does our health still say only \"100\"? Well, this is because the number\
      \ shown for your health is actually a PERCENTAGE, not the actual NUMBER of health\
      \ you have. To ensure your mod really does work, go play with some Morons and\
      \ take a few NON-HEADSHOTS. You'll notice that you seem to be taking less damage\
      \ than normal. You're actually taking the same amount of damage but since your\
      \ health is shown as a percent, it appears that you are taking less damage.</p>\n\
      <p>Note that players connecting through the Internet will actually see the number\
      \ 200 for their health, because the HealthMax variable isn't replicated. If\
      \ you don't know what that means, just hit the \"I Believe\" button and continue\
      \ on.</p>\n<p>Note that headshots are independent of max health. Two headshots\
      \ will kill a guy at max health, whether their max health is 300 or 3000.</p>\n\
      <p>Congratulations! Your mutator is complete! Now go make a name for yourself.</p>\n\
      <p>Here is the finished code.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">// MutDoubleHealth.uc</span>\n<span class=\"co1\">// blahblah@spamsite.com</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">// Doubles player health</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"kw1\">class</span> MutDoubleHealth <span class=\"kw1\">extends</span>\
      \ xMutator;\n \n<span class=\"kw1\">function</span> ModifyPlayer<span class=\"\
      br0\">(</span><span class=\"kw9\">Pawn</span> Other<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    Other.<span class=\"me0\">Health</span> <span\
      \ class=\"sy0\">=</span> Other.<span class=\"me0\">Health</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">2</span>;\n    FPSPawn<span class=\"br0\"\
      >(</span>Other<span class=\"br0\">)</span>.<span class=\"me0\">HealthMax</span>\
      \ <span class=\"sy0\">=</span> FPSPawn<span class=\"br0\">(</span>Other<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">HealthMax</span> <span class=\"\
      sy0\">*</span> <span class=\"nu0\">2</span>;\n    <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">ModifyPlayer</span><span class=\"br0\">(</span>Other<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n    GroupName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Health\"</span>\n    FriendlyName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Double Health\"</span>\n    Description<span class=\"sy0\"\
      >=</span><span class=\"st0\">\"Player starts with double health.\"</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Before I wrap up, I should\
      \ point out another very useful Mutator function.</p>\n<pre>function bool CheckReplacement(Actor\
      \ Other, out byte bSuperRelevant)\n</pre>\n<p>This function can be used in a\
      \ mutator to alter ANY actor, not just a player. You can change the properties\
      \ of the existing actor, or even replace the actor with a different actor. If\
      \ you'll have a look at MultiGame.MutNoCrack, you can see an example of CheckReplacement\
      \ in action:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> CheckReplacement<span\
      \ class=\"br0\">(</span><span class=\"kw9\">Actor</span> Other, <span class=\"\
      kw1\">out</span> <span class=\"kw5\">byte</span> bSuperRelevant<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"co1\">// Check\
      \ normal crack pickups</span>\n    <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span>CrackPickup<span class=\"br0\">(</span>Other<span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"\
      kw2\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>ReplaceWith<span\
      \ class=\"br0\">(</span>Other, <span class=\"st0\">\"Inventory.PizzaPickup\"\
      </span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n    <span\
      \ class=\"br0\">}</span>\n    <span class=\"co1\">// Remove also any crack from\
      \ cycling pickups</span>\n    <span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span><span class=\"br0\">(</span>MultiPickup<span class=\"br0\">(</span>Other<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        MultiPickup<span\
      \ class=\"br0\">(</span>Other<span class=\"br0\">)</span>.<span class=\"me0\"\
      >SwapClass</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'CrackPickup'</span>, <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'MedKitPickup'</span><span class=\"br0\">)</span>;\n    <span\
      \ class=\"br0\">}</span>\n \n    <span class=\"kw2\">return</span> <span class=\"\
      kw6\">true</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>The\
      \ first \"if\" statement check to see if the actor is a CrackPickup. If so,\
      \ then it calls ReplaceWith to swap that actor with a PizzaPickup. If ReplaceWith\
      \ is successful, then a value of FALSE is returned, otherwise TRUE is returned.\
      \ If you are going to destroy or replace the actor Other, you should return\
      \ FALSE.</p>\n<p>The \"else if\" statement checks to see if the actor is a <a\
      \ href=\"/Legacy:MultiPickup\" title=\"Legacy:MultiPickup\">MultiPickup</a>.\
      \ <a href=\"/Legacy:MultiPickup\" title=\"Legacy:MultiPickup\">MultiPickups</a>\
      \ are the pickups that randomly switch between armor, crack pipes, rocket launchers,\
      \ etc. The MultiPickup actor has a nice little SwapClass function so you can\
      \ replace any object inside the <a href=\"/Legacy:MultiPickup\" title=\"Legacy:MultiPickup\"\
      >MultiPickup</a> with something else. Note that the function returns TRUE in\
      \ this case. This is because the actor itself is a <a href=\"/Legacy:MultiPickup\"\
      \ title=\"Legacy:MultiPickup\">MultiPickup</a> and NOT the actual crack itself.\
      \ We aren't replacing or destroying the <a href=\"/Legacy:MultiPickup\" title=\"\
      Legacy:MultiPickup\">MultiPickup</a>, we're just altering a property of the\
      \ <a href=\"/Legacy:MultiPickup\" title=\"Legacy:MultiPickup\">MultiPickup</a>.</p>\n\
      <p>There is a pitfall here, though. If the health pipe is embedded within some\
      \ part of the level, the engine won't be able to spawn a new health pipe at\
      \ that exact location, and then the health pipe will not be replaced. Depending\
      \ on the scope of the mutator, you may want to destroy the health pipe if it\
      \ doesn't get replaced.</p>\n<p>Now, go forth my children, and make mutators!</p>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Postal_2/Double_Health_Mutator?section=1\" title=\"Edit\
      \ section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Mutator_Topics\" title=\"Legacy:Mutator Topics\"\
      >Mutator Topics</a></li>\n<li><a href=\"/Legacy:Mod_Authoring\" title=\"Legacy:Mod\
      \ Authoring\">Mod Authoring</a></li>\n<li><a href=\"/Legacy:Mutator\" title=\"\
      Legacy:Mutator\">Mutator</a></li>\n<li><a href=\"/Legacy:XMutator_(P2)\" title=\"\
      Legacy:XMutator (P2)\">xMutator (P2)</a></li>\n<li><a href=\"/Legacy:FPSPawn\"\
      \ title=\"Legacy:FPSPawn\">FPSPawn</a></li>\n</ul>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.090 seconds\nReal time usage: 0.189 seconds\nPreprocessor\
      \ visited node count: 58/1000000\nPreprocessor generated node count: 136/1000000\n\
      Post‐expand include size: 30/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2510-0!*!0!*!*!*!*\
      \ and timestamp 20221118020418 and revision id 43203\n -->\n"
  categories:
  - sortkey: "Postal 2/Double Health Mutator"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:FPSPawn"
  - ns: 100
    exists: true
    name: "Legacy:Mod Authoring"
  - ns: 100
    exists: true
    name: "Legacy:MultiPickup"
  - ns: 100
    exists: true
    name: "Legacy:Postal 2"
  - ns: 100
    exists: true
    name: "Legacy:Mutator Topics"
  - ns: 100
    exists: true
    name: "Legacy:XMutator (P2)"
  templates: []
  images: []
  externallinks:
  - "http://www.gopostal.com/postal2support/code.php"
  sections:
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Postal_2/Double_Health_Mutator"
    byteoffset: 9471
    anchor: "Related_Topics"
  displaytitle: "Legacy:Postal 2/Double Health Mutator"
  iwlinks: []
  wikitext:
    text: "This is a tutorial geared at [[Legacy:Postal 2|Postal 2]] coders who wish\
      \ to learn how to make mutators for [[Legacy:Postal 2|Postal 2]].\n\nThis tutorial\
      \ assumes you have already read the [http://www.gopostal.com/postal2support/code.php\
      \ Postal 2 Code Tutorials].\n\nLet's say you're messing around with your SuperPack\
      \ from the Code Tutorials. You want to make a multiplayer mutator. We'll start\
      \ with something simple, a player modification. An easy mutator would be to\
      \ double the player's starting health. First, let's create a mutator class.\n\
      \n<uscript>///////////////////////////////////////////////////////////////////////////////\n\
      // MutDoubleHealth.uc\n// blahblah@spamsite.com\n//\n// Doubles player health\n\
      //\n///////////////////////////////////////////////////////////////////////////////\n\
      class MutDoubleHealth extends xMutator;\n\ndefaultproperties\n{\n    GroupName=\"\
      Health\"\n    FriendlyName=\"Double Health\"\n    Description=\"Player starts\
      \ with double health.\"\n}</uscript>\n\nMutator is the base class for a simple\
      \ game mutator. You can mix and match mutators to customize your game. For example\
      \ you can combine Low Gravity with Always Gib. Let's have a look at the default\
      \ properties.\n\n; GroupName: A Group Name is used to specify which mutators\
      \ are compatible with each other. This particular mutator's GroupName is \"\
      Health\". You can specify any group name you want. If two mutators have the\
      \ same GroupName, only one of them will be used. So if you were to create a\
      \ Half Health mutator, you should use \"Health\" for that mutator's GroupName\
      \ as well, because trying to use a Half Health and Double Health mutator would\
      \ just cancel each other out.\n\n;FriendlyName: This is the string that shows\
      \ up in the mutator selection listbox under the Modifiers tab.\n\n;Description:\
      \ And this is the string that shows the mutator's description in the Modifiers\
      \ tab. Use a pipe symbol \"|\" for a line break.\n\nOur mutator doesn't do anything\
      \ yet, but let's compile our SuperPack anyway and see if we can use our mutator\
      \ in a game. Build SuperPack with UCC and run Postal 2. Go to Multiplayer and\
      \ host a new game, then check the Modifiers tab.\n\nHey, our mutator isn't there?!\n\
      \nActually, there's something we forgot to do! Postal 2 doesn't know our mutator\
      \ exists because there isn't any reference to it. Fortunately, those clever\
      \ bastards at Epic came up with the idea of an .INT file. Creating an INT file\
      \ will let Postal 2 know what kind of mutators are in your package.\n\nGo open\
      \ up your favorite text editor and create a new file called SuperPack.int (or\
      \ whatever your package is called). Your INT file should consist of the following:\n\
      \n [Public]\n Object=(Class=Class,MetaClass=Engine.Mutator,Name=SuperPack.MutDoubleHealth,Description=\"\
      Double Health\")\n\nWhat does all this crap mean?! In order for Postal 2 to\
      \ know your mutator exists, it has to be spawned as an object. The only two\
      \ things you need to worry about for making other mutators are the Name= and\
      \ the Description=. Name= should be the full class name of your mutator, in\
      \ this case it's SuperPack.MutDoubleHealth. And the Description= should be one\
      \ or two words describing your mutator. This description will show up in the\
      \ server info page to people joining your server.\n\nNow save your file and\
      \ load Postal 2 again. You don't need to re-compile your SuperPack. Lo and behold,\
      \ Double Health shows up in the Modifiers tab!\n\nBut our Mutator won't do anything\
      \ right now. We need to give it some functions so that it'll do something when\
      \ we play. There are different functions for Mutators to do different things.\
      \ For now the function we want to look at is called ModifyPlayer.\n\n<uscript>\n\
      function ModifyPlayer(Pawn Other)\n{\n    Super.ModifyPlayer(Other);\n}\n</uscript>\n\
      \nThe ModifyPlayer function is called by the Unreal engine whenever a new player\
      \ enters the game. Other is the Pawn for the player. Any changes you make to\
      \ Other in ModifyPlayer passes back to the new player. Before we do anything,\
      \ know that it is imperative that the Super version of ModifyPlayer is called\
      \ after we make our modifications.\n\nMutators work in a chain. Each function\
      \ in a mutator calls the same function of the next mutator in the chain. This\
      \ way all mutators get to do their stuff and everyone's happy. If Super.ModifyPlayer\
      \ isn't called, then the next mutator in the chain won't get to do its stuff,\
      \ nor will the rest of the mutators in the chain. So if you leave that function\
      \ out and your mutator happens to be the first in the chain, guess what? You\
      \ just broke all the other mutators. Good job.  \n\nJust remember to call Super.ModifyPlayer\
      \ after (or before) your modifiations.\n\nNow, what were we trying to do again?\
      \ Oh yeah, double health to all players. Here we go.\n\n<uscript>\nfunction\
      \ ModifyPlayer(Pawn Other)\n{\n    Other.Health = Other.Health * 2;\n    Super.ModifyPlayer(Other);\n\
      }\n</uscript>\n\nAll good to go, right?\n\nWrong! This won't be good enough.\
      \ All we're doing is altering the player's CURRENT health. So the player will\
      \ start with double health, but if their health falls to below normal maximum\
      \ health, they won't be able to heal back up to double health. Now, if this\
      \ is what you WANT for your modifier, you are in fact good to go. But for our\
      \ modifier we want the player to be able to heal ALL of that health back. So\
      \ one more line is necessary.\n\n<uscript>\nfunction ModifyPlayer(Pawn Other)\n\
      {\n    Other.Health = Other.Health * 2;\n    FPSPawn(Other).HealthMax = FPSPawn(Other).HealthMax\
      \ * 2;\n    Super.ModifyPlayer(Other);\n}\n</uscript>\n\nHealthMax is a variable\
      \ specified in the FPSPawn class, and does not exist in the base Pawn class,\
      \ so we must use FPSPawn(Other) instead of just Other.\n\nNow let's compile\
      \ our new mutator and try it...\n\nHey, wait a damn minute! Why does our health\
      \ still say only \"100\"? Well, this is because the number shown for your health\
      \ is actually a PERCENTAGE, not the actual NUMBER of health you have. To ensure\
      \ your mod really does work, go play with some Morons and take a few NON-HEADSHOTS.\
      \ You'll notice that you seem to be taking less damage than normal. You're actually\
      \ taking the same amount of damage but since your health is shown as a percent,\
      \ it appears that you are taking less damage.\n\nNote that players connecting\
      \ through the Internet will actually see the number 200 for their health, because\
      \ the HealthMax variable isn't replicated. If you don't know what that means,\
      \ just hit the \"I Believe\" button and continue on.\n\nNote that headshots\
      \ are independent of max health. Two headshots will kill a guy at max health,\
      \ whether their max health is 300 or 3000.\n\nCongratulations! Your mutator\
      \ is complete! Now go make a name for yourself.\n\nHere is the finished code.\n\
      \n<uscript>\n///////////////////////////////////////////////////////////////////////////////\n\
      // MutDoubleHealth.uc\n// blahblah@spamsite.com\n//\n// Doubles player health\n\
      //\n///////////////////////////////////////////////////////////////////////////////\n\
      class MutDoubleHealth extends xMutator;\n\nfunction ModifyPlayer(Pawn Other)\n\
      {\n    Other.Health = Other.Health * 2;\n    FPSPawn(Other).HealthMax = FPSPawn(Other).HealthMax\
      \ * 2;\n    Super.ModifyPlayer(Other);\n}\n\ndefaultproperties\n{\n    GroupName=\"\
      Health\"\n    FriendlyName=\"Double Health\"\n    Description=\"Player starts\
      \ with double health.\"\n}\n</uscript>\n\nBefore I wrap up, I should point out\
      \ another very useful Mutator function.\n\n function bool CheckReplacement(Actor\
      \ Other, out byte bSuperRelevant)\n\nThis function can be used in a mutator\
      \ to alter ANY actor, not just a player. You can change the properties of the\
      \ existing actor, or even replace the actor with a different actor. If you'll\
      \ have a look at MultiGame.MutNoCrack, you can see an example of CheckReplacement\
      \ in action:\n\n<uscript>\nfunction bool CheckReplacement(Actor Other, out byte\
      \ bSuperRelevant)\n{\n    // Check normal crack pickups\n    if(CrackPickup(Other)\
      \ != None)\n    {\n        return !(ReplaceWith(Other, \"Inventory.PizzaPickup\"\
      ));\n    }\n    // Remove also any crack from cycling pickups\n    else if(MultiPickup(Other)\
      \ != None)\n    {\n        MultiPickup(Other).SwapClass(class'CrackPickup',\
      \ class'MedKitPickup');\n    }\n\n    return true;\n}\n</uscript>\n\nThe first\
      \ \"if\" statement check to see if the actor is a CrackPickup. If so, then it\
      \ calls ReplaceWith to swap that actor with a PizzaPickup. If ReplaceWith is\
      \ successful, then a value of FALSE is returned, otherwise TRUE is returned.\
      \ If you are going to destroy or replace the actor Other, you should return\
      \ FALSE.\n\nThe \"else if\" statement checks to see if the actor is a [[Legacy:MultiPickup|MultiPickup]].\
      \ [[Legacy:MultiPickup|MultiPickup]]s are the pickups that randomly switch between\
      \ armor, crack pipes, rocket launchers, etc. The MultiPickup actor has a nice\
      \ little SwapClass function so you can replace any object inside the [[Legacy:MultiPickup|MultiPickup]]\
      \ with something else. Note that the function returns TRUE in this case. This\
      \ is because the actor itself is a [[Legacy:MultiPickup|MultiPickup]] and NOT\
      \ the actual crack itself. We aren't replacing or destroying the [[Legacy:MultiPickup|MultiPickup]],\
      \ we're just altering a property of the [[Legacy:MultiPickup|MultiPickup]].\n\
      \nThere is a pitfall here, though. If the health pipe is embedded within some\
      \ part of the level, the engine won't be able to spawn a new health pipe at\
      \ that exact location, and then the health pipe will not be replaced. Depending\
      \ on the scope of the mutator, you may want to destroy the health pipe if it\
      \ doesn't get replaced.\n\nNow, go forth my children, and make mutators!\n\n\
      ==Related Topics ==\n* [[Legacy:Mutator Topics|Mutator Topics]]\n* [[Legacy:Mod\
      \ Authoring|Mod Authoring]]\n* [[Legacy:Mutator|Mutator]]\n* [[Legacy:XMutator\
      \ (P2)|xMutator (P2)]]\n* [[Legacy:FPSPawn|FPSPawn]]\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 43203
name: "Legacy:Postal 2/Double Health Mutator"
revision:
  revid: 43203
  parentid: 43202
  user: "Eliot"
  timestamp: 1273111637.000000000
  comment: "Restored..."
timestamp: 1668800400.702980000
