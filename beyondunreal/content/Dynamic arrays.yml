---
parse:
  title: "Dynamic arrays"
  text:
    text: "<p><b>Dynamic arrays</b> are a special <a href=\"/Types#Composite_types\"\
      \ title=\"Types\">composite type</a> in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a> that contains a variable number of elements in a well-defined\
      \ order. These elements all have the same type, called the \"inner type\" of\
      \ the array.</p>\n<p>UnrealScript's dynamic arrays are a true <a href=\"http://en.wikipedia.org/wiki/dynamic_array\"\
      \ class=\"extiw\" title=\"wp:dynamic array\">dynamic array</a> implementation,\
      \ i.e. unlike <a href=\"http://en.wikipedia.org/wiki/Java_(programming_language)\"\
      \ class=\"extiw\" title=\"wp:Java (programming language)\">Java</a>'s dynamically-allocated\
      \ fixed-size arrays they can be resized at runtime. The type declaration syntax\
      \ was available (almost) from the start, but <a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a> never provided any way to actually access or modify them at the UnrealScript\
      \ level. In other words, dynamic arrays are fully usable in UnrealScript only\
      \ in <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal\
      \ Engine 2 (page does not exist)\">Unreal Engine 2</a> and later.</p>\n<p>Unlike\
      \ any other data type in UnrealScript, dynamic arrays have absolutely no support\
      \ for <a href=\"/Replication\" title=\"Replication\" class=\"mw-redirect\">replication</a>.\
      \ Attempting to replicate a dynamic array variable will have no effect on the\
      \ remote instance of that variable. Attempting to use a dynamic array as parameter\
      \ of a <a href=\"/edit/Replicated_function?redlink=1\" class=\"new\" title=\"\
      Replicated function (page does not exist)\">replicated function</a> will result\
      \ in the parameter being empty when the function is executed on the remote side.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Declaration_syntax\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Declaration syntax</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Usage_in_code\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Usage in code</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Accessing_array_data\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Accessing array data</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Accessing_and_modifying_the_array_length\"\
      ><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Accessing and\
      \ modifying the array length</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"\
      ><a href=\"#Inserting_and_removing_elements\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Inserting and removing elements</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Additional_array_operations_in_Unreal_Engine_3\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">Additional array\
      \ operations in Unreal Engine 3</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-1 tocsection-7\"><a href=\"#Usage_in_defaultproperties_block\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Usage in defaultproperties\
      \ block</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Additional_operations_in_Unreal_Engine_3\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Additional operations\
      \ in Unreal Engine 3</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#Usage_in_UnrealEd\"><span class=\"tocnumber\">4</span> <span class=\"\
      toctext\">Usage in UnrealEd</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"\
      ><a href=\"#See_also\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >See also</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Declaration_syntax\">Declaration syntax</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=1\"\
      \ title=\"Edit section: Declaration syntax\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Dynamic arrays are declared as part of the type:</p>\n\
      <pre><b>array&lt;</b> type <b>&gt;</b>\n</pre>\n<p>The inner type of a dynamic\
      \ array can be a <a href=\"/Class_limiter\" title=\"Class limiter\" class=\"\
      mw-redirect\">class limiter</a> or the name of any other non-array type, including\
      \ <a href=\"/Delegate\" title=\"Delegate\" class=\"mw-redirect\">delegate</a>\
      \ types. Note that <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\"\
      \ title=\"Unreal Engine 2 (page does not exist)\">Unreal Engine 2</a> does not\
      \ support dynamic arrays of type <a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\"\
      >bool</a> and the compiler will complain accordingly. Dynamic arrays of bool\
      \ values are possible in <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a>, though.</p>\n<p>Be careful when declaring a dynamic\
      \ array of a <a href=\"/Class_limiter\" title=\"Class limiter\" class=\"mw-redirect\"\
      >class limiter</a> or <a href=\"/Delegate\" title=\"Delegate\" class=\"mw-redirect\"\
      >delegate</a> type. The compiler recognized two consecutive <code>&gt;</code>\
      \ characters as the <a href=\"/Operator\" title=\"Operator\" class=\"mw-redirect\"\
      >operator</a> <code>&gt;&gt;</code> and will fail with a syntax error. Insert\
      \ whitespace to get around this limitation:</p>\n<pre><b>array&lt; class&lt;</b>\
      \ classname <b>&gt; &gt;</b>\n</pre>\n<p>A dynamic array type can be used in\
      \ all places that allow a type definition. The following example code defines\
      \ a class-global dynamic array of bytes and a function that uses dynamic arrays\
      \ as return type and as the type of a parameter and a local variable:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> array<span\
      \ class=\"sy0\">&lt;</span>byte<span class=\"sy0\">&gt;</span> Byte<span class=\"\
      re1\">Array</span>&lt; SEMI &gt;\n \n<span class=\"kw1\">function</span> array<span\
      \ class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> RoundAll<span\
      \ class=\"br0\">(</span>array<span class=\"sy0\">&lt;</span>float<span class=\"\
      sy0\">&gt;</span> Values<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> array<span class=\"sy0\">&lt;</span>int<span\
      \ class=\"sy0\">&gt;</span> Result;\n \n  <span class=\"co1\">//...</span>\n\
      \ \n  <span class=\"kw2\">return</span> Result;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>The only exception are type declarations of <a href=\"/Variables\"\
      \ title=\"Variables\">variables</a>, <a href=\"/Struct\" title=\"Struct\" class=\"\
      mw-redirect\">struct</a> members and <a href=\"/Function\" title=\"Function\"\
      \ class=\"mw-redirect\">function</a> parameters that are declared as <a href=\"\
      /Static_arrays\" title=\"Static arrays\">static arrays</a>. In this case, the\
      \ dynamic array declaration is ignored.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Usage_in_code\">Usage in code</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=2\"\
      \ title=\"Edit section: Usage in code\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Dynamic arrays provide various ways for reading and\
      \ manipulating the content and length of the array. All of these must be done\
      \ through variables or struct members, dynamic arrays returned from functions\
      \ must be assigned to a variable first.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Accessing_array_data\">Accessing array data</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=3\"\
      \ title=\"Edit section: Accessing array data\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The entire array data can be passed around if the\
      \ target variable or function parameter or return type is declared as a dynamic\
      \ array of the same inner type as the source array. The array data is copied\
      \ in this process, so afterwards there are two independent arrays with the same\
      \ data, modifications to one of them won't affect the other array's data in\
      \ any way.</p>\n<p>To access values of individual array elements, use the following\
      \ syntax:</p>\n<pre><i>arrayreference</i><b>[</b><i>index</i><b>]</b>\n</pre>\n\
      <p>The index may be any non-negative that is smaller than the length of the\
      \ array. Any other values, i.e. negative numbers or values &gt;= the length\
      \ of the array, will return the null value of the array's inner type and write\
      \ an out-of-bounds warning message to the main log file.</p>\n<p>The same syntax\
      \ can be used for assigning values to individual array elements. In this case\
      \ the index must be non-negative, but may exceed the array length. If the index\
      \ is equal to or greater than the current length of the array, the array grows\
      \ so its last element has the specified index, i.e. its length is now <code>index\
      \ + 1</code>. If you can estimate the final number of elements an array will\
      \ have, you can resize it manually before assigning the values.</p>\n<p>An access\
      \ method only available in <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> is iteration via the <a href=\"/Foreach_loop\" title=\"\
      Foreach loop\" class=\"mw-redirect\">foreach loop</a>:</p>\n<pre><b>foreach</b>\
      \ <i>arrayreference</i><b>(</b><i>valuevariable</i> <b>,</b> [<i>indexvariable</i>]<b>)\
      \ {</b>\n  ...\n<b>}</b>\n</pre>\n<p>You can just loop over the values, or also\
      \ let the loop fill in a variable with the current element's index. The value\
      \ variable must be of the same type as the array's inner type, the index variable\
      \ must be of type <a href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>.\
      \ In <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal\
      \ Engine 2 (page does not exist)\">Unreal Engine 2</a> you have to use a regular\
      \ <a href=\"/For_loop\" title=\"For loop\">for loop</a> with a counter variable\
      \ to iterate over the array:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw2\">for</span> <span class=\"br0\">(</span>index <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; index <span class=\"sy0\">&lt;</span>\
      \ arrayreference.<span class=\"me0\">Length</span>; <span class=\"sy0\">++</span>index<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n  value <span class=\"\
      sy0\">=</span> arrayreference<span class=\"br0\">[</span>index<span class=\"\
      br0\">]</span>;\n  <span class=\"co1\">//...</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Accessing_and_modifying_the_array_length\"\
      >Accessing and modifying the array length</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=4\"\
      \ title=\"Edit section: Accessing and modifying the array length\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>The length of an\
      \ array can be retrieved with the following syntax:</p>\n<pre><i>arrayreference</i><b>.Length</b>\n\
      </pre>\n<p>The length of an array can be set with the following syntax:</p>\n\
      <pre><i>arrayreference</i><b>.Length=</b><i>Value</i>\n</pre>\n<p>If used on\
      \ the left side of the simple assignment operator, this syntax can also be used\
      \ to add or remove elements to/from the array. Like all operations that add\
      \ elements to the array, this will initialize the new elements with the null\
      \ value of the array's inner type. <b>Important:</b> The <i>Length</i> attribute\
      \ must not be used on the left side of combined assignment operators or passed\
      \ to a function parameter declared with the <i>out</i> modifier!</p>\n<p>It\
      \ is possible to clear a dynamic array by setting its length variable to 0.</p>\n\
      <p>Any reduction or increase to the array's Length variable will add or remove\
      \ elements starting at the end of the array.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Inserting_and_removing_elements\">Inserting and removing elements</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Dynamic_arrays?section=5\" title=\"Edit section: Inserting and\
      \ removing elements\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>To insert elements anywhere in the array, you can use the following syntax:</p>\n\
      <pre><i>arrayreference</i><b>.Insert(</b><i>index</i><b>,</b> <i>count</i><b>);</b>\n\
      </pre>\n<p>This will insert <i>count</i> elements into the array, so that the\
      \ first inserted element ends up at the specified <i>index</i>. The element\
      \ originally located at <i>index</i> and any following elements are moved to\
      \ make room for the new elements. The inserted elements are initialized with\
      \ null values.</p>\n<p>To remove elements from anywhere in the array, use the\
      \ following syntax:</p>\n<pre><i>arrayreference</i><b>.Remove(</b><i>index</i><b>,</b>\
      \ <i>count</i><b>);</b>\n</pre>\n<p>This will remove <i>count</i> successive\
      \ elements, starting with the element at <i>index</i>. Elements after the removed\
      \ array section are moved to close the gap.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Additional_array_operations_in_Unreal_Engine_3\">Additional array operations\
      \ in Unreal Engine 3</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Dynamic_arrays?section=6\" title=\"Edit section: Additional\
      \ array operations in Unreal Engine 3\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>To add empty elements at the end of the array, use:</p>\n\
      <pre><i>arrayreference</i><b>.Add(</b><i>count</i><b>);</b>\n</pre>\n<p>This\
      \ has the same effect as any of the following operations, but the intention\
      \ is much more obvious:</p>\n<ul>\n<li><code>arrayreference.Length = arrayreference.Length\
      \ + count;</code></li>\n<li><code>arrayreference.Insert(arrayreference.Length,\
      \ count);</code></li>\n</ul>\n<p>To add a single value to the end of the array,\
      \ use:</p>\n<pre><i>arrayreference</i><b>.AddItem(</b><i>value</i><b>);</b>\n\
      </pre>\n<p>This is basically the same as <code>arrayreference[arrayreference.Length]\
      \ = value;</code>.</p>\n<p>Inserting individual items in the middle of the array\
      \ can be done with the following syntax:</p>\n<pre><i>arrayreference</i><b>.InsertItem(</b><i>index</i><b>,</b>\
      \ <i>value</i><b>);</b>\n</pre>\n<p>The corresponding Unreal Engine 2 code would\
      \ be <code>arrayreference.Insert(index, 1); arrayreference[index] = value;</code>,\
      \ i.e. two statements.</p>\n<p>To remove all occurrences of a specific value\
      \ from the array, you can use:</p>\n<pre><i>arrayreference</i><b>.RemoveItem(</b><i>value</i><b>);</b>\n\
      </pre>\n<p>This will perform a linear search for the value and remove any instance\
      \ it finds. In Unreal Engine 2 you need something like this <a href=\"/For_loop\"\
      \ title=\"For loop\">for loop</a> to do the same:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n \n<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\"\
      >&lt;</span> arrayreference.<span class=\"me0\">length</span>; <span class=\"\
      sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>arrayreference<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span>\
      \ value<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    arrayreference.<span\
      \ class=\"me0\">Remove</span><span class=\"br0\">(</span>i<span class=\"sy0\"\
      >--</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n  <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Unreal Engine 3 also offers two methods to search for values in an array.\
      \ The simple version just looks for a value:</p>\n<pre><i>arrayreference</i><b>.Find(</b><i>value</i><b>)</b>\n\
      </pre>\n<p>This returns the index of the first element containing the specified\
      \ value. If the array doesn't contain this value, <code>INDEX_NONE</code> is\
      \ returned, i.e. the value -1. For dynamic array of structs, a second version\
      \ of <i>Find</i> is available, which looks for values of struct members:</p>\n\
      <pre><i>arrayreference</i><b>.Find(</b><i>membername</i><b>,</b> <i>value</i><b>)</b>\n\
      </pre>\n<p>The member name must be a <a href=\"/Name\" title=\"Name\" class=\"\
      mw-redirect\">name</a> literal specifying the name of a struct member variable.</p>\n\
      <p>Starting with newer versions of the Unreal Engine 3 there is also a simply\
      \ way to sort an array:</p>\n<pre><i>arrayreference</i><b>.Sort(</b><i>comparefunction</i><b>)</b>\n\
      </pre>\n<p>The <i>comparefunction</i> is the name of a function that takes two\
      \ parameters of the array's element type and returns a value of type <a href=\"\
      /Int\" title=\"Int\" class=\"mw-redirect\">int</a>. Negative return values indicate\
      \ that the first parameter should come after the second, i.e. the values are\
      \ not in order. Positive return values mean the first element should come before\
      \ the second, i.e. they are in order. Zero means the elements are equal and\
      \ thus in order. The magnitude of the positive or negative return value don't\
      \ matter, only its sign.</p>\n<h2><span class=\"mw-headline\" id=\"Usage_in_defaultproperties_block\"\
      >Usage in defaultproperties block</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=7\"\
      \ title=\"Edit section: Usage in defaultproperties block\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>The default data for a dynamic\
      \ array can either be specified per element, similar to <a href=\"/Static_arrays\"\
      \ title=\"Static arrays\">static arrays</a>, or for the entire array at once.</p>\n\
      <p>The per-element syntax is identical to that of static arrays:</p>\n<pre><i>arrayvariable</i><b>[</b><i>index</i><b>]\
      \ =</b> <i>value</i>\n</pre>\n<p>For historical reasons, you can also use round\
      \ parentheses to enclose the array index.</p>\n<p>To specify all elements at\
      \ once, or to clear an array from a superclass, use the following syntax:</p>\n\
      <pre><i>arrayvariable</i> <b>= (</b><i>value</i><b>,</b><i>value</i><b>,</b>...<b>)</b>\n\
      </pre>\n<p>This will set the default value of the array variable to contain\
      \ the specified number of elements with the specified values. A pair of empty\
      \ parentheses, i.e. <code>()</code>, will explicitly clear the array. As always\
      \ with <a href=\"/Defaultproperties\" title=\"Defaultproperties\">defaultproperties</a>,\
      \ you can not execute any code here. For Unreal Engine 2 this includes not being\
      \ able to use declared <a href=\"/Constants\" title=\"Constants\">constants</a>.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Additional_operations_in_Unreal_Engine_3\"\
      >Additional operations in Unreal Engine 3</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=8\"\
      \ title=\"Edit section: Additional operations in Unreal Engine 3\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In Unreal Engine\
      \ 3 you can use more convenient operations to manipulate the default values\
      \ of dynamic arrays based on their parent class default data:</p>\n<ul>\n<li><code><i>arrayvariable</i><b>.Empty</b></code>\
      \ clears the entire array</li>\n<li><code><i>arrayvariable</i><b>.Add(</b><i>value</i><b>)</b></code>\
      \ adds the value to the end of the array</li>\n<li><code><i>arrayvariable</i><b>.Remove(</b><i>value</i><b>)</b></code>\
      \ removes all occurrences of the specified value from the array</li>\n<li><code><i>arrayvariable</i><b>.RemoveIndex(</b><i>index</i><b>)</b></code>\
      \ removes the element with the specified index</li>\n<li><code><i>arrayvariable</i><b>.Replace(</b><i>search</i><b>,</b><i>replacement</i><b>)</b></code>\
      \ replaces all occurrences of the <i>search</i> value with the <i>replacement</i>\
      \ value</li>\n</ul>\n<p>These operations can be mixed with regular array default\
      \ values and will be \"executed\" at compile-time in the order they are found.</p>\n\
      <p>Suppose, class X contains an array called <i>values</i> that was filled with\
      \ the following default data:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >values <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"\
      nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span\
      \ class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">4</span>,<span\
      \ class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p>Now a class Y that extends\
      \ X could modify the inherited default array data:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\">values.<span class=\"me0\">Remove</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>\nvalues.<span\
      \ class=\"me0\">Replace</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >1</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span>\nvalues.<span\
      \ class=\"me0\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span></pre></div>\n</div>\n<p>Its actual default array data\
      \ now is <code>(10,2,3,5,3,2,10,1)</code>.</p>\n<p>Download (not export!) the\
      \ original UT3 <a href=\"/edit/UnrealScript_source_files?redlink=1\" class=\"\
      new\" title=\"UnrealScript source files (page does not exist)\">UnrealScript\
      \ source files</a> for more examples.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Usage_in_UnrealEd\">Usage in UnrealEd</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=9\"\
      \ title=\"Edit section: Usage in UnrealEd\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<div class=\"thumb tright\">\n<div class=\"thumbinner\"\
      \ style=\"width:365px;\"><a href=\"/File:UnrealEd3-Properties-DynArrayButtons.png\"\
      \ class=\"image\"><img alt=\"\" src=\"/w/images/UnrealEd3-Properties-DynArrayButtons.png\"\
      \ width=\"363\" height=\"54\" class=\"thumbimage\" /></a>\n<div class=\"thumbcaption\"\
      >\n<div class=\"magnify\"><a href=\"/File:UnrealEd3-Properties-DynArrayButtons.png\"\
      \ class=\"internal\" title=\"Enlarge\"></a></div>\nAn actor's <a href=\"/UE2:Actor_properties_(UT2004)#Skins\"\
      \ title=\"UE2:Actor properties (UT2004)\">Skins</a> material array property\
      \ in <a href=\"/UnrealEd_3\" title=\"UnrealEd 3\" class=\"mw-redirect\">UnrealEd\
      \ 3</a>.</div>\n</div>\n</div>\n<p>Using and modifying dynamic array properties\
      \ in <a href=\"/UnrealEd\" title=\"UnrealEd\" class=\"mw-redirect\">UnrealEd</a>\
      \ property windows is pretty straight-forward with the buttons provided by the\
      \ property window.</p>\n<div class=\"thumb tright\">\n<div class=\"thumbinner\"\
      \ style=\"width:377px;\"><a href=\"/File:UT3-UnrealEd-Properties-DynArrayButtons.png\"\
      \ class=\"image\"><img alt=\"\" src=\"/w/images/UT3-UnrealEd-Properties-DynArrayButtons.png\"\
      \ width=\"375\" height=\"63\" class=\"thumbimage\" /></a>\n<div class=\"thumbcaption\"\
      >\n<div class=\"magnify\"><a href=\"/File:UT3-UnrealEd-Properties-DynArrayButtons.png\"\
      \ class=\"internal\" title=\"Enlarge\"></a></div>\nThe <a href=\"/UE3:WorldInfo_(UT3)#GameTypesSupportedOnThisMap\"\
      \ title=\"UE3:WorldInfo (UT3)\">GameTypesSupportedOnThisMap</a> class array\
      \ property in <a href=\"/UT3_Editor\" title=\"UT3 Editor\" class=\"mw-redirect\"\
      >UT3 Editor</a>'s <a href=\"/edit/World_properties?redlink=1\" class=\"new\"\
      \ title=\"World properties (page does not exist)\">world properties</a>.</div>\n\
      </div>\n</div>\n<dl>\n<dt><a href=\"/File:UT3-UnrealEd-Properties-Empty.png\"\
      \ class=\"image\"><img alt=\"UT3-UnrealEd-Properties-Empty.png\" src=\"/w/images/UT3-UnrealEd-Properties-Empty.png\"\
      \ width=\"15\" height=\"15\" /></a> Empty</dt>\n<dd>Removes all array elements.</dd>\n\
      <dt><a href=\"/File:UT3-UnrealEd-Properties-Add.png\" class=\"image\"><img alt=\"\
      UT3-UnrealEd-Properties-Add.png\" src=\"/w/images/UT3-UnrealEd-Properties-Add.png\"\
      \ width=\"15\" height=\"15\" /></a> Add</dt>\n<dd>Adds an empty element at the\
      \ end of the array.</dd>\n<dt><a href=\"/File:UT3-UnrealEd-Properties-Duplicate.png\"\
      \ class=\"image\"><img alt=\"UT3-UnrealEd-Properties-Duplicate.png\" src=\"\
      /w/images/UT3-UnrealEd-Properties-Duplicate.png\" width=\"15\" height=\"15\"\
      \ /></a> Duplicate</dt>\n<dd>Duplicates the array element. (This button is not\
      \ available in <a href=\"/UnrealEd_3\" title=\"UnrealEd 3\" class=\"mw-redirect\"\
      >UnrealEd 3</a>.)</dd>\n<dt><a href=\"/File:UT3-UnrealEd-Properties-Remove.png\"\
      \ class=\"image\"><img alt=\"UT3-UnrealEd-Properties-Remove.png\" src=\"/w/images/UT3-UnrealEd-Properties-Remove.png\"\
      \ width=\"15\" height=\"15\" /></a> Delete</dt>\n<dd>Removes this array element.</dd>\n\
      <dt><a href=\"/File:UT3-UnrealEd-Properties-Insert.png\" class=\"image\"><img\
      \ alt=\"UT3-UnrealEd-Properties-Insert.png\" src=\"/w/images/UT3-UnrealEd-Properties-Insert.png\"\
      \ width=\"15\" height=\"15\" /></a> Insert</dt>\n<dd>Inserts an empty element\
      \ above this one.</dd>\n</dl>\n<div style=\"clear:both;\"></div>\n<h2><span\
      \ class=\"mw-headline\" id=\"See_also\">See also</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Dynamic_arrays?section=10\"\
      \ title=\"Edit section: See also\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"http://udn.epicgames.com/Two/UnrealScriptReference#DynArray\"\
      \ class=\"extiw\" title=\"udn2:UnrealScriptReference\">UnrealScript Language\
      \ Reference/Dynamic Arrays</a> (Unreal Engine 2)</li>\n<li><a href=\"http://udn.epicgames.com/Three/UnrealScriptReference#DynArray\"\
      \ class=\"extiw\" title=\"udn3:UnrealScriptReference\">UnrealScript Language\
      \ Reference/Dynamic Arrays</a> (Unreal Engine 3)</li>\n</ul>\n<table class=\"\
      navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\">\n<th colspan=\"\
      2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative; width:100%;\
      \ white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"background-color:transparent;\
      \ padding:0; font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <strong class=\"\
      selflink\">Dynamic arrays</strong>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n\
      </tr>\n<tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Literals\" title=\"Literals\">Literals</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.282 seconds\nReal time usage: 0.584 seconds\nPreprocessor\
      \ visited node count: 252/1000000\nPreprocessor generated node count: 1028/1000000\n\
      Post‐expand include size: 10669/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   68.699      1 - -total\n 86.32%   59.303      1 - Template:Navbox_unrealscript\n\
      \ 63.17%   43.394      1 - Template:Navbox\n 13.01%    8.941      1 - Template:Tnavbar\n\
      \ 12.93%    8.886      1 - Template:Clear\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:24057-0!*!0!!en!5!* and timestamp 20221117232811\
      \ and revision id 45112\n -->\n"
  categories:
  - sortkey: "Dynamic arrays"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Delegate"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 106
    exists: true
    name: "UE3:WorldInfo (UT3)"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: false
    name: "UnrealScript source files"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 0
    exists: true
    name: "Replication"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Function"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "UnrealEd"
  - ns: 0
    exists: true
    name: "UnrealEd 3"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Operator"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: false
    name: "Replicated function"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: false
    name: "World properties"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "UT3 Editor"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 104
    exists: true
    name: "UE2:Actor properties (UT2004)"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Foreach loop"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "States"
  templates:
  - ns: 10
    exists: true
    name: "Template:Clear"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  images:
  - "UT3-UnrealEd-Properties-Remove.png"
  - "UnrealEd3-Properties-DynArrayButtons.png"
  - "UT3-UnrealEd-Properties-Insert.png"
  - "UT3-UnrealEd-Properties-Empty.png"
  - "UT3-UnrealEd-Properties-DynArrayButtons.png"
  - "UT3-UnrealEd-Properties-Duplicate.png"
  - "UT3-UnrealEd-Properties-Add.png"
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Declaration syntax"
    number: "1"
    index: "1"
    fromtitle: "Dynamic_arrays"
    byteoffset: 1125
    anchor: "Declaration_syntax"
  - toclevel: 1
    level: "2"
    line: "Usage in code"
    number: "2"
    index: "2"
    fromtitle: "Dynamic_arrays"
    byteoffset: 2489
    anchor: "Usage_in_code"
  - toclevel: 2
    level: "3"
    line: "Accessing array data"
    number: "2.1"
    index: "3"
    fromtitle: "Dynamic_arrays"
    byteoffset: 2750
    anchor: "Accessing_array_data"
  - toclevel: 2
    level: "3"
    line: "Accessing and modifying the array length"
    number: "2.2"
    index: "4"
    fromtitle: "Dynamic_arrays"
    byteoffset: 4665
    anchor: "Accessing_and_modifying_the_array_length"
  - toclevel: 2
    level: "3"
    line: "Inserting and removing elements"
    number: "2.3"
    index: "5"
    fromtitle: "Dynamic_arrays"
    byteoffset: 5565
    anchor: "Inserting_and_removing_elements"
  - toclevel: 2
    level: "3"
    line: "Additional array operations in Unreal Engine 3"
    number: "2.4"
    index: "6"
    fromtitle: "Dynamic_arrays"
    byteoffset: 6342
    anchor: "Additional_array_operations_in_Unreal_Engine_3"
  - toclevel: 1
    level: "2"
    line: "Usage in defaultproperties block"
    number: "3"
    index: "7"
    fromtitle: "Dynamic_arrays"
    byteoffset: 8962
    anchor: "Usage_in_defaultproperties_block"
  - toclevel: 2
    level: "3"
    line: "Additional operations in Unreal Engine 3"
    number: "3.1"
    index: "8"
    fromtitle: "Dynamic_arrays"
    byteoffset: 9874
    anchor: "Additional_operations_in_Unreal_Engine_3"
  - toclevel: 1
    level: "2"
    line: "Usage in UnrealEd"
    number: "4"
    index: "9"
    fromtitle: "Dynamic_arrays"
    byteoffset: 11241
    anchor: "Usage_in_UnrealEd"
  - toclevel: 1
    level: "2"
    line: "See also"
    number: "5"
    index: "10"
    fromtitle: "Dynamic_arrays"
    byteoffset: 12302
    anchor: "See_also"
  displaytitle: "Dynamic arrays"
  iwlinks:
  - prefix: "udn3"
    url: "http://udn.epicgames.com/Three/UnrealScriptReference"
    name: "udn3:UnrealScriptReference"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/dynamic_array"
    name: "wp:dynamic array"
  - prefix: "udn2"
    url: "http://udn.epicgames.com/Two/UnrealScriptReference"
    name: "udn2:UnrealScriptReference"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Java_(programming_language)"
    name: "wp:Java (programming language)"
  wikitext:
    text: "'''Dynamic arrays''' are a special [[Types#Composite types|composite type]]\
      \ in [[UnrealScript]] that contains a variable number of elements in a well-defined\
      \ order. These elements all have the same type, called the \"inner type\" of\
      \ the array.\n\nUnrealScript's dynamic arrays are a true [[wp:dynamic array|dynamic\
      \ array]] implementation, i.e. unlike [[wp:Java (programming language)|Java]]'s\
      \ dynamically-allocated fixed-size arrays they can be resized at runtime.\n\
      The type declaration syntax was available (almost) from the start, but [[Unreal\
      \ Engine 1]] never provided any way to actually access or modify them at the\
      \ UnrealScript level. In other words, dynamic arrays are fully usable in UnrealScript\
      \ only in [[Unreal Engine 2]] and later.\n\nUnlike any other data type in UnrealScript,\
      \ dynamic arrays have absolutely no support for [[replication]]. Attempting\
      \ to replicate a dynamic array variable will have no effect on the remote instance\
      \ of that variable. Attempting to use a dynamic array as parameter of a [[replicated\
      \ function]] will result in the parameter being empty when the function is executed\
      \ on the remote side.\n\n==Declaration syntax==\nDynamic arrays are declared\
      \ as part of the type:\n '''array<''' type '''>'''\n\nThe inner type of a dynamic\
      \ array can be a [[class limiter]] or the name of any other non-array type,\
      \ including [[delegate]] types. Note that [[Unreal Engine 2]] does not support\
      \ dynamic arrays of type [[bool]] and the compiler will complain accordingly.\
      \ Dynamic arrays of bool values are possible in [[Unreal Engine 3]], though.\n\
      \nBe careful when declaring a dynamic array of a [[class limiter]] or [[delegate]]\
      \ type. The compiler recognized two consecutive <code>></code> characters as\
      \ the [[operator]] <code>>></code> and will fail with a syntax error. Insert\
      \ whitespace to get around this limitation:\n '''array< class<''' classname\
      \ '''> >'''\n\nA dynamic array type can be used in all places that allow a type\
      \ definition. The following example code defines a class-global dynamic array\
      \ of bytes and a function that uses dynamic arrays as return type and as the\
      \ type of a parameter and a local variable:\n<uscript>\nvar array<byte> ByteArray;\n\
      \nfunction array<int> RoundAll(array<float> Values)\n{\n  local array<int> Result;\n\
      \n  //...\n\n  return Result;\n}\n</uscript>\nThe only exception are type declarations\
      \ of [[variables]], [[struct]] members and [[function]] parameters that are\
      \ declared as [[static arrays]]. In this case, the dynamic array declaration\
      \ is ignored.\n\n==Usage in code==\nDynamic arrays provide various ways for\
      \ reading and manipulating the content and length of the array. All of these\
      \ must be done through variables or struct members, dynamic arrays returned\
      \ from functions must be assigned to a variable first.\n\n===Accessing array\
      \ data===\nThe entire array data can be passed around if the target variable\
      \ or function parameter or return type is declared as a dynamic array of the\
      \ same inner type as the source array. The array data is copied in this process,\
      \ so afterwards there are two independent arrays with the same data, modifications\
      \ to one of them won't affect the other array's data in any way.\n\nTo access\
      \ values of individual array elements, use the following syntax:\n ''arrayreference'''''['''''index''''']'''\n\
      The index may be any non-negative that is smaller than the length of the array.\
      \ Any other values, i.e. negative numbers or values >= the length of the array,\
      \ will return the null value of the array's inner type and write an out-of-bounds\
      \ warning message to the main log file.\n\nThe same syntax can be used for assigning\
      \ values to individual array elements. In this case the index must be non-negative,\
      \ but may exceed the array length. If the index is equal to or greater than\
      \ the current length of the array, the array grows so its last element has the\
      \ specified index, i.e. its length is now <code>index + 1</code>. If you can\
      \ estimate the final number of elements an array will have, you can resize it\
      \ manually before assigning the values.\n\nAn access method only available in\
      \ [[Unreal Engine 3]] is iteration via the [[foreach loop]]:\n '''foreach'''\
      \ ''arrayreference'''''('''''valuevariable'' ''',''' [''indexvariable'']''')\
      \ {'''\n   ...\n '''}'''\nYou can just loop over the values, or also let the\
      \ loop fill in a variable with the current element's index. The value variable\
      \ must be of the same type as the array's inner type, the index variable must\
      \ be of type [[int]]. In [[Unreal Engine 2]] you have to use a regular [[for\
      \ loop]] with a counter variable to iterate over the array:\n<uscript>\nfor\
      \ (index = 0; index < arrayreference.Length; ++index) {\n  value = arrayreference[index];\n\
      \  //...\n}\n</uscript>\n\n===Accessing and modifying the array length===\n\
      The length of an array can be retrieved with the following syntax:\n ''arrayreference'''''.Length'''\n\
      The length of an array can be set with the following syntax:\n ''arrayreference'''''.Length='''''Value''\n\
      If used on the left side of the simple assignment operator, this syntax can\
      \ also be used to add or remove elements to/from the array. Like all operations\
      \ that add elements to the array, this will initialize the new elements with\
      \ the null value of the array's inner type. '''Important:''' The ''Length''\
      \ attribute must not be used on the left side of combined assignment operators\
      \ or passed to a function parameter declared with the ''out'' modifier!\n\n\
      It is possible to clear a dynamic array by setting its length variable to 0.\n\
      \nAny reduction or increase to the array's Length variable will add or remove\
      \ elements starting at the end of the array.\n\n===Inserting and removing elements===\n\
      To insert elements anywhere in the array, you can use the following syntax:\n\
      \ ''arrayreference'''''.Insert('''''index''''',''' ''count''''');'''\nThis will\
      \ insert ''count'' elements into the array, so that the first inserted element\
      \ ends up at the specified ''index''. The element originally located at ''index''\
      \ and any following elements are moved to make room for the new elements. The\
      \ inserted elements are initialized with null values.\n\nTo remove elements\
      \ from anywhere in the array, use the following syntax:\n ''arrayreference'''''.Remove('''''index''''','''\
      \ ''count''''');'''\nThis will remove ''count'' successive elements, starting\
      \ with the element at ''index''. Elements after the removed array section are\
      \ moved to close the gap.\n\n===Additional array operations in Unreal Engine\
      \ 3===\nTo add empty elements at the end of the array, use:\n ''arrayreference'''''.Add('''''count''''');'''\n\
      This has the same effect as any of the following operations, but the intention\
      \ is much more obvious:\n*<code>arrayreference.Length = arrayreference.Length\
      \ + count;</code>\n*<code>arrayreference.Insert(arrayreference.Length, count);</code>\n\
      \nTo add a single value to the end of the array, use:\n ''arrayreference'''''.AddItem('''''value''''');'''\n\
      This is basically the same as <code>arrayreference[arrayreference.Length] =\
      \ value;</code>.\n\nInserting individual items in the middle of the array can\
      \ be done with the following syntax:\n ''arrayreference'''''.InsertItem('''''index''''','''\
      \ ''value''''');'''\nThe corresponding Unreal Engine 2 code would be <code>arrayreference.Insert(index,\
      \ 1); arrayreference[index] = value;</code>, i.e. two statements.\n\nTo remove\
      \ all occurrences of a specific value from the array, you can use:\n ''arrayreference'''''.RemoveItem('''''value''''');'''\n\
      This will perform a linear search for the value and remove any instance it finds.\
      \ In Unreal Engine 2 you need something like this [[for loop]] to do the same:\n\
      <uscript>\nlocal int i;\n\nfor (i = 0; i < arrayreference.length; ++i) {\n \
      \ if (arrayreference[i] == value) {\n    arrayreference.Remove(i--, 1);\n  }\n\
      }\n</uscript>\n\nUnreal Engine 3 also offers two methods to search for values\
      \ in an array. The simple version just looks for a value:\n ''arrayreference'''''.Find('''''value''''')'''\n\
      This returns the index of the first element containing the specified value.\
      \ If the array doesn't contain this value, <code>INDEX_NONE</code> is returned,\
      \ i.e. the value -1.\nFor dynamic array of structs, a second version of ''Find''\
      \ is available, which looks for values of struct members:\n ''arrayreference'''''.Find('''''membername''''','''\
      \ ''value''''')'''\nThe member name must be a [[name]] literal specifying the\
      \ name of a struct member variable.\n\nStarting with newer versions of the Unreal\
      \ Engine 3 there is also a simply way to sort an array:\n ''arrayreference'''''.Sort('''''comparefunction''''')'''\n\
      The ''comparefunction'' is the name of a function that takes two parameters\
      \ of the array's element type and returns a value of type [[int]]. Negative\
      \ return values indicate that the first parameter should come after the second,\
      \ i.e. the values are not in order. Positive return values mean the first element\
      \ should come before the second, i.e. they are in order. Zero means the elements\
      \ are equal and thus in order. The magnitude of the positive or negative return\
      \ value don't matter, only its sign.\n\n==Usage in defaultproperties block==\n\
      The default data for a dynamic array can either be specified per element, similar\
      \ to [[static arrays]], or for the entire array at once.\n\nThe per-element\
      \ syntax is identical to that of static arrays:\n ''arrayvariable'''''['''''index''''']\
      \ =''' ''value''\nFor historical reasons, you can also use round parentheses\
      \ to enclose the array index.\n\nTo specify all elements at once, or to clear\
      \ an array from a superclass, use the following syntax:\n ''arrayvariable''\
      \ '''= ('''''value''''','''''value''''','''...''')'''\nThis will set the default\
      \ value of the array variable to contain the specified number of elements with\
      \ the specified values. A pair of empty parentheses, i.e. <code>()</code>, will\
      \ explicitly clear the array. As always with [[defaultproperties]], you can\
      \ not execute any code here. For Unreal Engine 2 this includes not being able\
      \ to use declared [[constants]].\n\n===Additional operations in Unreal Engine\
      \ 3===\nIn Unreal Engine 3 you can use more convenient operations to manipulate\
      \ the default values of dynamic arrays based on their parent class default data:\n\
      * <code>''arrayvariable'''''.Empty'''</code> clears the entire array\n* <code>''arrayvariable'''''.Add('''''value''''')'''</code>\
      \ adds the value to the end of the array\n* <code>''arrayvariable'''''.Remove('''''value''''')'''</code>\
      \ removes all occurrences of the specified value from the array\n* <code>''arrayvariable'''''.RemoveIndex('''''index''''')'''</code>\
      \ removes the element with the specified index\n* <code>''arrayvariable'''''.Replace('''''search''''','''''replacement''''')'''</code>\
      \ replaces all occurrences of the ''search'' value with the ''replacement''\
      \ value\nThese operations can be mixed with regular array default values and\
      \ will be \"executed\" at compile-time in the order they are found.\n\nSuppose,\
      \ class X contains an array called ''values'' that was filled with the following\
      \ default data:\n<uscript>\nvalues = (1,2,3,4,5,4,3,2,1)\n</uscript>\nNow a\
      \ class Y that extends X could modify the inherited default array data:\n<uscript>\n\
      values.Remove(4)\nvalues.Replace(1,10)\nvalues.Add(1)\n</uscript>\nIts actual\
      \ default array data now is <code>(10,2,3,5,3,2,10,1)</code>.\n\nDownload (not\
      \ export!) the original UT3 [[UnrealScript source files]] for more examples.\n\
      \n==Usage in UnrealEd==\n[[Image:UnrealEd3-Properties-DynArrayButtons.png|thumb|363px|An\
      \ actor's [[UE2:Actor properties (UT2004)#Skins|Skins]] material array property\
      \ in [[UnrealEd 3]].]]\nUsing and modifying dynamic array properties in [[UnrealEd]]\
      \ property windows is pretty straight-forward with the buttons provided by the\
      \ property window.\n[[Image:UT3-UnrealEd-Properties-DynArrayButtons.png|thumb|375px|The\
      \ [[UE3:WorldInfo (UT3)#GameTypesSupportedOnThisMap|GameTypesSupportedOnThisMap]]\
      \ class array property in [[UT3 Editor]]'s [[world properties]].]]\n; [[Image:UT3-UnrealEd-Properties-Empty.png]]\
      \ Empty: Removes all array elements.\n; [[Image:UT3-UnrealEd-Properties-Add.png]]\
      \ Add: Adds an empty element at the end of the array.\n; [[Image:UT3-UnrealEd-Properties-Duplicate.png]]\
      \ Duplicate: Duplicates the array element. (This button is not available in\
      \ [[UnrealEd 3]].)\n; [[Image:UT3-UnrealEd-Properties-Remove.png]] Delete: Removes\
      \ this array element.\n; [[Image:UT3-UnrealEd-Properties-Insert.png]] Insert:\
      \ Inserts an empty element above this one.\n\n{{clear}}\n==See also==\n* [[udn2:UnrealScriptReference#DynArray|UnrealScript\
      \ Language Reference/Dynamic Arrays]] (Unreal Engine 2)\n* [[udn3:UnrealScriptReference#DynArray|UnrealScript\
      \ Language Reference/Dynamic Arrays]] (Unreal Engine 3)\n\n{{navbox unrealscript}}"
  properties: []
  revId: 45112
name: "Dynamic arrays"
revision:
  revid: 45112
  parentid: 43900
  user: "Krillin6"
  timestamp: 1337123485.000000000
  comment: "/* Accessing and modifying the array length */"
timestamp: 1668754829.781925000
