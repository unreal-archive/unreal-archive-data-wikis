---
parse:
  title: "Legacy:BSP Tree"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Introduction_and_Background\">Introduction\
      \ and Background</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BSP_Tree?section=1\" title=\"Edit section: Introduction\
      \ and Background\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><br /></p>\n<p>Binary Space Partioning (BSP)-trees were first described in\
      \ 1969 by Shumacker et al., it was hardly meant to be an algorithm used to develop\
      \ entertainment products, but since the beginning of the 1990’s BSP-trees have\
      \ been used in the gaming industry to improve performance and make it possible\
      \ to use more details in the maps . The first game ever to use the technology\
      \ was Doom, created by John Carmack and John Romero, two legends in the gaming\
      \ industry. Since then almost all First Person Shooting (FPS) games have been\
      \ using that technique.</p>\n<p>BSP trees were first introduced to solve the\
      \ hidden surface removal problem in real time. The original concept was developed\
      \ for a static scene with a changing viewpoint; the classic computer game application,\
      \ and it works as a two-phase process. In the first phase a BSP tree of the\
      \ scene is constructed (once during the level build) and in the second phase\
      \ the viewpoint is compared with this structure to determine visibility. BSP\
      \ trees are not a graphic object representation, but a way of partitioning space\
      \ so that we can solve certain rendering requirements in an efficient manner.</p>\n\
      <p>The need of removing polygons that are not visible has always been extremely\
      \ high in the gaming industry, even though graphic cards evolve at gigantic\
      \ rates and things that were true a couple years ago are not even remotely true\
      \ these days. When a game is created a goal frame rate is set. The lowest acceptable\
      \ rate on a target system use to be around 30 frames/second. A couple of years\
      \ ago this meant putting out over 5000 textured polygons per frame could be\
      \ too much. These days there are graphic cards in the market with the ability\
      \ to draw hundreds of million of polygons per second during optimal conditions.\
      \ Still there is a need of removing hidden parts. Why? Each hidden polygon that\
      \ is drawn could be replaced by a polygon that is visible, hence increasing\
      \ the detail in the scenes, making the game visually more attractive. The question\
      \ is how far one should go to remove hidden polygons. To remove a hidden part\
      \ heavy computations are needed to be done, such as view frustum culling and\
      \ portal rendering. The CPU-time used to do these computations could be used\
      \ to enhance other effects in the game, such as AI and collision detection.\
      \ Hence there is a lot to take in to consideration when developing algorithms\
      \ for removal of hidden surfaces. There are almost no games that go so far as\
      \ to remove each polygon that is hidden. Most games are satisfied with the removal\
      \ of whole sets of polygons, such as nodes, objects etc. They do not consider\
      \ individual polygons, so it seems like the correct way to go is to accept some\
      \ overdraw to limit the computations when removing hidden surfaces.</p>\n<p>In\
      \ reality, most computer graphics and three dimensional games applications are\
      \ made up of scenes where the object compexity (number of polygons per object)\
      \ is much greater than the scene complexity (number of objects per scene) and\
      \ for the BSP Tree approach to be useful we have to deal with the polygons within\
      \ objects rather than entire objects.</p>\n<p>BSP trees are an extension of\
      \ the painter's algorithm; which works by drawing all the polygons in a scene\
      \ in back-to-front order, so that polygons in the background are drawn first,\
      \ and polygons in the foreground are drawn over them.</p>\n<p>A Binary Space\
      \ Partition Tree (BSP Tree) is a very effective method to render scenes in a\
      \ 3 dimensional game envoironment. A transversal of the BSP tree determines\
      \ which objects in a scene are furthest from the camera. After which, the Game\
      \ Engine will render the polygons in the order of furthest to closest, employing\
      \ occlusion correctly, so that the player sees everything in a realistic manner.</p>\n\
      <p><br />\nA BSP Tree sorts the polygons into a tree of nodes quickly and efficiently\
      \ at loadup, so then we can easily know which</p>\n<p>polygons are furthest\
      \ from the camera at run-time.</p>\n<p><br /></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"The_Unreal_Engine_Core_BSP_Build_Process\">The Unreal Engine Core BSP\
      \ Build Process</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BSP_Tree?section=2\" title=\"Edit section: The\
      \ Unreal Engine Core BSP Build Process\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>So, here's the explanation of the Unreal Engine BSP\
      \ in a nutshell.</p>\n<p><br />\nAn average Unreal Tournament Level consists\
      \ of several thousand polygons and only about 200-400 are on screen in each\
      \ frame. This is a small portion of the overall polycount and the engine has\
      \ to determine which polys are visible and which are not. The Unreal engine\
      \ uses a data structure, the <i>BSP</i> (<i>B</i>inary <i>S</i>pace <i>P</i>artition)\
      \ for this process.</p>\n<p>When you rebuild the BSP the BSP compiler starts\
      \ splitting up the level. First it splits it into two halves, then it bisects\
      \ these two halves and the resulting ones as well and so on...until it gets\
      \ a very small split where a threshold facecount is reached. (and preferably\
      \ it's convex) The cut planes are determined by the <i>nodes</i> which are assigned\
      \ during the BSP compiling based brush geometry.</p>\n<p>The parent child relation\
      \ of the cuts shows a tree structure which can be used for the visibility checking\
      \ of the polys. (-&gt; Z-Buffering)</p>\n<p>Example:</p>\n<p>You have a box\
      \ which is split into four halves by bisecting the box and the resulting smaller\
      \ boxes.</p>\n<ul>\n<li>Box\n<ul>\n<li>A\n<ul>\n<li>A1</li>\n<li>A2</li>\n</ul>\n\
      </li>\n<li>B\n<ul>\n<li>B1</li>\n<li>B2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\
      <p>If you see only A1 then the whole B branch can be ignored. And the children\
      \ of A2 as well. (If they existed) You can see that it's a fast process this\
      \ way.</p>\n<p>Here's another example of a BSP tree in 2D:</p>\n<div class=\"\
      center\">\n<div class=\"floatnone\"><a href=\"/File:Legacy_bsp_diagram.gif\"\
      \ class=\"image\" title=\"numbers are &quot;nodes&quot;, letters are leaves.\
      \  Note that nodes 5 and 8 combine to form a single polygon edge.\"><img alt=\"\
      numbers are &quot;nodes&quot;, letters are leaves.  Note that nodes 5 and 8\
      \ combine to form a single polygon edge.\" src=\"/w/images/Legacy_bsp_diagram.gif\"\
      \ width=\"500\" height=\"335\" /></a></div>\n</div>\n<p>The BSP is also used\
      \ for collision detection. See also <a href=\"/Legacy:BSP_Hole\" title=\"Legacy:BSP\
      \ Hole\">BSP Hole</a>.</p>\n<p>All solid and subtracted brushes use the BSP\
      \ so they create BSP cuts and raise the nodecount. As you see the example I've\
      \ shown you was really simple but if we are talking about thousands of polys\
      \ then the amount of nodes is a very important influencing factor of the framerate.\
      \ If you see more cuts the engine has to compute more to get the visible polys.\
      \ In addition to this if the BSP is too complex you'll have greater chances\
      \ for getting BSP holes.</p>\n<p>The position of the cuts is also important.\
      \ If their placement gets unbalanced then the resulting BSP tree will be deeper\
      \ but less nodes will be needed. This means that the overall nodecount will\
      \ be lower but some places of your map will have high occlusion times thus low\
      \ framerates. The over-balanced tree is the other side of the problem.</p>\n\
      <p>You can control the cut balance through the Rebuild Options' first slider\
      \ in UnrealEd, although it's generally not advisable to mess around with those\
      \ settings because they are already set to the optimal values.</p>\n<p>The second\
      \ slider controls the priority of Portals when choosing the cut planes. A high\
      \ priority will solve zoning issues where the zone portal can separate the two\
      \ zones properly but it will break the \"natural balance\" of the tree. If you\
      \ lower the priority then the portals won't alter the tree that much but you\
      \ will get leaky zones.</p>\n<p>Messing with these sliders, however, should\
      \ be reserved for the High Wizards of UnrealEd. The default settings are almost\
      \ always near-optimal and significant deviation from them can send your map\
      \ into <a href=\"/Legacy:BSP_Hole\" title=\"Legacy:BSP Hole\">BSP Hole</a> or\
      \ performance hell.</p>\n<p><a href=\"/Legacy:Semisolid\" title=\"Legacy:Semisolid\"\
      >Semisolid</a> and <a href=\"/Legacy:Nonsolid\" title=\"Legacy:Nonsolid\">nonsolid</a>\
      \ brushes don't create cuts in the BSP so they can be used for decorations without\
      \ the risk of getting high nodecounts. On the other hand they can't hide objects\
      \ behind them through the BSP so their rendering can be slower than for large\
      \ solid brushes. They can also create collision errors for the same reason.</p>\n\
      <p>The BSP Tree is a static data structure, (it is pre-determined before the\
      \ Level Map loads in Unreal Tournament), and stores information only about non-movable\
      \ constructive solid geometry. Movers are not incorporated in the Level BSP\
      \ Tree.</p>\n<p>That's it for now. If I made mistakes or you have additions\
      \ edit it...:)</p>\n<p>I hope it's clear.</p>\n<p><b>inio:</b> seemed pretty\
      \ clear, though there's a lot more going on for visibility determination than\
      \ you talk about (it's actually a front-to-back process IIRC). Classically (pre-DOOM)\
      \ BSPs were used only for depth sorting in early flat-shaded games and CAD apps\
      \ as the sorting stage of a painter's algo, so you're correct to that extent.</p>\n\
      <hr />\n<h2><span class=\"mw-headline\" id=\"BSP_Tree_Frequently_Asked_Questions\"\
      >BSP Tree Frequently Asked Questions</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:BSP_Tree?section=3\"\
      \ title=\"Edit section: BSP Tree Frequently Asked Questions\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>For more information\
      \ on BSP Tree Methods, read this website page on: <a rel=\"nofollow\" class=\"\
      external text\" href=\"ftp://ftp.sgi.com/other/bspfaq/faq/bspfaq.html\">BSP\
      \ Frequently Asked Questions</a><br /></p>\n<hr />\n<p>An excellent technical\
      \ paper on the BSP Tree process as used in 3D games can be found at:</p>\n<p><a\
      \ rel=\"nofollow\" class=\"external text\" href=\"http://www.flipcode.com/misc/SamuelRanta-Eskola_BSPTrees.pdf\"\
      >Binary Space Partitioning Trees and Polygon Removal in Real Time 3D Rendering</a></p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.082 seconds\nReal time usage:\
      \ 0.085 seconds\nPreprocessor visited node count: 12/1000000\nPreprocessor generated\
      \ node count: 26/1000000\nPost‐expand include size: 8/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:549-0!*!0!!*!5!* and timestamp 20221118091430 and revision\
      \ id 1697\n -->\n"
  categories:
  - sortkey: "BSP Tree"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Nonsolid"
  - ns: 100
    exists: true
    name: "Legacy:Semisolid"
  - ns: 100
    exists: true
    name: "Legacy:BSP Hole"
  templates: []
  images:
  - "Legacy_bsp_diagram.gif"
  externallinks:
  - "ftp://ftp.sgi.com/other/bspfaq/faq/bspfaq.html"
  - "http://www.flipcode.com/misc/SamuelRanta-Eskola_BSPTrees.pdf"
  sections:
  - toclevel: 1
    level: "2"
    line: "Introduction and Background"
    number: "1"
    index: "1"
    fromtitle: "Legacy:BSP_Tree"
    byteoffset: 0
    anchor: "Introduction_and_Background"
  - toclevel: 1
    level: "2"
    line: "The Unreal Engine Core BSP Build Process"
    number: "2"
    index: "2"
    fromtitle: "Legacy:BSP_Tree"
    byteoffset: 3952
    anchor: "The_Unreal_Engine_Core_BSP_Build_Process"
  - toclevel: 1
    level: "2"
    line: "BSP Tree Frequently Asked Questions"
    number: "3"
    index: "3"
    fromtitle: "Legacy:BSP_Tree"
    byteoffset: 8221
    anchor: "BSP_Tree_Frequently_Asked_Questions"
  displaytitle: "Legacy:BSP Tree"
  iwlinks: []
  wikitext:
    text: "==Introduction and Background ==\n\n<br />\n\nBinary Space Partioning (BSP)-trees\
      \ were first described in 1969 by Shumacker et al., it was hardly meant to be\
      \ an algorithm used to develop entertainment products, but since the beginning\
      \ of the 1990’s BSP-trees have been used in the gaming industry to improve performance\
      \ and make it possible to use more details in the maps . The first game ever\
      \ to use the technology was Doom, created by John Carmack and John Romero, two\
      \ legends in the gaming industry. Since then almost all First Person Shooting\
      \ (FPS) games have been using that technique. \n\nBSP trees were first introduced\
      \ to solve the hidden surface removal problem in real time. The original concept\
      \ was developed for a static scene with a changing viewpoint; the classic computer\
      \ game application, and it works as a two-phase process. In the first phase\
      \ a BSP tree of the scene is constructed (once during the level build) and in\
      \ the second phase the viewpoint is compared with this structure to determine\
      \ visibility. BSP trees are not a graphic object representation, but a way of\
      \ partitioning space so that we can solve certain rendering requirements in\
      \ an efficient manner.\n\nThe need of removing polygons that are not visible\
      \ has always been extremely high in the gaming industry, even though graphic\
      \ cards evolve at gigantic rates and things that were true a couple years ago\
      \ are not even remotely true these days. When a game is created a goal frame\
      \ rate is set. The lowest acceptable rate on a target system use to be around\
      \ 30 frames/second. A couple of years ago this meant putting out over 5000 textured\
      \ polygons per frame could be too much. These days there are graphic cards in\
      \ the market with the ability to draw hundreds of million of polygons per second\
      \ during optimal conditions. Still there is a need of removing hidden parts.\
      \ Why? Each hidden polygon that is drawn could be replaced by a polygon that\
      \ is visible, hence increasing the detail in the scenes, making the game visually\
      \ more attractive. The question is how far one should go to remove hidden polygons.\
      \ To remove a hidden part heavy computations are needed to be done, such as\
      \ view frustum culling and portal  rendering. The CPU-time used to do these\
      \ computations could be used to enhance other effects in the game, such as AI\
      \ and collision detection. Hence there is a lot to take in to consideration\
      \ when developing algorithms for removal of hidden surfaces. There are almost\
      \ no games that go so far as to remove each polygon that is hidden. Most games\
      \ are satisfied with the removal of whole sets of polygons, such as nodes, objects\
      \ etc. They do not consider individual polygons, so it seems like the correct\
      \ way to go is to accept some overdraw to limit the computations when removing\
      \ hidden surfaces. \n\nIn reality, most computer graphics and three dimensional\
      \ games applications are made up of scenes where the object compexity (number\
      \ of polygons per object) is much greater than the scene complexity (number\
      \ of objects per scene) and for the BSP Tree approach to be useful we have to\
      \ deal with the polygons within objects rather than entire objects. \n\nBSP\
      \ trees are an extension of the painter's algorithm; which works by drawing\
      \ all the polygons in a scene in back-to-front order, so that polygons in the\
      \ background are drawn first, and polygons in the foreground are drawn over\
      \ them.\n\nA Binary Space Partition Tree (BSP Tree) is a very effective method\
      \ to render scenes in a 3 dimensional game envoironment. A transversal of the\
      \ BSP tree determines which objects in a scene are furthest from the camera.\
      \ After which, the Game Engine will render the polygons in the order of furthest\
      \ to closest, employing occlusion correctly, so that the player sees everything\
      \ in a realistic manner.\n \n\nA BSP Tree sorts the polygons into a tree of\
      \ nodes quickly and efficiently at loadup, so then we can easily know which\n\
      \npolygons are furthest from the camera at run-time.\n\n<br>\n\n==The Unreal\
      \ Engine Core BSP Build Process ==\n\nSo, here's the explanation of the Unreal\
      \ Engine BSP in a nutshell.\n \n\nAn average Unreal Tournament Level consists\
      \ of several thousand polygons and only about 200-400 are on screen in each\
      \ frame. This is a small portion of the overall polycount and the engine has\
      \ to determine which polys are visible and which are not. The Unreal engine\
      \ uses a data structure, the ''BSP'' (''B''inary ''S''pace ''P''artition) for\
      \ this process.\n\nWhen you rebuild the BSP the BSP compiler starts splitting\
      \ up the level. First it splits it into two halves, then it bisects these two\
      \ halves and the resulting ones as well and so on...until it gets a very small\
      \ split where a threshold facecount is reached. (and preferably it's convex)\
      \ The cut planes are determined by the ''nodes'' which are assigned during the\
      \ BSP compiling based brush geometry. \n\nThe parent child relation of the cuts\
      \ shows a tree structure which can be used for the visibility checking of the\
      \ polys. (-> Z-Buffering) \n\nExample:\n\nYou have a box which is split into\
      \ four halves by bisecting the box and the resulting smaller boxes. \n* Box\n\
      ** A\n*** A1 \n*** A2\n** B\n*** B1 \n*** B2\n\nIf you see only A1 then the\
      \ whole B branch can be ignored. And the children of A2 as well. (If they existed)\
      \ You can see that it's a fast process this way.\n\nHere's another example of\
      \ a BSP tree in 2D:\n\n[[Image:Legacy_bsp_diagram.gif|center|numbers are \"\
      nodes\", letters are leaves.  Note that nodes 5 and 8 combine to form a single\
      \ polygon edge.]]\n\nThe BSP is also used for collision detection. See also\
      \ [[Legacy:BSP Hole|BSP Hole]].\n\nAll solid and subtracted brushes use the\
      \ BSP so they create BSP cuts and raise the nodecount. As you see the example\
      \ I've shown you was really simple but if we are talking about thousands of\
      \ polys then the amount of nodes is a very important influencing factor of the\
      \ framerate. If you see more cuts the engine has to compute more to get the\
      \ visible polys. In addition to this if the BSP is too complex you'll have greater\
      \ chances for getting BSP holes.\n\nThe position of the cuts is also important.\
      \ If their placement gets unbalanced then the resulting BSP tree will be deeper\
      \ but less nodes will be needed. This means that the overall nodecount will\
      \ be lower but some places of your map will have high occlusion times thus low\
      \ framerates. The over-balanced tree is the other side of the problem.\n\nYou\
      \ can control the cut balance through the Rebuild Options' first slider in UnrealEd,\
      \ although it's generally not advisable to mess around with those settings because\
      \ they are already set to the optimal values.\n\nThe second slider controls\
      \ the priority of Portals when choosing the cut planes. A high priority will\
      \ solve zoning issues where the zone portal can separate the two zones properly\
      \ but it will break the \"natural balance\" of the tree. If you lower the priority\
      \ then the portals won't alter the tree that much but you will get leaky zones.\n\
      \nMessing with these sliders, however, should be reserved for the High Wizards\
      \ of UnrealEd.  The default settings are almost always near-optimal and significant\
      \ deviation from them can send your map into [[Legacy:BSP Hole|BSP Hole]] or\
      \ performance hell.\n\n[[Legacy:Semisolid|Semisolid]] and [[Legacy:Nonsolid|nonsolid]]\
      \ brushes don't create cuts in the BSP so they can be used for decorations without\
      \ the risk of getting high nodecounts. On the other hand they can't hide objects\
      \ behind them through the BSP so their rendering can be slower than for large\
      \ solid brushes. They can also create collision errors for the same reason.\n\
      \nThe BSP Tree is a static data structure, (it is pre-determined before the\
      \ Level Map loads in Unreal Tournament), and stores information only about non-movable\
      \ constructive solid geometry. Movers are not incorporated in the Level BSP\
      \ Tree.\n\nThat's it for now. If I made mistakes or you have additions edit\
      \ it...:)\n\nI hope it's clear.\n\n'''inio:''' seemed pretty clear, though there's\
      \ a lot more going on for visibility determination than you talk about (it's\
      \ actually a front-to-back process IIRC).  Classically (pre-DOOM) BSPs were\
      \ used only for depth sorting in early flat-shaded games and CAD apps as the\
      \ sorting stage of a painter's algo, so you're correct to that extent.\n\n----\n\
      \n==BSP Tree Frequently Asked Questions ==\n\nFor more information on BSP Tree\
      \ Methods, read this website page on: [ftp://ftp.sgi.com/other/bspfaq/faq/bspfaq.html\
      \ BSP Frequently Asked Questions]<br>\n\n----\n\nAn excellent technical paper\
      \ on the BSP Tree process as used in 3D games can be found at:\n\n[http://www.flipcode.com/misc/SamuelRanta-Eskola_BSPTrees.pdf\
      \ Binary Space Partitioning Trees and Polygon Removal in Real Time 3D Rendering]\n\
      \n[[Category:Legacy Mapping|{{PAGENAME}}]]"
  properties: []
  revId: 1697
name: "Legacy:BSP Tree"
revision:
  revid: 1697
  parentid: 1699
  user: "Inio"
  timestamp: 1060889094.000000000
  comment: "A little more information for the diagram"
timestamp: 1668762871.131486000
