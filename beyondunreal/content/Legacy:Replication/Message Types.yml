---
parse:
  title: "Legacy:Replication/Message Types"
  text:
    text: "<p>There are three types of message the engine might send over the network\
      \ in order to support replication:</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Actor_Replication\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">Actor Replication</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Variable_Replication\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Variable Replication</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-3\"><a href=\"#Function_Replication\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Function Replication</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Actor_Replication\"\
      >Actor Replication</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Replication/Message_Types?section=1\" title=\"\
      Edit section: Actor Replication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Whenever the server decides that an actor has become\
      \ <a href=\"/Legacy:Relevance\" title=\"Legacy:Relevance\">relevant</a> to a\
      \ particular client, the server instructs the client to create an actor of that\
      \ class and initialize it either with its client-side default properties (in\
      \ the case of a newly-created actor) or with the values currently held by the\
      \ server.</p>\n<h2><span class=\"mw-headline\" id=\"Variable_Replication\">Variable\
      \ Replication</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Replication/Message_Types?section=2\" title=\"\
      Edit section: Variable Replication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Whenever a variable changes, if the condition in the\
      \ <a href=\"/Legacy:Replication_Block\" title=\"Legacy:Replication Block\">replication\
      \ block</a> is met, and subject to the <a href=\"/Legacy:Actor/Replication\"\
      \ title=\"Legacy:Actor/Replication\">bNetUpdateFrequency</a> of the actor, the\
      \ server queues a network message that instructs the client to change a variable\
      \ to the new value. Clients can also replicate some variables to the server,\
      \ in the case of inputs, etc. Variables waiting to be replicated enter a queue\
      \ and are replicated when bandwidth is available, depending on the actor's <a\
      \ href=\"/Legacy:Actor/Replication\" title=\"Legacy:Actor/Replication\">bNetPriority</a>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Function_Replication\">Function Replication</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Replication/Message_Types?section=3\" title=\"Edit section:\
      \ Function Replication\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This is simply a remote function call. The engine transmits a request for\
      \ the remote end to call a function. This can also be used to call a function\
      \ on the server based on the client's input. See <a href=\"/Legacy:Replicated_Function\"\
      \ title=\"Legacy:Replicated Function\">Replicated Function</a>.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Replication/Message_Types?section=4\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><a href=\"/Legacy:Replication\" title=\"Legacy:Replication\"\
      >Replication</a></p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.022 seconds\n\
      Real time usage: 0.023 seconds\nPreprocessor visited node count: 15/1000000\n\
      Preprocessor generated node count: 20/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:2657-0!*!0!!en!*!*\
      \ and timestamp 20221118155143 and revision id 6327\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Replication Block"
  - ns: 100
    exists: true
    name: "Legacy:Actor/Replication"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:Relevance"
  - ns: 100
    exists: true
    name: "Legacy:Replicated Function"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Actor Replication"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Replication/Message_Types"
    byteoffset: 106
    anchor: "Actor_Replication"
  - toclevel: 1
    level: "2"
    line: "Variable Replication"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Replication/Message_Types"
    byteoffset: 455
    anchor: "Variable_Replication"
  - toclevel: 1
    level: "2"
    line: "Function Replication"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Replication/Message_Types"
    byteoffset: 1023
    anchor: "Function_Replication"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Replication/Message_Types"
    byteoffset: 1301
    anchor: "Related_Topics"
  displaytitle: "Legacy:Replication/Message Types"
  iwlinks: []
  wikitext:
    text: "There are three types of message the engine might send over the network\
      \ in order to support replication:\n\n==Actor Replication==\n\nWhenever the\
      \ server decides that an actor has become [[Legacy:Relevance|relevant]] to a\
      \ particular client, the server instructs the client to create an actor of that\
      \ class and initialize it either with its client-side default properties (in\
      \ the case of a newly-created actor) or with the values currently held by the\
      \ server.\n\n==Variable Replication==\n\nWhenever a variable changes, if the\
      \ condition in the [[Legacy:Replication Block|replication block]] is met, and\
      \ subject to the [[Legacy:Actor/Replication|bNetUpdateFrequency]] of the actor,\
      \ the server queues a network message that instructs the client to change a\
      \ variable to the new value. Clients can also replicate some variables to the\
      \ server, in the case of inputs, etc. Variables waiting to be replicated enter\
      \ a queue and are replicated when bandwidth is available, depending on the actor's\
      \ [[Legacy:Actor/Replication|bNetPriority]].\n\n==Function Replication==\n\n\
      This is simply a remote function call.  The engine transmits a request for the\
      \ remote end to call a function.  This can also be used to call a function on\
      \ the server based on the client's input. See [[Legacy:Replicated Function|Replicated\
      \ Function]].\n\n==Related Topics==\n\n[[Legacy:Replication|Replication]]"
  properties: []
  revId: 6327
name: "Legacy:Replication/Message Types"
revision:
  revid: 6327
  parentid: 6328
  user: "Sweavo"
  timestamp: 1134253833.000000000
  comment: "*"
timestamp: 1668786626.815757000
