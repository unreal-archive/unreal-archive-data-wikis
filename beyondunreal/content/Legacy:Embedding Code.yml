---
parse:
  title: "Legacy:Embedding Code"
  text:
    text: "<p>Since <a href=\"/Legacy:Map_File\" title=\"Legacy:Map File\">Map Files</a>\
      \ are simply Unreal packages, they can contain all sorts of different resources\
      \ in addition to geometry and <a href=\"/Legacy:Texture_(UT)\" title=\"Legacy:Texture\
      \ (UT)\">Texture (UT)s</a>. That includes UnrealScript code. Rather than including\
      \ a bunch of small .u files with your map distribution, embed their code into\
      \ your <a href=\"/Legacy:Map_File\" title=\"Legacy:Map File\">Map Files</a>.\
      \ Apart from being neater, that'll make a much more professional appearance\
      \ than a cluttered .zip file.</p>\n<p><b>Don't embed code without permission.</b>\
      \ (That's clear, but unfortunately not to everyone.) Be sure that the code's\
      \ author is content with having his/her code embedded in maps. Besides, embedding\
      \ code makes only sense for small code packages, and if being able to do a centralized\
      \ update of the code package is not an issue.</p>\n<p></p>\n<div id=\"toc\"\
      \ class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li\
      \ class=\"toclevel-1 tocsection-1\"><a href=\"#Creating_Code_in_MyLevel\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Creating Code in MyLevel</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Importing_Code_into_MyLevel\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Importing Code into\
      \ MyLevel</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #...from_a_.u_file\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\"\
      >...from a .u file</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a\
      \ href=\"#...from_another_map_file\"><span class=\"tocnumber\">2.2</span> <span\
      \ class=\"toctext\">...from another map file</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Updating_Code_in_MyLevel\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Updating Code in\
      \ MyLevel</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Creating_Code_in_MyLevel\"\
      >Creating Code in MyLevel</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Embedding_Code?section=1\"\
      \ title=\"Edit section: Creating Code in MyLevel\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>You can create new classes in UnrealEd and store them\
      \ directly into MyLevel. You might want to do this if:</p>\n<ul>\n<li>you're\
      \ pasting in a complete script from one of the <a href=\"/Legacy:Third-Party_Components\"\
      \ title=\"Legacy:Third-Party Components\">Third-Party Components</a> or <a href=\"\
      /Legacy:Open_Source\" title=\"Legacy:Open Source\">Open Source</a> pages</li>\n\
      <li>you're daring</li>\n<li>you're desperate</li>\n</ul>\n<p>See <a href=\"\
      /Legacy:Create_A_Subclass\" title=\"Legacy:Create A Subclass\">Create A Subclass</a>\
      \ for instructions.</p>\n<p>The usual pitfalls of creating code in UnrealEd\
      \ apply: Can't delete classes, can't rename classes, can't change a superclass,\
      \ UnrealEd crashes when you change the property declarations of a class that\
      \ is used in the map. If you're simply pasting a script (a custom one from this\
      \ site for example), that's not a problem though.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Importing_Code_into_MyLevel\">Importing Code into MyLevel</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Embedding_Code?section=2\" title=\"Edit section: Importing\
      \ Code into MyLevel\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"...from_a_.u_file\">...from a .u file</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Embedding_Code?section=3\" title=\"Edit section: ...from\
      \ a .u file\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>If you have a pre-existing .u file that you want to import in MyLevel, do\
      \ it as follows:</p>\n<ol>\n<li>Make sure that you're not already using that\
      \ .u file externally in your map; in other words, make the .u file import the\
      \ first step of using the actors defined in that .u file. <i>If</i> you already\
      \ have added actors from that .u file in your map, cut them into the clipboard,\
      \ save your map, and close UnrealEd.</li>\n</ol>\n<ol>\n<li>Make sure that the\
      \ .u package you're about to import isn't automatically loaded when UnrealEd\
      \ starts. Check the <tt>EditPackages</tt> lines in <a href=\"/Legacy:UnrealTournament.Ini\"\
      \ title=\"Legacy:UnrealTournament.Ini\">UnrealTournament.ini</a> and delete\
      \ any line pointing to that .u package if necessary (then restart UnrealEd).\
      \ Also, place the .u file you would like to import into the \\UnrealTournament\\\
      System directory.</li>\n</ol>\n<p>Do <a href=\"/Legacy:UnrealEd_Main_Menu\"\
      \ title=\"Legacy:UnrealEd Main Menu\">UnrealEd Main Menu</a> -&gt; View -&gt;\
      \ Log to open the <a href=\"/edit/Legacy:Log_Window?redlink=1\" class=\"new\"\
      \ title=\"Legacy:Log Window (page does not exist)\">log window</a> or click\
      \ the button on the <a href=\"/Legacy:Console_Bar\" title=\"Legacy:Console Bar\"\
      >Console Bar</a>. At the prompt, enter:</p>\n<pre>obj load file=whatever.u package=MyLevel\n\
      </pre>\n<p>(substitute \"whatever\" by the name of the package you want to import,\
      \ of course). If everything works out, you'll see some log entries along the\
      \ lines of \"New file, existing package.\" If you made a typo in the file name,\
      \ UnrealEd crashes (courtesy of the <a href=\"/Legacy:UnrealEd_Goblin\" title=\"\
      Legacy:UnrealEd Goblin\">UnrealEd Goblin</a>).</p>\n<p><br /></p>\n<ol>\n<li>If\
      \ you previously had cut/removed existing actors from that package from your\
      \ map, paste/re-add them.</li>\n</ol>\n<ol>\n<li>Do a <b>full rebuild,</b> then\
      \ save.</li>\n</ol>\n<p><b>Notes:</b> After importing a package in this way,\
      \ the <a href=\"/Legacy:Actor_Browser\" title=\"Legacy:Actor Browser\" class=\"\
      mw-redirect\">actor browser</a> in UnrealEd 2 will not show any imported actors\
      \ that are direct descendants of actor (and possibly some others deeper in the\
      \ tree too) unless you first deselect then reselect the <i>Show Actor Classes\
      \ Only</i> checkbox to force a reload of the tree.</p>\n<p>To get imported music\
      \ to show up in the music browser, click the docked/undocked button and your\
      \ imported music file will show up.</p>\n<p>Only actors that are referenced\
      \ in the map and their parent classes get saved in <a href=\"/Legacy:MyLevel\"\
      \ title=\"Legacy:MyLevel\">MyLevel</a> with the map so if you have actors that\
      \ only get spawned in runtime and are in the package you just imported you need\
      \ to add an example in your map somewhere out of sight so they get stored in\
      \ MyLevel and can be spawned properly in game. This would apply to projectiles\
      \ in custom weapon types etc.</p>\n<p>Be sure to test your new map on a virgin\
      \ install of Unreal Tournament that has none of the packages you've imported\
      \ classes from in it. Otherwise it's dead easy for a reference to something\
      \ that isn't sucessfully stored in MyLevel to get missed and what you thought\
      \ would be a triumphant release of your latest project gets off to a bad start\
      \ when your map crashes the game on load thanks to missing resources...</p>\n\
      <h3><span class=\"mw-headline\" id=\"...from_another_map_file\">...from another\
      \ map file</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Embedding_Code?section=4\" title=\"Edit section:\
      \ ...from another map file\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Some authors distribute their scripts already embedded\
      \ in <a href=\"/Legacy:Map_File\" title=\"Legacy:Map File\">Map Files</a>. To\
      \ use them (the \"with permission\" clause above applies, of course), do the\
      \ following:</p>\n<ol>\n<li>Restart UnrealEd. (Always a good idea before working\
      \ with <a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\">MyLevel</a>.)</li>\n\
      <li>Open the map file that contains the code you want to import.</li>\n<li>Without\
      \ closing UnrealEd, open your own map file you want to import the code into.</li>\n\
      </ol>\n<p>UnrealEd doesn't remove the code classes from the first map file you\
      \ opened when you open the second one; if you use any of those classes in your\
      \ own map, they will automatically be saved along with your map.</p>\n<dl>\n\
      <dd><b>Tip:</b> If you're planning to distribute your <i>own</i> code via the\
      \ second method (which is handy because it <i>forces</i> mappers to embed the\
      \ code into their maps rather than bundling an .u file), be sure that you <b>only\
      \ place code</b> in your distribution map's MyLevel. UnrealEd is prone to crashing\
      \ if there are, for instance, <a href=\"/Legacy:Texture\" title=\"Legacy:Texture\"\
      >Textures</a> left from a previously loaded map file in MyLevel when the user\
      \ loads his/her own map after yours.</dd>\n</dl>\n<h2><span class=\"mw-headline\"\
      \ id=\"Updating_Code_in_MyLevel\">Updating Code in MyLevel</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Embedding_Code?section=5\"\
      \ title=\"Edit section: Updating Code in MyLevel\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Sometimes you might have to update the code of components\
      \ embedded in <a href=\"/Legacy:MyLevel\" title=\"Legacy:MyLevel\">MyLevel</a>.</p>\n\
      <ol>\n<li>Open the map the code is embedded in.</li>\n<li>In the <a href=\"\
      /Legacy:Actor_Browser\" title=\"Legacy:Actor Browser\" class=\"mw-redirect\"\
      >actor browser</a>, browse to the embedded actor class and double-click it.\
      \ A script editor window with the component's source code opens.</li>\n<li>Select\
      \ all of the old source code in the script editor window and delete it.</li>\n\
      <li>Copy all of the new source code <b>up to, but not including</b> the <code>defaultproperties</code>\
      \ section (if there is one).</li>\n<li>Paste the copied source code into the\
      \ script editor window (click into the empty window and press Ctrl+V).</li>\n\
      <li>Select <i>Tools</i> -&gt; <i>Compile Changed</i> from the script editor's\
      \ menu. After a brief processing delay, the script editor's status bar says\
      \ something along the lines of \"Success: Compiled xx line(s), xx statement(s).\"\
      \ (You might have to move the script editor window up a bit in order to see\
      \ its status bar.)</li>\n<li>Save your map.</li>\n</ol>\n<h2><span class=\"\
      mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Embedding_Code?section=6\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Writing_And_Using_An_Embedded_Mutator\"\
      \ title=\"Legacy:Writing And Using An Embedded Mutator\">Writing_And_Using_An_Embedded_Mutator</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Embedding_Code?section=7\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>SabbathCat:</b>\
      \ Models can be imported too!! I've not tried with anything more complex than\
      \ simple decorations, but you can definitely do it.&#160;:) So cool, no worries\
      \ about \"version mismatch\". I had a bunch of flagbase meshes I was always\
      \ including with my maps, but keeping track of which version was out with which\
      \ map can be difficult. What a great solution to package everything into the\
      \ map.&#160;:)</p>\n<p><b>Foxpaw:</b> Yes, you should be able to package anything\
      \ into a map including code, textures, sounds, models, static meshes, and prefabs.\
      \ Like it says above a map is just a package like any other. In theory you could\
      \ probrably even package multiple maps into a package, but you might need a\
      \ third party application to do that and I'm not sure how you would go about\
      \ loading the different maps.</p>\n<p><b>Wormbo:</b> Loading a map into a map?\
      \ Should be possible through <code>OBJ LOAD File=..\\Maps\\TheMap.ut2 Package=myLevel</code>,\
      \ but I doubt this works without crashing or rendering the existing map useless.</p>\n\
      <p><b>Mychaeel:</b> The map loading code probably either assumes that all objects\
      \ in a map file belong to the same map, or it always just loads all those objects\
      \ connected to the first LevelInfo object it finds in the map file. While it\
      \ should be possible to <i>store</i> two maps in the same Unreal package without\
      \ problems, I strongly suppose it's not actually possible to <i>use</i> those\
      \ packages without some native code changes.</p>\n<p><b>SabbathCat:</b> There's\
      \ a pitfall.. I recently embedded a bunch of mesh files and one music file,\
      \ all well and good, the map plays and runs without a glitch, but now when I\
      \ open it in the editor, I just get a blank screen.&#160;:(</p>\n<p>It may perhaps\
      \ be the music thing, The imported music didn't show up until I loaded another\
      \ music package, I could then the MyLevel.musicname track to apply in the level\
      \ properties.</p>\n<p>Is it best to do all your importing once the map is near\
      \ complete?</p>\n<p>ah well, on the up side of course you could consider this\
      \ an excellent way to safeguard maps from being re-built or plundered without\
      \ permission.&#160;:)</p>\n<p>Maybe I should try impoting the map into a new\
      \ map?</p>\n<p><b>inio:</b> blank viewports or one big white screen? if it's\
      \ the later, do viewports-&gt;configure-&gt;ok</p>\n<p><b>Wormbo:</b> Music\
      \ package? You're talking about UT, right? Blank screen problem in UEd is described\
      \ on <a href=\"/Legacy:UnrealEd_Viewport\" title=\"Legacy:UnrealEd Viewport\"\
      >UnrealEd viewport</a>.</p>\n<p><b>SabbathCat:</b> Er, no.&#160;:) A blank screen\
      \ as in a totally empty map. I stuck back all the .u files I'd removed from\
      \ the system directory and the .umx in the music directory post-import, and\
      \ it opened again.</p>\n<p><b>Ch3z:</b> This is very helpful. Answered my question.\
      \ A related topics section could help too. I now wonder how to call the mutator\
      \ I embedded into action. A link in the related topics secton to a page that\
      \ explained that would be perfect.</p>\n<p><b>Foxpaw:</b> I'm not sure if there's\
      \ a wiki page on it or not, but if you want to embed a mutator you will probrably\
      \ need to also make a custom actor to load the mutator. You can then embed the\
      \ actor and place one on your map. That actor can load the mutator in it's postbeginplay\
      \ function and then destroy itself once the mutator is loaded.</p>\n<p><b>Ch3z:</b>\
      \ Thx Fox. And I knew I had seen more on this somewhere. Finally came across\
      \ it again and addeed \"Related\" section.</p>\n<p><b>Jimbo:</b> I've imported\
      \ a vertex mesh into mylevel in UT2003 using the aforementioned procedure and\
      \ it works quite fine. Strangely however, the mesh is not visible over netplay\
      \ to the client who connects to me. I still see the mesh but he doesn't. If\
      \ he disconnects from me and runs his own server or just plays an instant action\
      \ match, the mesh is visible. Anyone have any ideas what might be causing this\
      \ problem?</p>\n<p><b>Kamek:</b> Can OGG files be embedded into maps?</p>\n\
      <p><b>Wormbo:</b> No. They are no package files themselves and UT200x doesn't\
      \ provide any option to import generic binary files into packages.</p>\n<p><b>Solace:</b>\
      \ I noticed, in my 2004 editor, if I want to import an existing .u to MyLevel,\
      \ I can type \"obj load file=whatever.u package=MyLevel\" twice in a row, and\
      \ I don't have to do the cutting/pasting/ect thing to make it work. Quite a\
      \ time saver, if it works for anyone else.</p>\n<p><b>MythOpus:</b> It states\
      \ on this page that you can't delete classes. Apparently though, classes in\
      \ MyLevel will remove themselves if they aren't in the map. Can someone confirm\
      \ this?</p>\n<p><b>SuperApe:</b> It sounds like you're referring to when an\
      \ embedded object is resident in one map, then on load of another, it \"is removed\"\
      . If the question is, \"Does the embedded object remain after the next map loads?\"\
      , my guess is no. But I haven't confirmed.</p>\n<p><b>Wormbo:</b> \"Can't delete\"\
      \ refers to the lack of an explicit delete feature, like there is for textures,\
      \ sounds or static meshes. The implicit deleting (or better: not saving) of\
      \ classes and other objects in the myLevel package is a feature of UnrealEd.\
      \ To get rid of unwanted embedded stuff you simply need to make sure it's no\
      \ longer referenced by the level, then save the level and restart UnrealEd.</p>\n\
      <p><b>MythOpus:</b> Well, its a great feature then. I afraid the 5 custom pressure\
      \ volume classes that I made and didn't work would be stuck in the map forever.</p>\n\
      \n<!-- \nNewPP limit report\nCPU time usage: 0.058 seconds\nReal time usage:\
      \ 0.082 seconds\nPreprocessor visited node count: 29/1000000\nPreprocessor generated\
      \ node count: 48/1000000\nPost‐expand include size: 28/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1106-0!*!0!!en!*!* and timestamp 20221117131358 and revision\
      \ id 2920\n -->\n"
  categories:
  - sortkey: "Embedding Code"
    name: "Legacy_Mapping"
  - sortkey: "Embedding Code"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Third-Party Components"
  - ns: 100
    exists: true
    name: "Legacy:Texture (UT)"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Main Menu"
  - ns: 100
    exists: true
    name: "Legacy:Create A Subclass"
  - ns: 100
    exists: true
    name: "Legacy:Console Bar"
  - ns: 100
    exists: true
    name: "Legacy:Writing And Using An Embedded Mutator"
  - ns: 100
    exists: false
    name: "Legacy:Log Window"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Viewport"
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  - ns: 100
    exists: true
    name: "Legacy:Texture"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Goblin"
  - ns: 100
    exists: true
    name: "Legacy:MyLevel"
  - ns: 100
    exists: true
    name: "Legacy:UnrealTournament.Ini"
  - ns: 100
    exists: true
    name: "Legacy:Actor Browser"
  - ns: 100
    exists: true
    name: "Legacy:Map File"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Creating Code in MyLevel"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 783
    anchor: "Creating_Code_in_MyLevel"
  - toclevel: 1
    level: "2"
    line: "Importing Code into MyLevel"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 1511
    anchor: "Importing_Code_into_MyLevel"
  - toclevel: 2
    level: "3"
    line: "...from a .u file"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 1544
    anchor: "...from_a_.u_file"
  - toclevel: 2
    level: "3"
    line: "...from another map file"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 4345
    anchor: "...from_another_map_file"
  - toclevel: 1
    level: "2"
    line: "Updating Code in MyLevel"
    number: "3"
    index: "5"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 5466
    anchor: "Updating_Code_in_MyLevel"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "6"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 6449
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "7"
    fromtitle: "Legacy:Embedding_Code"
    byteoffset: 6559
    anchor: "Discussion"
  displaytitle: "Legacy:Embedding Code"
  iwlinks: []
  wikitext:
    text: "Since [[Legacy:Map File|Map File]]s are simply Unreal packages, they can\
      \ contain all sorts of different resources in addition to geometry and [[Legacy:Texture\
      \ (UT)|Texture (UT)]]s.  That includes UnrealScript code.  Rather than including\
      \ a bunch of small .u files with your map distribution, embed their code into\
      \ your [[Legacy:Map File|Map File]]s.  Apart from being neater, that'll make\
      \ a much more professional appearance than a cluttered .zip file.\n\n'''Don't\
      \ embed code without permission.'''  (That's clear, but unfortunately not to\
      \ everyone.) Be sure that the code's author is content with having his/her code\
      \ embedded in maps. Besides, embedding code makes only sense for small code\
      \ packages, and if being able to do a centralized update of the code package\
      \ is not an issue.\n\n==Creating Code in MyLevel==\n\nYou can create new classes\
      \ in UnrealEd and store them directly into MyLevel. You might want to do this\
      \ if:\n\n* you're pasting in a complete script from one of the [[Legacy:Third-Party\
      \ Components|Third-Party Components]] or [[Legacy:Open Source|Open Source]]\
      \ pages\n* you're daring \n* you're desperate\n\nSee [[Legacy:Create A Subclass|Create\
      \ A Subclass]] for instructions.\n\nThe usual pitfalls of creating code in UnrealEd\
      \ apply: Can't delete classes, can't rename classes, can't change a superclass,\
      \ UnrealEd crashes when you change the property declarations of a class that\
      \ is used in the map. If you're simply pasting a script (a custom one from this\
      \ site for example), that's not a problem though.\n\n==Importing Code into MyLevel==\n\
      \n===...from a .u file===\n\nIf you have a pre-existing .u file that you want\
      \ to import in MyLevel, do it as follows:\n\n# Make sure that you're not already\
      \ using that .u file externally in your map; in other words, make the .u file\
      \ import the first step of using the actors defined in that .u file.  <i>If</i>\
      \ you already have added actors from that .u file in your map, cut them into\
      \ the clipboard, save your map, and close UnrealEd.\n\n# Make sure that the\
      \ .u package you're about to import isn't automatically loaded when UnrealEd\
      \ starts.  Check the <tt>EditPackages</tt> lines in [[Legacy:UnrealTournament.Ini|UnrealTournament.ini]]\
      \ and delete any line pointing to that .u package if necessary (then restart\
      \ UnrealEd). Also, place the .u file you would like to import into the \\UnrealTournament\\\
      System directory.\n\n# \nDo [[Legacy:UnrealEd Main Menu|UnrealEd Main Menu]]\
      \ -> View -> Log to open the [[Legacy:Log Window|log window]] or click the button\
      \ on the [[Legacy:Console Bar|Console Bar]].  At the prompt, enter:\n obj load\
      \ file=whatever.u package=MyLevel\n\n(substitute \"whatever\" by the name of\
      \ the package you want to import, of course).  If everything works out, you'll\
      \ see some log entries along the lines of \"New file, existing package.\"  If\
      \ you made a typo in the file name, UnrealEd crashes (courtesy of the [[Legacy:UnrealEd\
      \ Goblin|UnrealEd Goblin]]).\n\n\n# If you previously had cut/removed existing\
      \ actors from that package from your map, paste/re-add them.\n\n# Do a '''full\
      \ rebuild,''' then save.\n\n'''Notes:'''  After importing a package in this\
      \ way, the [[Legacy:Actor Browser|actor browser]] in UnrealEd 2 will not show\
      \ any imported actors that are direct descendants of actor (and possibly some\
      \ others deeper in the tree too) unless you first deselect then reselect the\
      \ ''Show Actor Classes Only'' checkbox to force a reload of the tree.\n\nTo\
      \ get imported music to show up in the music browser, click the docked/undocked\
      \ button and your imported music file will show up.\n\nOnly actors that are\
      \ referenced in the map and their parent classes get saved in [[Legacy:MyLevel|MyLevel]]\
      \ with the map so if you have actors that only get spawned in runtime and are\
      \ in the package you just imported you need to add an example in your map somewhere\
      \ out of sight so they get stored in MyLevel and can be spawned properly in\
      \ game. This would apply to projectiles in custom weapon types etc. \n\nBe sure\
      \ to test your new map on a virgin install of Unreal Tournament that has none\
      \ of the packages you've imported classes from in it. Otherwise it's dead easy\
      \ for a reference to something that isn't sucessfully stored in MyLevel to get\
      \ missed and what you thought would be a triumphant release of your latest project\
      \ gets off to a bad start when your map crashes the game on load thanks to missing\
      \ resources...\n\n===...from another map file===\n\nSome authors distribute\
      \ their scripts already embedded in [[Legacy:Map File|Map File]]s.  To use them\
      \ (the \"with permission\" clause above applies, of course), do the following:\n\
      \n# Restart UnrealEd.  (Always a good idea before working with [[Legacy:MyLevel|MyLevel]].)\n\
      # Open the map file that contains the code you want to import.\n# Without closing\
      \ UnrealEd, open your own map file you want to import the code into.\n\nUnrealEd\
      \ doesn't remove the code classes from the first map file you opened when you\
      \ open the second one; if you use any of those classes in your own map, they\
      \ will automatically be saved along with your map.\n\n:'''Tip:'''  If you're\
      \ planning to distribute your ''own'' code via the second method (which is handy\
      \ because it ''forces'' mappers to embed the code into their maps rather than\
      \ bundling an .u file), be sure that you '''only place code''' in your distribution\
      \ map's MyLevel.  UnrealEd is prone to crashing if there are, for instance,\
      \ [[Legacy:Texture|Texture]]s left from a previously loaded map file in MyLevel\
      \ when the user loads his/her own map after yours.\n\n==Updating Code in MyLevel==\n\
      \nSometimes you might have to update the code of components embedded in [[Legacy:MyLevel|MyLevel]].\n\
      \n# Open the map the code is embedded in.\n# In the [[Legacy:Actor Browser|actor\
      \ browser]], browse to the embedded actor class and double-click it.  A script\
      \ editor window with the component's source code opens.\n# Select all of the\
      \ old source code in the script editor window and delete it.\n# Copy all of\
      \ the new source code '''up to, but not including''' the <code>defaultproperties</code>\
      \ section (if there is one).\n# Paste the copied source code into the script\
      \ editor window (click into the empty window and press Ctrl+V).\n# Select ''Tools''\
      \ -> ''Compile Changed'' from the script editor's menu.  After a brief processing\
      \ delay, the script editor's status bar says something along the lines of \"\
      Success: Compiled xx line(s), xx statement(s).\"  (You might have to move the\
      \ script editor window up a bit in order to see its status bar.)\n# Save your\
      \ map.\n\n==Related Topics ==\n* [[Legacy:Writing_And_Using_An_Embedded_Mutator|Writing_And_Using_An_Embedded_Mutator]]\n\
      \n==Discussion==\n\n'''SabbathCat:''' Models can be imported too!!  I've not\
      \ tried with anything more complex than simple decorations, but you can definitely\
      \ do it. :) So cool, no worries about \"version mismatch\". I had a bunch of\
      \ flagbase meshes I was always including with my maps, but keeping track of\
      \ which version was out with which map can be difficult. What a great solution\
      \ to package everything into the map. :)\n\n'''Foxpaw:''' Yes, you should be\
      \ able to package anything into a map including code, textures, sounds, models,\
      \ static meshes, and prefabs. Like it says above a map is just a package like\
      \ any other. In theory you could probrably even package multiple maps into a\
      \ package, but you might need a third party application to do that and I'm not\
      \ sure how you would go about loading the different maps.\n\n'''Wormbo:''' Loading\
      \ a map into a map? Should be possible through <code>OBJ LOAD File=..\\Maps\\\
      TheMap.ut2 Package=myLevel</code>, but I doubt this works without crashing or\
      \ rendering the existing map useless.\n\n'''Mychaeel:''' The map loading code\
      \ probably either assumes that all objects in a map file belong to the same\
      \ map, or it always just loads all those objects connected to the first LevelInfo\
      \ object it finds in the map file.  While it should be possible to ''store''\
      \ two maps in the same Unreal package without problems, I strongly suppose it's\
      \ not actually possible to ''use'' those packages without some native code changes.\n\
      \n'''SabbathCat:''' There's a pitfall.. I recently embedded a bunch of mesh\
      \ files and one music file, all well and good, the map plays and runs without\
      \ a glitch, but now  when I open it in the editor, I just get a blank screen.\
      \ :(\n\nIt may perhaps be the music thing, The imported music didn't show up\
      \ until I loaded another music package, I could then the MyLevel.musicname track\
      \ to apply in the level properties.\n\nIs it best to do all your importing once\
      \ the map is near complete?\n\nah well, on the up side of course you could consider\
      \ this an excellent way to safeguard maps from being re-built or plundered without\
      \ permission. :)\n\nMaybe I should try impoting the map into a new map?\n\n\
      '''inio:''' blank viewports or one big white screen?  if it's the later, do\
      \ viewports->configure->ok\n\n'''Wormbo:''' Music package? You're talking about\
      \ UT, right? Blank screen problem in UEd is described on [[Legacy:UnrealEd Viewport|UnrealEd\
      \ viewport]].\n\n'''SabbathCat:''' Er, no. :) A blank screen as in a totally\
      \ empty map. I stuck back all the .u files I'd removed from the system directory\
      \ and the .umx in the music directory post-import, and it opened again.\n\n\
      '''Ch3z:''' This is very helpful. Answered my question. A related topics section\
      \ could help too. I now wonder how to call the mutator I embedded into action.\
      \ A link in the related topics secton to a page that explained that would be\
      \ perfect.\n\n'''Foxpaw:''' I'm not sure if there's a wiki page on it or not,\
      \ but if you want to embed a mutator you will probrably need to also make a\
      \ custom actor to load the mutator. You can then embed the actor and place one\
      \ on your map. That actor can load the mutator in it's postbeginplay function\
      \ and then destroy itself once the mutator is loaded.\n\n'''Ch3z:''' Thx Fox.\
      \ And I knew I had seen more on this somewhere. Finally came across it again\
      \ and addeed \"Related\" section.\n\n'''Jimbo:''' I've imported a vertex mesh\
      \ into mylevel in UT2003 using the aforementioned procedure and it works quite\
      \ fine. Strangely however, the mesh is not visible over netplay to the client\
      \ who connects to me. I still see the mesh but he doesn't. If he disconnects\
      \ from me and runs his own server or just plays an instant action match, the\
      \ mesh is visible. Anyone have any ideas what might be causing this problem?\n\
      \n'''Kamek:''' Can OGG files be embedded into maps?\n\n'''Wormbo:''' No. They\
      \ are no package files themselves and UT200x doesn't provide any option to import\
      \ generic binary files into packages.\n\n'''Solace:''' I noticed, in my 2004\
      \ editor, if I want to import an existing .u to MyLevel, I can type \"obj load\
      \ file=whatever.u package=MyLevel\" twice in a row, and I don't have to do the\
      \ cutting/pasting/ect thing to make it work. Quite a time saver, if it works\
      \ for anyone else.\n\n'''MythOpus:''' It states on this page that you can't\
      \ delete classes.  Apparently though, classes in MyLevel will remove themselves\
      \ if they aren't in the map.  Can someone confirm this?\n\n'''SuperApe:''' It\
      \ sounds like you're referring to when an embedded object is resident in one\
      \ map, then on load of another, it \"is removed\".  If the question is, \"Does\
      \ the embedded object remain after the next map loads?\", my guess is no.  But\
      \ I haven't confirmed.\n\n'''Wormbo:''' \"Can't delete\" refers to the lack\
      \ of an explicit delete feature, like there is for textures, sounds or static\
      \ meshes. The implicit deleting (or better: not saving) of classes and other\
      \ objects in the myLevel package is a feature of UnrealEd. To get rid of unwanted\
      \ embedded stuff you simply need to make sure it's no longer referenced by the\
      \ level, then save the level and restart UnrealEd.\n\n'''MythOpus:''' Well,\
      \ its a great feature then.  I afraid the 5 custom pressure volume classes that\
      \ I made and didn't work would be stuck in the map forever.\n\n[[Category:Legacy\
      \ Mapping|{{PAGENAME}}]]\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 2920
name: "Legacy:Embedding Code"
revision:
  revid: 2920
  parentid: 2921
  user: "71-17-22-38.regn.hsdb.sasknet.sk.ca"
  timestamp: 1190330803.000000000
  comment: "*"
timestamp: 1668762577.306789000
