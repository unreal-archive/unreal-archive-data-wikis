---
parse:
  title: "Legacy:An AI Concept"
  text:
    text: "<p><i><b>Disclaimer:</b></i> This page represents an idea for a proposed\
      \ way of coding some particular functionality / behavior in UnrealScript. It\
      \ does not represent the way that <a href=\"/Legacy:UT\" title=\"Legacy:UT\"\
      \ class=\"mw-redirect\">UT</a> / <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\"\
      \ class=\"mw-redirect\">UT2003</a> / <a href=\"/Legacy:UT2004\" title=\"Legacy:UT2004\"\
      \ class=\"mw-redirect\">UT2004</a> actually do things in the normal game engine.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#The_New_Pattern\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">The New Pattern</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#What_does_it_do.3F\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">What does it do?</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"#Is_It_For_Me\"><span\
      \ class=\"tocnumber\">2.1.1</span> <span class=\"toctext\">Is It For Me</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"\
      #The_Concept_Extended_.28More_Advanced.29\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">The Concept Extended (More Advanced)</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Semi-Abstract_Classes\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Semi-Abstract\
      \ Classes</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"\
      #Sub-whatta.3F\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\"\
      >Sub-whatta?</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"\
      #Polymorphism\"><span class=\"tocnumber\">3.3</span> <span class=\"toctext\"\
      >Polymorphism</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-9\"\
      ><a href=\"#Conclusion\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Conclusion</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"\
      #Related_Topics\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Introduction\"\
      >Introduction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:An_AI_Concept?section=1\" title=\"Edit section:\
      \ Introduction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I'm going to generalize for a minute briefly and explain that in a game \"\
      world,\" any and every object has a behaviour. Even if it's as simple as a cup\
      \ or as complex as monster. Each behaviour can be more eaisily comprehended\
      \ if split up into two categories:</p>\n<ol>\n<li>General Behaviour</li>\n<li>Specific\
      \ Behaviour</li>\n</ol>\n<p>General Behaviours are behaviours that all objects\
      \ of a certain type know. With Unreal, most monsters general behaviour is located\
      \ in their parent class. For example the Skaarj:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> Skaarj <span class=\"kw1\"\
      >extends</span> ScriptedPawn;\n \n<span class=\"co1\">//some behavioural code</span></pre></div>\n\
      </div>\n<p>ScriptedPawn is the Skaarj's parent class, and defines general behaviour\
      \ for all instances of itself. And down the heirarchy:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> SkaarjWarrior <span class=\"\
      kw1\">extends</span> Skaarj;\n \n<span class=\"co1\">//some behavioural code</span></pre></div>\n\
      </div>\n<p>Where Skaarj is the parent class and contains general behaviour code\
      \ for all instances of itself. SkaarjWarrior now has the behaviour defined in\
      \ Skaarj, general, and it's own behaviour for doing more \"specific to it\"\
      \ things, specific. This concept is old and for new coders, is called inheritance.\
      \ (If your one of those newer coders, I'd suggest reading a tutorial on Object\
      \ Oriented Programming before you continue).</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"The_New_Pattern\">The New Pattern</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:An_AI_Concept?section=2\"\
      \ title=\"Edit section: The New Pattern\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Before I actually show how to implement the new patten,\
      \ I'd like to explain what it does, and if you should use it.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"What_does_it_do.3F\">What does it do?</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:An_AI_Concept?section=3\" title=\"Edit section: What does\
      \ it do?\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>I can best show you what it does by using an example. Most of it is pseudo\
      \ code, but it gets the point across&#160;;).</p>\n<p>Basically, the pattern\
      \ creates a class structure for creating GENERAL TYPES of monsters with specific\
      \ behaviours. It allows you to make one class for every general type of monster,\
      \ one behaviour for every general type of behaviour, and allow both to be used\
      \ in eachother.This requires two new classes, class Behaviour, and class Creature:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> Behaviour\
      \ <span class=\"kw1\">extends</span> ScriptedPawn;\n \n<span class=\"co1\">//an\
      \ instance of every sub-class of behaviour will need to be here(eventually)</span></pre></div>\n\
      </div>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"\
      uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span>\
      \ Creature <span class=\"kw1\">extends</span> ScriptedPawn;\n \n<span class=\"\
      co1\">//Every variable that a subclass of Creature needs will go here(eventually)</span></pre></div>\n\
      </div>\n<p>Note that I say 'general' several times in that paragraph. The classes\
      \ NEED to be general. Example: Say I wanted to create a new brute that can crouch\
      \ and hide behind boxes, shoot missles and machine guns, and talk to the player.\
      \ To do this, I could create a general 'Creature' class called newBrute and\
      \ a general 'Behaviour' classes called Hiding:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> newBrute <span class=\"\
      kw1\">extends</span> Creature;</pre></div>\n</div>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">class</span> Hiding <span class=\"kw1\"\
      >extends</span> Behaviour;</pre></div>\n</div>\n<p>Notice that it isin't 'HidngBehindBoxes',\
      \ or 'BruteWarrior' extending Brute. They are both general names and both general\
      \ classes. newBrute will define more specific functions for instances of itself\
      \ and Hiding will define functions for hiding. All sub-classes of Behaviour\
      \ are abstract, or only contain functions that make up an interface. Let us\
      \ map out what needs to be in each class:</p>\n<ul>\n<li>newBrute\n<ul>\n<li>UseMachineGun()</li>\n\
      <li>UseMissileLauncher()</li>\n<li>CheckWeaponStates()</li>\n<li>CheckHealthState()</li>\n\
      <li>SeePlayer()</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Hiding\n<ul>\n<li>CheckForBox()</li>\n\
      <li>CheckForShadows()</li>\n<li>HideBehindNearestBox()</li>\n<li>HideBehindNearestShadow()</li>\n\
      </ul>\n</li>\n</ul>\n<p>(By no means are these complete, they are just for the\
      \ sake of the example)</p>\n<p>A redefinition of Creature:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">// same class as before just added\
      \ on to</span>\n \n<span class=\"kw1\">class</span> Creature <span class=\"\
      kw1\">extends</span> ScriptedPawn;\n \n<span class=\"kw1\">var</span> Behaviour\
      \ _behaviour;</pre></div>\n</div>\n<p>Now that we have mapped out what will\
      \ be needed for the newBrute and Hiding, we will continue to define states:</p>\n\
      <ul>\n<li>newBrute\n<ul>\n<li>TalkingToPlayer</li>\n<li>Firing</li>\n<li>Idling</li>\n\
      <li>Hiding</li>\n</ul>\n</li>\n</ul>\n<dl>\n<dt>TalkingToPlayer&#160;</dt>\n\
      <dd>A state for calling functions that send logs to players.</dd>\n<dt>Firing&#160;</dt>\n\
      <dd>A state that calls firing functions and plays animations.</dd>\n<dt>Idling&#160;</dt>\n\
      <dd>A state that checks ammo and checks which weapons can be used.</dd>\n<dt>HidingBehindBox&#160;</dt>\n\
      <dd>A state for using the _behaviour instance for calling the 'Hiding' interface.</dd>\n\
      </dl>\n<p>No states will be needed for Hiding, for it is abstract.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//The same class\
      \ as above, just added on to</span>\n \n<span class=\"kw1\">class</span> newBrute\
      \ <span class=\"kw1\">extends</span> Creature;\n \n<span class=\"co1\">//---------------------------------------------------</span>\n\
      <span class=\"co1\">// Functions</span>\n<span class=\"co1\">//---------------------------------------------------</span>\n\
      \ \n<span class=\"kw1\">function</span> UseMachineGun<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> UseMissileLauncher<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> CheckWeaponStates<span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CheckHealthState<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> SeePlayer<span class=\"br0\">(</span><span class=\"kw9\"\
      >actor</span> SeenPlayer<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co1\">//-------------------------------------------------------------</span>\n\
      <span class=\"co1\">// States</span>\n<span class=\"co1\">//-------------------------------------------------------------</span>\n\
      \ \n<span class=\"kw1\">state</span> TalkingToPlayer <span class=\"br0\">{</span>\n\
      <span class=\"kw2\">Begin</span>:\n<span class=\"co1\">//code</span>\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Firing <span class=\"\
      br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Idling <span\
      \ class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n<span class=\"\
      co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span>\
      \ Hiding <span class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n<span\
      \ class=\"co1\">//code</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// same class as\
      \ above, just added on to</span>\n \n<span class=\"kw1\">class</span> Hiding\
      \ <span class=\"kw1\">extends</span> Behaviour;\n \n<span class=\"co1\">//------------------------------------</span>\n\
      <span class=\"co1\">// Functions</span>\n<span class=\"co1\">//------------------------------------</span>\n\
      \ \n<span class=\"kw1\">function</span> CheckForBoxes<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CheckForShadows<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> HideBehindNearestBox<span class=\"br0\">(</span>Creature\
      \ _creature<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span\
      \ class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> HideBehindNearestShadow<span class=\"br0\">(</span>Creature\
      \ _creature<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span\
      \ class=\"co1\">//code</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Now the Behaviour class can be modified:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">//same class as above, just added on to</span>\n \n\
      <span class=\"kw1\">class</span> Behaviour <span class=\"kw1\">extends</span>\
      \ ScriptedPawn;\n \n<span class=\"kw1\">var</span> Hiding  _hiding;  <span class=\"\
      co1\">// an instance of the Hiding class</span></pre></div>\n</div>\n<p>Now\
      \ the _behaviour instance can be used in newBrute to access 'Hiding' interface.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> newBrute\
      \ <span class=\"kw1\">extends</span> Creature;\n \n<span class=\"kw1\">var</span>\
      \ <span class=\"kw9\">actor</span> <span class=\"kw8\">player</span>;\n \n<span\
      \ class=\"co1\">//---------------------------------------------------</span>\n\
      <span class=\"co1\">// Functions</span>\n<span class=\"co1\">//---------------------------------------------------</span>\n\
      \ \n<span class=\"kw1\">function</span> UseMachineGun<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> UseMissileLauncher<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> CheckWeaponStates<span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> CheckHealthState<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      <span class=\"kw2\">if</span><span class=\"br0\">(</span><span class=\"kw6\"\
      >self</span>.<span class=\"me0\">health</span> <span class=\"sy0\">&lt;=</span>\
      \ <span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"br0\"\
      >{</span> <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Hiding'</span><span class=\"br0\">)</span>; <span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span>\
      \ SeePlayer<span class=\"br0\">(</span><span class=\"kw9\">actor</span> Seenplayer<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\nSeenPlayer <span class=\"\
      sy0\">=</span> <span class=\"kw8\">player</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">//-------------------------------------------------------------</span>\n\
      <span class=\"co1\">// States</span>\n<span class=\"co1\">//-------------------------------------------------------------</span>\n\
      \ \n<span class=\"kw1\">state</span> TalkingToPlayer <span class=\"br0\">{</span>\n\
      <span class=\"kw2\">Begin</span>:\n<span class=\"co1\">//code</span>\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Firing <span class=\"\
      br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n<span class=\"co1\">//code</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Idling <span\
      \ class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n<span class=\"\
      co1\">//code</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span>\
      \ Hiding <span class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\nbehaviour._hiding.<span\
      \ class=\"me0\">HideBehindBox</span><span class=\"br0\">(</span><span class=\"\
      kw6\">self</span><span class=\"br0\">)</span>;\nCheckHealthState<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h4><span class=\"mw-headline\" id=\"Is_It_For_Me\">Is It For Me</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:An_AI_Concept?section=4\" title=\"Edit section: Is It\
      \ For Me\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>Well, thats not really an easy question to awnser. But here are somethings\
      \ to check over. If you can awnser yes to these questions I would try the concept,\
      \ just to see what can be gotten out of it, explore it.</p>\n<ol>\n<li>Am I\
      \ making a mod where I want to include my own models and meshes?</li>\n<li>Is\
      \ my mod large enough to be doing all this work for just a few monsters?</li>\n\
      <li>Am I going to be adding a lot of new features with AI?</li>\n<li>Will I\
      \ be making new weapons and items in my mod?</li>\n<li>If my mod is multiplayer,\
      \ is this system appropriate?</li>\n</ol>\n<h2><span class=\"mw-headline\" id=\"\
      The_Concept_Extended_.28More_Advanced.29\">The Concept Extended (More Advanced)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:An_AI_Concept?section=5\" title=\"Edit section: The Concept\
      \ Extended (More Advanced)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Semi-Abstract_Classes\"\
      >Semi-Abstract Classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:An_AI_Concept?section=6\" title=\"Edit section:\
      \ Semi-Abstract Classes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>I like to call Creature and Behaviour 'semi-abstract classes' because they\
      \ aren't really abstract, they contain variables and functions just like any\
      \ other class. They become semi-abstract because they are basically interfaces\
      \ for accessing multiple interfaces.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Sub-whatta.3F\">Sub-whatta?</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:An_AI_Concept?section=7\"\
      \ title=\"Edit section: Sub-whatta?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>I like to define these terms in this way:</p>\n<dl>\n\
      <dt>Sub-Behavioural classes&#160;</dt>\n<dd>Any class that inherits 'Behaviour'\
      \ a sub-behavioural class.</dd>\n<dt>Sub-Creature classes&#160;</dt>\n<dd>Any\
      \ class that inherits 'Creature' a sub-creature class.</dd>\n</dl>\n<h3><span\
      \ class=\"mw-headline\" id=\"Polymorphism\">Polymorphism</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:An_AI_Concept?section=8\"\
      \ title=\"Edit section: Polymorphism\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Many elements of the pattern will be polymorphic.\
      \ Hence the terms semisub-polymorphic, sub-polymorphic, and semi-abstract polymorphic.\
      \ A behavioural trigger which can be called by the creature could use polymorphism\
      \ by having the creature call the trigger placed somewhere in some map, and\
      \ having it call some interface to change that creatures behaviour, all at runtime.\
      \ More on this will be added later.</p>\n<h2><span class=\"mw-headline\" id=\"\
      Conclusion\">Conclusion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:An_AI_Concept?section=9\"\
      \ title=\"Edit section: Conclusion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The pattern can be used on anything, not just AI,\
      \ just with a little change insystem. Weapons, items, etc. all have behaviours...\
      \ One could write general classes for every type of item or weapon or whatever\
      \ and provide interfaces through behaviour and '_Item' instead of Creature,\
      \ or _Weapon. Remember, it's just a concept, a theory, don't live by it... Much\
      \ is untested. Take it and expand it... find ways to make it better.</p>\n<p><a\
      \ href=\"/Legacy:C0ry\" title=\"Legacy:C0ry\">C0ry</a></p>\n<p>Cory Vogel 2002</p>\n\
      <p>fusion815@cox.net</p>\n<p>Questions?</p>\n<p>email me&#160;:)</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:An_AI_Concept?section=10\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Artificial_Intelligence\"\
      \ title=\"Legacy:Artificial Intelligence\">Artificial Intelligence</a> – Super\
      \ Topic for all AI (custom or stock)\n<ul>\n<li><a href=\"/Legacy:Introduction_To_Game_AI\"\
      \ title=\"Legacy:Introduction To Game AI\">Introduction to Game AI</a></li>\n\
      <li><a href=\"/Legacy:First_Person_Shooter_AI_Architecture\" title=\"Legacy:First\
      \ Person Shooter AI Architecture\">First Person Shooter AI Architecture</a></li>\n\
      </ul>\n</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:An_AI_Concept?section=11\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Foogod:</b>\
      \ I added the disclaimer at the top, because the way these pages are linked\
      \ from <a href=\"/Legacy:Artificial_Intelligence\" title=\"Legacy:Artificial\
      \ Intelligence\">Artificial Intelligence</a> could confuse some people into\
      \ thinking this is an explanation of the way that the UT-based games actually\
      \ do things.</p>\n<p><b>Ghost3021:</b>fixed a typo, \"just a some monsters?\
      \ is now \"for just a few monsters?\".&#160;;)</p>\n<p><b>SuperApe:</b> I hope\
      \ Cory doesn't mind; I took out a lot of unecessary spacing in the code and\
      \ text of this page.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.215\
      \ seconds\nReal time usage: 0.219 seconds\nPreprocessor visited node count:\
      \ 143/1000000\nPreprocessor generated node count: 276/1000000\nPost‐expand include\
      \ size: 13/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:374-0!*!0!!en!*!*\
      \ and timestamp 20221118015159 and revision id 1270\n -->\n"
  categories:
  - sortkey: "An AI Concept"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:C0ry"
  - ns: 100
    exists: true
    name: "Legacy:Introduction To Game AI"
  - ns: 100
    exists: true
    name: "Legacy:First Person Shooter AI Architecture"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:UT2004"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Introduction"
    number: "1"
    index: "1"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 292
    anchor: "Introduction"
  - toclevel: 1
    level: "2"
    line: "The New Pattern"
    number: "2"
    index: "2"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 1508
    anchor: "The_New_Pattern"
  - toclevel: 2
    level: "3"
    line: "What does it do?"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 1647
    anchor: "What_does_it_do.3F"
  - toclevel: 3
    level: "4"
    line: "Is It For Me"
    number: "2.1.1"
    index: "4"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 6415
    anchor: "Is_It_For_Me"
  - toclevel: 1
    level: "2"
    line: "The Concept Extended (More Advanced)"
    number: "3"
    index: "5"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 6963
    anchor: "The_Concept_Extended_.28More_Advanced.29"
  - toclevel: 2
    level: "3"
    line: "Semi-Abstract Classes"
    number: "3.1"
    index: "6"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 7006
    anchor: "Semi-Abstract_Classes"
  - toclevel: 2
    level: "3"
    line: "Sub-whatta?"
    number: "3.2"
    index: "7"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 7300
    anchor: "Sub-whatta.3F"
  - toclevel: 2
    level: "3"
    line: "Polymorphism"
    number: "3.3"
    index: "8"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 7535
    anchor: "Polymorphism"
  - toclevel: 1
    level: "2"
    line: "Conclusion"
    number: "4"
    index: "9"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 7964
    anchor: "Conclusion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "10"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 8497
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "6"
    index: "11"
    fromtitle: "Legacy:An_AI_Concept"
    byteoffset: 8777
    anchor: "Discussion"
  displaytitle: "Legacy:An AI Concept"
  iwlinks: []
  wikitext:
    text: "'''''Disclaimer:''''' This page represents an idea for a proposed way of\
      \ coding some particular functionality / behavior in UnrealScript.  It does\
      \ not represent the way that [[Legacy:UT|UT]] / [[Legacy:UT2003|UT2003]] / [[Legacy:UT2004|UT2004]]\
      \ actually do things in the normal game engine.\n\n==Introduction==\n\nI'm going\
      \ to generalize for a minute briefly and explain that in a game \"world,\" any\
      \ and every object has a behaviour.  Even if it's as simple as a cup or as complex\
      \ as monster.  Each behaviour can be more eaisily comprehended if split up into\
      \ two categories:\n\n# General  Behaviour\n# Specific Behaviour\n\nGeneral Behaviours\
      \ are behaviours that all objects of a certain type know.  With Unreal, most\
      \ monsters general behaviour is located in their parent class.  For example\
      \ the Skaarj:\n\n<uscript>\nclass Skaarj extends ScriptedPawn;\n\n//some behavioural\
      \ code\n</uscript>\n\nScriptedPawn is the Skaarj's parent class, and defines\
      \ general behaviour for all instances of itself. And down the heirarchy:\n\n\
      <uscript>\nclass SkaarjWarrior extends Skaarj;\n\n//some behavioural code\n\
      </uscript>\n\nWhere Skaarj is the parent class and contains general behaviour\
      \ code for all instances of itself. SkaarjWarrior now has the behaviour defined\
      \ in Skaarj, general, and it's own behaviour for doing more \"specific to it\"\
      \ things, specific.  This concept is old and for new coders, is called inheritance.\
      \  (If your one of those newer coders, I'd suggest reading a tutorial on Object\
      \ Oriented Programming before you continue).\n\n==The New Pattern ==\n\nBefore\
      \ I actually show how to implement the new patten, I'd like to explain what\
      \ it does, and if you should use it.\n\n===What does it do? ===\n\nI can best\
      \ show you what it does by using an example.  Most of it is pseudo code, but\
      \ it gets the point across ;).\n\nBasically, the pattern creates a class structure\
      \ for creating GENERAL TYPES of monsters with specific behaviours. It allows\
      \ you to make one class for every general type of monster, one behaviour for\
      \ every general type of behaviour, and allow both to be used in eachother.This\
      \ requires two new classes, class Behaviour, and class Creature: \n\n<uscript>\n\
      class Behaviour extends ScriptedPawn;\n\n//an instance of every sub-class of\
      \ behaviour will need to be here(eventually)\n</uscript>\n\n<uscript>\nclass\
      \ Creature extends ScriptedPawn;\n\n//Every variable that a subclass of Creature\
      \ needs will go here(eventually)\n</uscript>\n\nNote that I say 'general' several\
      \ times in that paragraph.  The classes NEED to be general. Example: Say I wanted\
      \ to create a new brute that can crouch and hide behind boxes, shoot missles\
      \ and machine guns, and talk to the player.  To do this, I could create a general\
      \ 'Creature' class called newBrute and a general 'Behaviour' classes called\
      \ Hiding:\n\n<uscript>\nclass newBrute extends Creature;\n</uscript>\n\n<uscript>\n\
      class Hiding extends Behaviour;\n</uscript>\n\nNotice that it isin't 'HidngBehindBoxes',\
      \ or 'BruteWarrior' extending Brute.  They are both general names and both general\
      \ classes.  newBrute will define more specific functions for instances of itself\
      \ and Hiding will define functions for hiding.  All sub-classes of Behaviour\
      \ are abstract, or only contain functions that make up an interface. Let us\
      \ map out what needs to be in each class:\n\n*newBrute\n**UseMachineGun()\n\
      **UseMissileLauncher()\n**CheckWeaponStates()\n**CheckHealthState()\n**SeePlayer()\n\
      \n*Hiding\n**CheckForBox()\n**CheckForShadows()\n**HideBehindNearestBox()\n\
      **HideBehindNearestShadow()\n\n(By no means are these complete, they are just\
      \ for the sake of the example)\n\nA redefinition of Creature:\n\n<uscript>\n\
      // same class as before just added on to\n\nclass Creature extends ScriptedPawn;\n\
      \nvar Behaviour _behaviour;\n</uscript>\n\nNow that we have mapped out what\
      \ will be needed for the newBrute and Hiding, we will continue to define states:\n\
      \n*newBrute\n**TalkingToPlayer\n**Firing\n**Idling\n**Hiding\n\n; TalkingToPlayer\
      \ : A state for calling functions that send logs to players.\n; Firing : A state\
      \ that calls firing functions and plays animations.\n; Idling : A state that\
      \ checks ammo and checks which weapons can be used.\n; HidingBehindBox : A state\
      \ for using the _behaviour instance for calling the 'Hiding' interface.\n\n\
      No states will be needed for Hiding, for it is abstract.\n\n<uscript>\n//The\
      \ same class as above, just added on to\n\nclass newBrute extends Creature;\n\
      \n//---------------------------------------------------\n// Functions\n//---------------------------------------------------\n\
      \nfunction UseMachineGun() {\n//code\n}\n\nfunction UseMissileLauncher() {\n\
      //code\n}\n\nfunction CheckWeaponStates() {\n//code\n}\n\nfunction CheckHealthState()\
      \ {\n//code\n}\n\nfunction SeePlayer(actor SeenPlayer) {\n//code\n}\n\n//-------------------------------------------------------------\n\
      // States\n//-------------------------------------------------------------\n\
      \nstate TalkingToPlayer {\nBegin:\n//code\n}\n\nstate Firing {\nBegin:\n//code\n\
      }\n\nstate Idling {\nBegin:\n//code\n}\n\nstate Hiding {\nBegin:\n//code\n}\n\
      </uscript>\n\n<uscript>\n// same class as above, just added on to\n\nclass Hiding\
      \ extends Behaviour;\n\n//------------------------------------\n// Functions\n\
      //------------------------------------\n\nfunction CheckForBoxes() {\n//code\n\
      }\n\nfunction CheckForShadows() {\n//code\n}\n\nfunction HideBehindNearestBox(Creature\
      \ _creature) {\n//code\n}\n\nfunction HideBehindNearestShadow(Creature _creature)\
      \ {\n//code\n}\n</uscript>\n\nNow the Behaviour class can be modified:\n\n<uscript>\n\
      //same class as above, just added on to\n\nclass Behaviour extends ScriptedPawn;\n\
      \nvar Hiding  _hiding;  // an instance of the Hiding class\n</uscript>\n\nNow\
      \ the _behaviour instance can be used in newBrute to access 'Hiding' interface.\n\
      \n<uscript>\nclass newBrute extends Creature;\n\nvar actor player;\n\n//---------------------------------------------------\n\
      // Functions\n//---------------------------------------------------\n\nfunction\
      \ UseMachineGun() {\n//code\n}\n\nfunction UseMissileLauncher() {\n//code\n\
      }\n\nfunction CheckWeaponStates() {\n//code\n}\n\nfunction CheckHealthState()\
      \ {\nif(self.health <= 50) { GotoState('Hiding'); }\n}\n\nfunction SeePlayer(actor\
      \ Seenplayer) {\nSeenPlayer = player;\n}\n\n//-------------------------------------------------------------\n\
      // States\n//-------------------------------------------------------------\n\
      \nstate TalkingToPlayer {\nBegin:\n//code\n}\n\nstate Firing {\nBegin:\n//code\n\
      }\n\nstate Idling {\nBegin:\n//code\n}\n\nstate Hiding {\nBegin:\nbehaviour._hiding.HideBehindBox(self);\n\
      CheckHealthState();\n}\n\n</uscript>\n\n====Is It For Me====\n\nWell, thats\
      \ not really an easy question to awnser.  But here are somethings to check over.\
      \  If you can awnser yes to these questions I would try the concept, just to\
      \ see what can be gotten out of it, explore it.\n\n# Am I making a mod where\
      \ I want to include my own models and meshes?\n# Is my mod large enough to be\
      \ doing all this work for just a few monsters?\n# Am I going to be adding a\
      \ lot of new features with AI?\n# Will I be making new weapons and items in\
      \ my mod? \n# If my mod is multiplayer, is this system appropriate?\n\n==The\
      \ Concept Extended (More Advanced) ==\n\n===Semi-Abstract Classes===\n\nI like\
      \ to call Creature and Behaviour 'semi-abstract classes' because they aren't\
      \ really abstract, they contain variables and functions just like any other\
      \ class.  They become semi-abstract because they are basically interfaces for\
      \ accessing multiple interfaces. \n\n===Sub-whatta?===\n\nI like to define these\
      \ terms in this way:\n; Sub-Behavioural classes : Any class that inherits 'Behaviour'\
      \ a sub-behavioural class.  \n; Sub-Creature classes : Any class that inherits\
      \ 'Creature' a sub-creature class.\n\n===Polymorphism===\n\nMany elements of\
      \ the pattern will be polymorphic.  Hence the terms semisub-polymorphic, sub-polymorphic,\
      \ and semi-abstract polymorphic. A behavioural trigger which can be called by\
      \ the creature could use polymorphism by having the creature call the trigger\
      \ placed somewhere in some map, and having it call some interface to change\
      \ that creatures behaviour, all at runtime.  More on this will be added later.\n\
      \n==Conclusion==\n\nThe pattern can be used on anything, not just AI, just with\
      \ a little change insystem.  Weapons, items, etc. all have behaviours... One\
      \ could write general  classes for every type of item or weapon or whatever\
      \ and provide interfaces through behaviour and '_Item' instead of Creature,\
      \ or _Weapon.  Remember, it's just a concept, a theory,  don't live by it...\
      \ Much is untested.  Take it and expand it... find ways to make it better. \
      \ \n\n[[Legacy:C0ry|C0ry]]\n\nCory Vogel 2002\n\nfusion815@cox.net\n\nQuestions?\n\
      \nemail me :)\n\n==Related Topics==\n* [[Legacy:Artificial Intelligence|Artificial\
      \ Intelligence]] &ndash; Super Topic for all AI (custom or stock)\n** [[Legacy:Introduction\
      \ To Game AI|Introduction to Game AI]]\n** [[Legacy:First Person Shooter AI\
      \ Architecture|First Person Shooter AI Architecture]]\n\n==Discussion==\n\n\
      '''Foogod:''' I added the disclaimer at the top, because the way these pages\
      \ are linked from [[Legacy:Artificial Intelligence|Artificial Intelligence]]\
      \ could confuse some people into thinking this is an explanation of the way\
      \ that the UT-based games actually do things.\n\n'''Ghost3021:'''fixed a typo,\
      \ \"just a some monsters? is now \"for just a few monsters?\". ;) \n\n'''SuperApe:'''\
      \ I hope Cory doesn't mind; I took out a lot of unecessary spacing in the code\
      \ and text of this page.\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 1270
name: "Legacy:An AI Concept"
revision:
  revid: 1270
  parentid: 1272
  user: "71-17-22-38.regn.hsdb.sasknet.sk.ca"
  timestamp: 1180814720.000000000
  comment: "seems more like a tutorial or proposal of an idea than an actual custom\
    \ class"
timestamp: 1668766755.170522000
