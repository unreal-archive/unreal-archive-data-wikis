---
parse:
  title: "Legacy:Input Keys"
  text:
    text: "<p>So its time to create a class that requires the user to press a key?\
      \ You've come to the right place. I'll walk you through the steps here.</p>\n\
      <p>For <a href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\"\
      >UT2003</a> and newer, see <a href=\"/Legacy:Interaction\" title=\"Legacy:Interaction\"\
      >interaction</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Step_1:_Setting_up_the_Key_Binding\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">Step 1: Setting up the Key Binding</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Step_2:_Creating_the_mutator_to_process_your_key_input\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Step 2: Creating\
      \ the mutator to process your key input</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Step_3:_Creating_your_actor.21\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Step 3: Creating your actor!</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#My_Working_.28we_hope.29_Example.21\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">My Working (we hope)\
      \ Example!</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Step_1:_Setting_up_the_Key_Binding\">Step 1: Setting up the Key Binding</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Input_Keys?section=1\" title=\"Edit section: Step 1: Setting\
      \ up the Key Binding\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This is the easiest step. Start by creating a new class, something like ExtraWordBindings\
      \ (please replace Word with something descriptive, thanks!) and make it look\
      \ something like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Class</span> ExtraWordBindings <span class=\"kw1\">extends</span> UTExtraKeyBindings;\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \     SectionName<span class=\"sy0\">=</span><span class=\"st0\">\"YourSection\"\
      </span> <span class=\"co1\">// Enter a descriptive section name here</span>\n\
      \     LabelList<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"First\
      \ Binding Caption\"</span> <span class=\"co1\">// Something Descriptive, Please.</span>\n\
      \     LabelList<span class=\"br0\">(</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"Second\
      \ Binding Caption\"</span>\n     AliasNames<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"mutate Word\"</span> <span class=\"co1\">// Change Word to\
      \ something that describes the action this key will do</span>\n     AliasNames<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"mutate Word\"</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Compile the script and create an entry\
      \ in the [Public] section of your package's <a href=\"/edit/Legacy:Int_File?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Int File (page does not exist)\">int file</a>:</p>\n\
      <p>Object=(Name=MyPackage.MyKeyBindingsClass,Class=Class,MetaClass=UTMenu.UTExtraKeyBindings)</p>\n\
      <p>Now you should have a working option in the \"Controls\" option panel.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Step_2:_Creating_the_mutator_to_process_your_key_input\"\
      >Step 2: Creating the mutator to process your key input</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Input_Keys?section=2\"\
      \ title=\"Edit section: Step 2: Creating the mutator to process your key input\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Okay\
      \ now you can use one <a href=\"/Legacy:Mutator\" title=\"Legacy:Mutator\">mutator</a>\
      \ to parse all your key bindings, or one mutator for each binding. I like one\
      \ mutator for each binding, because these mutators should be automatically added\
      \ into the mutatorlist if the associated actor is present in the map. DO NOT\
      \ CREATE AN INT ENTRY FOR THESE MUTATORS!</p>\n<p>They should look something\
      \ like this. (Once again, PLEASE replace \"Word\" with something DESCRIPTIVE!)</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> WordKeyMut\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n\
      <span class=\"kw1\">function</span> AddMutator<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Mutator</span> M<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ M.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"\
      st0\">'WordKeyMut'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\
      \ <span class=\"co1\">// This mutator's name!</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw2\">return</span>; <span class=\"co1\">//only\
      \ allow one mutator</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"\
      kw6\">Super</span>.<span class=\"me0\">AddMutator</span><span class=\"br0\"\
      >(</span>M<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">function</span> Mutate<span class=\"br0\">(</span><span class=\"\
      kw5\">string</span> MutateString, PlayerPawn Sender<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span> YourClass Other;\
      \ <span class=\"co1\">// YourClass will be the name of the class that we</span>\n\
      \                               <span class=\"co1\">// will create in the next\
      \ step - the actual actor </span>\n                               <span class=\"\
      co1\">// that this mutator is processing key input for.</span>\n \n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>MutateString ~<span class=\"sy0\"\
      >=</span> <span class=\"st0\">\"SomeString\"</span><span class=\"br0\">)</span>\
      \ <span class=\"co1\">// SomeString should be equal to an AliasName set in the\
      \ class above,</span>\n                                          <span class=\"\
      co1\">//without \"mutate\".  i.e., if your AliasName was \"mutate Activate\"\
      ,</span>\n                                          <span class=\"co1\">//SomeString\
      \ should be \"Activate\"</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw2\">foreach</span> <span class=\"kw2\">AllActors</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'YourClass'</span>,\
      \ Other<span class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> Other.<span class=\"\
      kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'YourClass'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      br0\">{</span>\n\t\t\t\t<span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"YourClass Detected\"</span><span class=\"br0\">)</span>;\n\
      \t\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> Other.<span\
      \ class=\"me0\">BooleanValue</span> <span class=\"br0\">)</span> <span class=\"\
      co1\">// Change BooleanValue to a descriptive variable name!</span>\n      \
      \                                                    <span class=\"co1\">//\
      \ It will be set in the class we will create in the next</span>\n          \
      \                                                <span class=\"co1\">// step,\
      \ to see if the actor is actually in a state that</span>\n                 \
      \                                         <span class=\"co1\">// it can be activated.</span>\n\
      \t\t\t\t<span class=\"br0\">{</span>\n\t\t\t\t\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"YourClass Active\"</span><span\
      \ class=\"br0\">)</span>;\n\t\t\t\t\tOther.<span class=\"me0\">FunctionName</span><span\
      \ class=\"br0\">(</span> <span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ Change FunctionName to something descriptive!</span>\n                   \
      \                                            <span class=\"co1\">// It will\
      \ be created in the next step as well,</span>\n                            \
      \                                   <span class=\"co1\">// and it will contain\
      \ everything we want to happen</span>\n                                    \
      \                           <span class=\"co1\">//when the user presses a key.</span>\n\
      \ \n\t\t\t\t<span class=\"br0\">}</span>\n\t\t\t<span class=\"br0\">}</span>\n\
      \t\t<span class=\"br0\">}</span>\n \n\t<span class=\"br0\">}</span>\n \n\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span> NextMutator <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\
      \t\tNextMutator.<span class=\"me0\">Mutate</span><span class=\"br0\">(</span>MutateString,\
      \ Sender<span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Step_3:_Creating_your_actor.21\"\
      >Step 3: Creating your actor!</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Input_Keys?section=3\"\
      \ title=\"Edit section: Step 3: Creating your actor!\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>Create your map actor as you\
      \ otherwise would create any other map actor. How to create them is beyond the\
      \ scope of this article. Once its created, you want to add the following near\
      \ the beginning of the class:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> <span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw7\">Level</span>.<span class=\"kw7\">Game</span>.<span class=\"\
      me0\">BaseMutator</span>.<span class=\"me0\">AddMutator</span><span class=\"\
      br0\">(</span><span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Package.Mutator'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">//\
      \ Replace Package with your package name,</span>\n                         \
      \                                                 <span class=\"co1\">// and\
      \ Mutator with the name of the mutator</span>\n                            \
      \                                              <span class=\"co1\">// we created\
      \ above.</span>\n\t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Right at the very beginning, define a boolean variable called whatever\
      \ you replaced \"BooleanValue\" with in the class above. You may also want another\
      \ variable (as an Actor), to store who is allowed to actually activate the object.</p>\n\
      <p>Now you code a function with its name set to whatever you made \"FunctionName\"\
      , which will be what you want to happen when a player activates the object.\
      \ You will also need to put in the code to set your boolean to true when someone\
      \ is allowed to activate it.</p>\n<p>Now you're set! Below is an example of\
      \ what I've done, to create a <a href=\"/Legacy:Trigger\" title=\"Legacy:Trigger\"\
      >trigger</a> that requires the user to activate it before use.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"My_Working_.28we_hope.29_Example.21\">My Working\
      \ (we hope) Example!</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Input_Keys?section=4\" title=\"Edit section:\
      \ My Working (we hope) Example!\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Here is the trigger class, it works like any other\
      \ trigger:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >//</span>\n<span class=\"co1\">// UseTrigger:  Almost identical to Trigger\
      \ except requires user to press</span>\n<span class=\"co1\">// activate to spawn\
      \ the event.</span>\n<span class=\"co1\">// By Nick Bowler (Draconx), http://www.deadjunkie.com/~draconx/</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"kw1\">class</span> UseTrigger <span\
      \ class=\"kw1\">extends</span> <span class=\"kw4\">Trigger</span>;\n \n \n<span\
      \ class=\"co1\">//-----------------------------------------------------------------------------</span>\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"kw5\">bool</span> Activatable;\n\
      <span class=\"kw1\">var</span> <span class=\"kw9\">Actor</span> ActivatedBy;\n\
      <span class=\"kw1\">var</span> <span class=\"kw9\">Actor</span> OtherBkp;\n\
      \ \n<span class=\"co1\">//</span>\n \n<span class=\"kw1\">function</span> <span\
      \ class=\"kw4\">PreBeginPlay</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw7\">Level</span>.<span\
      \ class=\"kw7\">Game</span>.<span class=\"me0\">BaseMutator</span>.<span class=\"\
      me0\">AddMutator</span><span class=\"br0\">(</span><span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'Package.ActivateMut'</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">//</span>\n<span class=\"co1\">// Called when something\
      \ touches the trigger.</span>\n<span class=\"co1\">//</span>\n<span class=\"\
      kw1\">function</span> <span class=\"kw4\">Touch</span><span class=\"br0\">(</span>\
      \ <span class=\"kw9\">actor</span> Other <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>Other.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'PlayerPawn'</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"UseTrigger Activated\"</span><span\
      \ class=\"br0\">)</span>;\n\t\tOtherBkp <span class=\"sy0\">=</span> Other;\n\
      \t\tActivatable <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\
      \t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> UsePressed<span class=\"br0\">(</span> <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n \n\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"UseTrigger Used\"</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw6\">Super</span>.<span class=\"\
      kw4\">Touch</span><span class=\"br0\">(</span> OtherBkp<span class=\"br0\">)</span>;\n\
      \ \n<span class=\"br0\">}</span>\n \n<span class=\"co1\">//</span>\n<span class=\"\
      co1\">// When something untouches the trigger.</span>\n<span class=\"co1\">//</span>\n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">UnTouch</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Other.<span class=\"kw3\">IsA</span><span class=\"\
      br0\">(</span><span class=\"st0\">'PlayerPawn'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"UseTrigger\
      \ Deactivated\"</span><span class=\"br0\">)</span>;\n\t\tActivatable <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n\t<span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n\tActivatable<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">false</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Here is the mutator which processes the key input:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">//</span>\n<span class=\"co1\">//\
      \ ActivateMut - Required for UseTrigger to function correctly.  Placing a</span>\n\
      <span class=\"co1\">// UseTrigger in your map automatically adds this mutator,\
      \ so it should not</span>\n<span class=\"co1\">// be added manually.</span>\n\
      <span class=\"co1\">// By Nick Bowler (Draconx), http://www.deadjunkie.com/~draconx/</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"kw1\">class</span> ActivateMut\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Mutator</span>;\n \n\
      <span class=\"kw1\">function</span> AddMutator<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Mutator</span> M<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ M.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"\
      st0\">'ActivateMut'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">return</span>; <span\
      \ class=\"co1\">//only allow one mutator</span>\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"me0\">AddMutator</span><span\
      \ class=\"br0\">(</span>M<span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> Mutate<span class=\"br0\"\
      >(</span><span class=\"kw5\">string</span> MutateString, PlayerPawn Sender<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span> UseTrigger Other;\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>MutateString ~<span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"activate\"</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw2\">foreach</span> <span class=\"kw2\">AllActors</span><span\
      \ class=\"br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\"\
      >'UseTrigger'</span>, Other<span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ Other.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"\
      st0\">'UseTrigger'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"UseTrigger Detected\"</span><span\
      \ class=\"br0\">)</span>;\n\t\t\t\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> Other.<span class=\"me0\">Activatable</span> <span class=\"br0\"\
      >)</span>\n\t\t\t\t<span class=\"br0\">{</span>\n\t\t\t\t\t<span class=\"kw3\"\
      >log</span><span class=\"br0\">(</span><span class=\"st0\">\"UseTrigger Active\"\
      </span><span class=\"br0\">)</span>;\n\t\t\t\t\tOther.<span class=\"me0\">UsePressed</span><span\
      \ class=\"br0\">(</span> <span class=\"br0\">)</span>;\n \n\t\t\t\t<span class=\"\
      br0\">}</span>\n\t\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"br0\">}</span>\n \n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> NextMutator <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\tNextMutator.<span\
      \ class=\"me0\">Mutate</span><span class=\"br0\">(</span>MutateString, Sender<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>And here is the class which adds to the keybindings:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">class</span> UseTriggerBindings <span\
      \ class=\"kw1\">extends</span> UTExtraKeyBindings;\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n     SectionName<span class=\"sy0\">=</span><span\
      \ class=\"st0\">\"Miscellaneous\"</span>\n     LabelList<span class=\"br0\"\
      >(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"\
      sy0\">=</span><span class=\"st0\">\"Activate\"</span>\n     AliasNames<span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"mutate activate\"</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>And there you have it. I hope\
      \ you found this tutorial useful!</p>\n<hr />\n<p><b>Foxpaw:</b> This is a clever\
      \ workaround, but wouldn't exec functions/input variables be more elegant and\
      \ easier, too?</p>\n<p><b>Wormbo:</b> Exec functions can only be executed by\
      \ the player who is the owner of the actor and I don't see how input variables\
      \ would work in this case.</p>\n<p><b>Foxpaw:</b> Don't mutators have full access\
      \ to exec functions and input variables for the local viewport?</p>\n<p><b>Wormbo:</b>\
      \ No, mutators are serverside. They only have a Mutate function which is called\
      \ by the PlayerController's exec function Mutate which in turn is always replicated\
      \ to the server.</p>\n<p><b>Foxpaw:</b> Oh. I thought mutators were loaded on\
      \ both the client and the server and followed the normal replication rules.</p>\n\
      <p><b>Wormbo:</b> They follow replication rules, that's why they aren't replicated\
      \ at all unless you change RemoteRole, bAlwaysRelevant, etc.</p>\n<p><b>ToJo:</b>\
      \ Does anyone know if there is a simplier way to do this in UT 2003?</p>\n<p><b>Foxpaw:</b>\
      \ An <a href=\"/Legacy:Interaction\" title=\"Legacy:Interaction\">interaction</a>\
      \ should work.</p>\n<p><b>Draconx:</b> UT 2003 already has a UseTrigger, it\
      \ works just like mine (unfortunately, the Activate key doesnt seem to appear\
      \ in the normal key bindings screen, and must be set manually.</p>\n<p><b>MythOpus:</b>\
      \ Are you refering to the Activate key for the UseTrigger? That is set to the\
      \ Use key which is by default 'U'...</p>\n<p><b>Draconx:</b> Yeah but the control\
      \ doesnt appear on the controls screen ingame. I used the rawkeybindings thing\
      \ to change it on my own install.</p>\n<p><b>Xian:</b> Interesting concept.\
      \ But this is buggy, as if we have 2 PlayerPawns activating 2 separate Triggers,\
      \ we'd have both of them activatable. This in turn would make the foreach iterator\
      \ execute even the trigger which the Player running the command isn't touching.\
      \ i'd say this would be a better workaround:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw4\">Touch</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Other.<span class=\"kw3\">IsA</span><span class=\"\
      br0\">(</span><span class=\"st0\">'PlayerPawn'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"UseTrigger\
      \ Activated\"</span><span class=\"br0\">)</span>;\n\t\tPlayerPawn<span class=\"\
      br0\">(</span>Other<span class=\"br0\">)</span>.<span class=\"me0\">HitActor</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">Self</span>;\n\t\tOtherBkp\
      \ <span class=\"sy0\">=</span> Other;\n\t\tActivatable <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;\n\t<span class=\"br0\">}</span>\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw4\">UnTouch</span><span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Other.<span class=\"kw3\">IsA</span><span class=\"\
      br0\">(</span><span class=\"st0\">'PlayerPawn'</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"UseTrigger\
      \ Deactivated\"</span><span class=\"br0\">)</span>;\n\t\tActivatable <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n\t\tPlayerPawn<span class=\"\
      br0\">(</span>Other<span class=\"br0\">)</span>.<span class=\"me0\">HitActor</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t<span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>... and...</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>MutateString ~<span class=\"sy0\">=</span> <span class=\"\
      st0\">\"activate\"</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>Sender.<span class=\"me0\">HitActor</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> Sender.<span class=\"me0\">HitActor</span>.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'UseTrigger'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\"\
      >{</span>\n\t\t\t<span class=\"kw3\">log</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">\"UseTrigger Detected\"</span><span class=\"br0\">)</span>;\n\
      \t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> UseTrigger<span\
      \ class=\"br0\">(</span>Sender.<span class=\"me0\">HitActor</span><span class=\"\
      br0\">)</span>.<span class=\"me0\">Activatable</span> <span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"UseTrigger Active\"</span><span\
      \ class=\"br0\">)</span>;\n\t\t\t\tUseTrigger<span class=\"br0\">(</span>Sender.<span\
      \ class=\"me0\">HitActor</span><span class=\"br0\">)</span>.<span class=\"me0\"\
      >UsePressed</span><span class=\"br0\">(</span> <span class=\"br0\">)</span>;\n\
      \t\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"br0\">}</span>\n\t<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.195 seconds\nReal time usage: 0.197 seconds\nPreprocessor\
      \ visited node count: 58/1000000\nPreprocessor generated node count: 188/1000000\n\
      Post‐expand include size: 10/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1491-0!*!0!!en!*!*\
      \ and timestamp 20221118015147 and revision id 3740\n -->\n"
  categories:
  - sortkey: "Input Keys"
    name: "Legacy_Tutorial"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  - ns: 100
    exists: false
    name: "Legacy:Int File"
  - ns: 100
    exists: true
    name: "Legacy:Trigger"
  - ns: 100
    exists: true
    name: "Legacy:Mutator"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Step 1:  Setting up the Key Binding"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Input_Keys"
    byteoffset: 223
    anchor: "Step_1:_Setting_up_the_Key_Binding"
  - toclevel: 1
    level: "2"
    line: "Step 2:  Creating the mutator to process your key input"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Input_Keys"
    byteoffset: 1151
    anchor: "Step_2:_Creating_the_mutator_to_process_your_key_input"
  - toclevel: 1
    level: "2"
    line: "Step 3:  Creating your actor!"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Input_Keys"
    byteoffset: 3484
    anchor: "Step_3:_Creating_your_actor.21"
  - toclevel: 1
    level: "2"
    line: "My Working (we hope) Example!"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Input_Keys"
    byteoffset: 4768
    anchor: "My_Working_.28we_hope.29_Example.21"
  displaytitle: "Legacy:Input Keys"
  iwlinks: []
  wikitext:
    text: "So its time to create a class that requires the user to press a key?  You've\
      \ come to the right place.  I'll walk you through the steps here.\n\nFor [[Legacy:UT2003|UT2003]]\
      \ and newer, see [[Legacy:Interaction|interaction]].\n\n==Step 1:  Setting up\
      \ the Key Binding==\n\nThis is the easiest step.  Start by creating a new class,\
      \ something like ExtraWordBindings (please replace Word with something descriptive,\
      \ thanks!) and make it look something like this:\n\n<uscript>\nClass ExtraWordBindings\
      \ extends UTExtraKeyBindings;\n\ndefaultproperties\n{\n     SectionName=\"YourSection\"\
      \ // Enter a descriptive section name here\n     LabelList(0)=\"First Binding\
      \ Caption\" // Something Descriptive, Please.\n     LabelList(1)=\"Second Binding\
      \ Caption\"\n     AliasNames(0)=\"mutate Word\" // Change Word to something\
      \ that describes the action this key will do\n     AliasNames(1)=\"mutate Word\"\
      \n}\n</uscript>\n\nCompile the script and create an entry in the [Public] section\
      \ of your package's [[Legacy:Int File|int file]]:\n\nObject=(Name=MyPackage.MyKeyBindingsClass,Class=Class,MetaClass=UTMenu.UTExtraKeyBindings)\n\
      \nNow you should have a working option in the \"Controls\" option panel.\n\n\
      ==Step 2:  Creating the mutator to process your key input==\n\nOkay now you\
      \ can use one [[Legacy:Mutator|mutator]] to parse all your key bindings, or\
      \ one mutator for each binding.  I like one mutator for each binding, because\
      \ these mutators should be automatically added into the mutatorlist if the associated\
      \ actor is present in the map.  DO NOT CREATE AN INT ENTRY FOR THESE MUTATORS!\n\
      \nThey should look something like this. (Once again, PLEASE replace \"Word\"\
      \ with something DESCRIPTIVE!)\n\n<uscript>\nclass WordKeyMut extends Mutator;\n\
      \nfunction AddMutator(Mutator M)\n{\n\tif ( M.IsA('WordKeyMut') ) // This mutator's\
      \ name!\n\t{\n\t\treturn; //only allow one mutator\n\t}\n\tSuper.AddMutator(M);\n\
      }\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\n\tlocal YourClass\
      \ Other; // YourClass will be the name of the class that we\n              \
      \                 // will create in the next step - the actual actor \n    \
      \                           // that this mutator is processing key input for.\n\
      \n\tif (MutateString ~= \"SomeString\") // SomeString should be equal to an\
      \ AliasName set in the class above,\n                                      \
      \    //without \"mutate\".  i.e., if your AliasName was \"mutate Activate\"\
      ,\n                                          //SomeString should be \"Activate\"\
      \n\t{\n\t\tforeach AllActors(class'YourClass', Other)\n\t\t{\n\t\t\tif ( Other.IsA('YourClass')\
      \ )\n\t\t\t{\n\t\t\t\tlog(\"YourClass Detected\");\n\t\t\t\tif ( Other.BooleanValue\
      \ ) // Change BooleanValue to a descriptive variable name!\n               \
      \                                           // It will be set in the class we\
      \ will create in the next\n                                                \
      \          // step, to see if the actor is actually in a state that\n      \
      \                                                    // it can be activated.\n\
      \t\t\t\t{\n\t\t\t\t\tlog(\"YourClass Active\");\n\t\t\t\t\tOther.FunctionName(\
      \ ); // Change FunctionName to something descriptive!\n                    \
      \                                           // It will be created in the next\
      \ step as well,\n                                                          \
      \     // and it will contain everything we want to happen\n                \
      \                                               //when the user presses a key.\n\
      \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif ( NextMutator != None )\n\t\tNextMutator.Mutate(MutateString,\
      \ Sender);\n}\n</uscript>\n\n==Step 3:  Creating your actor!==\n\nCreate your\
      \ map actor as you otherwise would create any other map actor.  How to create\
      \ them is beyond the scope of this article.  Once its created, you want to add\
      \ the following near the beginning of the class:\n\n<uscript>\nfunction PreBeginPlay()\n\
      {\n\tLevel.Game.BaseMutator.AddMutator(Spawn(class'Package.Mutator')); // Replace\
      \ Package with your package name,\n                                        \
      \                                  // and Mutator with the name of the mutator\n\
      \                                                                          //\
      \ we created above.\n\tSuper.PreBeginPlay();\n}\n</uscript>\n\nRight at the\
      \ very beginning, define a boolean variable called whatever you replaced \"\
      BooleanValue\" with in the class above.  You may also want another variable\
      \ (as an Actor), to store who is allowed to actually activate the object.\n\n\
      Now you code a function with its name set to whatever you made \"FunctionName\"\
      , which will be what you want to happen when a player activates the object.\
      \  You will also need to put in the code to set your boolean to true when someone\
      \ is allowed to activate it.\n\nNow you're set!  Below is an example of what\
      \ I've done, to create a [[Legacy:Trigger|trigger]] that requires the user to\
      \ activate it before use.\n\n==My Working (we hope) Example!==\n\nHere is the\
      \ trigger class, it works like any other trigger:\n\n<uscript>\n//\n// UseTrigger:\
      \  Almost identical to Trigger except requires user to press\n// activate to\
      \ spawn the event.\n// By Nick Bowler (Draconx), http://www.deadjunkie.com/~draconx/\n\
      //\nclass UseTrigger extends Trigger;\n\n\n//-----------------------------------------------------------------------------\n\
      \nvar bool Activatable;\nvar Actor ActivatedBy;\nvar Actor OtherBkp;\n\n//\n\
      \nfunction PreBeginPlay()\n{\n\tLevel.Game.BaseMutator.AddMutator(Spawn(class'Package.ActivateMut'));\n\
      \tSuper.PreBeginPlay();\n}\n\n//\n// Called when something touches the trigger.\n\
      //\nfunction Touch( actor Other )\n{\n\tif (Other.IsA('PlayerPawn'))\n\t{\n\t\
      \tlog(\"UseTrigger Activated\");\n\t\tOtherBkp = Other;\n\t\tActivatable = true;\n\
      \t}\n}\n\nfunction UsePressed( )\n{\n\n\tlog(\"UseTrigger Used\");\n\tSuper.Touch(\
      \ OtherBkp);\n\n}\n\n//\n// When something untouches the trigger.\n//\nfunction\
      \ UnTouch( actor Other )\n{\n\tif (Other.IsA('PlayerPawn'))\n\t{\n\t\tlog(\"\
      UseTrigger Deactivated\");\n\t\tActivatable = false;\n\t}\n}\n\ndefaultproperties\n\
      {\n\tActivatable=false\n}\n</uscript>\n\nHere is the mutator which processes\
      \ the key input:\n\n<uscript>\n//\n// ActivateMut - Required for UseTrigger\
      \ to function correctly.  Placing a\n// UseTrigger in your map automatically\
      \ adds this mutator, so it should not\n// be added manually.\n// By Nick Bowler\
      \ (Draconx), http://www.deadjunkie.com/~draconx/\n//\nclass ActivateMut extends\
      \ Mutator;\n\nfunction AddMutator(Mutator M)\n{\n\tif ( M.IsA('ActivateMut')\
      \ )\n\t{\n\t\treturn; //only allow one mutator\n\t}\n\tSuper.AddMutator(M);\n\
      }\n\nfunction Mutate(string MutateString, PlayerPawn Sender)\n{\n\tlocal UseTrigger\
      \ Other;\n\n\tif (MutateString ~= \"activate\")\n\t{\n\t\tforeach AllActors(class'UseTrigger',\
      \ Other)\n\t\t{\n\t\t\tif ( Other.IsA('UseTrigger') )\n\t\t\t{\n\t\t\t\tlog(\"\
      UseTrigger Detected\");\n\t\t\t\tif ( Other.Activatable )\n\t\t\t\t{\n\t\t\t\
      \t\tlog(\"UseTrigger Active\");\n\t\t\t\t\tOther.UsePressed( );\n\n\t\t\t\t\
      }\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif ( NextMutator != None )\n\t\tNextMutator.Mutate(MutateString,\
      \ Sender);\n}\n</uscript>\n\nAnd here is the class which adds to the keybindings:\n\
      \n<uscript>\nclass UseTriggerBindings extends UTExtraKeyBindings;\n\ndefaultproperties\n\
      {\n     SectionName=\"Miscellaneous\"\n     LabelList(0)=\"Activate\"\n    \
      \ AliasNames(0)=\"mutate activate\"\n}\n</uscript>\n\nAnd there you have it.\
      \  I hope you found this tutorial useful!\n\n----\n\n'''Foxpaw:''' This is a\
      \ clever workaround, but wouldn't exec functions/input variables be more elegant\
      \ and easier, too?\n\n'''Wormbo:''' Exec functions can only be executed by the\
      \ player who is the owner of the actor and I don't see how input variables would\
      \ work in this case.\n\n'''Foxpaw:''' Don't mutators have full access to exec\
      \ functions and input variables for the local viewport?\n\n'''Wormbo:''' No,\
      \ mutators are serverside. They only have a Mutate function which is called\
      \ by the PlayerController's exec function Mutate which in turn is always replicated\
      \ to the server.\n\n'''Foxpaw:''' Oh. I thought mutators were loaded on both\
      \ the client and the server and followed the normal replication rules.\n\n'''Wormbo:'''\
      \ They follow replication rules, that's why they aren't replicated at all unless\
      \ you change RemoteRole, bAlwaysRelevant, etc.\n\n'''ToJo:''' Does anyone know\
      \ if there is a simplier way to do this in UT 2003?\n\n'''Foxpaw:''' An [[Legacy:Interaction|interaction]]\
      \ should work.\n\n'''Draconx:''' UT 2003 already has a UseTrigger, it works\
      \ just like mine (unfortunately, the Activate key doesnt seem to appear in the\
      \ normal key bindings screen, and must be set manually.\n\n'''MythOpus:''' Are\
      \ you refering to the Activate key for the UseTrigger?  That is set to the Use\
      \ key which is by default 'U'...\n\n'''Draconx:''' Yeah but the control doesnt\
      \ appear on the controls screen ingame.  I used the rawkeybindings thing to\
      \ change it on my own install.\n\n'''Xian:''' Interesting concept. But this\
      \ is buggy, as if we have 2 PlayerPawns activating 2 separate Triggers, we'd\
      \ have both of them activatable. This in turn would make the foreach iterator\
      \ execute even the trigger which the Player running the command isn't touching.\
      \ i'd say this would be a better workaround:\n\n<uscript>function Touch( actor\
      \ Other )\n{\n\tif (Other.IsA('PlayerPawn'))\n\t{\n\t\tlog(\"UseTrigger Activated\"\
      );\n\t\tPlayerPawn(Other).HitActor = Self;\n\t\tOtherBkp = Other;\n\t\tActivatable\
      \ = true;\n\t}\n}\n\nfunction UnTouch( actor Other )\n{\n\tif (Other.IsA('PlayerPawn'))\n\
      \t{\n\t\tlog(\"UseTrigger Deactivated\");\n\t\tActivatable = false;\n\t\tPlayerPawn(Other).HitActor\
      \ = None;\n\t}\n}</uscript>\n\n... and...\n\n<uscript>if (MutateString ~= \"\
      activate\")\n\t{\n\t\tif ((Sender.HitActor != None) && Sender.HitActor.IsA('UseTrigger'))\n\
      \t\t{\n\t\t\tlog(\"UseTrigger Detected\");\n\t\t\tif ( UseTrigger(Sender.HitActor).Activatable\
      \ )\n\t\t\t{\n\t\t\t\tlog(\"UseTrigger Active\");\n\t\t\t\tUseTrigger(Sender.HitActor).UsePressed(\
      \ );\n\t\t\t}\n\t\t}\n\t}</uscript>\n\n[[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 3740
name: "Legacy:Input Keys"
revision:
  revid: 3740
  parentid: 3741
  user: "Xian"
  timestamp: 1178550948.000000000
  comment: "another typo :o|"
timestamp: 1668764308.803349000
