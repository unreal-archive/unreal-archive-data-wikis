---
parse:
  title: "Legacy:Pathing Lifts"
  text:
    text: "<p>There are two special types of pathnode which tell bots how to use lifts:\
      \ <a href=\"/Legacy:LiftCenter\" title=\"Legacy:LiftCenter\">LiftCenter</a>\
      \ and <a href=\"/Legacy:LiftExit\" title=\"Legacy:LiftExit\">LiftExit</a>.</p>\n\
      <dl>\n<dt>LiftExit&#160;</dt>\n<dd>This actor tells the bots where to go to\
      \ before riding a lift or after riding a lift. Place LiftExit actors approximately\
      \ 16 units from the edge of the lift. You need one near each mover key. For\
      \ example, if your lift goes from the ground floor to the first floor and then\
      \ back again, you will need a LiftExit near your lift shaft on the first floor\
      \ and one near the lift on the ground floor. To link a LiftExit to a particular\
      \ lift, set its LiftExit -&gt; LiftTag to be the <a href=\"/Legacy:Tag\" title=\"\
      Legacy:Tag\">Tag</a> of the lift mover.</dd>\n</dl>\n<dl>\n<dt>LiftCenter&#160;</dt>\n\
      <dd>This actor tells the bots where to stand while riding a lift. The bots do\
      \ not understand <i>BumpOpenTimed</i>, so when setting the <a href=\"/Legacy:Mover\"\
      \ title=\"Legacy:Mover\">mover</a> Properties, set, Object -&gt; InitialState\
      \ to StandOpenTimed. Place the actor near the middle of the 0 key (bots will\
      \ be fine getting on at other keys even if the lift moves large distances in\
      \ any direction as long as you have the 0 key set correctly). To link a LiftCenter\
      \ to a particular lift, set its LiftCenter -&gt; LiftTag to be the Tag of the\
      \ lift mover.</dd>\n</dl>\n<p>You need:</p>\n<ul>\n<li>A LiftCenter, placed\
      \ on the mover where you want bots to stand</li>\n<li>a LiftExit at the bottom\
      \ &amp; top exit points, at the place bots will be before they walk onto the\
      \ lift. You can have several on each floor if your lift can be approached from\
      \ several directions.</li>\n</ul>\n<p>The following should all match:</p>\n\
      <dl>\n<dd>LiftCenter -&gt; LiftTag</dd>\n<dd>LiftExit -&gt; LiftTag</dd>\n<dd>Mover&#160;:\
      \ Events -&gt; Tag</dd>\n</dl>\n<p>What happens then is that the bots will move\
      \ to the ground floor LiftExit, then to the LiftCenter associated with that\
      \ lift. The bots will ride the lift until it stops and then move to the LiftExit\
      \ on the first floor before continuing along the normal path network.</p>\n\
      <p>To check that tags are correctly set: after a full rebuild of the level,\
      \ select <a href=\"/Legacy:Viewport_Caption_Context_Menu\" title=\"Legacy:Viewport\
      \ Caption Context Menu\">Viewport Caption Context Menu</a> -&gt; <i>View</i>\
      \ -&gt; <i>Show Paths</i>. The viewport will display red and blue connecting\
      \ lines between <a href=\"/Legacy:NavigationPoint\" title=\"Legacy:NavigationPoint\"\
      >NavigationPoints</a> that the Bots travel along in the Navigation system. If\
      \ the lift paths are correctly set up, the lines will join LiftCenter and the\
      \ LiftExits.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Utilities\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Utilities</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Common_Problems\"><span class=\"tocnumber\">2</span> <span class=\"toctext\"\
      >Common Problems</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"\
      #Tips\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Tips</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#External_References\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">External References</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Utilities\">Utilities</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Pathing_Lifts?section=1\" title=\"Edit section: Utilities\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>There\
      \ are several tools that make pathnoding much easier:</p>\n<ul>\n<li><a href=\"\
      /Legacy:PathLogic\" title=\"Legacy:PathLogic\">PathLogic</a>: allows pathnodes\
      \ to be placed from within UT</li>\n<li><a href=\"/Legacy:Mind_Reader\" title=\"\
      Legacy:Mind Reader\">Mind Reader</a>: shows what bots are trying to do from\
      \ within UT</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Common_Problems\"\
      >Common Problems</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Pathing_Lifts?section=2\" title=\"Edit section:\
      \ Common Problems\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Sometimes, Bots get stuck in a particular geometry when their A.I. directs\
      \ them towards a \"goal\" that causes a conflict. It is suggested that you download\
      \ the <a href=\"/Legacy:Mind_Reader\" title=\"Legacy:Mind Reader\">Mind Reader</a>\
      \ mutator and select it before play testing your level. Then, whenever you observe\
      \ a Bot during the game Mindreader will post specific information about what\
      \ the Bot's state is right on the screen for easy determination. With this information,\
      \ the problem can usually be identified. Alterations can then be made to the\
      \ local geometrical arrangement, either moving an inventory spot, or pathnode,\
      \ or by adding other elements as needed.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Tips\">Tips</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Pathing_Lifts?section=3\" title=\"Edit section:\
      \ Tips\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>You can add multiple <a href=\"/Legacy:LiftExit\" title=\"Legacy:LiftExit\"\
      >LiftExits</a> at a certain moverkey.</p>\n<p>For example if you have a mover\
      \ going into a hallway, you can have a <a href=\"/Legacy:LiftExit\" title=\"\
      Legacy:LiftExit\">LiftExit</a> actor at both sides of the lift. Bots will take\
      \ that exit that they need&#160;;)</p>\n<h3><span class=\"mw-headline\" id=\"\
      External_References\">External References</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Pathing_Lifts?section=4\"\
      \ title=\"Edit section: External References\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<blockquote class=\"legacyquote\">\n<p><b>Epic Documentation:</b>\
      \ <i>Adding Support for Lifts</i> (From the Unreal Technology Site)</p>\n<p>There\
      \ are two special NavigationPoint classes used to help bots understand how to\
      \ use lifts, LiftCenters and LiftExits. Give the lift a unique tag. Place a\
      \ LiftCenter on the lift, and set its LiftTag attribute to be the tag of the\
      \ lift. At each exit from the lift, far enough away so that bots standing at\
      \ that spot won't interfere with the lift, add a LiftExit. Each LiftExit should\
      \ have its LiftTag set to the tag of the lift.</p>\n<p>The default state for\
      \ movers is BumpOpenTimed. Do not use this state for lifts! Bots misinterpret\
      \ movers that are BumpOpenTimed as being doors. Instead, use the StandOpenTimed\
      \ state for most lifts. Bots will also understand triggered lifts (TriggerOpenTimed,\
      \ TriggerToggle, etc.). In many cases, they will use triggered lifts without\
      \ any further help. However, for certain complex situations, such as when a\
      \ delayed dispatcher is used to control the lift, bots may need a hint. In these\
      \ cases, set the LiftCenter's LiftTrigger attribute to the tag of the trigger\
      \ the bot should use to control this lift.</p>\n<p>There are two other configurable\
      \ LiftCenter attributes of interest. These should be modified only if absolutely\
      \ necessary. MaxZDiffAdd, which defaults to 0, specifies an additional allowable\
      \ difference in height between the bot and the LiftCenter for the bot to consider\
      \ that LiftCenter reachable. This is useful if the bot must stand below the\
      \ lift (down stairs or a ramp) while waiting for it. MaxDist2D is the maximum\
      \ distance between the bot and the LiftCenter. It defaults to 400 world units.</p>\n\
      </blockquote>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\">Related\
      \ Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Pathing_Lifts?section=5\" title=\"Edit section:\
      \ Related Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:Bot_Support\" title=\"Legacy:Bot Support\">Bot Support</a>\
      \ – Main topic\n<ul>\n<li><a href=\"/Legacy:Bot_Pathing\" title=\"Legacy:Bot\
      \ Pathing\">Bot Pathing</a> – Concepts and elements of the bot path network\n\
      <ul>\n<li><a href=\"/Legacy:Basic_Bot_Pathing\" title=\"Legacy:Basic Bot Pathing\"\
      >Basic Bot Pathing</a> – A tutorial on basic bot pathing</li>\n</ul>\n</li>\n\
      </ul>\n</li>\n<li><a href=\"/Legacy:Mover_Topics\" title=\"Legacy:Mover Topics\"\
      >Mover Topics</a> – More on creating and using movers</li>\n</ul>\n<h2><span\
      \ class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Pathing_Lifts?section=6\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Tarquin:</b> Any way of telling bots to lift jump?</p>\n\
      <p><b>SuperApe:</b> (UT2004) <a href=\"/Legacy:LiftExit\" title=\"Legacy:LiftExit\"\
      >LiftExit</a> -&gt; LiftJump &#160;:)</p>\n<p><b>Betwulf:</b> (UT2004) I tried\
      \ all this and the bot simply will not choose to go onto a lift I create. I'm\
      \ pretty sad. I've taken a look at other maps and it looks exactly like what\
      \ I'm doing, except the bots on my map ALWAYS avoid the lift.</p>\n<p><b>DemonThing:</b>\
      \ Tarq: <a href=\"/Legacy:LiftExit\" title=\"Legacy:LiftExit\">LiftExit</a>\
      \ -&gt; LiftJump/bLiftJumpExit is what you want. Take a look at DM-1on1-Roughinery\
      \ for an example.</p>\n<p><b>Betwulf:</b> I'm having the same sort of problem\
      \ here. Does anyone have a solution to this?</p>\n<p><b>SuperApe:</b> Also look\
      \ into DM-Albatross for LiftJump settings. (leading to lightning gun) Several\
      \ stock maps have LiftJumps set up.</p>\n<hr />\n<p><b>Legolas:</b> I'm trying\
      \ to get bots to use lifts in an Onslaught map I'm pathing, but I'm not sure\
      \ where ot set the default state for the lifts. I've dug through the properties\
      \ (and I get the build error saying you cant use a lift center actor on a \"\
      BumpOpenedTimed\" lift, but I just dont see where that is in the properties.</p>\n\
      <p><b>MythOpus:</b> Look in your <a href=\"/Legacy:Mover\" title=\"Legacy:Mover\"\
      >Mover</a> properties under Object -&gt; Initial State. There should be a drop\
      \ down list of different mover control settings you can have. One of those is\
      \ BumpOpenedTime. The one you should be using would most likely be StandOpenTime.\
      \ Bots will use the lift center and if you have set it up right, the bots should\
      \ go onto your lift and it will go to its keypoint(s).</p>\n<hr />\n<p><b>Tarquin:</b>\
      \ Suppose I have a lift &amp; some stairs that go to the same place. How do\
      \ I tell the bots not to wait around for the lift if it's not there, but just\
      \ take the stairs instead?</p>\n<p><b>SuperApe:</b> I believe with stock objects,\
      \ you're stuck. Bots will see the route (using the lift) and decide for themselves\
      \ which is the shorter distance. You could try coding a custom Mover or LiftExit\
      \ that uses the SpecialCost() function to make the distance look much longer\
      \ if the lift isn't available. (Force paths to it and set bSpecialForced and\
      \ bForcedOnly)</p>\n<p><b>[D2]_Boss....</b> I have a multiple keyframe mover.\
      \ It works fine, but my bots are jumping out of the mover attempting to reach\
      \ the other lift exit before the mover gets there. How do I make them stay on\
      \ the lift center until the mover reaches a specific keyframe?</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.048 seconds\nReal time usage: 0.162 seconds\n\
      Preprocessor visited node count: 35/1000000\nPreprocessor generated node count:\
      \ 89/1000000\nPost‐expand include size: 3393/2097152 bytes\nTemplate argument\
      \ size: 1642/2097152 bytes\nHighest expansion depth: 3/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%   19.818      1 - -total\n100.00%   19.818      1 - Template:Innerbox\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2417-0!*!0!!en!*!*\
      \ and timestamp 20221118021457 and revision id 5795\n -->\n"
  categories:
  - sortkey: "Pathing Lifts"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:PathLogic"
  - ns: 100
    exists: true
    name: "Legacy:Mind Reader"
  - ns: 100
    exists: true
    name: "Legacy:Bot Support"
  - ns: 100
    exists: true
    name: "Legacy:Viewport Caption Context Menu"
  - ns: 100
    exists: true
    name: "Legacy:Basic Bot Pathing"
  - ns: 100
    exists: true
    name: "Legacy:Mover Topics"
  - ns: 100
    exists: true
    name: "Legacy:LiftExit"
  - ns: 100
    exists: true
    name: "Legacy:LiftCenter"
  - ns: 100
    exists: true
    name: "Legacy:Tag"
  - ns: 100
    exists: true
    name: "Legacy:NavigationPoint"
  - ns: 100
    exists: true
    name: "Legacy:Mover"
  - ns: 100
    exists: true
    name: "Legacy:Bot Pathing"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Utilities"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 2268
    anchor: "Utilities"
  - toclevel: 1
    level: "2"
    line: "Common Problems"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 2509
    anchor: "Common_Problems"
  - toclevel: 1
    level: "2"
    line: "Tips"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 3159
    anchor: "Tips"
  - toclevel: 2
    level: "3"
    line: "External References"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 3420
    anchor: "External_References"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "5"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 5104
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "6"
    fromtitle: "Legacy:Pathing_Lifts"
    byteoffset: 5445
    anchor: "Discussion"
  displaytitle: "Legacy:Pathing Lifts"
  iwlinks: []
  wikitext:
    text: "There are two special types of pathnode which tell bots how to use lifts:\
      \ [[Legacy:LiftCenter|LiftCenter]] and [[Legacy:LiftExit|LiftExit]].\n\n; LiftExit\
      \ : This actor tells the bots where to go to before riding a lift or after riding\
      \ a lift. Place LiftExit actors approximately 16 units from the edge of the\
      \ lift. You need one near each mover key. For example, if your lift goes from\
      \ the ground floor to the first floor and then back again, you will need a LiftExit\
      \ near your lift shaft on the first floor and one near the lift on the ground\
      \ floor. To link a LiftExit to a particular lift, set its LiftExit -> LiftTag\
      \ to be the [[Legacy:Tag|Tag]] of the lift mover.\n\n; LiftCenter : This actor\
      \ tells the bots where to stand while riding a lift. The bots do not understand\
      \ ''BumpOpenTimed'', so when setting the [[Legacy:Mover|mover]] Properties,\
      \ set, Object -> InitialState to StandOpenTimed. Place the actor near the middle\
      \ of the 0 key (bots will be fine getting on at other keys even if the lift\
      \ moves large distances in any direction as long as you have the 0 key set correctly).\
      \ To link a LiftCenter to a particular lift, set its LiftCenter -> LiftTag to\
      \ be the Tag of the lift mover. \n\nYou need:\n* A LiftCenter, placed on the\
      \ mover where you want bots to stand\n* a LiftExit at the bottom & top exit\
      \ points, at the place bots will be before they walk onto the lift. You can\
      \ have several on each floor if your lift can be approached from several directions.\n\
      \nThe following should all match:\n\n: LiftCenter -> LiftTag \n: LiftExit ->\
      \ LiftTag\n: Mover : Events -> Tag\n\nWhat happens then is that the bots will\
      \ move to the ground floor LiftExit, then to the LiftCenter associated with\
      \ that lift.  The bots will ride the lift until it stops and then move to the\
      \ LiftExit on the first floor before continuing along the normal path network.\n\
      \nTo check that tags are correctly set: after a full rebuild of the level, select\
      \ [[Legacy:Viewport Caption Context Menu|Viewport Caption Context Menu]] ->\
      \ ''View'' -> ''Show Paths''. The viewport will display red and blue connecting\
      \ lines between [[Legacy:NavigationPoint|NavigationPoint]]s that the Bots travel\
      \ along in the Navigation system. If the lift paths are correctly set up, the\
      \ lines will join LiftCenter and the LiftExits.\n\n==Utilities ==\n\nThere are\
      \ several tools that make pathnoding much easier:\n* [[Legacy:PathLogic|PathLogic]]:\
      \  allows pathnodes to be placed from within UT\n* [[Legacy:Mind Reader|Mind\
      \ Reader]]: shows what bots are trying to do from within UT\n\n==Common Problems\
      \ ==\n\nSometimes, Bots get stuck in a particular geometry when their A.I. directs\
      \ them towards a \"goal\" that causes a conflict. It is suggested that you download\
      \ the [[Legacy:Mind Reader|Mind Reader]] mutator and select it before play testing\
      \ your level. Then, whenever you observe a Bot during the game Mindreader will\
      \ post specific information about what the Bot's state is right on the screen\
      \ for easy determination. With this information, the problem can usually be\
      \ identified. Alterations can then be made to the local geometrical arrangement,\
      \ either moving an inventory spot, or pathnode, or by adding other elements\
      \ as needed.\n\n==Tips ==\n\nYou can add multiple [[Legacy:LiftExit|LiftExit]]s\
      \ at a certain moverkey.\n\nFor example if you have a mover going into a hallway,\
      \ you can have a [[Legacy:LiftExit|LiftExit]] actor at both sides of the lift.\
      \ Bots will take that exit that they need ;)\n\n===External References===\n\n\
      {{innerbox| '''Epic Documentation:''' ''Adding Support for Lifts'' (From the\
      \ Unreal Technology Site)\n\n There are two special NavigationPoint classes\
      \ used to help bots understand how to use lifts, LiftCenters and LiftExits.\
      \ Give the lift a unique tag. Place a LiftCenter on the lift, and set its LiftTag\
      \ attribute to be the tag of the lift.  At each exit from the lift, far enough\
      \ away so that bots standing at that spot won't interfere with the lift, add\
      \ a LiftExit.  Each LiftExit should have its LiftTag set to the tag of the lift.\n\
      \n The default state for movers is BumpOpenTimed.  Do not use this state for\
      \ lifts!  Bots misinterpret movers that are BumpOpenTimed as being doors.  Instead,\
      \ use the StandOpenTimed state for most lifts.  Bots will also understand triggered\
      \ lifts (TriggerOpenTimed, TriggerToggle, etc.).  In many cases, they will use\
      \ triggered lifts without any further help.  However, for certain complex situations,\
      \ such as when a delayed dispatcher is used to control the lift, bots may need\
      \ a hint.  In these cases, set the LiftCenter's LiftTrigger attribute to the\
      \ tag of the trigger the bot should use to control this lift.\n\n There are\
      \ two other configurable LiftCenter attributes of interest.  These should be\
      \ modified only if absolutely necessary.  MaxZDiffAdd, which defaults to 0,\
      \ specifies an additional allowable difference in height between the bot and\
      \ the LiftCenter for the bot to consider that LiftCenter reachable.  This is\
      \ useful if the bot must stand below the lift (down stairs or a ramp) while\
      \ waiting for it.  MaxDist2D is the maximum distance between the bot and the\
      \ LiftCenter.  It defaults to 400 world units.\n\n}}\n\n==Related Topics ==\n\
      * [[Legacy:Bot Support|Bot Support]] &ndash; Main topic\n** [[Legacy:Bot Pathing|Bot\
      \ Pathing]] &ndash; Concepts and elements of the bot path network\n*** [[Legacy:Basic\
      \ Bot Pathing|Basic Bot Pathing]] &ndash; A tutorial on basic bot pathing\n\
      * [[Legacy:Mover Topics|Mover Topics]] &ndash; More on creating and using movers\n\
      \n==Discussion==\n\n'''Tarquin:''' Any way of telling bots to lift jump?\n\n\
      '''SuperApe:''' (UT2004) [[Legacy:LiftExit|LiftExit]] -> LiftJump  :)\n\n'''Betwulf:'''\
      \ (UT2004) I tried all this and the bot simply will not choose to go onto a\
      \ lift I create. I'm pretty sad. I've taken a look at other maps and it looks\
      \ exactly like what I'm doing, except the bots on my map ALWAYS avoid the lift.\n\
      \n'''DemonThing:''' Tarq: [[Legacy:LiftExit|LiftExit]] -> LiftJump/bLiftJumpExit\
      \ is what you want. Take a look at DM-1on1-Roughinery for an example.\n\n'''Betwulf:'''\
      \ I'm having the same sort of problem here. Does anyone have a solution to this?\n\
      \n'''SuperApe:''' Also look into DM-Albatross for LiftJump settings. (leading\
      \ to lightning gun)  Several stock maps have LiftJumps set up.\n\n----\n\n'''Legolas:'''\
      \ I'm trying to get bots to use lifts in an Onslaught map I'm pathing, but I'm\
      \ not sure where ot set the default state for the lifts.  I've dug through the\
      \ properties (and I get the build error saying you cant use a lift center actor\
      \ on a \"BumpOpenedTimed\" lift, but I just dont see where that is in the properties.\n\
      \n'''MythOpus:''' Look in your [[Legacy:Mover|Mover]] properties under Object\
      \ -> Initial State.  There should be a drop down list of different mover control\
      \ settings you can have.  One of those is BumpOpenedTime.  The one you should\
      \ be using would most likely be StandOpenTime.  Bots will use the lift center\
      \ and if you have set it up right, the bots should go onto your lift and it\
      \ will go to its keypoint(s).\n\n----\n\n'''Tarquin:''' Suppose I have a lift\
      \ & some stairs that go to the same place. How do I tell the bots not to wait\
      \ around for the lift if it's not there, but just take the stairs instead?\n\
      \n'''SuperApe:''' I believe with stock objects, you're stuck.  Bots will see\
      \ the route (using the lift) and decide for themselves which is the shorter\
      \ distance.  You could try coding a custom Mover or LiftExit that uses the SpecialCost()\
      \ function to make the distance look much longer if the lift isn't available.\
      \ (Force paths to it and set bSpecialForced and bForcedOnly)\n\n'''[D2]_Boss....'''\
      \ I have a multiple keyframe mover.  It works fine, but my bots are jumping\
      \ out of the mover attempting to reach the other lift exit before the mover\
      \ gets there.  How do I make them stay on the lift center until the mover reaches\
      \ a specific keyframe?\n\n[[Category:Legacy Mapping|{{PAGENAME}}]]"
  properties: []
  revId: 5795
name: "Legacy:Pathing Lifts"
revision:
  revid: 5795
  parentid: 5796
  user: "C-24-1-84-192.hsd1.il.comcast.net"
  timestamp: 1197585284.000000000
  comment: "*"
timestamp: 1668763743.135452000
