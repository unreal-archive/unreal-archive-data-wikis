---
parse:
  title: "Legacy:SquirrelZero/RealtimeShadows"
  text:
    text: "<p>A completely automatic code based system for creating realtime player\
      \ and vehicle shadows. Also completely free for public use, see the disclaimer\
      \ at the bottom.</p>\n<p><a rel=\"nofollow\" class=\"external autonumber\" href=\"\
      http://www.frag-ops.com/images/shadow1.jpg\">[1]</a></p>\n<p><a rel=\"nofollow\"\
      \ class=\"external text\" href=\"http://www.frag-ops.com/content/Demos/RealtimeShadows2.avi\"\
      >video clip #1 (small)</a></p>\n<p><a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.frag-ops.com/content/Demos/Shadows5.avi\">video clip #2\
      \ (large)</a></p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\"\
      >\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a\
      \ href=\"#Features\"><span class=\"tocnumber\">1</span> <span class=\"toctext\"\
      >Features</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"\
      #Known_Issues\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Known\
      \ Issues</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Todo\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Todo</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Revisions\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Revisions</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-5\"><a href=\"#Summary\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Summary</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#Requirements\"><span class=\"tocnumber\">6</span>\
      \ <span class=\"toctext\">Requirements</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-7\"><a href=\"#Effect_ShadowController.uc\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">Effect_ShadowController.uc</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-8\"><a href=\"#Effect_ShadowProjector.uc\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">Effect_ShadowProjector.uc</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#ShadowBitmapMaterial_Detail_Levels\"\
      ><span class=\"tocnumber\">9</span> <span class=\"toctext\">ShadowBitmapMaterial\
      \ Detail Levels</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"\
      #Notes\"><span class=\"tocnumber\">10</span> <span class=\"toctext\">Notes</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#Disclaimer\"><span class=\"\
      tocnumber\">11</span> <span class=\"toctext\">Disclaimer</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-12\"><a href=\"#Important\"><span class=\"tocnumber\"\
      >12</span> <span class=\"toctext\">Important</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-13\"><a href=\"#Files\"><span class=\"tocnumber\">13</span> <span\
      \ class=\"toctext\">Files</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-14\"\
      ><a href=\"#Comments\"><span class=\"tocnumber\">13.1</span> <span class=\"\
      toctext\">Comments</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Features\">Features</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=1\"\
      \ title=\"Edit section: Features\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li>True realtime directional shadows using all\
      \ standard map lights for sourcing</li>\n<li>Completely compatible with all\
      \ existing maps and mods, very easy to plug in</li>\n<li>Multiple shadow detail\
      \ settings, built with performance in mind</li>\n<li>Dynamic Light support,\
      \ which allows for things like muzzle flash and explosion shadows</li>\n<li>Sunlight\
      \ actor support as a fallback light</li>\n<li>Shadows will still be rendered\
      \ (but culled very early) even if the playerpawn owning the shadow is not. Made\
      \ primarily so that shadows can be seen before people, a stealth advantage that\
      \ is key to the mod I code for, <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://www.frag-ops.com\">Frag.Ops</a>.</li>\n<li>Unlike the UT2004\
      \ <a href=\"/Legacy:ShadowProjector\" title=\"Legacy:ShadowProjector\">ShadowProjector</a>\
      \ these will project onto dynamic actors like vehicles and other playerpawns</li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Known_Issues\">Known Issues</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=2\" title=\"Edit\
      \ section: Known Issues\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>This unfortunately will not work under OpenGL implementations of UT2004,\
      \ like linux and macintosh. I have heard that <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://www.icculus.org/\">icculus</a> is working on a possible\
      \ macintosh fix for this, but i'm not sure.</li>\n<li>Shadows may extend beyond\
      \ the borders of the shadow projector's frustrum, appearing cut off. I've attempted\
      \ to minimize the visibility of this by making highly stretched shadows less\
      \ dark. (Deprecated. Fixed as of r1.2)</li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Todo\">Todo</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=3\" title=\"\
      Edit section: Todo\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>Blend between projector rotations when encountering a new lightsource.\
      \ Will be really nice when combined with the current fade in/out effect.</li>\n\
      <li>Find a better way to check for sunlight visibility when sunlight actor is\
      \ in a SkyZone.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Revisions\"\
      >Revisions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=4\" title=\"\
      Edit section: Revisions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>v1.2</p>\n<ul>\n<li>Both Effect_ShadowController and Effect_ShadowProjector\
      \ updated</li>\n<li>Added UpdateFrequency float, lower settings mean faster\
      \ updates but consume more CPU. Do not go lower than 0.03.</li>\n<li>Fastest\
      \ code revision yet</li>\n<li>Improvements on light selection and fading</li>\n\
      <li>Projector pitch limiter added, eliminates shadow breakage</li>\n</ul>\n\
      <p>v1.1</p>\n<ul>\n<li>Updated both Effect_ShadowController and Effect_ShadowProjector\
      \ with moderate changes</li>\n<li>Wrote in a system to fade between light sources,\
      \ no more shadow \"popping\"</li>\n<li>Fixed an accessed none when no sunlight\
      \ is present</li>\n<li>Improved blending between light sources</li>\n<li>Better,\
      \ darker shadows</li>\n<li>Sunlit shadows will now be given a static darkness</li>\n\
      <li>Added an extra sunlight check to avoid sunlight creating shadows indoors,\
      \ however this will not work with sunlight actors placed in skyboxes. Sunlight\
      \ will still be used as a fallback light though if no other lights are present,\
      \ even if in a skybox. Anyone know how to figure out what zone an actor is in?\
      \ Would help with this bit of the system.</li>\n</ul>\n<p>v1.0</p>\n<ul>\n<li>Initial\
      \ Release</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Summary\">Summary</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=5\" title=\"Edit\
      \ section: Summary\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I started playing with realtime directional shadows about 6 months ago and\
      \ realized it would be very difficult to do what I wanted without projecting\
      \ onto the playerpawn owning the shadow. UT2004 then added the bNoProjectOnOwner\
      \ variable which made me decide to revisit and finish this small side project.\
      \ What it does is allow you to specify a number of shadow \"slots\" to allocate\
      \ and create shadows for each new light source encountered within a spherical\
      \ radius, specified by the <b>MaxLightDistance</b> variable. To do this we spawn\
      \ a new custom shadow projector for each light in the <b>Lights</b> array, which\
      \ is filled by assessing the <b>LightPriority</b> of each light found in the\
      \ radius. Each shadow projector then works independantly to create a very nice-looking\
      \ directional shadow, and when combined by setting <b>MaxShadows</b> to 2 or\
      \ higher, creates some very real and atmospheric shadow webbing.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Requirements\">Requirements</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=6\"\
      \ title=\"Edit section: Requirements\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>You'll need to have access to a method of spawning\
      \ an actor clientside on all network clients, like copying and modifying the\
      \ PostBeginPlay() function in xPawn which is already used to spawn player shadows.\
      \ Mine looks like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> FOPawn <span class=\"kw1\">extends</span> <span class=\"\
      kw9\">xPawn</span>;\n \n<span class=\"kw1\">var</span> Effect_ShadowController\
      \ RealtimeShadow;\n<span class=\"kw1\">var</span> <span class=\"kw5\">bool</span>\
      \ bRealtimeShadows;\n \n<span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw6\">Super</span><span class=\"br0\">(</span><span class=\"kw9\"\
      >UnrealPawn</span><span class=\"br0\">)</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\tAssignInitialPose<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>bActorShadows <span class=\"sy0\">&amp;&amp;</span>\
      \ bPlayerShadows <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"\
      sy0\">!=</span> NM_DedicatedServer<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"co1\">// decide\
      \ which type of shadow to spawn</span>\n\t\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"sy0\">!</span>bRealtimeShadows<span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tPlayerShadow <span class=\"\
      sy0\">=</span> <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'ShadowProjector'</span>,<span\
      \ class=\"kw6\">Self</span>,<span class=\"st0\">''</span>,<span class=\"kw7\"\
      >Location</span><span class=\"br0\">)</span>;\n\t\t\tPlayerShadow.<span class=\"\
      me0\">ShadowActor</span> <span class=\"sy0\">=</span> <span class=\"kw6\">self</span>;\n\
      \t\t\tPlayerShadow.<span class=\"me0\">bBlobShadow</span> <span class=\"sy0\"\
      >=</span> bBlobShadow;\n\t\t\tPlayerShadow.<span class=\"me0\">LightDirection</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span><span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\tPlayerShadow.<span\
      \ class=\"me0\">LightDistance</span> <span class=\"sy0\">=</span> <span class=\"\
      nu0\">320</span>;\n\t\t\tPlayerShadow.<span class=\"me0\">MaxTraceDistance</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">350</span>;\n\t\t\tPlayerShadow.<span\
      \ class=\"me0\">InitShadow</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\
      \t\t<span class=\"br0\">{</span>\n\t\t\tRealtimeShadow <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'Effect_ShadowController'</span>,<span\
      \ class=\"kw6\">self</span>,<span class=\"st0\">''</span>,<span class=\"kw7\"\
      >Location</span><span class=\"br0\">)</span>;\n\t\t\tRealtimeShadow.<span class=\"\
      kw7\">Instigator</span> <span class=\"sy0\">=</span> <span class=\"kw6\">self</span>;\n\
      \t\t\tRealtimeShadow.<span class=\"me0\">Initialize</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n\t\t<span class=\"br0\">}</span>\n\t\
      <span class=\"br0\">}</span>\n\tbCanDoubleJump <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\tbRealtimeShadows<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">true</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>This is only a snippet to explain how my shadow\
      \ controller is spawned, you must also destroy your shadow controller appropriately\
      \ when the pawn is destroyed, hide it when in vehicles, etc. Follow the methods\
      \ xPawn uses to control its <b>PlayerShadow</b> actor as an example.</p>\n<p><b>Note:</b>\
      \ when coming out of an idle state (setting bShadowActive=true again) you must\
      \ run FillLights() once to retrigger the timer loop. Thanks to Byte from <a\
      \ rel=\"nofollow\" class=\"external text\" href=\"http://shatteredoasis.jolt.co.uk/\"\
      >Shattered Oasis</a> for pointing this out.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Effect_ShadowController.uc\">Effect_ShadowController.uc</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=7\"\
      \ title=\"Edit section: Effect ShadowController.uc\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>Instead of ticking the shadow\
      \ projectors individually, we only need to tick this actor and update all shadows\
      \ at once. <b>bShadowActive</b> acts a master switch to toggle shadows on/off.\
      \ Everything else is otherwise commented in the script itself.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// This is a master class for controlling all shadows. \
      \ This is needed to spawn</span>\n<span class=\"co1\">// and determine the visibility\
      \ of all shadows.  It also keeps track of all the</span>\n<span class=\"co1\"\
      >// nearby lights.</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowController <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">Actor</span>\n\t<span class=\"kw1\">config</span><span\
      \ class=\"br0\">(</span>User<span class=\"br0\">)</span>;\n \n<span class=\"\
      co1\">// the type of shadow projector we're going to use</span>\n<span class=\"\
      kw1\">var</span> class<span class=\"sy0\">&lt;</span>Effect_ShadowProjector<span\
      \ class=\"sy0\">&gt;</span> Shadow<span class=\"re0\">Class</span>&lt; SEMI\
      \ &gt;\n \n<span class=\"co1\">// an array of shadows, the maximum allowed per\
      \ player can be specified below</span>\n<span class=\"kw1\">var</span> array<span\
      \ class=\"sy0\">&lt;</span>Effect_ShadowProjector<span class=\"sy0\">&gt;</span>\
      \ Shadows;\n \n<span class=\"co1\">// an array of static lights</span>\n<span\
      \ class=\"kw1\">var</span> array<span class=\"sy0\">&lt;</span>Light<span class=\"\
      sy0\">&gt;</span> LightList;\n \n<span class=\"co1\">// a special variable type,\
      \ lastlight is used for fading</span>\n<span class=\"kw1\">struct</span> LightGroup\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">var</span> <span class=\"\
      kw9\">Actor</span> CurrentLight;\n\t<span class=\"kw1\">var</span> <span class=\"\
      kw9\">Actor</span> LastLight;\n<span class=\"br0\">}</span>;\n \n<span class=\"\
      co1\">// an array of lightgroups, filled when spawned</span>\n<span class=\"\
      kw1\">var</span> array<span class=\"sy0\">&lt;</span>LightGroup<span class=\"\
      sy0\">&gt;</span> Lights;\n \n<span class=\"co1\">// the maximum distance a\
      \ light can be from a player to cast a shadow</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> MaxLightDistance;\n \n<span class=\"co1\"\
      >// update frequency for filling light array</span>\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">float</span> UpdateFrequency;\n \n<span class=\"co1\"\
      >// the sun</span>\n<span class=\"kw1\">var</span> <span class=\"kw9\">SunLight</span>\
      \ SunLightActor;\n \n<span class=\"co1\">// turns on/off all shadows</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">bool</span> bShadowActive;\n\
      \ \n<span class=\"co1\">// maximum allowed shadows per player, configurable</span>\n\
      <span class=\"kw1\">var</span> <span class=\"kw1\">globalconfig</span> <span\
      \ class=\"kw5\">int</span> MaxShadows;\n \n<span class=\"co1\">// how crisp\
      \ (detailed) the shadows should be.  The higher, the better</span>\n<span class=\"\
      co1\">// they look, but the worse they perform.</span>\n<span class=\"co1\"\
      >// Low = 128x128</span>\n<span class=\"co1\">// Medium = 256</span>\n<span\
      \ class=\"co1\">// High = 512</span>\n<span class=\"co1\">// Maximum = 1024\
      \ &lt;- can any modern video technology even run it at maximum?</span>\n<span\
      \ class=\"kw1\">var</span> <span class=\"kw1\">globalconfig</span> <span class=\"\
      kw1\">enum</span> CrispnessEnum\n<span class=\"br0\">{</span>\n\tLow,\n\tMedium,\n\
      \tHigh,\n\tMaximum\n<span class=\"br0\">}</span>ShadowCrispness;\n \n<span class=\"\
      kw1\">function</span> Initialize<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Light</span> LightActor;\n\t<span class=\"kw1\">local</span>\
      \ array<span class=\"sy0\">&lt;</span>SunLight<span class=\"sy0\">&gt;</span>\
      \ SunLights;\n\t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ i;\n \n\t<span class=\"co1\">// set the sunlight, pick the brightest one if\
      \ we have multiple</span>\n\t<span class=\"kw2\">foreach</span> <span class=\"\
      kw2\">AllActors</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Light'</span>,LightActor<span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"kw9\">SunLight</span><span class=\"br0\">(</span>LightActor<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tSunLights<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw9\">SunLight</span><span class=\"br0\">(</span>LightActor<span\
      \ class=\"br0\">)</span>;\n\t\t\ti<span class=\"sy0\">++</span>;\n\t\t<span\
      \ class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span> <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>LightActor.<span class=\"me0\">LightType</span>\
      \ <span class=\"sy0\">!=</span> LT_None <span class=\"sy0\">&amp;&amp;</span>\
      \ LightActor.<span class=\"me0\">LightBrightness</span> <span class=\"sy0\"\
      >&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n\t\t\t\
      LightList<span class=\"br0\">[</span>LightList.<span class=\"me0\">Length</span><span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> LightActor;\n\t<span class=\"\
      br0\">}</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>SunLights.<span\
      \ class=\"me0\">Length</span>;i<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>SunLightActor <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">None</span> <span class=\"sy0\">||</span> SunLightActor.<span\
      \ class=\"me0\">LightBrightness</span> <span class=\"sy0\">&lt;</span> SunLights<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">LightBrightness</span><span\
      \ class=\"br0\">)</span>\n\t\t\tSunLightActor <span class=\"sy0\">=</span> SunLights<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"co1\">// fill the arrays with placeholders</span>\n\
      \tShadows.<span class=\"me0\">Insert</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,MaxShadows<span class=\"br0\">)</span>;\n\tLights.<span\
      \ class=\"me0\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\"\
      >0</span>,MaxShadows<span class=\"br0\">)</span>;\n \n\t<span class=\"co1\"\
      >// enable</span>\n\tbShadowActive <span class=\"sy0\">=</span> <span class=\"\
      kw6\">true</span>;\n \n\t<span class=\"co1\">// build light array</span>\n\t\
      FillLights<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw4\">Timer</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \tFillLights<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span\
      \ class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> FillLights<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i, j;\n\t\
      <span class=\"kw1\">local</span> <span class=\"kw9\">actor</span> LightActor;\n\
      \t<span class=\"kw1\">local</span> array<span class=\"sy0\">&lt;</span>Actor<span\
      \ class=\"sy0\">&gt;</span> OrigLight;\n\t<span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">float</span> Diff;\n \n\t<span class=\"co1\">// clear array\
      \ of lights, leave LastLight alone to fade</span>\n\t<span class=\"kw2\">for</span>\
      \ <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\"\
      >0</span>;i<span class=\"sy0\">&lt;</span>MaxShadows;i<span class=\"sy0\">++</span><span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tOrigLight<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ Lights<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"\
      me0\">CurrentLight</span>;\n\t\tLights<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">CurrentLight</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>;\n\t<span class=\"br0\">}</span>\n \n\t<span\
      \ class=\"co1\">// set the location of the controller, for light detection purposes</span>\n\
      \t<span class=\"kw4\">SetLocation</span><span class=\"br0\">(</span><span class=\"\
      kw7\">Owner</span>.<span class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"co1\">// shadow is off</span>\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"sy0\">!</span>bShadowActive<span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span>;\n \n\t<span\
      \ class=\"co1\">// build the array of lights, we prioritize by both brightness\
      \ and distance</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"\
      sy0\">&lt;</span>LightList.<span class=\"me0\">Length</span>;i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\tDiff <span class=\"sy0\">=</span> <span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span>LightList<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">Location</span><span class=\"sy0\">-</span><span\
      \ class=\"kw7\">Owner</span>.<span class=\"kw7\">Location</span><span class=\"\
      br0\">)</span>;\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"br0\">(</span>LightList<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">bStatic</span> <span class=\"sy0\">||</span>\
      \ LightList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"\
      me0\">bDynamicLight</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Diff <span class=\"sy0\">&lt;</span> MaxLightDistance <span class=\"sy0\"\
      >&amp;&amp;</span> LightList<span class=\"br0\">[</span>i<span class=\"br0\"\
      >]</span>.<span class=\"me0\">LightRadius</span> <span class=\"sy0\">&gt;=</span>\
      \ <span class=\"br0\">(</span>Diff<span class=\"sy0\">*</span><span class=\"\
      nu0\">0.041</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Diff <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"\
      kw7\">Owner</span>.<span class=\"kw7\">CollisionRadius</span><span class=\"\
      sy0\">*</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> IsVisible<span class=\"br0\">(</span>LightList<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">//\
      \ (0.041 is not perfect)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>Lights<span class=\"br0\"\
      >[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"\
      me0\">CurrentLight</span> <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span> <span class=\"sy0\">&amp;&amp;</span> LightPriority<span class=\"\
      br0\">(</span>Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span class=\"\
      me0\">LightBrightness</span>,Lights<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span\
      \ class=\"me0\">LightRadius</span>,<span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span>Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span class=\"\
      me0\">Location</span><span class=\"sy0\">-</span><span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw7\">Location</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;</span> LightPriority<span class=\"br0\">(</span>LightList<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">LightBrightness</span>,LightList<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">LightRadius</span>,Diff<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t\t\t<span class=\"\
      kw2\">continue</span>;\n \n\t\t\t<span class=\"co1\">// this puts them in order\
      \ of priority</span>\n\t\t\t<span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>;j<span class=\"\
      sy0\">&lt;</span>MaxShadows;j<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n\t\t\t\tLights<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">CurrentLight</span> <span class=\"sy0\">=</span> Lights<span\
      \ class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>;\n \n\t\t\t\
      Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"\
      br0\">]</span>.<span class=\"me0\">CurrentLight</span> <span class=\"sy0\">=</span>\
      \ LightList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n\t\t\
      <span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\t<span class=\"\
      kw2\">foreach</span> <span class=\"kw2\">DynamicActors</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'Actor'</span>,LightActor<span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tDiff <span class=\"\
      sy0\">=</span> <span class=\"kw3\">VSize</span><span class=\"br0\">(</span>LightActor.<span\
      \ class=\"me0\">Location</span><span class=\"sy0\">-</span><span class=\"kw7\"\
      >Owner</span>.<span class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"co1\">// if we are within the light's radius, and it's shining\
      \ on at least one part of us, then add it to the array</span>\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>Diff <span class=\"sy0\">&lt;</span>\
      \ MaxLightDistance <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\"\
      >!</span>LightActor.<span class=\"me0\">bUnlit</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ LightActor.<span class=\"me0\">LightType</span> <span class=\"sy0\">!=</span>\
      \ LT_None <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw9\">Projectile</span><span\
      \ class=\"br0\">(</span>LightActor<span class=\"br0\">)</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Attachment_Base<span class=\"br0\">(</span>LightActor<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      sy0\">&amp;&amp;</span> Effect_TacLightGlow<span class=\"br0\">(</span>LightActor<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>LightActor.<span\
      \ class=\"me0\">bStatic</span> <span class=\"sy0\">||</span> LightActor.<span\
      \ class=\"me0\">bDynamicLight</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> LightActor.<span class=\"me0\">LightEffect</span> <span\
      \ class=\"sy0\">!=</span> LE_Sunlight <span class=\"sy0\">&amp;&amp;</span>\
      \ IsVisible<span class=\"br0\">(</span>LightActor.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> LightActor.<span\
      \ class=\"me0\">LightBrightness</span> <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> LightActor.<span\
      \ class=\"me0\">LightRadius</span> <span class=\"sy0\">&gt;=</span> <span class=\"\
      br0\">(</span>Diff<span class=\"sy0\">*</span><span class=\"nu0\">0.041</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> Diff <span class=\"\
      sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw7\">CollisionRadius</span><span class=\"sy0\">*</span><span class=\"\
      nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span\
      \ class=\"co1\">// (0.041 is not perfect)</span>\n\t\t<span class=\"br0\">{</span>\n\
      \t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>Lights<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">CurrentLight</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span> LightPriority<span class=\"\
      br0\">(</span>Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span class=\"\
      me0\">LightBrightness</span>,Lights<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span\
      \ class=\"me0\">LightRadius</span>,<span class=\"kw3\">VSize</span><span class=\"\
      br0\">(</span>Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span class=\"\
      me0\">Location</span><span class=\"sy0\">-</span><span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw7\">Location</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;</span> LightPriority<span class=\"br0\">(</span>LightActor.<span\
      \ class=\"me0\">LightBrightness</span>,LightActor.<span class=\"me0\">LightRadius</span>,Diff<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\t\t\t<span class=\"\
      kw2\">continue</span>;\n \n\t\t\t<span class=\"co1\">// this puts them in order\
      \ of priority</span>\n\t\t\t<span class=\"kw2\">for</span> <span class=\"br0\"\
      >(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>;i<span class=\"\
      sy0\">&lt;</span>MaxShadows;i<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n\t\t\t\tLights<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">CurrentLight</span> <span class=\"sy0\">=</span> Lights<span\
      \ class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>;\n \n\t\t\t\
      Lights<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"\
      br0\">]</span>.<span class=\"me0\">CurrentLight</span> <span class=\"sy0\">=</span>\
      \ LightActor;\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\
      \ \n\t<span class=\"co1\">// we'll use the sunlight as the very lowest priority\
      \ of lights</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>MaxShadows;i<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>Lights<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ SunlightActor <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>IsVisible<span\
      \ class=\"br0\">(</span>SunLightActor.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> Lights<span class=\"\
      br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">CurrentLight</span> <span class=\"sy0\">==</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n\t\
      \t<span class=\"br0\">{</span>\n\t\t\tLights<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span> <span class=\"\
      sy0\">=</span> SunLightActor;\n\t\t\t<span class=\"kw2\">break</span>;\n\t\t\
      <span class=\"br0\">}</span>\n \n \n\t<span class=\"co1\">// set up last light\
      \ for fading</span>\n\t<span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>MaxShadows;i<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\t\t\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>OrigLight<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">!=</span> Lights<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span><span\
      \ class=\"br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span>\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      br0\">{</span>\n\t\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>OrigLight<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span>\
      \ Lights<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>\
      \ <span class=\"sy0\">||</span> OrigLight<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">==</span> OrigLight<span class=\"\
      br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span\
      \ class=\"br0\">]</span><span class=\"br0\">)</span>\n\t\t\t\t\tOrigLight<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">None</span>;\n\t\t\t<span class=\"br0\">}</span>\n\t\t\
      \tLights<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"\
      me0\">LastLight</span> <span class=\"sy0\">=</span> OrigLight<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n\t\t<span class=\"br0\">}</span>\n\
      \ \n\t<span class=\"co1\">// loop it, loop it good</span>\n\t<span class=\"\
      kw4\">SetTimer</span><span class=\"br0\">(</span>UpdateFrequency,<span class=\"\
      kw6\">false</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// simple function for determining the priority of a\
      \ light</span>\n<span class=\"kw1\">function</span> <span class=\"kw5\">float</span>\
      \ LightPriority<span class=\"br0\">(</span><span class=\"kw5\">float</span>\
      \ Brightness, <span class=\"kw5\">float</span> Radius, <span class=\"kw5\">float</span>\
      \ Distance<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">float</span> Priority;\n \n\
      \t<span class=\"co1\">// brightness takes higher priority</span>\n\tPriority\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Brightness<span class=\"\
      sy0\">*</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">/</span>Distance;\n \n\t<span class=\"co1\">// lights that are\
      \ very close get higher priority</span>\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>Distance <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">0.1</span> <span class=\"sy0\">*</span> MaxLightDistance<span class=\"\
      br0\">)</span>\n\t\tPriority <span class=\"sy0\">*=</span> <span class=\"nu0\"\
      >1.5</span>;\n \n\t<span class=\"co1\">// lights with very small radii shouldn't\
      \ really cast shadows</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>Radius <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2.0</span><span\
      \ class=\"br0\">)</span>\n\t\tPriority <span class=\"sy0\">*=</span> <span class=\"\
      br0\">(</span>Radius<span class=\"sy0\">*</span><span class=\"nu0\">0.38</span><span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">return</span> Priority;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> IsVisible<span class=\"br0\">(</span><span class=\"kw5\">vector</span>\
      \ Loc<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw1\">local</span> <span class=\"kw5\">vector</span> FootLocation;\n \n\t<span\
      \ class=\"co1\">// get a location near the feet</span>\n\tFootLocation <span\
      \ class=\"sy0\">=</span> <span class=\"kw7\">Owner</span>.<span class=\"kw7\"\
      >Location</span>;\n\tFootLocation.<span class=\"me0\">Z</span> <span class=\"\
      sy0\">-=</span> <span class=\"kw7\">Owner</span>.<span class=\"kw7\">CollisionHeight</span><span\
      \ class=\"sy0\">*</span><span class=\"nu0\">0.49</span>;\n \n\t<span class=\"\
      co1\">// not very clean, returns true if either the head, feet, or middle torso\
      \ of the player is visible to Loc</span>\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"kw4\">FastTrace</span><span class=\"br0\"\
      >(</span>Loc,<span class=\"kw7\">Owner</span>.<span class=\"kw7\">Location</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw4\">FastTrace</span><span\
      \ class=\"br0\">(</span>Loc,<span class=\"kw7\">Owner</span>.<span class=\"\
      kw4\">GetBoneCoords</span><span class=\"br0\">(</span><span class=\"st0\">'head'</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">Origin</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">||</span> <span class=\"kw4\">FastTrace</span><span\
      \ class=\"br0\">(</span>Loc,FootLocation<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw4\">Tick</span><span class=\"br0\">(</span><span class=\"kw5\">float</span>\
      \ dt<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      co1\">// fallback</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"kw7\">Owner</span> <span class=\"sy0\">==</span> <span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t\t<span class=\"\
      kw2\">return</span>;\n \n\t<span class=\"co1\">// update all shadows</span>\n\
      \tUpdateShadows<span class=\"br0\">(</span>dt<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> UpdateShadows<span\
      \ class=\"br0\">(</span><span class=\"kw5\">float</span> dt<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">int</span> i;\n \n\t<span class=\"kw2\">for</span> <span\
      \ class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span\
      \ class=\"sy0\">&lt;</span>Lights.<span class=\"me0\">Length</span>;i<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"co1\">// disable the shadow attached to this slot if light\
      \ no longer active, or if manually made inactive</span>\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Lights<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      sy0\">&amp;&amp;</span> Lights<span class=\"br0\">[</span>i<span class=\"br0\"\
      >]</span>.<span class=\"me0\">LastLight</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span> <span class=\"\
      sy0\">||</span> <span class=\"sy0\">!</span>bShadowActive<span class=\"br0\"\
      >)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Shadows<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n\t\t\t\tShadows<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">DisableShadow</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n\t\t\t<span class=\"kw2\">continue</span>;\n\
      \t\t<span class=\"br0\">}</span>\n \n\t\t<span class=\"co1\">// spawn a new\
      \ shadow if it doesn't already exist</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>Shadows<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>\n\t\t\tShadows<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">=</span> SpawnShadow<span class=\"br0\">(</span><span\
      \ class=\"kw5\">rotator</span><span class=\"br0\">(</span>Lights<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>.<span\
      \ class=\"me0\">Location</span><span class=\"sy0\">-</span><span class=\"kw7\"\
      >Location</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \ \n\t\t<span class=\"co1\">// update each shadow</span>\n\t\tShadows<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">UpdateShadow</span><span\
      \ class=\"br0\">(</span>dt,i,<span class=\"kw6\">self</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n\
      <span class=\"kw1\">function</span> Effect_ShadowProjector SpawnShadow<span\
      \ class=\"br0\">(</span><span class=\"kw5\">rotator</span> LightRotation<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span> Effect_ShadowProjector NewShadow;\n \n\t<span class=\"co1\">//\
      \ spawn and initialize a shadow projector</span>\n\tNewShadow <span class=\"\
      sy0\">=</span> <span class=\"kw4\">spawn</span><span class=\"br0\">(</span>ShadowClass,<span\
      \ class=\"kw7\">Owner</span>,,<span class=\"kw7\">Location</span>,LightRotation<span\
      \ class=\"br0\">)</span>;\n\tNewShadow.<span class=\"kw3\">Disable</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'Tick'</span><span class=\"br0\"\
      >)</span>;\n\tNewShadow.<span class=\"me0\">InitializeFor</span><span class=\"\
      br0\">(</span><span class=\"kw6\">self</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"kw2\">return</span> NewShadow;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">function</span> <span class=\"kw4\">Destroyed</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n \n\t\
      <span class=\"kw3\">Disable</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Tick'</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\">//\
      \ destroy all shadows</span>\n\t<span class=\"kw2\">for</span> <span class=\"\
      br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span\
      \ class=\"sy0\">&lt;</span>MaxShadows;i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>Shadows<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t\t\tShadows<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"co1\">// internal</span>\n\tUpdateFrequency<span class=\"sy0\"\
      >=</span><span class=\"nu0\">0.1</span>\n\tMaxShadows<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">2</span>\n\tMaxLightDistance<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">1300.0</span>\n\tShadowCrispness<span class=\"sy0\">=</span>Low\n\
      \tShadowClass<span class=\"sy0\">=</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Effect_ShadowProjector'</span>\n \n\t<span class=\"co1\">//\
      \ settings</span>\n\tbNoDelete<span class=\"sy0\">=</span><span class=\"kw6\"\
      >false</span>\n\tbStatic<span class=\"sy0\">=</span><span class=\"kw6\">false</span>\n\
      \tbHidden<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\t<span\
      \ class=\"kw7\">DrawType</span><span class=\"sy0\">=</span><span class=\"kw7\"\
      >DT_None</span>\n\t<span class=\"kw7\">RemoteRole</span><span class=\"sy0\"\
      >=</span><span class=\"kw7\">ROLE_None</span>\n\t<span class=\"kw7\">Physics</span><span\
      \ class=\"sy0\">=</span><span class=\"kw7\">PHYS_None</span>\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Effect_ShadowProjector.uc\"\
      >Effect_ShadowProjector.uc</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=8\"\
      \ title=\"Edit section: Effect ShadowProjector.uc\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The actual shadow projector, much better than the\
      \ old UT200x shadow projector.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// Similar to ShadowProjector, just a lot better.  This\
      \ shadow projector, while</span>\n<span class=\"co1\">// always in the same\
      \ relative location to the player model, will dynamically</span>\n<span class=\"\
      co1\">// adjust its FOV and also feed the ShadowBitmapMaterial new lighting\
      \ data on</span>\n<span class=\"co1\">// the fly.  It uses a more exaggerated\
      \ FOV than the standard UT200x shadows,</span>\n<span class=\"co1\">// because\
      \ it looks so much cooler :).  It also uses the ShadowCrispness </span>\n<span\
      \ class=\"co1\">// setting of the ShadowController to set a larger ShadowBitmapMaterial\
      \ size.</span>\n<span class=\"co1\">// Note that the bigger the shadow material\
      \ the more data is being passed to</span>\n<span class=\"co1\">// video each\
      \ frame, so performance will worsen exponentially as you go higher.</span>\n\
      <span class=\"co1\">// I had to do a lot of little tweaks and hack some settings\
      \ in to get the</span>\n<span class=\"co1\">// projector to do what i wanted,\
      \ and not cut off at strange angles.</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowProjector <span class=\"kw1\"\
      >extends</span> <span class=\"kw9\">Projector</span>;\n \n<span class=\"kw1\"\
      >var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      kw5\">vector</span> LightDirection;\n<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"kw5\">float</span>\
      \ LightDistance, InterpolationRate, MaxFOV, FadeSpeed, DarknessScale;\n<span\
      \ class=\"kw1\">var</span> <span class=\"kw5\">ShadowBitmapMaterial</span> ShadowTexture;\n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">bool</span> bFadeIn;\n \n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw6\">Super</span><span class=\"br0\">(</span><span class=\"\
      kw9\">Actor</span><span class=\"br0\">)</span>.<span class=\"kw4\">PostBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"co1\">// these don't need to tick, we update all shadows at\
      \ the same time in the controller</span>\n<span class=\"kw1\">function</span>\
      \ <span class=\"kw4\">Tick</span><span class=\"br0\">(</span><span class=\"\
      kw5\">float</span> dt<span class=\"br0\">)</span> <span class=\"br0\">{</span><span\
      \ class=\"br0\">}</span>\n \n<span class=\"co1\">// this turns the shadow off</span>\n\
      <span class=\"kw1\">function</span> DisableShadow<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"co1\"\
      >// detach</span>\n\tDetachProjector<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n \n\t<span class=\"co1\">// stop shadow texture from being\
      \ reuploaded to video here\t</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>ShadowTexture <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\
      \tShadowTexture.<span class=\"me0\">Dirty</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n\t\tShadowTexture.<span class=\"me0\">ShadowActor</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t<span class=\"\
      br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// initialize</span>\n\
      <span class=\"kw1\">function</span> InitializeFor<span class=\"br0\">(</span>Effect_ShadowController\
      \ ShadowController<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>ShadowController.<span\
      \ class=\"kw7\">Owner</span> <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\
      \t<span class=\"co1\">// set the Owner</span>\n\t\t<span class=\"kw4\">SetOwner</span><span\
      \ class=\"br0\">(</span>ShadowController.<span class=\"kw7\">Owner</span><span\
      \ class=\"br0\">)</span>;\n \n\t\t<span class=\"co1\">// allocate the shadow\
      \ texture</span>\n\t\t<span class=\"kw2\">switch</span> <span class=\"br0\"\
      >(</span>ShadowController.<span class=\"me0\">ShadowCrispness</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw2\"\
      >case</span> Medium:\n\t\t\t\tShadowTexture <span class=\"sy0\">=</span> <span\
      \ class=\"kw5\">ShadowBitmapMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span class=\"\
      me0\">AllocateObject</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Effect_ShadowBitmapMaterialMedium'</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"kw2\">break</span>;\n\
      \ \n\t\t\t<span class=\"kw2\">case</span> High:\n\t\t\t\tShadowTexture <span\
      \ class=\"sy0\">=</span> <span class=\"kw5\">ShadowBitmapMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Effect_ShadowBitmapMaterialHigh'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"\
      kw2\">break</span>;\n \n\t\t\t<span class=\"kw2\">case</span> Maximum:\n\t\t\
      \t\tShadowTexture <span class=\"sy0\">=</span> <span class=\"kw5\">ShadowBitmapMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Effect_ShadowBitmapMaterialMax'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"\
      kw2\">break</span>;\n \n\t\t\t<span class=\"kw1\">Default</span>:\n\t\t\t\t\
      ShadowTexture <span class=\"sy0\">=</span> <span class=\"kw5\">ShadowBitmapMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"kw8\"\
      >ObjectPool</span>.<span class=\"me0\">AllocateObject</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'Effect_ShadowBitmapMaterialLow'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"\
      kw2\">break</span>;\n \n\t\t<span class=\"br0\">}</span>\n \n\t\t<span class=\"\
      co1\">// set projector texture</span>\n\t\tProjTexture <span class=\"sy0\">=</span>\
      \ ShadowTexture;\n \n\t\t<span class=\"co1\">// initialize the shadow texture</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>ShadowTexture\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\tShadowTexture.<span\
      \ class=\"me0\">Invalid</span> <span class=\"sy0\">=</span> <span class=\"kw6\"\
      >false</span>;\n\t\t\tShadowTexture.<span class=\"me0\">ShadowActor</span> <span\
      \ class=\"sy0\">=</span> <span class=\"kw7\">Owner</span>;\n\t\t\tShadowTexture.<span\
      \ class=\"me0\">bBlobShadow</span> <span class=\"sy0\">=</span> <span class=\"\
      kw6\">false</span>;\n\t\t\tShadowTexture.<span class=\"me0\">CullDistance</span>\
      \ <span class=\"sy0\">=</span> CullDistance; \n\t\t<span class=\"br0\">}</span>\n\
      \t\t<span class=\"kw2\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t\
      <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Name</span><span class=\"sy0\">$</span><span class=\"st0\">\".InitializeFor:\
      \ No shadow texture!  Escaping...\"</span><span class=\"br0\">)</span>;\n\t\t\
      \t<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n\t\t<span class=\"br0\">}</span>\n\t<span class=\"br0\">}</span>\n\
      \t<span class=\"kw2\">else</span>\n\t\t<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"kw5\">Name</span><span class=\"sy0\">$</span><span\
      \ class=\"st0\">\".InitializeFor: No Owner!\"</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">// updates this shadow's\
      \ location, rotation, and FOV</span>\n<span class=\"kw1\">function</span> UpdateShadow<span\
      \ class=\"br0\">(</span><span class=\"kw5\">float</span> dt, <span class=\"\
      kw5\">int</span> LN, Effect_ShadowController ShadowController<span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">Plane</span> BoundingSphere;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">Actor</span> ShadowLight;\n\t<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> Diff, ShadowLocation, Origin;\n\t<span class=\"\
      kw1\">local</span> <span class=\"kw5\">rotator</span> LightRotation, AdjustedRotation;\n\
      \t<span class=\"kw1\">local</span> <span class=\"kw5\">float</span> Interpolation;\n\
      \t<span class=\"kw1\">local</span> <span class=\"kw5\">bool</span> bFadeOut;\n\
      \ \n\t<span class=\"co1\">// detach projector</span>\n\tDetachProjector<span\
      \ class=\"br0\">(</span><span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"co1\">// fallback, don't draw if hidden or no shadow texture</span>\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"kw7\"\
      >Owner</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"sy0\">||</span> <span class=\"kw7\">Owner</span>.<span class=\"\
      me0\">bHidden</span> <span class=\"sy0\">||</span> ShadowTexture <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n\
      \t\t<span class=\"kw2\">return</span>;\n \n\t<span class=\"co1\">// fallback\
      \ and destroy</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>ShadowTexture.<span\
      \ class=\"me0\">Invalid</span><span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n\t\t<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw2\">return</span>;\n\t<span class=\"\
      br0\">}</span>\n \n\t<span class=\"co1\">// cull more if we haven't rendered\
      \ this pawn in 5 seconds</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"me0\">TimeSeconds</span>\
      \ <span class=\"sy0\">-</span> <span class=\"kw7\">Owner</span>.<span class=\"\
      me0\">LastRenderTime</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >5</span><span class=\"br0\">)</span>\n\t\tCullDistance <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"\
      kw1\">Default</span>.<span class=\"me0\">CullDistance</span>;\n\t<span class=\"\
      kw2\">else</span>\n\t\tCullDistance <span class=\"sy0\">=</span> <span class=\"\
      kw1\">Default</span>.<span class=\"me0\">CullDistance</span>;\n \n\t<span class=\"\
      co1\">// cull shadows much earlier if below min framerate, important</span>\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"kw7\"\
      >Level</span>.<span class=\"me0\">bDropDetail</span><span class=\"br0\">)</span>\n\
      \t\tShadowTexture.<span class=\"me0\">CullDistance</span> <span class=\"sy0\"\
      >=</span> <span class=\"nu0\">0.6</span><span class=\"sy0\">*</span>CullDistance;\n\
      \t<span class=\"kw2\">else</span>\n\t\tShadowTexture.<span class=\"me0\">CullDistance</span>\
      \ <span class=\"sy0\">=</span> CullDistance;\n \n\t<span class=\"co1\">// in\
      \ case shadow was disabled earlier</span>\n\tShadowTexture.<span class=\"me0\"\
      >ShadowActor</span> <span class=\"sy0\">=</span> <span class=\"kw7\">Owner</span>;\n\
      \ \n\t<span class=\"co1\">// set light</span>\n\tShadowLight <span class=\"\
      sy0\">=</span> ShadowController.<span class=\"me0\">Lights</span><span class=\"\
      br0\">[</span>LN<span class=\"br0\">]</span>.<span class=\"me0\">CurrentLight</span>;\n\
      \ \n\t<span class=\"co1\">// fade out if necessary</span>\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ShadowController.<span class=\"\
      me0\">Lights</span><span class=\"br0\">[</span>LN<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">LastLight</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span><span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>ShadowTexture.<span\
      \ class=\"me0\">ShadowDarkness</span> <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">5</span><span class=\"br0\">)</span>\n\t\t<span class=\"br0\"\
      >{</span>\n\t\t\tShadowLight <span class=\"sy0\">=</span> ShadowController.<span\
      \ class=\"me0\">Lights</span><span class=\"br0\">[</span>LN<span class=\"br0\"\
      >]</span>.<span class=\"me0\">LastLight</span>;\n\t\t\tbFadeOut <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n\t\t<span class=\"br0\">}</span>\n\
      \t\t<span class=\"kw2\">else</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t\
      ShadowController.<span class=\"me0\">Lights</span><span class=\"br0\">[</span>LN<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">LastLight</span> <span class=\"\
      sy0\">=</span> <span class=\"kw5\">None</span>;\n\t\t\tbFadeOut <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n\t\t\tbFadeIn <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n\t\t\tDarknessScale <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>;\n\t\t<span class=\"br0\">}</span>\n\
      \t<span class=\"br0\">}</span>\n \n\t<span class=\"co1\">// fallback if no more\
      \ lights after fadeout</span>\n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>ShadowLight <span class=\"sy0\">==</span> <span class=\"kw5\"\
      >None</span><span class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span>;\n\
      \ \n\t<span class=\"co1\">// get the direction of the light</span>\n\tDiff <span\
      \ class=\"sy0\">=</span> ShadowLight.<span class=\"kw7\">Location</span> <span\
      \ class=\"sy0\">-</span> <span class=\"kw7\">Owner</span>.<span class=\"kw7\"\
      >Location</span>;\n \n\t<span class=\"co1\">// set light distance</span>\n\t\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ShadowLight.<span\
      \ class=\"me0\">LightEffect</span> <span class=\"sy0\">==</span> LE_Sunlight<span\
      \ class=\"br0\">)</span>\n\t\tLightDistance <span class=\"sy0\">=</span> ShadowController.<span\
      \ class=\"me0\">MaxLightDistance</span><span class=\"sy0\">*</span><span class=\"\
      nu0\">0.3</span>;\n\t<span class=\"kw2\">else</span>\n\t\tLightDistance <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">FClamp</span><span class=\"br0\"\
      >(</span><span class=\"kw3\">VSize</span><span class=\"br0\">(</span>Diff<span\
      \ class=\"br0\">)</span>, ShadowController.<span class=\"me0\">MaxLightDistance</span><span\
      \ class=\"sy0\">*</span><span class=\"nu0\">0.1</span>, ShadowController.<span\
      \ class=\"me0\">MaxLightDistance</span><span class=\"sy0\">*</span><span class=\"\
      nu0\">0.3</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\">// get\
      \ a location along the path of the light slightly away from center of player</span>\n\
      \tShadowLocation <span class=\"sy0\">=</span> <span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">+</span> <span class=\"\
      nu0\">4</span><span class=\"sy0\">*</span><span class=\"kw3\">Normal</span><span\
      \ class=\"br0\">(</span>Diff<span class=\"br0\">)</span>;\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>ShadowLocation.<span class=\"me0\"\
      >Z</span> <span class=\"sy0\">&lt;</span> <span class=\"kw7\">Owner</span>.<span\
      \ class=\"kw7\">Location</span>.<span class=\"me0\">Z</span><span class=\"br0\"\
      >)</span>\n\t\tShadowLocation.<span class=\"me0\">Z</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw7\">Owner</span>.<span class=\"kw7\">Location</span>.<span\
      \ class=\"me0\">Z</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span>;\n\
      \ \n\t<span class=\"co1\">// set location</span>\n\t<span class=\"kw4\">SetLocation</span><span\
      \ class=\"br0\">(</span>ShadowLocation <span class=\"sy0\">+</span> <span class=\"\
      kw3\">vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">8</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n \n\t<span class=\"co1\"\
      >// determine correct rotation, interpolate</span>\n\tOrigin <span class=\"\
      sy0\">=</span> ShadowLocation <span class=\"sy0\">+</span> ShadowTexture.<span\
      \ class=\"me0\">LightDirection</span> <span class=\"sy0\">*</span> ShadowTexture.<span\
      \ class=\"me0\">LightDistance</span>;\n\tInterpolation <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">FMin</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1.0</span>, <span class=\"br0\">(</span>dt<span class=\"sy0\">*</span>InterpolationRate<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n\tOrigin <span class=\"\
      sy0\">+=</span> <span class=\"br0\">(</span>ShadowLight.<span class=\"kw7\"\
      >Location</span> <span class=\"sy0\">-</span> Origin<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> Interpolation;\t\n\tDiff <span class=\"sy0\"\
      >=</span> ShadowLocation <span class=\"sy0\">-</span> Origin;\n\tLightRotation\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">rotator</span><span class=\"\
      br0\">(</span>Diff<span class=\"br0\">)</span>;\n \n\t<span class=\"co1\">//\
      \ calculate FOV</span>\n\tBoundingSphere <span class=\"sy0\">=</span> <span\
      \ class=\"kw7\">Owner</span>.<span class=\"me0\">GetRenderBoundingSphere</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\tFOV <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">Atan</span><span\
      \ class=\"br0\">(</span>BoundingSphere.<span class=\"me0\">W</span><span class=\"\
      sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span\
      \ class=\"nu0\">160</span>, LightDistance<span class=\"br0\">)</span> <span\
      \ class=\"sy0\">*</span> <span class=\"nu0\">180</span><span class=\"sy0\">/</span><span\
      \ class=\"kw6\">PI</span><span class=\"br0\">)</span>;\n \n\t<span class=\"\
      co1\">// set rotation, compensate for FOV warping -- kinda hackish, but fixes\
      \ shadows that </span>\n\t<span class=\"co1\">// bend so much they detach from\
      \ the pawn</span>\n\tAdjustedRotation <span class=\"sy0\">=</span> <span class=\"\
      kw5\">rotator</span><span class=\"br0\">(</span><span class=\"kw7\">Owner</span>.<span\
      \ class=\"me0\">Location</span><span class=\"sy0\">-</span>ShadowLight.<span\
      \ class=\"kw7\">Location</span><span class=\"br0\">)</span>;\n\tAdjustedRotation.<span\
      \ class=\"me0\">Pitch</span> <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >Clamp</span><span class=\"br0\">(</span>AdjustedRotation.<span class=\"me0\"\
      >Pitch</span>, <span class=\"sy0\">-</span><span class=\"nu0\">20500</span>,\
      \ <span class=\"sy0\">-</span><span class=\"nu0\">9500</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"kw4\">SetRotation</span><span class=\"br0\"\
      >(</span>AdjustedRotation<span class=\"br0\">)</span>;\n \n\t<span class=\"\
      co1\">// determine correct direction of light</span>\n\tLightDirection <span\
      \ class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"kw5\">vector</span><span\
      \ class=\"br0\">(</span>AdjustedRotation<span class=\"br0\">)</span><span class=\"\
      sy0\">*</span>LightDistance;\n \n\t<span class=\"co1\">// set light direction</span>\n\
      \tShadowTexture.<span class=\"me0\">LightDirection</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>LightDirection<span\
      \ class=\"br0\">)</span>;\n \n\t<span class=\"co1\">// set lightdistance</span>\n\
      \tShadowTexture.<span class=\"me0\">LightDistance</span> <span class=\"sy0\"\
      >=</span> LightDistance;\n \n\t<span class=\"co1\">// update shadow texture\
      \ FOV</span>\n\tShadowTexture.<span class=\"me0\">LightFOV</span> <span class=\"\
      sy0\">=</span> FOV;\n \n\t<span class=\"co1\">// set the drawscale, exaggerate\
      \ a bit</span>\n\t<span class=\"kw4\">SetDrawScale</span><span class=\"br0\"\
      >(</span><span class=\"br0\">(</span>LightDistance<span class=\"sy0\">*</span><span\
      \ class=\"nu0\">0.82</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >*</span> <span class=\"kw3\">tan</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0.5</span><span class=\"sy0\">*</span>FOV<span class=\"sy0\">*</span><span\
      \ class=\"kw6\">PI</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span\
      \ class=\"nu0\">0.45</span><span class=\"sy0\">*</span>ShadowTexture.<span class=\"\
      me0\">USize</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"co1\">// fade out gracefully</span>\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>bFadeOut<span class=\"br0\">)</span>\n\
      \t\tShadowTexture.<span class=\"me0\">ShadowDarkness</span> <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Max</span><span class=\"br0\">(</span>ShadowTexture.<span\
      \ class=\"me0\">ShadowDarkness</span> <span class=\"sy0\">-</span> <span class=\"\
      br0\">(</span>FadeSpeed<span class=\"sy0\">*</span>dt<span class=\"br0\">)</span>,\
      \ <span class=\"nu0\">0</span><span class=\"br0\">)</span>;\n\t<span class=\"\
      kw2\">else</span>\n\t<span class=\"br0\">{</span>\n\t\tShadowTexture.<span class=\"\
      me0\">ShadowDarkness</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >140</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"\
      nu0\">1.0</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">FClamp</span><span class=\"br0\">(</span><span class=\"kw3\"\
      >VSize</span><span class=\"br0\">(</span>ShadowLight.<span class=\"me0\">Location</span><span\
      \ class=\"sy0\">-</span><span class=\"kw7\">Owner</span>.<span class=\"kw7\"\
      >Location</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>ShadowController.<span\
      \ class=\"me0\">MaxLightDistance</span>, <span class=\"nu0\">0.0</span>, <span\
      \ class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">70</span>;\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>bFadeIn <span\
      \ class=\"sy0\">&amp;&amp;</span> DarknessScale <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\tDarknessScale <span class=\"sy0\">=</span> <span class=\"\
      kw3\">FMin</span><span class=\"br0\">(</span>DarknessScale <span class=\"sy0\"\
      >+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>FadeSpeed<span\
      \ class=\"sy0\">*</span><span class=\"nu0\">0.007</span><span class=\"br0\"\
      >)</span><span class=\"sy0\">*</span>dt<span class=\"br0\">)</span>, <span class=\"\
      nu0\">1.0</span><span class=\"br0\">)</span>;\n\t\t\tShadowTexture.<span class=\"\
      me0\">ShadowDarkness</span> <span class=\"sy0\">=</span> <span class=\"kw5\"\
      >float</span><span class=\"br0\">(</span>ShadowTexture.<span class=\"me0\">ShadowDarkness</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">*</span>DarknessScale;\n\t\t<span\
      \ class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\t\t\tbFadeIn\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">false</span>;\n\t<span class=\"\
      br0\">}</span>\n \n\t<span class=\"co1\">// dirty texture for reuploading to\
      \ video</span>\n\tShadowTexture.<span class=\"me0\">Dirty</span> <span class=\"\
      sy0\">=</span> <span class=\"kw6\">true</span>;\n \n\t<span class=\"co1\">//\
      \ reattach projector</span>\n\tAttachProjector<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >function</span> <span class=\"kw4\">Destroyed</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"co1\"\
      >// free shadow texture from the object pool</span>\n\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>ShadowTexture <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\tShadowTexture.<span class=\"me0\">ShadowActor</span> <span class=\"\
      sy0\">=</span> <span class=\"kw5\">None</span>;\n \n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ShadowTexture.<span\
      \ class=\"me0\">Invalid</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      kw7\">Level</span>.<span class=\"kw8\">ObjectPool</span>.<span class=\"me0\"\
      >FreeObject</span><span class=\"br0\">(</span>ShadowTexture<span class=\"br0\"\
      >)</span>;\n \n\t\t<span class=\"co1\">// must set to none</span>\n\t\tShadowTexture\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t\tProjTexture\
      \ <span class=\"sy0\">=</span> <span class=\"kw5\">None</span>;\n\t<span class=\"\
      br0\">}</span>\n\t<span class=\"kw6\">Super</span>.<span class=\"kw4\">Destroyed</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"co1\">// this lets us have shadows that cast onto other players</span>\n\
      \tbProjectActor<span class=\"sy0\">=</span><span class=\"kw6\">true</span>\n\
      \t<span class=\"co1\">// ... made possible by this, so it doesn't project onto\
      \ the pawn owning it</span>\n\tbNoProjectOnOwner<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">true</span>\n\t<span class=\"co1\">// how quickly we should\
      \ interpolate</span>\n\tInterpolationRate<span class=\"sy0\">=</span><span class=\"\
      nu0\">2.5</span>\n\t<span class=\"co1\">// this should be dynamically updated\
      \ also</span>\n\tMaxTraceDistance<span class=\"sy0\">=</span><span class=\"\
      nu0\">165</span>\n\t<span class=\"co1\">// maximum FOV</span>\n\tMaxFOV<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">80.0</span>\n\t<span class=\"co1\"\
      >// how quickly to fade in/out</span>\n\tFadeSpeed<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">500.0</span>\n \n\tbProjectOnParallelBSP<span class=\"sy0\"\
      >=</span><span class=\"kw6\">true</span>\n\tbProjectOnAlpha<span class=\"sy0\"\
      >=</span><span class=\"kw6\">false</span>\n\tbClipBSP<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">true</span>\n\tbGradient<span class=\"sy0\">=</span><span class=\"\
      kw6\">false</span>\n\tbStatic<span class=\"sy0\">=</span><span class=\"kw6\"\
      >false</span>\n\tbOwnerNoSee<span class=\"sy0\">=</span><span class=\"kw6\"\
      >true</span>\n\tbDynamicAttach<span class=\"sy0\">=</span><span class=\"kw6\"\
      >true</span>\n\t<span class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span\
      \ class=\"kw7\">ROLE_None</span>\n\tCullDistance<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">1200.0</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"ShadowBitmapMaterial_Detail_Levels\">ShadowBitmapMaterial\
      \ Detail Levels</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=9\" title=\"\
      Edit section: ShadowBitmapMaterial Detail Levels\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Multiple detail levels; higher for crisper, more detailed\
      \ shadows, lower for performance.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowBitmapMaterialLow <span class=\"\
      kw1\">extends</span> <span class=\"kw5\">ShadowBitmapMaterial</span>;\n \n<span\
      \ class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\tUSize<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">128</span>\n\t<span class=\"kw3\"\
      >VSize</span><span class=\"sy0\">=</span><span class=\"nu0\">128</span>\n\t\
      UClamp<span class=\"sy0\">=</span><span class=\"nu0\">128</span>\n\tVClamp<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">128</span>\n\tUClampMode<span class=\"\
      sy0\">=</span>TC_Clamp\n\tVClampMode<span class=\"sy0\">=</span>TC_Clamp\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowBitmapMaterialMedium <span class=\"\
      kw1\">extends</span> Effect_ShadowBitmapMaterialLow;\n \n<span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"br0\">{</span>\n\tUSize<span class=\"\
      sy0\">=</span><span class=\"nu0\">256</span>\n\t<span class=\"kw3\">VSize</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">256</span>\n \n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowBitmapMaterialHigh <span class=\"\
      kw1\">extends</span> Effect_ShadowBitmapMaterialLow;\n \n<span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"br0\">{</span>\n\tUSize<span class=\"\
      sy0\">=</span><span class=\"nu0\">512</span>\n\t<span class=\"kw3\">VSize</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">512</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// © 2004 Matt 'SquirrelZero' Farber</span>\n<span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> Effect_ShadowBitmapMaterialMax <span class=\"\
      kw1\">extends</span> Effect_ShadowBitmapMaterialLow;\n \n<span class=\"kw1\"\
      >defaultproperties</span>\n<span class=\"br0\">{</span>\n\tUSize<span class=\"\
      sy0\">=</span><span class=\"nu0\">1024</span>\n\t<span class=\"kw3\">VSize</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1024</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Notes\"\
      >Notes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=10\" title=\"\
      Edit section: Notes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>That's all there is to it thankfully, once spawned the controller and projectors\
      \ really take care of the rest. Many people will most likely be satisfied with\
      \ the default settings, although feel free to tweak and explore. Just make sure\
      \ you post any positive results, improvements are always welcome!</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Disclaimer\">Disclaimer</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=11\"\
      \ title=\"Edit section: Disclaimer\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This code is free for any kind of use including commercial\
      \ and non-commercial applications, just let me know what it's being used for,\
      \ only because I'm always interested in new applications or fresh ideas.</p>\n\
      <p><br /></p>\n<h2><span class=\"mw-headline\" id=\"Important\">Important</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=12\" title=\"Edit\
      \ section: Important\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>This code (version 1.2) is based on Frag.Ops. Some classes (e.g. Attachement_Base\
      \ and Effect_TacLightGlow) in \"Effect_ShadowController.uc\" are not available\
      \ in UT 2004. You will find these missing classes inside the mod \"Frag.Ops\"\
      . Without you can't compile an *.u file.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Files\">Files</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=13\" title=\"\
      Edit section: Files\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><a rel=\"nofollow\" class=\"external text\" href=\"http://games.DiscoverThat.co.uk\"\
      >Demonstration Mutator</a> - A UT2004 mutator written by JCBDigger to demonstrate\
      \ the realtime shadow system. It is based on the rev1.1 code with a few minor\
      \ changes to get it to work multiplayer. It is located under the header 'UT2004\
      \ Work In Progress', and please note that this is for demonstration purposes\
      \ only!</p>\n<h3><span class=\"mw-headline\" id=\"Comments\">Comments</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:SquirrelZero/RealtimeShadows?section=14\" title=\"Edit\
      \ section: Comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>SquirrelZero:</b> Any changes or improvements to my code is welcome.</p>\n\
      <p><b>Foxpaw:</b> There is already the <a href=\"/Legacy:Sourced_Player_Shadows\"\
      \ title=\"Legacy:Sourced Player Shadows\">Sourced Player Shadows</a> page..\
      \ maybe the two should be merged or something.</p>\n<p><b>SquirrelZero:</b>\
      \ That page is way too disorganized for me, and i don't have time to organize\
      \ it. It's a different method anyway. All pages i add from this one on will\
      \ be linked from the <a href=\"/Legacy:SquirrelZero\" title=\"Legacy:SquirrelZero\"\
      >SquirrelZero</a> page.</p>\n<p><b>SquirrelZero:</b> The code has been updated\
      \ to revision 1.1, key new feature is fading between shadows.</p>\n<p><b>Foxpaw:</b>\
      \ I noticed you were looking for a way to determine what zone an actor is in.\
      \ A reference to the zone an actor is in is available as Region.Zone.</p>\n\
      <p><b>SquirrelZero:</b> Oh, good find. I'll have to update the sunlight stuff\
      \ again in a bit.</p>\n<p><b>SquirrelZero:</b> Ooookay, this page was edited\
      \ 10 times yesterday and the only visible change i can see is that my preview\
      \ image is now missing. Please do not remove or change anything without documenting\
      \ your changes.</p>\n<p><b>JCBDigger:</b> I've used v1.1 of this code to create\
      \ a demonstration mutator. You can download it from my web site: <a rel=\"nofollow\"\
      \ class=\"external free\" href=\"http://games.DiscoverThat.co.uk\">http://games.DiscoverThat.co.uk</a>\
      \ in the 'UT2004 Work In Progress' section.</p>\n<p><b>SquirrelZero:</b> Nice\
      \ stuff, but it does look like it might not work in multiplayer. Still a great\
      \ way to preview it though&#160;:)</p>\n<p><b>JCBDigger:</b> Multiplayer is\
      \ proving more tricky than expected, I thought I would have it done by now,\
      \ but no!</p>\n<p><b>JCBDigger:</b> Finally it works multiplayer.</p>\n<p><b>dataangel</b>:\
      \ I've been experimenting jcb's mutator that implements squirrel's shadow code\
      \ and after some fiddling I've come up with some possible optimizations. I'm\
      \ not an unrealscript expert like Squirrel Zero, so this code is probably buggy\
      \ . I've attached my optimized version of his mutator below. All of my tests\
      \ were singleplayer on the NORMAL UT2K4 deathmatch map albatross. If you try\
      \ this mutator with FragOps I have no idea how it will mix with the existing\
      \ shadow system. If you must try with Fragops, you'll probably want to turn\
      \ its shadow option to None, then restart the game, and only try in botmatch\
      \ (but that's just a guess). This is meant as a proof of concept for shadow\
      \ optimizations to be included with future versions of FragOps.</p>\n<p>1. Option\
      \ to set MaxShadows per player. Defaulting to 1 so we only see shadow for the\
      \ highest priority light. Right now (again, at least in the mutator) MaxShadows\
      \ is set to 2. Half as many shadows gives in my tests what seems to be less\
      \ than half the performance hit. Yet a shadow was still visible most of the\
      \ time – so the tactical advantage would be mostly preserved. The advantage\
      \ compared to normal ut2k4 shadows comes in in that Squirrel's shadows can be\
      \ longer and wider mostly I think, not that there are more of them.</p>\n<p>2.\
      \ Separate detail levels for friendly and enemy shadows, defaulting to normal\
      \ shadows for friendlies and the lowest level of fancy shadow for enemies. Friendly\
      \ shadows are of little use tactically. Inparticular, this would help with the\
      \ laginess associated with the beginning of rounds when all of your team members\
      \ are standing bunched together around you. Note that the option in the mutator\
      \ to disable friendly shadows doesn't disable them entirely, it just makes friendlies\
      \ have normal ut2k4 shadows.</p>\n<p>3. Toggle for whether or not ragdolls have\
      \ shadows. Currently (at least in jcb's mutator) they do. Bodies usually fly\
      \ through the air from grenades and the like; times when fps is already dropping,\
      \ no need to shoot a dead horse Wink</p>\n<p>4. As far as I can tell it's unnecessary\
      \ for UpdateShadows() to run every tick. I altered this so now it runs every\
      \ .03 seconds, right after FillLights(). In game the shadows seemed to act the\
      \ same but I got better performance (spectating two bots w/ max detail settings\
      \ was actually somewhat playable speed). I'm not sure how SquirrelZero came\
      \ to the .03 number, it maybe possible to go higher, I suspect he just tweaked\
      \ it.</p>\n<p>5. Toggle to make it only show a player's shadow when you don't\
      \ have line of sight to them. Shadows are supposed to help tactically by letting\
      \ you see that your opponent is about to come around the corner. This option\
      \ makes it so that once they do come out from behind the corner, their shadow\
      \ disappears. This way you only see it when it's useful, and once you get in\
      \ the open firefight it stops sucking frames. I didn't do enough testing though\
      \ – my mutator may not actually be implementing this properly, can someone confirm\
      \ for me? In any case I bet Squirrel Zero can code it into FO if he likes the\
      \ idea Wink</p>\n<p>These optimizations/options together I think will enable\
      \ lower end players to see shadows just when they're gameplay relevant, and\
      \ thus letting alot more people take advantage of them.</p>\n<p>If you want\
      \ the source just export it.</p>\n<p>Post here how well this works for you.\
      \ Hope somebody benefits =)</p>\n<p>Download:</p>\n<p><a rel=\"nofollow\" class=\"\
      external autonumber\" href=\"http://battledome.wc3campaigns.com/k0d3/DAsShadows/DAsShadows.zip\"\
      >[2]</a></p>\n<p>P.S. The mutators defaults should be the most optimized. If\
      \ you want to see how the mutator was before, set MaxShadows to 2, uncheck the\
      \ line of sight option, check ragdoll shadows, uncheck the only render enemy\
      \ shadows option. Although to truly turn it back you'll also need to change\
      \ the code to get rid of #4.</p>\n<p><b>Bigcheese</b>:I have been using your\
      \ code for the hackerz (www.hackerz.tk) mod and i got it to work on people.\
      \ but then i tryed to use it on a new karma actor that i baced off of the exion\
      \ karma. it just adds online play and some other interesting things, but i want\
      \ to use dynamic showdows for it but i just dont know how to spawn them like\
      \ you do in pawn???</p>\n<p><b>Daemonica:</b> You wanted to know who's using\
      \ your code, it's so tasty the Undying Curse <a rel=\"nofollow\" class=\"external\
      \ free\" href=\"http://undying.sanffo.co.uk\">http://undying.sanffo.co.uk</a>\
      \ team are using it. Nice work SquirrelZero!</p>\n<p><b>SquirrelZero:</b> Glad\
      \ to see this is getting so much use&#160;:). I've improved it further to use\
      \ a rotation limiter, which effectively fixes the breakage on shadows that bend\
      \ too much. It probably runs a bit better, too. I'll post this 3rd revision\
      \ sometime soon, and maybe take some new videos of it in action.</p>\n<p><b>DJPaul:</b>\
      \ <a href=\"/Legacy:Esc\" title=\"Legacy:Esc\">Esc</a> is playing about with\
      \ producing a UT2004 version, and we are implementing this as I type.</p>\n\
      <p><b>DJPaul:</b> SquirrelZero/everyone, is this meant to work from first person\
      \ view? I specifically mean are you mmeant to see YOUR shadow from the first-person\
      \ view of YOUR pawn? I can only see the shadows (of my pawn) when I switch to\
      \ third person.</p>\n<p><b>SquirrelZero:</b> If the pawn is invisible, the shadow\
      \ will be too. Try doing bOwnerNoSee=false on both the projector and the pawn.\
      \ Just keep in mind that the native animation code for pawns will prevent them\
      \ from playing movement animations in first person, so you get upper body anims\
      \ but no lower. Some clever hacking can resolve it, though. By the way, i've\
      \ added a new code revision. It's highly recommended everyone update their mods\
      \ to use the new revision; it's faster and more accurate.</p>\n<p><b>Blue Ion:</b>\
      \ Could you (or anyone, of course) make a mutator out of your code like JCBDigger's?\
      \ You know for those of us that just want to download, download and download\
      \ and don't know a thing about UnrealScript&#160;;). The effect is impressive\
      \ and plays even better with just one shadow, too bad that sometimes the shadows\
      \ turns into evil black squares.</p>\n<p><b>EricBlade:</b> I just found this\
      \ page, and i have a couple questions, if anyone can help me out.. First, does\
      \ this work at all reasonably well in 2k3 (since it doesn't have bNoProjectOnOwner)?\
      \ Second, how might it perform with say 30 pawns on screen potentially using\
      \ it?</p>\n<p>... well ,I eventually answered myself. I forgot about this page\
      \ for several months, until I decided to do my own work in this area, and someone\
      \ on #unrealscript pointed me to here. One thing that I've found is by setting\
      \ the Projector's location to well above the Pawn's head, instead of slightly\
      \ below the Pawn.Location, you get a better look, and it doesn't draw so much\
      \ on itself (i don't have bProjectOnOwner or whatever) .. now to find ways to\
      \ improve it's CPU usage. BTW, Sunlight is referenced by Zone, not by world.\
      \ ... Further examination seems to indicate that the section commented \"determine\
      \ correct rotation, interpolate\" doesn't actually achieve anything, as none\
      \ of those variables seem to be used for any purpose.</p>\n<p>Here's some code\
      \ to simulate bNoProjectOnOwner=True for those that don't have it:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">event</span> <span class=\"kw4\">Touch</span><span class=\"\
      br0\">(</span><span class=\"kw9\">Actor</span> Other<span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span><span class=\"\
      br0\">(</span>Other <span class=\"sy0\">==</span> <span class=\"kw7\">Owner</span><span\
      \ class=\"br0\">)</span> <span class=\"kw2\">return</span>;\n\t<span class=\"\
      kw6\">super</span>.<span class=\"kw4\">Touch</span><span class=\"br0\">(</span>Other<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p><b>tom10320:</b> I was wondering if someone could help me. My computer is\
      \ not powerful enough to run UT3 but can run UT2004. I wanted to get this to\
      \ work but when I compile the code, it stops and says 'cannot open file. History\
      \ UObject' and 'Ucommandlet' or something like that. If aanyone ever reads this,\
      \ please help!</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.349 seconds\n\
      Real time usage: 1.265 seconds\nPreprocessor visited node count: 121/1000000\n\
      Preprocessor generated node count: 220/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:2910-0!*!0!!en!*!*\
      \ and timestamp 20221118034557 and revision id 34555\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Sourced Player Shadows"
  - ns: 100
    exists: true
    name: "Legacy:SquirrelZero"
  - ns: 100
    exists: true
    name: "Legacy:ShadowProjector"
  - ns: 100
    exists: true
    name: "Legacy:Esc"
  templates: []
  images: []
  externallinks:
  - "http://games.DiscoverThat.co.uk"
  - "http://undying.sanffo.co.uk"
  - "http://www.frag-ops.com/content/Demos/Shadows5.avi"
  - "http://shatteredoasis.jolt.co.uk/"
  - "http://battledome.wc3campaigns.com/k0d3/DAsShadows/DAsShadows.zip"
  - "http://www.frag-ops.com/content/Demos/RealtimeShadows2.avi"
  - "http://www.frag-ops.com/images/shadow1.jpg"
  - "http://www.frag-ops.com"
  - "http://www.icculus.org/"
  sections:
  - toclevel: 1
    level: "2"
    line: "Features"
    number: "1"
    index: "1"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 370
    anchor: "Features"
  - toclevel: 1
    level: "2"
    line: "Known Issues"
    number: "2"
    index: "2"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 1136
    anchor: "Known_Issues"
  - toclevel: 1
    level: "2"
    line: "Todo"
    number: "3"
    index: "3"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 1600
    anchor: "Todo"
  - toclevel: 1
    level: "2"
    line: "Revisions"
    number: "4"
    index: "4"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 1846
    anchor: "Revisions"
  - toclevel: 1
    level: "2"
    line: "Summary"
    number: "5"
    index: "5"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 2901
    anchor: "Summary"
  - toclevel: 1
    level: "2"
    line: "Requirements"
    number: "6"
    index: "6"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 3834
    anchor: "Requirements"
  - toclevel: 1
    level: "2"
    line: "Effect_ShadowController.uc"
    number: "7"
    index: "7"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 5517
    anchor: "Effect_ShadowController.uc"
  - toclevel: 1
    level: "2"
    line: "Effect_ShadowProjector.uc"
    number: "8"
    index: "8"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 13734
    anchor: "Effect_ShadowProjector.uc"
  - toclevel: 1
    level: "2"
    line: "ShadowBitmapMaterial Detail Levels"
    number: "9"
    index: "9"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 21715
    anchor: "ShadowBitmapMaterial_Detail_Levels"
  - toclevel: 1
    level: "2"
    line: "Notes"
    number: "10"
    index: "10"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 23274
    anchor: "Notes"
  - toclevel: 1
    level: "2"
    line: "Disclaimer"
    number: "11"
    index: "11"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 23589
    anchor: "Disclaimer"
  - toclevel: 1
    level: "2"
    line: "Important"
    number: "12"
    index: "12"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 23814
    anchor: "Important"
  - toclevel: 1
    level: "2"
    line: "Files"
    number: "13"
    index: "13"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 24101
    anchor: "Files"
  - toclevel: 2
    level: "3"
    line: "Comments"
    number: "13.1"
    index: "14"
    fromtitle: "Legacy:SquirrelZero/RealtimeShadows"
    byteoffset: 24462
    anchor: "Comments"
  displaytitle: "Legacy:SquirrelZero/RealtimeShadows"
  iwlinks: []
  wikitext:
    text: "A completely automatic code based system for creating realtime player and\
      \ vehicle shadows.  Also completely free for public use, see the disclaimer\
      \ at the bottom.\n\n[http://www.frag-ops.com/images/shadow1.jpg]\n\n[http://www.frag-ops.com/content/Demos/RealtimeShadows2.avi\
      \ video clip #1 (small)]\n\n[http://www.frag-ops.com/content/Demos/Shadows5.avi\
      \ video clip #2 (large)]\n\n==Features ==\n* True realtime directional shadows\
      \ using all standard map lights for sourcing\n* Completely compatible with all\
      \ existing maps and mods, very easy to plug in\n* Multiple shadow detail settings,\
      \ built with performance in mind\n* Dynamic Light support, which allows for\
      \ things like muzzle flash and explosion shadows\n* Sunlight actor support as\
      \ a fallback light\n* Shadows will still be rendered (but culled very early)\
      \ even if the playerpawn owning the shadow is not.  Made primarily so that shadows\
      \ can be seen before people, a stealth advantage that is key to the mod I code\
      \ for, [http://www.frag-ops.com Frag.Ops].\n* Unlike the UT2004 [[Legacy:ShadowProjector|ShadowProjector]]\
      \ these will project onto dynamic actors like vehicles and other playerpawns\n\
      \n==Known Issues ==\n* This unfortunately will not work under OpenGL implementations\
      \ of UT2004, like linux and macintosh.  I have heard that [http://www.icculus.org/\
      \ icculus] is working on a possible macintosh fix for this, but i'm not sure.\n\
      * Shadows may extend beyond the borders of the shadow projector's frustrum,\
      \ appearing cut off.  I've attempted to minimize the visibility of this by making\
      \ highly stretched shadows less dark. (Deprecated.  Fixed as of r1.2)\n\n==Todo\
      \ ==\n* Blend between projector rotations when encountering a new lightsource.\
      \  Will be really nice when combined with the current fade in/out effect.\n\
      * Find a better way to check for sunlight visibility when sunlight actor is\
      \ in a SkyZone.\n\n==Revisions ==\n\nv1.2\n* Both Effect_ShadowController and\
      \ Effect_ShadowProjector updated\n* Added UpdateFrequency float, lower settings\
      \ mean faster updates but consume more CPU.  Do not go lower than 0.03.\n* Fastest\
      \ code revision yet\n* Improvements on light selection and fading\n* Projector\
      \ pitch limiter added, eliminates shadow breakage\n\nv1.1\n* Updated both Effect_ShadowController\
      \ and Effect_ShadowProjector with moderate changes\n* Wrote in a system to fade\
      \ between light sources, no more shadow \"popping\"\n* Fixed an accessed none\
      \ when no sunlight is present\n* Improved blending between light sources\n*\
      \ Better, darker shadows\n* Sunlit shadows will now be given a static darkness\n\
      * Added an extra sunlight check to avoid sunlight creating shadows indoors,\
      \ however this will not work with sunlight actors placed in skyboxes.  Sunlight\
      \ will still be used as a fallback light though if no other lights are present,\
      \ even if in a skybox.  Anyone know how to figure out what zone an actor is\
      \ in?  Would help with this bit of the system.\n\nv1.0\n* Initial Release\n\n\
      ==Summary ==\n\nI started playing with realtime directional shadows about 6\
      \ months ago and realized it would be very difficult to do what I wanted without\
      \ projecting onto the playerpawn owning the shadow.  UT2004 then added the bNoProjectOnOwner\
      \ variable which made me decide to revisit and finish this small side project.\
      \  What it does is allow you to specify a number of shadow \"slots\" to allocate\
      \ and create shadows for each new light source encountered within a spherical\
      \ radius, specified by the <b>MaxLightDistance</b> variable.  To do this we\
      \ spawn a new custom shadow projector for each light in the <b>Lights</b> array,\
      \ which is filled by assessing the <b>LightPriority</b> of each light found\
      \ in the radius.  Each shadow projector then works independantly to create a\
      \ very nice-looking directional shadow, and when combined by setting <b>MaxShadows</b>\
      \ to 2 or higher, creates some very real and atmospheric shadow webbing.\n\n\
      ==Requirements ==\n\nYou'll need to have access to a method of spawning an actor\
      \ clientside on all network clients, like copying and modifying the PostBeginPlay()\
      \ function in xPawn which is already used to spawn player shadows.  Mine looks\
      \ like this:\n\n<uscript>\nclass FOPawn extends xPawn;\n\nvar Effect_ShadowController\
      \ RealtimeShadow;\nvar bool bRealtimeShadows;\n\nsimulated function PostBeginPlay()\n\
      {\n\tSuper(UnrealPawn).PostBeginPlay();\n\tAssignInitialPose();\n\n\tif (bActorShadows\
      \ && bPlayerShadows && (Level.NetMode != NM_DedicatedServer))\n\t{\n\t\t// decide\
      \ which type of shadow to spawn\n\t\tif (!bRealtimeShadows)\n\t\t{\n\t\t\tPlayerShadow\
      \ = Spawn(class'ShadowProjector',Self,'',Location);\n\t\t\tPlayerShadow.ShadowActor\
      \ = self;\n\t\t\tPlayerShadow.bBlobShadow = bBlobShadow;\n\t\t\tPlayerShadow.LightDirection\
      \ = Normal(vect(1,1,3));\n\t\t\tPlayerShadow.LightDistance = 320;\n\t\t\tPlayerShadow.MaxTraceDistance\
      \ = 350;\n\t\t\tPlayerShadow.InitShadow();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tRealtimeShadow\
      \ = Spawn(class'Effect_ShadowController',self,'',Location);\n\t\t\tRealtimeShadow.Instigator\
      \ = self;\n\t\t\tRealtimeShadow.Initialize();\n\t\t}\n\t}\n\tbCanDoubleJump\
      \ = false;\n}\n\ndefaultproperties\n{\n\tbRealtimeShadows=true\n}\n</uscript>\n\
      \nThis is only a snippet to explain how my shadow controller is spawned, you\
      \ must also destroy your shadow controller appropriately when the pawn is destroyed,\
      \ hide it when in vehicles, etc.  Follow the methods xPawn uses to control its\
      \ <b>PlayerShadow</b> actor as an example.\n\n<b>Note:</b> when coming out of\
      \ an idle state (setting bShadowActive=true again) you must run FillLights()\
      \ once to retrigger the timer loop.  Thanks to Byte from [http://shatteredoasis.jolt.co.uk/\
      \ Shattered Oasis] for pointing this out.\n\n==Effect_ShadowController.uc ==\n\
      \nInstead of ticking the shadow projectors individually, we only need to tick\
      \ this actor and update all shadows at once.  <b>bShadowActive</b> acts a master\
      \ switch to toggle shadows on/off.  Everything else is otherwise commented in\
      \ the script itself.\n\n<uscript>\n//=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      // This is a master class for controlling all shadows.  This is needed to spawn\n\
      // and determine the visibility of all shadows.  It also keeps track of all\
      \ the\n// nearby lights.\n//=============================================================================\n\
      class Effect_ShadowController extends Actor\n\tconfig(User);\n\n// the type\
      \ of shadow projector we're going to use\nvar class<Effect_ShadowProjector>\
      \ ShadowClass;\n\n// an array of shadows, the maximum allowed per player can\
      \ be specified below\nvar array<Effect_ShadowProjector> Shadows;\n\n// an array\
      \ of static lights\nvar array<Light> LightList;\n\n// a special variable type,\
      \ lastlight is used for fading\nstruct LightGroup\n{\n\tvar Actor CurrentLight;\n\
      \tvar Actor LastLight;\n};\n\n// an array of lightgroups, filled when spawned\n\
      var array<LightGroup> Lights;\n\n// the maximum distance a light can be from\
      \ a player to cast a shadow\nvar float MaxLightDistance;\n\n// update frequency\
      \ for filling light array\nvar float UpdateFrequency;\n\n// the sun\nvar SunLight\
      \ SunLightActor;\n\n// turns on/off all shadows\nvar bool bShadowActive;\n\n\
      // maximum allowed shadows per player, configurable\nvar globalconfig int MaxShadows;\n\
      \n// how crisp (detailed) the shadows should be.  The higher, the better\n//\
      \ they look, but the worse they perform.\n// Low = 128x128\n// Medium = 256\n\
      // High = 512\n// Maximum = 1024 <- can any modern video technology even run\
      \ it at maximum?\nvar globalconfig enum CrispnessEnum\n{\n\tLow,\n\tMedium,\n\
      \tHigh,\n\tMaximum\n}ShadowCrispness;\n\nfunction Initialize()\n{\n\tlocal Light\
      \ LightActor;\n\tlocal array<SunLight> SunLights;\n\tlocal int i;\n\n\t// set\
      \ the sunlight, pick the brightest one if we have multiple\n\tforeach AllActors(class'Light',LightActor)\n\
      \t{\n\t\tif (SunLight(LightActor) != None)\n\t\t{\n\t\t\tSunLights[i] = SunLight(LightActor);\n\
      \t\t\ti++;\n\t\t}\n\t\telse if (LightActor.LightType != LT_None && LightActor.LightBrightness\
      \ > 1)\n\t\t\tLightList[LightList.Length] = LightActor;\n\t}\n\tfor (i=0;i<SunLights.Length;i++)\n\
      \t{\n\t\tif (SunLightActor == None || SunLightActor.LightBrightness < SunLights[i].LightBrightness)\n\
      \t\t\tSunLightActor = SunLights[i];\n\t}\n\n\t// fill the arrays with placeholders\n\
      \tShadows.Insert(0,MaxShadows);\n\tLights.Insert(0,MaxShadows);\n\n\t// enable\n\
      \tbShadowActive = true;\n\n\t// build light array\n\tFillLights();\n}\n\nfunction\
      \ Timer()\n{\n\tFillLights();\n}\n\nfunction FillLights()\n{\n\tlocal int i,\
      \ j;\n\tlocal actor LightActor;\n\tlocal array<Actor> OrigLight;\n\tlocal float\
      \ Diff;\n\n\t// clear array of lights, leave LastLight alone to fade\n\tfor\
      \ (i=0;i<MaxShadows;i++)\n\t{\n\t\tOrigLight[i] = Lights[i].CurrentLight;\n\t\
      \tLights[i].CurrentLight = None;\n\t}\n\n\t// set the location of the controller,\
      \ for light detection purposes\n\tSetLocation(Owner.Location);\n\n\t// shadow\
      \ is off\n\tif (!bShadowActive)\n\t\treturn;\n\n\t// build the array of lights,\
      \ we prioritize by both brightness and distance\n\tfor (i=0;i<LightList.Length;i++)\n\
      \t{\n\t\tDiff = VSize(LightList[i].Location-Owner.Location);\n\t\tif ((LightList[i].bStatic\
      \ || LightList[i].bDynamicLight) && Diff < MaxLightDistance && LightList[i].LightRadius\
      \ >= (Diff*0.041) && Diff > (Owner.CollisionRadius*0.5) && IsVisible(LightList[i].Location))\
      \ // (0.041 is not perfect)\n\t\t{\n\t\t\tif (Lights[0].CurrentLight != None\
      \ && LightPriority(Lights[0].CurrentLight.LightBrightness,Lights[0].CurrentLight.LightRadius,VSize(Lights[0].CurrentLight.Location-Owner.Location))\
      \ > LightPriority(LightList[i].LightBrightness,LightList[i].LightRadius,Diff))\n\
      \t\t\t\tcontinue;\n\t\t\t\n\t\t\t// this puts them in order of priority\n\t\t\
      \tfor (j=1;j<MaxShadows;j++)\n\t\t\t\tLights[j].CurrentLight = Lights[j-1].CurrentLight;\n\
      \n\t\t\tLights[0].CurrentLight = LightList[i];\n\t\t}\n\t}\n\tforeach DynamicActors(class'Actor',LightActor)\n\
      \t{\n\t\tDiff = VSize(LightActor.Location-Owner.Location);\n\t\t// if we are\
      \ within the light's radius, and it's shining on at least one part of us, then\
      \ add it to the array\n\t\tif (Diff < MaxLightDistance && !LightActor.bUnlit\
      \ && LightActor.LightType != LT_None && Projectile(LightActor) == None && Attachment_Base(LightActor)\
      \ == None && Effect_TacLightGlow(LightActor) == None && (LightActor.bStatic\
      \ || LightActor.bDynamicLight) && LightActor.LightEffect != LE_Sunlight && IsVisible(LightActor.Location)\
      \ && LightActor.LightBrightness > 1 && LightActor.LightRadius >= (Diff*0.041)\
      \ && Diff > (Owner.CollisionRadius*0.5)) // (0.041 is not perfect)\n\t\t{\n\t\
      \t\tif (Lights[0].CurrentLight != None && LightPriority(Lights[0].CurrentLight.LightBrightness,Lights[0].CurrentLight.LightRadius,VSize(Lights[0].CurrentLight.Location-Owner.Location))\
      \ > LightPriority(LightActor.LightBrightness,LightActor.LightRadius,Diff))\n\
      \t\t\t\tcontinue;\n\n\t\t\t// this puts them in order of priority\n\t\t\tfor\
      \ (i=1;i<MaxShadows;i++)\n\t\t\t\tLights[i].CurrentLight = Lights[i-1].CurrentLight;\n\
      \n\t\t\tLights[0].CurrentLight = LightActor;\n\t\t}\n\t}\n\t\n\t// we'll use\
      \ the sunlight as the very lowest priority of lights\n\tfor (i=0;i<MaxShadows;i++)\n\
      \t\tif (Lights[i].CurrentLight == None && SunlightActor != None && (IsVisible(SunLightActor.Location)\
      \ || Lights[0].CurrentLight == None))\n\t\t{\n\t\t\tLights[i].CurrentLight =\
      \ SunLightActor;\n\t\t\tbreak;\n\t\t}\n\n\n\t// set up last light for fading\n\
      \tfor (i=0;i<MaxShadows;i++)\t\t\n\t\tif (OrigLight[i] != Lights[i].CurrentLight)\n\
      \t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tif (OrigLight[i] == Lights[i-1].CurrentLight\
      \ || OrigLight[i] == OrigLight[i-1])\n\t\t\t\t\tOrigLight[i] = None;\n\t\t\t\
      }\n\t\t\tLights[i].LastLight = OrigLight[i];\n\t\t}\n\n\t// loop it, loop it\
      \ good\n\tSetTimer(UpdateFrequency,false);\n}\n\n// simple function for determining\
      \ the priority of a light\nfunction float LightPriority(float Brightness, float\
      \ Radius, float Distance)\n{\n\tlocal float Priority;\n\n\t// brightness takes\
      \ higher priority\n\tPriority = (Brightness*10)/Distance;\n\n\t// lights that\
      \ are very close get higher priority\n\tif (Distance < 0.1 * MaxLightDistance)\n\
      \t\tPriority *= 1.5;\n\n\t// lights with very small radii shouldn't really cast\
      \ shadows\n\tif (Radius < 2.0)\n\t\tPriority *= (Radius*0.38);\n\t\n\treturn\
      \ Priority;\n}\n\nfunction bool IsVisible(vector Loc)\n{\n\tlocal vector FootLocation;\n\
      \t\n\t// get a location near the feet\n\tFootLocation = Owner.Location;\n\t\
      FootLocation.Z -= Owner.CollisionHeight*0.49;\n\n\t// not very clean, returns\
      \ true if either the head, feet, or middle torso of the player is visible to\
      \ Loc\n\tif (FastTrace(Loc,Owner.Location) || FastTrace(Loc,Owner.GetBoneCoords('head').Origin)\
      \ || FastTrace(Loc,FootLocation))\n\t\treturn true;\n}\n\nfunction Tick(float\
      \ dt)\n{\n\t// fallback\n\tif (Owner == None)\n\t\treturn;\n\t\n\t// update\
      \ all shadows\n\tUpdateShadows(dt);\n}\n\nfunction UpdateShadows(float dt)\n\
      {\n\tlocal int i;\n\n\tfor (i=0;i<Lights.Length;i++)\n\t{\n\t\t// disable the\
      \ shadow attached to this slot if light no longer active, or if manually made\
      \ inactive\n\t\tif ((Lights[i].CurrentLight == None && Lights[i].LastLight ==\
      \ None) || !bShadowActive)\n\t\t{\n\t\t\tif (Shadows[i] != None)\n\t\t\t\tShadows[i].DisableShadow();\n\
      \t\t\tcontinue;\n\t\t}\n\n\t\t// spawn a new shadow if it doesn't already exist\n\
      \t\tif (Shadows[i] == None)\n\t\t\tShadows[i] = SpawnShadow(rotator(Lights[i].CurrentLight.Location-Location));\n\
      \n\t\t// update each shadow\n\t\tShadows[i].UpdateShadow(dt,i,self);\n\t}\n\
      }\n\nfunction Effect_ShadowProjector SpawnShadow(rotator LightRotation)\n{\n\
      \tlocal Effect_ShadowProjector NewShadow;\n\n\t// spawn and initialize a shadow\
      \ projector\n\tNewShadow = spawn(ShadowClass,Owner,,Location,LightRotation);\n\
      \tNewShadow.Disable('Tick');\n\tNewShadow.InitializeFor(self);\n\n\treturn NewShadow;\n\
      }\n\nfunction Destroyed()\n{\n\tlocal int i;\n\n\tDisable('Tick');\n\n\t// destroy\
      \ all shadows\n\tfor (i=0;i<MaxShadows;i++)\n\t\tif (Shadows[i] != None)\n\t\
      \t\tShadows[i].Destroy();\n}\n\ndefaultproperties\n{\n\t// internal\n\tUpdateFrequency=0.1\n\
      \tMaxShadows=2\n\tMaxLightDistance=1300.0\n\tShadowCrispness=Low\n\tShadowClass=class'Effect_ShadowProjector'\n\
      \n\t// settings\n\tbNoDelete=false\n\tbStatic=false\n\tbHidden=true\n\tDrawType=DT_None\n\
      \tRemoteRole=ROLE_None\n\tPhysics=PHYS_None\n}\n</uscript>\n\n==Effect_ShadowProjector.uc\
      \ ==\n\nThe actual shadow projector, much better than the old UT200x shadow\
      \ projector.\n\n<uscript>\n//=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      // Similar to ShadowProjector, just a lot better.  This shadow projector, while\n\
      // always in the same relative location to the player model, will dynamically\n\
      // adjust its FOV and also feed the ShadowBitmapMaterial new lighting data on\n\
      // the fly.  It uses a more exaggerated FOV than the standard UT200x shadows,\n\
      // because it looks so much cooler :).  It also uses the ShadowCrispness \n\
      // setting of the ShadowController to set a larger ShadowBitmapMaterial size.\n\
      // Note that the bigger the shadow material the more data is being passed to\n\
      // video each frame, so performance will worsen exponentially as you go higher.\n\
      // I had to do a lot of little tweaks and hack some settings in to get the\n\
      // projector to do what i wanted, and not cut off at strange angles.\n//=============================================================================\n\
      class Effect_ShadowProjector extends Projector;\n\nvar() vector LightDirection;\n\
      var() float LightDistance, InterpolationRate, MaxFOV, FadeSpeed, DarknessScale;\n\
      var ShadowBitmapMaterial ShadowTexture;\nvar bool bFadeIn;\n\nfunction PostBeginPlay()\n\
      {\n\tSuper(Actor).PostBeginPlay();\n}\n\n// these don't need to tick, we update\
      \ all shadows at the same time in the controller\nfunction Tick(float dt) {}\n\
      \n// this turns the shadow off\nfunction DisableShadow()\n{\n\t// detach\n\t\
      DetachProjector();\n\n\t// stop shadow texture from being reuploaded to video\
      \ here\t\n\tif (ShadowTexture != None)\n\t{\n\t\tShadowTexture.Dirty = false;\n\
      \t\tShadowTexture.ShadowActor = None;\n\t}\n}\n\n// initialize\nfunction InitializeFor(Effect_ShadowController\
      \ ShadowController)\n{\n\tif (ShadowController.Owner != None)\n\t{\n\t\t// set\
      \ the Owner\n\t\tSetOwner(ShadowController.Owner);\n\t\t\n\t\t// allocate the\
      \ shadow texture\n\t\tswitch (ShadowController.ShadowCrispness)\n\t\t{\n\t\t\
      \tcase Medium:\n\t\t\t\tShadowTexture = ShadowBitmapMaterial(Level.ObjectPool.AllocateObject(class'Effect_ShadowBitmapMaterialMedium'));\n\
      \t\t\t\tbreak;\n\t\t\n\t\t\tcase High:\n\t\t\t\tShadowTexture = ShadowBitmapMaterial(Level.ObjectPool.AllocateObject(class'Effect_ShadowBitmapMaterialHigh'));\n\
      \t\t\t\tbreak;\n\t\t\t\n\t\t\tcase Maximum:\n\t\t\t\tShadowTexture = ShadowBitmapMaterial(Level.ObjectPool.AllocateObject(class'Effect_ShadowBitmapMaterialMax'));\n\
      \t\t\t\tbreak;\n\t\t\t\n\t\t\tDefault:\n\t\t\t\tShadowTexture = ShadowBitmapMaterial(Level.ObjectPool.AllocateObject(class'Effect_ShadowBitmapMaterialLow'));\n\
      \t\t\t\tbreak;\n\n\t\t}\n\n\t\t// set projector texture\n\t\tProjTexture = ShadowTexture;\n\
      \t\t\n\t\t// initialize the shadow texture\n\t\tif (ShadowTexture != None)\n\
      \t\t{\n\t\t\tShadowTexture.Invalid = false;\n\t\t\tShadowTexture.ShadowActor\
      \ = Owner;\n\t\t\tShadowTexture.bBlobShadow = false;\n\t\t\tShadowTexture.CullDistance\
      \ = CullDistance; \n\t\t}\n\t\telse\n\t\t{\n\t\t\tlog(Name$\".InitializeFor:\
      \ No shadow texture!  Escaping...\");\n\t\t\tDestroy();\n\t\t}\n\t}\n\telse\n\
      \t\tlog(Name$\".InitializeFor: No Owner!\");\n}\n\n// updates this shadow's\
      \ location, rotation, and FOV\nfunction UpdateShadow(float dt, int LN, Effect_ShadowController\
      \ ShadowController)\n{\n\tlocal Plane BoundingSphere;\n\tlocal Actor ShadowLight;\n\
      \tlocal vector Diff, ShadowLocation, Origin;\n\tlocal rotator LightRotation,\
      \ AdjustedRotation;\n\tlocal float Interpolation;\n\tlocal bool bFadeOut;\n\n\
      \t// detach projector\n\tDetachProjector(true);\n\n\t// fallback, don't draw\
      \ if hidden or no shadow texture\n\tif (Owner == None || Owner.bHidden || ShadowTexture\
      \ == None)\n\t\treturn;\n\n\t// fallback and destroy\n\tif (ShadowTexture.Invalid)\n\
      \t{\n\t\tDestroy();\n\t\treturn;\n\t}\n\n\t// cull more if we haven't rendered\
      \ this pawn in 5 seconds\n\tif (Level.TimeSeconds - Owner.LastRenderTime > 5)\n\
      \t\tCullDistance = 0.5*Default.CullDistance;\n\telse\n\t\tCullDistance = Default.CullDistance;\n\
      \n\t// cull shadows much earlier if below min framerate, important\n\tif (Level.bDropDetail)\n\
      \t\tShadowTexture.CullDistance = 0.6*CullDistance;\n\telse\n\t\tShadowTexture.CullDistance\
      \ = CullDistance;\n\n\t// in case shadow was disabled earlier\n\tShadowTexture.ShadowActor\
      \ = Owner;\n\n\t// set light\n\tShadowLight = ShadowController.Lights[LN].CurrentLight;\n\
      \n\t// fade out if necessary\n\tif (ShadowController.Lights[LN].LastLight !=\
      \ None)\n\t{\n\t\tif (ShadowTexture.ShadowDarkness > 5)\n\t\t{\n\t\t\tShadowLight\
      \ = ShadowController.Lights[LN].LastLight;\n\t\t\tbFadeOut = true;\n\t\t}\n\t\
      \telse\n\t\t{\n\t\t\tShadowController.Lights[LN].LastLight = None;\n\t\t\tbFadeOut\
      \ = false;\n\t\t\tbFadeIn = true;\n\t\t\tDarknessScale = 0;\n\t\t}\n\t}\n\n\t\
      // fallback if no more lights after fadeout\n\tif (ShadowLight == None)\n\t\t\
      return;\n\n\t// get the direction of the light\n\tDiff = ShadowLight.Location\
      \ - Owner.Location;\n\n\t// set light distance\n\tif (ShadowLight.LightEffect\
      \ == LE_Sunlight)\n\t\tLightDistance = ShadowController.MaxLightDistance*0.3;\n\
      \telse\n\t\tLightDistance = FClamp(VSize(Diff), ShadowController.MaxLightDistance*0.1,\
      \ ShadowController.MaxLightDistance*0.3);\n\t\n\t// get a location along the\
      \ path of the light slightly away from center of player\n\tShadowLocation =\
      \ Owner.Location + 4*Normal(Diff);\n\tif (ShadowLocation.Z < Owner.Location.Z)\n\
      \t\tShadowLocation.Z = Owner.Location.Z+4;\n\n\t// set location\n\tSetLocation(ShadowLocation\
      \ + vect(0,0,-8));\n\n\t// determine correct rotation, interpolate\n\tOrigin\
      \ = ShadowLocation + ShadowTexture.LightDirection * ShadowTexture.LightDistance;\n\
      \tInterpolation = FMin(1.0, (dt*InterpolationRate));\n\tOrigin += (ShadowLight.Location\
      \ - Origin) * Interpolation;\t\n\tDiff = ShadowLocation - Origin;\n\tLightRotation\
      \ = rotator(Diff);\n\n\t// calculate FOV\n\tBoundingSphere = Owner.GetRenderBoundingSphere();\n\
      \tFOV = (Atan(BoundingSphere.W*2 + 160, LightDistance) * 180/PI);\n\n\t// set\
      \ rotation, compensate for FOV warping -- kinda hackish, but fixes shadows that\
      \ \n\t// bend so much they detach from the pawn\n\tAdjustedRotation = rotator(Owner.Location-ShadowLight.Location);\n\
      \tAdjustedRotation.Pitch = Clamp(AdjustedRotation.Pitch, -20500, -9500);\n\t\
      SetRotation(AdjustedRotation);\n\n\t// determine correct direction of light\n\
      \tLightDirection = -vector(AdjustedRotation)*LightDistance;\n\t\n\t// set light\
      \ direction\n\tShadowTexture.LightDirection = Normal(LightDirection);\n\n\t\
      // set lightdistance\n\tShadowTexture.LightDistance = LightDistance;\n\n\t//\
      \ update shadow texture FOV\n\tShadowTexture.LightFOV = FOV;\n\t\n\t// set the\
      \ drawscale, exaggerate a bit\n\tSetDrawScale((LightDistance*0.82) * tan(0.5*FOV*PI/180)\
      \ / (0.45*ShadowTexture.USize));\n\n\t// fade out gracefully\n\tif (bFadeOut)\n\
      \t\tShadowTexture.ShadowDarkness = Max(ShadowTexture.ShadowDarkness - (FadeSpeed*dt),\
      \ 0);\n\telse\n\t{\n\t\tShadowTexture.ShadowDarkness = 140*(1.0-(FClamp(VSize(ShadowLight.Location-Owner.Location)/ShadowController.MaxLightDistance,\
      \ 0.0, 1.0))) + 70;\n\t\tif (bFadeIn && DarknessScale < 1.0)\n\t\t{\n\t\t\t\
      DarknessScale = FMin(DarknessScale + ((FadeSpeed*0.007)*dt), 1.0);\n\t\t\tShadowTexture.ShadowDarkness\
      \ = float(ShadowTexture.ShadowDarkness)*DarknessScale;\n\t\t}\n\t\telse\n\t\t\
      \tbFadeIn = false;\n\t}\n\n\t// dirty texture for reuploading to video\n\tShadowTexture.Dirty\
      \ = true;\n\n\t// reattach projector\n\tAttachProjector();\n}\n\nfunction Destroyed()\n\
      {\n\t// free shadow texture from the object pool\n\tif (ShadowTexture != None)\n\
      \t{\n\t\tShadowTexture.ShadowActor = None;\n\t\t\n\t\tif (!ShadowTexture.Invalid)\n\
      \t\t\tLevel.ObjectPool.FreeObject(ShadowTexture);\n\n\t\t// must set to none\n\
      \t\tShadowTexture = None;\n\t\tProjTexture = None;\n\t}\n\tSuper.Destroyed();\n\
      }\n\ndefaultproperties\n{\n\t// this lets us have shadows that cast onto other\
      \ players\n\tbProjectActor=true\n\t// ... made possible by this, so it doesn't\
      \ project onto the pawn owning it\n\tbNoProjectOnOwner=true\n\t// how quickly\
      \ we should interpolate\n\tInterpolationRate=2.5\n\t// this should be dynamically\
      \ updated also\n\tMaxTraceDistance=165\n\t// maximum FOV\n\tMaxFOV=80.0\n\t\
      // how quickly to fade in/out\n\tFadeSpeed=500.0\n\n\tbProjectOnParallelBSP=true\n\
      \tbProjectOnAlpha=false\n\tbClipBSP=true\n\tbGradient=false\n\tbStatic=false\n\
      \tbOwnerNoSee=true\n\tbDynamicAttach=true\n\tRemoteRole=ROLE_None\n\tCullDistance=1200.0\n\
      }\n</uscript>\n\n==ShadowBitmapMaterial Detail Levels ==\n\nMultiple detail\
      \ levels; higher for crisper, more detailed shadows, lower for performance.\n\
      \n<uscript>\n//=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      class Effect_ShadowBitmapMaterialLow extends ShadowBitmapMaterial;\n\ndefaultproperties\n\
      {\n\tUSize=128\n\tVSize=128\n\tUClamp=128\n\tVClamp=128\n\tUClampMode=TC_Clamp\n\
      \tVClampMode=TC_Clamp\n}\n</uscript>\n\n<uscript>\n//=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      class Effect_ShadowBitmapMaterialMedium extends Effect_ShadowBitmapMaterialLow;\n\
      \ndefaultproperties\n{\n\tUSize=256\n\tVSize=256\n\n}\n</uscript>\n\n<uscript>\n\
      //=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      class Effect_ShadowBitmapMaterialHigh extends Effect_ShadowBitmapMaterialLow;\n\
      \ndefaultproperties\n{\n\tUSize=512\n\tVSize=512\n}\n</uscript>\n\n<uscript>\n\
      //=============================================================================\n\
      // © 2004 Matt 'SquirrelZero' Farber\n//=============================================================================\n\
      class Effect_ShadowBitmapMaterialMax extends Effect_ShadowBitmapMaterialLow;\n\
      \ndefaultproperties\n{\n\tUSize=1024\n\tVSize=1024\n}\n</uscript>\n\n==Notes\
      \ ==\n\nThat's all there is to it thankfully, once spawned the controller and\
      \ projectors really take care of the rest.  Many people will most likely be\
      \ satisfied with the default settings, although feel free to tweak and explore.\
      \  Just make sure you post any positive results, improvements are always welcome!\n\
      \n==Disclaimer ==\n\nThis code is free for any kind of use including commercial\
      \ and non-commercial applications, just let me know what it's being used for,\
      \ only because I'm always interested in new applications or fresh ideas.\n\n\
      \n==Important==\n\nThis code (version 1.2) is based on Frag.Ops. Some classes\
      \ (e.g. Attachement_Base and Effect_TacLightGlow) in \"Effect_ShadowController.uc\"\
      \ are not available in UT 2004. You will find these missing classes inside the\
      \ mod \"Frag.Ops\".\nWithout you can't compile an *.u file.\n\n==Files ==\n\n\
      [http://games.DiscoverThat.co.uk Demonstration Mutator] - A UT2004 mutator written\
      \ by JCBDigger to demonstrate the realtime shadow system.  It is based on the\
      \ rev1.1 code with a few minor changes to get it to work multiplayer.  It is\
      \ located under the header 'UT2004 Work In Progress', and please note that this\
      \ is for demonstration purposes only!\n\n===Comments===\n\n'''SquirrelZero:'''\
      \ Any changes or improvements to my code is welcome.\n\n'''Foxpaw:''' There\
      \ is already the [[Legacy:Sourced Player Shadows|Sourced Player Shadows]] page..\
      \ maybe the two should be merged or something.\n\n'''SquirrelZero:''' That page\
      \ is way too disorganized for me, and i don't have time to organize it.  It's\
      \ a different method anyway.  All pages i add from this one on will be linked\
      \ from the [[Legacy:SquirrelZero|SquirrelZero]] page.\n\n'''SquirrelZero:'''\
      \ The code has been updated to revision 1.1, key new feature is fading between\
      \ shadows.\n\n'''Foxpaw:''' I noticed you were looking for a way to determine\
      \ what zone an actor is in. A reference to the zone an actor is in is available\
      \ as Region.Zone.\n\n'''SquirrelZero:''' Oh, good find.  I'll have to update\
      \ the sunlight stuff again in a bit.\n\n'''SquirrelZero:''' Ooookay, this page\
      \ was edited 10 times yesterday and the only visible change i can see is that\
      \ my preview image is now missing.  Please do not remove or change anything\
      \ without documenting your changes.\n\n'''JCBDigger:''' I've used v1.1 of this\
      \ code to create a demonstration mutator.  You can download it from my web site:\
      \ http://games.DiscoverThat.co.uk  in the 'UT2004 Work In Progress' section.\n\
      \n'''SquirrelZero:''' Nice stuff, but it does look like it might not work in\
      \ multiplayer.  Still a great way to preview it though :)\n\n'''JCBDigger:'''\
      \ Multiplayer is proving more tricky than expected, I thought I would have it\
      \ done by now, but no!\n\n'''JCBDigger:''' Finally it works multiplayer.\n\n\
      '''dataangel''': I've been experimenting jcb's mutator that implements squirrel's\
      \ shadow code and after some fiddling I've come up with some possible optimizations.\
      \ I'm not an unrealscript expert like Squirrel Zero, so this code is probably\
      \ buggy . I've attached my optimized version of his mutator below. All of my\
      \ tests were singleplayer on the NORMAL UT2K4  deathmatch map albatross. If\
      \ you try this mutator with FragOps I have no idea how it will mix with the\
      \ existing shadow system. If you must try with Fragops, you'll probably want\
      \ to turn its shadow option to None, then restart the game, and only try in\
      \ botmatch (but that's just a guess). This is meant as a proof of concept  for\
      \ shadow optimizations to be included with future versions of FragOps.\n\n1.\
      \ Option to set MaxShadows per player. Defaulting to 1 so we only see shadow\
      \ for the highest priority light. Right now (again, at least in the mutator)\
      \ MaxShadows is set to 2. Half as many shadows gives in my tests what seems\
      \ to be less than half the performance hit. Yet a shadow was still visible most\
      \ of the time &ndash; so the tactical advantage would be mostly preserved. The\
      \ advantage compared to normal ut2k4 shadows comes in in that Squirrel's shadows\
      \ can be longer and wider mostly I think, not that there are more of them.\n\
      \n2. Separate detail levels for friendly and enemy shadows, defaulting to normal\
      \ shadows for friendlies and the lowest level of fancy shadow for enemies. Friendly\
      \ shadows are of little use tactically. Inparticular, this would help with the\
      \ laginess associated with the beginning of rounds when all of your team members\
      \ are standing bunched together around you. Note that the option in the mutator\
      \ to disable friendly shadows doesn't disable them entirely, it just makes friendlies\
      \ have normal ut2k4 shadows.\n\n3. Toggle for whether or not ragdolls have shadows.\
      \ Currently (at least in jcb's mutator) they do. Bodies usually fly through\
      \ the air from grenades and the like; times when fps is already dropping, no\
      \ need to shoot a dead horse Wink\n\n4. As far as I can tell it's unnecessary\
      \ for UpdateShadows() to run every tick. I altered this so now it runs every\
      \ .03 seconds, right after FillLights(). In game the shadows seemed to act the\
      \ same but I got better performance (spectating two bots w/ max detail settings\
      \ was actually somewhat playable speed). I'm not sure how SquirrelZero came\
      \ to the .03 number, it maybe possible to go higher, I suspect he just tweaked\
      \ it.\n\n5. Toggle to make it only show a player's shadow when you don't have\
      \ line of sight to them. Shadows are supposed to help tactically by letting\
      \ you see that your opponent is about to come around the corner. This option\
      \ makes it so that once they do come out from behind the corner, their shadow\
      \ disappears. This way you only see it when it's useful, and once you get in\
      \ the open firefight it stops sucking frames. I didn't do enough testing though\
      \ &ndash; my mutator may not actually be implementing this properly, can someone\
      \ confirm for me? In any case I bet Squirrel Zero can code it into FO if he\
      \ likes the idea Wink\n\nThese optimizations/options together I think will enable\
      \ lower end players to see shadows just when they're gameplay relevant, and\
      \ thus letting alot more people take advantage of them.\n\nIf you want the source\
      \ just export it.\n\nPost here how well this works for you. Hope somebody benefits\
      \ =)\n\nDownload:\n\n[http://battledome.wc3campaigns.com/k0d3/DAsShadows/DAsShadows.zip]\n\
      \nP.S. The mutators defaults should be the most optimized. If you want to see\
      \ how the mutator was before, set MaxShadows to 2, uncheck the line of sight\
      \ option, check ragdoll shadows, uncheck the only render enemy shadows option.\
      \ Although to truly turn it back you'll also need to change the code to get\
      \ rid of #4.\n\n'''Bigcheese''':I have been using your code for the hackerz\
      \ (www.hackerz.tk) mod and i got it to work on people. but then i tryed to use\
      \ it on a new karma actor that i baced off of the exion karma. it just adds\
      \ online play and some other interesting things, but i want to use dynamic showdows\
      \ for it but i just dont know how to spawn them like you do in pawn???\n\n'''Daemonica:'''\
      \ You wanted to know who's using your code, it's so tasty the Undying Curse\
      \ http://undying.sanffo.co.uk team are using it. Nice work SquirrelZero!\n\n\
      '''SquirrelZero:''' Glad to see this is getting so much use :).  I've improved\
      \ it further to use a rotation limiter, which effectively fixes the breakage\
      \ on shadows that bend too much.  It probably runs a bit better, too.  I'll\
      \ post this 3rd revision sometime soon, and maybe take some new videos of it\
      \ in action.\n\n'''DJPaul:''' [[Legacy:Esc|Esc]] is playing about with producing\
      \ a UT2004 version, and we are implementing this as I type.\n\n'''DJPaul:'''\
      \ SquirrelZero/everyone, is this meant to work from first person view?  I specifically\
      \ mean are you mmeant to see YOUR shadow from the first-person view of YOUR\
      \ pawn?  I can only see the shadows (of my pawn) when I switch to third person.\n\
      \n'''SquirrelZero:''' If the pawn is invisible, the shadow will be too.  Try\
      \ doing bOwnerNoSee=false on both the projector and the pawn.  Just keep in\
      \ mind that the native animation code for pawns will prevent them from playing\
      \ movement animations in first person, so you get upper body anims but no lower.\
      \  Some clever hacking can resolve it, though.  By the way, i've added a new\
      \ code revision.  It's highly recommended everyone update their mods to use\
      \ the new revision; it's faster and more accurate.\n\n'''Blue Ion:''' Could\
      \ you (or anyone, of course) make a mutator out of your code like JCBDigger's?\
      \ You know for those of us that just want to download, download and download\
      \ and don't know a thing about UnrealScript ;). The effect is impressive and\
      \ plays even better with just one shadow, too bad that sometimes the shadows\
      \ turns into evil black squares.\n\n'''EricBlade:''' I just found this page,\
      \ and i have a couple questions, if anyone can help me out..  First, does this\
      \ work at all reasonably well in 2k3 (since it doesn't have bNoProjectOnOwner)?\
      \  Second, how might it perform with say 30 pawns on screen potentially using\
      \ it?\n\n... well ,I eventually answered myself.  I forgot about this page for\
      \ several months, until I decided to do my own work in this area, and someone\
      \ on #unrealscript pointed me to here.  One thing that I've found is by setting\
      \ the Projector's location to well above the Pawn's head, instead of slightly\
      \ below the Pawn.Location, you get a better look, and it doesn't draw so much\
      \ on itself (i don't have bProjectOnOwner or whatever) ..  now to find ways\
      \ to improve it's CPU usage.  BTW, Sunlight is referenced by Zone, not by world.\
      \ ... Further examination seems to indicate that the section commented \"determine\
      \ correct rotation, interpolate\" doesn't actually achieve anything, as none\
      \ of those variables seem to be used for any purpose.  \n\nHere's some code\
      \ to simulate bNoProjectOnOwner=True for those that don't have it:\n\n<uscript>\n\
      simulated event Touch(Actor Other) {\n\tif(Other == Owner) return;\n\tsuper.Touch(Other);\n\
      }\n</uscript>\n\n'''tom10320:''' I was wondering if someone could help me. My\
      \ computer is not powerful enough to run UT3 but can run UT2004. I wanted to\
      \ get this to work but when I compile the code, it stops and says 'cannot open\
      \ file. History UObject' and 'Ucommandlet' or something like that. If aanyone\
      \ ever reads this, please help!"
  properties: []
  revId: 34555
name: "Legacy:SquirrelZero/RealtimeShadows"
revision:
  revid: 34555
  parentid: 33151
  user: "79.217.249.73"
  timestamp: 1248605270.000000000
  comment: "/* Disclaimer */"
timestamp: 1668777750.860970000
