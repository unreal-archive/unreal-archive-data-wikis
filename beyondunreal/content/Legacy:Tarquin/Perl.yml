---
parse:
  title: "Legacy:Tarquin/Perl"
  text:
    text: "<p>Tarquin's Little Corner of Perl</p>\n<p>(a pun on Wisdom of Perl ...\
      \ has that been done before? probably. anyway, I can hardly class this as \"\
      wisdom\"!)</p>\n<p>Insane ramblings on perl...</p>\n<p></p>\n<div id=\"toc\"\
      \ class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li\
      \ class=\"toclevel-1 tocsection-1\"><a href=\"#scripts\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">scripts</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-2\"><a href=\"#references\"><span class=\"tocnumber\">1.1</span>\
      \ <span class=\"toctext\">references</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-3\"><a href=\"#objects\"><span class=\"tocnumber\">1.2</span> <span\
      \ class=\"toctext\">objects</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#wookee\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\"\
      >wookee</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#shift\"\
      ><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">shift</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Linguistics\"><span class=\"\
      tocnumber\">1.5</span> <span class=\"toctext\">Linguistics</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#General_comments\"><span class=\"\
      tocnumber\">1.6</span> <span class=\"toctext\">General comments</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Links\"><span class=\"tocnumber\"\
      >1.7</span> <span class=\"toctext\">Links</span></a></li>\n</ul>\n</li>\n<li\
      \ class=\"toclevel-1 tocsection-9\"><a href=\"#Problems_with_Magic_content\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Problems with Magic\
      \ content</span></a></li>\n<li class=\"toclevel-1 tocsection-10\"><a href=\"\
      #Feb_2004\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Feb 2004</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#Feb_2004_part_2\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Feb 2004 part 2</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-12\"><a href=\"#Feb_2004_part_3\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Feb 2004 part 3</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"scripts\">scripts</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Tarquin/Perl?section=1\" title=\"Edit section: scripts\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>These\
      \ both use Mych's Wookee playground, but with different 'brains' – much simpler\
      \ brains.</p>\n<ul>\n<li><a rel=\"nofollow\" class=\"external free\" href=\"\
      http://wiki.beyondunreal.com/cgi-bin/class.cgi\">http://wiki.beyondunreal.com/cgi-bin/class.cgi</a></li>\n\
      <li><a rel=\"nofollow\" class=\"external free\" href=\"http://wiki.beyondunreal.com/cgi-bin/reverser.cgi\"\
      >http://wiki.beyondunreal.com/cgi-bin/reverser.cgi</a></li>\n</ul>\n<p>I wonder\
      \ ... has anyone made a script like the playground, with two input fields:</p>\n\
      <ul>\n<li>text to process</li>\n<li>perl script to exectute on the text</li>\n\
      </ul>\n<p><b>Mychaeel:</b> I suppose anything has been done already. Are you\
      \ asking because you'd like to create such a script yourself?</p>\n<p><b>Tarquin:</b>\
      \ I made the reverser script for wikipedia; and the core is so simple (4 lines\
      \ but it could be just one), that I thought it would be neat if one script could\
      \ take different instructions. Not sure how to do it, the dark arts of reading\
      \ url parameters are a bit beyond me. BTW, why is the main portion of your playground\
      \ script within an \"eval\"?</p>\n<p><b>Mychaeel:</b> To catch errors (which\
      \ would otherwise end the script and make the server output \"Internal Server\
      \ Error\" because no headers have been printed yet).</p>\n<h3><span class=\"\
      mw-headline\" id=\"references\">references</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=2\"\
      \ title=\"Edit section: references\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The use of [, { and ( for arrays and hashes confuses\
      \ me, but I think I've cracked it. The basic token is (. Perl knows whether\
      \ this is to be an array or a hash from the variable name &amp; the nature of\
      \ the list:</p>\n<dl>\n<dd>@anArray = ( 3, 4, 5 );</dd>\n<dd>&#160;%aHash =\
      \ ( 'Waterloo' =&gt; 'Abba' , 'Diva' =&gt; 'Dana International' );</dd>\n</dl>\n\
      <p>and so forth. I think a lot of confusion sprang up when I was creating an\
      \ array of hashes (or was it a hash or arrays), and I read perlreftut with an\
      \ insufficient concentration of mood-enhacing chemicals in my system.</p>\n\
      <p>This came to light when I set off today to understand what -&gt; means. It's\
      \ converted into a nice little arrow on this wiki, but in its promordial state,\
      \ -&gt;- it's altogether different. Look at it. It's like goo oozing through\
      \ a ceiling grate in cheap sci-fi. It's like chicken with teeth. Those two little\
      \ characters together are not of this world; something about the shape they\
      \ form together projects the idea that it is not of this world. Someone once\
      \ took a hyphen, ordinary, and a right-angle-bracket aka a greater than symbol,\
      \ also fairly rudimentary and put them together (incidentally, I've encountered\
      \ people who can't remember which of &lt; and &gt; means greater and lesser,\
      \ and resort to complex mnemonics (more on those later). What's there to miss?\
      \ Big side, big number. Pointy small side, small number) – two innocuous symbols,\
      \ yet adjacency breeds unfamiliarity. It's certainly gestalt. Or emergent. Or\
      \ something.</p>\n<p>So... if $myRef holds a reference, {$myRef} can be made\
      \ to stand for the array, in @{$myRef}, so ${$myRef}[1] is an element like $myArray[1]\
      \ is, and the evil arrow comes in as a shorthand to write $myRef-&gt;[1]. Hooray.\
      \ One step closer to understanding Wookee...</p>\n<p><b>Mychaeel:</b> Good luck\
      \ on your pursuit of the Evil Arrow. &#160;:-) I actually find the <code>$myRef-&gt;[1]</code>\
      \ syntax much neater looking than the <code>${$myRef}[1]</code> one, that's\
      \ why I'm using it wherever possible; and it's mandatory for calling object\
      \ or class methods as in <code>$myObject-&gt;blah()</code>, so accessing myObject's\
      \ properties as <code>$myObject-&gt;{foo}</code> makes for a nice analogy between\
      \ the two.</p>\n<p><b>Tarquin:</b> It is nicer, but like nice things in maths,\
      \ I find I need to understand the complicated thing before I can really grasp\
      \ the shorthand.</p>\n<p><b>Dma:</b> You mean this stuff doesn't just intuitively\
      \ make sense to you?&#160;:-)</p>\n<p><b>Tarquin:</b> I'm currently feeling\
      \ extremely smug for having done:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >  <span class=\"kw2\">foreach</span> <span class=\"br0\">(</span> \\<span class=\"\
      sy0\">@</span>classPublicVars , \\<span class=\"sy0\">@</span>classPrivateVars\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"\
      sy0\">@$</span>_ <span class=\"sy0\">=</span> sort <span class=\"br0\">{</span>uc<span\
      \ class=\"br0\">(</span><span class=\"sy0\">$</span>a<span class=\"br0\">)</span>\
      \ cmp uc<span class=\"br0\">(</span><span class=\"sy0\">$</span>b<span class=\"\
      br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">@$</span>_ ;\n\
      \    <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Sure, I could have\
      \ done the same thing with two consecutive sort functions, once on each array\
      \ – but see under \"laziness\"</p>\n<h3><span class=\"mw-headline\" id=\"objects\"\
      >objects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=3\" title=\"Edit section:\
      \ objects\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>If I understand correctly, objects in Perl work exactly liek the hash references\
      \ above, with $myObject-&gt;property analogous to myUnrealObject.property.</p>\n\
      <p>So an object just works like a souped-up reference things.</p>\n<dl>\n<dd><b>Mychaeel:</b>\
      \ That's a pretty to-the-point description of what Perl objects are. In fact,\
      \ the manual describes them as \"references that know to which package they\
      \ belong.\" Perl just memorizes a package name along with a regular reference\
      \ (via the use of the <code>bless</code> command, given the reference and the\
      \ package name) and uses that package name to call methods.</dd>\n</dl>\n<p>I'm\
      \ reading perltoot. It seems that the object stuff has to be within a package\
      \ that's called up by a procedural main perl file.</p>\n<dl>\n<dd><b>Mychaeel:</b>\
      \ The \"package\" part is right, I don't understand the \"procedural main Perl\
      \ file\" part though.</dd>\n</dl>\n<dl>\n<dd><b>Tarquin:</b> it's not like UnrealScript\
      \ which has no single \"way in\", or Java where the root class (I think) has\
      \ a main() method. There's a layer of Perl above the classes which created the\
      \ objects and does stuff – a bit like Unreal has the native code that creates\
      \ objects and makes them do stuff.</dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b> ...or\
      \ like C++ which has a main() procedure either. In theory this main program\
      \ could just create an \"application\" object and call a \"main\" method of\
      \ it, if you wish to stay as object-oriented as possible. (Delphi does that,\
      \ basically.)</dd>\n</dl>\n<dl>\n<dd><b>Birelli:</b> I'm pretty sure in Java\
      \ it's actually called init() (at least in applets), but that really doesn't\
      \ matter so I'll be quiet now&#160;;-)</dd>\n</dl>\n<p><b>Olorin:</b> I'll pitch\
      \ in: I think perl implicitly uses a routine called 'MAIN' if you don't have\
      \ one. I think it's good practice to explicitly have a MAIN label to indicate\
      \ where your execution begins, so my Perl scripts start with:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co2\">#! usr/bin/perl</span>\n \nMAIN:\n\
      \  <span class=\"co2\">#stuff</span>\n  exit<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n<span class=\"co2\">#other\
      \ routines</span></pre></div>\n</div>\n<p>From which you can see I grew up on\
      \ C/C++.</p>\n<h3><span class=\"mw-headline\" id=\"wookee\">wookee</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Tarquin/Perl?section=4\" title=\"Edit section: wookee\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>moving\
      \ on to working out what wookee does...</p>\n<p>the modified sub WikiToHTML\
      \ does this:</p>\n<ol>\n<li>create a new BlockWiki object</li>\n<li>feed it\
      \ the html from @_</li>\n<li>let BlockWiki cascade everything from there</li>\n\
      </ol>\n<p>Questions:</p>\n<p><b>Tarquin:</b> is it necessary to create a new\
      \ object? why not just use 'static' things in the class?</p>\n<p><b>Mychaeel:</b>\
      \ If you look into that class you'll find that it indeed has to save a lot of\
      \ state information – for instance, the variable that accumulates the formatted\
      \ output. Hence, we need an object. (Of course that information could also be\
      \ stored in \"static\" (package- or class-level) variables, but that'd somewhat\
      \ defeat the purpose of OOP and would make the code non-reentrant, and you couldn't\
      \ nest <code>&lt;wiki&gt;</code> blocks in <code>&lt;wiki&gt;</code> blocks.)</p>\n\
      <p><b>Tarquin:</b> Thank you&#160;:) I think I get it. So it's not necessary\
      \ from a syntax point of view, it's just <i>useful</i> to do it that way. For\
      \ my page idea I might as well use static, since I don't need multiple instances\
      \ of the page object... hmm. Not sure how I'll handle redirects, maybe that\
      \ could fit in like that. more pondering required.</p>\n<p><b>Mychaeel:</b>\
      \ From an OOP point of view, it'd be advisable to use static properties and\
      \ methods only if you need them and stick to instance properties and methods\
      \ otherwise.</p>\n<h3><span class=\"mw-headline\" id=\"shift\">shift</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Tarquin/Perl?section=5\" title=\"Edit section: shift\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p><b>Tarquin:</b>\
      \ \"shift\" called with no argument means the first element from the @_ array,\
      \ and pops it off too so the next use of shift gets the next one – I think.\
      \ It's syntax like that that mkes Perl scary. It takes an initial Klein-bottle\
      \ flip of the brain to understand, but once you know it it's extremely simple\
      \ to use. It's like maths.&#160;:)</p>\n<p><b>Mychaeel:</b> Hehe. &#160;:-D\
      \ How true, how true.</p>\n<blockquote class=\"legacyquote\">\n<p>The array\
      \ @_ is a local array, but its elements are aliases for the actual scalar parameters.</p>\n\
      </blockquote>\n<p>That means ALL perl subroutine parameters are \"out\" parameters\
      \ in Uscript jargon!</p>\n<p><b>Mychaeel:</b> If you use them like that, yes.\
      \ (Usually you copy the @_ elements to local variables.) But be careful: If\
      \ you try to assign to a @_ element that represents a constant expression, you'll\
      \ get a fatal error. The much better way of dealing with \"out\" parameters\
      \ is passing references.</p>\n<p><b>Tarquin:</b> Do some people consider perl\
      \ to have too many built-in functions? I think it's great – once you get the\
      \ hang of enough of them to do something.</p>\n<p>Something like <code>join(\"\
      <br />\n\", @MyArray );</code> in another language might go like...</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">for</span><span\
      \ class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,\
      \ i<span class=\"sy0\">&lt;</span> ...\n<span class=\"co1\">// urg whats the\
      \ syntax for counting an arrays elements</span>\n<span class=\"co1\">// urg\
      \ used , instead of ; again</span>\n<span class=\"co1\">// urg is it \"i&lt;Elements\"\
      , \"i&lt;=Elements\" or \"i&lt;Elements-1\"? </span>\n<span class=\"co1\">//\
      \ (Why is there a zero? Life would be so much easier without it)</span>\nMyArray<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\n\
      <span class=\"co1\">// damn. I need something to output to. </span>\n<span class=\"\
      co1\">// go back up and create a local variable</span>\n<span class=\"co1\"\
      >// decide to put this all in a seperate function</span>\n<span class=\"co1\"\
      >// spend 5 minutes moving code around</span>\n<span class=\"co1\">// make up\
      \ a new variable name for the local version of the array</span>\nMyString <span\
      \ class=\"sy0\">=</span> <span class=\"st0\">\"&lt;br&gt;\"</span><span class=\"\
      sy0\">$</span> MyArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ ;\n<span class=\"co1\">// hm. would it be handy if my function took an arbitrary\
      \ joining string?</span></pre></div>\n</div>\n<p>...and so on.</p>\n<p><b>Mychaeel:</b>\
      \ Perl certainly isn't a \"minimal\" language like C where the language base\
      \ consists of only a small handfull of statements and everything else is added\
      \ through libraries. Some people might consider Perl \"ugly\" from a language\
      \ design point of view because of that, but Perl never claimed to be a \"beautiful\"\
      \ language, just a useful and efficient one. (C++ at least provides syntax constructs\
      \ to make library functionality <i>look</i> as if it was built in.)</p>\n<p>For\
      \ that matter, PHP is worse than Perl: Virtually every functionality extension\
      \ has to be provided as native code and preferably be compiled directly into\
      \ the PHP executable. Perl is powerful enough to allow for such extensions to\
      \ be provided as Perl modules themselves. Only very few Perl modules require\
      \ support through native code, and usually you can clearly see the reason why.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Linguistics\">Linguistics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=6\"\
      \ title=\"Edit section: Linguistics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>something I'll write about later...</p>\n<p>I had\
      \ an idea about all the shortcuts in perl like \"shift\" with no argument implies\
      \ shift @_. Analogous to things like \"shouldn't\" in English.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"General_comments\">General comments</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Tarquin/Perl?section=7\" title=\"Edit section: General\
      \ comments\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>Mychaeel:</b> tarquin, if you're looking for a book about Perl, get <a\
      \ rel=\"nofollow\" class=\"external text\" href=\"http://www.amazon.com/exec/obidos/ASIN/0596000278/qid=1023909155/sr=8-1/ref=sr_8_1/104-6149721-8404759\"\
      >Programming Perl</a> (co-authored by Larry Wall, Perl's creator), usually only\
      \ referred to as \"the Camel Book\" (for obvious reasons). It's actually a pretty\
      \ entertaining read. &#160;:)</p>\n<h3><span class=\"mw-headline\" id=\"Links\"\
      >Links</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=8\" title=\"Edit section:\
      \ Links\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p><b>Dma:</b> <a rel=\"nofollow\" class=\"external free\" href=\"http://www.bbspot.com/News/2001/03/perl_test.html\"\
      >http://www.bbspot.com/News/2001/03/perl_test.html</a> &lt;==&#160;:-D</p>\n\
      <p><b>Tarquin:</b> <a rel=\"nofollow\" class=\"external free\" href=\"http://www.perl.com/pub/a/1998/08/show/onion.html\"\
      >http://www.perl.com/pub/a/1998/08/show/onion.html</a></p>\n<p><b>Mychaeel:</b>\
      \ A <i>very</i> good read... thanks for the pointer. \"The fact is, your brains\
      \ are built to do Perl programming.\" – The only thing that has always bothered\
      \ me in Perl is that <code>if</code> and all sorts of loops (<code>for</code>,\
      \ <code>while</code> and so on) <i>require</i> a block in braces. It has me\
      \ wondering whether that's a problem related to parsing the otherwise pretty\
      \ form-free Perl source, or whether Perl's creators just had a fit of wanting\
      \ to inflict something they consider \"good programming style\" on lowly Perl\
      \ programmers...</p>\n<dl>\n<dd><b>T1:</b> If doesn't require a block in braces.\
      \ you can do <code>dosomething() if(condition)</code></dd>\n</dl>\n<dl>\n<dd><b>Mychaeel:</b>\
      \ Yes, I know. &#160;:-) What I meant is the <code>if (cond) { block }</code>\
      \ form, which you'll have to use if you need an <code>else</code> or <code>elsif</code>.</dd>\n\
      </dl>\n<p><b>Mychaeel:</b> Hehe: \"We can debug relationships, but it's always\
      \ good policy to consider the people themselves to be features. People get annoyed\
      \ when you try to debug them.\" How true, how true...</p>\n<p><b>Tarquin:</b>\
      \ For Mych: <a rel=\"nofollow\" class=\"external free\" href=\"http://c2.com/cgi/wiki?ThereIsNothingPerlCannotDo\"\
      >http://c2.com/cgi/wiki?ThereIsNothingPerlCannotDo</a>&#160;;) There's plenty\
      \ of perl stuff on PPR, including the idea of using ||= as an assignment operator\
      \ for OO (and here I say OO.. O_o!). I wonder if there's a Perl-specific Wiki.</p>\n\
      <p><b>Mychaeel:</b> I agree with that Wiki page. &#160;:-D There's a link to\
      \ an article on <a rel=\"nofollow\" class=\"external text\" href=\"http://www.perl.com/pub/a/language/misc/fmproto.html\"\
      >Why Perl prototypes are bad</a> which I definitely <i>disagree</i> with though.\
      \ The \"inherent bugs\" the author talks about aren't in fact any – it's just\
      \ that Perl prototypes and C prototypes aren't the same, and aren't supposed\
      \ to be. (Like that a prototype becomes effective only <i>after</i> it has been\
      \ parsed.) Quite simply, Perl isn't a language for the easily confused.</p>\n\
      <p><b>Tarquin:</b> Hmm... that wiki on perl we found the other day is offline&#160;:(\
      \ I was looking forward to rambling there, too.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Problems_with_Magic_content\">Problems with Magic content</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Tarquin/Perl?section=9\" title=\"Edit section: Problems\
      \ with Magic content\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I have, basically, this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">package Parent\
      \ <span class=\"br0\">{</span>\n \n  sub ListParameters <span class=\"br0\"\
      >{</span>\n    my <span class=\"sy0\">$</span>class <span class=\"sy0\">=</span>\
      \ shift;\n    my <span class=\"sy0\">@</span>parameters <span class=\"sy0\"\
      >=</span> <span class=\"sy0\">$</span>class<span class=\"sy0\">-&gt;</span>CommandParameters;\n\
      \    <span class=\"sy0\">$</span>text .<span class=\"sy0\">=</span> join <span\
      \ class=\"st0\">''</span>, map <span class=\"br0\">{</span> <span class=\"st0\"\
      >\"&lt;LI&gt;$_&lt;/LI&gt;\"</span> <span class=\"br0\">}</span> <span class=\"\
      sy0\">@</span>parameters ;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      co2\"># called from UseModWiki</span>\n  sub MakeSection <span class=\"br0\"\
      >{</span>\n    my <span class=\"sy0\">$</span>class       <span class=\"sy0\"\
      >=</span> shift;\n    my <span class=\"sy0\">$</span>page        <span class=\"\
      sy0\">=</span> shift; <span class=\"co2\"># the page being browsed</span>\n\
      \    my <span class=\"sy0\">$</span>magicmodule <span class=\"sy0\">=</span>\
      \ shift; <span class=\"co2\"># the requested magicmodule   </span>\n    my <span\
      \ class=\"sy0\">%</span>params <span class=\"sy0\">=</span> map <span class=\"\
      br0\">{</span> s<span class=\"sy0\">/^</span><span class=\"st0\">\"|\"</span><span\
      \ class=\"sy0\">$</span><span class=\"co1\">//g; $_ } (shift =~ m[(\\w+)\\s*=\\\
      s*(\"[^\"]*\"?|\\S+)]g); #\"</span>\n    <span class=\"sy0\">$</span>params<span\
      \ class=\"br0\">{</span><span class=\"st0\">'thispage'</span><span class=\"\
      br0\">}</span> <span class=\"sy0\">=</span> <span class=\"sy0\">$</span>page;\
      \ <span class=\"co2\"># add the page to the parameters hash</span>\n    <span\
      \ class=\"sy0\">$</span>text .<span class=\"sy0\">=</span> qq<span class=\"\
      br0\">[</span><span class=\"sy0\">&lt;</span>div <span class=\"kw1\">class</span><span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"magic\"</span> id<span class=\"\
      sy0\">=</span><span class=\"st0\">\"$magicmodule\"</span><span class=\"sy0\"\
      >&gt;</span>\\n<span class=\"br0\">]</span>;\n    <span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span> grep <span class=\"sy0\">/^</span>\\Q<span class=\"\
      sy0\">$</span>magicmodule\\E<span class=\"sy0\">$/</span> , <span class=\"sy0\"\
      >@</span>registered <span class=\"br0\">)</span><span class=\"br0\">{</span>\n\
      \      <span class=\"co2\"># if one of our packages matches the name of the\
      \ wiki page, run the script</span>\n      <span class=\"sy0\">$</span>text .<span\
      \ class=\"sy0\">=</span> <span class=\"sy0\">$</span>magicmodule<span class=\"\
      sy0\">-&gt;</span>GenerateContent<span class=\"br0\">(</span><span class=\"\
      sy0\">%</span>params<span class=\"br0\">)</span>;\n      <span class=\"sy0\"\
      >$</span>text .<span class=\"sy0\">=</span> <span class=\"sy0\">$</span>magicmodule<span\
      \ class=\"sy0\">-&gt;</span>ListParameters;\n    <span class=\"kw2\">return</span>\
      \ <span class=\"sy0\">$</span>text;\n  <span class=\"br0\">}</span>\n \n \n\
      <span class=\"br0\">}</span>\n \n \npackage CommandClass <span class=\"br0\"\
      >{</span>\n  <span class=\"sy0\">@</span><span class=\"kw3\">ISA</span> <span\
      \ class=\"sy0\">=</span> qw<span class=\"br0\">(</span>Parent<span class=\"\
      br0\">)</span>;\n  sub CommandParameters <span class=\"br0\">{</span> <span\
      \ class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>If CommandParameters contains something, eg</p>\n<pre> sub CommandParameters\
      \ { 'foo', 'bar' }\n</pre>\n<p>then I get it out as a list. If it contains NOTHING,\
      \ the array @parameters gets the value of $class in it. Now I understand that\
      \ CommandParameters is called with $class as the first element of its @_. But\
      \ why is it spitting it back out, and how do I stop it?</p>\n<p>...</p>\n<p>I've\
      \ switched to using</p>\n<pre> sub CommandParameters { undef }\n</pre>\n<p>but\
      \ I still can't work out how to test that the @parameters array is empty.</p>\n\
      <p>ALWAYS FALSE:</p>\n<pre>   return \"\" if scalar @parameters == 0;\n   return\
      \ \"\" if @parameters == ()\n</pre>\n<p>ALWAYS TRUE</p>\n<pre>   return \"\"\
      \ if $parameters == 0;\n   return \"\" unless defined @parameters; # I've put\
      \ \"undef\" into an array ... what does that do to it?\n</pre>\n<p><b>Mychaeel:</b>\
      \ Well... an array with \"undef\" in it has at least a single (undefined) element.\
      \ An empty array is \"()\". And: An empty function always returns the value\
      \ of its \"@_\" – you have to do <i>something</i> in that function to set a\
      \ different return value. Also, \"$parameters\" and \"@parameters\" are two\
      \ different and completely unrelated variables.</p>\n<p><b>Tarquin:</b> For\
      \ some reason I had it in my head that $array returns the number of elements.&#160;:con:\
      \ So how do I check @array eq (undef)&#160;? That gives a \"Use of uninitialized\
      \ value in string eq at emptyarray.pl line 31.\" Though I could just keep the\
      \ function empty and test for a return equal to ( $class ).</p>\n<p><b>Mychaeel:</b>\
      \ The much neater way would be simply having the function return an empty array:</p>\n\
      <pre> sub CommandParameters { () }\n</pre>\n<p>That could be the default implementation\
      \ in the common base class, so that only subclasses which do have parameters\
      \ need to overwrite that function.</p>\n<p><b>Tarquin:</b> Done. Thanks.&#160;:)\
      \ I've just used \"scalar @parameters == 0\" as I can't work out how to check\
      \ it's equal to ().</p>\n<p><b>Mychaeel:</b> Since \"==\" expects scalar operands,\
      \ the \"scalar\" operator is redundant; otherwise yes, that'd be the way to\
      \ check whether an array is empty.</p>\n<pre> if (@parameters == 0) { ... }\n\
      </pre>\n<p><b>Tarquin:</b> Stylistic question. Would the following be considered\
      \ <i>really bad</i>, because a sub is calling a child implementation of itself?</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"br0\">{</span>\n  package\
      \ WantedPages;\n  <span class=\"sy0\">@</span><span class=\"kw3\">ISA</span>\
      \ <span class=\"sy0\">=</span> qw<span class=\"br0\">(</span>MagicContentMaker<span\
      \ class=\"br0\">)</span>;\n  <span class=\"co2\"># ...snip...</span>\n \n  sub\
      \ GenerateContent <span class=\"br0\">{</span>\n    my <span class=\"br0\">(</span>\
      \ <span class=\"sy0\">$</span>class, <span class=\"sy0\">%</span>params <span\
      \ class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span>_;\n\
      \    my <span class=\"br0\">(</span><span class=\"sy0\">$</span>text, <span\
      \ class=\"sy0\">@</span>links<span class=\"br0\">)</span>;\n    <span class=\"\
      co2\">#my $testoutput;</span>\n \n    <span class=\"kw2\">if</span><span class=\"\
      br0\">(</span> <span class=\"sy0\">$</span>params<span class=\"br0\">{</span>sort<span\
      \ class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st0\">'alpha'</span>\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"\
      kw2\">return</span> WantedPagesAlpha<span class=\"sy0\">-&gt;</span>GenerateContent\n\
      \    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span> <span\
      \ class=\"br0\">{</span>\n      <span class=\"kw2\">return</span> WantedPagesRequests<span\
      \ class=\"sy0\">-&gt;</span>GenerateContent;\n    <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"br0\">{</span>\n  package WantedPagesAlpha;\n\
      \  <span class=\"sy0\">@</span><span class=\"kw3\">ISA</span> <span class=\"\
      sy0\">=</span> qw<span class=\"br0\">(</span>WantedPages<span class=\"br0\"\
      >)</span>;\n  <span class=\"co2\"># ...etc</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Mychaeel:</b> Well... I'd consider it bad OOP, and it also only\
      \ works because GenerateContent is technically a static method for class WantedPages\
      \ whereas it is a normal (non-static) method in its superclass – which in turn\
      \ is bad OOP too and wouldn't work with any programming language except Perl\
      \ which doesn't have an all-too-strict syntactical notion of OOP in the first\
      \ place.</p>\n<p>So I'd say it is ugly on several levels; but why make \"sort=...\"\
      \ a parameter anyway? It'd be very neat and OOP-nice to create an (abstract)\
      \ class WantedPages where WantedPagesAlpha and WantedPagesRequests are subclasses\
      \ of which can be used as such in the #MAGIC header directly.</p>\n<p><b>Tarquin:</b>\
      \ It seemed to me easier for the end-user to think of WantedPages as a single\
      \ command with different options. But it's a lot easier to code your way. I\
      \ was trying to understand how to travel <i>down</i> a class tree based on options\
      \ for the Lunatic UseMoo project. BTW, have you thought of making a perl wrapper\
      \ like <a href=\"/Legacy:UMake\" title=\"Legacy:UMake\">UMake</a>? Just something\
      \ that registers to open perl filetypes, displays output and provides a \"run\
      \ last script again\" button.</p>\n<p><b>Mychaeel:</b> No, I never considered\
      \ doing that. Setting up the file types is a one-time configuration task, and\
      \ my editor allows setting up a custom menu command to run the script I'm editing\
      \ without any helper tools.</p>\n<p>Actually, with something like UnrealScript's\
      \ \"states\" you could create your \"runtime subclass selection\" quite neatly.\
      \ States are more or less a type of subclassing that's \"orthogonal\" to the\
      \ normal subclassing. Unlike normal subclasses however it is possible to switch\
      \ an object's state at runtime, so you could in theory have a single WantedPages\
      \ class that has two states, \"SortAlpha\" and \"SortRequests\", each of which\
      \ provides its own implementation of the GenerateContent method. However, because\
      \ states can be switched at runtime, it is impossible to have different <i>data</i>\
      \ in different states – and that's also why you cannot simply switch classes\
      \ at runtime for a given object because there you <i>can</i> have different\
      \ data in different objects. (Typecasting objects – as opposed to object <i>references</i>\
      \ – therefore is a non-trivial task that usually involves the creation of an\
      \ all-new object of the target type in the process.)</p>\n<p><b>Tarquin:</b>\
      \ Which text editor do you use?</p>\n<p><b>Mychaeel:</b> Still <a rel=\"nofollow\"\
      \ class=\"external text\" href=\"http://forums.beyondunreal.com/showthread.php?postid=1436905#post1436905\"\
      >this one</a>. It may not be as feature-complete as other text editor that are\
      \ around, but what's more important to me is that it's entirely feature-complete\
      \ in respect to the features I <i>want</i>. &#160;:-) – Oh, and I have replaced\
      \ that very old \"umake\" version by <a href=\"/Legacy:UMake\" title=\"Legacy:UMake\"\
      >UMake</a> meanwhile.</p>\n<h2><span class=\"mw-headline\" id=\"Feb_2004\">Feb\
      \ 2004</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=10\" title=\"Edit section:\
      \ Feb 2004\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I think I FINALLY really get references! I wrote this last night to check:</p>\n\
      <pre>\n#!/usr/bin/perl\n%myHash = (\n  foo =&gt; 'bar',\n  biz =&gt; 'bax',\n\
      \  );\nsub takeHash {\n  my $hashRef = shift;\n  foreach (keys %$hashRef) {\n\
      \    print $hashRef-&gt;{$_}, ', ';\n  }\n}\ntakeHash(\\%myHash);\n</pre>\n\
      <p>I am having to make design decisions in UseMOO. The key problem is that I\
      \ am breaking OO principles in bad ways. The basic idea behind MOO is that we\
      \ have a class tree like this:</p>\n<ul>\n<li>Page\n<ul>\n<li>PrefsPage</li>\n\
      <li>AdminPage</li>\n<li>WikiPage\n<ul>\n<li>RecentChanges</li>\n<li>EditPage</li>\n\
      </ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>... and so on. Each object adds new functionality.\
      \ To make this actually work, the script needs to start by choosing which class\
      \ to create an instance of, and then run that instance's browsePage() method.\
      \ The problem is how to choose the class in the first place. I've borrowed Mychaeel's\
      \ registration system, and using this, the new() function is able to travel\
      \ <i>down</i> the class tree, checking which conditions the browser parameters\
      \ satisfy. So:</p>\n<ul>\n<li>register() needs to call its immediate parent,\
      \ but the parent itself needs to call <i>its</i> parent!</li>\n<li>new() needs\
      \ to call implementations of itself in subclasses, which is BAD.</li>\n</ul>\n\
      <p>For register, I think the least yucky solution is this:</p>\n<pre>\n  sub\
      \ WikiPage::register {\n    my $class = shift;  $class = (ref $class or $class);\n\
      \    \n    # WikiPage can't call this, it must call something further up\n \
      \   if ($class eq 'WikiPage') {\n      $class-&gt;SUPER::register;\n      return;\n\
      \    }\n    \n    push @registered, $class\n      if $class-&gt;isa(Page)\n\
      \      and not grep /^\\Q$class\\E$/, @registered;\n    }\n</pre>\n<p>and for\
      \ new(), to avoid the danger of recursive calling, have new(), newPageChild(),\
      \ newWikiPageChild() etc.</p>\n<h2><span class=\"mw-headline\" id=\"Feb_2004_part_2\"\
      >Feb 2004 part 2</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=11\" title=\"Edit section:\
      \ Feb 2004 part 2\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I think I have a tweak to the above that makes it slightly more palatable.</p>\n\
      <p>Give each class a sub called \"this\" that returns the class name. (AFAIK\
      \ there's no way to magically do this in perl.) To use the example from the\
      \ perlboot manpage:</p>\n<pre>\n{ \n  package Animal;\n  \n  sub this { 'Animal'\
      \ }\n  \n  sub speak {\n    my $class = shift; $class = (ref $class or $class);\n\
      \    print \"a $class goes \", $class-&gt;sound, \"!\\n\";\n    if ( $class-&gt;this\
      \ ne this ) {\n      print \"we're not where we were\";\n    }\n    return;\n\
      \  }\n}\n</pre>\n<p>Now if we call Horse-&gt;speak (or some other subclass),\
      \ the speak sub know it's running in a superclass. This approach would eliminate\
      \ the use of the class name in my register sub above, which makes it look a\
      \ bit cleaner.</p>\n<h2><span class=\"mw-headline\" id=\"Feb_2004_part_3\">Feb\
      \ 2004 part 3</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Tarquin/Perl?section=12\" title=\"Edit section:\
      \ Feb 2004 part 3\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>I think I finally understand what Mych means when he says that trying something\
      \ and finding out it doesn't work days later can be a good thing.</p>\n<p>I've\
      \ had to change the way Moo creates instances, because the first way isn't flexible\
      \ enough. The new method is a little unorthodox, but having seen for myself\
      \ the drawbacks of the original method, I'm more convinced the new method is\
      \ right.</p>\n<p>What I'm now doing is this:</p>\n<pre>\n my $instance = {}\n\
      \ Page-&gt;constructor( $instance, @variables );\n</pre>\n<p>in effect, constructor()\
      \ is really a blesser.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.165\
      \ seconds\nReal time usage: 0.167 seconds\nPreprocessor visited node count:\
      \ 144/1000000\nPreprocessor generated node count: 315/1000000\nPost‐expand include\
      \ size: 302/2097152 bytes\nTemplate argument size: 97/2097152 bytes\nHighest\
      \ expansion depth: 3/40\nExpensive parser function count: 0/100\n-->\n\n<!--\
      \ \nTransclusion expansion time report (%,ms,calls,template)\n100.00%    4.889\
      \      1 - -total\n100.00%    4.889      1 - Template:Innerbox\n-->\n\n<!--\
      \ Saved in parser cache with key wiki:pcache:idhash:3037-0!*!0!!en!*!* and timestamp\
      \ 20221118031422 and revision id 7989\n -->\n"
  categories:
  - sortkey: "Tarquin/Perl"
    name: "Legacy_Rant"
  links:
  - ns: 100
    exists: true
    name: "Legacy:UMake"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://www.amazon.com/exec/obidos/ASIN/0596000278/qid=1023909155/sr=8-1/ref=sr_8_1/104-6149721-8404759"
  - "http://c2.com/cgi/wiki?ThereIsNothingPerlCannotDo"
  - "http://wiki.beyondunreal.com/cgi-bin/class.cgi"
  - "http://www.perl.com/pub/a/language/misc/fmproto.html"
  - "http://www.perl.com/pub/a/1998/08/show/onion.html"
  - "http://wiki.beyondunreal.com/cgi-bin/reverser.cgi"
  - "http://www.bbspot.com/News/2001/03/perl_test.html"
  - "http://forums.beyondunreal.com/showthread.php?postid=1436905#post1436905"
  sections:
  - toclevel: 1
    level: "2"
    line: "scripts"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 175
    anchor: "scripts"
  - toclevel: 2
    level: "3"
    line: "references"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 1180
    anchor: "references"
  - toclevel: 2
    level: "3"
    line: "objects"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 3915
    anchor: "objects"
  - toclevel: 2
    level: "3"
    line: "wookee"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 5844
    anchor: "wookee"
  - toclevel: 2
    level: "3"
    line: "shift"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 7167
    anchor: "shift"
  - toclevel: 2
    level: "3"
    line: "Linguistics"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 9826
    anchor: "Linguistics"
  - toclevel: 2
    level: "3"
    line: "General comments"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 10027
    anchor: "General_comments"
  - toclevel: 2
    level: "3"
    line: "Links"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 10406
    anchor: "Links"
  - toclevel: 1
    level: "2"
    line: "Problems with Magic content"
    number: "2"
    index: "9"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 12498
    anchor: "Problems_with_Magic_content"
  - toclevel: 1
    level: "2"
    line: "Feb 2004"
    number: "3"
    index: "10"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 18833
    anchor: "Feb_2004"
  - toclevel: 1
    level: "2"
    line: "Feb 2004 part 2"
    number: "4"
    index: "11"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 20546
    anchor: "Feb_2004_part_2"
  - toclevel: 1
    level: "2"
    line: "Feb 2004 part 3"
    number: "5"
    index: "12"
    fromtitle: "Legacy:Tarquin/Perl"
    byteoffset: 21311
    anchor: "Feb_2004_part_3"
  displaytitle: "Legacy:Tarquin/Perl"
  iwlinks: []
  wikitext:
    text: "Tarquin's Little Corner of Perl\n\n(a pun on Wisdom of Perl ... has that\
      \ been done before? probably. anyway, I can hardly class this as \"wisdom\"\
      !)\n\nInsane ramblings on perl...\n\n==scripts ==\n\nThese both use Mych's Wookee\
      \ playground, but with different 'brains' &ndash; much simpler brains.\n* http://wiki.beyondunreal.com/cgi-bin/class.cgi\n\
      * http://wiki.beyondunreal.com/cgi-bin/reverser.cgi\n\nI wonder ... has anyone\
      \ made a script like the playground, with two input fields:\n* text to process\n\
      * perl script to exectute on the text\n\n'''Mychaeel:''' I suppose anything\
      \ has been done already.  Are you asking because you'd like to create such a\
      \ script yourself?\n\n'''Tarquin:''' I made the reverser script for wikipedia;\
      \ and the core is so simple  (4 lines but it could be just one), that I thought\
      \ it would be neat if one script could take different instructions. Not sure\
      \ how to do it, the dark arts of reading url parameters are a bit beyond me.\
      \ BTW, why is the main portion of your playground script within an \"eval\"\
      ?\n\n'''Mychaeel:''' To catch errors (which would otherwise end the script and\
      \ make the server output \"Internal Server Error\" because no headers have been\
      \ printed yet).\n\n===references ===\n\nThe use of [, { and ( for arrays and\
      \ hashes confuses me, but I think I've cracked it. The basic token is (. Perl\
      \ knows whether this is to be an array or a hash from the variable name & the\
      \ nature of the list:\n: @anArray = ( 3, 4, 5 );\n: %aHash = ( 'Waterloo' =>\
      \ 'Abba' , 'Diva' => 'Dana International' );\n\nand so forth. I think a lot\
      \ of confusion sprang up when I was creating an array of hashes (or was it a\
      \ hash or arrays), and I read perlreftut with an insufficient concentration\
      \ of mood-enhacing chemicals in my system.\n\nThis came to light when I set\
      \ off today to understand what -> means. It's converted into a nice little arrow\
      \ on this wiki, but in its promordial state, <nowiki>->-</nowiki> it's altogether\
      \ different. Look at it. It's like goo oozing through a ceiling grate in cheap\
      \ sci-fi. It's like chicken with teeth. Those two little characters together\
      \ are not of this world; something about the shape they form together projects\
      \ the idea that it is not of this world. Someone once took a hyphen, ordinary,\
      \ and a right-angle-bracket aka a greater than symbol, also fairly rudimentary\
      \ and put them together (incidentally, I've encountered people who can't remember\
      \ which of < and > means greater and lesser, and resort to complex mnemonics\
      \ (more on those later). What's there to miss? Big side, big number. Pointy\
      \ small side, small number) &ndash; two innocuous symbols, yet adjacency breeds\
      \ unfamiliarity. It's certainly gestalt. Or emergent. Or something.\n\nSo...\
      \ if $myRef holds a reference, {$myRef} can be made to stand for the array,\
      \ in @{$myRef}, so ${$myRef}[1] is an element like $myArray[1] is, and the evil\
      \ arrow comes in as a shorthand to write $myRef->[1]. Hooray. One step closer\
      \ to understanding Wookee...\n\n'''Mychaeel:'''  Good luck on your pursuit of\
      \ the Evil Arrow.  :-)  I actually find the <code>$myRef->[1]</code> syntax\
      \ much neater looking than the <code>${$myRef}[1]</code> one, that's why I'm\
      \ using it wherever possible; and it's mandatory for calling object or class\
      \ methods as in <code>$myObject->blah()</code>, so accessing myObject's properties\
      \ as <code>$myObject->{foo}</code> makes for a nice analogy between the two.\n\
      \n'''Tarquin:'''  It is nicer, but like nice things in maths, I find I need\
      \ to understand the complicated thing before I can really grasp the shorthand.\n\
      \n'''Dma:'''  You mean this stuff doesn't just intuitively make sense to you?\
      \ :-)\n\n'''Tarquin:''' I'm currently feeling extremely smug for having done:\n\
      \n<uscript>\n  foreach ( \\@classPublicVars , \\@classPrivateVars ) {\n    @$_\
      \ = sort {uc($a) cmp uc($b)} @$_ ;\n    }\n</uscript>\n\nSure, I could have\
      \ done the same thing with two consecutive sort functions, once on each array\
      \ &ndash; but see under \"laziness\"\n\n===objects ===\n\nIf I understand correctly,\
      \ objects in Perl work exactly liek the hash references above, with $myObject->property\
      \ analogous to myUnrealObject.property. \n\nSo an object just works like a souped-up\
      \ reference things. \n\n: '''Mychaeel:'''  That's a pretty to-the-point description\
      \ of what Perl objects are.  In fact, the manual describes them as \"references\
      \ that know to which package they belong.\"  Perl just memorizes a package name\
      \ along with a regular reference (via the use of the <code>bless</code> command,\
      \ given the reference and the package name) and uses that package name to call\
      \ methods.\n\nI'm reading perltoot. It seems that the object stuff has to be\
      \ within a package that's called up by a procedural main perl file.\n\n:'''Mychaeel:'''\
      \  The \"package\" part is right, I don't understand the \"procedural main Perl\
      \ file\" part though.\n\n:'''Tarquin:'''  it's not like UnrealScript which has\
      \ no single \"way in\", or Java where the root class (I think) has a main()\
      \ method. There's a layer of Perl above the classes which created the objects\
      \ and does stuff &ndash; a bit like Unreal has the native code that creates\
      \ objects and makes them do stuff.\n\n:'''Mychaeel:'''  ...or like C++ which\
      \ has a main() procedure either.  In theory this main program could just create\
      \ an \"application\" object and call a \"main\" method of it, if you wish to\
      \ stay as object-oriented as possible.  (Delphi does that, basically.)\n\n:'''Birelli:'''\
      \ I'm pretty sure in Java it's actually called init() (at least in applets),\
      \ but that really doesn't matter so I'll be quiet now ;-)\n\n'''Olorin:''' I'll\
      \ pitch in: I think perl implicitly uses a routine called 'MAIN' if you don't\
      \ have one. I think it's good practice to explicitly have a MAIN label to indicate\
      \ where your execution begins, so my Perl scripts start with:\n\n<uscript>\n\
      #! usr/bin/perl\n\nMAIN:\n  #stuff\n  exit(0)\n#other routines\n</uscript>\n\
      \nFrom which you can see I grew up on C/C++.\n\n===wookee ===\n\nmoving on to\
      \ working out what wookee does...\n\nthe modified sub WikiToHTML does this:\n\
      # create a new BlockWiki object\n# feed it the html from @_ \n# let BlockWiki\
      \ cascade everything from there\n\nQuestions:\n\n'''Tarquin:''' is it necessary\
      \ to create a new object? why not just use 'static' things in the class?\n\n\
      '''Mychaeel:'''  If you look into that class you'll find that it indeed has\
      \ to save a lot of state information &ndash; for instance, the variable that\
      \ accumulates the formatted output.  Hence, we need an object.  (Of course that\
      \ information could also be stored in \"static\" (package- or class-level) variables,\
      \ but that'd somewhat defeat the purpose of OOP and would make the code non-reentrant,\
      \ and you couldn't nest <code><wiki></code> blocks in <code><wiki></code> blocks.)\n\
      \n'''Tarquin:'''  Thank you :) I think I get it. So it's not necessary from\
      \ a syntax point of view, it's just ''useful'' to do it that way. For my page\
      \ idea I might as well use static, since I don't need multiple instances of\
      \ the page object... hmm. Not sure how I'll handle redirects, maybe that could\
      \ fit in like that. more pondering required.\n\n'''Mychaeel:'''  From an OOP\
      \ point of view, it'd be advisable to use static properties and methods only\
      \ if you need them and stick to instance properties and methods otherwise.\n\
      \n===shift ===\n\n'''Tarquin:''' \"shift\" called with no argument means the\
      \ first element from the @_ array, and pops it off too so the next use of shift\
      \ gets the next one &ndash; I think. It's syntax like that that mkes Perl scary.\
      \ It takes an initial Klein-bottle flip of the brain to understand, but once\
      \ you know it it's extremely simple to use. It's like maths. :)\n\n'''Mychaeel:'''\
      \  Hehe.  :-D  How true, how true.\n\n{{innerbox| The array @_ is a local array,\
      \ but its elements are aliases for the actual scalar parameters. \n\n}}\n\n\
      That means ALL perl subroutine parameters are \"out\" parameters in Uscript\
      \ jargon!\n\n'''Mychaeel:'''  If you use them like that, yes.  (Usually you\
      \ copy the @_ elements to local variables.)  But be careful:  If you try to\
      \ assign to a @_ element that represents a constant expression, you'll get a\
      \ fatal error.  The much better way of dealing with \"out\" parameters is passing\
      \ references.\n\n'''Tarquin:'''  Do some people consider perl to have too many\
      \ built-in functions? I think it's great &ndash; once you get the hang of enough\
      \ of them to do something.\n\nSomething like <code>join(\"<br />\", @MyArray\
      \ );</code> in another language might go like...\n\n<uscript>\nfor( i=0, i<\
      \ ...\n// urg whats the syntax for counting an arrays elements\n// urg used\
      \ , instead of ; again\n// urg is it \"i<Elements\", \"i<=Elements\" or \"i<Elements-1\"\
      ? \n// (Why is there a zero? Life would be so much easier without it)\nMyArray[i]\
      \ =\n// damn. I need something to output to. \n// go back up and create a local\
      \ variable\n// decide to put this all in a seperate function\n// spend 5 minutes\
      \ moving code around\n// make up a new variable name for the local version of\
      \ the array\nMyString = \"<br>\"$ MyArray[i] ;\n// hm. would it be handy if\
      \ my function took an arbitrary joining string?\n</uscript>\n\n...and so on.\n\
      \n'''Mychaeel:'''  Perl certainly isn't a \"minimal\" language like C where\
      \ the language base consists of only a small handfull of statements and everything\
      \ else is added through libraries.  Some people might consider Perl \"ugly\"\
      \ from a language design point of view because of that, but Perl never claimed\
      \ to be a \"beautiful\" language, just a useful and efficient one.  (C++ at\
      \ least provides syntax constructs to make library functionality ''look'' as\
      \ if it was built in.)\n\nFor that matter, PHP is worse than Perl:  Virtually\
      \ every functionality extension has to be provided as native code and preferably\
      \ be compiled directly into the PHP executable.  Perl is powerful enough to\
      \ allow for such extensions to be provided as Perl modules themselves.  Only\
      \ very few Perl modules require support through native code, and usually you\
      \ can clearly see the reason why.\n\n===Linguistics ===\n\nsomething I'll write\
      \ about later...\n\nI had an idea about all the shortcuts in perl like \"shift\"\
      \ with no argument implies shift @_. Analogous to things like \"shouldn't\"\
      \ in English.\n\n===General comments ===\n\n'''Mychaeel:'''  tarquin, if you're\
      \ looking for a book about Perl, get [http://www.amazon.com/exec/obidos/ASIN/0596000278/qid=1023909155/sr=8-1/ref=sr_8_1/104-6149721-8404759\
      \ Programming Perl] (co-authored by Larry Wall, Perl's creator), usually only\
      \ referred to as \"the Camel Book\" (for obvious reasons).  It's actually a\
      \ pretty entertaining read.  :)\n\n===Links ===\n\n'''Dma:'''  http://www.bbspot.com/News/2001/03/perl_test.html\
      \ <== :-D\n\n'''Tarquin:''' http://www.perl.com/pub/a/1998/08/show/onion.html\n\
      \n'''Mychaeel:'''  A ''very'' good read... thanks for the pointer.  \"The fact\
      \ is, your brains are built to do Perl programming.\" &ndash; The only thing\
      \ that has always bothered me in Perl is that <code>if</code> and all sorts\
      \ of loops (<code>for</code>, <code>while</code> and so on) ''require'' a block\
      \ in braces. It has me wondering whether that's a problem related to parsing\
      \ the otherwise pretty form-free Perl source, or whether Perl's creators just\
      \ had a fit of wanting to inflict something they consider \"good programming\
      \ style\" on lowly Perl programmers...\n\n: '''T1:''' If doesn't require a block\
      \ in braces. you can do <code>dosomething() if(condition)</code>\n\n:'''Mychaeel:'''\
      \ Yes, I know.  :-)  What I meant is the <code>if (cond) { block }</code> form,\
      \ which you'll have to use if you need an <code>else</code> or <code>elsif</code>.\n\
      \n'''Mychaeel:'''  Hehe:  \"We can debug relationships, but it's always good\
      \ policy to consider the people themselves to be features. People get annoyed\
      \ when you try to debug them.\"  How true, how true...\n\n'''Tarquin:'''  For\
      \ Mych: http://c2.com/cgi/wiki?ThereIsNothingPerlCannotDo ;) There's plenty\
      \ of perl stuff on PPR, including the idea of using ||= as an assignment operator\
      \ for OO (and here I say OO.. O_o!). I wonder if there's a Perl-specific Wiki.\
      \ \n\n'''Mychaeel:'''  I agree with that Wiki page.  :-D  There's a link to\
      \ an article on [http://www.perl.com/pub/a/language/misc/fmproto.html Why Perl\
      \ prototypes are bad] which I definitely ''disagree'' with though.  The \"inherent\
      \ bugs\" the author talks about aren't in fact any &ndash; it's just that Perl\
      \ prototypes and C prototypes aren't the same, and aren't supposed to be.  (Like\
      \ that a prototype becomes effective only ''after'' it has been parsed.)  Quite\
      \ simply, Perl isn't a language for the easily confused.\n\n'''Tarquin:''' \
      \ Hmm... that wiki on perl we found the other day is offline :( I was looking\
      \ forward to rambling there, too.\n\n==Problems with Magic content ==\n\nI have,\
      \ basically, this:\n\n<uscript>\npackage Parent {\n\n  sub ListParameters {\n\
      \    my $class = shift;\n    my @parameters = $class->CommandParameters;\n \
      \   $text .= join '', map { \"<LI>$_</LI>\" } @parameters ;\n}\n\n# called from\
      \ UseModWiki\n  sub MakeSection {\n    my $class       = shift;\n    my $page\
      \        = shift; # the page being browsed\n    my $magicmodule = shift; # the\
      \ requested magicmodule   \n    my %params = map { s/^\"|\"$//g; $_ } (shift\
      \ =~ m[(\\w+)\\s*=\\s*(\"[^\"]*\"?|\\S+)]g); #\"\n    $params{'thispage'} =\
      \ $page; # add the page to the parameters hash\n    $text .= qq[<div class=\"\
      magic\" id=\"$magicmodule\">\\n];\n    if( grep /^\\Q$magicmodule\\E$/ , @registered\
      \ ){\n      # if one of our packages matches the name of the wiki page, run\
      \ the script\n      $text .= $magicmodule->GenerateContent(%params);\n     \
      \ $text .= $magicmodule->ListParameters;\n    return $text;\n  }\n\n\n}\n\n\n\
      package CommandClass {\n  @ISA = qw(Parent);\n  sub CommandParameters { }\n\
      }\n</uscript>\n\nIf CommandParameters contains something, eg \n  sub CommandParameters\
      \ { 'foo', 'bar' }\n\nthen I get it out as a list. If it contains NOTHING, the\
      \ array @parameters gets the value of $class in it. Now I understand that  CommandParameters\
      \ is called with $class as the first element of its @_. But why is it spitting\
      \ it back out, and how do I stop it?\n\n...\n\nI've switched to using \n  sub\
      \ CommandParameters { undef }\n\nbut I still can't work out how to test that\
      \ the @parameters array is empty.\n\nALWAYS FALSE:\n\n    return \"\" if scalar\
      \ @parameters == 0;\n    return \"\" if @parameters == ()\n\nALWAYS TRUE\n \
      \   return \"\" if $parameters == 0;\n    return \"\" unless defined @parameters;\
      \ # I've put \"undef\" into an array ... what does that do to it?\n\n'''Mychaeel:'''\
      \ Well... an array with \"undef\" in it has at least a single (undefined) element.\
      \  An empty array is \"()\".  And:  An empty function always returns the value\
      \ of its \"@_\" &ndash; you have to do ''something'' in that function to set\
      \ a different return value.  Also, \"$parameters\" and \"@parameters\" are two\
      \ different and completely unrelated variables.\n\n'''Tarquin:''' For some reason\
      \ I had it in my head that $array returns the number of elements. :con: So how\
      \ do I check @array eq (undef) ? That gives a \"Use of uninitialized value in\
      \ string eq at emptyarray.pl line 31.\" Though I could just keep the function\
      \ empty and test for a return equal to ( $class ). \n\n'''Mychaeel:''' The much\
      \ neater way would be simply having the function return an empty array:\n  sub\
      \ CommandParameters { () }\n\nThat could be the default implementation in the\
      \ common base class, so that only subclasses which do have parameters need to\
      \ overwrite that function.\n\n'''Tarquin:''' Done. Thanks. :) I've just used\
      \ \"scalar @parameters == 0\" as I can't work out how to check it's equal to\
      \ ().\n\n'''Mychaeel:''' Since \"==\" expects scalar operands, the \"scalar\"\
      \ operator is redundant; otherwise yes, that'd be the way to check whether an\
      \ array is empty.\n  if (@parameters == 0) { ... }\n\n'''Tarquin:''' Stylistic\
      \ question. Would the following be considered ''really bad'', because a sub\
      \ is calling a child implementation of itself?\n\n<uscript>\n{\n  package WantedPages;\n\
      \  @ISA = qw(MagicContentMaker);\n  # ...snip...\n\n  sub GenerateContent {\n\
      \    my ( $class, %params ) = @_;\n    my ($text, @links);\n    #my $testoutput;\n\
      \    \n    if( $params{sort} = 'alpha' ) {\n      return WantedPagesAlpha->GenerateContent\n\
      \    }\n    else {\n      return WantedPagesRequests->GenerateContent;\n   \
      \ }\n}\n\n{\n  package WantedPagesAlpha;\n  @ISA = qw(WantedPages);\n  # ...etc\n\
      }\n</uscript>\n\n'''Mychaeel:''' Well... I'd consider it bad OOP, and it also\
      \ only works because GenerateContent is technically a static method for class\
      \ WantedPages whereas it is a normal (non-static) method in its superclass &ndash;\
      \ which in turn is bad OOP too and wouldn't work with any programming language\
      \ except Perl which doesn't have an all-too-strict syntactical notion of OOP\
      \ in the first place.\n\nSo I'd say it is ugly on several levels; but why make\
      \ \"sort=...\" a parameter anyway?  It'd be very neat and OOP-nice to create\
      \ an (abstract) class WantedPages where WantedPagesAlpha and WantedPagesRequests\
      \ are subclasses of which can be used as such in the #MAGIC header directly.\n\
      \n'''Tarquin:''' It seemed to me easier for the end-user to think of WantedPages\
      \ as a single command with different options. But it's a lot easier to code\
      \ your way. I was trying to understand how to travel ''down'' a class tree based\
      \ on options for the Lunatic UseMoo project. BTW, have you thought of making\
      \ a perl wrapper like [[Legacy:UMake|UMake]]? Just something that registers\
      \ to open perl filetypes, displays output and provides a \"run last script again\"\
      \ button. \n\n'''Mychaeel:''' No, I never considered doing that.  Setting up\
      \ the file types is a one-time configuration task, and my editor allows setting\
      \ up a custom menu command to run the script I'm editing without any helper\
      \ tools.\n\nActually, with something like UnrealScript's \"states\" you could\
      \ create your \"runtime subclass selection\" quite neatly.  States are more\
      \ or less a type of subclassing that's \"orthogonal\" to the normal subclassing.\
      \  Unlike normal subclasses however it is possible to switch an object's state\
      \ at runtime, so you could in theory have a single WantedPages class that has\
      \ two states, \"SortAlpha\" and \"SortRequests\", each of which provides its\
      \ own implementation of the GenerateContent method.  However, because states\
      \ can be switched at runtime, it is impossible to have different ''data'' in\
      \ different states &ndash; and that's also why you cannot simply switch classes\
      \ at runtime for a given object because there you ''can'' have different data\
      \ in different objects.  (Typecasting objects &ndash; as opposed to object ''references''\
      \ &ndash; therefore is a non-trivial task that usually involves the creation\
      \ of an all-new object of the target type in the process.)\n\n'''Tarquin:'''\
      \ Which text editor do you use?\n\n'''Mychaeel:''' Still [http://forums.beyondunreal.com/showthread.php?postid=1436905#post1436905\
      \ this one].  It may not be as feature-complete as other text editor that are\
      \ around, but what's more important to me is that it's entirely feature-complete\
      \ in respect to the features I ''want''.  :-) &ndash; Oh, and I have replaced\
      \ that very old \"umake\" version by [[Legacy:UMake|UMake]] meanwhile.\n\n==Feb\
      \ 2004==\n\nI think I FINALLY really get references! I wrote this last night\
      \ to check:\n\n<pre>\n#!/usr/bin/perl\n%myHash = (\n  foo => 'bar',\n  biz =>\
      \ 'bax',\n  );\nsub takeHash {\n  my $hashRef = shift;\n  foreach (keys %$hashRef)\
      \ {\n    print $hashRef->{$_}, ', ';\n  }\n}\ntakeHash(\\%myHash);\n</pre>\n\
      \nI am having to make design decisions in UseMOO. The key problem is that I\
      \ am breaking OO principles in bad ways. The basic idea behind MOO is that we\
      \ have a class tree like this:\n* Page\n** PrefsPage\n** AdminPage\n** WikiPage\n\
      *** RecentChanges\n*** EditPage\n\n... and so on. Each object adds new functionality.\
      \ To make this actually work, the script needs to start by choosing which class\
      \ to create an instance of, and then run that instance's browsePage() method.\
      \ The problem is how to choose the class in the first place. I've borrowed Mychaeel's\
      \ registration system, and using this, the new() function is able to travel\
      \ ''down'' the class tree, checking which conditions the browser parameters\
      \ satisfy. So:\n* register() needs to call its immediate parent, but the parent\
      \ itself needs to call ''its'' parent!\n* new() needs to call implementations\
      \ of itself in subclasses, which is BAD.\n\nFor register, I think the least\
      \ yucky solution is this:\n\n<pre>\n  sub WikiPage::register {\n    my $class\
      \ = shift;  $class = (ref $class or $class);\n    \n    # WikiPage can't call\
      \ this, it must call something further up\n    if ($class eq 'WikiPage') {\n\
      \      $class->SUPER::register;\n      return;\n    }\n    \n    push @registered,\
      \ $class\n      if $class->isa(Page)\n      and not grep /^\\Q$class\\E$/, @registered;\n\
      \    }\n</pre>\n\nand for new(), to avoid the danger of recursive calling, have\
      \ new(), newPageChild(), newWikiPageChild() etc.\n\n==Feb 2004 part 2==\n\n\
      I think I have a tweak to the above that makes it slightly more palatable.\n\
      \nGive each class a sub called \"this\" that returns the class name. (AFAIK\
      \ there's no way to magically do this in perl.) To use the example from the\
      \ perlboot manpage:\n\n<pre>\n{ \n  package Animal;\n  \n  sub this { 'Animal'\
      \ }\n  \n  sub speak {\n    my $class = shift; $class = (ref $class or $class);\n\
      \    print \"a $class goes \", $class->sound, \"!\\n\";\n    if ( $class->this\
      \ ne this ) {\n      print \"we're not where we were\";\n    }\n    return;\n\
      \  }\n}\n</pre>\n\nNow if we call Horse->speak (or some other subclass), the\
      \ speak sub know it's running in a superclass. This approach would eliminate\
      \ the use of the class name in my register sub above, which makes it look a\
      \ bit cleaner.\n\n==Feb 2004 part 3==\n\nI think I finally understand what Mych\
      \ means when he says that trying something and finding out it doesn't work days\
      \ later can be a good thing.\n\nI've had to change the way Moo creates instances,\
      \ because the first way isn't flexible enough. The new method is a little unorthodox,\
      \ but having seen for myself the drawbacks of the original method, I'm more\
      \ convinced the new method is right.\n\nWhat I'm now doing is this:\n\n<pre>\n\
      \ my $instance = {}\n Page->constructor( $instance, @variables );\n</pre>\n\n\
      in effect, constructor() is really a blesser.\n\n[[Category:Legacy Rant|{{PAGENAME}}]]"
  properties: []
  revId: 7989
name: "Legacy:Tarquin/Perl"
revision:
  revid: 7989
  parentid: 7990
  user: "El Muerte"
  timestamp: 1144361548.000000000
  comment: "revert"
timestamp: 1668755710.147906000
