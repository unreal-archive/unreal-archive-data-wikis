---
parse:
  title: "Legacy:VitalOverdose/The DropShip Controller"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Vehicle_Dropship\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Vehicle Dropship</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#By_Vitaloverdose_.26_Darknet\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">By Vitaloverdose\
      \ &amp; Darknet</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-3\"><a href=\"\
      #Works_online\"><span class=\"tocnumber\">1.1.1</span> <span class=\"toctext\"\
      >Works online</span></a></li>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"\
      #Darknets_Dropship.\"><span class=\"tocnumber\">1.1.2</span> <span class=\"\
      toctext\">Darknets Dropship.</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Vitals_DropShipSystem\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Vitals DropShipSystem</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">1.3</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h1><span class=\"mw-headline\" id=\"\
      Vehicle_Dropship\">Vehicle Dropship</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=1\"\
      \ title=\"Edit section: Vehicle Dropship\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h1>\n<h2><span class=\"mw-headline\" id=\"By_Vitaloverdose_.26_Darknet\"\
      >By Vitaloverdose &amp; Darknet</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=2\"\
      \ title=\"Edit section: By Vitaloverdose &amp; Darknet\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<h3><span class=\"mw-headline\"\
      \ id=\"Works_online\">Works online</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=3\"\
      \ title=\"Edit section: Works online\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>this is my solution to a long standing problem with\
      \ creating a dropship that can carry vehicles. I spent quite a long time on\
      \ this script.The ship was built and made flyable by darknet and i then subclassed\
      \ the ship and added the dropship system. Theres no reason this cant be a single\
      \ class its just splitting it up this way allows 2 people to work on the same\
      \ project at the same time. This system if in the alpha test stage, it had been\
      \ tested online by a few people as well as myself and so far all the reports\
      \ have been good. We did have a moving hatch for the back door but because you\
      \ cant animate collision on meshes online the idea had to be scraped.Though\
      \ i think ive worked out a way around it .</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Darknets_Dropship.\">Darknets Dropship.</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=4\"\
      \ title=\"Edit section: Darknets Dropship.\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/File:Legacy_Shot00002.jpeg\" class=\"image\"\
      \ title=\"Legacy_Shot00002.jpeg\"><img alt=\"Legacy_Shot00002.jpeg\" src=\"\
      /w/images/Legacy_Shot00002.jpeg\" width=\"314\" height=\"228\" /></a></p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"co1\">//</span>\n<span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"kw1\">class</span> DarkDropShip <span class=\"kw1\">extends</span>\
      \ ONSattackCraft\n    <span class=\"kw1\">placeable</span>;\n \n<span class=\"\
      co2\">#exec OBJ LOAD FILE=..\\animations\\darkdropship_an.ukx</span>\n \n<span\
      \ class=\"kw1\">var</span>     <span class=\"kw5\">int</span>              \
      \               CurrentIndex;\n<span class=\"kw1\">var</span>     <span class=\"\
      kw5\">bool</span>                            bDoorIsOpen;\n \n<span class=\"\
      co1\">// AI hint</span>\n<span class=\"kw1\">Function</span> <span class=\"\
      kw5\">Bool</span> FastVehicle<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">Function</span> <span class=\"kw5\">Bool</span> Dodge<span class=\"br0\"\
      >(</span>eDoubleClickDir DoubleClickMove<span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"kw3\">FRand</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\"\
      >0.7</span> <span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\
      \tVehicleMovingTime <span class=\"sy0\">=</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">TimeSeconds</span> <span class=\"sy0\">+</span> <span class=\"\
      nu0\">1</span>;\n\t\tRise <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;\n\
      \t<span class=\"br0\">}</span>\n\t<span class=\"kw2\">return</span> <span class=\"\
      kw6\">False</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">Function</span> SpecialCalcBehindView<span class=\"br0\"\
      >(</span><span class=\"kw9\">PlayerController</span> PC, <span class=\"kw1\"\
      >out</span> <span class=\"kw9\">actor</span> ViewActor, <span class=\"kw1\"\
      >out</span> <span class=\"kw5\">Vector</span> CameraLocation, <span class=\"\
      kw1\">out</span> <span class=\"kw5\">Rotator</span> CameraRotation <span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\">Local</span>\
      \ <span class=\"kw5\">Vector</span> CamLookAt, HitLocation, HitNormal, OffseTarget_Vector;\n\
      \t<span class=\"kw1\">Local</span> <span class=\"kw9\">Actor</span> HitActor;\n\
      \    <span class=\"kw1\">Local</span> <span class=\"kw5\">Vector</span> x, y,\
      \ z;\n \n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>DesiredTPCamDistance\
      \ <span class=\"sy0\">&lt;</span> TPCamDistance<span class=\"br0\">)</span>\n\
      \t\tTPCamDistance <span class=\"sy0\">=</span> <span class=\"kw3\">FMax</span><span\
      \ class=\"br0\">(</span>DesiredTPCamDistance, TPCamDistance <span class=\"sy0\"\
      >-</span> CameraSpeed <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"me0\">TimeSeconds</span> <span class=\"\
      sy0\">-</span> LastCameraCalcTime<span class=\"br0\">)</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"kw2\">else</span> <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>DesiredTPCamDistance <span class=\"sy0\">&gt;</span>\
      \ TPCamDistance<span class=\"br0\">)</span>\n\t\tTPCamDistance <span class=\"\
      sy0\">=</span> <span class=\"kw3\">FMin</span><span class=\"br0\">(</span>DesiredTPCamDistance,\
      \ TPCamDistance <span class=\"sy0\">+</span> CameraSpeed <span class=\"sy0\"\
      >*</span> <span class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">TimeSeconds</span> <span class=\"sy0\">-</span> LastCameraCalcTime<span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\n \n    <span class=\"\
      kw3\">GetAxes</span><span class=\"br0\">(</span>PC.<span class=\"kw7\">Rotation</span>,\
      \ x, y, z<span class=\"br0\">)</span>;\n\tViewActor <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">self</span>;\n\tCamLookAt <span class=\"sy0\">=</span>\
      \ GetCameraLocationStart<span class=\"br0\">(</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">+</span> <span class=\"br0\">(</span>TPCamLookat <span\
      \ class=\"sy0\">&gt;&gt;</span> <span class=\"kw7\">Rotation</span><span class=\"\
      br0\">)</span> <span class=\"sy0\">+</span> TPCamWorldOffset;\n \n\tOffseTarget_Vector\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">Vect</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;\n\tOffseTarget_Vector.<span\
      \ class=\"me0\">X</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span\
      \ class=\"nu0\">1.0</span> <span class=\"sy0\">*</span> TPCamDistance;\n \n\t\
      CameraLocation <span class=\"sy0\">=</span> CamLookAt <span class=\"sy0\">+</span>\
      \ <span class=\"br0\">(</span>OffseTarget_Vector <span class=\"sy0\">&gt;&gt;</span>\
      \ PC.<span class=\"kw7\">Rotation</span><span class=\"br0\">)</span>;\n \n\t\
      HitActor <span class=\"sy0\">=</span> <span class=\"kw4\">Trace</span><span\
      \ class=\"br0\">(</span>HitLocation, HitNormal, CameraLocation, <span class=\"\
      kw7\">Location</span>, <span class=\"kw6\">true</span>, <span class=\"kw3\"\
      >Vect</span><span class=\"br0\">(</span><span class=\"nu0\">40</span>, <span\
      \ class=\"nu0\">40</span>, <span class=\"nu0\">40</span><span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> HitActor <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span>\n\t     <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span>HitActor.<span class=\"me0\">bWorldGeometry</span> <span class=\"\
      sy0\">||</span> HitActor <span class=\"sy0\">==</span> GetVehicleBase<span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span\
      \ class=\"kw4\">Trace</span><span class=\"br0\">(</span>HitLocation, HitNormal,\
      \ CameraLocation, <span class=\"kw7\">Location</span>, <span class=\"kw6\">False</span>,\
      \ <span class=\"kw3\">Vect</span><span class=\"br0\">(</span><span class=\"\
      nu0\">40</span>, <span class=\"nu0\">40</span>, <span class=\"nu0\">40</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>\n\t\t\tCameraLocation <span class=\"sy0\">=</span> HitLocation;\n\
      \ \n    CameraRotation <span class=\"sy0\">=</span> <span class=\"kw3\">Normalize</span><span\
      \ class=\"br0\">(</span>PC.<span class=\"kw7\">Rotation</span> <span class=\"\
      sy0\">+</span> PC.<span class=\"me0\">ShakeRot</span><span class=\"br0\">)</span>;\n\
      \    CameraLocation <span class=\"sy0\">=</span> CameraLocation <span class=\"\
      sy0\">+</span> PC.<span class=\"me0\">ShakeOffset</span>.<span class=\"me0\"\
      >X</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> PC.<span\
      \ class=\"me0\">ShakeOffset</span>.<span class=\"me0\">Y</span> <span class=\"\
      sy0\">*</span> y <span class=\"sy0\">+</span> PC.<span class=\"me0\">ShakeOffset</span>.<span\
      \ class=\"me0\">Z</span> <span class=\"sy0\">*</span> z;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">Function</span> Died<span class=\"br0\">(</span><span\
      \ class=\"kw9\">Controller</span> Killer, class<span class=\"sy0\">&lt;</span>DamageType<span\
      \ class=\"sy0\">&gt;</span> <span class=\"kw9\">damageType</span>, <span class=\"\
      kw5\">Vector</span> HitLocation<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw1\">Local</span> <span class=\"kw5\">Int</span>\
      \ I;\n \n    <span class=\"kw2\">if</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"\
      sy0\">!=</span> NM_DedicatedServer<span class=\"br0\">)</span>\n\t<span class=\"\
      br0\">{</span>\n    \t<span class=\"kw2\">for</span><span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>TrailEffects.<span\
      \ class=\"me0\">Length</span>;I<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n        \tTrailEffects<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n        TrailEffects.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n \n\t\t<span class=\"\
      kw2\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t\tStreamerEffect<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n\t\tStreamerEffect.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n    <span class=\"\
      br0\">}</span>\n \n\t<span class=\"kw6\">Super</span>.<span class=\"me0\">Died</span><span\
      \ class=\"br0\">(</span>Killer, <span class=\"kw9\">damageType</span>, HitLocation<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >simulated</span> <span class=\"kw1\">Function</span> <span class=\"kw4\">Destroyed</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw1\">Local</span> <span class=\"kw5\">Int</span> I;\n \n\
      \    <span class=\"kw2\">if</span><span class=\"br0\">(</span><span class=\"\
      kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"sy0\">!=</span>\
      \ NM_DedicatedServer<span class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\
      \    \t<span class=\"kw2\">for</span><span class=\"br0\">(</span>i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>TrailEffects.<span\
      \ class=\"me0\">Length</span>;I<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n        \tTrailEffects<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n        TrailEffects.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n \n\t\t<span class=\"\
      kw2\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t\tStreamerEffect<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n\t\tStreamerEffect.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n    <span class=\"\
      br0\">}</span>\n \n    <span class=\"kw6\">Super</span>.<span class=\"kw4\"\
      >Destroyed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">simulated</span> <span\
      \ class=\"kw1\">event</span> DrivingStatusChanged<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >Local</span> <span class=\"kw5\">Vector</span> RotX, RotY, RotZ;\n <span class=\"\
      kw1\">Local</span> <span class=\"kw5\">Int</span> I;\n \n\t<span class=\"kw6\"\
      >Super</span>.<span class=\"me0\">DrivingStatusChanged</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n \n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span>bDriving <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span\
      \ class=\"sy0\">!=</span> NM_DedicatedServer <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"sy0\">!</span>bDropDetail<span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n        <span class=\"kw3\">GetAxes</span><span class=\"\
      br0\">(</span><span class=\"kw7\">Rotation</span>,RotX,RotY,RotZ<span class=\"\
      br0\">)</span>;\n \n        <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>TrailEffects.<span class=\"me0\">Length</span> <span class=\"sy0\"\
      >==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n      \
      \  <span class=\"br0\">{</span>\n            TrailEffects.<span class=\"me0\"\
      >Length</span> <span class=\"sy0\">=</span> TrailEffectPositions.<span class=\"\
      me0\">Length</span>;\n \n        \t<span class=\"kw2\">for</span><span class=\"\
      br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>;i<span\
      \ class=\"sy0\">&lt;</span>TrailEffects.<span class=\"me0\">Length</span>;I<span\
      \ class=\"sy0\">++</span><span class=\"br0\">)</span>\n            \t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>TrailEffects<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n            \t<span class=\"\
      br0\">{</span>\n                \tTrailEffects<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span>TrailEffectClass, <span class=\"kw6\">self</span>,,\
      \ <span class=\"kw7\">Location</span> <span class=\"sy0\">+</span> <span class=\"\
      br0\">(</span>TrailEffectPositions<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>;\n                \tTrailEffects<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw4\">SetBase</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">self</span><span class=\"br0\">)</span>;\n\
      \                    TrailEffects<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">SetRelativeRotation</span><span class=\"\
      br0\">(</span> <span class=\"kw3\">rot</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">32768</span>,<span class=\"nu0\"\
      >0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n      \
      \          <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n\
      \ \n        <span class=\"kw2\">if</span> <span class=\"br0\">(</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\"\
      >0</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n\
      \    \t\tStreamerEffect.<span class=\"me0\">Length</span> <span class=\"sy0\"\
      >=</span> StreamerEffectOffset.<span class=\"me0\">Length</span>;\n \n    \t\
      \t<span class=\"kw2\">for</span><span class=\"br0\">(</span>i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n        \t\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>StreamerEffect<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\
      \ <span class=\"sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"\
      br0\">)</span>\n        \t\t<span class=\"br0\">{</span>\n        \t\t\tStreamerEffect<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw4\">Spawn</span><span class=\"br0\">(</span>StreamerEffectClass,\
      \ <span class=\"kw6\">self</span>,, <span class=\"kw7\">Location</span> <span\
      \ class=\"sy0\">+</span> <span class=\"br0\">(</span>StreamerEffectOffset<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span>\
      \ <span class=\"kw7\">Rotation</span><span class=\"br0\">)</span> <span class=\"\
      br0\">)</span>;\n        \t\t\tStreamerEffect<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"kw4\">SetBase</span><span class=\"br0\"\
      >(</span><span class=\"kw6\">self</span><span class=\"br0\">)</span>;\n    \
      \    \t\t<span class=\"br0\">}</span>\n    \t<span class=\"br0\">}</span>\n\
      \    <span class=\"br0\">}</span>\n    <span class=\"kw2\">else</span>\n   \
      \ <span class=\"br0\">{</span>\n        <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"me0\"\
      >NetMode</span> <span class=\"sy0\">!=</span> NM_DedicatedServer<span class=\"\
      br0\">)</span>\n    \t<span class=\"br0\">{</span>\n        \t<span class=\"\
      kw2\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>;i<span class=\"sy0\">&lt;</span>TrailEffects.<span\
      \ class=\"me0\">Length</span>;I<span class=\"sy0\">++</span><span class=\"br0\"\
      >)</span>\n        \t   TrailEffects<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n \n        \tTrailEffects.<span class=\"me0\">Length</span>\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n \n    \t\t<span\
      \ class=\"kw2\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n                StreamerEffect<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"kw4\">Destroy</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n \n            StreamerEffect.<span\
      \ class=\"me0\">Length</span> <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0</span>;\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">simulated</span> <span\
      \ class=\"kw1\">Function</span> <span class=\"kw4\">Tick</span><span class=\"\
      br0\">(</span><span class=\"kw5\">float</span> DeltaTime<span class=\"br0\"\
      >)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">Local</span>\
      \ <span class=\"kw5\">float</span> EnginePitch, DesiredOpacity, DeltaOpacity,\
      \ MaxOpacityChange, ThrustAmount;\n\t<span class=\"kw1\">Local</span> <span\
      \ class=\"kw8\">TrailEmitter</span> T;\n    <span class=\"kw1\">Local</span>\
      \ <span class=\"kw5\">int</span> I;\n\t<span class=\"kw1\">Local</span> <span\
      \ class=\"kw5\">Vector</span> RelVel;\n\t<span class=\"kw1\">Local</span> <span\
      \ class=\"kw5\">Bool</span> NewStreamerActive, bIsBehindView;\n\t<span class=\"\
      kw1\">Local</span> <span class=\"kw9\">PlayerController</span> PC;\n \n    <span\
      \ class=\"kw2\">if</span><span class=\"br0\">(</span><span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">NetMode</span> <span class=\"sy0\">!=</span> NM_DedicatedServer<span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n        EnginePitch\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">64.0</span> <span class=\"\
      sy0\">+</span> <span class=\"kw3\">VSize</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Velocity</span><span class=\"br0\">)</span><span class=\"sy0\"\
      >/</span>MaxPitchSpeed <span class=\"sy0\">*</span> <span class=\"nu0\">32.0</span>;\n\
      \        <span class=\"kw7\">SoundPitch</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">FClamp</span><span class=\"br0\">(</span>EnginePitch,\
      \ <span class=\"nu0\">64</span>, <span class=\"nu0\">96</span><span class=\"\
      br0\">)</span>;\n \n        RelVel <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Velocity</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw7\"\
      >Rotation</span>;\n \n        PC <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Level</span>.<span class=\"me0\">GetLocalPlayerController</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>PC <span class=\"sy0\">!=</span> <span\
      \ class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span> PC.<span class=\"\
      me0\">ViewTarget</span> <span class=\"sy0\">==</span> <span class=\"kw6\">self</span><span\
      \ class=\"br0\">)</span>\n\t\t\tbIsBehindView <span class=\"sy0\">=</span> PC.<span\
      \ class=\"me0\">bBehindView</span>;\n\t\t<span class=\"kw2\">else</span>\n \
      \           bIsBehindView <span class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\n\
      \ \n    \t<span class=\"co1\">// Adjust Engine FX depending on being drive/velocity</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      sy0\">!</span>bIsBehindView<span class=\"br0\">)</span>\n\t\t<span class=\"\
      br0\">{</span>\n\t\t\t<span class=\"kw2\">for</span><span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>TrailEffects.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t\t\tTrailEffects<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">SetThrustEnabled</span><span class=\"br0\"\
      >(</span><span class=\"kw6\">False</span><span class=\"br0\">)</span>;\n\t\t\
      <span class=\"br0\">}</span>\n        <span class=\"kw2\">else</span>\n    \
      \    <span class=\"br0\">{</span>\n\t\t\tThrustAmount <span class=\"sy0\">=</span>\
      \ <span class=\"kw3\">FClamp</span><span class=\"br0\">(</span>OutputThrust,\
      \ <span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"\
      br0\">)</span>;\n \n\t\t\t<span class=\"kw2\">for</span><span class=\"br0\"\
      >(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"\
      sy0\">&lt;</span>TrailEffects.<span class=\"me0\">Length</span>; I<span class=\"\
      sy0\">++</span><span class=\"br0\">)</span>\n\t\t\t<span class=\"br0\">{</span>\n\
      \t\t\t\tTrailEffects<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">SetThrustEnabled</span><span class=\"br0\">(</span><span class=\"\
      kw6\">true</span><span class=\"br0\">)</span>;\n\t\t\t\tTrailEffects<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">SetThrust</span><span\
      \ class=\"br0\">(</span>ThrustAmount<span class=\"br0\">)</span>;\n\t\t\t<span\
      \ class=\"br0\">}</span>\n\t\t<span class=\"br0\">}</span>\n \n\t\t<span class=\"\
      co1\">// Update streamer opacity (limit max change speed)</span>\n\t\tDesiredOpacity\
      \ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>RelVel.<span class=\"\
      me0\">X</span> <span class=\"sy0\">-</span> StreamerOpacityRamp.<span class=\"\
      kw3\">Min</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span\
      \ class=\"br0\">(</span>StreamerOpacityRamp.<span class=\"kw3\">Max</span> <span\
      \ class=\"sy0\">-</span> StreamerOpacityRamp.<span class=\"kw3\">Min</span><span\
      \ class=\"br0\">)</span>;\n\t\tDesiredOpacity <span class=\"sy0\">=</span> <span\
      \ class=\"kw3\">FClamp</span><span class=\"br0\">(</span>DesiredOpacity, <span\
      \ class=\"nu0\">0.0</span>, StreamerOpacityMax<span class=\"br0\">)</span>;\n\
      \ \n\t\tMaxOpacityChange <span class=\"sy0\">=</span> DeltaTime <span class=\"\
      sy0\">*</span> StreamerOpacityChangeRate;\n \n\t\tDeltaOpacity <span class=\"\
      sy0\">=</span> DesiredOpacity <span class=\"sy0\">-</span> StreamerCurrentOpacity;\n\
      \t\tDeltaOpacity <span class=\"sy0\">=</span> <span class=\"kw3\">FClamp</span><span\
      \ class=\"br0\">(</span>DeltaOpacity, <span class=\"sy0\">-</span>MaxOpacityChange,\
      \ MaxOpacityChange<span class=\"br0\">)</span>;\n \n\t\t<span class=\"kw2\"\
      >if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>bIsBehindView<span\
      \ class=\"br0\">)</span>\n            StreamerCurrentOpacity <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0.0</span>;\n        <span class=\"kw2\"\
      >else</span>\n    \t\tStreamerCurrentOpacity <span class=\"sy0\">+=</span> DeltaOpacity;\n\
      \ \n\t\t<span class=\"kw2\">if</span><span class=\"br0\">(</span>StreamerCurrentOpacity\
      \ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.01</span><span class=\"\
      br0\">)</span>\n\t\t\tNewStreamerActive <span class=\"sy0\">=</span> <span class=\"\
      kw6\">False</span>;\n\t\t<span class=\"kw2\">else</span>\n\t\t\tNewStreamerActive\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n \n\t\t<span\
      \ class=\"kw2\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>StreamerEffect.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t\t<span class=\"br0\">{</span>\n\t\t\t<span class=\"kw2\"\
      >if</span><span class=\"br0\">(</span>NewStreamerActive<span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"br0\">{</span>\n\t\t\t\t<span class=\"kw2\">if</span><span\
      \ class=\"br0\">(</span><span class=\"sy0\">!</span>StreamerActive<span class=\"\
      br0\">)</span>\n\t\t\t\t<span class=\"br0\">{</span>\n\t\t\t\t\tT <span class=\"\
      sy0\">=</span> <span class=\"kw8\">TrailEmitter</span><span class=\"br0\">(</span>StreamerEffect<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">Emitters</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span\
      \ class=\"br0\">)</span>;\n\t\t\t\t\tT.<span class=\"me0\">ResetTrail</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t\t\t\t<span class=\"\
      br0\">}</span>\n\t\t\t\tStreamerEffect<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"me0\">Emitters</span><span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">Disabled</span>\
      \ <span class=\"sy0\">=</span> <span class=\"kw6\">False</span>;\n\t\t\t\tStreamerEffect<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">Emitters</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">Opacity</span> <span class=\"sy0\">=</span> StreamerCurrentOpacity;\n\
      \t\t\t    <span class=\"br0\">}</span>\n \n            <span class=\"kw2\">else</span>\n\
      \t\t\t   <span class=\"br0\">{</span>\n\t\t\t\tStreamerEffect<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me0\">Emitters</span><span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">Disabled</span> <span class=\"sy0\">=</span> <span class=\"\
      kw6\">true</span>;\n\t\t\t\tStreamerEffect<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"me0\">Emitters</span><span class=\"br0\"\
      >[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"\
      me0\">Opacity</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;\n\
      \t\t\t   <span class=\"br0\">}</span>\n\t\t<span class=\"br0\">}</span>\n \n\
      \t\tStreamerActive <span class=\"sy0\">=</span> NewStreamerActive;\n    <span\
      \ class=\"br0\">}</span>\n \n    <span class=\"kw6\">Super</span>.<span class=\"\
      kw4\">Tick</span><span class=\"br0\">(</span>DeltaTime<span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">Function</span> <span class=\"\
      kw5\">float</span> ImpactDamageModifier<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">Local</span>\
      \ <span class=\"kw5\">float</span> Multiplier;\n    <span class=\"kw1\">Local</span>\
      \ <span class=\"kw5\">Vector</span> X, Y, Z;\n \n    <span class=\"kw3\">GetAxes</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Rotation</span>, X, Y, Z<span class=\"\
      br0\">)</span>;\n    <span class=\"kw2\">if</span> <span class=\"br0\">(</span>ImpactInfo.<span\
      \ class=\"me0\">ImpactNorm</span> Dot Z <span class=\"sy0\">&gt;</span> <span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>\n        Multiplier <span\
      \ class=\"sy0\">=</span> <span class=\"nu0\">0.75</span><span class=\"sy0\"\
      >-</span><span class=\"br0\">(</span>ImpactInfo.<span class=\"me0\">ImpactNorm</span>\
      \ dot Z<span class=\"br0\">)</span>;\n    <span class=\"kw2\">else</span>\n\
      \        Multiplier <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>;\n\
      \ \n    <span class=\"kw2\">return</span> <span class=\"kw6\">Super</span>.<span\
      \ class=\"me0\">ImpactDamageModifier</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">*</span> Multiplier;\n<span class=\"\
      br0\">}</span>\n \n<span class=\"kw1\">Function</span> <span class=\"kw5\">Bool</span>\
      \ RecommendLongRangedAttack<span class=\"br0\">(</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span> <span class=\"kw2\">Return</span> <span class=\"\
      kw6\">true</span>; <span class=\"br0\">}</span>\n \n \n<span class=\"kw1\">Function</span>\
      \ <span class=\"kw5\">Bool</span> PlaceExitingDriver<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>                       <span class=\"co1\">// &lt;&lt;&lt;&lt;&lt;&lt;\
      \ FIXME Fix to not be specific to this class after demo</span>\n<span class=\"\
      br0\">{</span>\n <span class=\"kw1\">Local</span> <span class=\"kw5\">Int</span>\
      \ I;\n\t<span class=\"kw1\">Local</span> <span class=\"kw5\">Vector</span> tryPlace,\
      \ Extent, HitLocation, HitNormal, ZOffset;\n \n\tExtent <span class=\"sy0\"\
      >=</span> Driver.<span class=\"kw1\">default</span>.<span class=\"kw7\">CollisionRadius</span>\
      \ <span class=\"sy0\">*</span> <span class=\"kw3\">Vect</span><span class=\"\
      br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span>;\n\tExtent <span class=\"\
      sy0\">*=</span> <span class=\"nu0\">2</span>;\n\tExtent.<span class=\"me0\"\
      >Z</span> <span class=\"sy0\">=</span> Driver.<span class=\"kw1\">default</span>.<span\
      \ class=\"kw7\">CollisionHeight</span>;\n\tZOffset <span class=\"sy0\">=</span>\
      \ Driver.<span class=\"kw1\">default</span>.<span class=\"kw7\">CollisionHeight</span>\
      \ <span class=\"sy0\">*</span> <span class=\"kw3\">Vect</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span>;\n\t<span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw4\">Trace</span><span\
      \ class=\"br0\">(</span>HitLocation, HitNormal, <span class=\"kw7\">Location</span>\
      \ <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ZOffset <span class=\"\
      sy0\">*</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>, <span\
      \ class=\"kw7\">Location</span>, <span class=\"kw6\">False</span>, Extent<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n\t\t<span class=\"kw2\">return</span> <span\
      \ class=\"kw6\">False</span>;\n \n\t<span class=\"co1\">//avoid running Driver\
      \ over by placing in direction perpendicular to velocity</span>\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"kw3\">VSize</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Velocity</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">100</span> <span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\ttryPlace <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"br0\"\
      >(</span><span class=\"kw7\">Velocity</span> cross <span class=\"kw3\">Vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw7\"\
      >CollisionRadius</span> <span class=\"sy0\">+</span> Driver.<span class=\"kw1\"\
      >default</span>.<span class=\"kw7\">CollisionRadius</span> <span class=\"br0\"\
      >)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1.25</span> ;\n\t\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw3\">FRand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span> <span class=\"br0\"\
      >)</span>\n\t\t\ttryPlace <span class=\"sy0\">*=</span> <span class=\"sy0\"\
      >-</span><span class=\"nu0\">1</span>; <span class=\"co1\">//randomly prefer\
      \ other side</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ <span class=\"br0\">(</span><span class=\"kw4\">Trace</span><span class=\"\
      br0\">(</span>HitLocation, HitNormal, <span class=\"kw7\">Location</span> <span\
      \ class=\"sy0\">+</span> tryPlace <span class=\"sy0\">+</span> ZOffset, <span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">+</span> ZOffset, <span\
      \ class=\"kw6\">False</span>, Extent<span class=\"br0\">)</span> <span class=\"\
      sy0\">==</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Driver.<span class=\"kw4\">SetLocation</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Location</span> <span class=\"sy0\">+</span> tryPlace <span\
      \ class=\"sy0\">+</span> ZOffset<span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>\n\t\t     <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span\
      \ class=\"kw4\">Trace</span><span class=\"br0\">(</span>HitLocation, HitNormal,\
      \ <span class=\"kw7\">Location</span> <span class=\"sy0\">-</span> tryPlace\
      \ <span class=\"sy0\">+</span> ZOffset, <span class=\"kw7\">Location</span>\
      \ <span class=\"sy0\">+</span> ZOffset, <span class=\"kw6\">False</span>, Extent<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"sy0\">&amp;&amp;</span> Driver.<span class=\"kw4\">SetLocation</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Location</span> <span class=\"sy0\"\
      >-</span> tryPlace <span class=\"sy0\">+</span> ZOffset<span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"\
      kw2\">return</span> <span class=\"kw6\">true</span>;\n\t<span class=\"br0\"\
      >}</span>\n \n\t<span class=\"kw2\">for</span><span class=\"br0\">(</span> i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>ExitPositions.<span\
      \ class=\"me0\">Length</span>; I<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> ExitPositions<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">Z</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"\
      br0\">)</span>\n\t\t\tZOffset <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >Vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"\
      nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">*</span> ExitPositions<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">Z</span>;\n\t\
      \t<span class=\"kw2\">else</span>\n\t\t\tZOffset <span class=\"sy0\">=</span>\
      \ Driver.<span class=\"kw1\">default</span>.<span class=\"kw7\">CollisionHeight</span>\
      \ <span class=\"sy0\">*</span> <span class=\"kw3\">Vect</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span>;\n \n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> bRelativeExitPos <span class=\"\
      br0\">)</span>\n\t\t\ttryPlace <span class=\"sy0\">=</span> <span class=\"kw7\"\
      >Location</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> <span\
      \ class=\"br0\">(</span>ExitPositions<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span><span class=\"sy0\">-</span>ZOffset<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw7\">Rotation</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">+</span> ZOffset;\n\t\t<span class=\"\
      kw2\">else</span>\n\t\t\ttryPlace <span class=\"sy0\">=</span> ExitPositions<span\
      \ class=\"br0\">[</span>i<span class=\"br0\">]</span>;\n \n\t\t<span class=\"\
      co1\">// First, do a line check (stops us passing through things on exit).</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> bRelativeExitPos\
      \ <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw4\">Trace</span><span\
      \ class=\"br0\">(</span>HitLocation, HitNormal, tryPlace, <span class=\"kw7\"\
      >Location</span> <span class=\"sy0\">+</span> ZOffset, <span class=\"kw6\">False</span>,\
      \ Extent<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"kw2\">continue</span>;\n\
      \ \n\t\t<span class=\"co1\">// Then see if we can place the player there.</span>\n\
      \t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      sy0\">!</span>Driver.<span class=\"kw4\">SetLocation</span><span class=\"br0\"\
      >(</span>tryPlace<span class=\"br0\">)</span> <span class=\"br0\">)</span>\n\
      \t\t\t<span class=\"kw2\">continue</span>;\n \n\t\t<span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">true</span>;\n\t<span class=\"br0\">}</span>\n\t<span\
      \ class=\"kw2\">return</span> <span class=\"kw6\">False</span>;\n<span class=\"\
      br0\">}</span>\n \n \n<span class=\"co1\">//==================Mod off From ONSPR=====================================</span>\n\
      \ \n<span class=\"kw1\">Function</span> AltFire<span class=\"br0\">(</span><span\
      \ class=\"kw1\">optional</span> <span class=\"kw5\">float</span> F<span class=\"\
      br0\">)</span>            <span class=\"co1\">//avoid sending altfire to weapon</span>\n\
      <span class=\"br0\">{</span>\n <span class=\"kw6\">Super</span><span class=\"\
      br0\">(</span><span class=\"kw9\">Vehicle</span><span class=\"br0\">)</span>.<span\
      \ class=\"me0\">AltFire</span><span class=\"br0\">(</span>F<span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span>\n \n \n<span class=\"kw1\">static</span>\
      \ <span class=\"kw1\">function</span> StaticPrecache<span class=\"br0\">(</span>LevelInfo\
      \ L<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"\
      kw6\">Super</span>.<span class=\"me0\">StaticPrecache</span><span class=\"br0\"\
      >(</span>L<span class=\"br0\">)</span>;\n \n\tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorWing'</span><span class=\"br0\"\
      >)</span>;\n\tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span class=\"\
      br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorTailWing'</span><span\
      \ class=\"br0\">)</span>;\n\tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorGun'</span><span class=\"br0\"\
      >)</span>;\n\tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span class=\"\
      br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"st0\">'AW-2004Particles.Debris.Veh_Debris2'</span><span\
      \ class=\"br0\">)</span>;\n\tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'AW-2004Particles.Debris.Veh_Debris1'</span><span class=\"br0\">)</span>;\n\
      \tL.<span class=\"me0\">AddPrecacheStaticMesh</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">StaticMesh</span><span class=\"st0\">'WeaponStaticMesh.RocketProj'</span><span\
      \ class=\"br0\">)</span>;\n \n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'AW-2004Particles.Energy.SparkHead'</span><span class=\"br0\">)</span>;\n \
      \   L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'ExplosionTex.Framed.exp2_frames'</span><span\
      \ class=\"br0\">)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'ExplosionTex.Framed.exp1_frames'</span><span class=\"br0\">)</span>;\n   \
      \ L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'ExplosionTex.Framed.we1_frames'</span><span\
      \ class=\"br0\">)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'AW-2004Particles.Weapons.SmokePanels2'</span><span class=\"br0\">)</span>;\n\
      \    L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'AW-2004Particles.Fire.NapalmSpot'</span><span\
      \ class=\"br0\">)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'EpicParticles.Fire.SprayFire1'</span><span class=\"br0\">)</span>;\n    L.<span\
      \ class=\"me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'VMVehicles-TX.AttackCraftGroup.RaptorColorRed'</span><span\
      \ class=\"br0\">)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'VMVehicles-TX.AttackCraftGroup.RaptorColorBlue'</span><span class=\"br0\"\
      >)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"\
      br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\">'VMVehicles-TX.AttackCraftGroup.AttackCraftNoColor'</span><span\
      \ class=\"br0\">)</span>;\n\tL.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'AW-2004Particles.Weapons.TrailBlura'</span><span class=\"br0\">)</span>;\n\
      \    L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">Material</span><span class=\"st0\">'Engine.GRADIENT_Fade'</span><span\
      \ class=\"br0\">)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'VMVehicles-TX.AttackCraftGroup.raptorCOLORtest'</span><span class=\"br0\"\
      >)</span>;\n    L.<span class=\"me0\">AddPrecacheMaterial</span><span class=\"\
      br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\">'AW-2004Particles.Fire.SmokeFragment'</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\"\
      >simulated</span> <span class=\"kw1\">Function</span> UpdatePrecacheStaticMeshes<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorWing'</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorTailWing'</span><span class=\"\
      br0\">)</span>;\n\t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'ONSDeadVehicles-SM.RAPTORexploded.RaptorGun'</span><span class=\"br0\"\
      >)</span>;\n\t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'AW-2004Particles.Debris.Veh_Debris2'</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'AW-2004Particles.Debris.Veh_Debris1'</span><span class=\"br0\">)</span>;\n\
      \t<span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheStaticMesh</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">StaticMesh</span><span class=\"\
      st0\">'WeaponStaticMesh.RocketProj'</span><span class=\"br0\">)</span>;\n \n\
      \t<span class=\"kw6\">Super</span>.<span class=\"me0\">UpdatePrecacheStaticMeshes</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">Function</span>\
      \ UpdatePrecacheMaterials<span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'AW-2004Particles.Energy.SparkHead'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'ExplosionTex.Framed.exp2_frames'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'ExplosionTex.Framed.exp1_frames'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'ExplosionTex.Framed.we1_frames'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'AW-2004Particles.Weapons.SmokePanels2'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'AW-2004Particles.Fire.NapalmSpot'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'EpicParticles.Fire.SprayFire1'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'VMVehicles-TX.AttackCraftGroup.RaptorColorRed'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'VMVehicles-TX.AttackCraftGroup.RaptorColorBlue'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'VMVehicles-TX.AttackCraftGroup.AttackCraftNoColor'</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'AW-2004Particles.Weapons.TrailBlura'</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"\
      me0\">AddPrecacheMaterial</span><span class=\"br0\">(</span><span class=\"kw5\"\
      >Material</span><span class=\"st0\">'Engine.GRADIENT_Fade'</span><span class=\"\
      br0\">)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'VMVehicles-TX.AttackCraftGroup.raptorCOLORtest'</span><span class=\"br0\"\
      >)</span>;\n    <span class=\"kw7\">Level</span>.<span class=\"me0\">AddPrecacheMaterial</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">Material</span><span class=\"st0\"\
      >'AW-2004Particles.Fire.SmokeFragment'</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"kw6\">Super</span>.<span class=\"me0\">UpdatePrecacheMaterials</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \     MaxPitchSpeed<span class=\"sy0\">=</span><span class=\"nu0\">600.000000</span>\n\
      \     TrailEffectPositions<span class=\"br0\">(</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>X<span\
      \ class=\"sy0\">=-</span><span class=\"nu0\">672.000000</span>,Y<span class=\"\
      sy0\">=-</span><span class=\"nu0\">480.000000</span>,Z<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">20.000000</span><span class=\"br0\">)</span>\n     TrailEffectPositions<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">672.000000</span>,Y<span class=\"sy0\">=</span><span class=\"\
      nu0\">480.000000</span>,Z<span class=\"sy0\">=-</span><span class=\"nu0\">20.000000</span><span\
      \ class=\"br0\">)</span>\n     MaxThrustForce<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">256.000000</span>\n     TurnDamping<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">500.000000</span>\n     PitchTorqueMax<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">15.000000</span>\n     PitchDamping<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">50.000000</span>\n     RollDamping<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">60.000000</span>\n     RedSkin<span class=\"sy0\">=</span><span\
      \ class=\"kw5\">Texture</span><span class=\"st0\">'darkhoverskin.hoverskin.vehicletranportskin'</span>\n\
      \     BlueSkin<span class=\"sy0\">=</span><span class=\"kw5\">Texture</span><span\
      \ class=\"st0\">'darkhoverskin.hoverskin.vehicletranportskin'</span>\n     VehicleMass<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">10.000000</span>\n     VehiclePositionString<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"in a Dark DropShip\"</span>\n\
      \     VehicleNameString<span class=\"sy0\">=</span><span class=\"st0\">\"Dark\
      \ DropShip\"</span>\n     bCanBeBaseForPawns<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">True</span>\n     GroundSpeed<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">1500.000000</span>\n     HealthMax<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">800.000000</span>\n     Health<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">800</span>\n     <span class=\"kw5\">Mesh</span><span class=\"\
      sy0\">=</span><span class=\"kw5\">SkeletalMesh</span><span class=\"st0\">'darkdropship_an.DropshipV5_3'</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Vitals_DropShipSystem\">Vitals DropShipSystem</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=5\"\
      \ title=\"Edit section: Vitals DropShipSystem\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Ive left the logs i used for testing in the code.</p>\n\
      <p>The ship has 7 weapons on it , mainly to give the bots something to do while\
      \ the craft is in flight although im not 100% sure this function is working\
      \ correctly but it wont effect the way the ship works in anyway if it dosent.</p>\n\
      <ul>\n<li>The ship has to land on reletivly flat ground before it will release\
      \ the vecs.</li>\n<li>The ship can carry as meny vehicles as you can fit on\
      \ or in it but each vehicle adds weight to the dropship making it harder to\
      \ fly.</li>\n<li>The system uses 3 simulated states to get the job done gravitysucks,VehicleParked\
      \ VehicleFlying.</li>\n<li>The system can tell altitude of the craft as well\
      \ as tilt.</li>\n<li>You have to land on relativly flat ground.</li>\n</ul>\n\
      <p><a href=\"/File:Legacy_DropShip.jpeg\" class=\"image\" title=\"Legacy_DropShip.jpeg\"\
      ><img alt=\"Legacy_DropShip.jpeg\" src=\"/w/images/Legacy_DropShip.jpeg\" width=\"\
      306\" height=\"306\" /></a></p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Class</span> DropShipSystem <span class=\"kw1\">extends</span> DarkDropShip;\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"\
      br0\">)</span> <span class=\"kw5\">Bool</span>                             \
      \  bEject_If_Inverted;                 <span class=\"co1\">// (could be fun..)</span>\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">float</span>                              fMaxDistanceDownToCheck;\
      \           <span class=\"co1\">// set at level stalz</span>\n<span class=\"\
      kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">float</span>                              MinGroundClearance;\
      \ <span class=\"co1\">// a numb slightly &gt; than the distance of</span>\n\
      \                                                              <span class=\"\
      co1\">// center point of the vec to the ground           </span>\n<span class=\"\
      kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">float</span>                              scanrange;       \
      \   <span class=\"co1\">// the size of the cargobay</span>\n<span class=\"kw1\"\
      >var</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> Array <span\
      \ class=\"sy0\">&lt;</span> <span class=\"kw5\">vector</span> <span class=\"\
      sy0\">&gt;</span>\t\t          TraceOffsets;       <span class=\"co1\">// the\
      \ craft fires trace lines to the </span>\n                                 \
      \                             <span class=\"co1\">// ground to measure altitude\
      \ and Tilt </span>\n                                                       \
      \       <span class=\"co1\">// during the gravitySucks state</span>\n<span class=\"\
      kw1\">var</span>    array <span class=\"sy0\">&lt;</span> <span class=\"kw9\"\
      >onsvehicle</span> <span class=\"sy0\">&gt;</span>               cargorec;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">bool</span>                               bSeekFlyingEscorts;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">Bool</span>                               bSeekEscorts;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">bool</span>                               bontheground;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">sound</span>                              LandedSound;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> <span class=\"kw5\">sound</span>                              Takeoffsound;\n\
      <span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"br0\"\
      >)</span> ephysics                           BackUpphysics;\n \n <span class=\"\
      kw1\">replication</span> <span class=\"br0\">{</span>\n             <span class=\"\
      kw1\">reliable</span>\n             <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span>bNetDirty  <span class=\"sy0\">&amp;&amp;</span>  <span class=\"\
      kw7\">role</span> <span class=\"sy0\">==</span> <span class=\"kw7\">role_authority</span><span\
      \ class=\"br0\">)</span>\n                 bontheground;\n             <span\
      \ class=\"br0\">}</span>\n \n <span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">function</span> <span class=\"kw4\">PostBeginPlay</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">rotator</span> bonerot;\n\
      \ \n  <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      kw6\">self</span><span class=\"sy0\">$</span><span class=\"st0\">\"postbeginplay\
      \ has been called\"</span><span class=\"br0\">)</span>;\n  Ksetactorgravscale<span\
      \ class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span>;\n\
      \ \n  bonerot<span class=\"sy0\">=</span><span class=\"kw4\">getbonerotation</span><span\
      \ class=\"br0\">(</span> <span class=\"st0\">'middle_middle_weapon'</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"co1\">//bonerot.yaw += rotation.yaw+32768;</span>\n\
      \  SetBoneRotation<span class=\"br0\">(</span> <span class=\"st0\">'middle_middle_weapon'</span>,\
      \ bonerot <span class=\"br0\">)</span>;\n  SetBoneRotation<span class=\"br0\"\
      >(</span> <span class=\"st0\">'Left_Front_weapon'</span>, bonerot <span class=\"\
      br0\">)</span>;\n  SetBoneRotation<span class=\"br0\">(</span> <span class=\"\
      st0\">'Right_Front_weapon'</span>, bonerot <span class=\"br0\">)</span>;\n \
      \ SetBoneRotation<span class=\"br0\">(</span> <span class=\"st0\">'left_middle_weapon'</span>,\
      \ bonerot <span class=\"br0\">)</span>;\n  SetBoneRotation<span class=\"br0\"\
      >(</span> <span class=\"st0\">'right_middle_weapon'</span>, bonerot <span class=\"\
      br0\">)</span>;\n  SetBoneRotation<span class=\"br0\">(</span> <span class=\"\
      st0\">'Right_rear_weapon'</span>, bonerot <span class=\"br0\">)</span>;\n  SetBoneRotation<span\
      \ class=\"br0\">(</span> <span class=\"st0\">'Left_rear_weapon'</span>, bonerot\
      \ <span class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n \n <span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> capturevecs <span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw9\">onsvehicle</span> foundvec;\n\
      \                                                                          \
      \    <span class=\"co1\">// log(self$\"capturevecs was called\");</span>\n \
      \ cargorec.<span class=\"me0\">length</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>;\n  <span class=\"kw2\">foreach</span> <span class=\"\
      kw2\">visiblecollidingactors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'OnsVehicle'</span>,foundvec,Scanrange<span\
      \ class=\"br0\">)</span>\n         <span class=\"br0\">{</span>\n          \
      \                                                                    <span class=\"\
      co1\">// log(\"capturevecs:found a vec\"$foundvec$\". so thats \"$cargorec.length$\"\
      found so far\");</span>\n          <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"br0\">(</span> foundvec <span class=\"sy0\">!=</span>\
      \ <span class=\"kw6\">self</span> <span class=\"br0\">)</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>foundvec.<span class=\"\
      me0\">bVehicleOnGround</span><span class=\"br0\">)</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"kw3\">vsize</span><span\
      \ class=\"br0\">(</span> foundvec.<span class=\"kw7\">velocity</span> <span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\"\
      >20</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n       \
      \      <span class=\"br0\">{</span>\n                                      \
      \                                        <span class=\"co1\">// log(foundvec$\"\
      will be made cargo\");</span>\n              Addweight<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n              cargorec.<span class=\"me0\">insert</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span\
      \ class=\"br0\">)</span>;\n              cargorec<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>                       \
      \    <span class=\"sy0\">=</span> foundvec;\n              BackUpphysics   \
      \                      <span class=\"sy0\">=</span> foundvec.<span class=\"\
      kw7\">physics</span>;\n              cargorec<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">bhardattach</span>\
      \               <span class=\"sy0\">=</span> <span class=\"kw6\">True</span>;\n\
      \              cargorec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span\
      \ class=\"br0\">]</span>.<span class=\"kw4\">SetPhysics</span><span class=\"\
      br0\">(</span><span class=\"kw7\">PHYS_None</span> <span class=\"br0\">)</span>;\
      \                             <span class=\"co1\">// Remove the Physics from\
      \ the Target Vehicle</span>\n              cargorec<span class=\"br0\">[</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"kw4\">Setbase</span><span\
      \ class=\"br0\">(</span><span class=\"kw6\">self</span> <span class=\"br0\"\
      >)</span>;\n              cargorec<span class=\"br0\">[</span><span class=\"\
      nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me0\">bAllowViewChange</span>\
      \          <span class=\"sy0\">=</span> bEject_If_Inverted;     <span class=\"\
      co1\">// Sets inverted optiOns on the Vec</span>\n              cargorec<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"me0\">bDriverCannotLeaveVehicle</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">true</span>;                   <span class=\"co1\">//\
      \ Locks the vehicles until the flight is over</span>\n              cargorec<span\
      \ class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span\
      \ class=\"kw4\">setcollision</span><span class=\"br0\">(</span> <span class=\"\
      kw6\">False</span> , <span class=\"kw6\">False</span> , <span class=\"kw6\"\
      >true</span> <span class=\"br0\">)</span>;               <span class=\"co1\"\
      >// Switch off the collision on the Vehicle</span>\n             <span class=\"\
      br0\">}</span>\n        <span class=\"br0\">}</span>\n  <span class=\"br0\"\
      >}</span>\n \n  <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ EnlistEscorts<span class=\"br0\">(</span><span class=\"br0\">)</span>\n  <span\
      \ class=\"br0\">{</span>\n  <span class=\"kw1\">local</span> <span class=\"\
      kw9\">pawn</span> foundpawn;\n                                             \
      \                                 <span class=\"co1\">// log(\"EnlistEscorts()\
      \ has started\");</span>\n  <span class=\"kw2\">foreach</span> <span class=\"\
      kw2\">visiblecollidingactors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'pawn'</span>,foundpawn,Scanrange<span\
      \ class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\n\
      \         <span class=\"br0\">{</span>\n                                   \
      \                                           <span class=\"co1\">// log(\"EnlistEscorts():\
      \ found a pawn = \"$foundpawn);</span>\n          <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span><span class=\"br0\">(</span>foundpawn.<span class=\"\
      kw3\">isa</span><span class=\"br0\">(</span><span class=\"st0\">'xbot'</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span><span class=\"\
      br0\">(</span><span class=\"sy0\">!</span>foundpawn.<span class=\"me0\">IsHumanControlled</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&amp;&amp;</span>\n             <span class=\"br0\">(</span>driver.<span\
      \ class=\"kw9\">controller</span>.<span class=\"me0\">SameTeamAs</span><span\
      \ class=\"br0\">(</span>foundpawn.<span class=\"kw9\">controller</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>\n             <span class=\"br0\">{</span>\n      \
      \                                                                        <span\
      \ class=\"co1\">// log(\"EnlistEscorts(): found It was an xbot +not human controlled\
      \ = \");</span>\n             <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>bSeekFlyingEscorts<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> foundpawn.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'onsraptor'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span>\n\
      \                <span class=\"br0\">(</span><span class=\"br0\">(</span>bSeekEscorts\
      \ <span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"\
      br0\">(</span>foundpawn.<span class=\"kw3\">isa</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'onsattackcraft'</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n   \
      \             <span class=\"br0\">{</span>\n                               \
      \                                               <span class=\"co1\">// log(\"\
      EnlistEscorts(): it wa a bot controlled vec = \");</span>\n                \
      \  <span class=\"kw9\">bot</span><span class=\"br0\">(</span>foundpawn.<span\
      \ class=\"kw9\">controller</span><span class=\"br0\">)</span>.<span class=\"\
      me0\">SetOrders</span><span class=\"br0\">(</span><span class=\"st0\">'follow'</span>,Driver.<span\
      \ class=\"kw9\">Controller</span><span class=\"br0\">)</span>;\n           \
      \     <span class=\"br0\">}</span>\n             <span class=\"br0\">}</span>\n\
      \        <span class=\"br0\">}</span>\n <span class=\"br0\">}</span>\n \n <span\
      \ class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> releasevecs<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">int</span> I;\n    \
      \                                                                          <span\
      \ class=\"co1\">//    log(\"Time to release the cargo\"$cargorec.length);</span>\n\
      \  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>cargorec.<span\
      \ class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"\
      nu0\">0</span><span class=\"br0\">)</span>\n     <span class=\"br0\">{</span>\n\
      \                                                                          \
      \    <span class=\"co1\">//   log(\"releasevecs():releasing\"$cargorec[i]);</span>\n\
      \      <span class=\"kw2\">for</span> <span class=\"br0\">(</span> i<span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span> ; I<span class=\"sy0\">&lt;</span>\
      \ cargorec.<span class=\"me0\">length</span> ; I<span class=\"sy0\">++</span>\
      \ <span class=\"br0\">)</span>\n          <span class=\"br0\">{</span>\n   \
      \        cargorec<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">bHardattach</span>              <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">false</span>;\n           cargorec<span class=\"br0\"\
      >[</span>i<span class=\"br0\">]</span>.<span class=\"kw4\">SetBase</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">None</span><span class=\"br0\">)</span>;\
      \                                         <span class=\"co1\">// Releasing Target\
      \ Vec</span>\n           cargorec<span class=\"br0\">[</span>i<span class=\"\
      br0\">]</span>.<span class=\"kw4\">SetPhysics</span><span class=\"br0\">(</span>BackUpphysics<span\
      \ class=\"br0\">)</span>;                             <span class=\"co1\">//\
      \ Returns old physics</span>\n           cargorec<span class=\"br0\">[</span>i<span\
      \ class=\"br0\">]</span>.<span class=\"kw4\">setcollision</span><span class=\"\
      br0\">(</span><span class=\"kw6\">true</span> , <span class=\"kw6\">True</span>\
      \ , <span class=\"kw6\">true</span><span class=\"br0\">)</span>;           \
      \           <span class=\"co1\">// Switches the collision back on.</span>\n\
      \           cargorec<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span\
      \ class=\"me0\">bDriverCannotLeaveVehicle</span> <span class=\"sy0\">=</span>\
      \ <span class=\"kw6\">False</span>;                     <span class=\"co1\"\
      >// Unlocks the Vehicle</span>\n          <span class=\"br0\">}</span>\n   \
      \   cargorec.<span class=\"me0\">length</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span>;\n     <span class=\"br0\">}</span>\n  <span class=\"\
      br0\">}</span>\n \n <span class=\"kw1\">simulated</span> <span class=\"kw1\"\
      >function</span> <span class=\"kw4\">TakeDamage</span><span class=\"br0\">(</span><span\
      \ class=\"kw5\">int</span> Damage, <span class=\"kw9\">Pawn</span> instigatedBy,\
      \ <span class=\"kw5\">Vector</span> Hitlocation, <span class=\"kw5\">Vector</span>\
      \ Momentum, class<span class=\"sy0\">&lt;</span>DamageType<span class=\"sy0\"\
      >&gt;</span> <span class=\"kw9\">DamageType</span><span class=\"br0\">)</span>\n\
      \ <span class=\"br0\">{</span>\n  momentum <span class=\"sy0\">=</span> momentum<span\
      \ class=\"sy0\">*</span><span class=\"nu0\">0.01</span>;\n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>damage<span class=\"sy0\">&gt;</span>Health<span\
      \ class=\"br0\">)</span>\n      Releasevecs<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw6\">super</span>.<span class=\"\
      kw4\">takedamage</span><span class=\"br0\">(</span> Damage,  instigatedBy, \
      \ Hitlocation,  Momentum,  <span class=\"kw9\">DamageType</span><span class=\"\
      br0\">)</span>;\n <span class=\"br0\">}</span>\n \n <span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> subweight<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">float</span> Thegrav;                    \
      \                                    <span class=\"co1\">// log(\"subweight()\"\
      );</span>\n  thegrav<span class=\"sy0\">=</span>kgetactorgravscale<span class=\"\
      br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span\
      \ class=\"br0\">(</span><span class=\"nu0\">0.02</span><span class=\"sy0\">*</span>cargorec.<span\
      \ class=\"me0\">length</span><span class=\"br0\">)</span>;\n  ksetactorgravscale<span\
      \ class=\"br0\">(</span>thegrav<span class=\"br0\">)</span>;               \
      \                                 <span class=\"co1\">// log(\"subweight:new\
      \ weight is \"$thegrav);</span>\n <span class=\"br0\">}</span>\n \n <span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> Addweight<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>  \
      \                                                                          <span\
      \ class=\"co1\">//log(\"Addweight()\");</span>\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">float</span> Thegrav;\n  thegrav<span class=\"sy0\">=</span>kgetactorgravscale<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>\
      \ <span class=\"nu0\">0.02</span>;\n  ksetactorgravscale<span class=\"br0\"\
      >(</span>thegrav<span class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n\
      \ \n <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ loudnoise<span class=\"br0\">(</span><span class=\"kw5\">sound</span> sfx<span\
      \ class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n                  \
      \                                                            <span class=\"\
      co1\">// log(\"loudnoise()\");</span>\n  <span class=\"kw4\">makenoise</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;\n\
      \  <span class=\"kw4\">playsound</span><span class=\"br0\">(</span>sfx<span\
      \ class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n \n \n <span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> <span class=\"kw4\"\
      >Destroyed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      \ <span class=\"br0\">{</span>\n                                           \
      \                                   <span class=\"co1\">// log(\"Destroyed()\"\
      );</span>\n  ReleaseVecs<span class=\"br0\">(</span><span class=\"br0\">)</span>;\
      \                                                              <span class=\"\
      co1\">// log(\"Destroyed:ReleaseVecs()\");</span>\n  DarkhoverSpawner<span class=\"\
      br0\">(</span><span class=\"kw7\">owner</span><span class=\"br0\">)</span>.<span\
      \ class=\"kw4\">Destroyed</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;                                        <span class=\"co1\">// log(\"\
      informed \"$owner$\" im about to die\");</span>\n  <span class=\"kw6\">super</span>.<span\
      \ class=\"kw4\">Destroyed</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n <span class=\"br0\">}</span>\n \n <span class=\"kw1\">simulated</span>\
      \  <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> CheckbOnTheGround<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw5\">Vector</span> TraceStart,\
      \ TraceEnd,    HitLocation,HitNormal;\n  <span class=\"kw1\">Local</span> <span\
      \ class=\"kw5\">float</span>  Dist,       MarkerDist,  Total_DistanceDiff;\n\
      \  <span class=\"kw1\">Local</span> <span class=\"kw5\">int</span>    I;\n \
      \ <span class=\"kw1\">local</span> <span class=\"kw9\">actor</span>  HitActor;\n\
      \                                                                          \
      \    <span class=\"co1\">// log(\"CheckbOnTheGround()\");</span>\n  <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>traceoffsets<span class=\"br0\"\
      >[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"\
      sy0\">!=</span> <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n      TraceOffsets  .<span\
      \ class=\"me0\">insert</span> <span class=\"br0\">(</span><span class=\"nu0\"\
      >0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;        \
      \                                    <span class=\"co1\">// making blank space\
      \ for first 'marker' trace</span>\n  <span class=\"kw2\">for</span> <span class=\"\
      br0\">(</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> ;\
      \ I <span class=\"sy0\">&lt;</span> TraceOffsets.<span class=\"me0\">length</span>;\
      \ I<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n      <span class=\"\
      br0\">{</span>\n      TraceStart <span class=\"sy0\">=</span> <span class=\"\
      kw7\">Location</span> <span class=\"sy0\">+</span> TraceOffsets<span class=\"\
      br0\">[</span>i<span class=\"br0\">]</span>;\n      TraceEnd   <span class=\"\
      sy0\">=</span> TraceStart <span class=\"sy0\">-</span> <span class=\"br0\">(</span>\
      \ fMaxDistanceDownToCheck <span class=\"sy0\">*</span> <span class=\"kw3\">Vect</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;\n\
      \      HitActor   <span class=\"sy0\">=</span> <span class=\"kw4\">Trace</span><span\
      \ class=\"br0\">(</span>HitLocation , HitNormal , TraceEnd , TraceStart , <span\
      \ class=\"kw6\">true</span><span class=\"br0\">)</span>;\n      Dist       <span\
      \ class=\"sy0\">=</span> <span class=\"kw3\">VSize</span><span class=\"br0\"\
      >(</span>TraceStart<span class=\"sy0\">-</span>HitLocation<span class=\"br0\"\
      >)</span>;\n      <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ I <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"\
      br0\">)</span>\n           MarkerDist <span class=\"sy0\">=</span> dist;\n \
      \     <span class=\"kw2\">else</span>\n      <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> HitActor <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">none</span> <span class=\"br0\">)</span>\n           Total_DistanceDiff\
      \ <span class=\"sy0\">=</span> MarkerDist <span class=\"sy0\">-</span> Dist;\n\
      \      <span class=\"br0\">}</span>\n \n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> MarkerDist <span class=\"sy0\">&lt;=</span> MinGroundClearance<span\
      \ class=\"br0\">)</span>\n     <span class=\"br0\">{</span>\n              \
      \                                                                <span class=\"\
      co1\">// log('CheckbOnTheGround:Ground clearence is good');</span>\n     <span\
      \ class=\"kw2\">if</span>  <span class=\"br0\">(</span>Total_DistanceDiff <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\"\
      >)</span>\n         <span class=\"br0\">{</span>\n                         \
      \                                                     <span class=\"co1\">//\
      \ log(Self$\"CheckbOnTheGround:Total diff on ground clearence was less than\
      \ 100 - returning true\");</span>\n          <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw3\">vsize</span><span class=\"br0\"\
      >(</span><span class=\"kw7\">velocity</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"br0\"\
      >)</span>\n             <span class=\"br0\">{</span>\n                     \
      \                                                         <span class=\"co1\"\
      >// log (\"CheckbOnTheGround():velocity is now correct to im  - returning true\"\
      );</span>\n              <span class=\"kw2\">return</span> <span class=\"kw6\"\
      >true</span>;\n             <span class=\"br0\">}</span>\n         <span class=\"\
      br0\">}</span>\n     <span class=\"br0\">}</span>\n <span class=\"kw2\">else</span>\
      \                                                                         <span\
      \ class=\"co1\">// log (\"CheckbOnTheGround:returning false\");</span>\n <span\
      \ class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n <span class=\"\
      br0\">}</span>\n \n<span class=\"co1\">///////////////////////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">///////////////////////////////////////////////////////////auto\
      \ simulated state GravitySucks</span>\n<span class=\"kw1\">auto</span> <span\
      \ class=\"kw1\">simulated</span> <span class=\"kw1\">state</span> GravitySucks\n\
      <span class=\"br0\">{</span>\n \n <span class=\"kw1\">simulated</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw4\">Timer</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>                                 \
      \                  <span class=\"co1\">// perform a scan</span>\n  <span class=\"\
      br0\">{</span>                                                             \
      \              <span class=\"co1\">// log(\"=========state () GravitySucks:Timer()\
      \ started\");</span>\n   bOnTheGround<span class=\"sy0\">=</span>CheckbOnTheGround<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n   <span class=\"kw2\"\
      >if</span>  <span class=\"br0\">(</span> bOnTheGround <span class=\"sy0\">==</span>\
      \ <span class=\"kw6\">true</span> <span class=\"br0\">)</span>\n       <span\
      \ class=\"br0\">{</span>\n                                                 \
      \                             <span class=\"co1\">// log(\"GravitySucks:Timer:I\
      \ am on the ground as bOnTheGround =\"$bOnTheGround);</span>\n        <span\
      \ class=\"kw2\">if</span> <span class=\"br0\">(</span>landedsound<span class=\"\
      sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\">)</span>\n\
      \            Loudnoise<span class=\"br0\">(</span>landedsound<span class=\"\
      br0\">)</span>;\n        <span class=\"kw3\">GotoState</span><span class=\"\
      br0\">(</span><span class=\"st0\">'VehicleParked'</span><span class=\"br0\"\
      >)</span>;                                           <span class=\"co1\">//\
      \ log(\"GravitySucks:Timer():GotoState('VehicleParked') was just called'\");</span>\n\
      \        <span class=\"kw2\">return</span>;\n       <span class=\"br0\">}</span>\
      \                                                                      <span\
      \ class=\"co1\">// log(\"GravitySucks:Timer():Im NOT on the ground this time'\"\
      );</span>\n <span class=\"kw4\">SetTimer</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0.1</span> , <span class=\"kw6\">False</span><span class=\"\
      br0\">)</span>;\n <span class=\"kw6\">super</span>.<span class=\"kw4\">timer</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n <span class=\"br0\"\
      >}</span>\n \n<span class=\"kw2\">Begin</span>:\n                          \
      \                                                    <span class=\"co1\">//\
      \ log(\"==========state GravitySucks:state code has been called\");</span>\n\
      <span class=\"kw4\">SetTimer</span><span class=\"br0\">(</span><span class=\"\
      nu0\">0.1</span>  , <span class=\"kw6\">False</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"co1\">////////////////////////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">//////////////////////////////////////////// simulated state\
      \ VehicleParked /</span>\n \n<span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">state</span> VehicleParked\n<span class=\"br0\">{</span>\n \n <span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> <span class=\"kw5\"\
      >bool</span> TryToDrive<span class=\"br0\">(</span><span class=\"kw9\">Pawn</span>\
      \ P<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n           \
      \                                                                   <span class=\"\
      co1\">// log(\" TryToDrive():an attempt to drive was made by\"$p);</span>\n\
      \  <span class=\"kw6\">super</span>.<span class=\"me0\">TryToDrive</span><span\
      \ class=\"br0\">(</span>P<span class=\"br0\">)</span>;\n <span class=\"br0\"\
      >}</span>\n \n <span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ ClientKDriverEnter<span class=\"br0\">(</span><span class=\"kw9\">PlayerController</span>\
      \ PC<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n          \
      \                                                                    <span class=\"\
      co1\">// log(\"VehicleParked:ClientKDriverenter START\");</span>\n  Capturevecs\
      \ <span class=\"br0\">(</span><span class=\"br0\">)</span>;                \
      \                                             <span class=\"co1\">// log(\"\
      VehicleParked:ClientKDriverenter enlistescorts() - has been called and returned\"\
      );</span>\n  enlistescorts<span class=\"br0\">(</span><span class=\"br0\">)</span>;\
      \                                                            <span class=\"\
      co1\">// log(\"VehicleParked:ClientKDriverenter enlistescorts() - has been called\
      \ and returned\");</span>\n  <span class=\"kw3\">GotoState</span> <span class=\"\
      br0\">(</span> <span class=\"st0\">'VehicleFlying'</span> <span class=\"br0\"\
      >)</span>;                                              <span class=\"co1\"\
      >// log(\"VehicleParked:ClientKDriverenter gotostate 'VehicleFlying' has been\
      \ called\");</span>\n  <span class=\"kw6\">super</span>.<span class=\"me0\"\
      >ClientKDriverEnter</span><span class=\"br0\">(</span> PC <span class=\"br0\"\
      >)</span>;\n <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> KDriverEnter<span class=\"br0\">(</span><span\
      \ class=\"kw9\">pawn</span> p<span class=\"br0\">)</span>\n <span class=\"br0\"\
      >{</span>\n                                                                \
      \              <span class=\"co1\">// log(\"VehicleParked:KDriverenter     \
      \                         START\");</span>\n  Capturevecs <span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;                                     \
      \                        <span class=\"co1\">// log(\"VehicleParked:KDriverenter\
      \ Capturevecs ()               has been called and returned\");</span>\n  enlistescorts<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;                      \
      \                                      <span class=\"co1\">// log(\"VehicleParked:KDriverenter\
      \ enlistescorts ()             has been called and returned\");</span>\n  <span\
      \ class=\"kw3\">GotoState</span> <span class=\"br0\">(</span> <span class=\"\
      st0\">'VehicleFlying'</span> <span class=\"br0\">)</span>;                 \
      \                             <span class=\"co1\">// log(\"VehicleParked:KDriverenterGotoState\
      \ ( 'VehicleFlying' ) has been called and returned\");</span>\n  <span class=\"\
      kw6\">super</span>.<span class=\"me0\">KDriverEnter</span><span class=\"br0\"\
      >(</span> P <span class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n \n\
      <span class=\"kw2\">Begin</span>:\n                                        \
      \                                      <span class=\"co1\">// log(\"now in state\
      \ () VehicleParked start of state code\");</span>\n<span class=\"br0\">}</span>\n\
      <span class=\"co1\">////////////////////////////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">////////////////////////////////////////////////////////////////////////////////////////////////////</span>\n\
      <span class=\"co1\">////////////////////////////////////////////////////////////////\
      \ state VehicleFlying</span>\n \n<span class=\"kw1\">state</span> VehicleFlying\n\
      <span class=\"br0\">{</span>\n <span class=\"kw1\">simulated</span> <span class=\"\
      kw1\">function</span> ClientKDriverLeave<span class=\"br0\">(</span><span class=\"\
      kw9\">PlayerController</span> PC<span class=\"br0\">)</span>\n <span class=\"\
      br0\">{</span>                                                             \
      \               <span class=\"co1\">// log(\"VehicleFlying:ClientKDriverLeave\
      \ releasevecs() has been called and returned \");</span>\n                 \
      \                                                             <span class=\"\
      co1\">// log(\"VehicleFlying:ClientKDriverLeave releasevecs() has been called\
      \ and returned\");</span>\n  releasevecs<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;                                                            \
      \  <span class=\"co1\">// log(\"VehicleFlying:ClientKDriverLeave subweight()\
      \   has been called and returned\");</span>\n  subweight<span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;                                     \
      \                           <span class=\"co1\">// log(\"VehicleFlying:ClientKDriverLeave\
      \ goto state GravitySucks has been called \");</span>\n  <span class=\"kw3\"\
      >GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'GravitySucks'</span><span\
      \ class=\"br0\">)</span>;\n  <span class=\"kw6\">super</span>.<span class=\"\
      me0\">clientkDriverleave</span><span class=\"br0\">(</span>PC<span class=\"\
      br0\">)</span>;\n <span class=\"br0\">}</span>\n \n <span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">event</span> <span class=\"kw5\">bool</span> KDriverLeave<span\
      \ class=\"br0\">(</span> <span class=\"kw5\">bool</span> bForceLeave <span class=\"\
      br0\">)</span>\n <span class=\"br0\">{</span>\n                            \
      \                                                  <span class=\"co1\">// log(\"\
      VehicleFlying:KDriverLeave              * Started *\");</span>\n  releasevecs<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;                      \
      \                                        <span class=\"co1\">// log(\"VehicleFlying:KDriverLeave:releasevecs()\
      \              has been called and returned\");</span>\n  subweight<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;                                \
      \                                <span class=\"co1\">// log(\"VehicleFlying:KDriverLeave:subweight()\
      \                has been called and returned\");</span>\n  <span class=\"kw3\"\
      >GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'GravitySucks'</span><span\
      \ class=\"br0\">)</span>;                                                  <span\
      \ class=\"co1\">// log(\"VehicleFlying:KDriverLeave :GotoState('GravitySucks')\
      \ has been called and returned\");</span>\n  <span class=\"kw6\">super</span>.<span\
      \ class=\"me0\">kDriverleave</span><span class=\"br0\">(</span>bForceLeave<span\
      \ class=\"br0\">)</span>;\n <span class=\"br0\">}</span>\n \n<span class=\"\
      kw2\">begin</span>:\n<span class=\"kw2\">if</span> <span class=\"br0\">(</span>takeoffsound<span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n    loudnoise<span class=\"br0\">(</span>takeoffsound<span class=\"\
      br0\">)</span>;\n                                                          \
      \                    <span class=\"co1\">// log(\"now in state VehicleFlying\"\
      );</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n     fMaxDistanceDownToCheck<span class=\"sy0\"\
      >=</span><span class=\"nu0\">5000.000000</span>\n     MinGroundClearance<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">260.000000</span>\n     scanrange<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">1024.000000</span>\n     TraceOffsets<span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">100.000000</span><span class=\"br0\">)</span>\n     TraceOffsets<span\
      \ class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>X<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">100.000000</span><span class=\"br0\">)</span>\n     TraceOffsets<span\
      \ class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>Y<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">100.000000</span><span class=\"br0\">)</span>\n     TraceOffsets<span\
      \ class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>Y<span class=\"sy0\">=-</span><span\
      \ class=\"nu0\">100.000000</span><span class=\"br0\">)</span>\n     bSeekFlyingEscorts<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n     bSeekEscorts<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n     DriverWeapons<span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span\
      \ class=\"sy0\">=</span><span class=\"br0\">(</span>WeaponClass<span class=\"\
      sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\">'darkhover.Mortician_Head'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"middle_front_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"right_front_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"left_front_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"right_middle_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"left_middle_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"left_rear_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     PassengerWeapons<span class=\"br0\">(</span><span\
      \ class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>WeaponPawnClass<span class=\"sy0\">=</span><span class=\"\
      kw1\">Class</span><span class=\"st0\">'OnslaughtFull.ONSMASSideGunPawn'</span>,WeaponBone<span\
      \ class=\"sy0\">=</span><span class=\"st0\">\"right_rear_weapon\"</span><span\
      \ class=\"br0\">)</span>\n     VehicleMass<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">12.000000</span>\n     TPCamDistance<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">1400.000000</span>\n     bPathColliding<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">True</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:VitalOverdose/The_DropShip_Controller?section=6\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Vitaloverdose</b> im intrested in taking this script\
      \ further if anyone has a decent static mesh for a dropship.</p>\n<p><b>Ambershee:</b>\
      \ Take a look at the Leviathan. That deploys into a static weapon using animation\
      \ and has the collision intact.</p>\n<p><b>detour187</b> In one of the bonus\
      \ packs for ut2004 there is a map called 'thrust' that has a decent dropship,\
      \ I'll see If I could get the file.</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.386 seconds\nReal time usage: 1.308 seconds\nPreprocessor visited\
      \ node count: 41/1000000\nPreprocessor generated node count: 76/1000000\nPost‐\
      expand include size: 37/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:3635-0!*!*!!en!5!*\
      \ and timestamp 20221120104008 and revision id 44610\n -->\n"
  categories:
  - sortkey: "VitalOverdose/The DropShip Controller"
    name: "Legacy_Custom_Class_(UT2004)"
  links: []
  templates: []
  images:
  - "Legacy_DropShip.jpeg"
  - "Legacy_Shot00002.jpeg"
  externallinks: []
  sections:
  - toclevel: 1
    level: "1"
    line: "Vehicle Dropship"
    number: "1"
    index: "1"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 0
    anchor: "Vehicle_Dropship"
  - toclevel: 2
    level: "2"
    line: "By Vitaloverdose & Darknet"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 20
    anchor: "By_Vitaloverdose_.26_Darknet"
  - toclevel: 3
    level: "3"
    line: "Works online"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 52
    anchor: "Works_online"
  - toclevel: 3
    level: "3"
    line: "Darknets Dropship."
    number: "1.1.2"
    index: "4"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 781
    anchor: "Darknets_Dropship."
  - toclevel: 2
    level: "2"
    line: "Vitals DropShipSystem"
    number: "1.2"
    index: "5"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 13725
    anchor: "Vitals_DropShipSystem"
  - toclevel: 2
    level: "2"
    line: "Discussion"
    number: "1.3"
    index: "6"
    fromtitle: "Legacy:VitalOverdose/The_DropShip_Controller"
    byteoffset: 29804
    anchor: "Discussion"
  displaytitle: "Legacy:VitalOverdose/The DropShip Controller"
  iwlinks: []
  wikitext:
    text: "=Vehicle Dropship=\n\n==By Vitaloverdose & Darknet==\n\n===Works online===\n\
      \nthis is my solution to a long standing problem with creating a dropship that\
      \ can carry vehicles. I spent quite a long time on this script.The ship was\
      \ built and made flyable by darknet and i then subclassed the ship and added\
      \ the dropship system. Theres no reason this cant be a single class its just\
      \ splitting it up this way allows 2 people  to work on the same project at the\
      \ same time. This system if in the alpha test stage, it had been tested online\
      \ by a few people as well as myself and so far all the reports have been good.\
      \ We did have a moving hatch for the back door but because you cant animate\
      \ collision on meshes online the idea had to be scraped.Though i think ive worked\
      \ out a way around it .\n\n===Darknets Dropship.===\n\n[[Image:Legacy_Shot00002.jpeg|Legacy_Shot00002.jpeg]]\n\
      \n<uscript>\n//-----------------------------------------------------------\n\
      //\n//-----------------------------------------------------------\nclass DarkDropShip\
      \ extends ONSattackCraft\n    placeable;\n\n#exec OBJ LOAD FILE=..\\animations\\\
      darkdropship_an.ukx\n\nvar     int                             CurrentIndex;\n\
      var     bool                            bDoorIsOpen;\n\n// AI hint\nFunction\
      \ Bool FastVehicle()\n{\n\treturn true;\n}\n\nFunction Bool Dodge(eDoubleClickDir\
      \ DoubleClickMove)\n{\n\tif ( FRand() < 0.7 )\n\t{\n\t\tVehicleMovingTime =\
      \ Level.TimeSeconds + 1;\n\t\tRise = 1;\n\t}\n\treturn False;\n}\n\nsimulated\
      \ Function SpecialCalcBehindView(PlayerController PC, out actor ViewActor, out\
      \ Vector CameraLocation, out Rotator CameraRotation )\n{\n\tLocal Vector CamLookAt,\
      \ HitLocation, HitNormal, OffseTarget_Vector;\n\tLocal Actor HitActor;\n   \
      \ Local Vector x, y, z;\n\n\tif (DesiredTPCamDistance < TPCamDistance)\n\t\t\
      TPCamDistance = FMax(DesiredTPCamDistance, TPCamDistance - CameraSpeed * (Level.TimeSeconds\
      \ - LastCameraCalcTime));\n\telse if (DesiredTPCamDistance > TPCamDistance)\n\
      \t\tTPCamDistance = FMin(DesiredTPCamDistance, TPCamDistance + CameraSpeed *\
      \ (Level.TimeSeconds - LastCameraCalcTime));\n\n    GetAxes(PC.Rotation, x,\
      \ y, z);\n\tViewActor = self;\n\tCamLookAt = GetCameraLocationStart() + (TPCamLookat\
      \ >> Rotation) + TPCamWorldOffset;\n\n\tOffseTarget_Vector = Vect(0, 0, 0);\n\
      \tOffseTarget_Vector.X = -1.0 * TPCamDistance;\n\n\tCameraLocation = CamLookAt\
      \ + (OffseTarget_Vector >> PC.Rotation);\n\n\tHitActor = Trace(HitLocation,\
      \ HitNormal, CameraLocation, Location, true, Vect(40, 40, 40));\n\tif ( HitActor\
      \ != None\n\t     && (HitActor.bWorldGeometry || HitActor == GetVehicleBase()\
      \ || Trace(HitLocation, HitNormal, CameraLocation, Location, False, Vect(40,\
      \ 40, 40)) != None ) )\n\t\t\tCameraLocation = HitLocation;\n\n    CameraRotation\
      \ = Normalize(PC.Rotation + PC.ShakeRot);\n    CameraLocation = CameraLocation\
      \ + PC.ShakeOffset.X * x + PC.ShakeOffset.Y * y + PC.ShakeOffset.Z * z;\n}\n\
      \nFunction Died(Controller Killer, class<DamageType> damageType, Vector HitLocation)\n\
      {\n    Local Int I;\n\n    if(Level.NetMode != NM_DedicatedServer)\n\t{\n  \
      \  \tfor(i=0;i<TrailEffects.Length;I++)\n        \tTrailEffects[i].Destroy();\n\
      \        TrailEffects.Length = 0;\n\n\t\tfor(i=0; i<StreamerEffect.Length; I++)\n\
      \t\t\tStreamerEffect[i].Destroy();\n\t\tStreamerEffect.Length = 0;\n    }\n\n\
      \tSuper.Died(Killer, damageType, HitLocation);\n}\n\nsimulated Function Destroyed()\n\
      {\n    Local Int I;\n\n    if(Level.NetMode != NM_DedicatedServer)\n\t{\n  \
      \  \tfor(i=0;i<TrailEffects.Length;I++)\n        \tTrailEffects[i].Destroy();\n\
      \        TrailEffects.Length = 0;\n\n\t\tfor(i=0; i<StreamerEffect.Length; I++)\n\
      \t\t\tStreamerEffect[i].Destroy();\n\t\tStreamerEffect.Length = 0;\n    }\n\n\
      \    Super.Destroyed();\n}\n\nsimulated event DrivingStatusChanged()\n{\n\t\
      Local Vector RotX, RotY, RotZ;\n Local Int I;\n\n\tSuper.DrivingStatusChanged();\n\
      \n    if (bDriving && Level.NetMode != NM_DedicatedServer && !bDropDetail)\n\
      \t{\n        GetAxes(Rotation,RotX,RotY,RotZ);\n\n        if (TrailEffects.Length\
      \ == 0)\n        {\n            TrailEffects.Length = TrailEffectPositions.Length;\n\
      \n        \tfor(i=0;i<TrailEffects.Length;I++)\n            \tif (TrailEffects[i]\
      \ == None )\n            \t{\n                \tTrailEffects[i] = Spawn(TrailEffectClass,\
      \ self,, Location + (TrailEffectPositions[i] >> Rotation) );\n             \
      \   \tTrailEffects[i].SetBase(self);\n                    TrailEffects[i].SetRelativeRotation(\
      \ rot(0,32768,0) );\n                }\n        }\n\n        if (StreamerEffect.Length\
      \ == 0)\n        {\n    \t\tStreamerEffect.Length = StreamerEffectOffset.Length;\n\
      \n    \t\tfor(i=0; i<StreamerEffect.Length; I++)\n        \t\tif (StreamerEffect[i]\
      \ == None )\n        \t\t{\n        \t\t\tStreamerEffect[i] = Spawn(StreamerEffectClass,\
      \ self,, Location + (StreamerEffectOffset[i] >> Rotation) );\n        \t\t\t\
      StreamerEffect[i].SetBase(self);\n        \t\t}\n    \t}\n    }\n    else\n\
      \    {\n        if (Level.NetMode != NM_DedicatedServer)\n    \t{\n        \t\
      for(i=0;i<TrailEffects.Length;I++)\n        \t   TrailEffects[i].Destroy();\n\
      \n        \tTrailEffects.Length = 0;\n\n    \t\tfor(i=0; i<StreamerEffect.Length;\
      \ I++)\n                StreamerEffect[i].Destroy();\n\n            StreamerEffect.Length\
      \ = 0;\n        }\n    }\n}\n\nsimulated Function Tick(float DeltaTime)\n{\n\
      \    Local float EnginePitch, DesiredOpacity, DeltaOpacity, MaxOpacityChange,\
      \ ThrustAmount;\n\tLocal TrailEmitter T;\n    Local int I;\n\tLocal Vector RelVel;\n\
      \tLocal Bool NewStreamerActive, bIsBehindView;\n\tLocal PlayerController PC;\n\
      \n    if(Level.NetMode != NM_DedicatedServer)\n\t{\n        EnginePitch = 64.0\
      \ + VSize(Velocity)/MaxPitchSpeed * 32.0;\n        SoundPitch = FClamp(EnginePitch,\
      \ 64, 96);\n\n        RelVel = Velocity << Rotation;\n\n        PC = Level.GetLocalPlayerController();\n\
      \t\tif (PC != None && PC.ViewTarget == self)\n\t\t\tbIsBehindView = PC.bBehindView;\n\
      \t\telse\n            bIsBehindView = True;\n\n    \t// Adjust Engine FX depending\
      \ on being drive/velocity\n\t\tif (!bIsBehindView)\n\t\t{\n\t\t\tfor(i=0; i<TrailEffects.Length;\
      \ I++)\n\t\t\t\tTrailEffects[i].SetThrustEnabled(False);\n\t\t}\n        else\n\
      \        {\n\t\t\tThrustAmount = FClamp(OutputThrust, 0.0, 1.0);\n\n\t\t\tfor(i=0;\
      \ i<TrailEffects.Length; I++)\n\t\t\t{\n\t\t\t\tTrailEffects[i].SetThrustEnabled(true);\n\
      \t\t\t\tTrailEffects[i].SetThrust(ThrustAmount);\n\t\t\t}\n\t\t}\n\n\t\t// Update\
      \ streamer opacity (limit max change speed)\n\t\tDesiredOpacity = (RelVel.X\
      \ - StreamerOpacityRamp.Min)/(StreamerOpacityRamp.Max - StreamerOpacityRamp.Min);\n\
      \t\tDesiredOpacity = FClamp(DesiredOpacity, 0.0, StreamerOpacityMax);\n\n\t\t\
      MaxOpacityChange = DeltaTime * StreamerOpacityChangeRate;\n\n\t\tDeltaOpacity\
      \ = DesiredOpacity - StreamerCurrentOpacity;\n\t\tDeltaOpacity = FClamp(DeltaOpacity,\
      \ -MaxOpacityChange, MaxOpacityChange);\n\n\t\tif(!bIsBehindView)\n        \
      \    StreamerCurrentOpacity = 0.0;\n        else\n    \t\tStreamerCurrentOpacity\
      \ += DeltaOpacity;\n\n\t\tif(StreamerCurrentOpacity < 0.01)\n\t\t\tNewStreamerActive\
      \ = False;\n\t\telse\n\t\t\tNewStreamerActive = true;\n\n\t\tfor(i=0; i<StreamerEffect.Length;\
      \ I++)\n\t\t{\n\t\t\tif(NewStreamerActive)\n\t\t\t{\n\t\t\t\tif(!StreamerActive)\n\
      \t\t\t\t{\n\t\t\t\t\tT = TrailEmitter(StreamerEffect[i].Emitters[0]);\n\t\t\t\
      \t\tT.ResetTrail();\n\t\t\t\t}\n\t\t\t\tStreamerEffect[i].Emitters[0].Disabled\
      \ = False;\n\t\t\t\tStreamerEffect[i].Emitters[0].Opacity = StreamerCurrentOpacity;\n\
      \t\t\t    }\n\n            else\n\t\t\t   {\n\t\t\t\tStreamerEffect[i].Emitters[0].Disabled\
      \ = true;\n\t\t\t\tStreamerEffect[i].Emitters[0].Opacity = 0.0;\n\t\t\t   }\n\
      \t\t}\n\n\t\tStreamerActive = NewStreamerActive;\n    }\n\n    Super.Tick(DeltaTime);\n\
      }\n\nFunction float ImpactDamageModifier()\n{\n    Local float Multiplier;\n\
      \    Local Vector X, Y, Z;\n\n    GetAxes(Rotation, X, Y, Z);\n    if (ImpactInfo.ImpactNorm\
      \ Dot Z > 0)\n        Multiplier = 0.75-(ImpactInfo.ImpactNorm dot Z);\n   \
      \ else\n        Multiplier = 1.0;\n\n    return Super.ImpactDamageModifier()\
      \ * Multiplier;\n}\n\nFunction Bool RecommendLongRangedAttack() { Return true;\
      \ }\n\n\nFunction Bool PlaceExitingDriver()                       // <<<<<<\
      \ FIXME Fix to not be specific to this class after demo\n{\n Local Int I;\n\t\
      Local Vector tryPlace, Extent, HitLocation, HitNormal, ZOffset;\n\n\tExtent\
      \ = Driver.default.CollisionRadius * Vect(1,1,0);\n\tExtent *= 2;\n\tExtent.Z\
      \ = Driver.default.CollisionHeight;\n\tZOffset = Driver.default.CollisionHeight\
      \ * Vect(0,0,1);\n\tif (Trace(HitLocation, HitNormal, Location + (ZOffset *\
      \ 6), Location, False, Extent) != None )\n\t\treturn False;\n\n\t//avoid running\
      \ Driver over by placing in direction perpendicular to velocity\n\tif ( VSize(Velocity)\
      \ > 100 )\n\t{\n\t\ttryPlace = Normal(Velocity cross Vect(0,0,1)) * (CollisionRadius\
      \ + Driver.default.CollisionRadius ) * 1.25 ;\n\t\tif ( FRand() < 0.5 )\n\t\t\
      \ttryPlace *= -1; //randomly prefer other side\n\t\tif ( (Trace(HitLocation,\
      \ HitNormal, Location + tryPlace + ZOffset, Location + ZOffset, False, Extent)\
      \ == None && Driver.SetLocation(Location + tryPlace + ZOffset))\n\t\t     ||\
      \ (Trace(HitLocation, HitNormal, Location - tryPlace + ZOffset, Location + ZOffset,\
      \ False, Extent) == None && Driver.SetLocation(Location - tryPlace + ZOffset))\
      \ )\n\t\t\treturn true;\n\t}\n\n\tfor( i=0; i<ExitPositions.Length; I++)\n\t\
      {\n\t\tif ( ExitPositions[0].Z != 0 )\n\t\t\tZOffset = Vect(0,0,1) * ExitPositions[0].Z;\n\
      \t\telse\n\t\t\tZOffset = Driver.default.CollisionHeight * Vect(0,0,2);\n\n\t\
      \tif ( bRelativeExitPos )\n\t\t\ttryPlace = Location + ( (ExitPositions[i]-ZOffset)\
      \ >> Rotation) + ZOffset;\n\t\telse\n\t\t\ttryPlace = ExitPositions[i];\n\n\t\
      \t// First, do a line check (stops us passing through things on exit).\n\t\t\
      if ( bRelativeExitPos && Trace(HitLocation, HitNormal, tryPlace, Location +\
      \ ZOffset, False, Extent) != None )\n\t\t\tcontinue;\n\n\t\t// Then see if we\
      \ can place the player there.\n\t\tif ( !Driver.SetLocation(tryPlace) )\n\t\t\
      \tcontinue;\n\n\t\treturn true;\n\t}\n\treturn False;\n}\n\n\n//==================Mod\
      \ off From ONSPR=====================================\n\nFunction AltFire(optional\
      \ float F)            //avoid sending altfire to weapon\n{\n Super(Vehicle).AltFire(F);\n\
      }\n\n\nstatic function StaticPrecache(LevelInfo L)\n{\n    Super.StaticPrecache(L);\n\
      \n\tL.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorWing');\n\
      \tL.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorTailWing');\n\
      \tL.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorGun');\n\
      \tL.AddPrecacheStaticMesh(StaticMesh'AW-2004Particles.Debris.Veh_Debris2');\n\
      \tL.AddPrecacheStaticMesh(StaticMesh'AW-2004Particles.Debris.Veh_Debris1');\n\
      \tL.AddPrecacheStaticMesh(StaticMesh'WeaponStaticMesh.RocketProj');\n\n    L.AddPrecacheMaterial(Material'AW-2004Particles.Energy.SparkHead');\n\
      \    L.AddPrecacheMaterial(Material'ExplosionTex.Framed.exp2_frames');\n   \
      \ L.AddPrecacheMaterial(Material'ExplosionTex.Framed.exp1_frames');\n    L.AddPrecacheMaterial(Material'ExplosionTex.Framed.we1_frames');\n\
      \    L.AddPrecacheMaterial(Material'AW-2004Particles.Weapons.SmokePanels2');\n\
      \    L.AddPrecacheMaterial(Material'AW-2004Particles.Fire.NapalmSpot');\n  \
      \  L.AddPrecacheMaterial(Material'EpicParticles.Fire.SprayFire1');\n    L.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.RaptorColorRed');\n\
      \    L.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.RaptorColorBlue');\n\
      \    L.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.AttackCraftNoColor');\n\
      \tL.AddPrecacheMaterial(Material'AW-2004Particles.Weapons.TrailBlura');\n  \
      \  L.AddPrecacheMaterial(Material'Engine.GRADIENT_Fade');\n    L.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.raptorCOLORtest');\n\
      \    L.AddPrecacheMaterial(Material'AW-2004Particles.Fire.SmokeFragment');\n\
      }\n\nsimulated Function UpdatePrecacheStaticMeshes()\n{\n\tLevel.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorWing');\n\
      \tLevel.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorTailWing');\n\
      \tLevel.AddPrecacheStaticMesh(StaticMesh'ONSDeadVehicles-SM.RAPTORexploded.RaptorGun');\n\
      \tLevel.AddPrecacheStaticMesh(StaticMesh'AW-2004Particles.Debris.Veh_Debris2');\n\
      \tLevel.AddPrecacheStaticMesh(StaticMesh'AW-2004Particles.Debris.Veh_Debris1');\n\
      \tLevel.AddPrecacheStaticMesh(StaticMesh'WeaponStaticMesh.RocketProj');\n\n\t\
      Super.UpdatePrecacheStaticMeshes();\n}\n\nsimulated Function UpdatePrecacheMaterials()\n\
      {\n    Level.AddPrecacheMaterial(Material'AW-2004Particles.Energy.SparkHead');\n\
      \    Level.AddPrecacheMaterial(Material'ExplosionTex.Framed.exp2_frames');\n\
      \    Level.AddPrecacheMaterial(Material'ExplosionTex.Framed.exp1_frames');\n\
      \    Level.AddPrecacheMaterial(Material'ExplosionTex.Framed.we1_frames');\n\
      \    Level.AddPrecacheMaterial(Material'AW-2004Particles.Weapons.SmokePanels2');\n\
      \    Level.AddPrecacheMaterial(Material'AW-2004Particles.Fire.NapalmSpot');\n\
      \    Level.AddPrecacheMaterial(Material'EpicParticles.Fire.SprayFire1');\n \
      \   Level.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.RaptorColorRed');\n\
      \    Level.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.RaptorColorBlue');\n\
      \    Level.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.AttackCraftNoColor');\n\
      \tLevel.AddPrecacheMaterial(Material'AW-2004Particles.Weapons.TrailBlura');\n\
      \    Level.AddPrecacheMaterial(Material'Engine.GRADIENT_Fade');\n    Level.AddPrecacheMaterial(Material'VMVehicles-TX.AttackCraftGroup.raptorCOLORtest');\n\
      \    Level.AddPrecacheMaterial(Material'AW-2004Particles.Fire.SmokeFragment');\n\
      \n\tSuper.UpdatePrecacheMaterials();\n}\n\ndefaultproperties\n{\n     MaxPitchSpeed=600.000000\n\
      \     TrailEffectPositions(0)=(X=-672.000000,Y=-480.000000,Z=-20.000000)\n \
      \    TrailEffectPositions(1)=(X=-672.000000,Y=480.000000,Z=-20.000000)\n   \
      \  MaxThrustForce=256.000000\n     TurnDamping=500.000000\n     PitchTorqueMax=15.000000\n\
      \     PitchDamping=50.000000\n     RollDamping=60.000000\n     RedSkin=Texture'darkhoverskin.hoverskin.vehicletranportskin'\n\
      \     BlueSkin=Texture'darkhoverskin.hoverskin.vehicletranportskin'\n     VehicleMass=10.000000\n\
      \     VehiclePositionString=\"in a Dark DropShip\"\n     VehicleNameString=\"\
      Dark DropShip\"\n     bCanBeBaseForPawns=True\n     GroundSpeed=1500.000000\n\
      \     HealthMax=800.000000\n     Health=800\n     Mesh=SkeletalMesh'darkdropship_an.DropshipV5_3'\n\
      }\n</uscript>\n\n==Vitals DropShipSystem==\n\nIve left the logs i used for testing\
      \ in the code.\n\nThe ship has 7 weapons on it , mainly to give the bots something\
      \ to do while the craft is in flight although im not 100% sure this function\
      \ is working correctly but it wont effect the way the ship works in anyway if\
      \ it dosent. \n* The ship has to land on reletivly flat ground before it will\
      \ release the vecs.\n* The ship can carry as meny vehicles as you can fit on\
      \ or in it but each vehicle adds weight to the dropship making it harder to\
      \ fly.\n*The system uses 3 simulated states to get the job done gravitysucks,VehicleParked\
      \ VehicleFlying.\n*The system can tell altitude of the craft as well as tilt.\n\
      *You have to land on relativly flat ground. \n\n[[Image:Legacy_DropShip.jpeg|Legacy_DropShip.jpeg]]\n\
      \n<uscript>\nClass DropShipSystem extends DarkDropShip;\n\nvar () Bool     \
      \                          bEject_If_Inverted;                 // (could be\
      \ fun..)\nvar () float                              fMaxDistanceDownToCheck;\
      \           // set at level stalz\nvar () float                            \
      \  MinGroundClearance; // a numb slightly > than the distance of\n         \
      \                                                     // center point of the\
      \ vec to the ground           \nvar () float                              scanrange;\
      \          // the size of the cargobay\nvar () Array < vector >\t\t        \
      \  TraceOffsets;       // the craft fires trace lines to the \n            \
      \                                                  // ground to measure altitude\
      \ and Tilt \n                                                              //\
      \ during the gravitySucks state\nvar    array < onsvehicle >               cargorec;\n\
      var () bool                               bSeekFlyingEscorts;\nvar () Bool \
      \                              bSeekEscorts;\nvar () bool                  \
      \             bontheground;\nvar () sound                              LandedSound;\n\
      var () sound                              Takeoffsound;\nvar () ephysics   \
      \                        BackUpphysics;\n\n replication {\n             reliable\n\
      \             if (bNetDirty  &&  role == role_authority)\n                 bontheground;\n\
      \             }\n\n simulated function PostBeginPlay()\n {\n  local rotator\
      \ bonerot;\n\n  log(self$\"postbeginplay has been called\");\n  Ksetactorgravscale(0.1);\n\
      \n  bonerot=getbonerotation( 'middle_middle_weapon');\n  //bonerot.yaw += rotation.yaw+32768;\n\
      \  SetBoneRotation( 'middle_middle_weapon', bonerot );\n  SetBoneRotation( 'Left_Front_weapon',\
      \ bonerot );\n  SetBoneRotation( 'Right_Front_weapon', bonerot );\n  SetBoneRotation(\
      \ 'left_middle_weapon', bonerot );\n  SetBoneRotation( 'right_middle_weapon',\
      \ bonerot );\n  SetBoneRotation( 'Right_rear_weapon', bonerot );\n  SetBoneRotation(\
      \ 'Left_rear_weapon', bonerot );\n }\n\n simulated function capturevecs ()\n\
      \ {\n  local onsvehicle foundvec;\n                                        \
      \                                      // log(self$\"capturevecs was called\"\
      );\n  cargorec.length=0;\n  foreach visiblecollidingactors(class'OnsVehicle',foundvec,Scanrange)\n\
      \         {\n                                                              \
      \                // log(\"capturevecs:found a vec\"$foundvec$\". so thats \"\
      $cargorec.length$\"found so far\");\n          if (( foundvec != self ) && (foundvec.bVehicleOnGround)\
      \ && ( vsize( foundvec.velocity ) < 20))\n             {\n                 \
      \                                                             // log(foundvec$\"\
      will be made cargo\");\n              Addweight();\n              cargorec.insert(0,1);\n\
      \              cargorec[0]                           = foundvec;\n         \
      \     BackUpphysics                         = foundvec.physics;\n          \
      \    cargorec[0].bhardattach               = True;\n              cargorec[0].SetPhysics(PHYS_None\
      \ );                             // Remove the Physics from the Target Vehicle\n\
      \              cargorec[0].Setbase(self );\n              cargorec[0].bAllowViewChange\
      \          = bEject_If_Inverted;     // Sets inverted optiOns on the Vec\n \
      \             cargorec[0].bDriverCannotLeaveVehicle = true;                \
      \   // Locks the vehicles until the flight is over\n              cargorec[0].setcollision(\
      \ False , False , true );               // Switch off the collision on the Vehicle\n\
      \             }\n        }\n  }\n\n  simulated function EnlistEscorts()\n  {\n\
      \  local pawn foundpawn;\n                                                 \
      \                             // log(\"EnlistEscorts() has started\");\n  foreach\
      \ visiblecollidingactors(class'pawn',foundpawn,Scanrange*2)\n         {\n  \
      \                                                                          \
      \  // log(\"EnlistEscorts(): found a pawn = \"$foundpawn);\n          if ((foundpawn.isa('xbot')&&(!foundpawn.IsHumanControlled())\
      \ &&\n             (driver.controller.SameTeamAs(foundpawn.controller)) ))\n\
      \             {\n                                                          \
      \                    // log(\"EnlistEscorts(): found It was an xbot +not human\
      \ controlled = \");\n             if (((bSeekFlyingEscorts) && foundpawn.IsA('onsraptor'))\
      \ ||\n                ((bSeekEscorts ) && (foundpawn.isa('onsattackcraft'))))\n\
      \                {\n                                                       \
      \                       // log(\"EnlistEscorts(): it wa a bot controlled vec\
      \ = \");\n                  bot(foundpawn.controller).SetOrders('follow',Driver.Controller);\n\
      \                }\n             }\n        }\n }\n\n simulated function releasevecs()\n\
      \ {\n  local int I;\n                                                      \
      \                        //    log(\"Time to release the cargo\"$cargorec.length);\n\
      \  if (cargorec.length > 0)\n     {\n                                      \
      \                                        //   log(\"releasevecs():releasing\"\
      $cargorec[i]);\n      for ( i=0 ; I< cargorec.length ; I++ )\n          {\n\
      \           cargorec[i].bHardattach              = false;\n           cargorec[i].SetBase(None);\
      \                                         // Releasing Target Vec\n        \
      \   cargorec[i].SetPhysics(BackUpphysics);                             // Returns\
      \ old physics\n           cargorec[i].setcollision(true , True , true);    \
      \                  // Switches the collision back on.\n           cargorec[i].bDriverCannotLeaveVehicle\
      \ = False;                     // Unlocks the Vehicle\n          }\n      cargorec.length=0;\n\
      \     }\n  }\n\n simulated function TakeDamage(int Damage, Pawn instigatedBy,\
      \ Vector Hitlocation, Vector Momentum, class<DamageType> DamageType)\n {\n \
      \ momentum = momentum*0.01;\n  if (damage>Health)\n      Releasevecs();\n  super.takedamage(\
      \ Damage,  instigatedBy,  Hitlocation,  Momentum,  DamageType);\n }\n\n simulated\
      \ function subweight()\n {\n  local float Thegrav;                         \
      \                               // log(\"subweight()\");\n  thegrav=kgetactorgravscale()\
      \ - (0.02*cargorec.length);\n  ksetactorgravscale(thegrav);                \
      \                                // log(\"subweight:new weight is \"$thegrav);\n\
      \ }\n\n simulated function Addweight()\n {                                 \
      \                                           //log(\"Addweight()\");\n  local\
      \ float Thegrav;\n  thegrav=kgetactorgravscale()+ 0.02;\n  ksetactorgravscale(thegrav);\n\
      \ }\n\n simulated function loudnoise(sound sfx)\n {\n                      \
      \                                                        // log(\"loudnoise()\"\
      );\n  makenoise(1.0);\n  playsound(sfx);\n }\n\n\n simulated function Destroyed()\n\
      \ {\n                                                                      \
      \        // log(\"Destroyed()\");\n  ReleaseVecs();                        \
      \                                      // log(\"Destroyed:ReleaseVecs()\");\n\
      \  DarkhoverSpawner(owner).Destroyed();                                    \
      \    // log(\"informed \"$owner$\" im about to die\");\n  super.Destroyed();\n\
      \ }\n\n simulated  function bool CheckbOnTheGround()\n {\n  local Vector TraceStart,\
      \ TraceEnd,    HitLocation,HitNormal;\n  Local float  Dist,       MarkerDist,\
      \  Total_DistanceDiff;\n  Local int    I;\n  local actor  HitActor;\n      \
      \                                                                        //\
      \ log(\"CheckbOnTheGround()\");\n  if (traceoffsets[0] != vect(0,0,0))\n   \
      \   TraceOffsets  .insert (0,1);                                           \
      \ // making blank space for first 'marker' trace\n  for ( I = 0 ; I < TraceOffsets.length;\
      \ I++)\n      {\n      TraceStart = Location + TraceOffsets[i];\n      TraceEnd\
      \   = TraceStart - ( fMaxDistanceDownToCheck * Vect(0,0,1) );\n      HitActor\
      \   = Trace(HitLocation , HitNormal , TraceEnd , TraceStart , true);\n     \
      \ Dist       = VSize(TraceStart-HitLocation);\n      if ( I == 0 )\n       \
      \    MarkerDist = dist;\n      else\n      if ( HitActor != none )\n       \
      \    Total_DistanceDiff = MarkerDist - Dist;\n      }\n\n  if ( MarkerDist <=\
      \ MinGroundClearance)\n     {\n                                            \
      \                                  // log('CheckbOnTheGround:Ground clearence\
      \ is good');\n     if  (Total_DistanceDiff < 100)\n         {\n            \
      \                                                                  // log(Self$\"\
      CheckbOnTheGround:Total diff on ground clearence was less than 100 - returning\
      \ true\");\n          if ( vsize(velocity) < 10 )\n             {\n        \
      \                                                                      // log\
      \ (\"CheckbOnTheGround():velocity is now correct to im  - returning true\");\n\
      \              return true;\n             }\n         }\n     }\n else     \
      \                                                                    // log\
      \ (\"CheckbOnTheGround:returning false\");\n return false;\n }\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\
      ///////////////////////////////////////////////////////////auto simulated state\
      \ GravitySucks\nauto simulated state GravitySucks\n{\n\n simulated function\
      \ Timer()                                                   // perform a scan\n\
      \  {                                                                       \
      \    // log(\"=========state () GravitySucks:Timer() started\");\n   bOnTheGround=CheckbOnTheGround();\n\
      \   if  ( bOnTheGround == true )\n       {\n                               \
      \                                               // log(\"GravitySucks:Timer:I\
      \ am on the ground as bOnTheGround =\"$bOnTheGround);\n        if (landedsound!=None)\n\
      \            Loudnoise(landedsound);\n        GotoState('VehicleParked');  \
      \                                         // log(\"GravitySucks:Timer():GotoState('VehicleParked')\
      \ was just called'\");\n        return;\n       }                          \
      \                                            // log(\"GravitySucks:Timer():Im\
      \ NOT on the ground this time'\");\n SetTimer(0.1 , False);\n super.timer();\n\
      \ }\n\nBegin:\n                                                            \
      \                  // log(\"==========state GravitySucks:state code has been\
      \ called\");\nSetTimer(0.1  , False);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n\
      //////////////////////////////////////////// simulated state VehicleParked /\n\
      \nsimulated state VehicleParked\n{\n\n simulated function bool TryToDrive(Pawn\
      \ P)\n {\n                                                                 \
      \             // log(\" TryToDrive():an attempt to drive was made by\"$p);\n\
      \  super.TryToDrive(P);\n }\n\n simulated function ClientKDriverEnter(PlayerController\
      \ PC)\n {\n                                                                \
      \              // log(\"VehicleParked:ClientKDriverenter START\");\n  Capturevecs\
      \ ();                                                             // log(\"\
      VehicleParked:ClientKDriverenter enlistescorts() - has been called and returned\"\
      );\n  enlistescorts();                                                     \
      \       // log(\"VehicleParked:ClientKDriverenter enlistescorts() - has been\
      \ called and returned\");\n  GotoState ( 'VehicleFlying' );                \
      \                              // log(\"VehicleParked:ClientKDriverenter gotostate\
      \ 'VehicleFlying' has been called\");\n  super.ClientKDriverEnter( PC );\n }\n\
      \n  simulated function KDriverEnter(pawn p)\n {\n                          \
      \                                                    // log(\"VehicleParked:KDriverenter\
      \                              START\");\n  Capturevecs ();                \
      \                                             // log(\"VehicleParked:KDriverenter\
      \ Capturevecs ()               has been called and returned\");\n  enlistescorts();\
      \                                                            // log(\"VehicleParked:KDriverenter\
      \ enlistescorts ()             has been called and returned\");\n  GotoState\
      \ ( 'VehicleFlying' );                                              // log(\"\
      VehicleParked:KDriverenterGotoState ( 'VehicleFlying' ) has been called and\
      \ returned\");\n  super.KDriverEnter( P );\n }\n\nBegin:\n                 \
      \                                                             // log(\"now in\
      \ state () VehicleParked start of state code\");\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\
      ////////////////////////////////////////////////////////////////////////////////////////////////////\n\
      //////////////////////////////////////////////////////////////// state VehicleFlying\n\
      \nstate VehicleFlying\n{\n simulated function ClientKDriverLeave(PlayerController\
      \ PC)\n {                                                                  \
      \          // log(\"VehicleFlying:ClientKDriverLeave releasevecs() has been\
      \ called and returned \");\n                                               \
      \                               // log(\"VehicleFlying:ClientKDriverLeave releasevecs()\
      \ has been called and returned\");\n  releasevecs();                       \
      \                                       // log(\"VehicleFlying:ClientKDriverLeave\
      \ subweight()   has been called and returned\");\n  subweight();           \
      \                                                     // log(\"VehicleFlying:ClientKDriverLeave\
      \ goto state GravitySucks has been called \");\n  GotoState('GravitySucks');\n\
      \  super.clientkDriverleave(PC);\n }\n\n simulated event bool KDriverLeave(\
      \ bool bForceLeave )\n {\n                                                 \
      \                             // log(\"VehicleFlying:KDriverLeave          \
      \    * Started *\");\n  releasevecs();                                     \
      \                         // log(\"VehicleFlying:KDriverLeave:releasevecs()\
      \              has been called and returned\");\n  subweight();            \
      \                                                    // log(\"VehicleFlying:KDriverLeave:subweight()\
      \                has been called and returned\");\n  GotoState('GravitySucks');\
      \                                                  // log(\"VehicleFlying:KDriverLeave\
      \ :GotoState('GravitySucks') has been called and returned\");\n  super.kDriverleave(bForceLeave);\n\
      \ }\n\nbegin:\nif (takeoffsound!=None)\n    loudnoise(takeoffsound);\n     \
      \                                                                         //\
      \ log(\"now in state VehicleFlying\");\n}\n\ndefaultproperties\n{\n     fMaxDistanceDownToCheck=5000.000000\n\
      \     MinGroundClearance=260.000000\n     scanrange=1024.000000\n     TraceOffsets(0)=(X=100.000000)\n\
      \     TraceOffsets(1)=(X=-100.000000)\n     TraceOffsets(2)=(Y=100.000000)\n\
      \     TraceOffsets(3)=(Y=-100.000000)\n     bSeekFlyingEscorts=True\n     bSeekEscorts=True\n\
      \     DriverWeapons(0)=(WeaponClass=Class'darkhover.Mortician_Head',WeaponBone=\"\
      middle_front_weapon\")\n     PassengerWeapons(0)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      right_front_weapon\")\n     PassengerWeapons(1)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      left_front_weapon\")\n     PassengerWeapons(2)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      right_middle_weapon\")\n     PassengerWeapons(3)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      left_middle_weapon\")\n     PassengerWeapons(4)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      left_rear_weapon\")\n     PassengerWeapons(6)=(WeaponPawnClass=Class'OnslaughtFull.ONSMASSideGunPawn',WeaponBone=\"\
      right_rear_weapon\")\n     VehicleMass=12.000000\n     TPCamDistance=1400.000000\n\
      \     bPathColliding=True\n}\n</uscript>\n\n==Discussion==\n\n'''Vitaloverdose'''\
      \ im intrested in taking this script further if anyone has a decent static mesh\
      \ for a dropship.\n\n'''Ambershee:''' Take a look at the Leviathan. That deploys\
      \ into a static weapon using animation and has the collision intact.\n\n'''detour187'''\
      \ In one of the bonus packs for ut2004 there is a map called 'thrust' that has\
      \ a decent dropship, I'll see If I could get the file.\n\n[[Category:Legacy\
      \ Custom Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 44610
name: "Legacy:VitalOverdose/The DropShip Controller"
revision:
  revid: 44610
  parentid: 34476
  user: "Vitaloverdose"
  timestamp: 1316002705.000000000
  comment: "/* Vehicle Dropship */"
timestamp: 1668976476.168504000
