---
parse:
  title: "Legacy:BSP"
  text:
    text: "<dl>\n<dt>BSP</dt>\n<dd><b>B</b>inary <b>S</b>pace <b>P</b>artition. A\
      \ technique for determining polygon order and therefore visibility by cutting\
      \ a world space into convex regions. Each cut splits the world into two subregions,\
      \ hence the word \"binary\".</dd>\n</dl>\n<p></p>\n<div id=\"toc\" class=\"\
      toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"\
      toclevel-1 tocsection-1\"><a href=\"#Why_BSP\"><span class=\"tocnumber\">1</span>\
      \ <span class=\"toctext\">Why BSP</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#How_UnrealEd_handles_BSP\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">How UnrealEd handles BSP</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Examples_of_BSP_behaviour\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Examples of BSP behaviour</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Regions_are_.28usually.29_maximal\"\
      ><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Regions are (usually)\
      \ maximal</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"\
      #Trim_around_the_base_of_a_room\"><span class=\"tocnumber\">3.2</span> <span\
      \ class=\"toctext\">Trim around the base of a room</span></a></li>\n<li class=\"\
      toclevel-2 tocsection-6\"><a href=\"#Another_method\"><span class=\"tocnumber\"\
      >3.3</span> <span class=\"toctext\">Another method</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Comments\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Comments</span></a></li>\n<li class=\"\
      toclevel-1 tocsection-8\"><a href=\"#Related_Topics\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n\
      <p></p>\n<h2><span class=\"mw-headline\" id=\"Why_BSP\">Why BSP</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:BSP?section=1\" title=\"Edit section: Why BSP\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The purpose of BSP\
      \ is to greatly reduce the amount of work the game engine has to perform in\
      \ real time to draw <a href=\"/Legacy:Polygon\" title=\"Legacy:Polygon\">polygons</a>\
      \ on the player's screen.</p>\n<ul>\n<li>The world is divided, or cut into regions.</li>\n\
      <li>Each point where a cut occurs is called a node.</li>\n<li>The collection\
      \ of nodes and its associated edges are called a data structure or the <a href=\"\
      /Legacy:BSP_Tree\" title=\"Legacy:BSP Tree\">BSP Tree</a>.</li>\n<li>The rendering\
      \ engine uses the BSP Tree to determine\n<ul>\n<li>collision occurance</li>\n\
      <li>surface visibility or occlussion</li>\n</ul>\n</li>\n<li>The BSP partitioning\
      \ process is invoked by the map builder before the map is played and is known\
      \ as compiling.</li>\n<li>Most 3D game maps use BSP.</li>\n</ul>\n<p>The complexity\
      \ of geometry and the BSP Tree slows the compilation process, also known as\
      \ the <a href=\"/Legacy:Build\" title=\"Legacy:Build\">build</a>.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"How_UnrealEd_handles_BSP\">How UnrealEd handles\
      \ BSP</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BSP?section=2\" title=\"Edit section: How UnrealEd\
      \ handles BSP\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li>The build process is invoked manually to create the BSP tree.</li>\n\
      </ul>\n<p>The interface implies that the following happens</p>\n<ul>\n<li>\n\
      <ol>\n<li>process CSG brushes to create surfaces in 3D</li>\n<li>process the\
      \ surfaces to create a BSP tree</li>\n</ol>\n</li>\n</ul>\n<p>The two parts\
      \ of the process are probably more intertwined, since a simple geometry rebuild\
      \ produces BSP cuts. See also <a href=\"/Legacy:BSP_Hole\" title=\"Legacy:BSP\
      \ Hole\">BSP hole</a>.</p>\n<p><br /></p>\n<h2><span class=\"mw-headline\" id=\"\
      Examples_of_BSP_behaviour\">Examples of BSP behaviour</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:BSP?section=3\"\
      \ title=\"Edit section: Examples of BSP behaviour\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Regions_are_.28usually.29_maximal\"\
      >Regions are (usually) maximal</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:BSP?section=4\" title=\"\
      Edit section: Regions are (usually) maximal\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li>Make a 256 cube</li>\n<li>Subtract it twice,\
      \ one on top of the other.</li>\n<li>Build.</li>\n<li>Now add a pillar 512 high,\
      \ 64x64 base.</li>\n</ul>\n<p>In Zone view, the pillar sides have <i>not</i>\
      \ been cut by BSP</p>\n<p>Before the pillar is added, both subtracts are treated\
      \ as one single region. This means that you can make subtractive trim.</p>\n\
      <p><i>article on this is on the way – Tarquin</i>.</p>\n<p><br /></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Trim_around_the_base_of_a_room\">Trim around the\
      \ base of a room</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BSP?section=5\" title=\"Edit section: Trim around\
      \ the base of a room\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <ul>\n<li>make a subtract the same base size as the room and 32 high.</li>\n\
      <li>Subtract this</li>\n<li>Make the room brush smaller too so they don't overlap</li>\n\
      </ul>\n<h3><span class=\"mw-headline\" id=\"Another_method\">Another method</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:BSP?section=6\" title=\"Edit section: Another method\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<ul>\n\
      <li>Use clipping to split the room subtract 32 units above the floor.</li>\n\
      <li>Use split, not clip. Split creates two brushes. See <a href=\"/Legacy:Making_Trim\"\
      \ title=\"Legacy:Making Trim\">Making Trim</a></li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Comments\">Comments</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:BSP?section=7\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>inio:</b> This test may be pointless, as I believe\
      \ that there can only be BSP cuts along planes on which surfaces exist. As far\
      \ as I can tell the BSP is not built progressively brush-by-brush. Instead,\
      \ all CSG is done, splitting polygons only when necessary for geometry reasons.\
      \ Once this big polygon list is generated the BSP is built from that. Because\
      \ no polygons remain on the plane cutting the 512x256x256 room in half after\
      \ CSG, there cannot be a BSP cut on that plane and there is no reason to cut\
      \ the polys on the tower in the middle. Either that, or it does some recombination\
      \ after BSP generation, but that seems algorithmically harder to me and I would\
      \ expect the extra vertices to be left around (which they aren't).</p>\n<p><b>Tarquin:</b>\
      \ Yes, I see what you mean. Some lines you see in zone view are just divisions\
      \ of a surface, they're not necessarily BSP cuts.</p>\n<p><b>Sobiwan:</b>~ A\
      \ picture is worth a thousand words. &#160;:)</p>\n<p><b>Jimbo:</b> I'm not\
      \ sure I've ever seen this question asked before but does anyone know if it's\
      \ possible to convert the BSP construction of a UT2003 map over to a Quake III\
      \ map?</p>\n<p><b>Foxpaw:</b> Though it's probrably possible. It's questionably\
      \ legal to do so. You would need permission to port a map to a different game.\
      \ There is, to my knowledge, no ready-made utilities for this purpose. It's\
      \ also worth mentioning that a lot (but not all) of the world geometry in UnrealEngine2\
      \ is composed of static meshes, which, if imported into Quake 3, would likely\
      \ strain your system beyond all belief. However, there are maps with lots of\
      \ BSP in them, and porting them should be possible with the use of a custom\
      \ utility that you will have to create in the programming language of your choice.\
      \ (Or possibly find someone to create the utility for you, but it may be somewhat\
      \ time consuming to make.)</p>\n<p>One minor point I should make too, is that\
      \ although we usually call it \"BSP,\" BSP is technically an optimization performed\
      \ on the \"CSG,\" which refers to the actual geometry.&#160;:D</p>\n<p>Anyways,\
      \ you can get the raw vertex and polygon information from UnrealEd, then you\
      \ will need to write (or have someone else write) a program to convert it to\
      \ a Quake-friendly format. See <a href=\"/Legacy:Brush\" title=\"Legacy:Brush\"\
      >Brush</a> and <a href=\"/Legacy:Brush_Hacking\" title=\"Legacy:Brush Hacking\"\
      >Brush Hacking</a> for the relevant info on how you can get the raw vertex and\
      \ polygon data from UnrealEd.</p>\n<p><b>Draconx:</b> You also must remember\
      \ that Quake3 and UT handle geometry in vastly different ways, UT's CSG is the\
      \ thing that says \"the world is currently filled up, let's cut holes out of\
      \ it and run around inside them!\", whereas in Quake3 you start with the world\
      \ being empty, and you create floor, ceilings, and walls by filling up this\
      \ empty space. (I could be wrong on that one, I've never done any quake3 mapping\
      \ before). So you're stuck with more than just doing a simple conversion from\
      \ one format to another, you've got to completely reconstruct the world geometry\
      \ using quake3's system.</p>\n<p>In short, I think you'd be better off playing\
      \ Chaos in Space from Team Arena&#160;;)</p>\n<p><b>Jimbo:</b> Hehe... thanks\
      \ for the insight guys. I recently completed this map: <a rel=\"nofollow\" class=\"\
      external free\" href=\"http://fragme.org/Downloads/Maps/TempleOfChaos.zip\"\
      >http://fragme.org/Downloads/Maps/TempleOfChaos.zip</a> and was just wondering\
      \ if it was possible. By the way... what do you guys think of it? My email is\
      \ in the readme file.&#160;:)</p>\n<p><b>Ripper_hugme:</b> What Draconx is saying\
      \ is right that's the way Quake 3's BSP works (note this is also the same with\
      \ HL1 and 2 and related games, and other games based on the quake or source\
      \ engine). As for porting CSG to QBSP, you'd want to export to the native editor\
      \ formats such as .vmf's (Source) or Worldcraft so you can edit them without\
      \ the need to de-compile.</p>\n<h2><span class=\"mw-headline\" id=\"Related_Topics\"\
      >Related Topics</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:BSP?section=8\" title=\"Edit section: Related\
      \ Topics\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a href=\"/Legacy:BSP_Hole\" title=\"Legacy:BSP Hole\">BSP Hole</a></li>\n\
      <li><a href=\"/Legacy:BSP_Tree\" title=\"Legacy:BSP Tree\">BSP Tree</a></li>\n\
      </ul>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.038 seconds\nReal time\
      \ usage: 0.079 seconds\nPreprocessor visited node count: 32/1000000\nPreprocessor\
      \ generated node count: 44/1000000\nPost‐expand include size: 3/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:545-0!*!0!!en!*!* and timestamp\
      \ 20221118000046 and revision id 1686\n -->\n"
  categories:
  - sortkey: "BSP"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:BSP Tree"
  - ns: 100
    exists: true
    name: "Legacy:Polygon"
  - ns: 100
    exists: true
    name: "Legacy:Brush Hacking"
  - ns: 100
    exists: true
    name: "Legacy:Making Trim"
  - ns: 100
    exists: true
    name: "Legacy:Brush"
  - ns: 100
    exists: true
    name: "Legacy:Build"
  - ns: 100
    exists: true
    name: "Legacy:BSP Hole"
  templates: []
  images: []
  externallinks:
  - "http://fragme.org/Downloads/Maps/TempleOfChaos.zip"
  sections:
  - toclevel: 1
    level: "2"
    line: "Why BSP"
    number: "1"
    index: "1"
    fromtitle: "Legacy:BSP"
    byteoffset: 235
    anchor: "Why_BSP"
  - toclevel: 1
    level: "2"
    line: "How UnrealEd handles BSP"
    number: "2"
    index: "2"
    fromtitle: "Legacy:BSP"
    byteoffset: 998
    anchor: "How_UnrealEd_handles_BSP"
  - toclevel: 1
    level: "2"
    line: "Examples of BSP behaviour"
    number: "3"
    index: "3"
    fromtitle: "Legacy:BSP"
    byteoffset: 1391
    anchor: "Examples_of_BSP_behaviour"
  - toclevel: 2
    level: "3"
    line: "Regions are (usually) maximal"
    number: "3.1"
    index: "4"
    fromtitle: "Legacy:BSP"
    byteoffset: 1422
    anchor: "Regions_are_.28usually.29_maximal"
  - toclevel: 2
    level: "3"
    line: "Trim around the base of a room"
    number: "3.2"
    index: "5"
    fromtitle: "Legacy:BSP"
    byteoffset: 1819
    anchor: "Trim_around_the_base_of_a_room"
  - toclevel: 2
    level: "3"
    line: "Another method"
    number: "3.3"
    index: "6"
    fromtitle: "Legacy:BSP"
    byteoffset: 1992
    anchor: "Another_method"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "4"
    index: "7"
    fromtitle: "Legacy:BSP"
    byteoffset: 2174
    anchor: "Comments"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "5"
    index: "8"
    fromtitle: "Legacy:BSP"
    byteoffset: 5848
    anchor: "Related_Topics"
  displaytitle: "Legacy:BSP"
  iwlinks: []
  wikitext:
    text: ";BSP: '''B'''inary '''S'''pace '''P'''artition.  A technique for determining\
      \ polygon order and therefore visibility by cutting a world space into convex\
      \ regions. Each cut splits the world into two subregions, hence the word \"\
      binary\".\n\n==Why BSP==\n\nThe purpose of BSP is to greatly reduce the amount\
      \ of work the game engine has to perform in real time to draw [[Legacy:Polygon|polygon]]s\
      \ on the player's screen.\n* The world is divided, or cut into regions.\n* Each\
      \ point where a cut occurs is called a node.  \n* The collection of nodes and\
      \ its associated edges are called a data structure or the [[Legacy:BSP Tree|BSP\
      \ Tree]].\n* The rendering engine uses the BSP Tree to determine\n** collision\
      \ occurance\n** surface visibility or occlussion\n* The BSP partitioning process\
      \ is invoked by the map builder before the map is played and is known as compiling.\n\
      * Most 3D game maps use BSP.\n\nThe complexity of geometry and the BSP Tree\
      \ slows the compilation process, also known as the [[Legacy:Build|build]].\n\
      \n==How UnrealEd handles BSP==\n* The build process is invoked manually to create\
      \ the BSP tree. \n* \nThe interface implies that the following happens\n*# process\
      \ CSG brushes to create surfaces in 3D\n*# process the surfaces to create a\
      \ BSP tree\n\nThe two parts of the process are probably more intertwined, since\
      \ a simple geometry rebuild produces BSP cuts.  See also [[Legacy:BSP Hole|BSP\
      \ hole]].\n\n\n==Examples of BSP behaviour==\n\n===Regions are (usually) maximal===\n\
      \n* Make a 256 cube\n* Subtract it twice, one on top of the other. \n* Build.\
      \ \n* Now add a pillar 512 high, 64x64 base. \n* \nIn Zone view, the pillar\
      \ sides have ''not'' been cut by BSP\n\nBefore the pillar is added, both subtracts\
      \ are treated as one single region. This means that you can make subtractive\
      \ trim.\n\n''article on this is on the way &ndash; Tarquin''. \n\n\n===Trim\
      \ around the base of a room===\n* make a subtract the same base size as the\
      \ room and 32 high. \n* Subtract this\n* Make the room brush smaller too so\
      \ they don't overlap\n\n===Another method===\n* Use clipping to split the room\
      \ subtract 32 units above the floor. \n* Use split, not clip.  Split creates\
      \ two brushes.  See [[Legacy:Making Trim|Making Trim]]\n\n==Comments==\n\n'''inio:'''\
      \ This test may be pointless, as I believe that there can only be BSP cuts along\
      \ planes on which surfaces exist.  As far as I can tell the BSP is not built\
      \ progressively brush-by-brush.  Instead, all CSG is done, splitting polygons\
      \ only when necessary for geometry reasons.  Once this big polygon list is generated\
      \ the BSP is built from that.  Because no polygons remain on the plane cutting\
      \ the 512x256x256 room in half after CSG, there cannot be a BSP cut on that\
      \ plane and there is no reason to cut the polys on the tower in the middle.\
      \  Either that, or it does some recombination after BSP generation, but that\
      \ seems algorithmically harder to me and I would expect the extra vertices to\
      \ be left around (which they aren't).\n\n'''Tarquin:''' Yes, I see what you\
      \ mean. Some lines you see in zone view are just divisions of a surface, they're\
      \ not necessarily BSP cuts.\n\n'''Sobiwan:'''~ A picture is worth a thousand\
      \ words.  :)\n\n'''Jimbo:''' I'm not sure I've ever seen this question asked\
      \ before but does anyone know if it's possible to convert the BSP construction\
      \ of a UT2003 map over to a Quake III map?\n\n'''Foxpaw:''' Though it's probrably\
      \ possible. It's questionably legal to do so. You would need permission to port\
      \ a map to a different game. There is, to my knowledge, no ready-made utilities\
      \ for this purpose. It's also worth mentioning that a lot (but not all) of the\
      \ world geometry in UnrealEngine2 is composed of static meshes, which, if imported\
      \ into Quake 3, would likely strain your system beyond all belief. However,\
      \ there are maps with lots of BSP in them, and porting them should be possible\
      \ with the use of a custom utility that you will have to create in the programming\
      \ language of your choice. (Or possibly find someone to create the utility for\
      \ you, but it may be somewhat time consuming to make.)\n\nOne minor point I\
      \ should make too, is that although we usually call it \"BSP,\" BSP is technically\
      \ an optimization performed on the \"CSG,\" which refers to the actual geometry.\
      \ :D\n\nAnyways, you can get the raw vertex and polygon information from UnrealEd,\
      \ then you will need to write (or have someone else write) a program to convert\
      \ it to a Quake-friendly format. See [[Legacy:Brush|Brush]] and [[Legacy:Brush\
      \ Hacking|Brush Hacking]] for the relevant info on how you can get the raw vertex\
      \ and polygon data from UnrealEd.\n\n'''Draconx:''' You also must remember that\
      \ Quake3 and UT handle geometry in vastly different ways, UT's CSG is the thing\
      \ that says \"the world is currently filled up, let's cut holes out of it and\
      \ run around inside them!\", whereas in Quake3 you start with the world being\
      \ empty, and you create floor, ceilings, and walls by filling up this empty\
      \ space.  (I could be wrong on that one, I've never done any quake3 mapping\
      \ before).  So you're stuck with more than just doing a simple conversion from\
      \ one format to another, you've got to completely reconstruct the world geometry\
      \ using quake3's system.\n\nIn short, I think you'd be better off playing Chaos\
      \ in Space from Team Arena ;)\n\n'''Jimbo:''' Hehe... thanks for the insight\
      \ guys. I recently completed this map: http://fragme.org/Downloads/Maps/TempleOfChaos.zip\
      \ and was just wondering if it was possible. By the way... what do you guys\
      \ think of it? My email is in the readme file. :)\n\n'''Ripper_hugme:''' What\
      \ Draconx is saying is right that's the way Quake 3's BSP works (note this is\
      \ also the same with HL1 and 2 and related games, and other games based on the\
      \ quake or source engine). As for porting CSG to QBSP, you'd want to export\
      \ to the native editor formats such as .vmf's (Source) or Worldcraft so you\
      \ can edit them without the need to de-compile. \n\n==Related Topics==\n* [[Legacy:BSP\
      \ Hole|BSP Hole]]\n* [[Legacy:BSP Tree|BSP Tree]]\n\n[[Category:Legacy Mapping|{{PAGENAME}}]]"
  properties: []
  revId: 1686
name: "Legacy:BSP"
revision:
  revid: 1686
  parentid: 1687
  user: "Ripper Hugme"
  timestamp: 1165398563.000000000
  comment: "*"
timestamp: 1668753927.767436000
