---
parse:
  title: "Legacy:Flow Syntax"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Basics\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Basics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Special_Flow_Commands\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Special Flow Commands</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Return_expression\"><span\
      \ class=\"tocnumber\">2.1</span> <span class=\"toctext\">Return <i>expression</i></span></a></li>\n\
      <li class=\"toclevel-2 tocsection-4\"><a href=\"#Break\"><span class=\"tocnumber\"\
      >2.2</span> <span class=\"toctext\">Break</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-5\"><a href=\"#Continue\"><span class=\"tocnumber\">2.3</span>\
      \ <span class=\"toctext\">Continue</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"\
      ><a href=\"#Stop\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\"\
      >Stop</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Assert_.28expression.29\"\
      ><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">Assert (<i>expression</i>)</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#GoTo_.28label.29\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">GoTo (<i>label</i>)</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#If_Statements\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">If Statements</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Switch_Statements\"><span\
      \ class=\"tocnumber\">5</span> <span class=\"toctext\">Switch Statements</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-11\"><a href=\"#While_Loops\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">While Loops</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-12\"><a href=\"#For_Loops\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">For Loops</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-13\"><a href=\"#Do...Until_Loops\"><span class=\"tocnumber\">8</span>\
      \ <span class=\"toctext\">Do...Until Loops</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-14\"><a href=\"#ForEach_Loops\"><span class=\"tocnumber\">9</span>\
      \ <span class=\"toctext\">ForEach Loops</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-15\"><a href=\"#Discussion\"><span class=\"tocnumber\">10</span>\
      \ <span class=\"toctext\">Discussion</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-16\"><a href=\"#Related_Topics\"><span class=\"tocnumber\">11</span>\
      \ <span class=\"toctext\">Related Topics</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"Basics\">Basics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=1\"\
      \ title=\"Edit section: Basics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are two basic flow control functions in <a href=\"\
      /Legacy:UnrealScript\" title=\"Legacy:UnrealScript\">UnrealScript</a>, <i>GoTo</i>\
      \ and <i>If...Else</i>.</p>\n<p>Any other functions and loops described here\
      \ (except <i>ForEach</i>) could be replaced by combinations of these two functions\
      \ (In fact, that happens in UnrealScript byte code for <i>While</i>, <i>For</i>\
      \ and <i>Do...Until</i> loops.), but it's considered bad coding practise to\
      \ actually do so.</p>\n<p>If a loop, <i>If</i> or <i>Else</i> contains only\
      \ one line of code the <b>{ }</b> are optional. A single loop, <i>If</i> or\
      \ <i>Switch</i> statement is treated as one command in this context.</p>\n<p>Example:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">If</span> <span\
      \ class=\"br0\">(</span> bExecute <span class=\"br0\">)</span>\n    <span class=\"\
      kw2\">For</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">5</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">{</span>\n        a <span class=\"sy0\">+=</span> i;\n     \
      \   b <span class=\"sy0\">*=</span> i;\n    <span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Note:</b> Due to a compiler bug it is not possible to use a loop\
      \ (<tt>for</tt>, <tt>while</tt>, ...) as the statement in a simple <tt>else</tt>\
      \ statement.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>foo<span class=\"br0\">)</span>\n\
      \  bar<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"\
      kw2\">else</span> <span class=\"co1\">// Doesn't work, compiler error!</span>\n\
      \  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">10</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    blargh<span class=\"br0\">(</span>i<span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>You have to use a \"block-else\" instead, i.e.:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>foo<span\
      \ class=\"br0\">)</span>\n  bar<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n<span class=\"kw2\">else</span> <span class=\"br0\">{</span> <span\
      \ class=\"co1\">// Actually the same thing, but works!</span>\n  <span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span>\
      \ <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> <span class=\"\
      nu0\">10</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    blargh<span class=\"br0\">(</span>i<span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Stand-alone blocks, i.e. statements grouped\
      \ in <b>{ }</b>, are not allowed in UnrealScript.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Special_Flow_Commands\">Special Flow Commands</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=2\"\
      \ title=\"Edit section: Special Flow Commands\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Return_expression\"\
      >Return <i>expression</i></span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=3\"\
      \ title=\"Edit section: Return expression\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The <i>return</i> keyword terminates execution of\
      \ the function in which it appears and returns control (and the value of <i>expression</i>\
      \ if given) to the calling function or state.</p>\n<p>If the function returns\
      \ a certain type of value the return value has to be specified in the <i>return</i>\
      \ command. If a function with a return value ends without <i>return</i> it will\
      \ return a null value for its data type. (e.g. <code>0</code>, empty string,\
      \ <code>None</code>, etc.)</p>\n<h3><span class=\"mw-headline\" id=\"Break\"\
      >Break</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Flow_Syntax?section=4\" title=\"Edit section:\
      \ Break\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The <i>break</i> keyword terminates the smallest enclosing <i>do</i>, <i>for</i>,\
      \ <i>foreach</i>, <i>switch</i> or <i>while</i> statement in which it appears.\
      \ Code execution continues with the next line of code after the loop.</p>\n\
      <p>Example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">for</span> <span class=\"br0\">(</span> Inv<span class=\"sy0\">=</span><span\
      \ class=\"kw9\">Pawn</span>.<span class=\"kw9\">Inventory</span>; Inv<span class=\"\
      sy0\">!=</span><span class=\"kw5\">None</span>; Inv<span class=\"sy0\">=</span>Inv.<span\
      \ class=\"kw9\">Inventory</span> <span class=\"br0\">)</span> <span class=\"\
      co1\">//Iterating through the inventory list</span>\n<span class=\"br0\">{</span>\n\
      \      <span class=\"kw2\">if</span><span class=\"br0\">(</span> Inv <span class=\"\
      sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ Inv.<span class=\"me0\">InventoryGroup</span> <span class=\"sy0\">==</span>\
      \ <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"\
      >//If there is an inventory item in Group 1 then...</span>\n      <span class=\"\
      br0\">{</span>\n         <span class=\"co1\">//Destroy that item.  That item\
      \ will become 'None' after that, and will</span>\n         <span class=\"co1\"\
      >//Magically create an 'Accessed None' Error</span>\n         Inv.<span class=\"\
      kw4\">Destroy</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \t <span class=\"kw2\">break</span>;  <span class=\"co1\">//To crush that Accessed\
      \ none error, you must 'break'</span>\n      <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Unlike some other languages\
      \ (e.g. Java or Perl) UnrealScript does <b>not</b> support the <tt>break <i>label</i>;</tt>\
      \ syntax to break the loop with the specified label.</p>\n<h3><span class=\"\
      mw-headline\" id=\"Continue\">Continue</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=5\"\
      \ title=\"Edit section: Continue\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The continue keyword passes control to the next iteration\
      \ of the smallest enclosing <i>do</i>, <i>for</i>, <i>foreach</i> or <i>while</i>\
      \ statement in which it appears.</p>\n<p>Example:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">While</span> <span class=\"br0\">(</span>i\
      \ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> i <span class=\"sy0\">%</span> <span class=\"\
      nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span\
      \ class=\"br0\">)</span>\n        <span class=\"kw2\">Continue</span>;\n   \
      \ <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Unlike\
      \ some other languages (e.g. Java or Perl) UnrealScript does <b>not</b> support\
      \ the <tt>continue <i>label</i>;</tt> syntax to skip to the next iteration of\
      \ the loop with the specified label.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Stop\">Stop</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Flow_Syntax?section=6\" title=\"Edit section:\
      \ Stop\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Imediately stops execution of <a href=\"/Legacy:State\" title=\"Legacy:State\"\
      >State</a> code. This is like the <i>return</i> command for states.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Assert_.28expression.29\">Assert (<i>expression</i>)</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Flow_Syntax?section=7\" title=\"Edit section: Assert (expression)\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>If\
      \ the expression passed to <i>Assert</i> evaluates to <tt>False</tt>, the game\
      \ shuts down with an error message telling you the file (class) and the line\
      \ the <i>Assert</i> call is in.</p>\n<p>Example:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">Assert</span><span class=\"br0\">(</span>numPlayers\
      \ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"\
      br0\">)</span>;</pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"GoTo_.28label.29\"\
      >GoTo (<i>label</i>)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Flow_Syntax?section=8\" title=\"Edit section:\
      \ GoTo (label)\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Continues code execution at the specified label. <i>GoTo</i> is mainly used\
      \ in state code, but is also allowed within functions, although it is rarely\
      \ used there. For state flow there's also GotoState( Statename, label): see\
      \ <a href=\"/Legacy:State\" title=\"Legacy:State\">state</a> for more on this.</p>\n\
      <p>Syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\">GoTo<span class=\"\
      br0\">(</span><span class=\"st0\">'label'</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>Example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">State</span> Idle\n<span class=\"br0\">{</span>\n<span class=\"kw2\">Begin</span>:\n\
      \    PlayIdleAnim<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw4\">FinishAnim</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw4\">Sleep</span><span class=\"\
      br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>;\n\
      \    GoTo<span class=\"br0\">(</span><span class=\"st0\">'Begin'</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>In UT2004 case the goto syntax varies. In function code the parentheses are\
      \ invalid, apostrophes are optional. In state code the parentheses are optional,\
      \ apostrophes are required. Therefore the syntax that's valid in both types\
      \ of code is:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">GoTo <span class=\"\
      st0\">'label'</span>;</pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"\
      If_Statements\">If Statements</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=9\"\
      \ title=\"Edit section: If Statements\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>If</i> statements execute some code if a certain\
      \ condition is true. The optional <i>Else</i> part executes some other code\
      \ if the condition is false. Multiple <i>If...Else</i> statements can be combined\
      \ to create <i>If...ElseIf...Else</i> statements.</p>\n<p>Syntax:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">// single line if:</span>\n\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> condition <span class=\"\
      br0\">)</span>\n   <span class=\"co1\">// statement</span>\n \n<span class=\"\
      co1\">// simple block if:</span>\n<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span> condition <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \   ...\n<span class=\"br0\">}</span>\n<span class=\"co1\">// if...else:</span>\n\
      <span class=\"kw2\">if</span> <span class=\"br0\">(</span> condition <span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n   ...\n<span class=\"br0\">}</span>\n\
      <span class=\"kw2\">else</span> <span class=\"br0\">{</span>\n   ...\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>Example:</p>\n<p>(The second\
      \ <i>If</i> is the command executed if the first condition is false.)</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">If</span> <span\
      \ class=\"br0\">(</span> <span class=\"kw9\">Pawn</span><span class=\"br0\"\
      >(</span><span class=\"kw7\">Owner</span><span class=\"br0\">)</span> <span\
      \ class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"sy0\"\
      >&amp;&amp;</span> <span class=\"kw9\">Pawn</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">Owner</span><span class=\"br0\">)</span>.<span class=\"me0\"\
      >bIsPlayer</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \    <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"\
      kw9\">Pawn</span><span class=\"br0\">(</span><span class=\"kw7\">Owner</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">PlayerReplicationInfo</span>.<span\
      \ class=\"me0\">PlayerName</span><span class=\"br0\">)</span>;\n    <span class=\"\
      kw9\">Pawn</span><span class=\"br0\">(</span><span class=\"kw7\">Owner</span><span\
      \ class=\"br0\">)</span>.<span class=\"me0\">PlayerReplicationInfo</span>.<span\
      \ class=\"me0\">Score</span> <span class=\"sy0\">+=</span> <span class=\"nu0\"\
      >2</span>;\n<span class=\"br0\">}</span>\n<span class=\"kw2\">Else</span> <span\
      \ class=\"kw2\">If</span> <span class=\"br0\">(</span> <span class=\"kw9\">Pawn</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">Owner</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span\
      \ class=\"br0\">)</span>\n    <span class=\"kw7\">Owner</span>.<span class=\"\
      kw4\">Destroy</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"kw2\">Else</span>\n    <span class=\"kw3\">log</span><span class=\"\
      br0\">(</span><span class=\"st0\">\"No Pawn.\"</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Switch_Statements\">Switch Statements</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Flow_Syntax?section=10\" title=\"Edit section: Switch\
      \ Statements\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><i>Switch</i> statements can be used to check if a certain expression is\
      \ set to one of several values.</p>\n<p>Syntax:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">Switch</span> <span class=\"br0\">(</span>\
      \ expression <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n<span\
      \ class=\"kw2\">Case</span> value1:\n    ...\n    <span class=\"kw2\">break</span>;\n\
      <span class=\"kw2\">Case</span> value2:\n<span class=\"kw2\">Case</span> value3:\n\
      \    ...\n    <span class=\"kw2\">break</span>;\n<span class=\"kw1\">Default</span>:\n\
      \    ...\n    <span class=\"kw2\">break</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>In this example a variable <i>i</i> is checked. If its value is 1\
      \ the DoSomething function is called and code execution continues below the\
      \ <i>Switch</i> statement. If its value is 2 or 3 both DoSomethingElse and DoSomethingMore\
      \ are called and the current function is canceled (due to the <i>return</i>\
      \ command). If the value of <i>i</i> is 4 only the DoSomethingMore function\
      \ is called and the current function is canceled. If <i>i</i> has a different\
      \ value the DoNothingSpecial function is called and code execution continues\
      \ below the <i>Switch</i> statement.</p>\n<p>Note that without a break; or return;\
      \ at the end of a case, execution will simply fall through to the next case's\
      \ statements.</p>\n<p>Example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw2\">Switch</span> <span class=\"br0\">(</span>i<span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n<span class=\"kw2\">Case</span>\
      \ <span class=\"nu0\">1</span>:\n    DoSomething<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">break</span>;\n<span class=\"\
      kw2\">Case</span> <span class=\"nu0\">2</span>:\n<span class=\"kw2\">Case</span>\
      \ <span class=\"nu0\">3</span>:\n    DoSomethingElse<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"kw2\">Case</span> <span class=\"nu0\"\
      >4</span>:\n    DoSomethingMore<span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n    <span class=\"kw2\">return</span>;\n<span class=\"kw1\">Default</span>:\n\
      \    DoNothingSpecial<span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \    <span class=\"kw2\">break</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"While_Loops\">While Loops</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Flow_Syntax?section=11\" title=\"Edit section: While Loops\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><i>While</i>\
      \ loops are executed as long as the condition stays true. If the condition is\
      \ false before the loop starts, the whole <i>While</i> loop is not executed.</p>\n\
      <p>Syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\"\
      >While</span> <span class=\"br0\">(</span> condition <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Note:</b> Due to a compiler bug it is possible to append an <i>Until(...);</i>\
      \ clause to a <i>While</i> loop, effectively turning it into a loop with two\
      \ conditions – one executed before and one after each iteration. Please don't\
      \ use this \"feature\" though, it might be removed in the future.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"For_Loops\">For Loops</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=12\"\
      \ title=\"Edit section: For Loops\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>For</i> loops can be used similar to <i>While</i>\
      \ loops. The <i>InitialCommand</i> is executed before the first loop cycle starts,\
      \ <i>LoopCondition</i> is checked before each (including the first) loop cycle\
      \ and <i>UpdateCommand</i> is executed at the end of every loop cycle. The <i>For</i>\
      \ loop is executed as long as the condition stays true, but it will not be executed\
      \ at all if the condition initially is false.</p>\n<p>Syntax:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">For</span> <span class=\"br0\">(</span>\
      \ InitialCommand; LoopCondition; UpdateCommand <span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Unlike other languages, UnrealScript does <b>not</b> accept multiple\
      \ statements as <i>InitialCommand</i> or <i>UpdateCommand</i>. Additional initial\
      \ commands must be added above the loop. Attempting to use multiple update commands\
      \ can become very tricky if you want to use the <b>Continue</b> statement, but\
      \ if you don't need <b>Continue</b> you can just add the additional update commands\
      \ as the last statements of the <b>For</b> statement block.</p>\n<p>Also unlike\
      \ other languages, UnrealScript does not allow empty statements as <i>InitialCommand</i>,\
      \ <i>LoopCondition</i> or <i>UpdateCommand</i>. Consider using a <b>While</b>\
      \ loop instead if you don't need initial <i>InitialCommand</i> or <i>UpdateCommand</i>.</p>\n\
      <p><i>For</i> loops can be used to make simple loops with a counter or to iterate\
      \ through a linked list.</p>\n<p>Examples:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw2\">For</span> <span class=\"br0\">(</span>i <span class=\"\
      sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span>\
      \ <span class=\"nu0\">10</span>; i<span class=\"sy0\">++</span><span class=\"\
      br0\">)</span> <span class=\"br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>The above example will execute for i = 0, 1, ... 9. The endgame scenario\
      \ is:</p>\n<ul>\n<li>execute loop for 9</li>\n<li>increment i to 10</li>\n<li>start\
      \ from the top: check i and it fails the condition; so move on.</li>\n</ul>\n\
      <p>The following example loops through all <a href=\"/Legacy:Pawn_(UT)\" title=\"\
      Legacy:Pawn (UT)\">Pawns</a> in the level: (works only server-side)</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\">For</span> <span\
      \ class=\"br0\">(</span>P <span class=\"sy0\">=</span> <span class=\"kw7\">Level</span>.<span\
      \ class=\"me0\">PawnList</span>; P <span class=\"sy0\">!=</span> <span class=\"\
      kw5\">None</span>; P <span class=\"sy0\">=</span> P.<span class=\"me0\">NextPawn</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n    ...\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>If you were to rewrite a For loop only\
      \ with If and GoTo statements, it would probably look similar to this:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\">InitialCommand;\nbeginloop:\n<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span>LoopCondition<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n \n  <span class=\"coMULTI\">/* loop\
      \ code block */</span>\n \ncontinuetarget: <span class=\"co1\">// this is where\
      \ a 'continue' statement would jump to</span>\n  UpdateCommand;\n  goto <span\
      \ class=\"st0\">'beginloop'</span>;\n<span class=\"br0\">}</span>\nbreaktarget:\
      \ <span class=\"co1\">// this is where a 'break' statement would jump to</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Do...Until_Loops\">Do...Until Loops</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Flow_Syntax?section=13\" title=\"Edit section: Do...Until\
      \ Loops\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><i>Do...Until</i> loops are always executed at least once. The loop stops\
      \ if the condition becomes true.</p>\n<p>Syntax:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">Do</span> <span class=\"br0\">{</span>\n\
      \    ...\n<span class=\"br0\">}</span> Until <span class=\"br0\">(</span> condition\
      \ <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>Example:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">Do</span> <span class=\"br0\">{</span>\n\
      \    <span class=\"kw3\">log</span><span class=\"br0\">(</span>i<span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span> Until <span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">++</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\"\
      >10</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p><b>Note:</b>\
      \ Due to a compiler bug you can leave out the <b>Until</b> clause, effectively\
      \ turning this into an infinite loop. It is not recommended to use this \"feature\"\
      \ since it will probably be fixed in the future, but if you do you will have\
      \ to add a <b>Break</b> or <b>Return</b> somewhere in the loop.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"ForEach_Loops\">ForEach Loops</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=14\"\
      \ title=\"Edit section: ForEach Loops\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><i>ForEach</i> uses an <a href=\"/Legacy:Iterator\"\
      \ title=\"Legacy:Iterator\">iterator</a> function to loop through a list of\
      \ actors.</p>\n<p>Syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">ForEach</span> IteratorFunction<span class=\"br0\">(</span>BaseActorClass,\
      \ IteratorVariable, IteratorParameters<span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p><i>IteratorFunction</i> must be a valid reference to a native function with\
      \ the <code>iterator</code> <a href=\"/Legacy:Function_Syntax\" title=\"Legacy:Function\
      \ Syntax\">specifier</a>.</p>\n<p>The first example iterates through all HUD\
      \ actors in the map.<br />\nThe second one iterates through all projectiles,\
      \ which are in the same zone like the actor calling the <i>ForEach</i> loop.</p>\n\
      <p>Examples:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">ForEach</span> <span class=\"kw2\">AllActors</span><span class=\"br0\"\
      >(</span><span class=\"kw1\">class</span><span class=\"st0\">'HUD'</span>, H<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    ...\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw2\">ForEach</span> Region.<span class=\"me0\">Zone</span>.<span\
      \ class=\"me0\">ZoneActors</span><span class=\"br0\">(</span><span class=\"\
      kw1\">class</span><span class=\"st0\">'Projectile'</span>, P<span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    ...\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p><b>Note:</b> If you access the iterator function through an object\
      \ reference, make absolutely sure the reference is valid, becasue this is the\
      \ only place where accessing <tt>None</tt> will not generate a warning but actually\
      \ crash the game.</p>\n<p>Another example for using <i>ForEach</i>:</p>\n<p>RadiusActors\
      \ - <i>argument 1</i> actors (stored in <i>argument 2</i> variable) which are\
      \ in the <i>argument 3</i> radius of the calling actor.</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw2\">ForEach</span> <span class=\"kw2\"\
      >RadiusActors</span><span class=\"br0\">(</span><span class=\"kw1\">class</span><span\
      \ class=\"st0\">'Projectile'</span>, P, <span class=\"nu0\">128</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n    ...\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\" id=\"Discussion\"\
      >Discussion</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Flow_Syntax?section=15\" title=\"Edit section:\
      \ Discussion\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p><b>EricBlade:</b> I've never seen the 'stop' keyword. Does that return the\
      \ object to it's default state (auto state, or no state)? Or does it remain\
      \ in that state, with no state code running?</p>\n<p><b>Wormbo:</b> 'Stop' simply\
      \ halts state code execution without changing states. There's actually an implicit\
      \ 'Stop' after the last code statement in every state that contains state code.</p>\n\
      <p><b>Sweavo:</b> <a href=\"/Legacy:UnrealScript_Language_Reference/Program_Structure\"\
      \ title=\"Legacy:UnrealScript Language Reference/Program Structure\">UnrealScript\
      \ Language Reference/Program Structure</a> covers much of this material and\
      \ it much prettier. I'm inclined to remove the subjects from here that are covered\
      \ there then see what's left and refocus the page...?</p>\n<p><b>Wormbo:</b>\
      \ <a href=\"/Legacy:UnrealScript_Language_Reference\" title=\"Legacy:UnrealScript\
      \ Language Reference\">UnrealScript Language Reference</a> is only a copy of\
      \ an Epic Games document that we are allowed to host here but not modify. This\
      \ page here is our own description of these language constructs and it's much\
      \ easier to link to from other pages.</p>\n<p><b>Kartoshka:</b> Just before\
      \ the \"Special Flow Commands\" section there is a partial sentence \"Statement\
      \ blocks of\". Is that just something that got left in one edit, or left out?\
      \ I have no idea if it was important anyway...</p>\n<p><b>Wormbo:</b> I don't\
      \ know what I wanted to write there. Removed it.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Flow_Syntax?section=16\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a>\n<ul>\n<li><a href=\"/Legacy:Special_UnrealScript_Keywords\"\
      \ title=\"Legacy:Special UnrealScript Keywords\">Special UnrealScript Keywords</a></li>\n\
      <li><a href=\"/Legacy:Iterator\" title=\"Legacy:Iterator\">Iterator</a></li>\n\
      <li><a href=\"/Legacy:State\" title=\"Legacy:State\">State</a></li>\n</ul>\n\
      </li>\n<li><a href=\"/Legacy:UnrealScript_Language_Reference/Program_Structure\"\
      \ title=\"Legacy:UnrealScript Language Reference/Program Structure\">UnrealScript\
      \ Language Reference/Program Structure</a></li>\n</ul>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.405 seconds\nReal time usage: 0.427 seconds\nPreprocessor\
      \ visited node count: 279/1000000\nPreprocessor generated node count: 550/1000000\n\
      Post‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1225-0!*!0!!en!*!*\
      \ and timestamp 20221118021844 and revision id 3165\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Pawn (UT)"
  - ns: 100
    exists: true
    name: "Legacy:Iterator"
  - ns: 100
    exists: true
    name: "Legacy:Special UnrealScript Keywords"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference/Program Structure"
  - ns: 100
    exists: true
    name: "Legacy:State"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript Language Reference"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Basics"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 0
    anchor: "Basics"
  - toclevel: 1
    level: "2"
    line: "Special Flow Commands"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 1263
    anchor: "Special_Flow_Commands"
  - toclevel: 2
    level: "3"
    line: "Return <i>expression</i>"
    number: "2.1"
    index: "3"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 1291
    anchor: "Return_expression"
  - toclevel: 2
    level: "3"
    line: "Break"
    number: "2.2"
    index: "4"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 1778
    anchor: "Break"
  - toclevel: 2
    level: "3"
    line: "Continue"
    number: "2.3"
    index: "5"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 2639
    anchor: "Continue"
  - toclevel: 2
    level: "3"
    line: "Stop"
    number: "2.4"
    index: "6"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 3110
    anchor: "Stop"
  - toclevel: 2
    level: "3"
    line: "Assert (<i>expression</i>)"
    number: "2.5"
    index: "7"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 3231
    anchor: "Assert_.28expression.29"
  - toclevel: 1
    level: "2"
    line: "GoTo (<i>label</i>)"
    number: "3"
    index: "8"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 3499
    anchor: "GoTo_.28label.29"
  - toclevel: 1
    level: "2"
    line: "If Statements"
    number: "4"
    index: "9"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 4231
    anchor: "If_Statements"
  - toclevel: 1
    level: "2"
    line: "Switch Statements"
    number: "5"
    index: "10"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 5033
    anchor: "Switch_Statements"
  - toclevel: 1
    level: "2"
    line: "While Loops"
    number: "6"
    index: "11"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 6203
    anchor: "While_Loops"
  - toclevel: 1
    level: "2"
    line: "For Loops"
    number: "7"
    index: "12"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 6737
    anchor: "For_Loops"
  - toclevel: 1
    level: "2"
    line: "Do...Until Loops"
    number: "8"
    index: "13"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 8871
    anchor: "Do...Until_Loops"
  - toclevel: 1
    level: "2"
    line: "ForEach Loops"
    number: "9"
    index: "14"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 9437
    anchor: "ForEach_Loops"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "10"
    index: "15"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 10661
    anchor: "Discussion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "11"
    index: "16"
    fromtitle: "Legacy:Flow_Syntax"
    byteoffset: 11944
    anchor: "Related_Topics"
  displaytitle: "Legacy:Flow Syntax"
  iwlinks: []
  wikitext:
    text: "==Basics ==\n\nThere are two basic flow control functions in [[Legacy:UnrealScript|UnrealScript]],\
      \ ''GoTo'' and ''If...Else''.\n\nAny other functions and loops described here\
      \ (except ''ForEach'') could be replaced by combinations of these two functions\
      \ (In fact, that happens in UnrealScript byte code for ''While'', ''For'' and\
      \ ''Do...Until'' loops.), but it's considered bad coding practise to actually\
      \ do so.\n\nIf a loop, ''If'' or ''Else'' contains only one line of code the\
      \ '''{ }''' are optional. A single loop, ''If'' or ''Switch'' statement is treated\
      \ as one command in this context.\n\nExample:\n\n<uscript>\nIf ( bExecute )\n\
      \    For (i = 0; i < 5; i++) {\n        a += i;\n        b *= i;\n    }\n</uscript>\n\
      \n'''Note:''' Due to a compiler bug it is not possible to use a loop (<tt>for</tt>,\
      \ <tt>while</tt>, ...) as the statement in a simple <tt>else</tt> statement.\n\
      \n<uscript>\nif (foo)\n  bar();\nelse // Doesn't work, compiler error!\n  for\
      \ (i = 0; i < 10; i++) {\n    blargh(i);\n  }\n</uscript>\n\nYou have to use\
      \ a \"block-else\" instead, i.e.:\n\n<uscript>\nif (foo)\n  bar();\nelse { //\
      \ Actually the same thing, but works!\n  for (i = 0; i < 10; i++) {\n    blargh(i);\n\
      \  }\n}\n</uscript>\n\nStand-alone blocks, i.e. statements grouped in '''{ }''',\
      \ are not allowed in UnrealScript.\n\n==Special Flow Commands ==\n\n===Return\
      \ ''expression'' ===\n\nThe ''return'' keyword terminates execution of the function\
      \ in which it appears and returns control (and the value of ''expression'' if\
      \ given) to the calling function or state.\n\nIf the function returns a certain\
      \ type of value the return value has to be specified in the ''return'' command.\
      \ If a function with a return value ends without ''return'' it will return a\
      \ null value for its data type. (e.g. <code>0</code>, empty string, <code>None</code>,\
      \ etc.)\n\n===Break ===\n\nThe ''break'' keyword terminates the smallest enclosing\
      \ ''do'', ''for'', ''foreach'', ''switch'' or ''while'' statement in which it\
      \ appears. Code execution continues with the next line of code after the loop.\n\
      \nExample:\n\n<uscript>\nfor ( Inv=Pawn.Inventory; Inv!=None; Inv=Inv.Inventory\
      \ ) //Iterating through the inventory list\n{\n      if( Inv != None && Inv.InventoryGroup\
      \ == 1) //If there is an inventory item in Group 1 then...\n      {\n      \
      \   //Destroy that item.  That item will become 'None' after that, and will\n\
      \         //Magically create an 'Accessed None' Error\n         Inv.Destroy();\n\
      \t break;  //To crush that Accessed none error, you must 'break'\n      }\n\
      }\n</uscript>\n\nUnlike some other languages (e.g. Java or Perl) UnrealScript\
      \ does '''not''' support the <tt>break ''label'';</tt> syntax to break the loop\
      \ with the specified label.\n\n===Continue ===\n\nThe continue keyword passes\
      \ control to the next iteration of the smallest enclosing ''do'', ''for'', ''foreach''\
      \ or ''while'' statement in which it appears.\n\nExample:\n\n<uscript>\nWhile\
      \ (i < 10) {\n    if ( i % 2 == 0 )\n        Continue;\n    log(i);\n}\n</uscript>\n\
      \nUnlike some other languages (e.g. Java or Perl) UnrealScript does '''not'''\
      \ support the <tt>continue ''label'';</tt> syntax to skip to the next iteration\
      \ of the loop with the specified label.\n\n===Stop ===\n\nImediately stops execution\
      \ of [[Legacy:State|State]] code. This is like the ''return'' command for states.\n\
      \n===Assert (''expression'') ===\n\nIf the expression passed to ''Assert'' evaluates\
      \ to <tt>False</tt>, the game shuts down with an error message telling you the\
      \ file (class) and the line the ''Assert'' call is in.\n\nExample:\n\n<uscript>\n\
      Assert(numPlayers > 0);\n</uscript>\n\n==GoTo (''label'') ==\n\nContinues code\
      \ execution at the specified label. ''GoTo'' is mainly used in state code, but\
      \ is also allowed within functions, although it is rarely used there. For state\
      \ flow there's also GotoState( Statename, label): see [[Legacy:State|state]]\
      \ for more on this.\n\nSyntax:\n\n<uscript>GoTo('label');</uscript>\n\nExample:\n\
      \n<uscript>\nState Idle\n{\nBegin:\n    PlayIdleAnim();\n    FinishAnim();\n\
      \    Sleep(0.5);\n    GoTo('Begin');\n}\n</uscript>\n\nIn UT2004 case the goto\
      \ syntax varies. In function code the parentheses are invalid, apostrophes are\
      \ optional. In state code the parentheses are optional, apostrophes are required.\
      \ Therefore the syntax that's valid in both types of code is:<uscript>GoTo 'label';</uscript>\n\
      \n==If Statements ==\n\n''If'' statements execute some code if a certain condition\
      \ is true. The optional ''Else'' part executes some other code if the condition\
      \ is false. Multiple ''If...Else'' statements can be combined to create ''If...ElseIf...Else''\
      \ statements.\n\nSyntax:\n\n<uscript>\n// single line if:\nif ( condition )\n\
      \   // statement\n\n// simple block if:\nif ( condition ) {\n   ...\n}\n// if...else:\n\
      if ( condition ) {\n   ...\n}\nelse {\n   ...\n}</uscript>\n\nExample:\n\n(The\
      \ second ''If'' is the command executed if the first condition is false.)\n\n\
      <uscript>\nIf ( Pawn(Owner) != None && Pawn(Owner).bIsPlayer ) {\n    log(Pawn(Owner).PlayerReplicationInfo.PlayerName);\n\
      \    Pawn(Owner).PlayerReplicationInfo.Score += 2;\n}\nElse If ( Pawn(Owner)\
      \ != None )\n    Owner.Destroy();\nElse\n    log(\"No Pawn.\");\n</uscript>\n\
      \n==Switch Statements ==\n\n''Switch'' statements can be used to check if a\
      \ certain expression is set to one of several values.\n\nSyntax:\n\n<uscript>\n\
      Switch ( expression ) {\nCase value1:\n    ...\n    break;\nCase value2:\nCase\
      \ value3:\n    ...\n    break;\nDefault:\n    ...\n    break;\n}</uscript>\n\
      \nIn this example a variable ''i'' is checked. If its value is 1 the DoSomething\
      \ function is called and code execution continues below the ''Switch'' statement.\
      \ If its value is 2 or 3 both DoSomethingElse and DoSomethingMore are called\
      \ and the current function is canceled (due to the ''return'' command). If the\
      \ value of ''i'' is 4 only the DoSomethingMore function is called and the current\
      \ function is canceled. If ''i'' has a different value the DoNothingSpecial\
      \ function is called and code execution continues below the ''Switch'' statement.\n\
      \nNote that without a break; or return; at the end of a case, execution will\
      \ simply fall through to the next case's statements.\n\nExample:\n\n<uscript>\n\
      Switch (i) {\nCase 1:\n    DoSomething();\n    break;\nCase 2:\nCase 3:\n  \
      \  DoSomethingElse();\nCase 4:\n    DoSomethingMore();\n    return;\nDefault:\n\
      \    DoNothingSpecial();\n    break;\n}\n</uscript>\n\n==While Loops ==\n\n\
      ''While'' loops are executed as long as the condition stays true. If the condition\
      \ is false before the loop starts, the whole ''While'' loop is not executed.\n\
      \nSyntax:\n\n<uscript>\nWhile ( condition ) {\n    ...\n}</uscript>\n\n'''Note:'''\
      \ Due to a compiler bug it is possible to append an ''Until(...);'' clause to\
      \ a ''While'' loop, effectively turning it into a loop with two conditions &ndash;\
      \ one executed before and one after each iteration. Please don't use this \"\
      feature\" though, it might be removed in the future.\n\n==For Loops ==\n\n''For''\
      \ loops can be used similar to ''While'' loops. The ''InitialCommand'' is executed\
      \ before the first loop cycle starts, ''LoopCondition'' is checked before each\
      \ (including the first) loop cycle and ''UpdateCommand '' is executed at the\
      \ end of every loop cycle. The ''For'' loop is executed as long as the condition\
      \ stays true, but it will not be executed at all if the condition initially\
      \ is false.\n\nSyntax:\n\n<uscript>\nFor ( InitialCommand; LoopCondition; UpdateCommand\
      \ ) {\n    ...\n}</uscript>\n\nUnlike other languages, UnrealScript does '''not'''\
      \ accept multiple statements as ''InitialCommand'' or ''UpdateCommand''. Additional\
      \ initial commands must be added above the loop. Attempting to use multiple\
      \ update commands can become very tricky if you want to use the '''Continue'''\
      \ statement, but if you don't need '''Continue''' you can just add the additional\
      \ update commands as the last statements of the '''For''' statement block.\n\
      \nAlso unlike other languages, UnrealScript does not allow empty statements\
      \ as ''InitialCommand'', ''LoopCondition'' or ''UpdateCommand''. Consider using\
      \ a '''While''' loop instead if you don't need initial ''InitialCommand'' or\
      \ ''UpdateCommand''.\n\n''For'' loops can be used to make simple loops with\
      \ a counter or to iterate through a linked list.\n\nExamples:\n\n<uscript>\n\
      For (i = 0; i < 10; i++) {\n    ...\n}\n</uscript>\n\nThe above example will\
      \ execute for i = 0, 1, ... 9. The endgame scenario is: \n* execute loop for\
      \ 9\n* increment i to 10\n* start from the top: check i and it fails the condition;\
      \ so move on.\n\nThe following example loops through all [[Legacy:Pawn (UT)|Pawns]]\
      \ in the level: (works only server-side)\n\n<uscript>\nFor (P = Level.PawnList;\
      \ P != None; P = P.NextPawn) {\n\n    ...\n}\n</uscript>\n\nIf you were to rewrite\
      \ a For loop only with If and GoTo statements, it would probably look similar\
      \ to this:\n\n<uscript>\nInitialCommand;\nbeginloop:\nif (LoopCondition) {\n\
      \n  /* loop code block */\n\ncontinuetarget: // this is where a 'continue' statement\
      \ would jump to\n  UpdateCommand;\n  goto 'beginloop';\n}\nbreaktarget: // this\
      \ is where a 'break' statement would jump to\n</uscript>\n\n==Do...Until Loops\
      \ ==\n\n''Do...Until'' loops are always executed at least once. The loop stops\
      \ if the condition becomes true.\n\nSyntax:\n\n<uscript>\nDo {\n    ...\n} Until\
      \ ( condition );\n</uscript>\n\nExample:\n\n<uscript>\nDo {\n    log(i);\n}\
      \ Until (i++ > 10);\n</uscript>\n\n'''Note:''' Due to a compiler bug you can\
      \ leave out the '''Until''' clause, effectively turning this into an infinite\
      \ loop. It is not recommended to use this \"feature\" since it will probably\
      \ be fixed in the future, but if you do you will have to add a '''Break''' or\
      \ '''Return''' somewhere in the loop.\n\n==ForEach Loops ==\n\n''ForEach'' uses\
      \ an [[Legacy:Iterator|iterator]] function to loop through a list of actors.\n\
      \nSyntax:\n\n<uscript>\nForEach IteratorFunction(BaseActorClass, IteratorVariable,\
      \ IteratorParameters) {\n    ...\n}</uscript>\n\n''IteratorFunction'' must be\
      \ a valid reference to a native function with the <code>iterator</code> [[Legacy:Function\
      \ Syntax|specifier]].\n\nThe first example iterates through all HUD actors in\
      \ the map.<br />The second one iterates through all projectiles, which are in\
      \ the same zone like the actor calling the ''ForEach'' loop.\n\nExamples:\n\n\
      <uscript>\nForEach AllActors(class'HUD', H) {\n    ...\n}\n</uscript>\n\n<uscript>\n\
      ForEach Region.Zone.ZoneActors(class'Projectile', P) {\n    ...\n}\n</uscript>\n\
      \n'''Note:''' If you access the iterator function through an object reference,\
      \ make absolutely sure the reference is valid, becasue this is the only place\
      \ where accessing <tt>None</tt> will not generate a warning but actually crash\
      \ the game.\n\nAnother example for using ''ForEach'':\n\nRadiusActors - ''argument\
      \ 1'' actors (stored in ''argument 2'' variable) which are in the ''argument\
      \ 3'' radius of the calling actor.\n\n<uscript>\nForEach RadiusActors(class'Projectile',\
      \ P, 128) {\n    ...\n}\n</uscript>\n\n==Discussion ==\n\n'''EricBlade:''' I've\
      \ never seen the 'stop' keyword.  Does that return the object to it's default\
      \ state (auto state, or no state)? Or does it remain in that state, with no\
      \ state code running?\n\n'''Wormbo:''' 'Stop' simply halts state code execution\
      \ without changing states. There's actually an implicit 'Stop' after the last\
      \ code statement in every state that contains state code.\n\n'''Sweavo:''' [[Legacy:UnrealScript\
      \ Language Reference/Program Structure|UnrealScript Language Reference/Program\
      \ Structure]] covers much of this material and it much prettier.  I'm inclined\
      \ to remove the subjects from here that are covered there then see what's left\
      \ and refocus the page...?\n\n'''Wormbo:''' [[Legacy:UnrealScript Language Reference|UnrealScript\
      \ Language Reference]] is only a copy of an Epic Games document that we are\
      \ allowed to host here but not modify. This page here is our own description\
      \ of these language constructs and it's much easier to link to from other pages.\n\
      \n'''Kartoshka:''' Just before the \"Special Flow Commands\" section there is\
      \ a partial sentence \"Statement blocks of\". Is that just something that got\
      \ left in one edit, or left out? I have no idea if it was important anyway...\n\
      \n'''Wormbo:''' I don't know what I wanted to write there. Removed it.\n\n==Related\
      \ Topics ==\n* [[Legacy:UnrealScript|UnrealScript]]\n** [[Legacy:Special UnrealScript\
      \ Keywords|Special UnrealScript Keywords]]\n** [[Legacy:Iterator|Iterator]]\n\
      ** [[Legacy:State|State]]\n* [[Legacy:UnrealScript Language Reference/Program\
      \ Structure|UnrealScript Language Reference/Program Structure]]"
  properties: []
  revId: 3165
name: "Legacy:Flow Syntax"
revision:
  revid: 3165
  parentid: 3167
  user: "Wormbo"
  timestamp: 1153205829.000000000
  comment: "reverted"
timestamp: 1668763494.508107000
