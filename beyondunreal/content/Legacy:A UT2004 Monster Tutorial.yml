---
parse:
  title: "Legacy:A UT2004 Monster Tutorial"
  text:
    text: "<p><i><b>This page is under contruction.</b></i></p>\n<p>This tutorial\
      \ is meant to demonstrate the basics needed to implement <a href=\"/Legacy:Monster\"\
      \ title=\"Legacy:Monster\">Monster</a> class characters within a UT2004 environment.\
      \ The Monster is a specific class introduced in UT2004 for the <a href=\"/Legacy:Invasion\"\
      \ title=\"Legacy:Invasion\">Invasion</a> gametype. For a tutorial on using UT\
      \ Monsters, a subclass of <a href=\"/Legacy:ScriptedPawn\" title=\"Legacy:ScriptedPawn\"\
      >ScriptedPawn</a>, see <a href=\"/Legacy:Basic_ScriptedPawn_Tutorial\" title=\"\
      Legacy:Basic ScriptedPawn Tutorial\">Basic ScriptedPawn Tutorial</a>.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Prerequisites\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Prerequisites</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Overview\"><span class=\"tocnumber\"\
      >2</span> <span class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#ScriptedSequence\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">ScriptedSequence</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-4\"><a href=\"#The_Dummy_Pawn\"><span class=\"tocnumber\">4</span>\
      \ <span class=\"toctext\">The Dummy Pawn</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-5\"><a href=\"#Useful_Stock_ACTIONs\"><span class=\"tocnumber\"\
      >5</span> <span class=\"toctext\">Useful Stock ACTIONs</span></a>\n<ul>\n<li\
      \ class=\"toclevel-2 tocsection-6\"><a href=\"#ACTION_SpawnActor\"><span class=\"\
      tocnumber\">5.1</span> <span class=\"toctext\">ACTION_SpawnActor</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#ACTION_MoveToPoint\"><span\
      \ class=\"tocnumber\">5.2</span> <span class=\"toctext\">ACTION_MoveToPoint</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#ACTION_PlayAnim\"><span class=\"\
      tocnumber\">5.3</span> <span class=\"toctext\">ACTION_PlayAnim</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-9\"><a href=\"#ACTION_PlaySound\"><span class=\"\
      tocnumber\">5.4</span> <span class=\"toctext\">ACTION_PlaySound</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#ACTION_IfCondition\"><span\
      \ class=\"tocnumber\">5.5</span> <span class=\"toctext\">ACTION_IfCondition</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#ACTION_IfRandomPct\"><span\
      \ class=\"tocnumber\">5.6</span> <span class=\"toctext\">ACTION_IfRandomPct</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-12\"><a href=\"#ACTION_EndSection\"><span\
      \ class=\"tocnumber\">5.7</span> <span class=\"toctext\">ACTION_EndSection</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-13\"><a href=\"#ACTION_GotoAction\"><span\
      \ class=\"tocnumber\">5.8</span> <span class=\"toctext\">ACTION_GotoAction</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-14\"><a href=\"#ACTION_TriggerEvent\"><span\
      \ class=\"tocnumber\">5.9</span> <span class=\"toctext\">ACTION_TriggerEvent</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-15\"><a href=\"#ACTION_WaitForEvent\"><span\
      \ class=\"tocnumber\">5.10</span> <span class=\"toctext\">ACTION_WaitForEvent</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-16\"><a href=\"#ACTION_WaitForTimer\"><span\
      \ class=\"tocnumber\">5.11</span> <span class=\"toctext\">ACTION_WaitForTimer</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-17\"><a href=\"#ACTION_DestroyActor\"><span\
      \ class=\"tocnumber\">5.12</span> <span class=\"toctext\">ACTION_DestroyActor</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-18\"><a href=\"#ACTION_ChangeScript\"><span\
      \ class=\"tocnumber\">5.13</span> <span class=\"toctext\">ACTION_ChangeScript</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-19\"><a href=\"#Custom_ACTIONs\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Custom ACTIONs</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-20\"><a href=\"#ACTION_SpawnMonster\"\
      ><span class=\"tocnumber\">6.1</span> <span class=\"toctext\">ACTION_SpawnMonster</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-21\"><a href=\"#ACTION_Monsterize\"><span\
      \ class=\"tocnumber\">6.2</span> <span class=\"toctext\">ACTION_Monsterize</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-22\"><a href=\"#ACTION_PossessPawn\"><span\
      \ class=\"tocnumber\">6.3</span> <span class=\"toctext\">ACTION_PossessPawn</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-23\"><a href=\"#ACTION_IfMonsterHasEnemy\"\
      ><span class=\"tocnumber\">6.4</span> <span class=\"toctext\">ACTION_IfMonsterHasEnemy</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-24\"><a href=\"#ACTION_IfMonsterSeesEnemy\"\
      ><span class=\"tocnumber\">6.5</span> <span class=\"toctext\">ACTION_IfMonsterSeesEnemy</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-25\"><a href=\"#ACTION_IfMonsterIsHurt\"><span\
      \ class=\"tocnumber\">6.6</span> <span class=\"toctext\">ACTION_IfMonsterIsHurt</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-26\"><a href=\"#ACTION_HealPawn\"><span class=\"\
      tocnumber\">6.7</span> <span class=\"toctext\">ACTION_HealPawn</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-27\"><a href=\"#Further_Development\"\
      ><span class=\"tocnumber\">7</span> <span class=\"toctext\">Further Development</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-28\"><a href=\"#ACTION_myCustomAction\"\
      ><span class=\"tocnumber\">7.1</span> <span class=\"toctext\">ACTION_myCustomAction</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-29\"><a href=\"#Monster_Tutorial\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">Monster Tutorial</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-30\"><a href=\"#MonsterFactory\"><span\
      \ class=\"tocnumber\">8.1</span> <span class=\"toctext\">MonsterFactory</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-31\"><a href=\"#Patrolling\"><span class=\"\
      tocnumber\">8.2</span> <span class=\"toctext\">Patrolling</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-32\"><a href=\"#Guarding_An_Item\"><span class=\"\
      tocnumber\">8.3</span> <span class=\"toctext\">Guarding An Item</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-33\"><a href=\"#Healing\"><span class=\"tocnumber\"\
      >8.4</span> <span class=\"toctext\">Healing</span></a></li>\n</ul>\n</li>\n\
      <li class=\"toclevel-1 tocsection-34\"><a href=\"#External_Links\"><span class=\"\
      tocnumber\">9</span> <span class=\"toctext\">External Links</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-35\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">10</span> <span class=\"toctext\">Related Topics</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-36\"><a href=\"#Custom_Content\"><span class=\"\
      tocnumber\">10.1</span> <span class=\"toctext\">Custom Content</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-37\"><a href=\"#Discussion\"\
      ><span class=\"tocnumber\">11</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Prerequisites\"\
      >Prerequisites</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=1\" title=\"\
      Edit section: Prerequisites\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This tutorial assumes you know how to <a href=\"/Legacy:Create_A_Subclass\"\
      \ title=\"Legacy:Create A Subclass\">Create A Subclass</a>.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Overview\">Overview</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=2\"\
      \ title=\"Edit section: Overview\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>By default, Monsters in UT2004 use a <a href=\"/Legacy:MonsterController\"\
      \ title=\"Legacy:MonsterController\">MonsterController</a> that implements a\
      \ complex set of behaviors to hunt down and attack players. This is specifically\
      \ designed for the Invasion gametype, where Monsters are spawned at random <a\
      \ href=\"/Legacy:NavigationPoint\" title=\"Legacy:NavigationPoint\">NavigationPoints</a>\
      \ around the map and attack the players in increasingly aggressive waves.</p>\n\
      <p>However, for other gametypes this default behavior may not be desirable to\
      \ the mapper. As an example, placing UT2004 Monsters in a map designed for a\
      \ TeamGame will result in a team imbalance, where the UnrealPawn PostNetBeginPlay()\
      \ function attempts (and eventually fails) to place the Monster in an xTeamRoster.\
      \ <i>(RedTeam's Size is incremented although there's no valid player added and\
      \ extra BlueTeam memebers are the result)</i></p>\n<p>In cases where the mapper\
      \ would like to get Monster class creatures to perform more complex tasks, such\
      \ as Patrolling, Defending, Ambushing, just as UT was able to do, extra steps\
      \ are needed.</p>\n<h2><span class=\"mw-headline\" id=\"ScriptedSequence\">ScriptedSequence</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=3\" title=\"Edit section:\
      \ ScriptedSequence\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The <a href=\"/Legacy:ScriptedSequence\" title=\"Legacy:ScriptedSequence\"\
      >ScriptedSequence</a> is a subclass of AIScript designed to control pawns. This\
      \ takes the place of the AI portion of UT's ScriptedPawn, which is not available\
      \ in UT200x. With the ScriptedSequence, mappers can define a script using predefined\
      \ <a href=\"/Legacy:ScriptedAction\" title=\"Legacy:ScriptedAction\">ScriptedActions</a>.\
      \ The ScriptedSequence is designed to work in conjunction with an associated\
      \ Pawn; one who's AI -&gt; AIScriptTag matches the ScriptedSequence's Tag.</p>\n\
      <p>For example, one of the most useful ACTIONs is ACTION_SpawnActor. But, if\
      \ no Pawn is associated to the ScriptedSequence, the script will be removed\
      \ from the level at map start. If the mapper would like to spawn a Monster out\
      \ of thin air, a special Pawn will have to be used.</p>\n<h2><span class=\"\
      mw-headline\" id=\"The_Dummy_Pawn\">The Dummy Pawn</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=4\"\
      \ title=\"Edit section: The Dummy Pawn\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The Dummy Pawn is a simple custom <a href=\"/Legacy:Pawn\"\
      \ title=\"Legacy:Pawn\">Pawn</a> subclass that will act as the servant to our\
      \ ScriptedSequence. Subclass Pawn and define the following default properties:</p>\n\
      <dl>\n<dt>(Advanced) bool bHidden&#160;</dt>\n<dd>true</dd>\n<dt>(Advanced)\
      \ bool bNoDelete&#160;</dt>\n<dd>true</dd>\n<dt>(Collision) bool bUseCylinderCollision&#160;</dt>\n\
      <dd>false</dd>\n<dt>(Display) EDrawType DrawType&#160;</dt>\n<dd>DT_Sprite</dd>\n\
      <dt>(Display) Texture Texture&#160;</dt>\n<dd>Texture'Engine.S_Pawn'</dd>\n\
      <dt>(Movement) EPhysics Physics&#160;</dt>\n<dd>PHYS_None</dd>\n</dl>\n<p>For\
      \ each ScriptedSequence that does not already have an associated Pawn (Monster),\
      \ a Dummy can be used instead. This will allow full use of ACTIONs, like ACTION_SpawnActor\
      \ to create a kind of \"MonsterFactory\".</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Useful_Stock_ACTIONs\">Useful Stock ACTIONs</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=5\"\
      \ title=\"Edit section: Useful Stock ACTIONs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The following stock ScriptedActions are available\
      \ to use in conjunction with Monsters. This is just a basic list of useful ACTIONs\
      \ to implement Monsters. For a full list of ACTIONs, see also <a href=\"/Legacy:ScriptedAction\"\
      \ title=\"Legacy:ScriptedAction\">ScriptedAction</a>.</p>\n<h3><span class=\"\
      mw-headline\" id=\"ACTION_SpawnActor\">ACTION_SpawnActor</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=6\"\
      \ title=\"Edit section: ACTION SpawnActor\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>As long as a Pawn is already associated with this\
      \ ScriptedSequence, this will spawn the provided Actor class and give it the\
      \ provided Tag. A \"MonsterFactory\" is easily made with this action, but it\
      \ should be noted that the Monster will automatically spawn it's own MonsterController,\
      \ making it attack any player it finds.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"ACTION_MoveToPoint\">ACTION_MoveToPoint</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=7\"\
      \ title=\"Edit section: ACTION MoveToPoint\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is a latent ACTION that gives the Pawn a destination\
      \ defined as a <a href=\"/Legacy:NavigationPoint\" title=\"Legacy:NavigationPoint\"\
      >NavigationPoint</a> with a particular Tag that matches the provided name. The\
      \ Monster will animate, make sounds, navigate and move appropriately without\
      \ any further ACTIONs.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_PlayAnim\"\
      >ACTION_PlayAnim</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=8\" title=\"\
      Edit section: ACTION PlayAnim\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This will play the provided animation sequence (if\
      \ it exists for this character mesh) and allows options for timing, looping,\
      \ etc.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_PlaySound\">ACTION_PlaySound</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=9\" title=\"Edit section:\
      \ ACTION PlaySound\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This will play the provided sound and allows options for pitch, volume, etc.</p>\n\
      <h3><span class=\"mw-headline\" id=\"ACTION_IfCondition\">ACTION_IfCondition</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=10\" title=\"Edit section:\
      \ ACTION IfCondition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This conditional is true if the associated <a href=\"/Legacy:TriggeredCondition\"\
      \ title=\"Legacy:TriggeredCondition\">TriggeredCondition</a> actor is true.\
      \ TriggeredCondition are a subclass of Trigger and can be activated or toggled\
      \ on and off by another Trigger. TriggeredConditions act as a flag, a byte of\
      \ memory that can store information about the map's current condition. Some\
      \ examples are: Is a door open? Is an area occupied by a player? Has a flag\
      \ been taken?</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_IfRandomPct\"\
      >ACTION_IfRandomPct</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=11\" title=\"\
      Edit section: ACTION IfRandomPct\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This conditional is true if the random number generated,\
      \ between 1 and 100, is greater than the provided threadhold. This is good to\
      \ keep variety.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_EndSection\"\
      >ACTION_EndSection</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=12\" title=\"\
      Edit section: ACTION EndSection\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is necessary to define the end of a conditional\
      \ block of ACTIONs.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_GotoAction\"\
      >ACTION_GotoAction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=13\" title=\"\
      Edit section: ACTION GotoAction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This will send focus to another part of the script.</p>\n\
      <h3><span class=\"mw-headline\" id=\"ACTION_TriggerEvent\">ACTION_TriggerEvent</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=14\" title=\"Edit section:\
      \ ACTION TriggerEvent\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This will trigger the provided Event and trigger those Actors with a matching\
      \ Tag.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_WaitForEvent\">ACTION_WaitForEvent</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=15\" title=\"Edit section:\
      \ ACTION WaitForEvent\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This latent ACTION will pause the script's focus until the provided Event\
      \ is triggered.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_WaitForTimer\"\
      >ACTION_WaitForTimer</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=16\" title=\"\
      Edit section: ACTION WaitForTimer\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This latent ACTION will pause the script's focus for\
      \ the provided number of seconds.</p>\n<h3><span class=\"mw-headline\" id=\"\
      ACTION_DestroyActor\">ACTION_DestroyActor</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=17\"\
      \ title=\"Edit section: ACTION DestroyActor\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This will delete the Actor(s) with a Tag that matches\
      \ the provided name.</p>\n<h3><span class=\"mw-headline\" id=\"ACTION_ChangeScript\"\
      >ACTION_ChangeScript</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=18\" title=\"\
      Edit section: ACTION ChangeScript\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This will transfer control of the associate Pawn to\
      \ the ScriptedSequence with a matching Tag.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Custom_ACTIONs\">Custom ACTIONs</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=19\"\
      \ title=\"Edit section: Custom ACTIONs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Many of the stock ACTIONs are left over from UT and\
      \ were never meant to effect the Monster's MonsterController. To perform complex\
      \ behavior like Patrolling, we'll need some custom SciptedActions to take control\
      \ of the Monster, give up control and detemine various aspects of this relatively\
      \ new object class. For more on custom ScriptedActions, see also <a href=\"\
      /Legacy:Creating_And_Using_ScriptedActions\" title=\"Legacy:Creating And Using\
      \ ScriptedActions\">Creating And Using ScriptedActions</a>.</p>\n<h3><span class=\"\
      mw-headline\" id=\"ACTION_SpawnMonster\">ACTION_SpawnMonster</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=20\"\
      \ title=\"Edit section: ACTION SpawnMonster\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This will spawn the provided Monster class and automatically\
      \ Possess it, unless otherwise configured. Other options include setting Tag\
      \ for the Monster and it's MonsterController, if needed. This particular ScriptedAction\
      \ is very useful in implementing Monsters in TeamGame maps. By spawning them\
      \ after match start, as opposed to explicitly placing them in a map, you avoid\
      \ the team imbalance problem described in the Overview above.</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_SpawnMonster.</span>\n<span class=\"co1\">// Spawn\
      \ a Monster class and Possess unless bMonsterizeAtStart is true.</span>\n<span\
      \ class=\"co1\">// by SuperApe\t-- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_SpawnMonster <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\tclass<span class=\"sy0\"\
      >&lt;</span>Monster<span class=\"sy0\">&gt;</span>\t\tMonster<span class=\"\
      re0\">Class</span>&lt; SEMI &gt;\n<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\t<span class=\"kw5\">name</span>\t\
      \t\t\tMonsterTag;\n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\t<span class=\"kw5\">bool</span>\t\t\t\tbMonsterizeAtStart;\n\
      <span class=\"kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>\t<span class=\"kw5\">name</span>\t\t\t\tMonsterControllerTag;\n \n\
      <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span> InitActionFor<span\
      \ class=\"br0\">(</span> <span class=\"kw9\">ScriptedController</span> C <span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"kw1\"\
      >local</span>\t<span class=\"kw9\">Monster</span>\t\t\t\tM;\n\t<span class=\"\
      kw1\">local</span>\tMonsterController\tMC;\n \n\tM <span class=\"sy0\">=</span>\
      \ C.<span class=\"kw4\">spawn</span><span class=\"br0\">(</span> MonsterClass,\
      \ C, MonsterTag, C.<span class=\"kw7\">Location</span>, C.<span class=\"kw7\"\
      >Rotation</span> <span class=\"br0\">)</span>;\n\tC.<span class=\"kw9\">Pawn</span>\
      \ <span class=\"sy0\">=</span> M;\n \n\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> bMonsterizeAtStart <span class=\"br0\">)</span>\n\t\
      \tM.<span class=\"kw9\">Controller</span>.<span class=\"kw7\">Tag</span> <span\
      \ class=\"sy0\">=</span> MonsterControllerTag;\n\t<span class=\"kw2\">else</span>\n\
      \t<span class=\"br0\">{</span>\n\t\tM.<span class=\"kw9\">Controller</span>.<span\
      \ class=\"me0\">Unpossess</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;\n\t\tC.<span class=\"me0\">Possess</span><span class=\"br0\">(</span>\
      \ M <span class=\"br0\">)</span>;\n\t\tM.<span class=\"kw9\">Controller</span>\
      \ <span class=\"sy0\">=</span> C;\n\t\tM.<span class=\"me0\">AIScriptTag</span>\
      \ <span class=\"sy0\">=</span> C.<span class=\"kw7\">Tag</span>;\n\t<span class=\"\
      br0\">}</span>\n \n\t<span class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"ACTION_Monsterize\">ACTION_Monsterize</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=21\"\
      \ title=\"Edit section: ACTION Monsterize\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This spawns a MonsterController for the Monster Pawn\
      \ and has the MonsterController Possess it. This is what gets the Monsters to\
      \ begin to attack any player they see.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_Monsterize.</span>\n<span class=\"co1\">// Spawn\
      \ a MonsterController for this Pawn and have it possess the Pawn.</span>\n<span\
      \ class=\"co1\">// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_Monsterize <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"kw5\">name</span>\t\
      MonsterControllerTag;\n \n<span class=\"kw1\">function</span> <span class=\"\
      kw5\">bool</span> InitActionFor<span class=\"br0\">(</span> <span class=\"kw9\"\
      >ScriptedController</span> C <span class=\"br0\">)</span>\n<span class=\"br0\"\
      >{</span>\n\t<span class=\"kw1\">local</span>\tMonsterController \tMC;\n \n\t\
      MC <span class=\"sy0\">=</span> C.<span class=\"kw4\">spawn</span><span class=\"\
      br0\">(</span> <span class=\"kw1\">class</span><span class=\"st0\">'MonsterController'</span>,\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>;\n\tMC.<span\
      \ class=\"kw7\">Tag</span> <span class=\"sy0\">=</span> MonsterControllerTag;\n\
      \tMC.<span class=\"me0\">Possess</span><span class=\"br0\">(</span> C.<span\
      \ class=\"kw9\">Pawn</span> <span class=\"br0\">)</span>;\n \n\t<span class=\"\
      kw2\">return</span> <span class=\"kw6\">false</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"ACTION_PossessPawn\">ACTION_PossessPawn</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=22\" title=\"Edit section:\
      \ ACTION PossessPawn\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This Possesses the Monster Pawn matching the provided Tag, making it the\
      \ currently associated Pawn. This will also destroy the previous Controller\
      \ if it is a MonsterController. This is what stops the Monsters from attacking\
      \ at will and puts them under the control of this ScriptedSequence.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_PossessPawn.</span>\n<span class=\"co1\">// Possess\
      \ the Pawn with the PawnTag.  Destroy any previous MonsterController.</span>\n\
      <span class=\"co1\">// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_PossessPawn <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"kw5\">name</span>\t\
      PawnTag;\n<span class=\"kw1\">var</span>\t\t<span class=\"kw5\">bool</span>\t\
      bPawnExists;\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ InitActionFor<span class=\"br0\">(</span> <span class=\"kw9\">ScriptedController</span>\
      \ C <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw1\">local</span>\t<span class=\"kw9\">Pawn</span> \t\t\tP;\n\t<span class=\"\
      kw1\">local</span>\tMonsterController\tMC;\n \n\tbPawnExists <span class=\"\
      sy0\">=</span> <span class=\"kw6\">false</span>;\n\t<span class=\"kw2\">forEach</span>\
      \ C.<span class=\"kw2\">DynamicActors</span><span class=\"br0\">(</span> <span\
      \ class=\"kw1\">class</span><span class=\"st0\">'Pawn'</span>, P, PawnTag <span\
      \ class=\"br0\">)</span>\n\t<span class=\"br0\">{</span>\n\t\tbPawnExists <span\
      \ class=\"sy0\">=</span> <span class=\"kw6\">true</span>;\n\t\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> P.<span class=\"kw9\">Controller</span>.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'MonsterController'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\t\tMC <span class=\"\
      sy0\">=</span> MonsterController<span class=\"br0\">(</span> P.<span class=\"\
      kw9\">Controller</span> <span class=\"br0\">)</span>;\t\n\t\tP.<span class=\"\
      kw9\">Controller</span>.<span class=\"me0\">Unpossess</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n \n\t\t<span class=\"kw2\">if</span>\
      \ <span class=\"br0\">(</span> P.<span class=\"me0\">Health</span> <span class=\"\
      sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>\n\
      \t\t<span class=\"br0\">{</span>\n\t\t\tC.<span class=\"me0\">Possess</span><span\
      \ class=\"br0\">(</span> P <span class=\"br0\">)</span>;\n\t\t\tP.<span class=\"\
      kw9\">Controller</span> <span class=\"sy0\">=</span> C;\n\t\t\tP.<span class=\"\
      me0\">AIScriptTag</span> <span class=\"sy0\">=</span> C.<span class=\"kw7\"\
      >Tag</span>;\n\t\t<span class=\"br0\">}</span>\n\t\t<span class=\"kw2\">else</span>\n\
      \t\t\tP.<span class=\"me0\">AIScriptTag</span> <span class=\"sy0\">=</span>\
      \ <span class=\"st0\">''</span>;\n \n\t\t<span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span> MC <span class=\"sy0\">!=</span> <span class=\"kw5\"\
      >None</span> <span class=\"br0\">)</span>\n\t\t\tMC.<span class=\"kw4\">Destroy</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n\t<span class=\"br0\"\
      >}</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span\
      \ class=\"sy0\">!</span>bPawnExists <span class=\"br0\">)</span>\n\t\t<span\
      \ class=\"kw3\">Warn</span><span class=\"br0\">(</span><span class=\"st0\">\"\
      No Pawn with tag \"</span><span class=\"sy0\">$</span>PawnTag<span class=\"\
      sy0\">$</span><span class=\"st0\">\" exists!\"</span><span class=\"br0\">)</span>;\n\
      \ \n\t<span class=\"kw2\">return</span> <span class=\"kw6\">false</span>;\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\"\
      \ id=\"ACTION_IfMonsterHasEnemy\">ACTION_IfMonsterHasEnemy</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=23\"\
      \ title=\"Edit section: ACTION IfMonsterHasEnemy\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This conditional is true if the Monster Pawn's Controller.Enemy\
      \ property is occupied. Useful for situations where you want to know if it's\
      \ a good time to ACTION_PossessPawn, otherwise you may want to keep it \"Monsterized\"\
      \ and wait until the Enemy is gone.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_IfMonsterHasEnemy.</span>\n<span class=\"co1\"\
      >// Conditional on Pawn.Controller.Enemy != None</span>\n<span class=\"co1\"\
      >// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_IfMonsterHasEnemy <span class=\"kw1\"\
      >extends</span> <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"\
      kw1\">function</span> ProceedToNextAction<span class=\"br0\">(</span> <span\
      \ class=\"kw9\">ScriptedController</span> C <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"sy0\">!</span>C.<span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'Monster'</span><span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span\
      \ class=\"br0\">(</span> C <span class=\"br0\">)</span>;\n \n\tC.<span class=\"\
      me0\">ActionNum</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> C.<span class=\"\
      kw9\">Pawn</span>.<span class=\"kw9\">Controller</span>.<span class=\"me0\"\
      >Enemy</span> <span class=\"sy0\">==</span> <span class=\"kw5\">None</span>\
      \ <span class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span class=\"br0\">(</span>\
      \ C <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> StartsSection<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"ACTION_IfMonsterSeesEnemy\"\
      >ACTION_IfMonsterSeesEnemy</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=24\"\
      \ title=\"Edit section: ACTION IfMonsterSeesEnemy\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This conditional is true based on the property MonsterController.bEnemyIsVisible.\
      \ Useful in the same way that ACTION_IfMonsterHasEnemy is, but this will only\
      \ be true if the Enemy is visible. So an Enemy that's ducked out of sight will\
      \ cause this conditional to be false.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_IfMonsterSeesEnemy.</span>\n<span class=\"co1\"\
      >// Conditional on MonsterController.bEnemyIsVisible</span>\n<span class=\"\
      co1\">// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_IfMonsterSeesEnemy <span class=\"kw1\"\
      >extends</span> <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"\
      kw1\">function</span> ProceedToNextAction<span class=\"br0\">(</span> <span\
      \ class=\"kw9\">ScriptedController</span> C <span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"sy0\">!</span>C.<span class=\"kw9\">Pawn</span>.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'Monster'</span><span\
      \ class=\"br0\">)</span> <span class=\"sy0\">||</span> MonsterController<span\
      \ class=\"br0\">(</span> C.<span class=\"kw9\">Pawn</span>.<span class=\"kw9\"\
      >Controller</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw5\">None</span> <span class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span\
      \ class=\"br0\">(</span> C <span class=\"br0\">)</span>;\n \n\tC.<span class=\"\
      me0\">ActionNum</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>;\n\
      \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      sy0\">!</span>MonsterController<span class=\"br0\">(</span>C.<span class=\"\
      kw9\">Pawn</span>.<span class=\"kw9\">Controller</span><span class=\"br0\">)</span>.<span\
      \ class=\"me0\">bEnemyIsVisible</span> <span class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span\
      \ class=\"br0\">(</span> C <span class=\"br0\">)</span>;\n<span class=\"br0\"\
      >}</span>\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ StartsSection<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n\t<span class=\"kw2\">return</span> <span class=\"\
      kw6\">true</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<h3><span\
      \ class=\"mw-headline\" id=\"ACTION_IfMonsterIsHurt\">ACTION_IfMonsterIsHurt</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=25\" title=\"Edit section:\
      \ ACTION IfMonsterIsHurt\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>This conditional is true if the Pawn's Health is less than the provided HealthThreshold.\
      \ This works whether the Monster is currently Monsterized or not. It's useful\
      \ to determine if the ScriptedSequence should take control of a hurt Monster\
      \ to move it to a safer place, etc.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_IfMonsterIsHurt.</span>\n<span class=\"co1\">//\
      \ Conditional on Pawn.Health &lt; HealthThreshold</span>\n<span class=\"co1\"\
      >// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_IfMonsterIsHurt <span class=\"kw1\"\
      >extends</span> <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"\
      kw1\">var</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t<span\
      \ class=\"kw5\">int</span>\t\tHealthThreshold;\n \n<span class=\"kw1\">function</span>\
      \ ProceedToNextAction<span class=\"br0\">(</span> <span class=\"kw9\">ScriptedController</span>\
      \ C <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>C.<span\
      \ class=\"kw9\">Pawn</span>.<span class=\"kw3\">IsA</span><span class=\"br0\"\
      >(</span><span class=\"st0\">'Monster'</span><span class=\"br0\">)</span> <span\
      \ class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span class=\"br0\">(</span>\
      \ C <span class=\"br0\">)</span>;\n \n\tC.<span class=\"me0\">ActionNum</span>\
      \ <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>;\n\t<span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span> C.<span class=\"kw9\">Pawn</span>.<span\
      \ class=\"me0\">Health</span> <span class=\"sy0\">&gt;</span> HealthThreshold\
      \ <span class=\"br0\">)</span>\n\t\tProceedToSectionEnd<span class=\"br0\">(</span>\
      \ C <span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> StartsSection<span class=\"\
      br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\t\
      <span class=\"kw2\">return</span> <span class=\"kw6\">true</span>;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<h3><span class=\"mw-headline\" id=\"ACTION_HealPawn\"\
      >ACTION_HealPawn</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=26\" title=\"\
      Edit section: ACTION HealPawn\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This gives the Pawn Health, up to it's MaxHealth,\
      \ based on the provided HealAmount. Ironically, ACTION_HealActor doesn't work\
      \ with Pawns. This is useful in situations where you'd like to keep the Monster\
      \ around a bit longer. In conjunction with ACTION_IfMonsterIsHurt, this can\
      \ be used to provide a kind of \"Healing Station\" for the Monster, giving it\
      \ a sophisticated combat tactic: Retreat to <i>Live and fight another day</i>.</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ACTION_HealPawn.</span>\n<span class=\"co1\">// Calls\
      \ Pawn.GiveHealth( HealAmount, HealthMax ).  Does what HealActor can't.</span>\n\
      <span class=\"co1\">// by SuperApe -- Dec 2005</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ACTION_HealPawn <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">ScriptedAction</span>;\n \n<span class=\"kw1\">var</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"kw5\">int</span>\t\
      \tHealAmount;\n \n<span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ InitActionFor<span class=\"br0\">(</span> <span class=\"kw9\">ScriptedController</span>\
      \ C <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\tC.<span class=\"\
      kw9\">Pawn</span>.<span class=\"me0\">GiveHealth</span><span class=\"br0\">(</span>\
      \ HealAmount, <span class=\"kw5\">int</span><span class=\"br0\">(</span> C.<span\
      \ class=\"kw9\">Pawn</span>.<span class=\"me0\">HealthMax</span> <span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>;\n \n\t<span class=\"kw2\">return</span>\
      \ <span class=\"kw6\">false</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Further_Development\">Further Development</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=27\" title=\"Edit section:\
      \ Further Development\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>The possibilities are endless. Some useful ACTIONs to make include setting\
      \ specific Properties or switching to behavior States. Other custom ACTIONs\
      \ should be appended here to this section.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"ACTION_myCustomAction\">ACTION_myCustomAction</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=28\"\
      \ title=\"Edit section: ACTION myCustomAction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h2><span class=\"mw-headline\" id=\"Monster_Tutorial\"\
      >Monster Tutorial</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=29\" title=\"\
      Edit section: Monster Tutorial\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Now that we have the ScriptedActions available to\
      \ affect Monsters, we can begin to construct a complex Monster behavior patrolling\
      \ to guard an item in a map. We will start with a MonsterFactory. We will give\
      \ our Monsters a path to follow while on patrol. We will keep track of the item\
      \ so the Monsters know when it's been taken. We will also give our Monsters\
      \ a safe \"homebase\" where they can heal themselves when they're hurt.</p>\n\
      <p>We will use a variety of actors to make this behavior happen. We could do\
      \ it with one Dummy Pawn and one ScriptedSequence, however the ScriptedSequence\
      \ script would be <u>very</u> long and complex. It's very easy to make a mistake\
      \ in a script that long, so we will break it up into manageable chunks and spread\
      \ the script around to several ScriptedSequences.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"MonsterFactory\">MonsterFactory</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=30\"\
      \ title=\"Edit section: MonsterFactory\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>A MonsterFactory starts with a Dummy Pawn and a ScriptedSequence.\
      \ The Dummy -&gt; AIScript -&gt; AIScriptTag will match the ScriptedSequence\
      \ -&gt; Tag. We will place the Dummy at the spot we would like our Monsters\
      \ to spawn. We will keep the ScriptedSequence close by, just for organization.</p>\n\
      <p>This MonsterFactory script will consist of the following ScriptedActions:</p>\n\
      <dl>\n<dt>[0] ACTION_TriggerEvent&#160;</dt>\n<dd>An emitter actor will be set\
      \ up here to give some simple effects for our spawning Monster. We will match\
      \ it's Tag, \"MonsterSpawnFX\", to this ACTION's arguement.</dd>\n<dt>[1] ACTION_PlaySound&#160;</dt>\n\
      <dd>A sound effect will also be played at this point so both a visual and audial\
      \ queue will signal to any close player that a Monster is about to be spawned.</dd>\n\
      <dt>[2] ACTION_SpawnMonster&#160;</dt>\n<dd>We will spawn a <a href=\"/Legacy:Krall\"\
      \ title=\"Legacy:Krall\">Krall</a> and give it the MonsterTag, \"KrallPatrol\"\
      . We will keep it's control on this script rather than Monsterizing it at start.</dd>\n\
      <dt>[3] ACTION_MoveToPoint&#160;</dt>\n<dd>A nearby PathNode with a Tag set\
      \ to, \"MonsterStart\", will be designated as the first spot our Monsters will\
      \ move. This will simply get them out of the way of other Monsters.</dd>\n<dt>[4]\
      \ ACTION_TriggerEvent&#160;</dt>\n<dd>This action will signal the next ScriptedSequence\
      \ that a Monster has been spawned and moved to the MonsterStart spot. This signal,\
      \ Event \"MonsterToPatrol\", will start transferring control of the Monster\
      \ to the next script.</dd>\n<dt>[5] ACTION_WaitForEvent&#160;</dt>\n<dd>At this\
      \ point, our MonsterFactory has done its job. We will have it wait here for\
      \ a signal to continue. Our signal will be the Event, \"MonsterSpawn\".</dd>\n\
      <dt>[6] ACTION_GotoAction&#160;</dt>\n<dd>Once the signal is given, we will\
      \ goto the Action 0 to start this script again and spawn a new Monster.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Patrolling\">Patrolling</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=31\" title=\"Edit section:\
      \ Patrolling\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Here another ScriptedSequence will take over control of the Monsters from\
      \ our MonsterFactory. A series of PathNodes will have Tags that we will use\
      \ to define the Patrol points for our Monsters. Each Patrol point will have\
      \ a corresponding ScriptedSequence. Our Patrolling scripts will perform checks\
      \ to make sure our Monsters are Monsterized to attack visible enemies. At various\
      \ points, we will also give the Monsters the opportunity to keep track of the\
      \ item they are guarding and go to a safe healing place if they need it.</p>\n\
      <p>The Patrolling script will have the following ScriptedActions:</p>\n<dl>\n\
      <dt>[0] ACTION_WaitForEvent&#160;</dt>\n<dd>This script waits for the Event,\
      \ \"MonsterToPatrol\", as a signal to take control of the Monster.</dd>\n<dt>[1]\
      \ ACTION_PossessPawn&#160;</dt>\n<dd>This will take control of the Monster Pawn\
      \ with the Tag, \"KrallPatrol\".</dd>\n<dt>[2] ACTION_MoveToPoint&#160;</dt>\n\
      <dd>We will send this Monster to the first Patrol point, a PathNode with a Tag,\
      \ \"Patrol1\".</dd>\n<dt>[3] ACTION_Monsterize&#160;</dt>\n<dd>We will give\
      \ the Monster the opportunity to attack any player it sees. The MonsterControllerTag\
      \ will be, \"KrallMonster\".</dd>\n<dt>[4] ACTION_WaitForTimer&#160;</dt>\n\
      <dd>We will have the Monster wait 5 seconds while Monsterized.</dd>\n<dt>[5]\
      \ ACTION_IfMonsterSeesEnemy&#160;</dt>\n<dd>This conditional gives the Monster\
      \ a chance to tell us if they see an Enemy while at this Patrol point.</dd>\n\
      <dt>[6] ACTION_GotoAction&#160;</dt>\n<dd>Send the script to Action 4, to continue\
      \ the attack for another 5 seconds.</dd>\n<dt>[7] ACTION_EndSection&#160;</dt>\n\
      <dd>This ends the conditional block for IfMonsterSeesEnemy.</dd>\n<dt>[8] ACTION_TriggerEvent&#160;</dt>\n\
      <dd>This will signal to the next Patrol script to take control of this Monster\
      \ and move it to the next Patrol point. The Event to trigger will be, \"Patrol2\"\
      .</dd>\n<dt>[9] ACTION_GotoAction&#160;</dt>\n<dd>This script has done its job\
      \ and should return to the original state, at Action 0, waiting for the next\
      \ Monster to take control of.</dd>\n</dl>\n<p>Now the next Patrol script and\
      \ Patrol point will take over. They will look exactly like this one with the\
      \ exception of some of the Tags. The script will be waiting for Event, \"Patrol2\"\
      . The Patrol point PathNode and ACTION_MoveToPoint will have the tag, \"Patrol2\"\
      . When the script has finished checking to see IfMonsterSeesEnemy, it will trigger\
      \ the next Patrol script using Event, \"Patrol3\".</p>\n<p>This series of Patrol\
      \ points and scripts will loop around the Patrol path back to the first point,\
      \ where the last Patrol script will be triggering, \"MonsterToPatrol\", to signal\
      \ the first Patrol script to take over again.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Guarding_An_Item\">Guarding An Item</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=32\"\
      \ title=\"Edit section: Guarding An Item\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In our case, we will have the Monsters guard a BombingRun\
      \ <a href=\"/Legacy:XBombFlag\" title=\"Legacy:XBombFlag\">xBombFlag</a> at\
      \ the <a href=\"/Legacy:XBombSpawn\" title=\"Legacy:XBombSpawn\">xBombSpawn</a>\
      \ point. This will force players to get through the Monster patrol to get the\
      \ BombFlag in order to score.</p>\n<h3><span class=\"mw-headline\" id=\"Healing\"\
      >Healing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=33\" title=\"\
      Edit section: Healing\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <h2><span class=\"mw-headline\" id=\"External_Links\">External Links</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=34\" title=\"Edit section:\
      \ External Links\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <ul>\n<li><a rel=\"nofollow\" class=\"external text\" href=\"http://forums.unrealplayground.com/showthread.php?t=37962\"\
      >UnrealPlayground Forum topic, Monster Experiments</a> – Implementation of Monsters\
      \ via custom ScriptedActions.</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"\
      Related_Topics\">Related Topics</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=35\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Artificial_Intelligence\"\
      \ title=\"Legacy:Artificial Intelligence\">Artificial Intelligence</a> – A super\
      \ topic for all AI (bots, NPCs, etc.)\n<ul>\n<li><a href=\"/Legacy:Monster_Support\"\
      \ title=\"Legacy:Monster Support\">Monster Support</a> – A hub for all Monster\
      \ Support topics.</li>\n</ul>\n</li>\n<li><a href=\"/Legacy:Monster\" title=\"\
      Legacy:Monster\">Monster</a> – The UT2004 parent class of all Monsters.</li>\n\
      <li><a href=\"/Legacy:MonsterController\" title=\"Legacy:MonsterController\"\
      >MonsterController</a> – The Controller class for Monsters.</li>\n<li><a href=\"\
      /Legacy:ScriptedPawn\" title=\"Legacy:ScriptedPawn\">ScriptedPawn</a> – The\
      \ UT parent class for all Monsters and NPCs.</li>\n<li><a href=\"/Legacy:AIScript\"\
      \ title=\"Legacy:AIScript\">AIScript</a>\n<ul>\n<li><a href=\"/Legacy:ScriptedSequence\"\
      \ title=\"Legacy:ScriptedSequence\">ScriptedSequence</a>\n<ul>\n<li><a href=\"\
      /Legacy:UnrealScriptedSequence\" title=\"Legacy:UnrealScriptedSequence\">UnrealScriptedSequence</a></li>\n\
      <li><a href=\"/Legacy:ScriptedTrigger\" title=\"Legacy:ScriptedTrigger\">ScriptedTrigger</a></li>\n\
      </ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Legacy:Trigger_Systems\" title=\"\
      Legacy:Trigger Systems\">Trigger Systems</a></li>\n</ul>\n<h3><span class=\"\
      mw-headline\" id=\"Custom_Content\">Custom Content</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=36\"\
      \ title=\"Edit section: Custom Content\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ul>\n<li><a href=\"/Legacy:SuperApe/Old_Skool_Monsta_Toolz\"\
      \ title=\"Legacy:SuperApe/Old Skool Monsta Toolz\" class=\"mw-redirect\">Old\
      \ Skool Monsta Toolz</a> – A mod/mapping toolset for implementing monsters and\
      \ complex monster AI in any gametype for UT2004.</li>\n</ul>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:A_UT2004_Monster_Tutorial?section=37\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>SuperApe:</b> Created. Working...</p>\n<p><b>SuperApe:</b>\
      \ These are okay. It's beginning to work. There are a few key issues that need\
      \ to be addressed:</p>\n<ol>\n<li>With these Actions, you can have the Monster\
      \ attack <u>or</u> be controlled by the ScriptedSequence, not both. So, setting\
      \ something akin to Alertness level is difficult.</li>\n<li>Technically, the\
      \ MonsterController <u>will</u> \"teleport\" a Monster to a PlayerStart after\
      \ several seconds if it hasn't encountered a player. Perhaps another controller\
      \ should be used anyway. (like a subclass that at least removes that method)</li>\n\
      <li>A daisy chain of ScriptedSequences should work, but I've been having problems.\
      \ (I haven't figured out why, but it intermitently \"misses\" the Trigger for\
      \ the next script.)</li>\n</ol>\n<p>So, I'm beginning to think re-creating the\
      \ <a href=\"/Legacy:HomeBase\" title=\"Legacy:HomeBase\">HomeBase</a>, <a href=\"\
      /Legacy:AmbushPoint\" title=\"Legacy:AmbushPoint\">AmbushPoint</a>, <a href=\"\
      /Legacy:AlarmPoint\" title=\"Legacy:AlarmPoint\">AlarmPoint</a> and <a href=\"\
      /Legacy:PatrolPoint\" title=\"Legacy:PatrolPoint\">PatrolPoint</a> might be\
      \ helpful in conjunction with a modified <a href=\"/Legacy:MonsterController\"\
      \ title=\"Legacy:MonsterController\">MonsterController</a>.</p>\n<p><b>Moofed:</b>\
      \ Any progress on this? I'll be learning monster scripting (very) soon and this\
      \ page looks useful.. until your comment about it not working.</p>\n<p><b>SuperApe:</b>\
      \ Your timing is impecable.&#160;:) I'm working on this now. It's not that it\
      \ <i>doesn't</i> work, it's that there are serious limitations without further\
      \ development, as I mention above. At the moment, I'm right on the edge of either\
      \ continuing to use custom ScriptedActions (and making a lot more of them) or\
      \ creating a custom MonsterController that will include much of the functionality\
      \ needed. It's a bit of a mess to have both. I will be updating this soon.</p>\n\
      <p><b>Moofed:</b> ... What I will be learning monster scripting for (is) civilian\
      \ pedestrians and vehicles ... to recreate the GTA2 feel.</p>\n<p><b>SuperApe:</b>\
      \ So, you're thinking more along the lines of an NPC? This could be done with\
      \ ScriptedSequences, I suppose. I might be a little too much to do, or a little\
      \ too simple an NPC. This page is specifically talking about the problems using\
      \ Monsters with ScriptedSequences, so it's not gonna be directly applicable\
      \ to what you want to do. Monsters are defined as a specific kind of NPC whose\
      \ sole purpose is to hunt down and kill players. Civilians and pedestrians would\
      \ be more along the lines of a general NPC. See <a href=\"/Legacy:NPC_Support\"\
      \ title=\"Legacy:NPC Support\">NPC Support</a> and describe for us what you'd\
      \ like them to do. Perhaps we can offer suggestions.&#160;:)</p>\n<p><b>Moofed:</b>\
      \ It seemed relevant to what I want, but you're probably right. A custom controller\
      \ would be better. I'm making a personal page now to descibe my ideas for this.</p>\n\
      <p><b>SuperApe:</b> Great. Be glad to help.&#160;:)</p>\n<hr />\n<p><b>SuperApe:</b>\
      \ This page will be updated soon, but while I like being able to use (mostly)\
      \ stock objects to implement UT2004 Monsters, there's some drastic limitations.\
      \ It's no where near as cool as original ScriptedPawn Monsters used to be in\
      \ UT. While I may keep this tutorial the same, I am beginning to recreate the\
      \ older actors and code for the ScriptedPawn AI, with all their functionality.\
      \ This will eventually include all the NavPoints, a new Monster parent class\
      \ that mimics some ScriptedPawn functionality, as many individual Monsters as\
      \ UT2004 has (with all their original functionality) and a new ScriptedMonsterController\
      \ which will handle the bulk of what ScriptedPawn used to. I suppose that qualifies\
      \ as a different project, a different page, but it related directly to and evolved\
      \ from these experiments. In the meantime, I will try to finish up this tutorial\
      \ as best I can using the custom work already described above.</p>\n<p><b>SuperApe:</b>\
      \ This line of thinking has led to a new project, <a rel=\"nofollow\" class=\"\
      external text\" href=\"http://forums.unrealplayground.com/showthread.php?t=39783\"\
      >Old Skool Monsta Toolz</a>, implementing UT-style monsters in UT2004. EDIT:\
      \ It has been publicly released.</p>\n<p><b>SuperApe:</b> The current wiki page\
      \ for the OSMT project is here: <a href=\"/Legacy:SuperApe/Old_Skool_Monsta_Toolz\"\
      \ title=\"Legacy:SuperApe/Old Skool Monsta Toolz\" class=\"mw-redirect\">Old\
      \ Skool Monsta Toolz</a>.</p>\n<hr />\n<p><a href=\"/Category:Legacy_Mapping\"\
      \ title=\"Category:Legacy Mapping\">Category:Legacy Mapping</a></p>\n<p><a href=\"\
      /Category:Legacy_Tutorial\" title=\"Category:Legacy Tutorial\">Category:Legacy\
      \ Tutorial</a></p>\n<p><a href=\"/Category:Legacy_To_Do\" title=\"Category:Legacy\
      \ To Do\">Category:Legacy To Do</a> – SuperApe is working on a tutorial. (This\
      \ actually needs to be refactored, redone)</p>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.242 seconds\nReal time usage: 0.494 seconds\nPreprocessor\
      \ visited node count: 213/1000000\nPreprocessor generated node count: 316/1000000\n\
      Post‐expand include size: 75/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:503-0!*!0!!en!*!*\
      \ and timestamp 20221118015011 and revision id 1588\n -->\n"
  categories:
  - sortkey: "A UT2004 Monster Tutorial"
    name: "Legacy_Tutorial"
  - sortkey: "A UT2004 Monster Tutorial"
    name: "Legacy_Mapping"
  - sortkey: "A UT2004 Monster Tutorial"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Trigger Systems"
  - ns: 100
    exists: true
    name: "Legacy:Creating And Using ScriptedActions"
  - ns: 14
    exists: true
    name: "Category:Legacy Mapping"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScriptedSequence"
  - ns: 100
    exists: true
    name: "Legacy:Artificial Intelligence"
  - ns: 100
    exists: true
    name: "Legacy:SuperApe/Old Skool Monsta Toolz"
  - ns: 100
    exists: true
    name: "Legacy:AIScript"
  - ns: 100
    exists: true
    name: "Legacy:XBombSpawn"
  - ns: 100
    exists: true
    name: "Legacy:Invasion"
  - ns: 100
    exists: true
    name: "Legacy:Monster"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTrigger"
  - ns: 100
    exists: true
    name: "Legacy:HomeBase"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedPawn"
  - ns: 100
    exists: true
    name: "Legacy:NPC Support"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:NavigationPoint"
  - ns: 100
    exists: true
    name: "Legacy:XBombFlag"
  - ns: 100
    exists: true
    name: "Legacy:MonsterController"
  - ns: 100
    exists: true
    name: "Legacy:AmbushPoint"
  - ns: 100
    exists: true
    name: "Legacy:TriggeredCondition"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedAction"
  - ns: 100
    exists: true
    name: "Legacy:Krall"
  - ns: 100
    exists: true
    name: "Legacy:PatrolPoint"
  - ns: 100
    exists: true
    name: "Legacy:Monster Support"
  - ns: 100
    exists: true
    name: "Legacy:AlarmPoint"
  - ns: 14
    exists: true
    name: "Category:Legacy Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Basic ScriptedPawn Tutorial"
  - ns: 100
    exists: true
    name: "Legacy:ScriptedSequence"
  - ns: 100
    exists: true
    name: "Legacy:Create A Subclass"
  templates: []
  images: []
  externallinks:
  - "http://forums.unrealplayground.com/showthread.php?t=37962"
  - "http://forums.unrealplayground.com/showthread.php?t=39783"
  sections:
  - toclevel: 1
    level: "2"
    line: "Prerequisites"
    number: "1"
    index: "1"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 451
    anchor: "Prerequisites"
  - toclevel: 1
    level: "2"
    line: "Overview"
    number: "2"
    index: "2"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 557
    anchor: "Overview"
  - toclevel: 1
    level: "2"
    line: "ScriptedSequence"
    number: "3"
    index: "3"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 1569
    anchor: "ScriptedSequence"
  - toclevel: 1
    level: "2"
    line: "The Dummy Pawn"
    number: "4"
    index: "4"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 2330
    anchor: "The_Dummy_Pawn"
  - toclevel: 1
    level: "2"
    line: "Useful Stock ACTIONs"
    number: "5"
    index: "5"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 2997
    anchor: "Useful_Stock_ACTIONs"
  - toclevel: 2
    level: "3"
    line: "ACTION_SpawnActor"
    number: "5.1"
    index: "6"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 3259
    anchor: "ACTION_SpawnActor"
  - toclevel: 2
    level: "3"
    line: "ACTION_MoveToPoint"
    number: "5.2"
    index: "7"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 3608
    anchor: "ACTION_MoveToPoint"
  - toclevel: 2
    level: "3"
    line: "ACTION_PlayAnim"
    number: "5.3"
    index: "8"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 3904
    anchor: "ACTION_PlayAnim"
  - toclevel: 2
    level: "3"
    line: "ACTION_PlaySound"
    number: "5.4"
    index: "9"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4059
    anchor: "ACTION_PlaySound"
  - toclevel: 2
    level: "3"
    line: "ACTION_IfCondition"
    number: "5.5"
    index: "10"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4161
    anchor: "ACTION_IfCondition"
  - toclevel: 2
    level: "3"
    line: "ACTION_IfRandomPct"
    number: "5.6"
    index: "11"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4613
    anchor: "ACTION_IfRandomPct"
  - toclevel: 2
    level: "3"
    line: "ACTION_EndSection"
    number: "5.7"
    index: "12"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4788
    anchor: "ACTION_EndSection"
  - toclevel: 2
    level: "3"
    line: "ACTION_GotoAction"
    number: "5.8"
    index: "13"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4885
    anchor: "ACTION_GotoAction"
  - toclevel: 2
    level: "3"
    line: "ACTION_TriggerEvent"
    number: "5.9"
    index: "14"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 4963
    anchor: "ACTION_TriggerEvent"
  - toclevel: 2
    level: "3"
    line: "ACTION_WaitForEvent"
    number: "5.10"
    index: "15"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5074
    anchor: "ACTION_WaitForEvent"
  - toclevel: 2
    level: "3"
    line: "ACTION_WaitForTimer"
    number: "5.11"
    index: "16"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5190
    anchor: "ACTION_WaitForTimer"
  - toclevel: 2
    level: "3"
    line: "ACTION_DestroyActor"
    number: "5.12"
    index: "17"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5303
    anchor: "ACTION_DestroyActor"
  - toclevel: 2
    level: "3"
    line: "ACTION_ChangeScript"
    number: "5.13"
    index: "18"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5404
    anchor: "ACTION_ChangeScript"
  - toclevel: 1
    level: "2"
    line: "Custom ACTIONs"
    number: "6"
    index: "19"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5526
    anchor: "Custom_ACTIONs"
  - toclevel: 2
    level: "3"
    line: "ACTION_SpawnMonster"
    number: "6.1"
    index: "20"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 5985
    anchor: "ACTION_SpawnMonster"
  - toclevel: 2
    level: "3"
    line: "ACTION_Monsterize"
    number: "6.2"
    index: "21"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 7318
    anchor: "ACTION_Monsterize"
  - toclevel: 2
    level: "3"
    line: "ACTION_PossessPawn"
    number: "6.3"
    index: "22"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 8105
    anchor: "ACTION_PossessPawn"
  - toclevel: 2
    level: "3"
    line: "ACTION_IfMonsterHasEnemy"
    number: "6.4"
    index: "23"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 9406
    anchor: "ACTION_IfMonsterHasEnemy"
  - toclevel: 2
    level: "3"
    line: "ACTION_IfMonsterSeesEnemy"
    number: "6.5"
    index: "24"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 10291
    anchor: "ACTION_IfMonsterSeesEnemy"
  - toclevel: 2
    level: "3"
    line: "ACTION_IfMonsterIsHurt"
    number: "6.6"
    index: "25"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 11271
    anchor: "ACTION_IfMonsterIsHurt"
  - toclevel: 2
    level: "3"
    line: "ACTION_HealPawn"
    number: "6.7"
    index: "26"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 12198
    anchor: "ACTION_HealPawn"
  - toclevel: 1
    level: "2"
    line: "Further Development"
    number: "7"
    index: "27"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 13161
    anchor: "Further_Development"
  - toclevel: 2
    level: "3"
    line: "ACTION_myCustomAction"
    number: "7.1"
    index: "28"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 13379
    anchor: "ACTION_myCustomAction"
  - toclevel: 1
    level: "2"
    line: "Monster Tutorial"
    number: "8"
    index: "29"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 13408
    anchor: "Monster_Tutorial"
  - toclevel: 2
    level: "3"
    line: "MonsterFactory"
    number: "8.1"
    index: "30"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 14225
    anchor: "MonsterFactory"
  - toclevel: 2
    level: "3"
    line: "Patrolling"
    number: "8.2"
    index: "31"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 15932
    anchor: "Patrolling"
  - toclevel: 2
    level: "3"
    line: "Guarding An Item"
    number: "8.3"
    index: "32"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 18399
    anchor: "Guarding_An_Item"
  - toclevel: 2
    level: "3"
    line: "Healing"
    number: "8.4"
    index: "33"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 18658
    anchor: "Healing"
  - toclevel: 1
    level: "2"
    line: "External Links"
    number: "9"
    index: "34"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 18673
    anchor: "External_Links"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "10"
    index: "35"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 18868
    anchor: "Related_Topics"
  - toclevel: 2
    level: "3"
    line: "Custom Content"
    number: "10.1"
    index: "36"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 19589
    anchor: "Custom_Content"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "11"
    index: "37"
    fromtitle: "Legacy:A_UT2004_Monster_Tutorial"
    byteoffset: 19786
    anchor: "Discussion"
  displaytitle: "Legacy:A UT2004 Monster Tutorial"
  iwlinks: []
  wikitext:
    text: "'''''This page is under contruction.'''''\n\nThis tutorial is meant to\
      \ demonstrate the basics needed to implement [[Legacy:Monster|Monster]] class\
      \ characters within a UT2004 environment.  The Monster is a specific class introduced\
      \ in UT2004 for the [[Legacy:Invasion|Invasion]] gametype.  For a tutorial on\
      \ using UT Monsters, a subclass of [[Legacy:ScriptedPawn|ScriptedPawn]], see\
      \ [[Legacy:Basic ScriptedPawn Tutorial|Basic ScriptedPawn Tutorial]].  \n\n\
      ==Prerequisites==\n\nThis tutorial assumes you know how to [[Legacy:Create A\
      \ Subclass|Create A Subclass]].\n\n==Overview==\n\nBy default, Monsters in UT2004\
      \ use a [[Legacy:MonsterController|MonsterController]] that implements a complex\
      \ set of behaviors to hunt down and attack players.  This is specifically designed\
      \ for the Invasion gametype, where Monsters are spawned at random [[Legacy:NavigationPoint|NavigationPoint]]s\
      \ around the map and attack the players in increasingly aggressive waves.\n\n\
      However, for other gametypes this default behavior may not be desirable to the\
      \ mapper.  As an example, placing UT2004 Monsters in a map designed for a TeamGame\
      \ will result in a team imbalance, where the UnrealPawn PostNetBeginPlay() function\
      \ attempts (and eventually fails) to place the Monster in an xTeamRoster. ''(RedTeam's\
      \ Size is incremented although there's no valid player added and extra BlueTeam\
      \ memebers are the result)''\n\nIn cases where the mapper would like to get\
      \ Monster class creatures to perform more complex tasks, such as Patrolling,\
      \ Defending, Ambushing, just as UT was able to do, extra steps are needed.\n\
      \n==ScriptedSequence==\n\nThe [[Legacy:ScriptedSequence|ScriptedSequence]] is\
      \ a subclass of AIScript designed to control pawns.  This takes the place of\
      \ the AI portion of UT's ScriptedPawn, which is not available in UT200x.  With\
      \ the ScriptedSequence, mappers can define a script using predefined [[Legacy:ScriptedAction|ScriptedAction]]s.\
      \  The ScriptedSequence is designed to work in conjunction with an associated\
      \ Pawn; one who's AI -> AIScriptTag matches the ScriptedSequence's Tag.\n\n\
      For example, one of the most useful ACTIONs is ACTION_SpawnActor.  But, if no\
      \ Pawn is associated to the ScriptedSequence, the script will be removed from\
      \ the level at map start.  If the mapper would like to spawn a Monster out of\
      \ thin air, a special Pawn will have to be used.\n\n==The Dummy Pawn==\n\nThe\
      \ Dummy Pawn is a simple custom [[Legacy:Pawn|Pawn]] subclass that will act\
      \ as the servant to our ScriptedSequence.  Subclass Pawn and define the following\
      \ default properties:\n\n; (Advanced) bool bHidden : true\n; (Advanced) bool\
      \ bNoDelete : true\n; (Collision) bool bUseCylinderCollision : false\n; (Display)\
      \ EDrawType DrawType : DT_Sprite\n; (Display) Texture Texture : Texture'Engine.S_Pawn'\n\
      ; (Movement) EPhysics Physics : PHYS_None\n\nFor each ScriptedSequence that\
      \ does not already have an associated Pawn (Monster), a Dummy can be used instead.\
      \  This will allow full use of ACTIONs, like ACTION_SpawnActor to create a kind\
      \ of \"MonsterFactory\".\n\n==Useful Stock ACTIONs==\n\nThe following stock\
      \ ScriptedActions are available to use in conjunction with Monsters.  This is\
      \ just a basic list of useful ACTIONs to implement Monsters.  For a full list\
      \ of ACTIONs, see also [[Legacy:ScriptedAction|ScriptedAction]].\n\n===ACTION_SpawnActor===\n\
      \nAs long as a Pawn is already associated with this ScriptedSequence, this will\
      \ spawn the provided Actor class and give it the provided Tag.  A \"MonsterFactory\"\
      \ is easily made with this action, but it should be noted that the Monster will\
      \ automatically spawn it's own MonsterController, making it attack any player\
      \ it finds.\n\n===ACTION_MoveToPoint===\n\nThis is a latent ACTION that gives\
      \ the Pawn a destination defined as a [[Legacy:NavigationPoint|NavigationPoint]]\
      \ with a particular Tag that matches the provided name.  The Monster will animate,\
      \ make sounds, navigate and move appropriately without any further ACTIONs.\n\
      \n===ACTION_PlayAnim===\n\nThis will play the provided animation sequence (if\
      \ it exists for this character mesh) and allows options for timing, looping,\
      \ etc.\n\n===ACTION_PlaySound===\n\nThis will play the provided sound and allows\
      \ options for pitch, volume, etc.\n\n===ACTION_IfCondition===\n\nThis conditional\
      \ is true if the associated [[Legacy:TriggeredCondition|TriggeredCondition]]\
      \ actor is true.  TriggeredCondition are a subclass of Trigger and can be activated\
      \ or toggled on and off by another Trigger.  TriggeredConditions act as a flag,\
      \ a byte of memory that can store information about the map's current condition.\
      \  Some examples are: Is a door open?  Is an area occupied by a player?  Has\
      \ a flag been taken?\n\n===ACTION_IfRandomPct===\n\nThis conditional is true\
      \ if the random number generated, between 1 and 100, is greater than the provided\
      \ threadhold.  This is good to keep variety.\n\n===ACTION_EndSection===\n\n\
      This is necessary to define the end of a conditional block of ACTIONs.\n\n===ACTION_GotoAction===\n\
      \nThis will send focus to another part of the script.\n\n===ACTION_TriggerEvent===\n\
      \nThis will trigger the provided Event and trigger those Actors with a matching\
      \ Tag.\n\n===ACTION_WaitForEvent===\n\nThis latent ACTION will pause the script's\
      \ focus until the provided Event is triggered.\n\n===ACTION_WaitForTimer===\n\
      \nThis latent ACTION will pause the script's focus for the provided number of\
      \ seconds.\n\n===ACTION_DestroyActor===\n\nThis will delete the Actor(s) with\
      \ a Tag that matches the provided name.\n\n===ACTION_ChangeScript===\n\nThis\
      \ will transfer control of the associate Pawn to the ScriptedSequence with a\
      \ matching Tag.\n\n==Custom ACTIONs==\n\nMany of the stock ACTIONs are left\
      \ over from UT and were never meant to effect the Monster's MonsterController.\
      \  To perform complex behavior like Patrolling, we'll need some custom SciptedActions\
      \ to take control of the Monster, give up control and detemine various aspects\
      \ of this relatively new object class.  For more on custom ScriptedActions,\
      \ see also [[Legacy:Creating And Using ScriptedActions|Creating And Using ScriptedActions]].\n\
      \n===ACTION_SpawnMonster===\n\nThis will spawn the provided Monster class and\
      \ automatically Possess it, unless otherwise configured.  Other options include\
      \ setting Tag for the Monster and it's MonsterController, if needed.  This particular\
      \ ScriptedAction is very useful in implementing Monsters in TeamGame maps. \
      \ By spawning them after match start, as opposed to explicitly placing them\
      \ in a map, you avoid the team imbalance problem described in the Overview above.\n\
      \n<uscript>\n//=============================================================================\n\
      // ACTION_SpawnMonster.\n// Spawn a Monster class and Possess unless bMonsterizeAtStart\
      \ is true.\n// by SuperApe\t-- Dec 2005\n//=============================================================================\n\
      class ACTION_SpawnMonster extends ScriptedAction;\n\nvar()\tclass<Monster>\t\
      \tMonsterClass;\nvar()\tname\t\t\t\tMonsterTag;\nvar()\tbool\t\t\t\tbMonsterizeAtStart;\n\
      var()\tname\t\t\t\tMonsterControllerTag;\n\nfunction bool InitActionFor( ScriptedController\
      \ C )\n{\n\tlocal\tMonster\t\t\t\tM;\n\tlocal\tMonsterController\tMC;\n\n\t\
      M = C.spawn( MonsterClass, C, MonsterTag, C.Location, C.Rotation );\n\tC.Pawn\
      \ = M;\n\n\tif ( bMonsterizeAtStart )\n\t\tM.Controller.Tag = MonsterControllerTag;\n\
      \telse\n\t{\n\t\tM.Controller.Unpossess();\n\t\tC.Possess( M );\n\t\tM.Controller\
      \ = C;\n\t\tM.AIScriptTag = C.Tag;\n\t}\n\n\treturn false;\n}\n</uscript>\n\n\
      ===ACTION_Monsterize===\n\nThis spawns a MonsterController for the Monster Pawn\
      \ and has the MonsterController Possess it.  This is what gets the Monsters\
      \ to begin to attack any player they see.\n\n<uscript>\n//=============================================================================\n\
      // ACTION_Monsterize.\n// Spawn a MonsterController for this Pawn and have it\
      \ possess the Pawn.\n// by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_Monsterize extends ScriptedAction;\n\nvar()\tname\tMonsterControllerTag;\n\
      \nfunction bool InitActionFor( ScriptedController C )\n{\n\tlocal\tMonsterController\
      \ \tMC;\n\n\tMC = C.spawn( class'MonsterController', None );\n\tMC.Tag = MonsterControllerTag;\n\
      \tMC.Possess( C.Pawn );\n\n\treturn false;\n}\n</uscript>\n\n===ACTION_PossessPawn===\n\
      \nThis Possesses the Monster Pawn matching the provided Tag, making it the currently\
      \ associated Pawn.  This will also destroy the previous Controller if it is\
      \ a MonsterController.  This is what stops the Monsters from attacking at will\
      \ and puts them under the control of this ScriptedSequence.  \n\n<uscript>\n\
      //=============================================================================\n\
      // ACTION_PossessPawn.\n// Possess the Pawn with the PawnTag.  Destroy any previous\
      \ MonsterController.\n// by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_PossessPawn extends ScriptedAction;\n\nvar()\tname\tPawnTag;\n\
      var\t\tbool\tbPawnExists;\n\nfunction bool InitActionFor( ScriptedController\
      \ C )\n{\n\tlocal\tPawn \t\t\tP;\n\tlocal\tMonsterController\tMC;\n\n\tbPawnExists\
      \ = false;\n\tforEach C.DynamicActors( class'Pawn', P, PawnTag )\n\t{\n\t\t\
      bPawnExists = true;\n\t\tif ( P.Controller.IsA('MonsterController') )\n\t\t\t\
      MC = MonsterController( P.Controller );\t\n\t\tP.Controller.Unpossess();\n\n\
      \t\tif ( P.Health > 0 )\n\t\t{\n\t\t\tC.Possess( P );\n\t\t\tP.Controller =\
      \ C;\n\t\t\tP.AIScriptTag = C.Tag;\n\t\t}\n\t\telse\n\t\t\tP.AIScriptTag = '';\n\
      \n\t\tif ( MC != None )\n\t\t\tMC.Destroy();\n\t}\n\tif ( !bPawnExists )\n\t\
      \tWarn(\"No Pawn with tag \"$PawnTag$\" exists!\");\n\n\treturn false;\n}\n\
      </uscript>\n\n===ACTION_IfMonsterHasEnemy===\n\nThis conditional is true if\
      \ the Monster Pawn's Controller.Enemy property is occupied.  Useful for situations\
      \ where you want to know if it's a good time to ACTION_PossessPawn, otherwise\
      \ you may want to keep it \"Monsterized\" and wait until the Enemy is gone.\n\
      \n<uscript>\n//=============================================================================\n\
      // ACTION_IfMonsterHasEnemy.\n// Conditional on Pawn.Controller.Enemy != None\n\
      // by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_IfMonsterHasEnemy extends ScriptedAction;\n\nfunction ProceedToNextAction(\
      \ ScriptedController C )\n{\n\tif ( !C.Pawn.IsA('Monster') )\n\t\tProceedToSectionEnd(\
      \ C );\n\n\tC.ActionNum += 1;\n\tif ( C.Pawn.Controller.Enemy == None )\n\t\t\
      ProceedToSectionEnd( C );\n}\n\nfunction bool StartsSection()\n{\n\treturn true;\n\
      }\n</uscript>\n\n===ACTION_IfMonsterSeesEnemy===\n\nThis conditional is true\
      \ based on the property MonsterController.bEnemyIsVisible.  Useful in the same\
      \ way that ACTION_IfMonsterHasEnemy is, but this will only be true if the Enemy\
      \ is visible.  So an Enemy that's ducked out of sight will cause this conditional\
      \ to be false.\n\n<uscript>\n//=============================================================================\n\
      // ACTION_IfMonsterSeesEnemy.\n// Conditional on MonsterController.bEnemyIsVisible\n\
      // by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_IfMonsterSeesEnemy extends ScriptedAction;\n\nfunction ProceedToNextAction(\
      \ ScriptedController C )\n{\n\tif ( !C.Pawn.IsA('Monster') || MonsterController(\
      \ C.Pawn.Controller ) == None )\n\t\tProceedToSectionEnd( C );\n\n\tC.ActionNum\
      \ += 1;\n\tif ( !MonsterController(C.Pawn.Controller).bEnemyIsVisible )\n\t\t\
      ProceedToSectionEnd( C );\n}\n\nfunction bool StartsSection()\n{\n\treturn true;\n\
      }\n</uscript>\n\n===ACTION_IfMonsterIsHurt===\n\nThis conditional is true if\
      \ the Pawn's Health is less than the provided HealthThreshold.  This works whether\
      \ the Monster is currently Monsterized or not.  It's useful to determine if\
      \ the ScriptedSequence should take control of a hurt Monster to move it to a\
      \ safer place, etc.\n\n<uscript>\n//=============================================================================\n\
      // ACTION_IfMonsterIsHurt.\n// Conditional on Pawn.Health < HealthThreshold\n\
      // by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_IfMonsterIsHurt extends ScriptedAction;\n\nvar()\tint\t\tHealthThreshold;\n\
      \nfunction ProceedToNextAction( ScriptedController C )\n{\n\tif ( !C.Pawn.IsA('Monster')\
      \ )\n\t\tProceedToSectionEnd( C );\n\n\tC.ActionNum += 1;\n\tif ( C.Pawn.Health\
      \ > HealthThreshold )\n\t\tProceedToSectionEnd( C );\n}\n\nfunction bool StartsSection()\n\
      {\n\treturn true;\n}\n</uscript>\n\n===ACTION_HealPawn===\n\nThis gives the\
      \ Pawn Health, up to it's MaxHealth, based on the provided HealAmount.  Ironically,\
      \ ACTION_HealActor doesn't work with Pawns.  This is useful in situations where\
      \ you'd like to keep the Monster around a bit longer.  In conjunction with ACTION_IfMonsterIsHurt,\
      \ this can be used to provide a kind of \"Healing Station\" for the Monster,\
      \ giving it a sophisticated combat tactic: Retreat to ''Live and fight another\
      \ day''.\n\n<uscript>\n//=============================================================================\n\
      // ACTION_HealPawn.\n// Calls Pawn.GiveHealth( HealAmount, HealthMax ).  Does\
      \ what HealActor can't.\n// by SuperApe -- Dec 2005\n//=============================================================================\n\
      class ACTION_HealPawn extends ScriptedAction;\n\nvar()\tint\t\tHealAmount;\n\
      \nfunction bool InitActionFor( ScriptedController C )\n{\n\tC.Pawn.GiveHealth(\
      \ HealAmount, int( C.Pawn.HealthMax ) );\n\n\treturn false;\n}\n</uscript>\n\
      \n==Further Development==\n\nThe possibilities are endless.  Some useful ACTIONs\
      \ to make include setting specific Properties or switching to behavior States.\
      \  Other custom ACTIONs should be appended here to this section.\n\n===ACTION_myCustomAction===\n\
      \n==Monster Tutorial==\n\nNow that we have the ScriptedActions available to\
      \ affect Monsters, we can begin to construct a complex Monster behavior patrolling\
      \ to guard an item in a map.  We will start with a MonsterFactory.  We will\
      \ give our Monsters a path to follow while on patrol.  We will keep track of\
      \ the item so the Monsters know when it's been taken.  We will also give our\
      \ Monsters a safe \"homebase\" where they can heal themselves when they're hurt.\n\
      \nWe will use a variety of actors to make this behavior happen.  We could do\
      \ it with one Dummy Pawn and one ScriptedSequence, however the ScriptedSequence\
      \ script would be <u>very</u> long and complex.  It's very easy to make a mistake\
      \ in a script that long, so we will break it up into manageable chunks and spread\
      \ the script around to several ScriptedSequences.\n\n===MonsterFactory===\n\n\
      A MonsterFactory starts with a Dummy Pawn and a ScriptedSequence.  The Dummy\
      \ -> AIScript -> AIScriptTag will match the ScriptedSequence -> Tag.  We will\
      \ place the Dummy at the spot we would like our Monsters to spawn.  We will\
      \ keep the ScriptedSequence close by, just for organization.\n\nThis MonsterFactory\
      \ script will consist of the following ScriptedActions:\n; [0] ACTION_TriggerEvent\
      \ : An emitter actor will be set up here to give some simple effects for our\
      \ spawning Monster.  We will match it's Tag, \"MonsterSpawnFX\", to this ACTION's\
      \ arguement.\n; [1] ACTION_PlaySound : A sound effect will also be played at\
      \ this point so both a visual and audial queue will signal to any close player\
      \ that a Monster is about to be spawned.\n; [2] ACTION_SpawnMonster : We will\
      \ spawn a [[Legacy:Krall|Krall]] and give it the MonsterTag, \"KrallPatrol\"\
      .  We will keep it's control on this script rather than Monsterizing it at start.\n\
      ; [3] ACTION_MoveToPoint : A nearby PathNode with a Tag set to, \"MonsterStart\"\
      , will be designated as the first spot our Monsters will move.  This will simply\
      \ get them out of the way of other Monsters.\n; [4] ACTION_TriggerEvent : This\
      \ action will signal the next ScriptedSequence that a Monster has been spawned\
      \ and moved to the MonsterStart spot.  This signal, Event \"MonsterToPatrol\"\
      , will start transferring control of the Monster to the next script.\n; [5]\
      \ ACTION_WaitForEvent : At this point, our MonsterFactory has done its job.\
      \  We will have it wait here for a signal to continue.  Our signal will be the\
      \ Event, \"MonsterSpawn\".\n; [6] ACTION_GotoAction : Once the signal is given,\
      \ we will goto the Action 0 to start this script again and spawn a new Monster.\n\
      \n===Patrolling===\n\nHere another ScriptedSequence will take over control of\
      \ the Monsters from our MonsterFactory.  A series of PathNodes will have Tags\
      \ that we will use to define the Patrol points for our Monsters.  Each Patrol\
      \ point will have a corresponding ScriptedSequence.  Our Patrolling scripts\
      \ will perform checks to make sure our Monsters are Monsterized to attack visible\
      \ enemies.  At various points, we will also give the Monsters the opportunity\
      \ to keep track of the item they are guarding and go to a safe healing place\
      \ if they need it.\n\nThe Patrolling script will have the following ScriptedActions:\n\
      ; [0] ACTION_WaitForEvent : This script waits for the Event, \"MonsterToPatrol\"\
      , as a signal to take control of the Monster.\n; [1] ACTION_PossessPawn : This\
      \ will take control of the Monster Pawn with the Tag, \"KrallPatrol\".\n; [2]\
      \ ACTION_MoveToPoint : We will send this Monster to the first Patrol point,\
      \ a PathNode with a Tag, \"Patrol1\".\n; [3] ACTION_Monsterize : We will give\
      \ the Monster the opportunity to attack any player it sees.  The MonsterControllerTag\
      \ will be, \"KrallMonster\".\n; [4] ACTION_WaitForTimer : We will have the Monster\
      \ wait 5 seconds while Monsterized.\n; [5] ACTION_IfMonsterSeesEnemy : This\
      \ conditional gives the Monster a chance to tell us if they see an Enemy while\
      \ at this Patrol point.\n; [6] ACTION_GotoAction : Send the script to Action\
      \ 4, to continue the attack for another 5 seconds.\n; [7] ACTION_EndSection\
      \ : This ends the conditional block for IfMonsterSeesEnemy.\n; [8] ACTION_TriggerEvent\
      \ : This will signal to the next Patrol script to take control of this Monster\
      \ and move it to the next Patrol point.  The Event to trigger will be, \"Patrol2\"\
      .\n; [9] ACTION_GotoAction : This script has done its job and should return\
      \ to the original state, at Action 0, waiting for the next Monster to take control\
      \ of.\n\nNow the next Patrol script and Patrol point will take over.  They will\
      \ look exactly like this one with the exception of some of the Tags.  The script\
      \ will be waiting for Event, \"Patrol2\".  The Patrol point PathNode and ACTION_MoveToPoint\
      \ will have the tag, \"Patrol2\".  When the script has finished checking to\
      \ see IfMonsterSeesEnemy, it will trigger the next Patrol script using Event,\
      \ \"Patrol3\".\n\nThis series of Patrol points and scripts will loop around\
      \ the Patrol path back to the first point, where the last Patrol script will\
      \ be triggering, \"MonsterToPatrol\", to signal the first Patrol script to take\
      \ over again.\n\n===Guarding An Item===\n\nIn our case, we will have the Monsters\
      \ guard a BombingRun [[Legacy:XBombFlag|xBombFlag]] at the [[Legacy:XBombSpawn|xBombSpawn]]\
      \ point.  This will force players to get through the Monster patrol to get the\
      \ BombFlag in order to score.\n\n===Healing===\n\n==External Links==\n* [http://forums.unrealplayground.com/showthread.php?t=37962\
      \ UnrealPlayground Forum topic, Monster Experiments] &ndash; Implementation\
      \ of Monsters via custom ScriptedActions.\n\n==Related Topics==\n* [[Legacy:Artificial\
      \ Intelligence|Artificial Intelligence]] &ndash; A super topic for all AI (bots,\
      \ NPCs, etc.)\n** [[Legacy:Monster Support|Monster Support]] &ndash; A hub for\
      \ all Monster Support topics.\n* [[Legacy:Monster|Monster]] &ndash; The UT2004\
      \ parent class of all Monsters.\n* [[Legacy:MonsterController|MonsterController]]\
      \ &ndash; The Controller class for Monsters.\n* [[Legacy:ScriptedPawn|ScriptedPawn]]\
      \ &ndash; The UT parent class for all Monsters and NPCs.\n* [[Legacy:AIScript|AIScript]]\n\
      ** [[Legacy:ScriptedSequence|ScriptedSequence]]\n*** [[Legacy:UnrealScriptedSequence|UnrealScriptedSequence]]\n\
      *** [[Legacy:ScriptedTrigger|ScriptedTrigger]]\n* [[Legacy:Trigger Systems|Trigger\
      \ Systems]]\n\n===Custom Content===\n* [[Legacy:SuperApe/Old_Skool_Monsta_Toolz|Old\
      \ Skool Monsta Toolz]] &ndash; A mod/mapping toolset for implementing monsters\
      \ and complex monster AI in any gametype for UT2004.\n\n==Discussion==\n\n'''SuperApe:'''\
      \ Created.  Working...\n\n'''SuperApe:''' These are okay.  It's beginning to\
      \ work.  There are a few key issues that need to be addressed:\n# With these\
      \ Actions, you can have the Monster attack <u>or</u> be controlled by the ScriptedSequence,\
      \ not both.  So, setting something akin to Alertness level is difficult.\n#\
      \ Technically, the MonsterController <u>will</u> \"teleport\" a Monster to a\
      \ PlayerStart after several seconds if it hasn't encountered a player.  Perhaps\
      \ another controller should be used anyway. (like a subclass that at least removes\
      \ that method)\n# A daisy chain of ScriptedSequences should work, but I've been\
      \ having problems.  (I haven't figured out why, but it intermitently \"misses\"\
      \ the Trigger for the next script.)\n\nSo, I'm beginning to think re-creating\
      \ the [[Legacy:HomeBase|HomeBase]], [[Legacy:AmbushPoint|AmbushPoint]], [[Legacy:AlarmPoint|AlarmPoint]]\
      \ and [[Legacy:PatrolPoint|PatrolPoint]] might be helpful in conjunction with\
      \ a modified [[Legacy:MonsterController|MonsterController]].\n\n'''Moofed:'''\
      \ Any progress on this?  I'll be learning monster scripting (very) soon and\
      \ this page looks useful.. until your comment about it not working.\n\n'''SuperApe:'''\
      \ Your timing is impecable. :)  I'm working on this now.  It's not that it ''doesn't''\
      \ work, it's that there are serious limitations without further development,\
      \ as I mention above.  At the moment, I'm right on the edge of either continuing\
      \ to use custom ScriptedActions (and making a lot more of them) or creating\
      \ a custom MonsterController that will include much of the functionality needed.\
      \  It's a bit of a mess to have both.  I will be updating this soon.\n\n'''Moofed:'''\
      \ ... What I will be learning monster scripting for (is) civilian pedestrians\
      \ and vehicles ... to recreate the GTA2 feel.\n\n'''SuperApe:''' So, you're\
      \ thinking more along the lines of an NPC?  This could be done with ScriptedSequences,\
      \ I suppose.  I might be a little too much to do, or a little too simple an\
      \ NPC.  This page is specifically talking about the problems using Monsters\
      \ with ScriptedSequences, so it's not gonna be directly applicable to what you\
      \ want to do.  Monsters are defined as a specific kind of NPC whose sole purpose\
      \ is to hunt down and kill players.  Civilians and pedestrians would be more\
      \ along the lines of a general NPC.  See [[Legacy:NPC Support|NPC Support]]\
      \ and describe for us what you'd like them to do.  Perhaps we can offer suggestions.\
      \ :)\n\n'''Moofed:''' It seemed relevant to what I want, but you're probably\
      \ right.  A custom controller would be better.  I'm making a personal page now\
      \ to descibe my ideas for this.\n\n'''SuperApe:''' Great.  Be glad to help.\
      \ :)\n\n----\n\n'''SuperApe:''' This page will be updated soon, but while I\
      \ like being able to use (mostly) stock objects to implement UT2004 Monsters,\
      \ there's some drastic limitations.  It's no where near as cool as original\
      \ ScriptedPawn Monsters used to be in UT.  While I may keep this tutorial the\
      \ same, I am beginning to recreate the older actors and code for the ScriptedPawn\
      \ AI, with all their functionality.  This will eventually include all the NavPoints,\
      \ a new Monster parent class that mimics some ScriptedPawn functionality, as\
      \ many individual Monsters as UT2004 has (with all their original functionality)\
      \ and a new ScriptedMonsterController which will handle the bulk of what ScriptedPawn\
      \ used to.  I suppose that qualifies as a different project, a different page,\
      \ but it related directly to and evolved from these experiments.  In the meantime,\
      \ I will try to finish up this tutorial as best I can using the custom work\
      \ already described above.\n\n'''SuperApe:''' This line of thinking has led\
      \ to a new project, [http://forums.unrealplayground.com/showthread.php?t=39783\
      \ Old Skool Monsta Toolz], implementing UT-style monsters in UT2004.  EDIT:\
      \ It has been publicly released.\n\n'''SuperApe:''' The current wiki page for\
      \ the OSMT project is here: [[Legacy:SuperApe/Old Skool Monsta Toolz|Old Skool\
      \ Monsta Toolz]].\n\n----\n\n[[:Category:Legacy Mapping]]\n\n[[:Category:Legacy\
      \ Tutorial]]\n\n[[:Category:Legacy To Do]] &ndash; SuperApe is working on a\
      \ tutorial. (This actually needs to be refactored, redone)\n[[Category:Legacy\
      \ Mapping|{{PAGENAME}}]]\n[[Category:Legacy Tutorial|{{PAGENAME}}]]\n[[Category:Legacy\
      \ To Do|{{PAGENAME}}]]"
  properties: []
  revId: 1588
name: "Legacy:A UT2004 Monster Tutorial"
revision:
  revid: 1588
  parentid: 1590
  user: "SuperApe"
  timestamp: 1158945438.000000000
  comment: "*"
timestamp: 1668766783.142076000
