---
parse:
  title: "Legacy:Message Interactions"
  text:
    text: "<p>Message mutators pick up all messages that are displayed on screen:\
      \ Who killed who, who picked up the flag, who took the ball in bombing run,\
      \ etc. What it will NOT pick up on though, is when you use the SAY command or\
      \ the TeamSay command.</p>\n<p>I suppose a reporter bot could be made using\
      \ one of these.</p>\n<p>First off, you need to make your mutator class that\
      \ will create your interaction. See <a href=\"/Legacy:Creating_An_Interaction_From_A_Mutator\"\
      \ title=\"Legacy:Creating An Interaction From A Mutator\">Creating An Interaction\
      \ From A Mutator</a> for this.</p>\n<p>Done that? Good...</p>\n<p>So thats the\
      \ mutator part done. Next is the easy part!&#160;:)</p>\n<p>A simple interaction:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">Class</span> MyInteraction\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Interaction</span>;\n\
      \ \n<span class=\"kw1\">Function</span> Initialize<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\"\
      >Log</span><span class=\"br0\">(</span><span class=\"st0\">\"Interaction Initialized\"\
      </span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Dont forget to add</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      >bActive<span class=\"sy0\">=</span><span class=\"kw6\">True</span></pre></div>\n\
      </div>\n<p>Under defaultproperties (else this interaction wont do anything).</p>\n\
      <p>Now, how to pick up the messages? Add this function:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> Message<span class=\"\
      br0\">(</span> <span class=\"kw1\">coerce</span> <span class=\"kw5\">string</span>\
      \ Msg, <span class=\"kw5\">float</span> MsgLife<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n<span class=\"co1\">//Do stuff here</span>\n<span\
      \ class=\"br0\">}</span></pre></div>\n</div>\n<p>\"Msg\", as you could guess,\
      \ is the message itself. MsgLife is how long it is diplayed on screen for.</p>\n\
      <p>That is all there is to it.</p>\n<p>If you wanted to log everything that\
      \ appeared on screen, your Interaction class would look like this:</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">Class</span> MyInteraction\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Interaction</span>;\n\
      \ \n<span class=\"kw1\">Function</span> Initialize<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw3\"\
      >Log</span><span class=\"br0\">(</span><span class=\"st0\">\"Interaction Initialized\"\
      </span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span\
      \ class=\"kw1\">function</span> Message<span class=\"br0\">(</span> <span class=\"\
      kw1\">coerce</span> <span class=\"kw5\">string</span> Msg, <span class=\"kw5\"\
      >float</span> MsgLife<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw3\">Log</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"Message:\"</span> <span class=\"sy0\">@</span> Msg<span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">DefaultProperties</span>\n\
      <span class=\"br0\">{</span>\nbActive<span class=\"sy0\">=</span><span class=\"\
      kw6\">True</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Thats\
      \ it.&#160;:)</p>\n<hr />\n<p><b>Will:</b> Any problems understanding this?\
      \ Anything I could do to make it clearer? If so: tell me, or do it yourself&#160;;)</p>\n\
      <p><b>Daid:</b> Is it possible to change the message with this code?</p>\n<p><b>Will:</b>\
      \ Afraid not. All it allows you to do is see the messages, log them, whatever.\
      \ It's a very basic function, and rather crap.</p>\n<p><b>Tyoma:</b> So message\
      \ mutators are dead?</p>\n<p><b>Wormbo:</b> Yes, they are. The only class that\
      \ is still allowed to modify messages is the BroadcastHandler which is spawned\
      \ as a per-GameInfo actor.</p>\n<p><b>Bob242:</b> So if I wanted to make a reporter\
      \ mutator for every type of message, including say and teamsay commands, it\
      \ would have to be client-side, right?</p>\n<p><b>Wormbo:</b> No, in UT2004\
      \ you can subclass <a href=\"/Legacy:BroadcastHandler\" title=\"Legacy:BroadcastHandler\"\
      >BroadcastHandler</a> and register it. See your UnrealScript source files for\
      \ details. (Someone should update the BroadcastHandler page with the UT2004\
      \ features...)</p>\n<p><b>Bob242:</b> Well, I'm working on writing a simple\
      \ mutator for a game using the same Engine as UT2003. So I would be kind of\
      \ stuck in this regard, correct? The best I can think of is to make a server\
      \ side mutator that uses an interaction that reads all of the messages placed\
      \ in the HUD... Sorry, I'm kind of new to UScript. Does this sound plausible?\
      \ I'm trying to read everything that goes into all clients' consoles.</p>\n\n\
      <!-- \nNewPP limit report\nCPU time usage: 0.084 seconds\nReal time usage: 0.172\
      \ seconds\nPreprocessor visited node count: 13/1000000\nPreprocessor generated\
      \ node count: 84/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2044-0!*!0!*!*!*!* and timestamp 20221117135637 and revision\
      \ id 4983\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Creating An Interaction From A Mutator"
  - ns: 100
    exists: true
    name: "Legacy:BroadcastHandler"
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Message Interactions"
  iwlinks: []
  wikitext:
    text: "Message mutators pick up all messages that are displayed on screen: Who\
      \ killed who, who picked up the flag, who took the ball in bombing run, etc.\
      \ What it will NOT pick up on though, is when you use the SAY command or the\
      \ TeamSay command.\n\nI suppose a reporter bot could be made using one of these.\n\
      \nFirst off, you need to make your mutator class that will create your interaction.\
      \ See [[Legacy:Creating An Interaction From A Mutator|Creating An Interaction\
      \ From A Mutator]] for this.\n\nDone that? Good...\n\nSo thats the mutator part\
      \ done. Next is the easy part! :)\n\nA simple interaction:\n\n<uscript>\nClass\
      \ MyInteraction extends Interaction;\n\nFunction Initialize()\n{\n    Log(\"\
      Interaction Initialized\");\n}\n</uscript>\n\nDont forget to add\n\n<uscript>\n\
      bActive=True\n</uscript>\n\nUnder defaultproperties (else this interaction wont\
      \ do anything).\n\nNow, how to pick up the messages? Add this function:\n\n\
      <uscript>\nfunction Message( coerce string Msg, float MsgLife)\n{\n//Do stuff\
      \ here\n}\n</uscript>\n\n\"Msg\", as you could guess, is the message itself.\
      \ MsgLife is how long it is diplayed on screen for.\n\nThat is all there is\
      \ to it.\n\nIf you wanted to log everything that appeared on screen, your Interaction\
      \ class would look like this:\n\n<uscript>\nClass MyInteraction extends Interaction;\n\
      \nFunction Initialize()\n{\n    Log(\"Interaction Initialized\");\n}\n\nfunction\
      \ Message( coerce string Msg, float MsgLife)\n{\n    Log(\"Message:\" @ Msg);\n\
      }\n\nDefaultProperties\n{\nbActive=True\n}\n</uscript>\n\nThats it. :)\n\n----\n\
      \n'''Will:''' Any problems understanding this? Anything I could do to make it\
      \ clearer? If so: tell me, or do it yourself ;)\n\n'''Daid:''' Is it possible\
      \ to change the message with this code?\n\n'''Will:''' Afraid not. All it allows\
      \ you to do is see the messages, log them, whatever. It's a very basic function,\
      \ and rather crap.\n\n'''Tyoma:''' So message mutators are dead?\n\n'''Wormbo:'''\
      \ Yes, they are. The only class that is still allowed to modify messages is\
      \ the BroadcastHandler which is spawned as a per-GameInfo actor.\n\n'''Bob242:'''\
      \ So if I wanted to make a reporter mutator for every type of message, including\
      \ say and teamsay commands, it would have to be client-side, right?\n\n'''Wormbo:'''\
      \ No, in UT2004 you can subclass [[Legacy:BroadcastHandler|BroadcastHandler]]\
      \ and register it. See your UnrealScript source files for details. (Someone\
      \ should update the BroadcastHandler page with the UT2004 features...)\n\n'''Bob242:'''\
      \ Well, I'm working on writing a simple mutator for a game using the same Engine\
      \ as UT2003.  So I would be kind of stuck in this regard, correct?  The best\
      \ I can think of is to make a server side mutator that uses an interaction that\
      \ reads all of the messages placed in the HUD...  Sorry, I'm kind of new to\
      \ UScript.  Does this sound plausible?  I'm trying to read everything that goes\
      \ into all clients' consoles."
  properties: []
  revId: 4983
name: "Legacy:Message Interactions"
revision:
  revid: 4983
  parentid: 4984
  user: "Toronto-HSE-ppp3855849.sympatico.ca"
  timestamp: 1092781547.000000000
  comment: "*"
timestamp: 1668774481.990558000
