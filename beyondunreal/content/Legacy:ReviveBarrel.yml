---
parse:
  title: "Legacy:ReviveBarrel"
  text:
    text: "<h2><span class=\"mw-headline\" id=\"Extending\">Extending</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:ReviveBarrel?section=1\" title=\"Edit section: Extending\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>A respawning\
      \ barrel.</p>\n<p>Remaining problems:</p>\n<ul>\n<li>no effect of any kind when\
      \ the barrel reappears. You might want some sort of swishy wizz or something</li>\n\
      <li>you can be standing where the barrel really is when it reappears, and then\
      \ you're sort of inside it</li>\n</ul>\n<p>To use this script in your map: <a\
      \ href=\"/Legacy:Create_A_Subclass\" title=\"Legacy:Create A Subclass\">Create\
      \ A Subclass</a>.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// ReviveBarrel.</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"kw1\">class</span> ReviveBarrel <span class=\"kw1\">extends</span>\
      \ Barrel;\n \n<span class=\"kw1\">var</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span> <span class=\"kw5\">float</span> TimeToRespawn;\n<span\
      \ class=\"kw1\">var</span> <span class=\"kw5\">int</span> InitialHealth;\n \n\
      <span class=\"kw1\">function</span> <span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw6\">super</span>.<span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n  InitialHealth <span\
      \ class=\"sy0\">=</span> Health;\n<span class=\"br0\">}</span>\n \n<span class=\"\
      kw1\">function</span> Vanish<span class=\"br0\">(</span><span class=\"kw5\"\
      >bool</span> bVanish<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  bHidden <span class=\"sy0\">=</span> bVanish;\n  bBlockActors <span class=\"\
      sy0\">=</span> <span class=\"sy0\">!</span>bVanish;\n  bBlockPlayers <span class=\"\
      sy0\">=</span> <span class=\"sy0\">!</span>bVanish;\n  bProjTarget <span class=\"\
      sy0\">=</span> <span class=\"sy0\">!</span>bVanish;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span>\
      \ Frag<span class=\"br0\">(</span>class<span class=\"sy0\">&lt;</span>fragment<span\
      \ class=\"sy0\">&gt;</span> FragType, <span class=\"kw5\">vector</span> Momentum,\
      \ <span class=\"kw5\">float</span> DSize, <span class=\"kw5\">int</span> NumFrags<span\
      \ class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> <span class=\"kw5\">int</span> i;\n  <span class=\"kw1\">local</span>\
      \ <span class=\"kw9\">actor</span> A, Toucher;\n  <span class=\"kw1\">local</span>\
      \ Fragment s;\n \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>\
      \ bOnlyTriggerable <span class=\"br0\">)</span>\n    <span class=\"kw2\">return</span>;\
      \ \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"\
      kw1\">Event</span><span class=\"sy0\">!=</span><span class=\"st0\">''</span><span\
      \ class=\"br0\">)</span>\n    <span class=\"kw2\">foreach</span> <span class=\"\
      kw2\">AllActors</span><span class=\"br0\">(</span> <span class=\"kw1\">class</span>\
      \ <span class=\"st0\">'Actor'</span>, A, <span class=\"kw1\">Event</span> <span\
      \ class=\"br0\">)</span>\n      A.<span class=\"kw4\">Trigger</span><span class=\"\
      br0\">(</span> Toucher, <span class=\"kw9\">pawn</span><span class=\"br0\">(</span>Toucher<span\
      \ class=\"br0\">)</span> <span class=\"br0\">)</span>;\n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span> Region.<span class=\"me0\">Zone</span>.<span\
      \ class=\"me0\">bDestructive</span> <span class=\"br0\">)</span>\n  <span class=\"\
      br0\">{</span>\n    <span class=\"kw4\">Destroy</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n    <span class=\"kw2\">return</span>;\n  <span class=\"\
      br0\">}</span>\n  <span class=\"kw2\">for</span> <span class=\"br0\">(</span>i<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">0</span> ; i<span class=\"sy0\"\
      >&lt;</span>NumFrags ; i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\
      \ \n  <span class=\"br0\">{</span>\n    s <span class=\"sy0\">=</span> <span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span> FragType, <span class=\"\
      kw7\">Owner</span><span class=\"br0\">)</span>;\n    s.<span class=\"me0\">CalcVelocity</span><span\
      \ class=\"br0\">(</span>Momentum,<span class=\"nu0\">0</span><span class=\"\
      br0\">)</span>;\n    s.<span class=\"kw7\">DrawScale</span> <span class=\"sy0\"\
      >=</span> DSize<span class=\"sy0\">*</span><span class=\"nu0\">0.5</span><span\
      \ class=\"sy0\">+</span><span class=\"nu0\">0.7</span><span class=\"sy0\">*</span>DSize<span\
      \ class=\"sy0\">*</span><span class=\"kw3\">FRand</span><span class=\"br0\"\
      >(</span><span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n \n\
      \  <span class=\"kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"\
      st0\">'Absent'</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">state</span> Absent \n<span class=\"br0\">{</span>\n\
      <span class=\"kw2\">Begin</span>:\n  Health <span class=\"sy0\">=</span> InitialHealth;\
      \ <span class=\"co1\">// restore health</span>\n  Vanish<span class=\"br0\"\
      >(</span><span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n \n \
      \ <span class=\"kw4\">Sleep</span><span class=\"br0\">(</span> TimeToRespawn\
      \ <span class=\"br0\">)</span>;\n \n  Vanish<span class=\"br0\">(</span><span\
      \ class=\"kw6\">false</span><span class=\"br0\">)</span>;\n \n  <span class=\"\
      kw3\">GotoState</span><span class=\"br0\">(</span><span class=\"st0\">'Animate'</span><span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p><b>Wormbo:</b> You should toggle bHidden instead of changing the DrawType.</p>\n\
      <p><b>Tarquin:</b> Thanks&#160;:) Had to sort out blocking as well. Mych will\
      \ not like me calling that function Vanish() but I can't think of a better name&#160;:(</p>\n\
      <p><b>Wormbo:</b> What about \"SetVisibility\" or \"SetHidden\"?</p>\n<p><b>Tarquin:</b>\
      \ Great! Thanks&#160;:)</p>\n<p><b>Foxpaw:</b> It might not hurt to have both,\
      \ sort of. It's a little bit of overhead at the interpreter level, but not that\
      \ big of a deal. In my GUI classes I use a SetHidden function, then a Show and\
      \ Hide function that are just one-line functions that call SetHidden( false\
      \ ) and SetHidden( true ) respectively. Effectively it's the same, but I guess\
      \ it kind of helps the readability. If you're into that sort of thing.&#160;:D</p>\n\
      <p><b>Tarquin:</b> I was thinking this could make a tutorial about subclassing\
      \ and states, but it's not very neat what with inheriting one state from Barrel\
      \ and a load of code from Decoration. So I guess for SetHidden it's a case of\
      \ what's clearest for people to read. Your idea of Show() just being a call\
      \ to setHidden is neat, but I don't know how easy to grasp it would be.</p>\n\
      <p><b>Dirk Fist:</b> I call that a wrapper function, and it can greatly increase\
      \ the readability of complex code. Although its impact here is minimal. If you\
      \ put the definition of Hide() and Show() immediately above SetHidden() the\
      \ relationship is clear to anyone that looks.</p>\n<p><b>xX)(Xx:</b> Doesnt\
      \ appear to work for some reason</p>\n<p><b>MythOpus:</b> I do believe this\
      \ script can be used only for Unreal 1 and MAYBE Unreal Tournament. Anything\
      \ higher than those games wouldn't have the class 'Barrel'.</p>\n<p><b>Bullet:</b>\
      \ And what about replication here? Don't we need to replicate the two new variables?</p>\n\
      <p><b>Wormbo:</b> No, damage and respawning is handled on the serverside.</p>\n\
      <p><b>LionsPhil:</b> Pedantically, unless UT's interpreter does automatic inlining\
      \ of functions (and maybe it does – it's got to be fairly optimised, and possibly\
      \ optimising), the Hide()/Show() wrappers will add an extra stack frame when\
      \ calling and cause a <i>tiny</i> performance hit. This is probably not measurable,\
      \ however.</p>\n<p><b>Foxpaw:</b> It doesn't automatically make functions inline\
      \ - doing so would prevent polymorphism from working properly. An eye toward\
      \ polymorphism is possibly why it was implemented that way, plus it looks a\
      \ bit cleaner, I guess. Technically if you did put those functions inline you\
      \ could replace the variable lookups with constant values and then eliminate\
      \ the inversion operations too. However, in this instance we are looking at\
      \ something a function that will get called at most once in a few seconds, and\
      \ the runtime of it as-is is in the nanoseconds.</p>\n<p>Personally I would\
      \ probrably optimize it, but for this page, I think that readability to novice\
      \ coders is more important than the speed gain.</p>\n<p><b>AlexKotsch</b> I\
      \ made a respawning barrel and it doesn't have the problem of being inside the\
      \ barrel</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"co1\"\
      >//-----------------------------------------------------------</span>\n<span\
      \ class=\"co1\">//</span>\n<span class=\"co1\">//-----------------------------------------------------------</span>\n\
      <span class=\"kw1\">class</span> DECO_Barrel <span class=\"kw1\">extends</span>\
      \ DECO_Smashable;\n \n<span class=\"co2\">#exec OBJ LOAD FILE=..\\StaticMeshes\\\
      ONS-BPJW1.usx</span>\n \n<span class=\"co1\">//=============================================================================</span>\n\
      <span class=\"co1\">// defaultproperties</span>\n<span class=\"co1\">//=============================================================================</span>\n\
      \ \n<span class=\"kw1\">var</span>   <span class=\"kw5\">float</span>    Damage;\n\
      <span class=\"kw1\">var</span>\t  <span class=\"kw5\">float</span>\t   DamageRadius;\n\
      <span class=\"kw1\">var</span>   <span class=\"kw5\">float</span>\t   MomentumTransfer;\n\
      <span class=\"kw1\">var</span>   class<span class=\"sy0\">&lt;</span>DamageType<span\
      \ class=\"sy0\">&gt;</span>\t   MyDamageType;\n<span class=\"kw1\">var</span>\
      \ <span class=\"kw5\">int</span> Ted;\n<span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">int</span> MaxTed;\n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">float</span> TedRate;\n \n  <span class=\"kw1\">function</span> BreakApart<span\
      \ class=\"br0\">(</span><span class=\"kw5\">vector</span> HitLocation, <span\
      \ class=\"kw5\">vector</span> momentum<span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n\t<span class=\"co1\">// If we are single player or on a listen\
      \ server, just spawn the actor, otherwise</span>\n\t<span class=\"co1\">// bHidden\
      \ will trigger the effect</span>\n \n\t<span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw7\">Level</span>.<span class=\"me0\">NetMode</span>\
      \ <span class=\"sy0\">==</span> NM_ListenServer <span class=\"sy0\">||</span>\
      \ <span class=\"kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span\
      \ class=\"sy0\">==</span> NM_StandAlone<span class=\"br0\">)</span>\n\t<span\
      \ class=\"br0\">{</span>\n\t\t<span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span> <span class=\"br0\">(</span>EffectWhenDestroyed<span class=\"sy0\"\
      >!=</span><span class=\"kw5\">None</span> <span class=\"br0\">)</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> EffectIsRelevant<span class=\"br0\">(</span><span\
      \ class=\"kw7\">location</span>,<span class=\"kw6\">false</span><span class=\"\
      br0\">)</span> <span class=\"br0\">)</span>\n\t\t\t<span class=\"kw4\">Spawn</span><span\
      \ class=\"br0\">(</span> EffectWhenDestroyed, <span class=\"kw7\">Owner</span>,,\
      \ <span class=\"kw7\">Location</span> <span class=\"br0\">)</span>;\n\t<span\
      \ class=\"br0\">}</span>\n \n\t<span class=\"kw3\">gotostate</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Exploding'</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">state</span> Exploding\n\
      <span class=\"br0\">{</span>\n\t<span class=\"kw1\">function</span> <span class=\"\
      kw3\">BeginState</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      \t<span class=\"br0\">{</span>\n\t\t<span class=\"kw6\">super</span>.<span class=\"\
      kw3\">BeginState</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      \t\t<span class=\"kw4\">PlaySound</span><span class=\"br0\">(</span><span class=\"\
      kw5\">sound</span><span class=\"st0\">'WeaponSounds.BExplosion3'</span>,,<span\
      \ class=\"nu0\">2.5</span><span class=\"sy0\">*</span><span class=\"kw7\">TransientSoundVolume</span><span\
      \ class=\"br0\">)</span>;\n\t\tTed <span class=\"sy0\">=</span> <span class=\"\
      nu0\">1</span>;\n\t\t   <span class=\"kw4\">SetTimer</span><span class=\"br0\"\
      >(</span>TedRate, <span class=\"kw6\">true</span><span class=\"br0\">)</span>;\n\
      \                   <span class=\"kw4\">Timer</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;\n                <span class=\"br0\">}</span>\n \n\
      \                \t<span class=\"br0\">}</span>\n \n <span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw4\">Timer</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n\t<span class=\"br0\"\
      >{</span>\n\t\tTed <span class=\"sy0\">=</span> Ted<span class=\"sy0\">++</span>;\n\
      \        \t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>Ted <span\
      \ class=\"sy0\">==</span> MaxTed<span class=\"br0\">)</span>\n\t        <span\
      \ class=\"br0\">{</span>\n        \t\t<span class=\"kw4\">SetTimer</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"kw6\"\
      >false</span><span class=\"br0\">)</span>;\n                         \tBlowUp<span\
      \ class=\"br0\">(</span><span class=\"kw7\">Location</span><span class=\"br0\"\
      >)</span>;\n                <span class=\"br0\">}</span>\n                 \
      \ <span class=\"br0\">}</span>\n \n<span class=\"kw1\">function</span> BlowUp<span\
      \ class=\"br0\">(</span><span class=\"kw5\">vector</span> <span class=\"kw7\"\
      >Location</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \t<span class=\"kw4\">HurtRadius</span><span class=\"br0\">(</span>Damage, DamageRadius,\
      \ MyDamageType, MomentumTransfer, <span class=\"kw7\">Location</span> <span\
      \ class=\"br0\">)</span>;\n\t\t<span class=\"kw3\">gotostate</span><span class=\"\
      br0\">(</span><span class=\"st0\">'Broken'</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n     MaxTed<span class=\"sy0\">=</span><span class=\"\
      nu0\">15</span>\n     TedRate<span class=\"sy0\">=</span>.025\n     bImperviusToPlayer<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span>\n     EffectWhenDestroyed<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\"\
      >'UT2k4Assault.FX_ExplodingBarrel'</span>\n     Health<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">50</span>\n     <span class=\"kw7\">DrawType</span><span class=\"\
      sy0\">=</span><span class=\"kw7\">DT_StaticMesh</span>\n     <span class=\"\
      kw5\">StaticMesh</span><span class=\"sy0\">=</span><span class=\"kw5\">StaticMesh</span><span\
      \ class=\"st0\">'AS_Decos.ExplodingBarrel'</span>\n     DamageRadius<span class=\"\
      sy0\">=</span><span class=\"nu0\">90.000000</span>\n     Damage<span class=\"\
      sy0\">=</span><span class=\"nu0\">90.000000</span>\n     MomentumTransfer<span\
      \ class=\"sy0\">=</span><span class=\"nu0\">50000.000000</span>\n     MyDamageType<span\
      \ class=\"sy0\">=</span><span class=\"kw1\">Class</span><span class=\"st0\"\
      >'XWeapons.DamTypeRocket'</span>\n     PrePivot<span class=\"sy0\">=</span><span\
      \ class=\"br0\">(</span>Z<span class=\"sy0\">=</span><span class=\"nu0\">40.000000</span><span\
      \ class=\"br0\">)</span>\n     AmbientGlow<span class=\"sy0\">=</span><span\
      \ class=\"nu0\">48</span>\n     <span class=\"kw7\">CollisionRadius</span><span\
      \ class=\"sy0\">=</span><span class=\"nu0\">25.000000</span>\n     <span class=\"\
      kw7\">CollisionHeight</span><span class=\"sy0\">=</span><span class=\"nu0\"\
      >32.000000</span>\n<span class=\"br0\">}</span></pre></div>\n</div>\n\n<!--\
      \ \nNewPP limit report\nCPU time usage: 0.093 seconds\nReal time usage: 0.095\
      \ seconds\nPreprocessor visited node count: 10/1000000\nPreprocessor generated\
      \ node count: 64/1000000\nPost‐expand include size: 24/2097152 bytes\nTemplate\
      \ argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser\
      \ function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:2716-0!*!0!*!*!*!* and timestamp 20221118160400 and revision\
      \ id 6457\n -->\n"
  categories:
  - sortkey: "ReviveBarrel"
    name: "Legacy_Custom_Class_(UT2004)"
  - sortkey: "ReviveBarrel"
    name: "Legacy_Custom_Class_(UT)"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Create A Subclass"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Extending"
    number: "1"
    index: "1"
    fromtitle: "Legacy:ReviveBarrel"
    byteoffset: 0
    anchor: "Extending"
  displaytitle: "Legacy:ReviveBarrel"
  iwlinks: []
  wikitext:
    text: "==Extending  ==\n\nA respawning barrel.\n\nRemaining problems:\n* no effect\
      \ of any kind when the barrel reappears. You might want some sort of swishy\
      \ wizz or something\n* you can be standing where the barrel really is when it\
      \ reappears, and then you're sort of inside it\n\nTo use this script in your\
      \ map: [[Legacy:Create A Subclass|Create A Subclass]].\n\n<uscript>\n//=============================================================================\n\
      // ReviveBarrel.\n//=============================================================================\n\
      class ReviveBarrel extends Barrel;\n\nvar() float TimeToRespawn;\nvar int InitialHealth;\n\
      \nfunction PreBeginPlay()\n{\n  super.PreBeginPlay();\n  InitialHealth = Health;\n\
      }\n\nfunction Vanish(bool bVanish)\n{\n  bHidden = bVanish;\n  bBlockActors\
      \ = !bVanish;\n  bBlockPlayers = !bVanish;\n  bProjTarget = !bVanish;\n}\n\n\
      simulated function Frag(class<fragment> FragType, vector Momentum, float DSize,\
      \ int NumFrags) \n{\n  local int i;\n  local actor A, Toucher;\n  local Fragment\
      \ s;\n\n  if ( bOnlyTriggerable )\n    return; \n  if (Event!='')\n    foreach\
      \ AllActors( class 'Actor', A, Event )\n      A.Trigger( Toucher, pawn(Toucher)\
      \ );\n  if ( Region.Zone.bDestructive )\n  {\n    Destroy();\n    return;\n\
      \  }\n  for (i=0 ; i<NumFrags ; i++) \n  {\n    s = Spawn( FragType, Owner);\n\
      \    s.CalcVelocity(Momentum,0);\n    s.DrawScale = DSize*0.5+0.7*DSize*FRand();\n\
      \  }\n\n  GotoState('Absent');\n}\n\nstate Absent \n{\nBegin:\n  Health = InitialHealth;\
      \ // restore health\n  Vanish(true);\n\n  Sleep( TimeToRespawn );\n\n  Vanish(false);\n\
      \n  GotoState('Animate');\n}\n\n</uscript>\n\n'''Wormbo:''' You should toggle\
      \ bHidden instead of changing the DrawType.\n\n'''Tarquin:''' Thanks :) Had\
      \ to sort out blocking as well. Mych will not like me calling that function\
      \ Vanish() but I can't think of a better name :(\n\n'''Wormbo:''' What about\
      \ \"SetVisibility\" or \"SetHidden\"?\n\n'''Tarquin:''' Great! Thanks :)\n\n\
      '''Foxpaw:''' It might not hurt to have both, sort of. It's a little bit of\
      \ overhead at the interpreter level, but not that big of a deal. In my GUI classes\
      \ I use a SetHidden function, then a Show and Hide function that are just one-line\
      \ functions that call SetHidden( false ) and SetHidden( true ) respectively.\
      \ Effectively it's the same, but I guess it kind of helps the readability. If\
      \ you're into that sort of thing. :D\n\n'''Tarquin:''' I was thinking this could\
      \ make a tutorial about subclassing and states, but it's not very neat what\
      \ with inheriting one state from Barrel and a load of code from Decoration.\
      \ So I guess for SetHidden it's a case of what's clearest for people to read.\
      \ Your idea of Show() just being a call to setHidden is neat, but I don't know\
      \ how easy to grasp it would be.\n\n'''Dirk Fist:''' I call that a wrapper function,\
      \ and it can greatly increase the readability of complex code. Although its\
      \ impact here is minimal. If you put the definition of Hide() and Show() immediately\
      \ above SetHidden() the relationship is clear to anyone that looks.\n\n'''xX)(Xx:'''\
      \ Doesnt appear to work for some reason\n\n'''MythOpus:'''  I do believe this\
      \ script can be used only for Unreal 1 and MAYBE Unreal Tournament.  Anything\
      \ higher than those games wouldn't have the class 'Barrel'.\n\n'''Bullet:'''\
      \ And what about replication here? Don't we need to replicate the two new variables?\n\
      \n'''Wormbo:''' No, damage and respawning is handled on the serverside.\n\n\
      '''LionsPhil:''' Pedantically, unless UT's interpreter does automatic inlining\
      \ of functions (and maybe it does &ndash; it's got to be fairly optimised, and\
      \ possibly optimising), the Hide()/Show() wrappers will add an extra stack frame\
      \ when calling and cause a ''tiny'' performance hit. This is probably not measurable,\
      \ however.\n\n'''Foxpaw:''' It doesn't automatically make functions inline -\
      \ doing so would prevent polymorphism from working properly. An eye toward polymorphism\
      \ is possibly why it was implemented that way, plus it looks a bit cleaner,\
      \ I guess. Technically if you did put those functions inline you could replace\
      \ the variable lookups with constant values and then eliminate the inversion\
      \ operations too. However, in this instance we are looking at something a function\
      \ that will get called at most once in a few seconds, and the runtime of it\
      \ as-is is in the nanoseconds.\n\nPersonally I would probrably optimize it,\
      \ but for this page, I think that readability to novice coders is more important\
      \ than the speed gain.\n\n'''AlexKotsch''' I made a respawning barrel and it\
      \ doesn't have the problem of being inside the barrel\n\n<uscript>\n//-----------------------------------------------------------\n\
      //\n//-----------------------------------------------------------\nclass DECO_Barrel\
      \ extends DECO_Smashable;\n\n#exec OBJ LOAD FILE=..\\StaticMeshes\\ONS-BPJW1.usx\n\
      \n//=============================================================================\n\
      // defaultproperties\n//=============================================================================\n\
      \nvar   float    Damage;\nvar\t  float\t   DamageRadius;\nvar   float\t   MomentumTransfer;\n\
      var   class<DamageType>\t   MyDamageType;\nvar int Ted;\nvar int MaxTed;\nvar\
      \ float TedRate;\n\n  function BreakApart(vector HitLocation, vector momentum)\n\
      {\n\t// If we are single player or on a listen server, just spawn the actor,\
      \ otherwise\n\t// bHidden will trigger the effect\n\n\tif (Level.NetMode ==\
      \ NM_ListenServer || Level.NetMode == NM_StandAlone)\n\t{\n\t\tif ( (EffectWhenDestroyed!=None\
      \ ) && EffectIsRelevant(location,false) )\n\t\t\tSpawn( EffectWhenDestroyed,\
      \ Owner,, Location );\n\t}\n\n\tgotostate('Exploding');\n}\n\nstate Exploding\n\
      {\n\tfunction BeginState()\n\t{\n\t\tsuper.BeginState();\n\t\tPlaySound(sound'WeaponSounds.BExplosion3',,2.5*TransientSoundVolume);\n\
      \t\tTed = 1;\n\t\t   SetTimer(TedRate, true);\n                   Timer();\n\
      \                }\n\n                \t}\n                \t\n simulated function\
      \ Timer()\n\t{\n\t\tTed = Ted++;\n        \tif (Ted == MaxTed)\n\t        {\n\
      \        \t\tSetTimer(0.0, false);\n                         \tBlowUp(Location);\n\
      \                }\n                  }\n\nfunction BlowUp(vector Location)\n\
      {\n\tHurtRadius(Damage, DamageRadius, MyDamageType, MomentumTransfer, Location\
      \ );\n\t\tgotostate('Broken');\n}\n\ndefaultproperties\n{\n     MaxTed=15\n\
      \     TedRate=.025\n     bImperviusToPlayer=False\n     EffectWhenDestroyed=Class'UT2k4Assault.FX_ExplodingBarrel'\n\
      \     Health=50\n     DrawType=DT_StaticMesh\n     StaticMesh=StaticMesh'AS_Decos.ExplodingBarrel'\n\
      \     DamageRadius=90.000000\n     Damage=90.000000\n     MomentumTransfer=50000.000000\n\
      \     MyDamageType=Class'XWeapons.DamTypeRocket'\n     PrePivot=(Z=40.000000)\n\
      \     AmbientGlow=48\n     CollisionRadius=25.000000\n     CollisionHeight=32.000000\n\
      }\n\n</uscript>\n[[Category:Legacy Custom Class (UT)|{{PAGENAME}}]]\n[[Category:Legacy\
      \ Custom Class (UT2004)|{{PAGENAME}}]]"
  properties: []
  revId: 6457
name: "Legacy:ReviveBarrel"
revision:
  revid: 6457
  parentid: 0
  user: "Sweavo"
  timestamp: 1195404690.000000000
  comment: "*"
timestamp: 1668787289.115409000
