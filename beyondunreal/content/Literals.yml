---
parse:
  title: "Literals"
  text:
    text: "<p>Literals in general are notations that represent a value. This article\
      \ describes the types of literals available in <a href=\"/UnrealScript\" title=\"\
      UnrealScript\">UnrealScript</a>.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\"\
      >\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Numbers\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Numbers</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Integer_numbers\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">Integer numbers</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"\
      ><a href=\"#Float_numbers\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">Float numbers</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Other_ways_to_specify_numbers\"><span class=\"tocnumber\">1.3</span>\
      \ <span class=\"toctext\">Other ways to specify numbers</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Boolean_values\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Boolean values</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#Strings\"><span class=\"tocnumber\"\
      >3</span> <span class=\"toctext\">Strings</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-7\"><a href=\"#Names\"><span class=\"tocnumber\">4</span> <span\
      \ class=\"toctext\">Names</span></a></li>\n<li class=\"toclevel-1 tocsection-8\"\
      ><a href=\"#Enums\"><span class=\"tocnumber\">5</span> <span class=\"toctext\"\
      >Enums</span></a></li>\n<li class=\"toclevel-1 tocsection-9\"><a href=\"#Objects\"\
      ><span class=\"tocnumber\">6</span> <span class=\"toctext\">Objects</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-10\"><a href=\"#Structs\"><span class=\"tocnumber\"\
      >7</span> <span class=\"toctext\">Structs</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Vectors\"><span class=\"tocnumber\">7.1</span>\
      \ <span class=\"toctext\">Vectors</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"\
      ><a href=\"#Rotators\"><span class=\"tocnumber\">7.2</span> <span class=\"toctext\"\
      >Rotators</span></a></li>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"\
      #Range\"><span class=\"tocnumber\">7.3</span> <span class=\"toctext\">Range</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-14\"><a href=\"#Functions\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">Functions</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Numbers\">Numbers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Literals?section=1\" title=\"Edit section: Numbers\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>In UnrealScript,\
      \ all numeric literals start with a digit. Numeric literals can either stand\
      \ for an integer or a floating point value and may be prefixed with a minus\
      \ sign.</p>\n<h3><span class=\"mw-headline\" id=\"Integer_numbers\">Integer\
      \ numbers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Literals?section=2\" title=\"Edit section: Integer\
      \ numbers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The UnrealScript compiler knows two types of integer literals: decimal and\
      \ hexadecimal. Decimal literals only consist of the decimal digits 0 to 9, while\
      \ hexadecimal literals start with <code>0x</code>, directly followed by the\
      \ hexadecimal digits 0 to 9 and A to F. Upper- and lowercase letters can be\
      \ mixed freely in hexadecimal literals.</p>\n<p><b>Examples:</b></p>\n<dl>\n\
      <dd><code>123</code></dd>\n<dd><code>0xC0FFEE</code></dd>\n<dd><code>010</code></dd>\n\
      </dl>\n<p>The first example is a typical decimal literal that can represent\
      \ a <a href=\"/Types#Byte\" title=\"Types\">byte</a> or <a href=\"/Types#Int\"\
      \ title=\"Types\">int</a> value, while the second example is a hexadecimal literal\
      \ that exceeds the byte range and definitely stands for a value of type int.\
      \ The third example is <i>not</i> octal, but just a decimal literal with a leading\
      \ zero representing the value ten.</p>\n<h3><span class=\"mw-headline\" id=\"\
      Float_numbers\">Float numbers</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Literals?section=3\" title=\"\
      Edit section: Float numbers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Types#Float\" title=\"Types\">Floating\
      \ point</a> literals always start with one or more digits, followed by a decimal\
      \ dot. After the dot, there may be zero or more decimal digits.</p>\n<p><b>Examples:</b></p>\n\
      <dl>\n<dd><code>1.0</code></dd>\n<dd><code>123.456</code></dd>\n<dd><code>987.</code></dd>\n\
      </dl>\n<p>Note that you can't use the comma as decimal separator, even if that's\
      \ the standard way to display decimal fractions on your system.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Other_ways_to_specify_numbers\">Other ways to specify\
      \ numbers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Literals?section=4\" title=\"Edit section: Other ways\
      \ to specify numbers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The compiler recognizes any \"glob\" consisting of digits, the letters A\
      \ to F, the letter X and the decimal dot as a number, as long as it starts with\
      \ a digit. If it contains an X then it's treated as hexadecimal integer literal,\
      \ if it contains a dot it's treated as floating point literal, otherwise it's\
      \ a decimal integer literal.</p>\n<p>This loose interpretation allows two additional\
      \ number notations: octal integer literals and scientific floating point literals,\
      \ the latter only with unsigned exponent, though. An octal integer literal starts\
      \ with <code>0</code>, followed by any combination of the octal digits 0 to\
      \ 7. It also needs to include the letter X, otherwise it will be treated as\
      \ decimal integer literal.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>0123456789ax</code></dd>\n\
      <dd><code>123456789ax</code></dd>\n</dl>\n<p>The first example is interpreted\
      \ as the value 1234567<sub>oct</sub>, which is the same as 342391<sub>dec</sub>.\
      \ The character 8 is no valid octal digit and thus terminates the value. The\
      \ compiler takes the entire number glob, sees the X in it and passes it to the\
      \ generic number parser. That one sees the leading zero, not followed by an\
      \ X and treats the literal as octal. The second example contains an X, but does\
      \ not start with a 0, so it is actually treated as decimal literal and stands\
      \ for the value 123456789<sub>dec</sub>. It contains the letter A, but it doesn't\
      \ start with <code>0x</code>, so it's not a hexadecimal literal and the number\
      \ parser stops when it arrives at the A.</p>\n<p>A scientific floating point\
      \ literal starts like a normal floating point literal, but after the decimal\
      \ dot and optional decimal places there's the letter D or E, followed by one\
      \ or more digits.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>1.5e2</code></dd>\n\
      <dd><code>1.5d2</code></dd>\n<dd><code>1.5e+2</code></dd>\n<dd><code>1.5e-2</code></dd>\n\
      <dd><code>1.f</code></dd>\n</dl>\n<p>Only the first two examples actually are\
      \ actually a single literal. The next two examples really represent the expressions\
      \ 1.5 +/- 2.0 respectively. The last example can be found quite often in the\
      \ <a href=\"/Unreal_Tournament_2004\" title=\"Unreal Tournament 2004\">UT2004</a>\
      \ script code and is nothing else than the value 1.0 expressed in a way C++\
      \ and Java programmers immediately recognize as a float value. You could, in\
      \ fact, also write 1.a and it would mean the exact same thing in UnrealScript.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Boolean_values\">Boolean values</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Literals?section=5\" title=\"Edit section: Boolean values\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><a href=\"/Types#Bool\"\
      \ title=\"Types\">Boolean</a> literals are quick to explain. There are only\
      \ two of them, <code>True</code> and <code>False</code>. Both are case-insensitive,\
      \ like any other identifiers in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a>, so \"true\" and \"tRuE\" are the same thing to the compiler.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Strings\">Strings</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Literals?section=6\"\
      \ title=\"Edit section: Strings\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><a href=\"/Types#String\" title=\"Types\">String</a>\
      \ literals start and end with double quotes. Between these there may be any\
      \ number of characters, except line breaks. To include a double quote or backslash\
      \ character in the string, it must be \"escaped\" by a(nother) backslash character.\
      \ Starting with Unreal Engine 3, strings can also contain other escape sequences,\
      \ such as \\n for a newline character. In Unreal Engine 1 and 2 escaped letters\
      \ only stand for themselves, i.e. the string \"\\n\" is absolutely equal to\
      \ the string \"n\" there.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>\"abc\"\
      </code></dd>\n<dd><code>\"This is an \\\"example\\\".\"</code></dd>\n<dd><code><code>\"\
      \"</code></code></dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"Names\">Names</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Literals?section=7\" title=\"Edit section: Names\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><a href=\"/Types#Name\"\
      \ title=\"Types\">Name</a> literals are similar to strings. They are enclosed\
      \ in single quotes and may only contain letters, digits and the underscore character.\
      \ Name literals can't contain escape sequences.</p>\n<p><b>Examples:</b></p>\n\
      <dl>\n<dd><code>'RedBase'</code></dd>\n<dd><code>'SniperNest2'</code></dd>\n\
      <dd><code>''</code></dd>\n</dl>\n<p>The last example is an empty name, which\
      \ is often used to spawn actors without a <a href=\"/edit/Tag?redlink=1\" class=\"\
      new\" title=\"Tag (page does not exist)\">Tag</a> or to switch to the null <a\
      \ href=\"/State\" title=\"State\" class=\"mw-redirect\">state</a>. It is actually\
      \ the same as the name literal 'None', but sometimes the empty name makes more\
      \ sense.</p>\n<h2><span class=\"mw-headline\" id=\"Enums\">Enums</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Literals?section=8\" title=\"Edit section: Enums\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>An <a href=\"/Enum\"\
      \ title=\"Enum\" class=\"mw-redirect\">enum</a> literal can only be used when\
      \ specifying a value of an enum type. For example the parameter of the SetPhysics\
      \ function can be any of the EPhysics values, like <code>PHYS_Falling</code>\
      \ or <code>PHYS_Projectile</code>.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>PHYS_Walking</code></dd>\n\
      <dd><code>ROLE_SimulatedProxy</code></dd>\n<dd><code>DP_UpperRight</code></dd>\n\
      <dd><code>Request_GET</code></dd>\n</dl>\n<h2><span class=\"mw-headline\" id=\"\
      Objects\">Objects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Literals?section=9\" title=\"Edit section: Objects\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Generally,\
      \ an <a href=\"/Types#Object\" title=\"Types\">object</a> literal starts with\
      \ the unqualified name of an object class, followed by a qualified or unqualified\
      \ name of an object instance, enclosed in single quotes. These single quotes\
      \ work slightly different from those of name literals in that there may be whitespace\
      \ around them. The same goes for the dots between the parts of qualified object\
      \ names.</p>\n<p><b>Examples:</b></p>\n<dl>\n<dd><code>class'Actor'</code></dd>\n\
      <dd><code>Texture 'Engine.WhiteTexture'</code></dd>\n<dd><code>Sound ' Announcer\
      \ . monsterkill '</code></dd>\n</dl>\n<p>The first example is an unqualified\
      \ literal of type Class representing the <a href=\"/Actor\" title=\"Actor\"\
      >Actor</a> class. The compiler will automatically find out the package containing\
      \ the class, if it is already loaded. If the package isn't loaded, the lookup\
      \ will fail. In this case the compiler issues a warning or an error. The second\
      \ example is a qualified literal of type <a href=\"/edit/Texture?redlink=1\"\
      \ class=\"new\" title=\"Texture (page does not exist)\">Texture</a> representing\
      \ the WhiteTexture object in the Engine package. Note that WhiteTexture doesn't\
      \ actually need to be a Texture, but could also be any subclass of Texture,\
      \ such as <a href=\"/edit/FireTexture?redlink=1\" class=\"new\" title=\"FireTexture\
      \ (page does not exist)\">FireTexture</a>. The object literal only specifies\
      \ the base class and name of the object. The third example represents the monsterkill\
      \ sound in the Announcer package. Again, this doesn't need to be a <a href=\"\
      /edit/Sound?redlink=1\" class=\"new\" title=\"Sound (page does not exist)\"\
      >Sound</a> object, but could for example be a <a href=\"/UE2:SoundGroup_(UT2004)\"\
      \ title=\"UE2:SoundGroup (UT2004)\">SoundGroup</a> object.</p>\n<p>There are\
      \ also two special object literals. The literal <code>None</code> stands for\
      \ no object. The literal <code>Self</code> can only be used in states and non-static\
      \ functions and stands for the object instance executing that piece of code.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Structs\">Structs</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Literals?section=10\"\
      \ title=\"Edit section: Structs\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>There are no general <a href=\"/Struct\" title=\"\
      Struct\" class=\"mw-redirect\">struct</a> literals, but the compiler recognizes\
      \ literals for vector and rotator constants.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Vectors\">Vectors</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Literals?section=11\" title=\"\
      Edit section: Vectors\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>A <a href=\"/Vector\" title=\"Vector\">vector</a> literal looks like a function\
      \ call, but actually represents a constant value. It starts with the keyword\
      \ <code>Vect</code>, followed by number literals for each of the three components\
      \ in the order X, Y, Z. The component values are separated by commas and enclosed\
      \ in round parentheses. You can't use variables or return values of functions\
      \ here!</p>\n<p><b>Example:</b></p>\n<dl>\n<dd><code>vect(0,0,0)</code></dd>\n\
      <dd><code>vect (1.2, 3.4 , 5.6)</code></dd>\n</dl>\n<p>The first example is\
      \ the null vector, i.e. a vector of length zero with an unspecified direction.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Rotators\">Rotators</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Literals?section=12\"\
      \ title=\"Edit section: Rotators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p><a href=\"/Rotator\" title=\"Rotator\">Rotator</a>\
      \ literals are similar to vector literals. They start with the keyword <code>Rot</code>,\
      \ followed by the Pitch, Yaw and Roll components. Like vector components, these\
      \ are separated by commas and enclosed in round parentheses. Variables and functions\
      \ are not allowed in rotator literals.</p>\n<p><b>Example:</b></p>\n<dl>\n<dd><code>rot(0,0,0)</code></dd>\n\
      <dd><code>rot (1234, 5678 , 9012)</code></dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Range\">Range</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Literals?section=13\" title=\"Edit section: Range\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>In\
      \ various engine builds the compiler also accepts literals for the Object.Range\
      \ type in the form <code>rng(<i>A</i>, <i>B</i>)</code>. Most builds don't implement\
      \ the UnrealScript byte code for this literal though, which causes the compiler\
      \ to crash.</p>\n<h2><span class=\"mw-headline\" id=\"Functions\">Functions</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Literals?section=14\" title=\"Edit section: Functions\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Function literals\
      \ are only used in <a href=\"/Delegate\" title=\"Delegate\" class=\"mw-redirect\"\
      >delegate</a> assignments. They consist only of the function name without any\
      \ special symbols or the keyword <code>None</code> if no function is to be assigned.</p>\n\
      <table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"navbox-header\"\
      >\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div style=\"position:relative;\
      \ width:100%; white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"\
      background-color:transparent; padding:0; font-weight:normal; font-size:xx-small;\
      \ white-space:nowrap; position:absolute;left:0.5em;\"><a href=\"/Template:Navbox_unrealscript\"\
      \ title=\"Template:Navbox unrealscript\"><span title=\"View this template\"\
      >v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\" title=\"\
      Template talk:Navbox unrealscript\"><span title=\"Discussion about this template\"\
      >d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external text\" href=\"\
      https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"><span title=\"\
      You can edit this template. Please use the preview button before saving.\">e</span></a></div>\n\
      <a href=\"/UnrealScript_reference\" title=\"UnrealScript reference\">UnrealScript\
      \ reference</a></div>\n</th>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"\
      navbox-group\" style=\"\">Declarations</th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Preprocessor\" title=\"Preprocessor\">Preprocessor</a>&#160;•\
      \ <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;• <a href=\"/Interfaces\"\
      \ title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"/Cpptext\" title=\"Cpptext\"\
      >Cpptext</a>&#160;• <a href=\"/Constants\" title=\"Constants\">Constants</a>&#160;•\
      \ <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"\
      Structs\">Structs</a>&#160;• <a href=\"/Variables\" title=\"Variables\">Variables</a>&#160;(<a\
      \ href=\"/Metadata\" title=\"Metadata\">Metadata</a>)&#160;• <a href=\"/Replication_block\"\
      \ title=\"Replication block\">Replication block</a>&#160;• <a href=\"/Operators\"\
      \ title=\"Operators\">Operators</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\"\
      >Delegates</a>&#160;• <a href=\"/Functions\" title=\"Functions\">Functions</a>&#160;•\
      \ <a href=\"/States\" title=\"States\">States</a>&#160;• <a href=\"/Defaultproperties\"\
      \ title=\"Defaultproperties\">Defaultproperties</a>&#160;(<a href=\"/Subobjects\"\
      \ title=\"Subobjects\">Subobjects</a>)</td>\n</tr>\n<tr class=\"navbox-body\
      \ even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Types\" title=\"\
      Types\">Types</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Bool\"\
      \ title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;• <a href=\"/Byte\" title=\"\
      Byte\" class=\"mw-redirect\">byte</a>&#160;• <a href=\"/Float\" title=\"Float\"\
      \ class=\"mw-redirect\">float</a>&#160;• <a href=\"/Int\" title=\"Int\" class=\"\
      mw-redirect\">int</a>&#160;• <a href=\"/Name\" title=\"Name\" class=\"mw-redirect\"\
      >name</a>&#160;• <a href=\"/String\" title=\"String\">string</a>&#160;• <a href=\"\
      /Types#Reference_types\" title=\"Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\"\
      \ title=\"Class limiter\" class=\"mw-redirect\">Class</a>&#160;• <a href=\"\
      /Enums\" title=\"Enums\">Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\"\
      >Structs</a>&#160;(<a href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a\
      \ href=\"/Rotator\" title=\"Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"\
      Quat\" class=\"mw-redirect\">Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\"\
      >Color</a>)&#160;• <a href=\"/Static_arrays\" title=\"Static arrays\">Static\
      \ arrays</a>&#160;• <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic\
      \ arrays</a>&#160;• <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;•\
      \ <a href=\"/Typecasting\" title=\"Typecasting\">Typecasting</a></td>\n</tr>\n\
      <tr class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\"><strong\
      \ class=\"selflink\">Literals</strong></th>\n<td class=\"navbox-body\" style=\"\
      \"><a href=\"/Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;•\
      \ <a href=\"/Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a\
      \ href=\"/Literals#Integer_numbers\" title=\"Literals\">Integer</a>&#160;• <a\
      \ href=\"/Literals#Names\" title=\"Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\"\
      \ title=\"Literals\">Objects</a> (<a href=\"/None\" title=\"None\" class=\"\
      mw-redirect\">None</a>&#160;⋅ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\"\
      >Self</a>)&#160;• <a href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;•\
      \ <a href=\"/Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"\
      /Literals#Strings\" title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"\
      navbox-body even\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\"\
      \ title=\"Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"\
      ><a href=\"/GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"\
      /If_statement\" title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\"\
      \ title=\"Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\"\
      \ title=\"Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"\
      Stop statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch\
      \ statement\">Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\"\
      >While</a>&#160;• <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.117 seconds\nReal time usage: 0.121 seconds\nPreprocessor\
      \ visited node count: 226/1000000\nPreprocessor generated node count: 941/1000000\n\
      Post‐expand include size: 10610/2097152 bytes\nTemplate argument size: 4195/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   27.899      1 - -total\n100.00%   27.899      1 - Template:Navbox_unrealscript\n\
      \ 73.49%   20.502      1 - Template:Navbox\n 14.05%    3.919      1 - Template:Tnavbar\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:4793-0!*!0!!en!*!*\
      \ and timestamp 20221118064048 and revision id 43838\n -->\n"
  categories:
  - sortkey: "Literals"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: false
    name: "Sound"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 104
    exists: true
    name: "UE2:SoundGroup (UT2004)"
  - ns: 0
    exists: true
    name: "Actor"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 0
    exists: false
    name: "Texture"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: false
    name: "FireTexture"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Enum"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Unreal Tournament 2004"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "State"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: false
    name: "Tag"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Delegate"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Quat"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Numbers"
    number: "1"
    index: "1"
    fromtitle: "Literals"
    byteoffset: 135
    anchor: "Numbers"
  - toclevel: 2
    level: "3"
    line: "Integer numbers"
    number: "1.1"
    index: "2"
    fromtitle: "Literals"
    byteoffset: 320
    anchor: "Integer_numbers"
  - toclevel: 2
    level: "3"
    line: "Float numbers"
    number: "1.2"
    index: "3"
    fromtitle: "Literals"
    byteoffset: 1112
    anchor: "Float_numbers"
  - toclevel: 2
    level: "3"
    line: "Other ways to specify numbers"
    number: "1.3"
    index: "4"
    fromtitle: "Literals"
    byteoffset: 1505
    anchor: "Other_ways_to_specify_numbers"
  - toclevel: 1
    level: "2"
    line: "Boolean values"
    number: "2"
    index: "5"
    fromtitle: "Literals"
    byteoffset: 3786
    anchor: "Boolean_values"
  - toclevel: 1
    level: "2"
    line: "Strings"
    number: "3"
    index: "6"
    fromtitle: "Literals"
    byteoffset: 4062
    anchor: "Strings"
  - toclevel: 1
    level: "2"
    line: "Names"
    number: "4"
    index: "7"
    fromtitle: "Literals"
    byteoffset: 4671
    anchor: "Names"
  - toclevel: 1
    level: "2"
    line: "Enums"
    number: "5"
    index: "8"
    fromtitle: "Literals"
    byteoffset: 5211
    anchor: "Enums"
  - toclevel: 1
    level: "2"
    line: "Objects"
    number: "6"
    index: "9"
    fromtitle: "Literals"
    byteoffset: 5584
    anchor: "Objects"
  - toclevel: 1
    level: "2"
    line: "Structs"
    number: "7"
    index: "10"
    fromtitle: "Literals"
    byteoffset: 7186
    anchor: "Structs"
  - toclevel: 2
    level: "3"
    line: "Vectors"
    number: "7.1"
    index: "11"
    fromtitle: "Literals"
    byteoffset: 7312
    anchor: "Vectors"
  - toclevel: 2
    level: "3"
    line: "Rotators"
    number: "7.2"
    index: "12"
    fromtitle: "Literals"
    byteoffset: 7864
    anchor: "Rotators"
  - toclevel: 2
    level: "3"
    line: "Range"
    number: "7.3"
    index: "13"
    fromtitle: "Literals"
    byteoffset: 8256
    anchor: "Range"
  - toclevel: 1
    level: "2"
    line: "Functions"
    number: "8"
    index: "14"
    fromtitle: "Literals"
    byteoffset: 8515
    anchor: "Functions"
  displaytitle: "Literals"
  iwlinks: []
  wikitext:
    text: "Literals in general are notations that represent a value. This article\
      \ describes the types of literals available in [[UnrealScript]].\n\n==Numbers==\n\
      In UnrealScript, all numeric literals start with a digit. Numeric literals can\
      \ either stand for an integer or a floating point value and may be prefixed\
      \ with a minus sign.\n\n===Integer numbers===\nThe UnrealScript compiler knows\
      \ two types of integer literals: decimal and hexadecimal. Decimal literals only\
      \ consist of the decimal digits 0 to 9, while hexadecimal literals start with\
      \ <code>0x</code>, directly followed by the hexadecimal digits 0 to 9 and A\
      \ to F. Upper- and lowercase letters can be mixed freely in hexadecimal literals.\n\
      \n'''Examples:'''\n:<code>123</code>\n:<code>0xC0FFEE</code>\n:<code>010</code>\n\
      \nThe first example is a typical decimal literal that can represent a [[Types#Byte|byte]]\
      \ or [[Types#Int|int]] value, while the second example is a hexadecimal literal\
      \ that exceeds the byte range and definitely stands for a value of type int.\
      \ The third example is ''not'' octal, but just a decimal literal with a leading\
      \ zero representing the value ten.\n\n===Float numbers===\n[[Types#Float|Floating\
      \ point]] literals always start with one or more digits, followed by a decimal\
      \ dot. After the dot, there may be zero or more decimal digits.\n\n'''Examples:'''\n\
      :<code>1.0</code>\n:<code>123.456</code>\n:<code>987.</code>\n\nNote that you\
      \ can't use the comma as decimal separator, even if that's the standard way\
      \ to display decimal fractions on your system.\n\n===Other ways to specify numbers===\n\
      The compiler recognizes any \"glob\" consisting of digits, the letters A to\
      \ F, the letter X and the decimal dot as a number, as long as it starts with\
      \ a digit. If it contains an X then it's treated as hexadecimal integer literal,\
      \ if it contains a dot it's treated as floating point literal, otherwise it's\
      \ a decimal integer literal.\n\nThis loose interpretation allows two additional\
      \ number notations: octal integer literals and scientific floating point literals,\
      \ the latter only with unsigned exponent, though.\nAn octal integer literal\
      \ starts with <code>0</code>, followed by any combination of the octal digits\
      \ 0 to 7. It also needs to include the letter X, otherwise it will be treated\
      \ as decimal integer literal.\n\n'''Examples:'''\n:<code>0123456789ax</code>\n\
      :<code>123456789ax</code>\n\nThe first example is interpreted as the value 1234567<sub>oct</sub>,\
      \ which is the same as 342391<sub>dec</sub>. The character 8 is no valid octal\
      \ digit and thus terminates the value. The compiler takes the entire number\
      \ glob, sees the X in it and passes it to the generic number parser. That one\
      \ sees the leading zero, not followed by an X and treats the literal as octal.\n\
      The second example contains an X, but does not start with a 0, so it is actually\
      \ treated as decimal literal and stands for the value 123456789<sub>dec</sub>.\
      \ It contains the letter A, but it doesn't start with <code>0x</code>, so it's\
      \ not a hexadecimal literal and the number parser stops when it arrives at the\
      \ A.\n\nA scientific floating point literal starts like a normal floating point\
      \ literal, but after the decimal dot and optional decimal places there's the\
      \ letter D or E, followed by one or more digits.\n\n'''Examples:'''\n:<code>1.5e2</code>\n\
      :<code>1.5d2</code>\n:<code>1.5e+2</code>\n:<code>1.5e-2</code>\n:<code>1.f</code>\n\
      \nOnly the first two examples actually are actually a single literal. The next\
      \ two examples really represent the expressions 1.5 +/- 2.0 respectively. The\
      \ last example can be found quite often in the [[Unreal Tournament 2004|UT2004]]\
      \ script code and is nothing else than the value 1.0 expressed in a way C++\
      \ and Java programmers immediately recognize as a float value. You could, in\
      \ fact, also write 1.a and it would mean the exact same thing in UnrealScript.\n\
      \n==Boolean values==\n[[Types#Bool|Boolean]] literals are quick to explain.\
      \ There are only two of them, <code>True</code> and <code>False</code>. Both\
      \ are case-insensitive, like any other identifiers in [[UnrealScript]], so \"\
      true\" and \"tRuE\" are the same thing to the compiler.\n\n==Strings==\n[[Types#String|String]]\
      \ literals start and end with double quotes. Between these there may be any\
      \ number of characters, except line breaks. To include a double quote or backslash\
      \ character in the string, it must be \"escaped\" by a(nother) backslash character.\
      \ Starting with Unreal Engine 3, strings can also contain other escape sequences,\
      \ such as \\n for a newline character. In Unreal Engine 1 and 2 escaped letters\
      \ only stand for themselves, i.e. the string \"\\n\" is absolutely equal to\
      \ the string \"n\" there.\n\n'''Examples:'''\n:<code>\"abc\"</code>\n:<code>\"\
      This is an \\\"example\\\".\"\n:<code>\"\"</code>\n\n==Names==\n[[Types#Name|Name]]\
      \ literals are similar to strings. They are enclosed in single quotes and may\
      \ only contain letters, digits and the underscore character. Name literals can't\
      \ contain escape sequences.\n\n'''Examples:'''\n:<code>'RedBase'</code>\n:<code>'SniperNest2'</code>\n\
      :<code><nowiki>''</nowiki></code>\n\nThe last example is an empty name, which\
      \ is often used to spawn actors without a [[Tag]] or to switch to the null [[state]].\
      \ It is actually the same as the name literal 'None', but sometimes the empty\
      \ name makes more sense.\n\n==Enums==\nAn [[enum]] literal can only be used\
      \ when specifying a value of an enum type. For example the parameter of the\
      \ SetPhysics function can be any of the EPhysics values, like <code>PHYS_Falling</code>\
      \ or <code>PHYS_Projectile</code>.\n\n'''Examples:'''\n:<code>PHYS_Walking</code>\n\
      :<code>ROLE_SimulatedProxy</code>\n:<code>DP_UpperRight</code>\n:<code>Request_GET</code>\n\
      \n==Objects==\nGenerally, an [[Types#Object|object]] literal starts with the\
      \ unqualified name of an object class, followed by a qualified or unqualified\
      \ name of an object instance, enclosed in single quotes. These single quotes\
      \ work slightly different from those of name literals in that there may be whitespace\
      \ around them. The same goes for the dots between the parts of qualified object\
      \ names.\n\n'''Examples:'''\n:<code>class'Actor'</code>\n:<code>Texture 'Engine.WhiteTexture'</code>\n\
      :<code>Sound ' Announcer . monsterkill '</code>\n\nThe first example is an unqualified\
      \ literal of type Class representing the [[Actor]] class. The compiler will\
      \ automatically find out the package containing the class, if it is already\
      \ loaded. If the package isn't loaded, the lookup will fail. In this case the\
      \ compiler issues a warning or an error. The second example is a qualified literal\
      \ of type [[Texture]] representing the WhiteTexture object in the Engine package.\
      \ Note that WhiteTexture doesn't actually need to be a Texture, but could also\
      \ be any subclass of Texture, such as [[FireTexture]]. The object literal only\
      \ specifies the base class and name of the object. The third example represents\
      \ the monsterkill sound in the Announcer package. Again, this doesn't need to\
      \ be a [[Sound]] object, but could for example be a [[UE2:SoundGroup (UT2004)|SoundGroup]]\
      \ object.\n\nThere are also two special object literals. The literal <code>None</code>\
      \ stands for no object. The literal <code>Self</code> can only be used in states\
      \ and non-static functions and stands for the object instance executing that\
      \ piece of code.\n\n==Structs==\nThere are no general [[struct]] literals, but\
      \ the compiler recognizes literals for vector and rotator constants.\n\n===Vectors===\n\
      A [[vector]] literal looks like a function call, but actually represents a constant\
      \ value. It starts with the keyword <code>Vect</code>, followed by number literals\
      \ for each of the three components in the order X, Y, Z. The component values\
      \ are separated by commas and enclosed in round parentheses. You can't use variables\
      \ or return values of functions here!\n\n'''Example:'''\n:<code>vect(0,0,0)</code>\n\
      :<code>vect (1.2, 3.4 , 5.6)</code>\n\nThe first example is the null vector,\
      \ i.e. a vector of length zero with an unspecified direction.\n\n===Rotators===\n\
      [[Rotator]] literals are similar to vector literals. They start with the keyword\
      \ <code>Rot</code>, followed by the Pitch, Yaw and Roll components. Like vector\
      \ components, these are separated by commas and enclosed in round parentheses.\
      \ Variables and functions are not allowed in rotator literals.\n\n'''Example:'''\n\
      :<code>rot(0,0,0)</code>\n:<code>rot (1234, 5678 , 9012)</code>\n\n===Range===\n\
      In various engine builds the compiler also accepts literals for the Object.Range\
      \ type in the form <code>rng(''A'', ''B'')</code>. Most builds don't implement\
      \ the UnrealScript byte code for this literal though, which causes the compiler\
      \ to crash.\n\n==Functions==\nFunction literals are only used in [[delegate]]\
      \ assignments. They consist only of the function name without any special symbols\
      \ or the keyword <code>None</code> if no function is to be assigned.\n\n{{navbox\
      \ unrealscript}}"
  properties: []
  revId: 43838
name: "Literals"
revision:
  revid: 43838
  parentid: 40379
  user: "Wormbo"
  timestamp: 1281338008.000000000
  comment: "/* Structs */ mentioned range literal"
timestamp: 1668754159.996025000
