---
parse:
  title: "Legacy:UMS/CameraTutorial"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Unreal_Movie_Studio_Cameras\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Unreal Movie Studio\
      \ Cameras</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #Introduction\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >Introduction</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #Setting_up_the_movie\"><span class=\"tocnumber\">1.2</span> <span class=\"\
      toctext\">Setting up the movie</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"\
      ><a href=\"#Panning_.28rotating.29_the_camera\"><span class=\"tocnumber\">1.3</span>\
      \ <span class=\"toctext\">Panning (rotating) the camera</span></a></li>\n<li\
      \ class=\"toclevel-2 tocsection-5\"><a href=\"#Dollying_.28moving.29_the_camera\"\
      ><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">Dollying (moving)\
      \ the camera</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"\
      #Zooming_the_camera\"><span class=\"tocnumber\">1.5</span> <span class=\"toctext\"\
      >Zooming the camera</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a\
      \ href=\"#Making_the_camera_track_an_object\"><span class=\"tocnumber\">1.6</span>\
      \ <span class=\"toctext\">Making the camera track an object</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Making_the_camera_circle_an_object\"\
      ><span class=\"tocnumber\">1.7</span> <span class=\"toctext\">Making the camera\
      \ circle an object</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a\
      \ href=\"#Making_the_camera_chase_an_object\"><span class=\"tocnumber\">1.8</span>\
      \ <span class=\"toctext\">Making the camera chase an object</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Making_the_camera_interpolate\"\
      ><span class=\"tocnumber\">1.9</span> <span class=\"toctext\">Making the camera\
      \ interpolate</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"\
      #What.27s_next\"><span class=\"tocnumber\">1.10</span> <span class=\"toctext\"\
      >What's next</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Unreal_Movie_Studio_Cameras\">Unreal Movie Studio\
      \ Cameras</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=1\" title=\"Edit\
      \ section: Unreal Movie Studio Cameras\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>by Hugh Macdonald</p>\n<p><a rel=\"nofollow\" class=\"\
      external text\" href=\"http://unframed.brokenpipefilms.com\">UnFramed Productions</a></p>\n\
      <p><a href=\"/Legacy:UMS\" title=\"Legacy:UMS\">Main UMS Page</a></p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Introduction\">Introduction</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=2\"\
      \ title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This tutorial aims to give the UMS user an understanding\
      \ of how to add and use Cameras.</p>\n<p>I may refer back to something mentioned\
      \ in the first tutorial, without explaining it. This will usually be something\
      \ that an experienced UnrealEd user may know. This will be things like adding\
      \ objects, opening the object properties.</p>\n<p>Before you start this tutorial,\
      \ please make sure you have a map built with what I mentioned at the end of\
      \ the <a href=\"/Legacy:UMS/BasicTutorial\" title=\"Legacy:UMS/BasicTutorial\"\
      >first tutorial</a> in it.</p>\n<h3><span class=\"mw-headline\" id=\"Setting_up_the_movie\"\
      >Setting up the movie</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=3\" title=\"Edit\
      \ section: Setting up the movie\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li>Once you have UMS loaded into UnrealEd, locate\
      \ MovieCamera in the classes browser. This is the object that will control where\
      \ the viewer sees from at any point. The MovieCamera is almost completely moveable,\
      \ with some very nice effects built into UMS.</li>\n<li>When you have found\
      \ MovieCamera, add one into your level somewhere near where you want the view\
      \ to be from. It is very useful to put the 3D view looking from this place,\
      \ as you can then line up the shot exactly.</li>\n<li>Unreal Tournament has,\
      \ as a default, a FOV (Field Of View) of 90o. This means that if you took a\
      \ top down view of the player, what he can see is 90o from left to right. This\
      \ is a lot wider than normal film lenses. In fact, a lens of 25mm (the widest\
      \ normally used) corresponds to a FOV of 52.9<sup>o</sup>.</li>\n<li>Therefore,\
      \ this is the value that I generally use. I have noticed that this removes a\
      \ lot of the feel that you are watching it in a game.</li>\n<li>To actually\
      \ change the FOV of the camera, you need to go into the MovieCamera properties.\
      \ In there, expand MovieCamera and change the <b>CurrentFOV</b> to whatever\
      \ you want.</li>\n<li>The other slight problem with this is the fact that the\
      \ 3D view will be zoomed further out that what will eventually come out onto\
      \ the screen. So, we also need to change the FOV of the 3D view. You do this\
      \ by finding the Camera in one of the 2D views (it looks like an eye with a\
      \ red arrow coming out of it) and opening up it's properties. Expand Pawn, and\
      \ change <b>FOVAngle</b> to whatever FOV you will be using.</li>\n<li>Now we\
      \ have the camera in the level, and the 3D view and the camera set to the same\
      \ FOV, we need to place the camera in the same position as the 3D view. Firstly,\
      \ make sure that the 3D view is looking at whatever you want the camera to be\
      \ looking at. The 3D view can see slightly more than the camera, so make sure\
      \ that there is nothing important right at the edge of the screen.</li>\n<li>There\
      \ are two ways to move the camera to the 3D view - a quick and easy, but not\
      \ extremely accurate way, which is to just move it and rotate it in the 2D views\
      \ until it looks vaguely in the right place.</li>\n<li>The other way is to copy\
      \ the positional and rotations coordinates by hand. This can get quite tedious,\
      \ but is a lot more accurate. To do this, open up the 3D view's properties,\
      \ and expand <b>Movement</b>. Expand <b>Location</b> and write down the three\
      \ values for x, y, and z (you can do it to however many decimal places you want\
      \ - I normally do it to the nearest integer). Then expand <b>Rotation</b>, and\
      \ do the same thing with the rotational values. (The rotational values in Unreal\
      \ are done whereby 216 (65536) is 360o) If the camera is going to be a still\
      \ camera, it doesn't matter if one of the rotational values is, say 133608.\
      \ If, however, you want the camera to move (dolly) or rotate (pan), then you\
      \ will need to make the rotational values between -32768 and 32768. If, at any\
      \ point, you find that a camera does a flip, you will need to either add 65536\
      \ (or a multiple of) or take 65536 from the rotation.</li>\n<li>Once you have\
      \ these values written down, open up the MovieCamera properties, and go to Movement\
      \ -&gt; Location and type the values for the location in. Then, go to Movement\
      \ -&gt; Rotation and do the same. Now, your MovieCamera should be in the same\
      \ place as the 3D view.</li>\n<li>We now need to name the MovieCamera. If you\
      \ use UnrealEd a lot, you will know exactly how to do this. If, however, you\
      \ are a new user, you do this by opening the MovieCamera properties, and going\
      \ to <b>Event</b>. Then, put the name for the MovieCamera into Tag. Each object\
      \ in the level should be named differently, with certain exceptions. I tend\
      \ to name my cameras <b>Camera1</b>, <b>Camera2</b> etc. Make sure that there\
      \ are no spaces in the name.</li>\n<li>You now should have your MovieCamera\
      \ in the level, and are ready to add it to your director. Open up the director\
      \ properties, and put <b>Camera Camera1 CutTo</b> in the next available slot.\
      \ This will cause the view to be moved to that of Camera1's. That is the most\
      \ basic command. The other commands, which I will go through in order, are Pan,\
      \ Dolly, Zoom, Track, Circle, ChaseCam, and Interpolate.</li>\n</ol>\n<h3><span\
      \ class=\"mw-headline\" id=\"Panning_.28rotating.29_the_camera\">Panning (rotating)\
      \ the camera</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=4\" title=\"Edit\
      \ section: Panning (rotating) the camera\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li>There are three different ways of panning the\
      \ camera. You can either pan by a certain amount, pan to a point described in\
      \ the Director, or you can pan to a point in the level (could be an actor, could\
      \ be a SimplePoint (as described in the previous tutorial)).</li>\n<li>To pan\
      \ a camera, you need to know the camera's name. In my example, I have used <b>Camera1</b>\
      \ as my camera. If you want a camera to start panning as soon as the view goes\
      \ to that camera, you need to start the next slot in Script with the following:\
      \ <b>Camera Camera1 Pan</b>.</li>\n<li>In the script, the first word will always\
      \ be what type of object is being used (in this case, a camera). The second\
      \ word is the tag of the object (Camera1 here). Anything after that is what\
      \ will happen to that object. In this case, we have put <b>Pan</b> next, so\
      \ UMS will then look in ScriptRotators to see how much we want to pan the camera.\
      \ <b>Yaw</b> is a change in the horizontal rotation (as if you rotated it from\
      \ the top down view). <b>Pitch</b> changes the camera to be looking up or down,\
      \ and <b>Roll</b> will, well, roll the camera.</li>\n<li>If, instead of <b>Camera\
      \ Camera1 Pan</b>, you put <b>Camera Camera1 Pan To</b>, UMS would look in ScriptVectors\
      \ for a point on the map. It would then pan to look at that point. If you want\
      \ the camera to look at a point, it is invariably easier to just put a SimplePoint\
      \ into the map at the point, and tell the camera to pan to that. This is done\
      \ by putting <b>Camera Camera1 Pan To CamPoint1</b>, where <b>CamPoint1</b>\
      \ is the tag of the SimplePoint.</li>\n<li>The one thing that I have missed\
      \ out in this is the time that the camera takes to pan from one point to another.\
      \ This is entered in the ScriptVals, in seconds.</li>\n<li>That is about it\
      \ for panning the camera. If you use either <b>Pan To</b> or <b>Pan To CamPoint1</b>\
      \ and you find that the camera either rotates the wrong way, or does a complete\
      \ flip, then you'll have to check the original camera's rotation. Try adding\
      \ 65536 to or taking 65536 away from the rotation that is going the wrong way.\
      \ This may cause it to do a double flip, or may cause the problem to be corrected.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"Dollying_.28moving.29_the_camera\"\
      >Dollying (moving) the camera</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=5\"\
      \ title=\"Edit section: Dollying (moving) the camera\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<ol>\n<li>Dollying works in much\
      \ the same way as panning. To dolly by a certain amount, you put <b>Camera Camera1\
      \ Dolly</b> with the amount to dolly by in ScriptVectors.</li>\n<li>To dolly\
      \ to a certain point, you either put <b>Camera Camera1 Dolly To</b>, with the\
      \ point to dolly to in ScriptVectors, or you put <b>Camera Camera1 Dolly CamPoint1</b>\
      \ where <b>CamPoint1</b> is the SimplePoint that you want to dolly to.</li>\n\
      <li>As with panning, the time you want the camera to take dollying goes in ScriptVals.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"Zooming_the_camera\">Zooming the\
      \ camera</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=6\" title=\"Edit\
      \ section: Zooming the camera\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li>Zooming is a very simple command. The Script\
      \ command is very simply <b>Camera Camera1 Zoom</b>. The FOV that you want it\
      \ to zoom to is put in one of the ScriptVectors slots (only one - leave the\
      \ other two at 0).</li>\n<li>The time you want that camera to take to zoom into\
      \ that FOV is put into ScriptVals.</li>\n</ol>\n<h3><span class=\"mw-headline\"\
      \ id=\"Making_the_camera_track_an_object\">Making the camera track an object</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:UMS/CameraTutorial?section=7\" title=\"Edit section: Making\
      \ the camera track an object\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<ol>\n<li>Tracking is also a very simple command, but\
      \ a very widely used one. If you tell the camera to track an object, it will\
      \ follow that object, until told to either pan of chase. All you put in is <b>Camera\
      \ Camera1 Track CamPoint1</b> where <b>CamPoint1</b> is the tag of either a\
      \ SimplePoint, or a moving object that you want to track (usually a pawn)</li>\n\
      <li>The other options with this command are to track a point offset from the\
      \ target. To set the offset, put the values in ScriptVectors.</li>\n<li>The\
      \ other option is to let the camera only track horizontally, or vertically.\
      \ To stop the camera from yawing (panning horizontally), set Yaw, in ScriptRotators,\
      \ to <b>-1</b>. Do the same to Pitch if you want to restrict the vertical panning.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"Making_the_camera_circle_an_object\"\
      >Making the camera circle an object</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=8\"\
      \ title=\"Edit section: Making the camera circle an object\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<ol>\n<li>Circling is probably\
      \ one of the most complex Camera commands, but can produce stunning effects\
      \ (Stephen Deaver's words, not mine!). Most of the time, you will probably want\
      \ to circle a moving pawn, or object, but you can also have the camera circle\
      \ a spot in space (by using a SimplePoint). There is a way to make this spot,\
      \ even if it doesn't have anything there, move. I will cover that in the pawns\
      \ tutorial.</li>\n<li>To circle a point, there are two options for how far the\
      \ camera starts from the object. You can set the camera to start the distance\
      \ that you want from the object that it is circling. This is great if the object\
      \ is stationary, but as soon as you have an object that is moving, it becomes\
      \ slightly inaccurate.</li>\n<li>The other option is to make it out of two commands.\
      \ The first one dollys the camera to the point that you want it to circle in\
      \ 0 seconds (instantaneously). Then, you can use ScriptVals to determine how\
      \ much further away from the object you want to go.</li>\n<li>The command to\
      \ go in Script is very simple: <b>Camera Camera1 Circle CamPoint1</b></li>\n\
      <li>The values which determine how fast the camera is circling the object are\
      \ in ScriptRotators. <b>Yaw</b> will make the camera circle horizontally round\
      \ the point. This will be in how many units per second (so, putting a value\
      \ of 65536 in will make it do one revolution per second). <b>Pitch</b> will\
      \ make the camera rotate over or under it's target. Doing a combination of both\
      \ of these can produce some wonderful effects.</li>\n<li>Just doing Circle on\
      \ it's own will make the position of the camera circle the point, but not make\
      \ the camera point to it. To do that, you need to combine the Circle command\
      \ with a Track command.</li>\n<li>The other option that is available with the\
      \ Circle command is the ability to circle round a point that is offset from\
      \ the target. This offset is defined by ScriptVectors. This would be useful\
      \ for if you wanted to rotate round an actor's head, which may not be their\
      \ centre.</li>\n</ol>\n<h3><span class=\"mw-headline\" id=\"Making_the_camera_chase_an_object\"\
      >Making the camera chase an object</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=9\"\
      \ title=\"Edit section: Making the camera chase an object\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<ol>\n<li>This will allow the\
      \ camera to remain at a certain point from an object, turning with it, and moving\
      \ with it. The Script command is <b>Camera Camera1 ChaseCam Actor1</b> where\
      \ <b>Actor1</b> is the actor that the camera will be chasing.</li>\n<li>In ScriptVectors,\
      \ you should put the offset that you want the camera to chase from. This is\
      \ where a positive x value is in front of the actor, a positive z value is above\
      \ the actor, and a positive y value is to the right of the actor.</li>\n<li>The\
      \ ScriptRotators has the rotational difference in. If this is all set to 0,\
      \ then the camera will be pointing the same direction as the actor. If, say,\
      \ the camera was above and behind the actor, you would want to set the <b>Pitch</b>\
      \ to be slightly negative. This would cause the camera to look down to the actor.</li>\n\
      </ol>\n<h3><span class=\"mw-headline\" id=\"Making_the_camera_interpolate\"\
      >Making the camera interpolate</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=10\"\
      \ title=\"Edit section: Making the camera interpolate\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<ol>\n<li>Interpolation is a\
      \ very useful tool, for when you want the camera to follow a long winding path.\
      \ With dollying, you can only make the camera move in a straight line. This\
      \ section will only describe how to make the camera go to an interpolation path.\
      \ For instructions on setting up an interpolation path, go to the <a href=\"\
      /edit/Legacy:UMSInterpolation?redlink=1\" class=\"new\" title=\"Legacy:UMSInterpolation\
      \ (page does not exist)\">Interpolation tutorial</a>.</li>\n<li>To make the\
      \ camera follow an interpolation path, the command is <b>Camera Camera1 Interpolate\
      \ InterpolationTag</b> where <b>InterpolationTag</b> is the tag of the Interpolation\
      \ Points.</li>\n<li>ScriptVals is the rate at which the camera moves along the\
      \ Interpolation path. One of ScriptVectors (leave the other two at 0) is the\
      \ alpha of the camera. This is how dark it is. It is best to leave this at 0\
      \ too, as this will make no difference. If the alpha is 255, the the screen\
      \ with be blank.</li>\n</ol>\n<h3><span class=\"mw-headline\" id=\"What.27s_next\"\
      >What's next</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:UMS/CameraTutorial?section=11\" title=\"Edit\
      \ section: What's next\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>That was how to use cameras. In the <a href=\"/Legacy:UMS/PawnTutorial\"\
      \ title=\"Legacy:UMS/PawnTutorial\">next tutorial</a>, I will cover how to add\
      \ actors into your films, and how to make them do whatever you want them to\
      \ do.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.053 seconds\nReal\
      \ time usage: 0.055 seconds\nPreprocessor visited node count: 42/1000000\nPreprocessor\
      \ generated node count: 48/1000000\nPost‐expand include size: 0/2097152 bytes\n\
      Template argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive\
      \ parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report\
      \ (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\n<!-- Saved\
      \ in parser cache with key wiki:pcache:idhash:3363-0!*!0!!en!*!* and timestamp\
      \ 20221118161224 and revision id 8679\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:UMS/BasicTutorial"
  - ns: 100
    exists: true
    name: "Legacy:UMS/PawnTutorial"
  - ns: 100
    exists: true
    name: "Legacy:UMS"
  - ns: 100
    exists: false
    name: "Legacy:UMSInterpolation"
  templates: []
  images: []
  externallinks:
  - "http://unframed.brokenpipefilms.com"
  sections:
  - toclevel: 1
    level: "2"
    line: "Unreal Movie Studio Cameras"
    number: "1"
    index: "1"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 0
    anchor: "Unreal_Movie_Studio_Cameras"
  - toclevel: 2
    level: "3"
    line: "Introduction"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 143
    anchor: "Introduction"
  - toclevel: 2
    level: "3"
    line: "Setting up the movie"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 651
    anchor: "Setting_up_the_movie"
  - toclevel: 2
    level: "3"
    line: "Panning (rotating) the camera"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 4814
    anchor: "Panning_.28rotating.29_the_camera"
  - toclevel: 2
    level: "3"
    line: "Dollying (moving) the camera"
    number: "1.4"
    index: "5"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 6962
    anchor: "Dollying_.28moving.29_the_camera"
  - toclevel: 2
    level: "3"
    line: "Zooming the camera"
    number: "1.5"
    index: "6"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 7486
    anchor: "Zooming_the_camera"
  - toclevel: 2
    level: "3"
    line: "Making the camera track an object"
    number: "1.6"
    index: "7"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 7815
    anchor: "Making_the_camera_track_an_object"
  - toclevel: 2
    level: "3"
    line: "Making the camera circle an object"
    number: "1.7"
    index: "8"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 8587
    anchor: "Making_the_camera_circle_an_object"
  - toclevel: 2
    level: "3"
    line: "Making the camera chase an object"
    number: "1.8"
    index: "9"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 10595
    anchor: "Making_the_camera_chase_an_object"
  - toclevel: 2
    level: "3"
    line: "Making the camera interpolate"
    number: "1.9"
    index: "10"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 11429
    anchor: "Making_the_camera_interpolate"
  - toclevel: 2
    level: "3"
    line: "What's next"
    number: "1.10"
    index: "11"
    fromtitle: "Legacy:UMS/CameraTutorial"
    byteoffset: 12324
    anchor: "What.27s_next"
  displaytitle: "Legacy:UMS/CameraTutorial"
  iwlinks: []
  wikitext:
    text: "==Unreal Movie Studio Cameras ==\n\nby Hugh Macdonald\n\n[http://unframed.brokenpipefilms.com\
      \ UnFramed Productions]\n\n[[Legacy:UMS|Main UMS Page]]\n\n===Introduction ===\n\
      \nThis tutorial aims to give the UMS user an understanding of how to add and\
      \ use Cameras. \n\nI may refer back to something mentioned in the first tutorial,\
      \ without explaining it. This will usually be something that an experienced\
      \ UnrealEd user may know. This will be things like adding objects, opening the\
      \ object properties. \n\nBefore you start this tutorial, please make sure you\
      \ have a map built with what I mentioned at the end of the [[Legacy:UMS/BasicTutorial|first\
      \ tutorial]] in it.\n\n===Setting up the movie ===\n\n# Once you have UMS loaded\
      \ into UnrealEd, locate MovieCamera in the classes browser. This is the object\
      \ that will control where the viewer sees from at any point. The MovieCamera\
      \ is almost completely moveable, with some very nice effects built into UMS.\
      \ \n# When you have found MovieCamera, add one into your level somewhere near\
      \ where you want the view to be from. It is very useful to put the 3D view looking\
      \ from this place, as you can then line up the shot exactly.\n# Unreal Tournament\
      \ has, as a default, a FOV (Field Of View) of 90o. This means that if you took\
      \ a top down view of the player, what he can see is 90o from left to right.\
      \ This is a lot wider than normal film lenses. In fact, a lens of 25mm (the\
      \ widest normally used) corresponds to a FOV of 52.9<sup>o</sup>.\n# Therefore,\
      \ this is the value that I generally use. I have noticed that this removes a\
      \ lot of the feel that you are watching it in a game.\n# To actually change\
      \ the FOV of the camera, you need to go into the MovieCamera properties. In\
      \ there, expand MovieCamera and change the '''CurrentFOV''' to whatever you\
      \ want.\n# The other slight problem with this is the fact that the 3D view will\
      \ be zoomed further out that what will eventually come out onto the screen.\
      \ So, we also need to change the FOV of the 3D view. You do this by finding\
      \ the Camera in one of the 2D views (it looks like an eye with a red arrow coming\
      \ out of it) and opening up it's properties. Expand Pawn, and change '''FOVAngle'''\
      \ to whatever FOV you will be using.\n# Now we have the camera in the level,\
      \ and the 3D view and the camera set to the same FOV, we need to place the camera\
      \ in the same position as the 3D view. Firstly, make sure that the 3D view is\
      \ looking at whatever you want the camera to be looking at. The 3D view can\
      \ see slightly more than the camera, so make sure that there is nothing important\
      \ right at the edge of the screen. \n# There are two ways to move the camera\
      \ to the 3D view - a quick and easy, but not extremely accurate way, which is\
      \ to just move it and rotate it in the 2D views until it looks vaguely in the\
      \ right place. \n# The other way is to copy the positional and rotations coordinates\
      \ by hand. This can get quite tedious, but is a lot more accurate. To do this,\
      \ open up the 3D view's properties, and expand '''Movement'''. Expand '''Location'''\
      \ and write down the three values for x, y, and z (you can do it to however\
      \ many decimal places you want - I normally do it to the nearest integer). Then\
      \ expand '''Rotation''', and do the same thing with the rotational values. (The\
      \ rotational values in Unreal are done whereby 216 (65536) is 360o) If the camera\
      \ is going to be a still camera, it doesn't matter if one of the rotational\
      \ values is, say 133608. If, however, you want the camera to move (dolly) or\
      \ rotate (pan), then you will need to make the rotational values between -32768\
      \ and 32768. If, at any point, you find that a camera does a flip, you will\
      \ need to either add 65536 (or a multiple of) or take 65536 from the rotation.\
      \ \n# Once you have these values written down, open up the MovieCamera properties,\
      \ and go to Movement -> Location and type the values for the location in. Then,\
      \ go to Movement -> Rotation and do the same. Now, your MovieCamera should be\
      \ in the same place as the 3D view.\n# We now need to name the MovieCamera.\
      \ If you use UnrealEd a lot, you will know exactly how to do this. If, however,\
      \ you are a new user, you do this by opening the MovieCamera properties, and\
      \ going to '''Event'''. Then, put the name for the MovieCamera into Tag. Each\
      \ object in the level should be named differently, with certain exceptions.\
      \ I tend to name my cameras '''Camera1''', '''Camera2''' etc. Make sure that\
      \ there are no spaces in the name.\n# You now should have your MovieCamera in\
      \ the level, and are ready to add it to your director. Open up the director\
      \ properties, and put '''Camera Camera1 CutTo''' in the next available slot.\
      \ This will cause the view to be moved to that of Camera1's. That is the most\
      \ basic command. The other commands, which I will go through in order, are Pan,\
      \ Dolly, Zoom, Track, Circle, ChaseCam, and Interpolate. \n\n===Panning (rotating)\
      \ the camera ===\n\n# There are three different ways of panning the camera.\
      \ You can either pan by a certain amount, pan to a point described in the Director,\
      \ or you can pan to a point in the level (could be an actor, could be a SimplePoint\
      \ (as described in the previous tutorial)). \n# To pan a camera, you need to\
      \ know the camera's name. In my example, I have used '''Camera1''' as my camera.\
      \ If you want a camera to start panning as soon as the view goes to that camera,\
      \ you need to start the next slot in Script with the following: '''Camera Camera1\
      \ Pan'''. \n# In the script, the first word will always be what type of object\
      \ is being used (in this case, a camera). The second word is the tag of the\
      \ object (Camera1 here). Anything after that is what will happen to that object.\
      \ In this case, we have put '''Pan''' next, so UMS will then look in ScriptRotators\
      \ to see how much we want to pan the camera. '''Yaw''' is a change in the horizontal\
      \ rotation (as if you rotated it from the top down view). '''Pitch''' changes\
      \ the camera to be looking up or down, and '''Roll''' will, well, roll the camera.\
      \ \n# If, instead of '''Camera Camera1 Pan''', you put '''Camera Camera1 Pan\
      \ To''', UMS would look in ScriptVectors for a point on the map. It would then\
      \ pan to look at that point. If you want the camera to look at a point, it is\
      \ invariably easier to just put a SimplePoint into the map at the point, and\
      \ tell the camera to pan to that. This is done by putting '''Camera Camera1\
      \ Pan To CamPoint1''', where '''CamPoint1''' is the tag of the SimplePoint.\
      \ \n# The one thing that I have missed out in this is the time that the camera\
      \ takes to pan from one point to another. This is entered in the ScriptVals,\
      \ in seconds. \n# That is about it for panning the camera. If you use either\
      \ '''Pan To''' or '''Pan To CamPoint1''' and you find that the camera either\
      \ rotates the wrong way, or does a complete flip, then you'll have to check\
      \ the original camera's rotation. Try adding 65536 to or taking 65536 away from\
      \ the rotation that is going the wrong way. This may cause it to do a double\
      \ flip, or may cause the problem to be corrected. \n\n===Dollying (moving) the\
      \ camera ===\n\n# Dollying works in much the same way as panning. To dolly by\
      \ a certain amount, you put '''Camera Camera1 Dolly''' with the amount to dolly\
      \ by in ScriptVectors.\n# To dolly to a certain point, you either put '''Camera\
      \ Camera1 Dolly To''', with the point to dolly to in ScriptVectors, or you put\
      \ '''Camera Camera1 Dolly CamPoint1''' where '''CamPoint1''' is the SimplePoint\
      \ that you want to dolly to. \n# As with panning, the time you want the camera\
      \ to take dollying goes in ScriptVals. \n\n===Zooming the camera ===\n\n# Zooming\
      \ is a very simple command. The Script command is very simply '''Camera Camera1\
      \ Zoom'''. The FOV that you want it to zoom to is put in one of the ScriptVectors\
      \ slots (only one - leave the other two at 0). \n# The time you want that camera\
      \ to take to zoom into that FOV is put into ScriptVals. \n\n===Making the camera\
      \ track an object ===\n\n# Tracking is also a very simple command, but a very\
      \ widely used one. If you tell the camera to track an object, it will follow\
      \ that object, until told to either pan of chase. All you put in is '''Camera\
      \ Camera1 Track CamPoint1''' where '''CamPoint1''' is the tag of either a SimplePoint,\
      \ or a moving object that you want to track (usually a pawn) \n# The other options\
      \ with this command are to track a point offset from the target. To set the\
      \ offset, put the values in ScriptVectors. \n# The other option is to let the\
      \ camera only track horizontally, or vertically. To stop the camera from yawing\
      \ (panning horizontally), set Yaw, in ScriptRotators, to '''-1'''. Do the same\
      \ to Pitch if you want to restrict the vertical panning. \n\n===Making the camera\
      \ circle an object ===\n\n# Circling is probably one of the most complex Camera\
      \ commands, but can produce stunning effects (Stephen Deaver's words, not mine!).\
      \ Most of the time, you will probably want to circle a moving pawn, or object,\
      \ but you can also have the camera circle a spot in space (by using a SimplePoint).\
      \ There is a way to make this spot, even if it doesn't have anything there,\
      \ move. I will cover that in the pawns tutorial. \n# To circle a point, there\
      \ are two options for how far the camera starts from the object. You can set\
      \ the camera to start the distance that you want from the object that it is\
      \ circling. This is great if the object is stationary, but as soon as you have\
      \ an object that is moving, it becomes slightly inaccurate. \n# The other option\
      \ is to make it out of two commands. The first one dollys the camera to the\
      \ point that you want it to circle in 0 seconds (instantaneously). Then, you\
      \ can use ScriptVals to determine how much further away from the object you\
      \ want to go. \n# The command to go in Script is very simple: '''Camera Camera1\
      \ Circle CamPoint1'''\n# The values which determine how fast the camera is circling\
      \ the object are in ScriptRotators. '''Yaw''' will make the camera circle horizontally\
      \ round the point. This will be in how many units per second (so, putting a\
      \ value of 65536 in will make it do one revolution per second). '''Pitch'''\
      \ will make the camera rotate over or under it's target. Doing a combination\
      \ of both of these can produce some wonderful effects. \n# Just doing Circle\
      \ on it's own will make the position of the camera circle the point, but not\
      \ make the camera point to it. To do that, you need to combine the Circle command\
      \ with a Track command. \n# The other option that is available with the Circle\
      \ command is the ability to circle round a point that is offset from the target.\
      \ This offset is defined by ScriptVectors. This would be useful for if you wanted\
      \ to rotate round an actor's head, which may not be their centre. \n\n===Making\
      \ the camera chase an object ===\n\n# This will allow the camera to remain at\
      \ a certain point from an object, turning with it, and moving with it. The Script\
      \ command is '''Camera Camera1 ChaseCam Actor1''' where '''Actor1''' is the\
      \ actor that the camera will be chasing. \n# In ScriptVectors, you should put\
      \ the offset that you want the camera to chase from. This is where a positive\
      \ x value is in front of the actor, a positive z value is above the actor, and\
      \ a positive y value is to the right of the actor. \n# The ScriptRotators has\
      \ the rotational difference in. If this is all set to 0, then the camera will\
      \ be pointing the same direction as the actor. If, say, the camera was above\
      \ and behind the actor, you would want to set the '''Pitch''' to be slightly\
      \ negative. This would cause the camera to look down to the actor. \n\n===Making\
      \ the camera interpolate ===\n\n# Interpolation is a very useful tool, for when\
      \ you want the camera to follow a long winding path. With dollying, you can\
      \ only make the camera move in a straight line. This section will only describe\
      \ how to make the camera go to an interpolation path. For instructions on setting\
      \ up an interpolation path, go to the [[Legacy:UMSInterpolation|Interpolation\
      \ tutorial]]. \n# To make the camera follow an interpolation path, the command\
      \ is '''Camera Camera1 Interpolate InterpolationTag''' where '''InterpolationTag'''\
      \ is the tag of the Interpolation Points. \n# ScriptVals is the rate at which\
      \ the camera moves along the Interpolation path. One of ScriptVectors (leave\
      \ the other two at 0) is the alpha of the camera. This is how dark it is. It\
      \ is best to leave this at 0 too, as this will make no difference. If the alpha\
      \ is 255, the the screen with be blank. \n\n===What's next ===\n\nThat was how\
      \ to use cameras. In the [[Legacy:UMS/PawnTutorial|next tutorial]], I will cover\
      \ how to add actors into your films, and how to make them do whatever you want\
      \ them to do."
  properties: []
  revId: 8679
name: "Legacy:UMS/CameraTutorial"
revision:
  revid: 8679
  parentid: 8680
  user: "Proxy3ext.disney.com"
  timestamp: 1033424530.000000000
  comment: "fixed Unframed Productions link"
timestamp: 1668787793.478152000
