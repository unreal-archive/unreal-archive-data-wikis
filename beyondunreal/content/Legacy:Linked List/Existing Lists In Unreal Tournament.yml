---
parse:
  title: "Legacy:Linked List/Existing Lists In Unreal Tournament"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Existing_Lists_in_Unreal_Tournament\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Existing Lists in\
      \ Unreal Tournament</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"\
      ><a href=\"#Actor_List\"><span class=\"tocnumber\">1.1</span> <span class=\"\
      toctext\">Actor List</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-3\"\
      ><a href=\"#Type_and_Scope\"><span class=\"tocnumber\">1.1.1</span> <span class=\"\
      toctext\">Type and Scope</span></a></li>\n<li class=\"toclevel-3 tocsection-4\"\
      ><a href=\"#Adding_and_Removing\"><span class=\"tocnumber\">1.1.2</span> <span\
      \ class=\"toctext\">Adding and Removing</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-5\"><a href=\"#Navigating\"><span class=\"tocnumber\">1.1.3</span>\
      \ <span class=\"toctext\">Navigating</span></a></li>\n</ul>\n</li>\n<li class=\"\
      toclevel-2 tocsection-6\"><a href=\"#Inventory_List\"><span class=\"tocnumber\"\
      >1.2</span> <span class=\"toctext\">Inventory List</span></a>\n<ul>\n<li class=\"\
      toclevel-3 tocsection-7\"><a href=\"#Type_and_Scope_2\"><span class=\"tocnumber\"\
      >1.2.1</span> <span class=\"toctext\">Type and Scope</span></a></li>\n<li class=\"\
      toclevel-3 tocsection-8\"><a href=\"#Adding_and_Removing_2\"><span class=\"\
      tocnumber\">1.2.2</span> <span class=\"toctext\">Adding and Removing</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-9\"><a href=\"#Navigating_2\"><span class=\"\
      tocnumber\">1.2.3</span> <span class=\"toctext\">Navigating</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#Pawn_List\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Pawn List</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-11\"><a href=\"#Type_and_Scope_3\"><span\
      \ class=\"tocnumber\">1.3.1</span> <span class=\"toctext\">Type and Scope</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-12\"><a href=\"#Adding_and_Removing_3\"><span\
      \ class=\"tocnumber\">1.3.2</span> <span class=\"toctext\">Adding and Removing</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-13\"><a href=\"#Navigating_3\"><span class=\"\
      tocnumber\">1.3.3</span> <span class=\"toctext\">Navigating</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"#Navigation_Point_List\"\
      ><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">Navigation Point\
      \ List</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-15\"><a href=\"#Type_and_Scope_4\"\
      ><span class=\"tocnumber\">1.4.1</span> <span class=\"toctext\">Type and Scope</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-16\"><a href=\"#Adding_and_Removing_4\"><span\
      \ class=\"tocnumber\">1.4.2</span> <span class=\"toctext\">Adding and Removing</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-17\"><a href=\"#Navigating_4\"><span class=\"\
      tocnumber\">1.4.3</span> <span class=\"toctext\">Navigating</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-18\"><a href=\"#Mutator_List\"\
      ><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">Mutator List</span></a>\n\
      <ul>\n<li class=\"toclevel-3 tocsection-19\"><a href=\"#Type_and_Scope_5\"><span\
      \ class=\"tocnumber\">1.5.1</span> <span class=\"toctext\">Type and Scope</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-20\"><a href=\"#Adding\"><span class=\"tocnumber\"\
      >1.5.2</span> <span class=\"toctext\">Adding</span></a>\n<ul>\n<li class=\"\
      toclevel-4 tocsection-21\"><a href=\"#Normal_Mutators\"><span class=\"tocnumber\"\
      >1.5.2.1</span> <span class=\"toctext\">Normal Mutators</span></a></li>\n<li\
      \ class=\"toclevel-4 tocsection-22\"><a href=\"#Damage_Mutators\"><span class=\"\
      tocnumber\">1.5.2.2</span> <span class=\"toctext\">Damage Mutators</span></a></li>\n\
      <li class=\"toclevel-4 tocsection-23\"><a href=\"#Message_Mutators\"><span class=\"\
      tocnumber\">1.5.2.3</span> <span class=\"toctext\">Message Mutators</span></a></li>\n\
      <li class=\"toclevel-4 tocsection-24\"><a href=\"#HUD_Mutators\"><span class=\"\
      tocnumber\">1.5.2.4</span> <span class=\"toctext\">HUD Mutators</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-3 tocsection-25\"><a href=\"#Removing\"><span\
      \ class=\"tocnumber\">1.5.3</span> <span class=\"toctext\">Removing</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-26\"><a href=\"#Navigating_5\"><span class=\"\
      tocnumber\">1.5.4</span> <span class=\"toctext\">Navigating</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-27\"><a href=\"#Spawn_Notification_List\"\
      ><span class=\"tocnumber\">1.6</span> <span class=\"toctext\">Spawn Notification\
      \ List</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-28\"><a href=\"#Type_and_Scope_6\"\
      ><span class=\"tocnumber\">1.6.1</span> <span class=\"toctext\">Type and Scope</span></a></li>\n\
      <li class=\"toclevel-3 tocsection-29\"><a href=\"#Adding_and_Removing_5\"><span\
      \ class=\"tocnumber\">1.6.2</span> <span class=\"toctext\">Adding and Removing</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-30\"><a href=\"#Other_Cases_of_Linked_Lists\"\
      ><span class=\"tocnumber\">1.7</span> <span class=\"toctext\">Other Cases of\
      \ Linked Lists</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-31\"\
      ><a href=\"#Related_Topics\"><span class=\"tocnumber\">2</span> <span class=\"\
      toctext\">Related Topics</span></a></li>\n<li class=\"toclevel-1 tocsection-32\"\
      ><a href=\"#Discussion\"><span class=\"tocnumber\">3</span> <span class=\"toctext\"\
      >Discussion</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Existing_Lists_in_Unreal_Tournament\">Existing Lists in Unreal Tournament</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=1\"\
      \ title=\"Edit section: Existing Lists in Unreal Tournament\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>This part of the\
      \ tutorial explains existing <a href=\"/Legacy:Linked_List\" title=\"Legacy:Linked\
      \ List\">linked lists</a> in Unreal Tournament.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Actor_List\">Actor List</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=2\"\
      \ title=\"Edit section: Actor List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"Type_and_Scope\"\
      >Type and Scope</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=3\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> All actors in Unreal are connected though\
      \ a gigantic list (well it is actually a dynamic array, but to make life easier\
      \ think of it as a list) that exists only in the native C++ code. Without this\
      \ list, actors would be just plain old objects. The base of this \"list\" is\
      \ actually the native level object (all actors have a pointer to this: Xlevel).</p>\n\
      <p><b>Scope:</b> Exists on both client and server. When a client \"receives\"\
      \ an actor, it is added and when its connection is closed (except with <a href=\"\
      /Legacy:Replication\" title=\"Legacy:Replication\">bNetTemporary</a>), it is\
      \ removed.</p>\n<h4><span class=\"mw-headline\" id=\"Adding_and_Removing\">Adding\
      \ and Removing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=4\"\
      \ title=\"Edit section: Adding and Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Adding:</b> Spawning an actor automatically does\
      \ this. It adds at the end of the list. Note that <a href=\"/Legacy:LevelInfo\"\
      \ title=\"Legacy:LevelInfo\">LevelInfo</a> is always the first actor.</p>\n\
      <p><b>Removing:</b> Destroying an actor automatically does this.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Navigating\">Navigating</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=5\"\
      \ title=\"Edit section: Navigating\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>In the <a href=\"/Legacy:Actor\" title=\"Legacy:Actor\"\
      >Actor</a> class, various \"iterators\" exist. These allow you read the list\
      \ in different ways. Simply use <code>ForEach Iterator_Function(params)</code>\
      \ to use them. ForEach acts much like a For Loop.</p>\n<dl>\n<dt>AllActors (\
      \ class&lt;actor&gt; BaseClass, out actor Actor, optional name MatchTag )&#160;</dt>\n\
      <dd>BaseClass is the parent of classes you wish to look for. The actor pointer\
      \ passed in the second parameter becomes the actor outputted. As the iterator\
      \ functions are hard-coded into the compiler, you can have the actor pointer\
      \ be of the BaseClass or any of its parents. Matchtag, if given, will only return\
      \ actors, which have that tag. This will go through every actor in the level\
      \ and is thus somewhat slow (this is not noticeable however unless it is called\
      \ multiple times in one frame), and thus use it sparingly. If a more class specific\
      \ list exists, such as that for pawns and navigation points (see below), use\
      \ those instead. Note that if you wish to terminate the loop when a certain\
      \ actor is returned, simply use <code>break;</code>.</dd>\n</dl>\n<dl>\n<dt>ChildActors\
      \ ( class&lt;actor&gt; BaseClass, out actor Actor )&#160;</dt>\n<dd>The parameters\
      \ work the same as AllActors'. However, this only returns actors with their\
      \ owner set to the class this is run on. It has the same speed hit as AllActors.</dd>\n\
      </dl>\n<dl>\n<dt>BasedActors ( class&lt;actor&gt; BaseClass, out actor Actor\
      \ )&#160;</dt>\n<dd>Returns all actors that have this as a base. Same speed\
      \ hit as AllActors.</dd>\n</dl>\n<dl>\n<dt>TraceActors ( class&lt;actor&gt;\
      \ BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector\
      \ End, optional vector Start, optional vector Extent )&#160;</dt>\n<dd>This\
      \ is supposed to trace a line from Start to End and return all actors hit (executes\
      \ as fast as a normal trace). However, this is not ever used by Epic in code\
      \ and I recall of no one ever getting it to work right. I do not recommend using\
      \ it.</dd>\n</dl>\n<dl>\n<dt>RadiusActors ( class&lt;actor&gt; BaseClass, out\
      \ actor Actor, float Radius, optional vector Loc )&#160;</dt>\n<dd>This returns\
      \ all actors that are within radius units of Loc (or if it isn't given; then\
      \ the actor's location). Same speed hit as AllActors().</dd>\n</dl>\n<dl>\n\
      <dt>VisibleActors ( class&lt;actor&gt; BaseClass, out actor Actor, optional\
      \ float Radius, optional vector Loc )&#160;</dt>\n<dd>This is much like RadiusActors()\
      \ only it also checks if an actor is visible from Loc. Same speed hit as AllActors.</dd>\n\
      </dl>\n<dl>\n<dt>VisibleCollidingActors ( class&lt;actor&gt; BaseClass, out\
      \ actor Actor, optional float Radius, optional vector Loc, optional bool bIgnoreHidden\
      \ )&#160;</dt>\n<dd>This only returns actors with bCollideActors as true. It\
      \ uses the collision hash to check, and thus it is much faster than Allactors,\
      \ in normal circumstances. If a very high radius is used (900 or so), then it\
      \ becomes very slow, and VisibleActors should be used instead.</dd>\n</dl>\n\
      <dl>\n<dt>ZoneInfo.ZoneActors( class&lt;actor&gt; BaseClass, out actor Actor\
      \ )&#160;</dt>\n<dd>Returns all actors inside that zone. Same speed hit as AllActors().\
      \ Go figure.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Inventory_List\"\
      >Inventory List</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=6\"\
      \ title=\"Edit section: Inventory List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"Type_and_Scope_2\"\
      >Type and Scope</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=7\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> Standard one way linked list. Notice\
      \ how it is defined in actor, and not in inventory. This is designed so other\
      \ actors (pawns) can have a link to the base, while keeping the same pointer\
      \ name.</p>\n<p><b>Scope:</b> Server. On the client side however, it will only\
      \ exist for the player being controlled and within his inventory. Other player's\
      \ will not have an inventory list. Note that in very rare events, replication\
      \ can come at a weird order and cause the inventory pointer of one item to point\
      \ to an older one in the list. Thus when using this list client-side, you should\
      \ have a check so that no more than 100 or so loops occur (to avoid infinite\
      \ iterators).</p>\n<h4><span class=\"mw-headline\" id=\"Adding_and_Removing_2\"\
      >Adding and Removing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=8\"\
      \ title=\"Edit section: Adding and Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Adding:</b> Call AddInventory() on the pawn you\
      \ wish to add that inventory item to with that item in the parameters. It is\
      \ then added to the beginning of the inventory list. This should only be done\
      \ server-side. Note that inventory's GiveTo() automatically does this.</p>\n\
      <p><b>Removing:</b> Class DeleteInventory() on the pawn(owner) with the item\
      \ you wish to delete in the parameters. Again, this should only be performed\
      \ server-side. When an inventory item is destroyed, this automatically occurs\
      \ (see Inventory.Destroyed()).</p>\n<h4><span class=\"mw-headline\" id=\"Navigating_2\"\
      >Navigating</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=9\"\
      \ title=\"Edit section: Navigating\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>If you are only searching for one item of a certain\
      \ class (not child classes!), you can simply call FindInventoryType on the pawn\
      \ who owns the items. Yet to search through the entire list do the following:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">Local</span> <span\
      \ class=\"kw9\">Inventory</span> Inv;\n<span class=\"kw2\">For</span> <span\
      \ class=\"br0\">(</span>Inv<span class=\"sy0\">=</span>somepawn.<span class=\"\
      kw9\">Inventory</span>;Inv<span class=\"sy0\">!=</span><span class=\"kw5\">none</span>;Inv<span\
      \ class=\"sy0\">=</span>Inv.<span class=\"kw9\">Inventory</span><span class=\"\
      br0\">)</span>\n  <span class=\"co1\">//do stuff here</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Pawn_List\">Pawn List</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=10\"\
      \ title=\"Edit section: Pawn List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This list is the reason I am writing this tutorial.\
      \ I tire of seeing code that uses ForEach AllActors(class'pawn',p), when there\
      \ is a much faster way this can be done.</p>\n<h4><span class=\"mw-headline\"\
      \ id=\"Type_and_Scope_3\">Type and Scope</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=11\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> Native controlled standard one way list\
      \ linked by LevelInfo.PawnList.</p>\n<p><b>Scope:</b> Server Side only at BeginPlay()\
      \ in gameinfo. Thus, on a client or in a mutator (post/pre)BeginPlay(), you\
      \ need to stick with AllActors(class'pawn',p)</p>\n<h4><span class=\"mw-headline\"\
      \ id=\"Adding_and_Removing_3\">Adding and Removing</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=12\"\
      \ title=\"Edit section: Adding and Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Adding:</b> Simply call AddPawn() on the pawn.\
      \ Note that pawn automatically does this in its PreBeginPlay() so you really\
      \ do not need to worry about calling this. Adds to the end of the list.</p>\n\
      <p><b>Removing:</b> Call RemovePawn() on the pawn. This is automatically taken\
      \ care of in Destroyed().</p>\n<h4><span class=\"mw-headline\" id=\"Navigating_3\"\
      >Navigating</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=13\"\
      \ title=\"Edit section: Navigating\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>The list base is located in levelinfo. Simply call\
      \ (in any actor):</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Local</span> <span class=\"kw9\">pawn</span> p;\n<span class=\"kw2\">For</span>\
      \ <span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"kw7\"\
      >level</span>.<span class=\"me0\">pawnlist</span>;p<span class=\"sy0\">!=</span><span\
      \ class=\"kw5\">none</span>;p<span class=\"sy0\">=</span>p.<span class=\"me0\"\
      >nextpawn</span><span class=\"br0\">)</span>\n  <span class=\"co1\">//do stuff</span></pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"Navigation_Point_List\">Navigation\
      \ Point List</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=14\"\
      \ title=\"Edit section: Navigation Point List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<h4><span class=\"mw-headline\" id=\"Type_and_Scope_4\"\
      >Type and Scope</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=15\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> Constant standard one way list linked\
      \ by LevelInfo.NavigationPointList.</p>\n<p><b>Scope:</b> Server-side only.</p>\n\
      <h4><span class=\"mw-headline\" id=\"Adding_and_Removing_4\">Adding and Removing</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=16\"\
      \ title=\"Edit section: Adding and Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Cannot be done. The list is generated upon building\
      \ the paths in UnrealEd.</p>\n<h4><span class=\"mw-headline\" id=\"Navigating_4\"\
      >Navigating</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=17\"\
      \ title=\"Edit section: Navigating\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Most likely you will use the navigation point list\
      \ to find path nodes (a simple navpoint added by level authors). This allows\
      \ you to spawn actors at many different locations in the map, and still have\
      \ bots touch them. For instance, the relics mutator searches the Navigation\
      \ Point list for pathnodes. Relics are then spawned at a random node. Like the\
      \ pawn list, the base is in LevelInfo.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">Local</span> <span class=\"kw9\">NavigationPoint</span>\
      \ np;\n<span class=\"kw2\">For</span> <span class=\"br0\">(</span>np<span class=\"\
      sy0\">=</span><span class=\"kw7\">level</span>.<span class=\"me0\">NavigationPointList</span>;np<span\
      \ class=\"sy0\">!=</span><span class=\"kw5\">none</span>;np<span class=\"sy0\"\
      >=</span>np.<span class=\"me0\">nextnavigationpoint</span><span class=\"br0\"\
      >)</span>\n  <span class=\"co1\">//do stuff</span></pre></div>\n</div>\n<p>Note\
      \ that many other lists exist within navigation point. They are all used exclusively\
      \ for AI navigation. Unless your name is Pfhoenix, they have no meaning.</p>\n\
      <h3><span class=\"mw-headline\" id=\"Mutator_List\">Mutator List</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=18\"\
      \ title=\"Edit section: Mutator List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The introduction of mutators in Unreal 2.24 was one\
      \ of the best things ever done for mod makers. What makes mutators so powerful?\
      \ The fact that they are linked lists. This allows many different mods to be\
      \ run at once and change many different game elements.</p>\n<p>There are in\
      \ fact 4 mutator lists in Unreal Tournament; the primary mutator list, damage\
      \ mutators that only affect (Mutator)TakeDamage calls, message mutators that\
      \ only affect messages (BroadCast, BroadCastLocalized, and player's talking),\
      \ and finally HUD mutators that allow mutators to draw on the HUD.</p>\n<h4><span\
      \ class=\"mw-headline\" id=\"Type_and_Scope_5\">Type and Scope</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=19\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> All are standard one-way linked lists.\
      \ HUD mutators are linked to by a HUD, and all others are linked by the GameInfo.</p>\n\
      <p><b>Scope:</b> Mutators normally (default) only exist server-side. However,\
      \ the HUD mutators must be on the client (see below).</p>\n<h4><span class=\"\
      mw-headline\" id=\"Adding\">Adding</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=20\"\
      \ title=\"Edit section: Adding\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<h5><span class=\"mw-headline\" id=\"Normal_Mutators\"\
      >Normal Mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=21\"\
      \ title=\"Edit section: Normal Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h5>\n<p>When a user selects start, UT opens a map with a special\
      \ parameter:</p>\n<pre> ?mutator=MutatorPackage.MutatorClass,AnotherMutatorPackage.AnotherMutatorClass\n\
      </pre>\n<p>The GameInfo's InitGame() is called when it is first spawned. First\
      \ the base mutator (generally DMMutator) is spawned. From there the mutator\
      \ options are parsed (this tutorial is not about string manipulation and Unreal\
      \ URLs!), the mutator class dynamically loaded, then spawned, then finally added\
      \ to the list:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Add mutator\
      \ \"</span><span class=\"sy0\">$</span>LeftOpt<span class=\"br0\">)</span>;\n\
      MClass <span class=\"sy0\">=</span> class<span class=\"sy0\">&lt;</span>Mutator<span\
      \ class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">DynamicLoadObject</span><span\
      \ class=\"br0\">(</span>LeftOpt, <span class=\"kw1\">class</span><span class=\"\
      st0\">'Class'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\
      \ \nBaseMutator.<span class=\"me0\">AddMutator</span><span class=\"br0\">(</span><span\
      \ class=\"kw4\">Spawn</span><span class=\"br0\">(</span>MClass<span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>AddMutator()\
      \ adds to the end of the list with the \"1337 function\" method described earlier\
      \ in this tutorial. Now the mutator list is ready to receive notification of\
      \ actor spawning, mutate commands, player respawnings, death notifications,\
      \ and all those other wonderful events mutators receive from pawns and, more\
      \ commonly, the gameinfo.</p>\n<h5><span class=\"mw-headline\" id=\"Damage_Mutators\"\
      >Damage Mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=22\"\
      \ title=\"Edit section: Damage Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h5>\n<p>To make a mutator be used as a damage mutator (it\
      \ still has normal mutator functions!), simply call Level.Game.RegisterDamageMutator(MutatorToBeRegistered).\
      \ The mutator will now receive notification whenever a pawn takes damage and\
      \ can modify certain values.</p>\n<h5><span class=\"mw-headline\" id=\"Message_Mutators\"\
      >Message Mutators</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=23\"\
      \ title=\"Edit section: Message Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h5>\n<p>This is another specialized mutator, not unlike a\
      \ damage mutator. Simply call Level.Game.RegisterMessageMutator(MutatorToBeRegistered)\
      \ to be able to edit all of the wonderful messages. Incidentally, message mutators\
      \ did not exist until UT version 4.13. They were created simply for support\
      \ of Rocket Arena. They have also been beneficial in stopping message hacking.&#160;:p</p>\n\
      <h5><span class=\"mw-headline\" id=\"HUD_Mutators\">HUD Mutators</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=24\"\
      \ title=\"Edit section: HUD Mutators\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h5>\n<p>I cannot even count the amount of times people have\
      \ asked why their HUD mutator will not work in network play. What is the reason\
      \ for this problem? It is quite simple; mutators exist only on the server, yet\
      \ HUDs are client-side only. Epic's code makes it appear that you can simply\
      \ call RegisterHUDMutator, which is untrue. The following is one way of adding\
      \ a HUD mutator on the client:</p>\n<p><b>Step 1:</b> In the default properties\
      \ of your mutator, place the following:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\">bAlwaysRelevant<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      bNetTemporary<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n<span\
      \ class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"\
      kw7\">ROLE_SimulatedProxy</span></pre></div>\n</div>\n<p>These values cause\
      \ the mutator to be replicated to all clients, but the connection only stays\
      \ open until the client has received the mutator. The mutator must also be a\
      \ Simulated Proxy on the client for step 2 to work.</p>\n<p><b>Step 2:</b> Now\
      \ add the following code to your mutator:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">Simulated</span> <span class=\"kw1\">Function</span>\
      \ <span class=\"kw4\">Tick</span><span class=\"br0\">(</span><span class=\"\
      kw5\">float</span> delta<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw2\">If</span> <span class=\"br0\">(</span><span class=\"\
      kw7\">Level</span>.<span class=\"me0\">NetMode</span> <span class=\"sy0\">==</span>\
      \ NM_DedicatedServer <span class=\"sy0\">||</span> bHUDMutator<span class=\"\
      br0\">)</span>\n    <span class=\"kw3\">Disable</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'Tick'</span><span class=\"br0\">)</span>;\n  <span class=\"\
      kw2\">Else</span>\n    RegisterHUDMutator<span class=\"br0\">(</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Each frame,\
      \ RegisterHUDMutator() is called. If it finds a PlayerPawn with a HUD (local\
      \ player!), it will set that HUD's HUDMutator to this mutator (as well as preserve\
      \ the list) and set bHUDMutator to true. If the mutator has already been registered\
      \ or this is a dedicated server (no HUDs!), then tick () can be safely disabled.</p>\n\
      <p>On a final note, I ask that all mod makers who make use of HUD mutators to\
      \ do the following: At the end of PostRender() in your HUD mutator, <i>please</i>\
      \ add:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div\
      \ class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw2\"\
      >If</span> <span class=\"br0\">(</span>NextHUDMutator <span class=\"sy0\">!=</span>\
      \ <span class=\"kw5\">None</span><span class=\"br0\">)</span>\n  NextHUDMutator.<span\
      \ class=\"me0\">PostRender</span><span class=\"br0\">(</span><span class=\"\
      kw8\">Canvas</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>For\
      \ some dumb reason, Epic did not add that support to begin with. Without those\
      \ lines, your mutator will be the only HUD mutator used. Other HUD mutators\
      \ will not receive PostRender() calls, and thus not be able to display anything\
      \ on screen.</p>\n<h4><span class=\"mw-headline\" id=\"Removing\">Removing</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=25\"\
      \ title=\"Edit section: Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>No specialized functions exist to remove elements\
      \ from mutator lists. Simply follow the removal model at the beginning of this\
      \ tutorial.</p>\n<h4><span class=\"mw-headline\" id=\"Navigating_5\">Navigating</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=26\"\
      \ title=\"Edit section: Navigating\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Rarely will you ever need to iterate through the mutator\
      \ list. All functions of mutators simply call that same function on the next\
      \ mutator, returning a result if necessary. Yet if you wish to go through all\
      \ mutators simply use:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Local</span> <span class=\"kw9\">mutator</span> m;\n<span class=\"kw2\"\
      >For</span> <span class=\"br0\">(</span>m <span class=\"sy0\">=</span> ListStart;\
      \ m <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span>; m <span class=\"\
      sy0\">=</span> m.<span class=\"me0\">ListNext</span><span class=\"br0\">)</span>\n\
      \  <span class=\"co1\">//do stuff</span></pre></div>\n</div>\n<p>Replace <code>ListStart</code>\
      \ and <code>ListNext</code> as follows:</p>\n<table>\n<tr>\n<td><b>Mutator Type</b></td>\n\
      <td><b>ListStart</b></td>\n<td><b>ListNext</b></td>\n</tr>\n<tr>\n<td>Normal</td>\n\
      <td><code>Level.Game.BaseMutator</code></td>\n<td><code>NextMutator</code></td>\n\
      </tr>\n<tr>\n<td>Damage</td>\n<td><code>Level.Game.DamageMutator</code></td>\n\
      <td><code>NextDamageMutator</code></td>\n</tr>\n<tr>\n<td>Message</td>\n<td><code>Level.Game.MessageMutator</code></td>\n\
      <td><code>NextMessageMutator</code></td>\n</tr>\n<tr>\n<td>HUD</td>\n<td><code>MyPlayerPawn.myHUD.HUDMutator</code></td>\n\
      <td><code>NextHUDMutator</code></td>\n</tr>\n</table>\n<h3><span class=\"mw-headline\"\
      \ id=\"Spawn_Notification_List\">Spawn Notification List</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=27\"\
      \ title=\"Edit section: Spawn Notification List\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>This is a list of very powerful actors; SpawnNotifies.\
      \ For more information read <a rel=\"nofollow\" class=\"external free\" href=\"\
      http://unreal.epicgames.com/UTMagic.html\">http://unreal.epicgames.com/UTMagic.html</a>.\
      \ Whenever an actor is spawned/received on a client, native code calls SpawnNotification(actor)\
      \ on the LevelInfo.SpawnNotify.</p>\n<h4><span class=\"mw-headline\" id=\"Type_and_Scope_6\"\
      >Type and Scope</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=28\"\
      \ title=\"Edit section: Type and Scope\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Type:</b> Standard one-way list linked by LevelInfo.SpawnNotify.</p>\n\
      <p><b>Scope:</b> Server and client-side. Note however that SpawnNotifies manually\
      \ add themselves on both server and client, rather than having the list replicated,\
      \ as is the case with inventory.</p>\n<h4><span class=\"mw-headline\" id=\"\
      Adding_and_Removing_5\">Adding and Removing</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=29\"\
      \ title=\"Edit section: Adding and Removing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p><b>Adding:</b> SpawnNotify.PostBeginPlay() automatically\
      \ adds to the beginning of the list.</p>\n<p><b>Removing:</b> SpawnNotify.Destroyed()\
      \ automatically removes that SpawnNotify. Feel free to call Destroyed() yourself\
      \ to remove a SpawnNotify from a list, for this does not actually destroy the\
      \ actor.</p>\n<p><b>Note:</b> The entire spawn notification system can be temporary\
      \ deactivated as follows:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">Local</span> SpawnNotify Sn;\nSn<span class=\"sy0\">=</span><span class=\"\
      kw7\">level</span>.<span class=\"me0\">SpawnNotify</span>;\n<span class=\"kw7\"\
      >Level</span>.<span class=\"me0\">SpawnNotify</span><span class=\"sy0\">=</span><span\
      \ class=\"kw5\">None</span>;\n<span class=\"co1\">//do stuff here without worrying\
      \ about Spawn Notifies.</span>\n<span class=\"kw7\">Level</span>.<span class=\"\
      me0\">SpawnNotify</span><span class=\"sy0\">=</span>Sn;</pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"Other_Cases_of_Linked_Lists\">Other Cases\
      \ of Linked Lists</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=30\"\
      \ title=\"Edit section: Other Cases of Linked Lists\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>InterpolationPoint&#160;</dt>\n\
      <dd>Uses a two-way list for interpolation of player locations and other properties\
      \ between each point. While the list is created in unrealscript, that is as\
      \ far as unrealscript handles it. Everything else is handled by native code.</dd>\n\
      </dl>\n<dl>\n<dt>Pbolt&#160;</dt>\n<dd>Uses a standard one-way list that you\
      \ will probably never need to touch. The plasma beam you see when alt firing\
      \ the Pulse Gun is actually a linked list of Pbolt's. Unfortunately, the system\
      \ wasn't written in the best way possible. Ideally, there should be a pointer\
      \ to the StarterBolt in all beams. Variables only important to the beam as a\
      \ whole (AccumulatedDamage, LastHitTime) are controlled in each beam, rather\
      \ than only the list base. Thus when beams are destroyed, some of those values\
      \ are lost, resulting in odd damage patterns.</dd>\n</dl>\n<dl>\n<dt>Mover&#160;</dt>\n\
      <dd>Uses a one-way linked list that also has a pointer to the base. This is\
      \ used for movers that follow other movers. Feel free to explore this code on\
      \ your own.</dd>\n</dl>\n<dl>\n<dt>Actor.Deleted&#160;</dt>\n<dd>A list of actors\
      \ that have been deleted and are awaiting garbage collection. This occurs when\
      \ 128 actors are in the list. This is only used in Epic's native C++ code.</dd>\n\
      </dl>\n<dl>\n<dt>SavedMove&#160;</dt>\n<dd>For player movement in a network\
      \ environment, the client must save old moves to be sent later (to avoid overflowing\
      \ the network and in cases of packet loss). The actual list is the standard\
      \ one-way one, which carries move information. A playerpawn has pointers to\
      \ the SavedMoves (the beginning of the SaveMove list), FreeMoves (a move that\
      \ is \"free\"), and PendingMove (the next move to be sent to the server). Yet,\
      \ this is a tutorial on lists, not something else. Study the SavedMove class\
      \ and PlayerPawn.ReplicateMove() to learn more.</dd>\n</dl>\n<dl>\n<dt>Menu.ParentMenu&#160;</dt>\n\
      <dd>This is simply a pointer to the previous green menu that showed. These \"\
      green menus\" were used in Unreal I only. There is little need to understand\
      \ how they work if you script in UT.</dd>\n</dl>\n<dl>\n<dt>ListElement&#160;</dt>\n\
      <dd>This is a two-way list that was set up for use with the WebAdmin. It is\
      \ a quite powerful method of storing data.</dd>\n</dl>\n<dl>\n<dt>UWindowList&#160;</dt>\n\
      <dd>This is a very advanced list, which stores various data for the uWindow\
      \ system.</dd>\n</dl>\n<dl>\n<dt>UWindowWindow&#160;</dt>\n<dd>All the menus\
      \ seen in UT are actually stored with this complex list system.</dd>\n</dl>\n\
      <h2><span class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=31\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Scripting_Linked_Lists\"\
      \ title=\"Legacy:Scripting Linked Lists\">Scripting Linked Lists</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament?section=32\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>Daid303:</b> How about a UT2003 version of this\
      \ page?</p>\n<p><b>Foxpaw:</b> UT2003 uses the same lists. New lists of items\
      \ have mostly been implemented as dynamic arrays instead. There is also one\
      \ new linked list to my knowledge, the inventory list of an actor.</p>\n<p><b>Wormbo:</b>\
      \ The linked list of Inventory actors was declared in <a href=\"/Legacy:Actor\"\
      \ title=\"Legacy:Actor\">Actor</a> back in Unreal 1 v205 already.&#160;;) We\
      \ should probably create a page for all <i>useful</i> lists (not only linked\
      \ lists) both in UT and UT2003. Things like the list of deleted actors can hardly\
      \ be called useful in everyday UnrealScript coding...</p>\n<p><b>Daid303:</b>\
      \ In UT2003 you also have the GUI, linked list? (didn't look) and controller\
      \ ofcouse, is pawn still linked? And it would be nice to know what does and\
      \ doesn't apply to UT2003. Oh, and how about a 'base' for linked list, 1 way,\
      \ and 2 way. It would be alot easier of you could just copy a basic then work\
      \ from that. I made a mistake in a 2 way linked list, and it took me quite a\
      \ while to fix the remove function.</p>\n<p><b>Wormbo:</b> The GUI stuff is\
      \ a set of dynamic arrays in the <a href=\"/Legacy:GUIController\" title=\"\
      Legacy:GUIController\">GUIController</a>. Pawns aren't \"listed\" anymore, the\
      \ Level.PawnList has been replaced by the Level.ControllerList.</p>\n<p><b>Tarquin:</b>\
      \ I've rearranged other pages on linked lists. What should be done with this\
      \ one?</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.219 seconds\nReal\
      \ time usage: 0.880 seconds\nPreprocessor visited node count: 207/1000000\n\
      Preprocessor generated node count: 312/1000000\nPost‐expand include size: 0/2097152\
      \ bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\n\
      Expensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1667-0!*!0!!en!*!*\
      \ and timestamp 20221118091917 and revision id 46179\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:GUIController"
  - ns: 100
    exists: true
    name: "Legacy:Actor"
  - ns: 100
    exists: true
    name: "Legacy:Scripting Linked Lists"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: true
    name: "Legacy:LevelInfo"
  - ns: 100
    exists: true
    name: "Legacy:Linked List"
  templates: []
  images: []
  externallinks:
  - "http://unreal.epicgames.com/UTMagic.html"
  sections:
  - toclevel: 1
    level: "2"
    line: "Existing Lists in Unreal Tournament"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 0
    anchor: "Existing_Lists_in_Unreal_Tournament"
  - toclevel: 2
    level: "3"
    line: "Actor List"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 145
    anchor: "Actor_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.1.1"
    index: "3"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 164
    anchor: "Type_and_Scope"
  - toclevel: 3
    level: "4"
    line: "Adding and Removing"
    number: "1.1.2"
    index: "4"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 746
    anchor: "Adding_and_Removing"
  - toclevel: 3
    level: "4"
    line: "Navigating"
    number: "1.1.3"
    index: "5"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 996
    anchor: "Navigating"
  - toclevel: 2
    level: "3"
    line: "Inventory List"
    number: "1.2"
    index: "6"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 3853
    anchor: "Inventory_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.2.1"
    index: "7"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 3876
    anchor: "Type_and_Scope_2"
  - toclevel: 3
    level: "4"
    line: "Adding and Removing"
    number: "1.2.2"
    index: "8"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 4573
    anchor: "Adding_and_Removing_2"
  - toclevel: 3
    level: "4"
    line: "Navigating"
    number: "1.2.3"
    index: "9"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 5128
    anchor: "Navigating_2"
  - toclevel: 2
    level: "3"
    line: "Pawn List"
    number: "1.3"
    index: "10"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 5474
    anchor: "Pawn_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.3.1"
    index: "11"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 5661
    anchor: "Type_and_Scope_3"
  - toclevel: 3
    level: "4"
    line: "Adding and Removing"
    number: "1.3.2"
    index: "12"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 5933
    anchor: "Adding_and_Removing_3"
  - toclevel: 3
    level: "4"
    line: "Navigating"
    number: "1.3.3"
    index: "13"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 6258
    anchor: "Navigating_3"
  - toclevel: 2
    level: "3"
    line: "Navigation Point List"
    number: "1.4"
    index: "14"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 6440
    anchor: "Navigation_Point_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.4.1"
    index: "15"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 6470
    anchor: "Type_and_Scope_4"
  - toclevel: 3
    level: "4"
    line: "Adding and Removing"
    number: "1.4.2"
    index: "16"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 6612
    anchor: "Adding_and_Removing_4"
  - toclevel: 3
    level: "4"
    line: "Navigating"
    number: "1.4.3"
    index: "17"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 6718
    anchor: "Navigating_4"
  - toclevel: 2
    level: "3"
    line: "Mutator List"
    number: "1.5"
    index: "18"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 7421
    anchor: "Mutator_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.5.1"
    index: "19"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 8007
    anchor: "Type_and_Scope_5"
  - toclevel: 3
    level: "4"
    line: "Adding"
    number: "1.5.2"
    index: "20"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 8291
    anchor: "Adding"
  - toclevel: 4
    level: "5"
    line: "Normal Mutators"
    number: "1.5.2.1"
    index: "21"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 8308
    anchor: "Normal_Mutators"
  - toclevel: 4
    level: "5"
    line: "Damage Mutators"
    number: "1.5.2.2"
    index: "22"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 9298
    anchor: "Damage_Mutators"
  - toclevel: 4
    level: "5"
    line: "Message Mutators"
    number: "1.5.2.3"
    index: "23"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 9586
    anchor: "Message_Mutators"
  - toclevel: 4
    level: "5"
    line: "HUD Mutators"
    number: "1.5.2.4"
    index: "24"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 9986
    anchor: "HUD_Mutators"
  - toclevel: 3
    level: "4"
    line: "Removing"
    number: "1.5.3"
    index: "25"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 11848
    anchor: "Removing"
  - toclevel: 3
    level: "4"
    line: "Navigating"
    number: "1.5.4"
    index: "26"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 12005
    anchor: "Navigating_5"
  - toclevel: 2
    level: "3"
    line: "Spawn Notification List"
    number: "1.6"
    index: "27"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 12812
    anchor: "Spawn_Notification_List"
  - toclevel: 3
    level: "4"
    line: "Type and Scope"
    number: "1.6.1"
    index: "28"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 13092
    anchor: "Type_and_Scope_6"
  - toclevel: 3
    level: "4"
    line: "Adding and Removing"
    number: "1.6.2"
    index: "29"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 13377
    anchor: "Adding_and_Removing_5"
  - toclevel: 2
    level: "3"
    line: "Other Cases of Linked Lists"
    number: "1.7"
    index: "30"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 13960
    anchor: "Other_Cases_of_Linked_Lists"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "2"
    index: "31"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 16230
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "32"
    fromtitle: "Legacy:Linked_List/Existing_Lists_In_Unreal_Tournament"
    byteoffset: 16309
    anchor: "Discussion"
  displaytitle: "Legacy:Linked List/Existing Lists In Unreal Tournament"
  iwlinks: []
  wikitext:
    text: "==Existing Lists in Unreal Tournament ==\n\nThis part of the tutorial explains\
      \ existing [[Legacy:Linked List|linked list]]s in Unreal Tournament.\n\n===Actor\
      \ List ===\n\n====Type and Scope ====\n\n'''Type:''' All actors in Unreal are\
      \ connected though a gigantic list (well it is actually a dynamic array, but\
      \ to make life easier think of it as a list) that exists only in the native\
      \ C++ code. Without this list, actors would be just plain old objects. The base\
      \ of this \"list\" is actually the native level object (all actors have a pointer\
      \ to this: Xlevel).\n\n'''Scope:''' Exists on both client and server. When a\
      \ client \"receives\" an actor, it is added and when its connection is closed\
      \ (except with [[Legacy:Replication|bNetTemporary]]), it is removed.\n\n====Adding\
      \ and Removing ====\n\n'''Adding:''' Spawning an actor automatically does this.\
      \ It adds at the end of the list. Note that [[Legacy:LevelInfo|LevelInfo]] is\
      \ always the first actor.\n\n'''Removing:''' Destroying an actor automatically\
      \ does this.\n\n====Navigating ====\n\nIn the [[Legacy:Actor|Actor]] class,\
      \ various \"iterators\" exist. These allow you read the list in different ways.\
      \ Simply use <code>ForEach Iterator_Function(params)</code> to use them. ForEach\
      \ acts much like a For Loop.\n\n; AllActors ( class<actor> BaseClass, out actor\
      \ Actor, optional name MatchTag ) : BaseClass is the parent of classes you wish\
      \ to look for. The actor pointer passed in the second parameter becomes the\
      \ actor outputted. As the iterator functions are hard-coded into the compiler,\
      \ you can have the actor pointer be of the BaseClass or any of its parents.\
      \ Matchtag, if given, will only return actors, which have that tag. This will\
      \ go through every actor in the level and is thus somewhat slow (this is not\
      \ noticeable however unless it is called multiple times in one frame), and thus\
      \ use it sparingly. If a more class specific list exists, such as that for pawns\
      \ and navigation points (see below), use those instead. Note that if you wish\
      \ to terminate the loop when a certain actor is returned, simply use <code>break;</code>.\n\
      \n; ChildActors ( class<actor> BaseClass, out actor Actor ) : The parameters\
      \ work the same as AllActors'. However, this only returns actors with their\
      \ owner set to the class this is run on. It has the same speed hit as AllActors.\n\
      \n; BasedActors ( class<actor> BaseClass, out actor Actor ) : Returns all actors\
      \ that have this as a base. Same speed hit as AllActors.\n\n; TraceActors (\
      \ class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm,\
      \ vector End, optional vector Start, optional vector Extent ) : This is supposed\
      \ to trace a line from Start to End and return all actors hit (executes as fast\
      \ as a normal trace). However, this is not ever used by Epic in code and I recall\
      \ of no one ever getting it to work right. I do not recommend using it.\n\n\
      ; RadiusActors ( class<actor> BaseClass, out actor Actor, float Radius, optional\
      \ vector Loc ) : This returns all actors that are within radius units of Loc\
      \ (or if it isn't given; then the actor's location). Same speed hit as AllActors().\n\
      \n; VisibleActors ( class<actor> BaseClass, out actor Actor, optional float\
      \ Radius, optional vector Loc ) : This is much like RadiusActors() only it also\
      \ checks if an actor is visible from Loc. Same speed hit as AllActors.\n\n;\
      \ VisibleCollidingActors ( class<actor> BaseClass, out actor Actor, optional\
      \ float Radius, optional vector Loc, optional bool bIgnoreHidden ) : This only\
      \ returns actors with bCollideActors as true. It uses the collision hash to\
      \ check, and thus it is much faster than Allactors, in normal circumstances.\
      \ If a very high radius is used (900 or so), then it becomes very slow, and\
      \ VisibleActors should be used instead.\n\n; ZoneInfo.ZoneActors( class<actor>\
      \ BaseClass, out actor Actor ) : Returns all actors inside that zone. Same speed\
      \ hit as AllActors(). Go figure.\n\n===Inventory List ===\n\n====Type and Scope\
      \ ====\n\n'''Type:'''  Standard one way linked list. Notice how it is defined\
      \ in actor, and not in inventory. This is designed so other actors (pawns) can\
      \ have a link to the base, while keeping the same pointer name.\n\n'''Scope:'''\
      \  Server. On the client side however, it will only exist for the player being\
      \ controlled and within his inventory. Other player's will not have an inventory\
      \ list. Note that in very rare events, replication can come at a weird order\
      \ and cause the inventory pointer of one item to point to an older one in the\
      \ list. Thus when using this list client-side, you should have a check so that\
      \ no more than 100 or so loops occur (to avoid infinite iterators).\n\n====Adding\
      \ and Removing ====\n\n'''Adding:''' Call AddInventory() on the pawn you wish\
      \ to add that inventory item to with that item in the parameters. It is then\
      \ added to the beginning of the inventory list. This should only be done server-side.\
      \ Note that inventory's GiveTo() automatically does this.\n\n'''Removing:'''\
      \ Class DeleteInventory() on the pawn(owner) with the item you wish to delete\
      \ in the parameters. Again, this should only be performed server-side. When\
      \ an inventory item is destroyed, this automatically occurs (see Inventory.Destroyed()).\n\
      \n====Navigating ====\n\nIf you are only searching for one item of a certain\
      \ class (not child classes!), you can simply call FindInventoryType on the pawn\
      \ who owns the items. Yet to search through the entire list do the following:\n\
      \n<uscript>\nLocal Inventory Inv;\nFor (Inv=somepawn.Inventory;Inv!=none;Inv=Inv.Inventory)\n\
      \  //do stuff here\n</uscript>\n\n===Pawn List ===\n\nThis list is the reason\
      \ I am writing this tutorial. I tire of seeing code that uses ForEach AllActors(class'pawn',p),\
      \ when there is a much faster way this can be done.\n\n====Type and Scope ====\n\
      \n'''Type:''' Native controlled standard one way list linked by LevelInfo.PawnList.\n\
      \n'''Scope:''' Server Side only at BeginPlay() in gameinfo. Thus, on a client\
      \ or in a mutator (post/pre)BeginPlay(), you need to stick with AllActors(class'pawn',p)\n\
      \n====Adding and Removing ====\n\n'''Adding:''' Simply call AddPawn() on the\
      \ pawn. Note that pawn automatically does this in its PreBeginPlay() so you\
      \ really do not need to worry about calling this. Adds to the end of the list.\n\
      \n'''Removing:''' Call RemovePawn() on the pawn. This is automatically taken\
      \ care of in Destroyed().\n\n====Navigating ====\n\nThe list base is located\
      \ in levelinfo. Simply call (in any actor):\n\n<uscript>\nLocal pawn p;\nFor\
      \ (p=level.pawnlist;p!=none;p=p.nextpawn)\n  //do stuff\n</uscript>\n\n===Navigation\
      \ Point List ===\n\n====Type and Scope ====\n\n'''Type:''' Constant standard\
      \ one way list linked by LevelInfo.NavigationPointList.\n\n'''Scope:''' Server-side\
      \ only.\n\n====Adding and Removing ====\n\nCannot be done. The list is generated\
      \ upon building the paths in UnrealEd.\n\n====Navigating ====\n\nMost likely\
      \ you will use the navigation point list to find path nodes (a simple navpoint\
      \ added by level authors). This allows you to spawn actors at many different\
      \ locations in the map, and still have bots touch them. For instance, the relics\
      \ mutator searches the Navigation Point list for pathnodes. Relics are then\
      \ spawned at a random node. Like the pawn list, the base is in LevelInfo. \n\
      \n<uscript>\nLocal NavigationPoint np;\nFor (np=level.NavigationPointList;np!=none;np=np.nextnavigationpoint)\n\
      \  //do stuff\n</uscript>\n\nNote that many other lists exist within navigation\
      \ point. They are all used exclusively for AI navigation. Unless your name is\
      \ Pfhoenix, they have no meaning.\n\n===Mutator List ===\n\nThe introduction\
      \ of mutators in Unreal 2.24 was one of the best things ever done for mod makers.\
      \ What makes mutators so powerful? The fact that they are linked lists. This\
      \ allows many different mods to be run at once and change many different game\
      \ elements.\n\nThere are in fact 4 mutator lists in Unreal Tournament; the primary\
      \ mutator list, damage mutators that only affect (Mutator)TakeDamage calls,\
      \ message mutators that only affect messages (BroadCast, BroadCastLocalized,\
      \ and player's talking), and finally HUD mutators that allow mutators to draw\
      \ on the HUD.\n\n====Type and Scope ====\n\n'''Type:''' All are standard one-way\
      \ linked lists. HUD mutators are linked to by a HUD, and all others are linked\
      \ by the GameInfo.\n\n'''Scope:''' Mutators normally (default) only exist server-side.\
      \ However, the HUD mutators must be on the client (see below).\n\n====Adding\
      \ ====\n\n=====Normal Mutators =====\n\nWhen a user selects start, UT opens\
      \ a map with a special parameter:\n\n  ?mutator=MutatorPackage.MutatorClass,AnotherMutatorPackage.AnotherMutatorClass\n\
      \nThe GameInfo's InitGame() is called when it is first spawned. First the base\
      \ mutator (generally DMMutator) is spawned. From there the mutator options are\
      \ parsed (this tutorial is not about string manipulation and Unreal URLs!),\
      \ the mutator class dynamically loaded, then spawned, then finally added to\
      \ the list:\n\n<uscript>\nlog(\"Add mutator \"$LeftOpt);\nMClass = class<Mutator>(DynamicLoadObject(LeftOpt,\
      \ class'Class')); \nBaseMutator.AddMutator(Spawn(MClass));\n</uscript>\n\nAddMutator()\
      \ adds to the end of the list with the \"1337 function\" method described earlier\
      \ in this tutorial. Now the mutator list is ready to receive notification of\
      \ actor spawning, mutate commands, player respawnings, death notifications,\
      \ and all those other wonderful events mutators receive from pawns and, more\
      \ commonly, the gameinfo.\n\n=====Damage Mutators =====\n\nTo make a mutator\
      \ be used as a damage mutator (it still has normal mutator functions!), simply\
      \ call Level.Game.RegisterDamageMutator(MutatorToBeRegistered). The mutator\
      \ will now receive notification whenever a pawn takes damage and can modify\
      \ certain values.\n\n=====Message Mutators =====\n\nThis is another specialized\
      \ mutator, not unlike a damage mutator. Simply call Level.Game.RegisterMessageMutator(MutatorToBeRegistered)\
      \ to be able to edit all of the wonderful messages. Incidentally, message mutators\
      \ did not exist until UT version 4.13. They were created simply for support\
      \ of Rocket Arena. They have also been beneficial in stopping message hacking.\
      \ :p\n\n===== HUD Mutators =====\n\nI cannot even count the amount of times\
      \ people have asked why their HUD mutator will not work in network play. What\
      \ is the reason for this problem? It is quite simple; mutators exist only on\
      \ the server, yet HUDs are client-side only. Epic's code makes it appear that\
      \ you can simply call RegisterHUDMutator, which is untrue. The following is\
      \ one way of adding a HUD mutator on the client:\n\n'''Step 1:''' In the default\
      \ properties of your mutator, place the following:\n\n<uscript>\nbAlwaysRelevant=True\n\
      bNetTemporary=True\nRemoteRole=ROLE_SimulatedProxy\n</uscript>\n\nThese values\
      \ cause the mutator to be replicated to all clients, but the connection only\
      \ stays open until the client has received the mutator. The mutator must also\
      \ be a Simulated Proxy on the client for step 2 to work.\n\n'''Step 2:''' Now\
      \ add the following code to your mutator:\n\n<uscript>\nSimulated Function Tick(float\
      \ delta)\n{\n  If (Level.NetMode == NM_DedicatedServer || bHUDMutator)\n   \
      \ Disable('Tick');\n  Else\n    RegisterHUDMutator();\n}\n</uscript>\n\nEach\
      \ frame, RegisterHUDMutator() is called. If it finds a PlayerPawn with a HUD\
      \ (local player!), it will set that HUD's HUDMutator to this mutator (as well\
      \ as preserve the list) and set bHUDMutator to true. If the mutator has already\
      \ been registered or this is a dedicated server (no HUDs!), then tick () can\
      \ be safely disabled.\n\nOn a final note, I ask that all mod makers who make\
      \ use of HUD mutators to do the following:  At the end of PostRender() in your\
      \ HUD mutator, ''please'' add:\n\n<uscript>\nIf (NextHUDMutator != None)\n \
      \ NextHUDMutator.PostRender(Canvas);\n</uscript>\n\nFor some dumb reason, Epic\
      \ did not add that support to begin with. Without those lines, your mutator\
      \ will be the only HUD mutator used. Other HUD mutators will not receive PostRender()\
      \ calls, and thus not be able to display anything on screen.\n\n====Removing\
      \ ====\n\nNo specialized functions exist to remove elements from mutator lists.\
      \ Simply follow the removal model at the beginning of this tutorial.\n\n====Navigating\
      \ ====\n\nRarely will you ever need to iterate through the mutator list. All\
      \ functions of mutators simply call that same function on the next mutator,\
      \ returning a result if necessary. Yet if you wish to go through all mutators\
      \ simply use:\n\n<uscript>\nLocal mutator m;\nFor (m = ListStart; m != None;\
      \ m = m.ListNext)\n  //do stuff\n</uscript>\n\nReplace <code>ListStart</code>\
      \ and <code>ListNext</code> as follows:\n\n{|\n\n|-\n|'''Mutator Type'''\n|'''ListStart'''\n\
      |'''ListNext''' \n|-\n|Normal\n|<code>Level.Game.BaseMutator</code>\n|<code>NextMutator</code>\n\
      |-\n|Damage\n|<code>Level.Game.DamageMutator</code>\n|<code>NextDamageMutator</code>\n\
      |-\n|Message\n|<code>Level.Game.MessageMutator</code>\n|<code>NextMessageMutator</code>\n\
      |-\n|HUD\n|<code>MyPlayerPawn.myHUD.HUDMutator</code>\n|<code>NextHUDMutator</code>\n\
      |}\n\n===Spawn Notification List ===\n\nThis is a list of very powerful actors;\
      \ SpawnNotifies. For more information read http://unreal.epicgames.com/UTMagic.html.\
      \ Whenever an actor is spawned/received on a client, native code calls SpawnNotification(actor)\
      \ on the LevelInfo.SpawnNotify.\n\n====Type and Scope ====\n\n'''Type:''' Standard\
      \ one-way list linked by LevelInfo.SpawnNotify.\n\n'''Scope:''' Server and client-side.\
      \ Note however that SpawnNotifies manually add themselves on both server and\
      \ client, rather than having the list replicated, as is the case with inventory.\n\
      \n====Adding and Removing ====\n\n'''Adding:''' SpawnNotify.PostBeginPlay()\
      \ automatically adds to the beginning of the list.\n\n'''Removing:''' SpawnNotify.Destroyed()\
      \ automatically removes that SpawnNotify. Feel free to call Destroyed() yourself\
      \ to remove a SpawnNotify from a list, for this does not actually destroy the\
      \ actor.\n\n'''Note:''' The entire spawn notification system can be temporary\
      \ deactivated as follows:\n\n<uscript>\nLocal SpawnNotify Sn;\nSn=level.SpawnNotify;\n\
      Level.SpawnNotify=None;\n//do stuff here without worrying about Spawn Notifies.\n\
      Level.SpawnNotify=Sn;\n</uscript>\n\n===Other Cases of Linked Lists ===\n\n\
      ; InterpolationPoint : Uses a two-way list for interpolation of player locations\
      \ and other properties between each point. While the list is created in unrealscript,\
      \ that is as far as unrealscript handles it. Everything else is handled by native\
      \ code.\n\n; Pbolt : Uses a standard one-way list that you will probably never\
      \ need to touch. The plasma beam you see when alt firing the Pulse Gun is actually\
      \ a linked list of Pbolt's. Unfortunately, the system wasn't written in the\
      \ best way possible. Ideally, there should be a pointer to the StarterBolt in\
      \ all beams. Variables only important to the beam as a whole (AccumulatedDamage,\
      \ LastHitTime) are controlled in each beam, rather than only the list base.\
      \ Thus when beams are destroyed, some of those values are lost, resulting in\
      \ odd damage patterns.\n\n; Mover : Uses a one-way linked list that also has\
      \ a pointer to the base. This is used for movers that follow other movers. Feel\
      \ free to explore this code on your own.\n\n; Actor.Deleted : A list of actors\
      \ that have been deleted and are awaiting garbage collection. This occurs when\
      \ 128 actors are in the list. This is only used in Epic's native C++ code.\n\
      \n; SavedMove : For player movement in a network environment, the client must\
      \ save old moves to be sent later (to avoid overflowing the network and in cases\
      \ of packet loss). The actual list is the standard one-way one, which carries\
      \ move information. A playerpawn has pointers to the SavedMoves (the beginning\
      \ of the SaveMove list), FreeMoves (a move that is \"free\"), and PendingMove\
      \ (the next move to be sent to the server). Yet, this is a tutorial on lists,\
      \ not something else. Study the SavedMove class and PlayerPawn.ReplicateMove()\
      \ to learn more.\n\n; Menu.ParentMenu : This is simply a pointer to the previous\
      \ green menu that showed. These \"green menus\" were used in Unreal I only.\
      \  There is little need to understand how they work if you script in UT.\n\n\
      ; ListElement : This is a two-way list that was set up for use with the WebAdmin.\
      \ It is a quite powerful method of storing data.\n\n; UWindowList : This is\
      \ a very advanced list, which stores various data for the uWindow system.\n\n\
      ; UWindowWindow : All the menus seen in UT are actually stored with this complex\
      \ list system.\n\n==Related Topics==\n* [[Legacy:Scripting Linked Lists|Scripting\
      \ Linked Lists]]\n\n==Discussion==\n\n'''Daid303:''' How about a UT2003 version\
      \ of this page?\n\n'''Foxpaw:''' UT2003 uses the same lists. New lists of items\
      \ have mostly been implemented as dynamic arrays instead. There is also one\
      \ new linked list to my knowledge, the inventory list of an actor.\n\n'''Wormbo:'''\
      \ The linked list of Inventory actors was declared in [[Legacy:Actor|Actor]]\
      \ back in Unreal 1 v205 already. ;) We should probably create a page for all\
      \ ''useful'' lists (not only linked lists) both in UT and UT2003. Things like\
      \ the list of deleted actors can hardly be called useful in everyday UnrealScript\
      \ coding...\n\n'''Daid303:''' In UT2003 you also have the GUI, linked list?\
      \ (didn't look) and controller ofcouse, is pawn still linked? And it would be\
      \ nice to know what does and doesn't apply to UT2003. Oh, and how about a 'base'\
      \ for linked list, 1 way, and 2 way. It would be alot easier of you could just\
      \ copy a basic then work from that. I made a mistake in a 2 way linked list,\
      \ and it took me quite a while to fix the remove function.\n\n'''Wormbo:'''\
      \ The GUI stuff is a set of dynamic arrays in the [[Legacy:GUIController|GUIController]].\
      \ Pawns aren't \"listed\" anymore, the Level.PawnList has been replaced by the\
      \ Level.ControllerList.\n\n'''Tarquin:''' I've rearranged other pages on linked\
      \ lists. What should be done with this one?"
  properties: []
  revId: 46179
name: "Legacy:Linked List/Existing Lists In Unreal Tournament"
revision:
  revid: 46179
  parentid: 34305
  user: "SeriousBarbie"
  timestamp: 1437350191.000000000
  comment: "Section 1 of 2 does not exist nor the link to it - removed"
timestamp: 1668786444.176608000
