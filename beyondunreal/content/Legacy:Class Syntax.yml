---
parse:
  title: "Legacy:Class Syntax"
  text:
    text: "<p>A <b>class</b> is a piece of <a href=\"/Legacy:UnrealScript\" title=\"\
      Legacy:UnrealScript\">UnrealScript</a> that can be thought of as a small program.\
      \ See <a href=\"http://en.wikipedia.org/wiki/class_(computer_science)\" class=\"\
      extiw\" title=\"wikipedia:class (computer science)\">Wikipedia:class (computer\
      \ science)</a> and <a href=\"/Legacy:Object_Oriented_Programming_Overview\"\
      \ title=\"Legacy:Object Oriented Programming Overview\">Object Oriented Programming\
      \ Overview</a> for the basics of this concept. The rest of this page covers\
      \ the UnrealScript syntax for declaring classes.</p>\n<p></p>\n<div id=\"toc\"\
      \ class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li\
      \ class=\"toclevel-1 tocsection-1\"><a href=\"#Declaration\"><span class=\"\
      tocnumber\">1</span> <span class=\"toctext\">Declaration</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-2\"><a href=\"#expands_vs._extends\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">expands vs. extends</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Optional_modifiers\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Optional modifiers</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#...that_affect_only_this_class\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">...that affect\
      \ only this class</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a\
      \ href=\"#...that_also_affect_subclasses\"><span class=\"tocnumber\">2.2</span>\
      \ <span class=\"toctext\">...that also affect subclasses</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Working_with_classes\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Working with classes</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Casting\"><span class=\"\
      tocnumber\">3.1</span> <span class=\"toctext\">Casting</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Related_Topics\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-9\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Declaration\">Declaration</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Class_Syntax?section=1\" title=\"Edit section: Declaration\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>Class\
      \ definition syntax:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> MyClass <span class=\"kw1\">extends</span> ParentClass <span\
      \ class=\"sy0\">&lt;</span>modifiers<span class=\"sy0\">&gt;</span>;</pre></div>\n\
      </div>\n<h3><span class=\"mw-headline\" id=\"expands_vs._extends\"><tt>expands</tt>\
      \ vs. <tt>extends</tt></span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Class_Syntax?section=2\" title=\"Edit section:\
      \ expands vs. extends\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>UnrealScript originally used the keyword <tt>expands</tt> in the class declaration,\
      \ but long ago switched to <tt>extends</tt>, the keyword used in Java. The UT-generation\
      \ compiler supports both and treats them the same (although <tt>expands</tt>\
      \ was considered deprecated for a while already), but in newer engine generations\
      \ <tt>expands</tt> won't work. So, always use extends when you have a choice.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Optional_modifiers\">Optional modifiers</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Class_Syntax?section=3\" title=\"Edit section: Optional\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <h3><span class=\"mw-headline\" id=\"...that_affect_only_this_class\">...that\
      \ affect only this class</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Class_Syntax?section=4\"\
      \ title=\"Edit section: ...that affect only this class\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<dl>\n<dt>abstract&#160;</dt>\n\
      <dd>This class cannot be spawned, it's a base class only. Usually the useful\
      \ functionality is implemented in subclasses. Examples: <a href=\"/Legacy:Keypoint\"\
      \ title=\"Legacy:Keypoint\">Keypoint</a>, <a href=\"/Legacy:Triggers\" title=\"\
      Legacy:Triggers\">Triggers</a>, <a href=\"/Legacy:Pawn\" title=\"Legacy:Pawn\"\
      >Pawn</a>.</dd>\n<dt>config <i>or</i> config(<i>name</i>)&#160;</dt>\n<dd>This\
      \ class supports saving its config properties to a configuration file. By default\
      \ this is the <a href=\"/Legacy:Game_Ini_File\" title=\"Legacy:Game Ini File\"\
      >Game Ini File</a> (the configuration file that has the same name as the executable\
      \ file of the game, e.g. UnrealTournament.ini or UT2003.ini). Using <tt>config(<i>name</i>)</tt>\
      \ overrides the default config file name for this class. There are two special\
      \ names that can be used here: <b>System</b> uses the game ini file, <b>User</b>\
      \ uses the User.ini. Both names can be mapped to other files via the game's\
      \ <tt>-ini=...-</tt> and <tt>-userini=...-</tt> <a href=\"/edit/Legacy:Command_Line_Parameter?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Command Line Parameter (page does not exist)\"\
      >command line parameters</a>.</dd>\n<dt>NoUserCreate&#160;</dt>\n<dd>Only in\
      \ <a href=\"/Legacy:UT\" title=\"Legacy:UT\" class=\"mw-redirect\">UT</a> or\
      \ earlier engine versions. This class cannot be placed in a map using UnrealEd.\
      \ In newer versions, use <tt>notplaceable</tt>.</dd>\n<dt>Native&#160;</dt>\n\
      <dd>Some behaviour of this class is handled by native code. See <a href=\"/Legacy:Native_Coding\"\
      \ title=\"Legacy:Native Coding\">Native Coding</a>.</dd>\n<dt>(No)NativeReplication&#160;</dt>\n\
      <dd><a href=\"/Legacy:Replication\" title=\"Legacy:Replication\">Replication</a>\
      \ of variables and functions declared in this class is completely handled by\
      \ native code.</dd>\n<dt>SafeReplace&#160;</dt>\n<dd>From a now disappeared\
      \ page about undocumented UnrealScript features: Specifies that a reference\
      \ to this class may safely be set to Null or default if the class object can't\
      \ be found in any packages. For example, you create a map that uses textures\
      \ from the package \"Rugs.utx\". You have two floors in your map, one surface\
      \ using the \"Persian\" texture and the other using the \"Throw\" texture. If\
      \ you close your map, delete \"Persian\" from the texture package and reload\
      \ your map, the surface that was referencing Persian will be changed to reference\
      \ the default texture. This is because the texture class was declared SafeReplace.\
      \ Note that <a href=\"/Legacy:Package\" title=\"Legacy:Package\">packages</a>\
      \ are not SafeReplace. That means if you had deleted the Rugs.utx package completely\
      \ (deleting the file), your map would not load because the <i>package</i> must\
      \ be found.</dd>\n</dl>\n<dl>\n<dt>Within <i>ClassName</i>&#160;</dt>\n<dd></dd>\n\
      </dl>\n<p>Only works in <a href=\"/Legacy:Unreal_Engine_2.0\" title=\"Legacy:Unreal\
      \ Engine 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a> and later engine\
      \ version, and with classes not derived from Actor. It allows access to the\
      \ holding class's members it is declared in. The holding class is optionally\
      \ pointed to by the identifier 'Outer'. For this to work, the class can only\
      \ extend Object.</p>\n<p>Examples include <a href=\"/Legacy:PlayerInput\" title=\"\
      Legacy:PlayerInput\">PlayerInput</a>, <a href=\"/Legacy:AdminBase\" title=\"\
      Legacy:AdminBase\">AdminBase</a>, and <a href=\"/Legacy:CheatManager\" title=\"\
      Legacy:CheatManager\">CheatManager</a>. All three of these are declared to be\
      \ \"<tt>within <a href=\"/Legacy:PlayerController\" title=\"Legacy:PlayerController\"\
      >PlayerController</a></tt>\" and extend object. Since they aren't actors, their\
      \ functions and variables cannot be replicated. Also, if you look carefully,\
      \ you will notice that these classes can call Outer functions (and possibly\
      \ reference Outer variables) without making an explicit reference to \"Outer\"\
      . This has an effect that is somewhat like multiple inheritance, because it\
      \ can call Outer and Super functions.</p>\n<p><br /></p>\n<dl>\n<dt><a href=\"\
      /Legacy:PerObjectConfig\" title=\"Legacy:PerObjectConfig\">PerObjectConfig</a>&#160;</dt>\n\
      <dd>Stores configuration information on a per-object basis rather than a per-class\
      \ basis. This means that each object should have a separate configuration section\
      \ in the configuration file based on its name.</dd>\n<dt>Transient&#160;</dt>\n\
      <dd>This class is not included when saving a game state.</dd>\n<dt>NoExport&#160;</dt>\n\
      <dd>Don't export to C++ header. \"<tt>ucc make -h</tt>\" won't automatically\
      \ generate a C++ header for native functions/events. Please see the following\
      \ pages for more information:</dd>\n<dt>* <a rel=\"nofollow\" class=\"external\
      \ text\" href=\"http://web.archive.org/web/20010412044804/http://www.sleepwalkertc.com/members/blitz/native/native.html\"\
      >Native Functions</a></dt>\n<dt>* <a rel=\"nofollow\" class=\"external text\"\
      \ href=\"http://web.archive.org/web/20010124112800/http://www.chessmess.com/musqa-0500.htm#11\"\
      >UnrealScript Q&amp;A (May 2000)</a></dt>\n<dt>dependsOn(<i>ClassName</i>)&#160;</dt>\n\
      <dd></dd>\n</dl>\n<p>Only works in <a href=\"/Legacy:Unreal_Engine_2.0\" title=\"\
      Legacy:Unreal Engine 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a> and later\
      \ and takes a class name as parameter. Tells the compiler to process another\
      \ class of the same package first because this class depends on an enum or struct\
      \ declared in that other class. If your class depends on more classes you have\
      \ to use the modifier several times, like in <a href=\"/Legacy:XPawn\" title=\"\
      Legacy:XPawn\">xPawn</a>:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> <span class=\"kw9\">xPawn</span> <span class=\"kw1\">extends</span>\
      \ <span class=\"kw9\">UnrealPawn</span>\n    <span class=\"kw1\">config</span><span\
      \ class=\"br0\">(</span>User<span class=\"br0\">)</span>\n    dependsOn<span\
      \ class=\"br0\">(</span><span class=\"kw8\">xUtil</span><span class=\"br0\"\
      >)</span>\n    dependsOn<span class=\"br0\">(</span><span class=\"kw8\">xPawnSoundGroup</span><span\
      \ class=\"br0\">)</span>\n    dependsOn<span class=\"br0\">(</span><span class=\"\
      kw8\">xPawnGibGroup</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <p><b>Note:</b> The compiler does not check dependson for accuracy and will\
      \ cause a GPF if you misspell a class name or if you include spaces inside the\
      \ brackets, like this:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> AClass <span class=\"kw1\">extends</span> <span class=\"\
      kw8\">Object</span>\n    dependsOn<span class=\"br0\">(</span> SomeOtherClass\
      \ <span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>To access the structs\
      \ in a class that is depended on in this way, you must prefix it with the class\
      \ name, like so:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">class</span> A <span class=\"kw1\">extends</span> B dependson<span class=\"\
      br0\">(</span>ThirdClass<span class=\"br0\">)</span>;\n \n<span class=\"kw1\"\
      >var</span> ThirdClass.<span class=\"me0\">SomeStruct</span> Somevariablename.</pre></div>\n\
      </div>\n<p>In certain cases the DependsOn() modifier might not be neccessary.\
      \ Note that you cannot use it to resolve circular dependencies between classes\
      \ in the same package.</p>\n<p><br /></p>\n<dl>\n<dt>exportstructs&#160;</dt>\n\
      <dd>Export all structs declared in this class to C++ header. This is equivalent\
      \ to declaring all structs in the class as \"<tt>native export</tt>\"</dd>\n\
      </dl>\n<dl>\n<dt>CacheExempt&#160;</dt>\n<dd>UT2004 only. Only used in cache\
      \ metaclasses, such as GameInfo, Mutator, Weapon, Vehicle; ignored for any non-cached\
      \ class. This class modifier is used to indicate that the values of this class's\
      \ cacheable properties should not be exported to the .ucl file. In general,\
      \ mod authors will probably never need to use this specifier, as it used for\
      \ gametypes, weapons, mutators, etc., which should <i>not</i> appear in GUI/webadmin\
      \ lists.</dd>\n</dl>\n<dl>\n<dt>HideDropDown</dt>\n<dd>UT2004 only. This class\
      \ will not appear in drop down listboxes in UnrealEd.</dd>\n</dl>\n<dl>\n<dt>ParseConfig</dt>\n\
      <dd>UT2004 only. The .ini file for this class may be specified on the command-line,\
      \ using the syntax ' -classname=filename.ini'. If no parameter is specified\
      \ on the commandline, the class uses its default configuration file (the system\
      \ ini, unless a different ini is specified in the class declaration using Config(xx)).\
      \ For example, in order to specify a unique .ini file for the usernames &amp;\
      \ passwords used by the advanced administration system (xAdmin.xAdminConfigIni),\
      \ add the parameter ' -xAdminConfigIni=filename.ini' to the startup commandline.\
      \ If the commandline doesn't contain this parameter, username/password information\
      \ will be stored in the xAdmin.ini file, because this is what the xAdminConfigIni\
      \ class declares as its config file.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"...that_also_affect_subclasses\">...that also affect subclasses</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Class_Syntax?section=5\" title=\"Edit section: ...that\
      \ also affect subclasses\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <dl>\n<dt>(dont)collapsecategories&#160;</dt>\n<dd>Only works in <a href=\"\
      /Legacy:Unreal_Engine_2.0\" title=\"Legacy:Unreal Engine 2.0\" class=\"mw-redirect\"\
      >Unreal Engine 2.0</a> and later. Collapses all property groups into one main\
      \ property group.</dd>\n<dt>hidecategories(<i>group list</i>)&#160;</dt>\n<dd>Only\
      \ works in <a href=\"/Legacy:Unreal_Engine_2.0\" title=\"Legacy:Unreal Engine\
      \ 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a> and later. Takes a comma-seperated\
      \ list of variable groups. These groups will not be shown in UnrealEd's property\
      \ windows, e.g. the <a href=\"/Legacy:Actor_Properties\" title=\"Legacy:Actor\
      \ Properties\" class=\"mw-redirect\">Actor Properties</a> or <a href=\"/Legacy:Texture_Properties\"\
      \ title=\"Legacy:Texture Properties\">Texture Properties</a>. (also see <a href=\"\
      /Legacy:Displaying_Variables_In_UnrealEd\" title=\"Legacy:Displaying Variables\
      \ In UnrealEd\">Displaying Variables In UnrealEd</a>)</dd>\n<dt>showcategories(<i>group\
      \ list</i>)&#160;</dt>\n<dd>Only works in <a href=\"/Legacy:Unreal_Engine_2.0\"\
      \ title=\"Legacy:Unreal Engine 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a>\
      \ and later. Opposite of <tt>hidecategories</tt>. Variable groups that have\
      \ been hidden in a superclass can be made visible again with this modifier.</dd>\n\
      <dt>(not)placeable&#160;</dt>\n<dd>Only works in <a href=\"/Legacy:Unreal_Engine_2.0\"\
      \ title=\"Legacy:Unreal Engine 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a>\
      \ and later. The class must also be derived from actor or a subclass of actor.\
      \ This means you can(not) place Actors of this class in a level.</dd>\n<dt>(not)editinlinenew&#160;</dt>\n\
      <dd>Only works in <a href=\"/Legacy:Unreal_Engine_2.0\" title=\"Legacy:Unreal\
      \ Engine 2.0\" class=\"mw-redirect\">Unreal Engine 2.0</a> and later. Classes\
      \ also cannot be a subclass of actor. See <a href=\"/Legacy:Editinline\" title=\"\
      Legacy:Editinline\">Editinline</a>.</dd>\n<dt>instanced&#160;</dt>\n<dd>See\
      \ <a href=\"/Legacy:Automated_Component\" title=\"Legacy:Automated Component\"\
      >Automated Component</a>.<br />\nFrom what I can gather this signifies that\
      \ the member variable is owned by the class rather than just being a reference.\
      \ It will replace what would normally be a 4-byte reference with an n-byte instance\
      \ where n = sizeof(YourClass). The benefit is that it allows Object members\
      \ to be visable and editable in the Unreal editor without having to derive from\
      \ Component.<br />\n<b>WARNING:</b> when refactoring and changing to instanced\
      \ old maps will crash when trying to load. To fix, delete appropriate world\
      \ objects from map before refactoring and re-place them after building scripts.</dd>\n\
      </dl>\n<h2><span class=\"mw-headline\" id=\"Working_with_classes\">Working with\
      \ classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Class_Syntax?section=6\" title=\"Edit section:\
      \ Working with classes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>To cover:</p>\n<ul>\n<li>the class&lt;foo&gt; syntax – see <a href=\"/Legacy:Peppers_And_Pepper_Grinders\"\
      \ title=\"Legacy:Peppers And Pepper Grinders\">peppers and pepper grinders</a></li>\n\
      <li>the use of myObject.IsA(class)</li>\n</ul>\n<h3><span class=\"mw-headline\"\
      \ id=\"Casting\">Casting</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Class_Syntax?section=7\"\
      \ title=\"Edit section: Casting\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>rough snip from one of tarquin's unl33t forum postings:</p>\n\
      <blockquote class=\"legacyquote\">\n<p>Example of casting: the syntax</p>\n\
      <p>MyGame(Level.Game).Leader</p>\n<p>Level.Game is a variable that's been declared\
      \ to point to an object of class GameInfo.</p>\n<p>You can make it point to\
      \ a subclass, that's the whole point of OO (polymorphism, isn't it?)</p>\n<p>GameInfo\
      \ class doesn't have a Leader property, so to access that property, you've got\
      \ to temporarily specialize that variable.</p>\n</blockquote>\n<p>See <a href=\"\
      /Legacy:Typecasting\" title=\"Legacy:Typecasting\">Typecasting</a>.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Class_Syntax?section=8\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a></li>\n<li><a href=\"/Legacy:Typecasting\" title=\"Legacy:Typecasting\"\
      >Typecasting</a></li>\n<li>Other important parts of a class script:\n<ul>\n\
      <li><a href=\"/Legacy:Default_Properties\" title=\"Legacy:Default Properties\"\
      >Default Properties</a></li>\n<li><a href=\"/Legacy:Function_Syntax\" title=\"\
      Legacy:Function Syntax\">Function Syntax</a></li>\n<li><a href=\"/Legacy:Replication_Block\"\
      \ title=\"Legacy:Replication Block\">Replication Block</a></li>\n<li><a href=\"\
      /Legacy:Variable_Syntax\" title=\"Legacy:Variable Syntax\">Variable Syntax</a></li>\n\
      </ul>\n</li>\n</ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Class_Syntax?section=9\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>DaWrecka:</b>\
      \ Something I've been trying to find out lately is; Is it possible to find out\
      \ whether an object or actor is abstract, based on the class reference? I'm\
      \ trying to code a new monster manager for Fraghouse Extension, and I'd like\
      \ to weed out the abstract classes from the monster list if possible. So far\
      \ the only plan I've got is trying to spawn the monster, and testing whether\
      \ it succeeded - a definite Plan Z due to the fact this would be from a GUI.\
      \ Spawning would work, but the lack of a GameInfo would likely lead to multiple\
      \ Accessed Nones.</p>\n<p><b>Wormbo:</b> There's no way to tell directly. Try\
      \ spawning it in the entry level, that should have a GameInfo.</p>\n\n<!-- \n\
      NewPP limit report\nCPU time usage: 0.131 seconds\nReal time usage: 0.134 seconds\n\
      Preprocessor visited node count: 84/1000000\nPreprocessor generated node count:\
      \ 177/1000000\nPost‐expand include size: 838/2097152 bytes\nTemplate argument\
      \ size: 371/2097152 bytes\nHighest expansion depth: 3/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    5.060      1 - -total\n100.00%    5.060      1 - Template:Innerbox\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:683-0!*!0!!en!*!*\
      \ and timestamp 20221118014322 and revision id 1993\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Native Coding"
  - ns: 100
    exists: true
    name: "Legacy:Peppers And Pepper Grinders"
  - ns: 100
    exists: true
    name: "Legacy:Editinline"
  - ns: 100
    exists: true
    name: "Legacy:Texture Properties"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Replication Block"
  - ns: 100
    exists: true
    name: "Legacy:Actor Properties"
  - ns: 100
    exists: true
    name: "Legacy:Keypoint"
  - ns: 100
    exists: true
    name: "Legacy:Displaying Variables In UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:PerObjectConfig"
  - ns: 100
    exists: true
    name: "Legacy:Replication"
  - ns: 100
    exists: false
    name: "Legacy:Command Line Parameter"
  - ns: 100
    exists: true
    name: "Legacy:Game Ini File"
  - ns: 100
    exists: true
    name: "Legacy:Typecasting"
  - ns: 100
    exists: true
    name: "Legacy:PlayerController"
  - ns: 100
    exists: true
    name: "Legacy:CheatManager"
  - ns: 100
    exists: true
    name: "Legacy:Default Properties"
  - ns: 100
    exists: true
    name: "Legacy:Function Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Pawn"
  - ns: 100
    exists: true
    name: "Legacy:Object Oriented Programming Overview"
  - ns: 100
    exists: true
    name: "Legacy:Unreal Engine 2.0"
  - ns: 100
    exists: true
    name: "Legacy:PlayerInput"
  - ns: 100
    exists: true
    name: "Legacy:Triggers"
  - ns: 100
    exists: true
    name: "Legacy:AdminBase"
  - ns: 100
    exists: true
    name: "Legacy:UT"
  - ns: 100
    exists: true
    name: "Legacy:Automated Component"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:XPawn"
  - ns: 100
    exists: true
    name: "Legacy:Package"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://web.archive.org/web/20010412044804/http://www.sleepwalkertc.com/members/blitz/native/native.html"
  - "http://web.archive.org/web/20010124112800/http://www.chessmess.com/musqa-0500.htm#11"
  sections:
  - toclevel: 1
    level: "2"
    line: "Declaration"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 349
    anchor: "Declaration"
  - toclevel: 2
    level: "3"
    line: "expands vs. extends"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 461
    anchor: "expands_vs._extends"
  - toclevel: 1
    level: "2"
    line: "Optional modifiers"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 911
    anchor: "Optional_modifiers"
  - toclevel: 2
    level: "3"
    line: "...that affect only this class"
    number: "2.1"
    index: "4"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 936
    anchor: "...that_affect_only_this_class"
  - toclevel: 2
    level: "3"
    line: "...that also affect subclasses"
    number: "2.2"
    index: "5"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 7531
    anchor: "...that_also_affect_subclasses"
  - toclevel: 1
    level: "2"
    line: "Working with classes"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 9452
    anchor: "Working_with_classes"
  - toclevel: 2
    level: "3"
    line: "Casting"
    number: "3.1"
    index: "7"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 9626
    anchor: "Casting"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "8"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 10126
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "9"
    fromtitle: "Legacy:Class_Syntax"
    byteoffset: 10460
    anchor: "Discussion"
  displaytitle: "Legacy:Class Syntax"
  iwlinks:
  - prefix: "wikipedia"
    url: "http://en.wikipedia.org/wiki/class_(computer_science)"
    name: "wikipedia:class (computer science)"
  wikitext:
    text: "A '''class''' is a piece of [[Legacy:UnrealScript|UnrealScript]] that can\
      \ be thought of as a small program. See [[Wikipedia:class (computer science)]]\
      \ and [[Legacy:Object Oriented Programming Overview|Object Oriented Programming\
      \ Overview]] for the basics of this concept. The rest of this page covers the\
      \ UnrealScript syntax for declaring classes.\n\n==Declaration==\n\nClass definition\
      \ syntax:\n\n<uscript>\nclass MyClass extends ParentClass <modifiers>;\n</uscript>\n\
      \n===<tt>expands</tt> vs. <tt>extends</tt> ===\n\nUnrealScript originally used\
      \ the keyword <tt>expands</tt> in the class declaration, but long ago switched\
      \ to <tt>extends</tt>, the keyword used in Java. The UT-generation compiler\
      \ supports both and treats them the same (although <tt>expands</tt> was considered\
      \ deprecated for a while already), but in newer engine generations <tt>expands</tt>\
      \ won't work. So, always use extends when you have a choice. \n\n==Optional\
      \ modifiers ==\n\n===...that affect only this class ===\n; abstract : This class\
      \ cannot be spawned, it's a base class only. Usually the useful functionality\
      \ is implemented in subclasses. Examples: [[Legacy:Keypoint|Keypoint]], [[Legacy:Triggers|Triggers]],\
      \ [[Legacy:Pawn|Pawn]].\n; config ''or'' config(''name'') : This class supports\
      \ saving its config properties to a configuration file. By default this is the\
      \ [[Legacy:Game Ini File|Game Ini File]] (the configuration file that has the\
      \ same name as the executable file of the game, e.g. UnrealTournament.ini or\
      \ UT2003.ini). Using <tt>config(''name'')</tt> overrides the default config\
      \ file name for this class. There are two special names that can be used here:\
      \ '''System''' uses the game ini file, '''User''' uses the User.ini. Both names\
      \ can be mapped to other files via the game's <tt>-ini=...-</tt> and <tt>-userini=...-</tt>\
      \ [[Legacy:Command Line Parameter|command line parameter]]s.\n; NoUserCreate\
      \ : Only in [[Legacy:UT|UT]] or earlier engine versions. This class cannot be\
      \ placed in a map using UnrealEd. In newer versions, use <tt>notplaceable</tt>.\n\
      ; Native : Some behaviour of this class is handled by native code. See [[Legacy:Native\
      \ Coding|Native Coding]].\n; (No)NativeReplication : [[Legacy:Replication|Replication]]\
      \ of variables and functions declared in this class is completely handled by\
      \ native code.\n; SafeReplace : From a now disappeared page about undocumented\
      \ UnrealScript features: Specifies that a reference to this class may safely\
      \ be set to Null or default if the class object can't be found in any packages.\
      \  For example, you create a map that uses textures from the package \"Rugs.utx\"\
      . You have two floors in your map, one surface using the \"Persian\" texture\
      \ and the other using the \"Throw\" texture. If you close your map, delete \"\
      Persian\" from the texture package and reload your map, the surface that was\
      \ referencing Persian will be changed to reference the default texture.  This\
      \ is because the texture class was declared SafeReplace. Note that [[Legacy:Package|package]]s\
      \ are not SafeReplace. That means if you had deleted the Rugs.utx package completely\
      \ (deleting the file), your map would not load because the ''package'' must\
      \ be found.\n\n; Within <i>ClassName</i> : \nOnly works in [[Legacy:Unreal Engine\
      \ 2.0|Unreal Engine 2.0]] and later engine version, and with classes not derived\
      \ from Actor. It allows access to the holding class's members it is declared\
      \ in. The holding class is optionally pointed to by the identifier 'Outer'.\
      \ For this to work, the class can only extend Object.\n\nExamples include [[Legacy:PlayerInput|PlayerInput]],\
      \ [[Legacy:AdminBase|AdminBase]], and [[Legacy:CheatManager|CheatManager]].\
      \  All three of these are declared to be \"<tt>within [[Legacy:PlayerController|PlayerController]]</tt>\"\
      \ and extend object.  Since they aren't actors, their functions and variables\
      \ cannot be replicated.  Also, if you look carefully, you will notice that these\
      \ classes can call Outer functions (and possibly reference Outer variables)\
      \ without making an explicit reference to \"Outer\".  This has an effect that\
      \ is somewhat like multiple inheritance, because it can call Outer and Super\
      \ functions.\n\n\n; [[Legacy:PerObjectConfig|PerObjectConfig]] : Stores configuration\
      \ information on a per-object basis rather than a per-class basis. This means\
      \ that each object should have a separate configuration section in the configuration\
      \ file based on its name.\n; Transient : This class is not included when saving\
      \ a game state.\n; NoExport : Don't export to C++ header.   \"<tt>ucc make -h</tt>\"\
      \ won't automatically generate a C++ header for native functions/events.  Please\
      \ see the following pages for more information:\n; * [http://web.archive.org/web/20010412044804/http://www.sleepwalkertc.com/members/blitz/native/native.html\
      \ Native Functions]\n; * [http://web.archive.org/web/20010124112800/http://www.chessmess.com/musqa-0500.htm#11\
      \ UnrealScript Q&A (May 2000)]\n; dependsOn(<i>ClassName</i>) : \nOnly works\
      \ in [[Legacy:Unreal Engine 2.0|Unreal Engine 2.0]] and later and takes a class\
      \ name as parameter. Tells the compiler to process another class of the same\
      \ package first because this class depends on an enum or struct declared in\
      \ that other class. If your class depends on more classes you have to use the\
      \ modifier several times, like in [[Legacy:XPawn|xPawn]]:\n\n<uscript>\nclass\
      \ xPawn extends UnrealPawn\n    config(User)\n    dependsOn(xUtil)\n    dependsOn(xPawnSoundGroup)\n\
      \    dependsOn(xPawnGibGroup);\n</uscript>\n\n'''Note:''' The compiler does\
      \ not check dependson for accuracy and will cause a GPF if you misspell a class\
      \ name or if you include spaces inside the brackets, like this:\n\n<uscript>\n\
      class AClass extends Object\n    dependsOn( SomeOtherClass );\n</uscript>\n\n\
      To access the structs in a class that is depended on in this way, you must prefix\
      \ it with the class name, like so:\n\n<uscript>\nclass A extends B dependson(ThirdClass);\n\
      \nvar ThirdClass.SomeStruct Somevariablename.\n</uscript>\n\nIn certain cases\
      \ the DependsOn() modifier might not be neccessary. Note that you cannot use\
      \ it to resolve circular dependencies between classes in the same package.\n\
      \n\n; exportstructs : Export all structs declared in this class to C++ header.\
      \ This is equivalent to declaring all structs in the class as \"<tt>native export</tt>\"\
      \n\n; CacheExempt : UT2004 only.  Only used in cache metaclasses, such as GameInfo,\
      \ Mutator, Weapon, Vehicle;  ignored for any non-cached class.  This class modifier\
      \ is used to indicate that the values of this class's cacheable properties should\
      \ not be exported to the .ucl file.  In general, mod authors will probably never\
      \ need to use this specifier, as it used for gametypes, weapons, mutators, etc.,\
      \ which should ''not'' appear in GUI/webadmin lists.\n\n; HideDropDown: UT2004\
      \ only. This class will not appear in drop down listboxes in UnrealEd.\n\n;\
      \ ParseConfig: UT2004 only.  The .ini file for this class may be specified on\
      \ the command-line, using the syntax ' -classname=filename.ini'.  If no parameter\
      \ is specified on the commandline, the class uses its default configuration\
      \ file (the system ini, unless a different ini is specified in the class declaration\
      \ using Config(xx)).  For example, in order to specify a unique .ini file for\
      \ the usernames & passwords used by the advanced administration system (xAdmin.xAdminConfigIni),\
      \ add the parameter ' -xAdminConfigIni=filename.ini' to the startup commandline.\
      \  If the commandline doesn't contain this parameter, username/password information\
      \ will be stored in the xAdmin.ini file, because this is what the xAdminConfigIni\
      \ class declares as its config file.\n\n===...that also affect subclasses ===\n\
      ; (dont)collapsecategories : Only works in [[Legacy:Unreal Engine 2.0|Unreal\
      \ Engine 2.0]] and later. Collapses all property groups into one main property\
      \ group.\n; hidecategories(<i>group list</i>) : Only works in [[Legacy:Unreal\
      \ Engine 2.0|Unreal Engine 2.0]] and later. Takes a comma-seperated list of\
      \ variable groups. These groups will not be shown in UnrealEd's property windows,\
      \ e.g. the [[Legacy:Actor Properties|Actor Properties]] or [[Legacy:Texture\
      \ Properties|Texture Properties]]. (also see [[Legacy:Displaying Variables In\
      \ UnrealEd|Displaying Variables In UnrealEd]])\n; showcategories(<i>group list</i>)\
      \ : Only works in [[Legacy:Unreal Engine 2.0|Unreal Engine 2.0]] and later.\
      \ Opposite of <tt>hidecategories</tt>. Variable groups that have been hidden\
      \ in a superclass can be made visible again with this modifier.\n; (not)placeable\
      \ : Only works in [[Legacy:Unreal Engine 2.0|Unreal Engine 2.0]] and later.\
      \ The class must also be derived from actor or a subclass of actor. This means\
      \ you can(not) place Actors of this class in a level. \n; (not)editinlinenew\
      \ : Only works in [[Legacy:Unreal Engine 2.0|Unreal Engine 2.0]] and later.\
      \ Classes also cannot be a subclass of actor. See [[Legacy:Editinline|Editinline]].\n\
      ; instanced : See [[Legacy:Automated Component|Automated Component]].<br />From\
      \ what I can gather this signifies that the member variable is owned by the\
      \ class rather than just being a reference.  It will replace what would normally\
      \ be a 4-byte reference with an n-byte instance where n = sizeof(YourClass).\
      \  The benefit is that it allows Object members to be visable and editable in\
      \ the Unreal editor without having to derive from Component.<br />'''WARNING:'''\
      \ when refactoring and changing to instanced old maps will crash when trying\
      \ to load.  To fix, delete appropriate world objects from map before refactoring\
      \ and re-place them after building scripts.\n\n==Working with classes ==\n\n\
      To cover:\n* the class<foo> syntax &ndash; see [[Legacy:Peppers And Pepper Grinders|peppers\
      \ and pepper grinders]]\n* the use of myObject.IsA(class)\n\n===Casting ===\n\
      \nrough snip from one of tarquin's unl33t forum postings:\n\n{{innerbox|Example\
      \ of casting: the syntax\n\n MyGame(Level.Game).Leader\n\nLevel.Game is a variable\
      \ that's been declared to point to an object of class GameInfo. \n\nYou can\
      \ make it point to a subclass, that's the whole point of OO (polymorphism, isn't\
      \ it?)\n\nGameInfo class doesn't have a Leader property, so to access that property,\
      \ you've got to temporarily specialize that variable. \n\n}}\n\nSee [[Legacy:Typecasting|Typecasting]].\n\
      \n==Related Topics ==\n* [[Legacy:UnrealScript|UnrealScript]]\n* [[Legacy:Typecasting|Typecasting]]\n\
      * Other important parts of a class script:\n** [[Legacy:Default Properties|Default\
      \ Properties]]\n** [[Legacy:Function Syntax|Function Syntax]]\n** [[Legacy:Replication\
      \ Block|Replication Block]]\n** [[Legacy:Variable Syntax|Variable Syntax]]\n\
      \n==Discussion ==\n\n'''DaWrecka:''' Something I've been trying to find out\
      \ lately is; Is it possible to find out whether an object or actor is abstract,\
      \ based on the class reference? I'm trying to code a new monster manager for\
      \ Fraghouse Extension, and I'd like to weed out the abstract classes from the\
      \ monster list if possible. So far the only plan I've got is trying to spawn\
      \ the monster, and testing whether it succeeded - a definite Plan Z due to the\
      \ fact this would be from a GUI. Spawning would work, but the lack of a GameInfo\
      \ would likely lead to multiple Accessed Nones.\n\n'''Wormbo:''' There's no\
      \ way to tell directly. Try spawning it in the entry level, that should have\
      \ a GameInfo."
  properties: []
  revId: 1993
name: "Legacy:Class Syntax"
revision:
  revid: 1993
  parentid: 1994
  user: "Wormbo"
  timestamp: 1193297552.000000000
  comment: "*"
timestamp: 1668763318.360247000
