---
parse:
  title: "Replication Idioms"
  text:
    text: "<p>This article provides code examples for various replication concepts\
      \ and tasks. If any example includes a <a href=\"/Defaultproperties\" title=\"\
      Defaultproperties\">defaultproperties</a> block, keep in mind that default values\
      \ are inherited from parent classes. Often you don't need to specify all of\
      \ the values listed here.</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Actor_replication_examples\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Actor replication examples</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-2\"><a href=\"#The_ReplicationInfo_.28always_replicate.29\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">The ReplicationInfo\
      \ (always replicate)</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"\
      ><a href=\"#Owner-only_replication\"><span class=\"tocnumber\">1.2</span> <span\
      \ class=\"toctext\">Owner-only replication</span></a>\n<ul>\n<li class=\"toclevel-3\
      \ tocsection-4\"><a href=\"#Invisible_actors\"><span class=\"tocnumber\">1.2.1</span>\
      \ <span class=\"toctext\">Invisible actors</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-5\"><a href=\"#Visible_actors\"><span class=\"tocnumber\">1.2.2</span>\
      \ <span class=\"toctext\">Visible actors</span></a></li>\n<li class=\"toclevel-3\
      \ tocsection-6\"><a href=\"#Regardless_of_visibility\"><span class=\"tocnumber\"\
      >1.2.3</span> <span class=\"toctext\">Regardless of visibility</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Replicate_as_if_visible\"\
      ><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Replicate as if\
      \ visible</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"\
      ><a href=\"#Variable_replication\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Variable replication</span></a>\n<ul>\n<li class=\"toclevel-2\
      \ tocsection-9\"><a href=\"#Replicating_all_changes\"><span class=\"tocnumber\"\
      >2.1</span> <span class=\"toctext\">Replicating all changes</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-10\"><a href=\"#Only_the_initial_value\"><span\
      \ class=\"tocnumber\">2.2</span> <span class=\"toctext\">Only the initial value</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-11\"><a href=\"#From_client_to_server\"><span\
      \ class=\"tocnumber\">2.3</span> <span class=\"toctext\">From client to server</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"#Replicated_function_calls\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Replicated function\
      \ calls</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Actor_replication_examples\">Actor replication examples</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=1\"\
      \ title=\"Edit section: Actor replication examples\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>The following are a few example\
      \ class frames for various types of actor replication.</p>\n<h3><span class=\"\
      mw-headline\" id=\"The_ReplicationInfo_.28always_replicate.29\">The ReplicationInfo\
      \ (always replicate)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Replication_Idioms?section=2\" title=\"Edit section:\
      \ The ReplicationInfo (always replicate)\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The class ReplicationInfo<sup>(<span><a href=\"/UE1:ReplicationInfo_(RTNP)\"\
      \ title=\"UE1:ReplicationInfo (RTNP)\">RTNP</a></span>, <span><a href=\"/UE1:ReplicationInfo_(U1)\"\
      \ title=\"UE1:ReplicationInfo (U1)\">U1</a></span>, <span><a href=\"/UE1:ReplicationInfo_(UT)\"\
      \ title=\"UE1:ReplicationInfo (UT)\">UT</a></span>, <span><a href=\"/UE2:ReplicationInfo_(U2)\"\
      \ title=\"UE2:ReplicationInfo (U2)\">U2</a></span>, <span><a href=\"/UE2:ReplicationInfo_(U2XMP)\"\
      \ title=\"UE2:ReplicationInfo (U2XMP)\">U2XMP</a></span>, <span><a href=\"/UE2:ReplicationInfo_(UE2Runtime)\"\
      \ title=\"UE2:ReplicationInfo (UE2Runtime)\">UE2Runtime</a></span>, <span><a\
      \ href=\"/UE2:ReplicationInfo_(UT2003)\" title=\"UE2:ReplicationInfo (UT2003)\"\
      >UT2003</a></span>, <span><a href=\"/UE2:ReplicationInfo_(UT2004)\" title=\"\
      UE2:ReplicationInfo (UT2004)\">UT2004</a></span>, <span><a href=\"/UE3:ReplicationInfo_(UDK)\"\
      \ title=\"UE3:ReplicationInfo (UDK)\">UDK</a></span>, <span><a href=\"/UE3:ReplicationInfo_(UT3)\"\
      \ title=\"UE3:ReplicationInfo (UT3)\">UT3</a></span>)</sup> already exists in\
      \ all Unreal Engine games and contains the following relevant default values:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> ReplicationInfo\
      \ <span class=\"kw1\">extends</span> <span class=\"kw9\">Info</span> <span class=\"\
      kw1\">abstract</span> <span class=\"kw1\">native</span>;\n \n<span class=\"\
      kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"kw7\">ROLE_SimulatedProxy</span>\n\
      \  bAlwaysRelevant<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p><code>RemoteRole=ROLE_SimulatedProxy</code>\
      \ ensures that actors of this type participate in replication, while <code>bAlwaysRelevant=True</code>\
      \ ensures that actors of this type will be replicated to all clients, bypassing\
      \ any relevance checks. The ReplicationInfo class itself is abstract, because\
      \ creating instances of it wouldn't make sense - you should subclass it. ReplicationInfo\
      \ is declared as native class for two reasons. One is that there are native\
      \ subclasses, which is only allowed if the parent class is native as well.</p>\n\
      <p>The other reason is a special native handling of the <code>bSkipActorPropertyReplication</code>\
      \ for replication purposes. (That property is set to <code>True</code> in ReplicationInfo's\
      \ parent class Info.) If you look at the <a href=\"/Replication_block\" title=\"\
      Replication block\">replication block</a> of class Actor, you will notice that\
      \ <code>bSkipActorPropertyReplication</code> can be overridden by <code>bNetInitial</code>,\
      \ causing corresponding properties to be replicated at least once. The ReplicationInfo\
      \ native code overrides this behavior and turns off even initial replication.\
      \ Thus only replicated variables declared in subclasses will be replicated,\
      \ even when sending the initial data. This makes ReplicationInfo more efficient\
      \ for replication than other classes with the same default values.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Owner-only_replication\">Owner-only replication</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Replication_Idioms?section=3\" title=\"Edit section: Owner-only\
      \ replication\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Ensuring that an actor is only replicated to its owner can be achieved in\
      \ multiple ways. An actor is always relevant to its owning client (i.e. the\
      \ actor's owner must be the client's PlayerController/PlayerPawn, or the owner\
      \ actor must be owned by the client), but only relevant to other clients under\
      \ certain circumstances.</p>\n<h4><span class=\"mw-headline\" id=\"Invisible_actors\"\
      >Invisible actors</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Replication_Idioms?section=4\" title=\"Edit section:\
      \ Invisible actors\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>If the actor is not supposed to be visible, owner-only replication can easily\
      \ be achieved by hiding the actor:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"\
      kw7\">ROLE_SimulatedProxy</span> <span class=\"co1\">// or ROLE_DumbProxy or\
      \ ROLE_AutonomousProxy</span>\n  bAlwaysRelevant<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">False</span> <span class=\"co1\">// inherited from Actor, but\
      \ keep in mind when inheriting from e.g. ReplicationInfo</span>\n  bHidden<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<h4><span class=\"mw-headline\" id=\"Visible_actors\"\
      >Visible actors</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Replication_Idioms?section=5\" title=\"Edit section:\
      \ Visible actors\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h4>\n\
      <p>If the actor must be visible, but only to its owner, you can use the standard\
      \ visibility settings for that purpose and at the same time replicate the actor\
      \ only to its owning client:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"\
      kw7\">ROLE_SimulatedProxy</span> <span class=\"co1\">// or ROLE_DumbProxy or\
      \ ROLE_AutonomousProxy</span>\n  bAlwaysRelevant<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">False</span> <span class=\"co1\">// inherited from Actor, but\
      \ keep in mind when inheriting from e.g. ReplicationInfo</span>\n  bOnlyOwnerSee<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">True</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>Note that the reverse, <code>bOwnerNoSee</code>\
      \ won't prevent the actor from being replicated to its owner, because ownership\
      \ is a stronger relevance criteria.</p>\n<h4><span class=\"mw-headline\" id=\"\
      Regardless_of_visibility\">Regardless of visibility</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=6\"\
      \ title=\"Edit section: Regardless of visibility\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h4>\n<p>Starting with Unreal Engine 2, replication can be\
      \ limited to the owner without having to change rendering properties:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">defaultproperties</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw7\">RemoteRole</span><span class=\"\
      sy0\">=</span><span class=\"kw7\">ROLE_SimulatedProxy</span> <span class=\"\
      co1\">// or ROLE_DumbProxy or ROLE_AutonomousProxy</span>\n  bAlwaysRelevant<span\
      \ class=\"sy0\">=</span><span class=\"kw6\">False</span> <span class=\"co1\"\
      >// inherited from Actor, but keep in mind when inheriting from e.g. ReplicationInfo</span>\n\
      \  bOnlyRelevantToOwner<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Since the actor still also\
      \ exists serversidely, you will probably still use <code>bOwnerNoSee</code>\
      \ for the actor.</p>\n<h3><span class=\"mw-headline\" id=\"Replicate_as_if_visible\"\
      >Replicate as if visible</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=7\"\
      \ title=\"Edit section: Replicate as if visible\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>In special cases you might want to replicate an invisible\
      \ actor as if it was visible, i.e. only to clients that would be able to see\
      \ the actor if it wasn't invisible. For example you might want to replicate\
      \ a projectile, but handle its visibility entirely via a separate Emitter actor.\
      \ In that case you cannot rely on bHidden, because it would prevent replication\
      \ for all but the owning client:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw7\">RemoteRole</span><span class=\"sy0\">=</span><span class=\"\
      kw7\">ROLE_SimulatedProxy</span> <span class=\"co1\">// or ROLE_DumbProxy or\
      \ ROLE_AutonomousProxy</span>\n  bAlwaysRelevant<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">False</span> <span class=\"co1\">// inherited from Actor, but\
      \ keep in mind when inheriting from e.g. ReplicationInfo</span>\n  <span class=\"\
      kw7\">DrawType</span><span class=\"sy0\">=</span><span class=\"kw7\">DT_None</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Variable_replication\">Variable replication</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=8\"\
      \ title=\"Edit section: Variable replication\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This section describes various ways to replicate variable\
      \ values.</p>\n<h3><span class=\"mw-headline\" id=\"Replicating_all_changes\"\
      >Replicating all changes</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=9\"\
      \ title=\"Edit section: Replicating all changes\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Unreal Engine 1 and Unreal Engine 2:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">replication</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">unreliable</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw7\">Role</span> <span\
      \ class=\"sy0\">==</span> <span class=\"kw7\">ROLE_Authority</span><span class=\"\
      br0\">)</span>\n    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Only Unreal Engine 2:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">replication</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">unreliable</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw6\">True</span><span class=\"br0\">)</span>\n\
      \    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Unreal Engine 3:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">replication</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw6\">True</span><span\
      \ class=\"br0\">)</span>\n    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>Why just <code>True</code>? Well, variables can only be replicated\
      \ in one direction: From the server to the clients. On the server the expression\
      \ <code>Role == ROLE_Authority</code> always evaluates to <code>True</code>,\
      \ so there's no need to evaluate it every time.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Only_the_initial_value\">Only the initial value</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Replication_Idioms?section=10\"\
      \ title=\"Edit section: Only the initial value\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Often all changes of a value can be simulated by the\
      \ client, as long as it knows the starting value. In that case it would be a\
      \ waste of bandwidth to replicate additional serverside changes.</p>\n<p>Unreal\
      \ Engine 1 and Unreal Engine 2:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">replication</span>\n<span class=\"br0\">{</span>\n  <span\
      \ class=\"kw1\">unreliable</span> <span class=\"kw2\">if</span> <span class=\"\
      br0\">(</span><span class=\"kw7\">Role</span> <span class=\"sy0\">==</span>\
      \ <span class=\"kw7\">ROLE_Authority</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ bNetInitial<span class=\"br0\">)</span>\n    VariableToReplicate;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Only Unreal Engine 2:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">replication</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">unreliable</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>bNetInitial<span class=\"br0\">)</span>\n\
      \    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <p>Unreal Engine 3:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">replication</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>bNetInitial<span class=\"br0\">)</span>\n\
      \    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h3><span class=\"mw-headline\" id=\"From_client_to_server\">From client to\
      \ server</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Replication_Idioms?section=11\" title=\"Edit section:\
      \ From client to server\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>As mentioned above, variable values only replicate from the server to clients.\
      \ For the other way, you need to use function replication to update the serverside\
      \ value. But even then, replication is only possible from the owning client\
      \ to the server. If the actor isn't owned by the sending client, the server\
      \ will discard the replicated call or value.</p>\n<p>Unreal Engine 1 can actually\
      \ replicate values from the owning client to the server:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">replication</span>\n<span class=\"\
      br0\">{</span>\n  <span class=\"kw1\">unreliable</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span><span class=\"kw7\">Role</span> <span\
      \ class=\"sy0\">!=</span> <span class=\"kw7\">ROLE_Authority</span><span class=\"\
      br0\">)</span> <span class=\"co1\">// only works in Unreal Engine 1 and only\
      \ for owning client!</span>\n    VariableToReplicate;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<h2><span class=\"mw-headline\" id=\"Replicated_function_calls\">Replicated\
      \ function calls</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Replication_Idioms?section=12\" title=\"Edit section:\
      \ Replicated function calls\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<table style=\"font-size: 90%\" class=\"metadata plainlinks\
      \ ambox ambox-content\">\n<tr>\n<td class=\"ambox-image\"></td>\n<td class=\"\
      ambox-text\">This <a href=\"/Unreal_Wiki:Cleanup#Articles_lacking_information\"\
      \ title=\"Unreal Wiki:Cleanup\">short section</a> needs to be <a rel=\"nofollow\"\
      \ class=\"external text\" href=\"https://wiki.beyondunreal.com/edit/Replication_Idioms\"\
      >expanded</a>.</td>\n</tr>\n</table>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.225 seconds\nReal time usage: 0.289 seconds\nPreprocessor visited\
      \ node count: 216/1000000\nPreprocessor generated node count: 690/1000000\n\
      Post‐expand include size: 1668/2097152 bytes\nTemplate argument size: 226/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 1/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  243.736      1 - -total\n 46.24%  112.708      1 - Template:Classgames\n\
      \  4.19%   10.211      1 - Template:Sectstub\n  1.80%    4.389      1 - Template:Ambox\n\
      \  0.64%    1.553      1 - Template:Extension_DPL\n-->\n\n<!-- Saved in parser\
      \ cache with key wiki:pcache:idhash:29482-0!*!*!*!*!*!* and timestamp 20221117203902\
      \ and revision id 45462\n -->\n"
  categories:
  - sortkey: ""
    name: "Articles_with_stub_sections"
  - sortkey: ""
    name: "Programming_tutorials"
  - sortkey: ""
    name: "Replication"
  links:
  - ns: 104
    exists: true
    name: "UE2:ReplicationInfo (UT2004)"
  - ns: 102
    exists: true
    name: "UE1:ReplicationInfo (RTNP)"
  - ns: 4
    exists: true
    name: "Unreal Wiki:Cleanup"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 106
    exists: true
    name: "UE3:ReplicationInfo (UDK)"
  - ns: 0
    exists: false
    name: "ReplicationInfo"
  - ns: 104
    exists: true
    name: "UE2:ReplicationInfo (U2XMP)"
  - ns: 106
    exists: true
    name: "UE3:ReplicationInfo (UT3)"
  - ns: 102
    exists: true
    name: "UE1:ReplicationInfo (UT)"
  - ns: 102
    exists: true
    name: "UE1:ReplicationInfo (U1)"
  - ns: 104
    exists: true
    name: "UE2:ReplicationInfo (U2)"
  - ns: 104
    exists: true
    name: "UE2:ReplicationInfo (UE2Runtime)"
  - ns: 104
    exists: true
    name: "UE2:ReplicationInfo (UT2003)"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  templates:
  - ns: 10
    exists: true
    name: "Template:Sectstub"
  - ns: 10
    exists: true
    name: "Template:Extension DPL"
  - ns: 10
    exists: true
    name: "Template:Classgames"
  - ns: 10
    exists: true
    name: "Template:Ambox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Actor replication examples"
    number: "1"
    index: "1"
    fromtitle: "Replication_Idioms"
    byteoffset: 328
    anchor: "Actor_replication_examples"
  - toclevel: 2
    level: "3"
    line: "The ReplicationInfo (always replicate)"
    number: "1.1"
    index: "2"
    fromtitle: "Replication_Idioms"
    byteoffset: 445
    anchor: "The_ReplicationInfo_.28always_replicate.29"
  - toclevel: 2
    level: "3"
    line: "Owner-only replication"
    number: "1.2"
    index: "3"
    fromtitle: "Replication_Idioms"
    byteoffset: 2065
    anchor: "Owner-only_replication"
  - toclevel: 3
    level: "4"
    line: "Invisible actors"
    number: "1.2.1"
    index: "4"
    fromtitle: "Replication_Idioms"
    byteoffset: 2420
    anchor: "Invisible_actors"
  - toclevel: 3
    level: "4"
    line: "Visible actors"
    number: "1.2.2"
    index: "5"
    fromtitle: "Replication_Idioms"
    byteoffset: 2801
    anchor: "Visible_actors"
  - toclevel: 3
    level: "4"
    line: "Regardless of visibility"
    number: "1.2.3"
    index: "6"
    fromtitle: "Replication_Idioms"
    byteoffset: 3418
    anchor: "Regardless_of_visibility"
  - toclevel: 2
    level: "3"
    line: "Replicate as if visible"
    number: "1.3"
    index: "7"
    fromtitle: "Replication_Idioms"
    byteoffset: 3943
    anchor: "Replicate_as_if_visible"
  - toclevel: 1
    level: "2"
    line: "Variable replication"
    number: "2"
    index: "8"
    fromtitle: "Replication_Idioms"
    byteoffset: 4617
    anchor: "Variable_replication"
  - toclevel: 2
    level: "3"
    line: "Replicating all changes"
    number: "2.1"
    index: "9"
    fromtitle: "Replication_Idioms"
    byteoffset: 4709
    anchor: "Replicating_all_changes"
  - toclevel: 2
    level: "3"
    line: "Only the initial value"
    number: "2.2"
    index: "10"
    fromtitle: "Replication_Idioms"
    byteoffset: 5345
    anchor: "Only_the_initial_value"
  - toclevel: 2
    level: "3"
    line: "From client to server"
    number: "2.3"
    index: "11"
    fromtitle: "Replication_Idioms"
    byteoffset: 5934
    anchor: "From_client_to_server"
  - toclevel: 1
    level: "2"
    line: "Replicated function calls"
    number: "3"
    index: "12"
    fromtitle: "Replication_Idioms"
    byteoffset: 6563
    anchor: "Replicated_function_calls"
  displaytitle: "Replication Idioms"
  iwlinks: []
  wikitext:
    text: "This article provides code examples for various replication concepts and\
      \ tasks. If any example includes a [[defaultproperties]] block, keep in mind\
      \ that default values are inherited from parent classes. Often you don't need\
      \ to specify all of the values listed here.\n\n[[Category:Programming tutorials]]\
      \ [[Category:Replication]]\n\n==Actor replication examples==\nThe following\
      \ are a few example class frames for various types of actor replication.\n\n\
      ===The ReplicationInfo (always replicate)===\nThe class {{classgames|ReplicationInfo}}\
      \ already exists in all Unreal Engine games and contains the following relevant\
      \ default values:\n<uscript>\nclass ReplicationInfo extends Info abstract native;\n\
      \t\ndefaultproperties\n{\n  RemoteRole=ROLE_SimulatedProxy\n  bAlwaysRelevant=True\n\
      }\n</uscript>\n<code>RemoteRole=ROLE_SimulatedProxy</code> ensures that actors\
      \ of this type participate in replication, while <code>bAlwaysRelevant=True</code>\
      \ ensures that actors of this type will be replicated to all clients, bypassing\
      \ any relevance checks. The ReplicationInfo class itself is abstract, because\
      \ creating instances of it wouldn't make sense - you should subclass it. ReplicationInfo\
      \ is declared as native class for two reasons. One is that there are native\
      \ subclasses, which is only allowed if the parent class is native as well.\n\
      \nThe other reason is a special native handling of the <code>bSkipActorPropertyReplication</code>\
      \ for replication purposes. (That property is set to <code>True</code> in ReplicationInfo's\
      \ parent class Info.) If you look at the [[replication block]] of class Actor,\
      \ you will notice that <code>bSkipActorPropertyReplication</code> can be overridden\
      \ by <code>bNetInitial</code>, causing corresponding properties to be replicated\
      \ at least once. The ReplicationInfo native code overrides this behavior and\
      \ turns off even initial replication. Thus only replicated variables declared\
      \ in subclasses will be replicated, even when sending the initial data.\nThis\
      \ makes ReplicationInfo more efficient for replication than other classes with\
      \ the same default values.\n\n===Owner-only replication===\nEnsuring that an\
      \ actor is only replicated to its owner can be achieved in multiple ways. An\
      \ actor is always relevant to its owning client (i.e. the actor's owner must\
      \ be the client's PlayerController/PlayerPawn, or the owner actor must be owned\
      \ by the client), but only relevant to other clients under certain circumstances.\n\
      \n====Invisible actors====\nIf the actor is not supposed to be visible, owner-only\
      \ replication can easily be achieved by hiding the actor:\n<uscript>\ndefaultproperties\n\
      {\n  RemoteRole=ROLE_SimulatedProxy // or ROLE_DumbProxy or ROLE_AutonomousProxy\n\
      \  bAlwaysRelevant=False // inherited from Actor, but keep in mind when inheriting\
      \ from e.g. ReplicationInfo\n  bHidden=True\n}\n</uscript>\n\n====Visible actors====\n\
      If the actor must be visible, but only to its owner, you can use the standard\
      \ visibility settings for that purpose and at the same time replicate the actor\
      \ only to its owning client:\n<uscript>\ndefaultproperties\n{\n  RemoteRole=ROLE_SimulatedProxy\
      \ // or ROLE_DumbProxy or ROLE_AutonomousProxy\n  bAlwaysRelevant=False // inherited\
      \ from Actor, but keep in mind when inheriting from e.g. ReplicationInfo\n \
      \ bOnlyOwnerSee=True\n}\n</uscript>\nNote that the reverse, <code>bOwnerNoSee</code>\
      \ won't prevent the actor from being replicated to its owner, because ownership\
      \ is a stronger relevance criteria.\n\n====Regardless of visibility====\nStarting\
      \ with Unreal Engine 2, replication can be limited to the owner without having\
      \ to change rendering properties:\n<uscript>\ndefaultproperties\n{\n  RemoteRole=ROLE_SimulatedProxy\
      \ // or ROLE_DumbProxy or ROLE_AutonomousProxy\n  bAlwaysRelevant=False // inherited\
      \ from Actor, but keep in mind when inheriting from e.g. ReplicationInfo\n \
      \ bOnlyRelevantToOwner=True\n}\n</uscript>\nSince the actor still also exists\
      \ serversidely, you will probably still use <code>bOwnerNoSee</code> for the\
      \ actor.\n\n===Replicate as if visible===\nIn special cases you might want to\
      \ replicate an invisible actor as if it was visible, i.e. only to clients that\
      \ would be able to see the actor if it wasn't invisible. For example you might\
      \ want to replicate a projectile, but handle its visibility entirely via a separate\
      \ Emitter actor. In that case you cannot rely on bHidden, because it would prevent\
      \ replication for all but the owning client:\n<uscript>\ndefaultproperties\n\
      {\n  RemoteRole=ROLE_SimulatedProxy // or ROLE_DumbProxy or ROLE_AutonomousProxy\n\
      \  bAlwaysRelevant=False // inherited from Actor, but keep in mind when inheriting\
      \ from e.g. ReplicationInfo\n  DrawType=DT_None\n}\n</uscript>\n\n==Variable\
      \ replication==\nThis section describes various ways to replicate variable values.\n\
      \n===Replicating all changes===\nUnreal Engine 1 and Unreal Engine 2:\n<uscript>\n\
      replication\n{\n  unreliable if (Role == ROLE_Authority)\n    VariableToReplicate;\n\
      }\n</uscript>\nOnly Unreal Engine 2:\n<uscript>\nreplication\n{\n  unreliable\
      \ if (True)\n    VariableToReplicate;\n}\n</uscript>\nUnreal Engine 3:\n<uscript>\n\
      replication\n{\n  if (True)\n    VariableToReplicate;\n}\n</uscript>\nWhy just\
      \ <code>True</code>? Well, variables can only be replicated in one direction:\
      \ From the server to the clients. On the server the expression <code>Role ==\
      \ ROLE_Authority</code> always evaluates to <code>True</code>, so there's no\
      \ need to evaluate it every time.\n\n===Only the initial value===\nOften all\
      \ changes of a value can be simulated by the client, as long as it knows the\
      \ starting value. In that case it would be a waste of bandwidth to replicate\
      \ additional serverside changes.\n\nUnreal Engine 1 and Unreal Engine 2:\n<uscript>\n\
      replication\n{\n  unreliable if (Role == ROLE_Authority && bNetInitial)\n  \
      \  VariableToReplicate;\n}\n</uscript>\nOnly Unreal Engine 2:\n<uscript>\nreplication\n\
      {\n  unreliable if (bNetInitial)\n    VariableToReplicate;\n}\n</uscript>\n\
      Unreal Engine 3:\n<uscript>\nreplication\n{\n  if (bNetInitial)\n    VariableToReplicate;\n\
      }\n</uscript>\n\n===From client to server===\nAs mentioned above, variable values\
      \ only replicate from the server to clients. For the other way, you need to\
      \ use function replication to update the serverside value. But even then, replication\
      \ is only possible from the owning client to the server. If the actor isn't\
      \ owned by the sending client, the server will discard the replicated call or\
      \ value.\n\nUnreal Engine 1 can actually replicate values from the owning client\
      \ to the server:\n<uscript>\nreplication\n{\n  unreliable if (Role != ROLE_Authority)\
      \ // only works in Unreal Engine 1 and only for owning client!\n    VariableToReplicate;\n\
      }\n</uscript>\n\n==Replicated function calls==\n{{sectstub}}"
  properties: []
  revId: 45462
name: "Replication Idioms"
revision:
  revid: 45462
  parentid: 0
  user: "Wormbo"
  timestamp: 1377890943.000000000
  comment: "some basic examples, to be expanded (feel free to add to it)"
timestamp: 1668772529.302320000
