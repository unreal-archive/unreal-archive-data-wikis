---
parse:
  title: "Variables"
  text:
    text: "<p><a href=\"http://en.wikipedia.org/wiki/Variable#Computer_programming\"\
      \ class=\"extiw\" title=\"wp:Variable\">Variables</a> are named storage slots\
      \ for pieces of data. All <a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a>\
      \ variables are <a href=\"http://en.wikipedia.org/wiki/static_typing\" class=\"\
      extiw\" title=\"wp:static typing\">staticly-typed</a>, that means you can only\
      \ store a specific type of data in them and the type of data is defined in the\
      \ variable <a href=\"http://en.wikipedia.org/wiki/declaration_(computer_science)\"\
      \ class=\"extiw\" title=\"wp:declaration (computer science)\">declaration</a>.</p>\n\
      <p>There are three basic types of variables in UnrealScript:</p>\n<ul>\n<li>Class\
      \ variables, which can only be declared at the <a href=\"/Class\" title=\"Class\"\
      \ class=\"mw-redirect\">class</a> <a href=\"http://en.wikipedia.org/wiki/Scope_(programming)\"\
      \ class=\"extiw\" title=\"wp:Scope (programming)\">scope</a>, before any function,\
      \ operator, delegate or <a href=\"/State\" title=\"State\" class=\"mw-redirect\"\
      >state</a> declaration.</li>\n<li>Struct members, which are declared inside\
      \ their <a href=\"/Struct\" title=\"Struct\" class=\"mw-redirect\">struct</a>'s\
      \ declaration block.</li>\n<li>Local variables, which can be declared at the\
      \ start of <a href=\"/Function\" title=\"Function\" class=\"mw-redirect\">function</a>,\
      \ <a href=\"/State\" title=\"State\" class=\"mw-redirect\">state</a>, <a href=\"\
      /Operator\" title=\"Operator\" class=\"mw-redirect\">operator</a> and <a href=\"\
      /Delegate\" title=\"Delegate\" class=\"mw-redirect\">delegate</a> bodies before\
      \ any code statements. (For readability's sake, this article will imply operators\
      \ and delegates when it mentions functions, unless otherwise noted.)</li>\n\
      </ul>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Declaration\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Declaration</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Editable_variables\"\
      ><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Editable variables</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-3\"><a href=\"#Local_variables\"><span class=\"\
      tocnumber\">1.2</span> <span class=\"toctext\">Local variables</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Modifiers\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">Modifiers</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#Inner_type_modifiers\"\
      ><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Inner type modifiers</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-6\"><a href=\"#Access_modifiers\"><span class=\"\
      tocnumber\">2.2</span> <span class=\"toctext\">Access modifiers</span></a></li>\n\
      <li class=\"toclevel-2 tocsection-7\"><a href=\"#Modifiers_affecting_values\"\
      ><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Modifiers affecting\
      \ values</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Modifiers_affecting_UnrealEd\"\
      ><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">Modifiers affecting\
      \ UnrealEd</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"\
      #Other_modifiers\"><span class=\"tocnumber\">2.5</span> <span class=\"toctext\"\
      >Other modifiers</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"><a\
      \ href=\"#Modifiers_with_unknown_effect\"><span class=\"tocnumber\">2.6</span>\
      \ <span class=\"toctext\">Modifiers with unknown effect</span></a></li>\n</ul>\n\
      </li>\n<li class=\"toclevel-1 tocsection-11\"><a href=\"#Initial_values\"><span\
      \ class=\"tocnumber\">3</span> <span class=\"toctext\">Initial values</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-12\"><a href=\"#Accessing_variables\"><span\
      \ class=\"tocnumber\">4</span> <span class=\"toctext\">Accessing variables</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Declaration\">Declaration</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Variables?section=1\" title=\"Edit section: Declaration\">edit</a><span\
      \ class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>A simple class or\
      \ struct member variable declaration looks like this:</p>\n<pre><b>var</b> <i><a\
      \ href=\"#Modifiers\">[modifiers]</a></i> <a href=\"/Type\" title=\"Type\" class=\"\
      mw-redirect\">type</a> variablename<i><b>;</b></i>\n</pre>\n<p>The <i>variablename</i>\
      \ can be any combination of the letters A-Z (case-insensitive), the digits 0-9\
      \ and the underscore character _ with two restrictions:</p>\n<ul>\n<li>The name\
      \ may not start with a digit.</li>\n<li>The name must be shorter than 64 characters.</li>\n\
      </ul>\n<p>The <i>type</i> can not only be a type specification, but also a <a\
      \ href=\"/Struct\" title=\"Struct\" class=\"mw-redirect\">struct</a> or <a href=\"\
      /Enum\" title=\"Enum\" class=\"mw-redirect\">enum</a> declaration.</p>\n<p>You\
      \ can declare multiple variables of the same type in one declaration:</p>\n\
      <pre><b>var</b> <i><a href=\"#Modifiers\">[modifiers]</a></i> <a href=\"/Type\"\
      \ title=\"Type\" class=\"mw-redirect\">type</a> variablename1<b>,</b> variablename2<b>,</b>\
      \ ...<b>;</b>\n</pre>\n<p>Each of the variable names may optionally have an\
      \ array size specification to create a <a href=\"/Static_array\" title=\"Static\
      \ array\" class=\"mw-redirect\">static array</a>:</p>\n<pre>variablename<b>[</b>arraysize<b>]</b>\n\
      </pre>\n<p>You can mix static arrays and non-array variables in a single declaration.\
      \ The array size only applies to the variable you appended it to.</p>\n<h3><span\
      \ class=\"mw-headline\" id=\"Editable_variables\">Editable variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Variables?section=2\" title=\"Edit section: Editable variables\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n<p>To\
      \ make the variable accessible from within <a href=\"/UnrealEd\" title=\"UnrealEd\"\
      \ class=\"mw-redirect\">UnrealEd</a>'s property windows, use the following syntax:</p>\n\
      <pre><b>var(</b><i>[groupname[,subgroup<sup>3</sup>]]</i><b>)</b> <i><a href=\"\
      #Modifiers\">[modifiers]</a></i> <a href=\"/Type\" title=\"Type\" class=\"mw-redirect\"\
      >type</a> variablename<b>;</b>\n</pre>\n<p>The <i>groupname</i> must be an identifier\
      \ if specified. If omitted, the class name is used as group name. For struct\
      \ members, the group name has no effect.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Local_variables\">Local variables</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=3\"\
      \ title=\"Edit section: Local variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>Local variable declarations in <a href=\"/Function\"\
      \ title=\"Function\" class=\"mw-redirect\">function</a> bodies are similar,\
      \ but a bit simpler:</p>\n<pre><b>local</b> <a href=\"/Type\" title=\"Type\"\
      \ class=\"mw-redirect\">type</a> variablename<b>;</b>\n</pre>\n<p>Local variables\
      \ must be declared at the very top of the function body, between the <code>{</code>\
      \ and the first line of \"executable\" code.</p>\n<p>You can declare static\
      \ arrays and multiple variables of the same type as described for class and\
      \ struct variables above. The <i>type</i> must be an existing type. It is not\
      \ allowed to declare new structs or enums here.</p>\n<p>After declaration, a\
      \ local variable is initially null, which can mean different things, depending\
      \ on the variable type. (Zero for numeric types, False, empty string or array,\
      \ None, etc.)</p>\n<p><br />\n<b>Note</b>: As of UDK 2011-06+?<sup><i><a href=\"\
      /Template:Confirm\" title=\"Template:Confirm\">[confirm]</a></i></sup> it is\
      \ also possible to declare local variables in <a href=\"/State\" title=\"State\"\
      \ class=\"mw-redirect\">states</a>. Local variables must be declared before\
      \ <a href=\"/Ignores\" title=\"Ignores\" class=\"mw-redirect\">ignores</a>.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Modifiers\">Modifiers</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=4\"\
      \ title=\"Edit section: Modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>For class and struct variables you are allowed to\
      \ specify one or more variable modifiers. These change the way the variable\
      \ works in certain situations.</p>\n<div style=\"float:left;\">\n<table>\n<tr>\n\
      <td>The modifier is available in ...</td>\n</tr>\n<tr style=\"background-color:#C6CFD6;\"\
      >\n<td>Version Tag</td>\n<td>Game</td>\n<td><a href=\"/edit/Engine_version?redlink=1\"\
      \ class=\"new\" title=\"Engine version (page does not exist)\">Engine Version</a></td>\n\
      </tr>\n<tr style=\"background-color:White;\">\n<td><b>1</b></td>\n<td>Any <a\
      \ href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"Unreal Engine\
      \ 1 (page does not exist)\">Unreal Engine 1</a> game e.g. <a href=\"/UT\" title=\"\
      UT\" class=\"mw-redirect\">UT</a></td>\n<td><a href=\"/edit/Unreal_Engine_1?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 1 (page does not exist)\">Unreal Engine\
      \ 1</a></td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\">\n<td><b>2</b></td>\n\
      <td>Any <a href=\"/edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal\
      \ Engine 2 (page does not exist)\">Unreal Engine 2</a> game e.g. <a href=\"\
      /UT2004\" title=\"UT2004\" class=\"mw-redirect\">UT2004</a></td>\n<td><a href=\"\
      /edit/Unreal_Engine_2?redlink=1\" class=\"new\" title=\"Unreal Engine 2 (page\
      \ does not exist)\">Unreal Engine 2</a></td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>3</b></td>\n<td>Any <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> game e.g. <a href=\"/UT3\" title=\"UT3\" class=\"\
      mw-redirect\">UT3</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a></td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\"\
      >\n<td><b>3-x1</b></td>\n<td><a href=\"/UT3\" title=\"UT3\" class=\"mw-redirect\"\
      >UT3 patch 2.0</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a></td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>3-x2</b></td>\n<td><a href=\"/UDK\" title=\"UDK\" class=\"mw-redirect\"\
      >UDK 2009-12</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> - 6000 - present</td>\n</tr>\n<tr style=\"background-color:#EEEEEE;\"\
      >\n<td><b>3-x3</b></td>\n<td><a href=\"/UDK\" title=\"UDK\" class=\"mw-redirect\"\
      >UDK 2010-07</a></td>\n<td><a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> - 6890 - present</td>\n</tr>\n<tr style=\"background-color:White;\"\
      >\n<td><b>(lesser than i.e. &lt;)</b></td>\n<td></td>\n<td>A specific version\
      \ e.g. <i>3</i> &lt; <i>3-x2</i> would mean it's available in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a> but not anymore since <a href=\"\
      /UDK\" title=\"UDK\" class=\"mw-redirect\">UDK</a></td>\n</tr>\n<tr style=\"\
      background-color:#EEEEEE;\">\n<td><b>(no number)</b></td>\n<td></td>\n<td>all\
      \ <a href=\"/Unreal_Engine\" title=\"Unreal Engine\" class=\"mw-redirect\">Unreal\
      \ Engine</a> generations.</td>\n</tr>\n</table>\n</div>\n<div style=\"clear:both;\"\
      ></div>\n<p>Modifiers tagged with <b><sup>S</sup></b> can be used for struct\
      \ members.</p>\n<h3><span class=\"mw-headline\" id=\"Inner_type_modifiers\"\
      >Inner type modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Variables?section=5\" title=\"Edit section: Inner type\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>You can also specify variable modifiers for the inner type of a <a href=\"\
      /Dynamic_array\" title=\"Dynamic array\" class=\"mw-redirect\">dynamic array</a>\
      \ declaration. This compiler feature is available in all engine versions, but\
      \ doesn't have any effect before <a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a>. The only currently known instances of this\
      \ are several variables in two classes of the <a href=\"/UDK\" title=\"UDK\"\
      \ class=\"mw-redirect\">UDK</a>'s Engine package (<a href=\"/UE3:NxForceField_(UDK)\"\
      \ title=\"UE3:NxForceField (UDK)\">NxForceField</a> and <a href=\"/UE3:NxGenericForceFieldBrush_(UDK)\"\
      \ title=\"UE3:NxGenericForceFieldBrush (UDK)\">NxGenericForceFieldBrush</a>,\
      \ both using <code><a href=\"/Array\" title=\"Array\">array</a>&lt;const native\
      \ transient <a href=\"/Pointer\" title=\"Pointer\" class=\"mw-redirect\">pointer</a>&gt;</code>),\
      \ so this feature might only work at all in newer versions of Unreal Engine\
      \ 3. <b>Note</b>: All inner modifiers are as well implicity added to the variable\
      \ modifiers, so for example if you were to add <a href=\"/EditConst\" title=\"\
      EditConst\" class=\"mw-redirect\">EditConst</a> the actual variable would as\
      \ well act upon <a href=\"/EditConst\" title=\"EditConst\" class=\"mw-redirect\"\
      >EditConst</a>.</p>\n<h3><span class=\"mw-headline\" id=\"Access_modifiers\"\
      >Access modifiers</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Variables?section=6\" title=\"Edit section: Access\
      \ modifiers\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The following modifiers only apply to class variables and specify, which\
      \ other classes are allowed to access the variable. The access rules are enforced\
      \ by the compiler.</p>\n<dl>\n<dt>Const<sup>S</sup></dt>\n<dd>Prevents any changes\
      \ to this variable from within UnrealScript. You are still allowed to specify\
      \ a value in the <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >defaultproperties</a> block and access the variable's value in your code. This\
      \ property is mostly used to protect variables with a special meaning to native\
      \ code. Classes with <b>const</b> variables usually have a corresponding setter\
      \ function for each variable. With bytecode level hacking, it's possible to\
      \ assign a value to a const variable, but in general, the effect is undefined\
      \ (ranging from giving the result you want to crashing the game).</dd>\n<dt>Deprecated<sup>2,3</sup></dt>\n\
      <dd>Signals that this variable should no longer be used. Accessing deprecated\
      \ variables will throw a compiler warning. <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a> will load the value of a <b>deprecated</b>\
      \ variable, but ignore it during save.</dd>\n<dt>Private<sup>S,2,3</sup></dt>\n\
      <dd>Private variables can only be accessed from within the class they were declared\
      \ in. Other classes, even subclasses, can't access them.</dd>\n<dt>PrivateWrite<sup>3-x2</sup></dt>\n\
      <dd>Related to the <b>private</b> access modifier. Causes the variable to be\
      \ treated as private for writing, but public for reading.</dd>\n<dt>Protected<sup>S,2,3</sup></dt>\n\
      <dd>Access to protected variables is only allowed from within the same class\
      \ and its subclasses. Sibling classes, parent classes and other, unrelated classes\
      \ can't \"see\" protected variables.</dd>\n<dt>ProtectedWrite<sup>3-x2</sup></dt>\n\
      <dd>Related to the <b>protected</b> access modifier. Causes the variable to\
      \ be treated as protected for writing, but public for reading.</dd>\n<dt>Public<sup>S,2,3</sup></dt>\n\
      <dd>The default access rule. If no other access rule is specified, this is one\
      \ is implied. Public variables can be accessed from any other class. Usually\
      \ you will see this modifier in Unreal Engine 3, along with a native code snippet.\
      \ One of the most common examples is <code>public{private}</code>, which means\
      \ the variable is declared as public for UnrealScript, but as private for native\
      \ code.</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"Modifiers_affecting_values\"\
      >Modifiers affecting values</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=7\" title=\"\
      Edit section: Modifiers affecting values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>These modifiers affect the default value of the variable\
      \ in some way.</p>\n<dl>\n<dt>Automated<sup>UT2004</sup></dt>\n<dd>Only meaningful\
      \ for object variables in <a href=\"/UE2:GUIMultiComponent_(UT2004)\" title=\"\
      UE2:GUIMultiComponent (UT2004)\">GUIMultiComponent</a> classes. Indicates that\
      \ any <a href=\"/UE2:GUIComponent_(UT2004)\" title=\"UE2:GUIComponent (UT2004)\"\
      >GUIComponent</a> object(s) referenced by this variable should automatically\
      \ be added to the <a href=\"/UE2:GUIMultiComponent_(UT2004)#Controls\" title=\"\
      UE2:GUIMultiComponent (UT2004)\">Controls</a> array. Also works for <a href=\"\
      /Static_array\" title=\"Static array\" class=\"mw-redirect\">static</a> and\
      \ <a href=\"/Dynamic_arrays\" title=\"Dynamic arrays\">dynamic arrays</a>. Objects\
      \ that aren't GUIComponents are ignored.\n<dl>\n<dd><i>Implies</i>: <b>noexport</b>,\
      \ <b>editinline</b>, <b>editinlineuse</b> and <b>editinlinenotify</b>, and FYI:\
      \ any object variable(even parameters and locals) referencing GUIComponents\
      \ implies <b>export</b> and <b>editinline</b>.</dd>\n</dl>\n</dd>\n</dl>\n<dl>\n\
      <dt>Config<sup>S</sup></dt>\n<dd>Makes the variable configurable. The default\
      \ variable value is read from an <a href=\"/Legacy:INI_File\" title=\"Legacy:INI\
      \ File\">INI file</a> when the class is loaded. Each subclass has its own version\
      \ of the variable value in its INI file section. If the class is declared with\
      \ the <a href=\"/PerObjectConfig\" title=\"PerObjectConfig\" class=\"mw-redirect\"\
      >PerObjectConfig</a> modifier, the initial instance value of the variable is\
      \ read from a separate INI section for that object instance.</dd>\n<dt>DataBinding<sup>3</sup></dt>\n\
      <dd>The variable can be manipulated by <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a>'s data store system.</dd>\n<dt>DuplicateTransient<sup>3</sup></dt>\n\
      <dd>Similar to <b>transient</b> (see below) but applies to object duplication.</dd>\n\
      <dt>GlobalConfig<sup>S</sup></dt>\n<dd>Similar to the <b>config</b> modifier,\
      \ but a <b>globalconfig</b> variable's default value is always read from the\
      \ INI section of its declaring class, even for subclasses.\n<dl>\n<dd><i>Implies</i>:\
      \ <b>config</b></dd>\n</dl>\n</dd>\n</dl>\n<dl>\n<dt>Input</dt>\n<dd>Attaches\
      \ the variable to the input system. This is only meaningful for float and byte\
      \ variables, which can be tied to axis and button input respectively. Input\
      \ variables are only filled for the local player actor.</dd>\n<dt>Instanced<sup>3</sup></dt>\n\
      <dd>Only meaningful for reference variables. Subobjects assigned to instanced\
      \ variables are duplicated when an instance of the class is created.\n<dl>\n\
      <dd><i>Implies</i>: <b>export</b> and <b>editinline</b> even on non-reference\
      \ variables.</dd>\n</dl>\n</dd>\n</dl>\n<dl>\n<dt>Localized<sup>S</sup></dt>\n\
      <dd>Makes the variable localizable. The default value of the variable is read\
      \ from a <a href=\"/edit/Localization_file?redlink=1\" class=\"new\" title=\"\
      Localization file (page does not exist)\">localization file</a> when the class\
      \ is loaded. Each subclass can have its own localized versions of the variable\
      \ value. In <a href=\"/edit/Unreal_Engine_1?redlink=1\" class=\"new\" title=\"\
      Unreal Engine 1 (page does not exist)\">Unreal Engine 1</a> and <a href=\"/edit/Unreal_Engine_2?redlink=1\"\
      \ class=\"new\" title=\"Unreal Engine 2 (page does not exist)\">2</a> and if\
      \ the class is declared as <a href=\"/PerObjectLocalized\" title=\"PerObjectLocalized\"\
      \ class=\"mw-redirect\">PerObjectLocalized</a> in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a>, each instance of the class\
      \ can have its own set of localized variable values. This is useful for actors\
      \ placed in a map.\n<dl>\n<dd><i>Implies</i>: <b>const</b><sup>3</sup></dd>\n\
      </dl>\n</dd>\n</dl>\n<dl>\n<dt>Transient<sup>S</sup></dt>\n<dd>The variables\
      \ is set to its null value when initializing object instances. The variable's\
      \ value is never saved to disk in any way.</dd>\n<dt>Travel<sup>1,2</sup></dt>\n\
      <dd>For single player gametypes where a player advances from one map to the\
      \ next, carrying over all inventory items. Instance variables marked as <b>travel</b>\
      \ will keep their value across the map change. Only has an effect for the PlayerPawn\
      \ in UE1 (or the PlayerController and its Pawn in UE2) and its Inventory chain.</dd>\n\
      </dl>\n<h3><span class=\"mw-headline\" id=\"Modifiers_affecting_UnrealEd\">Modifiers\
      \ affecting UnrealEd</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Variables?section=8\" title=\"Edit section: Modifiers\
      \ affecting UnrealEd\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>These modifiers have some kind of effect in <a href=\"/UnrealEd\" title=\"\
      UnrealEd\" class=\"mw-redirect\">UnrealEd</a>, usually in the actor properties\
      \ window.</p>\n<dl>\n<dt>EdFindable<sup>S,2</sup></dt>\n<dd>Adds a 'Find' button\
      \ to the variable in the property window, which can be used to select an actor\
      \ from the UnrealEd viewports. For obvious reasons this only makes sense for\
      \ variables of type Actor or any of its subclasses.</dd>\n<dt>EditConst<sup>S</sup></dt>\n\
      <dd>The variable is read-only in the property window.</dd>\n<dt>EditConstArray<sup>S,2</sup>,\
      \ editfixedsize<sup>S,3</sup></dt>\n<dd>For dynamic arrays, removes the buttons\
      \ from the properties window that would change the array length.</dd>\n<dt>EditHIde<sup>S,3+</sup></dt>\n\
      <dd>Hide in <a href=\"/UnrealEd\" title=\"UnrealEd\" class=\"mw-redirect\">UnrealEd</a>\
      \ property lists.<sup><i><a href=\"/Template:Confirm\" title=\"Template:Confirm\"\
      >[confirm]</a></i></sup></dd>\n<dt>EditInline<sup>S,2,3</sup></dt>\n<dd>Only\
      \ meaningful for object variables. Displays the referenced object's properties\
      \ as a subgroup below the variable in the property window. If the variable has\
      \ the value None, a drop-down list of allowed (<a href=\"/Editinlinenew\" title=\"\
      Editinlinenew\" class=\"mw-redirect\">editinlinenew</a>, non-<a href=\"/Abstract\"\
      \ title=\"Abstract\" class=\"mw-redirect\">abstract</a>) classes can be used\
      \ to create a new object which is assigned to this variable.</dd>\n<dt>EditInlineUse<sup>S,2,3</sup></dt>\n\
      <dd>Same as <b>editinline</b>, but also adds a 'Use' button to the variable\
      \ to apply the object selected in the relevant browser for this type of object.\
      \ Note that the 'Use' button is always available in <a href=\"/Unreal_Engine_3\"\
      \ title=\"Unreal Engine 3\">Unreal Engine 3</a>.</dd>\n<dt>EditorOnly<sup>3+</sup></dt>\n\
      <dd>The variable value is only loaded for <a href=\"/UnrealEd\" title=\"UnrealEd\"\
      \ class=\"mw-redirect\">UnrealEd</a>.</dd>\n<dt>EditorTextBox<sup>S?,3+</sup></dt>\n\
      <dd>Replaces the usual input box with a button for opening a separate dialog\
      \ with a multi-line text box for entering. Probably only useful for <a href=\"\
      /String\" title=\"String\">string</a> variables.</dd>\n<dt>Interp<sup>3</sup></dt>\n\
      <dd>The variable can be manipulated by <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a>'s <a href=\"/edit/Matinee?redlink=1\"\
      \ class=\"new\" title=\"Matinee (page does not exist)\">Matinee</a> system.\
      \ Only really meaningful for float and vector variables.</dd>\n<dt>NoClear<sup>S,3</sup></dt>\n\
      <dd>Instructs the editor to prevent the user from setting this variable to None.\
      \ Only really meaningful for object variables.</dd>\n<dt>NoImport<sup>S,3</sup></dt>\n\
      <dd>The variable's value will not be imported from text representation, i.e.\
      \ when importing from a <a href=\"/edit/T3D_file?redlink=1\" class=\"new\" title=\"\
      T3D file (page does not exist)\">T3D file</a> or pasting from clipboard.</dd>\n\
      <dt>NonTransactional<sup>S,3</sup></dt>\n<dd>The variable is not affected by\
      \ UnrealEd's undo/redo features.</dd>\n<dt>SerializeText<sup>3+</sup></dt>\n\
      <dd>Variable will not be saved, but will be transfered during copy-paste operations\
      \ (which are done through text). Works only on native variables.\n<dl>\n<dd><i>Requirements</i>:\
      \ <b>Native</b></dd>\n</dl>\n</dd>\n</dl>\n<h3><span class=\"mw-headline\" id=\"\
      Other_modifiers\">Other modifiers</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=9\"\
      \ title=\"Edit section: Other modifiers\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The following modifiers don't really fit into any\
      \ of the above categories.</p>\n<dl>\n<dt>cache<sup>UT2004</sup></dt>\n<dd>Marks\
      \ properties of certain classes that should be included in <a href=\"/edit/UCL_file?redlink=1\"\
      \ class=\"new\" title=\"UCL file (page does not exist)\">UCL file</a> entries\
      \ for that class. This is used e.g. for weapon and mutator names and descriptions.</dd>\n\
      <dt>editinlinenotify<sup>S,2</sup></dt>\n<dd>Seems to provide special feedback\
      \ to native code if the variable is edited in a property window. Seems only\
      \ relevant for native classes and implies <b>editinline</b>.</dd>\n<dt>export<sup>S,2,3</sup></dt>\n\
      <dd>For object properties. Objects assigned to this variable are exported as\
      \ subobjects when exporting class scripts or when exporting actors to <a href=\"\
      /edit/T3D_file?redlink=1\" class=\"new\" title=\"T3D file (page does not exist)\"\
      >T3D files</a> or clipboard.</dd>\n<dt>init<sup>S,3</sup></dt>\n<dd>Changes\
      \ the way string and dynamic array variables are exported to headers for native\
      \ classes. Default values for this kind of variable are ignored when creating\
      \ instances of the class.</dd>\n<dt>native</dt>\n<dd>The variable is loaded\
      \ and saved in native code. Only valid in native classes.</dd>\n<dt>noexport<sup>S,2,3</sup></dt>\n\
      <dd>Prevents the variable's value from being exported when exporting class scripts\
      \ or when exporting actors to <a href=\"/edit/T3D_file?redlink=1\" class=\"\
      new\" title=\"T3D file (page does not exist)\">T3D files</a> or clipboard.</dd>\n\
      <dt>notforconsole<sup>3+</sup></dt>\n<dd>The variable value is discarded on\
      \ console platforms.</dd>\n<dt>repretry<sup>3+</sup></dt>\n<dd>If replication\
      \ of this variable was not successful the replication will be tried again.</dd>\n\
      <dt>repnotify<sup>3</sup></dt>\n<dd>Can be used on replicated actor variables\
      \ to instruct the engine to call the <a href=\"/UE3:Actor_events_(UT3)#ReplicatedEvent\"\
      \ title=\"UE3:Actor events (UT3)\">ReplicatedEvent</a> function whenever a value\
      \ was received for the variable.</dd>\n</dl>\n<h3><span class=\"mw-headline\"\
      \ id=\"Modifiers_with_unknown_effect\">Modifiers with unknown effect</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Variables?section=10\" title=\"Edit section: Modifiers with unknown\
      \ effect\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>The effects of these modifiers are not known yet.</p>\n<dl>\n<dt>Archetype<sup>3</sup></dt>\n\
      <dd>Effect unknown. Used only for the <a href=\"/UE3:UIPrefabInstance_(UT3)#SourcePrefab\"\
      \ title=\"UE3:UIPrefabInstance (UT3)\">UIPrefabInstance.SourcePrefab</a> variable\
      \ in UT3.</dd>\n<dt>CrossLevelActive<sup>3+</sup></dt>\n<dd>See below.</dd>\n\
      <dt>CrossLevelPassive<sup>3+</sup></dt>\n<dd>Probably related to level streaming\
      \ or multiple levels loaded at the same time.</dd>\n</dl>\n<h2><span class=\"\
      mw-headline\" id=\"Initial_values\">Initial values</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=11\"\
      \ title=\"Edit section: Initial values\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The initial values of class variables can be specified\
      \ in the <a href=\"/Defaultproperties\" title=\"Defaultproperties\">defaultproperties</a>\
      \ block. The initial value can be different in subclasses without affecting\
      \ the value of parent classes. Some class variables, for example Name, Outer,\
      \ Tag or Location, are initialized with other values when an instance of the\
      \ class is created.</p>\n<p>Initial values of struct members can be specified\
      \ in thee <a href=\"/Structdefaultproperties\" title=\"Structdefaultproperties\"\
      \ class=\"mw-redirect\">structdefaultproperties</a>. In structs that extend\
      \ other structs, the initial value can differ from the value in the parent struct.\
      \ Since structs are data types and only exist as values of other variables,\
      \ initial member values for those variables may differ from the default struct\
      \ member value.</p>\n<p>The initial value of a local variable is always the\
      \ null value for the declared variable <a href=\"/Type\" title=\"Type\" class=\"\
      mw-redirect\">type</a>. The initial value for function parameters is the value\
      \ passed in when the function is called. Omitted optional parameters initially\
      \ contain the type's null value. In <a href=\"/Unreal_Engine_3\" title=\"Unreal\
      \ Engine 3\">Unreal Engine 3</a> it is also possible to specify a different\
      \ initial value for omitted optional parameters.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Accessing_variables\">Accessing variables</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Variables?section=12\"\
      \ title=\"Edit section: Accessing variables\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Class variables can be accessed directly by just specifying\
      \ their name from instance functions, state code or the <a href=\"/Replication_block\"\
      \ title=\"Replication block\">replication block</a> inside the declaring class\
      \ or any of its subclasses.</p>\n<p>The default value for a class variable can\
      \ be accessed directly by using the keyword <b>default</b> and the context operator\
      \ '.' from anywhere inside the class, including static functions:</p>\n<pre><b>default.</b>variablename\n\
      </pre>\n<p>The default value of another class can be accessed by providing a\
      \ different class context to the <b>default</b> keyword:</p>\n<pre>objectreference<b>.default.</b>variablename\n\
      </pre>\n<p>The object reference can be an <a href=\"/Literals#Objects\" title=\"\
      Literals\">object literal</a> or an object reference variable. If the type of\
      \ the object reference is a Class or a <a href=\"/Class_limiter\" title=\"Class\
      \ limiter\" class=\"mw-redirect\">class limiter</a>, that class is used, otherwise\
      \ the referenced object's class type is used to access the default variable\
      \ value. When using an object literal is usually doesn't make sense to use a\
      \ non-class literal because you usually know the class of the referenced object\
      \ and the engine really doesn't care about the actual object if it is only interested\
      \ in the class anyway.</p>\n<p>Struct member variables and class variables of\
      \ other classes or other instances of the same class can be accessed with the\
      \ context operator '.', like in the following example:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">function</span> <span class=\"kw5\"\
      >float</span> getX<span class=\"br0\">(</span><span class=\"kw5\">vector</span>\
      \ V<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"\
      kw2\">return</span> V.<span class=\"me0\">X</span>;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>This accesses the struct member variable <i>X</i> of the vector value\
      \ passed to the function as parameter <i>V</i>. The parameter <i>V</i> is a\
      \ local variable to the function <i>getX</i>. Local variables can only be accessed\
      \ inside their containing function.</p>\n<p>Variables accessed as described\
      \ in this section can be used as an <a href=\"http://en.wikipedia.org/wiki/lvalue\"\
      \ class=\"extiw\" title=\"wp:lvalue\">L-value</a>, i.e. used on the left side\
      \ of an assignment operator or as an <a href=\"/Out\" title=\"Out\" class=\"\
      mw-redirect\">out</a> parameter in a function call.</p>\n<table class=\"navbox\
      \ nowraplinks\" style=\"\">\n<tr class=\"navbox-header\">\n<th colspan=\"2\"\
      \ class=\"navbox-header\" style=\"\">\n<div style=\"position:relative; width:100%;\
      \ white-space:nowrap;\">\n<div class=\"noprint plainlinks\" style=\"background-color:transparent;\
      \ padding:0; font-weight:normal; font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"\
      ><a href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <strong class=\"\
      selflink\">Variables</strong>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <a href=\"/ForEach_loop\"\
      \ title=\"ForEach loop\">ForEach</a>&#160;• <a href=\"/Break_statement\" title=\"\
      Break statement\">Break</a>&#160;• <a href=\"/Continue_statement\" title=\"\
      Continue statement\">Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\"\
      >Specifiers</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.175 seconds\nReal time usage: 0.664 seconds\nPreprocessor\
      \ visited node count: 259/1000000\nPreprocessor generated node count: 1133/1000000\n\
      Post‐expand include size: 12260/2097152 bytes\nTemplate argument size: 4203/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \  257.884      1 - -total\n 39.54%  101.955      1 - Template:Infobox_EngineVersion\n\
      \ 31.67%   81.664      1 - Template:Navbox_unrealscript\n 26.31%   67.845  \
      \    1 - Template:Navbox\n 15.21%   39.236      2 - Template:UE2\n  8.68%  \
      \ 22.394      1 - Template:Tnavbar\n  7.40%   19.072      6 - Template:UE3\n\
      \  6.01%   15.507      2 - Template:Confirm\n  5.64%   14.537      1 - Template:Clear\n\
      \  2.04%    5.268      2 - Template:UE1\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:23763-0!*!0!!en!*!* and timestamp 20221118002531 and\
      \ revision id 46227\n -->\n"
  categories:
  - sortkey: "Variables"
    name: "UnrealScript_reference"
  - sortkey: "Variables"
    name: "Pages_needing_verification"
  links:
  - ns: 0
    exists: true
    name: "Editinlinenew"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Ignores"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Structdefaultproperties"
  - ns: 0
    exists: true
    name: "Switch statement"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Enum"
  - ns: 0
    exists: true
    name: "UDK"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 104
    exists: true
    name: "UE2:GUIComponent (UT2004)"
  - ns: 0
    exists: true
    name: "Unreal Engine"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: false
    name: "UCL file"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Abstract"
  - ns: 0
    exists: true
    name: "Class"
  - ns: 0
    exists: true
    name: "Static array"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: true
    name: "Function"
  - ns: 0
    exists: true
    name: "Delegate"
  - ns: 106
    exists: true
    name: "UE3:UIPrefabInstance (UT3)"
  - ns: 0
    exists: true
    name: "Struct"
  - ns: 0
    exists: false
    name: "Localization file"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 106
    exists: true
    name: "UE3:NxForceField (UDK)"
  - ns: 106
    exists: true
    name: "UE3:NxGenericForceFieldBrush (UDK)"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Operator"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: false
    name: "Engine version"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: false
    name: "Unreal Engine 2"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "ForEach loop"
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "UT2004"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "Out"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "UnrealEd"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: true
    name: "Type"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Pointer"
  - ns: 100
    exists: true
    name: "Legacy:INI File"
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: false
    name: "Matinee"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: false
    name: "T3D file"
  - ns: 0
    exists: true
    name: "PerObjectConfig"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 0
    exists: true
    name: "State"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 104
    exists: true
    name: "UE2:GUIMultiComponent (UT2004)"
  - ns: 106
    exists: true
    name: "UE3:Actor events (UT3)"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "EditConst"
  - ns: 0
    exists: true
    name: "PerObjectLocalized"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "Array"
  - ns: 0
    exists: true
    name: "UT3"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "UT"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: false
    name: "Unreal Engine 1"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "Break statement"
  templates:
  - ns: 10
    exists: true
    name: "Template:Infobox EngineVersion"
  - ns: 10
    exists: true
    name: "Template:UE3"
  - ns: 10
    exists: true
    name: "Template:Confirm"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  - ns: 10
    exists: true
    name: "Template:UE2"
  - ns: 10
    exists: true
    name: "Template:UE1"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Clear"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Declaration"
    number: "1"
    index: "1"
    fromtitle: "Variables"
    byteoffset: 902
    anchor: "Declaration"
  - toclevel: 2
    level: "3"
    line: "Editable variables"
    number: "1.1"
    index: "2"
    fromtitle: "Variables"
    byteoffset: 1856
    anchor: "Editable_variables"
  - toclevel: 2
    level: "3"
    line: "Local variables"
    number: "1.2"
    index: "3"
    fromtitle: "Variables"
    byteoffset: 2256
    anchor: "Local_variables"
  - toclevel: 1
    level: "2"
    line: "Modifiers"
    number: "2"
    index: "4"
    fromtitle: "Variables"
    byteoffset: 3108
    anchor: "Modifiers"
  - toclevel: 2
    level: "3"
    line: "Inner type modifiers"
    number: "2.1"
    index: "5"
    fromtitle: "Variables"
    byteoffset: 3384
    anchor: "Inner_type_modifiers"
  - toclevel: 2
    level: "3"
    line: "Access modifiers"
    number: "2.2"
    index: "6"
    fromtitle: "Variables"
    byteoffset: 4186
    anchor: "Access_modifiers"
  - toclevel: 2
    level: "3"
    line: "Modifiers affecting values"
    number: "2.3"
    index: "7"
    fromtitle: "Variables"
    byteoffset: 6324
    anchor: "Modifiers_affecting_values"
  - toclevel: 2
    level: "3"
    line: "Modifiers affecting UnrealEd"
    number: "2.4"
    index: "8"
    fromtitle: "Variables"
    byteoffset: 9412
    anchor: "Modifiers_affecting_UnrealEd"
  - toclevel: 2
    level: "3"
    line: "Other modifiers"
    number: "2.5"
    index: "9"
    fromtitle: "Variables"
    byteoffset: 11753
    anchor: "Other_modifiers"
  - toclevel: 2
    level: "3"
    line: "Modifiers with unknown effect"
    number: "2.6"
    index: "10"
    fromtitle: "Variables"
    byteoffset: 13312
    anchor: "Modifiers_with_unknown_effect"
  - toclevel: 1
    level: "2"
    line: "Initial values"
    number: "3"
    index: "11"
    fromtitle: "Variables"
    byteoffset: 13707
    anchor: "Initial_values"
  - toclevel: 1
    level: "2"
    line: "Accessing variables"
    number: "4"
    index: "12"
    fromtitle: "Variables"
    byteoffset: 14787
    anchor: "Accessing_variables"
  displaytitle: "Variables"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/static_typing"
    name: "wp:static typing"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/lvalue"
    name: "wp:lvalue"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Variable"
    name: "wp:Variable"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/declaration_(computer_science)"
    name: "wp:declaration (computer science)"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Scope_(programming)"
    name: "wp:Scope (programming)"
  wikitext:
    text: "[[wp:Variable#Computer programming|Variables]] are named storage slots\
      \ for pieces of data. All [[UnrealScript]] variables are [[wp:static typing|staticly-typed]],\
      \ that means you can only store a specific type of data in them and the type\
      \ of data is defined in the variable [[wp:declaration (computer science)|declaration]].\n\
      \nThere are three basic types of variables in UnrealScript:\n* Class variables,\
      \ which can only be declared at the [[class]] [[wp:Scope (programming)|scope]],\
      \ before any function, operator, delegate or [[state]] declaration.\n* Struct\
      \ members, which are declared inside their [[struct]]'s declaration block.\n\
      * Local variables, which can be declared at the start of [[function]], [[state]],\
      \ [[operator]] and [[delegate]] bodies before any code statements. (For readability's\
      \ sake, this article will imply operators and delegates when it mentions functions,\
      \ unless otherwise noted.)\n\n==Declaration==\nA simple class or struct member\
      \ variable declaration looks like this:\n '''var''' ''[[#Modifiers|[modifiers]]]''\
      \ [[type]] variablename''''';'''\nThe ''variablename'' can be any combination\
      \ of the letters A-Z (case-insensitive), the digits 0-9 and the underscore character\
      \ _ with two restrictions:\n* The name may not start with a digit.\n* The name\
      \ must be shorter than 64 characters.\nThe ''type'' can not only be a type specification,\
      \ but also a [[struct]] or [[enum]] declaration.\n\nYou can declare multiple\
      \ variables of the same type in one declaration:\n '''var''' ''[[#Modifiers|[modifiers]]]''\
      \ [[type]] variablename1''',''' variablename2''',''' ...''';'''\nEach of the\
      \ variable names may optionally have an array size specification to create a\
      \ [[static array]]:\n variablename'''['''arraysize''']'''\nYou can mix static\
      \ arrays and non-array variables in a single declaration. The array size only\
      \ applies to the variable you appended it to.\n\n===Editable variables===\n\
      To make the variable accessible from within [[UnrealEd]]'s property windows,\
      \ use the following syntax:\n '''var('''''[groupname[,subgroup<sup>3</sup>]]''''')'''\
      \ ''[[#Modifiers|[modifiers]]]'' [[type]] variablename''';'''\nThe ''groupname''\
      \ must be an identifier if specified. If omitted, the class name is used as\
      \ group name. For struct members, the group name has no effect.\n\n===Local\
      \ variables===\nLocal variable declarations in [[function]] bodies are similar,\
      \ but a bit simpler:\n '''local''' [[type]] variablename''';'''\nLocal variables\
      \ must be declared at the very top of the function body, between the <code>{</code>\
      \ and the first line of \"executable\" code.\n\nYou can declare static arrays\
      \ and multiple variables of the same type as described for class and struct\
      \ variables above. The ''type'' must be an existing type. It is not allowed\
      \ to declare new structs or enums here.\n\nAfter declaration, a local variable\
      \ is initially null, which can mean different things, depending on the variable\
      \ type. (Zero for numeric types, False, empty string or array, None, etc.)\n\
      \n\n'''Note''': As of UDK 2011-06+?{{confirm}} it is also possible to declare\
      \ local variables in [[state]]s. Local variables must be declared before [[ignores]].\n\
      \n==Modifiers==\nFor class and struct variables you are allowed to specify one\
      \ or more variable modifiers. These change the way the variable works in certain\
      \ situations.\n{{Infobox EngineVersion|modifier}}\nModifiers tagged with '''<sup>S</sup>'''\
      \ can be used for struct members.\n\n===Inner type modifiers===\nYou can also\
      \ specify variable modifiers for the inner type of a [[dynamic array]] declaration.\
      \ This compiler feature is available in all engine versions, but doesn't have\
      \ any effect before [[Unreal Engine 3]]. The only currently known instances\
      \ of this are several variables in two classes of the [[UDK]]'s Engine package\
      \ ([[UE3:NxForceField (UDK)|NxForceField]] and [[UE3:NxGenericForceFieldBrush\
      \ (UDK)|NxGenericForceFieldBrush]], both using <code>[[array]]<const native\
      \ transient [[pointer]]></code>), so this feature might only work at all in\
      \ newer versions of Unreal Engine 3. '''Note''': All inner modifiers are as\
      \ well implicity added to the variable modifiers, so for example if you were\
      \ to add [[EditConst]] the actual variable would as well act upon [[EditConst]].\n\
      \n===Access modifiers===\nThe following modifiers only apply to class variables\
      \ and specify, which other classes are allowed to access the variable. The access\
      \ rules are enforced by the compiler.\n; Const<sup>S</sup>: Prevents any changes\
      \ to this variable from within UnrealScript. You are still allowed to specify\
      \ a value in the [[defaultproperties]] block and access the variable's value\
      \ in your code. This property is mostly used to protect variables with a special\
      \ meaning to native code. Classes with '''const''' variables usually have a\
      \ corresponding setter function for each variable. With bytecode level hacking,\
      \ it's possible to assign a value to a const variable, but in general, the effect\
      \ is undefined (ranging from giving the result you want to crashing the game).\n\
      ; Deprecated<sup>2,3</sup>: Signals that this variable should no longer be used.\
      \ Accessing deprecated variables will throw a compiler warning. [[Unreal Engine\
      \ 3]] will load the value of a '''deprecated''' variable, but ignore it during\
      \ save.\n; Private<sup>S,2,3</sup>: Private variables can only be accessed from\
      \ within the class they were declared in. Other classes, even subclasses, can't\
      \ access them.\n; PrivateWrite<sup>3-x2</sup>: Related to the '''private'''\
      \ access modifier. Causes the variable to be treated as private for writing,\
      \ but public for reading.\n; Protected<sup>S,2,3</sup>: Access to protected\
      \ variables is only allowed from within the same class and its subclasses. Sibling\
      \ classes, parent classes and other, unrelated classes can't \"see\" protected\
      \ variables.\n; ProtectedWrite<sup>3-x2</sup>: Related to the '''protected'''\
      \ access modifier. Causes the variable to be treated as protected for writing,\
      \ but public for reading.\n; Public<sup>S,2,3</sup>: The default access rule.\
      \ If no other access rule is specified, this is one is implied. Public variables\
      \ can be accessed from any other class. Usually you will see this modifier in\
      \ Unreal Engine 3, along with a native code snippet. One of the most common\
      \ examples is <code>public{private}</code>, which means the variable is declared\
      \ as public for UnrealScript, but as private for native code.\n\n===Modifiers\
      \ affecting values===\nThese modifiers affect the default value of the variable\
      \ in some way.\n\n; Automated<sup>UT2004</sup>: Only meaningful for object variables\
      \ in [[UE2:GUIMultiComponent (UT2004)|GUIMultiComponent]] classes. Indicates\
      \ that any [[UE2:GUIComponent (UT2004)|GUIComponent]] object(s) referenced by\
      \ this variable should automatically be added to the [[UE2:GUIMultiComponent_(UT2004)#Controls|Controls]]\
      \ array. Also works for [[static array|static]] and [[dynamic arrays]]. Objects\
      \ that aren't GUIComponents are ignored.\n::''Implies'': '''noexport''', '''editinline''',\
      \ '''editinlineuse''' and '''editinlinenotify''', and FYI: any object variable(even\
      \ parameters and locals) referencing GUIComponents implies '''export''' and\
      \ '''editinline'''.\n; Config<sup>S</sup>: Makes the variable configurable.\
      \ The default variable value is read from an [[Legacy:INI_File|INI file]] when\
      \ the class is loaded. Each subclass has its own version of the variable value\
      \ in its INI file section. If the class is declared with the [[PerObjectConfig]]\
      \ modifier, the initial instance value of the variable is read from a separate\
      \ INI section for that object instance.\n; DataBinding<sup>3</sup>: The variable\
      \ can be manipulated by [[Unreal Engine 3]]'s data store system.\n; DuplicateTransient<sup>3</sup>:\
      \ Similar to '''transient''' (see below) but applies to object duplication.\n\
      ; GlobalConfig<sup>S</sup>: Similar to the '''config''' modifier, but a '''globalconfig'''\
      \ variable's default value is always read from the INI section of its declaring\
      \ class, even for subclasses.\n::''Implies'': '''config'''\n; Input: Attaches\
      \ the variable to the input system. This is only meaningful for float and byte\
      \ variables, which can be tied to axis and button input respectively. Input\
      \ variables are only filled for the local player actor.\n; Instanced<sup>3</sup>:\
      \ Only meaningful for reference variables. Subobjects assigned to instanced\
      \ variables are duplicated when an instance of the class is created.\n::''Implies'':\
      \ '''export''' and '''editinline''' even on non-reference variables.\n; Localized<sup>S</sup>:\
      \ Makes the variable localizable. The default value of the variable is read\
      \ from a [[localization file]] when the class is loaded. Each subclass can have\
      \ its own localized versions of the variable value. In [[Unreal Engine 1]] and\
      \ [[Unreal Engine 2|2]] and if the class is declared as [[PerObjectLocalized]]\
      \ in [[Unreal Engine 3]], each instance of the class can have its own set of\
      \ localized variable values. This is useful for actors placed in a map.\n::''Implies'':\
      \ '''const'''<sup>3</sup>\n; Transient<sup>S</sup>: The variables is set to\
      \ its null value when initializing object instances. The variable's value is\
      \ never saved to disk in any way.\n; Travel<sup>1,2</sup>: For single player\
      \ gametypes where a player advances from one map to the next, carrying over\
      \ all inventory items. Instance variables marked as '''travel''' will keep their\
      \ value across the map change. Only has an effect for the PlayerPawn in UE1\
      \ (or the PlayerController and its Pawn in UE2) and its Inventory chain.\n\n\
      ===Modifiers affecting UnrealEd===\nThese modifiers have some kind of effect\
      \ in [[UnrealEd]], usually in the actor properties window.\n\n; EdFindable<sup>S,2</sup>:\
      \ Adds a 'Find' button to the variable in the property window, which can be\
      \ used to select an actor from the UnrealEd viewports. For obvious reasons this\
      \ only makes sense for variables of type Actor or any of its subclasses.\n;\
      \ EditConst<sup>S</sup>: The variable is read-only in the property window.\n\
      ; EditConstArray<sup>S,2</sup>, editfixedsize<sup>S,3</sup>: For dynamic arrays,\
      \ removes the buttons from the properties window that would change the array\
      \ length.\n; EditHIde<sup>S,3+</sup>: Hide in [[UnrealEd]] property lists.{{confirm}}\n\
      ; EditInline<sup>S,2,3</sup>: Only meaningful for object variables. Displays\
      \ the referenced object's properties as a subgroup below the variable in the\
      \ property window. If the variable has the value None, a drop-down list of allowed\
      \ ([[editinlinenew]], non-[[abstract]]) classes can be used to create a new\
      \ object which is assigned to this variable.\n; EditInlineUse<sup>S,2,3</sup>:\
      \ Same as '''editinline''', but also adds a 'Use' button to the variable to\
      \ apply the object selected in the relevant browser for this type of object.\
      \ Note that the 'Use' button is always available in [[Unreal Engine 3]].\n;\
      \ EditorOnly<sup>3+</sup>: The variable value is only loaded for [[UnrealEd]].\n\
      ; EditorTextBox<sup>S?,3+</sup>: Replaces the usual input box with a button\
      \ for opening a separate dialog with a multi-line text box for entering. Probably\
      \ only useful for [[string]] variables.\n; Interp<sup>3</sup>: The variable\
      \ can be manipulated by [[Unreal Engine 3]]'s [[Matinee]] system. Only really\
      \ meaningful for float and vector variables.\n; NoClear<sup>S,3</sup>: Instructs\
      \ the editor to prevent the user from setting this variable to None. Only really\
      \ meaningful for object variables.\n; NoImport<sup>S,3</sup>: The variable's\
      \ value will not be imported from text representation, i.e. when importing from\
      \ a [[T3D file]] or pasting from clipboard.\n; NonTransactional<sup>S,3</sup>:\
      \ The variable is not affected by UnrealEd's undo/redo features.\n; SerializeText<sup>3+</sup>:\
      \ Variable will not be saved, but will be transfered during copy-paste operations\
      \ (which are done through text). Works only on native variables.\n::''Requirements'':\
      \ '''Native'''\n\n===Other modifiers===\nThe following modifiers don't really\
      \ fit into any of the above categories.\n; cache<sup>UT2004</sup>: Marks properties\
      \ of certain classes that should be included in [[UCL file]] entries for that\
      \ class. This is used e.g. for weapon and mutator names and descriptions.\n\
      ; editinlinenotify<sup>S,2</sup>: Seems to provide special feedback to native\
      \ code if the variable is edited in a property window. Seems only relevant for\
      \ native classes and implies '''editinline'''.\n; export<sup>S,2,3</sup>: For\
      \ object properties. Objects assigned to this variable are exported as subobjects\
      \ when exporting class scripts or when exporting actors to [[T3D file]]s or\
      \ clipboard.\n; init<sup>S,3</sup>: Changes the way string and dynamic array\
      \ variables are exported to headers for native classes. Default values for this\
      \ kind of variable are ignored when creating instances of the class.\n; native:\
      \ The variable is loaded and saved in native code. Only valid in native classes.\n\
      ; noexport<sup>S,2,3</sup>: Prevents the variable's value from being exported\
      \ when exporting class scripts or when exporting actors to [[T3D file]]s or\
      \ clipboard.\n; notforconsole<sup>3+</sup>: The variable value is discarded\
      \ on console platforms.\n; repretry<sup>3+</sup>: If replication of this variable\
      \ was not successful the replication will be tried again.\n; repnotify<sup>3</sup>:\
      \ Can be used on replicated actor variables to instruct the engine to call the\
      \ [[UE3:Actor events (UT3)#ReplicatedEvent|ReplicatedEvent]] function whenever\
      \ a value was received for the variable.\n\n===Modifiers with unknown effect===\n\
      The effects of these modifiers are not known yet.\n; Archetype<sup>3</sup>:\
      \ Effect unknown. Used only for the [[UE3:UIPrefabInstance (UT3)#SourcePrefab|UIPrefabInstance.SourcePrefab]]\
      \ variable in UT3.\n; CrossLevelActive<sup>3+</sup>: See below.\n; CrossLevelPassive<sup>3+</sup>:\
      \ Probably related to level streaming or multiple levels loaded at the same\
      \ time.\n\n==Initial values==\nThe initial values of class variables can be\
      \ specified in the [[defaultproperties]] block. The initial value can be different\
      \ in subclasses without affecting the value of parent classes. Some class variables,\
      \ for example Name, Outer, Tag or Location, are initialized with other values\
      \ when an instance of the class is created.\n\nInitial values of struct members\
      \ can be specified in thee [[structdefaultproperties]]. In structs that extend\
      \ other structs, the initial value can differ from the value in the parent struct.\
      \ Since structs are data types and only exist as values of other variables,\
      \ initial member values for those variables may differ from the default struct\
      \ member value.\n\nThe initial value of a local variable is always the null\
      \ value for the declared variable [[type]]. The initial value for function parameters\
      \ is the value passed in when the function is called. Omitted optional parameters\
      \ initially contain the type's null value. In [[Unreal Engine 3]] it is also\
      \ possible to specify a different initial value for omitted optional parameters.\n\
      \n==Accessing variables==\nClass variables can be accessed directly by just\
      \ specifying their name from instance functions, state code or the [[replication\
      \ block]] inside the declaring class or any of its subclasses.\n\nThe default\
      \ value for a class variable can be accessed directly by using the keyword '''default'''\
      \ and the context operator '.' from anywhere inside the class, including static\
      \ functions:\n '''default.'''variablename\nThe default value of another class\
      \ can be accessed by providing a different class context to the '''default'''\
      \ keyword:\n objectreference'''.default.'''variablename\nThe object reference\
      \ can be an [[Literals#Objects|object literal]] or an object reference variable.\
      \ If the type of the object reference is a Class or a [[class limiter]], that\
      \ class is used, otherwise the referenced object's class type is used to access\
      \ the default variable value. When using an object literal is usually doesn't\
      \ make sense to use a non-class literal because you usually know the class of\
      \ the referenced object and the engine really doesn't care about the actual\
      \ object if it is only interested in the class anyway.\n\nStruct member variables\
      \ and class variables of other classes or other instances of the same class\
      \ can be accessed with the context operator '.', like in the following example:\n\
      <uscript>\nfunction float getX(vector V)\n{\n  return V.X;\n}\n</uscript>\n\
      This accesses the struct member variable ''X'' of the vector value passed to\
      \ the function as parameter ''V''. The parameter ''V'' is a local variable to\
      \ the function ''getX''. Local variables can only be accessed inside their containing\
      \ function.\n\nVariables accessed as described in this section can be used as\
      \ an [[wp:lvalue|L-value]], i.e. used on the left side of an assignment operator\
      \ or as an [[out]] parameter in a function call.\n\n{{navbox unrealscript}}"
  properties: []
  revId: 46227
name: "Variables"
revision:
  revid: 46227
  parentid: 45944
  user: "Wormbo"
  timestamp: 1442422278.000000000
  comment: "/* Modifiers */ somehow the struct member tag got lost when moving modifier\
    \ info to a template"
timestamp: 1668754584.201724000
