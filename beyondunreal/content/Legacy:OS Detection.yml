---
parse:
  title: "Legacy:OS Detection"
  text:
    text: "<p>Although <a href=\"/edit/Legacy:Unrealscript?redlink=1\" class=\"new\"\
      \ title=\"Legacy:Unrealscript (page does not exist)\">Unrealscript</a> is platform-independant,\
      \ it can sometimes be useful for your code to determine what operating system\
      \ it is running on. For instance, a Macintosh or Linux version of the Unreal\
      \ Engine will not have Direct3D support and will only show white boxes if you\
      \ try to use a <a href=\"/Legacy:ScriptedTexture\" title=\"Legacy:ScriptedTexture\"\
      >ScriptedTexture</a>. It may make sense if you use <a href=\"/Legacy:ScriptedTexture\"\
      \ title=\"Legacy:ScriptedTexture\">ScriptedTextures</a> to have the script detect\
      \ if the user is using Linux or Mac OS and replace the texture with something\
      \ more attractive than a stark white box.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"General_OS_Detection\">General OS Detection</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:OS_Detection?section=1\"\
      \ title=\"Edit section: General OS Detection\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This snippet works by attempting to pull a non-existing\
      \ property from one of the drivers. An instance of the driver class will only\
      \ exist, and therefore only reply with unrecognized property, if the driver\
      \ is in fact loaded. WinDrv only being loaded on Windows, XDrv on Linux, and\
      \ so on. This is not the most efficient implementation but should work on all\
      \ Unreal Engine versions. (At least, Unreal Engine 2.5 and earlier. This is\
      \ useable in any actor. The ConsoleCommand function of an <a href=\"/Legacy:Interaction\"\
      \ title=\"Legacy:Interaction\">Interaction</a> does not return a string, and\
      \ so will not work.</p>\n<p>Note that \"Unrecognized property\" indicates that\
      \ that is the CORRECT operating system. If you attempt to access XDrv.XClient\
      \ from Windows, for instance, you get a different error message, \"Unrecognized\
      \ Class XDrv.XClient.\"</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw2\">if</span><span class=\"br0\">(</span><span class=\"kw4\">consolecommand</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"get WinDrv.WindowsClient\"</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"st0\">\"\
      Unrecognized property\"</span><span class=\"br0\">)</span>\n<span class=\"co1\"\
      >// I'm windows</span>\n<span class=\"kw2\">if</span><span class=\"br0\">(</span><span\
      \ class=\"kw4\">consolecommand</span><span class=\"br0\">(</span><span class=\"\
      st0\">\"get XDrv.XClient\"</span><span class=\"br0\">)</span><span class=\"\
      sy0\">==</span><span class=\"st0\">\"Unrecognized property\"</span><span class=\"\
      br0\">)</span>\n<span class=\"co1\">// I'm linux</span>\n<span class=\"kw2\"\
      >if</span><span class=\"br0\">(</span><span class=\"kw4\">consolecommand</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">\"get MacDrv.MacClient\"</span><span\
      \ class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"st0\">\"\
      Unrecognized property\"</span><span class=\"br0\">)</span>\n<span class=\"co1\"\
      >// I'm mac</span></pre></div>\n</div>\n<p>Posted by Fish HF on the Beyond Unreal\
      \ coding forums.</p>\n<h2><span class=\"mw-headline\" id=\"UT2004\">UT2004</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:OS_Detection?section=2\" title=\"Edit section: UT2004\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>UT2004\
      \ has a few native functions that return what OS it is. They will also return\
      \ whether the binary is 64-bit or 32-bit. A 32-bit binary running on a 64-bit\
      \ system will return false to PlatformIs64Bit(). Note that although Mac OS is\
      \ based on Unix, it will return false on PlatformIsUnix(), as it is already\
      \ covered by PlatformIsMacOS(). These functions are declared in Object and so\
      \ should be useable anywhere in script.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">native</span> <span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw5\">bool</span> <span class=\"\
      kw3\">PlatformIsMacOS</span><span class=\"br0\">(</span><span class=\"br0\"\
      >)</span>;    <span class=\"co1\">// MacOS X.</span>\n<span class=\"kw1\">native</span>\
      \ <span class=\"kw1\">final</span> <span class=\"kw1\">function</span> <span\
      \ class=\"kw5\">bool</span> <span class=\"kw3\">PlatformIsUnix</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;     <span class=\"co1\">// Linux,\
      \ FreeBSD, etc (NOT OSX!)</span>\n<span class=\"kw1\">native</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">bool</span>\
      \ <span class=\"kw3\">PlatformIsWindows</span><span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>;  <span class=\"co1\">// Win32, Win32.</span>\n<span\
      \ class=\"kw1\">native</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">bool</span> <span class=\"kw3\">PlatformIs64Bit</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;    <span class=\"co1\"\
      >// Linux64, Win64.</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"Comments\">Comments</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:OS_Detection?section=3\"\
      \ title=\"Edit section: Comments\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>El Muerte TDS:</b> and what about \"SDLDrv.SDLClient\"\
      \ that one is system independed, besides on dedicated servers the viewport setting\
      \ doesn't matter. Also, what is the use, the Unreal engine is system independed\
      \ in UScript, even things like filenames are corrected.</p>\n<p><b>Foxpaw:</b>\
      \ The UT2004 one should be useable from any actor. The UT/UT2003 will need to\
      \ be called on something that can execute console commands, and have the string\
      \ value of lines written to the console during such time returned. (Some return\
      \ only true or false instead of a string.) However, you could probrably do GetPropertyText\
      \ instead.</p>\n<p>Also, the above code was right before. You are attempting\
      \ to access a non-existing property of an existing class. If you attempt to\
      \ access XDrv.XClient it will give you \"Unrecognized class XDrv.XClient\" instead\
      \ of \"Unrecognized property\"</p>\n<p><b>Xian:</b> XDrv is wrong, that is an\
      \ experimental emulator for XWindows, not Linux necessarily.</p>\n<p>The correct\
      \ way is this (should work on UT400 - UTPG451b, but not sure about UTPG468):</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> CheckOS <span class=\"br0\">(</span>PlayerPawn\
      \ OSOwner<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">string</span> OS<span class=\"\
      re0\">Class</span>&lt; SEMI &gt;\n    <span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">string</span> OS;\n \n    OSClass <span class=\"sy0\">=</span>\
      \ <span class=\"kw5\">string</span><span class=\"br0\">(</span>OSOwner.<span\
      \ class=\"kw8\">Player</span>.<span class=\"kw1\">Class</span><span class=\"\
      br0\">)</span>;\n \n    <span class=\"co1\">// string way</span>\n    <span\
      \ class=\"kw2\">switch</span> <span class=\"br0\">(</span>OSClass<span class=\"\
      br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw2\"\
      >case</span> <span class=\"st0\">\"WinDrv.WindowsClient\"</span> :\n       \
      \     OS <span class=\"sy0\">=</span> <span class=\"st0\">\"Windows\"</span>;\n\
      \            <span class=\"kw2\">break</span>;\n        <span class=\"kw2\"\
      >case</span> <span class=\"st0\">\"SDLDrv.SDLClient\"</span> :\n           \
      \ OS <span class=\"sy0\">=</span> <span class=\"st0\">\"Linux\"</span>;\n  \
      \          <span class=\"kw2\">break</span>;\n        <span class=\"kw2\">case</span>\
      \ <span class=\"st0\">\"MacDrv.MacClient\"</span> :\n            OS <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"Mac\"</span>;\n            <span class=\"\
      kw2\">break</span>;\n    <span class=\"br0\">}</span>\n \n    <span class=\"\
      co1\">// name way</span>\n    <span class=\"kw2\">if</span> <span class=\"br0\"\
      >(</span>OSOwner.<span class=\"kw8\">Player</span>.<span class=\"kw3\">IsA</span><span\
      \ class=\"br0\">(</span><span class=\"st0\">'WindowsViewport'</span><span class=\"\
      br0\">)</span><span class=\"br0\">)</span>\n        OS <span class=\"sy0\">=</span>\
      \ <span class=\"st0\">\"Windows\"</span>;\n    <span class=\"kw2\">else</span>\
      \ <span class=\"kw2\">if</span> <span class=\"br0\">(</span>OSOwner.<span class=\"\
      kw8\">Player</span>.<span class=\"kw3\">IsA</span><span class=\"br0\">(</span><span\
      \ class=\"st0\">'LinuxViewport'</span><span class=\"br0\">)</span><span class=\"\
      br0\">)</span>\n        OS <span class=\"sy0\">=</span> <span class=\"st0\"\
      >\"Linux\"</span>;\n    <span class=\"kw2\">else</span> <span class=\"kw2\"\
      >if</span> <span class=\"br0\">(</span>OSOwner.<span class=\"kw8\">Player</span>.<span\
      \ class=\"kw3\">IsA</span><span class=\"br0\">(</span><span class=\"st0\">'MacViewport'</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>\n        OS <span class=\"\
      sy0\">=</span> <span class=\"st0\">\"Mac\"</span>;\n \n    <span class=\"kw2\"\
      >return</span> OS;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<blockquote\
      \ class=\"legacyquote\">\n<p><b>FoxPawn:</b> Also, the above code was right\
      \ before. You are attempting to access a non-existing property of an existing\
      \ class. If you attempt to access XDrv.XClient it will give you \"Unrecognized\
      \ class XDrv.XClient\" instead of \"Unrecognized property\"</p>\n</blockquote>\n\
      <p>Wrong&#160;:) Well you're correct in what you said, but wrong in this case.\
      \ That was not his point. It's true that if you attempt to recover a value of\
      \ a property from a non existant class (we include typo-ed classes here too)\
      \ it will return \"Unrecognized Class\" or a localized versioned text of that.\
      \ However, his point was to check if the class is found, but property isn't,\
      \ which proves the class exists, therefore, he can \"guess\" the OS. Although\
      \ the Linux detection is wrong. The one I showed should be correct (both ways)\
      \ for UE 1 games.</p>\n\n<!-- \nNewPP limit report\nCPU time usage: 0.089 seconds\n\
      Real time usage: 0.207 seconds\nPreprocessor visited node count: 41/1000000\n\
      Preprocessor generated node count: 129/1000000\nPost‐expand include size: 604/2097152\
      \ bytes\nTemplate argument size: 254/2097152 bytes\nHighest expansion depth:\
      \ 3/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion expansion\
      \ time report (%,ms,calls,template)\n100.00%    9.164      1 - -total\n100.00%\
      \    9.164      1 - Template:Innerbox\n-->\n\n<!-- Saved in parser cache with\
      \ key wiki:pcache:idhash:2331-0!*!0!!*!*!* and timestamp 20221118025048 and\
      \ revision id 5618\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:ScriptedTexture"
  - ns: 100
    exists: true
    name: "Legacy:Interaction"
  - ns: 100
    exists: false
    name: "Legacy:Unrealscript"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "General OS Detection"
    number: "1"
    index: "1"
    fromtitle: "Legacy:OS_Detection"
    byteoffset: 571
    anchor: "General_OS_Detection"
  - toclevel: 1
    level: "2"
    line: "UT2004"
    number: "2"
    index: "2"
    fromtitle: "Legacy:OS_Detection"
    byteoffset: 1712
    anchor: "UT2004"
  - toclevel: 1
    level: "2"
    line: "Comments"
    number: "3"
    index: "3"
    fromtitle: "Legacy:OS_Detection"
    byteoffset: 2449
    anchor: "Comments"
  displaytitle: "Legacy:OS Detection"
  iwlinks: []
  wikitext:
    text: "Although [[Legacy:Unrealscript|Unrealscript]] is platform-independant,\
      \ it can sometimes be useful for your code to determine what operating system\
      \ it is running on. For instance, a Macintosh or Linux version of the Unreal\
      \ Engine will not have Direct3D support and will only show white boxes if you\
      \ try to use a [[Legacy:ScriptedTexture|ScriptedTexture]]. It may make sense\
      \ if you use [[Legacy:ScriptedTexture|ScriptedTexture]]s to have the script\
      \ detect if the user is using Linux or Mac OS and replace the texture with something\
      \ more attractive than a stark white box.\n\n==General OS Detection==\n\nThis\
      \ snippet works by attempting to pull a non-existing property from one of the\
      \ drivers. An instance of the driver class will only exist, and therefore only\
      \ reply with unrecognized property, if the driver is in fact loaded. WinDrv\
      \ only being loaded on Windows, XDrv on Linux, and so on. This is not the most\
      \ efficient implementation but should work on all Unreal Engine versions. (At\
      \ least, Unreal Engine 2.5 and earlier. This is useable in any actor. The ConsoleCommand\
      \ function of an [[Legacy:Interaction|Interaction]] does not return a string,\
      \ and so will not work.\n\nNote that \"Unrecognized property\" indicates that\
      \ that is the CORRECT operating system. If you attempt to access XDrv.XClient\
      \ from Windows, for instance, you get a different error message, \"Unrecognized\
      \ Class XDrv.XClient.\"\n\n<uscript>\nif(consolecommand(\"get WinDrv.WindowsClient\"\
      )==\"Unrecognized property\")\n// I'm windows\nif(consolecommand(\"get XDrv.XClient\"\
      )==\"Unrecognized property\")\n// I'm linux\nif(consolecommand(\"get MacDrv.MacClient\"\
      )==\"Unrecognized property\")\n// I'm mac\n</uscript>\n\nPosted by Fish HF on\
      \ the Beyond Unreal coding forums.\n\n==UT2004 ==\n\nUT2004 has a few native\
      \ functions that return what OS it is. They will also return whether the binary\
      \ is 64-bit or 32-bit. A 32-bit binary running on a 64-bit system will return\
      \ false to PlatformIs64Bit(). Note that although Mac OS is based on Unix, it\
      \ will return false on PlatformIsUnix(), as it is already covered by PlatformIsMacOS().\
      \ These functions are declared in Object and so should be useable anywhere in\
      \ script.\n\n<uscript>\nnative final function bool PlatformIsMacOS();    //\
      \ MacOS X.\nnative final function bool PlatformIsUnix();     // Linux, FreeBSD,\
      \ etc (NOT OSX!)\nnative final function bool PlatformIsWindows();  // Win32,\
      \ Win32.\nnative final function bool PlatformIs64Bit();    // Linux64, Win64.\n\
      </uscript>\n\n==Comments==\n\n'''El Muerte TDS:''' and what about \"SDLDrv.SDLClient\"\
      \ that one is system independed, besides on dedicated servers the viewport setting\
      \ doesn't matter. Also, what is the use, the Unreal engine is system independed\
      \ in UScript, even things like filenames are corrected.\n\n'''Foxpaw:''' The\
      \ UT2004 one should be useable from any actor. The UT/UT2003 will need to be\
      \ called on something that can execute console commands, and have the string\
      \ value of lines written to the console during such time returned. (Some return\
      \ only true or false instead of a string.) However, you could probrably do GetPropertyText\
      \ instead.\n\nAlso, the above code was right before. You are attempting to access\
      \ a non-existing property of an existing class. If you attempt to access XDrv.XClient\
      \ it will give you \"Unrecognized class XDrv.XClient\" instead of \"Unrecognized\
      \ property\"\n\n'''Xian:''' XDrv is wrong, that is an experimental emulator\
      \ for XWindows, not Linux necessarily.\n\nThe correct way is this (should work\
      \ on UT400 - UTPG451b, but not sure about UTPG468):\n\n<uscript>\nfunction string\
      \ CheckOS (PlayerPawn OSOwner)\n{\n    local string OSClass;\n    local string\
      \ OS;\n\n    OSClass = string(OSOwner.Player.Class);\n\n    // string way\n\
      \    switch (OSClass)\n    {\n        case \"WinDrv.WindowsClient\" :\n    \
      \        OS = \"Windows\";\n            break;\n        case \"SDLDrv.SDLClient\"\
      \ :\n            OS = \"Linux\";\n            break;\n        case \"MacDrv.MacClient\"\
      \ :\n            OS = \"Mac\";\n            break;\n    }\n\n    // name way\n\
      \    if (OSOwner.Player.IsA('WindowsViewport'))\n        OS = \"Windows\";\n\
      \    else if (OSOwner.Player.IsA('LinuxViewport'))\n        OS = \"Linux\";\n\
      \    else if (OSOwner.Player.IsA('MacViewport'))\n        OS = \"Mac\";\n\n\
      \    return OS;\n}\n</uscript>\n\n{{innerbox|'''FoxPawn:''' Also, the above\
      \ code was right before. You are attempting to access a non-existing property\
      \ of an existing class. If you attempt to access XDrv.XClient it will give you\
      \ \"Unrecognized class XDrv.XClient\" instead of \"Unrecognized property\"\n\
      \n}}\n\nWrong :) Well you're correct in what you said, but wrong in this case.\
      \ That was not his point. It's true that if you attempt to recover a value of\
      \ a property from a non existant class (we include typo-ed classes here too)\
      \ it will return \"Unrecognized Class\" or a localized versioned text of that.\
      \ However, his point was to check if the class is found, but property isn't,\
      \ which proves the class exists, therefore, he can \"guess\" the OS. Although\
      \ the Linux detection is wrong. The one I showed should be correct (both ways)\
      \ for UE 1 games."
  properties: []
  revId: 5618
name: "Legacy:OS Detection"
revision:
  revid: 5618
  parentid: 5619
  user: "Xian"
  timestamp: 1144757481.000000000
  comment: "shed some light on things (didn't correct the original code)"
timestamp: 1668764922.555512000
