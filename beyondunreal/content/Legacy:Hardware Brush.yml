---
parse:
  title: "Legacy:Hardware Brush"
  text:
    text: "<p>This page is largely obsolete discussion &amp; speculation from pre-<a\
      \ href=\"/Legacy:UT2003\" title=\"Legacy:UT2003\" class=\"mw-redirect\">UT2003</a>\
      \ days. See <a href=\"/Legacy:Static_Mesh\" title=\"Legacy:Static Mesh\">static\
      \ mesh</a>.</p>\n<h3><span class=\"mw-headline\" id=\"What_are_Hardware_Brushes.3F\"\
      >What are Hardware Brushes?</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Hardware_Brush?section=1\"\
      \ title=\"Edit section: What are Hardware Brushes?\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>Hardware Brushes (or \"Static\
      \ Meshes\" as they will be called from here on), are just as they are called,\
      \ meshes. These are how the Unreal Engine can push the insane polygon counts\
      \ this time around, because these meshes utilize your video card's T+L unit.\
      \ They are created in an external 3D modelling program, such as <a href=\"/Legacy:3D_Studio_Max\"\
      \ title=\"Legacy:3D Studio Max\">3D Studio Max</a> or <a href=\"/Legacy:Maya\"\
      \ title=\"Legacy:Maya\">Maya</a>, textured, then imported into UnrealEd using\
      \ the ASE file format. <a href=\"/Legacy:BSP\" title=\"Legacy:BSP\">BSP</a>\
      \ is still used for base construction of a map, but the Static Meshes should\
      \ be used for decorations and much of the architecture.</p>\n<p>Static meshes\
      \ have a collision hull that's separate from their visual appearance. That collision\
      \ hull can be either imported along with the mesh from the modelling program\
      \ (as an object with a special name prefix), or automatically generated in UnrealEd\
      \ (as a convex object with a definable complexity). Of course, the mesh itself\
      \ can be defined to be its collision hull, which results in per-poly collision.</p>\n\
      <p>Some other thing to note:</p>\n<ul>\n<li>Static Meshes can be rotated and\
      \ scaled among X, Y, and Z</li>\n<li>Movers are now static meshes, not brushes.</li>\n\
      <li>Static meshes can be converted to brushes and vice versa in UnrealEd.</li>\n\
      <li>Static Meshes use vertex lighting. To use lightmaps on static meshes, they\
      \ must be \"baked\" onto the mesh's textures using a 3D program.</li>\n<li>Static\
      \ Meshes don't occlude; you have to use <a href=\"/edit/UT2003:antiportal?redlink=1\"\
      \ class=\"new\" title=\"UT2003:antiportal (page does not exist)\">UT2003:antiportals</a>\
      \ for that. (For that matter, BSP doesn't automatically occlude either anymore.)</li>\n\
      </ul>\n<p>Another great thing about static meshes are that they can be set up\
      \ with <a href=\"/Legacy:Karma\" title=\"Legacy:Karma\">Karma</a> courtesy of\
      \ MathEngine. For example, you can set up a lamp mesh that hangs from the ceiling\
      \ (via chain) using Karma. Upon being shot, it with swing and spin realistically.\
      \ The possibilities can be endless with Karma physics.</p>\n<p>See also: <a\
      \ href=\"/Legacy:Building_With_Static_Meshes\" title=\"Legacy:Building With\
      \ Static Meshes\">Building With Static Meshes</a></p>\n<hr />\n<p>So what exactly\
      \ is gonna be the deal with hardware brushes? Here's a <a rel=\"nofollow\" class=\"\
      external text\" href=\"http://c2.com/cgi/wiki?HowToVote\">Wiki poll</a>... to\
      \ vote, edit this page and increment your choice's count by 1. BTW, feel free\
      \ to add options if you think they're required.</p>\n<p>(the alternative, BTW\
      \ is a <a rel=\"nofollow\" class=\"external text\" href=\"http://c2.com/cgi/wiki?WikiGreatFoobarLists\"\
      >Wiki multiple vote</a> – harder to read though)</p>\n<ol>\n<li>[2] bah, UT2\
      \ will ship with tons of groovy hardware prefabs. We'll have hours of endless\
      \ amusement working with those, just as we were happy with UT's built-in textures\
      \ for a long time.</li>\n<li>[0] a minority of uber-l33t modellers will create\
      \ new prefabs for the community to use. That will be enough to add to the creative\
      \ mix.</li>\n<li>[0] I intend to or already have a version of Max which dropped\
      \ off the back of a lorry, honest guv <b>OR</b> I am a professional or rich\
      \ and I have a legal copy (note: 5th amendment to the US constitution is deemed\
      \ to apply internationally here&#160;:))</li>\n<li>[1] Existing cheap or free\
      \ tools will suffice (GMax, <a href=\"/Legacy:MeshMaker\" title=\"Legacy:MeshMaker\"\
      >MeshMaker</a> etc)</li>\n<li>[0] an <a href=\"/Legacy:Open_Source\" title=\"\
      Legacy:Open Source\">open source</a> Unreal engine modeller might be a good\
      \ idea</li>\n</ol>\n<p><b>EntropicLqd:</b> Well, we know the answer now I guess\
      \ - I looked in my prefab directory and it was empty. There's a rant coming\
      \ ... I can feel it.</p>\n<p><b>Mychaeel:</b> Try looking into the StaticMeshes\
      \ directory – it is not quite as empty. (And there are tons more static meshes\
      \ in the maps.)</p>\n<hr />\n<p><b>Mychaeel:</b> Although I'm a bit biased in\
      \ favor of <a href=\"/Legacy:MeshMaker\" title=\"Legacy:MeshMaker\">MeshMaker</a>,\
      \ it's main purpose of getting prefabs into maps as decorations becomes more\
      \ or less obsolete with the introduction of hardware brushes. I understand the\
      \ new UnrealEd has exactly MeshMaker's functionality built in for converting\
      \ regular brushes to hardware brushes. – What I don't know is whether hardware\
      \ brushes are <i>necessarily</i> added to the <a href=\"/Legacy:BSP\" title=\"\
      Legacy:BSP\">BSP</a> for collision checking or just <i>optionally</i>; same\
      \ for raytraced lighting. If those two features (BSP and raytraced lighting)\
      \ which come at an expense are mandatory for hardware brushes, there might even\
      \ be a place left for MeshMaker in U2 and UT2003 mapping.</p>\n<p><b>Tarquin:</b>\
      \ I didn't know UEd will be able to convert BSP brushes to hardware. The general\
      \ rumblings on the forums are that unless you have Max, you're stuck with the\
      \ HW brushes that Epic will deliver. Many mappers feel that this will make for\
      \ custom maps which are just permutations of existing architecture. At the same\
      \ time, I'm hitting the buffers with my <a href=\"/Legacy:BrushBuilder\" title=\"\
      Legacy:BrushBuilder\">BrushBuilders</a>. There's things I <i>could</i> do, but\
      \ the parameter list for a builder is longer than the box, has long arrays,\
      \ and various hacky workarounds such as parameters doing different things in\
      \ different circumstances. I could do a lot more with a more flexible interface.</p>\n\
      <p><b>Mychaeel:</b> Maybe that's where an external program, putting the brush\
      \ definition in .t3d format into the clipboard, could come in... that'd be much\
      \ more flexible than UnrealEd's class property interface while still being way\
      \ less complex to code and to use than a 3D modelling application.</p>\n<dl>\n\
      <dd><b>Tarquin:</b> I think I once saw an app that loaded &amp; displayed a\
      \ saved brush. I remember a single window app which just loaded a brush &amp;\
      \ allowed you to rotate it. There's <a href=\"/Legacy:UTToolkit\" title=\"Legacy:UTToolkit\"\
      >UTToolkit</a> which looks advanced.</dd>\n</dl>\n<p><b>Mychaeel:</b> By the\
      \ way, in response to the last votable option, I had the idea of trying to analyze\
      \ GMax's native file format in order to create a converter for it a while ago.\
      \ As far as I see not even GMax's license objects to that – the license for\
      \ the game developer edition of GMax (with which you can create \"game packs\"\
      ) is <i>way</i> more restrictive there, up to the point that game packs aren't\
      \ allowed to make GMax export file formats that could be considered \"industry\
      \ standard.\"</p>\n<p><b>Bean:</b> From what I have gathered by snooping and\
      \ generally trying to pay attention to developers (which is tough to follow\
      \ sometimes&#160;:) ), you can covert between BSP and HW Brushes in the editor,\
      \ but it turns out bad half the time. Also, you kinda need an external modelling\
      \ program to make decent looking prefabs. It's easier to make things in 3ds\
      \ max than UnrealED geometry-wise. Also, the HW brushes DO use BSP for their\
      \ per-poly collision detection. Also, the light drawn on to the HW brushes I\
      \ believe is vertex, but the light can be pre-lit in 3ds max so shadows can\
      \ be raytraced on HW brushes for an overall more pleasing look. As for the prefabs\
      \ shipping with UT2003, there will be TONS of them. But most mappers will definately\
      \ make their own (like me.)</p>\n<p><b>Mychaeel:</b> My point was: Are hardware\
      \ brushes <i>required</i> to use per-poly collision (and thus be part of the\
      \ BSP tree)? Or is it also possible to have hardware brushes with the usual\
      \ collision cylinder, or without collision at all?</p>\n<p><b>Bean:</b> Quoted\
      \ from build 633 release notes:</p>\n<blockquote class=\"legacyquote\">\n<p>BSP\
      \ trees are now used for collision with static meshes. This results in a delay\
      \ as the BSP is built when you add a static mesh. It also means static meshes\
      \ <b>can</b> have per-polygon collision. Since a BSP is used for collision,\
      \ collision is vulnerable to BSP errors.</p>\n</blockquote>\n<p>Hmmm...&#160;:)</p>\n\
      <p><b>Tarquin:</b> BSP holes in meshes... euwww...!</p>\n<p><b>Mychaeel:</b>\
      \ Bean, I know that quote, but it still leaves me uncertain about what I asked.\
      \ The first sentence sounds as if BSP trees are now used for collision with\
      \ static meshes <i>in any case</i> (nothing in that sentence points to that\
      \ it's an optional feature). That \"can\" in the third sentence doesn't mean\
      \ at all that there are other options like a collision cylinder as well. – But\
      \ that's all far beyond my point. What I'm actually interested in is: Are static\
      \ meshes suited (and supposed) to replace decorations in the new engine?</p>\n\
      <p><b>Bean:</b> Yes, hardware brushes are meant for deco and architecture. ive\
      \ seen many screens of in-editor for U2 and UT2003, and all that BSP (from what\
      \ ive seen) is used for is to subtract large spaces for terrain and to subtract\
      \ rooms out for in-door areas. Static meshes are used for the rest.</p>\n<p><b>Mychaeel:</b>\
      \ What is the difference between \"static mesh\" and \"hardware brush\"? (I\
      \ thought those terms would be used interchangably.)</p>\n<p><b>Bean:</b> as\
      \ far as i know, no difference. i just inadvertantly used both in my above reply.</p>\n\
      <p><b>Mychaeel:</b> Well, as we know now, it's possible that Maya PLE will be\
      \ bundled with the game, and static mesh collision hulls can have arbitrary\
      \ complexity (as opposed to being bound to the mesh's actual poly complexity),\
      \ so the statement about BSP errors may be true, but isn't as problematic as\
      \ it may sound.</p>\n<hr />\n<p><b>Mychaeel:</b> Hehehe. &#160;:) Anybody up\
      \ for creating new paragraph markup for automated polls? Like having live counters,\
      \ radio buttons and a \"Vote!\" button? Shouldn't be so hard to implement...</p>\n\
      <p><b>Tarquin:</b> awwww.... it's more fun this way.&#160;:-D</p>\n<p><b>EntropicLqd:</b>\
      \ So what's the distinction between a \"static mesh\" and a \"prefab\"? As far\
      \ as I can tell, a static mesh would typically be used in game as an object\
      \ the player can interact with (player models, weapons, ammo, vehicles and the\
      \ like), and a prefab would be part of the level the player doesn't interact\
      \ with (walls and floors for example). However, they both appear to be sourced\
      \ in exactly the same way - so maybe the distinction is one of logical categorisation\
      \ - and a decision on import into UT.</p>\n<p><b>Mychaeel:</b> No. Static meshes\
      \ are, like the name says, static (as in \"can't be animated\" – that'd defeat\
      \ their main point of being one static set of vertex information in the video\
      \ card's memory), so they can't be used for player models and the like. The\
      \ closest equivalent to a static mesh is indeed a prefab in Unreal Tournament.</p>\n\
      <p><b>EntropicLqd:</b> In one of the screenshots/videos featuring the editor\
      \ I've seen, Meshes, Prefabs and static meshes all have separate tabs in the\
      \ object viewer thingy (ooh techie terms).</p>\n<p><b>Wormbo:</b> The meshes\
      \ are the same kind of meshes like the ones in UT. (used for weapons, etc.)\
      \ Prefabs are also the same like in UT. (brushes built in the editor) Just the\
      \ static meshes are new. (they are meshes, but are used like prefabs, that's\
      \ how I understood it)</p>\n<p><b>Mychaeel:</b> They are <i>used</i> like decorations\
      \ in Unreal Tournament. Technically, they're more like prefabs in that they're\
      \ non-animated (and they can be created from actual prefabs even though it's\
      \ discouraged), and like models in how they're usually created.</p>\n<p><b>EntropicLqd:</b>\
      \ Right then .. lets see if I understand what's going on. Ultimately, a <i>mesh</i>,\
      \ and a <i>static mesh</i> are the same thing. However, a <i>static mesh</i>\
      \ cannot be animated (or form part of an animation chain) or deformed dynamically\
      \ in any way whatsoever. So, the CTF flag would be a <i>mesh</i>, and a box\
      \ of flak shells (assuming it doesn't move) would be a <i>static mesh</i>. However\
      \ I've heard that static meshes are also used for ledges, walls, sky boxes,\
      \ and whole pieces of geometry in the level - so the use of meshes has pretty\
      \ much replaced the brush work required in UT. So where do prefabs fit in then?\
      \ I've never knowingly used any prefabs in UT so I've got no real reference\
      \ point. However, given the previous comments about static meshes, is the prefab\
      \ system simply a mechanism for building up libraries of static meshes? In which\
      \ case, there would be no difference between a static mesh and a prefab except\
      \ the directory it's contained within. Possibly static meshes are part of the\
      \ level data, but prefabs would be available to all levels (like putting textures\
      \ in their own package or using MyLevel package). Am I close? I didn't get muc\
      \ sleep last night (eldest was somewhat sick) and this is starting to make my\
      \ head hurt.</p>\n<p><b>Mychaeel:</b> I suppose ammo packs are still regular\
      \ meshes with a normal actor collision cylinder. – From a technical point of\
      \ view, meshes and static meshes are quite different. The main purpose of static\
      \ meshes is level for furnishing levels, and they're also used for movers now.\
      \ The term \"prefab\" is occasionally used interchangably with \"static mesh\"\
      \ for the new Unreal engine versions, but the \"old\" notion of a prefab (a\
      \ saved builder brush) is still available too.</p>\n<hr />\n<p><a href=\"/Category:Legacy_Mapping\"\
      \ title=\"Category:Legacy Mapping\">Category:Legacy Mapping</a><br />\n<a href=\"\
      /Category:Legacy_To_Do\" title=\"Category:Legacy To Do\">Category:Legacy To\
      \ Do</a> – merge into <a href=\"/Legacy:Static_Mesh\" title=\"Legacy:Static\
      \ Mesh\">Static Mesh</a> or delete</p>\n\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.044 seconds\nReal time usage: 0.046 seconds\nPreprocessor visited\
      \ node count: 15/1000000\nPreprocessor generated node count: 79/1000000\nPost‐\
      expand include size: 668/2097152 bytes\nTemplate argument size: 272/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    4.643      1 - -total\n100.00%    4.643      1 - Template:Innerbox\n-->\n\
      \n<!-- Saved in parser cache with key wiki:pcache:idhash:1391-0!*!0!*!*!*!*\
      \ and timestamp 20221118015400 and revision id 3522\n -->\n"
  categories:
  - sortkey: "Hardware Brush"
    name: "Legacy_Mapping"
  - sortkey: "Hardware Brush"
    name: "Legacy_To_Do"
  links:
  - ns: 100
    exists: true
    name: "Legacy:BSP"
  - ns: 100
    exists: true
    name: "Legacy:UT2003"
  - ns: 100
    exists: true
    name: "Legacy:UTToolkit"
  - ns: 100
    exists: true
    name: "Legacy:MeshMaker"
  - ns: 14
    exists: true
    name: "Category:Legacy Mapping"
  - ns: 100
    exists: true
    name: "Legacy:Static Mesh"
  - ns: 100
    exists: true
    name: "Legacy:Karma"
  - ns: 100
    exists: true
    name: "Legacy:BrushBuilder"
  - ns: 100
    exists: true
    name: "Legacy:Building With Static Meshes"
  - ns: 100
    exists: true
    name: "Legacy:Maya"
  - ns: 14
    exists: true
    name: "Category:Legacy To Do"
  - ns: 100
    exists: true
    name: "Legacy:3D Studio Max"
  - ns: 0
    exists: false
    name: "UT2003:antiportal"
  - ns: 100
    exists: true
    name: "Legacy:Open Source"
  templates:
  - ns: 10
    exists: true
    name: "Template:Innerbox"
  images: []
  externallinks:
  - "http://c2.com/cgi/wiki?HowToVote"
  - "http://c2.com/cgi/wiki?WikiGreatFoobarLists"
  sections:
  - toclevel: 1
    level: "3"
    line: "What are Hardware Brushes?"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Hardware_Brush"
    byteoffset: 136
    anchor: "What_are_Hardware_Brushes.3F"
  displaytitle: "Legacy:Hardware Brush"
  iwlinks: []
  wikitext:
    text: "This page is largely obsolete discussion & speculation from pre-[[Legacy:UT2003|UT2003]]\
      \ days. See [[Legacy:Static Mesh|static mesh]].\n\n===What are Hardware Brushes?\
      \ ===\n\nHardware Brushes (or \"Static Meshes\" as they will be called from\
      \ here on), are just as they are called, meshes. These are how the Unreal Engine\
      \ can push the insane polygon counts this time around, because these meshes\
      \ utilize your video card's T+L unit. They are created in an external 3D modelling\
      \ program, such as [[Legacy:3D Studio Max|3D Studio Max]] or [[Legacy:Maya|Maya]],\
      \ textured, then imported into UnrealEd using the ASE file format. [[Legacy:BSP|BSP]]\
      \ is still used for base construction of a map, but the Static Meshes should\
      \ be used for decorations and much of the architecture.\n\nStatic meshes have\
      \ a collision hull that's separate from their visual appearance.  That collision\
      \ hull can be either imported along with the mesh from the modelling program\
      \ (as an object with a special name prefix), or automatically generated in UnrealEd\
      \ (as a convex object with a definable complexity).  Of course, the mesh itself\
      \ can be defined to be its collision hull, which results in per-poly collision.\n\
      \nSome other thing to note:\n* Static Meshes can be rotated and scaled among\
      \ X, Y, and Z\n* Movers are now static meshes, not brushes.\n* Static meshes\
      \ can be converted to brushes and vice versa in UnrealEd.\n* Static Meshes use\
      \ vertex lighting. To use lightmaps on static meshes, they must be \"baked\"\
      \ onto the mesh's textures using a 3D program.\n* Static Meshes don't occlude;\
      \ you have to use [[UT2003:antiportal]]s for that.  (For that matter, BSP doesn't\
      \ automatically occlude either anymore.)\n\nAnother great thing about static\
      \ meshes are that they can be set up with [[Legacy:Karma|Karma]] courtesy of\
      \ MathEngine. For example, you can set up a lamp mesh that hangs from the ceiling\
      \ (via chain) using Karma. Upon being shot, it with swing and spin realistically.\
      \ The possibilities can be endless with Karma physics.\n\nSee also:  [[Legacy:Building\
      \ With Static Meshes|Building With Static Meshes]]\n\n----\n\nSo what exactly\
      \ is gonna be the deal with hardware brushes? Here's a [http://c2.com/cgi/wiki?HowToVote\
      \ Wiki poll]... to vote, edit this page and increment your choice's count by\
      \ 1. BTW, feel free to add options if you think they're required.\n\n(the alternative,\
      \ BTW is a [http://c2.com/cgi/wiki?WikiGreatFoobarLists Wiki multiple vote]\
      \ &ndash; harder to read though)\n\n# [2] bah, UT2 will ship with tons of groovy\
      \ hardware prefabs. We'll have hours of endless amusement working with those,\
      \ just as we were happy with UT's built-in textures for a long time.\n# [0]\
      \ a minority of uber-l33t modellers will create new prefabs for the community\
      \ to use. That will be enough to add to the creative mix.\n# [0] I intend to\
      \ or already have a version of Max which dropped off the back of a lorry, honest\
      \ guv '''OR''' I am a professional or rich and I have a legal copy (note: 5th\
      \ amendment to the US constitution is deemed to apply internationally here :))\n\
      # [1] Existing cheap or free tools will suffice (GMax, [[Legacy:MeshMaker|MeshMaker]]\
      \ etc)\n# [0] an [[Legacy:Open Source|open source]] Unreal engine modeller might\
      \ be a good idea\n\n'''EntropicLqd:''' Well, we know the answer now I guess\
      \ - I looked in my prefab directory and it was empty.  There's a rant coming\
      \ ... I can feel it.\n\n'''Mychaeel:''' Try looking into the StaticMeshes directory\
      \ &ndash; it is not quite as empty.  (And there are tons more static meshes\
      \ in the maps.)\n\n----\n\n'''Mychaeel:'''  Although I'm a bit biased in favor\
      \ of [[Legacy:MeshMaker|MeshMaker]], it's main purpose of getting prefabs into\
      \ maps as decorations becomes more or less obsolete with the introduction of\
      \ hardware brushes.  I understand the new UnrealEd has exactly MeshMaker's functionality\
      \ built in for converting regular brushes to hardware brushes. &ndash; What\
      \ I don't know is whether hardware brushes are ''necessarily'' added to the\
      \ [[Legacy:BSP|BSP]] for collision checking or just ''optionally''; same for\
      \ raytraced lighting.  If those two features (BSP and raytraced lighting) which\
      \ come at an expense are mandatory for hardware brushes, there might even be\
      \ a place left for MeshMaker in U2 and UT2003 mapping.\n\n'''Tarquin:'''  I\
      \ didn't know UEd will be able to convert BSP brushes to hardware. The general\
      \ rumblings on the forums are that unless you have Max, you're stuck with the\
      \ HW brushes that Epic will deliver. Many mappers feel that this will make for\
      \ custom maps which are just permutations of existing architecture. At the same\
      \ time, I'm hitting the buffers with my [[Legacy:BrushBuilder|BrushBuilder]]s.\
      \ There's things I ''could'' do, but the parameter list for a builder is longer\
      \ than the box, has long arrays, and various hacky workarounds such as parameters\
      \ doing different things in different circumstances. I could do a lot more with\
      \ a more flexible interface. \n\n'''Mychaeel:'''  Maybe that's where an external\
      \ program, putting the brush definition in .t3d format into the clipboard, could\
      \ come in... that'd be much more flexible than UnrealEd's class property interface\
      \ while still being way less complex to code and to use than a 3D modelling\
      \ application.\n\n:'''Tarquin:'''  I think I once saw an app that loaded & displayed\
      \ a saved brush. I remember a single window app which just loaded a brush &\
      \ allowed you to rotate it. There's [[Legacy:UTToolkit|UTToolkit]] which looks\
      \ advanced.\n\n'''Mychaeel:'''  By the way, in response to the last votable\
      \ option, I had the idea of trying to analyze GMax's native file format in order\
      \ to create a converter for it a while ago.  As far as I see not even GMax's\
      \ license objects to that &ndash; the license for the game developer edition\
      \ of GMax (with which you can create \"game packs\") is ''way'' more restrictive\
      \ there, up to the point that game packs aren't allowed to make GMax export\
      \ file formats that could be considered \"industry standard.\"\n\n'''Bean:'''\
      \ From what I have gathered by snooping and generally trying to pay attention\
      \ to developers (which is tough to follow sometimes :) ), you can covert between\
      \ BSP and HW Brushes in the editor, but it turns out bad half the time. Also,\
      \ you kinda need an external modelling program to make decent looking prefabs.\
      \ It's easier to make things in 3ds max than UnrealED geometry-wise. Also, the\
      \ HW brushes DO use BSP for their per-poly collision detection. Also, the light\
      \ drawn on to the HW brushes I believe is vertex, but the light can be pre-lit\
      \ in 3ds max so shadows can be raytraced on HW brushes for an overall more pleasing\
      \ look. As for the prefabs shipping with UT2003, there will be TONS of them.\
      \ But most mappers will definately make their own (like me.)\n\n'''Mychaeel:'''\
      \  My point was:  Are hardware brushes ''required'' to use per-poly collision\
      \ (and thus be part of the BSP tree)?  Or is it also possible to have hardware\
      \ brushes with the usual collision cylinder, or without collision at all?\n\n\
      '''Bean:''' Quoted from build 633 release notes:\n\n{{innerbox| BSP trees are\
      \ now used for collision with static meshes.  This results in a delay as the\
      \ BSP is built when you add a static mesh. It also means static meshes '''can'''\
      \ have per-polygon collision. Since a BSP is used for collision, collision is\
      \ vulnerable to BSP errors.\n\n}}\n\nHmmm... :)\n\n'''Tarquin:'''  BSP holes\
      \ in meshes... euwww...!\n\n'''Mychaeel:'''  Bean, I know that quote, but it\
      \ still leaves me uncertain about what I asked.  The first sentence sounds as\
      \ if BSP trees are now used for collision with static meshes ''in any case''\
      \ (nothing in that sentence points to that it's an optional feature).  That\
      \ \"can\" in the third sentence doesn't mean at all that there are other options\
      \ like a collision cylinder as well. &ndash; But that's all far beyond my point.\
      \  What I'm actually interested in is:  Are static meshes suited (and supposed)\
      \ to replace decorations in the new engine?\n\n'''Bean:''' Yes, hardware brushes\
      \ are meant for deco and architecture. ive seen many screens of in-editor for\
      \ U2 and UT2003, and all that BSP (from what ive seen) is used for is to subtract\
      \ large spaces for terrain and to subtract rooms out for in-door areas. Static\
      \ meshes are used for the rest.\n\n'''Mychaeel:'''  What is the difference between\
      \ \"static mesh\" and \"hardware brush\"?  (I thought those terms would be used\
      \ interchangably.)\n\n'''Bean:''' as far as i know, no difference. i just inadvertantly\
      \ used both in my above reply.\n\n'''Mychaeel:'''  Well, as we know now, it's\
      \ possible that Maya PLE will be bundled with the game, and static mesh collision\
      \ hulls can have arbitrary complexity (as opposed to being bound to the mesh's\
      \ actual poly complexity), so the statement about BSP errors may be true, but\
      \ isn't as problematic as it may sound.\n\n----\n\n'''Mychaeel:'''  Hehehe.\
      \  :)  Anybody up for creating new paragraph markup for automated polls?  Like\
      \ having live counters, radio buttons and a \"Vote!\" button?  Shouldn't be\
      \ so hard to implement...\n\n'''Tarquin:'''  awwww.... it's more fun this way.\
      \ :-D\n\n'''EntropicLqd:'''  So what's the distinction between a \"static mesh\"\
      \ and a \"prefab\"?  As far as I can tell, a static mesh would typically be\
      \ used in game as an object the player can interact with (player models, weapons,\
      \ ammo, vehicles and the like), and a prefab would be part of the level the\
      \ player doesn't interact with (walls and floors for example).  However, they\
      \ both appear to be sourced in exactly the same way - so maybe the distinction\
      \ is one of logical categorisation - and a decision on import into UT.\n\n'''Mychaeel:'''\
      \ No. Static meshes are, like the name says, static (as in \"can't be animated\"\
      \ &ndash; that'd defeat their main point of being one static set of vertex information\
      \ in the video card's memory), so they can't be used for player models and the\
      \ like.  The closest equivalent to a static mesh is indeed a prefab in Unreal\
      \ Tournament.\n\n'''EntropicLqd:''' In one of the screenshots/videos featuring\
      \ the editor I've seen, Meshes, Prefabs and static meshes all have separate\
      \ tabs in the object viewer thingy (ooh techie terms).\n\n'''Wormbo:''' The\
      \ meshes are the same kind of meshes like the ones in UT. (used for weapons,\
      \ etc.) Prefabs are also the same like in UT. (brushes built in the editor)\
      \ Just the static meshes are new. (they are meshes, but are used like prefabs,\
      \ that's how I understood it)\n\n'''Mychaeel:''' They are ''used'' like decorations\
      \ in Unreal Tournament.  Technically, they're more like prefabs in that they're\
      \ non-animated (and they can be created from actual prefabs even though it's\
      \ discouraged), and like models in how they're usually created.\n\n'''EntropicLqd:'''\
      \  Right then .. lets see if I understand what's going on.  Ultimately, a ''mesh'',\
      \ and a ''static mesh'' are the same thing.  However, a ''static mesh'' cannot\
      \ be animated (or form part of an animation chain) or deformed dynamically in\
      \ any way whatsoever.  So, the CTF flag would be a ''mesh'', and a box of flak\
      \ shells (assuming it doesn't move) would be a ''static mesh''.  However I've\
      \ heard that static meshes are also used for ledges, walls, sky boxes, and whole\
      \ pieces of geometry in the level - so the use of meshes has pretty much replaced\
      \ the brush work required in UT.  So where do prefabs fit in then?  I've never\
      \ knowingly used any prefabs in UT so I've got no real reference point.  However,\
      \ given the previous comments about static meshes, is the prefab system simply\
      \ a mechanism for building up libraries of static meshes?  In which case, there\
      \ would be no difference between a static mesh and a prefab except the directory\
      \ it's contained within.  Possibly static meshes are part of the level data,\
      \ but prefabs would be available to all levels (like putting textures in their\
      \ own package or using MyLevel package).  Am I close?  I didn't get muc sleep\
      \ last night (eldest was somewhat sick) and this is starting to make my head\
      \ hurt.\n\n'''Mychaeel:''' I suppose ammo packs are still regular meshes with\
      \ a normal actor collision cylinder. &ndash; From a technical point of view,\
      \ meshes and static meshes are quite different.  The main purpose of static\
      \ meshes is level for furnishing levels, and they're also used for movers now.\
      \  The term \"prefab\" is occasionally used interchangably with \"static mesh\"\
      \ for the new Unreal engine versions, but the \"old\" notion of a prefab (a\
      \ saved builder brush) is still available too.\n\n----\n\n[[:Category:Legacy\
      \ Mapping]] <br />[[:Category:Legacy To Do]] &ndash; merge into [[Legacy:Static\
      \ Mesh|Static Mesh]] or delete\n[[Category:Legacy Mapping|{{PAGENAME}}]]\n[[Category:Legacy\
      \ To Do|{{PAGENAME}}]]"
  properties: []
  revId: 3522
name: "Legacy:Hardware Brush"
revision:
  revid: 3522
  parentid: 3524
  user: "Inet-netcache2-o.oracle.com"
  timestamp: 1056049530.000000000
  comment: "Spelling changes"
timestamp: 1668762156.991246000
