---
parse:
  title: "Legacy:Emacs"
  text:
    text: "<p>Emacs can do everything. Check out shell-mode or compile-mode for compiling\
      \ unrealscript, and launching unreal.</p>\n<p>Here is the source of unrealscript-mode.\
      \ Suggestions, bug reports, etc, welcome,</p>\n<pre>\n(defvar unrealscript-mode-hook\
      \ nil)\n\n(defvar unrealscript-mode-map\n  (let ((unrealscript-mode-map (make-sparse-keymap)))\n\
      \        (define-key unrealscript-mode-map \"\\C-j\" 'newline-and-indent)\n\
      \        unrealscript-mode-map)\n  \"Keymap for UNREALSCRIPT major mode\")\n\
      \n\n(defconst unrealscript-font-lock-keywords-1\n  (list\n   '(\"\\\\&lt;\\\\\
      (?:break\\\\|c\\\\(?:\\\\(?:as\\\\|ontinu\\\\)e\\\\)\\\\|do\\\\|e\\\\(?:lse\\\
      \\|xtends\\\\)\\\\|for\\\\(?:each\\\\)?\\\\|i\\\\(?:f\\\\|nterface\\\\)\\\\\
      |new\\\\|return\\\\|switch\\\\|var\\\\|while\\\\|class\\\\)\\\\&gt;\" . font-lock-keyword-face))\n\
      \  \"Minimal highlighting expressions for UNREALSCRIPT mode.\")\n\n(defconst\
      \ unrealscript-font-lock-keywords-2\n  (append unrealscript-font-lock-keywords-1\n\
      \                  (list\n                   '(\"\\\\&lt;\\\\(?:array\\\\|b\\\
      \\(?:ool\\\\|yte\\\\)\\\\|c\\\\(?:lass\\\\|o\\\\(?:erce\\\\|lor\\\\|ords\\\\\
      )\\\\)\\\\|de\\\\(?:faultproperties\\\\|legate\\\\)\\\\|e\\\\(?:num\\\\|vent\\\
      \\)\\\\|f\\\\(?:alse\\\\|loat\\\\|unction\\\\)\\\\|int\\\\|local\\\\|name\\\\\
      |o\\\\(?:ptional\\\\|ut\\\\)\\\\|plane\\\\|r\\\\(?:egion\\\\|otator\\\\)\\\\\
      |st\\\\(?:ate\\\\|r\\\\(?:ing\\\\|uct\\\\)\\\\)\\\\|true\\\\|v\\\\(?:\\\\(?:a\\\
      \\|ecto\\\\)r\\\\)\\\\)\\\\&gt;\" . font-lock-keyword-face)))\n  \"Additional\
      \ Keywords to highlight in UNREALSCRIPT mode.\")\n\n\n(defconst unrealscript-font-lock-keywords-3\n\
      \  (append unrealscript-font-lock-keywords-2\n                  (list\n    \
      \               '(\"\\\\&lt;\\\\(?:A\\\\(?:bstract\\\\|llowAbstract\\\\|uto\\\
      \\(?:Comment\\\\|ExpandCategories\\\\)\\\\)\\\\|Co\\\\(?:llapseCategories\\\\\
      |nfig\\\\)\\\\|D\\\\(?:ep\\\\(?:endsOn\\\\|recated\\\\)\\\\|isplayName\\\\|ontCollapseCategories\\\
      \\)\\\\|Edit\\\\(?:Condition\\\\|InlineNew\\\\)\\\\|FriendlyName\\\\|Hide\\\\\
      (?:Categories\\\\|DropDown\\\\)\\\\|I\\\\(?:\\\\(?:mplemen\\\\|nheri\\\\)ts\\\
      \\)\\\\|N\\\\(?:ative\\\\(?:Replication\\\\)?\\\\|o\\\\(?:Export\\\\|nTransient\\\
      \\|t\\\\(?:EditInlineNew\\\\|Placeable\\\\)\\\\)\\\\)\\\\|P\\\\(?:erObject\\\
      \\(?:Config\\\\|Localized\\\\)\\\\|laceable\\\\)\\\\|ShowCategories\\\\|T\\\\\
      (?:oolTip\\\\|ransient\\\\)\\\\|Within\\\\)\\\\&gt;\" . font-lock-type-face)\n\
      \                   '(\"\\\\&lt;\\\\(?:auto\\\\|c\\\\(?:lient\\\\|on\\\\(?:fig\\\
      \\|st\\\\)\\\\)\\\\|d\\\\(?:atabinding\\\\|eprecated\\\\|uplicatetransient\\\
      \\)\\\\|e\\\\(?:dit\\\\(?:const\\\\|fixedsize\\\\|inline\\\\(?:use\\\\)?\\\\\
      |oronly\\\\)\\\\|x\\\\(?:ec\\\\|port\\\\)\\\\)\\\\|globalconfig\\\\|i\\\\(?:gnores\\\
      \\|n\\\\(?:it\\\\|put\\\\|stanced\\\\|terp\\\\)\\\\|terator\\\\)\\\\|l\\\\(?:atent\\\
      \\|ocalized\\\\)\\\\|n\\\\(?:ative\\\\(?:replication\\\\)?\\\\|o\\\\(?:clear\\\
      \\|export\\\\|import\\\\|ntransactional\\\\|tforconsole\\\\)\\\\)\\\\|operator\\\
      \\|p\\\\(?:o\\\\(?:\\\\(?:inte\\\\|stoperato\\\\)r\\\\)\\\\|r\\\\(?:eoperator\\\
      \\|ivate\\\\|otected\\\\)\\\\|ublic\\\\)\\\\|re\\\\(?:liable\\\\|pnotify\\\\\
      )\\\\|s\\\\(?:erver\\\\|i\\\\(?:mulated\\\\|ngular\\\\)\\\\|kip\\\\|tatic\\\\\
      )\\\\|tra\\\\(?:nsient\\\\|vel\\\\)\\\\|unreliable\\\\)\\\\&gt;\" . font-lock-keyword-face)\n\
      \                   '(\"\\\\&lt;\\\\(?:A\\\\(?:bs\\\\|cos\\\\|dd\\\\(?:Item\\\
      \\)?\\\\|llActors\\\\|s\\\\(?:c\\\\|in\\\\)\\\\|tan\\\\)\\\\|B\\\\(?:asedActors\\\
      \\|egin\\\\(?:Play\\\\|State\\\\)\\\\)\\\\|C\\\\(?:aps\\\\|eil\\\\|h\\\\(?:ildActors\\\
      \\|r\\\\)\\\\|l\\\\(?:amp\\\\|earTimer\\\\)\\\\|o\\\\(?:\\\\(?:llidingActor\\\
      \\)?s\\\\)\\\\)\\\\|D\\\\(?:estroyed\\\\|i\\\\(?:\\\\(?:sabl\\\\|vid\\\\)e\\\
      \\)\\\\|ynamicActors\\\\)\\\\|E\\\\(?:mpty\\\\|n\\\\(?:\\\\(?:abl\\\\|dStat\\\
      \\)e\\\\)\\\\|val\\\\|xp\\\\)\\\\|F\\\\(?:Clamp\\\\|M\\\\(?:ax\\\\|in\\\\)\\\
      \\|Rand\\\\|astTrace\\\\|in\\\\(?:d\\\\|ish\\\\(?:Anim\\\\|Interpolation\\\\\
      )\\\\)\\\\)\\\\|G\\\\(?:etTimer\\\\(?:Count\\\\|Rate\\\\)\\\\|oTo\\\\(?:State\\\
      \\)?\\\\)\\\\|I\\\\(?:n\\\\(?:Str\\\\|itGame\\\\|sert\\\\(?:Item\\\\)?\\\\|vert\\\
      \\)\\\\|s\\\\(?:\\\\(?:InStat\\\\|TimerActiv\\\\)e\\\\)\\\\)\\\\|L\\\\(?:e\\\
      \\(?:ft\\\\|n\\\\|rp\\\\)\\\\|o\\\\(?:cs\\\\|ge\\\\)\\\\)\\\\|M\\\\(?:ax\\\\\
      |i\\\\(?:rrorVectorByNormal\\\\|[dn]\\\\)\\\\)\\\\|Normal\\\\|OverlappingActors\\\
      \\|P\\\\(?:o\\\\(?:pState\\\\|stBeginPlay\\\\)\\\\|reBeginPlay\\\\|ushState\\\
      \\)\\\\|R\\\\(?:and\\\\|e\\\\(?:move\\\\(?:I\\\\(?:ndex\\\\|tem\\\\)\\\\)?\\\
      \\|pl\\\\(?:ace\\\\)?\\\\)\\\\|ight\\\\|ound\\\\)\\\\|S\\\\(?:et\\\\(?:State\\\
      \\|Timer\\\\)\\\\|in\\\\|leep\\\\|merp\\\\|p\\\\(?:awn\\\\|lit\\\\)\\\\|q\\\\\
      (?:rt\\\\|uare\\\\)\\\\)\\\\|T\\\\(?:an\\\\|ick\\\\|ouchingActors\\\\|race\\\
      \\(?:Actors\\\\)?\\\\)\\\\|V\\\\(?:Rand\\\\|Size\\\\|isible\\\\(?:\\\\(?:Colliding\\\
      \\)?Actors\\\\)\\\\)\\\\|\\\\(?:ro\\\\|vec\\\\)t\\\\)\\\\&gt;\" . font-lock-function-name-face)))\n\
      \  \"Balls-out highlighting in UNREALSCRIPT mode.\")\n\n(defvar unrealscript-font-lock-keywords\
      \ unrealscript-font-lock-keywords-3\n  \"Default highlighting expressions for\
      \ UNREALSCRIPT mode.\")\n\n\n(defvar unrealscript-indent-width 4)\n\n(defun\
      \ looking-at-unrealscript-indent-keyword ()\n  (or (looking-at \"^[\\t ]*while\"\
      ) (looking-at \"^[\\t ]*if\") (looking-at \"^[\\t ]*else\") (looking-at \"^[\\\
      t ]*for\")))\n\n(defun looking-at-unrealscript-block-end ()      \n  (or (looking-at\
      \ \"^[\\t ]*end\") (and (looking-at \"^.*}[ \\t]*$\") (not (looking-at \"^.*{\"\
      )))))\n\n(defun looking-at-unrealscript-block-start ()\n  (or (looking-at \"\
      ^[\\t ]*begin\") (and (looking-at \"^.*{\") (not (looking-at \"^.*}[ \\t]*$\"\
      )))))\n\n;; Function to control indenting.\n(defun unrealscript-indent-line\
      \ ()\n  \"Indent current line as Unrealscript code\"\n  (interactive)\n  ;;\
      \ Set the point to beginning of line.\n  (beginning-of-line)\n  (if (bobp)\n\
      \          (indent-line-to 0)\n        (let ((not-indented t) (lines-back 0)\
      \ cur-indent)\n          (if    (looking-at-unrealscript-block-end) ; Check\
      \ for closing brace\n                  ;; if we are at the end of a block\n\
      \                  (progn\n                        (save-excursion\n       \
      \                   (forward-line -1)\n                          (setq lines-back\
      \ (+ lines-back 1))\n                          (setq cur-indent (- (current-indentation)\
      \ unrealscript-indent-width)))\n                        ;; Safety check to make\
      \ sure we don't indent negative.\n                        (if (&lt; cur-indent\
      \ 0)\n                                (setq cur-indent 0)))\n              \
      \  ;; else scan backward \n                (save-excursion\n               \
      \   (if (looking-at-unrealscript-block-start) ; Opening block              \
      \            \n                          (progn\n                          \
      \      (forward-line -1)\n                                (setq lines-back (+\
      \ lines-back 1))\n                                (setq cur-indent (current-indentation))\n\
      \                                (setq not-indented nil))\n                \
      \        (while not-indented\n                          (forward-line -1)\n\
      \                          (setq lines-back (+ lines-back 1))\n            \
      \              (if (looking-at-unrealscript-block-end) ;; Closing Block\n  \
      \                                (progn\n                                  \
      \      (setq cur-indent (current-indentation))\n                           \
      \             (setq not-indented nil))\n                                (if\
      \ (looking-at-unrealscript-block-start)\n                                  \
      \      (progn\n                                          (setq cur-indent (+\
      \ (current-indentation) unrealscript-indent-width))\n                      \
      \                    (setq not-indented nil))\n                            \
      \      (if (looking-at-unrealscript-indent-keyword)\n                      \
      \                    (progn\n                                              \
      \  (setq cur-indent (current-indentation))\n                               \
      \                 (forward-line 1)\n                                       \
      \         (setq lines-back (- lines-back 1))\n                             \
      \                   (if (looking-at-unrealscript-block-start)\n            \
      \                                            (setq not-indented nil) ;; has\
      \ block\n                                                  (if (zerop lines-back)\
      \ ;; no block\n                                                          (progn\n\
      \                                                                (setq cur-indent\
      \ (+ cur-indent unrealscript-indent-width))                                \
      \               \n                                                         \
      \       (setq not-indented nil))\n                                         \
      \               (setq not-indented nil))))\n                               \
      \         (if (bobp)\n                                                (setq\
      \ not-indented nil)))))))))\n          (if cur-indent\n                  (indent-line-to\
      \ cur-indent)\n                (indent-line-to 0))))) \n\n(defun unrealscript-populate-syntax-table\
      \ (table)\n  \"Populate the given syntax table as necessary for a C-like language.\n\
      This includes setting ' and \\\" as string delimiters, and setting up\nthe comment\
      \ syntax to handle both line style \\\"//\\\" and block style\n\\\"/*\\\" \\\
      \"*/\\\" comments.\"\n\n  (modify-syntax-entry ?_   \"_\"     table)\n  (modify-syntax-entry\
      \ ?\\\\ \"\\\\\"     table)\n  (modify-syntax-entry ?+   \".\"     table)\n\
      \  (modify-syntax-entry ?-   \".\"     table)\n  (modify-syntax-entry ?=   \"\
      .\"     table)\n  (modify-syntax-entry ?%   \".\"     table)\n  (modify-syntax-entry\
      \ ?&lt;        \".\"     table)\n  (modify-syntax-entry ?&gt;        \".\" \
      \    table)\n  (modify-syntax-entry ?&amp;       \".\"     table)\n  (modify-syntax-entry\
      \ ?|   \".\"     table)\n  (modify-syntax-entry ?\\' \"\\\"\"        table)\n\
      \  (modify-syntax-entry ?\\240 \".\"  table)\n\n  ;; Set up block and line oriented\
      \ comments.       The new C\n  ;; standard mandates both comment styles even\
      \ in C, so since\n  ;; all languages now require dual comments, we make this\
      \ the\n  ;; default.\n  (modify-syntax-entry ?/   \". 124b\" table)\n  (modify-syntax-entry\
      \ ?*   \". 23\"       table)\n\n  (modify-syntax-entry ?\\n \"&gt; b\"     \
      \ table)\n  ;; Give CR the same syntax as newline, for selective-display\n \
      \ (modify-syntax-entry ?\\^m \"&gt; b\" table)\n  table)\n\n(defvar unrealscript-mode-syntax-table\n\
      \  (let ((unrealscript-mode-syntax-table (unrealscript-populate-syntax-table\
      \ (make-syntax-table))))\n        unrealscript-mode-syntax-table)\n  \"Syntax\
      \ table for unrealscript-mode\")\n\n(defun unrealscript-mode ()\n  \"Major mode\
      \ for editing Unrealscript files\"\n  (interactive)\n  (kill-all-local-variables)\n\
      \  (set-syntax-table unrealscript-mode-syntax-table)\n  (use-local-map unrealscript-mode-map)\n\
      \  (setq indent-line-function 'unrealscript-indent-line)\n  (setq font-lock-defaults\
      \ '(unrealscript-font-lock-keywords nil t))\n  (setq major-mode 'unrealscript-mode)\n\
      \  (setq mode-name \"UNREALSCRIPT\")\n  (run-hooks 'unrealscript-mode-hook)\n\
      \  (setq case-fold-search t)\n  (setq font-lock-keywords-case-fold-search t))\n\
      \n\n(provide 'unrealscript-mode)\n</pre>\n<!-- \nNewPP limit report\nCPU time\
      \ usage: 0.021 seconds\nReal time usage: 0.021 seconds\nPreprocessor visited\
      \ node count: 4/1000000\nPreprocessor generated node count: 24/1000000\nPost‐\
      expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\n\
      Highest expansion depth: 2/40\nExpensive parser function count: 0/100\n-->\n\
      \n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00% \
      \   0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:1213-0!*!*!*!*!*!*\
      \ and timestamp 20221118115713 and revision id 44150\n -->\n"
  categories: []
  links: []
  templates: []
  images: []
  externallinks: []
  sections: []
  displaytitle: "Legacy:Emacs"
  iwlinks: []
  wikitext:
    text: "Emacs can do everything. Check out shell-mode or compile-mode for compiling\
      \ unrealscript, and launching unreal.\n\nHere is the source of unrealscript-mode.\
      \ Suggestions, bug reports, etc, welcome,\n\n<pre>\n(defvar unrealscript-mode-hook\
      \ nil)\n\n(defvar unrealscript-mode-map\n  (let ((unrealscript-mode-map (make-sparse-keymap)))\n\
      \t(define-key unrealscript-mode-map \"\\C-j\" 'newline-and-indent)\n\tunrealscript-mode-map)\n\
      \  \"Keymap for UNREALSCRIPT major mode\")\n\n\n(defconst unrealscript-font-lock-keywords-1\n\
      \  (list\n   '(\"\\\\<\\\\(?:break\\\\|c\\\\(?:\\\\(?:as\\\\|ontinu\\\\)e\\\\\
      )\\\\|do\\\\|e\\\\(?:lse\\\\|xtends\\\\)\\\\|for\\\\(?:each\\\\)?\\\\|i\\\\\
      (?:f\\\\|nterface\\\\)\\\\|new\\\\|return\\\\|switch\\\\|var\\\\|while\\\\|class\\\
      \\)\\\\>\" . font-lock-keyword-face))\n  \"Minimal highlighting expressions\
      \ for UNREALSCRIPT mode.\")\n\n(defconst unrealscript-font-lock-keywords-2\n\
      \  (append unrealscript-font-lock-keywords-1\n\t\t  (list\n\t\t   '(\"\\\\<\\\
      \\(?:array\\\\|b\\\\(?:ool\\\\|yte\\\\)\\\\|c\\\\(?:lass\\\\|o\\\\(?:erce\\\\\
      |lor\\\\|ords\\\\)\\\\)\\\\|de\\\\(?:faultproperties\\\\|legate\\\\)\\\\|e\\\
      \\(?:num\\\\|vent\\\\)\\\\|f\\\\(?:alse\\\\|loat\\\\|unction\\\\)\\\\|int\\\\\
      |local\\\\|name\\\\|o\\\\(?:ptional\\\\|ut\\\\)\\\\|plane\\\\|r\\\\(?:egion\\\
      \\|otator\\\\)\\\\|st\\\\(?:ate\\\\|r\\\\(?:ing\\\\|uct\\\\)\\\\)\\\\|true\\\
      \\|v\\\\(?:\\\\(?:a\\\\|ecto\\\\)r\\\\)\\\\)\\\\>\" . font-lock-keyword-face)))\n\
      \  \"Additional Keywords to highlight in UNREALSCRIPT mode.\")\n\n\n(defconst\
      \ unrealscript-font-lock-keywords-3\n  (append unrealscript-font-lock-keywords-2\n\
      \t\t  (list\n\t\t   '(\"\\\\<\\\\(?:A\\\\(?:bstract\\\\|llowAbstract\\\\|uto\\\
      \\(?:Comment\\\\|ExpandCategories\\\\)\\\\)\\\\|Co\\\\(?:llapseCategories\\\\\
      |nfig\\\\)\\\\|D\\\\(?:ep\\\\(?:endsOn\\\\|recated\\\\)\\\\|isplayName\\\\|ontCollapseCategories\\\
      \\)\\\\|Edit\\\\(?:Condition\\\\|InlineNew\\\\)\\\\|FriendlyName\\\\|Hide\\\\\
      (?:Categories\\\\|DropDown\\\\)\\\\|I\\\\(?:\\\\(?:mplemen\\\\|nheri\\\\)ts\\\
      \\)\\\\|N\\\\(?:ative\\\\(?:Replication\\\\)?\\\\|o\\\\(?:Export\\\\|nTransient\\\
      \\|t\\\\(?:EditInlineNew\\\\|Placeable\\\\)\\\\)\\\\)\\\\|P\\\\(?:erObject\\\
      \\(?:Config\\\\|Localized\\\\)\\\\|laceable\\\\)\\\\|ShowCategories\\\\|T\\\\\
      (?:oolTip\\\\|ransient\\\\)\\\\|Within\\\\)\\\\>\" . font-lock-type-face)\n\t\
      \t   '(\"\\\\<\\\\(?:auto\\\\|c\\\\(?:lient\\\\|on\\\\(?:fig\\\\|st\\\\)\\\\\
      )\\\\|d\\\\(?:atabinding\\\\|eprecated\\\\|uplicatetransient\\\\)\\\\|e\\\\\
      (?:dit\\\\(?:const\\\\|fixedsize\\\\|inline\\\\(?:use\\\\)?\\\\|oronly\\\\)\\\
      \\|x\\\\(?:ec\\\\|port\\\\)\\\\)\\\\|globalconfig\\\\|i\\\\(?:gnores\\\\|n\\\
      \\(?:it\\\\|put\\\\|stanced\\\\|terp\\\\)\\\\|terator\\\\)\\\\|l\\\\(?:atent\\\
      \\|ocalized\\\\)\\\\|n\\\\(?:ative\\\\(?:replication\\\\)?\\\\|o\\\\(?:clear\\\
      \\|export\\\\|import\\\\|ntransactional\\\\|tforconsole\\\\)\\\\)\\\\|operator\\\
      \\|p\\\\(?:o\\\\(?:\\\\(?:inte\\\\|stoperato\\\\)r\\\\)\\\\|r\\\\(?:eoperator\\\
      \\|ivate\\\\|otected\\\\)\\\\|ublic\\\\)\\\\|re\\\\(?:liable\\\\|pnotify\\\\\
      )\\\\|s\\\\(?:erver\\\\|i\\\\(?:mulated\\\\|ngular\\\\)\\\\|kip\\\\|tatic\\\\\
      )\\\\|tra\\\\(?:nsient\\\\|vel\\\\)\\\\|unreliable\\\\)\\\\>\" . font-lock-keyword-face)\n\
      \t\t   '(\"\\\\<\\\\(?:A\\\\(?:bs\\\\|cos\\\\|dd\\\\(?:Item\\\\)?\\\\|llActors\\\
      \\|s\\\\(?:c\\\\|in\\\\)\\\\|tan\\\\)\\\\|B\\\\(?:asedActors\\\\|egin\\\\(?:Play\\\
      \\|State\\\\)\\\\)\\\\|C\\\\(?:aps\\\\|eil\\\\|h\\\\(?:ildActors\\\\|r\\\\)\\\
      \\|l\\\\(?:amp\\\\|earTimer\\\\)\\\\|o\\\\(?:\\\\(?:llidingActor\\\\)?s\\\\\
      )\\\\)\\\\|D\\\\(?:estroyed\\\\|i\\\\(?:\\\\(?:sabl\\\\|vid\\\\)e\\\\)\\\\|ynamicActors\\\
      \\)\\\\|E\\\\(?:mpty\\\\|n\\\\(?:\\\\(?:abl\\\\|dStat\\\\)e\\\\)\\\\|val\\\\\
      |xp\\\\)\\\\|F\\\\(?:Clamp\\\\|M\\\\(?:ax\\\\|in\\\\)\\\\|Rand\\\\|astTrace\\\
      \\|in\\\\(?:d\\\\|ish\\\\(?:Anim\\\\|Interpolation\\\\)\\\\)\\\\)\\\\|G\\\\\
      (?:etTimer\\\\(?:Count\\\\|Rate\\\\)\\\\|oTo\\\\(?:State\\\\)?\\\\)\\\\|I\\\\\
      (?:n\\\\(?:Str\\\\|itGame\\\\|sert\\\\(?:Item\\\\)?\\\\|vert\\\\)\\\\|s\\\\\
      (?:\\\\(?:InStat\\\\|TimerActiv\\\\)e\\\\)\\\\)\\\\|L\\\\(?:e\\\\(?:ft\\\\|n\\\
      \\|rp\\\\)\\\\|o\\\\(?:cs\\\\|ge\\\\)\\\\)\\\\|M\\\\(?:ax\\\\|i\\\\(?:rrorVectorByNormal\\\
      \\|[dn]\\\\)\\\\)\\\\|Normal\\\\|OverlappingActors\\\\|P\\\\(?:o\\\\(?:pState\\\
      \\|stBeginPlay\\\\)\\\\|reBeginPlay\\\\|ushState\\\\)\\\\|R\\\\(?:and\\\\|e\\\
      \\(?:move\\\\(?:I\\\\(?:ndex\\\\|tem\\\\)\\\\)?\\\\|pl\\\\(?:ace\\\\)?\\\\)\\\
      \\|ight\\\\|ound\\\\)\\\\|S\\\\(?:et\\\\(?:State\\\\|Timer\\\\)\\\\|in\\\\|leep\\\
      \\|merp\\\\|p\\\\(?:awn\\\\|lit\\\\)\\\\|q\\\\(?:rt\\\\|uare\\\\)\\\\)\\\\|T\\\
      \\(?:an\\\\|ick\\\\|ouchingActors\\\\|race\\\\(?:Actors\\\\)?\\\\)\\\\|V\\\\\
      (?:Rand\\\\|Size\\\\|isible\\\\(?:\\\\(?:Colliding\\\\)?Actors\\\\)\\\\)\\\\\
      |\\\\(?:ro\\\\|vec\\\\)t\\\\)\\\\>\" . font-lock-function-name-face)))\n  \"\
      Balls-out highlighting in UNREALSCRIPT mode.\")\n\n(defvar unrealscript-font-lock-keywords\
      \ unrealscript-font-lock-keywords-3\n  \"Default highlighting expressions for\
      \ UNREALSCRIPT mode.\")\n\n\n(defvar unrealscript-indent-width 4)\n\n(defun\
      \ looking-at-unrealscript-indent-keyword ()\n  (or (looking-at \"^[\\t ]*while\"\
      ) (looking-at \"^[\\t ]*if\") (looking-at \"^[\\t ]*else\") (looking-at \"^[\\\
      t ]*for\")))\n\n(defun looking-at-unrealscript-block-end ()\t \n  (or (looking-at\
      \ \"^[\\t ]*end\") (and (looking-at \"^.*}[ \\t]*$\") (not (looking-at \"^.*{\"\
      )))))\n\n(defun looking-at-unrealscript-block-start ()\n  (or (looking-at \"\
      ^[\\t ]*begin\") (and (looking-at \"^.*{\") (not (looking-at \"^.*}[ \\t]*$\"\
      )))))\n\n;; Function to control indenting.\n(defun unrealscript-indent-line\
      \ ()\n  \"Indent current line as Unrealscript code\"\n  (interactive)\n  ;;\
      \ Set the point to beginning of line.\n  (beginning-of-line)\n  (if (bobp)\n\
      \t  (indent-line-to 0)\n\t(let ((not-indented t) (lines-back 0) cur-indent)\n\
      \t  (if\t (looking-at-unrealscript-block-end) ; Check for closing brace\n\t\t\
      \  ;; if we are at the end of a block\n\t\t  (progn\n\t\t\t(save-excursion\n\
      \t\t\t  (forward-line -1)\n\t\t\t  (setq lines-back (+ lines-back 1))\n\t\t\t\
      \  (setq cur-indent (- (current-indentation) unrealscript-indent-width)))\n\t\
      \t\t;; Safety check to make sure we don't indent negative.\n\t\t\t(if (< cur-indent\
      \ 0)\n\t\t\t\t(setq cur-indent 0)))\n\t\t;; else scan backward \n\t\t(save-excursion\n\
      \t\t  (if (looking-at-unrealscript-block-start) ; Opening block\t\t\t  \n\t\t\
      \t  (progn\n\t\t\t\t(forward-line -1)\n\t\t\t\t(setq lines-back (+ lines-back\
      \ 1))\n\t\t\t\t(setq cur-indent (current-indentation))\n\t\t\t\t(setq not-indented\
      \ nil))\n\t\t\t(while not-indented\n\t\t\t  (forward-line -1)\n\t\t\t  (setq\
      \ lines-back (+ lines-back 1))\n\t\t\t  (if (looking-at-unrealscript-block-end)\
      \ ;; Closing Block\n\t\t\t\t  (progn\n\t\t\t\t\t(setq cur-indent (current-indentation))\n\
      \t\t\t\t\t(setq not-indented nil))\n\t\t\t\t(if (looking-at-unrealscript-block-start)\n\
      \t\t\t\t\t(progn\n\t\t\t\t\t  (setq cur-indent (+ (current-indentation) unrealscript-indent-width))\n\
      \t\t\t\t\t  (setq not-indented nil))\n\t\t\t\t  (if (looking-at-unrealscript-indent-keyword)\n\
      \t\t\t\t\t  (progn\n\t\t\t\t\t\t(setq cur-indent (current-indentation))\n\t\t\
      \t\t\t\t(forward-line 1)\n\t\t\t\t\t\t(setq lines-back (- lines-back 1))\n\t\
      \t\t\t\t\t(if (looking-at-unrealscript-block-start)\n\t\t\t\t\t\t\t(setq not-indented\
      \ nil) ;; has block\n\t\t\t\t\t\t  (if (zerop lines-back) ;; no block\n\t\t\t\
      \t\t\t\t  (progn\n\t\t\t\t\t\t\t\t(setq cur-indent (+ cur-indent unrealscript-indent-width))\t\
      \t\t\t\t\t \n\t\t\t\t\t\t\t\t(setq not-indented nil))\n\t\t\t\t\t\t\t(setq not-indented\
      \ nil))))\n\t\t\t\t\t(if (bobp)\n\t\t\t\t\t\t(setq not-indented nil)))))))))\n\
      \t  (if cur-indent\n\t\t  (indent-line-to cur-indent)\n\t\t(indent-line-to 0)))))\
      \ \n\n(defun unrealscript-populate-syntax-table (table)\n  \"Populate the given\
      \ syntax table as necessary for a C-like language.\nThis includes setting '\
      \ and \\\" as string delimiters, and setting up\nthe comment syntax to handle\
      \ both line style \\\"//\\\" and block style\n\\\"/*\\\" \\\"*/\\\" comments.\"\
      \n\n  (modify-syntax-entry ?_\t \"_\"\t   table)\n  (modify-syntax-entry ?\\\
      \\ \"\\\\\"\t   table)\n  (modify-syntax-entry ?+\t \".\"\t   table)\n  (modify-syntax-entry\
      \ ?-\t \".\"\t   table)\n  (modify-syntax-entry ?=\t \".\"\t   table)\n  (modify-syntax-entry\
      \ ?%\t \".\"\t   table)\n  (modify-syntax-entry ?<\t \".\"\t   table)\n  (modify-syntax-entry\
      \ ?>\t \".\"\t   table)\n  (modify-syntax-entry ?&\t \".\"\t   table)\n  (modify-syntax-entry\
      \ ?|\t \".\"\t   table)\n  (modify-syntax-entry ?\\' \"\\\"\"\t   table)\n \
      \ (modify-syntax-entry ?\\240 \".\"\t table)\n\n  ;; Set up block and line oriented\
      \ comments.\t The new C\n  ;; standard mandates both comment styles even in\
      \ C, so since\n  ;; all languages now require dual comments, we make this the\n\
      \  ;; default.\n  (modify-syntax-entry ?/\t \". 124b\" table)\n  (modify-syntax-entry\
      \ ?*\t \". 23\"\ttable)\n\n  (modify-syntax-entry ?\\n \"> b\"\ttable)\n  ;;\
      \ Give CR the same syntax as newline, for selective-display\n  (modify-syntax-entry\
      \ ?\\^m \"> b\" table)\n  table)\n\n(defvar unrealscript-mode-syntax-table\n\
      \  (let ((unrealscript-mode-syntax-table (unrealscript-populate-syntax-table\
      \ (make-syntax-table))))\n\tunrealscript-mode-syntax-table)\n  \"Syntax table\
      \ for unrealscript-mode\")\n\n(defun unrealscript-mode ()\n  \"Major mode for\
      \ editing Unrealscript files\"\n  (interactive)\n  (kill-all-local-variables)\n\
      \  (set-syntax-table unrealscript-mode-syntax-table)\n  (use-local-map unrealscript-mode-map)\n\
      \  (setq indent-line-function 'unrealscript-indent-line)\n  (setq font-lock-defaults\
      \ '(unrealscript-font-lock-keywords nil t))\n  (setq major-mode 'unrealscript-mode)\n\
      \  (setq mode-name \"UNREALSCRIPT\")\n  (run-hooks 'unrealscript-mode-hook)\n\
      \  (setq case-fold-search t)\n  (setq font-lock-keywords-case-fold-search t))\n\
      \n\n(provide 'unrealscript-mode)\n</pre>"
  properties: []
  revId: 44150
name: "Legacy:Emacs"
revision:
  revid: 44150
  parentid: 43893
  user: "88.211.46.93"
  timestamp: 1291225693.000000000
  comment: "Updating to new version that actually works"
timestamp: 1668772633.854707000
