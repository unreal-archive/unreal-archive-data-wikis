---
parse:
  title: "Legacy:Destroying Objects"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Destroying_Actors\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Destroying Actors</span></a>\n\
      <ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Chain_Of_Events\"><span\
      \ class=\"tocnumber\">1.1</span> <span class=\"toctext\">Chain Of Events</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Destroying_Non-Actor_Objects\"\
      ><span class=\"tocnumber\">2</span> <span class=\"toctext\">Destroying Non-Actor\
      \ Objects</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"\
      #Discussion\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Discussion</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Destroying_Actors\"\
      >Destroying Actors</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Destroying_Objects?section=1\" title=\"Edit\
      \ section: Destroying Actors\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Actors are destroyed by calling their Destroy() function.\
      \ Destruction is latent, i.e. the actor is destroyed at the end of the current\
      \ tick, although the Destroyed() event is executed immediately. The actor is\
      \ moved to the list of destroyed actors then. Note that calling Destroy() will\
      \ not halt the execution of a function that is already started, or stop other\
      \ functions from being called on that actor. If you wish to avoid this behavior,\
      \ the actor variable <tt>bDeleteMe</tt> is set to true when an actor has been\
      \ \"destroyed\" but has not yet been deleted.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Chain_Of_Events\">Chain Of Events</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Destroying_Objects?section=2\"\
      \ title=\"Edit section: Chain Of Events\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>When the Destroy() function is called, several other\
      \ UnrealScript events get called as well before code execution continues after\
      \ the call to Destroy().</p>\n<ol>\n<li>the actor's EndState() event</li>\n\
      <li>the actor's Destroyed() event</li>\n<li>the LostChild() event of the actor's\
      \ Owner</li>\n<li>all references to this actor are set to None<br />\n<b>Warning:</b>\
      \ This also detaches the actor from its children (i.e. sets their Owner property\
      \ to None) without calling LostChild(). If the actor gains a new child afterwards,\
      \ the engine gets confused and crashes the game soon.</li>\n</ol>\n<h2><span\
      \ class=\"mw-headline\" id=\"Destroying_Non-Actor_Objects\">Destroying Non-Actor\
      \ Objects</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Destroying_Objects?section=3\" title=\"Edit\
      \ section: Destroying Non-Actor Objects\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Objects will be cleaned up at garbage collection time,\
      \ provided there are no Actors that retain references to them. You can explicitly\
      \ force garbage collection using a console command, or wait for the normal collection\
      \ during a level switch. See my notes on the <a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">new keyword</a> about making\
      \ sure your objects are safe for garbage collection.</p>\n<h2><span class=\"\
      mw-headline\" id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Destroying_Objects?section=4\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>EricBlade:</b> I'm having a little problem with\
      \ this function in a particular object, derived from the <a href=\"/edit/Legacy:Fire?redlink=1\"\
      \ class=\"new\" title=\"Legacy:Fire (page does not exist)\">Fire</a> class.\
      \ I have built a weapon, that when fired, spawns a fire attached to it. When\
      \ fired again, it calls thefire.DestroyFire() which eventually calls Destroy().\
      \ However, after that is all done, the reference to it still exists, and the\
      \ next time i go to spawn a fire, it decides the original one still exists,\
      \ so it uses that, instead. Huh? (the problem with this is that the original\
      \ one is no longer based on the weapon, after the Destroy() call and any attempts\
      \ to set it to do so fail) After some more testing, I've discovered that bDeleteMe\
      \ is set to true, but the object is never actually destroyed.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Destroying_Objects?section=5\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a></li>\n<li><a href=\"/Legacy:Creating_Actors_And_Objects\"\
      \ title=\"Legacy:Creating Actors And Objects\">Creating Actors And Objects</a></li>\n\
      <li><a href=\"/Legacy:Garbage_Collection\" title=\"Legacy:Garbage Collection\"\
      >Garbage Collection</a></li>\n</ul>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.019 seconds\nReal time usage: 0.020 seconds\nPreprocessor visited node count:\
      \ 19/1000000\nPreprocessor generated node count: 26/1000000\nPost‐expand include\
      \ size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:938-0!*!0!!en!*!*\
      \ and timestamp 20221118014507 and revision id 46324\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:Creating Actors And Objects"
  - ns: 100
    exists: false
    name: "Legacy:Fire"
  - ns: 100
    exists: true
    name: "Legacy:Garbage Collection"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Destroying Actors"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Destroying_Objects"
    byteoffset: 0
    anchor: "Destroying_Actors"
  - toclevel: 2
    level: "3"
    line: "Chain Of Events"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Destroying_Objects"
    byteoffset: 584
    anchor: "Chain_Of_Events"
  - toclevel: 1
    level: "2"
    line: "Destroying Non-Actor Objects"
    number: "2"
    index: "3"
    fromtitle: "Legacy:Destroying_Objects"
    byteoffset: 1148
    anchor: "Destroying_Non-Actor_Objects"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "3"
    index: "4"
    fromtitle: "Legacy:Destroying_Objects"
    byteoffset: 1560
    anchor: "Discussion"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "5"
    fromtitle: "Legacy:Destroying_Objects"
    byteoffset: 2315
    anchor: "Related_Topics"
  displaytitle: "Legacy:Destroying Objects"
  iwlinks: []
  wikitext:
    text: "==Destroying Actors==\n\nActors are destroyed by calling their Destroy()\
      \ function. Destruction is latent, i.e. the actor is destroyed at the end of\
      \ the current tick, although the Destroyed() event is executed immediately.\
      \ The actor is moved to the list of destroyed actors then. Note that calling\
      \ Destroy() will not halt the execution of a function that is already started,\
      \ or stop other functions from being called on that actor. If you wish to avoid\
      \ this behavior, the actor variable <tt>bDeleteMe</tt> is set to true when an\
      \ actor has been \"destroyed\" but has not yet been deleted.\n\n===Chain Of\
      \ Events===\n\nWhen the Destroy() function is called, several other UnrealScript\
      \ events get called as well before code execution continues after the call to\
      \ Destroy().\n# the actor's EndState() event\n# the actor's Destroyed() event\n\
      # the LostChild() event of the actor's Owner\n# all references to this actor\
      \ are set to None<br />'''Warning:''' This also detaches the actor from its\
      \ children (i.e. sets their Owner property to None) without calling LostChild().\
      \ If the actor gains a new child afterwards, the engine gets confused and crashes\
      \ the game soon.\n\n==Destroying Non-Actor Objects==\n\nObjects will be cleaned\
      \ up at garbage collection time, provided there are no Actors that retain references\
      \ to them. You can explicitly force garbage collection using a console command,\
      \ or wait for the normal collection during a level switch. See my notes on the\
      \ [[Legacy:Creating_Actors_And_Objects|new keyword]] about making sure your\
      \ objects are safe for garbage collection.\n\n==Discussion==\n\n'''EricBlade:'''\
      \ I'm having a little problem with this function in a particular object, derived\
      \ from the [[Legacy:Fire|Fire]] class.  I have built a weapon, that when fired,\
      \ spawns a fire attached to it.  When fired again, it calls thefire.DestroyFire()\
      \ which eventually calls Destroy().  However, after that is all done, the reference\
      \ to it still exists, and the next time i go to spawn a fire, it decides the\
      \ original one still exists, so it uses that, instead.  Huh?  (the problem with\
      \ this is that the original one is no longer based on the weapon, after the\
      \ Destroy() call and any attempts to set it to do so fail) After some more testing,\
      \ I've discovered that bDeleteMe is set to true, but the object is never actually\
      \ destroyed.  \n\n==Related Topics==\n* [[Legacy:UnrealScript|UnrealScript]]\n\
      * [[Legacy:Creating Actors And Objects|Creating Actors And Objects]]\n* [[Legacy:Garbage\
      \ Collection|Garbage Collection]]"
  properties: []
  revId: 46324
name: "Legacy:Destroying Objects"
revision:
  revid: 46324
  parentid: 2555
  user: "SeriousBarbie"
  timestamp: 1460174751.000000000
  comment: "+link to [[Legacy:Creating_Actors_And_Objects]]"
timestamp: 1668763376.002465000
