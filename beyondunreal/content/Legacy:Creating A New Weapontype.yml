---
parse:
  title: "Legacy:Creating A New Weapontype"
  text:
    text: "<p>I just started with coding but I am missing some practical examples.\
      \ So I put here what I found out so far together with the code.</p>\n<p>I assume\
      \ that you have installed the SDK files or exported the codefiles from UnrealEd.\
      \ In that case you see various directories like \"XWeapons\" etc. in your unreal\
      \ directory – see <a href=\"/Legacy:Setting_Up_UnrealScript\" title=\"Legacy:Setting\
      \ Up UnrealScript\">Setting Up UnrealScript</a> for instructions.</p>\n<p></p>\n\
      <div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n\
      <ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Getting_Started\"><span\
      \ class=\"tocnumber\">1</span> <span class=\"toctext\">Getting Started</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#A_little_more_tuning\"><span\
      \ class=\"tocnumber\">2</span> <span class=\"toctext\">A little more tuning</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Final_words\"><span class=\"\
      tocnumber\">3</span> <span class=\"toctext\">Final words</span></a></li>\n<li\
      \ class=\"toclevel-1 tocsection-4\"><a href=\"#Related_Topics\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">5</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Getting_Started\">Getting\
      \ Started</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Creating_A_New_Weapontype?section=1\" title=\"\
      Edit section: Getting Started\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>For learning Unreal, I started a new Package called\
      \ <code>TestPak</code>.</p>\n<p>I created the <code>TestPak.int</code> file\
      \ in that folder which contains:</p>\n<pre>[Public]\nObject=(Name=TestPak,Class=Class,MetaClass=Engine.Weapon)\n\
      </pre>\n<p>Don't forget to add it to the <code>ut2003.ini</code> file:</p>\n\
      <p><code>EditPackages=TestPak</code></p>\n<p>(below the other <i>EditPackages</i>\
      \ lines)</p>\n<p>Create a subfolder to the <code>TestPak</code> directory called\
      \ <code>classes</code></p>\n<p>That's now your point to start from.</p>\n<p>For\
      \ the beginning I copied the <a href=\"/edit/Legacy:AssaultRifleWeapon?redlink=1\"\
      \ class=\"new\" title=\"Legacy:AssaultRifleWeapon (page does not exist)\">AssaultRifleWeapon</a>\
      \ and the codefiles belonging to that weapon for later modification. You can\
      \ start that way too. If you want to rename the Weapon classes, you have to\
      \ rename the files but also the file's content. Example:</p>\n<pre>copy c:\\\
      ut2003\\XWeapons\\Classes\\<b>AssaultRifle.uc</b> c:\\ut2003\\testpak\\classes\\\
      <b>TestWeapon.uc</b>\n</pre>\n<p>open the file and change</p>\n<pre>class AssaultRifle\
      \ extends Weapon\n   config(user);\n</pre>\n<p>to:</p>\n<pre>class TestWeapon\
      \ extends Weapon\n   config(user);\n</pre>\n<p>If you have renamed all the files\
      \ you want to modify (I copied, renamed and <i>modified</i> the files: <code>Grenade.uc\
      \ to TestGrenade.uc, GrenadeAmmo.uc to TestGrenadeAmmo.uc, AssaultRifle.uc to\
      \ TestWeapon.uc, AssaultAmmoPickup.uc to TestWeaponAmmoPickup.uc, AssaultAttachment.uc\
      \ to TestWeaponAttachment.uc, AssaultFire.uc to TestWeaponFire.uc, AssaultGrenade.uc\
      \ to TestWeaponGrenade.uc, AssaultRiflePickup.uc to TestWeaponPickup.uc</code>)\
      \ You can start making minor corrections in the files. Before doing that you\
      \ can run <code>ucc make all</code>, testing if your copying process was successfull.\
      \ If not, you have done something wrong or I described it badly - in that case\
      \ you are welcome to modify this page&#160;;).</p>\n<p>Well ok - if you start\
      \ a testlevel (with cheatings enabled) you can put in the console: <code>summon\
      \ testpak.testweaponpickup</code> and the weapon will appear right in front\
      \ of you. If not, check if the testpak.u file is present in the system directory.</p>\n\
      <p>You will find out that it is still the normal AssaultRifle gun. And it is\
      \ still shooting the same way etc. So stop playing around and modify the files\
      \ further. Open <code>TestWeapon.uc</code>. Jump to the last lines where the\
      \ defaultproperties are written.</p>\n<p>Watch out for lines like that now:</p>\n\
      <pre>PickupClass=class'AssaultRiflePickup'\n</pre>\n<p>These lines are still\
      \ pointing to the \"old\" classes that you want to overwrite!</p>\n<p>So change\
      \ the lines this way:</p>\n<pre>PickupClass=Class'TestPak.TestWeaponPickup'\n\
      </pre>\n<p><b>You will have to do this in all the files that you copied!</b></p>\n\
      <p>Change the</p>\n<pre>ItemName=\"Assault Rifle\"\n</pre>\n<p>to something\
      \ else like \"supergun\" or so...</p>\n<p>Watch out for errors and test it inbetween\
      \ by compiling and testing! It is hard to find errors if you made lots of \"\
      heavy\" changes. <i>Don't forget to delete <code>testpak.u</code> before compiling\
      \ your code!</i></p>\n<p>If you rerun a level and summon your weapon, it should\
      \ tell you that you collected the \"supergun\" - or whatever you named it. But\
      \ there are lot's of further changes to be made.</p>\n<p>I won't describe every\
      \ line that I have changed because if you are clever, you will see the property\
      \ values yourself that are important while changing the class names. Lines like</p>\n\
      <pre>InventoryGroup=2\n</pre>\n<p>should make you curious for changing (this\
      \ value will move the weapon to another slot in your inventory and can be changed\
      \ easily).</p>\n<p>So, you can easily make now minor changes yourself: How much\
      \ ammo it has, how fast it shoots and so on. As I started up by zero I spend\
      \ a lot of time on figuring out how the new gun behaves on the changes. I guess\
      \ you should do the same.</p>\n<p>Tests like: <b>How fast can I shoot</b> are\
      \ always funny&#160;;) - especially if you need only one second to fire 300\
      \ projectiles on your enemy&#160;:D</p>\n<h2><span class=\"mw-headline\" id=\"\
      A_little_more_tuning\">A little more tuning</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_A_New_Weapontype?section=2\"\
      \ title=\"Edit section: A little more tuning\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Still not satisfied? Well I wasn't too, - I wanted\
      \ to create a bow. I am unable to create my own animation stuff since I have\
      \ no conversion tool for 3D meshes, but I created an Staticmesh arrow that will\
      \ be shot when triggering the grenade. This is easily be done in the defaultproperties\
      \ of the <code>TestGrenade.uc</code> file:</p>\n<pre>StaticMesh=StaticMesh'YourStaticMeshPackage.YourGrenade'\n\
      </pre>\n<p>Now I was able to shoot arrows - that exploded and flew strange (rotating\
      \ and so on). ...</p>\n<p>So I made some changes on the functions that let the\
      \ grenade explode - I deleted the functions that made the thing blowing up.\
      \ Get rid of the randomspin-values, too. Also, I wanted to make the arrow stick:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">var</span> <span\
      \ class=\"kw5\">bool</span> bLanded; <span class=\"co1\">// put this in the\
      \ beginning of the file</span>\n \n<span class=\"kw1\">simulated</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw4\">Landed</span><span class=\"\
      br0\">(</span> <span class=\"kw5\">vector</span> HitNormal <span class=\"br0\"\
      >)</span> <span class=\"br0\">{</span>\n    <span class=\"kw4\">HitWall</span><span\
      \ class=\"br0\">(</span>HitNormal,<span class=\"kw5\">None</span><span class=\"\
      br0\">)</span>;\n<span class=\"br0\">}</span>\n \n<span class=\"kw1\">simulated</span>\
      \ <span class=\"kw1\">function</span> <span class=\"kw4\">HitWall</span><span\
      \ class=\"br0\">(</span><span class=\"kw5\">vector</span> HitNormal, <span class=\"\
      kw9\">actor</span> <span class=\"kw4\">HitWall</span><span class=\"br0\">)</span>\
      \ <span class=\"br0\">{</span>\n    bLanded<span class=\"sy0\">=</span><span\
      \ class=\"kw6\">true</span>;\n    <span class=\"kw7\">Velocity</span><span class=\"\
      sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">*</span><span\
      \ class=\"kw7\">Velocity</span>;\n    <span class=\"kw4\">SetPhysics</span><span\
      \ class=\"br0\">(</span><span class=\"kw7\">PHYS_None</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Now, the arrow\
      \ will stick wherever it lands (except for the players it is hitting).</p>\n\
      <p>But you will see that the arrow is not flying realy... A simple function\
      \ will fix it:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">simulated</span> <span class=\"kw1\">function</span> <span class=\"kw4\"\
      >Tick</span><span class=\"br0\">(</span> <span class=\"kw5\">float</span> DeltaTime\
      \ <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   <span class=\"\
      kw2\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bLanded<span\
      \ class=\"br0\">)</span> <span class=\"kw4\">SetRotation</span><span class=\"\
      br0\">(</span><span class=\"kw5\">rotator</span><span class=\"br0\">(</span><span\
      \ class=\"kw7\">velocity</span><span class=\"br0\">)</span><span class=\"br0\"\
      >)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>Tick is called\
      \ every moment in Unreal, so I guess this is the dirty way how to implement\
      \ it, but I also think it does not matter so much when testing. Has anyone a\
      \ better Idea?</p>\n<p>At least the arrow is flying nice through the air and\
      \ sticks where it lands in the right direction!</p>\n<p>Now - I wanted to make\
      \ it stick in the body of the enemy of course *hehehe*.</p>\n<p>So I modified\
      \ the ProcessTouch function:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">simulated</span> <span class=\"kw1\">function</span> ProcessTouch<span\
      \ class=\"br0\">(</span> <span class=\"kw9\">actor</span> Other, <span class=\"\
      kw5\">vector</span> HitLocation <span class=\"br0\">)</span>\n<span class=\"\
      br0\">{</span>\n    <span class=\"kw1\">local</span> <span class=\"kw5\">float</span>\
      \ dist;\n    <span class=\"kw1\">local</span> <span class=\"kw5\">Name</span>\
      \ bone; <span class=\"co1\">//which bone it should be attached</span>\n    <span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">Vector</span> X;\n    <span\
      \ class=\"kw1\">local</span> class<span class=\"sy0\">&lt;</span>DamageType<span\
      \ class=\"sy0\">&gt;</span> dmg;\n \n    dmg<span class=\"sy0\">=</span><span\
      \ class=\"kw1\">class</span><span class=\"st0\">'XWeapons.DamTypeShieldImpact'</span>;\n\
      \    <span class=\"kw2\">if</span> <span class=\"br0\">(</span> <span class=\"\
      kw9\">Pawn</span><span class=\"br0\">(</span>Other<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">!=</span> <span class=\"kw5\">None</span> <span class=\"\
      sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Other <span class=\"sy0\"\
      >!=</span> <span class=\"kw7\">Instigator</span> <span class=\"sy0\">||</span>\
      \ bCanHitOwner<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\
      \ <span class=\"br0\">(</span><span class=\"sy0\">!</span>bLanded<span class=\"\
      br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n\
      \tbLanded<span class=\"sy0\">=</span><span class=\"kw6\">True</span>;\n\tX<span\
      \ class=\"sy0\">=</span><span class=\"kw3\">Normal</span><span class=\"br0\"\
      >(</span><span class=\"kw7\">Velocity</span><span class=\"sy0\">+</span><span\
      \ class=\"kw3\">vect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span\
      \ class=\"br0\">)</span>;\n\t<span class=\"kw4\">SetPhysics</span><span class=\"\
      br0\">(</span><span class=\"kw7\">PHYS_None</span><span class=\"br0\">)</span>;\n\
      \tbone<span class=\"sy0\">=</span>Other.<span class=\"me0\">GetClosestBone</span><span\
      \ class=\"br0\">(</span>HitLocation,<span class=\"kw7\">Velocity</span>,dist<span\
      \ class=\"br0\">)</span>;\n\tOther.<span class=\"kw4\">TakeDamage</span><span\
      \ class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw7\">Instigator</span>,\
      \ HitLocation, <span class=\"nu0\">60000</span><span class=\"sy0\">*</span><span\
      \ class=\"br0\">(</span>X<span class=\"br0\">)</span>, <span class=\"kw5\">None</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// just push the other player\
      \ back</span>\n\tOther.<span class=\"kw4\">AttachToBone</span><span class=\"\
      br0\">(</span><span class=\"kw6\">Self</span>,bone<span class=\"br0\">)</span>;\n\
      \ \n        <span class=\"kw7\">Velocity</span><span class=\"sy0\">=</span><span\
      \ class=\"nu0\">0</span><span class=\"sy0\">*</span><span class=\"kw7\">Velocity</span>;\n\
      \    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>So this is not much - but I needed some time to find out how all\
      \ that works with together with a friend. And it is still not sticking the way\
      \ in the enemy that how I like it to do...</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Final_words\">Final words</span><span class=\"mw-editsection\"><span\
      \ class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_A_New_Weapontype?section=3\"\
      \ title=\"Edit section: Final words\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>I am not a professional in describing things. And\
      \ I am not sure if I mentioned all the important stuff. If you think there is\
      \ a bug, feel free to correct it. Add some lines if you are encountering problems,\
      \ too.</p>\n<p>This all took me about 8 hours to get run. Much work, I hope\
      \ you won't need so long with this little help. By the way- if Unrealed doesn't\
      \ show your package - load it manually.</p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Related_Topics\">Related Topics</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_A_New_Weapontype?section=4\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Weapon\" title=\"Legacy:Weapon\"\
      >Weapon</a></li>\n<li><a href=\"/Legacy:Weapon_Modeling\" title=\"Legacy:Weapon\
      \ Modeling\">Weapon Modeling</a></li>\n<li><a href=\"/Legacy:Inventory\" title=\"\
      Legacy:Inventory\">Inventory</a></li>\n<li><a href=\"/Legacy:Making_Mods\" title=\"\
      Legacy:Making Mods\">Making Mods</a></li>\n</ul>\n<h2><span class=\"mw-headline\"\
      \ id=\"Discussion\">Discussion</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Creating_A_New_Weapontype?section=5\"\
      \ title=\"Edit section: Discussion\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p><b>RegularX:</b> Looks pretty good - added a link\
      \ to this from the Weapon Mutator from the tute series.</p>\n<p><b>Foxpaw:</b>\
      \ Some of the stuff at the beginning overlaps with the setting up your pacakge\
      \ stuff. Or something. I don't know the actual link. Anyways, it could probrably\
      \ get a <a href=\"/Category:Legacy_Refactor_Me\" title=\"Category:Legacy Refactor\
      \ Me\">Category:Legacy Refactor Me</a>.</p>\n<p><b>Kentyman:</b> At the top\
      \ of this page you create your own weapon folder structure and script files\
      \ by copy/pasting existing script files. This sort of clashes with the idea\
      \ of Object Orientated Programming where you simply extend existing classes\
      \ and modify them as you see fit (instead of first replicating all the code\
      \ and then changing it)</p>\n<p><b>Neo Reloaded:</b> Is it possible to create\
      \ weapons in UnrealEd?</p>\n<p><b>Wormbo:</b> If you mean weapon models, that's\
      \ a clear no. If you mean the code behind them – well, let's put it this way:\
      \ Don't try it. Any <a href=\"/Legacy:Text_Editor\" title=\"Legacy:Text Editor\"\
      >text editor</a> is better for that.&#160;;)</p>\n<p><b>Beansdeath:</b> Wondering-\
      \ once a new weapon is made, bow&amp;arrow, or what have you, how do you go\
      \ about changing the weap. icon on the HUD to show a new weap. icon, say a little\
      \ bow&amp;arrow, so you arent holding a bow and have a assault rife icon? would\
      \ be a good bit to add here.</p>\n\n<!-- \nNewPP limit report\nCPU time usage:\
      \ 0.067 seconds\nReal time usage: 0.069 seconds\nPreprocessor visited node count:\
      \ 48/1000000\nPreprocessor generated node count: 100/1000000\nPost‐expand include\
      \ size: 50/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion\
      \ depth: 2/40\nExpensive parser function count: 0/100\n-->\n\n<!-- \nTransclusion\
      \ expansion time report (%,ms,calls,template)\n100.00%    0.000      1 - -total\n\
      -->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:820-0!*!0!!en!*!*\
      \ and timestamp 20221117172109 and revision id 2306\n -->\n"
  categories:
  - sortkey: "Creating A New Weapontype"
    name: "Legacy_Tutorial"
  - sortkey: "Creating A New Weapontype"
    name: "Legacy_Refactor_Me"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Making Mods"
  - ns: 100
    exists: false
    name: "Legacy:AssaultRifleWeapon"
  - ns: 100
    exists: true
    name: "Legacy:Weapon Modeling"
  - ns: 100
    exists: true
    name: "Legacy:Setting Up UnrealScript"
  - ns: 14
    exists: true
    name: "Category:Legacy Refactor Me"
  - ns: 100
    exists: true
    name: "Legacy:Inventory"
  - ns: 100
    exists: true
    name: "Legacy:Text Editor"
  - ns: 100
    exists: true
    name: "Legacy:Weapon"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Getting Started"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Creating_A_New_Weapontype"
    byteoffset: 397
    anchor: "Getting_Started"
  - toclevel: 1
    level: "2"
    line: "A little more tuning"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Creating_A_New_Weapontype"
    byteoffset: 4139
    anchor: "A_little_more_tuning"
  - toclevel: 1
    level: "2"
    line: "Final words"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Creating_A_New_Weapontype"
    byteoffset: 6680
    anchor: "Final_words"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Creating_A_New_Weapontype"
    byteoffset: 7090
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "5"
    index: "5"
    fromtitle: "Legacy:Creating_A_New_Weapontype"
    byteoffset: 7252
    anchor: "Discussion"
  displaytitle: "Legacy:Creating A New Weapontype"
  iwlinks: []
  wikitext:
    text: "I just started with coding but I am missing some practical examples. So\
      \ I put here what I found out so far together with the code.\n\nI assume that\
      \ you have installed the SDK files or exported the codefiles from UnrealEd.\
      \ In that case you see various directories like \"XWeapons\" etc. in your unreal\
      \ directory &ndash; see [[Legacy:Setting Up UnrealScript|Setting Up UnrealScript]]\
      \ for instructions.\n\n==Getting Started==\n\nFor learning Unreal, I started\
      \ a new Package called <code>TestPak</code>.\n\nI created the <code>TestPak.int</code>\
      \ file in that folder which contains:\n [Public]\n Object=(Name=TestPak,Class=Class,MetaClass=Engine.Weapon)\n\
      \nDon't forget to add it to the <code>ut2003.ini</code> file:\n\n<code>EditPackages=TestPak</code>\n\
      \n(below the other ''EditPackages'' lines)\n\nCreate a subfolder to the <code>TestPak</code>\
      \ directory called <code>classes</code>\n\nThat's now your point to start from.\n\
      \nFor the beginning I copied the [[Legacy:AssaultRifleWeapon|AssaultRifleWeapon]]\
      \ and the codefiles belonging to that weapon for later modification. You can\
      \ start that way too. If you want to rename the Weapon classes, you have to\
      \ rename the files but also the file's content. Example:\n\n copy c:\\ut2003\\\
      XWeapons\\Classes\\'''AssaultRifle.uc''' c:\\ut2003\\testpak\\classes\\'''TestWeapon.uc'''\n\
      \nopen the file and change \n class AssaultRifle extends Weapon\n    config(user);\n\
      \nto:\n class TestWeapon extends Weapon\n    config(user);\n\nIf you have renamed\
      \ all the files you want to modify (I copied, renamed and ''modified'' the files:\
      \ <code>Grenade.uc to TestGrenade.uc, GrenadeAmmo.uc to TestGrenadeAmmo.uc,\
      \ AssaultRifle.uc to TestWeapon.uc, AssaultAmmoPickup.uc to TestWeaponAmmoPickup.uc,\
      \ AssaultAttachment.uc to TestWeaponAttachment.uc, AssaultFire.uc to TestWeaponFire.uc,\
      \ AssaultGrenade.uc to TestWeaponGrenade.uc, AssaultRiflePickup.uc to TestWeaponPickup.uc</code>)\
      \ You can start making minor corrections in the files. Before doing that you\
      \ can run <code>ucc make all</code>, testing if your copying process was successfull.\
      \ If not, you have done something wrong or I described it badly - in that case\
      \ you are welcome to modify this page ;). \n\nWell ok - if you start a testlevel\
      \ (with cheatings enabled) you can put in the console: <code>summon testpak.testweaponpickup</code>\
      \ and the weapon will appear right in front of you. If not, check if the testpak.u\
      \ file is present in the system directory. \n\nYou will find out that it is\
      \ still the normal AssaultRifle gun. And it is still shooting the same way etc.\
      \ So stop playing around and modify the files further. Open <code>TestWeapon.uc</code>.\
      \ Jump to the last lines where the defaultproperties are written.  \n\nWatch\
      \ out for lines like that now:\n PickupClass=class'AssaultRiflePickup'\n\nThese\
      \ lines are still pointing to the \"old\" classes that you want to overwrite!\n\
      \nSo change the lines this way:\n PickupClass=Class'TestPak.TestWeaponPickup'\n\
      \n'''You will have to do this in all the files that you copied!'''\n\nChange\
      \ the \n ItemName=\"Assault Rifle\"\n\nto something else like \"supergun\" or\
      \ so...\n\nWatch out for errors and test it inbetween by compiling and testing!\
      \ It is hard to find errors if you made lots of \"heavy\" changes. ''Don't forget\
      \ to delete <code>testpak.u</code> before compiling your code!\n\nIf you rerun\
      \ a level and summon your weapon, it should tell you that you collected the\
      \ \"supergun\" - or whatever you named it. But there are lot's of further changes\
      \ to be made.\n\nI won't describe every line that I have changed because if\
      \ you are clever, you will see the property values yourself that are important\
      \ while changing the class names. Lines like \n InventoryGroup=2\n\nshould make\
      \ you curious for changing (this value will move the weapon to another slot\
      \ in your inventory and can be changed easily).\n\nSo, you can easily make now\
      \ minor changes yourself: How much ammo it has, how fast it shoots and so on.\
      \ As I started up by zero I spend a lot of time on figuring out how the new\
      \ gun behaves on the changes. I guess you should do the same. \n\nTests like:\
      \ '''How fast can I shoot''' are always funny ;) - especially if you need only\
      \ one second to fire 300 projectiles on your enemy :D\n\n==A little more tuning==\n\
      \nStill not satisfied? Well I wasn't too, - I wanted to create a bow. I am unable\
      \ to create my own animation stuff since I have no conversion tool for 3D meshes,\
      \ but I created an Staticmesh arrow that will be shot when triggering the grenade.\
      \ This is easily be done in the defaultproperties of the <code> TestGrenade.uc</code>\
      \ file:\n StaticMesh=StaticMesh'YourStaticMeshPackage.YourGrenade'\n\nNow I\
      \ was able to shoot arrows - that exploded and flew strange (rotating and so\
      \ on). ...\n\nSo I made some changes on the functions that let the grenade explode\
      \ - I deleted the functions that made the thing blowing up. Get rid of the randomspin-values,\
      \ too. Also, I wanted to make the arrow stick:\n\n<uscript>\nvar bool bLanded;\
      \ // put this in the beginning of the file\n\nsimulated function Landed( vector\
      \ HitNormal ) {\n    HitWall(HitNormal,None);\n}\n\nsimulated function HitWall(vector\
      \ HitNormal, actor HitWall) {\n    bLanded=true;\n    Velocity=0*Velocity;\n\
      \    SetPhysics(PHYS_None);\n}\n</uscript>\n\nNow, the arrow will stick wherever\
      \ it lands (except for the players it is hitting).\n\nBut you will see that\
      \ the arrow is not flying realy... A simple function will fix it:\n\n<uscript>\n\
      simulated function Tick( float DeltaTime ) {\n   if (!bLanded) SetRotation(rotator(velocity));\n\
      }\n</uscript>\n\nTick is called every moment in Unreal, so I guess this is the\
      \ dirty way how to implement it, but I also think it does not matter so much\
      \ when testing. Has anyone a better Idea?\n\nAt least the arrow is flying nice\
      \ through the air and sticks where it lands in the right direction!\n\nNow -\
      \ I wanted to make it stick in the body of the enemy of course *hehehe*.\n\n\
      So I modified the ProcessTouch function:\n\n<uscript>\n\nsimulated function\
      \ ProcessTouch( actor Other, vector HitLocation )\n{\n    local float dist;\n\
      \    local Name bone; //which bone it should be attached\n    local Vector X;\n\
      \    local class<DamageType> dmg;\n\n    dmg=class'XWeapons.DamTypeShieldImpact';\n\
      \    if ( Pawn(Other) != None && (Other != Instigator || bCanHitOwner) && (!bLanded))\n\
      \    {\n\tbLanded=True;\n\tX=Normal(Velocity+vect(0,0,0.5));\n\tSetPhysics(PHYS_None);\n\
      \tbone=Other.GetClosestBone(HitLocation,Velocity,dist);\n\tOther.TakeDamage(0,\
      \ Instigator, HitLocation, 60000*(X), None); // just push the other player back\n\
      \tOther.AttachToBone(Self,bone);\n\n        Velocity=0*Velocity;\n    }\n}\n\
      </uscript>\n\nSo this is not much - but I needed some time to find out how all\
      \ that works with together with a friend. And it is still not sticking the way\
      \ in the enemy that how I like it to do...\n\n==Final words==\n\nI am not a\
      \ professional in describing things. And I am not sure if I mentioned all the\
      \ important stuff. If you think there is a bug, feel free to correct it. Add\
      \ some lines if you are encountering problems, too. \n\nThis all took me about\
      \ 8 hours to get run. Much work, I hope you won't need so long with this little\
      \ help. By the way-  if Unrealed doesn't show your package - load it manually.\n\
      \n==Related Topics==\n* [[Legacy:Weapon|Weapon]]\n* [[Legacy:Weapon Modeling|Weapon\
      \ Modeling]]\n* [[Legacy:Inventory|Inventory]]\n* [[Legacy:Making Mods|Making\
      \ Mods]]\n\n==Discussion==\n\n'''RegularX:''' Looks pretty good - added a link\
      \ to this from the Weapon Mutator from the tute series.\n\n'''Foxpaw:''' Some\
      \ of the stuff at the beginning overlaps with the setting up your pacakge stuff.\
      \ Or something. I don't know the actual link. Anyways, it could probrably get\
      \ a [[:Category:Legacy Refactor Me]].\n\n'''Kentyman:''' At the top of this\
      \ page you create your own weapon folder structure and script files by copy/pasting\
      \ existing script files. This sort of clashes with the idea of Object Orientated\
      \ Programming where you simply extend existing classes and modify them as you\
      \ see fit (instead of first replicating all the code and then changing it)\n\
      \n'''Neo Reloaded:''' Is it possible to create weapons in UnrealEd?\n\n'''Wormbo:'''\
      \ If you mean weapon models, that's a clear no. If you mean the code behind\
      \ them &ndash; well, let's put it this way: Don't try it. Any [[Legacy:Text\
      \ Editor|text editor]] is better for that. ;)\n\n'''Beansdeath:''' Wondering-\
      \ once a new weapon is made, bow&arrow, or what have you, how do you go about\
      \ changing the weap. icon on the HUD to show a new weap. icon, say a little\
      \ bow&arrow, so you arent holding a bow and have a assault rife icon?  would\
      \ be a good bit to add here.\n\n[[Category:Legacy Refactor Me|{{PAGENAME}}]]\n\
      [[Category:Legacy Tutorial|{{PAGENAME}}]]"
  properties: []
  revId: 2306
name: "Legacy:Creating A New Weapontype"
revision:
  revid: 2306
  parentid: 2308
  user: "SuperApe"
  timestamp: 1134763083.000000000
  comment: "*"
timestamp: 1668764156.295154000
