---
parse:
  title: "ForEach loop"
  text:
    text: "<p>The <b>ForEach</b> loop in <a href=\"/UnrealScript\" title=\"UnrealScript\"\
      >UnrealScript</a> can be used to iterate over the output of <a href=\"#Iterator_functions\"\
      >iterator functions</a>. Additionally, <a href=\"/Unreal_Engine_3\" title=\"\
      Unreal Engine 3\">Unreal Engine 3</a> provides a special version of <b>ForEach</b>\
      \ that iterates over the elements of a <a href=\"/Dynamic_array\" title=\"Dynamic\
      \ array\" class=\"mw-redirect\">dynamic array</a>.</p>\n<p></p>\n<div id=\"\
      toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n\
      <li class=\"toclevel-1 tocsection-1\"><a href=\"#Syntax\"><span class=\"tocnumber\"\
      >1</span> <span class=\"toctext\">Syntax</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-2\"><a href=\"#Iterator_functions\"><span class=\"tocnumber\">2</span>\
      \ <span class=\"toctext\">Iterator functions</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-3\"><a href=\"#Examples\"><span class=\"tocnumber\">3</span> <span\
      \ class=\"toctext\">Examples</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"\
      ><a href=\"#Pitfalls\"><span class=\"tocnumber\">4</span> <span class=\"toctext\"\
      >Pitfalls</span></a></li>\n</ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\"\
      \ id=\"Syntax\">Syntax</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/ForEach_loop?section=1\" title=\"Edit section: Syntax\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p>The\
      \ general syntax of the regular <b>ForEach</b> loop is:</p>\n<pre><b>ForEach</b>\
      \ <i>iteratorfunction</i><b>(</b><i>parameters</i><b>) {</b>\n  ...\n<b>}</b>\n\
      </pre>\n<p>The first two parameters of iterator functions are always a parameter\
      \ of a <a href=\"/Class_limiter\" title=\"Class limiter\" class=\"mw-redirect\"\
      >class limiter</a> type and an <i>out</i> parameter of the same type as the\
      \ first parameter's meta class, for example <code>class&lt;Actor&gt;</code>\
      \ and <code>Actor</code> respectively. Through special compiler \"magic\", the\
      \ accepted type of variables for the second parameter is further limited if\
      \ the first parameter specifies a subclass of the declared meta class. (see\
      \ <a href=\"#Examples\">examples</a> below for details)</p>\n<p>The special\
      \ syntax for dynamic array in <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine\
      \ 3\">Unreal Engine 3</a> is:</p>\n<pre><b>ForEach</b> <i>dynarray</i><b>(</b><i>valuevariable</i><b>)\
      \ {</b>\n  ...\n<b>}</b>\n</pre>\n<p>If the <i>dynarray</i> variable is of <a\
      \ href=\"/Type\" title=\"Type\" class=\"mw-redirect\">type</a> <code>array&lt;X&gt;</code>,\
      \ the <i>valuevariable</i> must be declared as type <code>X</code>.</p>\n<p>If\
      \ you also need access the the array index corresponding to the current value,\
      \ use:</p>\n<pre><b>ForEach</b> <i>dynarray</i><b>(</b><i>valuevariable</i><b>,</b>\
      \ <i>indexvariable</i><b>) {</b>\n  ...\n<b>}</b>\n</pre>\n<p>The <i>indexvariable</i>\
      \ must be declared as type <a href=\"/Int\" title=\"Int\" class=\"mw-redirect\"\
      >int</a>.</p>\n<h2><span class=\"mw-headline\" id=\"Iterator_functions\">Iterator\
      \ functions</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/ForEach_loop?section=2\" title=\"Edit section: Iterator\
      \ functions\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <p>Iterator functions, or \"iterators\" for short, are native <a href=\"/Functions\"\
      \ title=\"Functions\">functions</a> that have been declared with the special\
      \ modifier <i>iterator</i>. Iterators must be native and don't have a return\
      \ value. They can only be called as part of a <b>ForEach</b> loop and usually\
      \ have at least one <i>out</i> parameter.</p>\n<p>A typical iterator function\
      \ takes a class value as its first parameter and an object variable as its second\
      \ parameter, which is defined with the modifier <i>out</i>. Most iterator functions\
      \ have more than two parameters, some of them also declared as <i>out</i>, but\
      \ most of them are optional.</p>\n<p>A typical example is the VisibleCollidingActors\
      \ function in the Actor class:</p>\n<div class=\"code block\" style=\"font-family:monospace;padding-left:4em;text-indent:-4em\"\
      >native(312) final iterator function <b>VisibleCollidingActors</b>(class&lt;actor&gt;&#160;<b>BaseClass</b>,\
      \ out&#160;actor&#160;<b>Actor</b>, optional&#160;float&#160;<b>Radius</b>,\
      \ optional&#160;vector&#160;<b>Loc</b>, optional&#160;bool&#160;<b>bIgnoreHidden</b>);</div>\n\
      <h2><span class=\"mw-headline\" id=\"Examples\">Examples</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/ForEach_loop?section=3\"\
      \ title=\"Edit section: Examples\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A typical iterator function call might look like this\
      \ example:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n\
      <div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\"\
      >function</span> PokeTriggersFor<span class=\"br0\">(</span><span class=\"kw9\"\
      >Pawn</span> Other<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \  <span class=\"kw1\">local</span> <span class=\"kw4\">Trigger</span> T;\n\
      \ \n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span>Other <span\
      \ class=\"sy0\">==</span> <span class=\"kw5\">None</span><span class=\"br0\"\
      >)</span>\n    <span class=\"kw2\">return</span>; <span class=\"co1\">// ForEach\
      \ doesn't handle Accessed None gracefully!</span>\n \n  <span class=\"kw2\"\
      >foreach</span> Other.<span class=\"kw2\">RadiusActors</span><span class=\"\
      br0\">(</span><span class=\"kw1\">class</span><span class=\"st0\">'Trigger'</span>,\
      \ T, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span> <span class=\"\
      br0\">{</span>\n    T.<span class=\"kw4\">Touch</span><span class=\"br0\">(</span>Other<span\
      \ class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>This example shows various features of using\
      \ iterator functions in a <b>ForEach</b> loop:</p>\n<ul>\n<li>You can access\
      \ iterators of other objects than the one containing the code. Just make sure\
      \ you don't access the iterator function though <i>None</i> – before Unreal\
      \ Engine 3 the game will crash mercilessly with a cryptic error message in that\
      \ case! In this example an <a href=\"/If_statement\" title=\"If statement\"\
      >If statement</a> performs a <i>None</i> check before the iterator is executed.</li>\n\
      <li>If you specify a specific class as the first parameter, the second parameter\
      \ must be of the same type. It would actually be a compiler error if the local\
      \ <a href=\"/Variable\" title=\"Variable\" class=\"mw-redirect\">variable</a>\
      \ <i>T</i> was declared as type <code>Actor</code>.</li>\n</ul>\n<p>The array\
      \ iterators of <a href=\"/Unreal_Engine_3\" title=\"Unreal Engine 3\">Unreal\
      \ Engine 3</a> are straight forward to use. The following example iterates over\
      \ the <a href=\"/UE3:Actor_internal_variables_(UT3)#GeneratedEvents\" title=\"\
      UE3:Actor internal variables (UT3)\">GeneratedEvents</a> array of the Actor\
      \ containing this piece of code:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">function</span> IterateEvents<span class=\"br0\">(</span><span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\"\
      >local</span> SequenceEvent E;\n \n  <span class=\"kw2\">foreach</span> GeneratedEvents<span\
      \ class=\"br0\">(</span>E<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \    <span class=\"sy0\">`</span><span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>E<span class=\"br0\">)</span>;\n  <span class=\"br0\">}</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>Like in the previous example,\
      \ you can also iterate over dynamic arrays in other objects. Just remember to\
      \ perform a check for <i>None</i> first to prevent log warnings.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Pitfalls\">Pitfalls</span><span class=\"mw-editsection\"\
      ><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/ForEach_loop?section=4\"\
      \ title=\"Edit section: Pitfalls\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>A <b>foreach</b> loop iterates over a list of values.\
      \ How this list is implemented or how the engine iterates over it depends on\
      \ the iterator function used. Some iterators, such as <i>TraceActors</i> construct\
      \ a separate list and iterate over it. Others, such as <i>AllActors</i> or a\
      \ <a href=\"/Dynamic_array\" title=\"Dynamic array\" class=\"mw-redirect\">dynamic\
      \ array</a> iterator, operate on a list that is directly or indirectly accessible\
      \ inside the loop. Pay special attention when you modify the list in some way.\
      \ Adding items to the list, for example spawning actors during an <i>AllActors</i>\
      \ loop, can create an infinite loop where the engine continues to create actors\
      \ until it runs out of memory or crashes for other reasons! Similarly, you should\
      \ not modify a dynamic array while iterating over it.</p>\n<p>It is possible\
      \ to use <b>foreach</b> loops in <a href=\"/edit/State_code?redlink=1\" class=\"\
      new\" title=\"State code (page does not exist)\">state code</a>. However, using\
      \ <a href=\"/edit/Latent_function?redlink=1\" class=\"new\" title=\"Latent function\
      \ (page does not exist)\">latent functions</a> inside these loops may not work\
      \ as expected.</p>\n<table class=\"navbox nowraplinks\" style=\"\">\n<tr class=\"\
      navbox-header\">\n<th colspan=\"2\" class=\"navbox-header\" style=\"\">\n<div\
      \ style=\"position:relative; width:100%; white-space:nowrap;\">\n<div class=\"\
      noprint plainlinks\" style=\"background-color:transparent; padding:0; font-weight:normal;\
      \ font-size:xx-small; white-space:nowrap; position:absolute;left:0.5em;\"><a\
      \ href=\"/Template:Navbox_unrealscript\" title=\"Template:Navbox unrealscript\"\
      ><span title=\"View this template\">v</span></a>&#160;•&#160;<a href=\"/Template_talk:Navbox_unrealscript\"\
      \ title=\"Template talk:Navbox unrealscript\"><span title=\"Discussion about\
      \ this template\">d</span></a>&#160;•&#160;<a rel=\"nofollow\" class=\"external\
      \ text\" href=\"https://wiki.beyondunreal.com/edit/Template:Navbox_unrealscript\"\
      ><span title=\"You can edit this template. Please use the preview button before\
      \ saving.\">e</span></a></div>\n<a href=\"/UnrealScript_reference\" title=\"\
      UnrealScript reference\">UnrealScript reference</a></div>\n</th>\n</tr>\n<tr\
      \ class=\"navbox-body odd\">\n<th class=\"navbox-group\" style=\"\">Declarations</th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Preprocessor\" title=\"Preprocessor\"\
      >Preprocessor</a>&#160;• <a href=\"/Classes\" title=\"Classes\">Classes</a>&#160;•\
      \ <a href=\"/Interfaces\" title=\"Interfaces\">Interfaces</a>&#160;• <a href=\"\
      /Cpptext\" title=\"Cpptext\">Cpptext</a>&#160;• <a href=\"/Constants\" title=\"\
      Constants\">Constants</a>&#160;• <a href=\"/Enums\" title=\"Enums\">Enums</a>&#160;•\
      \ <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;• <a href=\"/Variables\"\
      \ title=\"Variables\">Variables</a>&#160;(<a href=\"/Metadata\" title=\"Metadata\"\
      >Metadata</a>)&#160;• <a href=\"/Replication_block\" title=\"Replication block\"\
      >Replication block</a>&#160;• <a href=\"/Operators\" title=\"Operators\">Operators</a>&#160;•\
      \ <a href=\"/Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"\
      /Functions\" title=\"Functions\">Functions</a>&#160;• <a href=\"/States\" title=\"\
      States\">States</a>&#160;• <a href=\"/Defaultproperties\" title=\"Defaultproperties\"\
      >Defaultproperties</a>&#160;(<a href=\"/Subobjects\" title=\"Subobjects\">Subobjects</a>)</td>\n\
      </tr>\n<tr class=\"navbox-body even\">\n<th class=\"navbox-group\" style=\"\"\
      ><a href=\"/Types\" title=\"Types\">Types</a></th>\n<td class=\"navbox-body\"\
      \ style=\"\"><a href=\"/Bool\" title=\"Bool\" class=\"mw-redirect\">bool</a>&#160;•\
      \ <a href=\"/Byte\" title=\"Byte\" class=\"mw-redirect\">byte</a>&#160;• <a\
      \ href=\"/Float\" title=\"Float\" class=\"mw-redirect\">float</a>&#160;• <a\
      \ href=\"/Int\" title=\"Int\" class=\"mw-redirect\">int</a>&#160;• <a href=\"\
      /Name\" title=\"Name\" class=\"mw-redirect\">name</a>&#160;• <a href=\"/String\"\
      \ title=\"String\">string</a>&#160;• <a href=\"/Types#Reference_types\" title=\"\
      Types\">Object</a>&#160;• <a href=\"/Class_limiter#Class\" title=\"Class limiter\"\
      \ class=\"mw-redirect\">Class</a>&#160;• <a href=\"/Enums\" title=\"Enums\"\
      >Enums</a>&#160;• <a href=\"/Structs\" title=\"Structs\">Structs</a>&#160;(<a\
      \ href=\"/Vector\" title=\"Vector\">Vector</a>&#160;⋅ <a href=\"/Rotator\" title=\"\
      Rotator\">Rotator</a>&#160;⋅ <a href=\"/Quat\" title=\"Quat\" class=\"mw-redirect\"\
      >Quat</a>&#160;⋅ <a href=\"/Color\" title=\"Color\">Color</a>)&#160;• <a href=\"\
      /Static_arrays\" title=\"Static arrays\">Static arrays</a>&#160;• <a href=\"\
      /Dynamic_arrays\" title=\"Dynamic arrays\">Dynamic arrays</a>&#160;• <a href=\"\
      /Delegates\" title=\"Delegates\">Delegates</a>&#160;• <a href=\"/Typecasting\"\
      \ title=\"Typecasting\">Typecasting</a></td>\n</tr>\n<tr class=\"navbox-body\
      \ odd\">\n<th class=\"navbox-group\" style=\"\"><a href=\"/Literals\" title=\"\
      Literals\">Literals</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /Literals#Boolean_values\" title=\"Literals\">Boolean</a>&#160;• <a href=\"\
      /Literals#Float_numbers\" title=\"Literals\">Float</a>&#160;• <a href=\"/Literals#Integer_numbers\"\
      \ title=\"Literals\">Integer</a>&#160;• <a href=\"/Literals#Names\" title=\"\
      Literals\">Names</a>&#160;• <a href=\"/Literals#Objects\" title=\"Literals\"\
      >Objects</a> (<a href=\"/None\" title=\"None\" class=\"mw-redirect\">None</a>&#160;⋅\
      \ <a href=\"/Self\" title=\"Self\" class=\"mw-redirect\">Self</a>)&#160;• <a\
      \ href=\"/Literals#Vectors\" title=\"Literals\">Vectors</a>&#160;• <a href=\"\
      /Literals#Rotators\" title=\"Literals\">Rotators</a>&#160;• <a href=\"/Literals#Strings\"\
      \ title=\"Literals\">Strings</a></td>\n</tr>\n<tr class=\"navbox-body even\"\
      >\n<th class=\"navbox-group\" style=\"\"><a href=\"/Flow_control\" title=\"\
      Flow control\">Flow</a></th>\n<td class=\"navbox-body\" style=\"\"><a href=\"\
      /GoTo_statement\" title=\"GoTo statement\">GoTo</a>&#160;• <a href=\"/If_statement\"\
      \ title=\"If statement\">If</a>&#160;• <a href=\"/Assert_statement\" title=\"\
      Assert statement\">Assert</a>&#160;• <a href=\"/Return_statement\" title=\"\
      Return statement\">Return</a>&#160;• <a href=\"/Stop_statement\" title=\"Stop\
      \ statement\">Stop</a>&#160;• <a href=\"/Switch_statement\" title=\"Switch statement\"\
      >Switch</a>&#160;• <a href=\"/While_loop\" title=\"While loop\">While</a>&#160;•\
      \ <a href=\"/Do...Until_loop\" title=\"Do...Until loop\">Do...Until</a>&#160;•\
      \ <a href=\"/For_loop\" title=\"For loop\">For</a>&#160;• <strong class=\"selflink\"\
      >ForEach</strong>&#160;• <a href=\"/Break_statement\" title=\"Break statement\"\
      >Break</a>&#160;• <a href=\"/Continue_statement\" title=\"Continue statement\"\
      >Continue</a></td>\n</tr>\n<tr class=\"navbox-body odd\">\n<th class=\"navbox-group\"\
      \ style=\"\"><a href=\"/Specifiers\" title=\"Specifiers\">Specifiers</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/Function_call_specifiers#Super\"\
      \ title=\"Function call specifiers\">Super</a>&#160;• <a href=\"/Function_call_specifiers#Global\"\
      \ title=\"Function call specifiers\">Global</a>&#160;• <a href=\"/Functions#Syntax_3\"\
      \ title=\"Functions\">Static</a>&#160;• <a href=\"/Variables#Accessing_variables\"\
      \ title=\"Variables\">Default</a>&#160;• <a href=\"/Constants#Usage\" title=\"\
      Constants\">Const</a></td>\n</tr>\n<tr class=\"navbox-body even\">\n<th class=\"\
      navbox-group\" style=\"\"><a href=\"/UnrealScript\" title=\"UnrealScript\">UnrealScript</a></th>\n\
      <td class=\"navbox-body\" style=\"\"><a href=\"/UnrealScript_syntax\" title=\"\
      UnrealScript syntax\">Syntax</a>&#160;• <a href=\"/UC_File\" title=\"UC File\"\
      >.UC</a>&#160;• <a href=\"/edit/UCI_File?redlink=1\" class=\"new\" title=\"\
      UCI File (page does not exist)\">.UCI</a>&#160;• <a href=\"/UPKG_File\" title=\"\
      UPKG File\">.UPKG</a>&#160;• <a href=\"/Comments\" title=\"Comments\">Comments</a>&#160;•\
      \ <a href=\"/Compiler_directives\" title=\"Compiler directives\">#directives</a>&#160;•\
      \ <a href=\"/edit/Native_coding?redlink=1\" class=\"new\" title=\"Native coding\
      \ (page does not exist)\">Native</a></td>\n</tr>\n</table>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.099 seconds\nReal time usage: 0.103 seconds\nPreprocessor\
      \ visited node count: 202/1000000\nPreprocessor generated node count: 949/1000000\n\
      Post‐expand include size: 10978/2097152 bytes\nTemplate argument size: 4449/2097152\
      \ bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \   45.328      1 - -total\n 45.74%   20.735      1 - Template:Navbox_unrealscript\n\
      \ 33.32%   15.105      1 - Template:Navbox\n  6.98%    3.164      1 - Template:Tnavbar\n\
      \  4.94%    2.238      1 - Template:Code\n-->\n\n<!-- Saved in parser cache\
      \ with key wiki:pcache:idhash:23806-0!*!0!!en!*!* and timestamp 20221117233302\
      \ and revision id 44121\n -->\n"
  categories:
  - sortkey: "ForEach loop"
    name: "UnrealScript_reference"
  links:
  - ns: 0
    exists: true
    name: "Bool"
  - ns: 0
    exists: true
    name: "Variable"
  - ns: 0
    exists: true
    name: "Types"
  - ns: 0
    exists: true
    name: "Stop statement"
  - ns: 0
    exists: true
    name: "Float"
  - ns: 0
    exists: true
    name: "Dynamic arrays"
  - ns: 0
    exists: true
    name: "Typecasting"
  - ns: 0
    exists: true
    name: "Name"
  - ns: 0
    exists: true
    name: "States"
  - ns: 0
    exists: true
    name: "UnrealScript reference"
  - ns: 0
    exists: true
    name: "Assert statement"
  - ns: 0
    exists: true
    name: "Flow control"
  - ns: 0
    exists: true
    name: "UnrealScript"
  - ns: 0
    exists: true
    name: "Cpptext"
  - ns: 0
    exists: true
    name: "Comments"
  - ns: 0
    exists: false
    name: "State code"
  - ns: 0
    exists: true
    name: "Replication block"
  - ns: 0
    exists: true
    name: "Break statement"
  - ns: 0
    exists: true
    name: "UPKG File"
  - ns: 0
    exists: false
    name: "Native coding"
  - ns: 0
    exists: true
    name: "Interfaces"
  - ns: 0
    exists: true
    name: "Functions"
  - ns: 0
    exists: true
    name: "Vector"
  - ns: 0
    exists: true
    name: "Rotator"
  - ns: 0
    exists: true
    name: "Function call specifiers"
  - ns: 0
    exists: true
    name: "If statement"
  - ns: 0
    exists: true
    name: "UnrealScript syntax"
  - ns: 0
    exists: true
    name: "Structs"
  - ns: 0
    exists: true
    name: "Dynamic array"
  - ns: 0
    exists: true
    name: "Enums"
  - ns: 0
    exists: true
    name: "Metadata"
  - ns: 0
    exists: true
    name: "Class limiter"
  - ns: 0
    exists: true
    name: "Color"
  - ns: 0
    exists: true
    name: "Delegates"
  - ns: 0
    exists: false
    name: "UCI File"
  - ns: 0
    exists: true
    name: "Quat"
  - ns: 0
    exists: true
    name: "Continue statement"
  - ns: 0
    exists: true
    name: "Do...Until loop"
  - ns: 0
    exists: true
    name: "While loop"
  - ns: 106
    exists: true
    name: "UE3:Actor internal variables (UT3)"
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Subobjects"
  - ns: 0
    exists: true
    name: "Operators"
  - ns: 0
    exists: true
    name: "None"
  - ns: 0
    exists: true
    name: "Self"
  - ns: 0
    exists: true
    name: "String"
  - ns: 0
    exists: true
    name: "Variables"
  - ns: 0
    exists: true
    name: "Unreal Engine 3"
  - ns: 0
    exists: true
    name: "Return statement"
  - ns: 11
    exists: true
    name: "Template talk:Navbox unrealscript"
  - ns: 0
    exists: true
    name: "Static arrays"
  - ns: 0
    exists: true
    name: "UC File"
  - ns: 0
    exists: true
    name: "Int"
  - ns: 0
    exists: true
    name: "Byte"
  - ns: 0
    exists: true
    name: "Specifiers"
  - ns: 0
    exists: true
    name: "GoTo statement"
  - ns: 0
    exists: false
    name: "Latent function"
  - ns: 0
    exists: true
    name: "Classes"
  - ns: 0
    exists: true
    name: "Type"
  - ns: 0
    exists: true
    name: "Constants"
  - ns: 0
    exists: true
    name: "Defaultproperties"
  - ns: 0
    exists: true
    name: "Preprocessor"
  - ns: 0
    exists: true
    name: "Literals"
  - ns: 0
    exists: true
    name: "Compiler directives"
  - ns: 0
    exists: true
    name: "For loop"
  - ns: 0
    exists: true
    name: "Switch statement"
  templates:
  - ns: 10
    exists: true
    name: "Template:Navbox unrealscript"
  - ns: 10
    exists: true
    name: "Template:Navbox"
  - ns: 10
    exists: true
    name: "Template:Code"
  - ns: 10
    exists: true
    name: "Template:Tnavbar"
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Syntax"
    number: "1"
    index: "1"
    fromtitle: "ForEach_loop"
    byteoffset: 264
    anchor: "Syntax"
  - toclevel: 1
    level: "2"
    line: "Iterator functions"
    number: "2"
    index: "2"
    fromtitle: "ForEach_loop"
    byteoffset: 1411
    anchor: "Iterator_functions"
  - toclevel: 1
    level: "2"
    line: "Examples"
    number: "3"
    index: "3"
    fromtitle: "ForEach_loop"
    byteoffset: 2362
    anchor: "Examples"
  - toclevel: 1
    level: "2"
    line: "Pitfalls"
    number: "4"
    index: "4"
    fromtitle: "ForEach_loop"
    byteoffset: 3866
    anchor: "Pitfalls"
  displaytitle: "ForEach loop"
  iwlinks: []
  wikitext:
    text: "The '''ForEach''' loop in [[UnrealScript]] can be used to iterate over\
      \ the output of [[#Iterator functions|iterator functions]]. Additionally, [[Unreal\
      \ Engine 3]] provides a special version of '''ForEach''' that iterates over\
      \ the elements of a [[dynamic array]].\n\n==Syntax==\nThe general syntax of\
      \ the regular '''ForEach''' loop is:\n '''ForEach''' ''iteratorfunction'''''('''''parameters''''')\
      \ {'''\n   ...\n '''}'''\nThe first two parameters of iterator functions are\
      \ always a parameter of a [[class limiter]] type and an ''out'' parameter of\
      \ the same type as the first parameter's meta class, for example <code>class<Actor></code>\
      \ and <code>Actor</code> respectively. Through special compiler \"magic\", the\
      \ accepted type of variables for the second parameter is further limited if\
      \ the first parameter specifies a subclass of the declared meta class. (see\
      \ [[#Examples|examples]] below for details)\n\nThe special syntax for dynamic\
      \ array in [[Unreal Engine 3]] is:\n '''ForEach''' ''dynarray'''''('''''valuevariable''''')\
      \ {'''\n   ...\n '''}'''\nIf the ''dynarray'' variable is of [[type]] <code>array<X></code>,\
      \ the ''valuevariable'' must be declared as type <code>X</code>.\n\nIf you also\
      \ need access the the array index corresponding to the current value, use:\n\
      \ '''ForEach''' ''dynarray'''''('''''valuevariable''''',''' ''indexvariable''''')\
      \ {'''\n   ...\n '''}'''\nThe ''indexvariable'' must be declared as type [[int]].\n\
      \n==Iterator functions==\nIterator functions, or \"iterators\" for short, are\
      \ native [[functions]] that have been declared with the special modifier ''iterator''.\
      \ Iterators must be native and don't have a return value. They can only be called\
      \ as part of a '''ForEach''' loop and usually have at least one ''out'' parameter.\n\
      \nA typical iterator function takes a class value as its first parameter and\
      \ an object variable as its second parameter, which is defined with the modifier\
      \ ''out''. Most iterator functions have more than two parameters, some of them\
      \ also declared as ''out'', but most of them are optional.\n\nA typical example\
      \ is the VisibleCollidingActors function in the Actor class:\n{{code|native(312)\
      \ final iterator function '''VisibleCollidingActors'''(class<actor>&nbsp;'''BaseClass''',\
      \ out&nbsp;actor&nbsp;'''Actor''', optional&nbsp;float&nbsp;'''Radius''', optional&nbsp;vector&nbsp;'''Loc''',\
      \ optional&nbsp;bool&nbsp;'''bIgnoreHidden''');}}\n\n==Examples==\nA typical\
      \ iterator function call might look like this example:\n<uscript>\nfunction\
      \ PokeTriggersFor(Pawn Other)\n{\n  local Trigger T;\n\n  if (Other == None)\n\
      \    return; // ForEach doesn't handle Accessed None gracefully!\n\n  foreach\
      \ Other.RadiusActors(class'Trigger', T, 100.0) {\n    T.Touch(Other);\n  }\n\
      }\n</uscript>\nThis example shows various features of using iterator functions\
      \ in a '''ForEach''' loop:\n* You can access iterators of other objects than\
      \ the one containing the code. Just make sure you don't access the iterator\
      \ function though ''None'' &ndash; before Unreal Engine 3 the game will crash\
      \ mercilessly with a cryptic error message in that case! In this example an\
      \ [[If statement]] performs a ''None'' check before the iterator is executed.\n\
      * If you specify a specific class as the first parameter, the second parameter\
      \ must be of the same type. It would actually be a compiler error if the local\
      \ [[variable]] ''T'' was declared as type <code>Actor</code>.\n\nThe array iterators\
      \ of [[Unreal Engine 3]] are straight forward to use. The following example\
      \ iterates over the [[UE3:Actor internal variables (UT3)#GeneratedEvents|GeneratedEvents]]\
      \ array of the Actor containing this piece of code:\n<uscript>\nfunction IterateEvents()\n\
      {\n  local SequenceEvent E;\n\n  foreach GeneratedEvents(E) {\n    `log(E);\n\
      \  }\n}\n</uscript>\nLike in the previous example, you can also iterate over\
      \ dynamic arrays in other objects. Just remember to perform a check for ''None''\
      \ first to prevent log warnings.\n\n==Pitfalls==\nA '''foreach''' loop iterates\
      \ over a list of values. How this list is implemented or how the engine iterates\
      \ over it depends on the iterator function used. Some iterators, such as ''TraceActors''\
      \ construct a separate list and iterate over it. Others, such as ''AllActors''\
      \ or a [[dynamic array]] iterator, operate on a list that is directly or indirectly\
      \ accessible inside the loop.\nPay special attention when you modify the list\
      \ in some way. Adding items to the list, for example spawning actors during\
      \ an ''AllActors'' loop, can create an infinite loop where the engine continues\
      \ to create actors until it runs out of memory or crashes for other reasons!\
      \ Similarly, you should not modify a dynamic array while iterating over it.\n\
      \nIt is possible to use '''foreach''' loops in [[state code]]. However, using\
      \ [[latent function]]s inside these loops may not work as expected.\n\n{{navbox\
      \ unrealscript}}"
  properties: []
  revId: 44121
name: "ForEach loop"
revision:
  revid: 44121
  parentid: 44119
  user: "Wormbo"
  timestamp: 1289768004.000000000
  comment: "Undo revision 44119 by [[Special:Contributions/82.73.101.51|82.73.101.51]]\
    \ ([[User talk:82.73.101.51|Talk]]) - That's actually how you log stuff in UE3"
timestamp: 1668754930.436279000
