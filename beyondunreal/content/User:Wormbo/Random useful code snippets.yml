---
parse:
  title: "User:Wormbo/Random useful code snippets"
  text:
    text: "<p>On this page I will post various code snippets that are too useful to\
      \ keep them to myself. Some of these probably deserve their own article pages\
      \ with background information, and maybe I'll create them at some point.</p>\n\
      <p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Linear_search_one-liner\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">Linear search one-liner</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-2\"><a href=\"#Binary_Search\"><span class=\"\
      tocnumber\">2</span> <span class=\"toctext\">Binary Search</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-3\"><a href=\"#Finding_common_string_prefix\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Finding common string\
      \ prefix</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Collapsing_whitespace\"\
      ><span class=\"tocnumber\">4</span> <span class=\"toctext\">Collapsing whitespace</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-5\"><a href=\"#Integer_modulo_operator\"><span\
      \ class=\"tocnumber\">5</span> <span class=\"toctext\">Integer modulo operator</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-6\"><a href=\"#ArcTan_function\"><span class=\"\
      tocnumber\">6</span> <span class=\"toctext\">ArcTan function</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-7\"><a href=\"#Vector_magic\"><span class=\"\
      tocnumber\">7</span> <span class=\"toctext\">Vector magic</span></a>\n<ul>\n\
      <li class=\"toclevel-2 tocsection-8\"><a href=\"#Distance_of_point_from_line\"\
      ><span class=\"tocnumber\">7.1</span> <span class=\"toctext\">Distance of point\
      \ from line</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"\
      #In_front_or_behind.3F\"><span class=\"tocnumber\">7.2</span> <span class=\"\
      toctext\">In front or behind?</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"\
      ><a href=\"#Closest_point_on_a_line\"><span class=\"tocnumber\">7.3</span> <span\
      \ class=\"toctext\">Closest point on a line</span></a></li>\n<li class=\"toclevel-2\
      \ tocsection-11\"><a href=\"#Vector_to_Rotator_alternative\"><span class=\"\
      tocnumber\">7.4</span> <span class=\"toctext\">Vector to Rotator alternative</span></a></li>\n\
      </ul>\n</li>\n<li class=\"toclevel-1 tocsection-12\"><a href=\"#Float_to_int_cast\"\
      ><span class=\"tocnumber\">8</span> <span class=\"toctext\">Float to int cast</span></a></li>\n\
      </ul>\n</div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Linear_search_one-liner\"\
      >Linear search one-liner</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=1\"\
      \ title=\"Edit section: Linear search one-liner\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The most simple way to search for a value in an array\
      \ is <a href=\"http://en.wikipedia.org/wiki/linear_search\" class=\"extiw\"\
      \ title=\"wp:linear search\">linear search</a>. The following implementation\
      \ is (almost) a one-liner that works on all arrays, sorted or not.</p>\n<div\
      \ dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span\
      \ class=\"kw5\">int</span> i;\n \ni <span class=\"sy0\">=</span> A.<span class=\"\
      me0\">Length</span>;\n<span class=\"kw2\">do</span> <span class=\"br0\">{</span><span\
      \ class=\"br0\">}</span> until <span class=\"br0\">(</span><span class=\"sy0\"\
      >--</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span\
      \ class=\"sy0\">||</span> A<span class=\"br0\">[</span>i<span class=\"br0\"\
      >]</span> <span class=\"sy0\">==</span> Value<span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>Success is indicated by <code>i &gt;= 0</code>, failure by <code>i\
      \ == -1</code> or <code>i == INDEX_NONE</code> in UE3.</p>\n<p>If the array\
      \ is sorted and has more than just a few elements, you should consider using\
      \ binary search instead.</p>\n<h2><span class=\"mw-headline\" id=\"Binary_Search\"\
      >Binary Search</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=2\"\
      \ title=\"Edit section: Binary Search\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The following very simply piece of code implements\
      \ the <a href=\"http://en.wikipedia.org/wiki/binary_search_algorithm\" class=\"\
      extiw\" title=\"wp:binary search algorithm\">binary search algorithm</a> with\
      \ deferred detection of equality, looking for <i>Value</i> in array <i>A</i>.\
      \ If <i>Value</i> isn't in <i>A</i>, the code returns the index where <i>Value</i>\
      \ would have to be inserted.</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> <span class=\"kw5\">int</span> Low, High,\
      \ Middle;\n \nLow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\n\
      High <span class=\"sy0\">=</span> A.<span class=\"me0\">Length</span>;\n<span\
      \ class=\"kw2\">while</span> <span class=\"br0\">(</span>Low <span class=\"\
      sy0\">&lt;</span> High<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  Middle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>High <span\
      \ class=\"sy0\">+</span> Low<span class=\"br0\">)</span> <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">2</span>;\n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>A<span class=\"br0\">[</span>Middle<span class=\"br0\"\
      >]</span> <span class=\"sy0\">&lt;</span> Value<span class=\"br0\">)</span>\n\
      \    Low <span class=\"sy0\">=</span> Middle <span class=\"sy0\">+</span> <span\
      \ class=\"nu0\">1</span>;\n  <span class=\"kw2\">else</span>\n    High <span\
      \ class=\"sy0\">=</span> Middle;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>As you can see, the advantage here is that each loop iteration only\
      \ performs a single less-than comparison between the search value and an array\
      \ element.</p>\n<p>So, why would you combine the equality and greater-than comparisons\
      \ and give up early abort? Quite simple: The equality comparison would fail\
      \ most of the time anyway, so it doesn't actually give that much of an advantage,\
      \ considering binary search only has an overall worst case time complexity of\
      \ <code>O(log<sub>2</sub>n)</code>. And, well, you only need to implement a\
      \ less-than comparison for custom data types as opposed to less-then and greater-than.\
      \ Here \"less than\" could actually mean \"greater than\" if the array is sorted\
      \ in descending order or anything else, as long as it is a <a href=\"http://en.wikipedia.org/wiki/strict_total_order\"\
      \ class=\"extiw\" title=\"wp:strict total order\">strict total order</a> on\
      \ the possible values for the array's <a href=\"/Type\" title=\"Type\" class=\"\
      mw-redirect\">type</a>.</p>\n<p>To figure out whether you found the value or\
      \ not, an additional comparison is required:</p>\n<div dir=\"ltr\" class=\"\
      mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n\
      <pre class=\"de1\"><span class=\"kw2\">if</span> <span class=\"br0\">(</span>Low\
      \ <span class=\"sy0\">&lt;</span> A.<span class=\"me0\">Length</span> <span\
      \ class=\"sy0\">&amp;&amp;</span> A<span class=\"br0\">[</span>Low<span class=\"\
      br0\">]</span> <span class=\"sy0\">==</span> Value<span class=\"br0\">)</span>\n\
      \  <span class=\"co1\">// found it</span>\n<span class=\"kw2\">else</span>\n\
      \  <span class=\"co1\">// not found</span></pre></div>\n</div>\n<p>You can assume\
      \ that <i>Low</i> always is a valid insert index less than or equal to <code>A.Length</code>,\
      \ so <code>A.Insert(Low, 1); A[Low] = Value;</code> (or <code>A.InsertItem(Low,\
      \ Value);</code> in <a href=\"/UE3\" title=\"UE3\" class=\"mw-redirect\">UE3</a>)\
      \ will always work correctly.</p>\n<p>It is guaranteed that <code>Low &lt; A.Length</code>\
      \ implies <code>A[Low] &gt;= Value</code> and <code>Low &gt; 0</code> implies\
      \ <code>A[Low-1] &lt; Value</code>. That means if you want to remove all values\
      \ less than <i>Value</i>, you can simply do <code>A.Remove(0, Low)</code>. To\
      \ remove all values greater than or equal to <i>Value</i>, you use <code>A.Remove(Low,\
      \ A.Length - Low)</code>.</p>\n<p>To find the first index with a value greater\
      \ than <i>Value</i>, you just need a tiny modification:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">int</span>\
      \ Low, High, Middle;\n \nLow <span class=\"sy0\">=</span> <span class=\"nu0\"\
      >0</span>;\nHigh <span class=\"sy0\">=</span> A.<span class=\"me0\">Length</span>;\n\
      <span class=\"kw2\">while</span> <span class=\"br0\">(</span>Low <span class=\"\
      sy0\">&lt;</span> High<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n\
      \  Middle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>High <span\
      \ class=\"sy0\">+</span> Low<span class=\"br0\">)</span> <span class=\"sy0\"\
      >/</span> <span class=\"nu0\">2</span>;\n  <span class=\"kw2\">if</span> <span\
      \ class=\"br0\">(</span>A<span class=\"br0\">[</span>Middle<span class=\"br0\"\
      >]</span> <span class=\"sy0\">&lt;=</span> Value<span class=\"br0\">)</span>\n\
      \    Low <span class=\"sy0\">=</span> Middle <span class=\"sy0\">+</span> <span\
      \ class=\"nu0\">1</span>;\n  <span class=\"kw2\">else</span>\n    High <span\
      \ class=\"sy0\">=</span> Middle;\n<span class=\"br0\">}</span></pre></div>\n\
      </div>\n<p>This version can be used if you want to ensure that new instances\
      \ of values considered as \"equal\" are inserted after all previous instances,\
      \ whereas the other version of the algorithm finds an insert location before\
      \ all other equal instances.</p>\n<p>Again you can assume that <i>Low</i> always\
      \ is a valid insert index less than or equal to <code>A.Length</code>. It is\
      \ guaranteed that <code>Low &lt; A.Length</code> implies <code>A[Low] &gt; Value</code>\
      \ and <code>Low &gt; 0</code> implies <code>A[Low-1] &lt;= Value</code>. That\
      \ means if you want to remove all values less than or equal to <i>Value</i>,\
      \ you can simply do <code>A.Remove(0, Low)</code>. To remove all values greater\
      \ than <i>Value</i>, you use <code>A.Remove(Low, A.Length - Low)</code>. Note\
      \ how the \"or equal to\" now is part of the other side of the array.</p>\n\
      <h2><span class=\"mw-headline\" id=\"Finding_common_string_prefix\">Finding\
      \ common string prefix</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=3\"\
      \ title=\"Edit section: Finding common string prefix\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h2>\n<p>For <a href=\"http://en.wikipedia.org/wiki/incremental_encoding\"\
      \ class=\"extiw\" title=\"wp:incremental encoding\">incremental encoding</a>\
      \ you need to find the common prefix of two strings. Usually you'd do that by\
      \ comparing corresponding characters of both strings, starting from the front,\
      \ but UnrealScript is quite inefficient for that. I found that, at least in\
      \ UT2004, you could use the StrCmp() function to compare string prefixes. Now\
      \ you only need to find the largest prefix length at which both string starts\
      \ are still equal. Technically this is a searching operation and the easy way\
      \ to do it would be a linear search. But if there's a reasonably good chance\
      \ the strings have large common parts, you could even abuse binary search for\
      \ this. The following code snippet finds the largest common prefix length of\
      \ strings A and B:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">local</span> <span class=\"kw5\">int</span> Low, High, Middle;\n \nLow\
      \ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;\nHigh <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Min</span><span class=\"br0\">(</span><span\
      \ class=\"kw3\">Len</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span>,\
      \ <span class=\"kw3\">Len</span><span class=\"br0\">(</span>B<span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"kw2\">while</span>\
      \ <span class=\"br0\">(</span>Low <span class=\"sy0\">&lt;</span> High<span\
      \ class=\"br0\">)</span> <span class=\"br0\">{</span>\n  Middle <span class=\"\
      sy0\">=</span> <span class=\"br0\">(</span>High <span class=\"sy0\">+</span>\
      \ Low<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"\
      nu0\">2</span>;\n  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span\
      \ class=\"kw3\">StrCmp</span><span class=\"br0\">(</span>A, B, Middle<span class=\"\
      br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span>\n    Low <span class=\"sy0\">=</span> Middle <span\
      \ class=\"sy0\">+</span> <span class=\"nu0\">1</span>;\n  <span class=\"kw2\"\
      >else</span>\n    High <span class=\"sy0\">=</span> Middle;\n<span class=\"\
      br0\">}</span></pre></div>\n</div>\n<p>Looks scary? I hope so.&#160;;-)</p>\n\
      <h2><span class=\"mw-headline\" id=\"Collapsing_whitespace\">Collapsing whitespace</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=4\" title=\"\
      Edit section: Collapsing whitespace\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This code will remove leading and trailing whitespace\
      \ from a string and simultaneously collapse any sequence of space and tab characters\
      \ into a single space:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"><span class=\"\
      kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw1\">function</span>\
      \ <span class=\"kw5\">string</span> CollapseAndTrimWhitespace<span class=\"\
      br0\">(</span><span class=\"kw5\">string</span> S<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  S <span class=\"sy0\">=</span> <span class=\"\
      st0\">\" \"</span> <span class=\"sy0\">$</span> <span class=\"kw3\">Repl</span><span\
      \ class=\"br0\">(</span>S, <span class=\"kw3\">Chr</span><span class=\"br0\"\
      >(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>, <span class=\"\
      st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span>\
      \ <span class=\"st0\">\" \"</span>; <span class=\"co1\">// replace tabs with\
      \ spaces and enclose in space chars for collapsing</span>\n  <span class=\"\
      kw2\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">InStr</span><span\
      \ class=\"br0\">(</span>S, <span class=\"st0\">\"  \"</span><span class=\"br0\"\
      >)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"\
      nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span\
      \ class=\"co1\">// need whitespace collapsing?</span>\n    S <span class=\"\
      sy0\">=</span> <span class=\"kw3\">Repl</span><span class=\"br0\">(</span>S,\
      \ <span class=\"st0\">\"  \"</span>, <span class=\"st0\">\" \"</span><span class=\"\
      br0\">)</span>; <span class=\"co1\">// collapse two adjacent spaces to a single\
      \ space</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw2\">return</span>\
      \ <span class=\"kw3\">Mid</span><span class=\"br0\">(</span>S, <span class=\"\
      nu0\">1</span>, <span class=\"kw3\">Len</span><span class=\"br0\">(</span>S<span\
      \ class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span\
      \ class=\"br0\">)</span>; <span class=\"co1\">// remove enclosing space chars</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<p>I know, InStr() and Repl()\
      \ are really linear time operations, causing the algorithm to be something like\
      \ O(n*logn). But as usual UnrealScript's slowness adds a high constant part\
      \ to them, essentially making them constant time for reasonably short strings\
      \ (up to a few hundred characters), and the whole function sort-of O(logn).</p>\n\
      <h2><span class=\"mw-headline\" id=\"Integer_modulo_operator\">Integer modulo\
      \ operator</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=5\"\
      \ title=\"Edit section: Integer modulo operator\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The <a href=\"http://en.wikipedia.org/wiki/modulo_operation\"\
      \ class=\"extiw\" title=\"wp:modulo operation\">modulo</a> operator <code>%</code>\
      \ in UnrealScript is only defined for float operands, which can cause bad rounding\
      \ errors if you use it with large int values. The following code <a href=\"\
      http://en.wikipedia.org/wiki/Operator_overloading\" class=\"extiw\" title=\"\
      wp:Operator overloading\">overloads</a> the modulo operator for int values:</p>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">static</span> <span\
      \ class=\"kw1\">final</span> <span class=\"kw1\">operator</span><span class=\"\
      br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span> <span\
      \ class=\"kw5\">int</span> <span class=\"sy0\">%</span> <span class=\"br0\"\
      >(</span><span class=\"kw5\">int</span> A, <span class=\"kw5\">int</span> B<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw2\"\
      >return</span> A <span class=\"sy0\">-</span> <span class=\"br0\">(</span>A\
      \ <span class=\"sy0\">/</span> B<span class=\"br0\">)</span> <span class=\"\
      sy0\">*</span> B;\n<span class=\"br0\">}</span></pre></div>\n</div>\n<p>This\
      \ has similar semantics as the float modulo operator, i.e. it may return negative\
      \ values if you pass in negative operands. Note that (A/B)*B is not the same\
      \ as A due to integer division dropping any potential remainder.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"ArcTan_function\">ArcTan function</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=6\"\
      \ title=\"Edit section: ArcTan function\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>Need the standard one-parameter version of the <a\
      \ href=\"http://en.wikipedia.org/wiki/arctan\" class=\"extiw\" title=\"wp:arctan\"\
      >atan</a> function and your version of the game only provides the <a href=\"\
      http://en.wikipedia.org/wiki/atan2\" class=\"extiw\" title=\"wp:atan2\">two-parameter\
      \ version</a>? Try this one:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> ArcTan<span class=\"\
      br0\">(</span><span class=\"kw5\">float</span> A<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n  <span class=\"kw2\">return</span> <span class=\"\
      kw3\">ATan</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, A<span\
      \ class=\"br0\">)</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Vector_magic\">Vector magic</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=7\" title=\"\
      Edit section: Vector magic\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<h3><span class=\"mw-headline\" id=\"Distance_of_point_from_line\"\
      >Distance of point from line</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=8\"\
      \ title=\"Edit section: Distance of point from line\">edit</a><span class=\"\
      mw-editsection-bracket\">]</span></span></h3>\n<p>This one might be useful e.g.\
      \ for determining by how much a shot missed a target:</p>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">dist <span class=\"sy0\">=</span> <span class=\"kw3\"\
      >VSize</span><span class=\"br0\">(</span><span class=\"kw3\">Normal</span><span\
      \ class=\"br0\">(</span>ShotDir<span class=\"br0\">)</span> cross <span class=\"\
      br0\">(</span>TargetLocation <span class=\"sy0\">-</span> ShotStart<span class=\"\
      br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n<p>This formula\
      \ relies on the fact that the length of the <a href=\"http://en.wikipedia.org/wiki/cross_product\"\
      \ class=\"extiw\" title=\"wp:cross product\">cross product</a> is the product\
      \ of the two vector lengths times the <a href=\"http://en.wikipedia.org/wiki/sine\"\
      \ class=\"extiw\" title=\"wp:sine\">sine</a> of the angle between them. Note\
      \ that the resulting vector of the cross product itself is actually orthogonal\
      \ to both the shot direction and the vector pointing from the shot start to\
      \ the target direction.</p>\n<h3><span class=\"mw-headline\" id=\"In_front_or_behind.3F\"\
      >In front or behind?</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=9\"\
      \ title=\"Edit section: In front or behind?\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>You'd probably use this one in combination with the\
      \ above to figure out whether the target was actually shot at:</p>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\">bInFront <span class=\"sy0\">=</span> <span class=\"br0\"\
      >(</span>ShotDir dot <span class=\"br0\">(</span>TargetLocation <span class=\"\
      sy0\">-</span> ShotStart<span class=\"br0\">)</span><span class=\"br0\">)</span>\
      \ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>;</pre></div>\n\
      </div>\n<p>If you normalize both vectors, the <a href=\"http://en.wikipedia.org/wiki/dot_product\"\
      \ class=\"extiw\" title=\"wp:dot product\">dot product</a> actually gives you\
      \ the <a href=\"http://en.wikipedia.org/wiki/cosine\" class=\"extiw\" title=\"\
      wp:cosine\">cosine</a> of the angle between them. If you don't, the cosine is\
      \ multiplied by the product of the two vectors' lengths. Either way, the cosine\
      \ is positive for angles smaller than 90° and negative for angles greater than\
      \ 90°.</p>\n<h3><span class=\"mw-headline\" id=\"Closest_point_on_a_line\">Closest\
      \ point on a line</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=10\"\
      \ title=\"Edit section: Closest point on a line\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>If you want to know the point on a line that is closest\
      \ to some other point (usually) not on the line, you need to project the other\
      \ point onto the line:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\"\
      >\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\">ClosestPoint <span\
      \ class=\"sy0\">=</span> ShotStart <span class=\"sy0\">+</span> <span class=\"\
      kw3\">Normal</span><span class=\"br0\">(</span>ShotDir<span class=\"br0\">)</span>\
      \ <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\"\
      >Normal</span><span class=\"br0\">(</span>ShotDir<span class=\"br0\">)</span>\
      \ dot <span class=\"br0\">(</span>TargetLocation <span class=\"sy0\">-</span>\
      \ ShotStart<span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre></div>\n\
      </div>\n<p>You can obviously skip normalization if the shot direction already\
      \ is a <a href=\"http://en.wikipedia.org/wiki/unit_vector\" class=\"extiw\"\
      \ title=\"wp:unit vector\">unit vector</a>.</p>\n<h3><span class=\"mw-headline\"\
      \ id=\"Vector_to_Rotator_alternative\">Vector to Rotator alternative</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=11\" title=\"\
      Edit section: Vector to Rotator alternative\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h3>\n<p>The following code converts a vector to a rotator.\
      \ Instead of the yaw-then-pitch order of the <a href=\"/Typecasting#vector_to...\"\
      \ title=\"Typecasting\">vector-&gt;rotator typecast</a>, this conversion sort-of\
      \ applies pitch-then-yaw order. Short explanation:</p>\n<ul>\n<li>The typecast\
      \ calculates a rotator that gets from vect(1,0,0) to the target direction by\
      \ first rotating around the vertical axis, then around the resulting left/right\
      \ axis.</li>\n<li>This conversion calculates another rotator that gets from\
      \ vect(1,0,0) to the target direction, but it first rotates around the left/right\
      \ axis and then around the resulting upward axis.</li>\n</ul>\n<div dir=\"ltr\"\
      \ class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">local</span> <span class=\"kw5\">vector</span>\
      \ Dir; <span class=\"co1\">// input</span>\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">rotator</span> Result;\n<span class=\"kw1\">local</span>\
      \ <span class=\"kw5\">vector</span> X, Y, Z; <span class=\"co1\">// temp</span>\n\
      \ \nZ <span class=\"sy0\">=</span> <span class=\"kw3\">Normal</span><span class=\"\
      br0\">(</span>Dir cross <span class=\"kw3\">vect</span><span class=\"br0\">(</span><span\
      \ class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span\
      \ class=\"br0\">)</span><span class=\"br0\">)</span>;\nX <span class=\"sy0\"\
      >=</span> <span class=\"kw3\">Normal</span><span class=\"br0\">(</span>Dir<span\
      \ class=\"br0\">)</span>;\nY <span class=\"sy0\">=</span> Z cross X;\nResult\
      \ <span class=\"sy0\">=</span> <span class=\"kw3\">OrthoRotation</span><span\
      \ class=\"br0\">(</span>X, Y, Z<span class=\"br0\">)</span>;</pre></div>\n</div>\n\
      <h2><span class=\"mw-headline\" id=\"Float_to_int_cast\">Float to int cast</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/User:Wormbo/Random_useful_code_snippets?section=12\" title=\"\
      Edit section: Float to int cast\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>This isn't your standard typecast. Sometimes you want\
      \ to access the actual bits a float value consist of, e.g. to send it via a\
      \ TcpLink or UdpLink. UnrealScript doesn't provide any function to do that,\
      \ but prior to Unreal Engine 3 it is possible to exploit loopholes in the compiler\
      \ to achieve this kind of bitwise conversion.</p>\n<p>To convert between float\
      \ and int this way, you need two classes. Even if you only want to convert in\
      \ one direction, you still need both. Don't ask how this works, I won't explain.\
      \ And again: This will only work in Unreal Engine 1 and 2, because the compiler\
      \ no longer allows it in Unreal Engine 3.</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> IntConverter <span class=\"kw1\">extends</span>\
      \ <span class=\"kw8\">Object</span> <span class=\"kw1\">abstract</span>;\n \n\
      <span class=\"kw1\">var</span> <span class=\"kw5\">int</span> Value;\n \n<span\
      \ class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"\
      kw1\">function</span> <span class=\"kw5\">float</span> ToFloat<span class=\"\
      br0\">(</span><span class=\"kw5\">int</span> value<span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n    <span class=\"kw1\">default</span>.<span class=\"\
      me0\">Value</span> <span class=\"sy0\">=</span> value;\n    <span class=\"kw2\"\
      >return</span> <span class=\"kw6\">Super</span><span class=\"br0\">(</span>FloatConverter<span\
      \ class=\"br0\">)</span>.<span class=\"me0\">ReturnFloat</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span\
      \ class=\"kw1\">function</span> <span class=\"kw5\">int</span> ReturnInt<span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n\
      \    <span class=\"kw2\">return</span> <span class=\"kw1\">default</span>.<span\
      \ class=\"me0\">Value</span>;\n<span class=\"br0\">}</span></pre></div>\n</div>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> FloatConverter\
      \ <span class=\"kw1\">extends</span> <span class=\"kw8\">Object</span> <span\
      \ class=\"kw1\">abstract</span>;\n \n<span class=\"kw1\">var</span> <span class=\"\
      kw5\">float</span> Value;\n \n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">int</span>\
      \ ToInt<span class=\"br0\">(</span><span class=\"kw5\">float</span> value<span\
      \ class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\"\
      >default</span>.<span class=\"me0\">Value</span> <span class=\"sy0\">=</span>\
      \ value;\n    <span class=\"kw2\">return</span> <span class=\"kw6\">Super</span><span\
      \ class=\"br0\">(</span>IntConverter<span class=\"br0\">)</span>.<span class=\"\
      me0\">ReturnInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;\n\
      <span class=\"br0\">}</span>\n \n<span class=\"kw1\">static</span> <span class=\"\
      kw1\">final</span> <span class=\"kw1\">function</span> <span class=\"kw5\">float</span>\
      \ ReturnFloat<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span\
      \ class=\"br0\">{</span>\n    <span class=\"kw2\">return</span> <span class=\"\
      kw1\">default</span>.<span class=\"me0\">Value</span>;\n<span class=\"br0\"\
      >}</span></pre></div>\n</div>\n<p>To use the conversion, you simply call the\
      \ static ToInt or ToFloat method:</p>\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">local</span> <span class=\"kw5\">float</span> f;\n<span\
      \ class=\"kw1\">local</span> <span class=\"kw5\">int</span> i;\n \nf <span class=\"\
      sy0\">=</span> <span class=\"nu0\">123.45</span>;\n<span class=\"kw3\">log</span><span\
      \ class=\"br0\">(</span>f <span class=\"sy0\">@</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'FloatConverter'</span>.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">ToInt</span><span class=\"br0\">(</span>f<span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;\n \ni <span class=\"sy0\">=</span> <span\
      \ class=\"nu0\">12345</span>;\n<span class=\"kw3\">log</span><span class=\"\
      br0\">(</span>i <span class=\"sy0\">@</span> <span class=\"kw1\">class</span><span\
      \ class=\"st0\">'IntConverter'</span>.<span class=\"kw1\">static</span>.<span\
      \ class=\"me0\">ToFloat</span><span class=\"br0\">(</span>i<span class=\"br0\"\
      >)</span><span class=\"br0\">)</span>;</pre></div>\n</div>\n\n<!-- \nNewPP limit\
      \ report\nCPU time usage: 0.281 seconds\nReal time usage: 0.723 seconds\nPreprocessor\
      \ visited node count: 166/1000000\nPreprocessor generated node count: 368/1000000\n\
      Post‐expand include size: 27/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 3/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:29140-0!*!0!!en!*!*\
      \ and timestamp 20221117234349 and revision id 45928\n -->\n"
  categories:
  - sortkey: "Random useful code snippets"
    name: "UnrealScript_utils"
  links:
  - ns: 0
    exists: true
    name: "UE3"
  - ns: 0
    exists: true
    name: "Type"
  - ns: 0
    exists: true
    name: "Typecasting"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Linear search one-liner"
    number: "1"
    index: "1"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 218
    anchor: "Linear_search_one-liner"
  - toclevel: 1
    level: "2"
    line: "Binary Search"
    number: "2"
    index: "2"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 752
    anchor: "Binary_Search"
  - toclevel: 1
    level: "2"
    line: "Finding common string prefix"
    number: "3"
    index: "3"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 3989
    anchor: "Finding_common_string_prefix"
  - toclevel: 1
    level: "2"
    line: "Collapsing whitespace"
    number: "4"
    index: "4"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 5023
    anchor: "Collapsing_whitespace"
  - toclevel: 1
    level: "2"
    line: "Integer modulo operator"
    number: "5"
    index: "5"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 5947
    anchor: "Integer_modulo_operator"
  - toclevel: 1
    level: "2"
    line: "ArcTan function"
    number: "6"
    index: "6"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 6574
    anchor: "ArcTan_function"
  - toclevel: 1
    level: "2"
    line: "Vector magic"
    number: "7"
    index: "7"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 6857
    anchor: "Vector_magic"
  - toclevel: 2
    level: "3"
    line: "Distance of point from line"
    number: "7.1"
    index: "8"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 6874
    anchor: "Distance_of_point_from_line"
  - toclevel: 2
    level: "3"
    line: "In front or behind?"
    number: "7.2"
    index: "9"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 7441
    anchor: "In_front_or_behind.3F"
  - toclevel: 2
    level: "3"
    line: "Closest point on a line"
    number: "7.3"
    index: "10"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 7986
    anchor: "Closest_point_on_a_line"
  - toclevel: 2
    level: "3"
    line: "Vector to Rotator alternative"
    number: "7.4"
    index: "11"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 8393
    anchor: "Vector_to_Rotator_alternative"
  - toclevel: 1
    level: "2"
    line: "Float to int cast"
    number: "8"
    index: "12"
    fromtitle: "User:Wormbo/Random_useful_code_snippets"
    byteoffset: 9215
    anchor: "Float_to_int_cast"
  displaytitle: "User:Wormbo/Random useful code snippets"
  iwlinks:
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/cross_product"
    name: "wp:cross product"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/dot_product"
    name: "wp:dot product"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/Operator_overloading"
    name: "wp:Operator overloading"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/modulo_operation"
    name: "wp:modulo operation"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/sine"
    name: "wp:sine"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/incremental_encoding"
    name: "wp:incremental encoding"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/cosine"
    name: "wp:cosine"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/strict_total_order"
    name: "wp:strict total order"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/binary_search_algorithm"
    name: "wp:binary search algorithm"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/linear_search"
    name: "wp:linear search"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/arctan"
    name: "wp:arctan"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/atan2"
    name: "wp:atan2"
  - prefix: "wp"
    url: "http://en.wikipedia.org/wiki/unit_vector"
    name: "wp:unit vector"
  wikitext:
    text: "On this page I will post various code snippets that are too useful to keep\
      \ them to myself. Some of these probably deserve their own article pages with\
      \ background information, and maybe I'll create them at some point.\n\n==Linear\
      \ search one-liner==\nThe most simple way to search for a value in an array\
      \ is [[wp:linear search|linear search]]. The following implementation is (almost)\
      \ a one-liner that works on all arrays, sorted or not.\n<uscript>\nlocal int\
      \ i;\n\ni = A.Length;\ndo {} until (--i < 0 || A[i] == Value);\n</uscript>\n\
      Success is indicated by <code>i >= 0</code>, failure by <code>i == -1</code>\
      \ or <code>i == INDEX_NONE</code> in UE3.\n\nIf the array is sorted and has\
      \ more than just a few elements, you should consider using binary search instead.\n\
      \n==Binary Search==\nThe following very simply piece of code implements the\
      \ [[wp:binary search algorithm|binary search algorithm]] with deferred detection\
      \ of equality, looking for ''Value'' in array ''A''. If ''Value'' isn't in ''A'',\
      \ the code returns the index where ''Value'' would have to be inserted.\n<uscript>\n\
      local int Low, High, Middle;\n\nLow = 0;\nHigh = A.Length;\nwhile (Low < High)\
      \ {\n  Middle = (High + Low) / 2;\n  if (A[Middle] < Value)\n    Low = Middle\
      \ + 1;\n  else\n    High = Middle;\n}\n</uscript>\nAs you can see, the advantage\
      \ here is that each loop iteration only performs a single less-than comparison\
      \ between the search value and an array element.\n\nSo, why would you combine\
      \ the equality and greater-than comparisons and give up early abort? Quite simple:\
      \ The equality comparison would fail most of the time anyway, so it doesn't\
      \ actually give that much of an advantage, considering binary search only has\
      \ an overall worst case time complexity of <code>O(log<sub>2</sub>n)</code>.\
      \ And, well, you only need to implement a less-than comparison for custom data\
      \ types as opposed to less-then and greater-than. Here \"less than\" could actually\
      \ mean \"greater than\" if the array is sorted in descending order or anything\
      \ else, as long as it is a [[wp:strict total order|strict total order]] on the\
      \ possible values for the array's [[type]].\n\nTo figure out whether you found\
      \ the value or not, an additional comparison is required:\n<uscript>\nif (Low\
      \ < A.Length && A[Low] == Value)\n  // found it\nelse\n  // not found\n</uscript>\n\
      You can assume that ''Low'' always is a valid insert index less than or equal\
      \ to <code>A.Length</code>, so <code>A.Insert(Low, 1); A[Low] = Value;</code>\
      \ (or <code>A.InsertItem(Low, Value);</code> in [[UE3]]) will always work correctly.\n\
      \nIt is guaranteed that <code>Low < A.Length</code> implies <code>A[Low] >=\
      \ Value</code> and <code>Low > 0</code> implies <code>A[Low-1] < Value</code>.\
      \ That means if you want to remove all values less than ''Value'', you can simply\
      \ do <code>A.Remove(0, Low)</code>. To remove all values greater than or equal\
      \ to ''Value'', you use <code>A.Remove(Low, A.Length - Low)</code>.\n\nTo find\
      \ the first index with a value greater than ''Value'', you just need a tiny\
      \ modification:\n<uscript>\nlocal int Low, High, Middle;\n\nLow = 0;\nHigh =\
      \ A.Length;\nwhile (Low < High) {\n  Middle = (High + Low) / 2;\n  if (A[Middle]\
      \ <= Value)\n    Low = Middle + 1;\n  else\n    High = Middle;\n}\n</uscript>\n\
      This version can be used if you want to ensure that new instances of values\
      \ considered as \"equal\" are inserted after all previous instances, whereas\
      \ the other version of the algorithm finds an insert location before all other\
      \ equal instances.\n\nAgain you can assume that ''Low'' always is a valid insert\
      \ index less than or equal to <code>A.Length</code>. It is guaranteed that <code>Low\
      \ < A.Length</code> implies <code>A[Low] > Value</code> and <code>Low > 0</code>\
      \ implies <code>A[Low-1] <= Value</code>. That means if you want to remove all\
      \ values less than or equal to ''Value'', you can simply do <code>A.Remove(0,\
      \ Low)</code>. To remove all values greater than ''Value'', you use <code>A.Remove(Low,\
      \ A.Length - Low)</code>. Note how the \"or equal to\" now is part of the other\
      \ side of the array.\n\n==Finding common string prefix==\nFor [[wp:incremental\
      \ encoding|incremental encoding]] you need to find the common prefix of two\
      \ strings. Usually you'd do that by comparing corresponding characters of both\
      \ strings, starting from the front, but UnrealScript is quite inefficient for\
      \ that. I found that, at least in UT2004, you could use the StrCmp() function\
      \ to compare string prefixes. Now you only need to find the largest prefix length\
      \ at which both string starts are still equal. Technically this is a searching\
      \ operation and the easy way to do it would be a linear search. But if there's\
      \ a reasonably good chance the strings have large common parts, you could even\
      \ abuse binary search for this. The following code snippet finds the largest\
      \ common prefix length of strings A and B:\n<uscript>\nlocal int Low, High,\
      \ Middle;\n\nLow = 0;\nHigh = Min(Len(A), Len(B));\nwhile (Low < High) {\n \
      \ Middle = (High + Low) / 2;\n  if (StrCmp(A, B, Middle) == 0)\n    Low = Middle\
      \ + 1;\n  else\n    High = Middle;\n}\n</uscript>\nLooks scary? I hope so. ;-)\n\
      \n==Collapsing whitespace==\nThis code will remove leading and trailing whitespace\
      \ from a string and simultaneously collapse any sequence of space and tab characters\
      \ into a single space:\n<uscript>\nstatic final function string CollapseAndTrimWhitespace(string\
      \ S)\n{\n  S = \" \" $ Repl(S, Chr(9), \" \") $ \" \"; // replace tabs with\
      \ spaces and enclose in space chars for collapsing\n  while (InStr(S, \"  \"\
      ) != -1) { // need whitespace collapsing?\n    S = Repl(S, \"  \", \" \"); //\
      \ collapse two adjacent spaces to a single space\n  }\n  return Mid(S, 1, Len(S)\
      \ - 2); // remove enclosing space chars\n}\n</uscript>\nI know, InStr() and\
      \ Repl() are really linear time operations, causing the algorithm to be something\
      \ like O(n*logn). But as usual UnrealScript's slowness adds a high constant\
      \ part to them, essentially making them constant time for reasonably short strings\
      \ (up to a few hundred characters), and the whole function sort-of O(logn).\n\
      \n==Integer modulo operator==\nThe [[wp:modulo operation|modulo]] operator <code>%</code>\
      \ in UnrealScript is only defined for float operands, which can cause bad rounding\
      \ errors if you use it with large int values. The following code [[wp:Operator\
      \ overloading|overloads]] the modulo operator for int values:\n<uscript>\nstatic\
      \ final operator(18) int % (int A, int B)\n{\n  return A - (A / B) * B;\n}\n\
      </uscript>\nThis has similar semantics as the float modulo operator, i.e. it\
      \ may return negative values if you pass in negative operands. Note that (A/B)*B\
      \ is not the same as A due to integer division dropping any potential remainder.\n\
      \n==ArcTan function==\nNeed the standard one-parameter version of the [[wp:arctan|atan]]\
      \ function and your version of the game only provides the [[wp:atan2|two-parameter\
      \ version]]? Try this one:\n<uscript>\nstatic final function float ArcTan(float\
      \ A)\n{\n  return ATan(1, A);\n}\n</uscript>\n\n==Vector magic==\n===Distance\
      \ of point from line===\nThis one might be useful e.g. for determining by how\
      \ much a shot missed a target:\n<uscript>\ndist = VSize(Normal(ShotDir) cross\
      \ (TargetLocation - ShotStart));\n</uscript>\nThis formula relies on the fact\
      \ that the length of the [[wp:cross product|cross product]] is the product of\
      \ the two vector lengths times the [[wp:sine|sine]] of the angle between them.\
      \ Note that the resulting vector of the cross product itself is actually orthogonal\
      \ to both the shot direction and the vector pointing from the shot start to\
      \ the target direction.\n\n===In front or behind?===\nYou'd probably use this\
      \ one in combination with the above to figure out whether the target was actually\
      \ shot at:\n<uscript>\nbInFront = (ShotDir dot (TargetLocation - ShotStart))\
      \ > 0;\n</uscript>\nIf you normalize both vectors, the [[wp:dot product|dot\
      \ product]] actually gives you the [[wp:cosine|cosine]] of the angle between\
      \ them. If you don't, the cosine is multiplied by the product of the two vectors'\
      \ lengths. Either way, the cosine is positive for angles smaller than 90° and\
      \ negative for angles greater than 90°.\n\n===Closest point on a line===\nIf\
      \ you want to know the point on a line that is closest to some other point (usually)\
      \ not on the line, you need to project the other point onto the line:\n<uscript>\n\
      ClosestPoint = ShotStart + Normal(ShotDir) * (Normal(ShotDir) dot (TargetLocation\
      \ - ShotStart));\n</uscript>\nYou can obviously skip normalization if the shot\
      \ direction already is a [[wp:unit vector|unit vector]].\n\n===Vector to Rotator\
      \ alternative===\nThe following code converts a vector to a rotator. Instead\
      \ of the yaw-then-pitch order of the [[Typecasting#vector to...|vector->rotator\
      \ typecast]], this conversion sort-of applies pitch-then-yaw order. Short explanation:\n\
      * The typecast calculates a rotator that gets from vect(1,0,0) to the target\
      \ direction by first rotating around the vertical axis, then around the resulting\
      \ left/right axis.\n* This conversion calculates another rotator that gets from\
      \ vect(1,0,0) to the target direction, but it first rotates around the left/right\
      \ axis and then around the resulting upward axis.\n<uscript>\nlocal vector Dir;\
      \ // input\nlocal rotator Result;\nlocal vector X, Y, Z; // temp\n\nZ = Normal(Dir\
      \ cross vect(0,1,0));\nX = Normal(Dir);\nY = Z cross X;\nResult = OrthoRotation(X,\
      \ Y, Z);\n</uscript>\n\n==Float to int cast==\nThis isn't your standard typecast.\
      \ Sometimes you want to access the actual bits a float value consist of, e.g.\
      \ to send it via a TcpLink or UdpLink. UnrealScript doesn't provide any function\
      \ to do that, but prior to Unreal Engine 3 it is possible to exploit loopholes\
      \ in the compiler to achieve this kind of bitwise conversion.\n\nTo convert\
      \ between float and int this way, you need two classes. Even if you only want\
      \ to convert in one direction, you still need both. Don't ask how this works,\
      \ I won't explain. And again: This will only work in Unreal Engine 1 and 2,\
      \ because the compiler no longer allows it in Unreal Engine 3.\n\n<uscript>\n\
      class IntConverter extends Object abstract;\n\nvar int Value;\n\nstatic final\
      \ function float ToFloat(int value)\n{\n    default.Value = value;\n    return\
      \ Super(FloatConverter).ReturnFloat();\n}\n\nstatic final function int ReturnInt()\n\
      {\n    return default.Value;\n}\n</uscript>\n\n<uscript>\nclass FloatConverter\
      \ extends Object abstract;\n\nvar float Value;\n\nstatic final function int\
      \ ToInt(float value)\n{\n    default.Value = value;\n    return Super(IntConverter).ReturnInt();\n\
      }\n\nstatic final function float ReturnFloat()\n{\n    return default.Value;\n\
      }\n</uscript>\nTo use the conversion, you simply call the static ToInt or ToFloat\
      \ method:\n<uscript>\nlocal float f;\nlocal int i;\n\nf = 123.45;\nlog(f @ class'FloatConverter'.static.ToInt(f));\n\
      \ni = 12345;\nlog(i @ class'IntConverter'.static.ToFloat(i));\n</uscript>\n\n\
      \n\n{{DEFAULTSORT:{{SUBPAGENAME}}}}\n[[Category:UnrealScript utils]]"
  properties:
  - name: "defaultsort"
    value: "Random useful code snippets"
  revId: 45928
name: "User:Wormbo/Random useful code snippets"
revision:
  revid: 45928
  parentid: 45358
  user: "Wormbo"
  timestamp: 1389704714.000000000
  comment: "/* Vector magic */ alternate vector->rotator conversion"
timestamp: 1668761031.937001000
