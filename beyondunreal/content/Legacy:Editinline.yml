---
parse:
  title: "Legacy:Editinline"
  text:
    text: "<p>The editinline <a href=\"/Legacy:UnrealScript\" title=\"Legacy:UnrealScript\"\
      >UnrealScript</a> keywords are used by the editor to make editing much more\
      \ convenient for the mapper. If a property with editinline is selected in the\
      \ <a href=\"/Legacy:Actor_Properties_Window\" title=\"Legacy:Actor Properties\
      \ Window\">Actor Properties Window</a> it can be expanded to edit that actors\
      \ properties within the same actor property window. Without editinline only\
      \ the reference to the actor will be visible. A good example of this is in the\
      \ <a href=\"/Legacy:Emitter\" title=\"Legacy:Emitter\">Emitter</a> class, or\
      \ in the KParams of any actor. (Note that both of those examples are actually\
      \ <b>editinlinenew</b> examples. <b>Editinline</b> without the <b>new</b> will\
      \ allow you to edit the class that the variable in question refers to, but will\
      \ not allow you to create an instance of that class from within the <a href=\"\
      /Legacy:Actor_Properties_Window\" title=\"Legacy:Actor Properties Window\">Actor\
      \ Properties Window</a>.)</p>\n<p></p>\n<div id=\"toc\" class=\"toc\">\n<div\
      \ id=\"toctitle\">\n<h2>Contents</h2>\n</div>\n<ul>\n<li class=\"toclevel-1\
      \ tocsection-1\"><a href=\"#Variables\"><span class=\"tocnumber\">1</span> <span\
      \ class=\"toctext\">Variables</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"\
      ><a href=\"#Classes\"><span class=\"tocnumber\">2</span> <span class=\"toctext\"\
      >Classes</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Related_Topics\"\
      ><span class=\"tocnumber\">3</span> <span class=\"toctext\">Related Topics</span></a></li>\n\
      <li class=\"toclevel-1 tocsection-4\"><a href=\"#Discussion\"><span class=\"\
      tocnumber\">4</span> <span class=\"toctext\">Discussion</span></a></li>\n</ul>\n\
      </div>\n<p></p>\n<h2><span class=\"mw-headline\" id=\"Variables\">Variables</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Editinline?section=1\" title=\"Edit section: Variables\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<div dir=\"\
      ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\"\
      >\n<pre class=\"de1\"><span class=\"kw1\">var</span> editinline SomeClass SomeInstanceofSaid<span\
      \ class=\"re0\">Class</span>&lt; SEMI &gt;\n<span class=\"kw1\">var</span> editinlineuse\
      \ <span class=\"kw5\">Material</span> SomeMaterialIllUseatSomepoint;</pre></div>\n\
      </div>\n<dl>\n<dt>editinline&#160;</dt>\n<dd>As described above, editinline\
      \ allows you to edit an actor within the <a href=\"/Legacy:Actor_Properties_Window\"\
      \ title=\"Legacy:Actor Properties Window\">Actor Properties Window</a> of another\
      \ actor by expanding the refence of any variable pointing to the latter actor.\
      \ If the class of variable has editinlinenew in it's class definition, a \"\
      new\" button will appear in the <a href=\"/Legacy:Actor_Properties_Window\"\
      \ title=\"Legacy:Actor Properties Window\">Actor Properties Window</a> if the\
      \ variable's reference is \"None.\" Clicking said button will create an instance\
      \ of the class and allow you to edit that. If subclasses of the class of the\
      \ variable reference are loaded in the editor a drop-down box will be provided\
      \ to let you choose which class you would like to instantiate. After the class\
      \ has been instantiated you can edit it like any other editinlinenew actor.\
      \ It is important to use this only for variable references, otherwise you risk\
      \ crashing UnrealEd.</dd>\n</dl>\n<dl>\n<dt>editinlineuse&#160;</dt>\n<dd>Similar\
      \ to editinline, editinlineuse will also add a \"use\" button for the property.\
      \ This will only work for <a href=\"/Legacy:Material\" title=\"Legacy:Material\"\
      >Materials</a>, <a href=\"/Legacy:StaticMesh\" title=\"Legacy:StaticMesh\" class=\"\
      mw-redirect\">StaticMeshes</a>, <a href=\"/Legacy:Sound\" title=\"Legacy:Sound\"\
      >Sounds</a> and anything else UnrealEd has a browser for, probably with the\
      \ exception of the class browser. Everything else will crash UnrealEd.</dd>\n\
      </dl>\n<dl>\n<dt>editinlinenotify&#160;</dt>\n<dd>This will notify the outer\
      \ object if the property is changed.:\n<div dir=\"ltr\" class=\"mw-geshi mw-code\
      \ mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"de1\"\
      ><span class=\"kw1\">struct</span> <span class=\"kw1\">native</span> NotifyInfo</pre></div>\n\
      </div>\n</dd>\n</dl>\n<p><span class=\"br0\">{</span> \t<span class=\"kw1\"\
      >var</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"\
      kw5\">FLOAT</span> NotifyFrame; \t<span class=\"kw1\">var</span><span class=\"\
      br0\">(</span><span class=\"br0\">)</span> editinlinenotify AnimNotify Notify;\
      \ \t<span class=\"kw1\">var</span> <span class=\"kw5\">INT</span> OldRevisionNum;</p>\n\
      <p><span class=\"br0\">}</span>;</p>\n<h2><span class=\"mw-headline\" id=\"\
      Classes\">Classes</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Editinline?section=2\" title=\"Edit section:\
      \ Classes\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <div dir=\"ltr\" class=\"mw-geshi mw-code mw-content-ltr\">\n<div class=\"uscript\
      \ source-uscript\">\n<pre class=\"de1\"><span class=\"kw1\">class</span> <span\
      \ class=\"kw5\">FadeColor</span> <span class=\"kw1\">extends</span> <span class=\"\
      kw5\">ConstantMaterial</span> <span class=\"kw1\">native</span>\teditinlinenew;\n\
      <span class=\"kw1\">class</span> <span class=\"kw5\">Texture</span> <span class=\"\
      kw1\">extends</span> <span class=\"kw5\">BitmapMaterial</span> safereplace <span\
      \ class=\"kw1\">native</span> noteditinlinenew dontcollapsecategories <span\
      \ class=\"kw1\">noexport</span>;</pre></div>\n</div>\n<dl>\n<dt>editinlinenew&#160;</dt>\n\
      <dd>This tag signifies that a \"new\" button should be added when this class\
      \ is used as a variable type with the modifier editinline. See above for details.\
      \ Note that classes that are subclasses of this should not have editinlinenew\
      \ set.</dd>\n</dl>\n<dl>\n<dt>noteditinlinenew&#160;</dt>\n<dd>Editinlinenew\
      \ is inherited by the subclasses of the class with editinlinenew defined. This\
      \ can be overridden through the use of this modifier.</dd>\n</dl>\n<h2><span\
      \ class=\"mw-headline\" id=\"Related_Topics\">Related Topics</span><span class=\"\
      mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Editinline?section=3\"\
      \ title=\"Edit section: Related Topics\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<ul>\n<li><a href=\"/Legacy:Class_Syntax\" title=\"Legacy:Class\
      \ Syntax\">Class Syntax</a></li>\n<li><a href=\"/Legacy:Variable_Syntax\" title=\"\
      Legacy:Variable Syntax\">Variable Syntax</a></li>\n<li><a href=\"/Legacy:Displaying_Variables_In_UnrealEd\"\
      \ title=\"Legacy:Displaying Variables In UnrealEd\">Displaying Variables In\
      \ UnrealEd</a></li>\n<li><a href=\"/Legacy:Add_An_Inline_Object\" title=\"Legacy:Add\
      \ An Inline Object\">Add An Inline Object</a> in the <a href=\"/Legacy:UnrealEd_Interface\"\
      \ title=\"Legacy:UnrealEd Interface\" class=\"mw-redirect\">UnrealEd Interface</a></li>\n\
      </ul>\n<h2><span class=\"mw-headline\" id=\"Discussion\">Discussion</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Editinline?section=4\" title=\"Edit section: Discussion\"\
      >edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<p><b>Mychaeel:</b>\
      \ Apparently <code>editinline</code> doesn't work with Actor-derived classes;\
      \ or at least, the \"New\" button in the <a href=\"/Legacy:Add_An_Inline_Object\"\
      \ title=\"Legacy:Add An Inline Object\">UnrealEd property sheet</a> doesn't.\
      \ (There are reasons why this seems plausible, but there's no reason to assume\
      \ that it <i>couldn't possibly</i> be working. Plus, Epic or Digital Extremes\
      \ use an <code>editinline</code> ZoneInfo array themselves in <a href=\"/Legacy:ZoneInfo\"\
      \ title=\"Legacy:ZoneInfo\">ZoneInfo</a>.)</p>\n<dl>\n<dd>The effect I'm seeing\
      \ on an Actor-derived <code>editinline</code> object is that I can use the \"\
      New\" button without problems; the actor instance appears, and I can set its\
      \ properties as I like. However, the actor simply disappears in the game – its\
      \ reference in the parent actor is set to <code>None</code>, and the actor itself\
      \ is completely gone.</dd>\n<dd>Does anybody have an idea why this is happening,\
      \ and whether it can be worked around? (Background: I'd like to have replication,\
      \ states and the \"Tick\" event in my <code>editinline</code> class.)</dd>\n\
      </dl>\n<p><b>Mysterial:</b> <code>editinline</code> just specifies that you\
      \ can expand a property of that actor's class to edit it from the property editor.\
      \ For example, in the case you mentioned, if you are editing the properties\
      \ of a <a href=\"/Legacy:ZoneInfo\" title=\"Legacy:ZoneInfo\">ZoneInfo</a>,\
      \ you can expand an element of the ManualExcludes array and edit the ZoneInfo\
      \ it points to, right from within the <a href=\"/Legacy:ZoneInfo\" title=\"\
      Legacy:ZoneInfo\">ZoneInfo</a>'s property window. The presence of a \"New\"\
      \ option there is probably a bug, since that's what <code>editinlinenew</code>\
      \ is supposed to do. In any case, <code>editinlinenew</code> is not supported\
      \ for Actor-derived classes. I'm somewhat surprised it doesn't crash the editor.</p>\n\
      <p><b>Solid Snake:</b> Yes, I've found this rather annoying. It appears that\
      \ you must base the classes of 'Object'. I'll assume for proper replication,\
      \ you'll need to use the parent actor, which can be annoying since it's not\
      \ really OOP compliant.</p>\n<hr />\n<p><b>Mychaeel:</b> More <code>editinlinenew</code>\
      \ trouble: I've defined a class \"within SomeOuterClass\" to be used with <code>editinlinenew</code>.\
      \ UnrealEd crashes when I try to create a new instance of that class, giving\
      \ me an error message \"Object MyInnerClass None created in Package instead\
      \ of SomeOuterClass.\"</p>\n<dl>\n<dd>Now, the error message is descriptive\
      \ enough – I suppose I just can't have UnrealEd instantiate an inner class –\
      \ but isn't there a way around this limitation (or have I been misunderstanding\
      \ the concept of \"inner classes\" all the way)?</dd>\n</dl>\n\n<!-- \nNewPP\
      \ limit report\nCPU time usage: 0.079 seconds\nReal time usage: 0.081 seconds\n\
      Preprocessor visited node count: 42/1000000\nPreprocessor generated node count:\
      \ 80/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size:\
      \ 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function\
      \ count: 0/100\n-->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n\
      100.00%    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key\
      \ wiki:pcache:idhash:1152-0!*!0!!en!*!* and timestamp 20221117160831 and revision\
      \ id 3018\n -->\n"
  categories: []
  links:
  - ns: 100
    exists: true
    name: "Legacy:ZoneInfo"
  - ns: 100
    exists: true
    name: "Legacy:Actor Properties Window"
  - ns: 100
    exists: true
    name: "Legacy:Add An Inline Object"
  - ns: 100
    exists: true
    name: "Legacy:Displaying Variables In UnrealEd"
  - ns: 100
    exists: true
    name: "Legacy:Emitter"
  - ns: 100
    exists: true
    name: "Legacy:UnrealScript"
  - ns: 100
    exists: true
    name: "Legacy:Material"
  - ns: 100
    exists: true
    name: "Legacy:StaticMesh"
  - ns: 100
    exists: true
    name: "Legacy:UnrealEd Interface"
  - ns: 100
    exists: true
    name: "Legacy:Sound"
  - ns: 100
    exists: true
    name: "Legacy:Variable Syntax"
  - ns: 100
    exists: true
    name: "Legacy:Class Syntax"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "Variables"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Editinline"
    byteoffset: 828
    anchor: "Variables"
  - toclevel: 1
    level: "2"
    line: "Classes"
    number: "2"
    index: "2"
    fromtitle: "Legacy:Editinline"
    byteoffset: 2433
    anchor: "Classes"
  - toclevel: 1
    level: "2"
    line: "Related Topics"
    number: "3"
    index: "3"
    fromtitle: "Legacy:Editinline"
    byteoffset: 3053
    anchor: "Related_Topics"
  - toclevel: 1
    level: "2"
    line: "Discussion"
    number: "4"
    index: "4"
    fromtitle: "Legacy:Editinline"
    byteoffset: 3347
    anchor: "Discussion"
  displaytitle: "Legacy:Editinline"
  iwlinks: []
  wikitext:
    text: "The editinline [[Legacy:UnrealScript|UnrealScript]] keywords are used by\
      \ the editor to make editing much more convenient for the mapper. If a property\
      \ with editinline is selected in the [[Legacy:Actor Properties Window|Actor\
      \ Properties Window]] it can be expanded to edit that actors properties within\
      \ the same actor property window. Without editinline only the reference to the\
      \ actor will be visible. A good example of this is in the [[Legacy:Emitter|Emitter]]\
      \ class, or in the KParams of any actor. (Note that both of those examples are\
      \ actually '''editinlinenew''' examples. '''Editinline''' without the '''new'''\
      \ will allow you to edit the class that the variable in question refers to,\
      \ but will not allow you to create an instance of that class from within the\
      \ [[Legacy:Actor Properties Window|Actor Properties Window]].)\n\n==Variables==\n\
      \n<uscript>\nvar editinline SomeClass SomeInstanceofSaidClass;\nvar editinlineuse\
      \ Material SomeMaterialIllUseatSomepoint; \n</uscript>\n\n; editinline : As\
      \ described above, editinline allows you to edit an actor within the [[Legacy:Actor\
      \ Properties Window|Actor Properties Window]] of another actor by expanding\
      \ the refence of any variable pointing to the latter actor. If the class of\
      \ variable has editinlinenew in it's class definition, a \"new\" button will\
      \ appear in the [[Legacy:Actor Properties Window|Actor Properties Window]] if\
      \ the variable's reference is \"None.\" Clicking said button will create an\
      \ instance of the class and allow you to edit that. If subclasses of the class\
      \ of the variable reference are loaded in the editor a drop-down box will be\
      \ provided to let you choose which class you would like to instantiate. After\
      \ the class has been instantiated you can edit it like any other editinlinenew\
      \ actor. It is important to use this only for variable references, otherwise\
      \ you risk crashing UnrealEd.\n\n; editinlineuse : Similar to editinline, editinlineuse\
      \ will also add a \"use\" button for the property. This will only work for [[Legacy:Material|Material]]s,\
      \ [[Legacy:StaticMesh|StaticMesh]]es, [[Legacy:Sound|Sound]]s and anything else\
      \ UnrealEd has a browser for, probably with the exception of the class browser.\
      \ Everything else will crash UnrealEd.\n\n; editinlinenotify : This will notify\
      \ the outer object if the property is changed.: <uscript>\nstruct native NotifyInfo\n\
      {\n\tvar() FLOAT NotifyFrame;\n\tvar() editinlinenotify AnimNotify Notify;\n\
      \tvar INT OldRevisionNum;\n};\n</uscript>\n\n==Classes==\n\n<uscript>\nclass\
      \ FadeColor extends ConstantMaterial native\teditinlinenew;\nclass Texture extends\
      \ BitmapMaterial safereplace native noteditinlinenew dontcollapsecategories\
      \ noexport;\n</uscript>\n\n; editinlinenew : This tag signifies that a \"new\"\
      \ button should be added when this class is used as a variable type with the\
      \ modifier editinline. See above for details. Note that classes that are subclasses\
      \ of this should not have editinlinenew set.\n\n; noteditinlinenew : Editinlinenew\
      \ is inherited by the subclasses of the class with editinlinenew defined. This\
      \ can be overridden through the use of this modifier.\n\n==Related Topics==\n\
      * [[Legacy:Class Syntax|Class Syntax]]\n* [[Legacy:Variable Syntax|Variable\
      \ Syntax]]\n* [[Legacy:Displaying Variables In UnrealEd|Displaying Variables\
      \ In UnrealEd]]\n* [[Legacy:Add An Inline Object|Add An Inline Object]] in the\
      \ [[Legacy:UnrealEd Interface|UnrealEd Interface]]\n\n==Discussion==\n\n'''Mychaeel:'''\
      \ Apparently <code>editinline</code> doesn't work with Actor-derived classes;\
      \ or at least, the \"New\" button in the [[Legacy:Add An Inline Object|UnrealEd\
      \ property sheet]] doesn't.  (There are reasons why this seems plausible, but\
      \ there's no reason to assume that it ''couldn't possibly'' be working.  Plus,\
      \ Epic or Digital Extremes use an <code>editinline</code> ZoneInfo array themselves\
      \ in [[Legacy:ZoneInfo|ZoneInfo]].)\n: The effect I'm seeing on an Actor-derived\
      \ <code>editinline</code> object is that I can use the \"New\" button without\
      \ problems; the actor instance appears, and I can set its properties as I like.\
      \  However, the actor simply disappears in the game &ndash; its reference in\
      \ the parent actor is set to <code>None</code>, and the actor itself is completely\
      \ gone.\n: Does anybody have an idea why this is happening, and whether it can\
      \ be worked around?  (Background:  I'd like to have replication, states and\
      \ the \"Tick\" event in my <code>editinline</code> class.)\n\n'''Mysterial:'''\
      \ <code>editinline</code> just specifies that you can expand a property of that\
      \ actor's class to edit it from the property editor. For example, in the case\
      \ you mentioned, if you are editing the properties of a [[Legacy:ZoneInfo|ZoneInfo]],\
      \ you can expand an element of the ManualExcludes array and edit the ZoneInfo\
      \ it points to, right from within the [[Legacy:ZoneInfo|ZoneInfo]]'s property\
      \ window. The presence of a \"New\" option there is probably a bug, since that's\
      \ what <code>editinlinenew</code> is supposed to do. In any case, <code>editinlinenew</code>\
      \ is not supported for Actor-derived classes. I'm somewhat surprised it doesn't\
      \ crash the editor.\n\n'''Solid Snake:''' Yes, I've found this rather annoying.\
      \ It appears that you must base the classes of 'Object'. I'll assume for proper\
      \ replication, you'll need to use the parent actor, which can be annoying since\
      \ it's not really OOP compliant.\n\n----\n\n'''Mychaeel:''' More <code>editinlinenew</code>\
      \ trouble:  I've defined a class \"within SomeOuterClass\" to be used with <code>editinlinenew</code>.\
      \  UnrealEd crashes when I try to create a new instance of that class, giving\
      \ me an error message \"Object MyInnerClass None created in Package instead\
      \ of SomeOuterClass.\"\n: Now, the error message is descriptive enough &ndash;\
      \ I suppose I just can't have UnrealEd instantiate an inner class &ndash; but\
      \ isn't there a way around this limitation (or have I been misunderstanding\
      \ the concept of \"inner classes\" all the way)?"
  properties: []
  revId: 3018
name: "Legacy:Editinline"
revision:
  revid: 3018
  parentid: 3019
  user: "Cellgate.btcellnet.net"
  timestamp: 1105539098.000000000
  comment: "revert"
timestamp: 1668777892.063350000
