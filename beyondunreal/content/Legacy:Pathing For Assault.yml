---
parse:
  title: "Legacy:Pathing For Assault"
  text:
    text: "<p></p>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">\n<h2>Contents</h2>\n\
      </div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#General_Assault_Pathing\"\
      ><span class=\"tocnumber\">1</span> <span class=\"toctext\">General Assault\
      \ Pathing</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"\
      #ForcedPaths\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\"\
      >ForcedPaths</span></a></li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"\
      #ProscribedPaths\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\"\
      >ProscribedPaths</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"\
      #BlockedPaths\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\"\
      >BlockedPaths</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"\
      ><a href=\"#Vehicle_Assault_Pathing\"><span class=\"tocnumber\">2</span> <span\
      \ class=\"toctext\">Vehicle Assault Pathing</span></a></li>\n<li class=\"toclevel-1\
      \ tocsection-6\"><a href=\"#AI_Scripts\"><span class=\"tocnumber\">3</span>\
      \ <span class=\"toctext\">AI Scripts</span></a></li>\n</ul>\n</div>\n<p></p>\n\
      <h2><span class=\"mw-headline\" id=\"General_Assault_Pathing\">General Assault\
      \ Pathing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\"\
      >[</span><a href=\"/edit/Legacy:Pathing_For_Assault?section=1\" title=\"Edit\
      \ section: General Assault Pathing\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>First things first: NEVER use the autodoor/door actors.\
      \ They are bugged. I have noticed bots often get confused when <a href=\"/Legacy:Door\"\
      \ title=\"Legacy:Door\">Door</a>/<a href=\"/Legacy:AutoDoor\" title=\"Legacy:AutoDoor\"\
      \ class=\"mw-redirect\">AutoDoors</a> are used. Use 2 pathnodes and force a\
      \ path between them accross the door.</p>\n<p>For every single vehicle path\
      \ you have, try to have about 3 normal paths nearby. This is good for two reasons:\
      \ bots on foot will attack/defend from different directions and if the vehicle\
      \ gets off track, it can use the normal paths to find it's way back.</p>\n<p>BlockedPaths,\
      \ ForcedPaths and ProscribedPaths are your friend. Sometimes, bots just need\
      \ to be forced:</p>\n<h3><span class=\"mw-headline\" id=\"ForcedPaths\">ForcedPaths</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Pathing_For_Assault?section=2\" title=\"Edit section:\
      \ ForcedPaths\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Even if the editor doesn't make a link, you can force it yourself by first\
      \ finding out the name of the node you want the path to (Properties -&gt; Object\
      \ -&gt; Name), then selecting the node you want to make the link from and going\
      \ to it's properties. Here, go to the Navigation group and head down to ForcedPaths.\
      \ In the first item in the list, add the name of the pathnode you are forcing\
      \ a link to. The next time you rebuild there will be a yellow line between the\
      \ two nodes. This is one-way. To have it two way like a normal link, do the\
      \ same thing, starting with the second node and linking back to the first.</p>\n\
      <h3><span class=\"mw-headline\" id=\"ProscribedPaths\">ProscribedPaths</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Pathing_For_Assault?section=3\" title=\"Edit section:\
      \ ProscribedPaths\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Set them up exactly like ForcedPaths, but they tell bots that they SHOULD\
      \ NOT take this path, no matter what. This is useful as sometimes bots keep\
      \ taking some stupid route and end up stuck, confused etc. When you <a href=\"\
      /Legacy:Rebuild\" title=\"Legacy:Rebuild\">Rebuild</a>, they will be red paths.</p>\n\
      <h3><span class=\"mw-headline\" id=\"BlockedPaths\">BlockedPaths</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Pathing_For_Assault?section=4\" title=\"Edit section:\
      \ BlockedPaths\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h3>\n\
      <p>Sometimes you want bots to follow a path until something happens (a door\
      \ closes, something falls in the path). This is what blockedpaths are for. Say\
      \ you have a blast door that is shut and opens when a particular objective is\
      \ completed. Put a <a href=\"/Legacy:BlockedPath\" title=\"Legacy:BlockedPath\"\
      >BlockedPath</a> in front of it then make sure that its bBlockedPath property\
      \ (or whatever it is called) under Navigation is set to true. Seeing as though\
      \ you will already have nodes on the other side of the door, force a path from\
      \ the blocked path to one of the nodes on the other side (and back again). Set\
      \ the tag of the BlockedPath to whatever event opens the door, and when it is\
      \ triggered (when the door opens), the bBlockedPath property will be toggled\
      \ to false which lets bots know they can now go down that route.</p>\n<h2><span\
      \ class=\"mw-headline\" id=\"Vehicle_Assault_Pathing\">Vehicle Assault Pathing</span><span\
      \ class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a\
      \ href=\"/edit/Legacy:Pathing_For_Assault?section=5\" title=\"Edit section:\
      \ Vehicle Assault Pathing\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n\
      <dl>\n<dd>More: <a href=\"/Legacy:Pathing_For_Vehicles\" title=\"Legacy:Pathing\
      \ For Vehicles\">Pathing For Vehicles</a> and <a href=\"/Legacy:Pathing_2k4_Flying_Vehicles\"\
      \ title=\"Legacy:Pathing 2k4 Flying Vehicles\">Pathing 2k4 Flying Vehicles</a></dd>\n\
      </dl>\n<p>ANY objective that requires the bots to use a vehicle, even if it\
      \ is not mission-critical, should be given a VehiclePathName. You may have noticed\
      \ this property before, here's how to use it:</p>\n<p>In the GameObjective group\
      \ of the objective, there is the VehiclePathName field. Here, you enter the\
      \ name of the <i>vehicle-accessible pathnode closest to the objective they should\
      \ be trying to reach</i>.</p>\n<p>Another thing about vehicle pathing: When\
      \ vehicle Assault mapping, remember ANY navigation points can be used by vehicles\
      \ as long as bVehicleDestination (under Navigation) is true. In fact, you don't\
      \ even need RoadPathNodes at all. The only benefit of using those over normal\
      \ PathNodes is the distance they link over.</p>\n<p>Vehicle paths should be\
      \ as simple as possible: try to keep them as curves as opposed to sharp bends.\
      \ The reason is this: If you have an L-shaped bend with one pathnode, it looks\
      \ like an L to the bots. They don't slow down for it and generally crash. If\
      \ you use a lot of pathnodes close together to round off the corner (say, 5\
      \ pathnodes, 300 Unreal Units apart in a curve, making up the corner), the bots\
      \ will better judge the corner and slow down.</p>\n<p>Defensive bots will not\
      \ use their vehicles unless they see an enemy to attack with. Not by default.\
      \ It is turned off in the vehicle code. Turning it back on is a simple matter\
      \ of adding a few lines and saving it in myLevel. These scripts are like those\
      \ used in AS-Confexia. These are as so:</p>\n<div dir=\"ltr\" class=\"mw-geshi\
      \ mw-code mw-content-ltr\">\n<div class=\"uscript source-uscript\">\n<pre class=\"\
      de1\"><span class=\"kw1\">class</span> Blargh <span class=\"kw1\">extends</span>\
      \ Foo; <span class=\"co1\">//Foo can be any one of the Vehicle classes</span>\n\
      \ \n<span class=\"kw1\">var</span> <span class=\"br0\">(</span><span class=\"\
      kw9\">Vehicle</span><span class=\"br0\">)</span>\t<span class=\"kw5\">bool</span>\
      \ bDefensiveUse;\n \n<span class=\"kw1\">function</span> <span class=\"kw4\"\
      >PreBeginPlay</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n\
      <span class=\"br0\">{</span>\n\tbDefensive <span class=\"sy0\">=</span> bDefensiveUse;\n\
      \t<span class=\"kw6\">Super</span>.<span class=\"kw4\">PreBeginPlay</span><span\
      \ class=\"br0\">(</span><span class=\"br0\">)</span>;\n<span class=\"br0\">}</span>\n\
      \ \n<span class=\"kw1\">defaultproperties</span>\n<span class=\"br0\">{</span>\n\
      \     bDefensiveUse<span class=\"sy0\">=</span><span class=\"kw6\">True</span>\n\
      <span class=\"br0\">}</span></pre></div>\n</div>\n<h2><span class=\"mw-headline\"\
      \ id=\"AI_Scripts\">AI Scripts</span><span class=\"mw-editsection\"><span class=\"\
      mw-editsection-bracket\">[</span><a href=\"/edit/Legacy:Pathing_For_Assault?section=6\"\
      \ title=\"Edit section: AI Scripts\">edit</a><span class=\"mw-editsection-bracket\"\
      >]</span></span></h2>\n<p>The AI scripts system is bugged. I noticed this early\
      \ in the making of HighRise. Here is the way it works:</p>\n<p>In an Assault\
      \ map, every AI script <i>must</i> be linked to an objective. The AI in UT2004\
      \ is very intelligent, but not intelligent enough to be able to decipher a mapper's\
      \ random tags and events.&#160;:p</p>\n<p>You do this: The group of AI scripts\
      \ you want defenders to use when they defend an objective you give the same\
      \ tag to. MyTag. Then in the properties of the objective they are to defend,\
      \ go to the GameObjective group. Look for the DefenseScriptTags field. Enter\
      \ MyTag (subbing in your actual tag obviously). The bots will now know what\
      \ to do come that objective.</p>\n<p>This must be done for every single AI script\
      \ in the level, there cannot be one single one that is not attached to an objective\
      \ of some kind or <i>all of them will fail</i>.</p>\n\n<!-- \nNewPP limit report\n\
      CPU time usage: 0.052 seconds\nReal time usage: 0.133 seconds\nPreprocessor\
      \ visited node count: 32/1000000\nPreprocessor generated node count: 56/1000000\n\
      Post‐expand include size: 19/2097152 bytes\nTemplate argument size: 0/2097152\
      \ bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/100\n\
      -->\n\n<!-- \nTransclusion expansion time report (%,ms,calls,template)\n100.00%\
      \    0.000      1 - -total\n-->\n\n<!-- Saved in parser cache with key wiki:pcache:idhash:2548-0!*!0!!en!*!*\
      \ and timestamp 20221118040052 and revision id 6093\n -->\n"
  categories:
  - sortkey: "Pathing For Assault"
    name: "Legacy_Mapping"
  links:
  - ns: 100
    exists: true
    name: "Legacy:Door"
  - ns: 100
    exists: true
    name: "Legacy:Pathing 2k4 Flying Vehicles"
  - ns: 100
    exists: true
    name: "Legacy:Pathing For Vehicles"
  - ns: 100
    exists: true
    name: "Legacy:BlockedPath"
  - ns: 100
    exists: true
    name: "Legacy:AutoDoor"
  - ns: 100
    exists: true
    name: "Legacy:Rebuild"
  templates: []
  images: []
  externallinks: []
  sections:
  - toclevel: 1
    level: "2"
    line: "General Assault Pathing"
    number: "1"
    index: "1"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 0
    anchor: "General_Assault_Pathing"
  - toclevel: 2
    level: "3"
    line: "ForcedPaths"
    number: "1.1"
    index: "2"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 633
    anchor: "ForcedPaths"
  - toclevel: 2
    level: "3"
    line: "ProscribedPaths"
    number: "1.2"
    index: "3"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 1262
    anchor: "ProscribedPaths"
  - toclevel: 2
    level: "3"
    line: "BlockedPaths"
    number: "1.3"
    index: "4"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 1552
    anchor: "BlockedPaths"
  - toclevel: 1
    level: "2"
    line: "Vehicle Assault Pathing"
    number: "2"
    index: "5"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 2357
    anchor: "Vehicle_Assault_Pathing"
  - toclevel: 1
    level: "2"
    line: "AI Scripts"
    number: "3"
    index: "6"
    fromtitle: "Legacy:Pathing_For_Assault"
    byteoffset: 4231
    anchor: "AI_Scripts"
  displaytitle: "Legacy:Pathing For Assault"
  iwlinks: []
  wikitext:
    text: "==General Assault Pathing==\n\nFirst things first: NEVER use the autodoor/door\
      \ actors. They are bugged. I have noticed bots often get confused when [[Legacy:Door|Door]]/[[Legacy:AutoDoor|AutoDoor]]s\
      \ are used. Use 2 pathnodes and force a path between them accross the door.\
      \ \n\nFor every single vehicle path you have, try to have about 3 normal paths\
      \ nearby. This is good for two reasons: bots on foot will attack/defend from\
      \ different directions and if the vehicle gets off track, it can use the normal\
      \ paths to find it's way back.\n\nBlockedPaths, ForcedPaths and ProscribedPaths\
      \ are your friend. Sometimes, bots just need to be forced:\n\n===ForcedPaths===\n\
      \nEven if the editor doesn't make a link, you can force it yourself by first\
      \ finding out the name of the node you want the path to (Properties -> Object\
      \ -> Name), then selecting the node you want to make the link from and going\
      \ to it's properties. Here, go to the Navigation group and head down to ForcedPaths.\
      \ In the first item in the list, add the name of the pathnode you are forcing\
      \ a link to. The next time you rebuild there will be a yellow line between the\
      \ two nodes. This is one-way. To have it two way like a normal link, do the\
      \ same thing, starting with the second node and linking back to the first.\n\
      \n===ProscribedPaths===\n\nSet them up exactly like ForcedPaths, but they tell\
      \ bots that they SHOULD NOT take this path, no matter what. This is useful as\
      \ sometimes bots keep taking some stupid route and end up stuck, confused etc.\
      \ When you [[Legacy:Rebuild|Rebuild]], they will be red paths.\n\n===BlockedPaths===\n\
      \nSometimes you want bots to follow a path until something happens (a door closes,\
      \ something falls in the path). This is what blockedpaths are for. Say you have\
      \ a blast door that is shut and opens when a particular objective is completed.\
      \ Put a [[Legacy:BlockedPath|BlockedPath]] in front of it then make sure that\
      \ its bBlockedPath property (or whatever it is called) under Navigation is set\
      \ to true. Seeing as though you will already have nodes on the other side of\
      \ the door, force a path from the blocked path to one of the nodes on the other\
      \ side (and back again). Set the tag of the BlockedPath to whatever event opens\
      \ the door, and when it is triggered (when the door opens), the bBlockedPath\
      \ property will be toggled to false which lets bots know they can now go down\
      \ that route.\n\n==Vehicle Assault Pathing ==\n: More: [[Legacy:Pathing For\
      \ Vehicles|Pathing For Vehicles]] and [[Legacy:Pathing 2k4 Flying Vehicles|Pathing\
      \ 2k4 Flying Vehicles]]\n\nANY objective that requires the bots to use a vehicle,\
      \ even if it is not mission-critical, should be given a VehiclePathName. You\
      \ may have noticed this property before, here's how to use it: \n\nIn the GameObjective\
      \ group of the objective, there is the VehiclePathName field. Here, you enter\
      \ the name of the ''vehicle-accessible pathnode closest to the objective they\
      \ should be trying to reach''.\n\nAnother thing about vehicle pathing: When\
      \ vehicle Assault mapping, remember ANY navigation points can be used by vehicles\
      \ as long as bVehicleDestination (under Navigation) is true. In fact, you don't\
      \ even need RoadPathNodes at all. The only benefit of using those over normal\
      \ PathNodes is the distance they link over.\n\nVehicle paths should be as simple\
      \ as possible: try to keep them as curves as opposed to sharp bends. The reason\
      \ is this: If you have an L-shaped bend with one pathnode, it looks like an\
      \ L to the bots. They don't slow down for it and generally crash. If you use\
      \ a lot of pathnodes close together to round off the corner (say, 5 pathnodes,\
      \ 300 Unreal Units apart in a curve, making up the corner), the bots will better\
      \ judge the corner and slow down.\n\nDefensive bots will not use their vehicles\
      \ unless they see an enemy to attack with. Not by default. It is turned off\
      \ in the vehicle code. Turning it back on is a simple matter of adding a few\
      \ lines and saving it in myLevel. These scripts are like those used in AS-Confexia.\
      \ These are as so:\n\n<uscript>\nclass Blargh extends Foo; //Foo can be any\
      \ one of the Vehicle classes\n\nvar (Vehicle)\tbool bDefensiveUse;\n\nfunction\
      \ PreBeginPlay()\n{\n\tbDefensive = bDefensiveUse;\n\tSuper.PreBeginPlay();\n\
      }\n\ndefaultproperties\n{\n     bDefensiveUse=True\n}\n</uscript>\n\n==AI Scripts\
      \ ==\n\nThe AI scripts system is bugged. I noticed this early in the making\
      \ of HighRise. Here is the way it works:\n\nIn an Assault map, every AI script\
      \ ''must'' be linked to an objective. The AI in UT2004 is very intelligent,\
      \ but not intelligent enough to be able to decipher a mapper's random tags and\
      \ events. :p \n\nYou do this: The group of AI scripts you want defenders to\
      \ use when they defend an objective you give the same tag to. MyTag. Then in\
      \ the properties of the objective they are to defend, go to the GameObjective\
      \ group. Look for the DefenseScriptTags field. Enter MyTag (subbing in your\
      \ actual tag obviously). The bots will now know what to do come that objective.\n\
      \nThis must be done for every single AI script in the level, there cannot be\
      \ one single one that is not attached to an objective of some kind or ''all\
      \ of them will fail''.\n\n[[Category:Legacy Mapping|{{PAGENAME}}]]"
  properties: []
  revId: 6093
name: "Legacy:Pathing For Assault"
revision:
  revid: 6093
  parentid: 6094
  user: "Blip2"
  timestamp: 1170246420.000000000
  comment: "*"
timestamp: 1668784534.530478000
